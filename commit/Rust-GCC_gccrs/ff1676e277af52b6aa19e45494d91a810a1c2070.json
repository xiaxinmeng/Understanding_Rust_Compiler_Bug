{"sha": "ff1676e277af52b6aa19e45494d91a810a1c2070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxNjc2ZTI3N2FmNTJiNmFhMTllNDU0OTRkOTFhODEwYTFjMjA3MA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-27T21:04:48Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-28T11:47:44Z"}, "message": "Reference types can contain TypeParameters\n\nTypeParameters can be behind ReferenceTypes which needs substitution but\nthese types cannot hold substitution mappings.\n\nFixes #396", "tree": {"sha": "297e91f9813c753bca6e1b3776b717f36babf872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/297e91f9813c753bca6e1b3776b717f36babf872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff1676e277af52b6aa19e45494d91a810a1c2070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1676e277af52b6aa19e45494d91a810a1c2070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1676e277af52b6aa19e45494d91a810a1c2070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1676e277af52b6aa19e45494d91a810a1c2070/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62bcc93ece6cda0dec8803f66b5a45005089e8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62bcc93ece6cda0dec8803f66b5a45005089e8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62bcc93ece6cda0dec8803f66b5a45005089e8ab"}], "stats": {"total": 94, "additions": 87, "deletions": 7}, "files": [{"sha": "23105d6b1b08a85e85c75254e0933dd486429ed3", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=ff1676e277af52b6aa19e45494d91a810a1c2070", "patch": "@@ -153,8 +153,21 @@ class SubstMapperInternal : public TyTy::TyVisitor\n       resolved = concrete;\n   }\n \n-  void visit (TyTy::InferType &) override { gcc_unreachable (); }\n+  // these don't support generic arguments but might contain a type param\n   void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n+\n+  void visit (TyTy::ReferenceType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n+  void visit (TyTy::ParamType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n+  // nothing to do for these\n+  void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n@@ -165,8 +178,6 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::ISizeType &) override { gcc_unreachable (); }\n   void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n   void visit (TyTy::CharType &) override { gcc_unreachable (); }\n-  void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n-  void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n "}, {"sha": "cc6c2f8233adca9ee7df8c995cc4b3ba3aa43c2f", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=ff1676e277af52b6aa19e45494d91a810a1c2070", "patch": "@@ -452,7 +452,8 @@ ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \t    field->get_field_type ()->set_ty_ref (argt->get_ref ());\n \t  }\n       }\n-    else if (fty->has_subsititions_defined ())\n+    else if (fty->has_subsititions_defined ()\n+\t     || fty->contains_type_parameters ())\n       {\n \tBaseType *concrete\n \t  = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -558,7 +559,7 @@ FnType::as_string () const\n     }\n \n   std::string ret_str = type->as_string ();\n-  return \"fn (\" + params_str + \") -> \" + ret_str;\n+  return \"fn\" + subst_as_string () + \" (\" + params_str + \") -> \" + ret_str;\n }\n \n BaseType *\n@@ -667,7 +668,8 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \t  fty->set_ty_ref (argt->get_ref ());\n \t}\n     }\n-  else if (fty->has_subsititions_defined ())\n+  else if (fty->needs_generic_substitutions ()\n+\t   || fty->contains_type_parameters ())\n     {\n       BaseType *concrete\n \t= Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -688,6 +690,7 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n   for (auto &param : fn->get_params ())\n     {\n       auto fty = param.second;\n+\n       bool is_param_ty = fty->get_kind () == TypeKind::PARAM;\n       if (is_param_ty)\n \t{\n@@ -718,7 +721,8 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \t      fty->set_ty_ref (argt->get_ref ());\n \t    }\n \t}\n-      else if (fty->has_subsititions_defined ())\n+      else if (fty->has_subsititions_defined ()\n+\t       || fty->contains_type_parameters ())\n \t{\n \t  BaseType *concrete\n \t    = Resolver::SubstMapperInternal::Resolve (fty, subst_mappings);\n@@ -1210,6 +1214,22 @@ ReferenceType::clone ()\n \t\t\t    get_combined_refs ());\n }\n \n+ReferenceType *\n+ReferenceType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  ReferenceType *ref = static_cast<ReferenceType *> (clone ());\n+  ref->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  // might be &T or &ADT so this needs to be recursive\n+  auto base = ref->get_base ();\n+  BaseType *concrete = Resolver::SubstMapperInternal::Resolve (base, mappings);\n+  ref->base = TyVar (concrete->get_ty_ref ());\n+\n+  return ref;\n+}\n+\n void\n ParamType::accept_vis (TyVisitor &vis)\n {\n@@ -1289,6 +1309,20 @@ ParamType::is_equal (const BaseType &other) const\n   return resolve ()->is_equal (other);\n }\n \n+ParamType *\n+ParamType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  ParamType *p = static_cast<ParamType *> (clone ());\n+\n+  SubstitutionArg arg = SubstitutionArg::error ();\n+  bool ok = mappings.get_argument_for_symbol (this, &arg);\n+  rust_assert (ok);\n+\n+  p->set_ty_ref (arg.get_tyty ()->get_ref ());\n+\n+  return p;\n+}\n+\n BaseType *\n StrType::clone ()\n {"}, {"sha": "0c8168d2beb81f7313a6d889b6be2bb1dcbb3ef7", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=ff1676e277af52b6aa19e45494d91a810a1c2070", "patch": "@@ -122,6 +122,8 @@ class BaseType\n \n   virtual bool needs_generic_substitutions () const { return false; }\n \n+  virtual bool contains_type_parameters () const { return false; }\n+\n   std::string mappings_str () const\n   {\n     std::string buffer = \"Ref: \" + std::to_string (get_ref ())\n@@ -242,6 +244,7 @@ class ErrorType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n };\n \n+class SubstitutionArgumentMappings;\n class ParamType : public BaseType\n {\n public:\n@@ -278,6 +281,18 @@ class ParamType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n+  bool contains_type_parameters () const override final\n+  {\n+    if (can_resolve ())\n+      {\n+\tauto r = resolve ();\n+\treturn r->contains_type_parameters ();\n+      }\n+    return true;\n+  }\n+\n+  ParamType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   std::string symbol;\n   HIR::GenericParam &param;\n@@ -1212,6 +1227,13 @@ class ReferenceType : public BaseType\n \n   BaseType *clone () final override;\n \n+  bool contains_type_parameters () const override final\n+  {\n+    return get_base ()->contains_type_parameters ();\n+  }\n+\n+  ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   TyVar base;\n };"}, {"sha": "dc4e935cac77429ddb91b971adde4fc4b1b259ed", "filename": "gcc/testsuite/rust.test/compile/generics21.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics21.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1676e277af52b6aa19e45494d91a810a1c2070/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics21.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics21.rs?ref=ff1676e277af52b6aa19e45494d91a810a1c2070", "patch": "@@ -0,0 +1,13 @@\n+fn callee<T>(t: &T) -> i32 {\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    32\n+}\n+\n+fn caller(t: i32) -> i32 {\n+    callee(&t)\n+}\n+\n+fn main() {\n+    let a;\n+    a = caller(123);\n+}"}]}