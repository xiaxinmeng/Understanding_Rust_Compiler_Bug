{"sha": "19c41621feaa0d990122fdf028ade9c03889677a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljNDE2MjFmZWFhMGQ5OTAxMjJmZGYwMjhhZGU5YzAzODg5Njc3YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-09-03T06:41:37Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-09-03T06:41:37Z"}, "message": "Missed that file in r213079 of 2014-07-26\n\n2014-09-03  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/61881\n        PR fortran/61888\n        PR fortran/57305\n        * gfortran.dg/sizeof_4.f90: New.\n\nFrom-SVN: r214843", "tree": {"sha": "221482b45309eb7e3d8c667d47de0cb2184a2700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/221482b45309eb7e3d8c667d47de0cb2184a2700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19c41621feaa0d990122fdf028ade9c03889677a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c41621feaa0d990122fdf028ade9c03889677a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c41621feaa0d990122fdf028ade9c03889677a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c41621feaa0d990122fdf028ade9c03889677a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "134aa83c6f547bb80346882188e457db6a268b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134aa83c6f547bb80346882188e457db6a268b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134aa83c6f547bb80346882188e457db6a268b77"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "51a8ca324b3ccd1507b71d5bb5e3ff767e8f65a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c41621feaa0d990122fdf028ade9c03889677a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c41621feaa0d990122fdf028ade9c03889677a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19c41621feaa0d990122fdf028ade9c03889677a", "patch": "@@ -1,3 +1,10 @@\n+2014-09-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/61881\n+\tPR fortran/61888\n+\tPR fortran/57305\n+\t* gfortran.dg/sizeof_4.f90: New.\n+\n 2014-09-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/builtins-1.c: Add tests for vec_ctf,"}, {"sha": "d4d8baa8d04548cba13f54c588549a9e08f4ca51", "filename": "gcc/testsuite/gfortran.dg/sizeof_4.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c41621feaa0d990122fdf028ade9c03889677a/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c41621feaa0d990122fdf028ade9c03889677a/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_4.f90?ref=19c41621feaa0d990122fdf028ade9c03889677a", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do run }\n+!\n+! PR fortran/61881\n+! PR fortran/61888\n+!\n+!\n+use iso_c_binding\n+implicit none\n+\n+call dim0(5, 4)\n+\n+call dim1([1, 2, 3], 4*3)\n+\n+call dimd(5, 4)\n+call dimd([1, 2, 3], 4*3)\n+call dimd(reshape([1, 4, 2, 3],[2, 2]), 4*4)\n+\n+call tdim1([1, 2, 3], 4*3)\n+call tdim1([1_8, 2_8, 3_8], 8*3)\n+\n+call tdimd(5, 4)\n+call tdimd([1, 2, 3], 4*3)\n+call tdimd(reshape([1, 4, 2, 3], [2, 2]), 4*4)\n+call tdimd(5_8, 8)\n+call tdimd([1_8, 2_8, 3_8], 8*3)\n+call tdimd(reshape([1_8, 4_8, 2_8, 3_8],[2,2]), 8*4)\n+\n+call cdim0(5, 4)\n+\n+call cdim1([1, 2, 3], 4*3)\n+\n+call cdimd(5, 4)\n+call cdimd([1, 2, 3], 4*3)\n+call cdimd(reshape([1,4,2,3],[2,2]), 4*4)\n+call cdimd(5_8, 8)\n+call cdimd([1_8, 2_8, 3_8], 8*3)\n+call cdimd(reshape([1_8, 4_8, 2_8, 3_8], [2, 2]), 8*4)\n+\n+contains\n+\n+subroutine dim0(x, expected_size)\n+  integer :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+  if (storage_size(x)/8 /= expected_size) call abort()\n+end\n+\n+subroutine dim1(x, expected_size)\n+  integer, dimension(:) :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+  if (storage_size(x)/8*size(x) /= expected_size) call abort()\n+end\n+\n+subroutine dimd(x, expected_size)\n+  integer, dimension(..) :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+  if (storage_size(x)/8*size(x) /= expected_size) call abort()\n+end\n+\n+subroutine cdim0(x, expected_size)\n+  class(*) :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+  if (storage_size(x)/8 /= expected_size) call abort()\n+end\n+\n+subroutine cdim1(x, expected_size)\n+  class(*), dimension(:) :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+  if (storage_size(x)/8*size(x) /= expected_size) call abort()\n+end\n+\n+subroutine cdimd(x, expected_size)\n+  class(*), dimension(..) :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+  if (storage_size(x)/8*size(x) /= expected_size) call abort()\n+end\n+\n+subroutine tdim1(x, expected_size)\n+  type(*), dimension(:) :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+end\n+\n+subroutine tdimd(x, expected_size)\n+  type(*), dimension(..) :: x\n+  integer, value :: expected_size\n+  if (sizeof(x) /= expected_size) call abort()\n+end\n+\n+end"}]}