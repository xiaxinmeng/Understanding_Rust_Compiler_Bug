{"sha": "4119b2eb4417054c98e0960a5dbe91284bdacdbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExOWIyZWI0NDE3MDU0Yzk4ZTA5NjBhNWRiZTkxMjg0YmRhY2RiZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-11-13T19:06:49Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-11-13T19:06:49Z"}, "message": "match.pd: Convert fminf<N>...\n\n[gcc]\n2017-11-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* match.pd: Convert fminf<N>, fminf<N>x, fmax<N>, and fmax<N>x\n\tinto the min/max operations for _Float<N> and _Float<N>X types.\n\n[gcc/testsuite]\n2017-11-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/float128-minmax.c: New test.\n\nFrom-SVN: r254702", "tree": {"sha": "118315af01a76320ec6758771f1b65ef8a2940bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118315af01a76320ec6758771f1b65ef8a2940bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4119b2eb4417054c98e0960a5dbe91284bdacdbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4119b2eb4417054c98e0960a5dbe91284bdacdbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4119b2eb4417054c98e0960a5dbe91284bdacdbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4119b2eb4417054c98e0960a5dbe91284bdacdbf/comments", "author": null, "committer": null, "parents": [{"sha": "2a28a7523fb1c401ecd9a3a0548e3eb807ff9c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a28a7523fb1c401ecd9a3a0548e3eb807ff9c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a28a7523fb1c401ecd9a3a0548e3eb807ff9c2e"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "fee8dca455ee806a2b1e8df0fe3a4f76d6849fbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4119b2eb4417054c98e0960a5dbe91284bdacdbf", "patch": "@@ -1,3 +1,8 @@\n+2017-11-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* match.pd: Convert fminf<N>, fminf<N>x, fmax<N>, and fmax<N>x\n+\tinto the min/max operations for _Float<N> and _Float<N>X types.\n+\n 2017-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR lto/81351"}, {"sha": "2557f08ad35e69d51e6a985886a1a33dd9d6fce4", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=4119b2eb4417054c98e0960a5dbe91284bdacdbf", "patch": "@@ -1803,7 +1803,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n \n-(for minmax (min max FMIN FMAX)\n+(for minmax (min max FMIN FMIN_FN FMAX FMAX_FN)\n  (simplify\n   (minmax @0 @0)\n   @0))\n@@ -1881,7 +1881,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && TYPE_PRECISION (TREE_TYPE (@0)) > TYPE_PRECISION (type))\n    (minmax @1 (convert @2)))))\n \n-(for minmax (FMIN FMAX)\n+(for minmax (FMIN FMIN_FN FMAX FMAX_FN)\n  /* If either argument is NaN, return the other one.  Avoid the\n     transformation if we get (and honor) a signalling NaN.  */\n  (simplify\n@@ -1898,12 +1898,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (simplify\n   (FMIN @0 @1)\n   (min @0 @1))\n+ (simplify\n+  (FMIN_FN @0 @1)\n+  (min @0 @1))\n  (simplify\n   (FMAX @0 @1)\n+  (max @0 @1))\n+ (simplify\n+  (FMAX_FN @0 @1)\n   (max @0 @1)))\n /* min (-A, -B) -> -max (A, B)  */\n-(for minmax (min max FMIN FMAX)\n-     maxmin (max min FMAX FMIN)\n+(for minmax (min max FMIN FMIN_FN FMAX FMAX_FN)\n+     maxmin (max min FMAX FMAX_FN FMIN FMAX_FN)\n  (simplify\n   (minmax (negate:s@2 @0) (negate:s@3 @1))\n   (if (FLOAT_TYPE_P (TREE_TYPE (@0))"}, {"sha": "413d7e51e81633b5487a12a8142d87120d570e88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4119b2eb4417054c98e0960a5dbe91284bdacdbf", "patch": "@@ -1,3 +1,7 @@\n+2017-11-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-minmax.c: New test.\n+\n 2017-11-13  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/pr67989.C: Add -Wno-return-type to"}, {"sha": "f8b025d66fe5da88e68df910b6bcb2c47c6813d8", "filename": "gcc/testsuite/gcc.target/powerpc/float128-minmax.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119b2eb4417054c98e0960a5dbe91284bdacdbf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax.c?ref=4119b2eb4417054c98e0960a5dbe91284bdacdbf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -ffast-math\" } */\n+\n+#ifndef TYPE\n+#define TYPE _Float128\n+#endif\n+\n+/* Test that the fminf128/fmaxf128 functions generate if/then/else and not a\n+   call.  */\n+TYPE f128_min (TYPE a, TYPE b) { return __builtin_fminf128 (a, b); }\n+TYPE f128_max (TYPE a, TYPE b) { return __builtin_fmaxf128 (a, b); }\n+\n+/* { dg-final { scan-assembler     {\\mxscmpuqp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M}       } } */"}]}