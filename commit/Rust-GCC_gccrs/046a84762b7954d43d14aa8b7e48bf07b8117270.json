{"sha": "046a84762b7954d43d14aa8b7e48bf07b8117270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2YTg0NzYyYjc5NTRkNDNkMTRhYThiN2U0OGJmMDdiODExNzI3MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-05-31T12:41:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-05-31T12:41:45Z"}, "message": "PR libstdc++/80893 Fix null dereference in vector<bool>\n\n\tPR libstdc++/80893\n\t* include/bits/stl_bvector.h (vector<bool>::_M_initialize): Avoid\n\tnull pointer dereference when size is zero.\n\t* testsuite/23_containers/vector/bool/80893.cc: New.\n\t* testsuite/util/testsuite_allocator.h (PointerBase::PointerBase):\n\tAdd non-explicit constructor from nullptr.\n\t(PointerBase::derived() const): Add const-qualified overload.\n\nFrom-SVN: r248734", "tree": {"sha": "95490e31c659a8509105b5345bf60e3ac3c33a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95490e31c659a8509105b5345bf60e3ac3c33a0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/046a84762b7954d43d14aa8b7e48bf07b8117270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046a84762b7954d43d14aa8b7e48bf07b8117270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046a84762b7954d43d14aa8b7e48bf07b8117270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046a84762b7954d43d14aa8b7e48bf07b8117270/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bde63fdea41c6c9952ab3607eb497d5c698e85c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde63fdea41c6c9952ab3607eb497d5c698e85c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde63fdea41c6c9952ab3607eb497d5c698e85c3"}], "stats": {"total": 106, "additions": 102, "deletions": 4}, "files": [{"sha": "86bb674b39d17b6ba514db1c90e763ae0b0efac2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=046a84762b7954d43d14aa8b7e48bf07b8117270", "patch": "@@ -1,3 +1,13 @@\n+2017-05-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/80893\n+\t* include/bits/stl_bvector.h (vector<bool>::_M_initialize): Avoid\n+\tnull pointer dereference when size is zero.\n+\t* testsuite/23_containers/vector/bool/80893.cc: New.\n+\t* testsuite/util/testsuite_allocator.h (PointerBase::PointerBase):\n+\tAdd non-explicit constructor from nullptr.\n+\t(PointerBase::derived() const): Add const-qualified overload.\n+\n 2017-05-20  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/80737"}, {"sha": "78195c1295deccf7e96d9a318ecb996fee3619a3", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=046a84762b7954d43d14aa8b7e48bf07b8117270", "patch": "@@ -1089,9 +1089,17 @@ template<typename _Alloc>\n     void\n     _M_initialize(size_type __n)\n     {\n-      _Bit_pointer __q = this->_M_allocate(__n);\n-      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);\n-      this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);\n+      if (__n)\n+\t{\n+\t  _Bit_pointer __q = this->_M_allocate(__n);\n+\t  this->_M_impl._M_end_of_storage = __q + _S_nword(__n);\n+\t  this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);\n+\t}\n+      else\n+\t{\n+\t  this->_M_impl._M_end_of_storage = _Bit_pointer();\n+\t  this->_M_impl._M_start = iterator(0, 0);\n+\t}\n       this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);\n     }\n "}, {"sha": "0545b38e36059cfc4c5a66c96f033b8fc72076e0", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/80893.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F80893.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F80893.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2F80893.cc?ref=046a84762b7954d43d14aa8b7e48bf07b8117270", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// libstdc++/80893\n+\n+#include <vector>\n+#include <testsuite_allocator.h>\n+\n+struct DereferencedInvalidPointer { };\n+\n+// User-defined pointer type that throws if a null pointer is dereferenced.\n+template<typename T>\n+struct Pointer : __gnu_test::PointerBase<Pointer<T>, T>\n+{\n+  using __gnu_test::PointerBase<Pointer<T>, T>::PointerBase;\n+\n+  T& operator*() const\n+  {\n+    if (!this->value)\n+      throw DereferencedInvalidPointer();\n+    return *this->value;\n+  }\n+};\n+\n+// Minimal allocator using Pointer<T>\n+template<typename T>\n+struct Alloc\n+{\n+  typedef T value_type;\n+  typedef Pointer<T> pointer;\n+\n+  Alloc() = default;\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+\n+  pointer allocate(std::size_t n)\n+  {\n+    if (n)\n+      return pointer(std::allocator<T>().allocate(n));\n+    return nullptr;\n+  }\n+\n+  void deallocate(pointer p, std::size_t n)\n+  {\n+    if (n)\n+      std::allocator<T>().deallocate(p.value, n);\n+  }\n+};\n+\n+template<typename T>\n+bool operator==(Alloc<T>, Alloc<T>) { return true; }\n+\n+template<typename T>\n+bool operator!=(Alloc<T>, Alloc<T>) { return false; }\n+\n+int main()\n+{\n+  std::vector<bool, Alloc<bool>> v(0);\n+  std::vector<bool, Alloc<bool>> w(v);\n+}"}, {"sha": "56c27089e8432c204d152f5e79407e3cd0d3b743", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046a84762b7954d43d14aa8b7e48bf07b8117270/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=046a84762b7954d43d14aa8b7e48bf07b8117270", "patch": "@@ -570,6 +570,8 @@ namespace __gnu_test\n \n       explicit PointerBase(T* p = nullptr) : value(p) { }\n \n+      PointerBase(std::nullptr_t) : value(nullptr) { }\n+\n       template<typename D, typename U,\n \t       typename = decltype(static_cast<T*>(std::declval<U*>()))>\n \tPointerBase(const PointerBase<D, U>& p) : value(p.value) { }\n@@ -603,7 +605,11 @@ namespace __gnu_test\n       }\n \n     private:\n-      Derived& derived() { return static_cast<Derived&>(*this); }\n+      Derived&\n+      derived() { return static_cast<Derived&>(*this); }\n+\n+      const Derived&\n+      derived() const { return static_cast<const Derived&>(*this); }\n     };\n \n     template<typename D, typename T>"}]}