{"sha": "6f978a2a7834fa96f1899cf41f56f15509d34cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5NzhhMmE3ODM0ZmE5NmYxODk5Y2Y0MWY1NmYxNTUwOWQzNGNmMw==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2013-10-19T05:20:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-10-19T05:20:24Z"}, "message": "re PR tree-optimization/58508 ([Missed-Optimization] Redundant vector load of \"actual\" loop invariant in loop body.)\n\n\tPR tree-optimization/58508\n\t* tree-vect-loop-manip.c (vect_loop_versioning): Hoist loop invariant\n\tstatement that contains data refs with zero-step.\n\n\t* gcc.dg/vect/pr58508.c: New test.\n\nFrom-SVN: r203842", "tree": {"sha": "a69cb657131a63bd426e8172939dd8d8c19ce8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69cb657131a63bd426e8172939dd8d8c19ce8c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f978a2a7834fa96f1899cf41f56f15509d34cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f978a2a7834fa96f1899cf41f56f15509d34cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f978a2a7834fa96f1899cf41f56f15509d34cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f978a2a7834fa96f1899cf41f56f15509d34cf3/comments", "author": null, "committer": null, "parents": [{"sha": "6b8fe121affbf6fcfe19fca582c56cb9baf9b600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8fe121affbf6fcfe19fca582c56cb9baf9b600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8fe121affbf6fcfe19fca582c56cb9baf9b600"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "bdb9e01c6012a50a16086080a6d794d029edbbc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f978a2a7834fa96f1899cf41f56f15509d34cf3", "patch": "@@ -1,3 +1,9 @@\n+2013-10-18  Cong Hou  <congh@google.com>\n+\n+\tPR tree-optimization/58508\n+\t* tree-vect-loop-manip.c (vect_loop_versioning): Hoist loop invariant\n+\tstatement that contains data refs with zero-step.\n+\n 2013-10-18  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-ssa.h: Don't include gimple-low.h, tree-ssa-address.h, sbitmap.h,"}, {"sha": "646a97ab45920dfc6ae7ba26d1e411815f2884d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f978a2a7834fa96f1899cf41f56f15509d34cf3", "patch": "@@ -1,3 +1,7 @@\n+2013-10-18  Cong Hou  <congh@google.com>\n+\n+\t* gcc.dg/vect/pr58508.c: New test.\n+\n 2013-10-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58466"}, {"sha": "6484a65c8d961b22ad5bc07b837ae6ec05df8b4d", "filename": "gcc/testsuite/gcc.dg/vect/pr58508.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c?ref=6f978a2a7834fa96f1899cf41f56f15509d34cf3", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+\n+\n+/* The GCC vectorizer generates loop versioning for the following loop\n+   since there may exist aliasing between A and B.  The predicate checks\n+   if A may alias with B across all iterations.  Then for the loop in\n+   the true body, we can assert that *B is a loop invariant so that\n+   we can hoist the load of *B before the loop body.  */\n+\n+void test1 (int* a, int* b)\n+{\n+  int i;\n+  for (i = 0; i < 100000; ++i)\n+    a[i] = *b + 1;\n+}\n+\n+/* A test case with nested loops.  The load of b[j+1] in the inner\n+   loop should be hoisted.  */\n+\n+void test2 (int* a, int* b)\n+{\n+  int i, j;\n+  for (j = 0; j < 100000; ++j)\n+    for (i = 0; i < 100000; ++i)\n+      a[i] = b[j+1] + 1;\n+}\n+\n+/* A test case with ifcvt transformation.  */\n+\n+void test3 (int* a, int* b)\n+{\n+  int i, t;\n+  for (i = 0; i < 10000; ++i)\n+    {\n+      if (*b > 0)\n+\tt = *b * 2;\n+      else\n+\tt = *b / 2;\n+      a[i] = t;\n+    }\n+}\n+\n+/* A test case in which the store in the loop can be moved outside\n+   in the versioned loop with alias checks.  Note this loop won't\n+   be vectorized.  */\n+\n+void test4 (int* a, int* b)\n+{\n+  int i;\n+  for (i = 0; i < 100000; ++i)\n+    *a += b[i];\n+}\n+\n+/* A test case in which the load and store in the loop to b\n+   can be moved outside in the versioned loop with alias checks.\n+   Note this loop won't be vectorized.  */\n+\n+void test5 (int* a, int* b)\n+{\n+  int i;\n+  for (i = 0; i < 100000; ++i)\n+    {\n+      *b += a[i];\n+      a[i] = *b;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"hoist\" 8 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1cc563c3cbbd99226254cb1ced272ecfe88a4c6e", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f978a2a7834fa96f1899cf41f56f15509d34cf3/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=6f978a2a7834fa96f1899cf41f56f15509d34cf3", "patch": "@@ -2477,6 +2477,73 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n       adjust_phi_and_debug_stmts (orig_phi, e, PHI_RESULT (new_phi));\n     }\n \n+\n+  /* Extract load statements on memrefs with zero-stride accesses.  */\n+\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n+    {\n+      /* In the loop body, we iterate each statement to check if it is a load.\n+\t Then we check the DR_STEP of the data reference.  If DR_STEP is zero,\n+\t then we will hoist the load statement to the loop preheader.  */\n+\n+      basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n+      int nbbs = loop->num_nodes;\n+\n+      for (int i = 0; i < nbbs; ++i)\n+\t{\n+\t  for (gimple_stmt_iterator si = gsi_start_bb (bbs[i]);\n+\t       !gsi_end_p (si);)\n+\t    {\n+\t      gimple stmt = gsi_stmt (si);\n+\t      stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n+\t      struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n+\n+\t      if (is_gimple_assign (stmt)\n+\t\t  && (!dr\n+\t\t      || (DR_IS_READ (dr) && integer_zerop (DR_STEP (dr)))))\n+\t\t{\n+\t\t  bool hoist = true;\n+\t\t  ssa_op_iter iter;\n+\t\t  tree var;\n+\n+\t\t  /* We hoist a statement if all SSA uses in it are defined\n+\t\t     outside of the loop.  */\n+\t\t  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n+\t\t    {\n+\t\t      gimple def = SSA_NAME_DEF_STMT (var);\n+\t\t      if (!gimple_nop_p (def)\n+\t\t\t  && flow_bb_inside_loop_p (loop, gimple_bb (def)))\n+\t\t\t{\n+\t\t\t  hoist = false;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t    }\n+\n+\t\t  if (hoist)\n+\t\t    {\n+\t\t      if (dr)\n+\t\t\tgimple_set_vuse (stmt, NULL);\n+\n+\t\t      gsi_remove (&si, false);\n+\t\t      gsi_insert_on_edge_immediate (loop_preheader_edge (loop),\n+\t\t\t\t\t\t    stmt);\n+\n+\t\t      if (dump_enabled_p ())\n+\t\t\t{\n+\t\t\t  dump_printf_loc\n+\t\t\t      (MSG_NOTE, vect_location,\n+\t\t\t       \"hoisting out of the vectorized loop: \");\n+\t\t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+\t\t\t  dump_printf (MSG_NOTE, \"\\n\");\n+\t\t\t}\n+\t\t      continue;\n+\t\t    }\n+\t\t}\n+\t      gsi_next (&si);\n+\t    }\n+\t}\n+    }\n+\n   /* End loop-exit-fixes after versioning.  */\n \n   if (cond_expr_stmt_list)"}]}