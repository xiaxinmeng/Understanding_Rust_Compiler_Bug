{"sha": "6bce1b788365835275cb9ac72c08a7f5a6e13a40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjZTFiNzg4MzY1ODM1Mjc1Y2I5YWM3MmMwOGE3ZjVhNmUxM2E0MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-02-04T19:22:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-02-04T19:22:33Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r277", "tree": {"sha": "96952d228681e6ea751a2772f3aed605f9290ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96952d228681e6ea751a2772f3aed605f9290ed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bce1b788365835275cb9ac72c08a7f5a6e13a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bce1b788365835275cb9ac72c08a7f5a6e13a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bce1b788365835275cb9ac72c08a7f5a6e13a40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bce1b788365835275cb9ac72c08a7f5a6e13a40/comments", "author": null, "committer": null, "parents": [{"sha": "91f7b55f58bf7a740c089d537ac8615cd2cd6066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f7b55f58bf7a740c089d537ac8615cd2cd6066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f7b55f58bf7a740c089d537ac8615cd2cd6066"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "6fd2315946568c892b3f170a0c8abbf634c52222", "filename": "gcc/optabs.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bce1b788365835275cb9ac72c08a7f5a6e13a40/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bce1b788365835275cb9ac72c08a7f5a6e13a40/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=6bce1b788365835275cb9ac72c08a7f5a6e13a40", "patch": "@@ -99,6 +99,18 @@ rtx gtdf2_libfunc;\n rtx gedf2_libfunc;\n rtx ltdf2_libfunc;\n rtx ledf2_libfunc;\n+rtx floatdisf_libfunc;\n+rtx floatsisf_libfunc;\n+rtx floatdidf_libfunc;\n+rtx floatsidf_libfunc;\n+rtx fixsfsi_libfunc;\n+rtx fixsfdi_libfunc;\n+rtx fixdfsi_libfunc;\n+rtx fixdfdi_libfunc;\n+rtx fixunssfsi_libfunc;\n+rtx fixunssfdi_libfunc;\n+rtx fixunsdfsi_libfunc;\n+rtx fixunsdfdi_libfunc;\n \n /* Indexed by the rtx-code for a conditional (eg. EQ, LT,...)\n    gives the gen_function to make a branch to test that condition.  */\n@@ -2508,7 +2520,7 @@ expand_float (to, from, unsignedp)\n   /* No hardware instruction available; call a library\n      to convert from SImode or DImode into SFmode or DFmode.  */\n     {\n-      char *fnname;\n+      rtx libfcn;\n       rtx insns;\n \n       to = protect_from_queue (to, 1);\n@@ -2524,18 +2536,18 @@ expand_float (to, from, unsignedp)\n       if (GET_MODE (to) == SFmode)\n \t{\n \t  if (GET_MODE (from) == SImode)\n-\t    fnname = \"__floatsisf\";\n+\t    libfcn = floatsisf_libfunc;\n \t  else if (GET_MODE (from) == DImode)\n-\t    fnname = \"__floatdisf\";\n+\t    libfcn = floatdisf_libfunc;\n \t  else\n \t    abort ();\n \t}\n       else if (GET_MODE (to) == DFmode)\n \t{\n \t  if (GET_MODE (from) == SImode)\n-\t    fnname = \"__floatsidf\";\n+\t    libfcn = floatsidf_libfunc;\n \t  else if (GET_MODE (from) == DImode)\n-\t    fnname = \"__floatdidf\";\n+\t    libfcn = floatdidf_libfunc;\n \t  else\n \t    abort ();\n \t}\n@@ -2544,8 +2556,7 @@ expand_float (to, from, unsignedp)\n \n       start_sequence ();\n \n-      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, fnname),\n-\t\t\t       0, GET_MODE (to), 1, from, GET_MODE (from));\n+      emit_library_call (libfcn, 0, GET_MODE (to), 1, from, GET_MODE (from));\n       insns = get_insns ();\n       end_sequence ();\n \n@@ -2585,7 +2596,7 @@ expand_fix (to, from, unsignedp)\n   register rtx target = to;\n   enum machine_mode fmode, imode;\n   int must_trunc = 0;\n-  char *fnname = 0;\n+  rtx libfcn = 0;\n \n   /* We first try to find a pair of modes, one real and one integer, at\n      least as wide as FROM and TO, respectively, in which we can open-code\n@@ -2711,25 +2722,25 @@ expand_fix (to, from, unsignedp)\n   else if (GET_MODE (from) == SFmode)\n     {\n       if (GET_MODE (to) == SImode)\n-\tfnname = unsignedp ? \"__fixunssfsi\" : \"__fixsfsi\";\n+\tlibfcn = unsignedp ? fixunssfsi_libfunc : fixsfsi_libfunc;\n       else if (GET_MODE (to) == DImode)\n-\tfnname = unsignedp ? \"__fixunssfdi\" : \"__fixsfdi\";\n+\tlibfcn = unsignedp ? fixunssfdi_libfunc : fixsfdi_libfunc;\n       else\n \tabort ();\n     }\n   else if (GET_MODE (from) == DFmode)\n     {\n       if (GET_MODE (to) == SImode)\n-\tfnname = unsignedp ? \"__fixunsdfsi\" : \"__fixdfsi\";\n+\tlibfcn = unsignedp ? fixunsdfsi_libfunc : fixdfsi_libfunc;\n       else if (GET_MODE (to) == DImode)\n-\tfnname = unsignedp ? \"__fixunsdfdi\" : \"__fixdfdi\";\n+\tlibfcn = unsignedp ? fixunsdfdi_libfunc : fixdfdi_libfunc;\n       else\n \tabort ();\n     }\n   else\n     abort ();\n \n-  if (fnname)\n+  if (libfcn)\n     {\n       rtx insns;\n \n@@ -2741,8 +2752,7 @@ expand_fix (to, from, unsignedp)\n \n       start_sequence ();\n \n-      emit_library_call (gen_rtx (SYMBOL_REF, Pmode, fnname),\n-\t\t\t       0, GET_MODE (to), 1, from, GET_MODE (from));\n+      emit_library_call (libfcn, 0, GET_MODE (to), 1, from, GET_MODE (from));\n       insns = get_insns ();\n       end_sequence ();\n \n@@ -3972,4 +3982,16 @@ init_optabs ()\n   gedf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__gedf2\");\n   ltdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__ltdf2\");\n   ledf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__ledf2\");\n+  floatdisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdisf\");\n+  floatsisf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatsisf\");\n+  floatdidf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatdidf\");\n+  floatsidf_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__floatsidf\");\n+  fixsfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixsfsi\");\n+  fixsfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixsfdi\");\n+  fixdfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixdfsi\");\n+  fixdfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixdfdi\");\n+  fixunssfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunssfsi\");\n+  fixunssfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunssfdi\");\n+  fixunsdfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsdfsi\");\n+  fixunsdfdi_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"__fixunsdfdi\");\n }"}]}