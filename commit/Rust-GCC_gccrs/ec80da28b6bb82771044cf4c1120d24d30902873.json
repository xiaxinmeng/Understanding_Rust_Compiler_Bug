{"sha": "ec80da28b6bb82771044cf4c1120d24d30902873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM4MGRhMjhiNmJiODI3NzEwNDRjZjRjMTEyMGQyNGQzMDkwMjg3Mw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-01-26T10:55:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-26T10:55:29Z"}, "message": "get_scos.adb (Get_SCOs): Implement new form of CS entries (multiple entries per line...\n\n2010-01-26  Robert Dewar  <dewar@adacore.com>\n\n\t* get_scos.adb (Get_SCOs): Implement new form of CS entries (multiple\n\tentries per line, one for each statement in the sequence).\n\t* par_sco.adb (Traverse_Declarations_Or_Statements): Increase array\n\tsize from 100 to 10_000 for SC_Array to avoid any real possibility of\n\toverflow. Output decisions in for loops.\n\tExclude labels from CS lines.\n\t* scos.ads: Clarify that label is not included in the entry point\n\nFrom-SVN: r156243", "tree": {"sha": "59379fcad2fca9a4afe77d876a200d2f8c352fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59379fcad2fca9a4afe77d876a200d2f8c352fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec80da28b6bb82771044cf4c1120d24d30902873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec80da28b6bb82771044cf4c1120d24d30902873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec80da28b6bb82771044cf4c1120d24d30902873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec80da28b6bb82771044cf4c1120d24d30902873/comments", "author": null, "committer": null, "parents": [{"sha": "9dbf1c3e7f70bf9ecdf8a61340c9f76ff04251d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbf1c3e7f70bf9ecdf8a61340c9f76ff04251d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbf1c3e7f70bf9ecdf8a61340c9f76ff04251d3"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "f8261fbea7392dbe000fbaaabf1999598060ac42", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ec80da28b6bb82771044cf4c1120d24d30902873", "patch": "@@ -1,3 +1,13 @@\n+2010-01-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* get_scos.adb (Get_SCOs): Implement new form of CS entries (multiple\n+\tentries per line, one for each statement in the sequence).\n+\t* par_sco.adb (Traverse_Declarations_Or_Statements): Increase array\n+\tsize from 100 to 10_000 for SC_Array to avoid any real possibility of\n+\toverflow. Output decisions in for loops.\n+\tExclude labels from CS lines.\n+\t* scos.ads: Clarify that label is not included in the entry point\n+\n 2010-01-26  Robert Dewar  <dewar@adacore.com>\n \n \t* par_sco.adb (Traverse_Declarations_Or_Statments): Implement new"}, {"sha": "5dd33f4bbf14a2cbc437b3bbde1afd0d4e1cd73f", "filename": "gcc/ada/get_scos.adb", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2Fget_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2Fget_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.adb?ref=ec80da28b6bb82771044cf4c1120d24d30902873", "patch": "@@ -39,6 +39,11 @@ procedure Get_SCOs is\n    use ASCII;\n    --  For CR/LF\n \n+   function At_EOL return Boolean;\n+   --  Skips any spaces, then checks if we are the end of a line. If so,\n+   --  returns True (but does not skip over the EOL sequence). If not,\n+   --  then returns False.\n+\n    procedure Check (C : Character);\n    --  Checks that file is positioned at given character, and if so skips past\n    --  it, If not, raises Data_Error.\n@@ -63,6 +68,16 @@ procedure Get_SCOs is\n    --  Skips zero or more spaces at the current position, leaving the file\n    --  positioned at the first non-blank character (or Types.EOF).\n \n+   ------------\n+   -- At_EOL --\n+   ------------\n+\n+   function At_EOL return Boolean is\n+   begin\n+      Skip_Spaces;\n+      return Nextc = CR or else Nextc = LF;\n+   end At_EOL;\n+\n    -----------\n    -- Check --\n    -----------\n@@ -236,8 +251,36 @@ begin\n          --  Statement entry\n \n          when 'S' =>\n-            Get_Sloc_Range (Loc1, Loc2);\n-            Add_SCO (C1 => 'S', From => Loc1, To => Loc2);\n+            declare\n+               Typ : Character;\n+               Key : Character;\n+\n+            begin\n+               Skip_Spaces;\n+               Key := 'S';\n+\n+               loop\n+                  Typ := Nextc;\n+\n+                  if Typ in '1' .. '9' then\n+                     Typ := ' ';\n+                  else\n+                     Skipc;\n+                  end if;\n+\n+                  Get_Sloc_Range (Loc1, Loc2);\n+\n+                  Add_SCO\n+                    (C1   => Key,\n+                     C2   => C,\n+                     From => Loc1,\n+                     To   => Loc2,\n+                     Last => At_EOL);\n+\n+                  exit when At_EOL;\n+                  Key := 's';\n+               end loop;\n+            end;\n \n          --  Exit entry\n "}, {"sha": "e0e9318076c1855dc530e9207025184f6dabfa72", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=ec80da28b6bb82771044cf4c1120d24d30902873", "patch": "@@ -766,7 +766,7 @@ package body Par_SCO is\n       end record;\n       --  Used to store a single entry in the following array\n \n-      SC_Array : array (Nat range 1 .. 100) of SC_Entry;\n+      SC_Array : array (Nat range 1 .. 10_000) of SC_Entry;\n       SC_Last  : Nat;\n       --  Used to store statement components for a CS entry to be output\n       --  as a result of the call to this procedure. SC_Last is the last\n@@ -777,11 +777,12 @@ package body Par_SCO is\n       --  the temporary caching of results in this array is that we want\n       --  the SCO table entries for a given CS line to be contiguous, and\n       --  the processing may output intermediate entries such as decision\n-      --  entries. Note that the limit of 100 here is arbitrary, but does\n-      --  not cause any trouble, if we encounter more than 100 statements\n+      --  entries. Note that the limit of 10_000 here is arbitrary, but does\n+      --  not cause any trouble, if we encounter more than 10_000 statements\n       --  we simply break the current CS sequence at that point, which is\n       --  harmless, since this is only used for back annotation and it is\n-      --  not critical that back annotation always work in all cases.\n+      --  not critical that back annotation always work in all cases. Anyway\n+      --  exceeding 10,000 statements in a basic block is very unlikely.\n \n       procedure Extend_Statement_Sequence (N : Node_Id; Typ : Character);\n       --  Extend the current statement sequence to encompass the node N. Typ\n@@ -941,15 +942,14 @@ package body Par_SCO is\n                   Set_Statement_Entry;\n                   Process_Decisions (Condition (N), 'E');\n \n-               --  Label, which breaks the current statement sequence, and then\n-               --  we include the label in the subsequent statement sequence.\n+               --  Label, which breaks the current statement sequence, but the\n+               --  label itself is not included in the next statement sequence,\n+               --  since it generates no code.\n \n                when N_Label =>\n                   Set_Statement_Entry;\n-                  Extend_Statement_Sequence (N, ' ');\n \n-               --  Block statement, which breaks the current statement seqeunce\n-               --  it probably does not need to, but for now it does.\n+               --  Block statement, which breaks the current statement sequence\n \n                when N_Block_Statement =>\n                   Set_Statement_Entry;\n@@ -1043,8 +1043,20 @@ package body Par_SCO is\n \n                when N_Loop_Statement =>\n                   if Present (Iteration_Scheme (N)) then\n-                     Extend_Statement_Sequence (N, Iteration_Scheme (N), 'F');\n-                     Process_Decisions (Condition (Iteration_Scheme (N)), 'W');\n+                     declare\n+                        ISC : constant Node_Id := Iteration_Scheme (N);\n+\n+                     begin\n+                        Extend_Statement_Sequence (N, ISC, 'F');\n+\n+                        if Present (Condition (ISC)) then\n+                           Process_Decisions\n+                             (Condition (ISC), 'W');\n+                        else\n+                           Process_Decisions\n+                             (Loop_Parameter_Specification (ISC), 'X');\n+                        end if;\n+                     end;\n                   end if;\n \n                   Set_Statement_Entry;"}, {"sha": "b8dd08d0350305e84b41c24ad57d7e3be56035cb", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec80da28b6bb82771044cf4c1120d24d30902873/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=ec80da28b6bb82771044cf4c1120d24d30902873", "patch": "@@ -127,7 +127,8 @@ package SCOs is\n    --        body or block statement that has a non-empty declarative part\n    --      the first statement after a compound statement\n    --      the first statement after an EXIT, RAISE or GOTO statement\n-   --      any statement with a label\n+   --      any statement with a label (the label itself is not part of the\n+   --       entry point that is recorded).\n \n    --    Each entry point must appear as the first entry on a CS line.\n    --    The idea is that if any simple statement on a CS line is known to have"}]}