{"sha": "5e5f76731871e5efbaf8bad961e44707b1e58cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1Zjc2NzMxODcxZTVlZmJhZjhiYWQ5NjFlNDQ3MDdiMWU1OGNjMw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-07-22T13:08:24Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-07-22T13:08:24Z"}, "message": "constraints.md (Pd): Allow TARGET_THUMB instead of TARGET_THUMB1.\n\n2013-07-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/constraints.md (Pd): Allow TARGET_THUMB\n\tinstead of TARGET_THUMB1.\n\t(Pz): New constraint.\n\t* config/arm/arm.md (arm_addsi3): Add alternatives for 16-bit\n\tencodings.\n\t(compare_negsi_si): Likewise.\n\t(compare_addsi2_op0): Likewise.\n\t(compare_addsi2_op1): Likewise.\n\t(addsi3_carryin_<optab>): Likewise.\n\t(addsi3_carryin_alt2_<optab>): Likewise.\n\t(addsi3_carryin_shift_<optab>): Disable cond_exec variant\n\tfor arm_restrict_it.\n\t(subsi3_carryin): Likewise.\n\t(arm_subsi3_insn): Add alternatives for 16-bit encoding.\n\t(minmax_arithsi): Disable for arm_restrict_it.\n\t(minmax_arithsi_non_canon): Adjust for arm_restrict_it.\n\t(satsi_<SAT:code>): Disable cond_exec variant for arm_restrict_it.\n\t(satsi_<SAT:code>_shift): Likewise.\n\t(arm_shiftsi3): Add alternative for 16-bit encoding.\n\t(arm32_movhf): Disable for arm_restrict_it.\n\t(arm_cmpdi_unsigned): Add alternatives for 16-bit encoding.\n\t(arm_movtas_ze): Disable cond_exec variant for arm_restrict_it.\n\nFrom-SVN: r201126", "tree": {"sha": "3d6343586c4b25fad375887ce5794141330572ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d6343586c4b25fad375887ce5794141330572ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e5f76731871e5efbaf8bad961e44707b1e58cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5f76731871e5efbaf8bad961e44707b1e58cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5f76731871e5efbaf8bad961e44707b1e58cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5f76731871e5efbaf8bad961e44707b1e58cc3/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a2bf10f40d53afedc94759ac13649badfda7b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2bf10f40d53afedc94759ac13649badfda7b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2bf10f40d53afedc94759ac13649badfda7b7d"}], "stats": {"total": 181, "additions": 128, "deletions": 53}, "files": [{"sha": "79d1273d01908a4c0b5ef83bf34d2d720957734b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5f76731871e5efbaf8bad961e44707b1e58cc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5f76731871e5efbaf8bad961e44707b1e58cc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e5f76731871e5efbaf8bad961e44707b1e58cc3", "patch": "@@ -1,3 +1,28 @@\n+2013-07-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/constraints.md (Pd): Allow TARGET_THUMB\n+\tinstead of TARGET_THUMB1.\n+\t(Pz): New constraint.\n+\t* config/arm/arm.md (arm_addsi3): Add alternatives for 16-bit\n+\tencodings.\n+\t(compare_negsi_si): Likewise.\n+\t(compare_addsi2_op0): Likewise.\n+\t(compare_addsi2_op1): Likewise.\n+\t(addsi3_carryin_<optab>): Likewise.\n+\t(addsi3_carryin_alt2_<optab>): Likewise.\n+\t(addsi3_carryin_shift_<optab>): Disable cond_exec variant\n+\tfor arm_restrict_it.\n+\t(subsi3_carryin): Likewise.\n+\t(arm_subsi3_insn): Add alternatives for 16-bit encoding.\n+\t(minmax_arithsi): Disable for arm_restrict_it.\n+\t(minmax_arithsi_non_canon): Adjust for arm_restrict_it.\n+\t(satsi_<SAT:code>): Disable cond_exec variant for arm_restrict_it.\n+\t(satsi_<SAT:code>_shift): Likewise.\n+\t(arm_shiftsi3): Add alternative for 16-bit encoding.\n+\t(arm32_movhf): Disable for arm_restrict_it.\n+\t(arm_cmpdi_unsigned): Add alternatives for 16-bit encoding.\n+\t(arm_movtas_ze): Disable cond_exec variant for arm_restrict_it.\n+\n 2013-07-22  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/arm/arm.md (attribute \"insn\"): Delete."}, {"sha": "86e41a28854908b0176a273a6cc1f3188624b046", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 96, "deletions": 51, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5f76731871e5efbaf8bad961e44707b1e58cc3/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5f76731871e5efbaf8bad961e44707b1e58cc3/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=5e5f76731871e5efbaf8bad961e44707b1e58cc3", "patch": "@@ -953,13 +953,16 @@\n ;;  (plus (reg rN) (reg sp)) into (reg rN).  In this case reload will\n ;; put the duplicated register first, and not try the commutative version.\n (define_insn_and_split \"*arm_addsi3\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"=rk, r,k, r,r, k, r, k,k,r, k, r\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0, rk,k, r,rk,k, rk,k,r,rk,k, rk\")\n-\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"rk, rI,rI,k,Pj,Pj,L, L,L,PJ,PJ,?n\")))]\n+  [(set (match_operand:SI          0 \"s_register_operand\" \"=rk,l,l ,l ,r ,k ,r,r ,k ,r ,k,k,r ,k ,r\")\n+        (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0 ,l,0 ,l ,rk,k ,r,rk,k ,rk,k,r,rk,k ,rk\")\n+                 (match_operand:SI 2 \"reg_or_int_operand\" \"rk ,l,Py,Pd,rI,rI,k,Pj,Pj,L ,L,L,PJ,PJ,?n\")))]\n   \"TARGET_32BIT\"\n   \"@\n    add%?\\\\t%0, %0, %2\n    add%?\\\\t%0, %1, %2\n+   add%?\\\\t%0, %2\n+   add%?\\\\t%0, %1, %2\n+   add%?\\\\t%0, %1, %2\n    add%?\\\\t%0, %1, %2\n    add%?\\\\t%0, %2, %1\n    addw%?\\\\t%0, %1, %2\n@@ -981,9 +984,10 @@\n \t\t      operands[1], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"2,4,4,4,4,4,4,4,4,4,4,16\")\n+  [(set_attr \"length\" \"2,4,4,4,4,4,4,4,4,4,4,4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"t2,*,*,*,t2,t2,*,*,a,t2,t2,*\")\n+   (set_attr \"predicable_short_it\" \"yes,yes,yes,yes,no,no,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*,t2,t2,*,*,a,t2,t2,*\")\n    (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n \t\t      (const_string \"arlo_imm\")\n \t\t      (const_string \"arlo_reg\")))\n@@ -1090,12 +1094,15 @@\n (define_insn \"*compare_negsi_si\"\n   [(set (reg:CC_Z CC_REGNUM)\n \t(compare:CC_Z\n-\t (neg:SI (match_operand:SI 0 \"s_register_operand\" \"r\"))\n-\t (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+\t (neg:SI (match_operand:SI 0 \"s_register_operand\" \"l,r\"))\n+\t (match_operand:SI 1 \"s_register_operand\" \"l,r\")))]\n   \"TARGET_32BIT\"\n   \"cmn%?\\\\t%1, %0\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"t2,*\")\n+   (set_attr \"length\" \"2,4\")\n+   (set_attr \"predicable_short_it\" \"yes,no\")]\n )\n \n ;; This is the canonicalization of addsi3_compare0_for_combiner when the\n@@ -1192,60 +1199,79 @@\n \n (define_insn \"*compare_addsi2_op0\"\n   [(set (reg:CC_C CC_REGNUM)\n-\t(compare:CC_C\n-\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r,r\")\n-\t\t  (match_operand:SI 1 \"arm_add_operand\" \"I,L,r\"))\n-\t (match_dup 0)))]\n+        (compare:CC_C\n+          (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,l,r,r,r\")\n+                   (match_operand:SI 1 \"arm_add_operand\" \"Pv,l,I,L,r\"))\n+          (match_dup 0)))]\n   \"TARGET_32BIT\"\n   \"@\n+   cmp%?\\\\t%0, #%n1\n+   cmn%?\\\\t%0, %1\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\n    cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n+   (set_attr \"arch\" \"t2,t2,*,*,*\")\n+   (set_attr \"predicable_short_it\" \"yes,yes,no,no,no\")\n+   (set_attr \"length\" \"2,2,4,4,4\")\n+   (set_attr \"type\" \"arlo_imm,*,arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*compare_addsi2_op1\"\n   [(set (reg:CC_C CC_REGNUM)\n-\t(compare:CC_C\n-\t (plus:SI (match_operand:SI 0 \"s_register_operand\" \"r,r,r\")\n-\t\t  (match_operand:SI 1 \"arm_add_operand\" \"I,L,r\"))\n-\t (match_dup 1)))]\n+        (compare:CC_C\n+          (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,l,r,r,r\")\n+                   (match_operand:SI 1 \"arm_add_operand\" \"Pv,l,I,L,r\"))\n+          (match_dup 1)))]\n   \"TARGET_32BIT\"\n   \"@\n+   cmp%?\\\\t%0, #%n1\n+   cmn%?\\\\t%0, %1\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\n    cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n-)\n+   (set_attr \"arch\" \"t2,t2,*,*,*\")\n+   (set_attr \"predicable_short_it\" \"yes,yes,no,no,no\")\n+   (set_attr \"length\" \"2,2,4,4,4\")\n+   (set_attr \"type\"\n+      \"arlo_imm,*,arlo_imm,arlo_imm,*\")]\n+ )\n \n (define_insn \"*addsi3_carryin_<optab>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r\")\n-\t\t\t  (match_operand:SI 2 \"arm_not_operand\" \"rI,K\"))\n-\t\t (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r,r\")\n+        (plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%l,r,r\")\n+                          (match_operand:SI 2 \"arm_not_operand\" \"0,rI,K\"))\n+                 (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))]\n   \"TARGET_32BIT\"\n   \"@\n+   adc%?\\\\t%0, %1\n    adc%?\\\\t%0, %1, %2\n    sbc%?\\\\t%0, %1, #%B2\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"t2,*,*\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"predicable_short_it\" \"yes,no,no\")]\n )\n \n (define_insn \"*addsi3_carryin_alt2_<optab>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(plus:SI (plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))\n-\t\t\t  (match_operand:SI 1 \"s_register_operand\" \"%r,r\"))\n-\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,K\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r,r\")\n+        (plus:SI (plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))\n+                          (match_operand:SI 1 \"s_register_operand\" \"%l,r,r\"))\n+                 (match_operand:SI 2 \"arm_rhs_operand\" \"l,rI,K\")))]\n   \"TARGET_32BIT\"\n   \"@\n+   adc%?\\\\t%0, %1\n    adc%?\\\\t%0, %1, %2\n    sbc%?\\\\t%0, %1, #%B2\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"t2,*,*\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"predicable_short_it\" \"yes,no,no\")]\n )\n \n (define_insn \"*addsi3_carryin_shift_<optab>\"\n@@ -1260,6 +1286,7 @@\n   \"adc%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n \t\t      (const_string \"arlo_shift\")\n \t\t      (const_string \"arlo_shift_reg\")))]\n@@ -1287,7 +1314,8 @@\n    rsc%?\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"arch\" \"*,a\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")]\n )\n \n (define_insn \"*subsi3_carryin_const\"\n@@ -1604,11 +1632,15 @@\n \n ; ??? Check Thumb-2 split length\n (define_insn_and_split \"*arm_subsi3_insn\"\n-  [(set (match_operand:SI           0 \"s_register_operand\" \"=r,r,r,rk,r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,r,r,k,?n\")\n-\t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"r,I,r,r, r\")))]\n+  [(set (match_operand:SI           0 \"s_register_operand\" \"=l,l ,l ,l ,r ,r,r,rk,r\")\n+\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"l ,0 ,l ,Pz,rI,r,r,k ,?n\")\n+\t\t  (match_operand:SI 2 \"reg_or_int_operand\" \"l ,Py,Pd,l ,r ,I,r,r ,r\")))]\n   \"TARGET_32BIT\"\n   \"@\n+   sub%?\\\\t%0, %1, %2\n+   sub%?\\\\t%0, %2\n+   sub%?\\\\t%0, %1, %2\n+   rsb%?\\\\t%0, %2, %1\n    rsb%?\\\\t%0, %2, %1\n    sub%?\\\\t%0, %1, %2\n    sub%?\\\\t%0, %1, %2\n@@ -1622,9 +1654,11 @@\n                       INTVAL (operands[1]), operands[0], operands[2], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"4,4,4,4,16\")\n+  [(set_attr \"length\" \"4,4,4,4,4,4,4,4,16\")\n+   (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*,*,*\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\"  \"*,arlo_imm,*,*,*\")]\n+   (set_attr \"predicable_short_it\" \"yes,yes,yes,yes,no,no,no,no,no\")\n+   (set_attr \"type\"  \"*,*,*,*,arlo_imm,arlo_imm,*,*,arlo_imm\")]\n )\n \n (define_peephole2\n@@ -3943,7 +3977,7 @@\n \t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])\n \t  (match_operand:SI 1 \"s_register_operand\" \"0,?r\")]))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && !arm_eliminable_register (operands[1])\"\n+  \"TARGET_32BIT && !arm_eliminable_register (operands[1]) && !arm_restrict_it\"\n   \"*\n   {\n     enum rtx_code code = GET_CODE (operands[4]);\n@@ -3980,14 +4014,15 @@\n ; Reject the frame pointer in operand[1], since reloading this after\n ; it has been eliminated can cause carnage.\n (define_insn_and_split \"*minmax_arithsi_non_canon\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts,Ts\")\n \t(minus:SI\n-\t (match_operand:SI 1 \"s_register_operand\" \"0,?r\")\n+\t (match_operand:SI 1 \"s_register_operand\" \"0,?Ts\")\n \t  (match_operator:SI 4 \"minmax_operator\"\n-\t   [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])))\n+\t   [(match_operand:SI 2 \"s_register_operand\" \"Ts,Ts\")\n+\t    (match_operand:SI 3 \"arm_rhs_operand\" \"TsI,TsI\")])))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT && !arm_eliminable_register (operands[1])\"\n+  \"TARGET_32BIT && !arm_eliminable_register (operands[1])\n+   && !(arm_restrict_it && CONST_INT_P (operands[3]))\"\n   \"#\"\n   \"TARGET_32BIT && !arm_eliminable_register (operands[1]) && reload_completed\"\n   [(set (reg:CC CC_REGNUM)\n@@ -4046,7 +4081,8 @@\n   else\n     return \"usat%?\\t%0, %1, %3\";\n }\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")]\n )\n \n (define_insn \"*satsi_<SAT:code>_shift\"\n@@ -4072,6 +4108,7 @@\n     return \"usat%?\\t%0, %1, %4%S3\";\n }\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"type\" \"arlo_shift\")])\n \f\n@@ -4429,15 +4466,18 @@\n )\n \n (define_insn \"*arm_shiftsi3\"\n-  [(set (match_operand:SI   0 \"s_register_operand\" \"=r,r\")\n+  [(set (match_operand:SI   0 \"s_register_operand\" \"=l,r,r\")\n \t(match_operator:SI  3 \"shift_operator\"\n-\t [(match_operand:SI 1 \"s_register_operand\"  \"r,r\")\n-\t  (match_operand:SI 2 \"reg_or_int_operand\" \"M,r\")]))]\n+\t [(match_operand:SI 1 \"s_register_operand\"  \"0,r,r\")\n+\t  (match_operand:SI 2 \"reg_or_int_operand\" \"l,M,r\")]))]\n   \"TARGET_32BIT\"\n   \"* return arm_output_shift(operands, 0);\"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"t2,*,*\")\n+   (set_attr \"predicable_short_it\" \"yes,no,no\")\n+   (set_attr \"length\" \"4\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")]\n+   (set_attr \"type\" \"arlo_shift_reg,arlo_shift,arlo_shift_reg\")]\n )\n \n (define_insn \"*shiftsi3_compare\"\n@@ -7423,7 +7463,7 @@\n (define_insn \"*arm32_movhf\"\n   [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=r,m,r,r\")\n \t(match_operand:HF 1 \"general_operand\"\t   \" m,r,r,F\"))]\n-  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_FP16)\n+  \"TARGET_32BIT && !(TARGET_HARD_FLOAT && TARGET_FP16) && !arm_restrict_it\n    && (\t  s_register_operand (operands[0], HFmode)\n        || s_register_operand (operands[1], HFmode))\"\n   \"*\n@@ -7548,6 +7588,7 @@\n    ldr%?\\\\t%0, %1\\\\t%@ float\n    str%?\\\\t%1, %0\\\\t%@ float\"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"type\" \"mov_reg,load1,store1\")\n    (set_attr \"arm_pool_range\" \"*,4096,*\")\n    (set_attr \"thumb2_pool_range\" \"*,4094,*\")\n@@ -8567,8 +8608,9 @@\n \n (define_insn_and_split \"*arm_cmpdi_unsigned\"\n   [(set (reg:CC_CZ CC_REGNUM)\n-\t(compare:CC_CZ (match_operand:DI 0 \"s_register_operand\" \"r\")\n-\t\t       (match_operand:DI 1 \"arm_di_operand\"\t\"rDi\")))]\n+        (compare:CC_CZ (match_operand:DI 0 \"s_register_operand\" \"l,r,r\")\n+                       (match_operand:DI 1 \"arm_di_operand\"     \"Py,r,rDi\")))]\n+\n   \"TARGET_32BIT\"\n   \"#\"   ; \"cmp\\\\t%R0, %R1\\;it eq\\;cmpeq\\\\t%Q0, %Q1\"\n   \"&& reload_completed\"\n@@ -8587,7 +8629,9 @@\n     operands[1] = gen_lowpart (SImode, operands[1]);\n   }\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"length\" \"8\")]\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n+   (set_attr \"arch\" \"t2,t2,*\")\n+   (set_attr \"length\" \"6,6,8\")]\n )\n \n (define_insn \"*arm_cmpdi_zero\"\n@@ -12621,7 +12665,8 @@\n   \"arm_arch_thumb2\"\n   \"movt%?\\t%0, %L1\"\n  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"4\")]\n+  (set_attr \"predicable_short_it\" \"no\")\n+  (set_attr \"length\" \"4\")]\n )\n \n (define_insn \"*arm_rev\""}, {"sha": "e7cafe58e9c08b614e5dea155713c478917535f1", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5f76731871e5efbaf8bad961e44707b1e58cc3/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5f76731871e5efbaf8bad961e44707b1e58cc3/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=5e5f76731871e5efbaf8bad961e44707b1e58cc3", "patch": "@@ -170,9 +170,9 @@\n   \t\t    && ival > 1020 && ival <= 1275\")))\n \n (define_constraint \"Pd\"\n-  \"@internal In Thumb-1 state a constant in the range 0 to 7\"\n+  \"@internal In Thumb state a constant in the range 0 to 7\"\n   (and (match_code \"const_int\")\n-       (match_test \"TARGET_THUMB1 && ival >= 0 && ival <= 7\")))\n+       (match_test \"TARGET_THUMB && ival >= 0 && ival <= 7\")))\n \n (define_constraint \"Pe\"\n   \"@internal In Thumb-1 state a constant in the range 256 to +510\"\n@@ -214,6 +214,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_THUMB2 && ival >= 0 && ival <= 255\")))\n \n+(define_constraint \"Pz\"\n+  \"@internal In Thumb-2 state the constant 0\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB2 && (ival == 0)\")))\n+\n (define_constraint \"G\"\n  \"In ARM/Thumb-2 state the floating-point constant 0.\"\n  (and (match_code \"const_double\")"}]}