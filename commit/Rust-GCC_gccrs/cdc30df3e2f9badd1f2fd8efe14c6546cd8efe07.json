{"sha": "cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjMzBkZjNlMmY5YmFkZDFmMmZkOGVmZTE0YzY1NDZjZDhlZmUwNw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-04-02T08:51:26Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-04-02T08:51:26Z"}, "message": "PR c++/40942 - Failure of template specialization partial ordering\n\ngcc/cp/\n\n\t* pt.c (more_specialized_fn):  Don't apply decay conversion to\n\ttypes of function parameters.\n\ngcc/testsuite/\n\n\t* g++.old-deja/g++.pt/spec40.C: Adjust to take the resolution of\n\tDR 214 in account.\n\nFrom-SVN: r186067", "tree": {"sha": "73f1212f31e4b2a93c0fa0839a43d146982aef43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f1212f31e4b2a93c0fa0839a43d146982aef43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/comments", "author": null, "committer": null, "parents": [{"sha": "db435dce3639caf3d530b5f228b588b99645c8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db435dce3639caf3d530b5f228b588b99645c8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db435dce3639caf3d530b5f228b588b99645c8d3"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "ea1bd80ed0503c88121a168bdeb18de044412217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "patch": "@@ -1,3 +1,9 @@\n+2012-04-02  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/40942\n+\t* pt.c (more_specialized_fn):  Don't apply decay conversion to\n+\ttypes of function parameters.\n+\n 2012-04-02  Tristan Gingold  <gingold@adacore.com>\n \n \t* ggc-page.c (PAGE_L1_SIZE, PAGE_L2_SIZE, LOOKUP_L1, LOOKUP_L2)"}, {"sha": "04ba37d25e7e03ee31c18ea5042c9d7272e9ffde", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "patch": "@@ -17132,46 +17132,6 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n \t  quals2 = cp_type_quals (arg2);\n \t}\n \n-      if ((quals1 < 0) != (quals2 < 0))\n-\t{\n-\t  /* Only of the args is a reference, see if we should apply\n-\t     array/function pointer decay to it.  This is not part of\n-\t     DR214, but is, IMHO, consistent with the deduction rules\n-\t     for the function call itself, and with our earlier\n-\t     implementation of the underspecified partial ordering\n-\t     rules.  (nathan).  */\n-\t  if (quals1 >= 0)\n-\t    {\n-\t      switch (TREE_CODE (arg1))\n-\t\t{\n-\t\tcase ARRAY_TYPE:\n-\t\t  arg1 = TREE_TYPE (arg1);\n-\t\t  /* FALLTHROUGH. */\n-\t\tcase FUNCTION_TYPE:\n-\t\t  arg1 = build_pointer_type (arg1);\n-\t\t  break;\n-\n-\t\tdefault:\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      switch (TREE_CODE (arg2))\n-\t\t{\n-\t\tcase ARRAY_TYPE:\n-\t\t  arg2 = TREE_TYPE (arg2);\n-\t\t  /* FALLTHROUGH. */\n-\t\tcase FUNCTION_TYPE:\n-\t\t  arg2 = build_pointer_type (arg2);\n-\t\t  break;\n-\n-\t\tdefault:\n-\t\t  break;\n-\t\t}\n-\t    }\n-\t}\n-\n       arg1 = TYPE_MAIN_VARIANT (arg1);\n       arg2 = TYPE_MAIN_VARIANT (arg2);\n "}, {"sha": "bfad9a7b77a407d58fd8c87b318b6cc9bd7bd877", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "patch": "@@ -1,3 +1,9 @@\n+2012-04-02  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/40942\n+\t* g++.old-deja/g++.pt/spec40.C: Adjust to take the resolution of\n+\tDR 214 in account.\n+\n 2012-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50043"}, {"sha": "fc37f412b7eeffcb91791795c4ac61a917d73a88", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec40.C", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec40.C?ref=cdc30df3e2f9badd1f2fd8efe14c6546cd8efe07", "patch": "@@ -1,14 +1,33 @@\n-// { dg-do run  }\n+// { dg-do compile  }\n // Copyright (C) 2000 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 12 Feb 2001 <nathan@codesourcery.com>\n \n-// More from bug 1617. We didn't resolve partial ordering properly. The\n-// std is rather vague about it anyway, DR 214 talks about this.\n+// More from bug 1617.  The resolution of DR 214 implies that the below\n+// call to Foo is ambiguous.\n+//\n+// The type transformation (on the function parameter of Foo) allowed\n+// in the context of partial ordering of the Foo template overloads is\n+// the following ([temp.deduct.partial]/5):\n+//\n+//     Before the partial ordering is done, certain transformations\n+//     are performed on the types used for partial ordering:\n+//\n+//       - If P is a reference type, P is replaced by the type\n+//         referred to.\n+//\n+//       - If A is a reference type, A is replaced by the type\n+//         referred to.\n+//\n+// It follows that we are not allowed to apply array-to-pointer\n+// decay conversion to the type of the function parameter\n+// 'char const (&)[I]'.  So the two Foo specializations should\n+// be considered unrelated.  Thus the partial ordering of the two\n+// Foo specializations should fail.\n \n template <typename T> int Foo (T const *) {return 1;}\n template <unsigned I> int Foo (char const (&)[I]) {return 2;}\n \n int main ()\n {\n-  return Foo (\"a\") != 2;\n+  return Foo (\"a\") != 2; // { dg-error \"call of overloaded \\[^\\n\\r\\]* is ambiguous\" }\n }"}]}