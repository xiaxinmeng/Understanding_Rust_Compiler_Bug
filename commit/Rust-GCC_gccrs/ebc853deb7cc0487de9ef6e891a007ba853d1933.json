{"sha": "ebc853deb7cc0487de9ef6e891a007ba853d1933", "node_id": "C_kwDOANBUbNoAKGViYzg1M2RlYjdjYzA0ODdkZTllZjZlODkxYTAwN2JhODUzZDE5MzM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-04T10:59:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-04T12:17:14Z"}, "message": "tree-optimization/103690 - not up-to-date SSA and PRE DCE\n\nThis avoids running simple_dce_from_worklist on partially not up-to-date\nSSA form (in unreachable code regions) by scheduling CFG cleanup\nmanually as is done anyway when tail-merging runs.\n\n2022-01-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103690\n\t* tree-pass.h (tail_merge_optimize): Adjust.\n\t* tree-ssa-tail-merge.c (tail_merge_optimize): Pass in whether\n\tto re-split critical edges, move CFG cleanup ...\n\t* tree-ssa-pre.c (pass_pre::execute): ... here, before\n\tsimple_dce_from_worklist and delay freeing inserted_exprs from\n\t...\n\t(fini_pre): .. here.", "tree": {"sha": "ff4a9fa8eb5948ec31be0b09adfaa64f9746c5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff4a9fa8eb5948ec31be0b09adfaa64f9746c5be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebc853deb7cc0487de9ef6e891a007ba853d1933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc853deb7cc0487de9ef6e891a007ba853d1933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc853deb7cc0487de9ef6e891a007ba853d1933", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc853deb7cc0487de9ef6e891a007ba853d1933/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beed3f8f60492289ca6211d86c54a2254a642035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beed3f8f60492289ca6211d86c54a2254a642035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beed3f8f60492289ca6211d86c54a2254a642035"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "36097cf2736e958f4cef52433e10b0e0e7f2b041", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc853deb7cc0487de9ef6e891a007ba853d1933/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc853deb7cc0487de9ef6e891a007ba853d1933/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=ebc853deb7cc0487de9ef6e891a007ba853d1933", "patch": "@@ -412,7 +412,7 @@ extern gimple_opt_pass *make_pass_early_thread_jumps (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_split_crit_edges (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_laddress (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_pre (gcc::context *ctxt);\n-extern unsigned int tail_merge_optimize (unsigned int);\n+extern unsigned int tail_merge_optimize (unsigned int, bool);\n extern gimple_opt_pass *make_pass_profile (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_strip_predict_hints (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_lower_complex_O0 (gcc::context *ctxt);"}, {"sha": "ab24fa98a1f6e122592374ef82298a114242d3c1", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc853deb7cc0487de9ef6e891a007ba853d1933/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc853deb7cc0487de9ef6e891a007ba853d1933/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ebc853deb7cc0487de9ef6e891a007ba853d1933", "patch": "@@ -4306,7 +4306,6 @@ fini_pre ()\n   value_expressions.release ();\n   constant_value_expressions.release ();\n   expressions.release ();\n-  BITMAP_FREE (inserted_exprs);\n   bitmap_obstack_release (&grand_bitmap_obstack);\n   bitmap_set_pool.release ();\n   pre_expr_pool.release ();\n@@ -4431,16 +4430,28 @@ pass_pre::execute (function *fun)\n \n   vn_valueize = NULL;\n \n+  fini_pre ();\n+\n+  scev_finalize ();\n+  loop_optimizer_finalize ();\n+\n+  /* Perform a CFG cleanup before we run simple_dce_from_worklist since\n+     unreachable code regions will have not up-to-date SSA form which\n+     confuses it.  */\n+  bool need_crit_edge_split = false;\n+  if (todo & TODO_cleanup_cfg)\n+    {\n+      cleanup_tree_cfg ();\n+      todo &= ~TODO_cleanup_cfg;\n+      need_crit_edge_split = true;\n+    }\n+\n   /* Because we don't follow exactly the standard PRE algorithm, and decide not\n      to insert PHI nodes sometimes, and because value numbering of casts isn't\n      perfect, we sometimes end up inserting dead code.   This simple DCE-like\n      pass removes any insertions we made that weren't actually used.  */\n   simple_dce_from_worklist (inserted_exprs);\n-\n-  fini_pre ();\n-\n-  scev_finalize ();\n-  loop_optimizer_finalize ();\n+  BITMAP_FREE (inserted_exprs);\n \n   /* TODO: tail_merge_optimize may merge all predecessors of a block, in which\n      case we can merge the block with the remaining predecessor of the block.\n@@ -4449,7 +4460,7 @@ pass_pre::execute (function *fun)\n      - call merge_blocks after all tail merge iterations\n      - mark TODO_cleanup_cfg when necessary\n      - share the cfg cleanup with fini_pre.  */\n-  todo |= tail_merge_optimize (todo);\n+  todo |= tail_merge_optimize (todo, need_crit_edge_split);\n \n   free_rpo_vn ();\n "}, {"sha": "fd333800f0f171315bbf1293e949b0230bdd5472", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc853deb7cc0487de9ef6e891a007ba853d1933/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc853deb7cc0487de9ef6e891a007ba853d1933/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=ebc853deb7cc0487de9ef6e891a007ba853d1933", "patch": "@@ -1724,7 +1724,7 @@ update_debug_stmts (void)\n /* Runs tail merge optimization.  */\n \n unsigned int\n-tail_merge_optimize (unsigned int todo)\n+tail_merge_optimize (unsigned int todo, bool need_crit_edge_split)\n {\n   int nr_bbs_removed_total = 0;\n   int nr_bbs_removed;\n@@ -1738,15 +1738,9 @@ tail_merge_optimize (unsigned int todo)\n \n   timevar_push (TV_TREE_TAIL_MERGE);\n \n-  /* We enter from PRE which has critical edges split.  Elimination\n-     does not process trivially dead code so cleanup the CFG if we\n-     are told so.  And re-split critical edges then.  */\n-  if (todo & TODO_cleanup_cfg)\n-    {\n-      cleanup_tree_cfg ();\n-      todo &= ~TODO_cleanup_cfg;\n-      split_edges_for_insertion ();\n-    }\n+  /* Re-split critical edges when PRE did a CFG cleanup.  */\n+  if (need_crit_edge_split)\n+    split_edges_for_insertion ();\n \n   if (!dom_info_available_p (CDI_DOMINATORS))\n     {"}]}