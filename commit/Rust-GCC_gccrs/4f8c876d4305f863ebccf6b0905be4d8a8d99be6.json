{"sha": "4f8c876d4305f863ebccf6b0905be4d8a8d99be6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4Yzg3NmQ0MzA1Zjg2M2ViY2NmNmIwOTA1YmU0ZDhhOGQ5OWJlNg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-08T17:41:10Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-08T17:41:10Z"}, "message": "c-pragma.c (pending_redefinition): Declare.\n\n\t* c-pragma.c (pending_redefinition): Declare.  Declare a VEC of it.\n\t(pending_redefine_extname): Change type to a VEC.\n\t(add_to_renaming_pragma_list): Update for new type of\n\tpending_redefine_extname.\n\t(maybe_apply_pending_pragma): Likewise.\n\nFrom-SVN: r163012", "tree": {"sha": "49ea8c181787663829c36c7da059a7bc3dfe515f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ea8c181787663829c36c7da059a7bc3dfe515f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8c876d4305f863ebccf6b0905be4d8a8d99be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8c876d4305f863ebccf6b0905be4d8a8d99be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8c876d4305f863ebccf6b0905be4d8a8d99be6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8c876d4305f863ebccf6b0905be4d8a8d99be6/comments", "author": null, "committer": null, "parents": [{"sha": "e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "aad15ac196fc4398793496f5b76d7edd2dc2c769", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8c876d4305f863ebccf6b0905be4d8a8d99be6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8c876d4305f863ebccf6b0905be4d8a8d99be6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4f8c876d4305f863ebccf6b0905be4d8a8d99be6", "patch": "@@ -1,3 +1,11 @@\n+2010-08-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-pragma.c (pending_redefinition): Declare.  Declare a VEC of it.\n+\t(pending_redefine_extname): Change type to a VEC.\n+\t(add_to_renaming_pragma_list): Update for new type of\n+\tpending_redefine_extname.\n+\t(maybe_apply_pending_pragma): Likewise.\n+\n 2010-08-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* c-ada-spec.c (dump_ada_template): Mark underlying instance type as"}, {"sha": "e4ae502a708780636a6d06c214aa4013ba42aab5", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8c876d4305f863ebccf6b0905be4d8a8d99be6/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8c876d4305f863ebccf6b0905be4d8a8d99be6/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=4f8c876d4305f863ebccf6b0905be4d8a8d99be6", "patch": "@@ -424,7 +424,15 @@ maybe_apply_pending_pragma_weaks (void)\n       if it appears afterward, we have no way of knowing whether a modified\n       DECL_ASSEMBLER_NAME is due to #pragma extern_prefix.)  */\n \n-static GTY(()) tree pending_redefine_extname;\n+typedef struct GTY(()) pending_redefinition_d {\n+  tree oldname;\n+  tree newname;\n+} pending_redefinition;\n+\n+DEF_VEC_O(pending_redefinition);\n+DEF_VEC_ALLOC_O(pending_redefinition,gc);\n+\n+static GTY(()) VEC(pending_redefinition,gc) *pending_redefine_extname;\n \n static void handle_pragma_redefine_extname (cpp_reader *);\n \n@@ -475,17 +483,23 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n void\n add_to_renaming_pragma_list (tree oldname, tree newname)\n {\n-  tree previous = purpose_member (oldname, pending_redefine_extname);\n-  if (previous)\n-    {\n-      if (TREE_VALUE (previous) != newname)\n-\twarning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n-\t\t \"conflict with previous #pragma redefine_extname\");\n-      return;\n-    }\n+  unsigned ix;\n+  pending_redefinition *p;\n+\n+  for (ix = 0;\n+       VEC_iterate (pending_redefinition, pending_redefine_extname, ix, p);\n+       ix++)\n+    if (oldname == p->oldname)\n+      {\n+\tif (p->newname != newname)\n+\t  warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n+\t\t   \"conflict with previous #pragma redefine_extname\");\n+\treturn;\n+      }\n \n-  pending_redefine_extname\n-    = tree_cons (oldname, newname, pending_redefine_extname);\n+  p = VEC_safe_push (pending_redefinition, pending_redefine_extname, NULL);\n+  p->oldname = oldname;\n+  p->newname = newname;\n }\n \n static GTY(()) tree pragma_extern_prefix;\n@@ -517,6 +531,8 @@ handle_pragma_extern_prefix (cpp_reader * ARG_UNUSED (dummy))\n tree\n maybe_apply_renaming_pragma (tree decl, tree asmname)\n {\n+  unsigned ix;\n+  pending_redefinition *p;\n   tree *p, t;\n \n   /* The renaming pragmas are only applied to declarations with\n@@ -538,26 +554,32 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t\t   \"conflict with previous rename\");\n \n       /* Take any pending redefine_extname off the list.  */\n-      for (p = &pending_redefine_extname; (t = *p); p = &TREE_CHAIN (t))\n-\tif (DECL_NAME (decl) == TREE_PURPOSE (t))\n+      for (ix = 0;\n+\t   VEC_iterate (pending_redefinition, pending_redefine_extname, ix, p);\n+\t   ix++)\n+\tif (DECL_NAME (decl) == p->oldname)\n \t  {\n \t    /* Only warn if there is a conflict.  */\n-\t    if (strcmp (IDENTIFIER_POINTER (TREE_VALUE (t)), oldname))\n+\t    if (strcmp (IDENTIFIER_POINTER (p->newname), oldname))\n \t      warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n \t\t       \"conflict with previous rename\");\n \n-\t    *p = TREE_CHAIN (t);\n+\t    VEC_unordered_remove (pending_redefinition,\n+\t\t\t\t  pending_redefine_extname, ix);\n \t    break;\n \t  }\n       return 0;\n     }\n \n   /* Find out if we have a pending #pragma redefine_extname.  */\n-  for (p = &pending_redefine_extname; (t = *p); p = &TREE_CHAIN (t))\n-    if (DECL_NAME (decl) == TREE_PURPOSE (t))\n+  for (ix = 0;\n+       VEC_iterate (pending_redefinition, pending_redefine_extname, ix, p);\n+       ix++)\n+    if (DECL_NAME (decl) == p->oldname)\n       {\n-\ttree newname = TREE_VALUE (t);\n-\t*p = TREE_CHAIN (t);\n+\ttree newname = p->newname;\n+\tVEC_unordered_remove (pending_redefinition,\n+\t\t\t      pending_redefine_extname, ix);\n \n \t/* If we already have an asmname, #pragma redefine_extname is\n \t   ignored (with a warning if it conflicts).  */"}]}