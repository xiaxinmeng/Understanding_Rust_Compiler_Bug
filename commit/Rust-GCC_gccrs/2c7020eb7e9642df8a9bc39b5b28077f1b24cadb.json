{"sha": "2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM3MDIwZWI3ZTk2NDJkZjhhOWJjMzliNWIyODA3N2YxYjI0Y2FkYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-10-20T16:53:45Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-10-20T16:53:45Z"}, "message": "re PR c/67964 (Multiple attributes wrongly accepted without commas)\n\n\tPR c/67964\n\t* c-parser.c (c_parser_attributes): Break out of the loop if the\n\ttoken after an attribute isn't a comma.\n\n\t* gcc.dg/pr67964.c: New test.\n\nFrom-SVN: r229091", "tree": {"sha": "c8c49700d2ef453f3aba6ccf592745725642b511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c49700d2ef453f3aba6ccf592745725642b511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78edb32f826fbfafed3a6e8eda5f4043a5887a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78edb32f826fbfafed3a6e8eda5f4043a5887a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78edb32f826fbfafed3a6e8eda5f4043a5887a99"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "2a083c40d80b04a3ff18836e2471190b17cf3213", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "patch": "@@ -1,3 +1,9 @@\n+2015-10-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/67964\n+\t* c-parser.c (c_parser_attributes): Break out of the loop if the\n+\ttoken after an attribute isn't a comma.\n+\n 2015-10-13  Jakub Jelinek  <jakub@redhat.com>\n \t    Aldy Hernandez  <aldyh@redhat.com>\n "}, {"sha": "e7b84400b5adca0fcf1c2ec4957cab449f103f04", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "patch": "@@ -3965,7 +3965,9 @@ c_parser_attributes (c_parser *parser)\n       /* ??? Follow the C++ parser rather than using the\n \t lex_untranslated_string kludge.  */\n       parser->lex_untranslated_string = true;\n+      /* Consume the `__attribute__' keyword.  */\n       c_parser_consume_token (parser);\n+      /* Look for the two `(' tokens.  */\n       if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n \t{\n \t  parser->lex_untranslated_string = false;\n@@ -3993,17 +3995,24 @@ c_parser_attributes (c_parser *parser)\n \t  attr_name = c_parser_attribute_any_word (parser);\n \t  if (attr_name == NULL)\n \t    break;\n-\t  if (is_cilkplus_vector_p (attr_name))\t\t  \n+\t  if (is_cilkplus_vector_p (attr_name))\n \t    {\n \t      c_token *v_token = c_parser_peek_token (parser);\n \t      c_parser_cilk_simd_fn_vector_attrs (parser, *v_token);\n+\t      /* If the next token isn't a comma, we're done.  */\n+\t      if (!c_parser_next_token_is (parser, CPP_COMMA))\n+\t\tbreak;\n \t      continue;\n \t    }\n \t  c_parser_consume_token (parser);\n \t  if (c_parser_next_token_is_not (parser, CPP_OPEN_PAREN))\n \t    {\n \t      attr = build_tree_list (attr_name, NULL_TREE);\n+\t      /* Add this attribute to the list.  */\n \t      attrs = chainon (attrs, attr);\n+\t      /* If the next token isn't a comma, we're done.  */\n+\t      if (!c_parser_next_token_is (parser, CPP_COMMA))\n+\t\tbreak;\n \t      continue;\n \t    }\n \t  c_parser_consume_token (parser);\n@@ -4062,8 +4071,13 @@ c_parser_attributes (c_parser *parser)\n \t\t\t\t\t \"expected %<)%>\");\n \t      return attrs;\n \t    }\n+\t  /* Add this attribute to the list.  */\n \t  attrs = chainon (attrs, attr);\n+\t  /* If the next token isn't a comma, we're done.  */\n+\t  if (!c_parser_next_token_is (parser, CPP_COMMA))\n+\t    break;\n \t}\n+      /* Look for the two `)' tokens.  */\n       if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \tc_parser_consume_token (parser);\n       else"}, {"sha": "2e06853321d60bbed56b4231fad5e5aae1249b0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "patch": "@@ -1,3 +1,8 @@\n+2015-10-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/67964\n+\t* gcc.dg/pr67964.c: New test.\n+\n 2015-10-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/67609"}, {"sha": "095b50f17260ca9dbf471bd3f654847e3e813d5e", "filename": "gcc/testsuite/gcc.dg/pr67964.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67964.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c7020eb7e9642df8a9bc39b5b28077f1b24cadb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67964.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67964.c?ref=2c7020eb7e9642df8a9bc39b5b28077f1b24cadb", "patch": "@@ -0,0 +1,21 @@\n+/* PR c/67964 */\n+/* { dg-do compile } */\n+\n+extern int fn0 (void) __attribute__ ((const const)); /* { dg-error \"expected\" } */\n+extern int fn1 (void) __attribute__ ((const, const));\n+extern int fn2 (void) __attribute__ ((optimize (0) const)); /* { dg-error \"expected\" } */\n+extern int fn3 (void) __attribute__ ((optimize (0), const));\n+/* We allow starting/trailing comma.  */\n+extern int fn4 (void) __attribute__ ((, const));\n+extern int fn5 (void) __attribute__ ((const, ));\n+extern int fn6 (void) __attribute__ ((,,,, const,,,,, ));\n+extern int fn7 (void) __attribute__ ((,));\n+extern int fn8 (void) __attribute__ ((__noreturn__ __noreturn__)); /* { dg-error \"expected\" } */\n+extern int fn9 (void) __attribute__ ((__noreturn__, __noreturn__));\n+extern int fn10 (void) __attribute__ ((__cold__ __pure__ __noclone__)); /* { dg-error \"expected\" } */\n+extern int fn11 (void) __attribute__ ((__cold__, __pure__ __noclone__)); /* { dg-error \"expected\" } */\n+int i;\n+int ii;\n+extern int a __attribute__ ((alias (\"i\") unused)); /* { dg-error \"expected\" } */\n+extern int a2 __attribute__ ((alias (\"i\" \"i\")));\n+struct A { char p[6]; } __attribute__((__packed__ packed)); /* { dg-error \"expected\" } */"}]}