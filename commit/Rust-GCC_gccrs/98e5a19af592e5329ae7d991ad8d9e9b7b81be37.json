{"sha": "98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlNWExOWFmNTkyZTUzMjlhZTdkOTkxYWQ4ZDllOWI3YjgxYmUzNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-08-09T04:33:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-08-09T04:33:58Z"}, "message": "Implement C++17 constexpr lambda.\n\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Update __cpp_constexpr for\n\tC++17 constexpr lambdas.\ngcc/cp/\n\t* class.c (finalize_literal_type_property): Handle lambdas.\n\t* constexpr.c (is_valid_constexpr_fn): Likewise.  No longer static.\n\t(explain_invalid_constexpr_fn, cxx_eval_call_expression): Handle\n\tlambdas.\n\t(cxx_eval_constant_expression): Handle capture proxy.\n\t(var_in_constexpr_fn): Don't check for C++14.\n\t(var_in_maybe_constexpr_fn): New.\n\t(potential_constant_expression_1): Use it.  Check DECL_EXPR for\n\tdeclarations not allowed in constexpr function.\n\t* decl.c (make_rtl_for_nonlocal_decl): Use var_in_maybe_constexpr_fn.\n\t(finish_function): Set DECL_DECLARED_CONSTEXPR_P on lambda members.\n\t* lambda.c (begin_lambda_type): Set CLASSTYPE_LITERAL_P.\n\t(maybe_add_lambda_conv_op): Clear thunk CALL_EXPR location.\n\t(lambda_static_thunk_p): New.\n\t* parser.c (cp_keyword_starts_decl_specifier_p): Add RID_CONSTEXPR.\n\t(CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR): New enumerator.\n\t(cp_parser_decl_specifier_seq): Handle it.\n\t(cp_parser_lambda_declarator_opt): Use cp_parser_decl_specifier_seq.\n\t* pt.c (instantiate_class_template_1): Set CLASSTYPE_LITERAL_P.\n\t(tsubst_copy_and_build) [CALL_EXPR]: Propagate CALL_FROM_THUNK_P.\n\t* error.c (dump_function_decl): Check TFF_NO_TEMPLATE_BINDINGS.\n\t(dump_expr) [FUNCTION_DECL]: Pass it.\n\nFrom-SVN: r239268", "tree": {"sha": "c6df51387a49c0bebc8f02921379e3e80cdba861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6df51387a49c0bebc8f02921379e3e80cdba861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7dc2b4a235481acda5ae9e51f4cc0401b1fb192f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc2b4a235481acda5ae9e51f4cc0401b1fb192f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc2b4a235481acda5ae9e51f4cc0401b1fb192f"}], "stats": {"total": 361, "additions": 332, "deletions": 29}, "files": [{"sha": "4b24dd62a7e18f39e45d9293a933ae36e23a1fc7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -1,3 +1,8 @@\n+2016-08-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Update __cpp_constexpr for\n+\tC++17 constexpr lambdas.\n+\n 2016-08-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/64955"}, {"sha": "46c70ac1150eb80941f24ae56e54bb79ad3e689d", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -863,7 +863,8 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_return_type_deduction=201304\");\n \t  cpp_define (pfile, \"__cpp_init_captures=201304\");\n \t  cpp_define (pfile, \"__cpp_generic_lambdas=201304\");\n-\t  cpp_define (pfile, \"__cpp_constexpr=201304\");\n+\t  if (cxx_dialect <= cxx14)\n+\t    cpp_define (pfile, \"__cpp_constexpr=201304\");\n \t  cpp_define (pfile, \"__cpp_decltype_auto=201304\");\n \t  cpp_define (pfile, \"__cpp_aggregate_nsdmi=201304\");\n \t  cpp_define (pfile, \"__cpp_variable_templates=201304\");\n@@ -880,6 +881,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_fold_expressions=201603\");\n \t  cpp_define (pfile, \"__cpp_nontype_template_args=201411\");\n \t  cpp_define (pfile, \"__cpp_range_based_for=201603\");\n+\t  cpp_define (pfile, \"__cpp_constexpr=201603\");\n \t}\n       if (flag_concepts)\n \t/* Use a value smaller than the 201507 specified in"}, {"sha": "1344443b2dc3441c17f54dba6a38c222e457291c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -1,3 +1,30 @@\n+2016-08-08  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement C++17 constexpr lambda.\n+\t* class.c (finalize_literal_type_property): Handle lambdas.\n+\t* constexpr.c (is_valid_constexpr_fn): Likewise.  No longer static.\n+\t(explain_invalid_constexpr_fn, cxx_eval_call_expression): Handle\n+\tlambdas.\n+\t(cxx_eval_constant_expression): Handle capture proxy.\n+\t(var_in_constexpr_fn): Don't check for C++14.\n+\t(var_in_maybe_constexpr_fn): New.\n+\t(potential_constant_expression_1): Use it.  Check DECL_EXPR for\n+\tdeclarations not allowed in constexpr function.  Handle\n+\tSTATIC_ASSERT, RANGE_FOR_STMT.\n+\t* decl.c (make_rtl_for_nonlocal_decl): Use var_in_maybe_constexpr_fn.\n+\t(finish_function): Set DECL_DECLARED_CONSTEXPR_P on lambda members.\n+\t* lambda.c (begin_lambda_type): Set CLASSTYPE_LITERAL_P.\n+\t(maybe_add_lambda_conv_op): Clear thunk CALL_EXPR location.\n+\t(lambda_static_thunk_p): New.\n+\t* parser.c (cp_keyword_starts_decl_specifier_p): Add RID_CONSTEXPR.\n+\t(CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR): New enumerator.\n+\t(cp_parser_decl_specifier_seq): Handle it.\n+\t(cp_parser_lambda_declarator_opt): Use cp_parser_decl_specifier_seq.\n+\t* pt.c (instantiate_class_template_1): Set CLASSTYPE_LITERAL_P.\n+\t(tsubst_copy_and_build) [CALL_EXPR]: Propagate CALL_FROM_THUNK_P.\n+\t* error.c (dump_function_decl): Check TFF_NO_TEMPLATE_BINDINGS.\n+\t(dump_expr) [FUNCTION_DECL]: Pass it.\n+\n 2016-08-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67131"}, {"sha": "e7cfabd4b5948de3a75e7c9bfcd92ce5e91d1312", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -5659,7 +5659,7 @@ finalize_literal_type_property (tree t)\n \t  && !DECL_CONSTRUCTOR_P (fn))\n \t{\n \t  DECL_DECLARED_CONSTEXPR_P (fn) = false;\n-\t  if (!DECL_GENERATED_P (fn))\n+\t  if (!DECL_GENERATED_P (fn) && !LAMBDA_TYPE_P (t))\n \t    {\n \t      error (\"enclosing class of constexpr non-static member \"\n \t\t     \"function %q+#D is not a literal type\", fn);"}, {"sha": "a65b817af88e9b8eed0f87a8047658e67ba60b62", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 75, "deletions": 11, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -166,7 +166,7 @@ retrieve_constexpr_fundef (tree fun)\n /* Check whether the parameter and return types of FUN are valid for a\n    constexpr function, and complain if COMPLAIN.  */\n \n-static bool\n+bool\n is_valid_constexpr_fn (tree fun, bool complain)\n {\n   bool ret = true;\n@@ -832,8 +832,9 @@ explain_invalid_constexpr_fn (tree fun)\n   static hash_set<tree> *diagnosed;\n   tree body;\n   location_t save_loc;\n-  /* Only diagnose defaulted functions or instantiations.  */\n+  /* Only diagnose defaulted functions, lambdas, or instantiations.  */\n   if (!DECL_DEFAULTED_FN (fun)\n+      && !LAMBDA_TYPE_P (CP_DECL_CONTEXT (fun))\n       && !is_instantiation_of_constexpr (fun))\n     return;\n   if (diagnosed == NULL)\n@@ -843,14 +844,20 @@ explain_invalid_constexpr_fn (tree fun)\n     return;\n \n   save_loc = input_location;\n-  input_location = DECL_SOURCE_LOCATION (fun);\n-  inform (input_location,\n-\t  \"%qD is not usable as a constexpr function because:\", fun);\n+  if (!lambda_static_thunk_p (fun))\n+    {\n+      /* Diagnostics should completely ignore the static thunk, so leave\n+\t input_location set to our caller's location.  */\n+      input_location = DECL_SOURCE_LOCATION (fun);\n+      inform (input_location,\n+\t      \"%qD is not usable as a constexpr function because:\", fun);\n+    }\n   /* First check the declaration.  */\n   if (is_valid_constexpr_fn (fun, true))\n     {\n       /* Then if it's OK, the body.  */\n-      if (!DECL_DECLARED_CONSTEXPR_P (fun))\n+      if (!DECL_DECLARED_CONSTEXPR_P (fun)\n+\t  && !LAMBDA_TYPE_P (CP_DECL_CONTEXT (fun)))\n \texplain_implicit_non_constexpr (fun);\n       else\n \t{\n@@ -1464,8 +1471,10 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t  \"definition is complete\", fun);\n \t      else if (DECL_INITIAL (fun))\n \t\t{\n-\t\t  /* The definition of fun was somehow unsuitable.  */\n-\t\t  error_at (loc, \"%qD called in a constant expression\", fun);\n+\t\t  /* The definition of fun was somehow unsuitable.  But pretend\n+\t\t     that lambda static thunks don't exist.  */\n+\t\t  if (!lambda_static_thunk_p (fun))\n+\t\t    error_at (loc, \"%qD called in a constant expression\", fun);\n \t\t  explain_invalid_constexpr_fn (fun);\n \t\t}\n \t      else\n@@ -3096,14 +3105,30 @@ cxx_eval_trinary_expression (const constexpr_ctx *ctx, tree t,\n   return val;\n }\n \n+/* True if T was declared in a function declared to be constexpr, and\n+   therefore potentially constant in C++14.  */\n+\n bool\n var_in_constexpr_fn (tree t)\n {\n   tree ctx = DECL_CONTEXT (t);\n-  return (cxx_dialect >= cxx14 && ctx && TREE_CODE (ctx) == FUNCTION_DECL\n+  return (ctx && TREE_CODE (ctx) == FUNCTION_DECL\n \t  && DECL_DECLARED_CONSTEXPR_P (ctx));\n }\n \n+/* True if T was declared in a function that might be constexpr: either a\n+   function that was declared constexpr, or a C++17 lambda op().  */\n+\n+bool\n+var_in_maybe_constexpr_fn (tree t)\n+{\n+  if (cxx_dialect >= cxx1z\n+      && DECL_FUNCTION_SCOPE_P (t)\n+      && LAMBDA_FUNCTION_P (DECL_CONTEXT (t)))\n+    return true;\n+  return var_in_constexpr_fn (t);\n+}\n+\n /* Evaluate an INIT_EXPR or MODIFY_EXPR.  */\n \n static tree\n@@ -3665,6 +3690,10 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       return (*ctx->values->get (t));\n \n     case VAR_DECL:\n+      if (is_capture_proxy (t))\n+\treturn cxx_eval_constant_expression (ctx, DECL_VALUE_EXPR (t),\n+\t\t\t\t\t     lval, non_constant_p, overflow_p);\n+      /* else fall through.  */\n     case CONST_DECL:\n       /* We used to not check lval for CONST_DECL, but darwin.c uses\n \t CONST_DECL for aggregate constants.  */\n@@ -4775,6 +4804,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case BREAK_STMT:\n     case CONTINUE_STMT:\n     case REQUIRES_EXPR:\n+    case STATIC_ASSERT:\n       return true;\n \n     case AGGR_INIT_EXPR:\n@@ -4900,7 +4930,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \n     case VAR_DECL:\n       if (want_rval\n-\t  && !var_in_constexpr_fn (t)\n+\t  && !var_in_maybe_constexpr_fn (t)\n \t  && !type_dependent_expression_p (t)\n \t  && !decl_constant_var_p (t)\n \t  && (strict\n@@ -5042,6 +5072,13 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \treturn false;\n       return true;\n \n+    case RANGE_FOR_STMT:\n+      if (!RECUR (RANGE_FOR_EXPR (t), any))\n+\treturn false;\n+      if (!RECUR (RANGE_FOR_BODY (t), any))\n+\treturn false;\n+      return true;\n+\n     case WHILE_STMT:\n       if (!RECUR (WHILE_COND (t), rval))\n \treturn false;\n@@ -5172,14 +5209,41 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case EH_SPEC_BLOCK:\n     case EXPR_STMT:\n     case PAREN_EXPR:\n-    case DECL_EXPR:\n     case NON_DEPENDENT_EXPR:\n       /* For convenience.  */\n     case RETURN_EXPR:\n     case LOOP_EXPR:\n     case EXIT_EXPR:\n       return RECUR (TREE_OPERAND (t, 0), want_rval);\n \n+    case DECL_EXPR:\n+      tmp = DECL_EXPR_DECL (t);\n+      if (VAR_P (tmp) && !DECL_ARTIFICIAL (tmp))\n+\t{\n+\t  if (TREE_STATIC (tmp))\n+\t    {\n+\t      if (flags & tf_error)\n+\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n+\t\t\t  \"%<static%> in %<constexpr%> function\", tmp);\n+\t      return false;\n+\t    }\n+\t  else if (CP_DECL_THREAD_LOCAL_P (tmp))\n+\t    {\n+\t      if (flags & tf_error)\n+\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n+\t\t\t  \"%<thread_local%> in %<constexpr%> function\", tmp);\n+\t      return false;\n+\t    }\n+\t  else if (!DECL_NONTRIVIALLY_INITIALIZED_P (tmp))\n+\t    {\n+\t      if (flags & tf_error)\n+\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"uninitialized \"\n+\t\t\t  \"variable %qD in %<constexpr%> function\", tmp);\n+\t      return false;\n+\t    }\n+\t}\n+      return RECUR (tmp, want_rval);\n+\n     case TRY_FINALLY_EXPR:\n       return (RECUR (TREE_OPERAND (t, 0), want_rval)\n \t      && RECUR (TREE_OPERAND (t, 1), any));"}, {"sha": "70a42f87103abc814194c9febef1aaaa2cad0dfd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -6478,6 +6478,7 @@ extern tree current_nonlambda_scope\t\t(void);\n extern bool generic_lambda_fn_p\t\t\t(tree);\n extern void maybe_add_lambda_conv_op            (tree);\n extern bool is_lambda_ignored_entity            (tree);\n+extern bool lambda_static_thunk_p\t\t(tree);\n \n /* in tree.c */\n extern int cp_tree_operand_length\t\t(const_tree);\n@@ -6922,6 +6923,7 @@ bool cilkplus_an_triplet_types_ok_p             (location_t, tree, tree, tree,\n extern void fini_constexpr\t\t\t(void);\n extern bool literal_type_p                      (tree);\n extern tree register_constexpr_fundef           (tree, tree);\n+extern bool is_valid_constexpr_fn\t\t(tree, bool);\n extern bool check_constexpr_ctor_body           (tree, tree, bool);\n extern tree ensure_literal_type_for_constexpr_object (tree);\n extern bool potential_constant_expression       (tree);\n@@ -6940,6 +6942,7 @@ extern bool is_sub_constant_expr                (tree);\n extern bool reduced_constant_expression_p       (tree);\n extern bool is_instantiation_of_constexpr       (tree);\n extern bool var_in_constexpr_fn                 (tree);\n+extern bool var_in_maybe_constexpr_fn           (tree);\n extern void explain_invalid_constexpr_fn        (tree);\n extern vec<tree> cx_error_context               (void);\n extern tree fold_sizeof_expr\t\t\t(tree);"}, {"sha": "45286d0bf67b71608e6394705c3f46b39ee53f53", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -6305,7 +6305,7 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n      DECL_EXPR is expanded.  But with constexpr its function might never\n      be expanded, so go ahead and tell cgraph about the variable now.  */\n   defer_p = ((DECL_FUNCTION_SCOPE_P (decl)\n-\t      && !DECL_DECLARED_CONSTEXPR_P (DECL_CONTEXT (decl)))\n+\t      && !var_in_maybe_constexpr_fn (decl))\n \t     || DECL_VIRTUAL_P (decl));\n \n   /* Defer template instantiations.  */\n@@ -14748,6 +14748,14 @@ finish_function (int flags)\n   if (DECL_DECLARED_CONCEPT_P (fndecl))\n     check_function_concept (fndecl);\n \n+  /* Lambda closure members are implicitly constexpr if possible.  */\n+  if (cxx_dialect >= cxx1z\n+      && LAMBDA_TYPE_P (CP_DECL_CONTEXT (fndecl))\n+      && (processing_template_decl\n+\t  || is_valid_constexpr_fn (fndecl, /*complain*/false))\n+      && potential_constant_expression (DECL_SAVED_TREE (fndecl)))\n+    DECL_DECLARED_CONSTEXPR_P (fndecl) = true;\n+\n   /* Save constexpr function body before it gets munged by\n      the NRV transformation.   */\n   maybe_save_function_definition (fndecl);"}, {"sha": "0d466735f636306a322a80676343210c91af7aed", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -1509,6 +1509,7 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n \n   /* Pretty print template instantiations only.  */\n   if (DECL_USE_TEMPLATE (t) && DECL_TEMPLATE_INFO (t)\n+      && !(flags & TFF_NO_TEMPLATE_BINDINGS)\n       && flag_pretty_templates)\n     {\n       tree tmpl;\n@@ -1989,6 +1990,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n     case IDENTIFIER_NODE:\n       dump_decl (pp, t, ((flags & ~(TFF_DECL_SPECIFIERS|TFF_RETURN_TYPE\n                                     |TFF_TEMPLATE_HEADER))\n+\t\t\t | TFF_NO_TEMPLATE_BINDINGS\n                          | TFF_NO_FUNCTION_ARGUMENTS));\n       break;\n "}, {"sha": "d51118571bcac9505be000fdfd6683c27769fd18", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -154,6 +154,11 @@ begin_lambda_type (tree lambda)\n   LAMBDA_EXPR_CLOSURE (lambda) = type;\n   CLASSTYPE_LAMBDA_EXPR (type) = lambda;\n \n+  /* In C++17, assume the closure is literal; we'll clear the flag later if\n+     necessary.  */\n+  if (cxx_dialect >= cxx1z)\n+    CLASSTYPE_LITERAL_P (type) = true;\n+\n   /* Clear base types.  */\n   xref_basetypes (type, /*bases=*/NULL_TREE);\n \n@@ -1004,6 +1009,7 @@ maybe_add_lambda_conv_op (tree type)\n \t\t\t direct_argvec->address ());\n \n   CALL_FROM_THUNK_P (call) = 1;\n+  SET_EXPR_LOCATION (call, UNKNOWN_LOCATION);\n \n   tree stattype = build_function_type (fn_result, FUNCTION_ARG_CHAIN (callop));\n   stattype = (cp_build_type_attribute_variant\n@@ -1141,6 +1147,18 @@ maybe_add_lambda_conv_op (tree type)\n     --function_depth;\n }\n \n+/* True if FN is the static function \"_FUN\" that gets returned from the lambda\n+   conversion operator.  */\n+\n+bool\n+lambda_static_thunk_p (tree fn)\n+{\n+  return (fn && TREE_CODE (fn) == FUNCTION_DECL\n+\t  && DECL_ARTIFICIAL (fn)\n+\t  && DECL_STATIC_FUNCTION_P (fn)\n+\t  && LAMBDA_TYPE_P (CP_DECL_CONTEXT (fn)));\n+}\n+\n /* Returns true iff VAL is a lambda-related declaration which should\n    be ignored by unqualified lookup.  */\n "}, {"sha": "6db5e84475bd778aebcbf416633d6de00fa617b3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -981,6 +981,7 @@ cp_keyword_starts_decl_specifier_p (enum rid keyword)\n       /* C++0x extensions.  */\n     case RID_DECLTYPE:\n     case RID_UNDERLYING_TYPE:\n+    case RID_CONSTEXPR:\n       return true;\n \n     default:\n@@ -1800,7 +1801,9 @@ enum\n   CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS = 0x4,\n   /* When parsing a decl-specifier-seq, only allow type-specifier or\n      constexpr.  */\n-  CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR = 0x8\n+  CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR = 0x8,\n+  /* When parsing a decl-specifier-seq, only allow mutable or constexpr.  */\n+  CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR = 0x10\n };\n \n /* This type is used for parameters and variables which hold\n@@ -10035,7 +10038,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n      < template-parameter-list [opt] >\n      ( parameter-declaration-clause [opt] )\n        attribute-specifier [opt]\n-       mutable [opt]\n+       decl-specifier-seq [opt]\n        exception-specification [opt]\n        lambda-return-type-clause [opt]\n \n@@ -10054,6 +10057,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n   tree exception_spec = NULL_TREE;\n   tree template_param_list = NULL_TREE;\n   tree tx_qual = NULL_TREE;\n+  cp_decl_specifier_seq lambda_specs;\n+  clear_decl_specs (&lambda_specs);\n \n   /* The template-parameter-list is optional, but must begin with\n      an opening angle if present.  */\n@@ -10097,12 +10102,20 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n       attributes = cp_parser_attributes_opt (parser);\n \n-      /* Parse optional `mutable' keyword.  */\n-      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_MUTABLE))\n-        {\n-          cp_lexer_consume_token (parser->lexer);\n-          LAMBDA_EXPR_MUTABLE_P (lambda_expr) = 1;\n-        }\n+      /* In the decl-specifier-seq of the lambda-declarator, each\n+\t decl-specifier shall either be mutable or constexpr.  */\n+      int declares_class_or_enum;\n+      if (cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer))\n+\tcp_parser_decl_specifier_seq (parser,\n+\t\t\t\t      CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR,\n+\t\t\t\t      &lambda_specs, &declares_class_or_enum);\n+      if (lambda_specs.storage_class == sc_mutable)\n+\t{\n+\t  LAMBDA_EXPR_MUTABLE_P (lambda_expr) = 1;\n+\t  if (lambda_specs.conflicting_specifiers_p)\n+\t    error_at (lambda_specs.locations[ds_storage_class],\n+\t\t      \"duplicate %<mutable%>\");\n+\t}\n \n       tx_qual = cp_parser_tx_qualifier_opt (parser);\n \n@@ -10143,6 +10156,16 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       /* Maybe we will deduce the return type later.  */\n       return_type_specs.type = make_auto ();\n \n+    if (lambda_specs.locations[ds_constexpr])\n+      {\n+\tif (cxx_dialect >= cxx1z)\n+\t  return_type_specs.locations[ds_constexpr]\n+\t    = lambda_specs.locations[ds_constexpr];\n+\telse\n+\t  error_at (lambda_specs.locations[ds_constexpr], \"%<constexpr%> \"\n+\t\t    \"lambda only available with -std=c++1z or -std=gnu++1z\");\n+      }\n+\n     p = obstack_alloc (&declarator_obstack, 0);\n \n     declarator = make_id_declarator (NULL_TREE, ansi_opname (CALL_EXPR),\n@@ -12776,6 +12799,13 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t  && token->keyword != RID_CONSTEXPR)\n \terror (\"decl-specifier invalid in condition\");\n \n+      if (found_decl_spec\n+\t  && (flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR)\n+\t  && token->keyword != RID_MUTABLE\n+\t  && token->keyword != RID_CONSTEXPR)\n+\terror_at (token->location, \"%qD invalid in lambda\",\n+\t\t  ridpointers[token->keyword]);\n+\n       if (ds != ds_last)\n \tset_and_check_decl_spec_loc (decl_specs, ds, token);\n "}, {"sha": "38840827ee7024cd5da99528303c825765292cb6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -10334,6 +10334,9 @@ instantiate_class_template_1 (tree type)\n       tree decl = lambda_function (type);\n       if (decl)\n \t{\n+\t  if (cxx_dialect >= cxx1z)\n+\t    CLASSTYPE_LITERAL_P (type) = true;\n+\n \t  if (!DECL_TEMPLATE_INFO (decl)\n \t      || DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (decl)) != decl)\n \t    {\n@@ -16760,12 +16763,19 @@ tsubst_copy_and_build (tree t,\n \t    bool op = CALL_EXPR_OPERATOR_SYNTAX (t);\n \t    bool ord = CALL_EXPR_ORDERED_ARGS (t);\n \t    bool rev = CALL_EXPR_REVERSE_ARGS (t);\n-\t    if (op || ord || rev)\n+\t    bool thk = CALL_FROM_THUNK_P (t);\n+\t    if (op || ord || rev || thk)\n \t      {\n \t\tfunction = extract_call_expr (ret);\n \t\tCALL_EXPR_OPERATOR_SYNTAX (function) = op;\n \t\tCALL_EXPR_ORDERED_ARGS (function) = ord;\n \t\tCALL_EXPR_REVERSE_ARGS (function) = rev;\n+\t\tif (thk)\n+\t\t  {\n+\t\t    CALL_FROM_THUNK_P (function) = true;\n+\t\t    /* The thunk location is not interesting.  */\n+\t\t    SET_EXPR_LOCATION (function, UNKNOWN_LOCATION);\n+\t\t  }\n \t      }\n \t  }\n "}, {"sha": "417c1859db21556bac9576be3019439811d9144f", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -1,6 +1,6 @@\n // Test for conversion from stateless lambda to function pointer.\n \n-// { dg-do compile { target c++11 } }\n+// { dg-do compile { target c++11_only } }\n // { dg-final { scan-assembler \"weak\\[^\\n\\r\\]*_?_ZZ1fvENKUlvE_cvPFvvEEv\" { target { ! { *-*-darwin* *-*-mingw* *-*-cygwin *-*-hpux10* } } } } }\n \n inline void f()"}, {"sha": "20ef282ac24e5dd537b0e3258a12707c25baaf56", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -50,7 +50,8 @@ struct S {\n template<typename T> struct R {\n   static int x;\n };\n-template<typename T> int R<T>::x = []{return 1;}();\n+// \"int i;\" makes the op() non-constexpr in C++17.\n+template<typename T> int R<T>::x = []{int i; return 1;}();\n template int R<int>::x;\n // Type of lambda in intializer of R<int>::x: N1RIiE1xMUlvE_E\n // Corresponding operator(): _ZNK1RIiE1xMUlvE_clEv"}, {"sha": "b63c277e56cdcc6c6264f78c6a9c07bb1d7d9305", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle4.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -4,8 +4,8 @@\n template <class T>\n struct A\n {\n-  // { dg-final { scan-assembler \"_ZNK1AIcE1pMUlvE_cvPFvvEEv\" } }\n-  // { dg-final { scan-assembler \"_ZNK1AIiE1pMUlvE_cvPFvvEEv\" } }\n+  // { dg-final { scan-assembler \"_ZNK1AIcE1pMUlvE_clEv\" } }\n+  // { dg-final { scan-assembler \"_ZNK1AIiE1pMUlvE_clEv\" } }\n   void (*p)() = []{};\n };\n "}, {"sha": "a768cfb22cafd59f0d345a431be128c7182bf690", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda1.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options -std=c++1z }\n+\n+constexpr auto Add5 = [](int i) { return i+5; };\n+\n+constexpr int x = Add5(4);\n+static_assert(x==9);"}, {"sha": "ff65d6c7d47c3d584d9eade6674cab2940eb2c73", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda10.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda10.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,10 @@\n+// Testcase from P0170R1\n+// { dg-options -std=c++1z }\n+\n+void g() {\n+  const int n = 0;\n+  [=] {\n+    constexpr int i = n; // OK, 'n' is not odr-used and not captured here.\n+    constexpr int j = *&n; // { dg-error \"\" } '&n' would be an odr-use of 'n'.\n+  };\n+}"}, {"sha": "f9e662d31c5ceb25e432a4c58a9dfae7d5981cfb", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda11.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,11 @@\n+// Testcase from P0170R1\n+// { dg-options -std=c++1z }\n+\n+// 'v' & 'm' are odr-used but do not occur in a constant-expression within the nested\n+// lambda, so are well-formed.\n+auto monad = [](auto v) { return [=] { return v; }; };\n+auto bind = [](auto m) {\n+  return [=](auto fvm) { return fvm(m()); };\n+};\n+// OK to have captures to automatic objects created during constant expression evaluation.\n+static_assert(bind(monad(2))(monad)() == monad(2)());"}, {"sha": "f5f3f385d3fd9604173f276f4d7fdfe8c2073c78", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda12.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options -std=c++1z }\n+\n+void f(int i)\n+{\n+  [i]() constexpr {\n+    int j;\t\t\t// { dg-error \"uninitialized\" }\n+    j = i;\n+    return j;\n+  }();\n+}"}, {"sha": "077f8235d5f995160f7f7e74102e98c8a328dc39", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda13.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda13.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options -std=c++1z }\n+\n+auto l1 = []() constexpr constexpr { }; // { dg-error \"duplicate\" }\n+auto l2 = []() mutable mutable { }; // { dg-error \"duplicate\" }\n+auto l3 = []() static { };\t    // { dg-error \"static\" }"}, {"sha": "26d078b6db35b45f3b2c391d0abc836c2da1b853", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda14.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda14.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,4 @@\n+// { dg-options -std=c++14 }\n+\n+auto l = []() constexpr { return 42; }; // { dg-error \"constexpr\" }\n+"}, {"sha": "1d3ff826fa4430873ebf418519e189d73825a52a", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda2.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,7 @@\n+// Testcase from P0170R1\n+// { dg-options -std=c++1z }\n+\n+constexpr int AddEleven(int n){\n+  return[n]{return n+11;}();\n+}\n+static_assert(AddEleven(5)==16,\"\");"}, {"sha": "46ee84686b1679806b8b9ab60066a79b3d805130", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda3.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options -std=c++1z }\n+\n+constexpr auto add = [] (int n, int m) {\n+  auto L = [=] { return n; };\n+  auto R = [=] { return m; };\n+  return [=] { return L() + R(); };\n+};\n+static_assert(add(3, 4)() == 7, \"\");"}, {"sha": "b3fd3d0030edcb6ea61d8f3399377a1fb91aae1e", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda4.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda4.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,4 @@\n+// { dg-options -std=c++1z }\n+\n+auto ID = [] (int n) constexpr { return n; };\n+constexpr int I = ID(3);"}, {"sha": "71f1852a4bde0736bcb2967c8e65c5835107e37c", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda5.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options -std=c++1z }\n+\n+auto addOne = [] (int n) {\n+  return n + 1;\n+};\n+constexpr int (*addOneFp)(int) = addOne;\n+static_assert(addOneFp(3) == addOne(3), \"\");"}, {"sha": "bb20badd28672870af6fb8650ac37df51863765b", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda6.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,30 @@\n+// Testcase from P0170R1\n+// { dg-do run }\n+// { dg-options -std=c++1z }\n+\n+auto monoid = [](auto v) { return [=] { return v; }; };\n+auto add = [](auto m1) constexpr {\n+  auto ret = m1();\n+  return [=](auto m2) mutable {\n+    auto m1val = m1();\n+    auto plus = [=] (auto m2val) mutable constexpr\n+      { return m1val += m2val; };\n+    ret = plus(m2());\n+    return monoid(ret);\n+  };\n+};\n+\n+int main()\n+{\n+  constexpr auto zero = monoid(0);\n+  constexpr auto one = monoid(1);\n+  static_assert(add(one)(zero)() == one()); // OK\n+  // Since 'two' below is not declared constexpr, an evaluation of its constexpr\n+  // member function call operator can not perform an lvalue-to-rvalue conversion\n+  // on one of its subobjects (that represents its capture) in a constant\n+  // expression.\n+  auto two = monoid(2);\n+  if (!(two() == 2)) __builtin_abort(); // OK, not a constant expression.\n+  static_assert(add(one)(one)() == two()); // { dg-error \"\" } two() is not a constant expression\n+  static_assert(add(one)(one)() == monoid(2)()); // OK\n+}"}, {"sha": "26f136b6c799460d4e3a99e187e6a57fe6cf5f2e", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda7.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,12 @@\n+// Testcase from P0170R1\n+// { dg-options -std=c++1z }\n+\n+auto ID = [](auto a) { return a; };\n+static_assert( ID (3) == 3); // OK\n+struct NonLiteral {\n+  NonLiteral(int n) : n(n) { }\n+  int n;\n+};\n+\n+static_assert( ID (NonLiteral{3}).n == 3); // { dg-error \"non-literal\" }\n+// { dg-prune-output \"static assertion\" }"}, {"sha": "ac413066bd9ba24dec6ef7eeffe2c7f18ab7a223", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,15 @@\n+// Testcase from P0170R1\n+// { dg-options -std=c++1z }\n+\n+auto Fwd = [](int (*fp)(int), auto a) { return fp(a); };\n+auto C = [](auto a) { return a; };\n+static_assert( Fwd(C ,3) == 3); // OK\n+// No specialization of the function call operator template can be constexpr\n+// (because of the local static).\n+auto NC = [](auto a) { static int s; return a; }; // { dg-error \"static\" }\n+// { dg-message \"operator int\" \"\" { target *-*-* } 11 }\n+static_assert( Fwd(NC ,3) == 3); // { dg-error \"\" }\n+\n+// We look for the string \"operator int\" to check that we aren't trying to do\n+// template pretty-printing in an expression; that gets incredibly unwieldy\n+// with the decltype magic we do for lambdas."}, {"sha": "a5bc524f0ec02ce8493eece03a96cd2d31a58b36", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda9.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda9.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -0,0 +1,4 @@\n+// Testcase from P0170R1\n+// { dg-options -std=c++1z }\n+\n+static_assert([](int n) { return [&n] { return ++n; }(); }(3) == 4);"}, {"sha": "f5ed6ab9cc89eef477a3f90f71930da3072064a5", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e5a19af592e5329ae7d991ad8d9e9b7b81be37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=98e5a19af592e5329ae7d991ad8d9e9b7b81be37", "patch": "@@ -128,8 +128,8 @@\n \n #ifndef __cpp_constexpr\n #  error \"__cpp_constexpr\"\n-#elif __cpp_constexpr != 201304\n-#  error \"__cpp_constexpr != 201304\"\n+#elif __cpp_constexpr != 201603\n+#  error \"__cpp_constexpr != 201603\"\n #endif\n \n #ifndef __cpp_decltype_auto"}]}