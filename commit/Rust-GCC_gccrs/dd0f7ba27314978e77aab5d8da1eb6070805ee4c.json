{"sha": "dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwZjdiYTI3MzE0OTc4ZTc3YWFiNWQ4ZGExZWI2MDcwODA1ZWU0Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-17T15:31:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-17T15:31:59Z"}, "message": "PR libstdc++/88881 adjust filesystem::status and tests for mingw semantics\n\nOn Windows stat(\"foo/bar/../.\") will resolve to \"foo\" even if that is a\nnon-directory and \"foo/bar\" does not exist. This is the expected\nbehaviour and consistent with boost::filesystem, so don't try to correct\nit. The only unwanted behaviour is that stat(\"baz/\") fails due to a\nmingw bug (fixed in mingw-w64 v6.0.0) so add a workaround.\n\n\tPR libstdc++/88881\n\t* src/c++17/fs_ops.cc (canonical(const path&, error_code&))\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Normalize path, to match behaviour\n\tof filesystem::exists.\n\t(create_directories(const path&, error_code&)): Add assertions.\n\t(status(const path&, error_code&)) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]:\n\tAdd workaround for bug in _wstat for paths with trailing slash.\n\t* testsuite/27_io/filesystem/operations/create_directories.cc: Adjust\n\tfor expected behaviour on mingw.\n\t* testsuite/experimental/filesystem/operations/create_directories.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc: Use\n\t\"TMP\" instead of \"TMPDIR\" and clean environment before each test. Do\n\tnot test permissions on mingw targets.\n\nFrom-SVN: r268034", "tree": {"sha": "634a3e08bd9424e9edbddd635c8537536747bcf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/634a3e08bd9424e9edbddd635c8537536747bcf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e48eaadab4e73c7d87ea13439dda4ba76abb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e48eaadab4e73c7d87ea13439dda4ba76abb2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e48eaadab4e73c7d87ea13439dda4ba76abb2b"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "62d5db8b4e820ad7c383e1d887ffd6a8ede90e53", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "patch": "@@ -1,3 +1,20 @@\n+2019-01-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/88881\n+\t* src/c++17/fs_ops.cc (canonical(const path&, error_code&))\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Normalize path, to match behaviour\n+\tof filesystem::exists.\n+\t(create_directories(const path&, error_code&)): Add assertions.\n+\t(status(const path&, error_code&)) [_GLIBCXX_FILESYSTEM_IS_WINDOWS]:\n+\tAdd workaround for bug in _wstat for paths with trailing slash.\n+\t* testsuite/27_io/filesystem/operations/create_directories.cc: Adjust\n+\tfor expected behaviour on mingw.\n+\t* testsuite/experimental/filesystem/operations/create_directories.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc: Use\n+\t\"TMP\" instead of \"TMPDIR\" and clean environment before each test. Do\n+\tnot test permissions on mingw targets.\n+\n 2019-01-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Add exports for fstream"}, {"sha": "5f8be5b78481666f78687d18050b4091aba128fa", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "patch": "@@ -144,7 +144,11 @@ fs::path\n fs::canonical(const path& p, error_code& ec)\n {\n   path result;\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  const path pa = absolute(p.lexically_normal(), ec);\n+#else\n   const path pa = absolute(p, ec);\n+#endif\n   if (ec)\n     return result;\n \n@@ -483,6 +487,9 @@ fs::create_directories(const path& p, error_code& ec)\n       return false;\n     }\n \n+  __glibcxx_assert(st.type() == file_type::not_found);\n+  // !exists(p) so there must be at least one non-existent component in p.\n+\n   std::stack<path> missing;\n   path pp = p;\n \n@@ -526,6 +533,8 @@ fs::create_directories(const path& p, error_code& ec)\n     }\n   while (st.type() == file_type::not_found);\n \n+  __glibcxx_assert(!missing.empty());\n+\n   bool created;\n   do\n     {\n@@ -1318,8 +1327,35 @@ fs::file_status\n fs::status(const fs::path& p, error_code& ec) noexcept\n {\n   file_status status;\n+  auto str = p.c_str();\n+\n+#if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+#if ! defined __MINGW64_VERSION_MAJOR || __MINGW64_VERSION_MAJOR < 6\n+  // stat() fails if there's a trailing slash (PR 88881)\n+  path p2;\n+  if (p.has_relative_path())\n+    {\n+      wstring_view s = p.native();\n+      const auto len = s.find_last_not_of(L\"/\\\\\") + wstring_view::size_type(1);\n+      if (len != 0 && len != s.length())\n+\t{\n+\t  __try\n+\t    {\n+\t      p2.assign(s.substr(0, len));\n+\t    }\n+\t  __catch(const bad_alloc&)\n+\t    {\n+\t      ec = std::make_error_code(std::errc::not_enough_memory);\n+\t      return status;\n+\t    }\n+\t  str = p2.c_str();\n+\t}\n+    }\n+#endif\n+#endif\n+\n   stat_type st;\n-  if (posix::stat(p.c_str(), &st))\n+  if (posix::stat(str, &st))\n     {\n       int err = errno;\n       ec.assign(err, std::generic_category());"}, {"sha": "c4411dfc1e7c04e6064b2cc554cff954c929bc55", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/create_directories.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc?ref=dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "patch": "@@ -70,12 +70,20 @@ test01()\n   b = fs::create_directories( p/\"./d4/../d5\", ec );\n   VERIFY( !ec );\n   VERIFY( b );\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  // create_directories(\"./d4/..\") is a no-op, does not create \"d4\"\n+#else\n   VERIFY( is_directory(p/\"d4\") );\n+#endif\n   VERIFY( is_directory(p/\"d5\") );\n   VERIFY( is_directory(p/\"./d4/../d5\") );\n \n   std::uintmax_t count = remove_all(p, ec);\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  VERIFY( count == 5 );\n+#else\n   VERIFY( count == 6 );\n+#endif\n }\n \n void\n@@ -92,9 +100,11 @@ test02()\n     result = create_directories(file.path, ec);\n     VERIFY( !result );\n     VERIFY( ec == std::errc::not_a_directory );\n+    ec.clear();\n     result = create_directories(file.path / \"foo\", ec);\n     VERIFY( !result );\n     VERIFY( ec == std::errc::not_a_directory );\n+    ec.clear();\n   }\n \n   create_directories(p);\n@@ -105,9 +115,18 @@ test02()\n     result = create_directories(file.path, ec);\n     VERIFY( !result );\n     VERIFY( ec == std::errc::not_a_directory );\n+    ec.clear();\n     result = create_directories(file.path/\"../bar\", ec);\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+    VERIFY( result );\n+    VERIFY( !ec );\n+    VERIFY( is_directory(dir.path/\"bar\") );\n+    remove(dir.path/\"bar\");\n+#else\n     VERIFY( !result );\n     VERIFY( ec == std::errc::not_a_directory );\n+    VERIFY( !is_directory(dir.path/\"bar\") );\n+#endif\n   }\n }\n "}, {"sha": "2c8112f67424b77d6540d8f0bc3c54926d8a48f2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "patch": "@@ -75,7 +75,7 @@ test02()\n {\n   clean_env();\n \n-  if (!set_env(\"TMPDIR\", __gnu_test::nonexistent_path().string()))\n+  if (!set_env(\"TMP\", __gnu_test::nonexistent_path().string()))\n     return; // just give up\n \n   std::error_code ec;\n@@ -95,6 +95,13 @@ test02()\n void\n test03()\n {\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  // No permissions support\n+  return;\n+#endif\n+\n+  clean_env();\n+\n   auto p = __gnu_test::nonexistent_path();\n   create_directories(p/\"tmp\");\n   permissions(p, fs::perms::none);\n@@ -119,8 +126,10 @@ test03()\n void\n test04()\n {\n+  clean_env();\n+\n   __gnu_test::scoped_file f;\n-  set_env(\"TMPDIR\", f.path.string());\n+  set_env(\"TMP\", f.path.string());\n   std::error_code ec;\n   auto r = fs::temp_directory_path(ec);\n   VERIFY( ec == std::make_error_code(std::errc::not_a_directory) );"}, {"sha": "b6909b630d460e81a4580da44de264ca6388d88e", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/create_directories.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0f7ba27314978e77aab5d8da1eb6070805ee4c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcreate_directories.cc?ref=dd0f7ba27314978e77aab5d8da1eb6070805ee4c", "patch": "@@ -63,12 +63,20 @@ test01()\n   b = fs::create_directories( p/\"./d4/../d5\", ec );\n   VERIFY( !ec );\n   VERIFY( b );\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  // create_directories(\"./d4/..\") is a no-op, does not create \"d4\"\n+#else\n   VERIFY( is_directory(p/\"d4\") );\n+#endif\n   VERIFY( is_directory(p/\"d5\") );\n   VERIFY( is_directory(p/\"./d4/../d5\") );\n \n   std::uintmax_t count = remove_all(p, ec);\n+#if defined(__MINGW32__) || defined(__MINGW64__)\n+  VERIFY( count == 5 );\n+#else\n   VERIFY( count == 6 );\n+#endif\n }\n \n void\n@@ -87,8 +95,8 @@ test02()\n     VERIFY( ec == std::errc::not_a_directory );\n     result = create_directories(file.path / \"foo\", ec);\n     VERIFY( !result );\n-    __builtin_printf(\"%d\\n\", ec.value());\n-    VERIFY( ec == std::errc::not_a_directory );\n+    VERIFY( ec );\n+    ec.clear();\n   }\n \n   create_directories(p);\n@@ -101,7 +109,7 @@ test02()\n     VERIFY( ec == std::errc::not_a_directory );\n     result = create_directories(file.path/\"../bar\", ec);\n     VERIFY( !result );\n-    VERIFY( ec == std::errc::not_a_directory );\n+    VERIFY( ec );\n   }\n }\n "}]}