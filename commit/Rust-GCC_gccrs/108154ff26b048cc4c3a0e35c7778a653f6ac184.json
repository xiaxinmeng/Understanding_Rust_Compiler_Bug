{"sha": "108154ff26b048cc4c3a0e35c7778a653f6ac184", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4MTU0ZmYyNmIwNDhjYzRjM2EwZTM1Yzc3NzhhNjUzZjZhYzE4NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-03-04T19:21:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-03-04T19:21:38Z"}, "message": "c.opt (Wnoexcept-type): New.\n\n\t* c.opt (Wnoexcept-type): New.\n\ngcc/cp/\n\t* mangle.c (mangle_decl): Check -Wnoexcept-type instead of\n\t-Wc++1z-compat.\n\nFrom-SVN: r245894", "tree": {"sha": "1833d80a5c83857aa6da98b3a7d65dd30babf109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1833d80a5c83857aa6da98b3a7d65dd30babf109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/108154ff26b048cc4c3a0e35c7778a653f6ac184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108154ff26b048cc4c3a0e35c7778a653f6ac184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108154ff26b048cc4c3a0e35c7778a653f6ac184", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108154ff26b048cc4c3a0e35c7778a653f6ac184/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ff4bae6b55130e47855af1baf9a022b6e65e8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff4bae6b55130e47855af1baf9a022b6e65e8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff4bae6b55130e47855af1baf9a022b6e65e8e2"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "451cf387eca3e1cdb661f4eba040cf68e1be39ac", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=108154ff26b048cc4c3a0e35c7778a653f6ac184", "patch": "@@ -1,3 +1,7 @@\n+2017-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt (Wnoexcept-type): New.\n+\n 2017-03-02  Richard Biener  <rguenther@suse.de>\n \n \tPR c/79756"}, {"sha": "78fea61ef2a0f7aeca539418e098f3bf4b84b97f", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=108154ff26b048cc4c3a0e35c7778a653f6ac184", "patch": "@@ -780,6 +780,10 @@ Wnoexcept\n C++ ObjC++ Var(warn_noexcept) Warning\n Warn when a noexcept expression evaluates to false even though the expression can't actually throw.\n \n+Wnoexcept-type\n+C++ ObjC++ Warning Var(warn_noexcept_type) LangEnabledBy(C++ ObjC++,Wabi || Wc++1z-compat)\n+Warn if C++1z noexcept function type will change the mangled name of a symbol.\n+\n Wnon-template-friend\n C++ ObjC++ Var(warn_nontemplate_friend) Init(1) Warning\n Warn when non-templatized friend functions are declared within a template."}, {"sha": "b5587fdfab375d623409962ebf4dd2745d8427cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=108154ff26b048cc4c3a0e35c7778a653f6ac184", "patch": "@@ -1,5 +1,8 @@\n 2017-03-03  Jason Merrill  <jason@redhat.com>\n \n+\t* mangle.c (mangle_decl): Check -Wnoexcept-type instead of\n+\t-Wc++1z-compat.\n+\n \tCore issues 2273 and 2277\n \t* call.c (joust): Adjust using-declaration tiebreaker to handle\n \tthe intermediate base case."}, {"sha": "6f7e21c28a8c11771b0567d7acfc0b4049854671", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=108154ff26b048cc4c3a0e35c7778a653f6ac184", "patch": "@@ -3856,7 +3856,7 @@ mangle_decl (const tree decl)\n \n   if (G.need_cxx1z_warning\n       && (TREE_PUBLIC (decl) || DECL_REALLY_EXTERN (decl)))\n-    warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wc__1z_compat,\n+    warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wnoexcept_type,\n \t\t\"mangled name for %qD will change in C++17 because the \"\n \t\t\"exception specification is part of a function type\",\n \t\tdecl);"}, {"sha": "15eb0e0289ae47182550abe98c46033d29ebedac", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=108154ff26b048cc4c3a0e35c7778a653f6ac184", "patch": "@@ -215,7 +215,7 @@ in the following sections.\n -Wabi=@var{n}  -Wabi-tag  -Wconversion-null  -Wctor-dtor-privacy @gol\n -Wdelete-non-virtual-dtor  -Wliteral-suffix  -Wmultiple-inheritance @gol\n -Wnamespaces  -Wnarrowing @gol\n--Wnoexcept  -Wnon-virtual-dtor  -Wreorder  -Wregister @gol\n+-Wnoexcept  -Wnoexcept-type  -Wnon-virtual-dtor  -Wreorder  -Wregister @gol\n -Weffc++  -Wstrict-null-sentinel  -Wtemplates @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n@@ -2897,6 +2897,20 @@ to a function that does not have a non-throwing exception\n specification (i.e. @code{throw()} or @code{noexcept}) but is known by\n the compiler to never throw an exception.\n \n+@item -Wnoexcept @r{(C++ and Objective-C++ only)}\n+@opindex Wnoexcept-type\n+@opindex Wno-noexcept-type\n+Warn if the C++1z feature making @code{noexcept} part of a function\n+type changes the mangled name of a symbol relative to C++14.  Enabled\n+by @option{-Wabi} and @option{-Wc++1z-compat}.\n+\n+@smallexample\n+template <class T> void f(T t) @{ t(); @};\n+void g() noexcept;\n+void h() @{ f(g); @} // in C++14 calls f<void(*)()>, in C++1z calls f<void(*)()noexcept>\n+@end smallexample\n+\n+\n @item -Wnon-virtual-dtor @r{(C++ and Objective-C++ only)}\n @opindex Wnon-virtual-dtor\n @opindex Wno-non-virtual-dtor"}, {"sha": "f5028d2f9a7b93092e9326a2f1505b753911bb67", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type11a.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type11a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108154ff26b048cc4c3a0e35c7778a653f6ac184/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type11a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type11a.C?ref=108154ff26b048cc4c3a0e35c7778a653f6ac184", "patch": "@@ -0,0 +1,3 @@\n+// { dg-options \"-Wall -Wno-noexcept-type -std=c++14\" }\n+\n+void f(int(*)() noexcept) { }"}]}