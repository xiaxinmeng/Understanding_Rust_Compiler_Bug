{"sha": "6978c505d01ec65a1465a196e35f27eb5cc79c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3OGM1MDVkMDFlYzY1YTE0NjVhMTk2ZTM1ZjI3ZWI1Y2M3OWM2Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-31T11:53:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-31T11:53:04Z"}, "message": "re PR c++/69009 (ICE in instantiate_decl, at cp/pt.c:21511)\n\n\tPR c++/69009\n\n\t* pt.c (partial_specialization_p, impartial_args): New.\n\t(instantiate_decl): Call impartial_args.\n\nFrom-SVN: r233019", "tree": {"sha": "651eed443dd698aafb447881f43a5825ec17e9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/651eed443dd698aafb447881f43a5825ec17e9fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6978c505d01ec65a1465a196e35f27eb5cc79c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6978c505d01ec65a1465a196e35f27eb5cc79c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6978c505d01ec65a1465a196e35f27eb5cc79c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6978c505d01ec65a1465a196e35f27eb5cc79c66/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1568582a07836b3aa1073d8f5395931061d9cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1568582a07836b3aa1073d8f5395931061d9cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1568582a07836b3aa1073d8f5395931061d9cf3"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "783fe72ff53d56d5ddf0702b4228fa95c7dbc047", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6978c505d01ec65a1465a196e35f27eb5cc79c66/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6978c505d01ec65a1465a196e35f27eb5cc79c66/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6978c505d01ec65a1465a196e35f27eb5cc79c66", "patch": "@@ -1,5 +1,9 @@\n 2016-01-31  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/69009\n+\t* pt.c (partial_specialization_p, impartial_args): New.\n+\t(instantiate_decl): Call impartial_args.\n+\n \t* mangle.c (maybe_check_abi_tags): New.\n \t(write_guarded_var_name): Call it.\n \t(mangle_ref_init_variable): Call check_abi_tags."}, {"sha": "27dfdf863c3aad6b90e1f7fb5e05db4b684785d7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6978c505d01ec65a1465a196e35f27eb5cc79c66/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6978c505d01ec65a1465a196e35f27eb5cc79c66/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6978c505d01ec65a1465a196e35f27eb5cc79c66", "patch": "@@ -20746,6 +20746,36 @@ most_general_template (tree decl)\n   return decl;\n }\n \n+/* True iff the TEMPLATE_DECL tmpl is a partial specialization.  */\n+\n+static bool\n+partial_specialization_p (tree tmpl)\n+{\n+  /* Any specialization has DECL_TEMPLATE_SPECIALIZATION.  */\n+  if (!DECL_TEMPLATE_SPECIALIZATION (tmpl))\n+    return false;\n+  tree t = DECL_TI_TEMPLATE (tmpl);\n+  /* A specialization that fully specializes one of the containing classes is\n+     not a partial specialization.  */\n+  return (list_length (DECL_TEMPLATE_PARMS (tmpl))\n+\t  == list_length (DECL_TEMPLATE_PARMS (t)));\n+}\n+\n+/* If TMPL is a partial specialization, return the arguments for its primary\n+   template.  */\n+\n+static tree\n+impartial_args (tree tmpl, tree args)\n+{\n+  if (!partial_specialization_p (tmpl))\n+    return args;\n+\n+  /* If TMPL is a partial specialization, we need to substitute to get\n+     the args for the primary template.  */\n+  return tsubst_template_args (DECL_TI_ARGS (tmpl), args,\n+\t\t\t       tf_warning_or_error, tmpl);\n+}\n+\n /* Return the most specialized of the template partial specializations\n    which can produce TARGET, a specialization of some class or variable\n    template.  The value returned is actually a TREE_LIST; the TREE_VALUE is\n@@ -21570,7 +21600,7 @@ instantiate_decl (tree d, int defer_ok,\n     return d;\n \n   gen_tmpl = most_general_template (tmpl);\n-  gen_args = DECL_TI_ARGS (d);\n+  gen_args = impartial_args (tmpl, DECL_TI_ARGS (d));\n \n   if (tmpl != gen_tmpl)\n     /* We should already have the extra args.  */"}, {"sha": "a40ec575be4048716e0df427ff42e4d14fd13bf9", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ47.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6978c505d01ec65a1465a196e35f27eb5cc79c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6978c505d01ec65a1465a196e35f27eb5cc79c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ47.C?ref=6978c505d01ec65a1465a196e35f27eb5cc79c66", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/69009\n+// { dg-do compile { target c++14 } }\n+\n+using _uchar = char;\n+using _size_t = decltype(sizeof(_uchar));\n+using size_t = _size_t;\n+template <class T, T> struct integral_constant;\n+template <bool b> using bool_constant = integral_constant<bool, b>;\n+template <class> constexpr auto tuple_size_v = 0;\n+template <class T> auto const tuple_size_v<T const volatile> = tuple_size_v<T>;\n+template <class T>\n+using tuple_size = integral_constant<size_t, tuple_size_v<T>>;\n+template <typename Base, typename Deriv>\n+using is_base_of = bool_constant<__is_base_of(Base, Deriv)>;\n+template <class T, size_t N> void test() {\n+  is_base_of<integral_constant<size_t, N>, tuple_size<T>> value(\n+      is_base_of<integral_constant<size_t, N>, tuple_size<const volatile T>>);\n+}\n+void foo() { test<int, 0>; }"}]}