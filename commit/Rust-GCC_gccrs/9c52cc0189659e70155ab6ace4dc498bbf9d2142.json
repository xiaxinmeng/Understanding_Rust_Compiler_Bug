{"sha": "9c52cc0189659e70155ab6ace4dc498bbf9d2142", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1MmNjMDE4OTY1OWU3MDE1NWFiNmFjZTRkYzQ5OGJiZjlkMjE0Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-11-14T03:44:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-11-14T03:44:53Z"}, "message": "Make std::future::share() noexcept (LWG 2556)\n\n\t* include/std/future (future::share(), future<R&>::share())\n\t(future<void>::share()): Add noexcept, as per LWG 2556.\n\nFrom-SVN: r242374", "tree": {"sha": "4cfc5ad0f9a7a0b995b8f9c7d2d96da6485c2570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cfc5ad0f9a7a0b995b8f9c7d2d96da6485c2570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c52cc0189659e70155ab6ace4dc498bbf9d2142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c52cc0189659e70155ab6ace4dc498bbf9d2142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c52cc0189659e70155ab6ace4dc498bbf9d2142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c52cc0189659e70155ab6ace4dc498bbf9d2142/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "881ca4c9de62eedb450a9c4d884318ec82a86d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881ca4c9de62eedb450a9c4d884318ec82a86d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881ca4c9de62eedb450a9c4d884318ec82a86d00"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "71af4dc8d57b98bd8f3efb1d9d81418b698fee41", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c52cc0189659e70155ab6ace4dc498bbf9d2142/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c52cc0189659e70155ab6ace4dc498bbf9d2142/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c52cc0189659e70155ab6ace4dc498bbf9d2142", "patch": "@@ -1,3 +1,8 @@\n+2016-11-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future (future::share(), future<R&>::share())\n+\t(future<void>::share()): Add noexcept, as per LWG 2556.\n+\n 2016-11-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/78326"}, {"sha": "8ba130695108b0d375f4a6956c9edb19e93185e8", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c52cc0189659e70155ab6ace4dc498bbf9d2142/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c52cc0189659e70155ab6ace4dc498bbf9d2142/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=9c52cc0189659e70155ab6ace4dc498bbf9d2142", "patch": "@@ -778,7 +778,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return std::move(this->_M_get_result()._M_value());\n       }\n \n-      shared_future<_Res> share();\n+      shared_future<_Res> share() noexcept;\n     };\n \n   /// Partial specialization for future<R&>\n@@ -821,7 +821,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return this->_M_get_result()._M_get();\n       }\n \n-      shared_future<_Res&> share();\n+      shared_future<_Res&> share() noexcept;\n     };\n \n   /// Explicit specialization for future<void>\n@@ -864,7 +864,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         this->_M_get_result();\n       }\n \n-      shared_future<void> share();\n+      shared_future<void> share() noexcept;\n     };\n \n \n@@ -1004,18 +1004,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _M_state(std::move(__uf._M_state))\n     { }\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2556. Wide contract for future::share()\n   template<typename _Res>\n     inline shared_future<_Res>\n-    future<_Res>::share()\n+    future<_Res>::share() noexcept\n     { return shared_future<_Res>(std::move(*this)); }\n \n   template<typename _Res>\n     inline shared_future<_Res&>\n-    future<_Res&>::share()\n+    future<_Res&>::share() noexcept\n     { return shared_future<_Res&>(std::move(*this)); }\n \n   inline shared_future<void>\n-  future<void>::share()\n+  future<void>::share() noexcept\n   { return shared_future<void>(std::move(*this)); }\n \n   /// Primary template for promise"}]}