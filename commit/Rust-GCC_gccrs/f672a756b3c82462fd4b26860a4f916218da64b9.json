{"sha": "f672a756b3c82462fd4b26860a4f916218da64b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY3MmE3NTZiM2M4MjQ2MmZkNGIyNjg2MGE0ZjkxNjIxOGRhNjRiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:37:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:37:53Z"}, "message": "[multiple changes]\n\n2011-09-27  Pascal Obry  <obry@adacore.com>\n\n\t* s-taspri-posix-noaltstack.ads (RW_Lock): This type is now defined as\n\tOS_Interface.pthread_rwlock_t.\n\n2011-09-27  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch9.adb, a-cimutr.adb, a-cimutr.ads, gnat1drv.adb, a-comutr.adb,\n\ta-comutr.ads, exp_dist.adb, a-cbmutr.adb, a-cbmutr.ads,\n\tsem_ch5.adb, sem_util.adb: Minor reformatting.\n\nFrom-SVN: r179252", "tree": {"sha": "37169ca0c07156d926d1fe1e342b29d21ab6db1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37169ca0c07156d926d1fe1e342b29d21ab6db1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f672a756b3c82462fd4b26860a4f916218da64b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f672a756b3c82462fd4b26860a4f916218da64b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f672a756b3c82462fd4b26860a4f916218da64b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f672a756b3c82462fd4b26860a4f916218da64b9/comments", "author": null, "committer": null, "parents": [{"sha": "7a44cb697f8804e97567650f37b216a876352a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a44cb697f8804e97567650f37b216a876352a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a44cb697f8804e97567650f37b216a876352a78"}], "stats": {"total": 166, "additions": 90, "deletions": 76}, "files": [{"sha": "a5213ebdea835fc1e7f18d9770635064d7365126", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -1,3 +1,14 @@\n+2011-09-27  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-taspri-posix-noaltstack.ads (RW_Lock): This type is now defined as\n+\tOS_Interface.pthread_rwlock_t.\n+\n+2011-09-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch9.adb, a-cimutr.adb, a-cimutr.ads, gnat1drv.adb, a-comutr.adb,\n+\ta-comutr.ads, exp_dist.adb, a-cbmutr.adb, a-cbmutr.ads,\n+\tsem_ch5.adb, sem_util.adb: Minor reformatting.\n+\n 2011-09-27  Pascal Obry  <obry@adacore.com>\n \n \t* s-taprop.ads (Initialize_Lock)[RW_Lock]: New spec for r/w lock."}, {"sha": "8e6c148e914ae8eb5281445656927e4ccc2ab92e", "filename": "gcc/ada/a-cbmutr.adb", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbmutr.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -1737,19 +1737,14 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n       Root_Cursor : constant Cursor :=\n-        (Container'Unrestricted_Access, Root_Node (Container));\n+                      (Container'Unrestricted_Access, Root_Node (Container));\n    begin\n       return\n         Iterator'(Container'Unrestricted_Access,\n-                     First_Child (Root_Cursor), From_Root => True);\n+                  First_Child (Root_Cursor),\n+                  From_Root => True);\n    end Iterate;\n \n-   function Iterate_Subtree (Position : Cursor)\n-     return Tree_Iterator_Interfaces.Forward_Iterator'Class is\n-   begin\n-      return Iterator'(Position.Container, Position, From_Root => False);\n-   end Iterate_Subtree;\n-\n    ----------------------\n    -- Iterate_Children --\n    ----------------------\n@@ -1818,6 +1813,14 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n    -- Iterate_Subtree --\n    ---------------------\n \n+   function Iterate_Subtree\n+     (Position : Cursor)\n+      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n+   is\n+   begin\n+      return Iterator'(Position.Container, Position, From_Root => False);\n+   end Iterate_Subtree;\n+\n    procedure Iterate_Subtree\n      (Position  : Cursor;\n       Process   : not null access procedure (Position : Cursor))\n@@ -1841,7 +1844,6 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n \n          if Is_Root (Position) then\n             Iterate_Children (T, Position.Node, Process);\n-\n          else\n             Iterate_Subtree (T, Position.Node, Process);\n          end if;\n@@ -1938,7 +1940,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n    begin\n       if Is_Leaf (Position) then\n \n-         --  If sibling is present, return it.\n+         --  If sibling is present, return it\n \n          if N.Next /= 0 then\n             return (Object.Container, N.Next);\n@@ -1955,7 +1957,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n                while Par.Next = 0 loop\n                   Pos := Par.Parent;\n \n-                  --  If we are back at the root the iteration is complete.\n+                  --  If we are back at the root the iteration is complete\n \n                   if Pos = No_Node then\n                      return No_Element;\n@@ -1983,10 +1985,9 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n             end;\n          end if;\n \n-      else\n-\n-         --  If an internal node, return its first child.\n+      --  If an internal node, return its first child\n \n+      else\n          return (Object.Container, N.Children.First);\n       end if;\n    end Next;\n@@ -2351,24 +2352,22 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n      (Container : aliased Tree;\n       Position  : Cursor) return Constant_Reference_Type\n    is\n-   begin\n       pragma Unreferenced (Container);\n-\n+   begin\n       return\n         (Element =>\n-            Position.Container.Elements (Position.Node)'Unchecked_Access);\n+           Position.Container.Elements (Position.Node)'Unchecked_Access);\n    end Constant_Reference;\n \n    function Reference\n      (Container : aliased Tree;\n       Position  : Cursor) return Reference_Type\n    is\n-   begin\n       pragma Unreferenced (Container);\n-\n+   begin\n       return\n         (Element =>\n-            Position.Container.Elements (Position.Node)'Unchecked_Access);\n+           Position.Container.Elements (Position.Node)'Unchecked_Access);\n    end Reference;\n \n    --------------------"}, {"sha": "6d6c6f3f4dec60db10d3c6f8e2850172df2da0fc", "filename": "gcc/ada/a-cbmutr.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cbmutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cbmutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbmutr.ads?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -377,13 +377,11 @@ private\n \n    function Constant_Reference\n      (Container : aliased Tree;\n-      Position  : Cursor)\n-   return Constant_Reference_Type;\n+      Position  : Cursor) return Constant_Reference_Type;\n \n    function Reference\n      (Container : aliased Tree;\n-      Position  : Cursor)\n-    return Reference_Type;\n+      Position  : Cursor) return Reference_Type;\n \n    Empty_Tree : constant Tree := (Capacity => 0, others => <>);\n "}, {"sha": "6b9d7b6b2f12397b78713421d124ec82e3bfcb32", "filename": "gcc/ada/a-cimutr.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -1305,19 +1305,14 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n       Root_Cursor : constant Cursor :=\n-        (Container'Unrestricted_Access, Root_Node (Container));\n+                      (Container'Unrestricted_Access, Root_Node (Container));\n    begin\n       return\n         Iterator'(Container'Unrestricted_Access,\n-                     First_Child (Root_Cursor), From_Root => True);\n+                  First_Child (Root_Cursor),\n+                  From_Root => True);\n    end Iterate;\n \n-   function Iterate_Subtree (Position : Cursor)\n-     return Tree_Iterator_Interfaces.Forward_Iterator'Class is\n-   begin\n-      return Iterator'(Position.Container, Position, From_Root => False);\n-   end Iterate_Subtree;\n-\n    ----------------------\n    -- Iterate_Children --\n    ----------------------\n@@ -1378,6 +1373,14 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n    -- Iterate_Subtree --\n    ---------------------\n \n+   function Iterate_Subtree\n+     (Position : Cursor)\n+      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n+   is\n+   begin\n+      return Iterator'(Position.Container, Position, From_Root => False);\n+   end Iterate_Subtree;\n+\n    procedure Iterate_Subtree\n      (Position  : Cursor;\n       Process   : not null access procedure (Position : Cursor))\n@@ -1498,7 +1501,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n    begin\n       if Is_Leaf (Position) then\n \n-         --  If sibling is present, return it.\n+         --  If sibling is present, return it\n \n          if N.Next /= null then\n             return (Object.Container, N.Next);\n@@ -1513,7 +1516,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n             begin\n                while Par.Next = null loop\n \n-                  --  If we are back at the root the iteration is complete.\n+                  --  If we are back at the root the iteration is complete\n \n                   if Par = Root_Node (T)  then\n                      return No_Element;\n@@ -1541,10 +1544,9 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n             end;\n          end if;\n \n-      else\n-\n-         --  If an internal node, return its first child.\n+      --  If an internal node, return its first child\n \n+      else\n          return (Object.Container, N.Children.First);\n       end if;\n    end Next;"}, {"sha": "141ced0e47abba72bd29ed0859a836c90737c9f0", "filename": "gcc/ada/a-cimutr.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cimutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-cimutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.ads?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -397,13 +397,11 @@ private\n \n    function Constant_Reference\n      (Container : aliased Tree;\n-      Position  : Cursor)\n-   return Constant_Reference_Type;\n+      Position  : Cursor) return Constant_Reference_Type;\n \n    function Reference\n      (Container : aliased Tree;\n-      Position  : Cursor)\n-    return Reference_Type;\n+      Position  : Cursor) return Reference_Type;\n \n    Empty_Tree : constant Tree := (Controlled with others => <>);\n "}, {"sha": "e3e25573e53d7c0a01811c514938ba4cc88c806a", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -1348,19 +1348,14 @@ package body Ada.Containers.Multiway_Trees is\n      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n    is\n       Root_Cursor : constant Cursor :=\n-        (Container'Unrestricted_Access, Root_Node (Container));\n+                      (Container'Unrestricted_Access, Root_Node (Container));\n    begin\n       return\n         Iterator'(Container'Unrestricted_Access,\n-                     First_Child (Root_Cursor), From_Root => True);\n+                  First_Child (Root_Cursor),\n+                  From_Root => True);\n    end Iterate;\n \n-   function Iterate_Subtree (Position : Cursor)\n-     return Tree_Iterator_Interfaces.Forward_Iterator'Class is\n-   begin\n-      return Iterator'(Position.Container, Position, From_Root => False);\n-   end Iterate_Subtree;\n-\n    ----------------------\n    -- Iterate_Children --\n    ----------------------\n@@ -1421,6 +1416,14 @@ package body Ada.Containers.Multiway_Trees is\n    -- Iterate_Subtree --\n    ---------------------\n \n+   function Iterate_Subtree\n+     (Position : Cursor)\n+      return Tree_Iterator_Interfaces.Forward_Iterator'Class\n+   is\n+   begin\n+      return Iterator'(Position.Container, Position, From_Root => False);\n+   end Iterate_Subtree;\n+\n    procedure Iterate_Subtree\n      (Position  : Cursor;\n       Process   : not null access procedure (Position : Cursor))\n@@ -1438,7 +1441,6 @@ package body Ada.Containers.Multiway_Trees is\n \n          if Is_Root (Position) then\n             Iterate_Children (Position.Container, Position.Node, Process);\n-\n          else\n             Iterate_Subtree (Position.Container, Position.Node, Process);\n          end if;"}, {"sha": "02a286d3410e9dc75ab60bf7a8ff4bed23e9e12b", "filename": "gcc/ada/a-comutr.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-comutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fa-comutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.ads?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -442,13 +442,11 @@ private\n \n    function Constant_Reference\n      (Container : aliased Tree;\n-      Position  : Cursor)\n-   return Constant_Reference_Type;\n+      Position  : Cursor) return Constant_Reference_Type;\n \n    function Reference\n      (Container : aliased Tree;\n-      Position  : Cursor)\n-    return Reference_Type;\n+      Position  : Cursor) return Reference_Type;\n \n    Empty_Tree : constant Tree := (Controlled with others => <>);\n "}, {"sha": "c3c97ad9e527ad3bb9517eb7ceea322d9a5b39c6", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -1690,7 +1690,7 @@ package body Exp_Ch9 is\n       --  The parameter that designates the synchronized object in the call\n \n       Actuals : constant List_Id := New_List;\n-      --  the actuals in the entry call\n+      --  The actuals in the entry call\n \n       Decls : constant List_Id := New_List;\n \n@@ -8337,7 +8337,7 @@ package body Exp_Ch9 is\n             Insert_After (Current_Node, Sub);\n             Analyze (Sub);\n \n-            --  build wrapper procedure for pre/postconditions\n+            --  Build wrapper procedure for pre/postconditions\n \n             Build_PPC_Wrapper (Comp_Id, N);\n \n@@ -10618,28 +10618,31 @@ package body Exp_Ch9 is\n       if Present (Taskdef)\n         and then Has_Storage_Size_Pragma (Taskdef)\n         and then\n-          Is_Static_Expression (Expression (First (\n-            Pragma_Argument_Associations (Find_Task_Or_Protected_Pragma (\n-              Taskdef, Name_Storage_Size)))))\n+          Is_Static_Expression\n+            (Expression\n+               (First (Pragma_Argument_Associations\n+                         (Find_Task_Or_Protected_Pragma\n+                            (Taskdef, Name_Storage_Size)))))\n       then\n          Size_Decl :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Storage_Size_Variable (Tasktyp),\n-             Object_Definition => New_Reference_To (RTE (RE_Size_Type), Loc),\n-             Expression =>\n+             Object_Definition   => New_Reference_To (RTE (RE_Size_Type), Loc),\n+             Expression          =>\n                Convert_To (RTE (RE_Size_Type),\n-                 Relocate_Node (\n-                   Expression (First (\n-                     Pragma_Argument_Associations (\n-                       Find_Task_Or_Protected_Pragma\n-                         (Taskdef, Name_Storage_Size)))))));\n+                 Relocate_Node\n+                   (Expression (First (Pragma_Argument_Associations\n+                                         (Find_Task_Or_Protected_Pragma\n+                                            (Taskdef, Name_Storage_Size)))))));\n \n       else\n          Size_Decl :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Storage_Size_Variable (Tasktyp),\n-             Object_Definition => New_Reference_To (RTE (RE_Size_Type), Loc),\n-             Expression => New_Reference_To (RTE (RE_Unspecified_Size), Loc));\n+             Object_Definition   =>\n+               New_Reference_To (RTE (RE_Size_Type), Loc),\n+             Expression          =>\n+               New_Reference_To (RTE (RE_Unspecified_Size), Loc));\n       end if;\n \n       Insert_After (Elab_Decl, Size_Decl);\n@@ -10652,7 +10655,7 @@ package body Exp_Ch9 is\n \n       Append_To (Cdecls,\n         Make_Component_Declaration (Loc,\n-          Defining_Identifier =>\n+          Defining_Identifier  =>\n             Make_Defining_Identifier (Loc, Name_uTask_Id),\n           Component_Definition =>\n             Make_Component_Definition (Loc,\n@@ -10673,8 +10676,8 @@ package body Exp_Ch9 is\n                Make_Component_Definition (Loc,\n                  Aliased_Present     => True,\n                  Subtype_Indication  => Make_Subtype_Indication (Loc,\n-                   Subtype_Mark => New_Occurrence_Of\n-                     (RTE (RE_Ada_Task_Control_Block), Loc),\n+                   Subtype_Mark =>\n+                     New_Occurrence_Of (RTE (RE_Ada_Task_Control_Block), Loc),\n \n                    Constraint   =>\n                      Make_Index_Or_Discriminant_Constraint (Loc,"}, {"sha": "4a59b2a634342c47e529fc7b3f9214a10732ed9a", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -11075,7 +11075,6 @@ package body Exp_Dist is\n \n       function RPC_Receiver_Decl (RACW_Type : Entity_Id) return Node_Id is\n          Loc : constant Source_Ptr := Sloc (RACW_Type);\n-\n       begin\n          return\n            Make_Object_Declaration (Loc,"}, {"sha": "bf811eb5fb5bb2396a0e81dd267feb17d2b2baf1", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -474,10 +474,12 @@ procedure Gnat1drv is\n          Warning_Mode := Suppress;\n \n          --  Suppress the generation of name tables for enumerations\n+         --  why???\n \n          Global_Discard_Names := True;\n \n          --  Suppress the expansion of tagged types and dispatching calls\n+         --  why???\n \n          Tagged_Type_Expansion := False;\n       end if;"}, {"sha": "8958cbee02fb65f5dcb05fa832c798e0d3d51936", "filename": "gcc/ada/s-taspri-posix-noaltstack.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -80,7 +80,7 @@ package System.Task_Primitives is\n private\n \n    type Lock is new System.OS_Interface.pthread_mutex_t;\n-   type RW_Lock is new Lock;\n+   type RW_Lock is new System.OS_Interface.pthread_rwlock_t;\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "875eb1c077802be9c29889d7939ab081597598f9", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -2302,8 +2302,9 @@ package body Sem_Ch5 is\n       Typ : Entity_Id;\n \n    begin\n-      --  In semantics and Alfa modes, introduce loop variable so that loop\n-      --  body can be properly analyzed. Otherwise this is one after expansion.\n+      --  In semantics/Alfa modes, we won't be further expanding the loop, so\n+      --  introduce loop variable so that loop body can be properly analyzed.\n+      --  Otherwise this happens after expansion.\n \n       if Operating_Mode = Check_Semantics\n         or else Alfa_Mode"}, {"sha": "5df84dcf7d7f541e59a1d95e76ccc151f18e0b95", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f672a756b3c82462fd4b26860a4f916218da64b9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f672a756b3c82462fd4b26860a4f916218da64b9", "patch": "@@ -2274,9 +2274,9 @@ package body Sem_Util is\n    is\n       Comp  : Node_Id;\n       Comps : constant List_Id := New_List;\n+\n    begin\n       Comp := First_Component (Underlying_Type (R_Typ));\n-\n       while Present (Comp) loop\n          if Comes_From_Source (Comp) then\n             declare\n@@ -2291,6 +2291,7 @@ package body Sem_Util is\n                        (Component_Definition (Comp_Decl), New_Sloc => Loc)));\n             end;\n          end if;\n+\n          Next_Component (Comp);\n       end loop;\n "}]}