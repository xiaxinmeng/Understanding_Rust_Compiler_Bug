{"sha": "25af525c300abc790ef35bf2d8fb083a570b840a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhZjUyNWMzMDBhYmM3OTBlZjM1YmYyZDhmYjA4M2E1NzBiODQwYQ==", "commit": {"author": {"name": "Joffrey Huguet", "email": "huguet@adacore.com", "date": "2020-05-26T16:06:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-10T09:16:18Z"}, "message": "[Ada] Add global contracts to Ada.Numerics.Big_Numbers libraries\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin.ads, libgnat/a-nbnbre.ads: Add global\n\tcontract (Global => null) to all functions.", "tree": {"sha": "27744174e0149ac31c603ccb9a31a0005cad8e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27744174e0149ac31c603ccb9a31a0005cad8e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25af525c300abc790ef35bf2d8fb083a570b840a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25af525c300abc790ef35bf2d8fb083a570b840a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25af525c300abc790ef35bf2d8fb083a570b840a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25af525c300abc790ef35bf2d8fb083a570b840a/comments", "author": {"login": "joffreyhuguet", "id": 36951399, "node_id": "MDQ6VXNlcjM2OTUxMzk5", "avatar_url": "https://avatars.githubusercontent.com/u/36951399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joffreyhuguet", "html_url": "https://github.com/joffreyhuguet", "followers_url": "https://api.github.com/users/joffreyhuguet/followers", "following_url": "https://api.github.com/users/joffreyhuguet/following{/other_user}", "gists_url": "https://api.github.com/users/joffreyhuguet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joffreyhuguet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joffreyhuguet/subscriptions", "organizations_url": "https://api.github.com/users/joffreyhuguet/orgs", "repos_url": "https://api.github.com/users/joffreyhuguet/repos", "events_url": "https://api.github.com/users/joffreyhuguet/events{/privacy}", "received_events_url": "https://api.github.com/users/joffreyhuguet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "745f56989ead5d32b4016e39bf2656f23e2b16e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745f56989ead5d32b4016e39bf2656f23e2b16e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/745f56989ead5d32b4016e39bf2656f23e2b16e7"}], "stats": {"total": 211, "additions": 135, "deletions": 76}, "files": [{"sha": "5cf7960db10c816aad46f213d3cb10774bc707b0", "filename": "gcc/ada/libgnat/a-nbnbin.ads", "status": "modified", "additions": 68, "deletions": 39, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af525c300abc790ef35bf2d8fb083a570b840a/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af525c300abc790ef35bf2d8fb083a570b840a/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads?ref=25af525c300abc790ef35bf2d8fb083a570b840a", "patch": "@@ -28,23 +28,26 @@ is\n           Put_Image       => Put_Image;\n \n    function Is_Valid (Arg : Big_Integer) return Boolean\n-     with Convention => Intrinsic;\n+   with\n+     Convention => Intrinsic,\n+     Global     => null;\n \n    subtype Valid_Big_Integer is Big_Integer\n      with Dynamic_Predicate => Is_Valid (Valid_Big_Integer),\n           Predicate_Failure => raise Program_Error;\n \n-   function \"=\" (L, R : Valid_Big_Integer) return Boolean;\n+   function \"=\" (L, R : Valid_Big_Integer) return Boolean with Global => null;\n \n-   function \"<\" (L, R : Valid_Big_Integer) return Boolean;\n+   function \"<\" (L, R : Valid_Big_Integer) return Boolean with Global => null;\n \n-   function \"<=\" (L, R : Valid_Big_Integer) return Boolean;\n+   function \"<=\" (L, R : Valid_Big_Integer) return Boolean with Global => null;\n \n-   function \">\" (L, R : Valid_Big_Integer) return Boolean;\n+   function \">\" (L, R : Valid_Big_Integer) return Boolean with Global => null;\n \n-   function \">=\" (L, R : Valid_Big_Integer) return Boolean;\n+   function \">=\" (L, R : Valid_Big_Integer) return Boolean with Global => null;\n \n-   function To_Big_Integer (Arg : Integer) return Valid_Big_Integer;\n+   function To_Big_Integer (Arg : Integer) return Valid_Big_Integer\n+     with Global => null;\n \n    subtype Big_Positive is Big_Integer\n      with Dynamic_Predicate =>\n@@ -60,79 +63,105 @@ is\n \n    function In_Range\n      (Arg : Valid_Big_Integer; Low, High : Big_Integer) return Boolean\n-   is (Low <= Arg and Arg <= High);\n+   is (Low <= Arg and Arg <= High)\n+   with\n+     Global => null;\n \n    function To_Integer (Arg : Valid_Big_Integer) return Integer\n-     with Pre => In_Range (Arg,\n-                           Low  => To_Big_Integer (Integer'First),\n-                           High => To_Big_Integer (Integer'Last))\n-                  or else (raise Constraint_Error);\n+   with\n+     Pre    => In_Range (Arg,\n+                         Low  => To_Big_Integer (Integer'First),\n+                         High => To_Big_Integer (Integer'Last))\n+                or else (raise Constraint_Error),\n+     Global => null;\n \n    generic\n       type Int is range <>;\n    package Signed_Conversions is\n \n-      function To_Big_Integer (Arg : Int) return Valid_Big_Integer;\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer\n+        with Global => null;\n \n       function From_Big_Integer (Arg : Valid_Big_Integer) return Int\n-        with Pre => In_Range (Arg,\n-                              Low  => To_Big_Integer (Int'First),\n-                              High => To_Big_Integer (Int'Last))\n-                     or else (raise Constraint_Error);\n-\n+      with\n+        Pre    => In_Range (Arg,\n+                            Low  => To_Big_Integer (Int'First),\n+                            High => To_Big_Integer (Int'Last))\n+                   or else (raise Constraint_Error),\n+        Global => null;\n    end Signed_Conversions;\n \n    generic\n       type Int is mod <>;\n    package Unsigned_Conversions is\n \n-      function To_Big_Integer (Arg : Int) return Valid_Big_Integer;\n+      function To_Big_Integer (Arg : Int) return Valid_Big_Integer\n+        with Global => null;\n \n       function From_Big_Integer (Arg : Valid_Big_Integer) return Int\n-        with Pre => In_Range (Arg,\n-                              Low  => To_Big_Integer (Int'First),\n-                              High => To_Big_Integer (Int'Last))\n-                     or else (raise Constraint_Error);\n+      with\n+        Pre    => In_Range (Arg,\n+                            Low  => To_Big_Integer (Int'First),\n+                            High => To_Big_Integer (Int'Last))\n+                   or else (raise Constraint_Error),\n+        Global => null;\n \n    end Unsigned_Conversions;\n \n    function To_String (Arg   : Valid_Big_Integer;\n                        Width : Field := 0;\n                        Base  : Number_Base := 10) return String\n-     with Post => To_String'Result'First = 1;\n+   with\n+     Post   => To_String'Result'First = 1,\n+     Global => null;\n \n-   function From_String (Arg : String) return Big_Integer;\n+   function From_String (Arg : String) return Big_Integer\n+     with Global => null;\n \n    procedure Put_Image (S : in out Sink'Class; V : Big_Integer);\n \n-   function \"+\" (L : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"+\" (L : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"-\" (L : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"-\" (L : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"abs\" (L : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"abs\" (L : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"+\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"+\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"-\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"-\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"*\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"*\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"/\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"/\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"mod\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"mod\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"rem\" (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function \"rem\" (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function \"**\" (L : Valid_Big_Integer; R : Natural) return Valid_Big_Integer;\n+   function \"**\" (L : Valid_Big_Integer; R : Natural) return Valid_Big_Integer\n+      with Global => null;\n \n-   function Min (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function Min (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n-   function Max (L, R : Valid_Big_Integer) return Valid_Big_Integer;\n+   function Max (L, R : Valid_Big_Integer) return Valid_Big_Integer\n+      with Global => null;\n \n    function Greatest_Common_Divisor\n      (L, R : Valid_Big_Integer) return Big_Positive\n-     with Pre => (L /= To_Big_Integer (0) and R /= To_Big_Integer (0))\n-       or else (raise Constraint_Error);\n+   with\n+     Pre    => (L /= To_Big_Integer (0) and R /= To_Big_Integer (0))\n+             or else (raise Constraint_Error),\n+     Global => null;\n \n private\n "}, {"sha": "2d4ff63f64fb854a9900787f9ee051e0e5bc8fa5", "filename": "gcc/ada/libgnat/a-nbnbre.ads", "status": "modified", "additions": 67, "deletions": 37, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af525c300abc790ef35bf2d8fb083a570b840a/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af525c300abc790ef35bf2d8fb083a570b840a/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads?ref=25af525c300abc790ef35bf2d8fb083a570b840a", "patch": "@@ -27,113 +27,143 @@ is\n      Put_Image    => Put_Image;\n \n    function Is_Valid (Arg : Big_Real) return Boolean\n-     with Convention => Intrinsic;\n+   with\n+     Convention => Intrinsic,\n+     Global     => null;\n \n    subtype Valid_Big_Real is Big_Real\n      with Dynamic_Predicate => Is_Valid (Valid_Big_Real),\n           Predicate_Failure => raise Program_Error;\n \n    function \"/\"\n-     (Num, Den : Big_Integers.Valid_Big_Integer) return Valid_Big_Real;\n+     (Num, Den : Big_Integers.Valid_Big_Integer) return Valid_Big_Real\n+     with Global => null;\n --   with Pre => (Big_Integers.\"/=\" (Den, Big_Integers.To_Big_Integer (0))\n --                or else Constraint_Error);\n \n    function Numerator\n-     (Arg : Valid_Big_Real) return Big_Integers.Valid_Big_Integer;\n+     (Arg : Valid_Big_Real) return Big_Integers.Valid_Big_Integer\n+     with Global => null;\n \n    function Denominator (Arg : Valid_Big_Real) return Big_Integers.Big_Positive\n-     with Post =>\n+   with\n+     Post   =>\n        (if Arg = To_Real (0)\n         then Big_Integers.\"=\" (Denominator'Result,\n                                Big_Integers.To_Big_Integer (1))\n         else Big_Integers.\"=\"\n                (Big_Integers.Greatest_Common_Divisor\n                  (Numerator (Arg), Denominator'Result),\n-                Big_Integers.To_Big_Integer (1)));\n+                Big_Integers.To_Big_Integer (1))),\n+     Global => null;\n \n    function To_Big_Real\n      (Arg : Big_Integers.Big_Integer)\n-     return Valid_Big_Real is (Arg / Big_Integers.To_Big_Integer (1));\n+     return Valid_Big_Real is (Arg / Big_Integers.To_Big_Integer (1))\n+     with Global => null;\n \n    function To_Real (Arg : Integer) return Valid_Big_Real is\n-     (Big_Integers.To_Big_Integer (Arg) / Big_Integers.To_Big_Integer (1));\n+     (Big_Integers.To_Big_Integer (Arg) / Big_Integers.To_Big_Integer (1))\n+     with Global => null;\n \n-   function \"=\" (L, R : Valid_Big_Real) return Boolean;\n+   function \"=\" (L, R : Valid_Big_Real) return Boolean with Global => null;\n \n-   function \"<\" (L, R : Valid_Big_Real) return Boolean;\n+   function \"<\" (L, R : Valid_Big_Real) return Boolean with Global => null;\n \n-   function \"<=\" (L, R : Valid_Big_Real) return Boolean;\n+   function \"<=\" (L, R : Valid_Big_Real) return Boolean with Global => null;\n \n-   function \">\" (L, R : Valid_Big_Real) return Boolean;\n+   function \">\" (L, R : Valid_Big_Real) return Boolean with Global => null;\n \n-   function \">=\" (L, R : Valid_Big_Real) return Boolean;\n+   function \">=\" (L, R : Valid_Big_Real) return Boolean with Global => null;\n \n    function In_Range (Arg, Low, High : Big_Real) return Boolean is\n-     (Low <= Arg and then Arg <= High);\n+     (Low <= Arg and then Arg <= High)\n+     with Global => null;\n \n    generic\n       type Num is digits <>;\n    package Float_Conversions is\n \n-      function To_Big_Real (Arg : Num) return Valid_Big_Real;\n+      function To_Big_Real (Arg : Num) return Valid_Big_Real\n+        with Global => null;\n \n       function From_Big_Real (Arg : Big_Real) return Num\n-        with Pre => In_Range (Arg,\n-                              Low  => To_Big_Real (Num'First),\n-                              High => To_Big_Real (Num'Last))\n-                    or else (raise Constraint_Error);\n+      with\n+        Pre    => In_Range (Arg,\n+                            Low  => To_Big_Real (Num'First),\n+                            High => To_Big_Real (Num'Last))\n+                   or else (raise Constraint_Error),\n+        Global => null;\n \n    end Float_Conversions;\n \n    generic\n       type Num is delta <>;\n    package Fixed_Conversions is\n \n-      function To_Big_Real (Arg : Num) return Valid_Big_Real;\n+      function To_Big_Real (Arg : Num) return Valid_Big_Real\n+        with Global => null;\n \n       function From_Big_Real (Arg : Big_Real) return Num\n-        with Pre => In_Range (Arg,\n-                              Low  => To_Big_Real (Num'First),\n-                              High => To_Big_Real (Num'Last))\n-                    or else (raise Constraint_Error);\n+      with\n+        Pre    => In_Range (Arg,\n+                            Low  => To_Big_Real (Num'First),\n+                            High => To_Big_Real (Num'Last))\n+                   or else (raise Constraint_Error),\n+        Global => null;\n \n    end Fixed_Conversions;\n \n    function To_String (Arg  : Valid_Big_Real;\n                        Fore : Field := 2;\n                        Aft  : Field := 3;\n                        Exp  : Field := 0) return String\n-      with Post => To_String'Result'First = 1;\n+   with\n+     Post   => To_String'Result'First = 1,\n+     Global => null;\n \n-   function From_String (Arg : String) return Big_Real;\n+   function From_String (Arg : String) return Big_Real\n+     with Global => null;\n \n    function To_Quotient_String (Arg : Big_Real) return String is\n      (Big_Integers.To_String (Numerator (Arg)) & \" / \"\n-      & Big_Integers.To_String (Denominator (Arg)));\n+      & Big_Integers.To_String (Denominator (Arg)))\n+     with Global => null;\n \n-   function From_Quotient_String (Arg : String) return Valid_Big_Real;\n+   function From_Quotient_String (Arg : String) return Valid_Big_Real\n+     with Global => null;\n \n    procedure Put_Image (S : in out Sink'Class; V : Big_Real);\n \n-   function \"+\" (L : Valid_Big_Real) return Valid_Big_Real;\n+   function \"+\" (L : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function \"-\" (L : Valid_Big_Real) return Valid_Big_Real;\n+   function \"-\" (L : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function \"abs\" (L : Valid_Big_Real) return Valid_Big_Real;\n+   function \"abs\" (L : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function \"+\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n+   function \"+\" (L, R : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function \"-\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n+   function \"-\" (L, R : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function \"*\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n+   function \"*\" (L, R : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function \"/\" (L, R : Valid_Big_Real) return Valid_Big_Real;\n+   function \"/\" (L, R : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function \"**\" (L : Valid_Big_Real; R : Integer) return Valid_Big_Real;\n+   function \"**\" (L : Valid_Big_Real; R : Integer) return Valid_Big_Real\n+     with Global => null;\n \n-   function Min (L, R : Valid_Big_Real) return Valid_Big_Real;\n+   function Min (L, R : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n-   function Max (L, R : Valid_Big_Real) return Valid_Big_Real;\n+   function Max (L, R : Valid_Big_Real) return Valid_Big_Real\n+     with Global => null;\n \n private\n "}]}