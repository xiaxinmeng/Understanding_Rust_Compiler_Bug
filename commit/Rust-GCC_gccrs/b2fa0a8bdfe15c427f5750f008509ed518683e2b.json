{"sha": "b2fa0a8bdfe15c427f5750f008509ed518683e2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJmYTBhOGJkZmUxNWM0MjdmNTc1MGYwMDg1MDllZDUxODY4M2UyYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-05-17T08:11:15Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-05-17T08:11:15Z"}, "message": "Bye bye, c_save_expr.\n\nFrom-SVN: r248139", "tree": {"sha": "dfc3305649a9ef1e3056be43490be2749e68b03f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc3305649a9ef1e3056be43490be2749e68b03f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2fa0a8bdfe15c427f5750f008509ed518683e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2fa0a8bdfe15c427f5750f008509ed518683e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2fa0a8bdfe15c427f5750f008509ed518683e2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2fa0a8bdfe15c427f5750f008509ed518683e2b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8508a5b58ff4eefe161489d10623a9a24899c0b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8508a5b58ff4eefe161489d10623a9a24899c0b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8508a5b58ff4eefe161489d10623a9a24899c0b2"}], "stats": {"total": 134, "additions": 64, "deletions": 70}, "files": [{"sha": "5cd4494e6bac2643b9a26af8f19cd62b6abeaa7f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -1,3 +1,9 @@\n+2017-05-17  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-common.c (c_save_expr): Remove.\n+\t(c_common_truthvalue_conversion): Remove a call to c_save_expr.\n+\t* c-common.h (c_save_expr): Remove declaration.\n+\n 2017-05-09  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \tPR c/35441"}, {"sha": "f606e948ae51294cad5658f67a5719c8da091300", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -3164,24 +3164,6 @@ c_wrap_maybe_const (tree expr, bool non_const)\n   return expr;\n }\n \n-/* Wrap a SAVE_EXPR around EXPR, if appropriate.  Like save_expr, but\n-   for C folds the inside expression and wraps a C_MAYBE_CONST_EXPR\n-   around the SAVE_EXPR if needed so that c_fully_fold does not need\n-   to look inside SAVE_EXPRs.  */\n-\n-tree\n-c_save_expr (tree expr)\n-{\n-  bool maybe_const = true;\n-  if (c_dialect_cxx ())\n-    return save_expr (expr);\n-  expr = c_fully_fold (expr, false, &maybe_const);\n-  expr = save_expr (expr);\n-  if (!maybe_const)\n-    expr = c_wrap_maybe_const (expr, true);\n-  return expr;\n-}\n-\n /* Return whether EXPR is a declaration whose address can never be\n    NULL.  */\n \n@@ -3436,7 +3418,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \n   if (TREE_CODE (TREE_TYPE (expr)) == COMPLEX_TYPE)\n     {\n-      tree t = (in_late_binary_op ? save_expr (expr) : c_save_expr (expr));\n+      tree t = save_expr (expr);\n       expr = (build_binary_op\n \t      (EXPR_LOCATION (expr),\n \t       (TREE_SIDE_EFFECTS (expr)"}, {"sha": "398154473081c10deb70eb632d7ba5ec7f85398b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -836,7 +836,6 @@ extern enum conversion_safety unsafe_conversion_p (location_t, tree, tree,\n extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree c_fully_fold (tree, bool, bool *);\n extern tree c_wrap_maybe_const (tree, bool);\n-extern tree c_save_expr (tree);\n extern tree c_common_truthvalue_conversion (location_t, tree);\n extern void c_apply_type_quals_to_decl (int, tree);\n extern tree c_sizeof_or_alignof_type (location_t, tree, bool, bool, int);"}, {"sha": "9e4ec435da9969146bea2561af05311c3b8395a0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -1,3 +1,19 @@\n+2017-05-17  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-convert.c (convert): Replace c_save_expr with save_expr.  Don't\n+\tcall c_fully_fold.\n+\t(convert) <case COMPLEX_TYPE>: Remove special handling of COMPLEX_TYPEs.\n+\t* c-decl.c (grokdeclarator): Replace c_save_expr with save_expr. \n+\t* c-fold.c (c_fully_fold_internal): Handle SAVE_EXPR.\n+\t* c-parser.c (c_parser_declaration_or_fndef): Replace c_save_expr with\n+\tsave_expr.\n+\t(c_parser_conditional_expression): Likewise.\n+\t* c-tree.h (SAVE_EXPR_FOLDED_P): Define.\n+\t* c-typeck.c (build_modify_expr): Replace c_save_expr with save_expr.\n+\t(process_init_element): Likewise.\n+\t(build_binary_op): Likewise.\n+\t(handle_omp_array_sections_1): Likewise.\n+\n 2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_clause_num_gangs)"}, {"sha": "b8117b49ac9531c5b6e0e4a583c3f628c75808d6", "filename": "gcc/c/c-convert.c", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.c?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -111,13 +111,7 @@ convert (tree type, tree expr)\n \t  && COMPLETE_TYPE_P (type)\n \t  && do_ubsan_in_current_function ())\n \t{\n-\t  if (in_late_binary_op)\n-\t    expr = save_expr (expr);\n-\t  else\n-\t    {\n-\t      expr = c_save_expr (expr);\n-\t      expr = c_fully_fold (expr, false, NULL);\n-\t    }\n+\t  expr = save_expr (expr);\n \t  tree check = ubsan_instrument_float_cast (loc, type, expr);\n \t  expr = fold_build1 (FIX_TRUNC_EXPR, type, expr);\n \t  if (check == NULL_TREE)\n@@ -145,31 +139,6 @@ convert (tree type, tree expr)\n       goto maybe_fold;\n \n     case COMPLEX_TYPE:\n-      /* If converting from COMPLEX_TYPE to a different COMPLEX_TYPE\n-\t and e is not COMPLEX_EXPR, convert_to_complex uses save_expr,\n-\t but for the C FE c_save_expr needs to be called instead.  */\n-      if (TREE_CODE (TREE_TYPE (e)) == COMPLEX_TYPE)\n-\t{\n-\t  if (TREE_CODE (e) != COMPLEX_EXPR)\n-\t    {\n-\t      tree subtype = TREE_TYPE (type);\n-\t      tree elt_type = TREE_TYPE (TREE_TYPE (e));\n-\n-\t      if (in_late_binary_op)\n-\t\te = save_expr (e);\n-\t      else\n-\t\te = c_save_expr (e);\n-\t      ret\n-\t\t= fold_build2_loc (loc, COMPLEX_EXPR, type,\n-\t\t\t\t   convert (subtype,\n-\t\t\t\t\t    fold_build1 (REALPART_EXPR,\n-\t\t\t\t\t\t\t elt_type, e)),\n-\t\t\t\t   convert (subtype,\n-\t\t\t\t\t    fold_build1 (IMAGPART_EXPR,\n-\t\t\t\t\t\t\t elt_type, e)));\n-\t      goto maybe_fold;\n-\t    }\n-\t}\n       ret = convert_to_complex (type, e);\n       goto maybe_fold;\n "}, {"sha": "8ae09c44f0acc32f9d689d45a6a9e130e52b9526", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -6076,7 +6076,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\t&& do_ubsan_in_current_function ())\n \t\t      {\n \t\t\t/* Evaluate the array size only once.  */\n-\t\t\tsize = c_save_expr (size);\n+\t\t\tsize = save_expr (size);\n \t\t\tsize = c_fully_fold (size, false, NULL);\n \t\t        size = fold_build2 (COMPOUND_EXPR, TREE_TYPE (size),\n \t\t\t\t\t    ubsan_instrument_vla (loc, size),"}, {"sha": "1baee446d3e31eee800659117ced65ea3083eaee", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -120,12 +120,11 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n   bool unused_p;\n   source_range old_range;\n \n-  /* Constants, declarations, statements, errors, SAVE_EXPRs and\n-     anything else not counted as an expression cannot usefully be\n-     folded further at this point.  */\n+  /* Constants, declarations, statements, errors, and anything else not\n+     counted as an expression cannot usefully be folded further at this\n+     point.  */\n   if (!IS_EXPR_CODE_CLASS (kind)\n-      || kind == tcc_statement\n-      || code == SAVE_EXPR)\n+      || kind == tcc_statement)\n     return expr;\n \n   if (IS_EXPR_CODE_CLASS (kind))\n@@ -565,6 +564,25 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t appropriate in any particular case.  */\n       gcc_unreachable ();\n \n+    case SAVE_EXPR:\n+      /* Make sure to fold the contents of a SAVE_EXPR exactly once.  */\n+      if (!SAVE_EXPR_FOLDED_P (expr))\n+\t{\n+\t  op0 = TREE_OPERAND (expr, 0);\n+\t  op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n+\t\t\t\t       maybe_const_itself, for_int_const);\n+\t  /* Don't wrap the folded tree in a SAVE_EXPR if we don't\n+\t     have to.  */\n+\t  if (tree_invariant_p (op0))\n+\t    ret = op0;\n+\t  else\n+\t    {\n+\t      TREE_OPERAND (expr, 0) = op0;\n+\t      SAVE_EXPR_FOLDED_P (expr) = true;\n+\t    }\n+\t}\n+      goto out;\n+\n     default:\n       /* Various codes may appear through folding built-in functions\n \t and their arguments.  */"}, {"sha": "96c074961da4cf500126ea40eb14f43d415ae44a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -1880,7 +1880,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t  bool vm_type = variably_modified_type_p (init_type,\n \t\t\t\t\t\t\t   NULL_TREE);\n \t\t  if (vm_type)\n-\t\t    init.value = c_save_expr (init.value);\n+\t\t    init.value = save_expr (init.value);\n \t\t  finish_init ();\n \t\t  specs->typespec_kind = ctsk_typeof;\n \t\t  specs->locations[cdw_typedef] = init_loc;\n@@ -6500,7 +6500,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n \te = TREE_OPERAND (e, 1);\n       warn_for_omitted_condop (middle_loc, e);\n       /* Make sure first operand is calculated only once.  */\n-      exp1.value = c_save_expr (default_conversion (cond.value));\n+      exp1.value = save_expr (default_conversion (cond.value));\n       if (eptype)\n \texp1.value = build1 (EXCESS_PRECISION_EXPR, eptype, exp1.value);\n       exp1.original_type = NULL;"}, {"sha": "42172f8b7bee53fdd9e1b8fe94303e4bf6375b4c", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -113,6 +113,10 @@ along with GCC; see the file COPYING3.  If not see\n    subexpression meaning it is not a constant expression.  */\n #define CONSTRUCTOR_NON_CONST(EXPR) TREE_LANG_FLAG_1 (CONSTRUCTOR_CHECK (EXPR))\n \n+/* For a SAVE_EXPR, nonzero if the operand of the SAVE_EXPR has already\n+   been folded.  */\n+#define SAVE_EXPR_FOLDED_P(EXP)\tTREE_LANG_FLAG_1 (SAVE_EXPR_CHECK (EXP))\n+\n /* Record parser information about an expression that is irrelevant\n    for code generation alongside a tree representing its value.  */\n struct c_expr"}, {"sha": "1edf521f4107d30c80cb66364086caf244528d28", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2fa0a8bdfe15c427f5750f008509ed518683e2b/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b2fa0a8bdfe15c427f5750f008509ed518683e2b", "patch": "@@ -5777,7 +5777,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n \t     that modify LHS.  */\n \t  if (TREE_SIDE_EFFECTS (rhs))\n \t    {\n-\t      newrhs = in_late_binary_op ? save_expr (rhs) : c_save_expr (rhs);\n+\t      newrhs = save_expr (rhs);\n \t      rhseval = newrhs;\n \t    }\n \t  newrhs = build_binary_op (location,\n@@ -9301,7 +9301,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t      semantic_type = TREE_TYPE (value.value);\n \t      value.value = TREE_OPERAND (value.value, 0);\n \t    }\n-\t  value.value = c_save_expr (value.value);\n+\t  value.value = save_expr (value.value);\n \t  if (semantic_type)\n \t    value.value = build1 (EXCESS_PRECISION_EXPR, semantic_type,\n \t\t\t\t  value.value);\n@@ -11621,7 +11621,7 @@ build_binary_op (location_t location, enum tree_code code,\n \t    return error_mark_node;\n \t  if (first_complex)\n \t    {\n-\t      op0 = c_save_expr (op0);\n+\t      op0 = save_expr (op0);\n \t      real = build_unary_op (EXPR_LOCATION (orig_op0), REALPART_EXPR,\n \t\t\t\t     op0, true);\n \t      imag = build_unary_op (EXPR_LOCATION (orig_op0), IMAGPART_EXPR,\n@@ -11630,7 +11630,7 @@ build_binary_op (location_t location, enum tree_code code,\n \t\t{\n \t\tcase MULT_EXPR:\n \t\tcase TRUNC_DIV_EXPR:\n-\t\t  op1 = c_save_expr (op1);\n+\t\t  op1 = save_expr (op1);\n \t\t  imag = build2 (resultcode, real_type, imag, op1);\n \t\t  /* Fall through.  */\n \t\tcase PLUS_EXPR:\n@@ -11643,15 +11643,15 @@ build_binary_op (location_t location, enum tree_code code,\n \t    }\n \t  else\n \t    {\n-\t      op1 = c_save_expr (op1);\n+\t      op1 = save_expr (op1);\n \t      real = build_unary_op (EXPR_LOCATION (orig_op1), REALPART_EXPR,\n \t\t\t\t     op1, true);\n \t      imag = build_unary_op (EXPR_LOCATION (orig_op1), IMAGPART_EXPR,\n \t\t\t\t     op1, true);\n \t      switch (code)\n \t\t{\n \t\tcase MULT_EXPR:\n-\t\t  op0 = c_save_expr (op0);\n+\t\t  op0 = save_expr (op0);\n \t\t  imag = build2 (resultcode, real_type, op0, imag);\n \t\t  /* Fall through.  */\n \t\tcase PLUS_EXPR:\n@@ -11835,8 +11835,8 @@ build_binary_op (location_t location, enum tree_code code,\n       && !require_constant_value)\n     {\n       /* OP0 and/or OP1 might have side-effects.  */\n-      op0 = c_save_expr (op0);\n-      op1 = c_save_expr (op1);\n+      op0 = save_expr (op0);\n+      op1 = save_expr (op1);\n       op0 = c_fully_fold (op0, false, NULL);\n       op1 = c_fully_fold (op1, false, NULL);\n       if (doing_div_or_mod && (flag_sanitize & (SANITIZE_DIVIDE\n@@ -12435,7 +12435,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n       /* For [lb:] we will need to evaluate lb more than once.  */\n       if (length == NULL_TREE && OMP_CLAUSE_CODE (c) != OMP_CLAUSE_DEPEND)\n \t{\n-\t  tree lb = c_save_expr (low_bound);\n+\t  tree lb = save_expr (low_bound);\n \t  if (lb != low_bound)\n \t    {\n \t      TREE_PURPOSE (t) = lb;\n@@ -12480,7 +12480,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n   if (OMP_CLAUSE_CODE (c) != OMP_CLAUSE_DEPEND)\n     types.safe_push (TREE_TYPE (ret));\n   /* We will need to evaluate lb more than once.  */\n-  tree lb = c_save_expr (low_bound);\n+  tree lb = save_expr (low_bound);\n   if (lb != low_bound)\n     {\n       TREE_PURPOSE (t) = lb;"}]}