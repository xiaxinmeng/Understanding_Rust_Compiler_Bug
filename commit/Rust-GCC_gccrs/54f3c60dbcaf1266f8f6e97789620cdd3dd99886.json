{"sha": "54f3c60dbcaf1266f8f6e97789620cdd3dd99886", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmM2M2MGRiY2FmMTI2NmY4ZjZlOTc3ODk2MjBjZGQzZGQ5OTg4Ng==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-08-29T18:44:42Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-08-29T18:44:42Z"}, "message": "DatagramPacket.java: updated to JDK 1.4 API new methods are...\n\n2002-08-29  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramPacket.java: updated to JDK 1.4 API\n\tnew methods are:\n\tDatagramPacket(byte[] buf, int offset, int length, SocketAddress\n\t  address),\n\tDatagramPacket(byte[] buf, int length, SocketAddress address),\n\tvoid setSocketAddress(SocketAddress address)\n\tpublic SocketAddress getSocketAddress()\n\nFrom-SVN: r56659", "tree": {"sha": "fa57a395f0d1987c2470b48e256147247c2d061d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa57a395f0d1987c2470b48e256147247c2d061d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54f3c60dbcaf1266f8f6e97789620cdd3dd99886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f3c60dbcaf1266f8f6e97789620cdd3dd99886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f3c60dbcaf1266f8f6e97789620cdd3dd99886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f3c60dbcaf1266f8f6e97789620cdd3dd99886/comments", "author": null, "committer": null, "parents": [{"sha": "0148e1ee90a9cec90cbd0b32b99cf532eaae9699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0148e1ee90a9cec90cbd0b32b99cf532eaae9699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0148e1ee90a9cec90cbd0b32b99cf532eaae9699"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "06211f11563269ed67c5adad01d3d60b5342c150", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f3c60dbcaf1266f8f6e97789620cdd3dd99886/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f3c60dbcaf1266f8f6e97789620cdd3dd99886/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=54f3c60dbcaf1266f8f6e97789620cdd3dd99886", "patch": "@@ -1,3 +1,13 @@\n+2002-08-29  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramPacket.java: updated to JDK 1.4 API\n+\tnew methods are:\n+\tDatagramPacket(byte[] buf, int offset, int length, SocketAddress\n+\t  address),\n+\tDatagramPacket(byte[] buf, int length, SocketAddress address),\n+\tvoid setSocketAddress(SocketAddress address)\n+\tpublic SocketAddress getSocketAddress()\n+\n 2002-08-29  Tom Tromey  <tromey@redhat.com>\n \n \t* java/io/natFileDescriptorPosix.cc (setLength): Handle case where"}, {"sha": "d136f8424a5719107b33ad272259acff4c87b1bf", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f3c60dbcaf1266f8f6e97789620cdd3dd99886/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f3c60dbcaf1266f8f6e97789620cdd3dd99886/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=54f3c60dbcaf1266f8f6e97789620cdd3dd99886", "patch": "@@ -186,6 +186,45 @@ public DatagramPacket(byte[] buf, int length, InetAddress address, int port)\n     this(buf, 0, length, address, port);\n   }\n \n+  /**\n+   * Initializes a new instance of <code>DatagramPacket</code> for\n+   * transmitting packets across the network.\n+   *\n+   * @param buf A buffer containing the data to send\n+   * @param offset The offset into the buffer to start writing from.\n+   * @param length The length of the buffer (must be <= buf.length)\n+   * @param address The socket address to send to\n+   *\n+   * @exception SocketException If an error occurs\n+   *\n+   * @since 1.4\n+   */\n+  public DatagramPacket(byte[] buf, int offset, int length, SocketAddress address)\n+     throws SocketException\n+  {\n+    this(buf, offset, length, ((InetSocketAddress)address).getAddress(),\n+         ((InetSocketAddress)address).getPort());\n+  }\n+\n+  /**\n+   * Initializes a new instance of <code>DatagramPacket</code> for\n+   * transmitting packets across the network.\n+   *\n+   * @param buf A buffer containing the data to send\n+   * @param length The length of the buffer (must be <= buf.length)\n+   * @param address The socket address to send to\n+   *\n+   * @exception SocketException If an error occurs\n+   *\n+   * @since 1.4\n+   */\n+  public DatagramPacket(byte[] buf, int length, SocketAddress address)\n+    throws SocketException\n+  {\n+    this(buf, 0, length, ((InetSocketAddress)address).getAddress(),\n+         ((InetSocketAddress)address).getPort());\n+  }\n+\n /**\n   * Returns the address that this packet is being sent to or, if it was used\n   * to receive a packet, the address that is was received from.  If the\n@@ -277,6 +316,38 @@ public synchronized void setPort(int iport)\n     port = iport;\n   }\n \n+  /**\n+   * Sets the address of the remote host this package will be sent\n+   *\n+   * @param address The socket address of the remove host\n+   *\n+   * @exception IllegalArgumentException If an error occurs\n+   *\n+   * @since 1.4\n+   */\n+  public void setSocketAddress(SocketAddress address)\n+    throws IllegalArgumentException\n+  {\n+    if (address == null) throw new IllegalArgumentException();\n+\n+    InetSocketAddress tmp = (InetSocketAddress)address;\n+    this.address = tmp.getAddress();\n+    this.port = tmp.getPort();\n+  }\n+\n+  /**\n+   * Gets the socket address of the host this packet\n+   * will be sent to/is coming from\n+   *\n+   * @return The socket address of the remote host\n+   * \n+   * @since 1.4\n+   */\n+  public SocketAddress getSocketAddress()\n+  {\n+    return new InetSocketAddress (address, port);\n+  }\n+\n /**\n   * Sets the data buffer for this packet.\n   *"}]}