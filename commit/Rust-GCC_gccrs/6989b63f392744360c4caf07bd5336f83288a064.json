{"sha": "6989b63f392744360c4caf07bd5336f83288a064", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4OWI2M2YzOTI3NDQzNjBjNGNhZjA3YmQ1MzM2ZjgzMjg4YTA2NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-05T10:55:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-05T10:55:54Z"}, "message": "stl_algobase.h (struct __iter_base): Rename to _Iter_base; add iterator_type typedef.\n\n2010-02-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algobase.h (struct __iter_base): Rename to\n\t_Iter_base; add iterator_type typedef.\n\t(struct __miter_base): Rename to _Miter_base.\n\t(struct __niter_base): Rename to _Niter_base.\n\t(__miter_base, __niter_base): Add, use the latter; adjust everywhere.\n\nFrom-SVN: r156515", "tree": {"sha": "dde5d0bda857e0f84892e87f60038f8c86ad75db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde5d0bda857e0f84892e87f60038f8c86ad75db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6989b63f392744360c4caf07bd5336f83288a064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6989b63f392744360c4caf07bd5336f83288a064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6989b63f392744360c4caf07bd5336f83288a064", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6989b63f392744360c4caf07bd5336f83288a064/comments", "author": null, "committer": null, "parents": [{"sha": "3cdabe3b06bff9dc051aa5ba6f9056bdc8e743b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cdabe3b06bff9dc051aa5ba6f9056bdc8e743b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cdabe3b06bff9dc051aa5ba6f9056bdc8e743b6"}], "stats": {"total": 93, "additions": 54, "deletions": 39}, "files": [{"sha": "4b418ed9c7a9eeebbf8b1fc146cf8407b6791cfa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989b63f392744360c4caf07bd5336f83288a064/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989b63f392744360c4caf07bd5336f83288a064/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6989b63f392744360c4caf07bd5336f83288a064", "patch": "@@ -1,3 +1,11 @@\n+2010-02-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algobase.h (struct __iter_base): Rename to\n+\t_Iter_base; add iterator_type typedef.\n+\t(struct __miter_base): Rename to _Miter_base.\n+\t(struct __niter_base): Rename to _Niter_base.\n+\t(__miter_base, __niter_base): Add, use the latter; adjust everywhere.\n+\n 2010-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/42460"}, {"sha": "3575279226b9f0adb7cde4b681c3c1d9cbfd7633", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6989b63f392744360c4caf07bd5336f83288a064/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6989b63f392744360c4caf07bd5336f83288a064/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=6989b63f392744360c4caf07bd5336f83288a064", "patch": "@@ -262,34 +262,46 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // If _Iterator has a base returns it otherwise _Iterator is returned\n   // untouched\n   template<typename _Iterator, bool _HasBase>\n-    struct __iter_base\n+    struct _Iter_base\n     {\n-      static _Iterator\n-      __b(_Iterator __it)\n+      typedef _Iterator iterator_type;\n+      static iterator_type\n+      _S_base(_Iterator __it)\n       { return __it; }\n     };\n \n   template<typename _Iterator>\n-    struct __iter_base<_Iterator, true>\n+    struct _Iter_base<_Iterator, true>\n     {\n-      static typename _Iterator::iterator_type\n-      __b(_Iterator __it)\n+      typedef typename _Iterator::iterator_type iterator_type;\n+      static iterator_type\n+      _S_base(_Iterator __it)\n       { return __it.base(); }\n     };\n \n   // If _Iterator is a __normal_iterator return its base (a plain pointer,\n   // normally) otherwise return it untouched.  See copy, fill, ... \n   template<typename _Iterator>\n-    struct __niter_base\n-    : __iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>\n+    struct _Niter_base\n+    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>\n     { };\n \n+  template<typename _Iterator>\n+    inline typename _Niter_base<_Iterator>::iterator_type\n+    __niter_base(_Iterator __it)\n+    { return std::_Niter_base<_Iterator>::_S_base(__it); }\n+\n   // Likewise, for move_iterator.\n   template<typename _Iterator>\n-    struct __miter_base\n-    : __iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>\n+    struct _Miter_base\n+    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>\n     { };\n \n+  template<typename _Iterator>\n+    inline typename _Miter_base<_Iterator>::iterator_type\n+    __miter_base(_Iterator __it)\n+    { return std::_Miter_base<_Iterator>::_S_base(__it); }\n+\n   // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,\n   // because the input and output ranges are permitted to overlap.)\n@@ -425,10 +437,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline _OI\n     __copy_move_a2(_II __first, _II __last, _OI __result)\n     {\n-      return _OI(std::__copy_move_a<_IsMove>\n-\t\t (std::__niter_base<_II>::__b(__first),\n-\t\t  std::__niter_base<_II>::__b(__last),\n-\t\t  std::__niter_base<_OI>::__b(__result)));\n+      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),\n+\t\t\t\t\t     std::__niter_base(__last),\n+\t\t\t\t\t     std::__niter_base(__result)));\n     }\n \n   /**\n@@ -459,8 +470,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>\n-\t      (std::__miter_base<_II>::__b(__first),\n-\t       std::__miter_base<_II>::__b(__last), __result));\n+\t      (std::__miter_base(__first), std::__miter_base(__last),\n+\t       __result));\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -491,9 +502,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_II>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return (std::__copy_move_a2<true>\n-\t      (std::__miter_base<_II>::__b(__first),\n-\t       std::__miter_base<_II>::__b(__last), __result));\n+      return std::__copy_move_a2<true>(std::__miter_base(__first),\n+\t\t\t\t       std::__miter_base(__last), __result);\n     }\n \n #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)\n@@ -596,9 +606,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n       return _BI2(std::__copy_move_backward_a<_IsMove>\n-\t\t  (std::__niter_base<_BI1>::__b(__first),\n-\t\t   std::__niter_base<_BI1>::__b(__last),\n-\t\t   std::__niter_base<_BI2>::__b(__result)));\n+\t\t  (std::__niter_base(__first), std::__niter_base(__last),\n+\t\t   std::__niter_base(__result)));\n     }\n \n   /**\n@@ -632,8 +641,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>\n-\t      (std::__miter_base<_BI1>::__b(__first),\n-\t       std::__miter_base<_BI1>::__b(__last), __result));\n+\t      (std::__miter_base(__first), std::__miter_base(__last),\n+\t       __result));\n     }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -667,9 +676,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_BI2>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return (std::__copy_move_backward_a2<true>\n-\t      (std::__miter_base<_BI1>::__b(__first),\n-\t       std::__miter_base<_BI1>::__b(__last), __result));\n+      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),\n+\t\t\t\t\t\tstd::__miter_base(__last),\n+\t\t\t\t\t\t__result);\n     }\n \n #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)\n@@ -730,8 +739,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  _ForwardIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      std::__fill_a(std::__niter_base<_ForwardIterator>::__b(__first),\n-\t\t    std::__niter_base<_ForwardIterator>::__b(__last), __value);\n+      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),\n+\t\t    __value);\n     }\n \n   template<typename _OutputIterator, typename _Size, typename _Tp>\n@@ -786,8 +795,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)\n \n-      return _OI(std::__fill_n_a(std::__niter_base<_OI>::__b(__first),\n-\t\t\t\t __n, __value));\n+      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));\n     }\n \n   template<bool _BoolType>\n@@ -958,9 +966,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t    typename iterator_traits<_II2>::value_type>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      return std::__equal_aux(std::__niter_base<_II1>::__b(__first1),\n-\t\t\t      std::__niter_base<_II1>::__b(__last1),\n-\t\t\t      std::__niter_base<_II2>::__b(__first2));\n+      return std::__equal_aux(std::__niter_base(__first1),\n+\t\t\t      std::__niter_base(__last1),\n+\t\t\t      std::__niter_base(__first2));\n     }\n \n   /**\n@@ -1024,11 +1032,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      return std::__lexicographical_compare_aux\n-\t(std::__niter_base<_II1>::__b(__first1),\n-\t std::__niter_base<_II1>::__b(__last1),\n-\t std::__niter_base<_II2>::__b(__first2),\n-\t std::__niter_base<_II2>::__b(__last2));\n+      return std::__lexicographical_compare_aux(std::__niter_base(__first1),\n+\t\t\t\t\t\tstd::__niter_base(__last1),\n+\t\t\t\t\t\tstd::__niter_base(__first2),\n+\t\t\t\t\t\tstd::__niter_base(__last2));\n     }\n \n   /**"}]}