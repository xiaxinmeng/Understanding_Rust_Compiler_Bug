{"sha": "216d5cdd139f96ada2303beb77b8174e27fddcd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2ZDVjZGQxMzlmOTZhZGEyMzAzYmViNzdiODE3NGUyN2ZkZGNkNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T02:43:19Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T02:43:19Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1566", "tree": {"sha": "51deebdef0988bfe6a2211cda81b6a0889617995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51deebdef0988bfe6a2211cda81b6a0889617995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/216d5cdd139f96ada2303beb77b8174e27fddcd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216d5cdd139f96ada2303beb77b8174e27fddcd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216d5cdd139f96ada2303beb77b8174e27fddcd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216d5cdd139f96ada2303beb77b8174e27fddcd5/comments", "author": null, "committer": null, "parents": [{"sha": "44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44fe2e801cd57019e45cb0e66fd9ba6e4a8e18b2"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "b6de19b97de0e6871489da7aadc28475da122850", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=216d5cdd139f96ada2303beb77b8174e27fddcd5", "patch": "@@ -526,7 +526,7 @@ expand_call (exp, target, ignore)\n \n \t\t Use abstraction instead of setting TREE_ADDRESSABLE\n \t\t directly.  */\n-\t      if (TREE_INLINE (fndecl) && extra_warnings && !flag_no_inline)\n+\t      if (DECL_INLINE (fndecl) && extra_warnings && !flag_no_inline)\n \t\twarning_with_decl (fndecl, \"can't inline call to `%s' which was declared inline\");\n \t      mark_addressable (fndecl);\n \t    }"}, {"sha": "e1f3a9fe242c9a2ec291ee2bd1b033aa8058df7c", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=216d5cdd139f96ada2303beb77b8174e27fddcd5", "patch": "@@ -113,14 +113,14 @@ function_cannot_inline_p (fndecl)\n     return \"nested function cannot be inline\";\n \n   /* If its not even close, don't even look.  */\n-  if (!TREE_INLINE (fndecl) && get_max_uid () > 3 * max_insns)\n+  if (!DECL_INLINE (fndecl) && get_max_uid () > 3 * max_insns)\n     return \"function too large to be inline\";\n \n #if 0\n   /* Large stacks are OK now that inlined functions can share them.  */\n   /* Don't inline functions with large stack usage,\n      since they can make other recursive functions burn up stack.  */\n-  if (!TREE_INLINE (fndecl) && get_frame_size () > 100)\n+  if (!DECL_INLINE (fndecl) && get_frame_size () > 100)\n     return \"function stack frame for inlining\";\n #endif\n \n@@ -150,7 +150,7 @@ function_cannot_inline_p (fndecl)\n     if (int_size_in_bytes (TREE_TYPE (parms)) < 0)\n       return \"function with varying-size parameter cannot be inline\";\n \n-  if (!TREE_INLINE (fndecl) && get_max_uid () > max_insns)\n+  if (!DECL_INLINE (fndecl) && get_max_uid () > max_insns)\n     {\n       for (ninsns = 0, insn = get_first_nonparm_insn (); insn && ninsns < max_insns;\n \t   insn = NEXT_INSN (insn))\n@@ -328,7 +328,7 @@ finish_inline (fndecl, head)\n   FIRST_PARM_INSN (head) = get_insns ();\n   DECL_SAVED_INSNS (fndecl) = head;\n   DECL_FRAME_SIZE (fndecl) = get_frame_size ();\n-  TREE_INLINE (fndecl) = 1;\n+  DECL_INLINE (fndecl) = 1;\n }\n \n /* Make the insns and PARM_DECLs of the current function permanent\n@@ -1745,7 +1745,7 @@ integrate_decl_tree (let, level, map)\n \t}\n       else if (DECL_RTL (t))\n \tDECL_RTL (d) = copy_rtx (DECL_RTL (t));\n-      TREE_EXTERNAL (d) = TREE_EXTERNAL (t);\n+      DECL_EXTERNAL (d) = DECL_EXTERNAL (t);\n       TREE_STATIC (d) = TREE_STATIC (t);\n       TREE_PUBLIC (d) = TREE_PUBLIC (t);\n       TREE_CONSTANT (d) = TREE_CONSTANT (t);"}, {"sha": "89abe18a4554a9b038370724052ec6ce2e23b437", "filename": "gcc/print-tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=216d5cdd139f96ada2303beb77b8174e27fddcd5", "patch": "@@ -317,13 +317,13 @@ print_node (file, prefix, node, indent)\n     case 'd':\n       mode = DECL_MODE (node);\n \n-      if (TREE_EXTERNAL (node))\n+      if (DECL_EXTERNAL (node))\n \tfputs (\" external\", file);\n-      if (TREE_NONLOCAL (node))\n+      if (DECL_NONLOCAL (node))\n \tfputs (\" nonlocal\", file);\n-      if (TREE_REGDECL (node))\n+      if (DECL_REGISTER (node))\n \tfputs (\" regdecl\", file);\n-      if (TREE_INLINE (node))\n+      if (DECL_INLINE (node))\n \tfputs (\" inline\", file);\n       if (DECL_BIT_FIELD (node))\n \tfputs (\" bit-field\", file);\n@@ -359,7 +359,7 @@ print_node (file, prefix, node, indent)\n       indent_to (file, indent + 3);\n       if (TREE_CODE (node) != FUNCTION_DECL)\n \tfprintf (file, \" align %d\", DECL_ALIGN (node));\n-      else if (TREE_INLINE (node))\n+      else if (DECL_INLINE (node))\n \tfprintf (file, \" frame_size %d\", DECL_FRAME_SIZE (node));\n       else if (DECL_BUILT_IN (node))\n \tfprintf (file, \" built-in code %d\", DECL_FUNCTION_CODE (node));"}, {"sha": "b95b1c2af98251fb0e0298f3cf6d3d323c758588", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=216d5cdd139f96ada2303beb77b8174e27fddcd5", "patch": "@@ -616,7 +616,7 @@ sdbout_symbol (decl, local)\n       context = decl_function_context (decl);\n       if (context == current_function_decl)\n \treturn;\n-      if (TREE_EXTERNAL (decl))\n+      if (DECL_EXTERNAL (decl))\n \treturn;\n       if (GET_CODE (DECL_RTL (decl)) != MEM\n \t  || GET_CODE (XEXP (DECL_RTL (decl), 0)) != SYMBOL_REF)\n@@ -646,7 +646,7 @@ sdbout_symbol (decl, local)\n     case VAR_DECL:\n       /* Don't mention a variable that is external.\n \t Let the file that defines it describe it.  */\n-      if (TREE_EXTERNAL (decl))\n+      if (DECL_EXTERNAL (decl))\n \treturn;\n \n       /* Ignore __FUNCTION__, etc.  */"}, {"sha": "529f46a94f2eeb9152e9acbd3b8342d697ad15d1", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216d5cdd139f96ada2303beb77b8174e27fddcd5/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=216d5cdd139f96ada2303beb77b8174e27fddcd5", "patch": "@@ -1703,7 +1703,7 @@ compile_file (name)\n \t    && DECL_INITIAL (decl) != 0\n \t    && (TREE_ADDRESSABLE (decl)\n \t\t|| TREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (decl)))\n-\t    && ! TREE_EXTERNAL (decl))\n+\t    && ! DECL_EXTERNAL (decl))\n \t  output_inline_function (decl);\n \n \t/* Warn about any function\n@@ -1716,7 +1716,7 @@ compile_file (name)\n \t     || (DECL_NAME (decl) && TREE_USED (DECL_NAME (decl))))\n \t    && TREE_CODE (decl) == FUNCTION_DECL\n \t    && DECL_INITIAL (decl) == 0\n-\t    && TREE_EXTERNAL (decl)\n+\t    && DECL_EXTERNAL (decl)\n \t    && ! TREE_PUBLIC (decl))\n \t  warning_with_decl (decl, \"`%s' declared `static' but never defined\");\n \t/* Warn about static fns or vars defined but not used,\n@@ -1726,10 +1726,10 @@ compile_file (name)\n \t    && (TREE_CODE (decl) == FUNCTION_DECL\n \t\t|| TREE_CODE (decl) == VAR_DECL)\n \t    && ! DECL_IN_SYSTEM_HEADER (decl)\n-\t    && ! TREE_EXTERNAL (decl)\n+\t    && ! DECL_EXTERNAL (decl)\n \t    && ! TREE_PUBLIC (decl)\n \t    && ! TREE_USED (decl)\n-\t    && ! TREE_INLINE (decl)\n+\t    && ! DECL_INLINE (decl)\n \t    /* The TREE_USED bit for file-scope decls\n \t       is kept in the identifier, to handle multiple\n \t       external decls in different scopes.  */\n@@ -1912,7 +1912,7 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n \n   /* Forward declarations for nested functions are not \"external\",\n      but we need to treat them as if they were.  */\n-  if (TREE_STATIC (decl) || TREE_EXTERNAL (decl)\n+  if (TREE_STATIC (decl) || DECL_EXTERNAL (decl)\n       || TREE_CODE (decl) == FUNCTION_DECL)\n     TIMEVAR (varconst_time,\n \t     {\n@@ -1931,7 +1931,7 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n \t\t\t    || DECL_IGNORED_P (decl))))\n \t\t   assemble_variable (decl, top_level, at_end);\n \t     });\n-  else if (TREE_REGDECL (decl) && asmspec != 0)\n+  else if (DECL_REGISTER (decl) && asmspec != 0)\n     {\n       if (decode_reg_name (asmspec) >= 0)\n \t{\n@@ -1996,7 +1996,7 @@ rest_of_compilation (decl)\n \n   if (DECL_SAVED_INSNS (decl) == 0)\n     {\n-      int specd = TREE_INLINE (decl);\n+      int specd = DECL_INLINE (decl);\n       char *lose;\n \n       /* If requested, consider whether to make this function inline.  */\n@@ -2008,10 +2008,10 @@ rest_of_compilation (decl)\n \t\t     {\n \t\t       if (warn_inline && specd)\n \t\t\t warning_with_decl (decl, lose);\n-\t\t       TREE_INLINE (decl) = 0;\n+\t\t       DECL_INLINE (decl) = 0;\n \t\t     }\n \t\t   else\n-\t\t     TREE_INLINE (decl) = 1;\n+\t\t     DECL_INLINE (decl) = 1;\n \t\t });\n \n       insns = get_insns ();\n@@ -2034,18 +2034,18 @@ rest_of_compilation (decl)\n \t finish_compilation will call rest_of_compilation again\n \t for those functions that need to be output.  */\n \n-      if (TREE_INLINE (decl)\n+      if (DECL_INLINE (decl)\n \t  && ((! TREE_PUBLIC (decl) && ! TREE_ADDRESSABLE (decl)\n \t       && ! flag_keep_inline_functions)\n-\t      || TREE_EXTERNAL (decl)))\n+\t      || DECL_EXTERNAL (decl)))\n \t{\n \t  TIMEVAR (integration_time, save_for_inline_nocopy (decl));\n \t  goto exit_rest_of_compilation;\n \t}\n \n       /* If we have to compile the function now, save its rtl and subdecls\n \t so that its compilation will not affect what others get.  */\n-      if (TREE_INLINE (decl))\n+      if (DECL_INLINE (decl))\n \t{\n \t  saved_block_tree = DECL_INITIAL (decl);\n \t  saved_arguments = DECL_ARGUMENTS (decl);"}]}