{"sha": "fbceb769e61bfed5f87736eecd065f4ee5ac738b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJjZWI3NjllNjFiZmVkNWY4NzczNmVlY2QwNjVmNGVlNWFjNzM4Yg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2018-08-17T19:05:12Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2018-08-17T19:05:12Z"}, "message": "C-SKY port: Documentation\n\n2018-08-17  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tC-SKY port: Documentation\n\n\tgcc/\n\t* doc/extend.texi (C-SKY Function Attributes): New section.\n\t* doc/invoke.texi (Option Summary): Add C-SKY options.\n\t(C-SKY Options): New section.\n\t* doc/md.texi (Machine Constraints): Document C-SKY constraints.\n\nFrom-SVN: r263629", "tree": {"sha": "275e249e6b4c7da367f62e3a3ab2f871361e8945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/275e249e6b4c7da367f62e3a3ab2f871361e8945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbceb769e61bfed5f87736eecd065f4ee5ac738b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbceb769e61bfed5f87736eecd065f4ee5ac738b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbceb769e61bfed5f87736eecd065f4ee5ac738b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbceb769e61bfed5f87736eecd065f4ee5ac738b/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc7232b999b8336cf4e261407ed9289c77bed1f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7232b999b8336cf4e261407ed9289c77bed1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc7232b999b8336cf4e261407ed9289c77bed1f0"}], "stats": {"total": 281, "additions": 281, "deletions": 0}, "files": [{"sha": "208d5cfebbcb32436e978bb92bf77868c36504ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbceb769e61bfed5f87736eecd065f4ee5ac738b", "patch": "@@ -1,3 +1,12 @@\n+2018-08-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tC-SKY port: Documentation\n+\n+\t* doc/extend.texi (C-SKY Function Attributes): New section.\n+\t* doc/invoke.texi (Option Summary): Add C-SKY options.\n+\t(C-SKY Options): New section.\n+\t* doc/md.texi (Machine Constraints): Document C-SKY constraints.\n+\n 2018-08-17  Jojo  <jijie_rong@c-sky.com>\n \t    Huibin Wang  <huibin_wang@c-sky.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>"}, {"sha": "e3312aa8b422aa6691efa0d18804dfc0abf628d2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fbceb769e61bfed5f87736eecd065f4ee5ac738b", "patch": "@@ -2324,6 +2324,7 @@ GCC plugins may provide their own attributes.\n * AVR Function Attributes::\n * Blackfin Function Attributes::\n * CR16 Function Attributes::\n+* C-SKY Function Attributes::\n * Epiphany Function Attributes::\n * H8/300 Function Attributes::\n * IA-64 Function Attributes::\n@@ -4147,6 +4148,38 @@ function entry and exit sequences suitable for use in an interrupt handler\n when this attribute is present.\n @end table\n \n+@node C-SKY Function Attributes\n+@subsection C-SKY Function Attributes\n+\n+These function attributes are supported by the C-SKY back end:\n+\n+@table @code\n+@item interrupt\n+@itemx isr\n+@cindex @code{interrupt} function attribute, C-SKY\n+@cindex @code{isr} function attribute, C-SKY\n+Use these attributes to indicate that the specified function\n+is an interrupt handler.\n+The compiler generates function entry and exit sequences suitable for\n+use in an interrupt handler when either of these attributes are present.\n+\n+Use of these options requires the @option{-mistack} command-line option\n+to enable support for the necessary interrupt stack instructions.  They\n+are ignored with a warning otherwise.  @xref{C-SKY Options}.\n+\n+@item naked\n+@cindex @code{naked} function attribute, C-SKY\n+This attribute allows the compiler to construct the\n+requisite function declaration, while allowing the body of the\n+function to be assembly code. The specified function will not have\n+prologue/epilogue sequences generated by the compiler. Only basic\n+@code{asm} statements can safely be included in naked functions\n+(@pxref{Basic Asm}). While using extended @code{asm} or a mixture of\n+basic @code{asm} and C code may appear to work, they cannot be\n+depended upon to work reliably and are not supported.\n+@end table\n+\n+\n @node Epiphany Function Attributes\n @subsection Epiphany Function Attributes\n "}, {"sha": "f8287153be14cf9ca9f76b60a245963958be3fc1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fbceb769e61bfed5f87736eecd065f4ee5ac738b", "patch": "@@ -723,6 +723,16 @@ Objective-C and Objective-C++ Dialects}.\n -msim  -mint32  -mbit-ops\n -mdata-model=@var{model}}\n \n+@emph{C-SKY Options}\n+@gccoptlist{-march=@var{arch}  -mcpu=@var{cpu} @gol\n+-mbig-endian  -EB  -mlittle-endian  -EL @gol\n+-mhard-float  -msoft-float  -mfpu=@var{fpu}  -mdouble-float  -mfdivdu @gol\n+-melrw  -mistack  -mmp  -mcp  -mcache  -msecurity  -mtrust @gol\n+-mdsp  -medsp  -mvdsp @gol\n+-mdiv  -msmart  -mhigh-registers  -manchor @gol\n+-mpushpop  -mmultiple-stld  -mconstpool  -mstack-size  -mccrt @gol\n+-mbranch-cost=@var{n}  -mcse-cc  -msched-prolog}\n+\n @emph{Darwin Options}\n @gccoptlist{-all_load  -allowable_client  -arch  -arch_errors_fatal @gol\n -arch_only  -bind_at_load  -bundle  -bundle_loader @gol\n@@ -14633,6 +14643,7 @@ platform.\n * C6X Options::\n * CRIS Options::\n * CR16 Options::\n+* C-SKY Options::\n * Darwin Options::\n * DEC Alpha Options::\n * FR30 Options::\n@@ -17757,6 +17768,198 @@ However, @samp{far} is not valid with @option{-mcr16c}, as the\n CR16C architecture does not support the far data model.\n @end table\n \n+@node C-SKY Options\n+@subsection C-SKY Options\n+@cindex C-SKY Options\n+\n+GCC supports these options when compiling for C-SKY V2 processors.\n+\n+@table @gcctabopt\n+\n+@item -march=@var{arch}\n+@opindex march=\n+Specify the C-SKY target architecture.  Valid values for @var{arch} are:\n+@samp{ck801}, @samp{ck802}, @samp{ck803}, @samp{ck807}, and @samp{ck810}.\n+The default is @samp{ck810}.\n+\n+@item -mcpu=@var{cpu}\n+@opindex mcpu=\n+Specify the C-SKY target processor.  Valid values for @var{cpu} are:\n+@samp{ck801}, @samp{ck801t},\n+@samp{ck802}, @samp{ck802t}, @samp{ck802j},\n+@samp{ck803}, @samp{ck803h}, @samp{ck803t}, @samp{ck803ht},\n+@samp{ck803f}, @samp{ck803fh}, @samp{ck803e}, @samp{ck803eh},\n+@samp{ck803et}, @samp{ck803eht}, @samp{ck803ef}, @samp{ck803efh},\n+@samp{ck803ft}, @samp{ck803eft}, @samp{ck803efht}, @samp{ck803r1},\n+@samp{ck803hr1}, @samp{ck803tr1}, @samp{ck803htr1}, @samp{ck803fr1},\n+@samp{ck803fhr1}, @samp{ck803er1}, @samp{ck803ehr1}, @samp{ck803etr1},\n+@samp{ck803ehtr1}, @samp{ck803efr1}, @samp{ck803efhr1}, @samp{ck803ftr1},\n+@samp{ck803eftr1}, @samp{ck803efhtr1},\n+@samp{ck803s}, @samp{ck803st}, @samp{ck803se}, @samp{ck803sf},\n+@samp{ck803sef}, @samp{ck803seft},\n+@samp{ck807e}, @samp{ck807ef}, @samp{ck807}, @samp{ck807f},\n+@samp{ck810e}, @samp{ck810et}, @samp{ck810ef}, @samp{ck810eft},\n+@samp{ck810}, @samp{ck810v}, @samp{ck810f}, @samp{ck810t}, @samp{ck810fv},\n+@samp{ck810tv}, @samp{ck810ft}, and @samp{ck810ftv}.\n+\n+@item -mbig-endian\n+@opindex mbig-endian\n+@itemx -EB\n+@opindex -EB\n+@itemx -mlittle-endian\n+@opindex mlittle-endian\n+@itemx -EL\n+@opindex -EL\n+\n+Select big- or little-endian code.  The default is little-endian.\n+\n+@item -mhard-float\n+@opindex mhard-float\n+@itemx -msoft-float\n+@opindex msoft-float\n+\n+Select hardware or software floating-point implementations.\n+The default is soft float.\n+\n+@item -mdouble-float\n+@itemx -mno-double-float\n+@opindex mdouble-float\n+When @option{-mhard-float} is in effect, enable generation of\n+double-precision float instructions.  This is the default except\n+when compiling for CK803.\n+\n+@item -mfdivdu\n+@itemx -mno-fdivdu\n+@opindex mfdivdu\n+When @option{-mhard-float} is in effect, enable generation of\n+@code{frecipd}, @code{fsqrtd}, and @code{fdivd} instructions.\n+This is the default except when compiling for CK803.\n+\n+@item -mfpu=@var{fpu}\n+@opindex mfpu=\n+Select the floating-point processor.  This option can only be used with\n+@option{-mhard-float}.\n+Values for @var{fpu} are\n+@samp{fpv2_sf} (equivalent to @samp{-mno-double-float -mno-fdivdu}),\n+@samp{fpv2} (@samp{-mdouble-float -mno-divdu}), and\n+@samp{fpv2_divd} (@samp{-mdouble-float -mdivdu}).\n+\n+@item -melrw\n+@itemx -mno-elrw\n+@opindex melrw\n+Enable the extended @code{lrw} instruction.  This option defaults to on\n+for CK801 and off otherwise.\n+\n+@item -mistack\n+@itemx -mno-istack\n+@opindex mistack\n+Enable interrupt stack instructions; the default is off.\n+\n+The @option{-mistack} option is required to handle the\n+@code{interrupt} and @code{isr} function attributes\n+(@pxref{C-SKY Function Attributes}).\n+\n+@item -mmp\n+@opindex mmp\n+Enable multiprocessor instructions; the default is off.\n+\n+@item -mcp\n+@opindex mcp\n+Enable coprocessor instructions; the default is off.\n+\n+@item -mcache\n+@opindex mcache\n+Enable coprocessor instructions; the default is off.\n+\n+@item -msecurity\n+@opindex msecurity\n+Enable C-SKY security instructions; the default is off.\n+\n+@item -mtrust\n+@opindex mtrust\n+Enable C-SKY trust instructions; the default is off.\n+\n+@item -mdsp\n+@opindex mdsp\n+@itemx -medsp\n+@opindex medsp\n+@itemx -mvdsp\n+@opindex mvdsp\n+Enable C-SKY DSP, Enhanced DSP, or Vector DSP instructions, respectively.\n+All of these options default to off.\n+\n+@item -mdiv\n+@itemx -mno-div\n+@opindex mdiv\n+Generate divide instructions.  Default is off.\n+\n+@item -msmart\n+@itemx -mno-smart\n+@opindex msmart\n+Generate code for Smart Mode, using only registers numbered 0-7 to allow\n+use of 16-bit instructions.  This option is ignored for CK801 where this\n+is the required behavior, and it defaults to on for CK802.\n+For other targets, the default is off.\n+\n+@item -mhigh-registers\n+@itemx -mno-high-registers\n+@opindex mhigh-registers\n+Generate code using the high registers numbered 16-31.  This option\n+is not supported on CK801, CK802, or CK803, and is enabled by default\n+for other processors.\n+\n+@item -manchor\n+@itemx -mno-anchor\n+@opindex manchor\n+Generate code using global anchor symbol addresses.\n+\n+@item -mpushpop\n+@itemx -mno-pushpop\n+@opindex mpushpop\n+Generate code using @code{push} and @code{pop} instructions.  This option\n+defaults to on.\n+\n+@item -mmultiple-stld\n+@itemx -mstm\n+@itemx -mno-multiple-stld\n+@itemx -mno-stm\n+@opindex mmultiple-stld\n+Generate code using @code{stm} and @code{ldm} instructions.  This option\n+isn't supported on CK801 but is enabled by default on other processors.\n+\n+@item -mconstpool\n+@itemx -mno-constpool\n+@opindex mconstpool\n+Create constant pools in the compiler instead of deferring it to the\n+assembler.  This option is the default and required for correct code\n+generation on CK801 and CK802, and is optional on other processors.\n+\n+@item -mstack-size\n+@item -mno-stack-size\n+@opindex mstack-size\n+Emit @code{.stack_size} directives for each function in the assembly\n+output.  This option defaults to off.\n+\n+@item -mccrt\n+@itemx -mno-ccrt\n+@opindex mccrt\n+Generate code for the C-SKY compiler runtime instead of libgcc.  This\n+option defaults to off.\n+\n+@item -mbranch-cost=@var{n}\n+@opindex mbranch-cost=\n+Set the branch costs to roughly @code{n} instructions.  The default is 1.\n+\n+@item -msched-prolog\n+@itemx -mno-sched-prolog\n+@opindex msched-prolog\n+Permit scheduling of function prologue and epilogue sequences.  Using\n+this option can result in code that is not compliant with the C-SKY V2 ABI\n+prologue requirements and that cannot be debugged or backtraced.\n+It is disabled by default.\n+\n+@end table\n+\n @node Darwin Options\n @subsection Darwin Options\n @cindex Darwin options"}, {"sha": "348183cd486ddbbb599d9c4331b678c4a5700016", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbceb769e61bfed5f87736eecd065f4ee5ac738b/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=fbceb769e61bfed5f87736eecd065f4ee5ac738b", "patch": "@@ -2132,6 +2132,42 @@ Check for 64 bits wide constants for add/sub instructions\n Floating point constant that is legal for store immediate\n @end table\n \n+@item C-SKY---@file{config/csky/constraints.md}\n+@table @code\n+\n+@item a\n+The mini registers r0 - r7.\n+\n+@item b\n+The low registers r0 - r15.\n+\n+@item c\n+C register.\n+\n+@item y\n+HI and LO registers.\n+\n+@item l\n+LO register.\n+\n+@item h\n+HI register.\n+\n+@item v\n+Vector registers.\n+\n+@item z\n+Stack pointer register (SP).\n+@end table\n+\n+@ifset INTERNALS\n+The C-SKY back end supports a large set of additional constraints\n+that are only useful for instruction selection or splitting rather\n+than inline asm, such as constraints representing constant integer\n+ranges accepted by particular instruction encodings.\n+Refer to the source code for details.\n+@end ifset\n+\n @item Epiphany---@file{config/epiphany/constraints.md}\n @table @code\n @item U16"}]}