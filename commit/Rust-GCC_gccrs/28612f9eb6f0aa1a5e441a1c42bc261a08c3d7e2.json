{"sha": "28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg2MTJmOWViNmYwYWExYTVlNDQxYTFjNDJiYzI2MWEwOGMzZDdlMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:53:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:53:01Z"}, "message": "(expand_value_return, expand_decl): Use promote_mode.\n\nFrom-SVN: r7070", "tree": {"sha": "c77a91be6174b5cdebd7d048be438d5e3e002d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c77a91be6174b5cdebd7d048be438d5e3e002d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2/comments", "author": null, "committer": null, "parents": [{"sha": "78911e8b93e43c3fb9bb40d5292abe6d92aa2cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78911e8b93e43c3fb9bb40d5292abe6d92aa2cb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78911e8b93e43c3fb9bb40d5292abe6d92aa2cb8"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "cac0a66cc33a9a8908fe43350c651c8551eed475", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=28612f9eb6f0aa1a5e441a1c42bc261a08c3d7e2", "patch": "@@ -2655,17 +2655,11 @@ expand_value_return (val)\n   if (return_reg != val)\n     {\n #ifdef PROMOTE_FUNCTION_RETURN\n-      enum machine_mode mode = DECL_MODE (DECL_RESULT (current_function_decl));\n       tree type = TREE_TYPE (DECL_RESULT (current_function_decl));\n       int unsignedp = TREE_UNSIGNED (type);\n-\n-      if (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == ENUMERAL_TYPE\n-\t  || TREE_CODE (type) == BOOLEAN_TYPE || TREE_CODE (type) == CHAR_TYPE\n-\t  || TREE_CODE (type) == REAL_TYPE || TREE_CODE (type) == POINTER_TYPE\n-\t  || TREE_CODE (type) == OFFSET_TYPE)\n-\t{\n-\t  PROMOTE_MODE (mode, unsignedp, type);\n-\t}\n+      enum machine_mode mode\n+\t= promote_mode (type, DECL_MODE (DECL_RESULT (current_function_decl)),\n+\t\t\t&unsignedp, 1);\n \n       if (GET_MODE (val) != VOIDmode && GET_MODE (val) != mode)\n \tconvert_move (return_reg, val, unsignedp);\n@@ -3406,16 +3400,9 @@ expand_decl (decl)\n \t   && (DECL_REGISTER (decl) || ! obey_regdecls))\n     {\n       /* Automatic variable that can go in a register.  */\n-      enum machine_mode reg_mode = DECL_MODE (decl);\n       int unsignedp = TREE_UNSIGNED (type);\n-\n-      if (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == ENUMERAL_TYPE\n-\t  || TREE_CODE (type) == BOOLEAN_TYPE || TREE_CODE (type) == CHAR_TYPE\n-\t  || TREE_CODE (type) == REAL_TYPE || TREE_CODE (type) == POINTER_TYPE\n-\t  || TREE_CODE (type) == OFFSET_TYPE)\n-\t{\n-\t  PROMOTE_MODE (reg_mode, unsignedp, type);\n-\t}\n+      enum machine_mode reg_mode\n+\t= promote_mode (type, DECL_MODE (decl), &unsignedp, 0);\n \n       if (TREE_CODE (type) == COMPLEX_TYPE)\n \t{"}]}