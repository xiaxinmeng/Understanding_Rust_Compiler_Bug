{"sha": "31935398315662c9155d2f87e82f10463a023b6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5MzUzOTgzMTU2NjJjOTE1NWQyZjg3ZTgyZjEwNDYzYTAyM2I2Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-02-20T16:58:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-02-20T16:58:11Z"}, "message": "re PR tree-optimization/65136 (VRP inserts unnecessary constant copy in the loop)\n\n2015-02-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65136\n\t* tree-ssa-propagate.c: Include cfgloop.h.\n\t(replace_phi_args_in): Avoid replacing loop latch edge PHI\n\targuments with constants.\n\n\t* gcc.dg/tree-ssa/pr65136.c: New testcase.\n\nFrom-SVN: r220876", "tree": {"sha": "626e47bda91bb20ad107020c730cebfaa3560ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/626e47bda91bb20ad107020c730cebfaa3560ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31935398315662c9155d2f87e82f10463a023b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31935398315662c9155d2f87e82f10463a023b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31935398315662c9155d2f87e82f10463a023b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31935398315662c9155d2f87e82f10463a023b6f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b0487010cf07edbb687ff160f396c7ff6b4634a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0487010cf07edbb687ff160f396c7ff6b4634a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0487010cf07edbb687ff160f396c7ff6b4634a"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "b1bd62283914d15b841d8e27969f5a99acbf3708", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31935398315662c9155d2f87e82f10463a023b6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31935398315662c9155d2f87e82f10463a023b6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31935398315662c9155d2f87e82f10463a023b6f", "patch": "@@ -1,3 +1,10 @@\n+2015-02-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65136\n+\t* tree-ssa-propagate.c: Include cfgloop.h.\n+\t(replace_phi_args_in): Avoid replacing loop latch edge PHI\n+\targuments with constants.\n+\n 2015-02-20  Jakub Jelinek  <jakub@redhat.com>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "1efc08dcbc5eb283e28aa1c81a3ce8ed1435bb20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31935398315662c9155d2f87e82f10463a023b6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31935398315662c9155d2f87e82f10463a023b6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31935398315662c9155d2f87e82f10463a023b6f", "patch": "@@ -1,3 +1,8 @@\n+2015-02-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65136\n+\t* gcc.dg/tree-ssa/pr65136.c: New testcase.\n+\n 2015-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/64158"}, {"sha": "4238bcbb8d7ee34e9c12ecdeaf346c036783d230", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr65136.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31935398315662c9155d2f87e82f10463a023b6f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr65136.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31935398315662c9155d2f87e82f10463a023b6f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr65136.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr65136.c?ref=31935398315662c9155d2f87e82f10463a023b6f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-expand-details\" } */\n+\n+int foo(unsigned int cc )\n+{\n+\n+  while ( cc >> 16 )\n+    {\n+      cc = (cc & 0xffff) + (cc >> 16);\n+    }\n+\n+  return ( (unsigned short)(cc) ) == ((unsigned short)(-1));\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"_\\[0-9\\]* = 1;\" \"expand\" } } */\n+/* { dg-final { cleanup-rtl-dump \"expand\" } } */"}, {"sha": "8b82f9e20866b9c338336c7ae99c18cdff8c1b3b", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31935398315662c9155d2f87e82f10463a023b6f/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31935398315662c9155d2f87e82f10463a023b6f/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=31935398315662c9155d2f87e82f10463a023b6f", "patch": "@@ -66,6 +66,7 @@\n #include \"langhooks.h\"\n #include \"value-prof.h\"\n #include \"domwalk.h\"\n+#include \"cfgloop.h\"\n \n /* This file implements a generic value propagation engine based on\n    the same propagation used by the SSA-CCP algorithm [1].\n@@ -992,6 +993,7 @@ replace_phi_args_in (gphi *phi, ssa_prop_get_value_fn get_value)\n       print_gimple_stmt (dump_file, phi, 0, TDF_SLIM);\n     }\n \n+  basic_block bb = gimple_bb (phi);\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree arg = gimple_phi_arg_def (phi, i);\n@@ -1002,6 +1004,21 @@ replace_phi_args_in (gphi *phi, ssa_prop_get_value_fn get_value)\n \n \t  if (val && val != arg && may_propagate_copy (arg, val))\n \t    {\n+\t      edge e = gimple_phi_arg_edge (phi, i);\n+\n+\t      /* Avoid propagating constants into loop latch edge\n+\t         PHI arguments as this makes coalescing the copy\n+\t\t across this edge impossible.  If the argument is\n+\t\t defined by an assert - otherwise the stmt will\n+\t\t get removed without replacing its uses.  */\n+\t      if (TREE_CODE (val) != SSA_NAME\n+\t\t  && bb->loop_father->header == bb\n+\t\t  && dominated_by_p (CDI_DOMINATORS, e->src, bb)\n+\t\t  && is_gimple_assign (SSA_NAME_DEF_STMT (arg))\n+\t\t  && (gimple_assign_rhs_code (SSA_NAME_DEF_STMT (arg))\n+\t\t      == ASSERT_EXPR))\n+\t\tcontinue;\n+\n \t      if (TREE_CODE (val) != SSA_NAME)\n \t\tprop_stats.num_const_prop++;\n \t      else\n@@ -1014,8 +1031,15 @@ replace_phi_args_in (gphi *phi, ssa_prop_get_value_fn get_value)\n \t\t through an abnormal edge, update the replacement\n \t\t accordingly.  */\n \t      if (TREE_CODE (val) == SSA_NAME\n-\t\t  && gimple_phi_arg_edge (phi, i)->flags & EDGE_ABNORMAL)\n-\t\tSSA_NAME_OCCURS_IN_ABNORMAL_PHI (val) = 1;\n+\t\t  && e->flags & EDGE_ABNORMAL\n+\t\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val))\n+\t\t{\n+\t\t  /* This can only occur for virtual operands, since\n+\t\t     for the real ones SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val))\n+\t\t     would prevent replacement.  */\n+\t\t  gcc_checking_assert (virtual_operand_p (val));\n+\t\t  SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val) = 1;\n+\t\t}\n \t    }\n \t}\n     }"}]}