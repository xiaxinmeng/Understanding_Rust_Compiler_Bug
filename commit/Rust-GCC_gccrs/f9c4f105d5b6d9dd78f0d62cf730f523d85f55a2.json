{"sha": "f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljNGYxMDVkNWI2ZDlkZDc4ZjBkNjJjZjczMGY1MjNkODVmNTVhMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-25T06:38:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-25T06:38:42Z"}, "message": "decl.c (push_overloaded_decl_1): Use pushdecl.\n\n\t* decl.c (push_overloaded_decl_1): Use pushdecl.\n\n\t* decl.c (auto_function): Replace #ifdef'd __inline with just\n\tplain inline.\n\t* lex.c (my_get_run_time): Likeise.\n\t(yyprint): Likewise.\n\t(identifier_type): Likewise.\n\t* method.c (start_squangling): Likewise.\n\t(end_squangling): Likewise.\n\t(icat): Likewise.\n\t(old_backref_index): Likewise.\n\t(flush_repeats): Likewise.\n\t(issue_ktype): Likewise.\n\t* parse.y (empty_parms): Likewise.\n\t* parse.c: Regenerated.\n\nFrom-SVN: r30154", "tree": {"sha": "a63094499511926dfb5190a57b6d298ab40dfade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63094499511926dfb5190a57b6d298ab40dfade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/comments", "author": null, "committer": null, "parents": [{"sha": "20819a093ee01295ac3e0ec0d21e873a47b22513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20819a093ee01295ac3e0ec0d21e873a47b22513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20819a093ee01295ac3e0ec0d21e873a47b22513"}], "stats": {"total": 1682, "additions": 839, "deletions": 843}, "files": [{"sha": "bdacb7aec2398c49b5684fdea76a1a8ea1a43517", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "patch": "@@ -1,3 +1,21 @@\n+1999-10-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (push_overloaded_decl_1): Use pushdecl.\n+\t\n+\t* decl.c (auto_function): Replace #ifdef'd __inline with just\n+\tplain inline.\n+\t* lex.c (my_get_run_time): Likeise.\n+\t(yyprint): Likewise.\n+\t(identifier_type): Likewise.\n+\t* method.c (start_squangling): Likewise.\n+\t(end_squangling): Likewise.\n+\t(icat): Likewise.\n+\t(old_backref_index): Likewise.\n+\t(flush_repeats): Likewise.\n+\t(issue_ktype): Likewise.\n+\t* parse.y (empty_parms): Likewise.\n+\t* parse.c: Regenerated.\n+\t\n 1999-10-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* dump.c (dequeue_and_dump): Replace several uses of"}, {"sha": "53578720f63362f9a0ee2939debfd0d7e7d1c3f0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "patch": "@@ -5947,13 +5947,10 @@ static void\n push_overloaded_decl_1 (x)\n      tree x;\n {\n-  push_overloaded_decl (x, PUSH_GLOBAL);\n+  pushdecl (x);\n }\n \n-#ifdef __GNUC__\n-__inline\n-#endif\n-tree\n+inline tree\n auto_function (name, type)\n      tree name, type;\n {"}, {"sha": "b4d973ab6066548fe9634a0ca05312b73ca4b250", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "patch": "@@ -390,10 +390,7 @@ get_time_identifier (name)\n   return time_identifier;\n }\n \n-#ifdef __GNUC__\n-__inline\n-#endif\n-static int\n+static inline int\n my_get_run_time ()\n {\n   int old_quiet_flag = quiet_flag;\n@@ -954,10 +951,7 @@ reinit_parse_for_function ()\n   current_member_init_list = NULL_TREE;\n }\n \f\n-#ifdef __GNUC__\n-__inline\n-#endif\n-void\n+inline void\n yyprint (file, yychar, yylval)\n      FILE *file;\n      int yychar;\n@@ -2983,10 +2977,7 @@ yyerror (string)\n    Value is 0 if we treat this name in a default fashion.  */\n int looking_for_typename;\n \n-#ifdef __GNUC__\n-__inline\n-#endif\n-int\n+inline int\n identifier_type (decl)\n      tree decl;\n {"}, {"sha": "805cf15d797ce473637650f898013aff4b886dff", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "patch": "@@ -21,10 +21,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n-#ifndef __GNUC__\n-#define __inline\n-#endif\n-\n /* Handle method declarations.  */\n #include \"config.h\"\n #include \"system.h\"\n@@ -216,7 +212,7 @@ static int nofold;\n    mangled name currently being built.  */\n static int numeric_output_need_bar;\n \n-static __inline void\n+static inline void\n start_squangling ()\n {\n   if (flag_do_squangling)\n@@ -229,7 +225,7 @@ start_squangling ()\n     }\n }\n \n-static __inline void\n+static inline void\n end_squangling ()\n {\n   if (flag_do_squangling)\n@@ -243,7 +239,7 @@ end_squangling ()\n \n /* Code to concatenate an asciified integer to a string.  */\n \n-static __inline void\n+static inline void\n icat (i)\n      HOST_WIDE_INT i;\n {\n@@ -310,7 +306,7 @@ dicat (lo, hi)\n \n /* Returns the index of TYPE in the typevec, or -1 if it's not there.  */\n \n-static __inline int\n+static inline int\n old_backref_index (type)\n      tree type;\n {\n@@ -338,7 +334,7 @@ old_backref_index (type)\n    this is the first time we've seen it and we're just looking to see if\n    it had been used before.  */\n \n-static __inline int\n+static inline int\n flush_repeats (nrepeats, type)\n      int nrepeats;\n      tree type;\n@@ -463,7 +459,7 @@ check_ktype (node, add)\n }\n \n \n-static __inline int\n+static inline int\n issue_ktype (decl)\n      tree decl;\n {"}, {"sha": "2076c384257e6ff7b7f450a2c31adb1ed9f3d174", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 809, "deletions": 812, "changes": 1621, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2"}, {"sha": "c33cec03b86a5e087efa0c20dbacccb14b5c3296", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=f9c4f105d5b6d9dd78f0d62cf730f523d85f55a2", "patch": "@@ -70,10 +70,7 @@ int have_extern_spec;\n int used_extern_spec;\n \n /* Cons up an empty parameter list.  */\n-#ifdef __GNUC__\n-__inline\n-#endif\n-static tree\n+static inline tree\n empty_parms ()\n {\n   tree parms;"}]}