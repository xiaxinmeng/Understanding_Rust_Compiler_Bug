{"sha": "9574af76fa7dc94934c2a8918eb05cac01570e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3NGFmNzZmYTdkYzk0OTM0YzJhODkxOGViMDVjYWMwMTU3MGU0OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-18T10:34:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-18T10:34:06Z"}, "message": "Reverted unintended part of previous commit.\n\nFrom-SVN: r270439", "tree": {"sha": "7a07425e22d7835ec4a05d6a976e05fd5d5b356b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a07425e22d7835ec4a05d6a976e05fd5d5b356b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9574af76fa7dc94934c2a8918eb05cac01570e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9574af76fa7dc94934c2a8918eb05cac01570e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9574af76fa7dc94934c2a8918eb05cac01570e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9574af76fa7dc94934c2a8918eb05cac01570e48/comments", "author": null, "committer": null, "parents": [{"sha": "ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff146a59dd0cb24043897cf90ea011eb2aa3d38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff146a59dd0cb24043897cf90ea011eb2aa3d38b"}], "stats": {"total": 38, "additions": 2, "deletions": 36}, "files": [{"sha": "ef9b874f997762cd456736c426d9281c95dc49b1", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9574af76fa7dc94934c2a8918eb05cac01570e48/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9574af76fa7dc94934c2a8918eb05cac01570e48/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=9574af76fa7dc94934c2a8918eb05cac01570e48", "patch": "@@ -2513,24 +2513,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t{\n \t  tree remove = TREE_TYPE (newdecl);\n \t  if (TYPE_MAIN_VARIANT (remove) == remove)\n-\t    {\n-\t      gcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n-\t      /* If remove is the main variant, no need to remove that\n-\t\t from the list.  One of the DECL_ORIGINAL_TYPE\n-\t\t variants, e.g. created for aligned attribute, might still\n-\t\t refer to the newdecl TYPE_DECL though, so remove that one\n-\t\t in that case.  */\n-\t      if (DECL_ORIGINAL_TYPE (newdecl)\n-\t\t  && DECL_ORIGINAL_TYPE (newdecl) != remove)\n-\t\tfor (tree t = TYPE_MAIN_VARIANT (DECL_ORIGINAL_TYPE (newdecl));\n-\t\t     ; t = TYPE_MAIN_VARIANT (t))\n-\t\t  if (TYPE_NAME (TYPE_NEXT_VARIANT (t)) == newdecl)\n-\t\t    {\n-\t\t      TYPE_NEXT_VARIANT (t)\n-\t\t\t= TYPE_NEXT_VARIANT (TYPE_NEXT_VARIANT (t));\n-\t\t      break;\n-\t\t    }\n-\t    }\t    \n+\t    gcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n \t  else\n \t    for (tree t = TYPE_MAIN_VARIANT (remove); ;\n \t\t t = TYPE_NEXT_VARIANT (t))"}, {"sha": "67d9244c450e3fb878064f243454461644c1ab4c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9574af76fa7dc94934c2a8918eb05cac01570e48/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9574af76fa7dc94934c2a8918eb05cac01570e48/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9574af76fa7dc94934c2a8918eb05cac01570e48", "patch": "@@ -2133,24 +2133,7 @@ next_arg:;\n \t    {\n \t      tree remove = TREE_TYPE (newdecl);\n \t      if (TYPE_MAIN_VARIANT (remove) == remove)\n-\t\t{\n-\t\t  gcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n-\t\t  /* If remove is the main variant, no need to remove that\n-\t\t     from the list.  One of the DECL_ORIGINAL_TYPE\n-\t\t     variants, e.g. created for aligned attribute, might still\n-\t\t     refer to the newdecl TYPE_DECL though, so remove that one\n-\t\t     in that case.  */\n-\t\t  if (tree orig = DECL_ORIGINAL_TYPE (newdecl))\n-\t\t    if (orig != remove)\n-\t\t      for (tree t = TYPE_MAIN_VARIANT (orig); ;\n-\t\t\t   t = TYPE_MAIN_VARIANT (t))\n-\t\t\tif (TYPE_NAME (TYPE_NEXT_VARIANT (t)) == newdecl)\n-\t\t\t  {\n-\t\t\t    TYPE_NEXT_VARIANT (t)\n-\t\t\t      = TYPE_NEXT_VARIANT (TYPE_NEXT_VARIANT (t));\n-\t\t\t    break;\n-\t\t\t  }\n-\t\t}\t    \n+\t\tgcc_assert (TYPE_NEXT_VARIANT (remove) == NULL_TREE);\n \t      else\n \t\tfor (tree t = TYPE_MAIN_VARIANT (remove); ;\n \t\t     t = TYPE_NEXT_VARIANT (t))"}]}