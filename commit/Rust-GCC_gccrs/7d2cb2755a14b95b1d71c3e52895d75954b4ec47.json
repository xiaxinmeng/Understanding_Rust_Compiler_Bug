{"sha": "7d2cb2755a14b95b1d71c3e52895d75954b4ec47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QyY2IyNzU1YTE0Yjk1YjFkNzFjM2U1Mjg5NWQ3NTk1NGI0ZWM0Nw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-10-02T16:41:34Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-10-02T16:41:34Z"}, "message": "ipa: Introduce ipa_cached_call_context\n\nHi,\n\nas we discussed with Honza on the mailin glist last week, making\ncached call context structure distinct from the normal one may make it\nclearer that the cached data need to be explicitely deallocated.\n\nThis patch does that division.  It is not mandatory for the overall\nmain goals of the patch set and can be dropped if deemed superfluous.\n\ngcc/ChangeLog:\n\n2020-09-02  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-fnsummary.h (ipa_cached_call_context): New forward declaration\n\tand class.\n\t(class ipa_call_context): Make friend ipa_cached_call_context.  Moved\n\tmethods duplicate_from and release to it too.\n\t* ipa-fnsummary.c (ipa_call_context::duplicate_from): Moved to class\n\tipa_cached_call_context.\n\t(ipa_call_context::release): Likewise, removed the parameter.\n\t* ipa-inline-analysis.c (node_context_cache_entry): Change the type of\n\tctx to ipa_cached_call_context.\n\t(do_estimate_edge_time): Remove parameter from the call to\n\tipa_cached_call_context::release.", "tree": {"sha": "657e2cce680ff6d0a25cb4c0dfd0f5f825b70d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/657e2cce680ff6d0a25cb4c0dfd0f5f825b70d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d2cb2755a14b95b1d71c3e52895d75954b4ec47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2cb2755a14b95b1d71c3e52895d75954b4ec47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d2cb2755a14b95b1d71c3e52895d75954b4ec47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2cb2755a14b95b1d71c3e52895d75954b4ec47/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5af1db2d1e7ca4f47f16fc885e1d70fa0229fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5af1db2d1e7ca4f47f16fc885e1d70fa0229fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5af1db2d1e7ca4f47f16fc885e1d70fa0229fc"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "fe236963fd875baa434a94754a4903dd7dcc3204", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2cb2755a14b95b1d71c3e52895d75954b4ec47/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2cb2755a14b95b1d71c3e52895d75954b4ec47/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=7d2cb2755a14b95b1d71c3e52895d75954b4ec47", "patch": "@@ -3329,7 +3329,7 @@ ipa_call_context::ipa_call_context (cgraph_node *node, clause_t possible_truths,\n /* Set THIS to be a duplicate of CTX.  Copy all relevant info.  */\n \n void\n-ipa_call_context::duplicate_from (const ipa_call_context &ctx)\n+ipa_cached_call_context::duplicate_from (const ipa_call_context &ctx)\n {\n   m_node = ctx.m_node;\n   m_possible_truths = ctx.m_possible_truths;\n@@ -3399,24 +3399,19 @@ ipa_call_context::duplicate_from (const ipa_call_context &ctx)\n   m_avals.m_known_value_ranges = vNULL;\n }\n \n-/* Release memory used by known_vals/contexts/aggs vectors.\n-   If ALL is true release also inline_param_summary.\n-   This happens when context was previously duplicated to be stored\n-   into cache.  */\n+/* Release memory used by known_vals/contexts/aggs vectors.  and\n+   inline_param_summary.  */\n \n void\n-ipa_call_context::release (bool all)\n+ipa_cached_call_context::release ()\n {\n   /* See if context is initialized at first place.  */\n   if (!m_node)\n     return;\n-  ipa_release_agg_values (m_avals.m_known_aggs, all);\n-  if (all)\n-    {\n-      m_avals.m_known_vals.release ();\n-      m_avals.m_known_contexts.release ();\n-      m_inline_param_summary.release ();\n-    }\n+  ipa_release_agg_values (m_avals.m_known_aggs, true);\n+  m_avals.m_known_vals.release ();\n+  m_avals.m_known_contexts.release ();\n+  m_inline_param_summary.release ();\n }\n \n /* Return true if CTX describes the same call context as THIS.  */"}, {"sha": "020a6f0425de093758771046efe8b3f61cce3770", "filename": "gcc/ipa-fnsummary.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2cb2755a14b95b1d71c3e52895d75954b4ec47/gcc%2Fipa-fnsummary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2cb2755a14b95b1d71c3e52895d75954b4ec47/gcc%2Fipa-fnsummary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.h?ref=7d2cb2755a14b95b1d71c3e52895d75954b4ec47", "patch": "@@ -287,6 +287,8 @@ class ipa_call_summary_t: public fast_call_summary <ipa_call_summary *, va_heap>\n \t\t\t  ipa_call_summary *dst_data);\n };\n \n+class ipa_cached_call_context;\n+\n /* This object describe a context of call.  That is a summary of known\n    information about its parameters.  Main purpose of this context is\n    to give more realistic estimations of function runtime, size and\n@@ -307,8 +309,6 @@ class ipa_call_context\n \t\t\t       sreal *ret_time,\n \t\t\t       sreal *ret_nonspecialized_time,\n \t\t\t       ipa_hints *ret_hints);\n-  void duplicate_from (const ipa_call_context &ctx);\n-  void release (bool all = false);\n   bool equal_to (const ipa_call_context &);\n   bool exists_p ()\n   {\n@@ -329,6 +329,18 @@ class ipa_call_context\n   /* Even after having calculated clauses, the information about argument\n      values is used to resolve indirect calls.  */\n   ipa_call_arg_values m_avals;\n+\n+  friend ipa_cached_call_context;\n+};\n+\n+/* Variant of ipa_call_context that is stored in a cache over a longer period\n+   of time.  */\n+\n+class ipa_cached_call_context : public ipa_call_context\n+{\n+public:\n+  void duplicate_from (const ipa_call_context &ctx);\n+  void release ();\n };\n \n extern fast_call_summary <ipa_call_summary *, va_heap> *ipa_call_summaries;"}, {"sha": "b7af77f7b9b330b003cb3b2aefb85a51693e8de7", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2cb2755a14b95b1d71c3e52895d75954b4ec47/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2cb2755a14b95b1d71c3e52895d75954b4ec47/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=7d2cb2755a14b95b1d71c3e52895d75954b4ec47", "patch": "@@ -57,7 +57,7 @@ fast_call_summary<edge_growth_cache_entry *, va_heap> *edge_growth_cache = NULL;\n class node_context_cache_entry\n {\n public:\n-  ipa_call_context ctx;\n+  ipa_cached_call_context ctx;\n   sreal time, nonspec_time;\n   int size;\n   ipa_hints hints;\n@@ -226,7 +226,7 @@ do_estimate_edge_time (struct cgraph_edge *edge, sreal *ret_nonspec_time)\n \t    node_context_cache_miss++;\n \t  else\n \t    node_context_cache_clear++;\n-\t  e->entry.ctx.release (true);\n+\t  e->entry.ctx.release ();\n \t  ctx.estimate_size_and_time (&size, &min_size,\n \t\t\t\t      &time, &nonspec_time, &hints);\n \t  e->entry.size = size;"}]}