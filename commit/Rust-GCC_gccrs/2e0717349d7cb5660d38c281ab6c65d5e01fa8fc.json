{"sha": "2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwNzE3MzQ5ZDdjYjU2NjBkMzhjMjgxYWI2YzY1ZDVlMDFmYThmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-02-09T14:56:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-02-09T14:56:05Z"}, "message": "[multiple changes]\n\n2004-02-09  Ed Schonberg  <schonberg@gnat.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Eq): When looking for the primitive equality\n\tfor a tagged type, verify that both formals have the same type.\n\n\t* exp_ch6.adb (Add_Call_By_Copy_Code): Initialize properly the\n\ttemporary when the formal is an in-parameter and the actual a possibly\n\tunaligned slice.\n\n\t* exp_ch9.adb (Expand_Entry_Barrier): Resolve barrier expression even\n\twhen expansion is disabled, to ensure proper name capture with\n\toverloaded literals.  Condition can be of any boolean type, resolve\n\taccordingly.\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Emit warning if the\n\trenaming is for a formal subprogram with a default operator name, and\n\tthere is a usable operator that is visible at the point of\n\tinstantiation.\n\n2004-02-09  Robert Dewar  <dewar@gnat.com>\n\n\t* ali.adb (Scan_Ali) Add Ignore_Errors argument. This is a major\n\trewrite to ignore errors in ali files, intended to allow tools downward\n\tcompatibility with new versions of ali files.\n\n\t* ali.ads: Add new parameter Ignore_Errors\n\n\t* bcheck.adb (Check_Consistent_Restrictions): Fix error of sometimes\n\tduplicating the error message giving the file with restrictions.\n\n\t* debug.adb: Add debug flag I for gnatbind\n\n\t* errout.adb (Set_Msg_Insertion_Node): Suppress extra quotes around\n\toperators for the case where the operator is a defining operator.\n\n\t* exp_ch3.adb: Minor reformatting (new function spec format).\n\n\t* exp_ch4.adb: Add comment for previous change, and make minor\n\tadjustment to loop to always check for improper loop termination.\n\tMinor reformatting throughout (new function spec format).\n\n\t* gnatbind.adb: Implement -di debug flag for gnatbind\n\n\t* gnatlink.adb: Call Scan_ALI with Ignore_Errors set to True\n\n\t* gnatls.adb: Call Scan_ALI with Ignore_Errors set to True\n\n\t* lib-load.adb: Fix bad assertion.\n\tFound by testing and code reading.\n\tMinor reformatting.\n\n\t* lib-load.ads: Minor reformatting.\n\n\t* lib-writ.adb: There is only one R line now.\n\n\t* lib-writ.ads: Add documentation on making downward compatible changes\n\tto ali files so old tools work with new ali files.\n\tThere is only one R line now.\n\tAdd documentation on format incompatibilities (with special GPS note)\n\n\t* namet.ads, namet.adb: (Is_Operator_Name): New procedure\n\n\t* par-load.adb: Minor reformatting\n\n\t* sem_ch8.adb: Fix to error message from last update\n\tMinor reformatting and restructuring of code from last update\n\n\t* par-prag.adb, snames.adb, snames.ads, snames.h,\n\tsem_prag.adb: Implement pragma Profile.\n\n\t* stylesw.adb: Implement -gnatyN switch to turn off all style check\n\toptions.\n\n\t* usage.adb: Add line for -gnatyN switch\n\n\t* vms_data.ads: Add entry STYLE_CHECKS=NONE for -gnatyN\n\nFrom-SVN: r77537", "tree": {"sha": "9d8577ad0140661a3b83d8e92d9d61821ae41213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d8577ad0140661a3b83d8e92d9d61821ae41213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/comments", "author": null, "committer": null, "parents": [{"sha": "77077b39cb4b8bf659af916a7a055413afb41e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77077b39cb4b8bf659af916a7a055413afb41e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77077b39cb4b8bf659af916a7a055413afb41e9e"}], "stats": {"total": 2496, "additions": 1456, "deletions": 1040}, "files": [{"sha": "e27477c96b7e2e2540b8f226d9ce6a5d9d8db94e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -1,3 +1,80 @@\n+2004-02-09  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Eq): When looking for the primitive equality\n+\tfor a tagged type, verify that both formals have the same type.\n+\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code): Initialize properly the\n+\ttemporary when the formal is an in-parameter and the actual a possibly\n+\tunaligned slice.\n+\n+\t* exp_ch9.adb (Expand_Entry_Barrier): Resolve barrier expression even\n+\twhen expansion is disabled, to ensure proper name capture with\n+\toverloaded literals.  Condition can be of any boolean type, resolve\n+\taccordingly.\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Emit warning if the\n+\trenaming is for a formal subprogram with a default operator name, and\n+\tthere is a usable operator that is visible at the point of\n+\tinstantiation.\n+\n+2004-02-09  Robert Dewar  <dewar@gnat.com>\n+\n+\t* ali.adb (Scan_Ali) Add Ignore_Errors argument. This is a major\n+\trewrite to ignore errors in ali files, intended to allow tools downward\n+\tcompatibility with new versions of ali files.\n+\n+\t* ali.ads: Add new parameter Ignore_Errors\n+\n+\t* bcheck.adb (Check_Consistent_Restrictions): Fix error of sometimes\n+\tduplicating the error message giving the file with restrictions.\n+\n+\t* debug.adb: Add debug flag I for gnatbind\n+\n+\t* errout.adb (Set_Msg_Insertion_Node): Suppress extra quotes around\n+\toperators for the case where the operator is a defining operator.\n+\n+\t* exp_ch3.adb: Minor reformatting (new function spec format).\n+\n+\t* exp_ch4.adb: Add comment for previous change, and make minor\n+\tadjustment to loop to always check for improper loop termination.\n+\tMinor reformatting throughout (new function spec format).\n+\n+\t* gnatbind.adb: Implement -di debug flag for gnatbind\n+\n+\t* gnatlink.adb: Call Scan_ALI with Ignore_Errors set to True\n+\n+\t* gnatls.adb: Call Scan_ALI with Ignore_Errors set to True\n+\n+\t* lib-load.adb: Fix bad assertion.\n+\tFound by testing and code reading.\n+\tMinor reformatting.\n+\n+\t* lib-load.ads: Minor reformatting.\n+\n+\t* lib-writ.adb: There is only one R line now.\n+\n+\t* lib-writ.ads: Add documentation on making downward compatible changes\n+\tto ali files so old tools work with new ali files.\n+\tThere is only one R line now.\n+\tAdd documentation on format incompatibilities (with special GPS note)\n+\n+\t* namet.ads, namet.adb: (Is_Operator_Name): New procedure\n+\n+\t* par-load.adb: Minor reformatting\n+\n+\t* sem_ch8.adb: Fix to error message from last update\n+\tMinor reformatting and restructuring of code from last update\n+\n+\t* par-prag.adb, snames.adb, snames.ads, snames.h,\n+\tsem_prag.adb: Implement pragma Profile.\n+\n+\t* stylesw.adb: Implement -gnatyN switch to turn off all style check\n+\toptions.\n+\n+\t* usage.adb: Add line for -gnatyN switch\n+\n+\t* vms_data.ads: Add entry STYLE_CHECKS=NONE for -gnatyN\n+\n 2004-02-09  Albert Lee  <lee@gnat.com>\n \n \t* errno.c: define _SGI_MP_SOURCE for task-safe errno on IRIX"}, {"sha": "2246620083070793143609a31d058fba83691c8f", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 347, "deletions": 183, "changes": 530, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -37,6 +37,25 @@ package body ALI is\n    use ASCII;\n    --  Make control characters visible\n \n+   --  The following variable records which characters currently are\n+   --  used as line type markers in the ALI file. This is used in\n+   --  Scan_ALI to detect (or skip) invalid lines.\n+\n+   Known_ALI_Lines : constant array (Character range 'A' .. 'Z') of Boolean :=\n+     ('V'    => True,   -- version\n+      'M'    => True,   -- main program\n+      'A'    => True,   -- argument\n+      'P'    => True,   -- program\n+      'R'    => True,   -- restriction\n+      'I'    => True,   -- interrupt\n+      'U'    => True,   -- unit\n+      'W'    => True,   -- with\n+      'L'    => True,   -- linker option\n+      'E'    => True,   -- external\n+      'D'    => True,   -- dependency\n+      'X'    => True,   -- xref\n+      others => False);\n+\n    --------------------\n    -- Initialize_ALI --\n    --------------------\n@@ -99,13 +118,14 @@ package body ALI is\n    --------------\n \n    function Scan_ALI\n-     (F            : File_Name_Type;\n-      T            : Text_Buffer_Ptr;\n-      Ignore_ED    : Boolean;\n-      Err          : Boolean;\n-      Read_Xref    : Boolean := False;\n-      Read_Lines   : String := \"\";\n-      Ignore_Lines : String := \"X\") return ALI_Id\n+     (F             : File_Name_Type;\n+      T             : Text_Buffer_Ptr;\n+      Ignore_ED     : Boolean;\n+      Err           : Boolean;\n+      Read_Xref     : Boolean := False;\n+      Read_Lines    : String  := \"\";\n+      Ignore_Lines  : String  := \"X\";\n+      Ignore_Errors : Boolean := False) return ALI_Id\n    is\n       P         : Text_Ptr := T'First;\n       Line      : Logical_Line_Number := 1;\n@@ -141,10 +161,26 @@ package body ALI is\n       procedure Checkc (C : Character);\n       --  Check next character is C. If so bump past it, if not fatal error\n \n+      procedure Check_Unknown_Line;\n+      --  If Ignore_Errors mode, then checks C to make sure that it is not\n+      --  an unknown ALI line type characters, and if so, skips lines\n+      --  until the first character of the line is one of these characters,\n+      --  at which point it does a Getc to put that character in C. The\n+      --  call has no effect if C is already an appropriate character.\n+      --  If not in Ignore_Errors mode, a fatal error is signalled if the\n+      --  line is unknown. Note that if C is an EOL on entry, the line is\n+      --  skipped (it is assumed that blank lines are never significant).\n+      --  If C is EOF on entry, the call has no effect (it is assumed that\n+      --  the caller will properly handle this case).\n+\n       procedure Fatal_Error;\n       --  Generate fatal error message for badly formatted ALI file if\n       --  Err is false, or raise Bad_ALI_Format if Err is True.\n \n+      procedure Fatal_Error_Ignore;\n+      pragma Inline (Fatal_Error_Ignore);\n+      --  In Ignore_Errors mode, has no effect, otherwise same as Fatal_Error\n+\n       function Getc return Character;\n       --  Get next character, bumping P past the character obtained\n \n@@ -210,7 +246,13 @@ package body ALI is\n       procedure Check_At_End_Of_Field is\n       begin\n          if not At_End_Of_Field then\n-            Fatal_Error;\n+            if Ignore_Errors then\n+               while Nextc > ' ' loop\n+                  P := P + 1;\n+               end loop;\n+            else\n+               Fatal_Error;\n+            end if;\n          end if;\n       end Check_At_End_Of_Field;\n \n@@ -222,11 +264,38 @@ package body ALI is\n       begin\n          if Nextc = C then\n             P := P + 1;\n+         elsif Ignore_Errors then\n+            P := P + 1;\n          else\n             Fatal_Error;\n          end if;\n       end Checkc;\n \n+      ------------------------\n+      -- Check_Unknown_Line --\n+      ------------------------\n+\n+      procedure Check_Unknown_Line is\n+      begin\n+         while C not in 'A' .. 'Z'\n+           or else not Known_ALI_Lines (C)\n+         loop\n+            if C = CR or else C = LF then\n+               Skip_Line;\n+\n+            elsif C = EOF then\n+               return;\n+\n+            elsif Ignore_Errors then\n+               Skip_Line;\n+               C := Getc;\n+\n+            else\n+               Fatal_Error;\n+            end if;\n+         end loop;\n+      end Check_Unknown_Line;\n+\n       -----------------\n       -- Fatal_Error --\n       -----------------\n@@ -323,6 +392,17 @@ package body ALI is\n          Exit_Program (E_Fatal);\n       end Fatal_Error;\n \n+      ------------------------\n+      -- Fatal_Error_Ignore --\n+      ------------------------\n+\n+      procedure Fatal_Error_Ignore is\n+      begin\n+         if not Ignore_Errors then\n+            Fatal_Error;\n+         end if;\n+      end Fatal_Error_Ignore;\n+\n       --------------\n       -- Get_Name --\n       --------------\n@@ -336,7 +416,11 @@ package body ALI is\n          Skip_Space;\n \n          if At_Eol then\n-            Fatal_Error;\n+            if Ignore_Errors then\n+               return Error_Name;\n+            else\n+               Fatal_Error;\n+            end if;\n          end if;\n \n          loop\n@@ -400,7 +484,11 @@ package body ALI is\n          Skip_Space;\n \n          if At_Eol then\n-            Fatal_Error;\n+            if Ignore_Errors then\n+               return Dummy_Time_Stamp;\n+            else\n+               Fatal_Error;\n+            end if;\n          end if;\n \n          --  Following reads old style time stamp missing first two digits\n@@ -454,7 +542,15 @@ package body ALI is\n       begin\n          Skip_Space;\n \n-         if not At_Eol then Fatal_Error; end if;\n+         if not At_Eol then\n+            if Ignore_Errors then\n+               while not At_Eol loop\n+                  P := P + 1;\n+               end loop;\n+            else\n+               Fatal_Error;\n+            end if;\n+         end if;\n \n          --  Loop to skip past blank lines (first time through skips this EOL)\n \n@@ -569,10 +665,16 @@ package body ALI is\n       --  C is set to contain the first character of the following line.\n \n       C := Getc;\n+      Check_Unknown_Line;\n \n       --  Acquire library version\n \n       if C /= 'V' then\n+\n+         --  The V line missing really indicates trouble, most likely it\n+         --  means we don't have an ALI file at all, so here we give a\n+         --  fatal error even if we are in Ignore_Errors mode.\n+\n          Fatal_Error;\n \n       elsif Ignore ('V') then\n@@ -594,6 +696,7 @@ package body ALI is\n       end if;\n \n       C := Getc;\n+      Check_Unknown_Line;\n \n       --  Acquire main program line if present\n \n@@ -648,7 +751,10 @@ package body ALI is\n \n       First_Arg := Args.Last + 1;\n \n-      Arg_Loop : while C = 'A' loop\n+      A_Loop : loop\n+         Check_Unknown_Line;\n+         exit A_Loop when C /= 'A';\n+\n          if Ignore ('A') then\n             Skip_Line;\n \n@@ -668,16 +774,29 @@ package body ALI is\n          end if;\n \n          C := Getc;\n-      end loop Arg_Loop;\n+      end loop A_Loop;\n \n       --  Acquire P line\n \n-      if C /= 'P' then\n-         Fatal_Error;\n+      Check_Unknown_Line;\n \n-      elsif Ignore ('P') then\n+      while C /= 'P' loop\n+         if Ignore_Errors then\n+            if C = EOF then\n+               Fatal_Error;\n+            else\n+               Skip_Line;\n+            end if;\n+         else\n+            Fatal_Error;\n+         end if;\n+      end loop;\n+\n+      if Ignore ('P') then\n          Skip_Line;\n \n+      --  Process P line\n+\n       else\n          NS_Found := False;\n \n@@ -731,7 +850,7 @@ package body ALI is\n                --  Invalid switch starting with N\n \n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n             --  Processing for Qx\n@@ -758,7 +877,7 @@ package body ALI is\n                --  Invalid switch starting with S\n \n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n             --  Processing for Tx\n@@ -786,18 +905,26 @@ package body ALI is\n                --  Invalid switches starting with U\n \n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n             --  Processing for ZX\n \n             elsif C = 'Z' then\n-               Checkc ('X');\n+               C := Getc;\n+\n+               if C = 'X' then\n                   ALIs.Table (Id).Zero_Cost_Exceptions := True;\n                   Zero_Cost_Exceptions_Specified := True;\n+               else\n+                  Fatal_Error_Ignore;\n+               end if;\n+\n+            --  Invalid parameter\n \n             else\n-               Fatal_Error;\n+               C := Getc;\n+               Fatal_Error_Ignore;\n             end if;\n          end loop;\n \n@@ -809,149 +936,173 @@ package body ALI is\n       end if;\n \n       C := Getc;\n+      Check_Unknown_Line;\n \n-      --  Acquire first restrictions line\n+      --  Acquire restrictions line\n \n-      if C /= 'R' then\n-         Fatal_Error;\n+      while C /= 'R' loop\n+         if Ignore_Errors then\n+            if C = EOF then\n+               Fatal_Error;\n+            else\n+               Skip_Line;\n+            end if;\n+         else\n+            Fatal_Error;\n+         end if;\n+      end loop;\n \n-      elsif Ignore ('R') then\n+      if Ignore ('R') then\n          Skip_Line;\n \n+      --  Process restrictions line\n+\n       else\n-         Checkc (' ');\n-         Skip_Space;\n+         Scan_Restrictions : declare\n+            Save_R : constant Restrictions_Info := Cumulative_Restrictions;\n+            --  Save cumulative restrictions in case we have a fatal error\n \n-         for R in All_Boolean_Restrictions loop\n-            C := Getc;\n+            Bad_R_Line : exception;\n+            --  Signal bad restrictions line\n \n-            case C is\n-               when 'v' =>\n-                  ALIs.Table (Id).Restrictions.Violated (R) := True;\n-                  Cumulative_Restrictions.Violated (R) := True;\n+         begin\n+            Checkc (' ');\n+            Skip_Space;\n \n-               when 'r' =>\n-                  ALIs.Table (Id).Restrictions.Set (R) := True;\n-                  Cumulative_Restrictions.Set (R) := True;\n+            --  Acquire information for boolean restrictions\n \n-               when 'n' =>\n-                  null;\n+            for R in All_Boolean_Restrictions loop\n+               C := Getc;\n \n-               when others =>\n-                  Fatal_Error;\n-            end case;\n-         end loop;\n+               case C is\n+                  when 'v' =>\n+                     ALIs.Table (Id).Restrictions.Violated (R) := True;\n+                     Cumulative_Restrictions.Violated (R) := True;\n \n-         Skip_Eol;\n-      end if;\n+                  when 'r' =>\n+                     ALIs.Table (Id).Restrictions.Set (R) := True;\n+                     Cumulative_Restrictions.Set (R) := True;\n \n-      C := Getc;\n+                  when 'n' =>\n+                     null;\n \n-      --  See if we have a second R line\n+                  when others =>\n+                     Fatal_Error;\n+               end case;\n+            end loop;\n \n-      if C /= 'R' then\n+            --  Skip separating space\n \n-         --  If not, just ignore, and leave the restrictions variables\n-         --  unchanged. This is useful for dealing with old format ALI\n-         --  files with only one R line (this can be removed later on,\n-         --  but is useful for transitional purposes).\n+            Checkc (' ');\n \n-         null;\n+            --  Acquire information for parameter restrictions\n \n-         --  Here we have a second R line, ignore it if ignore flag set\n+            for RP in All_Parameter_Restrictions loop\n \n-      elsif Ignore ('R') then\n-         Skip_Line;\n-         C := Getc;\n+               --  Acquire restrictions pragma information\n \n-      --  Otherwise acquire second R line\n+               case Getc is\n+                  when 'n' =>\n+                     null;\n \n-      else\n-         Checkc (' ');\n-         Skip_Space;\n+                  when 'r' =>\n+                     ALIs.Table (Id).Restrictions.Set (RP) := True;\n \n-         for RP in All_Parameter_Restrictions loop\n+                     declare\n+                        N : constant Integer := Integer (Get_Nat);\n+                     begin\n+                        ALIs.Table (Id).Restrictions.Value (RP) := N;\n \n-            --  Acquire restrictions pragma information\n+                        if Cumulative_Restrictions.Set (RP) then\n+                           Cumulative_Restrictions.Value (RP) :=\n+                             Integer'Min\n+                               (Cumulative_Restrictions.Value (RP), N);\n+                        else\n+                           Cumulative_Restrictions.Set (RP) := True;\n+                           Cumulative_Restrictions.Value (RP) := N;\n+                        end if;\n+                     end;\n \n-            case Getc is\n-               when 'n' =>\n-                  null;\n+                  when others =>\n+                     Fatal_Error;\n+               end case;\n \n-               when 'r' =>\n-                  ALIs.Table (Id).Restrictions.Set (RP) := True;\n+               --  Acquire restrictions violations information\n \n-                  declare\n-                     N : constant Integer := Integer (Get_Nat);\n-                  begin\n-                     ALIs.Table (Id).Restrictions.Value (RP) := N;\n+               case Getc is\n+                  when 'n' =>\n+                     null;\n \n-                     if Cumulative_Restrictions.Set (RP) then\n-                        Cumulative_Restrictions.Value (RP) :=\n-                          Integer'Min (Cumulative_Restrictions.Value (RP), N);\n-                     else\n-                        Cumulative_Restrictions.Set (RP) := True;\n-                        Cumulative_Restrictions.Value (RP) := N;\n-                     end if;\n-                  end;\n+                  when 'v' =>\n+                     ALIs.Table (Id).Restrictions.Violated (RP) := True;\n+                     Cumulative_Restrictions.Violated (RP) := True;\n \n-               when others =>\n-                  Fatal_Error;\n-            end case;\n+                     declare\n+                        N : constant Integer := Integer (Get_Nat);\n+                        pragma Unsuppress (Overflow_Check);\n \n-            --  Acquire restrictions violations information\n+                     begin\n+                        ALIs.Table (Id).Restrictions.Count (RP) := N;\n \n-            case Getc is\n-               when 'n' =>\n-                  null;\n+                        if RP in Checked_Max_Parameter_Restrictions then\n+                           Cumulative_Restrictions.Count (RP) :=\n+                             Integer'Max\n+                               (Cumulative_Restrictions.Count (RP), N);\n+                        else\n+                           Cumulative_Restrictions.Count (RP) :=\n+                             Cumulative_Restrictions.Count (RP) + N;\n+                        end if;\n \n-               when 'v' =>\n-                  ALIs.Table (Id).Restrictions.Violated (RP) := True;\n-                  Cumulative_Restrictions.Violated (RP) := True;\n+                     exception\n+                        when Constraint_Error =>\n \n-                  declare\n-                     N : constant Integer := Integer (Get_Nat);\n-                     pragma Unsuppress (Overflow_Check);\n+                           --  A constraint error comes from the addition in\n+                           --  the else branch. We reset to the maximum and\n+                           --  indicate that the real value is now unknown.\n \n-                  begin\n-                     ALIs.Table (Id).Restrictions.Count (RP) := N;\n+                           Cumulative_Restrictions.Value (RP) := Integer'Last;\n+                           Cumulative_Restrictions.Unknown (RP) := True;\n+                     end;\n \n-                     if RP in Checked_Max_Parameter_Restrictions then\n-                        Cumulative_Restrictions.Count (RP) :=\n-                          Integer'Max (Cumulative_Restrictions.Count (RP), N);\n-                     else\n-                        Cumulative_Restrictions.Count (RP) :=\n-                          Cumulative_Restrictions.Count (RP) + N;\n+                     if Nextc = '+' then\n+                        Skipc;\n+                        ALIs.Table (Id).Restrictions.Unknown (RP) := True;\n+                        Cumulative_Restrictions.Unknown (RP) := True;\n                      end if;\n \n-                  exception\n-                     when Constraint_Error =>\n+                  when others =>\n+                     Fatal_Error;\n+               end case;\n+            end loop;\n+\n+            Skip_Eol;\n \n-                        --  A constraint error comes from the addition in\n-                        --  the else branch. We reset to the maximum and\n-                        --  indicate that the real value is now unknown.\n+         --  Here if error during scanning of restrictions line\n \n-                        Cumulative_Restrictions.Value (RP) := Integer'Last;\n-                        Cumulative_Restrictions.Unknown (RP) := True;\n-                  end;\n+         exception\n+            when Bad_R_Line =>\n \n-                  if Nextc = '+' then\n-                     Skipc;\n-                     ALIs.Table (Id).Restrictions.Unknown (RP) := True;\n-                     Cumulative_Restrictions.Unknown (RP) := True;\n-                  end if;\n+               --  In Ignore_Errors mode, undo any changes to restrictions\n+               --  from this unit, and continue on.\n+\n+               if Ignore_Errors then\n+                  Cumulative_Restrictions := Save_R;\n+                  ALIs.Table (Id).Restrictions := Restrictions_Initial;\n+\n+               --  In normal mode, this is a fatal error\n \n-               when others =>\n+               else\n                   Fatal_Error;\n-            end case;\n-         end loop;\n+               end if;\n \n-         Skip_Eol;\n-         C := Getc;\n+         end Scan_Restrictions;\n       end if;\n \n       --  Acquire 'I' lines if present\n \n+      C := Getc;\n+      Check_Unknown_Line;\n+\n       while C = 'I' loop\n          if Ignore ('I') then\n             Skip_Line;\n@@ -983,7 +1134,9 @@ package body ALI is\n \n       --  Loop to acquire unit entries\n \n-      Unit_Loop : while C = 'U' loop\n+      U_Loop : loop\n+         Check_Unknown_Line;\n+         exit U_Loop when C /= 'U';\n \n          --  Note: as per spec, we never ignore U lines\n \n@@ -1104,17 +1257,28 @@ package body ALI is\n             --  BN parameter (Body needed)\n \n             elsif C = 'B' then\n-               Checkc ('N');\n-               Check_At_End_Of_Field;\n-               Units.Table (Units.Last).Body_Needed_For_SAL := True;\n+               C := Getc;\n+\n+               if C = 'N' then\n+                  Check_At_End_Of_Field;\n+                  Units.Table (Units.Last).Body_Needed_For_SAL := True;\n+               else\n+                  Fatal_Error_Ignore;\n+               end if;\n+\n \n-            --  DE parameter (Dynamic elaboration checks\n+            --  DE parameter (Dynamic elaboration checks)\n \n             elsif C = 'D' then\n-               Checkc ('E');\n-               Check_At_End_Of_Field;\n-               Units.Table (Units.Last).Dynamic_Elab := True;\n-               Dynamic_Elaboration_Checks_Specified := True;\n+               C := Getc;\n+\n+               if C = 'E' then\n+                  Check_At_End_Of_Field;\n+                  Units.Table (Units.Last).Dynamic_Elab := True;\n+                  Dynamic_Elaboration_Checks_Specified := True;\n+               else\n+                  Fatal_Error_Ignore;\n+               end if;\n \n             --  EB/EE parameters\n \n@@ -1123,22 +1287,25 @@ package body ALI is\n \n                if C = 'B' then\n                   Units.Table (Units.Last).Elaborate_Body := True;\n-\n                elsif C = 'E' then\n                   Units.Table (Units.Last).Set_Elab_Entity := True;\n-\n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n                Check_At_End_Of_Field;\n \n             --  GE parameter (generic)\n \n             elsif C = 'G' then\n-               Checkc ('E');\n-               Check_At_End_Of_Field;\n-               Units.Table (Units.Last).Is_Generic := True;\n+               C := Getc;\n+\n+               if C = 'E' then\n+                  Check_At_End_Of_Field;\n+                  Units.Table (Units.Last).Is_Generic := True;\n+               else\n+                  Fatal_Error_Ignore;\n+               end if;\n \n             --  IL/IS/IU parameters\n \n@@ -1147,16 +1314,13 @@ package body ALI is\n \n                if C = 'L' then\n                   Units.Table (Units.Last).Icasing := All_Lower_Case;\n-\n                elsif C = 'S' then\n                   Units.Table (Units.Last).Init_Scalars := True;\n                   Initialize_Scalars_Used := True;\n-\n                elsif C = 'U' then\n                   Units.Table (Units.Last).Icasing := All_Upper_Case;\n-\n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n                Check_At_End_Of_Field;\n@@ -1168,45 +1332,40 @@ package body ALI is\n \n                if C = 'M' then\n                   Units.Table (Units.Last).Kcasing := Mixed_Case;\n-\n                elsif C = 'U' then\n                   Units.Table (Units.Last).Kcasing := All_Upper_Case;\n-\n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n                Check_At_End_Of_Field;\n \n             --  NE parameter\n \n             elsif C = 'N' then\n-               Checkc ('E');\n-               Units.Table (Units.Last).No_Elab := True;\n-               Check_At_End_Of_Field;\n+               C := Getc;\n+\n+               if C = 'E' then\n+                  Units.Table (Units.Last).No_Elab := True;\n+                  Check_At_End_Of_Field;\n+               else\n+                  Fatal_Error_Ignore;\n+               end if;\n+\n \n             --  PR/PU/PK parameters\n \n             elsif C = 'P' then\n                C := Getc;\n \n-               --  PR parameter (preelaborate)\n-\n                if C = 'R' then\n                   Units.Table (Units.Last).Preelab := True;\n-\n-               --  PU parameter (pure)\n-\n                elsif C = 'U' then\n                   Units.Table (Units.Last).Pure := True;\n-\n-               --  PK indicates unit is package\n-\n                elsif C = 'K' then\n                   Units.Table (Units.Last).Unit_Kind := 'p';\n-\n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n                Check_At_End_Of_Field;\n@@ -1216,48 +1375,34 @@ package body ALI is\n             elsif C = 'R' then\n                C := Getc;\n \n-               --  RC parameter (remote call interface)\n-\n                if C = 'C' then\n                   Units.Table (Units.Last).RCI := True;\n-\n-               --  RT parameter (remote types)\n-\n                elsif C = 'T' then\n                   Units.Table (Units.Last).Remote_Types := True;\n-\n-               --  RA parameter (remote access to class wide type)\n-\n                elsif C = 'A' then\n                   Units.Table (Units.Last).Has_RACW := True;\n-\n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n                Check_At_End_Of_Field;\n \n             elsif C = 'S' then\n                C := Getc;\n \n-               --  SP parameter (shared passive)\n-\n                if C = 'P' then\n                   Units.Table (Units.Last).Shared_Passive := True;\n-\n-               --  SU parameter indicates unit is subprogram\n-\n                elsif C = 'U' then\n                   Units.Table (Units.Last).Unit_Kind := 's';\n-\n                else\n-                  Fatal_Error;\n+                  Fatal_Error_Ignore;\n                end if;\n \n                Check_At_End_Of_Field;\n \n             else\n-               Fatal_Error;\n+               C := Getc;\n+               Fatal_Error_Ignore;\n             end if;\n          end loop;\n \n@@ -1275,7 +1420,10 @@ package body ALI is\n \n          --  Scan out With lines for this unit\n \n-         With_Loop : while C = 'W' loop\n+         With_Loop : loop\n+            Check_Unknown_Line;\n+            exit With_Loop when C /= 'W';\n+\n             if Ignore ('W') then\n                Skip_Line;\n \n@@ -1345,7 +1493,9 @@ package body ALI is\n \n          Name_Len := 0;\n \n-         Linker_Options_Loop : while C = 'L' loop\n+         Linker_Options_Loop : loop\n+            Check_Unknown_Line;\n+            exit Linker_Options_Loop when C /= 'L';\n \n             if Ignore ('L') then\n                Skip_Line;\n@@ -1361,7 +1511,7 @@ package body ALI is\n                   if C < Character'Val (16#20#)\n                     or else C > Character'Val (16#7E#)\n                   then\n-                     Fatal_Error;\n+                     Fatal_Error_Ignore;\n \n                   elsif C = '{' then\n                      C := Character'Val (0);\n@@ -1386,7 +1536,7 @@ package body ALI is\n                                          10;\n \n                            else\n-                              Fatal_Error;\n+                              Fatal_Error_Ignore;\n                            end if;\n                         end loop;\n \n@@ -1428,7 +1578,7 @@ package body ALI is\n             Linker_Options.Table (Linker_Options.Last).Original_Pos :=\n               Linker_Options.Last;\n          end if;\n-      end loop Unit_Loop;\n+      end loop U_Loop;\n \n       --  End loop through units for one ALI file\n \n@@ -1457,7 +1607,10 @@ package body ALI is\n \n       --  Scan out external version references and put in hash table\n \n-      while C = 'E' loop\n+      E_Loop : loop\n+         Check_Unknown_Line;\n+         exit E_Loop when C /= 'E';\n+\n          if Ignore ('E') then\n             Skip_Line;\n \n@@ -1483,13 +1636,16 @@ package body ALI is\n          end if;\n \n          C := Getc;\n-      end loop;\n+      end loop E_Loop;\n \n       --  Scan out source dependency lines for this ALI file\n \n       ALIs.Table (Id).First_Sdep := Sdep.Last + 1;\n \n-      while C = 'D' loop\n+      D_Loop : loop\n+         Check_Unknown_Line;\n+         exit D_Loop when C /= 'D';\n+\n          if Ignore ('D') then\n             Skip_Line;\n \n@@ -1585,13 +1741,19 @@ package body ALI is\n          end if;\n \n          C := Getc;\n-      end loop;\n+      end loop D_Loop;\n \n       ALIs.Table (Id).Last_Sdep := Sdep.Last;\n \n       --  We must at this stage be at an Xref line or the end of file\n \n-      if C /= EOF and then C /= 'X' then\n+      if C = EOF then\n+         return Id;\n+      end if;\n+\n+      Check_Unknown_Line;\n+\n+      if C /= 'X' then\n          Fatal_Error;\n       end if;\n \n@@ -1604,7 +1766,9 @@ package body ALI is\n \n       --  Loop through Xref sections\n \n-      while C = 'X' loop\n+      X_Loop : loop\n+         Check_Unknown_Line;\n+         exit X_Loop when C /= 'X';\n \n          --  Make new entry in section table\n \n@@ -1864,7 +2028,7 @@ package body ALI is\n          end Read_Refs_For_One_File;\n \n          C := Getc;\n-      end loop;\n+      end loop X_Loop;\n \n       --  Here after dealing with xref sections\n "}, {"sha": "f789b0c3581f62e3ee0e2ce78640831e897dfc9c", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -808,13 +808,14 @@ package ALI is\n    --  Initialize the ALI tables. Also resets all switch values to defaults.\n \n    function Scan_ALI\n-     (F            : File_Name_Type;\n-      T            : Text_Buffer_Ptr;\n-      Ignore_ED    : Boolean;\n-      Err          : Boolean;\n-      Read_Xref    : Boolean := False;\n-      Read_Lines   : String := \"\";\n-      Ignore_Lines : String := \"X\") return ALI_Id;\n+     (F             : File_Name_Type;\n+      T             : Text_Buffer_Ptr;\n+      Ignore_ED     : Boolean;\n+      Err           : Boolean;\n+      Read_Xref     : Boolean := False;\n+      Read_Lines    : String  := \"\";\n+      Ignore_Lines  : String  := \"X\";\n+      Ignore_Errors : Boolean := False) return ALI_Id;\n    --  Given the text, T, of an ALI file, F, scan and store the information\n    --  from the file, and return the Id of the resulting entry in the ALI\n    --  table. Switch settings may be modified as described above in the\n@@ -854,5 +855,12 @@ package ALI is\n    --    Ignore_Lines and Read_Lines parameters are ignored (i.e. the\n    --    use of True for Read_XREF is equivalent to specifying an\n    --    argument of \"UWDX\" for Read_Lines.\n+   --\n+   --    Ignore_Errors is normally False. If it is set True, then Scan_ALI\n+   --    will do its best to scan through a file and extract all information\n+   --    it can, even if there are errors. In this case Err is only set if\n+   --    Scan_ALI was completely unable to process the file (e.g. it did not\n+   --    look like an ALI file at all). Ignore_Errors is intended to improve\n+   --    the downward compatibility of new compilers with old tools.\n \n end ALI;"}, {"sha": "e2a5c7ae6ebf33acd18779fe44ffe1964c61a91d", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 42, "deletions": 29, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -424,7 +424,7 @@ package body Bcheck is\n          if not Restriction_File_Output then\n             Restriction_File_Output := True;\n \n-            --  Find the ali file specifying the restriction\n+            --  Find an ali file specifying the restriction\n \n             for A in ALIs.First .. ALIs.Last loop\n                if ALIs.Table (A).Restrictions.Set (R)\n@@ -463,6 +463,7 @@ package body Bcheck is\n                      Consistency_Error_Msg (M2 (1 .. P - 1));\n                      Consistency_Error_Msg\n                        (\"but the following files violate this restriction:\");\n+                     return;\n                   end;\n                end if;\n             end loop;\n@@ -491,38 +492,50 @@ package body Bcheck is\n             --  Loop through files looking for violators\n \n             for A2 in ALIs.First .. ALIs.Last loop\n-               if ALIs.Table (A2).Restrictions.Violated (R) then\n-\n-                  --  We exclude predefined files from the list of\n-                  --  violators. This should be rethought. It is not\n-                  --  clear that this is the right thing to do, that\n-                  --  is particularly the case for restricted runtimes.\n-\n-                  if not Is_Internal_File_Name (ALIs.Table (A2).Sfile) then\n-                     Print_Restriction_File (R);\n-\n-                     Error_Msg_Name_1 := ALIs.Table (A2).Sfile;\n-\n-                     if R in All_Boolean_Restrictions then\n-                        Consistency_Error_Msg (\"  %\");\n+               declare\n+                  T : ALIs_Record renames ALIs.Table (A2);\n \n-                     elsif R in Checked_Add_Parameter_Restrictions\n-                       or else ALIs.Table (A2).Restrictions.Count (R) >\n-                       Cumulative_Restrictions.Value (R)\n-                     then\n-                        Error_Msg_Nat_1 :=\n-                          Int (ALIs.Table (A2).Restrictions.Count (R));\n-\n-                        if ALIs.Table (A2).Restrictions.Unknown (R) then\n-                           Consistency_Error_Msg\n-                             (\"  % (count = at least #)\");\n-                        else\n-                           Consistency_Error_Msg\n-                             (\"  % (count = #)\");\n+               begin\n+                  if T.Restrictions.Violated (R) then\n+\n+                     --  We exclude predefined files from the list of\n+                     --  violators. This should be rethought. It is not\n+                     --  clear that this is the right thing to do, that\n+                     --  is particularly the case for restricted runtimes.\n+\n+                     if not Is_Internal_File_Name (T.Sfile) then\n+\n+                        --  Case of Boolean restriction, just print file name\n+\n+                        if R in All_Boolean_Restrictions then\n+                           Print_Restriction_File (R);\n+                           Error_Msg_Name_1 := T.Sfile;\n+                           Consistency_Error_Msg (\"  %\");\n+\n+                        --  Case of Parameter restriction where violation\n+                        --  count exceeds restriction value, print file\n+                        --  name and count, adding \"at least\" if the\n+                        --  exact count is not known.\n+\n+                        elsif R in Checked_Add_Parameter_Restrictions\n+                          or else T.Restrictions.Count (R) >\n+                          Cumulative_Restrictions.Value (R)\n+                        then\n+                           Print_Restriction_File (R);\n+                           Error_Msg_Name_1 := T.Sfile;\n+                           Error_Msg_Nat_1 := Int (T.Restrictions.Count (R));\n+\n+                           if T.Restrictions.Unknown (R) then\n+                              Consistency_Error_Msg\n+                                (\"  % (count = at least #)\");\n+                           else\n+                              Consistency_Error_Msg\n+                                (\"  % (count = #)\");\n+                           end if;\n                         end if;\n                      end if;\n                   end if;\n-               end if;\n+               end;\n             end loop;\n          end if;\n       end loop;"}, {"sha": "85f58ce64e31b1e84b1c43e015588cc1b1346e04", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -142,7 +142,7 @@ package body Debug is\n    --  df\n    --  dg\n    --  dh\n-   --  di\n+   --  di  Ignore_Errors mode for reading ali files\n    --  dj\n    --  dk\n    --  dl\n@@ -474,7 +474,6 @@ package body Debug is\n    --       fully compiled and analyzed, they just get eliminated from the\n    --       code generation step.\n \n-\n    --  d1   Error messages have node numbers where possible. Normally error\n    --       messages have only source locations. This option is useful when\n    --       debugging errors caused by expanded code, where the source location\n@@ -528,6 +527,12 @@ package body Debug is\n    --      dependencies) except that internal units are included in the\n    --      listing.\n \n+   --  di  Normally gnatbind calls Read_Ali with Ignore_Errors set to\n+   --      False, since the binder really needs correct version ALI\n+   --      files to do its job. This debug flag causes Ignore_Errors\n+   --      mode to be set for the binder (and is particularly useful\n+   --      for testing ignore errors mode).\n+\n    --  dn  List details of manipulation of Num_Pred values during execution of\n    --      the algorithm used to determine a correct order of elaboration. This\n    --      is useful in diagnosing any problems in its behavior."}, {"sha": "4ae1d6b70ac819862398d4511a828fc50ff6ceee", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -164,10 +164,9 @@ package body Errout is\n    --  example, the entity A.B.C.D will output B.C. if N = 2.\n \n    function Special_Msg_Delete\n-     (Msg  : String;\n-      N    : Node_Or_Entity_Id;\n-      E    : Node_Or_Entity_Id)\n-      return Boolean;\n+     (Msg : String;\n+      N   : Node_Or_Entity_Id;\n+      E   : Node_Or_Entity_Id) return Boolean;\n    --  This function is called from Error_Msg_NEL, passing the message Msg,\n    --  node N on which the error is to be posted, and the entity or node E\n    --  to be used for an & insertion in the message if any. The job of this\n@@ -1795,6 +1794,8 @@ package body Errout is\n    ----------------------------\n \n    procedure Set_Msg_Insertion_Node is\n+      K : Node_Kind;\n+\n    begin\n       Suppress_Message :=\n         Error_Msg_Node_1 = Error\n@@ -1815,11 +1816,25 @@ package body Errout is\n       else\n          Set_Msg_Blank_Conditional;\n \n-         --  Skip quotes for operator case\n+         --  Output name\n+\n+         K := Nkind (Error_Msg_Node_1);\n+\n+         --  If we have operator case, skip quotes since name of operator\n+         --  itself will supply the required quotations. An operator can be\n+         --  an applied use in an expression or an explicit operator symbol,\n+         --  or an identifier whose name indicates it is an operator.\n \n-         if Nkind (Error_Msg_Node_1) in N_Op then\n+         if K in N_Op\n+           or else K = N_Operator_Symbol\n+           or else K = N_Defining_Operator_Symbol\n+           or else ((K = N_Identifier or else K = N_Defining_Identifier)\n+                       and then Is_Operator_Name (Chars (Error_Msg_Node_1)))\n+         then\n             Set_Msg_Node (Error_Msg_Node_1);\n \n+         --  Normal case, not an operator, surround with quotes\n+\n          else\n             Set_Msg_Quote;\n             Set_Qualification (Error_Msg_Qual_Level, Error_Msg_Node_1);\n@@ -2302,10 +2317,9 @@ package body Errout is\n    ------------------------\n \n    function Special_Msg_Delete\n-     (Msg  : String;\n-      N    : Node_Or_Entity_Id;\n-      E    : Node_Or_Entity_Id)\n-      return Boolean\n+     (Msg : String;\n+      N   : Node_Or_Entity_Id;\n+      E   : Node_Or_Entity_Id) return Boolean\n    is\n    begin\n       --  Never delete messages in -gnatdO mode"}, {"sha": "92295eb810265a6155d66ae73b285cc39ce1f9c8", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 27, "deletions": 50, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -90,8 +90,7 @@ package body Exp_Ch3 is\n \n    function Build_Discriminant_Formals\n      (Rec_Id : Entity_Id;\n-      Use_Dl : Boolean)\n-      return   List_Id;\n+      Use_Dl : Boolean) return List_Id;\n    --  This function uses the discriminants of a type to build a list of\n    --  formal parameters, used in the following function. If the flag Use_Dl\n    --  is set, the list is built using the already defined discriminals\n@@ -246,8 +245,7 @@ package body Exp_Ch3 is\n       Name     : Name_Id;\n       Profile  : List_Id;\n       Ret_Type : Entity_Id := Empty;\n-      For_Body : Boolean   := False)\n-      return     Node_Id;\n+      For_Body : Boolean   := False) return Node_Id;\n    --  This function generates the appropriate expansion for a predefined\n    --  primitive operation specified by its name, parameter profile and\n    --  return type (Empty means this is a procedure). If For_Body is false,\n@@ -259,24 +257,21 @@ package body Exp_Ch3 is\n      (Loc      : Source_Ptr;\n       Tag_Typ  : Entity_Id;\n       Name     : TSS_Name_Type;\n-      For_Body : Boolean := False)\n-      return     Node_Id;\n+      For_Body : Boolean := False) return Node_Id;\n    --  Specialized version of Predef_Spec_Or_Body that apply to read, write,\n    --  input and output attribute whose specs are constructed in Exp_Strm.\n \n    function Predef_Deep_Spec\n      (Loc      : Source_Ptr;\n       Tag_Typ  : Entity_Id;\n       Name     : TSS_Name_Type;\n-      For_Body : Boolean := False)\n-      return     Node_Id;\n+      For_Body : Boolean := False) return Node_Id;\n    --  Specialized version of Predef_Spec_Or_Body that apply to _deep_adjust\n    --  and _deep_finalize\n \n    function Predefined_Primitive_Bodies\n      (Tag_Typ    : Entity_Id;\n-      Renamed_Eq : Node_Id)\n-      return       List_Id;\n+      Renamed_Eq : Node_Id) return List_Id;\n    --  Create the bodies of the predefined primitives that are described in\n    --  Predefined_Primitive_Specs. When not empty, Renamed_Eq must denote\n    --  the defining unit name of the type's predefined equality as returned\n@@ -721,8 +716,7 @@ package body Exp_Ch3 is\n \n       function Build_Case_Statement\n         (Case_Id : Entity_Id;\n-         Variant : Node_Id)\n-         return    Node_Id;\n+         Variant : Node_Id) return Node_Id;\n       --  Build a case statement containing only two alternatives. The\n       --  first alternative corresponds exactly to the discrete choices\n       --  given on the variant with contains the components that we are\n@@ -732,8 +726,7 @@ package body Exp_Ch3 is\n \n       function Build_Dcheck_Function\n         (Case_Id : Entity_Id;\n-         Variant : Node_Id)\n-         return    Entity_Id;\n+         Variant : Node_Id) return Entity_Id;\n       --  Build the discriminant checking function for a given variant\n \n       procedure Build_Dcheck_Functions (Variant_Part_Node : Node_Id);\n@@ -746,8 +739,7 @@ package body Exp_Ch3 is\n \n       function Build_Case_Statement\n         (Case_Id : Entity_Id;\n-         Variant : Node_Id)\n-         return    Node_Id\n+         Variant : Node_Id) return Node_Id\n       is\n          Alt_List       : constant List_Id := New_List;\n          Actuals_List   : List_Id;\n@@ -834,8 +826,7 @@ package body Exp_Ch3 is\n \n       function Build_Dcheck_Function\n         (Case_Id : Entity_Id;\n-         Variant : Node_Id)\n-         return    Entity_Id\n+         Variant : Node_Id) return Entity_Id\n       is\n          Body_Node           : Node_Id;\n          Func_Id             : Entity_Id;\n@@ -972,8 +963,7 @@ package body Exp_Ch3 is\n \n    function Build_Discriminant_Formals\n      (Rec_Id : Entity_Id;\n-      Use_Dl : Boolean)\n-      return   List_Id\n+      Use_Dl : Boolean) return List_Id\n    is\n       Loc             : Source_Ptr       := Sloc (Rec_Id);\n       Parameter_List  : constant List_Id := New_List;\n@@ -1046,8 +1036,7 @@ package body Exp_Ch3 is\n       In_Init_Proc      : Boolean := False;\n       Enclos_Type       : Entity_Id := Empty;\n       Discr_Map         : Elist_Id := New_Elmt_List;\n-      With_Default_Init : Boolean := False)\n-      return              List_Id\n+      With_Default_Init : Boolean := False) return List_Id\n    is\n       First_Arg      : Node_Id;\n       Args           : List_Id;\n@@ -1374,9 +1363,7 @@ package body Exp_Ch3 is\n       --  components of the given component list. This may involve building\n       --  case statements for the variant parts.\n \n-      function Build_Init_Call_Thru\n-        (Parameters : List_Id)\n-         return       List_Id;\n+      function Build_Init_Call_Thru (Parameters : List_Id) return List_Id;\n       --  Given a non-tagged type-derivation that declares discriminants,\n       --  such as\n       --\n@@ -1404,8 +1391,7 @@ package body Exp_Ch3 is\n       --  to which the check actions are appended.\n \n       function Component_Needs_Simple_Initialization\n-        (T    : Entity_Id)\n-         return Boolean;\n+        (T : Entity_Id) return Boolean;\n       --  Determines if a component needs simple initialization, given its\n       --  type T. This is the same as Needs_Simple_Initialization except\n       --  for the following differences. The types Tag and Vtable_Ptr,\n@@ -1597,18 +1583,15 @@ package body Exp_Ch3 is\n       -- Build_Init_Call_Thru --\n       --------------------------\n \n-      function Build_Init_Call_Thru\n-        (Parameters     : List_Id)\n-         return           List_Id\n-      is\n-         Parent_Proc    : constant Entity_Id :=\n-                            Base_Init_Proc (Etype (Rec_Type));\n+      function Build_Init_Call_Thru (Parameters : List_Id) return List_Id is\n+         Parent_Proc : constant Entity_Id :=\n+                         Base_Init_Proc (Etype (Rec_Type));\n \n-         Parent_Type    : constant Entity_Id :=\n-                            Etype (First_Formal (Parent_Proc));\n+         Parent_Type : constant Entity_Id :=\n+                         Etype (First_Formal (Parent_Proc));\n \n-         Uparent_Type   : constant Entity_Id :=\n-                            Underlying_Type (Parent_Type);\n+         Uparent_Type : constant Entity_Id :=\n+                          Underlying_Type (Parent_Type);\n \n          First_Discr_Param : Node_Id;\n \n@@ -2184,8 +2167,7 @@ package body Exp_Ch3 is\n       -------------------------------------------\n \n       function Component_Needs_Simple_Initialization\n-        (T    : Entity_Id)\n-         return Boolean\n+        (T : Entity_Id) return Boolean\n       is\n       begin\n          return\n@@ -4755,9 +4737,8 @@ package body Exp_Ch3 is\n    -------------------------\n \n    function Get_Simple_Init_Val\n-     (T    : Entity_Id;\n-      Loc  : Source_Ptr)\n-      return Node_Id\n+     (T   : Entity_Id;\n+      Loc : Source_Ptr) return Node_Id\n    is\n       Val    : Node_Id;\n       Typ    : Node_Id;\n@@ -5478,8 +5459,7 @@ package body Exp_Ch3 is\n      (Loc      : Source_Ptr;\n       Tag_Typ  : Entity_Id;\n       Name     : TSS_Name_Type;\n-      For_Body : Boolean := False)\n-      return     Node_Id\n+      For_Body : Boolean := False) return Node_Id\n    is\n       Prof   : List_Id;\n       Type_B : Entity_Id;\n@@ -5533,8 +5513,7 @@ package body Exp_Ch3 is\n       Name     : Name_Id;\n       Profile  : List_Id;\n       Ret_Type : Entity_Id := Empty;\n-      For_Body : Boolean := False)\n-      return     Node_Id\n+      For_Body : Boolean := False) return Node_Id\n    is\n       Id   : constant Entity_Id := Make_Defining_Identifier (Loc, Name);\n       Spec : Node_Id;\n@@ -5604,8 +5583,7 @@ package body Exp_Ch3 is\n      (Loc      : Source_Ptr;\n       Tag_Typ  : Entity_Id;\n       Name     : TSS_Name_Type;\n-      For_Body : Boolean := False)\n-      return     Node_Id\n+      For_Body : Boolean := False) return Node_Id\n    is\n       Ret_Type : Entity_Id;\n \n@@ -5630,8 +5608,7 @@ package body Exp_Ch3 is\n \n    function Predefined_Primitive_Bodies\n      (Tag_Typ    : Entity_Id;\n-      Renamed_Eq : Node_Id)\n-      return       List_Id\n+      Renamed_Eq : Node_Id) return List_Id\n    is\n       Loc       : constant Source_Ptr := Sloc (Tag_Typ);\n       Res       : constant List_Id    := New_List;"}, {"sha": "b1764174e45470d58f88d10bc271415e2a4fff4d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 49, "deletions": 54, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -98,8 +98,7 @@ package body Exp_Ch4 is\n       A_Typ  : Entity_Id;\n       Lhs    : Node_Id;\n       Rhs    : Node_Id;\n-      Bodies : List_Id)\n-      return   Node_Id;\n+      Bodies : List_Id) return Node_Id;\n    --  Expand an array equality into a call to a function implementing this\n    --  equality, and a call to it. Loc is the location for the generated\n    --  nodes. Typ is the type of the array, and Lhs, Rhs are the array\n@@ -119,8 +118,7 @@ package body Exp_Ch4 is\n       Typ    : Entity_Id;\n       Lhs    : Node_Id;\n       Rhs    : Node_Id;\n-      Bodies : List_Id)\n-      return   Node_Id;\n+      Bodies : List_Id) return Node_Id;\n    --  Local recursive function used to expand equality for nested\n    --  composite types. Used by Expand_Record/Array_Equality, Bodies\n    --  is a list on which to attach bodies of local functions that are\n@@ -150,8 +148,7 @@ package body Exp_Ch4 is\n    function Get_Allocator_Final_List\n      (N    : Node_Id;\n       T    : Entity_Id;\n-      PtrT : Entity_Id)\n-      return Entity_Id;\n+      PtrT : Entity_Id) return Entity_Id;\n    --  If the designated type is controlled, build final_list expression\n    --  for created object. If context is an access parameter, create a\n    --  local access type to have a usable finalization list.\n@@ -161,19 +158,17 @@ package body Exp_Ch4 is\n    --  from Checked_Pool, expands a call to the primitive 'dereference'.\n \n    function Make_Array_Comparison_Op\n-     (Typ   : Entity_Id;\n-      Nod   : Node_Id)\n-      return  Node_Id;\n+     (Typ : Entity_Id;\n+      Nod : Node_Id) return Node_Id;\n    --  Comparisons between arrays are expanded in line. This function\n    --  produces the body of the implementation of (a > b), where a and b\n    --  are one-dimensional arrays of some discrete type. The original\n    --  node is then expanded into the appropriate call to this function.\n    --  Nod provides the Sloc value for the generated code.\n \n    function Make_Boolean_Array_Op\n-     (Typ  : Entity_Id;\n-      N    : Node_Id)\n-      return Node_Id;\n+     (Typ : Entity_Id;\n+      N   : Node_Id) return Node_Id;\n    --  Boolean operations on boolean arrays are expanded in line. This\n    --  function produce the body for the node N, which is (a and b),\n    --  (a or b), or (a xor b). It is used only the normal case and not\n@@ -193,10 +188,9 @@ package body Exp_Ch4 is\n    --  Deals with a second operand being (or not) a class-wide type.\n \n    function Safe_In_Place_Array_Op\n-     (Lhs  : Node_Id;\n-      Op1  : Node_Id;\n-      Op2  : Node_Id)\n-      return Boolean;\n+     (Lhs : Node_Id;\n+      Op1 : Node_Id;\n+      Op2 : Node_Id) return Boolean;\n    --  In the context of an assignment, where the right-hand side is a\n    --  boolean operation on arrays, check whether operation can be performed\n    --  in place.\n@@ -913,8 +907,7 @@ package body Exp_Ch4 is\n       A_Typ  : Entity_Id;\n       Lhs    : Node_Id;\n       Rhs    : Node_Id;\n-      Bodies : List_Id)\n-      return   Node_Id\n+      Bodies : List_Id) return Node_Id\n    is\n       Loc         : constant Source_Ptr := Sloc (Nod);\n       Decls       : constant List_Id    := New_List;\n@@ -932,8 +925,7 @@ package body Exp_Ch4 is\n       function Arr_Attr\n         (Arr : Entity_Id;\n          Nam : Name_Id;\n-         Num : Int)\n-         return Node_Id;\n+         Num : Int) return Node_Id;\n       --  This builds the attribute reference Arr'Nam (Expr).\n \n       function Component_Equality (Typ : Entity_Id) return Node_Id;\n@@ -942,8 +934,7 @@ package body Exp_Ch4 is\n \n       function Handle_One_Dimension\n         (N     : Int;\n-         Index : Node_Id)\n-         return  Node_Id;\n+         Index : Node_Id) return Node_Id;\n       --  This procedure returns a declare block:\n       --\n       --    declare\n@@ -990,8 +981,7 @@ package body Exp_Ch4 is\n       function Arr_Attr\n         (Arr : Entity_Id;\n          Nam : Name_Id;\n-         Num : Int)\n-         return Node_Id\n+         Num : Int) return Node_Id\n       is\n       begin\n          return\n@@ -1039,8 +1029,7 @@ package body Exp_Ch4 is\n \n       function Handle_One_Dimension\n         (N     : Int;\n-         Index : Node_Id)\n-         return  Node_Id\n+         Index : Node_Id) return Node_Id\n       is\n          An : constant Entity_Id := Make_Defining_Identifier (Loc,\n                                       Chars => New_Internal_Name ('A'));\n@@ -1337,8 +1326,7 @@ package body Exp_Ch4 is\n       Typ    : Entity_Id;\n       Lhs    : Node_Id;\n       Rhs    : Node_Id;\n-      Bodies : List_Id)\n-      return   Node_Id\n+      Bodies : List_Id) return Node_Id\n    is\n       Loc       : constant Source_Ptr := Sloc (Nod);\n       Full_Type : Entity_Id;\n@@ -2841,21 +2829,19 @@ package body Exp_Ch4 is\n \n                Check_Subscripts : declare\n                   function Construct_Attribute_Reference\n-                    (E    : Node_Id;\n-                     Nam  : Name_Id;\n-                     Dim  : Nat)\n-                     return Node_Id;\n+                    (E   : Node_Id;\n+                     Nam : Name_Id;\n+                     Dim : Nat) return Node_Id;\n                   --  Build attribute reference E'Nam(Dim)\n \n                   -----------------------------------\n                   -- Construct_Attribute_Reference --\n                   -----------------------------------\n \n                   function Construct_Attribute_Reference\n-                    (E    : Node_Id;\n-                     Nam  : Name_Id;\n-                     Dim  : Nat)\n-                     return Node_Id\n+                    (E   : Node_Id;\n+                     Nam : Name_Id;\n+                     Dim : Nat) return Node_Id\n                   is\n                   begin\n                      return\n@@ -3710,13 +3696,23 @@ package body Exp_Ch4 is\n               and then Is_Derived_Type (A_Typ)\n               and then No (Full_View (A_Typ))\n             then\n+               --  Search for equality operation, checking that the\n+               --  operands have the same type. Note that we must find\n+               --  a matching entry, or something is very wrong!\n+\n                Prim := First_Elmt (Collect_Primitive_Operations (A_Typ));\n \n-               while Chars (Node (Prim)) /= Name_Op_Eq loop\n+               while Present (Prim) loop\n+                  exit when Chars (Node (Prim)) = Name_Op_Eq\n+                    and then Etype (First_Formal (Node (Prim))) =\n+                             Etype (Next_Formal (First_Formal (Node (Prim))))\n+                    and then\n+                      Base_Type (Etype (Node (Prim))) = Standard_Boolean;\n+\n                   Next_Elmt (Prim);\n-                  pragma Assert (Present (Prim));\n                end loop;\n \n+               pragma Assert (Present (Prim));\n                Op_Name := Node (Prim);\n \n             --  Find the type's predefined equality or an overriding\n@@ -3741,9 +3737,9 @@ package body Exp_Ch4 is\n                       Base_Type (Etype (Node (Prim))) = Standard_Boolean;\n \n                   Next_Elmt (Prim);\n-                  pragma Assert (Present (Prim));\n                end loop;\n \n+               pragma Assert (Present (Prim));\n                Op_Name := Node (Prim);\n             end if;\n \n@@ -6340,8 +6336,7 @@ package body Exp_Ch4 is\n       Typ    : Entity_Id;\n       Lhs    : Node_Id;\n       Rhs    : Node_Id;\n-      Bodies : List_Id)\n-      return   Node_Id\n+      Bodies : List_Id) return Node_Id\n    is\n       Loc : constant Source_Ptr := Sloc (Nod);\n \n@@ -6496,8 +6491,7 @@ package body Exp_Ch4 is\n    function Get_Allocator_Final_List\n      (N    : Node_Id;\n       T    : Entity_Id;\n-      PtrT : Entity_Id)\n-      return Entity_Id\n+      PtrT : Entity_Id) return Entity_Id\n    is\n       Loc : constant Source_Ptr := Sloc (N);\n       Acc : Entity_Id;\n@@ -6540,7 +6534,11 @@ package body Exp_Ch4 is\n       Pool : constant Entity_Id  := Associated_Storage_Pool (Typ);\n \n       function Is_Checked_Storage_Pool (P : Entity_Id) return Boolean;\n-      --  return true if type of P is derived from Checked_Pool;\n+      --  Return true if type of P is derived from Checked_Pool;\n+\n+      -----------------------------\n+      -- Is_Checked_Storage_Pool --\n+      -----------------------------\n \n       function Is_Checked_Storage_Pool (P : Entity_Id) return Boolean is\n          T : Entity_Id;\n@@ -6662,9 +6660,8 @@ package body Exp_Ch4 is\n    --  instantiated function itself.\n \n    function Make_Array_Comparison_Op\n-     (Typ   : Entity_Id;\n-      Nod   : Node_Id)\n-      return  Node_Id\n+     (Typ : Entity_Id;\n+      Nod : Node_Id) return Node_Id\n    is\n       Loc : constant Source_Ptr := Sloc (Nod);\n \n@@ -6897,9 +6894,8 @@ package body Exp_Ch4 is\n    --  Here typ is the boolean array type\n \n    function Make_Boolean_Array_Op\n-     (Typ  : Entity_Id;\n-      N    : Node_Id)\n-      return Node_Id\n+     (Typ : Entity_Id;\n+      N   : Node_Id) return Node_Id\n    is\n       Loc : constant Source_Ptr := Sloc (N);\n \n@@ -7069,10 +7065,9 @@ package body Exp_Ch4 is\n    ----------------------------\n \n    function Safe_In_Place_Array_Op\n-     (Lhs  : Node_Id;\n-      Op1  : Node_Id;\n-      Op2  : Node_Id)\n-      return Boolean\n+     (Lhs : Node_Id;\n+      Op1 : Node_Id;\n+      Op2 : Node_Id) return Boolean\n    is\n       Target : Entity_Id;\n "}, {"sha": "744a0242b19191a1be53cf99505fe3df5197aaf7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -596,6 +596,10 @@ package body Exp_Ch6 is\n                Init :=\n                  Convert_To (Etype (Formal), New_Occurrence_Of (Var, Loc));\n             end if;\n+\n+         elsif Ekind (Formal) = E_In_Parameter then\n+            Init := New_Occurrence_Of (Var, Loc);\n+\n          else\n             Init := Empty;\n          end if;"}, {"sha": "e55f98776d165facb58728fd60b2e12a045cc44d", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -3369,7 +3369,7 @@ package body Exp_Ch9 is\n          Set_Scope (Func, Scope (Prot));\n \n       else\n-         Analyze (Cond);\n+         Analyze_And_Resolve (Cond, Any_Boolean);\n       end if;\n \n       --  The Ravenscar profile restricts barriers to simple variables"}, {"sha": "cb5c69520e8952e5c0c745d99bc5241409057696", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -34,6 +34,7 @@ with Bindusg;\n with Butil;    use Butil;\n with Casing;   use Casing;\n with Csets;\n+with Debug;    use Debug;\n with Fmap;\n with Gnatvsn;  use Gnatvsn;\n with Namet;    use Namet;\n@@ -532,10 +533,11 @@ begin\n \n          begin\n             Id := Scan_ALI\n-                    (F         => Main_Lib_File,\n-                     T         => Text,\n-                     Ignore_ED => Force_RM_Elaboration_Order,\n-                     Err       => False);\n+                    (F             => Main_Lib_File,\n+                     T             => Text,\n+                     Ignore_ED     => Force_RM_Elaboration_Order,\n+                     Err           => False,\n+                     Ignore_Errors => Debug_Flag_I);\n          end;\n \n          Free (Text);\n@@ -576,10 +578,11 @@ begin\n          begin\n             Id :=\n               Scan_ALI\n-                (F         => Std_Lib_File,\n-                 T         => Text,\n-                 Ignore_ED => Force_RM_Elaboration_Order,\n-                 Err       => False);\n+                (F             => Std_Lib_File,\n+                 T             => Text,\n+                 Ignore_ED     => Force_RM_Elaboration_Order,\n+                 Err           => False,\n+                 Ignore_Errors => Debug_Flag_I);\n          end;\n \n          Free (Text);"}, {"sha": "bb65a0f95a6c48ee7bfeba14bbf5b861f4dc3fff", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -1409,9 +1409,17 @@ begin\n \n          T := Read_Library_Info (F, True);\n \n-         --  Read it\n-\n-         A := Scan_ALI (F, T, Ignore_ED => False, Err => False);\n+         --  Read it. Note that we ignore errors, since we only want very\n+         --  limited information from the ali file, and likely a slightly\n+         --  wrong version will be just fine, though in normal operation\n+         --  we don't expect this to happen!\n+\n+         A := Scan_ALI\n+               (F,\n+                T,\n+                Ignore_ED     => False,\n+                Err           => False,\n+                Ignore_Errors => True);\n \n          if A /= No_ALI_Id then\n             for"}, {"sha": "2f5d3155ca3e972c63f8870044ded4f0a4d4ac4b", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -943,7 +943,11 @@ begin\n             begin\n                Discard :=\n                  Scan_ALI\n-                   (Ali_File, Text, Ignore_ED => False, Err => False);\n+                   (Ali_File,\n+                    Text,\n+                    Ignore_ED     => False,\n+                    Err           => False,\n+                    Ignore_Errors => True);\n             end;\n \n             Free (Text);"}, {"sha": "212c465c733857c8349074003640893c900b61b2", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,8 +55,7 @@ package body Lib.Load is\n \n    function Spec_Is_Irrelevant\n      (Spec_Unit : Unit_Number_Type;\n-      Body_Unit : Unit_Number_Type)\n-      return      Boolean;\n+      Body_Unit : Unit_Number_Type) return Boolean;\n    --  The Spec_Unit and Body_Unit parameters are the unit numbers of the\n    --  spec file that corresponds to the main unit which is a body. This\n    --  function determines if the spec file is irrelevant and will be\n@@ -73,8 +72,7 @@ package body Lib.Load is\n \n    function Create_Dummy_Package_Unit\n      (With_Node : Node_Id;\n-      Spec_Name : Unit_Name_Type)\n-      return      Unit_Number_Type\n+      Spec_Name : Unit_Name_Type) return Unit_Number_Type\n    is\n       Unum         : Unit_Number_Type;\n       Cunit_Entity : Entity_Id;\n@@ -100,9 +98,6 @@ package body Lib.Load is\n       --  Child package\n \n       else\n-\n-         --  Nkind (Name (With_Node)) = N_Expanded_Name\n-\n          Cunit_Entity :=\n            Make_Defining_Identifier (No_Location,\n              Chars => Chars (Selector_Name (Name (With_Node))));\n@@ -117,7 +112,6 @@ package body Lib.Load is\n            Make_Designator (No_Location,\n              Name => New_Copy_Tree (Prefix (Name (With_Node))),\n              Identifier => New_Occurrence_Of (Cunit_Entity, No_Location));\n-\n       end if;\n \n       Set_Scope (Cunit_Entity, Standard_Standard);\n@@ -213,7 +207,6 @@ package body Lib.Load is\n       Units.Table (Main_Unit).Unit_File_Name := Fname;\n \n       if Fname /= No_File then\n-\n          Main_Source_File := Load_Source_File (Fname);\n          Current_Error_Source_File := Main_Source_File;\n \n@@ -249,8 +242,7 @@ package body Lib.Load is\n       Error_Node : Node_Id;\n       Subunit    : Boolean;\n       Corr_Body  : Unit_Number_Type := No_Unit;\n-      Renamings  : Boolean          := False)\n-      return       Unit_Number_Type\n+      Renamings  : Boolean          := False) return Unit_Number_Type\n    is\n       Calling_Unit : Unit_Number_Type;\n       Uname_Actual : Unit_Name_Type;\n@@ -340,14 +332,14 @@ package body Lib.Load is\n                      Par := Prefix (Par);\n                   end loop;\n \n-                  if Nkind (Par) = N_Selected_Component then\n-                     --  some intermediate parent is a renaming.\n+                  --  Case of some intermediate parent is a renaming\n \n+                  if Nkind (Par) = N_Selected_Component then\n                      Set_Entity (Selector_Name (Par), Cunit_Entity (Unump));\n \n-                  else\n-                     --  the ultimate parent is a renaming.\n+                  --  Case where the ultimate parent is a renaming\n \n+                  else\n                      Set_Entity (Par, Cunit_Entity (Unump));\n                   end if;\n                end;\n@@ -705,11 +697,11 @@ package body Lib.Load is\n \n    function Spec_Is_Irrelevant\n      (Spec_Unit : Unit_Number_Type;\n-      Body_Unit : Unit_Number_Type)\n-      return      Boolean\n+      Body_Unit : Unit_Number_Type) return Boolean\n    is\n       Sunit : constant Node_Id := Cunit (Spec_Unit);\n       Bunit : constant Node_Id := Cunit (Body_Unit);\n+\n    begin\n       --  The spec is irrelevant if the body is a subprogram body, and the\n       --  spec is other than a subprogram spec or generic subprogram spec."}, {"sha": "662fe8f2e727272697d00a1e8b8050d354b0148f", "filename": "gcc/ada/lib-load.ads", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-load.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-load.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.ads?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -109,8 +109,7 @@ package Lib.Load is\n       Error_Node : Node_Id;\n       Subunit    : Boolean;\n       Corr_Body  : Unit_Number_Type := No_Unit;\n-      Renamings  : Boolean          := False)\n-      return       Unit_Number_Type;\n+      Renamings  : Boolean          := False) return Unit_Number_Type;\n    --  This function loads and parses the unit specified by Load_Name (or\n    --  returns the unit number for the previously constructed units table\n    --  entry if this is not the first call for this unit). Required indicates\n@@ -151,8 +150,7 @@ package Lib.Load is\n \n    function Create_Dummy_Package_Unit\n      (With_Node : Node_Id;\n-      Spec_Name : Unit_Name_Type)\n-      return      Unit_Number_Type;\n+      Spec_Name : Unit_Name_Type) return Unit_Number_Type;\n    --  With_Node is the Node_Id of a with statement for which the file could\n    --  not be found, and Spec_Name is the corresponding unit name. This call\n    --  creates a dummy package unit so that compilation can continue without"}, {"sha": "4d0c29778d71dcc853e3547ff62ba3bb75da6e68", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -923,11 +923,13 @@ package body Lib.Writ is\n          end if;\n       end loop;\n \n-      --  Output first restrictions line\n+      --  Output restrictions line\n \n       Write_Info_Initiate ('R');\n       Write_Info_Char (' ');\n \n+      --  First the information for the boolean restrictions\n+\n       for R in All_Boolean_Restrictions loop\n          if Main_Restrictions.Set (R) then\n             Write_Info_Char ('r');\n@@ -938,13 +940,12 @@ package body Lib.Writ is\n          end if;\n       end loop;\n \n-      Write_Info_EOL;\n-\n-      --  Output second restrictions line\n+      --  A separating space\n \n-      Write_Info_Initiate ('R');\n       Write_Info_Char (' ');\n \n+      --  And now the information for the parameter restrictions\n+\n       for RP in All_Parameter_Restrictions loop\n          if Main_Restrictions.Set (RP) then\n             Write_Info_Char ('r');"}, {"sha": "e21112cf6b0b0ab04cf484957af6d50c0c1cf479", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -32,10 +32,6 @@ package Lib.Writ is\n    -- Format of Library Information --\n    -----------------------------------\n \n-   --  Note: the contents of the ali file are summarized in the GNAT\n-   --  user's guide, so if any non-trivial changes are made to this\n-   --  section, they should be reflected in the user's guide.\n-\n    --  This section  describes the format of the library information that is\n    --  associated with object files. The exact method of this association is\n    --  potentially implementation dependent and is described and implemented\n@@ -50,6 +46,48 @@ package Lib.Writ is\n \n    --    Key_Character parameter parameter ...\n \n+   --  The following sections describe the format of these lines in detail\n+\n+   --------------------------------------\n+   -- Making Changes to the ALI Format --\n+   --------------------------------------\n+\n+   --  A number of tools use ali.adb to parse ali files. This means\n+   --  that changes to this format can cause old versions of these tools\n+   --  to be incompatible with new versions of the compiler. Any changes\n+   --  to ali file formats must be carefully evaluated to understand any\n+   --  such possible conflicts, and in particular, it is very undesirable\n+   --  to create conflicts between older versions of GPS and newer versions\n+   --  of the compiler.\n+\n+   --  If the following guidelines are respected, downward compatibility\n+   --  problems (old tools reading new ali files) should be minimized:\n+\n+   --    The basic key character format must be kept.\n+\n+   --    The V line must be the first line, this is checked by ali.adb\n+   --    even in Ignore_Errors mode, and is used to verify that the file\n+   --    at hand is indeed likely intended to be an ali file.\n+\n+   --    The P line must be present, though may be modified in contents\n+   --    according to remaining guidelines. Again, ali.adb assumes the\n+   --    P line is present even in Ignore_Errors mode.\n+\n+   --    New modifiers can generally be added (in particular adding new\n+   --    two letter modifiers to the P or U lines is always safe)\n+\n+   --    Adding entirely new lines (with a new key letter) to the ali\n+   --    file is always safe, at any point (other than before the V\n+   --    line), since suchy lines will be ignored.\n+\n+   --  Following the guidelines in this section should ensure that this\n+   --  problem is minimized and that old tools will be able to deal\n+   --  successfully with new ali formats. Note that this does not apply\n+   --  to the compiler itself, which always requires consistency between\n+   --  the ali files and the binder. That is because one of the main\n+   --  functions of the binder is to ensure consistency of the partition,\n+   --  and this can be compromised if the ali files are inconsistent.\n+\n    ------------------\n    -- Header Lines --\n    ------------------\n@@ -72,6 +110,10 @@ package Lib.Writ is\n    --      library info described in this package, or modifications to\n    --      calling sequences, or to the way that data is represented.\n \n+   --    Note: the V line absolutely must be the first line, and no change\n+   --    to the ALI format should change this, since even in Ignore_Errors\n+   --    mode, Scan_ALI insists on finding a V line.\n+\n    --  ---------------------\n    --  -- M  Main Program --\n    --  ---------------------\n@@ -201,21 +243,26 @@ package Lib.Writ is\n    --      possible cases. These values are checked for consistency by the\n    --      binder and then copied to the generated binder output file.\n \n+   --    Note: The P line must be present. Even in Ignore_Errors mode,\n+   --    Scan_ALI insists on finding a P line. So if changes are made to\n+   --    the ALI format, they should not include removing the P line!\n+\n    --  ---------------------\n    --  -- R  Restrictions --\n    --  ---------------------\n \n-   --  Two lines are generated to record the status of restrictions that can\n-   --  be specified by pragma Restrictions. The first of these lines refers\n-   --  to Restriction_Id values:\n+   --  The R line records the status of restrictions generated by pragma\n+   --  Restrictions encountered, as well as information on what the compiler\n+   --  has been able to determine with respect to restrictions violations.\n+   --  The format is:\n \n-   --    R <<restriction-characters>>\n+   --    R <<restriction-characters>> space <<restriction-param-id-entries>>\n \n-   --      This line records information regarding restrictions that do\n-   --      not take parameter values. Here \"restriction-characters is a\n-   --      string of characters, one for each value (in order) defined\n-   --      in Restrict.All_Boolean_Restrictions. There are three possible\n-   --      settings for each restriction:\n+   --      The first parameter is a string of characters that records\n+   --      information regarding restrictions that do not take parameter\n+   --      not take parameter values. It is a string of characters, one\n+   --      character for each value (in order) in All_Boolean_Restrictions.\n+   --      There are three possible settings for each restriction:\n \n    --        r   Restricted. Unit was compiled under control of a pragma\n    --            Restrictions for the corresponding restriction. In\n@@ -236,9 +283,8 @@ package Lib.Writ is\n    --      has \"v\", which is not permitted, since these restrictions\n    --      are partition-wide.\n \n-   --  The second R line refers to parameter restrictions:\n-\n-   --    R <<restriction-parameter-id-entries>>\n+   --  Following a space, the second parameter refers to restriction\n+   --  identifiers for which a parameter is given.\n \n    --      The parameter is a string of entries, one for each value in\n    --      Restrict.All_Parameter_Restrictions. Each entry has two\n@@ -284,9 +330,14 @@ package Lib.Writ is\n    --         vN+ A violation was detected. The compiler cannot determine\n    --             the exact count of violations, but it is at least N.\n \n-   --      There are no spaces in the line, so the entry for the example\n-   --      in the header of this section for Max_Tasks would appear as\n-   --      the string r4v3.\n+   --      There are no spaces within the parameter string, so the entry\n+   --      described above in the header of this section for Max_Tasks would\n+   --      appear as the string r4v3.\n+\n+   --      Note: The restrictions line is required to be present. Even in\n+   --      Ignore_Errors mode, Scan_ALI expects to find an R line and will\n+   --      signal a fatal error if it is missing. This means that future\n+   --      changes to the ALI file format must retain the R line.\n \n    --  ------------------------\n    --  -- I Interrupt States --"}, {"sha": "1b1af12e77d6f4852ed6adf445e901483c94122d", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -905,6 +905,18 @@ package body Namet is\n         and then C /= 'X';\n    end Is_OK_Internal_Letter;\n \n+   ----------------------\n+   -- Is_Operator_Name --\n+   ----------------------\n+\n+   function Is_Operator_Name (Id : Name_Id) return Boolean is\n+      S : Int;\n+   begin\n+      pragma Assert (Id in Name_Entries.First .. Name_Entries.Last);\n+      S := Name_Entries.Table (Id).Name_Chars_Index;\n+      return Name_Chars.Table (S + 1) = 'O';\n+   end Is_Operator_Name;\n+\n    --------------------\n    -- Length_Of_Name --\n    --------------------"}, {"sha": "1858968200b2d48b75b1386b15551d5cc938bb68", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -204,6 +204,10 @@ package Namet is\n    pragma Inline (Get_Name_Table_Info);\n    --  Fetches the Int value associated with the given name\n \n+   function Is_Operator_Name (Id : Name_Id) return Boolean;\n+   --  Returns True if name given is of the form of an operator (that\n+   --  is, it starts with an upper case O).\n+\n    procedure Initialize;\n    --  Initializes the names table, including initializing the first 26\n    --  entries in the table (for the 1-character lower case names a-z)"}, {"sha": "3910a107351c6d63808a8b70312958c671097fd9", "filename": "gcc/ada/par-load.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fpar-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fpar-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-load.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -89,16 +89,18 @@ procedure Load is\n \n    function Same_File_Name_Except_For_Case\n      (Expected_File_Name : File_Name_Type;\n-      Actual_File_Name   : File_Name_Type)\n-      return               Boolean;\n+      Actual_File_Name   : File_Name_Type) return Boolean;\n    --  Given an actual file name and an expected file name (the latter being\n    --  derived from the unit name), determine if they are the same except for\n    --  possibly different casing of letters.\n \n+   ------------------------------------\n+   -- Same_File_Name_Except_For_Case --\n+   ------------------------------------\n+\n    function Same_File_Name_Except_For_Case\n      (Expected_File_Name : File_Name_Type;\n-      Actual_File_Name   : File_Name_Type)\n-      return               Boolean\n+      Actual_File_Name   : File_Name_Type) return Boolean\n    is\n    begin\n       Get_Name_String (Actual_File_Name);"}, {"sha": "24e44c8aec10cc5312f50a5ae9f648cd06aa2d50", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -951,6 +951,7 @@ begin\n            Pragma_Persistent_Object            |\n            Pragma_Preelaborate                 |\n            Pragma_Priority                     |\n+           Pragma_Profile                      |\n            Pragma_Propagate_Exceptions         |\n            Pragma_Psect_Object                 |\n            Pragma_Pure                         |"}, {"sha": "31b2a4aa6a1a1491e959397b97dda4d66f4f30c3", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 53, "deletions": 15, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -756,7 +756,6 @@ package body Sem_Ch8 is\n          else\n             Error_Msg_N (\"expect object name in renaming\", Nam);\n          end if;\n-\n       end if;\n \n       Set_Etype (Id, T2);\n@@ -1179,10 +1178,49 @@ package body Sem_Ch8 is\n             Old_S := Entity (Nam);\n             New_S := Analyze_Subprogram_Specification (Spec);\n \n-            if Ekind (Entity (Nam)) = E_Operator\n-              and then Box_Present (Inst_Node)\n-            then\n-               Old_S := Find_Renamed_Entity (N, Name (N), New_S, Is_Actual);\n+            --  Operator case\n+\n+            if Ekind (Entity (Nam)) = E_Operator then\n+\n+               --  Box present\n+\n+               if Box_Present (Inst_Node) then\n+                  Old_S := Find_Renamed_Entity (N, Name (N), New_S, Is_Actual);\n+\n+               --  If there is an immediately visible homonym of the operator\n+               --  and the declaration has a default, this is worth a warning\n+               --  because the user probably did not intend to get the pre-\n+               --  defined operator, visible in the generic declaration.\n+               --  To find if there is an intended candidate, analyze the\n+               --  renaming again in the current context.\n+\n+               elsif Scope (Old_S) = Standard_Standard\n+                 and then Present (Default_Name (Inst_Node))\n+               then\n+                  declare\n+                     Decl   : constant Node_Id := New_Copy_Tree (N);\n+                     Hidden : Entity_Id;\n+\n+                  begin\n+                     Set_Entity (Name (Decl), Empty);\n+                     Analyze (Name (Decl));\n+                     Hidden :=\n+                       Find_Renamed_Entity (Decl, Name (Decl), New_S, True);\n+\n+                     if Present (Hidden)\n+                       and then In_Open_Scopes (Scope (Hidden))\n+                       and then Is_Immediately_Visible (Hidden)\n+                       and then Comes_From_Source (Hidden)\n+                       and then  Hidden /= Old_S\n+                     then\n+                        Error_Msg_Sloc := Sloc (Hidden);\n+                        Error_Msg_N (\"?default subprogram is resolved \" &\n+                                     \"in the generic declaration \" &\n+                                     \"('R'M 12.6(17))\", N);\n+                        Error_Msg_NE (\"\\?and will not use & #\", N, Hidden);\n+                     end if;\n+                  end;\n+               end if;\n             end if;\n \n          else\n@@ -2163,19 +2201,17 @@ package body Sem_Ch8 is\n       Elmt      : Elmt_Id;\n \n       function Is_Primitive_Operator\n-        (Op   : Entity_Id;\n-         F    : Entity_Id)\n-         return Boolean;\n+        (Op : Entity_Id;\n+         F  : Entity_Id) return Boolean;\n       --  Check whether Op is a primitive operator of a use-visible type\n \n       ---------------------------\n       -- Is_Primitive_Operator --\n       ---------------------------\n \n       function Is_Primitive_Operator\n-        (Op   : Entity_Id;\n-         F    : Entity_Id)\n-         return Boolean\n+        (Op : Entity_Id;\n+         F  : Entity_Id) return Boolean\n       is\n          T : constant Entity_Id := Etype (F);\n \n@@ -4730,10 +4766,8 @@ package body Sem_Ch8 is\n    -- Is_Appropriate_For_Record --\n    -------------------------------\n \n-   function Is_Appropriate_For_Record\n-     (T    : Entity_Id)\n-      return Boolean\n-   is\n+   function Is_Appropriate_For_Record (T : Entity_Id) return Boolean is\n+\n       function Has_Components (T1 : Entity_Id) return Boolean;\n       --  Determine if given type has components (i.e. is either a record\n       --  type or a type that has discriminants).\n@@ -4968,6 +5002,10 @@ package body Sem_Ch8 is\n       --  Scan context clause of compilation unit to find a with_clause\n       --  for System.\n \n+      -----------------\n+      -- Find_System --\n+      -----------------\n+\n       function Find_System (C_Unit : Node_Id) return Entity_Id is\n          With_Clause : Node_Id;\n "}, {"sha": "acf7ae1e7718c224727045452ec8dc1a0bf0a207", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -7724,9 +7724,9 @@ package body Sem_Prag is\n             Set_Is_Preelaborated (Ent);\n          end;\n \n-         ------------------------\n-         --  Persistent_Object --\n-         ------------------------\n+         -----------------------\n+         -- Persistent_Object --\n+         -----------------------\n \n          when Pragma_Persistent_Object => declare\n             Decl : Node_Id;\n@@ -7738,6 +7738,7 @@ package body Sem_Prag is\n             GNAT_Pragma;\n             Check_Arg_Count (1);\n             Check_Arg_Is_Library_Level_Local_Name (Arg1);\n+\n             if not Is_Entity_Name (Expression (Arg1))\n               or else\n                (Ekind (Entity (Expression (Arg1))) /= E_Variable\n@@ -7933,6 +7934,31 @@ package body Sem_Prag is\n             end if;\n          end Priority;\n \n+         -------------\n+         -- Profile --\n+         -------------\n+\n+         --  pragma Profile (profile_IDENTIFIER);\n+\n+         --  profile_IDENTIFIER => Ravenscar\n+\n+         when Pragma_Profile =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+            Check_Valid_Configuration_Pragma;\n+            Check_No_Identifiers;\n+            Set_Ravenscar (N);\n+\n+            declare\n+               Argx : constant Node_Id := Get_Pragma_Arg (Arg1);\n+            begin\n+               if Chars (Argx) = Name_Ravenscar then\n+                  Set_Ravenscar (N);\n+               else\n+                  Error_Pragma_Arg (\"& is not a valid profile\", Argx);\n+               end if;\n+            end;\n+\n          --------------------------\n          -- Propagate_Exceptions --\n          --------------------------\n@@ -9886,6 +9912,7 @@ package body Sem_Prag is\n       Pragma_Persistent_Object            => -1,\n       Pragma_Preelaborate                 => -1,\n       Pragma_Priority                     => -1,\n+      Pragma_Profile                      =>  0,\n       Pragma_Propagate_Exceptions         => -1,\n       Pragma_Psect_Object                 => -1,\n       Pragma_Pure                         =>  0,"}, {"sha": "52daeecc654e0b3c01901e968ccb619b72919e8a", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -173,6 +173,7 @@ package body Snames is\n      \"polling#\" &\n      \"persistent_data#\" &\n      \"persistent_object#\" &\n+     \"profile#\" &\n      \"propagate_exceptions#\" &\n      \"queuing_policy#\" &\n      \"ravenscar#\" &"}, {"sha": "3f4db225bcb39ab254b1ab216b758cc0c9ef2995", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 502, "deletions": 497, "changes": 999, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -280,6 +280,9 @@ package Snames is\n    --  of these implementation dependent pragmas may be found in the\n    --  appropriate section in unit Sem_Prag in file sem-prag.adb.\n \n+   --  The entries marked Ada0Y are technically implementation dependent\n+   --  pragmas, but they correspond to standard proposals for Ada 0Y.\n+\n    --  The entries marked VMS are VMS specific pragmas that are recognized\n    --  only in OpenVMS versions of GNAT. They are ignored in other versions\n    --  with an appropriate warning.\n@@ -316,110 +319,111 @@ package Snames is\n    Name_Polling                        : constant Name_Id := N + 113; -- GNAT\n    Name_Persistent_Data                : constant Name_Id := N + 114; -- GNAT\n    Name_Persistent_Object              : constant Name_Id := N + 115; -- GNAT\n-   Name_Propagate_Exceptions           : constant Name_Id := N + 116; -- GNAT\n-   Name_Queuing_Policy                 : constant Name_Id := N + 117;\n-   Name_Ravenscar                      : constant Name_Id := N + 118;\n-   Name_Restricted_Run_Time            : constant Name_Id := N + 119;\n-   Name_Restrictions                   : constant Name_Id := N + 120;\n-   Name_Restriction_Warnings           : constant Name_Id := N + 121; -- GNAT\n-   Name_Reviewable                     : constant Name_Id := N + 122;\n-   Name_Source_File_Name               : constant Name_Id := N + 123; -- GNAT\n-   Name_Source_File_Name_Project       : constant Name_Id := N + 124; -- GNAT\n-   Name_Style_Checks                   : constant Name_Id := N + 125; -- GNAT\n-   Name_Suppress                       : constant Name_Id := N + 126;\n-   Name_Suppress_Exception_Locations   : constant Name_Id := N + 127; -- GNAT\n-   Name_Task_Dispatching_Policy        : constant Name_Id := N + 128;\n-   Name_Universal_Data                 : constant Name_Id := N + 129; -- AAMP\n-   Name_Unsuppress                     : constant Name_Id := N + 130; -- GNAT\n-   Name_Use_VADS_Size                  : constant Name_Id := N + 131; -- GNAT\n-   Name_Validity_Checks                : constant Name_Id := N + 132; -- GNAT\n-   Name_Warnings                       : constant Name_Id := N + 133; -- GNAT\n-   Last_Configuration_Pragma_Name      : constant Name_Id := N + 133;\n+   Name_Profile                        : constant Name_Id := N + 116; -- Ada0Y\n+   Name_Propagate_Exceptions           : constant Name_Id := N + 117; -- GNAT\n+   Name_Queuing_Policy                 : constant Name_Id := N + 118;\n+   Name_Ravenscar                      : constant Name_Id := N + 119;\n+   Name_Restricted_Run_Time            : constant Name_Id := N + 120;\n+   Name_Restrictions                   : constant Name_Id := N + 121;\n+   Name_Restriction_Warnings           : constant Name_Id := N + 122; -- GNAT\n+   Name_Reviewable                     : constant Name_Id := N + 123;\n+   Name_Source_File_Name               : constant Name_Id := N + 124; -- GNAT\n+   Name_Source_File_Name_Project       : constant Name_Id := N + 125; -- GNAT\n+   Name_Style_Checks                   : constant Name_Id := N + 126; -- GNAT\n+   Name_Suppress                       : constant Name_Id := N + 127;\n+   Name_Suppress_Exception_Locations   : constant Name_Id := N + 128; -- GNAT\n+   Name_Task_Dispatching_Policy        : constant Name_Id := N + 129;\n+   Name_Universal_Data                 : constant Name_Id := N + 130; -- AAMP\n+   Name_Unsuppress                     : constant Name_Id := N + 131; -- GNAT\n+   Name_Use_VADS_Size                  : constant Name_Id := N + 132; -- GNAT\n+   Name_Validity_Checks                : constant Name_Id := N + 133; -- GNAT\n+   Name_Warnings                       : constant Name_Id := N + 134; -- GNAT\n+   Last_Configuration_Pragma_Name      : constant Name_Id := N + 134;\n \n    --  Remaining pragma names\n \n-   Name_Abort_Defer                    : constant Name_Id := N + 134; -- GNAT\n-   Name_All_Calls_Remote               : constant Name_Id := N + 135;\n-   Name_Annotate                       : constant Name_Id := N + 136; -- GNAT\n+   Name_Abort_Defer                    : constant Name_Id := N + 135; -- GNAT\n+   Name_All_Calls_Remote               : constant Name_Id := N + 136;\n+   Name_Annotate                       : constant Name_Id := N + 137; -- GNAT\n \n    --  Note: AST_Entry is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n    --  definition of the type Attribute_Id, and the functions Get_Pragma_Id\n    --  and Check_Pragma_Id correctly recognize and process Name_AST_Entry.\n    --  AST_Entry is a VMS specific pragma.\n \n-   Name_Assert                         : constant Name_Id := N + 137; -- GNAT\n-   Name_Asynchronous                   : constant Name_Id := N + 138;\n-   Name_Atomic                         : constant Name_Id := N + 139;\n-   Name_Atomic_Components              : constant Name_Id := N + 140;\n-   Name_Attach_Handler                 : constant Name_Id := N + 141;\n-   Name_Comment                        : constant Name_Id := N + 142; -- GNAT\n-   Name_Common_Object                  : constant Name_Id := N + 143; -- GNAT\n-   Name_Complex_Representation         : constant Name_Id := N + 144; -- GNAT\n-   Name_Controlled                     : constant Name_Id := N + 145;\n-   Name_Convention                     : constant Name_Id := N + 146;\n-   Name_CPP_Class                      : constant Name_Id := N + 147; -- GNAT\n-   Name_CPP_Constructor                : constant Name_Id := N + 148; -- GNAT\n-   Name_CPP_Virtual                    : constant Name_Id := N + 149; -- GNAT\n-   Name_CPP_Vtable                     : constant Name_Id := N + 150; -- GNAT\n-   Name_Debug                          : constant Name_Id := N + 151; -- GNAT\n-   Name_Elaborate                      : constant Name_Id := N + 152; -- Ada 83\n-   Name_Elaborate_All                  : constant Name_Id := N + 153;\n-   Name_Elaborate_Body                 : constant Name_Id := N + 154;\n-   Name_Export                         : constant Name_Id := N + 155;\n-   Name_Export_Exception               : constant Name_Id := N + 156; -- VMS\n-   Name_Export_Function                : constant Name_Id := N + 157; -- GNAT\n-   Name_Export_Object                  : constant Name_Id := N + 158; -- GNAT\n-   Name_Export_Procedure               : constant Name_Id := N + 159; -- GNAT\n-   Name_Export_Value                   : constant Name_Id := N + 160; -- GNAT\n-   Name_Export_Valued_Procedure        : constant Name_Id := N + 161; -- GNAT\n-   Name_External                       : constant Name_Id := N + 162; -- GNAT\n-   Name_Finalize_Storage_Only          : constant Name_Id := N + 163; -- GNAT\n-   Name_Ident                          : constant Name_Id := N + 164; -- VMS\n-   Name_Import                         : constant Name_Id := N + 165;\n-   Name_Import_Exception               : constant Name_Id := N + 166; -- VMS\n-   Name_Import_Function                : constant Name_Id := N + 167; -- GNAT\n-   Name_Import_Object                  : constant Name_Id := N + 168; -- GNAT\n-   Name_Import_Procedure               : constant Name_Id := N + 169; -- GNAT\n-   Name_Import_Valued_Procedure        : constant Name_Id := N + 170; -- GNAT\n-   Name_Inline                         : constant Name_Id := N + 171;\n-   Name_Inline_Always                  : constant Name_Id := N + 172; -- GNAT\n-   Name_Inline_Generic                 : constant Name_Id := N + 173; -- GNAT\n-   Name_Inspection_Point               : constant Name_Id := N + 174;\n-   Name_Interface                      : constant Name_Id := N + 175; -- Ada 83\n-   Name_Interface_Name                 : constant Name_Id := N + 176; -- GNAT\n-   Name_Interrupt_Handler              : constant Name_Id := N + 177;\n-   Name_Interrupt_Priority             : constant Name_Id := N + 178;\n-   Name_Java_Constructor               : constant Name_Id := N + 179; -- GNAT\n-   Name_Java_Interface                 : constant Name_Id := N + 180; -- GNAT\n-   Name_Keep_Names                     : constant Name_Id := N + 181; -- GNAT\n-   Name_Link_With                      : constant Name_Id := N + 182; -- GNAT\n-   Name_Linker_Alias                   : constant Name_Id := N + 183; -- GNAT\n-   Name_Linker_Options                 : constant Name_Id := N + 184;\n-   Name_Linker_Section                 : constant Name_Id := N + 185; -- GNAT\n-   Name_List                           : constant Name_Id := N + 186;\n-   Name_Machine_Attribute              : constant Name_Id := N + 187; -- GNAT\n-   Name_Main                           : constant Name_Id := N + 188; -- GNAT\n-   Name_Main_Storage                   : constant Name_Id := N + 189; -- GNAT\n-   Name_Memory_Size                    : constant Name_Id := N + 190; -- Ada 83\n-   Name_No_Return                      : constant Name_Id := N + 191; -- GNAT\n-   Name_Obsolescent                    : constant Name_Id := N + 192; -- GNAT\n-   Name_Optimize                       : constant Name_Id := N + 193;\n-   Name_Optional_Overriding            : constant Name_Id := N + 194;\n-   Name_Overriding                     : constant Name_Id := N + 195;\n-   Name_Pack                           : constant Name_Id := N + 196;\n-   Name_Page                           : constant Name_Id := N + 197;\n-   Name_Passive                        : constant Name_Id := N + 198; -- GNAT\n-   Name_Preelaborate                   : constant Name_Id := N + 199;\n-   Name_Priority                       : constant Name_Id := N + 200;\n-   Name_Psect_Object                   : constant Name_Id := N + 201; -- VMS\n-   Name_Pure                           : constant Name_Id := N + 202;\n-   Name_Pure_Function                  : constant Name_Id := N + 203; -- GNAT\n-   Name_Remote_Call_Interface          : constant Name_Id := N + 204;\n-   Name_Remote_Types                   : constant Name_Id := N + 205;\n-   Name_Share_Generic                  : constant Name_Id := N + 206; -- GNAT\n-   Name_Shared                         : constant Name_Id := N + 207; -- Ada 83\n-   Name_Shared_Passive                 : constant Name_Id := N + 208;\n+   Name_Assert                         : constant Name_Id := N + 138; -- GNAT\n+   Name_Asynchronous                   : constant Name_Id := N + 139;\n+   Name_Atomic                         : constant Name_Id := N + 140;\n+   Name_Atomic_Components              : constant Name_Id := N + 141;\n+   Name_Attach_Handler                 : constant Name_Id := N + 142;\n+   Name_Comment                        : constant Name_Id := N + 143; -- GNAT\n+   Name_Common_Object                  : constant Name_Id := N + 144; -- GNAT\n+   Name_Complex_Representation         : constant Name_Id := N + 145; -- GNAT\n+   Name_Controlled                     : constant Name_Id := N + 146;\n+   Name_Convention                     : constant Name_Id := N + 147;\n+   Name_CPP_Class                      : constant Name_Id := N + 148; -- GNAT\n+   Name_CPP_Constructor                : constant Name_Id := N + 149; -- GNAT\n+   Name_CPP_Virtual                    : constant Name_Id := N + 150; -- GNAT\n+   Name_CPP_Vtable                     : constant Name_Id := N + 151; -- GNAT\n+   Name_Debug                          : constant Name_Id := N + 152; -- GNAT\n+   Name_Elaborate                      : constant Name_Id := N + 153; -- Ada 83\n+   Name_Elaborate_All                  : constant Name_Id := N + 154;\n+   Name_Elaborate_Body                 : constant Name_Id := N + 155;\n+   Name_Export                         : constant Name_Id := N + 156;\n+   Name_Export_Exception               : constant Name_Id := N + 157; -- VMS\n+   Name_Export_Function                : constant Name_Id := N + 158; -- GNAT\n+   Name_Export_Object                  : constant Name_Id := N + 159; -- GNAT\n+   Name_Export_Procedure               : constant Name_Id := N + 160; -- GNAT\n+   Name_Export_Value                   : constant Name_Id := N + 161; -- GNAT\n+   Name_Export_Valued_Procedure        : constant Name_Id := N + 162; -- GNAT\n+   Name_External                       : constant Name_Id := N + 163; -- GNAT\n+   Name_Finalize_Storage_Only          : constant Name_Id := N + 164; -- GNAT\n+   Name_Ident                          : constant Name_Id := N + 165; -- VMS\n+   Name_Import                         : constant Name_Id := N + 166;\n+   Name_Import_Exception               : constant Name_Id := N + 167; -- VMS\n+   Name_Import_Function                : constant Name_Id := N + 168; -- GNAT\n+   Name_Import_Object                  : constant Name_Id := N + 169; -- GNAT\n+   Name_Import_Procedure               : constant Name_Id := N + 170; -- GNAT\n+   Name_Import_Valued_Procedure        : constant Name_Id := N + 171; -- GNAT\n+   Name_Inline                         : constant Name_Id := N + 172;\n+   Name_Inline_Always                  : constant Name_Id := N + 173; -- GNAT\n+   Name_Inline_Generic                 : constant Name_Id := N + 174; -- GNAT\n+   Name_Inspection_Point               : constant Name_Id := N + 175;\n+   Name_Interface                      : constant Name_Id := N + 176; -- Ada 83\n+   Name_Interface_Name                 : constant Name_Id := N + 177; -- GNAT\n+   Name_Interrupt_Handler              : constant Name_Id := N + 178;\n+   Name_Interrupt_Priority             : constant Name_Id := N + 179;\n+   Name_Java_Constructor               : constant Name_Id := N + 180; -- GNAT\n+   Name_Java_Interface                 : constant Name_Id := N + 181; -- GNAT\n+   Name_Keep_Names                     : constant Name_Id := N + 182; -- GNAT\n+   Name_Link_With                      : constant Name_Id := N + 183; -- GNAT\n+   Name_Linker_Alias                   : constant Name_Id := N + 184; -- GNAT\n+   Name_Linker_Options                 : constant Name_Id := N + 185;\n+   Name_Linker_Section                 : constant Name_Id := N + 186; -- GNAT\n+   Name_List                           : constant Name_Id := N + 187;\n+   Name_Machine_Attribute              : constant Name_Id := N + 188; -- GNAT\n+   Name_Main                           : constant Name_Id := N + 189; -- GNAT\n+   Name_Main_Storage                   : constant Name_Id := N + 190; -- GNAT\n+   Name_Memory_Size                    : constant Name_Id := N + 191; -- Ada 83\n+   Name_No_Return                      : constant Name_Id := N + 192; -- GNAT\n+   Name_Obsolescent                    : constant Name_Id := N + 193; -- GNAT\n+   Name_Optimize                       : constant Name_Id := N + 194;\n+   Name_Optional_Overriding            : constant Name_Id := N + 195;\n+   Name_Overriding                     : constant Name_Id := N + 196;\n+   Name_Pack                           : constant Name_Id := N + 197;\n+   Name_Page                           : constant Name_Id := N + 198;\n+   Name_Passive                        : constant Name_Id := N + 199; -- GNAT\n+   Name_Preelaborate                   : constant Name_Id := N + 200;\n+   Name_Priority                       : constant Name_Id := N + 201;\n+   Name_Psect_Object                   : constant Name_Id := N + 202; -- VMS\n+   Name_Pure                           : constant Name_Id := N + 203;\n+   Name_Pure_Function                  : constant Name_Id := N + 204; -- GNAT\n+   Name_Remote_Call_Interface          : constant Name_Id := N + 205;\n+   Name_Remote_Types                   : constant Name_Id := N + 206;\n+   Name_Share_Generic                  : constant Name_Id := N + 207; -- GNAT\n+   Name_Shared                         : constant Name_Id := N + 208; -- Ada 83\n+   Name_Shared_Passive                 : constant Name_Id := N + 209;\n \n    --  Note: Storage_Size is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n@@ -429,27 +433,27 @@ package Snames is\n    --  Note: Storage_Unit is also omitted from the list because of a clash\n    --  with an attribute name, and is treated similarly.\n \n-   Name_Source_Reference               : constant Name_Id := N + 209; -- GNAT\n-   Name_Stream_Convert                 : constant Name_Id := N + 210; -- GNAT\n-   Name_Subtitle                       : constant Name_Id := N + 211; -- GNAT\n-   Name_Suppress_All                   : constant Name_Id := N + 212; -- GNAT\n-   Name_Suppress_Debug_Info            : constant Name_Id := N + 213; -- GNAT\n-   Name_Suppress_Initialization        : constant Name_Id := N + 214; -- GNAT\n-   Name_System_Name                    : constant Name_Id := N + 215; -- Ada 83\n-   Name_Task_Info                      : constant Name_Id := N + 216; -- GNAT\n-   Name_Task_Name                      : constant Name_Id := N + 217; -- GNAT\n-   Name_Task_Storage                   : constant Name_Id := N + 218; -- VMS\n-   Name_Thread_Body                    : constant Name_Id := N + 219; -- GNAT\n-   Name_Time_Slice                     : constant Name_Id := N + 220; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 221; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 222; -- GNAT\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 223; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 224; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 225; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 226;\n-   Name_Volatile_Components            : constant Name_Id := N + 227;\n-   Name_Weak_External                  : constant Name_Id := N + 228; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 228;\n+   Name_Source_Reference               : constant Name_Id := N + 210; -- GNAT\n+   Name_Stream_Convert                 : constant Name_Id := N + 211; -- GNAT\n+   Name_Subtitle                       : constant Name_Id := N + 212; -- GNAT\n+   Name_Suppress_All                   : constant Name_Id := N + 213; -- GNAT\n+   Name_Suppress_Debug_Info            : constant Name_Id := N + 214; -- GNAT\n+   Name_Suppress_Initialization        : constant Name_Id := N + 215; -- GNAT\n+   Name_System_Name                    : constant Name_Id := N + 216; -- Ada 83\n+   Name_Task_Info                      : constant Name_Id := N + 217; -- GNAT\n+   Name_Task_Name                      : constant Name_Id := N + 218; -- GNAT\n+   Name_Task_Storage                   : constant Name_Id := N + 219; -- VMS\n+   Name_Thread_Body                    : constant Name_Id := N + 220; -- GNAT\n+   Name_Time_Slice                     : constant Name_Id := N + 221; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 222; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 223; -- GNAT\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 224; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 225; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 226; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 227;\n+   Name_Volatile_Components            : constant Name_Id := N + 228;\n+   Name_Weak_External                  : constant Name_Id := N + 229; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 229;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -460,98 +464,98 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 229;\n-   Name_Ada                            : constant Name_Id := N + 229;\n-   Name_Assembler                      : constant Name_Id := N + 230;\n-   Name_COBOL                          : constant Name_Id := N + 231;\n-   Name_CPP                            : constant Name_Id := N + 232;\n-   Name_Fortran                        : constant Name_Id := N + 233;\n-   Name_Intrinsic                      : constant Name_Id := N + 234;\n-   Name_Java                           : constant Name_Id := N + 235;\n-   Name_Stdcall                        : constant Name_Id := N + 236;\n-   Name_Stubbed                        : constant Name_Id := N + 237;\n-   Last_Convention_Name                : constant Name_Id := N + 237;\n+   First_Convention_Name               : constant Name_Id := N + 230;\n+   Name_Ada                            : constant Name_Id := N + 230;\n+   Name_Assembler                      : constant Name_Id := N + 231;\n+   Name_COBOL                          : constant Name_Id := N + 232;\n+   Name_CPP                            : constant Name_Id := N + 233;\n+   Name_Fortran                        : constant Name_Id := N + 234;\n+   Name_Intrinsic                      : constant Name_Id := N + 235;\n+   Name_Java                           : constant Name_Id := N + 236;\n+   Name_Stdcall                        : constant Name_Id := N + 237;\n+   Name_Stubbed                        : constant Name_Id := N + 238;\n+   Last_Convention_Name                : constant Name_Id := N + 238;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 238;\n-   Name_Assembly                       : constant Name_Id := N + 239;\n+   Name_Asm                            : constant Name_Id := N + 239;\n+   Name_Assembly                       : constant Name_Id := N + 240;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 240;\n+   Name_Default                        : constant Name_Id := N + 241;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 241;\n-   Name_Win32                          : constant Name_Id := N + 242;\n+   Name_DLL                            : constant Name_Id := N + 242;\n+   Name_Win32                          : constant Name_Id := N + 243;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 243;\n-   Name_Body_File_Name                 : constant Name_Id := N + 244;\n-   Name_Casing                         : constant Name_Id := N + 245;\n-   Name_Code                           : constant Name_Id := N + 246;\n-   Name_Component                      : constant Name_Id := N + 247;\n-   Name_Component_Size_4               : constant Name_Id := N + 248;\n-   Name_Copy                           : constant Name_Id := N + 249;\n-   Name_D_Float                        : constant Name_Id := N + 250;\n-   Name_Descriptor                     : constant Name_Id := N + 251;\n-   Name_Dot_Replacement                : constant Name_Id := N + 252;\n-   Name_Dynamic                        : constant Name_Id := N + 253;\n-   Name_Entity                         : constant Name_Id := N + 254;\n-   Name_External_Name                  : constant Name_Id := N + 255;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 256;\n-   Name_Form                           : constant Name_Id := N + 257;\n-   Name_G_Float                        : constant Name_Id := N + 258;\n-   Name_Gcc                            : constant Name_Id := N + 259;\n-   Name_Gnat                           : constant Name_Id := N + 260;\n-   Name_GPL                            : constant Name_Id := N + 261;\n-   Name_IEEE_Float                     : constant Name_Id := N + 262;\n-   Name_Homonym_Number                 : constant Name_Id := N + 263;\n-   Name_Internal                       : constant Name_Id := N + 264;\n-   Name_Link_Name                      : constant Name_Id := N + 265;\n-   Name_Lowercase                      : constant Name_Id := N + 266;\n-   Name_Max_Size                       : constant Name_Id := N + 267;\n-   Name_Mechanism                      : constant Name_Id := N + 268;\n-   Name_Mixedcase                      : constant Name_Id := N + 269;\n-   Name_Modified_GPL                   : constant Name_Id := N + 270;\n-   Name_Name                           : constant Name_Id := N + 271;\n-   Name_NCA                            : constant Name_Id := N + 272;\n-   Name_No                             : constant Name_Id := N + 273;\n-   Name_On                             : constant Name_Id := N + 274;\n-   Name_Parameter_Types                : constant Name_Id := N + 275;\n-   Name_Reference                      : constant Name_Id := N + 276;\n-   Name_No_Requeue                     : constant Name_Id := N + 277;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 278;\n-   Name_Restricted                     : constant Name_Id := N + 279;\n-   Name_Result_Mechanism               : constant Name_Id := N + 280;\n-   Name_Result_Type                    : constant Name_Id := N + 281;\n-   Name_Runtime                        : constant Name_Id := N + 282;\n-   Name_SB                             : constant Name_Id := N + 283;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 284;\n-   Name_Section                        : constant Name_Id := N + 285;\n-   Name_Semaphore                      : constant Name_Id := N + 286;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 287;\n-   Name_Static                         : constant Name_Id := N + 288;\n-   Name_Stack_Size                     : constant Name_Id := N + 289;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 290;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 291;\n-   Name_Task_Type                      : constant Name_Id := N + 292;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 293;\n-   Name_Top_Guard                      : constant Name_Id := N + 294;\n-   Name_UBA                            : constant Name_Id := N + 295;\n-   Name_UBS                            : constant Name_Id := N + 296;\n-   Name_UBSB                           : constant Name_Id := N + 297;\n-   Name_Unit_Name                      : constant Name_Id := N + 298;\n-   Name_Unknown                        : constant Name_Id := N + 299;\n-   Name_Unrestricted                   : constant Name_Id := N + 300;\n-   Name_Uppercase                      : constant Name_Id := N + 301;\n-   Name_User                           : constant Name_Id := N + 302;\n-   Name_VAX_Float                      : constant Name_Id := N + 303;\n-   Name_VMS                            : constant Name_Id := N + 304;\n-   Name_Working_Storage                : constant Name_Id := N + 305;\n+   Name_As_Is                          : constant Name_Id := N + 244;\n+   Name_Body_File_Name                 : constant Name_Id := N + 245;\n+   Name_Casing                         : constant Name_Id := N + 246;\n+   Name_Code                           : constant Name_Id := N + 247;\n+   Name_Component                      : constant Name_Id := N + 248;\n+   Name_Component_Size_4               : constant Name_Id := N + 249;\n+   Name_Copy                           : constant Name_Id := N + 250;\n+   Name_D_Float                        : constant Name_Id := N + 251;\n+   Name_Descriptor                     : constant Name_Id := N + 252;\n+   Name_Dot_Replacement                : constant Name_Id := N + 253;\n+   Name_Dynamic                        : constant Name_Id := N + 254;\n+   Name_Entity                         : constant Name_Id := N + 255;\n+   Name_External_Name                  : constant Name_Id := N + 256;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 257;\n+   Name_Form                           : constant Name_Id := N + 258;\n+   Name_G_Float                        : constant Name_Id := N + 259;\n+   Name_Gcc                            : constant Name_Id := N + 260;\n+   Name_Gnat                           : constant Name_Id := N + 261;\n+   Name_GPL                            : constant Name_Id := N + 262;\n+   Name_IEEE_Float                     : constant Name_Id := N + 263;\n+   Name_Homonym_Number                 : constant Name_Id := N + 264;\n+   Name_Internal                       : constant Name_Id := N + 265;\n+   Name_Link_Name                      : constant Name_Id := N + 266;\n+   Name_Lowercase                      : constant Name_Id := N + 267;\n+   Name_Max_Size                       : constant Name_Id := N + 268;\n+   Name_Mechanism                      : constant Name_Id := N + 269;\n+   Name_Mixedcase                      : constant Name_Id := N + 270;\n+   Name_Modified_GPL                   : constant Name_Id := N + 271;\n+   Name_Name                           : constant Name_Id := N + 272;\n+   Name_NCA                            : constant Name_Id := N + 273;\n+   Name_No                             : constant Name_Id := N + 274;\n+   Name_On                             : constant Name_Id := N + 275;\n+   Name_Parameter_Types                : constant Name_Id := N + 276;\n+   Name_Reference                      : constant Name_Id := N + 277;\n+   Name_No_Requeue                     : constant Name_Id := N + 278;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 279;\n+   Name_Restricted                     : constant Name_Id := N + 280;\n+   Name_Result_Mechanism               : constant Name_Id := N + 281;\n+   Name_Result_Type                    : constant Name_Id := N + 282;\n+   Name_Runtime                        : constant Name_Id := N + 283;\n+   Name_SB                             : constant Name_Id := N + 284;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 285;\n+   Name_Section                        : constant Name_Id := N + 286;\n+   Name_Semaphore                      : constant Name_Id := N + 287;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 288;\n+   Name_Static                         : constant Name_Id := N + 289;\n+   Name_Stack_Size                     : constant Name_Id := N + 290;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 291;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 292;\n+   Name_Task_Type                      : constant Name_Id := N + 293;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 294;\n+   Name_Top_Guard                      : constant Name_Id := N + 295;\n+   Name_UBA                            : constant Name_Id := N + 296;\n+   Name_UBS                            : constant Name_Id := N + 297;\n+   Name_UBSB                           : constant Name_Id := N + 298;\n+   Name_Unit_Name                      : constant Name_Id := N + 299;\n+   Name_Unknown                        : constant Name_Id := N + 300;\n+   Name_Unrestricted                   : constant Name_Id := N + 301;\n+   Name_Uppercase                      : constant Name_Id := N + 302;\n+   Name_User                           : constant Name_Id := N + 303;\n+   Name_VAX_Float                      : constant Name_Id := N + 304;\n+   Name_VMS                            : constant Name_Id := N + 305;\n+   Name_Working_Storage                : constant Name_Id := N + 306;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -565,374 +569,374 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 306;\n-   Name_Abort_Signal                   : constant Name_Id := N + 306;  -- GNAT\n-   Name_Access                         : constant Name_Id := N + 307;\n-   Name_Address                        : constant Name_Id := N + 308;\n-   Name_Address_Size                   : constant Name_Id := N + 309;  -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 310;\n-   Name_Alignment                      : constant Name_Id := N + 311;\n-   Name_Asm_Input                      : constant Name_Id := N + 312;  -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 313;  -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 314;  -- VMS\n-   Name_Bit                            : constant Name_Id := N + 315;  -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 316;\n-   Name_Bit_Position                   : constant Name_Id := N + 317;  -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 318;\n-   Name_Callable                       : constant Name_Id := N + 319;\n-   Name_Caller                         : constant Name_Id := N + 320;\n-   Name_Code_Address                   : constant Name_Id := N + 321;  -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 322;\n-   Name_Compose                        : constant Name_Id := N + 323;\n-   Name_Constrained                    : constant Name_Id := N + 324;\n-   Name_Count                          : constant Name_Id := N + 325;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 326; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 327;\n-   Name_Delta                          : constant Name_Id := N + 328;\n-   Name_Denorm                         : constant Name_Id := N + 329;\n-   Name_Digits                         : constant Name_Id := N + 330;\n-   Name_Elaborated                     : constant Name_Id := N + 331; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 332; -- Ada 83\n-   Name_Enum_Rep                       : constant Name_Id := N + 333; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 334; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 335;\n-   Name_External_Tag                   : constant Name_Id := N + 336;\n-   Name_First                          : constant Name_Id := N + 337;\n-   Name_First_Bit                      : constant Name_Id := N + 338;\n-   Name_Fixed_Value                    : constant Name_Id := N + 339; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 340;\n-   Name_Has_Discriminants              : constant Name_Id := N + 341; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 342;\n-   Name_Img                            : constant Name_Id := N + 343; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 344; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 345; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 346;\n-   Name_Last_Bit                       : constant Name_Id := N + 347;\n-   Name_Leading_Part                   : constant Name_Id := N + 348;\n-   Name_Length                         : constant Name_Id := N + 349;\n-   Name_Machine_Emax                   : constant Name_Id := N + 350;\n-   Name_Machine_Emin                   : constant Name_Id := N + 351;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 352;\n-   Name_Machine_Overflows              : constant Name_Id := N + 353;\n-   Name_Machine_Radix                  : constant Name_Id := N + 354;\n-   Name_Machine_Rounds                 : constant Name_Id := N + 355;\n-   Name_Machine_Size                   : constant Name_Id := N + 356; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 357; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 358;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 359; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 360; -- GNAT\n-   Name_Model_Emin                     : constant Name_Id := N + 361;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 362;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 363;\n-   Name_Model_Small                    : constant Name_Id := N + 364;\n-   Name_Modulus                        : constant Name_Id := N + 365;\n-   Name_Null_Parameter                 : constant Name_Id := N + 366; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 367; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 368;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 369; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 370;\n-   Name_Pos                            : constant Name_Id := N + 371;\n-   Name_Position                       : constant Name_Id := N + 372;\n-   Name_Range                          : constant Name_Id := N + 373;\n-   Name_Range_Length                   : constant Name_Id := N + 374; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 375;\n-   Name_Safe_Emax                      : constant Name_Id := N + 376; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 377;\n-   Name_Safe_Large                     : constant Name_Id := N + 378; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 379;\n-   Name_Safe_Small                     : constant Name_Id := N + 380; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 381;\n-   Name_Scaling                        : constant Name_Id := N + 382;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 383;\n-   Name_Size                           : constant Name_Id := N + 384;\n-   Name_Small                          : constant Name_Id := N + 385;\n-   Name_Storage_Size                   : constant Name_Id := N + 386;\n-   Name_Storage_Unit                   : constant Name_Id := N + 387; -- GNAT\n-   Name_Tag                            : constant Name_Id := N + 388;\n-   Name_Target_Name                    : constant Name_Id := N + 389; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 390;\n-   Name_To_Address                     : constant Name_Id := N + 391; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 392; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 393; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 394;\n-   Name_Unchecked_Access               : constant Name_Id := N + 395;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 396;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 397; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 398; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 399; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 400;\n-   Name_Valid                          : constant Name_Id := N + 401;\n-   Name_Value_Size                     : constant Name_Id := N + 402; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 403;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 404; -- GNAT\n-   Name_Wide_Width                     : constant Name_Id := N + 405;\n-   Name_Width                          : constant Name_Id := N + 406;\n-   Name_Word_Size                      : constant Name_Id := N + 407; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 307;\n+   Name_Abort_Signal                   : constant Name_Id := N + 307;  -- GNAT\n+   Name_Access                         : constant Name_Id := N + 308;\n+   Name_Address                        : constant Name_Id := N + 309;\n+   Name_Address_Size                   : constant Name_Id := N + 310;  -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 311;\n+   Name_Alignment                      : constant Name_Id := N + 312;\n+   Name_Asm_Input                      : constant Name_Id := N + 313;  -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 314;  -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 315;  -- VMS\n+   Name_Bit                            : constant Name_Id := N + 316;  -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 317;\n+   Name_Bit_Position                   : constant Name_Id := N + 318;  -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 319;\n+   Name_Callable                       : constant Name_Id := N + 320;\n+   Name_Caller                         : constant Name_Id := N + 321;\n+   Name_Code_Address                   : constant Name_Id := N + 322;  -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 323;\n+   Name_Compose                        : constant Name_Id := N + 324;\n+   Name_Constrained                    : constant Name_Id := N + 325;\n+   Name_Count                          : constant Name_Id := N + 326;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 327; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 328;\n+   Name_Delta                          : constant Name_Id := N + 329;\n+   Name_Denorm                         : constant Name_Id := N + 330;\n+   Name_Digits                         : constant Name_Id := N + 331;\n+   Name_Elaborated                     : constant Name_Id := N + 332; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 333; -- Ada 83\n+   Name_Enum_Rep                       : constant Name_Id := N + 334; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 335; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 336;\n+   Name_External_Tag                   : constant Name_Id := N + 337;\n+   Name_First                          : constant Name_Id := N + 338;\n+   Name_First_Bit                      : constant Name_Id := N + 339;\n+   Name_Fixed_Value                    : constant Name_Id := N + 340; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 341;\n+   Name_Has_Discriminants              : constant Name_Id := N + 342; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 343;\n+   Name_Img                            : constant Name_Id := N + 344; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 345; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 346; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 347;\n+   Name_Last_Bit                       : constant Name_Id := N + 348;\n+   Name_Leading_Part                   : constant Name_Id := N + 349;\n+   Name_Length                         : constant Name_Id := N + 350;\n+   Name_Machine_Emax                   : constant Name_Id := N + 351;\n+   Name_Machine_Emin                   : constant Name_Id := N + 352;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 353;\n+   Name_Machine_Overflows              : constant Name_Id := N + 354;\n+   Name_Machine_Radix                  : constant Name_Id := N + 355;\n+   Name_Machine_Rounds                 : constant Name_Id := N + 356;\n+   Name_Machine_Size                   : constant Name_Id := N + 357; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 358; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 359;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 360; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 361; -- GNAT\n+   Name_Model_Emin                     : constant Name_Id := N + 362;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 363;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 364;\n+   Name_Model_Small                    : constant Name_Id := N + 365;\n+   Name_Modulus                        : constant Name_Id := N + 366;\n+   Name_Null_Parameter                 : constant Name_Id := N + 367; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 368; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 369;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 370; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 371;\n+   Name_Pos                            : constant Name_Id := N + 372;\n+   Name_Position                       : constant Name_Id := N + 373;\n+   Name_Range                          : constant Name_Id := N + 374;\n+   Name_Range_Length                   : constant Name_Id := N + 375; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 376;\n+   Name_Safe_Emax                      : constant Name_Id := N + 377; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 378;\n+   Name_Safe_Large                     : constant Name_Id := N + 379; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 380;\n+   Name_Safe_Small                     : constant Name_Id := N + 381; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 382;\n+   Name_Scaling                        : constant Name_Id := N + 383;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 384;\n+   Name_Size                           : constant Name_Id := N + 385;\n+   Name_Small                          : constant Name_Id := N + 386;\n+   Name_Storage_Size                   : constant Name_Id := N + 387;\n+   Name_Storage_Unit                   : constant Name_Id := N + 388; -- GNAT\n+   Name_Tag                            : constant Name_Id := N + 389;\n+   Name_Target_Name                    : constant Name_Id := N + 390; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 391;\n+   Name_To_Address                     : constant Name_Id := N + 392; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 393; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 394; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 395;\n+   Name_Unchecked_Access               : constant Name_Id := N + 396;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 397;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 398; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 399; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 400; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 401;\n+   Name_Valid                          : constant Name_Id := N + 402;\n+   Name_Value_Size                     : constant Name_Id := N + 403; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 404;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 405; -- GNAT\n+   Name_Wide_Width                     : constant Name_Id := N + 406;\n+   Name_Width                          : constant Name_Id := N + 407;\n+   Name_Word_Size                      : constant Name_Id := N + 408; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 408;\n-   Name_Adjacent                       : constant Name_Id := N + 408;\n-   Name_Ceiling                        : constant Name_Id := N + 409;\n-   Name_Copy_Sign                      : constant Name_Id := N + 410;\n-   Name_Floor                          : constant Name_Id := N + 411;\n-   Name_Fraction                       : constant Name_Id := N + 412;\n-   Name_Image                          : constant Name_Id := N + 413;\n-   Name_Input                          : constant Name_Id := N + 414;\n-   Name_Machine                        : constant Name_Id := N + 415;\n-   Name_Max                            : constant Name_Id := N + 416;\n-   Name_Min                            : constant Name_Id := N + 417;\n-   Name_Model                          : constant Name_Id := N + 418;\n-   Name_Pred                           : constant Name_Id := N + 419;\n-   Name_Remainder                      : constant Name_Id := N + 420;\n-   Name_Rounding                       : constant Name_Id := N + 421;\n-   Name_Succ                           : constant Name_Id := N + 422;\n-   Name_Truncation                     : constant Name_Id := N + 423;\n-   Name_Value                          : constant Name_Id := N + 424;\n-   Name_Wide_Image                     : constant Name_Id := N + 425;\n-   Name_Wide_Value                     : constant Name_Id := N + 426;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 426;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 409;\n+   Name_Adjacent                       : constant Name_Id := N + 409;\n+   Name_Ceiling                        : constant Name_Id := N + 410;\n+   Name_Copy_Sign                      : constant Name_Id := N + 411;\n+   Name_Floor                          : constant Name_Id := N + 412;\n+   Name_Fraction                       : constant Name_Id := N + 413;\n+   Name_Image                          : constant Name_Id := N + 414;\n+   Name_Input                          : constant Name_Id := N + 415;\n+   Name_Machine                        : constant Name_Id := N + 416;\n+   Name_Max                            : constant Name_Id := N + 417;\n+   Name_Min                            : constant Name_Id := N + 418;\n+   Name_Model                          : constant Name_Id := N + 419;\n+   Name_Pred                           : constant Name_Id := N + 420;\n+   Name_Remainder                      : constant Name_Id := N + 421;\n+   Name_Rounding                       : constant Name_Id := N + 422;\n+   Name_Succ                           : constant Name_Id := N + 423;\n+   Name_Truncation                     : constant Name_Id := N + 424;\n+   Name_Value                          : constant Name_Id := N + 425;\n+   Name_Wide_Image                     : constant Name_Id := N + 426;\n+   Name_Wide_Value                     : constant Name_Id := N + 427;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 427;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 427;\n-   Name_Output                         : constant Name_Id := N + 427;\n-   Name_Read                           : constant Name_Id := N + 428;\n-   Name_Write                          : constant Name_Id := N + 429;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 429;\n+   First_Procedure_Attribute           : constant Name_Id := N + 428;\n+   Name_Output                         : constant Name_Id := N + 428;\n+   Name_Read                           : constant Name_Id := N + 429;\n+   Name_Write                          : constant Name_Id := N + 430;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 430;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 430;\n-   Name_Elab_Body                      : constant Name_Id := N + 430; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 431; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 432;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 431;\n+   Name_Elab_Body                      : constant Name_Id := N + 431; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 432; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 433;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 433;\n-   Name_Base                           : constant Name_Id := N + 433;\n-   Name_Class                          : constant Name_Id := N + 434;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 434;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 434;\n-   Last_Attribute_Name                 : constant Name_Id := N + 434;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 434;\n+   Name_Base                           : constant Name_Id := N + 434;\n+   Name_Class                          : constant Name_Id := N + 435;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 435;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 435;\n+   Last_Attribute_Name                 : constant Name_Id := N + 435;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 435;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 435;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 436;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 436;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 436;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 436;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 437;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 437;\n \n    --  Names of recognized queuing policy identifiers.\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 437;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 437;\n-   Name_Priority_Queuing               : constant Name_Id := N + 438;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 438;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 438;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 438;\n+   Name_Priority_Queuing               : constant Name_Id := N + 439;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 439;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_WIthinn_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 439;\n-   Name_Fifo_Within_Priorities         : constant Name_Id := N + 439;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 439;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 440;\n+   Name_Fifo_Within_Priorities         : constant Name_Id := N + 440;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 440;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 440;\n-   Name_Access_Check                   : constant Name_Id := N + 440;\n-   Name_Accessibility_Check            : constant Name_Id := N + 441;\n-   Name_Discriminant_Check             : constant Name_Id := N + 442;\n-   Name_Division_Check                 : constant Name_Id := N + 443;\n-   Name_Elaboration_Check              : constant Name_Id := N + 444;\n-   Name_Index_Check                    : constant Name_Id := N + 445;\n-   Name_Length_Check                   : constant Name_Id := N + 446;\n-   Name_Overflow_Check                 : constant Name_Id := N + 447;\n-   Name_Range_Check                    : constant Name_Id := N + 448;\n-   Name_Storage_Check                  : constant Name_Id := N + 449;\n-   Name_Tag_Check                      : constant Name_Id := N + 450;\n-   Name_All_Checks                     : constant Name_Id := N + 451;\n-   Last_Check_Name                     : constant Name_Id := N + 451;\n+   First_Check_Name                    : constant Name_Id := N + 441;\n+   Name_Access_Check                   : constant Name_Id := N + 441;\n+   Name_Accessibility_Check            : constant Name_Id := N + 442;\n+   Name_Discriminant_Check             : constant Name_Id := N + 443;\n+   Name_Division_Check                 : constant Name_Id := N + 444;\n+   Name_Elaboration_Check              : constant Name_Id := N + 445;\n+   Name_Index_Check                    : constant Name_Id := N + 446;\n+   Name_Length_Check                   : constant Name_Id := N + 447;\n+   Name_Overflow_Check                 : constant Name_Id := N + 448;\n+   Name_Range_Check                    : constant Name_Id := N + 449;\n+   Name_Storage_Check                  : constant Name_Id := N + 450;\n+   Name_Tag_Check                      : constant Name_Id := N + 451;\n+   Name_All_Checks                     : constant Name_Id := N + 452;\n+   Last_Check_Name                     : constant Name_Id := N + 452;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 452;\n-   Name_Abs                            : constant Name_Id := N + 453;\n-   Name_Accept                         : constant Name_Id := N + 454;\n-   Name_And                            : constant Name_Id := N + 455;\n-   Name_All                            : constant Name_Id := N + 456;\n-   Name_Array                          : constant Name_Id := N + 457;\n-   Name_At                             : constant Name_Id := N + 458;\n-   Name_Begin                          : constant Name_Id := N + 459;\n-   Name_Body                           : constant Name_Id := N + 460;\n-   Name_Case                           : constant Name_Id := N + 461;\n-   Name_Constant                       : constant Name_Id := N + 462;\n-   Name_Declare                        : constant Name_Id := N + 463;\n-   Name_Delay                          : constant Name_Id := N + 464;\n-   Name_Do                             : constant Name_Id := N + 465;\n-   Name_Else                           : constant Name_Id := N + 466;\n-   Name_Elsif                          : constant Name_Id := N + 467;\n-   Name_End                            : constant Name_Id := N + 468;\n-   Name_Entry                          : constant Name_Id := N + 469;\n-   Name_Exception                      : constant Name_Id := N + 470;\n-   Name_Exit                           : constant Name_Id := N + 471;\n-   Name_For                            : constant Name_Id := N + 472;\n-   Name_Function                       : constant Name_Id := N + 473;\n-   Name_Generic                        : constant Name_Id := N + 474;\n-   Name_Goto                           : constant Name_Id := N + 475;\n-   Name_If                             : constant Name_Id := N + 476;\n-   Name_In                             : constant Name_Id := N + 477;\n-   Name_Is                             : constant Name_Id := N + 478;\n-   Name_Limited                        : constant Name_Id := N + 479;\n-   Name_Loop                           : constant Name_Id := N + 480;\n-   Name_Mod                            : constant Name_Id := N + 481;\n-   Name_New                            : constant Name_Id := N + 482;\n-   Name_Not                            : constant Name_Id := N + 483;\n-   Name_Null                           : constant Name_Id := N + 484;\n-   Name_Of                             : constant Name_Id := N + 485;\n-   Name_Or                             : constant Name_Id := N + 486;\n-   Name_Others                         : constant Name_Id := N + 487;\n-   Name_Out                            : constant Name_Id := N + 488;\n-   Name_Package                        : constant Name_Id := N + 489;\n-   Name_Pragma                         : constant Name_Id := N + 490;\n-   Name_Private                        : constant Name_Id := N + 491;\n-   Name_Procedure                      : constant Name_Id := N + 492;\n-   Name_Raise                          : constant Name_Id := N + 493;\n-   Name_Record                         : constant Name_Id := N + 494;\n-   Name_Rem                            : constant Name_Id := N + 495;\n-   Name_Renames                        : constant Name_Id := N + 496;\n-   Name_Return                         : constant Name_Id := N + 497;\n-   Name_Reverse                        : constant Name_Id := N + 498;\n-   Name_Select                         : constant Name_Id := N + 499;\n-   Name_Separate                       : constant Name_Id := N + 500;\n-   Name_Subtype                        : constant Name_Id := N + 501;\n-   Name_Task                           : constant Name_Id := N + 502;\n-   Name_Terminate                      : constant Name_Id := N + 503;\n-   Name_Then                           : constant Name_Id := N + 504;\n-   Name_Type                           : constant Name_Id := N + 505;\n-   Name_Use                            : constant Name_Id := N + 506;\n-   Name_When                           : constant Name_Id := N + 507;\n-   Name_While                          : constant Name_Id := N + 508;\n-   Name_With                           : constant Name_Id := N + 509;\n-   Name_Xor                            : constant Name_Id := N + 510;\n+   Name_Abort                          : constant Name_Id := N + 453;\n+   Name_Abs                            : constant Name_Id := N + 454;\n+   Name_Accept                         : constant Name_Id := N + 455;\n+   Name_And                            : constant Name_Id := N + 456;\n+   Name_All                            : constant Name_Id := N + 457;\n+   Name_Array                          : constant Name_Id := N + 458;\n+   Name_At                             : constant Name_Id := N + 459;\n+   Name_Begin                          : constant Name_Id := N + 460;\n+   Name_Body                           : constant Name_Id := N + 461;\n+   Name_Case                           : constant Name_Id := N + 462;\n+   Name_Constant                       : constant Name_Id := N + 463;\n+   Name_Declare                        : constant Name_Id := N + 464;\n+   Name_Delay                          : constant Name_Id := N + 465;\n+   Name_Do                             : constant Name_Id := N + 466;\n+   Name_Else                           : constant Name_Id := N + 467;\n+   Name_Elsif                          : constant Name_Id := N + 468;\n+   Name_End                            : constant Name_Id := N + 469;\n+   Name_Entry                          : constant Name_Id := N + 470;\n+   Name_Exception                      : constant Name_Id := N + 471;\n+   Name_Exit                           : constant Name_Id := N + 472;\n+   Name_For                            : constant Name_Id := N + 473;\n+   Name_Function                       : constant Name_Id := N + 474;\n+   Name_Generic                        : constant Name_Id := N + 475;\n+   Name_Goto                           : constant Name_Id := N + 476;\n+   Name_If                             : constant Name_Id := N + 477;\n+   Name_In                             : constant Name_Id := N + 478;\n+   Name_Is                             : constant Name_Id := N + 479;\n+   Name_Limited                        : constant Name_Id := N + 480;\n+   Name_Loop                           : constant Name_Id := N + 481;\n+   Name_Mod                            : constant Name_Id := N + 482;\n+   Name_New                            : constant Name_Id := N + 483;\n+   Name_Not                            : constant Name_Id := N + 484;\n+   Name_Null                           : constant Name_Id := N + 485;\n+   Name_Of                             : constant Name_Id := N + 486;\n+   Name_Or                             : constant Name_Id := N + 487;\n+   Name_Others                         : constant Name_Id := N + 488;\n+   Name_Out                            : constant Name_Id := N + 489;\n+   Name_Package                        : constant Name_Id := N + 490;\n+   Name_Pragma                         : constant Name_Id := N + 491;\n+   Name_Private                        : constant Name_Id := N + 492;\n+   Name_Procedure                      : constant Name_Id := N + 493;\n+   Name_Raise                          : constant Name_Id := N + 494;\n+   Name_Record                         : constant Name_Id := N + 495;\n+   Name_Rem                            : constant Name_Id := N + 496;\n+   Name_Renames                        : constant Name_Id := N + 497;\n+   Name_Return                         : constant Name_Id := N + 498;\n+   Name_Reverse                        : constant Name_Id := N + 499;\n+   Name_Select                         : constant Name_Id := N + 500;\n+   Name_Separate                       : constant Name_Id := N + 501;\n+   Name_Subtype                        : constant Name_Id := N + 502;\n+   Name_Task                           : constant Name_Id := N + 503;\n+   Name_Terminate                      : constant Name_Id := N + 504;\n+   Name_Then                           : constant Name_Id := N + 505;\n+   Name_Type                           : constant Name_Id := N + 506;\n+   Name_Use                            : constant Name_Id := N + 507;\n+   Name_When                           : constant Name_Id := N + 508;\n+   Name_While                          : constant Name_Id := N + 509;\n+   Name_With                           : constant Name_Id := N + 510;\n+   Name_Xor                            : constant Name_Id := N + 511;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                : constant Name_Id := N + 511;\n-   Name_Divide                         : constant Name_Id := N + 511;\n-   Name_Enclosing_Entity               : constant Name_Id := N + 512;\n-   Name_Exception_Information          : constant Name_Id := N + 513;\n-   Name_Exception_Message              : constant Name_Id := N + 514;\n-   Name_Exception_Name                 : constant Name_Id := N + 515;\n-   Name_File                           : constant Name_Id := N + 516;\n-   Name_Import_Address                 : constant Name_Id := N + 517;\n-   Name_Import_Largest_Value           : constant Name_Id := N + 518;\n-   Name_Import_Value                   : constant Name_Id := N + 519;\n-   Name_Is_Negative                    : constant Name_Id := N + 520;\n-   Name_Line                           : constant Name_Id := N + 521;\n-   Name_Rotate_Left                    : constant Name_Id := N + 522;\n-   Name_Rotate_Right                   : constant Name_Id := N + 523;\n-   Name_Shift_Left                     : constant Name_Id := N + 524;\n-   Name_Shift_Right                    : constant Name_Id := N + 525;\n-   Name_Shift_Right_Arithmetic         : constant Name_Id := N + 526;\n-   Name_Source_Location                : constant Name_Id := N + 527;\n-   Name_Unchecked_Conversion           : constant Name_Id := N + 528;\n-   Name_Unchecked_Deallocation         : constant Name_Id := N + 529;\n-   Name_To_Pointer                     : constant Name_Id := N + 530;\n-   Last_Intrinsic_Name                 : constant Name_Id := N + 530;\n+   First_Intrinsic_Name                : constant Name_Id := N + 512;\n+   Name_Divide                         : constant Name_Id := N + 512;\n+   Name_Enclosing_Entity               : constant Name_Id := N + 513;\n+   Name_Exception_Information          : constant Name_Id := N + 514;\n+   Name_Exception_Message              : constant Name_Id := N + 515;\n+   Name_Exception_Name                 : constant Name_Id := N + 516;\n+   Name_File                           : constant Name_Id := N + 517;\n+   Name_Import_Address                 : constant Name_Id := N + 518;\n+   Name_Import_Largest_Value           : constant Name_Id := N + 519;\n+   Name_Import_Value                   : constant Name_Id := N + 520;\n+   Name_Is_Negative                    : constant Name_Id := N + 521;\n+   Name_Line                           : constant Name_Id := N + 522;\n+   Name_Rotate_Left                    : constant Name_Id := N + 523;\n+   Name_Rotate_Right                   : constant Name_Id := N + 524;\n+   Name_Shift_Left                     : constant Name_Id := N + 525;\n+   Name_Shift_Right                    : constant Name_Id := N + 526;\n+   Name_Shift_Right_Arithmetic         : constant Name_Id := N + 527;\n+   Name_Source_Location                : constant Name_Id := N + 528;\n+   Name_Unchecked_Conversion           : constant Name_Id := N + 529;\n+   Name_Unchecked_Deallocation         : constant Name_Id := N + 530;\n+   Name_To_Pointer                     : constant Name_Id := N + 531;\n+   Last_Intrinsic_Name                 : constant Name_Id := N + 531;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 531;\n-   Name_Abstract                       : constant Name_Id := N + 531;\n-   Name_Aliased                        : constant Name_Id := N + 532;\n-   Name_Protected                      : constant Name_Id := N + 533;\n-   Name_Until                          : constant Name_Id := N + 534;\n-   Name_Requeue                        : constant Name_Id := N + 535;\n-   Name_Tagged                         : constant Name_Id := N + 536;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 536;\n+   First_95_Reserved_Word              : constant Name_Id := N + 532;\n+   Name_Abstract                       : constant Name_Id := N + 532;\n+   Name_Aliased                        : constant Name_Id := N + 533;\n+   Name_Protected                      : constant Name_Id := N + 534;\n+   Name_Until                          : constant Name_Id := N + 535;\n+   Name_Requeue                        : constant Name_Id := N + 536;\n+   Name_Tagged                         : constant Name_Id := N + 537;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 537;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 537;\n+   Name_Raise_Exception                : constant Name_Id := N + 538;\n \n    --  Additional reserved words in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Binder                         : constant Name_Id := N + 538;\n-   Name_Body_Suffix                    : constant Name_Id := N + 539;\n-   Name_Builder                        : constant Name_Id := N + 540;\n-   Name_Compiler                       : constant Name_Id := N + 541;\n-   Name_Cross_Reference                : constant Name_Id := N + 542;\n-   Name_Default_Switches               : constant Name_Id := N + 543;\n-   Name_Exec_Dir                       : constant Name_Id := N + 544;\n-   Name_Executable                     : constant Name_Id := N + 545;\n-   Name_Executable_Suffix              : constant Name_Id := N + 546;\n-   Name_Extends                        : constant Name_Id := N + 547;\n-   Name_Finder                         : constant Name_Id := N + 548;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 549;\n-   Name_Gnatls                         : constant Name_Id := N + 550;\n-   Name_Gnatstub                       : constant Name_Id := N + 551;\n-   Name_Implementation                 : constant Name_Id := N + 552;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 553;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 554;\n-   Name_Languages                      : constant Name_Id := N + 555;\n-   Name_Library_Dir                    : constant Name_Id := N + 556;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 557;\n-   Name_Library_GCC                    : constant Name_Id := N + 558;\n-   Name_Library_Interface              : constant Name_Id := N + 559;\n-   Name_Library_Kind                   : constant Name_Id := N + 560;\n-   Name_Library_Name                   : constant Name_Id := N + 561;\n-   Name_Library_Options                : constant Name_Id := N + 562;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 563;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 564;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 565;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 566;\n-   Name_Library_Version                : constant Name_Id := N + 567;\n-   Name_Linker                         : constant Name_Id := N + 568;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 569;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 570;\n-   Name_Naming                         : constant Name_Id := N + 571;\n-   Name_Object_Dir                     : constant Name_Id := N + 572;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 573;\n-   Name_Project                        : constant Name_Id := N + 574;\n-   Name_Separate_Suffix                : constant Name_Id := N + 575;\n-   Name_Source_Dirs                    : constant Name_Id := N + 576;\n-   Name_Source_Files                   : constant Name_Id := N + 577;\n-   Name_Source_List_File               : constant Name_Id := N + 578;\n-   Name_Spec                           : constant Name_Id := N + 579;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 580;\n-   Name_Specification                  : constant Name_Id := N + 581;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 582;\n-   Name_Specification_Suffix           : constant Name_Id := N + 583;\n-   Name_Switches                       : constant Name_Id := N + 584;\n+   Name_Binder                         : constant Name_Id := N + 539;\n+   Name_Body_Suffix                    : constant Name_Id := N + 540;\n+   Name_Builder                        : constant Name_Id := N + 541;\n+   Name_Compiler                       : constant Name_Id := N + 542;\n+   Name_Cross_Reference                : constant Name_Id := N + 543;\n+   Name_Default_Switches               : constant Name_Id := N + 544;\n+   Name_Exec_Dir                       : constant Name_Id := N + 545;\n+   Name_Executable                     : constant Name_Id := N + 546;\n+   Name_Executable_Suffix              : constant Name_Id := N + 547;\n+   Name_Extends                        : constant Name_Id := N + 548;\n+   Name_Finder                         : constant Name_Id := N + 549;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 550;\n+   Name_Gnatls                         : constant Name_Id := N + 551;\n+   Name_Gnatstub                       : constant Name_Id := N + 552;\n+   Name_Implementation                 : constant Name_Id := N + 553;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 554;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 555;\n+   Name_Languages                      : constant Name_Id := N + 556;\n+   Name_Library_Dir                    : constant Name_Id := N + 557;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 558;\n+   Name_Library_GCC                    : constant Name_Id := N + 559;\n+   Name_Library_Interface              : constant Name_Id := N + 560;\n+   Name_Library_Kind                   : constant Name_Id := N + 561;\n+   Name_Library_Name                   : constant Name_Id := N + 562;\n+   Name_Library_Options                : constant Name_Id := N + 563;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 564;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 565;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 566;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 567;\n+   Name_Library_Version                : constant Name_Id := N + 568;\n+   Name_Linker                         : constant Name_Id := N + 569;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 570;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 571;\n+   Name_Naming                         : constant Name_Id := N + 572;\n+   Name_Object_Dir                     : constant Name_Id := N + 573;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 574;\n+   Name_Project                        : constant Name_Id := N + 575;\n+   Name_Separate_Suffix                : constant Name_Id := N + 576;\n+   Name_Source_Dirs                    : constant Name_Id := N + 577;\n+   Name_Source_Files                   : constant Name_Id := N + 578;\n+   Name_Source_List_File               : constant Name_Id := N + 579;\n+   Name_Spec                           : constant Name_Id := N + 580;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 581;\n+   Name_Specification                  : constant Name_Id := N + 582;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 583;\n+   Name_Specification_Suffix           : constant Name_Id := N + 584;\n+   Name_Switches                       : constant Name_Id := N + 585;\n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 585;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 586;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 585;\n+   Last_Predefined_Name                : constant Name_Id := N + 586;\n \n    subtype Any_Operator_Name is Name_Id range\n      First_Operator_Name .. Last_Operator_Name;\n@@ -1159,6 +1163,7 @@ package Snames is\n       Pragma_Polling,\n       Pragma_Persistent_Data,\n       Pragma_Persistent_Object,\n+      Pragma_Profile,\n       Pragma_Propagate_Exceptions,\n       Pragma_Queuing_Policy,\n       Pragma_Ravenscar,"}, {"sha": "a10c25d56b94fc2fe269e951d98aa504bca5bc9f", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 118, "deletions": 117, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2003 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2004 Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -220,128 +220,129 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_Polling                      21\n #define  Pragma_Persistent_Data              22\n #define  Pragma_Persistent_Object            23\n-#define  Pragma_Propagate_Exceptions         24\n-#define  Pragma_Queuing_Policy               25\n-#define  Pragma_Ravenscar                    26\n-#define  Pragma_Restricted_Run_Time          27\n-#define  Pragma_Restrictions                 28\n-#define  Pragma_Restriction_Warnings         29\n-#define  Pragma_Reviewable                   30\n-#define  Pragma_Source_File_Name             31\n-#define  Pragma_Source_File_Name_Project     32\n-#define  Pragma_Style_Checks                 33\n-#define  Pragma_Suppress                     34\n-#define  Pragma_Suppress_Exception_Locations 35\n-#define  Pragma_Task_Dispatching_Policy      36\n-#define  Pragma_Universal_Data               37\n-#define  Pragma_Unsuppress                   38\n-#define  Pragma_Use_VADS_Size                39\n-#define  Pragma_Validity_Checks              40\n-#define  Pragma_Warnings                     41\n+#define  Pragma_Profile                      24\n+#define  Pragma_Propagate_Exceptions         25\n+#define  Pragma_Queuing_Policy               26\n+#define  Pragma_Ravenscar                    27\n+#define  Pragma_Restricted_Run_Time          28\n+#define  Pragma_Restrictions                 29\n+#define  Pragma_Restriction_Warnings         30\n+#define  Pragma_Reviewable                   31\n+#define  Pragma_Source_File_Name             32\n+#define  Pragma_Source_File_Name_Project     33\n+#define  Pragma_Style_Checks                 34\n+#define  Pragma_Suppress                     35\n+#define  Pragma_Suppress_Exception_Locations 36\n+#define  Pragma_Task_Dispatching_Policy      37\n+#define  Pragma_Universal_Data               38\n+#define  Pragma_Unsuppress                   39\n+#define  Pragma_Use_VADS_Size                40\n+#define  Pragma_Validity_Checks              41\n+#define  Pragma_Warnings                     42\n \n /* Remaining pragmas */\n \n-#define  Pragma_Abort_Defer                  42\n-#define  Pragma_All_Calls_Remote             43\n-#define  Pragma_Annotate                     44\n-#define  Pragma_Assert                       45\n-#define  Pragma_Asynchronous                 46\n-#define  Pragma_Atomic                       47\n-#define  Pragma_Atomic_Components            48\n-#define  Pragma_Attach_Handler               49\n-#define  Pragma_Comment                      50\n-#define  Pragma_Common_Object                51\n-#define  Pragma_Complex_Representation       52\n-#define  Pragma_Controlled                   53\n-#define  Pragma_Convention                   54\n-#define  Pragma_CPP_Class                    55\n-#define  Pragma_CPP_Constructor              56\n-#define  Pragma_CPP_Virtual                  57\n-#define  Pragma_CPP_Vtable                   58\n-#define  Pragma_Debug                        59\n-#define  Pragma_Elaborate                    60\n-#define  Pragma_Elaborate_All                61\n-#define  Pragma_Elaborate_Body               62\n-#define  Pragma_Export                       63\n-#define  Pragma_Export_Exception             64\n-#define  Pragma_Export_Function              65\n-#define  Pragma_Export_Object                66\n-#define  Pragma_Export_Procedure             67\n-#define  Pragma_Export_Value                 68\n-#define  Pragma_Export_Valued_Procedure      69\n-#define  Pragma_External                     70\n-#define  Pragma_Finalize_Storage_Only        71\n-#define  Pragma_Ident                        72\n-#define  Pragma_Import                       73\n-#define  Pragma_Import_Exception             74\n-#define  Pragma_Import_Function              75\n-#define  Pragma_Import_Object                76\n-#define  Pragma_Import_Procedure             77\n-#define  Pragma_Import_Valued_Procedure      78\n-#define  Pragma_Inline                       79\n-#define  Pragma_Inline_Always                80\n-#define  Pragma_Inline_Generic               81\n-#define  Pragma_Inspection_Point             82\n-#define  Pragma_Interface                    83\n-#define  Pragma_Interface_Name               84\n-#define  Pragma_Interrupt_Handler            85\n-#define  Pragma_Interrupt_Priority           86\n-#define  Pragma_Java_Constructor             87\n-#define  Pragma_Java_Interface               88\n-#define  Pragma_Keep_Names                   89\n-#define  Pragma_Link_With                    90\n-#define  Pragma_Linker_Alias                 91\n-#define  Pragma_Linker_Options               92\n-#define  Pragma_Linker_Section               93\n-#define  Pragma_List                         94\n-#define  Pragma_Machine_Attribute            95\n-#define  Pragma_Main                         96\n-#define  Pragma_Main_Storage                 97\n-#define  Pragma_Memory_Size                  98\n-#define  Pragma_No_Return                    99\n-#define  Pragma_Obsolescent                 100\n-#define  Pragma_Optimize                    101\n-#define  Pragma_Optional_Overriding         102\n-#define  Pragma_Overriding                  103\n-#define  Pragma_Pack                        104\n-#define  Pragma_Page                        105\n-#define  Pragma_Passive                     106\n-#define  Pragma_Preelaborate                107\n-#define  Pragma_Priority                    108\n-#define  Pragma_Psect_Object                109\n-#define  Pragma_Pure                        110\n-#define  Pragma_Pure_Function               111\n-#define  Pragma_Remote_Call_Interface       112\n-#define  Pragma_Remote_Types                113\n-#define  Pragma_Share_Generic               114\n-#define  Pragma_Shared                      115\n-#define  Pragma_Shared_Passive              116\n-#define  Pragma_Source_Reference            117\n-#define  Pragma_Stream_Convert              118\n-#define  Pragma_Subtitle                    119\n-#define  Pragma_Suppress_All                120\n-#define  Pragma_Suppress_Debug_Info         121\n-#define  Pragma_Suppress_Initialization     122\n-#define  Pragma_System_Name                 123\n-#define  Pragma_Task_Info                   124\n-#define  Pragma_Task_Name                   125\n-#define  Pragma_Task_Storage                126\n-#define  Pragma_Thread_Body                 127\n-#define  Pragma_Time_Slice                  128\n-#define  Pragma_Title                       129\n-#define  Pragma_Unchecked_Union             130\n-#define  Pragma_Unimplemented_Unit          131\n-#define  Pragma_Unreferenced                132\n-#define  Pragma_Unreserve_All_Interrupts    133\n-#define  Pragma_Volatile                    134\n-#define  Pragma_Volatile_Components         135\n-#define  Pragma_Weak_External               136\n+#define  Pragma_Abort_Defer                  43\n+#define  Pragma_All_Calls_Remote             44\n+#define  Pragma_Annotate                     45\n+#define  Pragma_Assert                       46\n+#define  Pragma_Asynchronous                 47\n+#define  Pragma_Atomic                       48\n+#define  Pragma_Atomic_Components            49\n+#define  Pragma_Attach_Handler               50\n+#define  Pragma_Comment                      51\n+#define  Pragma_Common_Object                52\n+#define  Pragma_Complex_Representation       53\n+#define  Pragma_Controlled                   54\n+#define  Pragma_Convention                   55\n+#define  Pragma_CPP_Class                    56\n+#define  Pragma_CPP_Constructor              57\n+#define  Pragma_CPP_Virtual                  58\n+#define  Pragma_CPP_Vtable                   59\n+#define  Pragma_Debug                        60\n+#define  Pragma_Elaborate                    61\n+#define  Pragma_Elaborate_All                62\n+#define  Pragma_Elaborate_Body               63\n+#define  Pragma_Export                       64\n+#define  Pragma_Export_Exception             65\n+#define  Pragma_Export_Function              66\n+#define  Pragma_Export_Object                67\n+#define  Pragma_Export_Procedure             68\n+#define  Pragma_Export_Value                 69\n+#define  Pragma_Export_Valued_Procedure      70\n+#define  Pragma_External                     71\n+#define  Pragma_Finalize_Storage_Only        72\n+#define  Pragma_Ident                        73\n+#define  Pragma_Import                       74\n+#define  Pragma_Import_Exception             75\n+#define  Pragma_Import_Function              76\n+#define  Pragma_Import_Object                77\n+#define  Pragma_Import_Procedure             78\n+#define  Pragma_Import_Valued_Procedure      79\n+#define  Pragma_Inline                       80\n+#define  Pragma_Inline_Always                81\n+#define  Pragma_Inline_Generic               82\n+#define  Pragma_Inspection_Point             83\n+#define  Pragma_Interface                    84\n+#define  Pragma_Interface_Name               85\n+#define  Pragma_Interrupt_Handler            86\n+#define  Pragma_Interrupt_Priority           87\n+#define  Pragma_Java_Constructor             88\n+#define  Pragma_Java_Interface               89\n+#define  Pragma_Keep_Names                   90\n+#define  Pragma_Link_With                    91\n+#define  Pragma_Linker_Alias                 92\n+#define  Pragma_Linker_Options               93\n+#define  Pragma_Linker_Section               94\n+#define  Pragma_List                         95\n+#define  Pragma_Machine_Attribute            96\n+#define  Pragma_Main                         97\n+#define  Pragma_Main_Storage                 98\n+#define  Pragma_Memory_Size                  99\n+#define  Pragma_No_Return                   100\n+#define  Pragma_Obsolescent                 101\n+#define  Pragma_Optimize                    102\n+#define  Pragma_Optional_Overriding         103\n+#define  Pragma_Overriding                  104\n+#define  Pragma_Pack                        105\n+#define  Pragma_Page                        106\n+#define  Pragma_Passive                     107\n+#define  Pragma_Preelaborate                108\n+#define  Pragma_Priority                    109\n+#define  Pragma_Psect_Object                110\n+#define  Pragma_Pure                        111\n+#define  Pragma_Pure_Function               112\n+#define  Pragma_Remote_Call_Interface       113\n+#define  Pragma_Remote_Types                114\n+#define  Pragma_Share_Generic               115\n+#define  Pragma_Shared                      116\n+#define  Pragma_Shared_Passive              117\n+#define  Pragma_Source_Reference            118\n+#define  Pragma_Stream_Convert              119\n+#define  Pragma_Subtitle                    120\n+#define  Pragma_Suppress_All                121\n+#define  Pragma_Suppress_Debug_Info         122\n+#define  Pragma_Suppress_Initialization     123\n+#define  Pragma_System_Name                 124\n+#define  Pragma_Task_Info                   125\n+#define  Pragma_Task_Name                   126\n+#define  Pragma_Task_Storage                127\n+#define  Pragma_Thread_Body                 128\n+#define  Pragma_Time_Slice                  129\n+#define  Pragma_Title                       130\n+#define  Pragma_Unchecked_Union             131\n+#define  Pragma_Unimplemented_Unit          132\n+#define  Pragma_Unreferenced                133\n+#define  Pragma_Unreserve_All_Interrupts    134\n+#define  Pragma_Volatile                    135\n+#define  Pragma_Volatile_Components         136\n+#define  Pragma_Weak_External               137\n \n /* The following are deliberately out of alphabetical order, see Snames */\n \n-#define  Pragma_AST_Entry                   137\n-#define  Pragma_Storage_Size                138\n-#define  Pragma_Storage_Unit                139\n+#define  Pragma_AST_Entry                   138\n+#define  Pragma_Storage_Size                139\n+#define  Pragma_Storage_Unit                140\n \n /* Define the numeric values for the conventions.  */\n "}, {"sha": "30d5d43471d456b21fd810bb83b178fe3383e7af", "filename": "gcc/ada/stylesw.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fstylesw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fstylesw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -134,7 +134,6 @@ package body Stylesw is\n    procedure Set_Style_Check_Options (Options : String) is\n       OK : Boolean;\n       EC : Natural;\n-\n    begin\n       Set_Style_Check_Options (Options, OK, EC);\n    end Set_Style_Check_Options;\n@@ -194,6 +193,9 @@ package body Stylesw is\n             when 'n' =>\n                Style_Check_Standard         := True;\n \n+            when 'N' =>\n+               Reset_Style_Check_Options;\n+\n             when 'M' =>\n                Style_Max_Line_Length := 0;\n "}, {"sha": "249274f52a7ce120e28b96ce8a7f26f5fe7b0710", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -441,6 +441,11 @@ begin\n    Write_Line (\"        s    check separate subprogram specs present\");\n    Write_Line (\"        t    check token separation rules\");\n \n+   --  Lines for -gnatyN switch\n+\n+   Write_Switch_Char (\"yN\");\n+   Write_Line (\"Cancel all previously set style checks\");\n+\n    --  Lines for -gnatz switch\n \n    Write_Switch_Char (\"z\");"}, {"sha": "caba275c142894fc2d7a32810fb4a21423169f4b", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0717349d7cb5660d38c281ab6c65d5e01fa8fc/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=2e0717349d7cb5660d38c281ab6c65d5e01fa8fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1761,6 +1761,8 @@ package VMS_Data is\n                                                \"-gnatyl \"                  &\n                                             \"LINE_LENGTH \"                 &\n                                                \"-gnatym \"                  &\n+                                            \"NONE \"                        &\n+                                               \"-gnatyN \"                  &\n                                             \"STANDARD_CASING \"             &\n                                                \"-gnatyn \"                  &\n                                             \"ORDERED_SUBPROGRAMS \"         &\n@@ -1975,6 +1977,8 @@ package VMS_Data is\n    --                           for possible special treatment of 80 character\n    --                           lines.\n    --\n+   --      NONE                 Clear any previously set style checks.\n+   --\n    --      ORDERED_SUBPROGRAMS  Check order of subprogram bodies.\n    --                           All subprogram bodies in a given scope (e.g.\n    --                           a package body) must be in alphabetical order."}]}