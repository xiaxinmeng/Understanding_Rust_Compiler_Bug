{"sha": "3f125532e6f26606080d77738c0a385a20733a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxMjU1MzJlNmYyNjYwNjA4MGQ3NzczOGMwYTM4NWEyMDczM2EzOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-07-07T15:05:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-07-07T15:05:42Z"}, "message": "reload1.c (choose_reload_regs): Use mode sizes to check whether an old reload register completely defines the...\n\ngcc/\n\t* reload1.c (choose_reload_regs): Use mode sizes to check whether\n\tan old reload register completely defines the required value.\n\ngcc/testsuite/\n\t* gcc.target/arm/neon-modes-3.c: New test.\n\nFrom-SVN: r175980", "tree": {"sha": "6f2e7b2cf8b1f451a373dc4079e5fa18afb1c51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f2e7b2cf8b1f451a373dc4079e5fa18afb1c51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f125532e6f26606080d77738c0a385a20733a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f125532e6f26606080d77738c0a385a20733a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f125532e6f26606080d77738c0a385a20733a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f125532e6f26606080d77738c0a385a20733a39/comments", "author": null, "committer": null, "parents": [{"sha": "30af957b3ff2ab4acc1c72c8e27a28c3a98a1289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30af957b3ff2ab4acc1c72c8e27a28c3a98a1289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30af957b3ff2ab4acc1c72c8e27a28c3a98a1289"}], "stats": {"total": 86, "additions": 73, "deletions": 13}, "files": [{"sha": "ea7c24b94b7a01323c9cefae69da6f4d199c3fd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f125532e6f26606080d77738c0a385a20733a39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f125532e6f26606080d77738c0a385a20733a39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f125532e6f26606080d77738c0a385a20733a39", "patch": "@@ -1,3 +1,8 @@\n+2011-07-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* reload1.c (choose_reload_regs): Use mode sizes to check whether\n+\tan old reload register completely defines the required value.\n+\n 2011-07-07  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_unary_loc): Do not strip sign-changes"}, {"sha": "499412c0ba418068c60f539c5d7e9e4fe41e6523", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f125532e6f26606080d77738c0a385a20733a39/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f125532e6f26606080d77738c0a385a20733a39/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=3f125532e6f26606080d77738c0a385a20733a39", "patch": "@@ -6481,6 +6481,8 @@ choose_reload_regs (struct insn_chain *chain)\n \n \t      if (regno >= 0\n \t\t  && reg_last_reload_reg[regno] != 0\n+\t\t  && (GET_MODE_SIZE (GET_MODE (reg_last_reload_reg[regno]))\n+\t\t      >= GET_MODE_SIZE (mode) + byte)\n #ifdef CANNOT_CHANGE_MODE_CLASS\n \t\t  /* Verify that the register it's in can be used in\n \t\t     mode MODE.  */\n@@ -6492,24 +6494,12 @@ choose_reload_regs (struct insn_chain *chain)\n \t\t{\n \t\t  enum reg_class rclass = rld[r].rclass, last_class;\n \t\t  rtx last_reg = reg_last_reload_reg[regno];\n-\t\t  enum machine_mode need_mode;\n \n \t\t  i = REGNO (last_reg);\n \t\t  i += subreg_regno_offset (i, GET_MODE (last_reg), byte, mode);\n \t\t  last_class = REGNO_REG_CLASS (i);\n \n-\t\t  if (byte == 0)\n-\t\t    need_mode = mode;\n-\t\t  else\n-\t\t    need_mode\n-\t\t      = smallest_mode_for_size\n-\t\t        (GET_MODE_BITSIZE (mode) + byte * BITS_PER_UNIT,\n-\t\t\t GET_MODE_CLASS (mode) == MODE_PARTIAL_INT\n-\t\t\t ? MODE_INT : GET_MODE_CLASS (mode));\n-\n-\t\t  if ((GET_MODE_SIZE (GET_MODE (last_reg))\n-\t\t       >= GET_MODE_SIZE (need_mode))\n-\t\t      && reg_reloaded_contents[i] == regno\n+\t\t  if (reg_reloaded_contents[i] == regno\n \t\t      && TEST_HARD_REG_BIT (reg_reloaded_valid, i)\n \t\t      && HARD_REGNO_MODE_OK (i, rld[r].mode)\n \t\t      && (TEST_HARD_REG_BIT (reg_class_contents[(int) rclass], i)"}, {"sha": "9c5f80a31b59c38445c7bc91bf5880c5ea32db31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f125532e6f26606080d77738c0a385a20733a39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f125532e6f26606080d77738c0a385a20733a39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f125532e6f26606080d77738c0a385a20733a39", "patch": "@@ -1,3 +1,7 @@\n+2011-07-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/arm/neon-modes-3.c: New test.\n+\n 2011-07-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/graphite/pr37485.c (dg-options): Add -fno-loop-strip-mine"}, {"sha": "fe8187570b5685d66b71bd16f36ab1f22d1b7914", "filename": "gcc/testsuite/gcc.target/arm/neon-modes-3.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f125532e6f26606080d77738c0a385a20733a39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-modes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f125532e6f26606080d77738c0a385a20733a39/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-modes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-modes-3.c?ref=3f125532e6f26606080d77738c0a385a20733a39", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+void f1 (volatile float32x4_t *dest, volatile float32x4x4_t *src, int n)\n+{\n+  float32x4x4_t a5, a6, a7, a8, a9;\n+  int i;\n+\n+  a5 = *src;\n+  a6 = *src;\n+  a7 = *src;\n+  a8 = *src;\n+  a9 = *src;\n+  while (n--)\n+    {\n+      for (i = 0; i < 8; i++)\n+\t{\n+\t  float32x4x4_t a0, a1, a2, a3, a4;\n+\n+\t  a0 = *src;\n+\t  a1 = *src;\n+\t  a2 = *src;\n+\t  a3 = *src;\n+\t  a4 = *src;\n+\t  *src = a0;\n+\t  *dest = a0.val[0];\n+\t  *dest = a0.val[3];\n+\t  *src = a1;\n+\t  *dest = a1.val[0];\n+\t  *dest = a1.val[3];\n+\t  *src = a2;\n+\t  *dest = a2.val[0];\n+\t  *dest = a2.val[3];\n+\t  *src = a3;\n+\t  *dest = a3.val[0];\n+\t  *dest = a3.val[3];\n+\t  *src = a4;\n+\t  *dest = a4.val[0];\n+\t  *dest = a4.val[3];\n+\t}\n+      *src = a5;\n+      *dest = a5.val[0];\n+      *dest = a5.val[3];\n+      *src = a6;\n+      *dest = a6.val[0];\n+      *dest = a6.val[3];\n+      *src = a7;\n+      *dest = a7.val[0];\n+      *dest = a7.val[3];\n+      *src = a8;\n+      *dest = a8.val[0];\n+      *dest = a8.val[3];\n+      *src = a9;\n+      *dest = a9.val[0];\n+      *dest = a9.val[3];\n+    }\n+}"}]}