{"sha": "4091894c314fb61a74c1798dc55c1dbd0568362e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA5MTg5NGMzMTRmYjYxYTc0YzE3OThkYzU1YzFkYmQwNTY4MzYyZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-12-05T19:25:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-12-05T19:25:48Z"}, "message": "DR 543, [Ready].\n\n2006-12-05  Paolo Carlini  <pcarlini@suse.de>\n\n\tDR 543, [Ready].\n\t* include/bits/slice_array.h (slice::slice()): Implement the\n\tresolution.\n\t* include/bits/gslice.h (gslice::_Indexer::_Indexer()): Add.\n\t(gslice::gslice()): Use it.\n\t* testsuite/26_numerics/valarray/dr543.cc: New.\n\t* docs/html/ext/howto.html: Add an entry for DR 543.\n\nFrom-SVN: r119552", "tree": {"sha": "9b800f96aaf5df5ba35a62b48ee1768f69197664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b800f96aaf5df5ba35a62b48ee1768f69197664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4091894c314fb61a74c1798dc55c1dbd0568362e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4091894c314fb61a74c1798dc55c1dbd0568362e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4091894c314fb61a74c1798dc55c1dbd0568362e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4091894c314fb61a74c1798dc55c1dbd0568362e/comments", "author": null, "committer": null, "parents": [{"sha": "58660eb32cbccdf0a464141b58c5d668096b503a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58660eb32cbccdf0a464141b58c5d668096b503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58660eb32cbccdf0a464141b58c5d668096b503a"}], "stats": {"total": 91, "additions": 79, "deletions": 12}, "files": [{"sha": "fd16bb44dd04c999a75b892aa3b008c9e5185f17", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4091894c314fb61a74c1798dc55c1dbd0568362e", "patch": "@@ -1,3 +1,13 @@\n+2006-12-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tDR 543, [Ready].\n+\t* include/bits/slice_array.h (slice::slice()): Implement the\n+\tresolution.\n+\t* include/bits/gslice.h (gslice::_Indexer::_Indexer()): Add.\n+\t(gslice::gslice()): Use it.\n+\t* testsuite/26_numerics/valarray/dr543.cc: New.\n+\t* docs/html/ext/howto.html: Add an entry for DR 543.\n+\n 2006-12-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/tr1/tuple: Consistent include guards."}, {"sha": "800f286da59bb399bae69f6d6c9395742d162670", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=4091894c314fb61a74c1798dc55c1dbd0568362e", "patch": "@@ -594,6 +594,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         input_iterator' value_type.\n     </dd>\n \n+    <dt><a href=\"lwg-active.html#543\">543</a>:\n+        <em>valarray slice default constructor</em>\n+    </dt>\n+    <dd>Follow the straightforward proposed resolution.\n+    </dd>\n+\n     <dt><a href=\"lwg-active.html#586\">586</a>:\n         <em>string inserter not a formatted function</em>\n     </dt>"}, {"sha": "1afda4b407dc4658b689fc340012d165b92c7510", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=4091894c314fb61a74c1798dc55c1dbd0568362e", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- gslice class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   {\n   public:\n     ///  Construct an empty slice.\n-    gslice ();\n+    gslice();\n \n     /**\n      *  @brief  Construct a slice.\n@@ -108,8 +108,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       valarray<size_t> _M_size;\n       valarray<size_t> _M_stride;\n       valarray<size_t> _M_index; // Linear array of referenced indices\n+\n+      _Indexer()\n+      : _M_count(1), _M_start(0), _M_size(), _M_stride(), _M_index() {}\n+\n       _Indexer(size_t, const valarray<size_t>&,\n \t       const valarray<size_t>&);\n+\n       void\n       _M_increment_use()\n       { ++_M_count; }\n@@ -125,26 +130,31 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   };\n \n   inline size_t\n-  gslice::start () const\n+  gslice::start() const\n   { return _M_index ? _M_index->_M_start : 0; }\n \n   inline valarray<size_t>\n-  gslice::size () const\n+  gslice::size() const\n   { return _M_index ? _M_index->_M_size : valarray<size_t>(); }\n \n   inline valarray<size_t>\n-  gslice::stride () const\n+  gslice::stride() const\n   { return _M_index ? _M_index->_M_stride : valarray<size_t>(); }\n \n-  inline gslice::gslice () : _M_index(0) {}\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 543. valarray slice default constructor\n+  inline\n+  gslice::gslice()\n+  : _M_index(new gslice::_Indexer()) {}\n \n   inline\n   gslice::gslice(size_t __o, const valarray<size_t>& __l,\n \t\t const valarray<size_t>& __s)\n   : _M_index(new gslice::_Indexer(__o, __l, __s)) {}\n \n   inline\n-  gslice::gslice(const gslice& __g) : _M_index(__g._M_index)\n+  gslice::gslice(const gslice& __g)\n+  : _M_index(__g._M_index)\n   { if (_M_index) _M_index->_M_increment_use(); }\n \n   inline\n@@ -155,7 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   inline gslice&\n-  gslice::operator= (const gslice& __g)\n+  gslice::operator=(const gslice& __g)\n   {\n     if (__g._M_index)\n       __g._M_index->_M_increment_use();"}, {"sha": "d9ffad5b0fa8b9bea7acd36df7e4002541b06a86", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=4091894c314fb61a74c1798dc55c1dbd0568362e", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- slice_array class.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -83,10 +83,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     size_t _M_st;\t\t\t// stride unit\n   };\n \n-  // The default constructor constructor is not required to initialize\n-  // data members with any meaningful values, so we choose to do nothing.\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 543. valarray slice default constructor\n   inline\n-  slice::slice() {}\n+  slice::slice() \n+  : _M_off(0), _M_sz(0), _M_st(0) {}\n \n   inline\n   slice::slice(size_t __o, size_t __d, size_t __s)"}, {"sha": "9afa93a4b834992934d88384a202a1fbe955ce1e", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/dr543.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr543.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4091894c314fb61a74c1798dc55c1dbd0568362e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr543.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fdr543.cc?ref=4091894c314fb61a74c1798dc55c1dbd0568362e", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+// DR 543. valarray slice default constructor\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::valarray<int> v1(10);\n+  std::valarray<int> v2 = v1[std::slice()];\n+  VERIFY( v2.size() == 0 );\n+\n+  std::valarray<int> v3(10);\n+  std::valarray<int> v4 = v3[std::gslice()];\n+  VERIFY( v4.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}