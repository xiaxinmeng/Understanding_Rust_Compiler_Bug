{"sha": "20d0bfcefd6caf09c23113732edd98241a46af56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBkMGJmY2VmZDZjYWYwOWMyMzExMzczMmVkZDk4MjQxYTQ2YWY1Ng==", "commit": {"author": {"name": "Alessandro Fanfarillo", "email": "fanfarillo.gcc@gmail.com", "date": "2016-07-05T15:33:06Z"}, "committer": {"name": "Alessandro Fanfarillo", "email": "afanfa@gcc.gnu.org", "date": "2016-07-05T15:33:06Z"}, "message": "Second review of STAT= patch + tests\n\nFrom-SVN: r238007", "tree": {"sha": "ec27aaef1b5d3d90fcdc003d50d5ed2169894af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec27aaef1b5d3d90fcdc003d50d5ed2169894af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20d0bfcefd6caf09c23113732edd98241a46af56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d0bfcefd6caf09c23113732edd98241a46af56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20d0bfcefd6caf09c23113732edd98241a46af56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20d0bfcefd6caf09c23113732edd98241a46af56/comments", "author": null, "committer": null, "parents": [{"sha": "1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1174b21b388ba06e8cebfaa2d0a4cc7a026475ad"}], "stats": {"total": 196, "additions": 177, "deletions": 19}, "files": [{"sha": "ed6b40b1408209fdd508b80e31b0a137116d3096", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -1,3 +1,16 @@\n+2016-07-05  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\n+\t* array.c (gfc_match_array_ref): Add parsing support for\n+\tSTAT= attribute in CAF reference.\n+\t* expr.c (gfc_find_stat_co): New function that returns\n+\tthe STAT= assignment.\n+\t* gfortran.h (gfc_array_ref): New member.\n+\t* trans-decl.c (gfc_build_builtin_function_decls):\n+\tnew attribute for caf_get and caf_send functions.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Passing\n+\tthe stat attribute to external function.\n+\t(gfc_conv_intrinsic_caf_send): Ditto.\n+\n 2016-07-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/71623"}, {"sha": "03c8b17178c014339647da62a7b2170b2e18e6c0", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -156,6 +156,8 @@ gfc_match_array_ref (gfc_array_ref *ar, gfc_array_spec *as, int init,\n {\n   match m;\n   bool matched_bracket = false;\n+  gfc_expr *tmp;\n+  bool stat_just_seen = false;\n \n   memset (ar, '\\0', sizeof (*ar));\n \n@@ -220,12 +222,27 @@ gfc_match_array_ref (gfc_array_ref *ar, gfc_array_spec *as, int init,\n \treturn MATCH_ERROR;\n     }\n \n+  ar->stat = NULL;\n+\n   for (ar->codimen = 0; ar->codimen + ar->dimen < GFC_MAX_DIMENSIONS; ar->codimen++)\n     {\n       m = match_subscript (ar, init, true);\n       if (m == MATCH_ERROR)\n \treturn MATCH_ERROR;\n \n+      stat_just_seen = false;\n+      if (gfc_match(\" , stat = %e\",&tmp) == MATCH_YES && ar->stat == NULL)\n+\t{\n+\t  ar->stat = tmp;\n+\t  stat_just_seen = true;\n+\t}\n+\n+      if (ar->stat && !stat_just_seen)\n+\t{\n+\t  gfc_error (\"STAT= attribute in %C misplaced\");\n+\t  return MATCH_ERROR;\n+\t}\n+\n       if (gfc_match_char (']') == MATCH_YES)\n \t{\n \t  ar->codimen++;"}, {"sha": "7328898f2b6479cd3d8d501f492a9b3e87b50f82", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -4428,6 +4428,23 @@ gfc_ref_this_image (gfc_ref *ref)\n   return true;\n }\n \n+gfc_expr *\n+gfc_find_stat_co(gfc_expr *e)\n+{\n+  gfc_ref *ref;\n+\n+  for (ref = e->ref; ref; ref = ref->next)\n+    if (ref->type == REF_ARRAY && ref->u.ar.codimen > 0)\n+      return ref->u.ar.stat;\n+\n+  if(e->value.function.actual->expr)\n+    for(ref = e->value.function.actual->expr->ref; ref;\n+\tref = ref->next)\n+      if (ref->type == REF_ARRAY && ref->u.ar.codimen > 0)\n+\treturn ref->u.ar.stat;\n+\n+  return NULL;\n+}\n \n bool\n gfc_is_coindexed (gfc_expr *e)"}, {"sha": "77831ab31e936561c05c407aa85848b1f9465b4c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -1814,6 +1814,7 @@ typedef struct gfc_array_ref\n   int dimen;\t\t\t/* # of components in the reference */\n   int codimen;\n   bool in_allocate;\t\t/* For coarray checks. */\n+  gfc_expr *stat;\n   locus where;\n   gfc_array_spec *as;\n \n@@ -3065,7 +3066,7 @@ bool gfc_is_coarray (gfc_expr *);\n int gfc_get_corank (gfc_expr *);\n bool gfc_has_ultimate_allocatable (gfc_expr *);\n bool gfc_has_ultimate_pointer (gfc_expr *);\n-\n+gfc_expr* gfc_find_stat_co (gfc_expr *);\n gfc_expr* gfc_build_intrinsic_call (gfc_namespace *, gfc_isym_id, const char*,\n \t\t\t\t    locus, unsigned, ...);\n bool gfc_check_vardef_context (gfc_expr*, bool, bool, bool, const char*);"}, {"sha": "f026bea5d866ee45fbd8b2849dccfd50d08f17b6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -3526,16 +3526,16 @@ gfc_build_builtin_function_decls (void)\n         ppvoid_type_node, pint_type, pchar_type_node, integer_type_node);\n \n       gfor_fndecl_caf_get = gfc_build_library_function_decl_with_spec (\n-\tget_identifier (PREFIX(\"caf_get\")), \".R.RRRW\", void_type_node, 9,\n+\tget_identifier (PREFIX(\"caf_get\")), \".R.RRRWW\", void_type_node, 10,\n         pvoid_type_node, size_type_node, integer_type_node, pvoid_type_node,\n \tpvoid_type_node, pvoid_type_node, integer_type_node, integer_type_node,\n-\tboolean_type_node);\n+\tboolean_type_node, pint_type);\n \n       gfor_fndecl_caf_send = gfc_build_library_function_decl_with_spec (\n-\tget_identifier (PREFIX(\"caf_send\")), \".R.RRRR\", void_type_node, 9,\n+\tget_identifier (PREFIX(\"caf_send\")), \".R.RRRRW\", void_type_node, 10,\n         pvoid_type_node, size_type_node, integer_type_node, pvoid_type_node,\n \tpvoid_type_node, pvoid_type_node, integer_type_node, integer_type_node,\n-\tboolean_type_node);\n+\tboolean_type_node, pint_type);\n \n       gfor_fndecl_caf_sendget = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_sendget\")), \".R.RRRR.RRR\", void_type_node,"}, {"sha": "c6555400a497523494b6c0f1e5e9ac5912b3f61a", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -1100,10 +1100,10 @@ static void\n gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n \t\t\t    tree may_require_tmp)\n {\n-  gfc_expr *array_expr;\n+  gfc_expr *array_expr, *tmp_stat;\n   gfc_se argse;\n   tree caf_decl, token, offset, image_index, tmp;\n-  tree res_var, dst_var, type, kind, vec;\n+  tree res_var, dst_var, type, kind, vec, stat;\n \n   gcc_assert (flag_coarray == GFC_FCOARRAY_LIB);\n \n@@ -1122,6 +1122,19 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n   dst_var = lhs;\n \n   vec = null_pointer_node;\n+  tmp_stat = gfc_find_stat_co(expr);\n+\n+  if (tmp_stat)\n+    {\n+      gfc_se stat_se;\n+      gfc_init_se(&stat_se, NULL);\n+      gfc_conv_expr_reference (&stat_se, tmp_stat);\n+      stat = stat_se.expr;\n+      gfc_add_block_to_block (&se->pre, &stat_se.pre);\n+      gfc_add_block_to_block (&se->post, &stat_se.post);\n+    }\n+  else\n+    stat = null_pointer_node;\n \n   gfc_init_se (&argse, NULL);\n   if (array_expr->rank == 0)\n@@ -1219,9 +1232,9 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n   ASM_VOLATILE_P (tmp) = 1;\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n-  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_get, 9,\n+  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_get, 10,\n \t\t\t     token, offset, image_index, argse.expr, vec,\n-\t\t\t     dst_var, kind, lhs_kind, may_require_tmp);\n+\t\t\t     dst_var, kind, lhs_kind, may_require_tmp, stat);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   if (se->ss)\n@@ -1237,11 +1250,11 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n \n static tree\n conv_caf_send (gfc_code *code) {\n-  gfc_expr *lhs_expr, *rhs_expr;\n+  gfc_expr *lhs_expr, *rhs_expr, *tmp_stat;\n   gfc_se lhs_se, rhs_se;\n   stmtblock_t block;\n   tree caf_decl, token, offset, image_index, tmp, lhs_kind, rhs_kind;\n-  tree may_require_tmp;\n+  tree may_require_tmp, stat;\n   tree lhs_type = NULL_TREE;\n   tree vec = null_pointer_node, rhs_vec = null_pointer_node;\n \n@@ -1253,6 +1266,8 @@ conv_caf_send (gfc_code *code) {\n \t\t    ? boolean_false_node : boolean_true_node;\n   gfc_init_block (&block);\n \n+  stat = null_pointer_node;\n+\n   /* LHS.  */\n   gfc_init_se (&lhs_se, NULL);\n   if (lhs_expr->rank == 0)\n@@ -1375,10 +1390,25 @@ conv_caf_send (gfc_code *code) {\n \n   rhs_kind = build_int_cst (integer_type_node, rhs_expr->ts.kind);\n \n+  tmp_stat = gfc_find_stat_co(lhs_expr);\n+\n+  if (tmp_stat)\n+    {\n+      gfc_se stat_se;\n+      gfc_init_se (&stat_se, NULL);\n+      gfc_conv_expr_reference (&stat_se, tmp_stat);\n+      stat = stat_se.expr;\n+      gfc_add_block_to_block (&block, &stat_se.pre);\n+      gfc_add_block_to_block (&block, &stat_se.post);\n+    }\n+  else\n+    stat = null_pointer_node;\n+\n   if (!gfc_is_coindexed (rhs_expr))\n-    tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_send, 9, token,\n-\t\t\t     offset, image_index, lhs_se.expr, vec,\n-\t\t\t     rhs_se.expr, lhs_kind, rhs_kind, may_require_tmp);\n+    tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_send, 10, token,\n+\t\t\t       offset, image_index, lhs_se.expr, vec,\n+\t\t\t       rhs_se.expr, lhs_kind, rhs_kind, may_require_tmp,\n+\t\t\t       stat);\n   else\n     {\n       tree rhs_token, rhs_offset, rhs_image_index;"}, {"sha": "944dbb66160fd2eb089a7ee1ea229b25a53b3b2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -1,3 +1,10 @@\n+2016-07-05  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\n+\t* gfortran.dg/coarray_stat_function.f90: New test.\n+\t* gfortran.dg/coarray_stat_whitespace.f90: New test.\n+\t* gfortran.dg/coarray_lib_comm_1: Adapting old test\n+\tto new interfaces.\n+\n 2016-07-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/71623"}, {"sha": "7b4d9375de586f0e3244c4a7c67bfacbf2320b0c", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_comm_1.f90", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -38,9 +38,8 @@\n if (any (A-B /= 0)) call abort\n end\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &parm.\\[0-9\\]+, 4, 4, 0\\\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &parm.\\[0-9\\]+, 4, 4, 1\\\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 1\\\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.1, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) b, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 0\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &parm.\\[0-9\\]+, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &parm.\\[0-9\\]+, 4, 4, 1, 0B\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 1, 0B\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.1, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) b, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_sendget \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, 4, 4, 0\\\\\\);\" 1 \"original\" } }\n-"}, {"sha": "c29687efbe2ef16c54fa325337bbfe488e92689d", "filename": "gcc/testsuite/gfortran.dg/coarray_stat_function.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_function.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_function.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_function.f90?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib\" }\n+!\n+program function_stat\n+  implicit none\n+\n+  integer :: me[*],tmp,stat,stat2,next\n+\n+  me = this_image()\n+  next = me + 1\n+  if(me == num_images()) next = 1\n+  stat = 0\n+\n+  sync all(stat=stat)\n+\n+  if(stat /= 0) write(*,*) 'Image failed during sync'\n+\n+  stat = 0\n+  if(me == 1) then\n+     tmp = func(me[4,stat=stat])\n+     if(stat /= 0) write(*,*) me,'failure in func arg'\n+   else if(me == 2) then\n+      tmp = func2(me[1,stat=stat2],me[3,stat=stat])\n+      if(stat2 /= 0 .or. stat /= 0) write(*,*) me,'failure in func2 args'\n+  endif\n+\n+contains\n+\n+  function func(remote_me)\n+    integer func\n+    integer remote_me\n+    func = remote_me\n+  end function func\n+\n+  function func2(remote_me,remote_neighbor)\n+    integer func2\n+    integer remote_me,remote_neighbor\n+    func2 = remote_me + remote_neighbor\n+  end function func2\n+  \n+end program function_stat\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) desc.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) me, 4, &desc.\\[0-9\\]+, 0B, &desc.\\[0-9\\]+, 4, 4, 0, &stat\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) desc.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) me, 1, &desc.\\[0-9\\]+, 0B, &desc.\\[0-9\\]+, 4, 4, 0, &stat2\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) desc.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) me, 3, &desc.\\[0-9\\]+, 0B, &desc.\\[0-9\\]+, 4, 4, 0, &stat\\\\\\);\" 1 \"original\" } }"}, {"sha": "aa790b996ef0da2da32c35c24c4c549c2563d98e", "filename": "gcc/testsuite/gfortran.dg/coarray_stat_whitespace.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_whitespace.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20d0bfcefd6caf09c23113732edd98241a46af56/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_whitespace.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_stat_whitespace.f90?ref=20d0bfcefd6caf09c23113732edd98241a46af56", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+!\n+! Support for stat= in caf reference\n+!\n+program whitespace\n+  implicit none\n+\n+  integer :: me[*],tmp,stat,i\n+\n+  me = this_image()\n+  stat = 0\n+  i = 1\n+\n+  sync all(stat = stat)\n+\n+  if(stat /= 0) write(*,*) 'failure during sync'\n+\n+  stat = 0\n+\n+  if(me == 1) then\n+     tmp = me[num_images(),stat = stat]\n+     if(stat /= 0) write(*,*) 'failure in img:',me\n+  else if(me == 2) then\n+     tmp = me[i,stat=stat]\n+     if(stat /= 0) write(*,*) 'failure in img:',me\n+  endif\n+\n+end program whitespace"}]}