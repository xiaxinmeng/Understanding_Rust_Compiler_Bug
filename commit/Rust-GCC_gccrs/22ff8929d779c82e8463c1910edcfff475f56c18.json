{"sha": "22ff8929d779c82e8463c1910edcfff475f56c18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmZjg5MjlkNzc5YzgyZTg0NjNjMTkxMGVkY2ZmZjQ3NWY1NmMxOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-26T22:54:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-26T22:54:38Z"}, "message": "Define std::chars_format enumeration type\n\nThis type isn't used anywhere yet, but will be needed for the\nfloating-point overloads of to_chars and from_chars.\n\n\t* include/std/charconv (chars_format): Define bitmask type.\n\t* testsuite/20_util/to_chars/chars_format.cc: New test.\n\nFrom-SVN: r272718", "tree": {"sha": "a320a706d4ad8c9f189a4a1bcbeefddb6afa30c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a320a706d4ad8c9f189a4a1bcbeefddb6afa30c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ff8929d779c82e8463c1910edcfff475f56c18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ff8929d779c82e8463c1910edcfff475f56c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ff8929d779c82e8463c1910edcfff475f56c18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ff8929d779c82e8463c1910edcfff475f56c18/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe0ddc88334f9afd622458653a6d103948994bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe0ddc88334f9afd622458653a6d103948994bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe0ddc88334f9afd622458653a6d103948994bd"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "2950221581608c07c9484515ab9d851cf6db0677", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ff8929d779c82e8463c1910edcfff475f56c18/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ff8929d779c82e8463c1910edcfff475f56c18/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22ff8929d779c82e8463c1910edcfff475f56c18", "patch": "@@ -1,5 +1,8 @@\n 2019-06-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/charconv (chars_format): Define bitmask type.\n+\t* testsuite/20_util/to_chars/chars_format.cc: New test.\n+\n \t* include/bits/fs_path.h (path::__is_encoded_char): Use __is_one_of.\n \t* include/std/bit (_If_is_unsigned_integer_type): Remove.\n \t(_If_is_unsigned_integer): Use __is_unsigned_integer."}, {"sha": "53aa63ea27792a1914ab89644c160bf79eca2288", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ff8929d779c82e8463c1910edcfff475f56c18/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ff8929d779c82e8463c1910edcfff475f56c18/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=22ff8929d779c82e8463c1910edcfff475f56c18", "patch": "@@ -616,6 +616,40 @@ namespace __detail\n       return __res;\n     }\n \n+  /// floating-point format for primitive numerical conversion\n+  enum class chars_format\n+  {\n+    scientific = 1, fixed = 2, hex = 4, general = fixed | scientific\n+  };\n+\n+  constexpr chars_format\n+  operator|(chars_format __lhs, chars_format __rhs) noexcept\n+  { return (chars_format)((unsigned)__lhs | (unsigned)__rhs); }\n+\n+  constexpr chars_format\n+  operator&(chars_format __lhs, chars_format __rhs) noexcept\n+  { return (chars_format)((unsigned)__lhs & (unsigned)__rhs); }\n+\n+  constexpr chars_format\n+  operator^(chars_format __lhs, chars_format __rhs) noexcept\n+  { return (chars_format)((unsigned)__lhs ^ (unsigned)__rhs); }\n+\n+  constexpr chars_format\n+  operator~(chars_format __fmt) noexcept\n+  { return (chars_format)~(unsigned)__fmt; }\n+\n+  constexpr chars_format&\n+  operator|=(chars_format& __lhs, chars_format __rhs) noexcept\n+  { return __lhs = __lhs | __rhs; }\n+\n+  constexpr chars_format&\n+  operator&=(chars_format& __lhs, chars_format __rhs) noexcept\n+  { return __lhs = __lhs & __rhs; }\n+\n+  constexpr chars_format&\n+  operator^=(chars_format& __lhs, chars_format __rhs) noexcept\n+  { return __lhs = __lhs ^ __rhs; }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++14"}, {"sha": "f343c58b0eb6690e854d81457cee703b7d9ed3c2", "filename": "libstdc++-v3/testsuite/20_util/to_chars/chars_format.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ff8929d779c82e8463c1910edcfff475f56c18/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fchars_format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ff8929d779c82e8463c1910edcfff475f56c18/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fchars_format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fchars_format.cc?ref=22ff8929d779c82e8463c1910edcfff475f56c18", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <charconv>\n+\n+// C++17 23.2.1 [utility.syn]\n+// chars_format is a bitmask type with elements scientific, fixed and hex\n+\n+using F = std::chars_format;\n+const F none = F{};\n+const F all = ~none;\n+static_assert(std::is_enum_v<F>);\n+static_assert((F::scientific & F::fixed) == none);\n+static_assert((F::scientific & F::hex) == none);\n+static_assert((F::fixed & F::hex) == none);\n+static_assert(F::general == (F::fixed | F::scientific));\n+static_assert(F::general == (F::fixed ^ F::scientific));\n+\n+// sanity check operators\n+static_assert((F::scientific & F::scientific) == F::scientific);\n+static_assert((F::fixed & F::fixed) == F::fixed);\n+static_assert((F::hex & F::hex) == F::hex);\n+static_assert((F::general & F::general) == F::general);\n+static_assert((F::scientific | F::scientific) == F::scientific);\n+static_assert((F::fixed | F::fixed) == F::fixed);\n+static_assert((F::hex | F::hex) == F::hex);\n+static_assert((F::general | F::general) == F::general);\n+static_assert((F::scientific ^ F::scientific) == none);\n+static_assert((F::fixed ^ F::fixed) == none);\n+static_assert((F::hex ^ F::hex) == none);\n+static_assert((F::general ^ F::general) == none);\n+static_assert((F::fixed & all) == F::fixed);\n+static_assert((F::hex & all) == F::hex);\n+static_assert((F::general & all) == F::general);\n+static_assert(~all == none);"}]}