{"sha": "4eec34e5a495ea71ff735c58e0ac6030a6db553c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlYzM0ZTVhNDk1ZWE3MWZmNzM1YzU4ZTBhYzYwMzBhNmRiNTUzYw==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-27T10:08:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-27T10:08:33Z"}, "message": "[multiple changes]\n\n2003-11-27  Dalibor Topic <robilad@kaffe.org>\n\n\t* java/text/FieldPosition.java (equals): Adapted to handle\n\tfield_attribute. Added fast-circuit check for comparison to self.\n\tReplaced use of instanceof by getClass to fix symmetry for derived\n\ttypes.\n\t(toString): Adapted to handle field_attribute. Improved readability.\n\t(hashCode): New method.\n\n2003-11-27  Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/text/FieldPosition.java (field_attribute): New field.\n\t(FieldPosition (Format.Field), FieldPosition(Format.Field, int),\n\tgetFieldAttribute): New methods.\n\nFrom-SVN: r73988", "tree": {"sha": "c2bdc3b8394f16e21eb8b45b26236303d929d75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2bdc3b8394f16e21eb8b45b26236303d929d75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eec34e5a495ea71ff735c58e0ac6030a6db553c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eec34e5a495ea71ff735c58e0ac6030a6db553c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eec34e5a495ea71ff735c58e0ac6030a6db553c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eec34e5a495ea71ff735c58e0ac6030a6db553c/comments", "author": null, "committer": null, "parents": [{"sha": "95f5c6a243531ccb6b102cadbd52c91fe4f265b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f5c6a243531ccb6b102cadbd52c91fe4f265b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f5c6a243531ccb6b102cadbd52c91fe4f265b6"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "a7a388d5ddab382384afa8cbef046d9b294fc8e0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eec34e5a495ea71ff735c58e0ac6030a6db553c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eec34e5a495ea71ff735c58e0ac6030a6db553c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4eec34e5a495ea71ff735c58e0ac6030a6db553c", "patch": "@@ -1,3 +1,18 @@\n+2003-11-27  Dalibor Topic <robilad@kaffe.org>\n+\n+\t* java/text/FieldPosition.java (equals): Adapted to handle\n+\tfield_attribute. Added fast-circuit check for comparison to self.\n+\tReplaced use of instanceof by getClass to fix symmetry for derived\n+\ttypes.\n+\t(toString): Adapted to handle field_attribute. Improved readability.\n+\t(hashCode): New method.\n+\n+2003-11-27  Guilhem Lavaux <guilhem@kaffe.org>\n+\n+\t* java/text/FieldPosition.java (field_attribute): New field.\n+\t(FieldPosition (Format.Field), FieldPosition(Format.Field, int),\n+\tgetFieldAttribute): New methods.\n+\n 2003-11-27  Guilhem Lavaux <guilhem@kaffe.org>\n \n \t* java/text/DecimalFormatSymbols.java (locale): New field."}, {"sha": "56f19cde68201720c6a01f7755852849773a2420", "filename": "libjava/java/text/FieldPosition.java", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eec34e5a495ea71ff735c58e0ac6030a6db553c/libjava%2Fjava%2Ftext%2FFieldPosition.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eec34e5a495ea71ff735c58e0ac6030a6db553c/libjava%2Fjava%2Ftext%2FFieldPosition.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FFieldPosition.java?ref=4eec34e5a495ea71ff735c58e0ac6030a6db553c", "patch": "@@ -64,6 +64,38 @@\n    */\n   private int end;\n \n+  /**\n+   * This is the field attribute value.\n+   */\n+  private Format.Field field_attribute;\n+\n+  /**\n+   * This method initializes a new instance of <code>FieldPosition</code>\n+   * to have the specified field attribute. The attribute will be used as\n+   * an id.\n+   *\n+   * @param field The field format attribute.\n+   */\n+  public FieldPosition (Format.Field field)\n+  {\n+    this.field_attribute = field;\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>FieldPosition</code>\n+   * to have the specified field attribute. The attribute will be used as\n+   * an id is non null. The integer field id is only used if the Format.Field\n+   * attribute is not used by the formatter.\n+   *\n+   * @param field The field format attribute.\n+   * @param field_id The field identifier value.\n+   */\n+  public FieldPosition (Format.Field field, int field_id)\n+  {\n+    this.field_attribute = field;\n+    this.field_id = field_id;\n+  }\n+\n   /**\n    * This method initializes a new instance of <code>FieldPosition</code> to\n    * have the specified field id.\n@@ -85,6 +117,11 @@ public int getField ()\n     return field_id;\n   }\n \n+  public Format.Field getFieldAttribute ()\n+  {\n+    return field_attribute;\n+  }\n+\n   /**\n    * This method returns the beginning index for this field.\n    *\n@@ -132,8 +169,8 @@ public void setEndIndex (int end)\n    * <ul>\n    * <li>The specified object is not <code>null</code>.\n    * <li>The specified object is an instance of <code>FieldPosition</code>.\n-   * <li>The specified object has the same field identifier and beginning\n-   * and ending index as this object.\n+   * <li>The specified object has the same field identifier, field attribute \n+   * and beginning and ending index as this object.\n    * </ul>\n    *\n    * @param obj The object to test for equality to this object.\n@@ -143,15 +180,40 @@ public void setEndIndex (int end)\n    */\n   public boolean equals (Object obj)\n   {\n-    if (! (obj instanceof FieldPosition))\n+    if (this == obj)\n+      return true;\n+\n+    if (obj == null || obj.getClass() != this.getClass())\n       return false;\n \n     FieldPosition fp = (FieldPosition) obj;\n     return (field_id == fp.field_id\n+\t    && (field_attribute == fp.field_attribute \n+\t\t|| (field_attribute != null \n+\t\t    && field_attribute.equals(fp.field_attribute)))\n \t    && begin == fp.begin\n \t    && end == fp.end);\n   }\n \n+\n+  /**\n+   * This method returns a hash value for this object\n+   * \n+   * @return A hash value for this object.\n+   */\n+  public int hashCode ()\n+  {\n+    int hash = 5;\n+\n+    hash = 31 * hash + field_id;\n+    hash = 31 * hash + begin;\n+    hash = 31 * hash + end;\n+    hash = 31 * hash + \n+      (null == field_attribute ? 0 : field_attribute.hashCode());\n+\n+    return hash;\n+  }\n+\n   /**\n    * This method returns a <code>String</code> representation of this\n    * object.\n@@ -160,7 +222,11 @@ public boolean equals (Object obj)\n    */\n   public String toString ()\n   {\n-    return (getClass ().getName () + \"[field=\" + getField () + \",beginIndex=\"\n-\t    + getBeginIndex () + \",endIndex=\" + getEndIndex () + \"]\");\n+    return (getClass ().getName ()\n+\t    + \"[field=\" + getField ()\n+\t    + \",attribute=\" + getFieldAttribute ()\n+\t    + \",beginIndex=\" + getBeginIndex () \n+\t    + \",endIndex=\" + getEndIndex () \n+\t    + \"]\");\n   }\n }"}]}