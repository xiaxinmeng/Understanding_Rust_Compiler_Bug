{"sha": "6c208acd84403e4b98b780e8a6e8ed46bf765e46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyMDhhY2Q4NDQwM2U0Yjk4Yjc4MGU4YTZlOGVkNDZiZjc2NWU0Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-07-29T18:40:45Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-07-29T18:40:45Z"}, "message": "profile.c: Add file comment describing the overall algorithm and structures.\n\n\t* profile.c: Add file comment describing the overall algorithm and\n\tstructures.\n\t(struct edge_info): Add comments.\n\t(struct bb_info): Add comments.\n\t* basic-block.h (EDGE_*): Add comments.\n\t* doc/gcov.texi (Gcov Data Files): Document bit flags.\n\nFrom-SVN: r55842", "tree": {"sha": "e199ba3c591b9f03a67f3f435503afb1315dbc13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e199ba3c591b9f03a67f3f435503afb1315dbc13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c208acd84403e4b98b780e8a6e8ed46bf765e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c208acd84403e4b98b780e8a6e8ed46bf765e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c208acd84403e4b98b780e8a6e8ed46bf765e46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c208acd84403e4b98b780e8a6e8ed46bf765e46/comments", "author": null, "committer": null, "parents": [{"sha": "624f0d6033f211962065a7a7d5561603326d0d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624f0d6033f211962065a7a7d5561603326d0d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/624f0d6033f211962065a7a7d5561603326d0d3e"}], "stats": {"total": 122, "additions": 96, "deletions": 26}, "files": [{"sha": "6d0731f83bb0923114ec0a7e42fedbb13fe91ea3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c208acd84403e4b98b780e8a6e8ed46bf765e46", "patch": "@@ -1,3 +1,12 @@\n+2002-07-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* profile.c: Add file comment describing the overall algorithm and\n+\tstructures.\n+\t(struct edge_info): Add comments.\n+\t(struct bb_info): Add comments.\n+\t* basic-block.h (EDGE_*): Add comments.\n+\t* doc/gcov.texi (Gcov Data Files): Document bit flags.\n+\n 2002-07-29  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/elf.h, config/xtensa/linux.h"}, {"sha": "507fac043139e4d64b74becd83290c8c070aafeb", "filename": "gcc/basic-block.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=6c208acd84403e4b98b780e8a6e8ed46bf765e46", "patch": "@@ -135,13 +135,16 @@ typedef struct edge_def {\n \t\t\t\t   in profile.c  */\n } *edge;\n \n-#define EDGE_FALLTHRU\t\t1\n-#define EDGE_ABNORMAL\t\t2\n-#define EDGE_ABNORMAL_CALL\t4\n-#define EDGE_EH\t\t\t8\n-#define EDGE_FAKE\t\t16\n-#define EDGE_DFS_BACK\t\t32\n-#define EDGE_CAN_FALLTHRU\t64\n+#define EDGE_FALLTHRU\t\t1\t/* 'Straight line' flow */\n+#define EDGE_ABNORMAL\t\t2\t/* Strange flow, like computed\n+\t\t\t\t\t   label, or eh */\n+#define EDGE_ABNORMAL_CALL\t4\t/* Call with abnormal exit\n+\t\t\t\t\t   like an exception, or sibcall */\n+#define EDGE_EH\t\t\t8\t/* Exception throw */\n+#define EDGE_FAKE\t\t16\t/* Not a real edge (profile.c) */\n+#define EDGE_DFS_BACK\t\t32\t/* A backwards edge */\n+#define EDGE_CAN_FALLTHRU\t64\t/* Candidate for straight line\n+\t\t\t\t\t   flow. */\n \n #define EDGE_COMPLEX\t(EDGE_ABNORMAL | EDGE_ABNORMAL_CALL | EDGE_EH)\n "}, {"sha": "6b0fd82d85240757eddb44a006c9eb4acb26a7df", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=6c208acd84403e4b98b780e8a6e8ed46bf765e46", "patch": "@@ -348,12 +348,13 @@ functions within those files, and line numbers corresponding to each\n basic block in the source file.\n \n The @file{.bb} file format consists of several lists of 4-byte integers\n-which correspond to the line numbers of each basic block in the\n-file.  Each list is terminated by a line number of 0.  A line number of @minus{}1\n-is used to designate that the source file name (padded to a 4-byte\n-boundary and followed by another @minus{}1) follows.  In addition, a line number\n-of @minus{}2 is used to designate that the name of a function (also padded to a\n-4-byte boundary and followed by a @minus{}2) follows.\n+which correspond to the line numbers of each basic block in the file.\n+Each list is terminated by a line number of 0.  A line number of\n+@minus{}1 is used to designate that the source file name (padded to a\n+4-byte boundary and followed by another @minus{}1) follows.  In\n+addition, a line number of @minus{}2 is used to designate that the name\n+of a function (also padded to a 4-byte boundary and followed by a\n+@minus{}2) follows.\n \n The @file{.bbg} file is used to reconstruct the program flow graph for\n the source file.  It contains a list of the program flow arcs (possible\n@@ -388,14 +389,31 @@ correctly.\n The function name is stored as a @minus{}1 (4 bytes), the length (4 bytes),\n the name itself (padded to 4-byte boundary) followed by a @minus{}1 (4 bytes).\n \n+The flags are defined as follows:\n+@itemize\n+@item bit0 \n+On function spanning tree\n+\n+@item bit1\n+Is a fake edge\n+\n+@item bit2\n+Is the fall through edge from one block to its immediate successor.\n+\n+@item bit3-bit31\n+For future expansion\n+\n+@end itemize\n+\n The @file{.da} file is generated when a program containing object files\n built with the GCC @option{-fprofile-arcs} option is executed.  A\n separate @file{.da} file is created for each source file compiled with\n this option, and the name of the @file{.da} file is stored as an\n absolute pathname in the resulting object file.  This path name is\n derived from the source file name by substituting a @file{.da} suffix.\n \n-The @file{.da} consists of several blocks (one for each run) with the following structure:\n+The @file{.da} consists of several blocks (one for each run) with the\n+following structure:\n @smallexample\n         \"magic\" number @minus{}123 (4-byte number)\n \tnumber of functions (4-byte number)"}, {"sha": "489e3770f0bd07c92cca867d1ab898ec507fd15d", "filename": "gcc/profile.c", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c208acd84403e4b98b780e8a6e8ed46bf765e46/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=6c208acd84403e4b98b780e8a6e8ed46bf765e46", "patch": "@@ -22,6 +22,40 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+/* Generate basic block profile instrumentation and auxiliary files.\n+   Profile generation is optimized, so that not all arcs in the basic\n+   block graph need instrumenting. First, the BB graph is closed with\n+   one entry (function start), and one exit (function exit).  Any\n+   ABNORMAL_EDGE cannot be instrumented (because there is no control\n+   path to place the code). We close the graph by inserting fake\n+   EDGE_FAKE edges to the EXIT_BLOCK, from the sources of abnormal\n+   edges that do not go to the exit_block. We ignore such abnormal\n+   edges.  Naturally these fake edges are never directly traversed,\n+   and so *cannot* be directly instrumented.  Some other graph\n+   massaging is done. To optimize the instrumentation we generate the\n+   BB minimal span tree, only edges that are not on the span tree\n+   (plus the entry point) need instrumenting. From that information\n+   all other edge counts can be deduced.  By construction all fake\n+   edges must be on the spanning tree. We also attempt to place\n+   EDGE_CRITICAL edges on the spanning tree.\n+\n+   The two auxiliary files generated are <dumpbase>.bb and\n+   <dumpbase>.bbg. The former contains the BB->linenumber\n+   mappings, and the latter describes the BB graph.\n+\n+   The BB file contains line numbers for each block. For each basic\n+   block, a zero count is output (to mark the start of a block), then\n+   the line numbers of that block are listed. A zero ends the file\n+   too.\n+\n+   The BBG file contains a count of the blocks, followed by edge\n+   information, for every edge in the graph. The edge information\n+   lists the source and target block numbers, and a bit mask\n+   describing the type of edge.\n+\n+   The BB and BBG file formats are fully described in the gcov\n+   documentation.  */\n+\n /* ??? Register allocation should use basic block execution counts to\n    give preference to the most commonly executed blocks.  */\n \n@@ -54,18 +88,24 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n \n /* Additional information about the edges we need.  */\n-struct edge_info\n-  {\n-    unsigned int count_valid : 1;\n-    unsigned int on_tree : 1;\n-    unsigned int ignore : 1;\n-  };\n-struct bb_info\n-  {\n-    unsigned int count_valid : 1;\n-    gcov_type succ_count;\n-    gcov_type pred_count;\n-  };\n+struct edge_info {\n+  unsigned int count_valid : 1;\n+  \n+  /* Is on the spanning tree. */\n+  unsigned int on_tree : 1;\n+  \n+  /* Pretend this edge does not exist (it is abnormal and we've\n+     inserted a fake to compensate). */\n+  unsigned int ignore : 1;\n+};\n+\n+struct bb_info {\n+  unsigned int count_valid : 1;\n+\n+  /* Number of successor and predecessor edges. */\n+  gcov_type succ_count;\n+  gcov_type pred_count;\n+};\n \n #define EDGE_INFO(e)  ((struct edge_info *) (e)->aux)\n #define BB_INFO(b)  ((struct bb_info *) (b)->aux)"}]}