{"sha": "d168aaeed942c2193519d7b732443972a32c04fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2OGFhZWVkOTQyYzIxOTM1MTlkN2I3MzI0NDM5NzJhMzJjMDRmYQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2012-06-01T07:55:39Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2012-06-01T07:55:39Z"}, "message": "Allow --specs options.\n\n2012-05-30  Christian Bruel  <christian.bruel@st.com>\n\n\t* gcc.c (save_switch): Add user_p parameter.\n\t(read_specs): Likewise.\n\t(set_specs): Likewise.\n\t(validate_switches): Likewise.\n\t(validate_switches_from_spec): Likewise.\n\t(validate_all_switches): Pass on user_p parameter.\n\t(struct spec_list): Add user_p field.\n\t(struct switchstr): Add known field.\n\t(save_switch): Add known parameter.\n\t(INIT_STATIC_SPEC): Initialize user_p;\n\t(driver_unknown_option_callbac): call save_switch if\n\tOPT_SPECIAL_unknown.\n\t(driver_handle_option): Propagate OPT_specs.\n\t(do_spec_1): Set validated only if known.\n\t(check_live_switch): Likewise.\n\t(validate_switches): Set validated if known or user_spec.\n\nFrom-SVN: r188102", "tree": {"sha": "683d52ec97f6eaf14dda62d2b80d7f5dbe9cce6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/683d52ec97f6eaf14dda62d2b80d7f5dbe9cce6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d168aaeed942c2193519d7b732443972a32c04fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d168aaeed942c2193519d7b732443972a32c04fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d168aaeed942c2193519d7b732443972a32c04fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d168aaeed942c2193519d7b732443972a32c04fa/comments", "author": null, "committer": null, "parents": [{"sha": "46014ce2c30fb53b1fb01bcdf075c38cf216a78b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46014ce2c30fb53b1fb01bcdf075c38cf216a78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46014ce2c30fb53b1fb01bcdf075c38cf216a78b"}], "stats": {"total": 165, "additions": 115, "deletions": 50}, "files": [{"sha": "25bf994c2c9ab22d0c3009169109f5dfc3a60af9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d168aaeed942c2193519d7b732443972a32c04fa", "patch": "@@ -1,3 +1,22 @@\n+2012-06-01  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* gcc.c (save_switch): Add user_p parameter.\n+\t(read_specs): Likewise.\n+\t(set_specs): Likewise.\n+\t(validate_switches): Likewise.\n+\t(validate_switches_from_spec): Likewise.\n+\t(validate_all_switches): Pass on user_p parameter.\n+\t(struct spec_list): Add user_p field.\n+\t(struct switchstr): Add known field.\n+\t(save_switch): Add known parameter.\n+\t(INIT_STATIC_SPEC): Initialize user_p;\n+\t(driver_unknown_option_callbac): call save_switch if\n+\tOPT_SPECIAL_unknown.\n+\t(driver_handle_option): Propagate OPT_specs.\n+\t(do_spec_1): Set validated only if known.\n+\t(check_live_switch): Likewise.\n+\t(validate_switches): Set validated if known or user_spec.\n+\n 2012-06-01  Hans-Peter Nilsson  <hp@axis.com>\n \n \tAdd CRIS atomic patterns for 1, 2, and 4 bytes."}, {"sha": "116cf5d49b4a0e53405d5fe86fbf5eb398e075cc", "filename": "gcc/gcc.c", "status": "modified", "additions": 72, "deletions": 50, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d168aaeed942c2193519d7b732443972a32c04fa", "patch": "@@ -190,8 +190,8 @@ static void init_spec (void);\n static void store_arg (const char *, int, int);\n static void insert_wrapper (const char *);\n static char *load_specs (const char *);\n-static void read_specs (const char *, int);\n-static void set_spec (const char *, const char *);\n+static void read_specs (const char *, bool, bool);\n+static void set_spec (const char *, const char *, bool);\n static struct compiler *lookup_compiler (const char *, size_t, const char *);\n static char *build_search_list (const struct path_prefix *, const char *,\n \t\t\t\tbool, bool);\n@@ -227,9 +227,9 @@ static void do_option_spec (const char *, const char *);\n static void do_self_spec (const char *);\n static const char *find_file (const char *);\n static int is_directory (const char *, bool);\n-static const char *validate_switches (const char *);\n+static const char *validate_switches (const char *, bool);\n static void validate_all_switches (void);\n-static inline void validate_switches_from_spec (const char *);\n+static inline void validate_switches_from_spec (const char *, bool);\n static void give_switch (int, int);\n static int used_arg (const char *, int);\n static int default_arg (const char *, int);\n@@ -1171,11 +1171,12 @@ struct spec_list\n   const char **ptr_spec;\t/* pointer to the spec itself.  */\n   struct spec_list *next;\t/* Next spec in linked list.  */\n   int name_len;\t\t\t/* length of the name */\n-  int alloc_p;\t\t\t/* whether string was allocated */\n+  bool user_p;\t\t\t/* whether string come from file spec.  */\n+  bool alloc_p;\t\t\t/* whether string was allocated */\n };\n \n #define INIT_STATIC_SPEC(NAME,PTR) \\\n-{ NAME, NULL, PTR, (struct spec_list *) 0, sizeof (NAME) - 1, 0 }\n+  { NAME, NULL, PTR, (struct spec_list *) 0, sizeof (NAME) - 1, false, false }\n \n /* List of statically defined specs.  */\n static struct spec_list static_specs[] =\n@@ -1479,7 +1480,7 @@ init_spec (void)\n    current spec.  */\n \n static void\n-set_spec (const char *name, const char *spec)\n+set_spec (const char *name, const char *spec, bool user_p)\n {\n   struct spec_list *sl;\n   const char *old_spec;\n@@ -1531,7 +1532,8 @@ set_spec (const char *name, const char *spec)\n   if (old_spec && sl->alloc_p)\n     free (CONST_CAST(char *, old_spec));\n \n-  sl->alloc_p = 1;\n+  sl->user_p = user_p;\n+  sl->alloc_p = true;\n }\n \f\n /* Accumulate a command (program name and args), and run it.  */\n@@ -1687,7 +1689,7 @@ load_specs (const char *filename)\n    Anything invalid in the file is a fatal error.  */\n \n static void\n-read_specs (const char *filename, int main_p)\n+read_specs (const char *filename, bool main_p, bool user_p)\n {\n   char *buffer;\n   char *p;\n@@ -1736,7 +1738,7 @@ read_specs (const char *filename, int main_p)\n \n \t      p[-2] = '\\0';\n \t      new_filename = find_a_file (&startfile_prefixes, p1, R_OK, true);\n-\t      read_specs (new_filename ? new_filename : p1, FALSE);\n+\t      read_specs (new_filename ? new_filename : p1, false, user_p);\n \t      continue;\n \t    }\n \t  else if (!strncmp (p1, \"%include_noerr\", sizeof \"%include_noerr\" - 1)\n@@ -1757,7 +1759,7 @@ read_specs (const char *filename, int main_p)\n \t      p[-2] = '\\0';\n \t      new_filename = find_a_file (&startfile_prefixes, p1, R_OK, true);\n \t      if (new_filename)\n-\t\tread_specs (new_filename, FALSE);\n+\t\tread_specs (new_filename, false, user_p);\n \t      else if (verbose_flag)\n \t\tfnotice (stderr, \"could not find specs file %s\\n\", p1);\n \t      continue;\n@@ -1834,7 +1836,7 @@ read_specs (const char *filename, int main_p)\n #endif\n \t\t}\n \n-\t      set_spec (p2, *(sl->ptr_spec));\n+\t      set_spec (p2, *(sl->ptr_spec), user_p);\n \t      if (sl->alloc_p)\n \t\tfree (CONST_CAST (char *, *(sl->ptr_spec)));\n \n@@ -1900,7 +1902,7 @@ read_specs (const char *filename, int main_p)\n \t  if (! strcmp (suffix, \"*link_command\"))\n \t    link_command_spec = spec;\n \t  else\n-\t    set_spec (suffix + 1, spec);\n+\t    set_spec (suffix + 1, spec, user_p);\n \t}\n       else\n \t{\n@@ -2820,8 +2822,9 @@ struct switchstr\n   const char *part1;\n   const char **args;\n   unsigned int live_cond;\n-  unsigned char validated;\n-  unsigned char ordering;\n+  bool known;\n+  bool validated;\n+  bool ordering;\n };\n \n static struct switchstr *switches;\n@@ -3087,11 +3090,11 @@ alloc_switch (void)\n }\n \n /* Save an option OPT with N_ARGS arguments in array ARGS, marking it\n-   as validated if VALIDATED.  */\n+   as validated if VALIDATED and KNOWN if it is an internal switch.  */\n \n static void\n save_switch (const char *opt, size_t n_args, const char *const *args,\n-\t     bool validated)\n+\t     bool validated, bool known)\n {\n   alloc_switch ();\n   switches[n_switches].part1 = opt + 1;\n@@ -3106,6 +3109,7 @@ save_switch (const char *opt, size_t n_args, const char *const *args,\n \n   switches[n_switches].live_cond = 0;\n   switches[n_switches].validated = validated;\n+  switches[n_switches].known = known;\n   switches[n_switches].ordering = 0;\n   n_switches++;\n }\n@@ -3124,7 +3128,15 @@ driver_unknown_option_callback (const struct cl_decoded_option *decoded)\n \t diagnosed only if there are warnings.  */\n       save_switch (decoded->canonical_option[0],\n \t\t   decoded->canonical_option_num_elements - 1,\n-\t\t   &decoded->canonical_option[1], false);\n+\t\t   &decoded->canonical_option[1], false, true);\n+      return false;\n+    }\n+  if (decoded->opt_index == OPT_SPECIAL_unknown)\n+    {\n+      /* Give it a chance to define it a a spec file.  */\n+      save_switch (decoded->canonical_option[0],\n+\t\t   decoded->canonical_option_num_elements - 1,\n+\t\t   &decoded->canonical_option[1], false, false);\n       return false;\n     }\n   else\n@@ -3151,7 +3163,7 @@ driver_wrong_lang_callback (const struct cl_decoded_option *decoded,\n   else\n     save_switch (decoded->canonical_option[0],\n \t\t decoded->canonical_option_num_elements - 1,\n-\t\t &decoded->canonical_option[1], false);\n+\t\t &decoded->canonical_option[1], false, true);\n }\n \n static const char *spec_lang = 0;\n@@ -3294,7 +3306,7 @@ driver_handle_option (struct gcc_options *opts,\n \tcompare_debug_opt = NULL;\n       else\n \tcompare_debug_opt = arg;\n-      save_switch (compare_debug_replacement_opt, 0, NULL, validated);\n+      save_switch (compare_debug_replacement_opt, 0, NULL, validated, true);\n       return true;\n \n     case OPT_Wa_:\n@@ -3379,12 +3391,12 @@ driver_handle_option (struct gcc_options *opts,\n     case OPT_L:\n       /* Similarly, canonicalize -L for linkers that may not accept\n \t separate arguments.  */\n-      save_switch (concat (\"-L\", arg, NULL), 0, NULL, validated);\n+      save_switch (concat (\"-L\", arg, NULL), 0, NULL, validated, true);\n       return true;\n \n     case OPT_F:\n       /* Likewise -F.  */\n-      save_switch (concat (\"-F\", arg, NULL), 0, NULL, validated);\n+      save_switch (concat (\"-F\", arg, NULL), 0, NULL, validated, true);\n       return true;\n \n     case OPT_save_temps:\n@@ -3427,7 +3439,7 @@ driver_handle_option (struct gcc_options *opts,\n \t  user_specs_head = user;\n \tuser_specs_tail = user;\n       }\n-      do_save = false;\n+      validated = true;\n       break;\n \n     case OPT__sysroot_:\n@@ -3506,7 +3518,7 @@ driver_handle_option (struct gcc_options *opts,\n       save_temps_prefix = xstrdup (arg);\n       /* On some systems, ld cannot handle \"-o\" without a space.  So\n \t split the option from its argument.  */\n-      save_switch (\"-o\", 1, &arg, validated);\n+      save_switch (\"-o\", 1, &arg, validated, true);\n       return true;\n \n     case OPT_static_libgcc:\n@@ -3529,7 +3541,7 @@ driver_handle_option (struct gcc_options *opts,\n   if (do_save)\n     save_switch (decoded->canonical_option[0],\n \t\t decoded->canonical_option_num_elements - 1,\n-\t\t &decoded->canonical_option[1], validated);\n+\t\t &decoded->canonical_option[1], validated, true);\n   return true;\n }\n \n@@ -3822,7 +3834,7 @@ process_command (unsigned int decoded_options_count,\n \t    }\n \t  else\n \t    fname = xstrdup (arg);\n- \n+\n           if (strcmp (fname, \"-\") != 0 && access (fname, F_OK) < 0)\n \t    perror_with_name (fname);\n           else\n@@ -3956,7 +3968,8 @@ process_command (unsigned int decoded_options_count,\n \t\t\t\t\t   NULL);\n       switches[n_switches].args = 0;\n       switches[n_switches].live_cond = 0;\n-      switches[n_switches].validated = 0;\n+      switches[n_switches].validated = false;\n+      switches[n_switches].known = false;\n       switches[n_switches].ordering = 0;\n       n_switches++;\n       compare_debug = 1;\n@@ -4331,7 +4344,7 @@ do_self_spec (const char *spec)\n \t      save_switch (decoded_options[j].canonical_option[0],\n \t\t\t   (decoded_options[j].canonical_option_num_elements\n \t\t\t    - 1),\n-\t\t\t   &decoded_options[j].canonical_option[1], false);\n+\t\t\t   &decoded_options[j].canonical_option[1], false, true);\n \t      break;\n \n \t    default:\n@@ -5204,7 +5217,11 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    && (have_wildcard || switches[i].part1[len] == '\\0'))\n \t\t  {\n \t\t    switches[i].live_cond |= switch_option;\n-\t\t    switches[i].validated = 1;\n+\t\t    /* User switch be validated from validate_all_switches.\n+\t\t       when the definition is seen from the spec file.\n+\t\t       If not defined anywhere, will be rejected.  */\n+\t\t    if (switches[i].known)\n+\t\t      switches[i].validated = true;\n \t\t  }\n \n \t      p += len;\n@@ -5817,7 +5834,7 @@ check_live_switch (int switchnum, int prefix_length)\n       for (i = switchnum + 1; i < n_switches; i++)\n \tif (switches[i].part1[0] == 'O')\n \t  {\n-\t    switches[switchnum].validated = 1;\n+\t    switches[switchnum].validated = true;\n \t    switches[switchnum].live_cond = SWITCH_FALSE;\n \t    return 0;\n \t  }\n@@ -5831,7 +5848,9 @@ check_live_switch (int switchnum, int prefix_length)\n \t    if (switches[i].part1[0] == name[0]\n \t\t&& ! strcmp (&switches[i].part1[1], &name[4]))\n \t      {\n-\t\tswitches[switchnum].validated = 1;\n+\t\t/* --specs are validated with the validate_switches mechanism.  */\n+\t\tif (switches[switchnum].known)\n+\t\t  switches[switchnum].validated = true;\n \t\tswitches[switchnum].live_cond = SWITCH_FALSE;\n \t\treturn 0;\n \t      }\n@@ -5846,7 +5865,9 @@ check_live_switch (int switchnum, int prefix_length)\n \t\t&& switches[i].part1[3] == '-'\n \t\t&& !strcmp (&switches[i].part1[4], &name[1]))\n \t      {\n-\t\tswitches[switchnum].validated = 1;\n+\t\t/* --specs are validated with the validate_switches mechanism.  */\n+\t\tif (switches[switchnum].known)\n+\t\t  switches[switchnum].validated = true;\n \t\tswitches[switchnum].live_cond = SWITCH_FALSE;\n \t\treturn 0;\n \t      }\n@@ -5910,7 +5931,7 @@ give_switch (int switchnum, int omit_first_word)\n     }\n \n   do_spec_1 (\" \", 0, NULL);\n-  switches[switchnum].validated = 1;\n+  switches[switchnum].validated = true;\n }\n \f\n /* Search for a file named NAME trying various prefixes including the\n@@ -6278,7 +6299,7 @@ main (int argc, char **argv)\n   specs_file = find_a_file (&startfile_prefixes, \"specs\", R_OK, true);\n   /* Read the specs file unless it is a default one.  */\n   if (specs_file != 0 && strcmp (specs_file, \"specs\"))\n-    read_specs (specs_file, TRUE);\n+    read_specs (specs_file, true, false);\n   else\n     init_spec ();\n \n@@ -6291,7 +6312,7 @@ main (int argc, char **argv)\n   strcat (specs_file, just_machine_suffix);\n   strcat (specs_file, \"specs\");\n   if (access (specs_file, R_OK) == 0)\n-    read_specs (specs_file, TRUE);\n+    read_specs (specs_file, true, false);\n \n   /* Process any configure-time defaults specified for the command line\n      options, via OPTION_DEFAULT_SPECS.  */\n@@ -6335,7 +6356,7 @@ main (int argc, char **argv)\n     {\n       obstack_grow (&obstack, \"%(sysroot_spec) \", strlen (\"%(sysroot_spec) \"));\n       obstack_grow0 (&obstack, link_spec, strlen (link_spec));\n-      set_spec (\"link\", XOBFINISH (&obstack, const char *));\n+      set_spec (\"link\", XOBFINISH (&obstack, const char *), false);\n     }\n #endif\n \n@@ -6411,7 +6432,7 @@ main (int argc, char **argv)\n     {\n       char *filename = find_a_file (&startfile_prefixes, uptr->filename,\n \t\t\t\t    R_OK, true);\n-      read_specs (filename ? filename : uptr->filename, FALSE);\n+      read_specs (filename ? filename : uptr->filename, false, true);\n     }\n \n   /* Process any user self specs.  */\n@@ -6506,11 +6527,11 @@ main (int argc, char **argv)\n       xputenv (XOBFINISH (&collect_obstack, char *));\n     }\n \n-  /* Warn about any switches that no pass was interested in.  */\n+  /* Reject switches that no pass was interested in.  */\n \n   for (i = 0; (int) i < n_switches; i++)\n     if (! switches[i].validated)\n-      error (\"unrecognized option %<-%s%>\", switches[i].part1);\n+      error (\"unrecognized command line option %<-%s%>\", switches[i].part1);\n \n   /* Obey some of the options.  */\n \n@@ -7050,14 +7071,14 @@ perror_with_name (const char *name)\n }\n \f\n static inline void\n-validate_switches_from_spec (const char *spec)\n+validate_switches_from_spec (const char *spec, bool user)\n {\n   const char *p = spec;\n   char c;\n   while ((c = *p++))\n     if (c == '%' && (*p == '{' || *p == '<' || (*p == 'W' && *++p == '{')))\n       /* We have a switch spec.  */\n-      p = validate_switches (p + 1);\n+      p = validate_switches (p + 1, user);\n }\n \n static void\n@@ -7067,20 +7088,20 @@ validate_all_switches (void)\n   struct spec_list *spec;\n \n   for (comp = compilers; comp->spec; comp++)\n-    validate_switches_from_spec (comp->spec);\n+    validate_switches_from_spec (comp->spec, false);\n \n   /* Look through the linked list of specs read from the specs file.  */\n   for (spec = specs; spec; spec = spec->next)\n-    validate_switches_from_spec (*spec->ptr_spec);\n+    validate_switches_from_spec (*spec->ptr_spec, spec->user_p);\n \n-  validate_switches_from_spec (link_command_spec);\n+  validate_switches_from_spec (link_command_spec, false);\n }\n \n /* Look at the switch-name that comes after START\n    and mark as valid all supplied switches that match it.  */\n \n static const char *\n-validate_switches (const char *start)\n+validate_switches (const char *start, bool user_spec)\n {\n   const char *p = start;\n   const char *atom;\n@@ -7117,8 +7138,9 @@ validate_switches (const char *start)\n       /* Mark all matching switches as valid.  */\n       for (i = 0; i < n_switches; i++)\n \tif (!strncmp (switches[i].part1, atom, len)\n-\t    && (starred || switches[i].part1[len] == 0))\n-\t  switches[i].validated = 1;\n+\t    && (starred || switches[i].part1[len] == '\\0')\n+\t    && (switches[i].known || user_spec))\n+\t      switches[i].validated = true;\n     }\n \n   if (*p) p++;\n@@ -7133,9 +7155,9 @@ validate_switches (const char *start)\n \t    {\n \t      p++;\n \t      if (*p == '{' || *p == '<')\n-\t\tp = validate_switches (p+1);\n+\t\tp = validate_switches (p+1, user_spec);\n \t      else if (p[0] == 'W' && p[1] == '{')\n-\t\tp = validate_switches (p+2);\n+\t\tp = validate_switches (p+2, user_spec);\n \t    }\n \t  else\n \t    p++;\n@@ -8065,7 +8087,7 @@ include_spec_function (int argc, const char **argv)\n     abort ();\n \n   file = find_a_file (&startfile_prefixes, argv[0], R_OK, true);\n-  read_specs (file ? file : argv[0], FALSE);\n+  read_specs (file ? file : argv[0], false, false);\n \n   return NULL;\n }"}, {"sha": "56bc07071cade390c39f064eb95b60c0449bdca6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d168aaeed942c2193519d7b732443972a32c04fa", "patch": "@@ -1,3 +1,8 @@\n+2012-06-01  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* gcc.dg/spec-options.c: New test.\n+\t* gcc.dg/foo.specs: New file.\n+\n 2012-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/53517"}, {"sha": "8819249fa34057c74db26922ff263174ffc05cd5", "filename": "gcc/testsuite/gcc.dg/foo.specs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Ftestsuite%2Fgcc.dg%2Ffoo.specs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Ftestsuite%2Fgcc.dg%2Ffoo.specs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffoo.specs?ref=d168aaeed942c2193519d7b732443972a32c04fa", "patch": "@@ -0,0 +1,2 @@\n+*cppruntime:\n++ %{tfoo: -DFOO}"}, {"sha": "1f9d8c1fd84afe2d7e45ad778449234eb4281151", "filename": "gcc/testsuite/gcc.dg/spec-options.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Ftestsuite%2Fgcc.dg%2Fspec-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d168aaeed942c2193519d7b732443972a32c04fa/gcc%2Ftestsuite%2Fgcc.dg%2Fspec-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspec-options.c?ref=d168aaeed942c2193519d7b732443972a32c04fa", "patch": "@@ -0,0 +1,17 @@\n+/* Check that -mfoo is accepted if defined in a user spec\n+   and that it is not passed on the command line.  */\n+/* Must be processed in EXTRA_SPECS to run.  */\n+/* { dg-do run { target sh*-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-B${srcdir}/gcc.dg --specs=foo.specs -tfoo\" } */\n+\n+extern void abort(void);\n+\n+int main(void)\n+{\n+#ifdef FOO\n+  return 0;\n+#else\n+  abort();\n+#endif\n+}"}]}