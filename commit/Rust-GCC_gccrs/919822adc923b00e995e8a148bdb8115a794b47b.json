{"sha": "919822adc923b00e995e8a148bdb8115a794b47b", "node_id": "C_kwDOANBUbNoAKDkxOTgyMmFkYzkyM2IwMGU5OTVlOGExNDhiZGI4MTE1YTc5NGI0N2I", "commit": {"author": {"name": "Joel Holdsworth", "email": "jholdsworth@nvidia.com", "date": "2022-05-28T19:16:01Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-05-28T19:17:39Z"}, "message": "[PATCH 1/2] avr: Added AVR-DA and DB MCU series\n\ngcc/\n\t* config/avr/avr-mcus.def: Add device definitions.\n\t* doc/avr-mmcu.texi: Corresponding changes.\n\t* config/avr/gen-avr-mmcu-texi.cc: Added support for avr\n\tdevice prefix.\n\t* config/avr/gen-avr-mmcu-specs.cc: Prevent -mmcu=avr* flags\n\tfrom leaking into cc1.\n\nSigned-off-by: Joel Holdsworth <jholdsworth@nvidia.com>", "tree": {"sha": "56d8e532d575c38acf9fc264ce74ce4a7493389a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56d8e532d575c38acf9fc264ce74ce4a7493389a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/919822adc923b00e995e8a148bdb8115a794b47b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919822adc923b00e995e8a148bdb8115a794b47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/919822adc923b00e995e8a148bdb8115a794b47b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919822adc923b00e995e8a148bdb8115a794b47b/comments", "author": {"login": "jhol", "id": 1449493, "node_id": "MDQ6VXNlcjE0NDk0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1449493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhol", "html_url": "https://github.com/jhol", "followers_url": "https://api.github.com/users/jhol/followers", "following_url": "https://api.github.com/users/jhol/following{/other_user}", "gists_url": "https://api.github.com/users/jhol/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhol/subscriptions", "organizations_url": "https://api.github.com/users/jhol/orgs", "repos_url": "https://api.github.com/users/jhol/repos", "events_url": "https://api.github.com/users/jhol/events{/privacy}", "received_events_url": "https://api.github.com/users/jhol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3803f9cbb67efef7462589fe50d00b404356bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3803f9cbb67efef7462589fe50d00b404356bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3803f9cbb67efef7462589fe50d00b404356bc9"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "fa5e6685227249114a5f407f51bba4eb3a5de80c", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=919822adc923b00e995e8a148bdb8115a794b47b", "patch": "@@ -306,6 +306,14 @@ AVR_MCU (\"atxmega16c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega16C4__\"\n AVR_MCU (\"atxmega32a4u\",     ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32A4U__\", 0x2000, 0x0, 0x9000, 0)\n AVR_MCU (\"atxmega32c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32C4__\",  0x2000, 0x0, 0x9000, 0)\n AVR_MCU (\"atxmega32e5\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32E5__\",  0x2000, 0x0, 0x9000, 0)\n+AVR_MCU (\"avr64da28\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DA28__\",    0x6000, 0x0, 0x8000, 0x10000)\n+AVR_MCU (\"avr64da32\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DA32__\",    0x6000, 0x0, 0x8000, 0x10000)\n+AVR_MCU (\"avr64da48\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DA48__\",    0x6000, 0x0, 0x8000, 0x10000)\n+AVR_MCU (\"avr64da64\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DA64__\",    0x6000, 0x0, 0x8000, 0x10000)\n+AVR_MCU (\"avr64db28\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DB28__\",    0x6000, 0x0, 0x8000, 0x10000)\n+AVR_MCU (\"avr64db32\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DB32__\",    0x6000, 0x0, 0x8000, 0x10000)\n+AVR_MCU (\"avr64db48\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DB48__\",    0x6000, 0x0, 0x8000, 0x10000)\n+AVR_MCU (\"avr64db64\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_AVR64DB64__\",    0x6000, 0x0, 0x8000, 0x10000)\n /* Xmega, Flash + RAM < 64K, flash visible in RAM address space */\n AVR_MCU (\"avrxmega3\",        ARCH_AVRXMEGA3, AVR_ISA_NONE,  NULL,                  0x3f00, 0x0, 0x8000, 0)\n AVR_MCU (\"attiny202\",        ARCH_AVRXMEGA3, AVR_ISA_RCALL, \"__AVR_ATtiny202__\",   0x3f80, 0x0, 0x800,  0x8000)\n@@ -342,6 +350,12 @@ AVR_MCU (\"atmega3208\",       ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_ATmega3208__\"\n AVR_MCU (\"atmega3209\",       ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_ATmega3209__\",  0x3800, 0x0, 0x8000, 0x4000)\n AVR_MCU (\"atmega4808\",       ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_ATmega4808__\",  0x2800, 0x0, 0xc000, 0x4000)\n AVR_MCU (\"atmega4809\",       ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_ATmega4809__\",  0x2800, 0x0, 0xc000, 0x4000)\n+AVR_MCU (\"avr32da28\",        ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_AVR32DA28__\",   0x7000, 0x0, 0x8000, 0x8000)\n+AVR_MCU (\"avr32da32\",        ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_AVR32DA32__\",   0x7000, 0x0, 0x8000, 0x8000)\n+AVR_MCU (\"avr32da48\",        ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_AVR32DA48__\",   0x7000, 0x0, 0x8000, 0x8000)\n+AVR_MCU (\"avr32db28\",        ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_AVR32DB28__\",   0x7000, 0x0, 0x8000, 0x8000)\n+AVR_MCU (\"avr32db32\",        ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_AVR32DB32__\",   0x7000, 0x0, 0x8000, 0x8000)\n+AVR_MCU (\"avr32db48\",        ARCH_AVRXMEGA3, AVR_ISA_NONE,  \"__AVR_AVR32DB48__\",   0x7000, 0x0, 0x8000, 0x8000)\n /* Xmega, 64K < Flash <= 128K, RAM <= 64K */\n AVR_MCU (\"avrxmega4\",        ARCH_AVRXMEGA4, AVR_ISA_NONE, NULL,                   0x2000, 0x0, 0x11000, 0)\n AVR_MCU (\"atxmega64a3\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64A3__\",  0x2000, 0x0, 0x11000, 0)\n@@ -352,6 +366,14 @@ AVR_MCU (\"atxmega64b1\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B1__\"\n AVR_MCU (\"atxmega64b3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B3__\",  0x2000, 0x0, 0x11000, 0)\n AVR_MCU (\"atxmega64c3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64C3__\",  0x2000, 0x0, 0x11000, 0)\n AVR_MCU (\"atxmega64d4\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64D4__\",  0x2000, 0x0, 0x11000, 0)\n+AVR_MCU (\"avr128da28\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DA28__\",   0x4000, 0x0, 0x8000,  0x20000)\n+AVR_MCU (\"avr128da32\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DA32__\",   0x4000, 0x0, 0x8000,  0x20000)\n+AVR_MCU (\"avr128da48\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DA48__\",   0x4000, 0x0, 0x8000,  0x20000)\n+AVR_MCU (\"avr128da64\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DA64__\",   0x4000, 0x0, 0x8000,  0x20000)\n+AVR_MCU (\"avr128db28\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DB28__\",   0x4000, 0x0, 0x8000,  0x20000)\n+AVR_MCU (\"avr128db32\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DB32__\",   0x4000, 0x0, 0x8000,  0x20000)\n+AVR_MCU (\"avr128db48\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DB48__\",   0x4000, 0x0, 0x8000,  0x20000)\n+AVR_MCU (\"avr128db64\",       ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_AVR128DB64__\",   0x4000, 0x0, 0x8000,  0x20000)\n /* Xmega, 64K < Flash <= 128K, RAM > 64K */\n AVR_MCU (\"avrxmega5\",        ARCH_AVRXMEGA5, AVR_ISA_NONE, NULL,                   0x2000, 0x0, 0x11000, 0)\n AVR_MCU (\"atxmega64a1\",      ARCH_AVRXMEGA5, AVR_ISA_NONE, \"__AVR_ATxmega64A1__\",  0x2000, 0x0, 0x11000, 0)"}, {"sha": "1b75e05ade093aa6097ab200c14927fbff192fd8", "filename": "gcc/config/avr/gen-avr-mmcu-specs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.cc?ref=919822adc923b00e995e8a148bdb8115a794b47b", "patch": "@@ -279,7 +279,7 @@ print_mcu (const avr_mcu_t *mcu)\n   if (is_device)\n     {\n       fprintf (f, \"*self_spec:\\n\");\n-      fprintf (f, \"\\t%%{!mmcu=avr*: %%<mmcu=* -mmcu=%s} \", arch->name);\n+      fprintf (f, \"\\t%%<mmcu=* -mmcu=%s \", arch->name);\n       fprintf (f, \"%s \", rcall_spec);\n       fprintf (f, \"%s\\n\\n\", sp8_spec);\n "}, {"sha": "0e013e90bd0198934c027d08c9cab55bdc60ab2a", "filename": "gcc/config/avr/gen-avr-mmcu-texi.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.cc?ref=919822adc923b00e995e8a148bdb8115a794b47b", "patch": "@@ -55,7 +55,7 @@ c_prefix (const char *str)\n {\n   static const char *const prefixes[] =\n     {\n-      \"attiny\", \"atmega\", \"atxmega\", \"ata\", \"at90\"\n+      \"attiny\", \"atmega\", \"atxmega\", \"ata\", \"at90\", \"avr\"\n     };\n \n   int i, n = (int) (ARRAY_SIZE (prefixes));"}, {"sha": "c3e9817928a3cbd906faaee89e22a676800d524b", "filename": "gcc/doc/avr-mmcu.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fdoc%2Favr-mmcu.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/919822adc923b00e995e8a148bdb8115a794b47b/gcc%2Fdoc%2Favr-mmcu.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Favr-mmcu.texi?ref=919822adc923b00e995e8a148bdb8115a794b47b", "patch": "@@ -50,15 +50,15 @@\n \n @item avrxmega2\n ``XMEGA'' devices with more than 8@tie{}KiB and up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega8e5}, @code{atxmega16a4}, @code{atxmega16a4u}, @code{atxmega16c4}, @code{atxmega16d4}, @code{atxmega16e5}, @code{atxmega32a4}, @code{atxmega32a4u}, @code{atxmega32c3}, @code{atxmega32c4}, @code{atxmega32d3}, @code{atxmega32d4}, @code{atxmega32e5}.\n+@*@var{mcu}@tie{}= @code{atxmega8e5}, @code{atxmega16a4}, @code{atxmega16a4u}, @code{atxmega16c4}, @code{atxmega16d4}, @code{atxmega16e5}, @code{atxmega32a4}, @code{atxmega32a4u}, @code{atxmega32c3}, @code{atxmega32c4}, @code{atxmega32d3}, @code{atxmega32d4}, @code{atxmega32e5}, @code{avr64da28}, @code{avr64da32}, @code{avr64da48}, @code{avr64da64}, @code{avr64db28}, @code{avr64db32}, @code{avr64db48}, @code{avr64db64}.\n \n @item avrxmega3\n ``XMEGA'' devices with up to 64@tie{}KiB of combined program memory and RAM, and with program memory visible in the RAM address space.\n-@*@var{mcu}@tie{}= @code{attiny202}, @code{attiny204}, @code{attiny212}, @code{attiny214}, @code{attiny402}, @code{attiny404}, @code{attiny406}, @code{attiny412}, @code{attiny414}, @code{attiny416}, @code{attiny417}, @code{attiny804}, @code{attiny806}, @code{attiny807}, @code{attiny814}, @code{attiny816}, @code{attiny817}, @code{attiny1604}, @code{attiny1606}, @code{attiny1607}, @code{attiny1614}, @code{attiny1616}, @code{attiny1617}, @code{attiny3214}, @code{attiny3216}, @code{attiny3217}, @code{atmega808}, @code{atmega809}, @code{atmega1608}, @code{atmega1609}, @code{atmega3208}, @code{atmega3209}, @code{atmega4808}, @code{atmega4809}.\n+@*@var{mcu}@tie{}= @code{attiny202}, @code{attiny204}, @code{attiny212}, @code{attiny214}, @code{attiny402}, @code{attiny404}, @code{attiny406}, @code{attiny412}, @code{attiny414}, @code{attiny416}, @code{attiny417}, @code{attiny804}, @code{attiny806}, @code{attiny807}, @code{attiny814}, @code{attiny816}, @code{attiny817}, @code{attiny1604}, @code{attiny1606}, @code{attiny1607}, @code{attiny1614}, @code{attiny1616}, @code{attiny1617}, @code{attiny3214}, @code{attiny3216}, @code{attiny3217}, @code{atmega808}, @code{atmega809}, @code{atmega1608}, @code{atmega1609}, @code{atmega3208}, @code{atmega3209}, @code{atmega4808}, @code{atmega4809}, @code{avr32da28}, @code{avr32da32}, @code{avr32da48}, @code{avr32db28}, @code{avr32db32}, @code{avr32db48}.\n \n @item avrxmega4\n ``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega64a3}, @code{atxmega64a3u}, @code{atxmega64a4u}, @code{atxmega64b1}, @code{atxmega64b3}, @code{atxmega64c3}, @code{atxmega64d3}, @code{atxmega64d4}.\n+@*@var{mcu}@tie{}= @code{atxmega64a3}, @code{atxmega64a3u}, @code{atxmega64a4u}, @code{atxmega64b1}, @code{atxmega64b3}, @code{atxmega64c3}, @code{atxmega64d3}, @code{atxmega64d4}, @code{avr128da28}, @code{avr128da32}, @code{avr128da48}, @code{avr128da64}, @code{avr128db28}, @code{avr128db32}, @code{avr128db48}, @code{avr128db64}.\n \n @item avrxmega5\n ``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB of program memory and more than 64@tie{}KiB of RAM."}]}