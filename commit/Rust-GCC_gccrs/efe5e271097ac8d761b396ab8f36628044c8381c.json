{"sha": "efe5e271097ac8d761b396ab8f36628044c8381c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlNWUyNzEwOTdhYzhkNzYxYjM5NmFiOGYzNjYyODA0NGM4MzgxYw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2006-01-26T04:08:39Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2006-01-26T04:08:39Z"}, "message": "struct-layout-1.exp: Pass -e to generator program on short-enum targets.\n\n2006-01-26  Paul Brook  <paul@codesourcery.com>\n\n\t* gcc.dg/compat/struct-layout-1.exp: Pass -e to generator program\n\ton short-enum targets.\n\t* gcc.dg/compat/struct-layout-1_generate.c (short_enums): New\n\tvariable.\n\t(generate_fields): Use short_enums.\n\t(main): Set short_enums.  Document -e.\n\t* g++.dg/compat/struct-layout-1.exp: Pass -e to generator program\n\ton short-enum targets.\n\t* g++.dg/compat/struct-layout-1_generate.c (short_enums): New\n\tvariable.\n\t(generate_fields): Use short_enums.\n\t(main): Set short_enums.  Document -e.\n\t* lib/target-supports.exp (check_effective_target_short_enums): New.\n\nFrom-SVN: r110247", "tree": {"sha": "626d3274fb4c1b042b35b73718819d1d3e244bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/626d3274fb4c1b042b35b73718819d1d3e244bdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe5e271097ac8d761b396ab8f36628044c8381c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe5e271097ac8d761b396ab8f36628044c8381c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe5e271097ac8d761b396ab8f36628044c8381c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe5e271097ac8d761b396ab8f36628044c8381c/comments", "author": null, "committer": null, "parents": [{"sha": "ee45f67911c04907fd0349670fa412ed1089412b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee45f67911c04907fd0349670fa412ed1089412b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee45f67911c04907fd0349670fa412ed1089412b"}], "stats": {"total": 93, "additions": 85, "deletions": 8}, "files": [{"sha": "dde3de869c8ff6e2a09f6f56905e8a4184238c0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efe5e271097ac8d761b396ab8f36628044c8381c", "patch": "@@ -1,3 +1,19 @@\n+2006-01-26  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gcc.dg/compat/struct-layout-1.exp: Pass -e to generator program\n+\ton short-enum targets.\n+\t* gcc.dg/compat/struct-layout-1_generate.c (short_enums): New\n+\tvariable.\n+\t(generate_fields): Use short_enums.\n+\t(main): Set short_enums.  Document -e.\n+\t* g++.dg/compat/struct-layout-1.exp: Pass -e to generator program\n+\ton short-enum targets.\n+\t* g++.dg/compat/struct-layout-1_generate.c (short_enums): New\n+\tvariable.\n+\t(generate_fields): Use short_enums.\n+\t(main): Set short_enums.  Document -e.\n+\t* lib/target-supports.exp (check_effective_target_short_enums): New.\n+\n 2006-01-26  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/25947"}, {"sha": "b9f63295301260e10ce80fabf5f2042a8793327a", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=efe5e271097ac8d761b396ab8f36628044c8381c", "patch": "@@ -138,6 +138,9 @@ if { $status == 0 } then {\n     if [info exists env(RUN_ALL_COMPAT_TESTS) ] then {\n \tset generator_args \"$generator_args -n 15000\"\n     }\n+    if [check_effective_target_short_enums] then {\n+\tset generator_args \"-e $generator_args\"\n+    }\n     set status [remote_exec host \"$generator $generator_args\"]\n     set status [lindex $status 0]\n     if { $status == 0 } then {"}, {"sha": "4234e9f3dc36dec1b5e8585c7cd4ec5eef36a640", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=efe5e271097ac8d761b396ab8f36628044c8381c", "patch": "@@ -478,7 +478,7 @@ struct types attrib_array_types[] = {\n #define HASH_SIZE 32749\n static struct entry *hash_table[HASH_SIZE];\n \n-static int idx, limidx, output_one;\n+static int idx, limidx, output_one, short_enums;\n static const char *destdir;\n static const char *srcdir;\n FILE *outfile;\n@@ -1368,10 +1368,14 @@ generate_fields (enum FEATURE features, struct entry *e, struct entry *parent,\n \t\t    abort ();\n \t\t  if (!mi)\n \t\t    mi = 1;\n-\t\t  if (mi <= 32)\n+\t\t  if (mi > 32)\n+\t\t    ma = 64;\n+\t\t  else if (mi > 16 || !short_enums)\n \t\t    ma = 32;\n+\t\t  else if (mi > 8)\n+\t\t    ma = 16;\n \t\t  else\n-\t\t    ma = 64;\n+\t\t    ma = 8;\n \t\t  break;\n \t\tdefault:\n \t\t  abort ();\n@@ -1533,6 +1537,10 @@ main (int argc, char **argv)\n \t  output_one = 1;\n \t  limidx = atoi (optarg);\n \t  break;\n+\tcase 'e':\n+\t  short_enums = 1;\n+\t  i--;\n+\t  break;\n \tdefault:\n \t  fprintf (stderr, \"unrecognized option %s\\n\", argv[i]);\n \t  goto usage;\n@@ -1555,7 +1563,7 @@ main (int argc, char **argv)\n     {\n     usage:\n       fprintf (stderr, \"Usage:\\n\\\n-%s [-s srcdir -d destdir] [-n count] [-i idx]\\n\\\n+%s [-e] [-s srcdir -d destdir] [-n count] [-i idx]\\n\\\n Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n       return 1;\n     }"}, {"sha": "940b637ed84f7d82f46ede6243b373e58ecd0652", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.exp?ref=efe5e271097ac8d761b396ab8f36628044c8381c", "patch": "@@ -99,6 +99,9 @@ if { $status == 0 } then {\n     if [info exists env(RUN_ALL_COMPAT_TESTS) ] then {\n \tset generator_args \"$generator_args -n 15000\"\n     }\n+    if [check_effective_target_short_enums] then {\n+\tset generator_args \"-e $generator_args\"\n+    }\n     set status [remote_exec host \"$generator $generator_args\"]\n     set status [lindex $status 0]\n     if { $status == 0 } then {"}, {"sha": "59b777f1e038afc99a81e8926ec2bda26e866bf2", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=efe5e271097ac8d761b396ab8f36628044c8381c", "patch": "@@ -718,7 +718,7 @@ struct entry\n #define HASH_SIZE 32749 \n static struct entry *hash_table[HASH_SIZE];\n \n-static int idx, limidx, output_one;\n+static int idx, limidx, output_one, short_enums;\n static const char *destdir;\n static const char *srcdir;\n FILE *outfile;\n@@ -1759,10 +1759,14 @@ generate_fields (enum FEATURE features, struct entry *e, struct entry *parent,\n \t\t    abort ();\n \t\t  if (!mi)\n \t\t    mi = 1;\n-\t\t  if (mi <= 32)\n+\t\t  if (mi > 32)\n+\t\t    ma = 64;\n+\t\t  else if (mi > 16 || !short_enums)\n \t\t    ma = 32;\n+\t\t  else if (mi > 8)\n+\t\t    ma = 16;\n \t\t  else\n-\t\t    ma = 64;\n+\t\t    ma = 8;\n \t\t  break;\n \t\tdefault:\n \t\t  abort ();\n@@ -1935,6 +1939,10 @@ main (int argc, char **argv)\n \t  output_one = 1;\n \t  limidx = atoi (optarg);\n \t  break;\n+\tcase 'e':\n+\t  short_enums = 1;\n+\t  i--;\n+\t  break;\n \tdefault:\n \t  fprintf (stderr, \"unrecognized option %s\\n\", argv[i]);\n \t  goto usage;\n@@ -1957,7 +1965,7 @@ main (int argc, char **argv)\n     {\n     usage:\n       fprintf (stderr, \"Usage:\\n\\\n-%s [-s srcdir -d destdir] [-n count] [-i idx]\\n\\\n+%s [-e] [-s srcdir -d destdir] [-n count] [-i idx]\\n\\\n Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n       return 1;\n     }"}, {"sha": "5fee9eac2695e13de422da4dda5422e12d9741b2", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe5e271097ac8d761b396ab8f36628044c8381c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=efe5e271097ac8d761b396ab8f36628044c8381c", "patch": "@@ -1658,3 +1658,42 @@ proc is-effective-target-keyword { arg } {\n \t}\n     }\n }\n+\n+# Return 1 if target default to short enums\n+\n+proc check_effective_target_short_enums { } {\n+    global et_short_enums_saved\n+    global et_short_enums_target_name\n+\n+    if { ![info exists et_short_enums_target_name] } {\n+\tset et_short_enums_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_short_enums_target_name } {\n+\tverbose \"check_effective_target_short_enums: `$et_short_enums_target_name'\" 2\n+\tset et_short_enums_target_name $current_target\n+\tif [info exists et_short_enums_saved] {\n+\t    verbose \"check_effective_target_short_enums: removing cached result\" 2\n+\t    unset et_short_enums_saved\n+\t}\n+    }\n+\n+    if [info exists et_short_enums_saved] {\n+\tverbose \"check_effective_target_short_enums: using cached result\" 2\n+    } else {\n+\tverbose \"check_effective_target_short_enums: compiling source\" 2\n+\n+\t# PCC_BITFIELD_TYPE_MATTERS isn't just about unnamed or empty\n+\t# bitfields, but let's stick to the example code from the docs.\n+\tset et_short_enums_saved \\\n+\t    [string match \"\" [get_compiler_messages short_enums assembly {\n+\t    enum foo { bar };\n+\t    int s[sizeof (enum foo) == 1 ? 1 : -1];\n+\t} ]]\n+    }\n+    verbose \"check_effective_target_short_enums: returning $et_short_enums_saved\" 2\n+    return $et_short_enums_saved\n+}\n+"}]}