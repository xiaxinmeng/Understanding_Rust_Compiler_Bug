{"sha": "314e6352040016aff26cc2cf0b9eb60c40ca859e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0ZTYzNTIwNDAwMTZhZmYyNmNjMmNmMGI5ZWI2MGM0MGNhODU5ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-08-08T04:46:51Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-08-08T04:46:51Z"}, "message": "trans.c: Include header files.\n\n.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* gcc-interface/trans.c: Include header files.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* objc-gnu-runtime-abi-01.c: Include header files.\n\t* objc-next-runtime-abi-01.c: Likewise.\n\t* objc-next-runtime-abi-02.c: Likewise.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* asan.c: Include header files.\n\t* attribs.c (build_decl_attribute_variant): New function moved\n\tfrom tree.[ch].\n\t(build_type_attribute_qual_variant): Likewise.\n\t(cmp_attrib_identifiers): Likewise.\n\t(simple_cst_list_equal): Likewise.\n\t(omp_declare_simd_clauses_equal): Likewise.\n\t(attribute_value_equal): Likewise.\n\t(comp_type_attributes): Likewise.\n\t(build_type_attribute_variant): Likewise.\n\t(lookup_ident_attribute): Likewise.\n\t(remove_attribute): Likewise.\n\t(merge_attributes): Likewise.\n\t(merge_type_attributes): Likewise.\n\t(merge_decl_attributes): Likewise.\n\t(merge_dllimport_decl_attributes): Likewise.\n\t(handle_dll_attribute): Likewise.\n\t(attribute_list_equal): Likewise.\n\t(attribute_list_contained): Likewise.\n\t* attribs.h (lookup_attribute): New function moved from tree.[ch].\n\t(lookup_attribute_by_prefix): Likewise.\n\t* bb-reorder.c: Include header files.\n\t* builtins.c: Likewise.\n\t* calls.c: Likewise.\n\t* cfgexpand.c: Likewise.\n\t* cgraph.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* convert.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* final.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* function.c: Likewise.\n\t* gimple-expr.c: Likewise.\n\t* gimple-fold.c: Likewise.\n\t* gimple-pretty-print.c: Likewise.\n\t* gimple.c: Likewise.\n\t* gimplify.c: Likewise.\n\t* hsa-common.c: Likewise.\n\t* hsa-gen.c: Likewise.\n\t* internal-fn.c: Likewise.\n\t* ipa-chkp.c: Likewise.\n\t* ipa-cp.c: Likewise.\n\t* ipa-devirt.c: Likewise.\n\t* ipa-fnsummary.c: Likewise.\n\t* ipa-inline.c: Likewise.\n\t* ipa-visibility.c: Likewise.\n\t* ipa.c: Likewise.\n\t* lto-cgraph.c: Likewise.\n\t* omp-expand.c: Likewise.\n\t* omp-general.c: Likewise.\n\t* omp-low.c: Likewise.\n\t* omp-offload.c: Likewise.\n\t* omp-simd-clone.c: Likewise.\n\t* opts-global.c: Likewise.\n\t* passes.c: Likewise.\n\t* predict.c: Likewise.\n\t* sancov.c: Likewise.\n\t* sanopt.c: Likewise.\n\t* symtab.c: Likewise.\n\t* toplev.c: Likewise.\n\t* trans-mem.c: Likewise.\n\t* tree-chkp.c: Likewise.\n\t* tree-eh.c: Likewise.\n\t* tree-into-ssa.c: Likewise.\n\t* tree-object-size.c: Likewise.\n\t* tree-parloops.c: Likewise.\n\t* tree-profile.c: Likewise.\n\t* tree-ssa-ccp.c: Likewise.\n\t* tree-ssa-live.c: Likewise.\n\t* tree-ssa-loop.c: Likewise.\n\t* tree-ssa-sccvn.c: Likewise.\n\t* tree-ssa-structalias.c: Likewise.\n\t* tree-ssa.c: Likewise.\n\t* tree-streamer-in.c: Likewise.\n\t* tree-vectorizer.c: Likewise.\n\t* tree-vrp.c: Likewise.\n\t* tsan.c: Likewise.\n\t* ubsan.c: Likewise.\n\t* varasm.c: Likewise.\n\t* varpool.c: Likewise.\n\t* tree.c: Remove functions moved to attribs.[ch].\n\t* tree.h: Likewise.\n\t* config/aarch64/aarch64.c: Add attrs.h header file.\n\t* config/alpha/alpha.c: Likewise.\n\t* config/arc/arc.c: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/avr/avr.c: Likewise.\n\t* config/bfin/bfin.c: Likewise.\n\t* config/c6x/c6x.c: Likewise.\n\t* config/cr16/cr16.c: Likewise.\n\t* config/cris/cris.c: Likewise.\n\t* config/darwin.c: Likewise.\n\t* config/epiphany/epiphany.c: Likewise.\n\t* config/fr30/fr30.c: Likewise.\n\t* config/frv/frv.c: Likewise.\n\t* config/ft32/ft32.c: Likewise.\n\t* config/h8300/h8300.c: Likewise.\n\t* config/i386/winnt.c: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/iq2000/iq2000.c: Likewise.\n\t* config/lm32/lm32.c: Likewise.\n\t* config/m32c/m32c.c: Likewise.\n\t* config/m32r/m32r.c: Likewise.\n\t* config/m68k/m68k.c: Likewise.\n\t* config/mcore/mcore.c: Likewise.\n\t* config/microblaze/microblaze.c: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/mmix/mmix.c: Likewise.\n\t* config/mn10300/mn10300.c: Likewise.\n\t* config/moxie/moxie.c: Likewise.\n\t* config/msp430/msp430.c: Likewise.\n\t* config/nds32/nds32-isr.c: Likewise.\n\t* config/nds32/nds32.c: Likewise.\n\t* config/nios2/nios2.c: Likewise.\n\t* config/nvptx/nvptx.c: Likewise.\n\t* config/pa/pa.c: Likewise.\n\t* config/pdp11/pdp11.c: Likewise.\n\t* config/powerpcspe/powerpcspe.c: Likewise.\n\t* config/riscv/riscv.c: Likewise.\n\t* config/rl78/rl78.c: Likewise.\n\t* config/rx/rx.c: Likewise.\n\t* config/s390/s390.c: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/sol2.c: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\t* config/spu/spu.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/tilegx/tilegx.c: Likewise.\n\t* config/tilepro/tilepro.c: Likewise.\n\t* config/v850/v850.c: Likewise.\n\t* config/vax/vax.c: Likewise.\n\t* config/visium/visium.c: Likewise.\n\t* config/xtensa/xtensa.c: Likewise.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* call.c: Include header files.\n\t* cp-gimplify.c: Likewise.\n\t* cp-ubsan.c: Likewise.\n\t* cvt.c: Likewise.\n\t* init.c: Likewise.\n\t* search.c: Likewise.\n\t* semantics.c: Likewise.\n\t* typeck.c: Likewise.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* lto-lang.c: Include header files.\n\t* lto-symtab.c: Likewise.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* c-convert.c: Include header files.\n\t* c-typeck.c: Likewise.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* c-ada-spec.c: Include header files.\n\t* c-ubsan.c: Likewise.\n\t* c-warn.c: Likewise.\n2017-08-08  Martin Liska  <mliska@suse.cz>\n\n\t* trans-types.c: Include header files.\n\nFrom-SVN: r250946", "tree": {"sha": "1c03471917bb6c90a9fca32e2ce7b5b594f9421d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c03471917bb6c90a9fca32e2ce7b5b594f9421d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/314e6352040016aff26cc2cf0b9eb60c40ca859e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314e6352040016aff26cc2cf0b9eb60c40ca859e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314e6352040016aff26cc2cf0b9eb60c40ca859e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314e6352040016aff26cc2cf0b9eb60c40ca859e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "082adc1e43fa073a9f7f5ab3bdaa2713a1cc2cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082adc1e43fa073a9f7f5ab3bdaa2713a1cc2cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082adc1e43fa073a9f7f5ab3bdaa2713a1cc2cdc"}], "stats": {"total": 1930, "additions": 1154, "deletions": 776}, "files": [{"sha": "dde91ceea5ba70db67f76560825b3718ff8f13b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,139 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* asan.c: Include header files.\n+\t* attribs.c (build_decl_attribute_variant): New function moved\n+\tfrom tree.[ch].\n+\t(build_type_attribute_qual_variant): Likewise.\n+\t(cmp_attrib_identifiers): Likewise.\n+\t(simple_cst_list_equal): Likewise.\n+\t(omp_declare_simd_clauses_equal): Likewise.\n+\t(attribute_value_equal): Likewise.\n+\t(comp_type_attributes): Likewise.\n+\t(build_type_attribute_variant): Likewise.\n+\t(lookup_ident_attribute): Likewise.\n+\t(remove_attribute): Likewise.\n+\t(merge_attributes): Likewise.\n+\t(merge_type_attributes): Likewise.\n+\t(merge_decl_attributes): Likewise.\n+\t(merge_dllimport_decl_attributes): Likewise.\n+\t(handle_dll_attribute): Likewise.\n+\t(attribute_list_equal): Likewise.\n+\t(attribute_list_contained): Likewise.\n+\t* attribs.h (lookup_attribute): New function moved from tree.[ch].\n+\t(lookup_attribute_by_prefix): Likewise.\n+\t* bb-reorder.c: Include header files.\n+\t* builtins.c: Likewise.\n+\t* calls.c: Likewise.\n+\t* cfgexpand.c: Likewise.\n+\t* cgraph.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* convert.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* final.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* function.c: Likewise.\n+\t* gimple-expr.c: Likewise.\n+\t* gimple-fold.c: Likewise.\n+\t* gimple-pretty-print.c: Likewise.\n+\t* gimple.c: Likewise.\n+\t* gimplify.c: Likewise.\n+\t* hsa-common.c: Likewise.\n+\t* hsa-gen.c: Likewise.\n+\t* internal-fn.c: Likewise.\n+\t* ipa-chkp.c: Likewise.\n+\t* ipa-cp.c: Likewise.\n+\t* ipa-devirt.c: Likewise.\n+\t* ipa-fnsummary.c: Likewise.\n+\t* ipa-inline.c: Likewise.\n+\t* ipa-visibility.c: Likewise.\n+\t* ipa.c: Likewise.\n+\t* lto-cgraph.c: Likewise.\n+\t* omp-expand.c: Likewise.\n+\t* omp-general.c: Likewise.\n+\t* omp-low.c: Likewise.\n+\t* omp-offload.c: Likewise.\n+\t* omp-simd-clone.c: Likewise.\n+\t* opts-global.c: Likewise.\n+\t* passes.c: Likewise.\n+\t* predict.c: Likewise.\n+\t* sancov.c: Likewise.\n+\t* sanopt.c: Likewise.\n+\t* symtab.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* trans-mem.c: Likewise.\n+\t* tree-chkp.c: Likewise.\n+\t* tree-eh.c: Likewise.\n+\t* tree-into-ssa.c: Likewise.\n+\t* tree-object-size.c: Likewise.\n+\t* tree-parloops.c: Likewise.\n+\t* tree-profile.c: Likewise.\n+\t* tree-ssa-ccp.c: Likewise.\n+\t* tree-ssa-live.c: Likewise.\n+\t* tree-ssa-loop.c: Likewise.\n+\t* tree-ssa-sccvn.c: Likewise.\n+\t* tree-ssa-structalias.c: Likewise.\n+\t* tree-ssa.c: Likewise.\n+\t* tree-streamer-in.c: Likewise.\n+\t* tree-vectorizer.c: Likewise.\n+\t* tree-vrp.c: Likewise.\n+\t* tsan.c: Likewise.\n+\t* ubsan.c: Likewise.\n+\t* varasm.c: Likewise.\n+\t* varpool.c: Likewise.\n+\t* tree.c: Remove functions moved to attribs.[ch].\n+\t* tree.h: Likewise.\n+\t* config/aarch64/aarch64.c: Add attrs.h header file.\n+\t* config/alpha/alpha.c: Likewise.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/avr/avr.c: Likewise.\n+\t* config/bfin/bfin.c: Likewise.\n+\t* config/c6x/c6x.c: Likewise.\n+\t* config/cr16/cr16.c: Likewise.\n+\t* config/cris/cris.c: Likewise.\n+\t* config/darwin.c: Likewise.\n+\t* config/epiphany/epiphany.c: Likewise.\n+\t* config/fr30/fr30.c: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/ft32/ft32.c: Likewise.\n+\t* config/h8300/h8300.c: Likewise.\n+\t* config/i386/winnt.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/iq2000/iq2000.c: Likewise.\n+\t* config/lm32/lm32.c: Likewise.\n+\t* config/m32c/m32c.c: Likewise.\n+\t* config/m32r/m32r.c: Likewise.\n+\t* config/m68k/m68k.c: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/microblaze/microblaze.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/mmix/mmix.c: Likewise.\n+\t* config/mn10300/mn10300.c: Likewise.\n+\t* config/moxie/moxie.c: Likewise.\n+\t* config/msp430/msp430.c: Likewise.\n+\t* config/nds32/nds32-isr.c: Likewise.\n+\t* config/nds32/nds32.c: Likewise.\n+\t* config/nios2/nios2.c: Likewise.\n+\t* config/nvptx/nvptx.c: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/pdp11/pdp11.c: Likewise.\n+\t* config/powerpcspe/powerpcspe.c: Likewise.\n+\t* config/riscv/riscv.c: Likewise.\n+\t* config/rl78/rl78.c: Likewise.\n+\t* config/rx/rx.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sol2.c: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/spu/spu.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/tilegx/tilegx.c: Likewise.\n+\t* config/tilepro/tilepro.c: Likewise.\n+\t* config/v850/v850.c: Likewise.\n+\t* config/vax/vax.c: Likewise.\n+\t* config/visium/visium.c: Likewise.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\n 2017-08-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/81593"}, {"sha": "b0b7cf351c3003d16cdab3c402c69f317f45333f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,7 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-interface/trans.c: Include header files.\n+\n 2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-interface/utils.c (gnat_write_global_declarations): Pass false"}, {"sha": "67044b7b5748c38565939edc665478708130768c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -46,6 +46,8 @@\n #include \"gimplify.h\"\n #include \"opts.h\"\n #include \"common/common-target.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n #include \"ada.h\"\n #include \"adadecode.h\""}, {"sha": "f83ca65ffdbb12e0bd65719ff833539332540e02", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -47,6 +47,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"stor-layout.h\"\n #include \"tree-iterator.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"dojump.h\"\n #include \"explow.h\""}, {"sha": "faa0649e190d6ea36a2ae6d3ce65c268966b3781", "filename": "gcc/attribs.c", "status": "modified", "additions": 633, "deletions": 0, "changes": 633, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -942,3 +942,636 @@ is_function_default_version (const tree decl)\n   return (TREE_CODE (attr) == STRING_CST\n \t  && strcmp (TREE_STRING_POINTER (attr), \"default\") == 0);\n }\n+\n+/* Return a declaration like DDECL except that its DECL_ATTRIBUTES\n+   is ATTRIBUTE.  */\n+\n+tree\n+build_decl_attribute_variant (tree ddecl, tree attribute)\n+{\n+  DECL_ATTRIBUTES (ddecl) = attribute;\n+  return ddecl;\n+}\n+\n+/* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n+   is ATTRIBUTE and its qualifiers are QUALS.\n+\n+   Record such modified types already made so we don't make duplicates.  */\n+\n+tree\n+build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n+{\n+  if (! attribute_list_equal (TYPE_ATTRIBUTES (ttype), attribute))\n+    {\n+      tree ntype;\n+\n+      /* Building a distinct copy of a tagged type is inappropriate; it\n+\t causes breakage in code that expects there to be a one-to-one\n+\t relationship between a struct and its fields.\n+\t build_duplicate_type is another solution (as used in\n+\t handle_transparent_union_attribute), but that doesn't play well\n+\t with the stronger C++ type identity model.  */\n+      if (TREE_CODE (ttype) == RECORD_TYPE\n+\t  || TREE_CODE (ttype) == UNION_TYPE\n+\t  || TREE_CODE (ttype) == QUAL_UNION_TYPE\n+\t  || TREE_CODE (ttype) == ENUMERAL_TYPE)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"ignoring attributes applied to %qT after definition\",\n+\t\t   TYPE_MAIN_VARIANT (ttype));\n+\t  return build_qualified_type (ttype, quals);\n+\t}\n+\n+      ttype = build_qualified_type (ttype, TYPE_UNQUALIFIED);\n+      ntype = build_distinct_type_copy (ttype);\n+\n+      TYPE_ATTRIBUTES (ntype) = attribute;\n+\n+      hashval_t hash = type_hash_canon_hash (ntype);\n+      ntype = type_hash_canon (hash, ntype);\n+\n+      /* If the target-dependent attributes make NTYPE different from\n+\t its canonical type, we will need to use structural equality\n+\t checks for this type.  */\n+      if (TYPE_STRUCTURAL_EQUALITY_P (ttype)\n+\t  || !comp_type_attributes (ntype, ttype))\n+\tSET_TYPE_STRUCTURAL_EQUALITY (ntype);\n+      else if (TYPE_CANONICAL (ntype) == ntype)\n+\tTYPE_CANONICAL (ntype) = TYPE_CANONICAL (ttype);\n+\n+      ttype = build_qualified_type (ntype, quals);\n+    }\n+  else if (TYPE_QUALS (ttype) != quals)\n+    ttype = build_qualified_type (ttype, quals);\n+\n+  return ttype;\n+}\n+\n+/* Compare two identifier nodes representing attributes.\n+   Return true if they are the same, false otherwise.  */\n+\n+static bool\n+cmp_attrib_identifiers (const_tree attr1, const_tree attr2)\n+{\n+  /* Make sure we're dealing with IDENTIFIER_NODEs.  */\n+  gcc_checking_assert (TREE_CODE (attr1) == IDENTIFIER_NODE\n+\t\t       && TREE_CODE (attr2) == IDENTIFIER_NODE);\n+\n+  /* Identifiers can be compared directly for equality.  */\n+  if (attr1 == attr2)\n+    return true;\n+\n+  return cmp_attribs (IDENTIFIER_POINTER (attr1), IDENTIFIER_LENGTH (attr1),\n+\t\t      IDENTIFIER_POINTER (attr2), IDENTIFIER_LENGTH (attr2));\n+}\n+\n+/* Compare two constructor-element-type constants.  Return 1 if the lists\n+   are known to be equal; otherwise return 0.  */\n+\n+static bool\n+simple_cst_list_equal (const_tree l1, const_tree l2)\n+{\n+  while (l1 != NULL_TREE && l2 != NULL_TREE)\n+    {\n+      if (simple_cst_equal (TREE_VALUE (l1), TREE_VALUE (l2)) != 1)\n+\treturn false;\n+\n+      l1 = TREE_CHAIN (l1);\n+      l2 = TREE_CHAIN (l2);\n+    }\n+\n+  return l1 == l2;\n+}\n+\n+/* Check if \"omp declare simd\" attribute arguments, CLAUSES1 and CLAUSES2, are\n+   the same.  */\n+\n+static bool\n+omp_declare_simd_clauses_equal (tree clauses1, tree clauses2)\n+{\n+  tree cl1, cl2;\n+  for (cl1 = clauses1, cl2 = clauses2;\n+       cl1 && cl2;\n+       cl1 = OMP_CLAUSE_CHAIN (cl1), cl2 = OMP_CLAUSE_CHAIN (cl2))\n+    {\n+      if (OMP_CLAUSE_CODE (cl1) != OMP_CLAUSE_CODE (cl2))\n+\treturn false;\n+      if (OMP_CLAUSE_CODE (cl1) != OMP_CLAUSE_SIMDLEN)\n+\t{\n+\t  if (simple_cst_equal (OMP_CLAUSE_DECL (cl1),\n+\t\t\t\tOMP_CLAUSE_DECL (cl2)) != 1)\n+\t    return false;\n+\t}\n+      switch (OMP_CLAUSE_CODE (cl1))\n+\t{\n+\tcase OMP_CLAUSE_ALIGNED:\n+\t  if (simple_cst_equal (OMP_CLAUSE_ALIGNED_ALIGNMENT (cl1),\n+\t\t\t\tOMP_CLAUSE_ALIGNED_ALIGNMENT (cl2)) != 1)\n+\t    return false;\n+\t  break;\n+\tcase OMP_CLAUSE_LINEAR:\n+\t  if (simple_cst_equal (OMP_CLAUSE_LINEAR_STEP (cl1),\n+\t\t\t\tOMP_CLAUSE_LINEAR_STEP (cl2)) != 1)\n+\t    return false;\n+\t  break;\n+\tcase OMP_CLAUSE_SIMDLEN:\n+\t  if (simple_cst_equal (OMP_CLAUSE_SIMDLEN_EXPR (cl1),\n+\t\t\t\tOMP_CLAUSE_SIMDLEN_EXPR (cl2)) != 1)\n+\t    return false;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  return true;\n+}\n+\n+\n+/* Compare two attributes for their value identity.  Return true if the\n+   attribute values are known to be equal; otherwise return false.  */\n+\n+bool\n+attribute_value_equal (const_tree attr1, const_tree attr2)\n+{\n+  if (TREE_VALUE (attr1) == TREE_VALUE (attr2))\n+    return true;\n+\n+  if (TREE_VALUE (attr1) != NULL_TREE\n+      && TREE_CODE (TREE_VALUE (attr1)) == TREE_LIST\n+      && TREE_VALUE (attr2) != NULL_TREE\n+      && TREE_CODE (TREE_VALUE (attr2)) == TREE_LIST)\n+    {\n+      /* Handle attribute format.  */\n+      if (is_attribute_p (\"format\", get_attribute_name (attr1)))\n+\t{\n+\t  attr1 = TREE_VALUE (attr1);\n+\t  attr2 = TREE_VALUE (attr2);\n+\t  /* Compare the archetypes (printf/scanf/strftime/...).  */\n+\t  if (!cmp_attrib_identifiers (TREE_VALUE (attr1), TREE_VALUE (attr2)))\n+\t    return false;\n+\t  /* Archetypes are the same.  Compare the rest.  */\n+\t  return (simple_cst_list_equal (TREE_CHAIN (attr1),\n+\t\t\t\t\t TREE_CHAIN (attr2)) == 1);\n+\t}\n+      return (simple_cst_list_equal (TREE_VALUE (attr1),\n+\t\t\t\t     TREE_VALUE (attr2)) == 1);\n+    }\n+\n+  if ((flag_openmp || flag_openmp_simd)\n+      && TREE_VALUE (attr1) && TREE_VALUE (attr2)\n+      && TREE_CODE (TREE_VALUE (attr1)) == OMP_CLAUSE\n+      && TREE_CODE (TREE_VALUE (attr2)) == OMP_CLAUSE)\n+    return omp_declare_simd_clauses_equal (TREE_VALUE (attr1),\n+\t\t\t\t\t   TREE_VALUE (attr2));\n+\n+  return (simple_cst_equal (TREE_VALUE (attr1), TREE_VALUE (attr2)) == 1);\n+}\n+\n+/* Return 0 if the attributes for two types are incompatible, 1 if they\n+   are compatible, and 2 if they are nearly compatible (which causes a\n+   warning to be generated).  */\n+int\n+comp_type_attributes (const_tree type1, const_tree type2)\n+{\n+  const_tree a1 = TYPE_ATTRIBUTES (type1);\n+  const_tree a2 = TYPE_ATTRIBUTES (type2);\n+  const_tree a;\n+\n+  if (a1 == a2)\n+    return 1;\n+  for (a = a1; a != NULL_TREE; a = TREE_CHAIN (a))\n+    {\n+      const struct attribute_spec *as;\n+      const_tree attr;\n+\n+      as = lookup_attribute_spec (get_attribute_name (a));\n+      if (!as || as->affects_type_identity == false)\n+\tcontinue;\n+\n+      attr = lookup_attribute (as->name, CONST_CAST_TREE (a2));\n+      if (!attr || !attribute_value_equal (a, attr))\n+\tbreak;\n+    }\n+  if (!a)\n+    {\n+      for (a = a2; a != NULL_TREE; a = TREE_CHAIN (a))\n+\t{\n+\t  const struct attribute_spec *as;\n+\n+\t  as = lookup_attribute_spec (get_attribute_name (a));\n+\t  if (!as || as->affects_type_identity == false)\n+\t    continue;\n+\n+\t  if (!lookup_attribute (as->name, CONST_CAST_TREE (a1)))\n+\t    break;\n+\t  /* We don't need to compare trees again, as we did this\n+\t     already in first loop.  */\n+\t}\n+      /* All types - affecting identity - are equal, so\n+\t there is no need to call target hook for comparison.  */\n+      if (!a)\n+\treturn 1;\n+    }\n+  if (lookup_attribute (\"transaction_safe\", CONST_CAST_TREE (a)))\n+    return 0;\n+  /* As some type combinations - like default calling-convention - might\n+     be compatible, we have to call the target hook to get the final result.  */\n+  return targetm.comp_type_attributes (type1, type2);\n+}\n+\n+/* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n+   is ATTRIBUTE.\n+\n+   Record such modified types already made so we don't make duplicates.  */\n+\n+tree\n+build_type_attribute_variant (tree ttype, tree attribute)\n+{\n+  return build_type_attribute_qual_variant (ttype, attribute,\n+\t\t\t\t\t    TYPE_QUALS (ttype));\n+}\n+\f\n+/* A variant of lookup_attribute() that can be used with an identifier\n+   as the first argument, and where the identifier can be either\n+   'text' or '__text__'.\n+\n+   Given an attribute ATTR_IDENTIFIER, and a list of attributes LIST,\n+   return a pointer to the attribute's list element if the attribute\n+   is part of the list, or NULL_TREE if not found.  If the attribute\n+   appears more than once, this only returns the first occurrence; the\n+   TREE_CHAIN of the return value should be passed back in if further\n+   occurrences are wanted.  ATTR_IDENTIFIER must be an identifier but\n+   can be in the form 'text' or '__text__'.  */\n+static tree\n+lookup_ident_attribute (tree attr_identifier, tree list)\n+{\n+  gcc_checking_assert (TREE_CODE (attr_identifier) == IDENTIFIER_NODE);\n+\n+  while (list)\n+    {\n+      gcc_checking_assert (TREE_CODE (get_attribute_name (list))\n+\t\t\t   == IDENTIFIER_NODE);\n+\n+      if (cmp_attrib_identifiers (attr_identifier,\n+\t\t\t\t  get_attribute_name (list)))\n+\t/* Found it.  */\n+\tbreak;\n+      list = TREE_CHAIN (list);\n+    }\n+\n+  return list;\n+}\n+\n+/* Remove any instances of attribute ATTR_NAME in LIST and return the\n+   modified list.  */\n+\n+tree\n+remove_attribute (const char *attr_name, tree list)\n+{\n+  tree *p;\n+  gcc_checking_assert (attr_name[0] != '_');\n+\n+  for (p = &list; *p;)\n+    {\n+      tree l = *p;\n+\n+      tree attr = get_attribute_name (l);\n+      if (is_attribute_p (attr_name, attr))\n+\t*p = TREE_CHAIN (l);\n+      else\n+\tp = &TREE_CHAIN (l);\n+    }\n+\n+  return list;\n+}\n+\n+/* Return an attribute list that is the union of a1 and a2.  */\n+\n+tree\n+merge_attributes (tree a1, tree a2)\n+{\n+  tree attributes;\n+\n+  /* Either one unset?  Take the set one.  */\n+\n+  if ((attributes = a1) == 0)\n+    attributes = a2;\n+\n+  /* One that completely contains the other?  Take it.  */\n+\n+  else if (a2 != 0 && ! attribute_list_contained (a1, a2))\n+    {\n+      if (attribute_list_contained (a2, a1))\n+\tattributes = a2;\n+      else\n+\t{\n+\t  /* Pick the longest list, and hang on the other list.  */\n+\n+\t  if (list_length (a1) < list_length (a2))\n+\t    attributes = a2, a2 = a1;\n+\n+\t  for (; a2 != 0; a2 = TREE_CHAIN (a2))\n+\t    {\n+\t      tree a;\n+\t      for (a = lookup_ident_attribute (get_attribute_name (a2),\n+\t\t\t\t\t       attributes);\n+\t\t   a != NULL_TREE && !attribute_value_equal (a, a2);\n+\t\t   a = lookup_ident_attribute (get_attribute_name (a2),\n+\t\t\t\t\t       TREE_CHAIN (a)))\n+\t\t;\n+\t      if (a == NULL_TREE)\n+\t\t{\n+\t\t  a1 = copy_node (a2);\n+\t\t  TREE_CHAIN (a1) = attributes;\n+\t\t  attributes = a1;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+  return attributes;\n+}\n+\n+/* Given types T1 and T2, merge their attributes and return\n+  the result.  */\n+\n+tree\n+merge_type_attributes (tree t1, tree t2)\n+{\n+  return merge_attributes (TYPE_ATTRIBUTES (t1),\n+\t\t\t   TYPE_ATTRIBUTES (t2));\n+}\n+\n+/* Given decls OLDDECL and NEWDECL, merge their attributes and return\n+   the result.  */\n+\n+tree\n+merge_decl_attributes (tree olddecl, tree newdecl)\n+{\n+  return merge_attributes (DECL_ATTRIBUTES (olddecl),\n+\t\t\t   DECL_ATTRIBUTES (newdecl));\n+}\n+\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\n+/* Specialization of merge_decl_attributes for various Windows targets.\n+\n+   This handles the following situation:\n+\n+     __declspec (dllimport) int foo;\n+     int foo;\n+\n+   The second instance of `foo' nullifies the dllimport.  */\n+\n+tree\n+merge_dllimport_decl_attributes (tree old, tree new_tree)\n+{\n+  tree a;\n+  int delete_dllimport_p = 1;\n+\n+  /* What we need to do here is remove from `old' dllimport if it doesn't\n+     appear in `new'.  dllimport behaves like extern: if a declaration is\n+     marked dllimport and a definition appears later, then the object\n+     is not dllimport'd.  We also remove a `new' dllimport if the old list\n+     contains dllexport:  dllexport always overrides dllimport, regardless\n+     of the order of declaration.  */\n+  if (!VAR_OR_FUNCTION_DECL_P (new_tree))\n+    delete_dllimport_p = 0;\n+  else if (DECL_DLLIMPORT_P (new_tree)\n+     \t   && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (old)))\n+    {\n+      DECL_DLLIMPORT_P (new_tree) = 0;\n+      warning (OPT_Wattributes, \"%q+D already declared with dllexport \"\n+\t       \"attribute: dllimport ignored\", new_tree);\n+    }\n+  else if (DECL_DLLIMPORT_P (old) && !DECL_DLLIMPORT_P (new_tree))\n+    {\n+      /* Warn about overriding a symbol that has already been used, e.g.:\n+\t   extern int __attribute__ ((dllimport)) foo;\n+\t   int* bar () {return &foo;}\n+\t   int foo;\n+      */\n+      if (TREE_USED (old))\n+\t{\n+\t  warning (0, \"%q+D redeclared without dllimport attribute \"\n+\t\t   \"after being referenced with dll linkage\", new_tree);\n+\t  /* If we have used a variable's address with dllimport linkage,\n+\t      keep the old DECL_DLLIMPORT_P flag: the ADDR_EXPR using the\n+\t      decl may already have had TREE_CONSTANT computed.\n+\t      We still remove the attribute so that assembler code refers\n+\t      to '&foo rather than '_imp__foo'.  */\n+\t  if (VAR_P (old) && TREE_ADDRESSABLE (old))\n+\t    DECL_DLLIMPORT_P (new_tree) = 1;\n+\t}\n+\n+      /* Let an inline definition silently override the external reference,\n+\t but otherwise warn about attribute inconsistency.  */\n+      else if (VAR_P (new_tree) || !DECL_DECLARED_INLINE_P (new_tree))\n+\twarning (OPT_Wattributes, \"%q+D redeclared without dllimport \"\n+\t\t \"attribute: previous dllimport ignored\", new_tree);\n+    }\n+  else\n+    delete_dllimport_p = 0;\n+\n+  a = merge_attributes (DECL_ATTRIBUTES (old), DECL_ATTRIBUTES (new_tree));\n+\n+  if (delete_dllimport_p)\n+    a = remove_attribute (\"dllimport\", a);\n+\n+  return a;\n+}\n+\n+/* Handle a \"dllimport\" or \"dllexport\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+tree\n+handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n+\t\t      bool *no_add_attrs)\n+{\n+  tree node = *pnode;\n+  bool is_dllimport;\n+\n+  /* These attributes may apply to structure and union types being created,\n+     but otherwise should pass to the declaration involved.  */\n+  if (!DECL_P (node))\n+    {\n+      if (flags & ((int) ATTR_FLAG_DECL_NEXT | (int) ATTR_FLAG_FUNCTION_NEXT\n+\t\t   | (int) ATTR_FLAG_ARRAY_NEXT))\n+\t{\n+\t  *no_add_attrs = true;\n+\t  return tree_cons (name, args, NULL_TREE);\n+\t}\n+      if (TREE_CODE (node) == RECORD_TYPE\n+\t  || TREE_CODE (node) == UNION_TYPE)\n+\t{\n+\t  node = TYPE_NAME (node);\n+\t  if (!node)\n+\t    return NULL_TREE;\n+\t}\n+      else\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t   name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+    }\n+\n+  if (!VAR_OR_FUNCTION_DECL_P (node) && TREE_CODE (node) != TYPE_DECL)\n+    {\n+      *no_add_attrs = true;\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n+      return NULL_TREE;\n+    }\n+\n+  if (TREE_CODE (node) == TYPE_DECL\n+      && TREE_CODE (TREE_TYPE (node)) != RECORD_TYPE\n+      && TREE_CODE (TREE_TYPE (node)) != UNION_TYPE)\n+    {\n+      *no_add_attrs = true;\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n+      return NULL_TREE;\n+    }\n+\n+  is_dllimport = is_attribute_p (\"dllimport\", name);\n+\n+  /* Report error on dllimport ambiguities seen now before they cause\n+     any damage.  */\n+  if (is_dllimport)\n+    {\n+      /* Honor any target-specific overrides.  */\n+      if (!targetm.valid_dllimport_attribute_p (node))\n+\t*no_add_attrs = true;\n+\n+     else if (TREE_CODE (node) == FUNCTION_DECL\n+\t      && DECL_DECLARED_INLINE_P (node))\n+\t{\n+\t  warning (OPT_Wattributes, \"inline function %q+D declared as \"\n+\t\t  \" dllimport: attribute ignored\", node);\n+\t  *no_add_attrs = true;\n+\t}\n+      /* Like MS, treat definition of dllimported variables and\n+\t non-inlined functions on declaration as syntax errors.  */\n+     else if (TREE_CODE (node) == FUNCTION_DECL && DECL_INITIAL (node))\n+\t{\n+\t  error (\"function %q+D definition is marked dllimport\", node);\n+\t  *no_add_attrs = true;\n+\t}\n+\n+     else if (VAR_P (node))\n+\t{\n+\t  if (DECL_INITIAL (node))\n+\t    {\n+\t      error (\"variable %q+D definition is marked dllimport\",\n+\t\t     node);\n+\t      *no_add_attrs = true;\n+\t    }\n+\n+\t  /* `extern' needn't be specified with dllimport.\n+\t     Specify `extern' now and hope for the best.  Sigh.  */\n+\t  DECL_EXTERNAL (node) = 1;\n+\t  /* Also, implicitly give dllimport'd variables declared within\n+\t     a function global scope, unless declared static.  */\n+\t  if (current_function_decl != NULL_TREE && !TREE_STATIC (node))\n+\t    TREE_PUBLIC (node) = 1;\n+\t}\n+\n+      if (*no_add_attrs == false)\n+\tDECL_DLLIMPORT_P (node) = 1;\n+    }\n+  else if (TREE_CODE (node) == FUNCTION_DECL\n+\t   && DECL_DECLARED_INLINE_P (node)\n+\t   && flag_keep_inline_dllexport)\n+    /* An exported function, even if inline, must be emitted.  */\n+    DECL_EXTERNAL (node) = 0;\n+\n+  /*  Report error if symbol is not accessible at global scope.  */\n+  if (!TREE_PUBLIC (node) && VAR_OR_FUNCTION_DECL_P (node))\n+    {\n+      error (\"external linkage required for symbol %q+D because of \"\n+\t     \"%qE attribute\", node, name);\n+      *no_add_attrs = true;\n+    }\n+\n+  /* A dllexport'd entity must have default visibility so that other\n+     program units (shared libraries or the main executable) can see\n+     it.  A dllimport'd entity must have default visibility so that\n+     the linker knows that undefined references within this program\n+     unit can be resolved by the dynamic linker.  */\n+  if (!*no_add_attrs)\n+    {\n+      if (DECL_VISIBILITY_SPECIFIED (node)\n+\t  && DECL_VISIBILITY (node) != VISIBILITY_DEFAULT)\n+\terror (\"%qE implies default visibility, but %qD has already \"\n+\t       \"been declared with a different visibility\",\n+\t       name, node);\n+      DECL_VISIBILITY (node) = VISIBILITY_DEFAULT;\n+      DECL_VISIBILITY_SPECIFIED (node) = 1;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+#endif /* TARGET_DLLIMPORT_DECL_ATTRIBUTES  */\n+\n+/* Given two lists of attributes, return true if list l2 is\n+   equivalent to l1.  */\n+\n+int\n+attribute_list_equal (const_tree l1, const_tree l2)\n+{\n+  if (l1 == l2)\n+    return 1;\n+\n+  return attribute_list_contained (l1, l2)\n+\t && attribute_list_contained (l2, l1);\n+}\n+\n+/* Given two lists of attributes, return true if list L2 is\n+   completely contained within L1.  */\n+/* ??? This would be faster if attribute names were stored in a canonicalized\n+   form.  Otherwise, if L1 uses `foo' and L2 uses `__foo__', the long method\n+   must be used to show these elements are equivalent (which they are).  */\n+/* ??? It's not clear that attributes with arguments will always be handled\n+   correctly.  */\n+\n+int\n+attribute_list_contained (const_tree l1, const_tree l2)\n+{\n+  const_tree t1, t2;\n+\n+  /* First check the obvious, maybe the lists are identical.  */\n+  if (l1 == l2)\n+    return 1;\n+\n+  /* Maybe the lists are similar.  */\n+  for (t1 = l1, t2 = l2;\n+       t1 != 0 && t2 != 0\n+       && get_attribute_name (t1) == get_attribute_name (t2)\n+       && TREE_VALUE (t1) == TREE_VALUE (t2);\n+       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+    ;\n+\n+  /* Maybe the lists are equal.  */\n+  if (t1 == 0 && t2 == 0)\n+    return 1;\n+\n+  for (; t2 != 0; t2 = TREE_CHAIN (t2))\n+    {\n+      const_tree attr;\n+      /* This CONST_CAST is okay because lookup_attribute does not\n+\t modify its argument and the return value is assigned to a\n+\t const_tree.  */\n+      for (attr = lookup_ident_attribute (get_attribute_name (t2),\n+\t\t\t\t\t  CONST_CAST_TREE (l1));\n+\t   attr != NULL_TREE && !attribute_value_equal (t2, attr);\n+\t   attr = lookup_ident_attribute (get_attribute_name (t2),\n+\t\t\t\t\t  TREE_CHAIN (attr)))\n+\t;\n+\n+      if (attr == NULL_TREE)\n+\treturn 0;\n+    }\n+\n+  return 1;\n+}"}, {"sha": "06e6993e95820b12a0cb7a32a59b9ac47881b56e", "filename": "gcc/attribs.h", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -47,6 +47,46 @@ extern char *make_unique_name (tree, const char *, bool);\n extern tree make_dispatcher_decl (const tree);\n extern bool is_function_default_version (const tree);\n \n+/* Return a type like TTYPE except that its TYPE_ATTRIBUTES\n+   is ATTRIBUTE.\n+\n+   Such modified types already made are recorded so that duplicates\n+   are not made.  */\n+\n+extern tree build_type_attribute_variant (tree, tree);\n+extern tree build_decl_attribute_variant (tree, tree);\n+extern tree build_type_attribute_qual_variant (tree, tree, int);\n+\n+extern bool attribute_value_equal (const_tree, const_tree);\n+\n+/* Return 0 if the attributes for two types are incompatible, 1 if they\n+   are compatible, and 2 if they are nearly compatible (which causes a\n+   warning to be generated).  */\n+extern int comp_type_attributes (const_tree, const_tree);\n+\n+/* Default versions of target-overridable functions.  */\n+extern tree merge_decl_attributes (tree, tree);\n+extern tree merge_type_attributes (tree, tree);\n+\n+/* Remove any instances of attribute ATTR_NAME in LIST and return the\n+   modified list.  */\n+\n+extern tree remove_attribute (const char *, tree);\n+\n+/* Given two attributes lists, return a list of their union.  */\n+\n+extern tree merge_attributes (tree, tree);\n+\n+/* Given two Windows decl attributes lists, possibly including\n+   dllimport, return a list of their union .  */\n+extern tree merge_dllimport_decl_attributes (tree, tree);\n+\n+/* Handle a \"dllimport\" or \"dllexport\" attribute.  */\n+extern tree handle_dll_attribute (tree *, tree, tree, int, bool *);\n+\n+extern int attribute_list_equal (const_tree, const_tree);\n+extern int attribute_list_contained (const_tree, const_tree);\n+\n /* For a given IDENTIFIER_NODE, strip leading and trailing '_' characters\n    so that we have a canonical form of attribute names.  */\n \n@@ -90,4 +130,77 @@ is_attribute_p (const char *attr_name, const_tree ident)\n \t\t      IDENTIFIER_POINTER (ident), IDENTIFIER_LENGTH (ident));\n }\n \n+/* Given an attribute name ATTR_NAME and a list of attributes LIST,\n+   return a pointer to the attribute's list element if the attribute\n+   is part of the list, or NULL_TREE if not found.  If the attribute\n+   appears more than once, this only returns the first occurrence; the\n+   TREE_CHAIN of the return value should be passed back in if further\n+   occurrences are wanted.  ATTR_NAME must be in the form 'text' (not\n+   '__text__').  */\n+\n+static inline tree\n+lookup_attribute (const char *attr_name, tree list)\n+{\n+  gcc_checking_assert (attr_name[0] != '_');\n+  /* In most cases, list is NULL_TREE.  */\n+  if (list == NULL_TREE)\n+    return NULL_TREE;\n+  else\n+    {\n+      size_t attr_len = strlen (attr_name);\n+      /* Do the strlen() before calling the out-of-line implementation.\n+\t In most cases attr_name is a string constant, and the compiler\n+\t will optimize the strlen() away.  */\n+      while (list)\n+\t{\n+\t  tree attr = get_attribute_name (list);\n+\t  size_t ident_len = IDENTIFIER_LENGTH (attr);\n+\t  if (cmp_attribs (attr_name, attr_len, IDENTIFIER_POINTER (attr),\n+\t\t\t   ident_len))\n+\t    break;\n+\t  list = TREE_CHAIN (list);\n+\t}\n+\n+      return list;\n+    }\n+}\n+\n+/* Given an attribute name ATTR_NAME and a list of attributes LIST,\n+   return a pointer to the attribute's list first element if the attribute\n+   starts with ATTR_NAME.  ATTR_NAME must be in the form 'text' (not\n+   '__text__').  */\n+\n+static inline tree\n+lookup_attribute_by_prefix (const char *attr_name, tree list)\n+{\n+  gcc_checking_assert (attr_name[0] != '_');\n+  /* In most cases, list is NULL_TREE.  */\n+  if (list == NULL_TREE)\n+    return NULL_TREE;\n+  else\n+    {\n+      size_t attr_len = strlen (attr_name);\n+      while (list)\n+\t{\n+\t  size_t ident_len = IDENTIFIER_LENGTH (get_attribute_name (list));\n+\n+\t  if (attr_len > ident_len)\n+\t    {\n+\t      list = TREE_CHAIN (list);\n+\t      continue;\n+\t    }\n+\n+\t  const char *p = IDENTIFIER_POINTER (get_attribute_name (list));\n+\t  gcc_checking_assert (attr_len == 0 || p[0] != '_');\n+\n+\t  if (strncmp (attr_name, p, attr_len) == 0)\n+\t    break;\n+\n+\t  list = TREE_CHAIN (list);\n+\t}\n+\n+      return list;\n+    }\n+}\n+\n #endif // GCC_ATTRIBS_H"}, {"sha": "4dad298fe596d103f6ad4289bc2426d3b8513a66", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -115,6 +115,8 @@\n #include \"bb-reorder.h\"\n #include \"except.h\"\n #include \"fibonacci_heap.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* The number of rounds.  In most cases there will only be 4 rounds, but\n    when partitioning hot and cold basic blocks into separate sections of"}, {"sha": "fa0f89c8f336f20051a88a99532a2e6fb3fba7c9", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -60,6 +60,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"value-prof.h\"\n #include \"builtins.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"cilk.h\"\n #include \"tree-chkp.h\""}, {"sha": "d1cf80e42cdd5a505f82ca03351a312f90f81833", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,9 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-ada-spec.c: Include header files.\n+\t* c-ubsan.c: Likewise.\n+\t* c-warn.c: Likewise.\n+\n 2017-08-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/69389"}, {"sha": "0cd3d55b55b0f4a6343190dbfccaddea7e2208fc", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,6 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fold-const.h\"\n #include \"c-pragma.h\"\n #include \"cpp-id-data.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Local functions, macros and variables.  */\n static int dump_generic_ada_node (pretty_printer *, tree, tree, int, int,"}, {"sha": "b1386db9c258570e10cb051f0ca488eb85ab051b", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,10 +25,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-common.h\"\n #include \"ubsan.h\"\n #include \"c-family/c-ubsan.h\"\n-#include \"asan.h\"\n #include \"stor-layout.h\"\n #include \"builtins.h\"\n #include \"gimplify.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n+#include \"asan.h\"\n \n /* Instrument division by zero and INT_MIN / -1.  If not instrumenting,\n    return NULL_TREE.  */"}, {"sha": "9c3073444cf50860f1b331ad2c09b06825857914", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,6 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"diagnostic.h\"\n #include \"intl.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"gcc-rich-location.h\"\n #include \"gimplify.h\""}, {"sha": "d29f4444c817a050d9ee9bae6b01a6d70e7c4a4e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,8 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-convert.c: Include header files.\n+\t* c-typeck.c: Likewise.\n+\n 2017-08-07  Martin Liska  <mliska@suse.cz>\n \n \t* c-parser.c (c_parser_attributes): Canonicalize name of an"}, {"sha": "8752132d175bdc0a73bb6b799873219ce22af21c", "filename": "gcc/c/c-convert.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-convert.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -31,6 +31,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"convert.h\"\n #include \"langhooks.h\"\n #include \"ubsan.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n /* Change of width--truncation and extension of integers or reals--"}, {"sha": "321c953e7f1367bbef4864b50b36043b77b6d59a", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -50,6 +50,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"spellcheck-tree.h\"\n #include \"gcc-rich-location.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n /* Possible cases of implicit bad conversions.  Used to select"}, {"sha": "7599928c7cb0eeb3d372fadeac571e2c47bec1c9", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -52,6 +52,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssanames.h\"\n #include \"rtl-chkp.h\"\n #include \"intl.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Like PREFERRED_STACK_BOUNDARY but in units of bytes, not bits.  */\n #define STACK_BYTES (PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT)"}, {"sha": "7f0130d0365f885fe04e01def7d6b9163f37837d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -68,6 +68,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-outof-ssa.h\"\n #include \"cfgloop.h\"\n #include \"insn-attr.h\" /* For INSN_SCHEDULING.  */\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"tree-ssa-address.h\"\n #include \"output.h\""}, {"sha": "c6ab7e38ff6a1a4f699a0df688638a737f4d6af3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -61,6 +61,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-chkp.h\"\n #include \"context.h\"\n #include \"gimplify.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* FIXME: Only for PROP_loops, but cgraph shouldn't have to know about this.  */\n #include \"tree-pass.h\""}, {"sha": "e8cc765095d44f22366e11f1c21c084ce70a85df", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -204,6 +204,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tree-chkp.h\"\n #include \"lto-section-names.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Queue of cgraph nodes scheduled to be added into cgraph.  This is a\n    secondary queue used during optimization to accommodate passes that"}, {"sha": "28c4e0e64766060851c0c7cd6b86995fae25353d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -33,6 +33,7 @@\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "e13c5f9fc5738fcadbf0cbdf6e6c66d80f392315", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -26,6 +26,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"memmodel.h\"\n #include \"gimple.h\"\n #include \"df.h\""}, {"sha": "057f8756fba885df3af7ccb9f5620c7e6239ece7", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "fa3e2fa6c765674bc56aed0352507daa39e84a3c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -32,6 +32,7 @@\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "e453bfb681468affd01ff40ab333505ad451292a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -26,6 +26,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"cgraph.h\"\n #include \"c-family/c-common.h\"\n #include \"cfghooks.h\""}, {"sha": "f04fe8747777dab061820b922284b267fa3c7368", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"cfghooks.h\"\n #include \"df.h\"\n #include \"memmodel.h\""}, {"sha": "a7083c12898b2de9c6ab86759dea535d30b00132", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -32,6 +32,7 @@\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "ab6ef7adf1d6c3bd5026a09f2b79fc69fe85cf2a", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "b57881ac04e8d0a291fbe6b0be3afbded3d75a34", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"cfghooks.h\"\n #include \"df.h\"\n #include \"memmodel.h\""}, {"sha": "949db25c6500345bc66856a1ce9280143200fd71", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"insn-config.h\"\n #include \"emit-rtl.h\"\n #include \"cgraph.h\""}, {"sha": "4e27557d3ce9803f0551ada05d6d6203aa472c25", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"emit-rtl.h\"\n #include \"recog.h\""}, {"sha": "d83b2f31daa6a02cada95b776a9078fd863ea4f9", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -27,6 +27,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"emit-rtl.h\""}, {"sha": "1cdbaa81c8de9ae8c7e79eb3da8b8757c92e1281", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "78c5edc8f098656a4776429056bd2fd057f3cd9a", "filename": "gcc/config/ft32/ft32.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fft32%2Fft32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fft32%2Fft32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "0e0bb57768d4f3d976ed0223aec24fe4cab69709", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "405f74a75974cd8cf43bd401912bd4ca62642534", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"emit-rtl.h\"\n #include \"cgraph.h\"\n #include \"lto-streamer.h\""}, {"sha": "79c323f67ee9bfd2f8252632450b10ac430c0beb", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "5a92164ef053f600653a0a34eae6148797aa846d", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -24,6 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "214cc0ac5fde6d18056188e40db23495c0acb217", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -26,6 +26,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "d7893d7550a0b21dfb55c3f468965bcdced5b0b3", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,6 +28,7 @@\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"insn-config.h\"\n #include \"emit-rtl.h\"\n #include \"recog.h\""}, {"sha": "89726655122e55f4c649db0fbeb48e3671c6c0b9", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"backend.h\"\n #include \"cfghooks.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"rtl.h\"\n #include \"df.h\"\n #include \"alias.h\""}, {"sha": "e67376fb6aa0956836013cdf5fee35f7ba71a2b1", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,6 +28,7 @@\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"emit-rtl.h\"\n #include \"diagnostic-core.h\"\n #include \"stor-layout.h\""}, {"sha": "2cdd24056a5e4f052d71143f3b7e93b3fff3f38d", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -26,6 +26,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "6ca2fd9441cadd162c3462498f642be17b51629e", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "f46caac7e94840e8af673cfedb5ba33123402335", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"cfghooks.h\"\n #include \"cfgloop.h\"\n #include \"df.h\""}, {"sha": "19cd83f519361a769b053b860a5fef22cbe577c1", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"regs.h\"\n #include \"memmodel.h\""}, {"sha": "1ab79a722ed039e9e278edeaaace4fd163ac17f3", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"gimple-expr.h\"\n #include \"df.h\"\n #include \"memmodel.h\""}, {"sha": "7d7b9e27ca6c46603087bdb334526faa5a6df5be", "filename": "gcc/config/nds32/nds32-isr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnds32%2Fnds32-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnds32%2Fnds32-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-isr.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -27,6 +27,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"diagnostic-core.h\"\n #include \"output.h\"\n "}, {"sha": "14310de86724dde5678254fb55a0b2e2f051b2f5", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -27,6 +27,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "884b1dc367ee4a1113c25cb841dd60bf6754a7f3", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -27,6 +27,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "ffd50d781f032bde8c006c55be82d9392264ac10", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -62,6 +62,7 @@\n #include \"internal-fn.h\"\n #include \"gimple-iterator.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"tree-vrp.h\"\n #include \"tree-ssa-operands.h\"\n #include \"tree-ssanames.h\""}, {"sha": "52f76cfd5f1955bc15c0061ea6a1577cc07a4dad", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "fbbb34390f4fc7de4b7119f4f51c8027f15c473c", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "f2840894fc1b385762f39b372d17000c392034fd", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -31,6 +31,7 @@\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "cbf2f79bc4d833a54cecb17448c55498bddbced7", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -31,6 +31,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"alias.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"varasm.h\"\n #include \"stor-layout.h\"\n #include \"calls.h\""}, {"sha": "daae27b404a5498f3e5f30782dd49bff6906d2ce", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -29,6 +29,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"cfghooks.h\"\n #include \"df.h\"\n #include \"memmodel.h\""}, {"sha": "deced953d753812e397b8e4a31a7cef845c7fc33", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "b8ef3409942db66a9345d6cfa9ed54f9ccf94031", "filename": "gcc/config/sol2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"diagnostic-core.h\"\n #include \"varasm.h\"\n #include \"output.h\""}, {"sha": "d494ecf24103b2baea3452bb564f45f712ad4565", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "b6d03d7afd4c31c445955c45744e8a54ad69212e", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,6 +28,7 @@\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "1a362524e8d24a8bfc9578579c4f30c4010f6739", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -25,6 +25,8 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"gimple.h\"\n #include \"df.h\"\n #include \"memmodel.h\""}, {"sha": "81559acfce001710738c8508685f4e921c394315", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -30,6 +30,7 @@\n #include \"df.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "f03f0670ce9216f12eac987bf2e0fd19e98bc011", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -30,6 +30,7 @@\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "fad4849bc5a9e4974b9644203f08b19c0c87c284", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -24,6 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"df.h\"\n #include \"memmodel.h\"\n #include \"tm_p.h\""}, {"sha": "2c5b6734ae0ae5d3d9542945566bf2e4eaf4d601", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -30,6 +30,7 @@\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"expmed.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "7c36e68b251f9cd2cd231f24a5eb9cde6cedf031", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\""}, {"sha": "b1a53afb81166c1e7b2dadec6888bfbd563fca15", "filename": "gcc/convert.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"builtins.h\"\n #include \"ubsan.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n #define maybe_fold_build1_loc(FOLD_P, LOC, CODE, TYPE, EXPR) \\"}, {"sha": "23f6a1d2a7a1d2721fd61e40c6c217d91d0d14d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,14 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* call.c: Include header files.\n+\t* cp-gimplify.c: Likewise.\n+\t* cp-ubsan.c: Likewise.\n+\t* cvt.c: Likewise.\n+\t* init.c: Likewise.\n+\t* search.c: Likewise.\n+\t* semantics.c: Likewise.\n+\t* typeck.c: Likewise.\n+\n 2017-08-07  Martin Liska  <mliska@suse.cz>\n \n \t* parser.c (cp_parser_gnu_attribute_list): Canonicalize name of an"}, {"sha": "fdd373116e0999f47f8bb90fec5511db1c272603", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"c-family/c-objc.h\"\n #include \"internal-fn.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* The various kinds of conversion.  */\n "}, {"sha": "528e38816d368ad5da4f28136b3be07bb11bbb58", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-ubsan.h\"\n #include \"cilk.h\"\n #include \"cp-cilkplus.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n /* Forward declarations.  */"}, {"sha": "cd2b60ad4889d0c97df6a9086d28f989de1b8064", "filename": "gcc/cp/cp-ubsan.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcp-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcp-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-ubsan.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"cp-tree.h\"\n #include \"ubsan.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n /* Test if we should instrument vptr access.  */"}, {"sha": "fd758d3c2dc3614390d173c1369f07fd73d92a11", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"intl.h\"\n #include \"convert.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static tree convert_to_pointer_force (tree, tree, tsubst_flags_t);\n static tree build_type_conversion (tree, tree);"}, {"sha": "81804112fd017954a6e3f4d96267aadd053a2ff2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"c-family/c-ubsan.h\"\n #include \"intl.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n static bool begin_init_stmts (tree *, tree *);"}, {"sha": "ced82da61178435e805e4ee8d1fd872ae524bea4", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,6 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"toplev.h\"\n #include \"spellcheck-tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static int is_subobject_of_p (tree, tree);\n static tree dfs_lookup_base (tree, void *);"}, {"sha": "5401e78fbc6c801aa0429986a7478d03a96b9392", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -40,6 +40,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"omp-general.h\"\n #include \"convert.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"gomp-constants.h\"\n #include \"predict.h\"\n "}, {"sha": "074dae2dfee3325041b45e9b52e4bb357cb2acc1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-ubsan.h\"\n #include \"params.h\"\n #include \"gcc-rich-location.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n static tree cp_build_addr_expr_strict (tree, tsubst_flags_t);"}, {"sha": "8e422279a61b730f598a8f287cd070cc54bd19b9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -92,6 +92,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dfa.h\"\n #include \"gdb/gdb-index.h\"\n #include \"rtl-iter.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static void dwarf2out_source_line (unsigned int, unsigned int, const char *,\n \t\t\t\t   int, bool);"}, {"sha": "ad999f77fdd28810a676980f62cd9cd87d8bca8a", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -76,6 +76,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"params.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"rtl-iter.h\"\n #include \"print-rtl.h\""}, {"sha": "5a118ca50a18cc3fbf03aadfad87b58d41c00e28", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -79,6 +79,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"selftest.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Nonzero if we are folding constants inside an initializer; zero\n    otherwise.  */"}, {"sha": "09138ab41adc66ea6812ad04312747cc766aca6e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,7 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* trans-types.c: Include header files.\n+\n 2017-08-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/68829"}, {"sha": "76ee97b81c04391efd7b5082f382e54cc7281946", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-types.h\"\n #include \"trans-const.h\"\n #include \"dwarf2out.h\"\t/* For struct array_descr_info.  */\n+#include \"attribs.h\"\n \f\n \n #if (GFC_MAX_DIMENSIONS < 10)"}, {"sha": "20c287bc8e01436831814ad7f375b37b3bb49895", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -77,6 +77,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl-chkp.h\"\n #include \"tree-dfa.h\"\n #include \"tree-ssa.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* So we can assign to cfun in this file.  */\n #undef cfun"}, {"sha": "c1771fcf1d0551a7fb398a2e080e401e8ba05c33", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -35,6 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-set.h\"\n #include \"rtl.h\"\n #include \"tree-pass.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* ----- Type related -----  */\n "}, {"sha": "251446c5b828db0c9e6f99e44a1e798b4b95db82", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -56,6 +56,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-chkp.h\"\n #include \"tree-cfg.h\"\n #include \"fold-const-call.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n /* Return true when DECL can be referenced from current unit."}, {"sha": "5727d14777a234372037006702cfd1cd25ca9460", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"trans-mem.h\"\n #include \"cfganal.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n #define INDENT(SPACE)\t\t\t\t\t\t\t\\"}, {"sha": "c4e6f8176b9a4c11f9252cacdd083ea83c464c4e", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -41,6 +41,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"selftest.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n "}, {"sha": "86623e09f5d8ab898b1e497d321717e3778606ed", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -60,6 +60,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-walk.h\"\n #include \"langhooks-def.h\"\t/* FIXME: for lhd_set_decl_assembler_name */\n #include \"builtins.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"dbgcnt.h\"\n "}, {"sha": "c8c12afb04ceaad8b911f7e89151edd31658ff9a", "filename": "gcc/hsa-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fhsa-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fhsa-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-common.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -40,6 +40,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"ctype.h\"\n #include \"builtins.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Structure containing intermediate HSA representation of the generated\n    function.  */"}, {"sha": "bd227626e838f8318a61ab8e95271ef7eed0e107", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -60,6 +60,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"builtins.h\"\n #include \"stor-layout.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Print a warning message and set that we have seen an error.  */\n "}, {"sha": "2b72367a1d396ac5151c6142072231bb8ce76548", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"dojump.h\"\n #include \"expr.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"ubsan.h\"\n #include \"recog.h\""}, {"sha": "704ef6e4550460b53074e25941b4bb2caff043dd", "filename": "gcc/ipa-chkp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -34,6 +34,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-chkp.h\"\n #include \"tree-inline.h\"\n #include \"ipa-chkp.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /*  Pointer Bounds Checker has two IPA passes to support code instrumentation.\n "}, {"sha": "6b3d8d7364ced456288f5fee9332875bd7133dd4", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -122,6 +122,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-fnsummary.h\"\n #include \"ipa-utils.h\"\n #include \"tree-ssa-ccp.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n template <typename valtype> class ipcp_value;\n "}, {"sha": "f0aecfbc455d1c1d25bfe10800b98619d01816eb", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -129,6 +129,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"gimple-pretty-print.h\"\n #include \"intl.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Hash based set of pairs of types.  */\n struct type_pair"}, {"sha": "076ccd40bd7d74817f5bbb02408d0c7073c1a319", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -82,6 +82,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cilk.h\"\n #include \"cfgexpand.h\"\n #include \"gimplify.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Summaries.  */\n function_summary <ipa_fn_summary *> *ipa_fn_summaries;"}, {"sha": "dd46cb613624c5eb7de0a1313a707ec19428eef9", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -117,6 +117,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"auto-profile.h\"\n #include \"builtins.h\"\n #include \"fibonacci_heap.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n typedef fibonacci_heap <sreal, cgraph_edge> edge_heap_t;"}, {"sha": "998024893a5d159a91031b857f4e1c4ef1bdb019", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -84,6 +84,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"calls.h\"\n #include \"varasm.h\"\n #include \"ipa-utils.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Return true when NODE can not be local. Worker for cgraph_local_node_p.  */\n "}, {"sha": "16df4cacedd4093d6952f8987da6eb527df57936", "filename": "gcc/ipa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -37,7 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-fnsummary.h\"\n #include \"dbgcnt.h\"\n #include \"debug.h\"\n-\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Return true when NODE has ADDR reference.  */\n "}, {"sha": "15f0eaadf206e5a5f566947874fa9ceeb99b7f50", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"omp-offload.h\"\n #include \"ipa-chkp.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* True when asm nodes has been output.  */\n bool asm_nodes_output = false;"}, {"sha": "cd9de758ec37550fb5d448d4c911127f21f7207c", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,8 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-lang.c: Include header files.\n+\t* lto-symtab.c: Likewise.\n+\n 2017-08-03  Richard Biener  <rguenther@suse.de>\n \n \t* lto-symtab.h (lto_symtab_prevail_decl): Do not use"}, {"sha": "375cdd1a90be74534abbd53e02de4bf554618612", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -35,6 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-tree.h\"\n #include \"lto.h\"\n #include \"cilk.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_leaf_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "70190d0fda27b38c3202a3ed9dc425f0783b7c0b", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"alias.h\"\n #include \"lto-symtab.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Replace the cgraph node NODE with PREVAILING_NODE in the cgraph, merging\n    all edges and removing the old node.  */"}, {"sha": "5d632a68b73985d565b292ec90d6e81fff343707", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -1,3 +1,9 @@\n+2017-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* objc-gnu-runtime-abi-01.c: Include header files.\n+\t* objc-next-runtime-abi-01.c: Likewise.\n+\t* objc-next-runtime-abi-02.c: Likewise.\n+\n 2017-07-20  Nathan Sidwell  <nathan@acm.org>\n \n \tRemove TYPE_METHODS."}, {"sha": "b53d1820db3e700d0a7ec3ced42bd425b4aa236d", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -22,7 +22,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"options.h\"\n+#include \"tree.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n \n #ifdef OBJCPLUS\n #include \"cp/cp-tree.h\""}, {"sha": "686d9285482cd6a70efd13d6ea5d681826067874", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -26,7 +26,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"tree.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n \n #ifdef OBJCPLUS\n #include \"cp/cp-tree.h\""}, {"sha": "a2245a4c3393d77e5bee32bc39ea21ed827473ec", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -28,7 +28,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"tree.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n \n #ifdef OBJCPLUS\n #include \"cp/cp-tree.h\""}, {"sha": "ac83ba168d23ab7bf387cadf8d786a3bf6989b53", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -58,7 +58,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"hsa-common.h\"\n #include \"debug.h\"\n-\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* OMP region information.  Every parallel and workshare\n    directive is enclosed between two markers, the OMP_* directive"}, {"sha": "af955bce7832e138521308189786d54107cbd525", "filename": "gcc/omp-general.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -33,7 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"fold-const.h\"\n #include \"langhooks.h\"\n #include \"omp-general.h\"\n-\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n tree\n omp_find_clause (tree clauses, enum omp_clause_code kind)"}, {"sha": "3df60561d5bba8ea7124d562b0861573ed345364", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -58,6 +58,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"gimple-pretty-print.h\"\n #include \"hsa-common.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Lowering of OMP parallel and workshare constructs proceeds in two\n    phases.  The first phase scans the function looking for OMP statements"}, {"sha": "2d4fd41168054a5894fe346a5c8ea2d12bed9de6", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -49,6 +49,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"gimple-pretty-print.h\"\n #include \"intl.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Describe the OpenACC looping structure of a function.  The entire\n    function is held in a 'NULL' loop.  */"}, {"sha": "0a3a386f33dfea64829b208017c255641d40600c", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -48,7 +48,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-prop.h\"\n #include \"tree-eh.h\"\n #include \"varasm.h\"\n-\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Allocate a fresh `simd_clone' and return it.  NARGS is the number\n    of arguments to reserve space for.  */"}, {"sha": "fc55512e5542d79187381244fc0739812e950dda", "filename": "gcc/opts-global.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -35,6 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin.h\"\n #include \"toplev.h\"\n #include \"context.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n typedef const char *const_char_p; /* For DEF_VEC_P.  */"}, {"sha": "2c9add84c1d883de7de90872c4ef862f84320180", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -61,6 +61,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfgcleanup.h\"\n #include \"insn-addr.h\" /* for INSN_ADDRESSES_ALLOC.  */\n #include \"diagnostic-core.h\" /* for fnotice */\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n using namespace gcc;\n "}, {"sha": "80c2c1966d84c20ddc227d101aaf29e72d2ef35d", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -59,6 +59,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"selftest.h\"\n #include \"cfgrtl.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Enum with reasons why a predictor is ignored.  */\n "}, {"sha": "b19de8bbbc5fc99416b4440c98dca0e9a3dfc8ea", "filename": "gcc/sancov.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fsancov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fsancov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsancov.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfg.h\"\n #include \"tree-pass.h\"\n #include \"tree-iterator.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n namespace {"}, {"sha": "d17c7db3321b37acf1fe3be813425ae3a7850e79", "filename": "gcc/sanopt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -30,6 +30,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"fold-const.h\"\n #include \"gimple-iterator.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"ubsan.h\"\n #include \"params.h\""}, {"sha": "7e5eb7d6416b2b50dc288b3f4477061862012028", "filename": "gcc/symtab.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -35,6 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"ipa-utils.h\"\n #include \"calls.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static const char *ipa_ref_use_name[] = {\"read\",\"write\",\"addr\",\"alias\",\"chkp\"};\n "}, {"sha": "d23714c47738d0c5f8f98d2e6ad3dfd88ff47681", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -63,6 +63,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hosthooks.h\"\n #include \"opts.h\"\n #include \"opts-diagnostic.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"tsan.h\"\n #include \"plugin.h\""}, {"sha": "40b5368118664bdaaeb06546c390924feb1763f8", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -50,7 +50,8 @@\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n #include \"tree-ssa-address.h\"\n-\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n #define A_RUNINSTRUMENTEDCODE\t0x0001\n #define A_RUNUNINSTRUMENTEDCODE\t0x0002"}, {"sha": "12af458fb90d79a0df94125075c1a3db2b98e5f2", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -52,6 +52,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dfa.h\"\n #include \"ipa-chkp.h\"\n #include \"params.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /*  Pointer Bounds Checker instruments code with memory checks to find\n     out-of-bounds memory accesses.  Checks are performed by computing"}, {"sha": "938197992ceb386592496cf63dcd55db1efa59bd", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -43,6 +43,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n #include \"gimple-low.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n /* In some instances a tree and a gimple need to be stored in a same table,"}, {"sha": "28f72e4ce3204d7cad7c2311c3e828fedcfaf099", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"domwalk.h\"\n #include \"statistics.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n #define PERCENT(x,y) ((float)(x) * 100.0 / (float)(y))"}, {"sha": "a56b78a4510388f075fa2aeb23f4c4703565f944", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-fold.h\"\n #include \"gimple-iterator.h\"\n #include \"tree-cfg.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n struct object_size_info\n {"}, {"sha": "cfc143f3c025c43d0b9c9772f170d26638c16cd6", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -58,6 +58,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-eh.h\"\n #include \"gomp-constants.h\"\n #include \"tree-dfa.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* This pass tries to distribute iterations of loops into several threads.\n    The implementation is straightforward -- for each loop we test whether its"}, {"sha": "4b73255018c984d27e1f8e14c62daa85eee40d15", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -50,6 +50,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"profile.h\"\n #include \"tree-cfgcleanup.h\"\n #include \"params.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static GTY(()) tree gcov_type_node;\n static GTY(()) tree tree_interval_profiler_fn;"}, {"sha": "3940d538ca77997a43e2a02b803c5c5f1ded9763", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -145,6 +145,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-ccp.h\"\n #include \"tree-dfa.h\"\n #include \"diagnostic-core.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Possible lattice values.  */\n typedef enum"}, {"sha": "8738fe21a6e137973559287ce3075680fee62e71", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"ipa-utils.h\"\n #include \"cfgloop.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n static void verify_live_on_entry (tree_live_info_p);\n "}, {"sha": "1e8491757a6d663d69e99712511add2b5dfaecd8", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vectorizer.h\"\n #include \"omp-general.h\"\n #include \"diagnostic-core.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n \n /* A pass making sure loops are fixed up.  */"}, {"sha": "d62a49d2d1e55ce7219a2a0c8c595f3d38574158", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -60,6 +60,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"domwalk.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-match.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* This algorithm is based on the SCC algorithm presented by Keith\n    Cooper and L. Taylor Simpson in \"SCC-Based Value numbering\""}, {"sha": "c120ce4030307b45fd897bab2169b671b01bf8cc", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -40,7 +40,8 @@\n #include \"params.h\"\n #include \"gimple-walk.h\"\n #include \"varasm.h\"\n-\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* The idea behind this analyzer is to generate set constraints from the\n    program, then solve the resulting constraints in order to generate the"}, {"sha": "8b6da9645ce020f73b02c2c56676ff022459151d", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -41,6 +41,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgexpand.h\"\n #include \"tree-cfg.h\"\n #include \"tree-dfa.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n \n /* Pointer map of variable mappings, keyed by edge.  */"}, {"sha": "600470080aadad638bf95b3ee7d8ce32dc1a3ac3", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"ipa-chkp.h\"\n #include \"gomp-constants.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"opts.h\"\n "}, {"sha": "feddfa2287c259c01e7daeb10412886dd5a89d62", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -76,6 +76,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"dbgcnt.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n \n /* Loop or bb location.  */"}, {"sha": "657a8d186c868cc68f2f33e80cdbc2313bfb04e9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -62,6 +62,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"domwalk.h\"\n #include \"tree-cfgcleanup.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n #define VR_INITIALIZER { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL }\n "}, {"sha": "c493edd561d5400bf37b0baaad84d281c3a65a88", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 683, "changes": 685, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -62,6 +62,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"print-tree.h\"\n #include \"ipa-utils.h\"\n #include \"selftest.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n /* Tree code classes.  */\n \n@@ -4822,254 +4824,6 @@ protected_set_expr_location (tree t, location_t loc)\n     SET_EXPR_LOCATION (t, loc);\n }\n \f\n-/* Return a declaration like DDECL except that its DECL_ATTRIBUTES\n-   is ATTRIBUTE.  */\n-\n-tree\n-build_decl_attribute_variant (tree ddecl, tree attribute)\n-{\n-  DECL_ATTRIBUTES (ddecl) = attribute;\n-  return ddecl;\n-}\n-\n-/* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n-   is ATTRIBUTE and its qualifiers are QUALS.\n-\n-   Record such modified types already made so we don't make duplicates.  */\n-\n-tree\n-build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n-{\n-  if (! attribute_list_equal (TYPE_ATTRIBUTES (ttype), attribute))\n-    {\n-      tree ntype;\n-\n-      /* Building a distinct copy of a tagged type is inappropriate; it\n-\t causes breakage in code that expects there to be a one-to-one\n-\t relationship between a struct and its fields.\n-\t build_duplicate_type is another solution (as used in\n-\t handle_transparent_union_attribute), but that doesn't play well\n-\t with the stronger C++ type identity model.  */\n-      if (TREE_CODE (ttype) == RECORD_TYPE\n-\t  || TREE_CODE (ttype) == UNION_TYPE\n-\t  || TREE_CODE (ttype) == QUAL_UNION_TYPE\n-\t  || TREE_CODE (ttype) == ENUMERAL_TYPE)\n-\t{\n-\t  warning (OPT_Wattributes,\n-\t\t   \"ignoring attributes applied to %qT after definition\",\n-\t\t   TYPE_MAIN_VARIANT (ttype));\n-\t  return build_qualified_type (ttype, quals);\n-\t}\n-\n-      ttype = build_qualified_type (ttype, TYPE_UNQUALIFIED);\n-      ntype = build_distinct_type_copy (ttype);\n-\n-      TYPE_ATTRIBUTES (ntype) = attribute;\n-\n-      hashval_t hash = type_hash_canon_hash (ntype);\n-      ntype = type_hash_canon (hash, ntype);\n-\n-      /* If the target-dependent attributes make NTYPE different from\n-\t its canonical type, we will need to use structural equality\n-\t checks for this type. */\n-      if (TYPE_STRUCTURAL_EQUALITY_P (ttype)\n-          || !comp_type_attributes (ntype, ttype))\n-\tSET_TYPE_STRUCTURAL_EQUALITY (ntype);\n-      else if (TYPE_CANONICAL (ntype) == ntype)\n-\tTYPE_CANONICAL (ntype) = TYPE_CANONICAL (ttype);\n-\n-      ttype = build_qualified_type (ntype, quals);\n-    }\n-  else if (TYPE_QUALS (ttype) != quals)\n-    ttype = build_qualified_type (ttype, quals);\n-\n-  return ttype;\n-}\n-\n-/* Check if \"omp declare simd\" attribute arguments, CLAUSES1 and CLAUSES2, are\n-   the same.  */\n-\n-static bool\n-omp_declare_simd_clauses_equal (tree clauses1, tree clauses2)\n-{\n-  tree cl1, cl2;\n-  for (cl1 = clauses1, cl2 = clauses2;\n-       cl1 && cl2;\n-       cl1 = OMP_CLAUSE_CHAIN (cl1), cl2 = OMP_CLAUSE_CHAIN (cl2))\n-    {\n-      if (OMP_CLAUSE_CODE (cl1) != OMP_CLAUSE_CODE (cl2))\n-\treturn false;\n-      if (OMP_CLAUSE_CODE (cl1) != OMP_CLAUSE_SIMDLEN)\n-\t{\n-\t  if (simple_cst_equal (OMP_CLAUSE_DECL (cl1),\n-\t\t\t\tOMP_CLAUSE_DECL (cl2)) != 1)\n-\t    return false;\n-\t}\n-      switch (OMP_CLAUSE_CODE (cl1))\n-\t{\n-\tcase OMP_CLAUSE_ALIGNED:\n-\t  if (simple_cst_equal (OMP_CLAUSE_ALIGNED_ALIGNMENT (cl1),\n-\t\t\t\tOMP_CLAUSE_ALIGNED_ALIGNMENT (cl2)) != 1)\n-\t    return false;\n-\t  break;\n-\tcase OMP_CLAUSE_LINEAR:\n-\t  if (simple_cst_equal (OMP_CLAUSE_LINEAR_STEP (cl1),\n-\t\t\t\tOMP_CLAUSE_LINEAR_STEP (cl2)) != 1)\n-\t    return false;\n-\t  break;\n-\tcase OMP_CLAUSE_SIMDLEN:\n-\t  if (simple_cst_equal (OMP_CLAUSE_SIMDLEN_EXPR (cl1),\n-\t\t\t\tOMP_CLAUSE_SIMDLEN_EXPR (cl2)) != 1)\n-\t    return false;\n-\tdefault:\n-\t  break;\n-\t}\n-    }\n-  return true;\n-}\n-\n-/* Compare two constructor-element-type constants.  Return 1 if the lists\n-   are known to be equal; otherwise return 0.  */\n-\n-static bool\n-simple_cst_list_equal (const_tree l1, const_tree l2)\n-{\n-  while (l1 != NULL_TREE && l2 != NULL_TREE)\n-    {\n-      if (simple_cst_equal (TREE_VALUE (l1), TREE_VALUE (l2)) != 1)\n-\treturn false;\n-\n-      l1 = TREE_CHAIN (l1);\n-      l2 = TREE_CHAIN (l2);\n-    }\n-\n-  return l1 == l2;\n-}\n-\n-/* Compare two identifier nodes representing attributes.\n-   Return true if they are the same, false otherwise.  */\n-\n-static bool\n-cmp_attrib_identifiers (const_tree attr1, const_tree attr2)\n-{\n-  /* Make sure we're dealing with IDENTIFIER_NODEs.  */\n-  gcc_checking_assert (TREE_CODE (attr1) == IDENTIFIER_NODE\n-\t\t       && TREE_CODE (attr2) == IDENTIFIER_NODE);\n-\n-  /* Identifiers can be compared directly for equality.  */\n-  if (attr1 == attr2)\n-    return true;\n-\n-  return cmp_attribs (IDENTIFIER_POINTER (attr1), IDENTIFIER_LENGTH (attr1),\n-\t\t      IDENTIFIER_POINTER (attr2), IDENTIFIER_LENGTH (attr2));\n-}\n-\n-/* Compare two attributes for their value identity.  Return true if the\n-   attribute values are known to be equal; otherwise return false.  */\n-\n-bool\n-attribute_value_equal (const_tree attr1, const_tree attr2)\n-{\n-  if (TREE_VALUE (attr1) == TREE_VALUE (attr2))\n-    return true;\n-\n-  if (TREE_VALUE (attr1) != NULL_TREE\n-      && TREE_CODE (TREE_VALUE (attr1)) == TREE_LIST\n-      && TREE_VALUE (attr2) != NULL_TREE\n-      && TREE_CODE (TREE_VALUE (attr2)) == TREE_LIST)\n-    {\n-      /* Handle attribute format.  */\n-      if (is_attribute_p (\"format\", get_attribute_name (attr1)))\n-\t{\n-\t  attr1 = TREE_VALUE (attr1);\n-\t  attr2 = TREE_VALUE (attr2);\n-\t  /* Compare the archetypes (printf/scanf/strftime/...).  */\n-\t  if (!cmp_attrib_identifiers (TREE_VALUE (attr1),\n-\t\t\t\t       TREE_VALUE (attr2)))\n-\t    return false;\n-\t  /* Archetypes are the same.  Compare the rest.  */\n-\t  return (simple_cst_list_equal (TREE_CHAIN (attr1),\n-\t\t\t\t\t TREE_CHAIN (attr2)) == 1);\n-\t}\n-      return (simple_cst_list_equal (TREE_VALUE (attr1),\n-\t\t\t\t     TREE_VALUE (attr2)) == 1);\n-    }\n-\n-  if ((flag_openmp || flag_openmp_simd)\n-      && TREE_VALUE (attr1) && TREE_VALUE (attr2)\n-      && TREE_CODE (TREE_VALUE (attr1)) == OMP_CLAUSE\n-      && TREE_CODE (TREE_VALUE (attr2)) == OMP_CLAUSE)\n-    return omp_declare_simd_clauses_equal (TREE_VALUE (attr1),\n-\t\t\t\t\t   TREE_VALUE (attr2));\n-\n-  return (simple_cst_equal (TREE_VALUE (attr1), TREE_VALUE (attr2)) == 1);\n-}\n-\n-/* Return 0 if the attributes for two types are incompatible, 1 if they\n-   are compatible, and 2 if they are nearly compatible (which causes a\n-   warning to be generated).  */\n-int\n-comp_type_attributes (const_tree type1, const_tree type2)\n-{\n-  const_tree a1 = TYPE_ATTRIBUTES (type1);\n-  const_tree a2 = TYPE_ATTRIBUTES (type2);\n-  const_tree a;\n-\n-  if (a1 == a2)\n-    return 1;\n-  for (a = a1; a != NULL_TREE; a = TREE_CHAIN (a))\n-    {\n-      const struct attribute_spec *as;\n-      const_tree attr;\n-\n-      as = lookup_attribute_spec (get_attribute_name (a));\n-      if (!as || as->affects_type_identity == false)\n-        continue;\n-\n-      attr = lookup_attribute (as->name, CONST_CAST_TREE (a2));\n-      if (!attr || !attribute_value_equal (a, attr))\n-        break;\n-    }\n-  if (!a)\n-    {\n-      for (a = a2; a != NULL_TREE; a = TREE_CHAIN (a))\n-\t{\n-\t  const struct attribute_spec *as;\n-\n-\t  as = lookup_attribute_spec (get_attribute_name (a));\n-\t  if (!as || as->affects_type_identity == false)\n-\t    continue;\n-\n-\t  if (!lookup_attribute (as->name, CONST_CAST_TREE (a1)))\n-\t    break;\n-\t  /* We don't need to compare trees again, as we did this\n-\t     already in first loop.  */\n-\t}\n-      /* All types - affecting identity - are equal, so\n-         there is no need to call target hook for comparison.  */\n-      if (!a)\n-        return 1;\n-    }\n-  if (lookup_attribute (\"transaction_safe\", CONST_CAST_TREE (a)))\n-    return 0;\n-  /* As some type combinations - like default calling-convention - might\n-     be compatible, we have to call the target hook to get the final result.  */\n-  return targetm.comp_type_attributes (type1, type2);\n-}\n-\n-/* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n-   is ATTRIBUTE.\n-\n-   Record such modified types already made so we don't make duplicates.  */\n-\n-tree\n-build_type_attribute_variant (tree ttype, tree attribute)\n-{\n-  return build_type_attribute_qual_variant (ttype, attribute,\n-\t\t\t\t\t    TYPE_QUALS (ttype));\n-}\n-\n-\n /* Reset the expression *EXPR_P, a size or position.\n \n    ??? We could reset all non-constant sizes or positions.  But it's cheap\n@@ -6023,379 +5777,6 @@ make_pass_ipa_free_lang_data (gcc::context *ctxt)\n {\n   return new pass_ipa_free_lang_data (ctxt);\n }\n-\n-/* The backbone of lookup_attribute().  ATTR_LEN is the string length\n-   of ATTR_NAME, and LIST is not NULL_TREE.  */\n-tree\n-private_lookup_attribute (const char *attr_name, size_t attr_len, tree list)\n-{\n-  while (list)\n-    {\n-      tree attr = get_attribute_name (list);\n-      size_t ident_len = IDENTIFIER_LENGTH (attr);\n-      if (cmp_attribs (attr_name, attr_len, IDENTIFIER_POINTER (attr),\n-\t\t       ident_len))\n-\tbreak;\n-      list = TREE_CHAIN (list);\n-    }\n-\n-  return list;\n-}\n-\n-/* Given an attribute name ATTR_NAME and a list of attributes LIST,\n-   return a pointer to the attribute's list first element if the attribute\n-   starts with ATTR_NAME.  */\n-\n-tree\n-private_lookup_attribute_by_prefix (const char *attr_name, size_t attr_len,\n-\t\t\t\t    tree list)\n-{\n-  while (list)\n-    {\n-      size_t ident_len = IDENTIFIER_LENGTH (get_attribute_name (list));\n-\n-      if (attr_len > ident_len)\n-\t{\n-\t  list = TREE_CHAIN (list);\n-\t  continue;\n-\t}\n-\n-      const char *p = IDENTIFIER_POINTER (get_attribute_name (list));\n-      gcc_checking_assert (attr_len == 0 || p[0] != '_');\n-\n-      if (strncmp (attr_name, p, attr_len) == 0)\n-\tbreak;\n-\n-      list = TREE_CHAIN (list);\n-    }\n-\n-  return list;\n-}\n-\n-\n-/* A variant of lookup_attribute() that can be used with an identifier\n-   as the first argument, and where the identifier can be either\n-   'text' or '__text__'.\n-\n-   Given an attribute ATTR_IDENTIFIER, and a list of attributes LIST,\n-   return a pointer to the attribute's list element if the attribute\n-   is part of the list, or NULL_TREE if not found.  If the attribute\n-   appears more than once, this only returns the first occurrence; the\n-   TREE_CHAIN of the return value should be passed back in if further\n-   occurrences are wanted.  ATTR_IDENTIFIER must be an identifier but\n-   can be in the form 'text' or '__text__'.  */\n-static tree\n-lookup_ident_attribute (tree attr_identifier, tree list)\n-{\n-  gcc_checking_assert (TREE_CODE (attr_identifier) == IDENTIFIER_NODE);\n-\n-  while (list)\n-    {\n-      gcc_checking_assert (TREE_CODE (get_attribute_name (list))\n-\t\t\t   == IDENTIFIER_NODE);\n-\n-      if (cmp_attrib_identifiers (attr_identifier,\n-\t\t\t\t  get_attribute_name (list)))\n-\t/* Found it.  */\n-\tbreak;\n-      list = TREE_CHAIN (list);\n-    }\n-\n-  return list;\n-}\n-\n-/* Remove any instances of attribute ATTR_NAME in LIST and return the\n-   modified list.  */\n-\n-tree\n-remove_attribute (const char *attr_name, tree list)\n-{\n-  tree *p;\n-  gcc_checking_assert (attr_name[0] != '_');\n-\n-  for (p = &list; *p; )\n-    {\n-      tree l = *p;\n-\n-      tree attr = get_attribute_name (l);\n-      if (is_attribute_p (attr_name, attr))\n-\t*p = TREE_CHAIN (l);\n-      else\n-\tp = &TREE_CHAIN (l);\n-    }\n-\n-  return list;\n-}\n-\n-/* Return an attribute list that is the union of a1 and a2.  */\n-\n-tree\n-merge_attributes (tree a1, tree a2)\n-{\n-  tree attributes;\n-\n-  /* Either one unset?  Take the set one.  */\n-\n-  if ((attributes = a1) == 0)\n-    attributes = a2;\n-\n-  /* One that completely contains the other?  Take it.  */\n-\n-  else if (a2 != 0 && ! attribute_list_contained (a1, a2))\n-    {\n-      if (attribute_list_contained (a2, a1))\n-\tattributes = a2;\n-      else\n-\t{\n-\t  /* Pick the longest list, and hang on the other list.  */\n-\n-\t  if (list_length (a1) < list_length (a2))\n-\t    attributes = a2, a2 = a1;\n-\n-\t  for (; a2 != 0; a2 = TREE_CHAIN (a2))\n-\t    {\n-\t      tree a;\n-\t      for (a = lookup_ident_attribute (get_attribute_name (a2),\n-\t\t\t\t\t       attributes);\n-\t\t   a != NULL_TREE && !attribute_value_equal (a, a2);\n-\t\t   a = lookup_ident_attribute (get_attribute_name (a2),\n-\t\t\t\t\t       TREE_CHAIN (a)))\n-\t\t;\n-\t      if (a == NULL_TREE)\n-\t\t{\n-\t\t  a1 = copy_node (a2);\n-\t\t  TREE_CHAIN (a1) = attributes;\n-\t\t  attributes = a1;\n-\t\t}\n-\t    }\n-\t}\n-    }\n-  return attributes;\n-}\n-\n-/* Given types T1 and T2, merge their attributes and return\n-  the result.  */\n-\n-tree\n-merge_type_attributes (tree t1, tree t2)\n-{\n-  return merge_attributes (TYPE_ATTRIBUTES (t1),\n-\t\t\t   TYPE_ATTRIBUTES (t2));\n-}\n-\n-/* Given decls OLDDECL and NEWDECL, merge their attributes and return\n-   the result.  */\n-\n-tree\n-merge_decl_attributes (tree olddecl, tree newdecl)\n-{\n-  return merge_attributes (DECL_ATTRIBUTES (olddecl),\n-\t\t\t   DECL_ATTRIBUTES (newdecl));\n-}\n-\n-#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-\n-/* Specialization of merge_decl_attributes for various Windows targets.\n-\n-   This handles the following situation:\n-\n-     __declspec (dllimport) int foo;\n-     int foo;\n-\n-   The second instance of `foo' nullifies the dllimport.  */\n-\n-tree\n-merge_dllimport_decl_attributes (tree old, tree new_tree)\n-{\n-  tree a;\n-  int delete_dllimport_p = 1;\n-\n-  /* What we need to do here is remove from `old' dllimport if it doesn't\n-     appear in `new'.  dllimport behaves like extern: if a declaration is\n-     marked dllimport and a definition appears later, then the object\n-     is not dllimport'd.  We also remove a `new' dllimport if the old list\n-     contains dllexport:  dllexport always overrides dllimport, regardless\n-     of the order of declaration.  */\n-  if (!VAR_OR_FUNCTION_DECL_P (new_tree))\n-    delete_dllimport_p = 0;\n-  else if (DECL_DLLIMPORT_P (new_tree)\n-     \t   && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (old)))\n-    {\n-      DECL_DLLIMPORT_P (new_tree) = 0;\n-      warning (OPT_Wattributes, \"%q+D already declared with dllexport attribute: \"\n-\t      \"dllimport ignored\", new_tree);\n-    }\n-  else if (DECL_DLLIMPORT_P (old) && !DECL_DLLIMPORT_P (new_tree))\n-    {\n-      /* Warn about overriding a symbol that has already been used, e.g.:\n-           extern int __attribute__ ((dllimport)) foo;\n-\t   int* bar () {return &foo;}\n-\t   int foo;\n-      */\n-      if (TREE_USED (old))\n-\t{\n-\t  warning (0, \"%q+D redeclared without dllimport attribute \"\n-\t\t   \"after being referenced with dll linkage\", new_tree);\n-\t  /* If we have used a variable's address with dllimport linkage,\n-\t      keep the old DECL_DLLIMPORT_P flag: the ADDR_EXPR using the\n-\t      decl may already have had TREE_CONSTANT computed.\n-\t      We still remove the attribute so that assembler code refers\n-\t      to '&foo rather than '_imp__foo'.  */\n-\t  if (VAR_P (old) && TREE_ADDRESSABLE (old))\n-\t    DECL_DLLIMPORT_P (new_tree) = 1;\n-\t}\n-\n-      /* Let an inline definition silently override the external reference,\n-\t but otherwise warn about attribute inconsistency.  */\n-      else if (VAR_P (new_tree) || !DECL_DECLARED_INLINE_P (new_tree))\n-\twarning (OPT_Wattributes, \"%q+D redeclared without dllimport attribute: \"\n-\t\t  \"previous dllimport ignored\", new_tree);\n-    }\n-  else\n-    delete_dllimport_p = 0;\n-\n-  a = merge_attributes (DECL_ATTRIBUTES (old), DECL_ATTRIBUTES (new_tree));\n-\n-  if (delete_dllimport_p)\n-    a = remove_attribute (\"dllimport\", a);\n-\n-  return a;\n-}\n-\n-/* Handle a \"dllimport\" or \"dllexport\" attribute; arguments as in\n-   struct attribute_spec.handler.  */\n-\n-tree\n-handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n-\t\t      bool *no_add_attrs)\n-{\n-  tree node = *pnode;\n-  bool is_dllimport;\n-\n-  /* These attributes may apply to structure and union types being created,\n-     but otherwise should pass to the declaration involved.  */\n-  if (!DECL_P (node))\n-    {\n-      if (flags & ((int) ATTR_FLAG_DECL_NEXT | (int) ATTR_FLAG_FUNCTION_NEXT\n-\t\t   | (int) ATTR_FLAG_ARRAY_NEXT))\n-\t{\n-\t  *no_add_attrs = true;\n-\t  return tree_cons (name, args, NULL_TREE);\n-\t}\n-      if (TREE_CODE (node) == RECORD_TYPE\n-\t  || TREE_CODE (node) == UNION_TYPE)\n-\t{\n-\t  node = TYPE_NAME (node);\n-\t  if (!node)\n-\t    return NULL_TREE;\n-\t}\n-      else\n-\t{\n-\t  warning (OPT_Wattributes, \"%qE attribute ignored\",\n-\t\t   name);\n-\t  *no_add_attrs = true;\n-\t  return NULL_TREE;\n-\t}\n-    }\n-\n-  if (!VAR_OR_FUNCTION_DECL_P (node) && TREE_CODE (node) != TYPE_DECL)\n-    {\n-      *no_add_attrs = true;\n-      warning (OPT_Wattributes, \"%qE attribute ignored\",\n-\t       name);\n-      return NULL_TREE;\n-    }\n-\n-  if (TREE_CODE (node) == TYPE_DECL\n-      && TREE_CODE (TREE_TYPE (node)) != RECORD_TYPE\n-      && TREE_CODE (TREE_TYPE (node)) != UNION_TYPE)\n-    {\n-      *no_add_attrs = true;\n-      warning (OPT_Wattributes, \"%qE attribute ignored\",\n-\t       name);\n-      return NULL_TREE;\n-    }\n-\n-  is_dllimport = is_attribute_p (\"dllimport\", name);\n-\n-  /* Report error on dllimport ambiguities seen now before they cause\n-     any damage.  */\n-  if (is_dllimport)\n-    {\n-      /* Honor any target-specific overrides. */\n-      if (!targetm.valid_dllimport_attribute_p (node))\n-\t*no_add_attrs = true;\n-\n-     else if (TREE_CODE (node) == FUNCTION_DECL\n-\t        && DECL_DECLARED_INLINE_P (node))\n-\t{\n-\t  warning (OPT_Wattributes, \"inline function %q+D declared as \"\n-\t\t  \" dllimport: attribute ignored\", node);\n-\t  *no_add_attrs = true;\n-\t}\n-      /* Like MS, treat definition of dllimported variables and\n-\t non-inlined functions on declaration as syntax errors. */\n-     else if (TREE_CODE (node) == FUNCTION_DECL && DECL_INITIAL (node))\n-\t{\n-\t  error (\"function %q+D definition is marked dllimport\", node);\n-\t  *no_add_attrs = true;\n-\t}\n-\n-     else if (VAR_P (node))\n-\t{\n-\t  if (DECL_INITIAL (node))\n-\t    {\n-\t      error (\"variable %q+D definition is marked dllimport\",\n-\t\t     node);\n-\t      *no_add_attrs = true;\n-\t    }\n-\n-\t  /* `extern' needn't be specified with dllimport.\n-\t     Specify `extern' now and hope for the best.  Sigh.  */\n-\t  DECL_EXTERNAL (node) = 1;\n-\t  /* Also, implicitly give dllimport'd variables declared within\n-\t     a function global scope, unless declared static.  */\n-\t  if (current_function_decl != NULL_TREE && !TREE_STATIC (node))\n-\t    TREE_PUBLIC (node) = 1;\n-\t}\n-\n-      if (*no_add_attrs == false)\n-        DECL_DLLIMPORT_P (node) = 1;\n-    }\n-  else if (TREE_CODE (node) == FUNCTION_DECL\n-\t   && DECL_DECLARED_INLINE_P (node)\n-\t   && flag_keep_inline_dllexport)\n-    /* An exported function, even if inline, must be emitted.  */\n-    DECL_EXTERNAL (node) = 0;\n-\n-  /*  Report error if symbol is not accessible at global scope.  */\n-  if (!TREE_PUBLIC (node) && VAR_OR_FUNCTION_DECL_P (node))\n-    {\n-      error (\"external linkage required for symbol %q+D because of \"\n-\t     \"%qE attribute\", node, name);\n-      *no_add_attrs = true;\n-    }\n-\n-  /* A dllexport'd entity must have default visibility so that other\n-     program units (shared libraries or the main executable) can see\n-     it.  A dllimport'd entity must have default visibility so that\n-     the linker knows that undefined references within this program\n-     unit can be resolved by the dynamic linker.  */\n-  if (!*no_add_attrs)\n-    {\n-      if (DECL_VISIBILITY_SPECIFIED (node)\n-\t  && DECL_VISIBILITY (node) != VISIBILITY_DEFAULT)\n-\terror (\"%qE implies default visibility, but %qD has already \"\n-\t       \"been declared with a different visibility\",\n-\t       name, node);\n-      DECL_VISIBILITY (node) = VISIBILITY_DEFAULT;\n-      DECL_VISIBILITY_SPECIFIED (node) = 1;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-#endif /* TARGET_DLLIMPORT_DECL_ATTRIBUTES  */\n \f\n /* Set the type qualifiers for TYPE to TYPE_QUALS, which is a bitmask\n    of the various TYPE_QUAL values.  */\n@@ -7155,68 +6536,6 @@ print_type_hash_statistics (void)\n \t   type_hash_table->collisions ());\n }\n \n-/* Given two lists of attributes, return true if list l2 is\n-   equivalent to l1.  */\n-\n-int\n-attribute_list_equal (const_tree l1, const_tree l2)\n-{\n-  if (l1 == l2)\n-    return 1;\n-\n-  return attribute_list_contained (l1, l2)\n-\t && attribute_list_contained (l2, l1);\n-}\n-\n-/* Given two lists of attributes, return true if list L2 is\n-   completely contained within L1.  */\n-/* ??? This would be faster if attribute names were stored in a canonicalized\n-   form.  Otherwise, if L1 uses `foo' and L2 uses `__foo__', the long method\n-   must be used to show these elements are equivalent (which they are).  */\n-/* ??? It's not clear that attributes with arguments will always be handled\n-   correctly.  */\n-\n-int\n-attribute_list_contained (const_tree l1, const_tree l2)\n-{\n-  const_tree t1, t2;\n-\n-  /* First check the obvious, maybe the lists are identical.  */\n-  if (l1 == l2)\n-    return 1;\n-\n-  /* Maybe the lists are similar.  */\n-  for (t1 = l1, t2 = l2;\n-       t1 != 0 && t2 != 0\n-        && get_attribute_name (t1) == get_attribute_name (t2)\n-        && TREE_VALUE (t1) == TREE_VALUE (t2);\n-       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n-    ;\n-\n-  /* Maybe the lists are equal.  */\n-  if (t1 == 0 && t2 == 0)\n-    return 1;\n-\n-  for (; t2 != 0; t2 = TREE_CHAIN (t2))\n-    {\n-      const_tree attr;\n-      /* This CONST_CAST is okay because lookup_attribute does not\n-\t modify its argument and the return value is assigned to a\n-\t const_tree.  */\n-      for (attr = lookup_ident_attribute (get_attribute_name (t2),\n-\t\t\t\t\t  CONST_CAST_TREE (l1));\n-\t   attr != NULL_TREE && !attribute_value_equal (t2, attr);\n-\t   attr = lookup_ident_attribute (get_attribute_name (t2),\n-\t\t\t\t\t  TREE_CHAIN (attr)))\n-\t;\n-\n-      if (attr == NULL_TREE)\n-\treturn 0;\n-    }\n-\n-  return 1;\n-}\n-\n /* Given two lists of types\n    (chains of TREE_LIST nodes with types in the TREE_VALUE slots)\n    return 1 if the lists contain the same types in the same order."}, {"sha": "46debc12a845300d36965f175744a0389d82225b", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -4088,8 +4088,6 @@ extern tree purpose_member (const_tree, tree);\n extern bool vec_member (const_tree, vec<tree, va_gc> *);\n extern tree chain_index (int, tree);\n \n-extern int attribute_list_equal (const_tree, const_tree);\n-extern int attribute_list_contained (const_tree, const_tree);\n extern int tree_int_cst_equal (const_tree, const_tree);\n \n extern bool tree_fits_shwi_p (const_tree)\n@@ -4127,90 +4125,6 @@ extern bool valid_constant_size_p (const_tree);\n \n extern tree make_tree (tree, rtx);\n \n-/* Return a type like TTYPE except that its TYPE_ATTRIBUTES\n-   is ATTRIBUTE.\n-\n-   Such modified types already made are recorded so that duplicates\n-   are not made.  */\n-\n-extern tree build_type_attribute_variant (tree, tree);\n-extern tree build_decl_attribute_variant (tree, tree);\n-extern tree build_type_attribute_qual_variant (tree, tree, int);\n-\n-extern bool attribute_value_equal (const_tree, const_tree);\n-\n-/* Return 0 if the attributes for two types are incompatible, 1 if they\n-   are compatible, and 2 if they are nearly compatible (which causes a\n-   warning to be generated).  */\n-extern int comp_type_attributes (const_tree, const_tree);\n-\n-/* Default versions of target-overridable functions.  */\n-extern tree merge_decl_attributes (tree, tree);\n-extern tree merge_type_attributes (tree, tree);\n-\n-/* This function is a private implementation detail of lookup_attribute()\n-   and you should never call it directly.  */\n-extern tree private_lookup_attribute (const char *, size_t, tree);\n-\n-/* This function is a private implementation detail\n-   of lookup_attribute_by_prefix() and you should never call it directly.  */\n-extern tree private_lookup_attribute_by_prefix (const char *, size_t, tree);\n-\n-/* Given an attribute name ATTR_NAME and a list of attributes LIST,\n-   return a pointer to the attribute's list element if the attribute\n-   is part of the list, or NULL_TREE if not found.  If the attribute\n-   appears more than once, this only returns the first occurrence; the\n-   TREE_CHAIN of the return value should be passed back in if further\n-   occurrences are wanted.  ATTR_NAME must be in the form 'text' (not\n-   '__text__').  */\n-\n-static inline tree\n-lookup_attribute (const char *attr_name, tree list)\n-{\n-  gcc_checking_assert (attr_name[0] != '_');  \n-  /* In most cases, list is NULL_TREE.  */\n-  if (list == NULL_TREE)\n-    return NULL_TREE;\n-  else\n-    /* Do the strlen() before calling the out-of-line implementation.\n-       In most cases attr_name is a string constant, and the compiler\n-       will optimize the strlen() away.  */\n-    return private_lookup_attribute (attr_name, strlen (attr_name), list);\n-}\n-\n-/* Given an attribute name ATTR_NAME and a list of attributes LIST,\n-   return a pointer to the attribute's list first element if the attribute\n-   starts with ATTR_NAME. ATTR_NAME must be in the form 'text' (not\n-   '__text__').  */\n-\n-static inline tree\n-lookup_attribute_by_prefix (const char *attr_name, tree list)\n-{\n-  gcc_checking_assert (attr_name[0] != '_');\n-  /* In most cases, list is NULL_TREE.  */\n-  if (list == NULL_TREE)\n-    return NULL_TREE;\n-  else\n-    return private_lookup_attribute_by_prefix (attr_name, strlen (attr_name),\n-\t\t\t\t\t       list);\n-}\n-\n-/* Remove any instances of attribute ATTR_NAME in LIST and return the\n-   modified list.  */\n-\n-extern tree remove_attribute (const char *, tree);\n-\n-/* Given two attributes lists, return a list of their union.  */\n-\n-extern tree merge_attributes (tree, tree);\n-\n-/* Given two Windows decl attributes lists, possibly including\n-   dllimport, return a list of their union .  */\n-extern tree merge_dllimport_decl_attributes (tree, tree);\n-\n-/* Handle a \"dllimport\" or \"dllexport\" attribute.  */\n-extern tree handle_dll_attribute (tree *, tree, tree, int, bool *);\n-\n /* Returns true iff CAND and BASE have equivalent language-specific\n    qualifiers.  */\n "}, {"sha": "51b5821deb33c84bc51c23b6fa65f678ddb9c2ce", "filename": "gcc/tsan.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -40,6 +40,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-eh.h\"\n #include \"tsan.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"builtins.h\"\n #include \"target.h\""}, {"sha": "49e38fa6c09a69432c134b08a2cdf591ae68d58c", "filename": "gcc/ubsan.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"ubsan.h\"\n #include \"expr.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"gimplify-me.h\"\n #include \"dfp.h\""}, {"sha": "e0834a1ff3b074087ee791616efd59d599f3bf10", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -51,6 +51,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"debug.h\"\n #include \"common/common-target.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n #include \"asan.h\"\n #include \"rtl-iter.h\"\n "}, {"sha": "b005f529cc0b95a3888fdfda47f24ad18781cd92", "filename": "gcc/varpool.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314e6352040016aff26cc2cf0b9eb60c40ca859e/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=314e6352040016aff26cc2cf0b9eb60c40ca859e", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"omp-offload.h\"\n #include \"context.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n \n const char * const tls_model_names[]={\"none\", \"emulated\",\n \t\t\t\t      \"global-dynamic\", \"local-dynamic\","}]}