{"sha": "09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDllMGFkNjI1M2Y0MzMwOTc3ZTFiMmYxMTZiNWUyODlkYzJjMmEwMg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-11-14T16:16:04Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-01-20T16:51:06Z"}, "message": "Update OpenACC tests for amdgcn\n\n2020-01-20  Andrew Stubbs  <ams@codesourcery.com>\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Skip test on gcn.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c (main):\n\tAdjust test dimensions for amdgcn.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c (main): Adjust\n\tgang/worker/vector expectations dynamically.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c\n\t(main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-v-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c\n\t(acc_gang): Recognise acc_device_radeon.\n\t(acc_worker): Likewise.\n\t(acc_vector): Likewise.\n\t(main): Set expectations for amdgcn.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c\n\t(main): Adjust gang/worker/vector expectations dynamically.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-v-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c (main): Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c: Set expectations\n\tfor amdgcn.", "tree": {"sha": "2edb48c4818ee2132b970ce8ddb86c57198209b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2edb48c4818ee2132b970ce8ddb86c57198209b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a43459715e239fb8043bf64b830aaf1a9802180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a43459715e239fb8043bf64b830aaf1a9802180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a43459715e239fb8043bf64b830aaf1a9802180"}], "stats": {"total": 225, "additions": 180, "deletions": 45}, "files": [{"sha": "fa6aeed4ec4ccdda56a3a84a90d2fec64bd738d5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -1,3 +1,33 @@\n+2020-01-20  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Skip test on gcn.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c (main):\n+\tAdjust test dimensions for amdgcn.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c (main): Adjust\n+\tgang/worker/vector expectations dynamically.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c\n+\t(main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-v-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c\n+\t(acc_gang): Recognise acc_device_radeon.\n+\t(acc_worker): Likewise.\n+\t(acc_vector): Likewise.\n+\t(main): Set expectations for amdgcn.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c\n+\t(main): Adjust gang/worker/vector expectations dynamically.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-v-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c (main): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c: Set expectations\n+\tfor amdgcn.\n+\n 2020-01-17  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/accel/openacc.f90 (openacc_kinds): Rename acc_device_gcn to"}, {"sha": "0c9ae957460103aaa8f283462b0bc66b4090256b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -1,3 +1,6 @@\n+/* AMD GCN does not use 32-lane vectors.\n+   { dg-skip-if \"unsuitable dimensions\" { openacc_amdgcn_accel_selected } { \"*\" } { \"\" } } */\n+\n /* { dg-additional-options \"-fopenacc-dim=32\" } */\n \n #include <stdio.h>"}, {"sha": "30f0539707f5d7de95cd916601770f79de878eac", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-dim-default.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -128,5 +128,14 @@ int test_1 (int gp, int wp, int vp)\n \n int main ()\n {\n+#ifdef ACC_DEVICE_TYPE_gcn\n+  /* AMD GCN uses the autovectorizer for the vector dimension: the use\n+     of a function call in vector-partitioned code in this test is not\n+     currently supported.  */\n+  /* AMD GCN does not currently support multiple workers.  This should be\n+     set to 16 when that changes.  */\n+  return test_1 (16, 1, 1);\n+#else\n   return test_1 (16, 16, 32);\n+#endif\n }"}, {"sha": "5c843012061877e5002990712e65deac7a903738", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -9,11 +9,13 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int gangsize, workersize, vectorsize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t    copy(ary) copy(ondev) copyout(gangsize, workersize, vectorsize)\n   {\n #pragma acc loop gang worker vector\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -32,18 +34,23 @@ int main ()\n \telse\n \t  ary[ix] = ix;\n       }\n+\n+    gangsize = __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n     {\n       int expected = ix;\n       if(ondev)\n \t{\n-\t  int chunk_size = (N + 32*32*32 - 1) / (32*32*32);\n+\t  int chunk_size = (N + gangsize * workersize * vectorsize - 1)\n+\t\t\t   / (gangsize * workersize * vectorsize);\n \t  \n-\t  int g = ix / (chunk_size * 32 * 32);\n-\t  int w = ix / 32 % 32;\n-\t  int v = ix % 32;\n+\t  int g = ix / (chunk_size * workersize * vectorsize);\n+\t  int w = (ix / vectorsize) % workersize;\n+\t  int v = ix % vectorsize;\n \n \t  expected = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "9c4a85f7b16bf03a3c6da3b561eec01f068202eb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -8,8 +8,10 @@ int main ()\n   int ix;\n   int ondev = 0;\n   int t = 0, h = 0;\n-  \n-#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(ondev)\n+  int gangsize, workersize, vectorsize;\n+\n+#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\tcopy(ondev) copyout(gangsize, workersize, vectorsize)\n   {\n #pragma acc loop gang worker vector reduction(+:t)\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -28,18 +30,22 @@ int main ()\n \t  }\n \tt += val;\n       }\n+    gangsize = __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n     {\n       int val = ix;\n-      if(ondev)\n+      if (ondev)\n \t{\n-\t  int chunk_size = (N + 32*32*32 - 1) / (32*32*32);\n+\t  int chunk_size = (N + gangsize * workersize * vectorsize - 1)\n+\t\t\t   / (gangsize * workersize * vectorsize);\n \t  \n-\t  int g = ix / (chunk_size * 32 * 32);\n-\t  int w = ix / 32 % 32;\n-\t  int v = ix % 32;\n+\t  int g = ix / (chunk_size * vectorsize * workersize);\n+\t  int w = ix / vectorsize % workersize;\n+\t  int v = ix % vectorsize;\n \n \t  val = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "1173c1f57bb81619e825a4477281fe304d51011e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -9,8 +9,9 @@ int main ()\n   int ix;\n   int ondev = 0;\n   int t = 0,  h = 0;\n+  int vectorsize;\n \n-#pragma acc parallel vector_length(32) copy(ondev)\n+#pragma acc parallel vector_length(32) copy(ondev) copyout(vectorsize)\n   {\n #pragma acc loop vector reduction (+:t)\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -29,6 +30,7 @@ int main ()\n \t  }\n \tt += val;\n       }\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -38,7 +40,7 @@ int main ()\n \t{\n \t  int g = 0;\n \t  int w = 0;\n-\t  int v = ix % 32;\n+\t  int v = ix % vectorsize;\n \n \t  val = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "84c2296a7b1238b5d39df8fdb12fb3731bac74c9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-2.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -9,8 +9,9 @@ int main ()\n   int ix;\n   int ondev = 0;\n   int q = 0,  h = 0;\n+  int vectorsize;\n \n-#pragma acc parallel vector_length(32) copy(q) copy(ondev)\n+#pragma acc parallel vector_length(32) copy(q) copy(ondev) copyout(vectorsize)\n   {\n     int t = q;\n     \n@@ -32,6 +33,7 @@ int main ()\n \tt += val;\n       }\n     q = t;\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -41,7 +43,7 @@ int main ()\n \t{\n \t  int g = 0;\n \t  int w = 0;\n-\t  int v = ix % 32;\n+\t  int v = ix % vectorsize;\n \n \t  val = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "648f89e166806745cedd70af9297b623b42b6874", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -8,8 +8,10 @@ int main ()\n   int ix;\n   int ondev = 0;\n   int t = 0,  h = 0;\n+  int workersize;\n \n-#pragma acc parallel num_workers(32) vector_length(32) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ondev) \\\n+\t    copyout(workersize)\n   {\n #pragma acc loop worker reduction(+:t)\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -28,6 +30,7 @@ int main ()\n \t  }\n \tt += val;\n       }\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -36,7 +39,7 @@ int main ()\n       if(ondev)\n \t{\n \t  int g = 0;\n-\t  int w = ix % 32;\n+\t  int w = ix % workersize;\n \t  int v = 0;\n \n \t  val = (g << 16) | (w << 8) | v;"}, {"sha": "f9fcf3703af9c8a4f198dc8ec9b6e8aac6c4ab9c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -8,8 +8,10 @@ int main ()\n   int ix;\n   int ondev = 0;\n   int q = 0,  h = 0;\n+  int workersize;\n \n-#pragma acc parallel num_workers(32) vector_length(32) copy(q) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(q) copy(ondev) \\\n+\t    copyout(workersize)\n   {\n     int t = q;\n     \n@@ -31,6 +33,7 @@ int main ()\n \tt += val;\n       }\n     q = t;\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -39,7 +42,7 @@ int main ()\n       if(ondev)\n \t{\n \t  int g = 0;\n-\t  int w = ix % 32;\n+\t  int w = ix % workersize;\n \t  int v = 0;\n \n \t  val = (g << 16) | (w << 8) | v;"}, {"sha": "c360ad11e7cbe025577ce41ba92b98fbae7a9e39", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -8,8 +8,10 @@ int main ()\n   int ix;\n   int ondev = 0;\n   int t = 0, h = 0;\n+  int workersize, vectorsize;\n   \n-#pragma acc parallel num_workers(32) vector_length(32) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ondev) \\\n+\t    copyout(workersize, vectorsize)\n   {\n #pragma acc loop worker vector reduction (+:t)\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -28,6 +30,8 @@ int main ()\n \t  }\n \tt += val;\n       }\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -36,8 +40,8 @@ int main ()\n       if(ondev)\n \t{\n \t  int g = 0;\n-\t  int w = (ix / 32) % 32;\n-\t  int v = ix % 32;\n+\t  int w = (ix / vectorsize) % workersize;\n+\t  int v = ix % vectorsize;\n \n \t  val = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "8c858f305633d2f2cdf27d34ae50bf5750a9307d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-v-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-v-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -9,11 +9,13 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int vectorsize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel vector_length(32) copy(ary) copy(ondev) \\\n+\t    copyout(vectorsize)\n   {\n #pragma acc loop vector\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -31,6 +33,7 @@ int main ()\n \telse\n \t  ary[ix] = ix;\n       }\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -40,7 +43,7 @@ int main ()\n \t{\n \t  int g = 0;\n \t  int w = 0;\n-\t  int v = ix % 32;\n+\t  int v = ix % vectorsize;\n \n \t  expected = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "5fe486f50a158a2aafcb8e4f2288a3e12eda9417", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-w-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -9,11 +9,13 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int workersize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev) \\\n+\t    copyout(workersize)\n   {\n #pragma acc loop worker\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -31,6 +33,7 @@ int main ()\n \telse\n \t  ary[ix] = ix;\n       }\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -39,7 +42,7 @@ int main ()\n       if(ondev)\n \t{\n \t  int g = 0;\n-\t  int w = ix % 32;\n+\t  int w = ix % workersize;\n \t  int v = 0;\n \n \t  expected = (g << 16) | (w << 8) | v;"}, {"sha": "fd4e4cf5ea9c69ec7d8ef8e6a312a7e913989378", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-wv-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -9,11 +9,13 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int workersize, vectorsize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev) \\\n+\t    copyout(workersize, vectorsize)\n   {\n #pragma acc loop worker vector\n     for (unsigned ix = 0; ix < N; ix++)\n@@ -31,6 +33,8 @@ int main ()\n \telse\n \t  ary[ix] = ix;\n       }\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -39,8 +43,8 @@ int main ()\n       if(ondev)\n \t{\n \t  int g = 0;\n-\t  int w = (ix / 32) % 32;\n-\t  int v = ix % 32;\n+\t  int w = (ix / vectorsize) % workersize;\n+\t  int v = ix % vectorsize;\n \n \t  expected = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "cc4c738c1db248e7a23df30354398945a1a4238d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -14,7 +14,8 @@ static unsigned int __attribute__ ((optimize (\"O2\"))) acc_gang ()\n {\n   if (acc_on_device ((int) acc_device_host))\n     return 0;\n-  else if (acc_on_device ((int) acc_device_nvidia))\n+  else if (acc_on_device ((int) acc_device_nvidia)\n+\t   || acc_on_device ((int) acc_device_radeon))\n     return __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n   else\n     __builtin_abort ();\n@@ -25,7 +26,8 @@ static unsigned int __attribute__ ((optimize (\"O2\"))) acc_worker ()\n {\n   if (acc_on_device ((int) acc_device_host))\n     return 0;\n-  else if (acc_on_device ((int) acc_device_nvidia))\n+  else if (acc_on_device ((int) acc_device_nvidia)\n+\t   || acc_on_device ((int) acc_device_radeon))\n     return __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n   else\n     __builtin_abort ();\n@@ -36,7 +38,8 @@ static unsigned int __attribute__ ((optimize (\"O2\"))) acc_vector ()\n {\n   if (acc_on_device ((int) acc_device_host))\n     return 0;\n-  else if (acc_on_device ((int) acc_device_nvidia))\n+  else if (acc_on_device ((int) acc_device_nvidia)\n+\t   || acc_on_device ((int) acc_device_radeon))\n     return __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n   else\n     __builtin_abort ();\n@@ -282,6 +285,12 @@ int main ()\n \t  /* The GCC nvptx back end enforces num_workers (32).  */\n \t  workers_actual = 32;\n \t}\n+      else if (acc_on_device (acc_device_radeon))\n+\t{\n+\t  /* The GCC GCN back end is limited to num_workers (16).\n+\t     Temporarily set this to 1 until multiple workers are permitted. */\n+\t  workers_actual = 1; // 16;\n+\t}\n       else\n \t__builtin_abort ();\n #pragma acc loop worker reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n@@ -328,6 +337,11 @@ int main ()\n \t  /* We're actually executing with num_workers (32).  */\n \t  /* workers_actual = 32; */\n \t}\n+      else if (acc_on_device (acc_device_radeon))\n+\t{\n+\t  /* The GCC GCN back end is limited to num_workers (16).  */\n+\t  workers_actual = 16;\n+\t}\n       else\n \t__builtin_abort ();\n #pragma acc loop worker reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n@@ -367,6 +381,11 @@ int main ()\n \t  /* The GCC nvptx back end enforces vector_length (32).  */\n \t  vectors_actual = 1024;\n \t}\n+      else if (acc_on_device (acc_device_radeon))\n+\t{\n+\t  /* The GCC GCN back end enforces vector_length (1): autovectorize. */\n+\t  vectors_actual = 1;\n+\t}\n       else\n \t__builtin_abort ();\n #pragma acc loop vector reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n@@ -407,6 +426,13 @@ int main ()\n \t  /* The GCC nvptx back end enforces vector_length (32).  */\n \t  vectors_actual = 32;\n \t}\n+      else if (acc_on_device (acc_device_radeon))\n+\t{\n+\t  /* Because of the way vectors are implemented for GCN, a vector loop\n+\t     containing a seq routine call will not vectorize calls to that\n+\t     routine.  Hence, we'll only get one \"vector\".  */\n+\t  vectors_actual = 1;\n+\t}\n       else\n \t__builtin_abort ();\n #pragma acc loop vector reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n@@ -433,6 +459,9 @@ int main ()\n        in the following case.  So, limit ourselves here.  */\n     if (acc_get_device_type () == acc_device_nvidia)\n       gangs = 3;\n+    /* Similar appears to be true for GCN.  */\n+    if (acc_get_device_type () == acc_device_radeon)\n+      gangs = 3;\n     int gangs_actual = gangs;\n #define WORKERS 3\n     int workers_actual = WORKERS;\n@@ -459,6 +488,13 @@ int main ()\n \t  /* The GCC nvptx back end enforces vector_length (32).  */\n \t  vectors_actual = 32;\n \t}\n+      else if (acc_on_device (acc_device_radeon))\n+\t{\n+\t  /* Temporary setting, until multiple workers are permitted.  */\n+\t  workers_actual = 1;\n+\t  /* See above comments about GCN vectors_actual.  */\n+\t  vectors_actual = 1;\n+\t}\n       else\n \t__builtin_abort ();\n #pragma acc loop gang reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)"}, {"sha": "da13d84908a82ef18b5e85896b5b96c7ca311094", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -30,26 +30,31 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int gangsize, workersize, vectorsize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(ary) copy(ondev) copyout(gangsize, workersize, vectorsize)\n   {\n     ondev = acc_on_device (acc_device_not_host);\n     gang (ary);\n+    gangsize = __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n     {\n       int expected = ix;\n       if(ondev)\n \t{\n-\t  int chunk_size = (N + 32*32*32 - 1) / (32*32*32);\n+\t  int chunk_size = (N + gangsize * workersize * vectorsize - 1)\n+\t\t\t   / (gangsize * workersize * vectorsize);\n \t  \n-\t  int g = ix / (chunk_size * 32 * 32);\n-\t  int w = ix / 32 % 32;\n-\t  int v = ix % 32;\n+\t  int g = ix / (chunk_size * vectorsize * workersize);\n+\t  int w = (ix / vectorsize) % workersize;\n+\t  int v = ix % vectorsize;\n \n \t  expected = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "dd7bb6cdcd1ec2a048a2bf1780d97b0c4e917c82", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-v-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -30,14 +30,17 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int vectorsize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel vector_length(32) copy(ary) copy(ondev) \\\n+\t    copyout(vectorsize)\n   {\n     ondev = acc_on_device (acc_device_not_host);\n     vector (ary);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -47,7 +50,7 @@ int main ()\n \t{\n \t  int g = 0;\n \t  int w = 0;\n-\t  int v = ix % 32;\n+\t  int v = ix % vectorsize;\n \n \t  expected = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "acd9884cbd61f61bc9363cc3de2ae429034765b0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-w-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -30,14 +30,17 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int workersize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev) \\\n+\t    copyout(workersize)\n   {\n     ondev = acc_on_device (acc_device_not_host);\n     worker (ary);\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -46,7 +49,7 @@ int main ()\n       if(ondev)\n \t{\n \t  int g = 0;\n-\t  int w = ix % 32;\n+\t  int w = ix % workersize;\n \t  int v = 0;\n \n \t  expected = (g << 16) | (w << 8) | v;"}, {"sha": "73696e4e59a3901248216784be70583655fb24db", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -30,14 +30,18 @@ int main ()\n   int ix;\n   int exit = 0;\n   int ondev = 0;\n+  int workersize, vectorsize;\n \n   for (ix = 0; ix < N;ix++)\n     ary[ix] = -1;\n   \n-#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev) \\\n+\t    copyout(workersize, vectorsize)\n   {\n     ondev = acc_on_device (acc_device_not_host);\n     worker (ary);\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n   }\n \n   for (ix = 0; ix < N; ix++)\n@@ -46,8 +50,8 @@ int main ()\n       if(ondev)\n \t{\n \t  int g = 0;\n-\t  int w = (ix / 32) % 32;\n-\t  int v = ix % 32;\n+\t  int w = (ix / vectorsize) % workersize;\n+\t  int v = ix % vectorsize;\n \n \t  expected = (g << 16) | (w << 8) | v;\n \t}"}, {"sha": "609f9f6a7da2302ce3f55af895b2e114aa20fdfd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e0ad6253f4330977e1b2f116b5e289dc2c2a02/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c?ref=09e0ad6253f4330977e1b2f116b5e289dc2c2a02", "patch": "@@ -2,8 +2,13 @@\n #include <openacc.h>\n #include <gomp-constants.h>\n \n+#ifdef ACC_DEVICE_TYPE_gcn\n+#define NUM_WORKERS 16\n+#define NUM_VECTORS 1\n+#else\n #define NUM_WORKERS 16\n #define NUM_VECTORS 32\n+#endif\n #define WIDTH 64\n #define HEIGHT 32\n "}]}