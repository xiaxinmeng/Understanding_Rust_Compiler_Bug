{"sha": "dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzOTA3YzVjMTQxMmZkNGU1NzNmMGU5OTFhN2RkYjBiMmQxYzNlMw==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-07-02T01:26:01Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-07-02T01:26:01Z"}, "message": "(const_binop, fold_convert, fold):\n\nSet TREE_OVERFLOW in addition to TREE_CONSTANT_OVERFLOW.\n\nFrom-SVN: r4828", "tree": {"sha": "202508f1a039697a47ab3f96c6f63b72c508e4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202508f1a039697a47ab3f96c6f63b72c508e4dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3/comments", "author": null, "committer": null, "parents": [{"sha": "7193bce22f126a0ac6197782e01782cface4d24c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7193bce22f126a0ac6197782e01782cface4d24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7193bce22f126a0ac6197782e01782cface4d24c"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "60b5e999416f8c8a4abf36ac2b21f3674c867c17", "filename": "gcc/fold-const.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dc3907c5c1412fd4e573f0e991a7ddb0b2d1c3e3", "patch": "@@ -1126,6 +1126,7 @@ const_binop (code, arg1, arg2, notrunc)\n \t  TREE_TYPE (t) = TREE_TYPE (arg1);\n \t  if (!notrunc)\n \t    force_fit_type (t, 0);\n+\t  TREE_OVERFLOW (t) = TREE_OVERFLOW (arg1) | TREE_OVERFLOW (arg2);\n \t  TREE_CONSTANT_OVERFLOW (t)\n \t    = TREE_CONSTANT_OVERFLOW (arg1) | TREE_CONSTANT_OVERFLOW (arg2);\n \t  return t;\n@@ -1319,10 +1320,13 @@ const_binop (code, arg1, arg2, notrunc)\n \t}\n     got_it:\n       TREE_TYPE (t) = TREE_TYPE (arg1);\n-      TREE_CONSTANT_OVERFLOW (t)\n+      TREE_OVERFLOW (t)\n \t= ((notrunc ? !uns && overflow : force_fit_type (t, overflow))\n-\t   | TREE_CONSTANT_OVERFLOW (arg1)\n-\t   | TREE_CONSTANT_OVERFLOW (arg2));\n+\t   | TREE_OVERFLOW (arg1)\n+\t   | TREE_OVERFLOW (arg2));\n+      TREE_CONSTANT_OVERFLOW (t) = (TREE_OVERFLOW (t)\n+\t\t\t\t    | TREE_CONSTANT_OVERFLOW (arg1)\n+\t\t\t\t    | TREE_CONSTANT_OVERFLOW (arg2));\n       return t;\n     }\n #if ! defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n@@ -1538,14 +1542,17 @@ fold_convert (t, arg1)\n \t\t\t   TREE_INT_CST_HIGH (arg1));\n \t  TREE_TYPE (t) = type;\n \t  /* Indicate an overflow if (1) ARG1 already overflowed,\n-\t     or (2) ARG1 is a too-large unsigned value and T is signed,\n-\t     or (3) force_fit_type indicates an overflow.\n-\t     force_fit_type can't detect (2), since it sees only T's type.  */\n-\t  TREE_CONSTANT_OVERFLOW (t) =\n-\t    (TREE_CONSTANT_OVERFLOW (arg1)\n-\t     | (TREE_INT_CST_HIGH (arg1) < 0\n-\t\t& TREE_UNSIGNED (type) < TREE_UNSIGNED (TREE_TYPE (arg1)))\n-\t     | force_fit_type (t, 0));\n+\t     or (2) force_fit_type indicates an overflow.\n+\t     Tell force_fit_type that an overflow has already occurred\n+\t     if ARG1 is a too-large unsigned value and T is signed.  */\n+\t  TREE_OVERFLOW (t)\n+\t    = (TREE_OVERFLOW (arg1)\n+\t       | force_fit_type (t,\n+\t\t\t\t (TREE_INT_CST_HIGH (arg1) < 0\n+\t\t\t\t  & (TREE_UNSIGNED (type)\n+\t\t\t\t     < TREE_UNSIGNED (TREE_TYPE (arg1))))));\n+\t  TREE_CONSTANT_OVERFLOW (t)\n+\t    = TREE_OVERFLOW (t) | TREE_CONSTANT_OVERFLOW (arg1);\n \t}\n #if !defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n       else if (TREE_CODE (arg1) == REAL_CST)\n@@ -3409,9 +3416,11 @@ fold (expr)\n \t\t\t\t\t &low, &high);\n \t      t = build_int_2 (low, high);\n \t      TREE_TYPE (t) = type;\n-\t      TREE_CONSTANT_OVERFLOW (t)\n-\t\t= (TREE_CONSTANT_OVERFLOW (arg0)\n+\t      TREE_OVERFLOW (t)\n+\t\t= (TREE_OVERFLOW (arg0)\n \t\t   | force_fit_type (t, overflow));\n+\t      TREE_CONSTANT_OVERFLOW (t)\n+\t\t= TREE_OVERFLOW (t) | TREE_CONSTANT_OVERFLOW (arg0);\n \t    }\n \t  else if (TREE_CODE (arg0) == REAL_CST)\n \t    t = build_real (type, REAL_VALUE_NEGATE (TREE_REAL_CST (arg0)));\n@@ -3441,9 +3450,11 @@ fold (expr)\n \t\t\t\t\t     &low, &high);\n \t\t  t = build_int_2 (low, high);\n \t\t  TREE_TYPE (t) = type;\n-\t\t  TREE_CONSTANT_OVERFLOW (t)\n-\t\t    = (TREE_CONSTANT_OVERFLOW (arg0)\n+\t\t  TREE_OVERFLOW (t)\n+\t\t    = (TREE_OVERFLOW (arg0)\n \t\t       | force_fit_type (t, overflow));\n+\t\t  TREE_CONSTANT_OVERFLOW (t)\n+\t\t    = TREE_OVERFLOW (t) | TREE_CONSTANT_OVERFLOW (arg0);\n \t\t}\n \t    }\n \t  else if (TREE_CODE (arg0) == REAL_CST)\n@@ -3466,6 +3477,7 @@ fold (expr)\n \t\t\t     ~ TREE_INT_CST_HIGH (arg0));\n \t  TREE_TYPE (t) = type;\n \t  force_fit_type (t, 0);\n+\t  TREE_OVERFLOW (t) = TREE_OVERFLOW (arg0);\n \t  TREE_CONSTANT_OVERFLOW (t) = TREE_CONSTANT_OVERFLOW (arg0);\n \t}\n       else if (TREE_CODE (arg0) == BIT_NOT_EXPR)"}]}