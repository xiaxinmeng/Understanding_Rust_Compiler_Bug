{"sha": "e6855a2d2906226cbaaa5f8653e44e42596771c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4NTVhMmQyOTA2MjI2Y2JhYWE1Zjg2NTNlNDRlNDI1OTY3NzFjOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-05-17T18:12:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-17T18:12:27Z"}, "message": "except.h (protect_cleanup_actions): Remove it.\n\n\t* except.h (protect_cleanup_actions): Remove it.\n\t(lang_protect_cleanup_actions): Declare it.\n\t* except.c (protect_cleanup_actions): Remove it.\n\t(lang_protect_cleanup_actions): New variable.\n\t(init_eh): Don't make protect_cleanup_actions a GC root.\n\t(expand_eh_region_and_cleanup): Call\n\tlang_protect_cleanup_actions.\n\t(output_function_exception_table): Remove unused `align'\n\tvariable.\n\t* varasm.c (assemble_external): Abort if we have not yet\n\topened the assembly output file.\n\n\t* except.c (cp_protect_cleanup_actions): New function.\n\t(init_exception_processing): Don't set protect_cleanup_actions\n\there.  Do set lang_protect_cleanup_actions.\n\nFrom-SVN: r42218", "tree": {"sha": "ea2ee85a1a8e761513f6ee751bb994a2aeee2dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea2ee85a1a8e761513f6ee751bb994a2aeee2dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6855a2d2906226cbaaa5f8653e44e42596771c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6855a2d2906226cbaaa5f8653e44e42596771c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6855a2d2906226cbaaa5f8653e44e42596771c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6855a2d2906226cbaaa5f8653e44e42596771c9/comments", "author": null, "committer": null, "parents": [{"sha": "8979edec07977e922f0534a4a29e720a5b983fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8979edec07977e922f0534a4a29e720a5b983fa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8979edec07977e922f0534a4a29e720a5b983fa6"}], "stats": {"total": 91, "additions": 65, "deletions": 26}, "files": [{"sha": "d7a028f207c4e2563097d2e728e17f3e79740403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6855a2d2906226cbaaa5f8653e44e42596771c9", "patch": "@@ -1,3 +1,17 @@\n+2001-05-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* except.h (protect_cleanup_actions): Remove it.\n+\t(lang_protect_cleanup_actions): Declare it.\n+\t* except.c (protect_cleanup_actions): Remove it.\n+\t(lang_protect_cleanup_actions): New variable.\n+\t(init_eh): Don't make protect_cleanup_actions a GC root.\n+\t(expand_eh_region_and_cleanup): Call\n+\tlang_protect_cleanup_actions.\n+\t(output_function_exception_table): Remove unused `align'\n+\tvariable.\n+\t* varasm.c (assemble_external): Abort if we have not yet\n+\topened the assembly output file.\n+\t\n Thu May 17 11:54:50 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* except.c (sjlj_emit_function_enter): Call assemble_external_libcall"}, {"sha": "66540efc9029ddb4ed0b9e14ecb8d23a79c0d782", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6855a2d2906226cbaaa5f8653e44e42596771c9", "patch": "@@ -1,3 +1,9 @@\n+2001-05-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* except.c (cp_protect_cleanup_actions): New function.\n+\t(init_exception_processing): Don't set protect_cleanup_actions \n+\there.  Do set lang_protect_cleanup_actions.\n+\n 2001-05-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* spew.c (read_token): Call yyerror on all unexpected tokens."}, {"sha": "6c7ede1cc50df3a8d02ada0e40c161618d52cc20", "filename": "gcc/cp/except.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e6855a2d2906226cbaaa5f8653e44e42596771c9", "patch": "@@ -49,6 +49,7 @@ static int complete_ptr_ref_or_void_ptr_p PARAMS ((tree, tree));\n static bool is_admissible_throw_operand PARAMS ((tree));\n static int can_convert_eh PARAMS ((tree, tree));\n static void check_handlers_1 PARAMS ((tree, tree));\n+static tree cp_protect_cleanup_actions PARAMS ((void));\n \n #include \"decl.h\"\n #include \"obstack.h\"\n@@ -72,8 +73,6 @@ init_exception_processing ()\n   if (flag_honor_std)\n     pop_namespace ();\n \n-  protect_cleanup_actions = build_call (terminate_node, NULL_TREE);\n-\n   /* void __cxa_call_unexpected(void *); */\n   tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n   tmp = build_function_type (void_type_node, tmp);\n@@ -85,8 +84,22 @@ init_exception_processing ()\n \t\t\t\t\t     : \"__gxx_personality_v0\");\n \n   lang_eh_runtime_type = build_eh_type_type;\n+  lang_protect_cleanup_actions = &cp_protect_cleanup_actions;\n }\n \n+/* Returns an expression to be executed if an unhandled exception is\n+   propogated out of a cleanup region.  */\n+\n+static tree\n+cp_protect_cleanup_actions ()\n+{\n+  /* [except.terminate]\n+\n+     When the destruction of an object during stack unwinding exits\n+     using an exception ... void terminate(); is called.  */\n+  return build_call (terminate_node, NULL_TREE);\n+}     \n+\n static tree\n prepare_eh_type (type)\n      tree type;"}, {"sha": "877ab0ffddc60cb019469f7b2b2361bdfc642009", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e6855a2d2906226cbaaa5f8653e44e42596771c9", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.1 2001/05/11 22:10:54 gerald Exp $\n+@comment $Id: install.texi,v 1.2 2001/05/16 14:57:06 dje Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -1550,31 +1550,18 @@ bootstrap and install GCC you first have to install a pre-built\n compiler, see our @uref{binaries.html,,binaries page} for\n details.\n \n+You must use GNU Make to build GCC on Solaris 2.  If you don't have GNU\n+Make installed, you can use the prebuilt compiler mentioned above to\n+build it.\n+\n Sun as 4.X is broken in that it cannot cope with long symbol names.\n A typical error message might look similar to the following:\n \n @samp{/usr/ccs/bin/as: \"/var/tmp/ccMsw135.s\", line 11041: \n error: can't compute value of an expression involving an external symbol.}\n \n-This is Sun bug 4237974.  See the @uref{../faq.html#squangle,,How to work around too long C++\n-symbol names?} FAQ entry for further information and a workaround.  This is fixed with patch \n-108908-02 and has been fixed in later (5.x) versions of the assembler.\n-\n-Sun make in all known Solaris 1 (SunOS 4) and Solaris 2 releases has a\n-broken @emph{VPATH} mechanism, which means you must either:\n-@itemize @bullet\n-@item\n-Use GNU make (recommended), @emph{or:}\n-@item\n-Always build in the source directory, @emph{or:}\n-@item\n-@emph{(For GCC 2.95.1 only)}\n-apply the patches mentioned at\n-@uref{http://www.gnu.org/software/gcc/extensions.html#sun-make,,\n-http://www.gnu.org/software/gcc/extensions.html#sun-make}.\n-@end itemize\n-\n-\n+This is Sun bug 4237974.  This is fixed with patch 108908-02 and has\n+been fixed in later (5.x) versions of the assembler.\n @html\n <p>\n <hr>"}, {"sha": "48efbf9b8fc48ed5be7bd4a57b5d8be94bb2b1e1", "filename": "gcc/except.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=e6855a2d2906226cbaaa5f8653e44e42596771c9", "patch": "@@ -88,7 +88,7 @@ int flag_non_call_exceptions;\n \n /* Protect cleanup actions with must-not-throw regions, with a call\n    to the given failure handler.  */\n-tree protect_cleanup_actions;\n+tree (*lang_protect_cleanup_actions) PARAMS ((void));\n \n /* Return true if type A catches type B.  */\n int (*lang_eh_type_covers) PARAMS ((tree a, tree b));\n@@ -367,7 +367,6 @@ void\n init_eh ()\n {\n   ggc_add_rtx_root (&exception_handler_labels, 1);\n-  ggc_add_tree_root (&protect_cleanup_actions, 1);\n \n   if (! flag_exceptions)\n     return;\n@@ -691,6 +690,7 @@ expand_eh_region_end_cleanup (handler)\n      tree handler;\n {\n   struct eh_region *region;\n+  tree protect_cleanup_actions;\n   rtx around_label;\n   rtx data_save[2];\n \n@@ -707,6 +707,13 @@ expand_eh_region_end_cleanup (handler)\n \n   emit_label (region->label);\n \n+  /* Give the language a chance to specify an action to be taken if an\n+     exception is thrown that would propogate out of the HANDLER.  */\n+  protect_cleanup_actions \n+    = (lang_protect_cleanup_actions \n+       ? (*lang_protect_cleanup_actions) () \n+       : NULL_TREE);\n+\n   if (protect_cleanup_actions)\n     expand_eh_region_start ();\n "}, {"sha": "2720241d9a65c3b44f803aef34bb7e5cdd8cd72c", "filename": "gcc/except.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=e6855a2d2906226cbaaa5f8653e44e42596771c9", "patch": "@@ -147,8 +147,13 @@ extern int duplicate_eh_regions\t\tPARAMS ((struct function *,\n extern void sjlj_emit_function_exit_after\tPARAMS ((rtx));\n \n \n-/* Nonzero to protect cleanup actions with must-not-throw regions.  */\n-extern tree protect_cleanup_actions;\n+/* If non-NULL, this is a function that returns an expression to be\n+   executed if an unhandled exception is propogated out of a cleanup\n+   region.  For example, in C++, an exception thrown by a destructor\n+   during stack unwinding is required to result in a call to\n+   `std::terminate', so the C++ version of this function returns a\n+   CALL_EXPR for `std::terminate'.  */\n+extern tree (*lang_protect_cleanup_actions) PARAMS ((void));\n \n /* Return true if type A catches type B.  */\n extern int (*lang_eh_type_covers) PARAMS ((tree a, tree b));"}, {"sha": "3e7b295305a3a4a3d48ffa1c35d97e089371dc0f", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6855a2d2906226cbaaa5f8653e44e42596771c9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e6855a2d2906226cbaaa5f8653e44e42596771c9", "patch": "@@ -1625,6 +1625,13 @@ void\n assemble_external (decl)\n      tree decl ATTRIBUTE_UNUSED;\n {\n+  /* Because most platforms do not define ASM_OUTPUT_EXTERNAL, the\n+     main body of this code is only rarely exercised.  To provide some\n+     testing, on all platforms, we make sure that the ASM_OUT_FILE is\n+     open.  If it's not, we should not be calling this function.  */\n+  if (!asm_out_file)\n+    abort ();\n+\n #ifdef ASM_OUTPUT_EXTERNAL\n   if (DECL_P (decl) && DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n     {"}]}