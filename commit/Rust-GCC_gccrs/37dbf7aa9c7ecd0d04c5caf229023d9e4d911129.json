{"sha": "37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkYmY3YWE5YzdlY2QwZDA0YzVjYWYyMjkwMjNkOWU0ZDkxMTEyOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-30T02:40:48Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-30T02:40:48Z"}, "message": "cpplib.c (do_if): Don't save and restore only_seen_white here.\n\n\t* cpplib.c (do_if): Don't save and restore only_seen_white here.\n\t* cppexp.c (_cpp_parse_expr): Save and restore only_seen_white\n\tand skipping here.\n\nFrom-SVN: r34260", "tree": {"sha": "d00c4ee461538b9857b27d0d4789a07da42adf5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d00c4ee461538b9857b27d0d4789a07da42adf5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/comments", "author": null, "committer": null, "parents": [{"sha": "6a3dbe6543fe3d23a1936c3867e9980eec075c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3dbe6543fe3d23a1936c3867e9980eec075c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3dbe6543fe3d23a1936c3867e9980eec075c15"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "525c8b0f1bf9537206d4996d5ce6841e398eb75b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "patch": "@@ -1,3 +1,9 @@\n+2000-05-29  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplib.c (do_if): Don't save and restore only_seen_white here.\n+\t* cppexp.c (_cpp_parse_expr): Save and restore only_seen_white\n+\tand skipping here.\n+\n 2000-05-29  Richard Earnshaw (rearnsha@arm.com)\n \n \t* flow.c (mark_used_reg): If a register is unconditionally live, \n@@ -249,14 +255,14 @@ Sun May 28 23:26:59 2000  Philippe De Muyter <phdm@macqel.be>\n \n 2000-05-28  Neil Booth  <NeilB@earthling.net>\n \n-        * cpplex.c (_cpp_init_toklist): No comment space to initialise.\n+\t* cpplex.c (_cpp_init_toklist): No comment space to initialise.\n \t(_cpp_free_toklist): No comment space to free.\n \t(expand_comment_space): Remove.\n-        (save_comment_space): Place the comment in the current token and\n-        not in a separate comment space.\n-        (_cpp_lex_line): Save comments during plain code and #define\n-        directives only.\n-        * cpplib.h (struct _cpp_toklist): Remove comment space.\n+\t(save_comment_space): Place the comment in the current token and\n+\tnot in a separate comment space.\n+\t(_cpp_lex_line): Save comments during plain code and #define\n+\tdirectives only.\n+\t* cpplib.h (struct _cpp_toklist): Remove comment space.\n \n 2000-05-28  Neil Booth  <NeilB@earthling.net>\n "}, {"sha": "58430c331e20be222634d57b28b0baab38f71e2c", "filename": "gcc/cppexp.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "patch": "@@ -843,6 +843,12 @@ _cpp_parse_expr (pfile)\n   int result;\n   char buff[5];\n \n+  /* Save parser state and set it to something sane.  */\n+  int save_only_seen_white = pfile->only_seen_white;\n+  int save_skipping = pfile->skipping;\n+  pfile->only_seen_white = 0;\n+  pfile->skipping = 0;\n+\n   /* We've finished when we try to reduce this.  */\n   top->op = FINISHED;\n   /* Nifty way to catch missing '('.  */\n@@ -1162,5 +1168,7 @@ _cpp_parse_expr (pfile)\n   if (stack != init_stack)\n     free (stack);\n   CPP_SET_WRITTEN (pfile, old_written);\n+  pfile->only_seen_white = save_only_seen_white;\n+  pfile->skipping = save_skipping;\n   return result;\n }"}, {"sha": "e339c1eaab349462581f7f6e8d72f6c8479165c1", "filename": "gcc/cpplib.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "patch": "@@ -1186,15 +1186,11 @@ do_if (pfile)\n {\n   const cpp_hashnode *cmacro = 0;\n   int value = 0;\n-  int save_only_seen_white = pfile->only_seen_white;\n \n   if (! pfile->skipping)\n     {\n       cmacro = detect_if_not_defined (pfile);  \n-\n-      pfile->only_seen_white = 0;\n       value = _cpp_parse_expr (pfile);\n-      pfile->only_seen_white = save_only_seen_white;\n     }\n   push_conditional (pfile, value == 0, T_IF, cmacro);\n   return 0;"}, {"sha": "6343a81feb7e235019d978b33d717c0b159bb5cc", "filename": "gcc/testsuite/gcc.dg/20000529-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2Ftestsuite%2Fgcc.dg%2F20000529-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dbf7aa9c7ecd0d04c5caf229023d9e4d911129/gcc%2Ftestsuite%2Fgcc.dg%2F20000529-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000529-1.c?ref=37dbf7aa9c7ecd0d04c5caf229023d9e4d911129", "patch": "@@ -0,0 +1,14 @@\n+/* Regression test for bug with macro expansion on #if lines -\n+   exposed by glibc.  */\n+/* { dg-do compile } */\n+\n+# define SHLIB_COMPAT(lib, introduced, obsoleted) \\\n+  (!(ABI_##lib##_##obsoleted - 0) \\\n+   || ((ABI_##lib##_##introduced - 0) < (ABI_##lib##_##obsoleted - 0)))\n+\n+#if 0\n+bad\n+#elif SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)\n+int\n+#endif\n+x;"}]}