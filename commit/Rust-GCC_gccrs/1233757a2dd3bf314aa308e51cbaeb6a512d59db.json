{"sha": "1233757a2dd3bf314aa308e51cbaeb6a512d59db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzMzc1N2EyZGQzYmYzMTRhYTMwOGU1MWNiYWViNmE1MTJkNTlkYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-08-20T09:49:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:49:56Z"}, "message": "[Ada] Spurious error in dispatching call with class-wide precondition\n\nThis patch fixes a spurious visibility error on a dispatching call to\na subprogram with a classwide precondition, when the call qppears in\nthe same declarative part as the subprogram declaration itself.\n\n2019-08-20  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_disp.adb (Build_Class_Wide_Check, Replace_Formals): When a\n\tdispatching call tp a subprogram with a class-wide precondition\n\toccurrs in the same declarative part as the ancestor subprogram\n\tbeing called, the`expression for the precondition has not been\n\tanalyzed yet. Such a call may appear, e.g. in an expression\n\tfunction. In that case, the replacement of formals by actuals in\n\tthe call cannot use the formal entities of the subprogram being\n\tcalled, and the occurrence of the formals in the expression must\n\tbe located by name (Chars fields) as would be done at a later\n\tfreeze point, when the expression is resolved in the context of\n\tthe subprogram itself.\n\ngcc/testsuite/\n\n\t* gnat.dg/tagged5.adb, gnat.dg/tagged5.ads: New testcase.\n\nFrom-SVN: r274733", "tree": {"sha": "7561a4352f911447065413a2aef272765ffbead6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7561a4352f911447065413a2aef272765ffbead6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1233757a2dd3bf314aa308e51cbaeb6a512d59db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1233757a2dd3bf314aa308e51cbaeb6a512d59db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1233757a2dd3bf314aa308e51cbaeb6a512d59db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1233757a2dd3bf314aa308e51cbaeb6a512d59db/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9740c2446478d5d1e85015f3d40402b8ca1b061a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9740c2446478d5d1e85015f3d40402b8ca1b061a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9740c2446478d5d1e85015f3d40402b8ca1b061a"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "fc32ef89eaf947859d03399cc21ceb6e6fa341ad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1233757a2dd3bf314aa308e51cbaeb6a512d59db", "patch": "@@ -1,3 +1,17 @@\n+2019-08-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Build_Class_Wide_Check, Replace_Formals): When a\n+\tdispatching call tp a subprogram with a class-wide precondition\n+\toccurrs in the same declarative part as the ancestor subprogram\n+\tbeing called, the`expression for the precondition has not been\n+\tanalyzed yet. Such a call may appear, e.g. in an expression\n+\tfunction. In that case, the replacement of formals by actuals in\n+\tthe call cannot use the formal entities of the subprogram being\n+\tcalled, and the occurrence of the formals in the expression must\n+\tbe located by name (Chars fields) as would be done at a later\n+\tfreeze point, when the expression is resolved in the context of\n+\tthe subprogram itself.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* sem_prag.adb (Persistent_BSS): If an initialization is present"}, {"sha": "84a6256681cc1e687c2cc55e83b0844660d07b9e", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1233757a2dd3bf314aa308e51cbaeb6a512d59db", "patch": "@@ -728,23 +728,27 @@ package body Exp_Disp is\n          --  corresponding actuals in the call, given that this check is\n          --  performed outside of the body of the subprogram.\n \n+         --  If the dispatching call appears in the same scope as the\n+         --  declaration of the dispatching subprogram (for example in\n+         --  the expression of a local expression function) the prec.\n+         --  has not been analyzed yet, in which case we use the Chars\n+         --  field to recognize intended occurrences of the formals.\n+\n          ---------------------\n          -- Replace_Formals --\n          ---------------------\n \n          function Replace_Formals (N : Node_Id) return Traverse_Result is\n+            A : Node_Id;\n+            F : Entity_Id;\n          begin\n-            if Is_Entity_Name (N)\n-              and then Present (Entity (N))\n-              and then Is_Formal (Entity (N))\n-            then\n-               declare\n-                  A : Node_Id;\n-                  F : Entity_Id;\n+            if Is_Entity_Name (N) then\n+               F := First_Formal (Subp);\n+               A := First_Actual (Call_Node);\n \n-               begin\n-                  F := First_Formal (Subp);\n-                  A := First_Actual (Call_Node);\n+               if Present (Entity (N))\n+                 and then Is_Formal (Entity (N))\n+               then\n                   while Present (F) loop\n                      if F = Entity (N) then\n                         Rewrite (N, New_Copy_Tree (A));\n@@ -776,7 +780,25 @@ package body Exp_Disp is\n                      Next_Formal (F);\n                      Next_Actual (A);\n                   end loop;\n-               end;\n+\n+               --  If node is not analyzed, recognize occurrences of\n+               --  a formal by name, as would be done when resolving\n+               --  the aspect expression in the context of the subprogram.\n+\n+               elsif not Analyzed (N)\n+                 and then Nkind (N) = N_Identifier\n+                 and then No (Entity (N))\n+               then\n+                  while Present (F) loop\n+                     if Chars (N) = Chars (F) then\n+                        Rewrite (N, New_Copy_Tree (A));\n+                        return Skip;\n+                     end if;\n+\n+                     Next_Formal (F);\n+                     Next_Actual (A);\n+                  end loop;\n+               end if;\n             end if;\n \n             return OK;"}, {"sha": "629041b6f7fbe1765ff89d2f2533aa22f398ea87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1233757a2dd3bf314aa308e51cbaeb6a512d59db", "patch": "@@ -1,3 +1,7 @@\n+2019-08-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/tagged5.adb, gnat.dg/tagged5.ads: New testcase.\n+\n 2019-08-20  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat.dg/type_conv2.adb, gnat.dg/type_conv2.ads: New testcase."}, {"sha": "ffccca8779f1648ef125a8c5da3b7cfb07701df9", "filename": "gcc/testsuite/gnat.dg/tagged5.adb", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged5.adb?ref=1233757a2dd3bf314aa308e51cbaeb6a512d59db", "patch": "@@ -0,0 +1,6 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+package body Tagged5 is\n+   procedure Dummy is null;\n+end Tagged5;"}, {"sha": "3047269c88d3f2bab77bef45a911a142361ac9aa", "filename": "gcc/testsuite/gnat.dg/tagged5.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1233757a2dd3bf314aa308e51cbaeb6a512d59db/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged5.ads?ref=1233757a2dd3bf314aa308e51cbaeb6a512d59db", "patch": "@@ -0,0 +1,18 @@\n+package Tagged5 is\n+\n+    type T is limited interface;\n+\n+    not overriding function Element\n+      (Self  : T;\n+       Index : Positive)\n+       return Integer is abstract\n+       with Pre'Class => Index + Index ** 2 in 1 .. 10;\n+\n+    function First\n+      (Self  : T'Class)\n+       return Integer\n+         is (Self.Element (1));\n+\n+    procedure Dummy;\n+\n+end Tagged5;"}]}