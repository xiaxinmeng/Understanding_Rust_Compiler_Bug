{"sha": "9ef313e31caf3e61eb3b1b0483249d1598bd73cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVmMzEzZTMxY2FmM2U2MWViM2IxYjA0ODMyNDlkMTU5OGJkNzNjZg==", "commit": {"author": {"name": "Jan van Dijk", "email": "jan@etpmod.phys.tue.nl", "date": "2004-06-10T16:54:49Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-06-10T16:54:49Z"}, "message": "std_complex.h (sin(const complex<_Tp>& __z)): Make this function return a value.\n\n\n2004-06-10  Jan van Dijk  <jan@etpmod.phys.tue.nl>\n\n\t* include/std/std_complex.h (sin(const complex<_Tp>& __z)): Make\n\tthis function return a value.\n\nFrom-SVN: r82928", "tree": {"sha": "32117dfe22a2c267f802a890a74bbb09f5213c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32117dfe22a2c267f802a890a74bbb09f5213c1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ef313e31caf3e61eb3b1b0483249d1598bd73cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef313e31caf3e61eb3b1b0483249d1598bd73cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef313e31caf3e61eb3b1b0483249d1598bd73cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef313e31caf3e61eb3b1b0483249d1598bd73cf/comments", "author": null, "committer": null, "parents": [{"sha": "811d7e77459bb2926e5928b2ad47caf6eaf258fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811d7e77459bb2926e5928b2ad47caf6eaf258fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811d7e77459bb2926e5928b2ad47caf6eaf258fc"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "e704fa7c0bbba5bbc6f2a004292bb2bbd564da93", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ef313e31caf3e61eb3b1b0483249d1598bd73cf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ef313e31caf3e61eb3b1b0483249d1598bd73cf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9ef313e31caf3e61eb3b1b0483249d1598bd73cf", "patch": "@@ -1,3 +1,8 @@\n+2004-06-10  Jan van Dijk  <jan@etpmod.phys.tue.nl>\n+\n+\t* include/std/std_complex.h (sin(const complex<_Tp>& __z)): Make\n+\tthis function return a value.\n+\n 2004-06-09  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/15775"}, {"sha": "f5a8e5cb6d6194897e74f03e3436e868a79eb155", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ef313e31caf3e61eb3b1b0483249d1598bd73cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ef313e31caf3e61eb3b1b0483249d1598bd73cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=9ef313e31caf3e61eb3b1b0483249d1598bd73cf", "patch": "@@ -676,11 +676,11 @@ namespace std\n   template<typename _Tp>\n     inline complex<_Tp>\n     __complex_cosh(const complex<_Tp>& __z)\n-      {\n-        const _Tp __x = __z.real();\n-        const _Tp __y = __z.imag();\n-        return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));\n-      }\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp __y = __z.imag();\n+      return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));\n+    }\n \n   inline __complex__ float\n   __complex_cosh(__complex__ float __z) { return __builtin_ccoshf(__z); }\n@@ -709,8 +709,8 @@ namespace std\n   __complex_exp(__complex__ double __z) { return __builtin_cexp(__z); }\n \n   inline __complex__ long double\n-    __complex_exp(const __complex__ long double& __z)\n-    { return __builtin_cexpl(__z); }\n+  __complex_exp(const __complex__ long double& __z)\n+  { return __builtin_cexpl(__z); }\n   \n   template<typename _Tp>\n     inline complex<_Tp>\n@@ -768,7 +768,7 @@ namespace std\n \n   template<typename _Tp>\n     inline complex<_Tp>\n-    sin(const complex<_Tp>& __z) { __complex_sin(__z.__rep()); }\n+    sin(const complex<_Tp>& __z) { return __complex_sin(__z.__rep()); }\n \n   // 26.2.8/11 sinh(__z): Returns the hyperbolic sine of __z.\n   template<typename _Tp>"}]}