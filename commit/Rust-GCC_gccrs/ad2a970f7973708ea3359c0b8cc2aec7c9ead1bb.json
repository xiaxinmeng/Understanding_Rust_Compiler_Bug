{"sha": "ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyYTk3MGY3OTczNzA4ZWEzMzU5YzBiOGNjMmFlYzdjOWVhZDFiYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-19T18:10:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-19T18:10:04Z"}, "message": "re PR tree-optimization/83444 (missing strlen optimization on a member array of a local struct)\n\n\tPR tree-optimization/83444\n\t* tree-ssa-strlen.c (strlen_check_and_optimize_stmt): For the\n\tcharacter load case, if get_stridx on MEM_REF's operand doesn't\n\tlook usable, retry with get_addr_stridx.\n\n\t* gcc.dg/strlenopt-38.c: New test.\n\nFrom-SVN: r255835", "tree": {"sha": "85036f703ba660c24e544e555845177131f2ea78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85036f703ba660c24e544e555845177131f2ea78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c9aa2cf8e59317ae73151c53fe84470b30c7ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9aa2cf8e59317ae73151c53fe84470b30c7ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c9aa2cf8e59317ae73151c53fe84470b30c7ae9"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "5e8e9bf6accdfcd1b84609ac084de324108af8f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "patch": "@@ -1,3 +1,10 @@\n+2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83444\n+\t* tree-ssa-strlen.c (strlen_check_and_optimize_stmt): For the\n+\tcharacter load case, if get_stridx on MEM_REF's operand doesn't\n+\tlook usable, retry with get_addr_stridx.\n+\n 2017-12-19  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR debug/83422"}, {"sha": "1146e94c0e912aa2e5cbf9bcd27db1ddc4da9442", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "patch": "@@ -5,6 +5,9 @@\n \n 2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83444\n+\t* gcc.dg/strlenopt-38.c: New test.\n+\n \tPR testsuite/83454\n \t* gcc.dg/tree-ssa/cswtch-4.c: Require nonpic effective target.\n \t* gcc.dg/tree-ssa/cswtch-5.c: Likewise."}, {"sha": "7c39f3a175b121ea4181e6f49d3b545ac1259027", "filename": "gcc/testsuite/gcc.dg/strlenopt-38.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-38.c?ref=ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "patch": "@@ -36,3 +36,14 @@ baz (void)\n   if (s.b[0] != 0)\n     abort ();\n }\n+\n+void\n+boo (void)\n+{\n+  struct S s;\n+  strcpy (s.b, \"012\");\n+  strcpy (s.c, \"\");\n+  strcpy (s.b, s.c);\n+  if (strlen (s.b) != 0)\n+    abort ();\n+}"}, {"sha": "8971c7df4f3294fb6e57d466f83e1c3ab042b94c", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=ad2a970f7973708ea3359c0b8cc2aec7c9ead1bb", "patch": "@@ -3155,14 +3155,27 @@ strlen_check_and_optimize_stmt (gimple_stmt_iterator *gsi)\n \t  {\n \t    tree off = integer_zero_node;\n \t    unsigned HOST_WIDE_INT coff = 0;\n-\t    int idx = -1;\n+\t    int idx = 0;\n \t    tree rhs1 = gimple_assign_rhs1 (stmt);\n \t    if (code == MEM_REF)\n \t      {\n \t\tidx = get_stridx (TREE_OPERAND (rhs1, 0));\n-\t\toff = TREE_OPERAND (rhs1, 1);\n+\t\tif (idx > 0)\n+\t\t  {\n+\t\t    strinfo *si = get_strinfo (idx);\n+\t\t    if (si\n+\t\t\t&& si->nonzero_chars\n+\t\t\t&& TREE_CODE (si->nonzero_chars) == INTEGER_CST\n+\t\t\t&& (wi::to_widest (si->nonzero_chars)\n+\t\t\t    >= wi::to_widest (off)))\n+\t\t      off = TREE_OPERAND (rhs1, 1);\n+\t\t    else\n+\t\t      /* This case is not useful.  See if get_addr_stridx\n+\t\t\t returns something usable.  */\n+\t\t      idx = 0;\n+\t\t  }\n \t      }\n-\t    else\n+\t    if (idx <= 0)\n \t      idx = get_addr_stridx (rhs1, NULL_TREE, &coff);\n \t    if (idx > 0)\n \t      {"}]}