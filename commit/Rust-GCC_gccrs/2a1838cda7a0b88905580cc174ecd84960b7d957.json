{"sha": "2a1838cda7a0b88905580cc174ecd84960b7d957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExODM4Y2RhN2EwYjg4OTA1NTgwY2MxNzRlY2Q4NDk2MGI3ZDk1Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-12-03T15:49:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-03T15:49:23Z"}, "message": "[Ada] Fix recent regression on array aggregate with dynamic subtype\n\nThis prevents either a crash or an assertion failure in gigi on an array\nwith dynamic subtype that is wrongly flagged as static by the front-end\nbecause of a recent improvement made in the handling of nested\naggregates.\n\nThe patch reuses the existing Static_Array_Aggregate predicate instead\nof fixing the problematic test, pluging a few loopholes in the process.\nThe predicate is conservatively correct but should be good enough in\npractice.\n\n2018-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Convert_To_Positional): Use\n\tStatic_Array_Aggregate to decide whether to set\n\tCompile_Time_Known_Aggregate on an already flat aggregate.\n\t(Expand_Array_Aggregate): Remove test on\n\tCompile_Time_Known_Aggregate that turns out to be dead and\n\tsimplify.\n\t(Is_Static_Component): New predicate extracted from...\n\t(Static_Array_Aggregate): ...here.  Test neither Is_Tagged_Type\n\tnor Is_Controlled for the type, but test whether the component\n\ttype has discriminants.  Use the Is_Static_Component predicate\n\tconsistently for the positional and named cases.\n\ngcc/testsuite/\n\n\t* gnat.dg/array32.adb, gnat.dg/array32.ads: New testcase.\n\nFrom-SVN: r266755", "tree": {"sha": "d465b90df9ed80cbb9b228954cfacd6c8fd8eae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d465b90df9ed80cbb9b228954cfacd6c8fd8eae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1838cda7a0b88905580cc174ecd84960b7d957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1838cda7a0b88905580cc174ecd84960b7d957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1838cda7a0b88905580cc174ecd84960b7d957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1838cda7a0b88905580cc174ecd84960b7d957/comments", "author": null, "committer": null, "parents": [{"sha": "d71753da57c28ded0e9d392c119ffbcdc0396360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71753da57c28ded0e9d392c119ffbcdc0396360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71753da57c28ded0e9d392c119ffbcdc0396360"}], "stats": {"total": 117, "additions": 79, "deletions": 38}, "files": [{"sha": "132cc0a76fd961c7bbdaf21e80feff8917b45225", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2a1838cda7a0b88905580cc174ecd84960b7d957", "patch": "@@ -1,3 +1,17 @@\n+2018-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Convert_To_Positional): Use\n+\tStatic_Array_Aggregate to decide whether to set\n+\tCompile_Time_Known_Aggregate on an already flat aggregate.\n+\t(Expand_Array_Aggregate): Remove test on\n+\tCompile_Time_Known_Aggregate that turns out to be dead and\n+\tsimplify.\n+\t(Is_Static_Component): New predicate extracted from...\n+\t(Static_Array_Aggregate): ...here.  Test neither Is_Tagged_Type\n+\tnor Is_Controlled for the type, but test whether the component\n+\ttype has discriminants.  Use the Is_Static_Component predicate\n+\tconsistently for the positional and named cases.\n+\n 2018-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* freeze.adb (Freeze_Entity): Do not freeze the partial view of"}, {"sha": "45d517d1cb20d55d47410f012e11ba2a68359e20", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=2a1838cda7a0b88905580cc174ecd84960b7d957", "patch": "@@ -4759,17 +4759,8 @@ package body Exp_Aggr is\n       --  initial value of a thread-local variable.\n \n       if Is_Flat (N, Number_Dimensions (Typ)) then\n-         Check_Static_Components;\n-         if Static_Components then\n-            if Is_Packed (Etype (N))\n-              or else\n-                (Is_Record_Type (Component_Type (Etype (N)))\n-                  and then Has_Discriminants (Component_Type (Etype (N))))\n-            then\n-               null;\n-            else\n-               Set_Compile_Time_Known_Aggregate (N);\n-            end if;\n+         if Static_Array_Aggregate (N) then\n+            Set_Compile_Time_Known_Aggregate (N);\n          end if;\n \n          return;\n@@ -6205,15 +6196,8 @@ package body Exp_Aggr is\n         or else (Parent_Kind = N_Assignment_Statement\n                   and then Inside_Init_Proc)\n       then\n-         if Static_Array_Aggregate (N)\n-           or else Compile_Time_Known_Aggregate (N)\n-         then\n-            Set_Expansion_Delayed (N, False);\n-            return;\n-         else\n-            Set_Expansion_Delayed (N);\n-            return;\n-         end if;\n+         Set_Expansion_Delayed (N, not Static_Array_Aggregate (N));\n+         return;\n       end if;\n \n       --  STEP 4\n@@ -8506,20 +8490,48 @@ package body Exp_Aggr is\n    ----------------------------\n \n    function Static_Array_Aggregate (N : Node_Id) return Boolean is\n+\n+      function Is_Static_Component (N : Node_Id) return Boolean;\n+      --  Return True if N has a compile-time known value and can be passed as\n+      --  is to the back-end without further expansion.\n+\n+      ---------------------------\n+      --  Is_Static_Component  --\n+      ---------------------------\n+\n+      function Is_Static_Component (N : Node_Id) return Boolean is\n+      begin\n+         if Nkind_In (N, N_Integer_Literal, N_Real_Literal) then\n+            return True;\n+\n+         elsif Is_Entity_Name (N)\n+           and then Present (Entity (N))\n+           and then Ekind (Entity (N)) = E_Enumeration_Literal\n+         then\n+            return True;\n+\n+         elsif Nkind (N) = N_Aggregate\n+           and then Compile_Time_Known_Aggregate (N)\n+         then\n+            return True;\n+\n+         else\n+            return False;\n+         end if;\n+      end Is_Static_Component;\n+\n       Bounds : constant Node_Id := Aggregate_Bounds (N);\n \n       Typ       : constant Entity_Id := Etype (N);\n-      Comp_Type : constant Entity_Id := Component_Type (Typ);\n       Agg       : Node_Id;\n       Expr      : Node_Id;\n       Lo        : Node_Id;\n       Hi        : Node_Id;\n \n+   --  Start of processing for Static_Array_Aggregate\n+\n    begin\n-      if Is_Tagged_Type (Typ)\n-        or else Is_Controlled (Typ)\n-        or else Is_Packed (Typ)\n-      then\n+      if Is_Packed (Typ) or else Has_Discriminants (Component_Type (Typ)) then\n          return False;\n       end if;\n \n@@ -8533,11 +8545,11 @@ package body Exp_Aggr is\n \n          if No (Component_Associations (N)) then\n \n-            --  Verify that all components are static integers\n+            --  Verify that all components are static\n \n             Expr := First (Expressions (N));\n             while Present (Expr) loop\n-               if Nkind (Expr) /= N_Integer_Literal then\n+               if not Is_Static_Component (Expr) then\n                   return False;\n                end if;\n \n@@ -8567,17 +8579,7 @@ package body Exp_Aggr is\n                --  component type. We also limit the size of a static aggregate\n                --  to prevent runaway static expressions.\n \n-               if Is_Array_Type (Comp_Type)\n-                 or else Is_Record_Type (Comp_Type)\n-               then\n-                  if Nkind (Expression (Expr)) /= N_Aggregate\n-                    or else\n-                      not Compile_Time_Known_Aggregate (Expression (Expr))\n-                  then\n-                     return False;\n-                  end if;\n-\n-               elsif Nkind (Expression (Expr)) /= N_Integer_Literal then\n+               if not Is_Static_Component (Expression (Expr)) then\n                   return False;\n                end if;\n "}, {"sha": "110932fdbbb65579cf4d372407b75c9d70f319b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a1838cda7a0b88905580cc174ecd84960b7d957", "patch": "@@ -1,3 +1,7 @@\n+2018-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/array32.adb, gnat.dg/array32.ads: New testcase.\n+\n 2018-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/generic_inst2.adb, gnat.dg/generic_inst2.ads,"}, {"sha": "1932e40194d6c65f9f356dd8d80f431e9211fdc4", "filename": "gcc/testsuite/gnat.dg/array32.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Ftestsuite%2Fgnat.dg%2Farray32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Ftestsuite%2Fgnat.dg%2Farray32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray32.adb?ref=2a1838cda7a0b88905580cc174ecd84960b7d957", "patch": "@@ -0,0 +1,10 @@\n+--  { dg-do compile }\n+\n+package body Array32 is\n+\n+   procedure Init (A : out Arr) is\n+   begin\n+      A := ((I => 1), (I => 2));\n+   end;\n+\n+end Array32;"}, {"sha": "48c00466e6fbd4a03651e1132652f9c0486b4b41", "filename": "gcc/testsuite/gnat.dg/array32.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Ftestsuite%2Fgnat.dg%2Farray32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1838cda7a0b88905580cc174ecd84960b7d957/gcc%2Ftestsuite%2Fgnat.dg%2Farray32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray32.ads?ref=2a1838cda7a0b88905580cc174ecd84960b7d957", "patch": "@@ -0,0 +1,11 @@\n+package Array32 is\n+\n+   type Rec is record\n+      I : Integer;\n+   end record;\n+\n+   type Arr is array (Positive range <>) of Rec;\n+\n+   procedure Init (A : out Arr);\n+\n+end Array32;"}]}