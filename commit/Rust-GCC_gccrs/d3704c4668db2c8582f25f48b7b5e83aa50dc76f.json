{"sha": "d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3MDRjNDY2OGRiMmM4NTgyZjI1ZjQ4YjdiNWU4M2FhNTBkYzc2Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-09-15T20:23:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-09-15T20:23:43Z"}, "message": "expr.h (DEFAULT_FUNCTION_ARG_PADDING): New.\n\n\t* expr.h (DEFAULT_FUNCTION_ARG_PADDING): New.\n\t(FUNCTION_ARG_PADDING): Use DEFAULT_FUNCTION_ARG_PADDING.\n\t* config/ia64/ia64.c (ia64_hpux_function_arg_padding):\n\tLikewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_function_arg_padding):\n\tLikewise.\n\t* config/rs6000/rs6000.c (function_arg_padding): Likewise.\n\t* config/sparc/sparc.c (function_arg_padding): Likewise.\n\nFrom-SVN: r71406", "tree": {"sha": "2ca165b1d3df35c033fa152393bd0cd71a2bfef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ca165b1d3df35c033fa152393bd0cd71a2bfef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/comments", "author": null, "committer": null, "parents": [{"sha": "9c8860c3701461d8f2ee6f875ea63d9b5c76baaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8860c3701461d8f2ee6f875ea63d9b5c76baaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8860c3701461d8f2ee6f875ea63d9b5c76baaa"}], "stats": {"total": 58, "additions": 24, "deletions": 34}, "files": [{"sha": "c7a5ed62b78c71164abd0b86c80847e74dd300ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "patch": "@@ -1,3 +1,14 @@\n+2003-09-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* expr.h (DEFAULT_FUNCTION_ARG_PADDING): New.\n+\t(FUNCTION_ARG_PADDING): Use DEFAULT_FUNCTION_ARG_PADDING.\n+\t* config/ia64/ia64.c (ia64_hpux_function_arg_padding):\n+\tLikewise.\n+\t* config/m68hc11/m68hc11.c (m68hc11_function_arg_padding):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (function_arg_padding): Likewise.\n+\t* config/sparc/sparc.c (function_arg_padding): Likewise.\n+\n 2003-09-15  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* haifa-sched.c (schedule_block): Use ready_remove_first instead"}, {"sha": "9ca874d1dd40332505f681ea1cbb2859cca66ee1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "patch": "@@ -8248,14 +8248,8 @@ ia64_hpux_function_arg_padding (enum machine_mode mode, tree type)\n        && int_size_in_bytes (type) < UNITS_PER_WORD)\n      return upward;\n \n-   /* This is the standard FUNCTION_ARG_PADDING with !BYTES_BIG_ENDIAN\n-      hardwired to be true.  */\n-\n-   return((mode == BLKmode\n-       ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-          && int_size_in_bytes (type) < (PARM_BOUNDARY / BITS_PER_UNIT))\n-       : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n-      ? downward : upward);\n+   /* Fall back to the default.  */\n+   return DEFAULT_FUNCTION_ARG_PADDING (mode, type);\n }\n \n /* Linked list of all external functions that are to be emitted by GCC."}, {"sha": "c97ea89c447efb6258e2ab0eaaad8ef8dfb38690", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "patch": "@@ -1582,14 +1582,8 @@ m68hc11_function_arg_padding (mode, type)\n   if (type != 0 && AGGREGATE_TYPE_P (type))\n     return upward;\n \n-  /* This is the default definition.  */\n-  return (!BYTES_BIG_ENDIAN\n-\t  ? upward\n-\t  : ((mode == BLKmode\n-\t      ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-\t\t && int_size_in_bytes (type) <\n-\t\t (PARM_BOUNDARY / BITS_PER_UNIT)) : GET_MODE_BITSIZE (mode) <\n-\t      PARM_BOUNDARY) ? downward : upward));\n+  /* Fall back to the default.  */\n+  return DEFAULT_FUNCTION_ARG_PADDING (mode, type);\n }\n \f\n "}, {"sha": "ae702fc012bf9dfa2a213a028bf8d491b8313a03", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "patch": "@@ -3624,14 +3624,8 @@ function_arg_padding (enum machine_mode mode, tree type)\n \treturn upward;\n     }\n \n-  /* This is the default definition.  */\n-  return (! BYTES_BIG_ENDIAN\n-\t  ? upward\n-\t  : ((mode == BLKmode\n-\t      ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-\t\t && int_size_in_bytes (type) < (PARM_BOUNDARY / BITS_PER_UNIT))\n-\t      : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n-\t     ? downward : upward));\n+  /* Fall back to the default.  */\n+  return DEFAULT_FUNCTION_ARG_PADDING (mode, type);\n }\n \n /* If defined, a C expression that gives the alignment boundary, in bits,"}, {"sha": "8441783261af256934ee5e7a9125cd44233206f7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "patch": "@@ -5541,14 +5541,8 @@ function_arg_padding (enum machine_mode mode, tree type)\n   if (TARGET_ARCH64 && type != 0 && AGGREGATE_TYPE_P (type))\n     return upward;\n \n-  /* This is the default definition.  */\n-  return (! BYTES_BIG_ENDIAN\n-\t  ? upward\n-\t  : ((mode == BLKmode\n-\t      ? (type && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-\t\t && int_size_in_bytes (type) < (PARM_BOUNDARY / BITS_PER_UNIT))\n-\t      : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n-\t     ? downward : upward));\n+  /* Fall back to the default.  */\n+  return DEFAULT_FUNCTION_ARG_PADDING (mode, type);\n }\n \n /* Handle FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE, and LIBCALL_VALUE macros."}, {"sha": "e3138a11dbdebbc265a176e1c5957ce467ec1bfa", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3704c4668db2c8582f25f48b7b5e83aa50dc76f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d3704c4668db2c8582f25f48b7b5e83aa50dc76f", "patch": "@@ -142,15 +142,18 @@ do {\t\t\t\t\t\t\t\\\n    usually pad upward, but pad short args downward on\n    big-endian machines.  */\n \n-#ifndef FUNCTION_ARG_PADDING\n-#define FUNCTION_ARG_PADDING(MODE, TYPE)\t\t\t\t\\\n+#define DEFAULT_FUNCTION_ARG_PADDING(MODE, TYPE)\t\t\t\\\n   (! BYTES_BIG_ENDIAN\t\t\t\t\t\t\t\\\n    ? upward\t\t\t\t\t\t\t\t\\\n    : (((MODE) == BLKmode\t\t\t\t\t\t\\\n        ? ((TYPE) && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST\t\t\\\n \t  && int_size_in_bytes (TYPE) < (PARM_BOUNDARY / BITS_PER_UNIT)) \\\n        : GET_MODE_BITSIZE (MODE) < PARM_BOUNDARY)\t\t\t\\\n       ? downward : upward))\n+\n+#ifndef FUNCTION_ARG_PADDING\n+#define FUNCTION_ARG_PADDING(MODE, TYPE)\t\\\n+  DEFAULT_FUNCTION_ARG_PADDING ((MODE), (TYPE))\n #endif\n \n /* Supply a default definition for FUNCTION_ARG_BOUNDARY.  Normally, we let"}]}