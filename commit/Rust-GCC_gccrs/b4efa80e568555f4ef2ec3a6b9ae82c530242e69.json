{"sha": "b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlZmE4MGU1Njg1NTVmNGVmMmVjM2E2YjlhZTgyYzUzMDI0MmU2OQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-09-18T18:31:01Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-09-18T18:31:01Z"}, "message": "re PR libstdc++/58338 (Add noexcept to functions with a narrow contract)\n\n2013-09-18  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/58338\n\t* include/bits/stl_iterator.h (__normal_iterator) [__normal_iterator,\n\t_M_const_cast, operator*, operator->, operator++, operator--,\n\toperator[], operator+=, operator+, operator-=, operator-, base]:\n\tMark as noexcept.\n\t(operator==(const __normal_iterator&, const __normal_iterator&),\n\toperator!=(const __normal_iterator&, const __normal_iterator&),\n\toperator<(const __normal_iterator&, const __normal_iterator&),\n\toperator>(const __normal_iterator&, const __normal_iterator&),\n\toperator<=(const __normal_iterator&, const __normal_iterator&),\n\toperator>=(const __normal_iterator&, const __normal_iterator&),\n\toperator-(const __normal_iterator&, const __normal_iterator&),\n\toperator+(difference_type, const __normal_iterator&)): Likewise.\n\t* include/bits/stl_list.h (list) [splice, _M_check_equal_allocators]:\n\tLikewise.\n\t(list::_M_check_equal_allocators): Abort instead of throwing.\n\t* include/debug/array (array) [operator[], front, back]: Mark as\n\tnoexcept.\n\t* include/profile/array (array) [operator[], front, back]: Likewise.\n\t* include/std/array (array) [operator[], front, back]: Likewise.\n\t* include/debug/list (list::splice): Likewise.\n\t* include/profile/list (list::splice): Likewise.\n\t* testsuite/23_containers/list/operations/5.cc: Remove file.\n\t* testsuite/23_containers/list/operations/5.h: Likewise.\n\nFrom-SVN: r202716", "tree": {"sha": "a99d9708382a55ac7deaa9ad1809b8f33002b285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99d9708382a55ac7deaa9ad1809b8f33002b285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9b29b2540c8f68779937cd6024d256774538a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b29b2540c8f68779937cd6024d256774538a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b29b2540c8f68779937cd6024d256774538a2d"}], "stats": {"total": 310, "additions": 94, "deletions": 216}, "files": [{"sha": "77b5e12d0762e54484de4494ddf8287db4326cc9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -1,3 +1,30 @@\n+2013-09-18  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/58338\n+\t* include/bits/stl_iterator.h (__normal_iterator) [__normal_iterator,\n+\t_M_const_cast, operator*, operator->, operator++, operator--,\n+\toperator[], operator+=, operator+, operator-=, operator-, base]:\n+\tMark as noexcept.\n+\t(operator==(const __normal_iterator&, const __normal_iterator&),\n+\toperator!=(const __normal_iterator&, const __normal_iterator&),\n+\toperator<(const __normal_iterator&, const __normal_iterator&),\n+\toperator>(const __normal_iterator&, const __normal_iterator&),\n+\toperator<=(const __normal_iterator&, const __normal_iterator&),\n+\toperator>=(const __normal_iterator&, const __normal_iterator&),\n+\toperator-(const __normal_iterator&, const __normal_iterator&),\n+\toperator+(difference_type, const __normal_iterator&)): Likewise.\n+\t* include/bits/stl_list.h (list) [splice, _M_check_equal_allocators]:\n+\tLikewise.\n+\t(list::_M_check_equal_allocators): Abort instead of throwing.\n+\t* include/debug/array (array) [operator[], front, back]: Mark as\n+\tnoexcept.\n+\t* include/profile/array (array) [operator[], front, back]: Likewise.\n+\t* include/std/array (array) [operator[], front, back]: Likewise.\n+\t* include/debug/list (list::splice): Likewise.\n+\t* include/profile/list (list::splice): Likewise.\n+\t* testsuite/23_containers/list/operations/5.cc: Remove file.\n+\t* testsuite/23_containers/list/operations/5.h: Likewise.\n+\n 2013-09-18  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex.h: Add friend classes."}, {"sha": "1f555a4ef284eef3f67787769bf3634adec76c05", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -721,22 +721,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __traits_type::reference \treference;\n       typedef typename __traits_type::pointer   \tpointer;\n \n-      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }\n+      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT\n+      : _M_current(_Iterator()) { }\n \n       explicit\n-      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }\n+      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT\n+      : _M_current(__i) { }\n \n       // Allow iterator to const_iterator conversion\n       template<typename _Iter>\n         __normal_iterator(const __normal_iterator<_Iter,\n \t\t\t  typename __enable_if<\n       \t       (std::__are_same<_Iter, typename _Container::pointer>::__value),\n-\t\t      _Container>::__type>& __i)\n+\t\t      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT\n         : _M_current(__i.base()) { }\n \n #if __cplusplus >= 201103L\n       __normal_iterator<typename _Container::pointer, _Container>\n-      _M_const_cast() const\n+      _M_const_cast() const noexcept\n       {\n \tusing _PTraits = std::pointer_traits<typename _Container::pointer>;\n \treturn __normal_iterator<typename _Container::pointer, _Container>\n@@ -751,59 +753,59 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Forward iterator requirements\n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       { return *_M_current; }\n \n       pointer\n-      operator->() const\n+      operator->() const _GLIBCXX_NOEXCEPT\n       { return _M_current; }\n \n       __normal_iterator&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t++_M_current;\n \treturn *this;\n       }\n \n       __normal_iterator\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       { return __normal_iterator(_M_current++); }\n \n       // Bidirectional iterator requirements\n       __normal_iterator&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \t--_M_current;\n \treturn *this;\n       }\n \n       __normal_iterator\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       { return __normal_iterator(_M_current--); }\n \n       // Random access iterator requirements\n       reference\n-      operator[](difference_type __n) const\n+      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n       { return _M_current[__n]; }\n \n       __normal_iterator&\n-      operator+=(difference_type __n)\n+      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT\n       { _M_current += __n; return *this; }\n \n       __normal_iterator\n-      operator+(difference_type __n) const\n+      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n       { return __normal_iterator(_M_current + __n); }\n \n       __normal_iterator&\n-      operator-=(difference_type __n)\n+      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT\n       { _M_current -= __n; return *this; }\n \n       __normal_iterator\n-      operator-(difference_type __n) const\n+      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT\n       { return __normal_iterator(_M_current - __n); }\n \n       const _Iterator&\n-      base() const\n+      base() const _GLIBCXX_NOEXCEPT\n       { return _M_current; }\n     };\n \n@@ -820,73 +822,85 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n     inline bool\n     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n     inline bool\n     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() != __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n     inline bool\n     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() != __rhs.base(); }\n \n   // Random access iterator requirements\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n     inline bool\n     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() < __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n     inline bool\n     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t      const __normal_iterator<_Iterator, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() < __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n     inline bool\n     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() > __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n     inline bool\n     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t      const __normal_iterator<_Iterator, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() > __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n     inline bool\n     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() <= __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n     inline bool\n     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() <= __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n     inline bool\n     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() >= __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n     inline bool\n     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t       const __normal_iterator<_Iterator, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() >= __rhs.base(); }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -898,7 +912,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // DR 685.\n     inline auto\n     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n-\t      const __normal_iterator<_IteratorR, _Container>& __rhs)\n+\t      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept\n     -> decltype(__lhs.base() - __rhs.base())\n #else\n     inline typename __normal_iterator<_IteratorL, _Container>::difference_type\n@@ -911,12 +925,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename __normal_iterator<_Iterator, _Container>::difference_type\n     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,\n \t      const __normal_iterator<_Iterator, _Container>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() - __rhs.base(); }\n \n   template<typename _Iterator, typename _Container>\n     inline __normal_iterator<_Iterator, _Container>\n     operator+(typename __normal_iterator<_Iterator, _Container>::difference_type\n \t      __n, const __normal_iterator<_Iterator, _Container>& __i)\n+    _GLIBCXX_NOEXCEPT\n     { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "71ef819176c48747570a0ac582c8205821a4a2a9", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -1309,7 +1309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x)\n+      splice(const_iterator __position, list&& __x) noexcept\n #else\n       splice(iterator __position, list& __x)\n #endif\n@@ -1325,7 +1325,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #if __cplusplus >= 201103L\n       void\n-      splice(const_iterator __position, list& __x)\n+      splice(const_iterator __position, list& __x) noexcept\n       { splice(__position, std::move(__x)); }\n #endif\n \n@@ -1341,7 +1341,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  inserts it into the current list before @a __position.\n        */\n       void\n-      splice(const_iterator __position, list&& __x, const_iterator __i)\n+      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept\n #else\n       /**\n        *  @brief  Insert element from another %list.\n@@ -1380,7 +1380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  inserts it into the current list before @a __position.\n        */\n       void\n-      splice(const_iterator __position, list& __x, const_iterator __i)\n+      splice(const_iterator __position, list& __x, const_iterator __i) noexcept\n       { splice(__position, std::move(__x), __i); }\n #endif\n \n@@ -1400,7 +1400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       splice(const_iterator __position, list&& __x, const_iterator __first,\n-\t     const_iterator __last)\n+\t     const_iterator __last) noexcept\n #else\n       /**\n        *  @brief  Insert range from another %list.\n@@ -1446,7 +1446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       splice(const_iterator __position, list& __x, const_iterator __first,\n-\t     const_iterator __last)\n+\t     const_iterator __last) noexcept\n       { splice(__position, std::move(__x), __first, __last); }\n #endif\n \n@@ -1696,11 +1696,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // To implement the splice (and merge) bits of N1599.\n       void\n-      _M_check_equal_allocators(list& __x)\n+      _M_check_equal_allocators(list& __x) _GLIBCXX_NOEXCEPT\n       {\n \tif (std::__alloc_neq<typename _Base::_Node_alloc_type>::\n \t    _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))\n-\t  __throw_runtime_error(__N(\"list::_M_check_equal_allocators\"));\n+\t  __builtin_abort();\n       }\n     };\n "}, {"sha": "d3eea85385677c328d6860604665d7179da802dc", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -147,7 +147,7 @@ namespace __debug\n \n       // Element access.\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) noexcept\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _AT_Type::_S_ref(_M_elems, __n);\n@@ -180,29 +180,29 @@ namespace __debug\n       }\n \n       reference \n-      front()\n+      front() noexcept\n       {\n \t__glibcxx_check_nonempty();\n \treturn *begin();\n       }\n \n       constexpr const_reference \n-      front() const\n+      front() const noexcept\n       {\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, 0)\n \t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n       reference \n-      back()\n+      back() noexcept\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Nm ? *(end() - 1) : *end();\n       }\n \n       constexpr const_reference \n-      back() const\n+      back() const noexcept\n       {\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n \t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),"}, {"sha": "89c26e425ae0f4df7d969e95bec4d1a93e8d09b6", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -515,7 +515,7 @@ namespace __debug\n       // 23.2.2.4 list operations:\n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x)\n+      splice(const_iterator __position, list&& __x) noexcept\n #else\n       splice(iterator __position, list& __x)\n #endif\n@@ -529,13 +529,13 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       void\n-      splice(const_iterator __position, list& __x)\n+      splice(const_iterator __position, list& __x) noexcept\n       { splice(__position, std::move(__x)); }\n #endif\n \n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x, const_iterator __i)\n+      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept\n #else\n       splice(iterator __position, list& __x, iterator __i)\n #endif\n@@ -561,14 +561,14 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       void\n-      splice(const_iterator __position, list& __x, const_iterator __i)\n+      splice(const_iterator __position, list& __x, const_iterator __i) noexcept\n       { splice(__position, std::move(__x), __i); }\n #endif\n \n       void\n #if __cplusplus >= 201103L\n       splice(const_iterator __position, list&& __x, const_iterator __first,\n-\t     const_iterator __last)\n+\t     const_iterator __last) noexcept\n #else\n       splice(iterator __position, list& __x, iterator __first,\n \t     iterator __last)\n@@ -608,7 +608,7 @@ namespace __debug\n #if __cplusplus >= 201103L\n       void\n       splice(const_iterator __position, list& __x,\n-\t     const_iterator __first, const_iterator __last)\n+\t     const_iterator __first, const_iterator __last) noexcept\n       { splice(__position, std::move(__x), __first, __last); }\n #endif\n "}, {"sha": "33bdc9520968a2440e4e09d43826329edc722227", "filename": "libstdc++-v3/include/profile/array", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -127,7 +127,7 @@ namespace __profile\n \n       // Element access.\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) noexcept\n       {\treturn _AT_Type::_S_ref(_M_elems, __n); }\n \n       constexpr const_reference\n@@ -153,19 +153,19 @@ namespace __profile\n       }\n \n       reference \n-      front()\n+      front() noexcept\n       { return *begin(); }\n \n       constexpr const_reference \n-      front() const\n+      front() const noexcept\n       { return _AT_Type::_S_ref(_M_elems, 0); }\n \n       reference \n-      back()\n+      back() noexcept\n       { return _Nm ? *(end() - 1) : *end(); }\n \n       constexpr const_reference \n-      back() const\n+      back() const noexcept\n       {\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n  \t           : _AT_Type::_S_ref(_M_elems, 0);\t  "}, {"sha": "6168c61ed1863bb7294a054cf03e7fb877368d76", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -440,15 +440,15 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       // 23.2.2.4 list operations:\n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x)\n+      splice(const_iterator __position, list&& __x) noexcept\n #else\n       splice(iterator __position, list& __x)\n #endif\n       { this->splice(__position, _GLIBCXX_MOVE(__x), __x.begin(), __x.end()); }\n \n #if __cplusplus >= 201103L\n       void\n-      splice(const_iterator __position, list& __x)\n+      splice(const_iterator __position, list& __x) noexcept\n       { this->splice(__position, std::move(__x)); }\n \n       void\n@@ -458,7 +458,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n \n       void\n #if __cplusplus >= 201103L\n-      splice(const_iterator __position, list&& __x, const_iterator __i)\n+      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept\n #else\n       splice(iterator __position, list& __x, iterator __i)\n #endif\n@@ -474,7 +474,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       void\n #if __cplusplus >= 201103L\n       splice(const_iterator __position, list&& __x, const_iterator __first,\n-\t     const_iterator __last)\n+\t     const_iterator __last) noexcept\n #else\n       splice(iterator __position, list& __x, iterator __first,\n \t     iterator __last)\n@@ -490,7 +490,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n #if __cplusplus >= 201103L\n       void\n       splice(const_iterator __position, list& __x,\n-\t     const_iterator __first, const_iterator __last)\n+\t     const_iterator __first, const_iterator __last) noexcept\n       { this->splice(__position, std::move(__x), __first, __last); }\n #endif\n "}, {"sha": "86e8aee14baf21cd2463a04832f3fb9c0791ed2b", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4efa80e568555f4ef2ec3a6b9ae82c530242e69/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=b4efa80e568555f4ef2ec3a6b9ae82c530242e69", "patch": "@@ -169,7 +169,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // Element access.\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) noexcept\n       { return _AT_Type::_S_ref(_M_elems, __n); }\n \n       constexpr const_reference\n@@ -195,19 +195,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       reference \n-      front()\n+      front() noexcept\n       { return *begin(); }\n \n       constexpr const_reference \n-      front() const\n+      front() const noexcept\n       { return _AT_Type::_S_ref(_M_elems, 0); }\n \n       reference \n-      back()\n+      back() noexcept\n       { return _Nm ? *(end() - 1) : *end(); }\n \n       constexpr const_reference \n-      back() const\n+      back() const noexcept\n       { \n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1) \n  \t           : _AT_Type::_S_ref(_M_elems, 0);"}, {"sha": "fbb55b3ea3c7ac32188bd4a75fa48a9766352f90", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/5.cc", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b29b2540c8f68779937cd6024d256774538a2d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b29b2540c8f68779937cd6024d256774538a2d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.cc?ref=c9b29b2540c8f68779937cd6024d256774538a2d", "patch": "@@ -1,31 +0,0 @@\n-// 2006-01-19  Paolo Carlini  <pcarlini@suse.de>\n-\n-// Copyright (C) 2006-2013 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include \"5.h\"\n-#include <list>\n-\n-int main()\n-{\n-  typedef int value_type;\n-  typedef __gnu_test::uneq_allocator<value_type> allocator_type;\n-  typedef std::list<value_type, allocator_type> list_type;\n-\n-  operations05<list_type>();\n-  return 0;\n-}"}, {"sha": "755ddd9eb1d2f0c7798c87ea1fe26f5281127f60", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/5.h", "status": "removed", "additions": 0, "deletions": 134, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b29b2540c8f68779937cd6024d256774538a2d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b29b2540c8f68779937cd6024d256774538a2d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F5.h?ref=c9b29b2540c8f68779937cd6024d256774538a2d", "patch": "@@ -1,134 +0,0 @@\n-// 2006-01-19  Paolo Carlini  <pcarlini@suse.de>\n-\n-// Copyright (C) 2006-2013 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.2.4 list operations [lib.list.ops]\n-\n-#include <stdexcept>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n-\n-// Check the splice (and merge) bits of N1599.\n-template<typename _Tp>\n-void\n-operations05()\n-{\n-  bool test __attribute__((unused)) = true;\n-  \n-  typedef _Tp list_type;\n-  typedef typename list_type::allocator_type allocator_type;\n-\n-  const int data1[] = {1, 2, 3, 4, 5};\n-  const int data2[] = {6, 7, 8, 9, 10};\n-  const size_t N1 = sizeof(data1) / sizeof(int);\n-  const size_t N2 = sizeof(data2) / sizeof(int);\n-  \n-  allocator_type alloc01(1), alloc02(2);\n-\n-  list_type l01(data1, data1 + N1, alloc01);\n-  const list_type l01_ref = l01;\n-\n-  list_type l02(data2, data2 + N2, alloc02);\n-  const list_type l02_ref = l02;\n-\n-  bool catched = false;\n-\n-  try\n-    {\n-      l01.splice(l01.begin(), l02);\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-  \n-  catched = false;\n-  try\n-    {\n-      l01.splice(l01.begin(), l02, l02.begin());\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-\n-  catched = false;\n-  try\n-    {\n-      l01.splice(l01.begin(), l02, l02.begin(), l02.end());\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-\n-  catched = false;\n-  try\n-    {\n-      l01.merge(l02);\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-\n-  catched = false;\n-  try\n-    {\n-      l01.merge(l02, std::less<int>());\n-    }\n-  catch(std::runtime_error&)\n-    {\n-      catched = true;\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-  VERIFY( catched );\n-  VERIFY( l01 == l01_ref );\n-  VERIFY( l02 == l02_ref );\n-}"}]}