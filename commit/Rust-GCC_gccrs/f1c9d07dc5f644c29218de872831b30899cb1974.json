{"sha": "f1c9d07dc5f644c29218de872831b30899cb1974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjOWQwN2RjNWY2NDRjMjkyMThkZTg3MjgzMWIzMDg5OWNiMTk3NA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2005-06-08T00:28:41Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2005-06-08T00:28:41Z"}, "message": "system.h: Poison EXTRA_CC_MODES.\n\n2005-06-07  Eric Christopher  <echristo@redhat.com>\n\n\t* system.h: Poison EXTRA_CC_MODES.\n\t* config/frv/frv.h (SELECT_CC_MODE): Rewrite comment.\n\t* config/ia64/ia64.h (SELECT_CC_MODE): Ditto.\n\t* doc/md.texi (Jump Patterns): Replace reference to\n\tEXTRA_CC_MODES with machine-modes.def.\n\t* doc/rtl.texi (Machine Modes): Ditto.\n\nFrom-SVN: r100737", "tree": {"sha": "14a16d461a9aea2dacf156e21b88da47ba6394a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14a16d461a9aea2dacf156e21b88da47ba6394a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c9d07dc5f644c29218de872831b30899cb1974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c9d07dc5f644c29218de872831b30899cb1974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c9d07dc5f644c29218de872831b30899cb1974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c9d07dc5f644c29218de872831b30899cb1974/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9cff73d49353b7de05c5d59decacfe3ebca58ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cff73d49353b7de05c5d59decacfe3ebca58ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cff73d49353b7de05c5d59decacfe3ebca58ed"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "a15b9852ef2195b93bd8f8afc31550dc441e5cb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1c9d07dc5f644c29218de872831b30899cb1974", "patch": "@@ -1,3 +1,12 @@\n+2005-06-07  Eric Christopher  <echristo@redhat.com>\n+\n+\t* system.h: Poison EXTRA_CC_MODES.\n+\t* config/frv/frv.h (SELECT_CC_MODE): Rewrite comment.\n+\t* config/ia64/ia64.h (SELECT_CC_MODE): Ditto.\n+\t* doc/md.texi (Jump Patterns): Replace reference to\n+\tEXTRA_CC_MODES with machine-modes.def.\n+\t* doc/rtl.texi (Machine Modes): Ditto.\n+\n 2005-06-07  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (initialize_cold_section_name): Fix alloca buffer overflow."}, {"sha": "fa9cca0e9a507e15171917a192cc7459debd856d", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=f1c9d07dc5f644c29218de872831b30899cb1974", "patch": "@@ -2157,19 +2157,8 @@ do {\t\t\t\t\t\t\t\\\n #define HAVE_PRE_MODIFY_REG 1\n \n \f\n-/* Returns a mode from class `MODE_CC' to be used when comparison operation\n-   code OP is applied to rtx X and Y.  For example, on the SPARC,\n-   `SELECT_CC_MODE' is defined as (see *note Jump Patterns::.  for a\n-   description of the reason for this definition)\n-\n-        #define SELECT_CC_MODE(OP,X,Y) \\\n-          (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT          \\\n-           ? ((OP == EQ || OP == NE) ? CCFPmode : CCFPEmode)    \\\n-           : ((GET_CODE (X) == PLUS || GET_CODE (X) == MINUS    \\\n-               || GET_CODE (X) == NEG) \\\n-              ? CC_NOOVmode : CCmode))\n-\n-   You need not define this macro if `EXTRA_CC_MODES' is not defined.  */\n+/* We define extra CC modes in frv-modes.def so we need a selector.  */\n+\n #define SELECT_CC_MODE frv_select_cc_mode\n \n /* A C expression whose value is one if it is always safe to reverse a"}, {"sha": "427c17a61a95d007020bfdf513f353a46959e773", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=f1c9d07dc5f644c29218de872831b30899cb1974", "patch": "@@ -505,9 +505,7 @@ while (0)\n #define LOCAL_REGNO(REGNO) \\\n   (IN_REGNO_P (REGNO) || LOC_REGNO_P (REGNO))\n \n-/* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n-   return the mode to be used for the comparison.  Must be defined if\n-   EXTRA_CC_MODES is defined.  */\n+/* We define CCImode in ia64-modes.def so we need a selector.  */\n \n #define SELECT_CC_MODE(OP,X,Y)  CCmode\n \f"}, {"sha": "81f5ebcf38e316cd18c28d244aa817c8ed3706eb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=f1c9d07dc5f644c29218de872831b30899cb1974", "patch": "@@ -4282,9 +4282,9 @@ different formats of the condition code register.\n Registers used to store the condition code value should have a mode that\n is in class @code{MODE_CC}.  Normally, it will be @code{CCmode}.  If\n additional modes are required (as for the add example mentioned above in\n-the SPARC), define the macro @code{EXTRA_CC_MODES} to list the\n-additional modes required (@pxref{Condition Code}).  Also define\n-@code{SELECT_CC_MODE} to choose a mode given an operand of a compare.\n+the SPARC), define them in @file{@var{machine}-modes.def}\n+(@pxref{Condition Code}).  Also define @code{SELECT_CC_MODE} to choose \n+a mode given an operand of a compare.\n \n If it is known during RTL generation that a different mode will be\n required (for example, if the machine has separate compare instructions"}, {"sha": "daca4cb5304c82dcac6bfcf68e39c25bcc79b89e", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=f1c9d07dc5f644c29218de872831b30899cb1974", "patch": "@@ -1191,7 +1191,8 @@ Algol or Pascal function variables including a static chain.\n @findex MODE_CC\n @item MODE_CC\n Modes representing condition code values.  These are @code{CCmode} plus\n-any modes listed in the @code{EXTRA_CC_MODES} macro.  @xref{Jump Patterns},\n+any @code{CC_MODE} modes listed in the @file{@var{machine}-modes.def}.  \n+@xref{Jump Patterns},\n also see @ref{Condition Code}.\n \n @findex MODE_RANDOM"}, {"sha": "43455b96edb658eee6162d410c587ded428baef0", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c9d07dc5f644c29218de872831b30899cb1974/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=f1c9d07dc5f644c29218de872831b30899cb1974", "patch": "@@ -739,7 +739,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tCASE_DROPS_THROUGH TARGET_BELL TARGET_BS TARGET_CR TARGET_DIGIT0   \\\n         TARGET_ESC TARGET_FF TARGET_NEWLINE TARGET_TAB TARGET_VT\t   \\\n         LINK_LIBGCC_SPECIAL DONT_ACCESS_GBLS_AFTER_EPILOGUE\t\t   \\\n-\tTARGET_OPTIONS TARGET_SWITCHES\n+\tTARGET_OPTIONS TARGET_SWITCHES EXTRA_CC_MODES\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}