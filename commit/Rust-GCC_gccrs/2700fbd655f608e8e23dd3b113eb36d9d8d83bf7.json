{"sha": "2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwMGZiZDY1NWY2MDhlOGUyM2RkM2IxMTNlYjM2ZDlkOGQ4M2JmNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-25T09:26:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-25T09:26:37Z"}, "message": "re PR tree-optimization/79201 (missed optimization: sinking doesn't handle calls, swap PRE and sinking)\n\n2017-04-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79201\n\t* tree-ssa-sink.c (statement_sink_location): Handle calls.\n\n\t* gcc.dg/tree-ssa/ssa-sink-16.c: New testcase.\n\t* gcc.target/i386/pr22152.c: Disable sinking.\n\nFrom-SVN: r247159", "tree": {"sha": "c58d111a88734f85e5ee93cf424addf03cf59294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c58d111a88734f85e5ee93cf424addf03cf59294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfda9ccde6ae7aad1d259e6ebc29fc8f0af3f154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfda9ccde6ae7aad1d259e6ebc29fc8f0af3f154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfda9ccde6ae7aad1d259e6ebc29fc8f0af3f154"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "e1c79a8116af8c8f0e224909f806012d863da121", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "patch": "@@ -1,3 +1,8 @@\n+2017-04-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79201\n+\t* tree-ssa-sink.c (statement_sink_location): Handle calls.\n+\n 2017-04-25  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/80464"}, {"sha": "409725c46bf36e7a7b711f48a6493395a99d60fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "patch": "@@ -1,3 +1,9 @@\n+2017-04-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79201\n+\t* gcc.dg/tree-ssa/ssa-sink-16.c: New testcase.\n+\t* gcc.target/i386/pr22152.c: Disable sinking.\n+\n 2017-04-25  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/80464"}, {"sha": "1b94c336806a057bc57a63390309fa11c78a26ff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-16.c?ref=2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* Note PRE rotates the loop and blocks the sinking opportunity.  */\n+/* { dg-options \"-O2 -fno-tree-pre -fdump-tree-sink -fdump-tree-optimized\" } */\n+\n+int f(int n)\n+{\n+  int i,j=0;\n+  for (i = 0; i < 31; i++)\n+    j = __builtin_ffs(i);\n+  return j;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Sinking j_. = __builtin_ffs\" \"sink\" } } */\n+/* { dg-final { scan-tree-dump \"return 2;\" \"optimized\" } } */"}, {"sha": "8603b09fe4a2f155ad6e12732b3a816ee504bb35", "filename": "gcc/testsuite/gcc.target/i386/pr22152.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22152.c?ref=2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2 -mtune=core2\" } */\n+/* { dg-options \"-O2 -fno-tree-sink -msse2 -mtune=core2\" } */\n /* { dg-additional-options \"-mno-vect8-ret-in-mem\" { target *-*-vxworks* } } */\n /* { dg-additional-options \"-mabi=sysv\" { target x86_64-*-mingw* } } */\n "}, {"sha": "eb8b36095d885fa561bec3c535e8a27d128c9d55", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2700fbd655f608e8e23dd3b113eb36d9d8d83bf7/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=2700fbd655f608e8e23dd3b113eb36d9d8d83bf7", "patch": "@@ -256,8 +256,12 @@ statement_sink_location (gimple *stmt, basic_block frombb,\n \n   *zero_uses_p = false;\n \n-  /* We only can sink assignments.  */\n-  if (!is_gimple_assign (stmt))\n+  /* We only can sink assignments and non-looping const/pure calls.  */\n+  int cf;\n+  if (!is_gimple_assign (stmt)\n+      && (!is_gimple_call (stmt)\n+\t  || !((cf = gimple_call_flags (stmt)) & (ECF_CONST|ECF_PURE))\n+\t  || (cf & ECF_LOOPING_CONST_OR_PURE)))\n     return false;\n \n   /* We only can sink stmts with a single definition.  */\n@@ -291,7 +295,7 @@ statement_sink_location (gimple *stmt, basic_block frombb,\n   if (stmt_ends_bb_p (stmt)\n       || gimple_has_side_effects (stmt)\n       || (cfun->has_local_explicit_reg_vars\n-\t  && TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt))) == BLKmode))\n+\t  && TYPE_MODE (TREE_TYPE (gimple_get_lhs (stmt))) == BLKmode))\n     return false;\n \n   /* Return if there are no immediate uses of this stmt.  */\n@@ -323,15 +327,15 @@ statement_sink_location (gimple *stmt, basic_block frombb,\n \n \t  /* A killing definition is not a use.  */\n \t  if ((gimple_has_lhs (use_stmt)\n-\t       && operand_equal_p (gimple_assign_lhs (stmt),\n+\t       && operand_equal_p (gimple_get_lhs (stmt),\n \t\t\t\t   gimple_get_lhs (use_stmt), 0))\n-\t      || stmt_kills_ref_p (use_stmt, gimple_assign_lhs (stmt)))\n+\t      || stmt_kills_ref_p (use_stmt, gimple_get_lhs (stmt)))\n \t    {\n \t      /* If use_stmt is or might be a nop assignment then USE_STMT\n \t         acts as a use as well as definition.  */\n \t      if (stmt != use_stmt\n \t\t  && ref_maybe_used_by_stmt_p (use_stmt,\n-\t\t\t\t\t       gimple_assign_lhs (stmt)))\n+\t\t\t\t\t       gimple_get_lhs (stmt)))\n \t\treturn false;\n \t      continue;\n \t    }"}]}