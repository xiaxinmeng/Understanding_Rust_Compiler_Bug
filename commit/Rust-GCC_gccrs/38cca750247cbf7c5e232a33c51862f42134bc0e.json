{"sha": "38cca750247cbf7c5e232a33c51862f42134bc0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhjY2E3NTAyNDdjYmY3YzVlMjMyYTMzYzUxODYyZjQyMTM0YmMwZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-09-11T03:36:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-09-11T03:36:45Z"}, "message": "Makefile.am (sources): Edit.\n\n\n2002-09-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/Makefile.am (sources): Edit.\n\t(target_sources): New.\n\t(target_sources_extra): New.\n\t* src/Makefile.in: Regenerate.\n\t* acinclude.m4: Set CCODECVT_CC.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* src/locale.cc: Move ctype definitions...\n\t* src/ctype.cc: ...here. New file.\n\t* src/locale.cc: Move codecvt definitions...\n\t* src/codecvt.cc: ...here.\n\t* config/generic/codecvt_members.cc: ...and here.\n\t* config/gnu/codecvt_members.cc: ...and here.\n\t* include/bits/codecvt.h: Tweak.\n\t* include/bits/locale_facets: Tweak.\n\n\t* src/bitset.cc: Correct license text.\n\t* src/concept-inst.cc: Same.\n\t* src/strstream.cc: Same.\n\t* src/vterminate.cc: Same.\n\nFrom-SVN: r57020", "tree": {"sha": "0cc303d444522ccf2cadf35bc145e45809eb961a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc303d444522ccf2cadf35bc145e45809eb961a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38cca750247cbf7c5e232a33c51862f42134bc0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38cca750247cbf7c5e232a33c51862f42134bc0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38cca750247cbf7c5e232a33c51862f42134bc0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38cca750247cbf7c5e232a33c51862f42134bc0e/comments", "author": null, "committer": null, "parents": [{"sha": "77de9af25184a81db2a552455bb811a961c71b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77de9af25184a81db2a552455bb811a961c71b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77de9af25184a81db2a552455bb811a961c71b6d"}], "stats": {"total": 3422, "additions": 1863, "deletions": 1559}, "files": [{"sha": "70fb2df50018c293592b7eff1b49fb02226c8638", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -1,3 +1,26 @@\n+2002-09-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/Makefile.am (sources): Edit.\n+\t(target_sources): New.\n+\t(target_sources_extra): New.\n+\t* src/Makefile.in: Regenerate.\n+\t* acinclude.m4: Set CCODECVT_CC. \n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/locale.cc: Move ctype definitions...\n+\t* src/ctype.cc: ...here. New file. \n+\t* src/locale.cc: Move codecvt definitions...\n+\t* src/codecvt.cc: ...here. \t\n+\t* config/generic/codecvt_members.cc: ...and here. \t\n+\t* config/gnu/codecvt_members.cc: ...and here. \t\t\n+\t* include/bits/codecvt.h: Tweak.\n+\t* include/bits/locale_facets: Tweak.\n+\n+\t* src/bitset.cc: Correct license text.\n+\t* src/concept-inst.cc: Same.\n+\t* src/strstream.cc: Same.\n+\t* src/vterminate.cc: Same.\t\n+\n 2002-09-10  Gabriel Dos Reis  <gdr@soliton.integrable-solutions.net>\n \n \t* include/bits/stl_vector.h (vector<>): Don't use a name with"}, {"sha": "8e32f158dbcf06a96c51cb7c9c6e82ba1ff1a322", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -157,7 +157,44 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n \n # Subdir rules rely on $(FLAGS_TO_PASS)\n@@ -172,7 +209,7 @@ mkcheck.in testsuite_flags.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:"}, {"sha": "af5b3a3232622a27bb539ae2edc90d819a3b27a5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -1175,6 +1175,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/generic/c_locale.h\n       CLOCALE_CC=config/locale/generic/c_locale.cc\n       CCODECVT_H=config/locale/generic/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n       CMESSAGES_H=config/locale/generic/messages_members.h\n@@ -1208,6 +1209,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/gnu/c_locale.h\n       CLOCALE_CC=config/locale/gnu/c_locale.cc\n       CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/gnu/codecvt_members.cc\n       CCOLLATE_CC=config/locale/gnu/collate_members.cc\n       CCTYPE_CC=config/locale/gnu/ctype_members.cc\n       CMESSAGES_H=config/locale/gnu/messages_members.h\n@@ -1223,6 +1225,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/ieee_1003.1-2001/c_locale.h\n       CLOCALE_CC=config/locale/ieee_1003.1-2001/c_locale.cc\n       CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n       CMESSAGES_H=config/locale/ieee_1003.1-2001/messages_members.h\n@@ -1243,17 +1246,22 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n   AC_SUBST(glibcpp_localedir)\n \n+  # For the time being, transform ctype_noninline.h to ctype_members_char.cc\n+#  CCTYPE_CHAR_CC=config/${os_include_dir}/ctype_noninline.h\n+\n   AC_SUBST(USE_NLS)\n   AC_SUBST(CLOCALE_H)\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n-  AC_LINK_FILES($CCTYPE_CC, src/ctype.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n-  AC_LINK_FILES($CMONEY_CC, src/monetary.cc)\n-  AC_LINK_FILES($CNUMERIC_CC, src/numeric.cc)\n-  AC_LINK_FILES($CTIME_CC, src/time.cc)\n+  AC_LINK_FILES($CCODECVT_CC, src/codecvt_members.cc)\n+  AC_LINK_FILES($CCOLLATE_CC, src/collate_members.cc)\n+#  AC_LINK_FILES($CCTYPE_CHAR_CC, src/ctype_members_char.cc)\n+  AC_LINK_FILES($CCTYPE_CC, src/ctype_members.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n+  AC_LINK_FILES($CMONEY_CC, src/monetary_members.cc)\n+  AC_LINK_FILES($CNUMERIC_CC, src/numeric_members.cc)\n+  AC_LINK_FILES($CTIME_CC, src/time_members.cc)\n   AC_LINK_FILES($CLOCALE_INTERNAL_H, src/c++locale_internal.h)\n ])\n "}, {"sha": "6db8b62719c3dc6d372eae9a4806e5f4bf7b2e2c", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 21, "deletions": 48, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -1,4 +1,4 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p6\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n \n dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n@@ -11,7 +11,7 @@ dnl even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n dnl PARTICULAR PURPOSE.\n \n dnl\n-dnl Initialize configure bits.\n+dnl Initialize basic configure bits, set toplevel_srcdir for Makefiles.\n dnl\n dnl GLIBCPP_TOPREL_CONFIGURE\n AC_DEFUN(GLIBCPP_TOPREL_CONFIGURE, [\n@@ -49,13 +49,10 @@ AC_DEFUN(GLIBCPP_TOPREL_CONFIGURE, [\n ])\n \n dnl\n-dnl Initialize configure bits.\n+dnl Initialize the rest of the library configury.\n dnl\n dnl GLIBCPP_CONFIGURE\n AC_DEFUN(GLIBCPP_CONFIGURE, [\n-\n-#possibly test for the presence of the compiler sources here?\n-\n   # Export build and source directories.\n   # These need to be absolute paths, yet at the same time need to\n   # canonicalize only relative paths, because then amd will not unmount\n@@ -1190,6 +1187,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/generic/c_locale.h\n       CLOCALE_CC=config/locale/generic/c_locale.cc\n       CCODECVT_H=config/locale/generic/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n       CMESSAGES_H=config/locale/generic/messages_members.h\n@@ -1223,6 +1221,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/gnu/c_locale.h\n       CLOCALE_CC=config/locale/gnu/c_locale.cc\n       CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/gnu/codecvt_members.cc\n       CCOLLATE_CC=config/locale/gnu/collate_members.cc\n       CCTYPE_CC=config/locale/gnu/ctype_members.cc\n       CMESSAGES_H=config/locale/gnu/messages_members.h\n@@ -1238,6 +1237,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CLOCALE_H=config/locale/ieee_1003.1-2001/c_locale.h\n       CLOCALE_CC=config/locale/ieee_1003.1-2001/c_locale.cc\n       CCODECVT_H=config/locale/ieee_1003.1-2001/codecvt_specializations.h\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n       CCOLLATE_CC=config/locale/generic/collate_members.cc\n       CCTYPE_CC=config/locale/generic/ctype_members.cc\n       CMESSAGES_H=config/locale/ieee_1003.1-2001/messages_members.h\n@@ -1258,17 +1258,22 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   glibcpp_localedir=${glibcpp_builddir}/po/share/locale\n   AC_SUBST(glibcpp_localedir)\n \n+  # For the time being, transform ctype_noninline.h to ctype_members_char.cc\n+#  CCTYPE_CHAR_CC=config/${os_include_dir}/ctype_noninline.h\n+\n   AC_SUBST(USE_NLS)\n   AC_SUBST(CLOCALE_H)\n   AC_SUBST(CCODECVT_H)\n   AC_SUBST(CMESSAGES_H)\n   AC_LINK_FILES($CLOCALE_CC, src/c++locale.cc)\n-  AC_LINK_FILES($CCOLLATE_CC, src/collate.cc)\n-  AC_LINK_FILES($CCTYPE_CC, src/ctype.cc)\n-  AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n-  AC_LINK_FILES($CMONEY_CC, src/monetary.cc)\n-  AC_LINK_FILES($CNUMERIC_CC, src/numeric.cc)\n-  AC_LINK_FILES($CTIME_CC, src/time.cc)\n+  AC_LINK_FILES($CCODECVT_CC, src/codecvt_members.cc)\n+  AC_LINK_FILES($CCOLLATE_CC, src/collate_members.cc)\n+#  AC_LINK_FILES($CCTYPE_CHAR_CC, src/ctype_members_char.cc)\n+  AC_LINK_FILES($CCTYPE_CC, src/ctype_members.cc)\n+  AC_LINK_FILES($CMESSAGES_CC, src/messages_members.cc)\n+  AC_LINK_FILES($CMONEY_CC, src/monetary_members.cc)\n+  AC_LINK_FILES($CNUMERIC_CC, src/numeric_members.cc)\n+  AC_LINK_FILES($CTIME_CC, src/time_members.cc)\n   AC_LINK_FILES($CLOCALE_INTERNAL_H, src/c++locale_internal.h)\n ])\n \n@@ -2219,16 +2224,14 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-# isc-posix.m4 serial 2 (gettext-0.11.2)\n+# isc-posix.m4 serial 1 (gettext-0.10.40)\n dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n dnl This file is free software, distributed under the terms of the GNU\n dnl General Public License.  As a special exception to the GNU General\n dnl Public License, this file may be distributed as part of a program\n dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n-# This file is not needed with autoconf-2.53 and newer.  Remove it in 2005.\n-\n # This test replaces the one in autoconf.\n # Currently this macro should have the same name as the autoconf macro\n # because gettext's gettext.m4 (distributed in the automake package)\n@@ -2289,8 +2292,7 @@ dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n-AC_REQUIRE([AC_PROG_INSTALL])\n+[AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n VERSION=[$2]\n@@ -2306,42 +2308,13 @@ AC_REQUIRE([AM_SANITY_CHECK])\n AC_REQUIRE([AC_ARG_PROGRAM])\n dnl FIXME This is truly gross.\n missing_dir=`cd $ac_aux_dir && pwd`\n-AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version}, $missing_dir)\n+AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\n AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\n-AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version}, $missing_dir)\n+AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\n AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\n AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)\n AC_REQUIRE([AC_PROG_MAKE_SET])])\n \n-# Copyright 2002  Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n-\n-# AM_AUTOMAKE_VERSION(VERSION)\n-# ----------------------------\n-# Automake X.Y traces this macro to ensure aclocal.m4 has been\n-# generated from the m4 files accompanying Automake X.Y.\n-AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.4\"])\n-\n-# AM_SET_CURRENT_AUTOMAKE_VERSION\n-# -------------------------------\n-# Call AM_AUTOMAKE_VERSION so it can be traced.\n-# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n-AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.4-p6])])\n-\n #\n # Check to make sure that the build environment is sane.\n #"}, {"sha": "814b8a2874de11c0b8348607f7b1faeb9c80b3b6", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -0,0 +1,101 @@\n+// std::codecvt implementation details, generic version -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.1.5 - Template class codecvt\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+#include \"c++locale_internal.h\"\n+\n+namespace std\n+{\n+  // Specializations.\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  codecvt_base::result\n+  codecvt<wchar_t, char, mbstate_t>::\n+  do_out(state_type& __state, const intern_type* __from, \n+\t const intern_type* __from_end, const intern_type*& __from_next,\n+\t extern_type* __to, extern_type* __to_end,\n+\t extern_type*& __to_next) const\n+  {\n+    result __ret = error;\n+    size_t __len = min(__from_end - __from, __to_end - __to);\n+    size_t __conv = wcsrtombs(__to, &__from, __len, &__state);\n+\n+    if (__conv == __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = ok;\n+      }\n+    else if (__conv > 0 && __conv < __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = partial;\n+      }\n+    else\n+      __ret = error;\n+\t\n+    return __ret; \n+  }\n+  \n+  codecvt_base::result\n+  codecvt<wchar_t, char, mbstate_t>::\n+  do_in(state_type& __state, const extern_type* __from, \n+\tconst extern_type* __from_end, const extern_type*& __from_next,\n+\tintern_type* __to, intern_type* __to_end,\n+\tintern_type*& __to_next) const\n+  {\n+    result __ret = error;\n+    size_t __len = min(__from_end - __from, __to_end - __to);\n+    size_t __conv = mbsrtowcs(__to, &__from, __len, &__state);\n+\n+    if (__conv == __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = ok;\n+      }\n+    else if (__conv > 0 && __conv < __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = partial;\n+      }\n+    else\n+      __ret = error;\n+\t\n+    return __ret; \n+  }\n+#endif\n+}"}, {"sha": "aa855a6a1f285c6ba00828015765849f002c4ef5", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -0,0 +1,113 @@\n+// std::codecvt implementation details, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.1.5 - Template class codecvt\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+#include \"c++locale_internal.h\"\n+\n+namespace std\n+{\n+  // Specializations.\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  codecvt_base::result\n+  codecvt<wchar_t, char, mbstate_t>::\n+  do_out(state_type& __state, const intern_type* __from, \n+\t const intern_type* __from_end, const intern_type*& __from_next,\n+\t extern_type* __to, extern_type* __to_end,\n+\t extern_type*& __to_next) const\n+  {\n+    result __ret = error;\n+    size_t __len = min(__from_end - __from, __to_end - __to);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __c_locale __old = __uselocale(_M_c_locale_codecvt);\n+#endif\n+    size_t __conv = wcsrtombs(__to, &__from, __len, &__state);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __uselocale(__old);\n+#endif\n+\n+    if (__conv == __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = ok;\n+      }\n+    else if (__conv > 0 && __conv < __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = partial;\n+      }\n+    else\n+      __ret = error;\n+\t\n+    return __ret; \n+  }\n+  \n+  codecvt_base::result\n+  codecvt<wchar_t, char, mbstate_t>::\n+  do_in(state_type& __state, const extern_type* __from, \n+\tconst extern_type* __from_end, const extern_type*& __from_next,\n+\tintern_type* __to, intern_type* __to_end,\n+\tintern_type*& __to_next) const\n+  {\n+    result __ret = error;\n+    size_t __len = min(__from_end - __from, __to_end - __to);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __c_locale __old = __uselocale(_M_c_locale_codecvt);\n+#endif\n+    size_t __conv = mbsrtowcs(__to, &__from, __len, &__state);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __uselocale(__old);\n+#endif\n+\n+    if (__conv == __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = ok;\n+      }\n+    else if (__conv > 0 && __conv < __len)\n+      {\n+\t__from_next = __from;\n+\t__to_next = __to + __conv;\n+\t__ret = partial;\n+      }\n+    else\n+      __ret = error;\n+\t\n+    return __ret; \n+  }\n+#endif\n+}"}, {"sha": "fe97a29ac92204ad3a1ed1ccb5b47dbc4ba997d6", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1242, "deletions": 1199, "changes": 2441, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=38cca750247cbf7c5e232a33c51862f42134bc0e"}, {"sha": "92b0f0e8a7df6d7a9fb974a1393a2bda660c7d9b", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -1,6 +1,6 @@\n // Locale support (codecvt) -*- C++ -*-\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,15 +66,11 @@\n     {\n     public:\n       // Types:\n-      typedef codecvt_base::result\t\t\tresult;\n-      typedef _InternT \t\t\t\t\tintern_type;\n-      typedef _ExternT \t\t\t\t\textern_type;\n-      typedef _StateT  \t\t\t\t\tstate_type;\n- \n-    protected:\n-      __c_locale\t\t_M_c_locale_codecvt;\n-\n-    public:\n+      typedef codecvt_base::result\tresult;\n+      typedef _InternT \t\t\tintern_type;\n+      typedef _ExternT \t\t\textern_type;\n+      typedef _StateT  \t\t\tstate_type;\n+      \n       // 22.2.1.5.1 codecvt members\n       result\n       out(state_type& __state, const intern_type* __from, \n@@ -163,17 +159,23 @@\n     {\n     public:      \n       // Types:\n-      typedef codecvt_base::result\t\t\tresult;\n-      typedef _InternT intern_type;\n-      typedef _ExternT extern_type;\n-      typedef _StateT  state_type;\n+      typedef codecvt_base::result\tresult;\n+      typedef _InternT \t\t\tintern_type;\n+      typedef _ExternT \t\t\textern_type;\n+      typedef _StateT  \t\t\tstate_type;\n \n-      // Data Members:\n-      static locale::id id;\n+    protected:\n+      __c_locale\t\t\t_M_c_locale_codecvt;\n+\n+    public:\n+      static locale::id \t\tid;\n \n       explicit \n       codecvt(size_t __refs = 0) \n-      : __codecvt_abstract_base<_InternT,_ExternT,_StateT> (__refs) { }\n+      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }\n+\n+      explicit \n+      codecvt(__c_locale __cloc, size_t __refs = 0);\n \n     protected:\n       virtual \n@@ -219,19 +221,21 @@\n     {\n     public:      \n       // Types:\n-      typedef char \tintern_type;\n-      typedef char \textern_type;\n-      typedef mbstate_t state_type;\n+      typedef char \t\t\tintern_type;\n+      typedef char \t\t\textern_type;\n+      typedef mbstate_t \t\tstate_type;\n+\n+    protected:\n+      __c_locale\t\t\t_M_c_locale_codecvt;\n \n-      // Data Members:\n+    public:\n       static locale::id id;\n \n       explicit \n       codecvt(size_t __refs = 0);\n \n-      // Non-standard.\n       explicit \n-      codecvt(__c_locale __cloc, size_t __refs = 0); \n+      codecvt(__c_locale __cloc, size_t __refs = 0);\n \n     protected:\n       virtual \n@@ -275,17 +279,19 @@\n     {\n     public:\n       // Types:\n-      typedef wchar_t \tintern_type;\n-      typedef char \textern_type;\n-      typedef mbstate_t state_type;\n+      typedef wchar_t \t\t\tintern_type;\n+      typedef char \t\t\textern_type;\n+      typedef mbstate_t \t\tstate_type;\n \n-      // Data Members:\n-      static locale::id id;\n+    protected:\n+      __c_locale\t\t\t_M_c_locale_codecvt;\n+\n+    public:\n+      static locale::id \t\tid;\n \n       explicit \n       codecvt(size_t __refs = 0);\n \n-      // Non-standard.\n       explicit \n       codecvt(__c_locale __cloc, size_t __refs = 0);\n "}, {"sha": "f99562fac49eb41f6c98bb5d3129ddac79f60714", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -847,7 +847,6 @@ namespace std\n       : locale::facet(__refs)\n       { _M_c_locale_collate = _S_c_locale; }\n \n-      // Non-standard.\n       explicit \n       collate(__c_locale __cloc, size_t __refs = 0) \n       : locale::facet(__refs)"}, {"sha": "9678b766b2c8712d6c866daa718ea3f4ed9649d0", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -60,12 +60,26 @@ INCLUDES = \\\n \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\n \n-sources = \\\n+# Source files linked in via configuration magic for a particular target.\n+target_sources = \\\n+\tcodecvt_members.cc \\\n+\tcollate_members.cc \\\n+\tctype_members.cc \\\n+\tmessages_members.cc \\\n+\tmonetary_members.cc \\\n+\tnumeric_members.cc \\\n+\ttime_members.cc\n+\n+# Source files linked in via configuration magic for a particular\n+# target, but with ad hoc naming rules.\n+target_sources_extra = \\\n \tbasic_file.cc \\\n+\tc++locale.cc \n+\n+# Sources present in the src directory.\n+sources = \\\n \tbitset.cc \\\n-\tc++locale.cc \\\n \tcodecvt.cc \\\n-\tcollate.cc \\\n \tcomplex_io.cc \\\n \tconcept-inst.cc \\\n \tctype.cc \\\n@@ -78,25 +92,22 @@ sources = \\\n \tios.cc \\\n \tistream-inst.cc \\\n \tlimits.cc \\\n-\tlocale-inst.cc \\\n \tlocale.cc \\\n+\tlocale-inst.cc \\\n \tlocalename.cc \\\n-\tmessages.cc \\\n \tmisc-inst.cc \\\n-\tmonetary.cc \\\n-\tnumeric.cc \\\n \tostream-inst.cc \\\n \tsstream-inst.cc \\\n \tstdexcept.cc \\\n \tstl-inst.cc \\\n \tstreambuf-inst.cc \\\n \tstring-inst.cc \\\n \tstrstream.cc \\\n-\ttime.cc \\\n \tvalarray-inst.cc \\\n \tvterminate.cc \\\n-\twstring-inst.cc\n-\n+\twstring-inst.cc \\\n+\t${target_sources} \\\n+\t${target_sources_extra}\n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n "}, {"sha": "6e5b364f2ae9bb05c941b8532fabca046272e7f4", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -166,12 +166,28 @@ INCLUDES = \\\n \t$(TOPLEVEL_INCLUDES)\n \n \n-sources = \\\n+# Source files linked in via configuration magic for a particular target.\n+target_sources = \\\n+\tcodecvt_members.cc \\\n+\tcollate_members.cc \\\n+\tctype_members.cc \\\n+\tmessages_members.cc \\\n+\tmonetary_members.cc \\\n+\tnumeric_members.cc \\\n+\ttime_members.cc\n+\n+\n+# Source files linked in via configuration magic for a particular\n+# target, but with ad hoc naming rules.\n+target_sources_extra = \\\n \tbasic_file.cc \\\n+\tc++locale.cc \n+\n+\n+# Sources present in the src directory.\n+sources = \\\n \tbitset.cc \\\n-\tc++locale.cc \\\n \tcodecvt.cc \\\n-\tcollate.cc \\\n \tcomplex_io.cc \\\n \tconcept-inst.cc \\\n \tctype.cc \\\n@@ -184,24 +200,22 @@ sources = \\\n \tios.cc \\\n \tistream-inst.cc \\\n \tlimits.cc \\\n-\tlocale-inst.cc \\\n \tlocale.cc \\\n+\tlocale-inst.cc \\\n \tlocalename.cc \\\n-\tmessages.cc \\\n \tmisc-inst.cc \\\n-\tmonetary.cc \\\n-\tnumeric.cc \\\n \tostream-inst.cc \\\n \tsstream-inst.cc \\\n \tstdexcept.cc \\\n \tstl-inst.cc \\\n \tstreambuf-inst.cc \\\n \tstring-inst.cc \\\n \tstrstream.cc \\\n-\ttime.cc \\\n \tvalarray-inst.cc \\\n \tvterminate.cc \\\n-\twstring-inst.cc\n+\twstring-inst.cc \\\n+\t${target_sources} \\\n+\t${target_sources_extra}\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n@@ -279,14 +293,15 @@ DEFS = @DEFS@ -I. -I$(srcdir) -I..\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n-libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo codecvt.lo \\\n-collate.lo complex_io.lo concept-inst.lo ctype.lo ext-inst.lo \\\n-fstream.lo fstream-inst.lo functexcept.lo globals.lo io-inst.lo ios.lo \\\n-istream-inst.lo limits.lo locale-inst.lo locale.lo localename.lo \\\n-messages.lo misc-inst.lo monetary.lo numeric.lo ostream-inst.lo \\\n+libstdc___la_OBJECTS =  bitset.lo codecvt.lo complex_io.lo \\\n+concept-inst.lo ctype.lo ext-inst.lo fstream.lo fstream-inst.lo \\\n+functexcept.lo globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo \\\n+locale.lo locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n sstream-inst.lo stdexcept.lo stl-inst.lo streambuf-inst.lo \\\n-string-inst.lo strstream.lo time.lo valarray-inst.lo vterminate.lo \\\n-wstring-inst.lo\n+string-inst.lo strstream.lo valarray-inst.lo vterminate.lo \\\n+wstring-inst.lo codecvt_members.lo collate_members.lo ctype_members.lo \\\n+messages_members.lo monetary_members.lo numeric_members.lo \\\n+time_members.lo basic_file.lo c++locale.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "4849a6a5cebbd739c77bff3edc9d9ed2823978ef", "filename": "libstdc++-v3/src/bitset.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -2,22 +2,21 @@\n \n // Copyright (C) 2001, 2002 Free Software Foundation\n //\n-// This file is part of GNU CC.\n-//\n-// GNU CC is free software; you can redistribute it and/or modify\n-// it under the terms of the GNU General Public License as published by\n-// the Free Software Foundation; either version 2, or (at your option)\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n // any later version.\n-//\n-// GNU CC is distributed in the hope that it will be useful,\n+\n+// This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License\n-// along with GNU CC; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330,\n-// Boston, MA 02111-1307, USA.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "8d4c1b40c7e429fb55a1dac0d678439b364bfd4c", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 7, "deletions": 70, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -31,6 +31,13 @@\n \n namespace std \n {\n+  // Definitions for locale::id of standard facets that are specialized.\n+ locale::id codecvt<char, char, mbstate_t>::id;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T  \n+  locale::id codecvt<wchar_t, char, mbstate_t>::id;\n+#endif\n+\n #ifdef _GLIBCPP_USE___ENC_TRAITS\n   // Definitions for static const data members of __enc_traits.\n   const int __enc_traits::_S_max_size;\n@@ -130,41 +137,6 @@ namespace std\n       _S_destroy_c_locale(_M_c_locale_codecvt); \n   }\n   \n-  codecvt_base::result\n-  codecvt<wchar_t, char, mbstate_t>::\n-  do_out(state_type& __state, const intern_type* __from, \n-\t const intern_type* __from_end, const intern_type*& __from_next,\n-\t extern_type* __to, extern_type* __to_end,\n-\t extern_type*& __to_next) const\n-  {\n-    result __ret = error;\n-    size_t __len = min(__from_end - __from, __to_end - __to);\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __c_locale __old = __uselocale(_M_c_locale_codecvt);\n-#endif\n-    size_t __conv = wcsrtombs(__to, &__from, __len, &__state);\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __uselocale(__old);\n-#endif\n-\n-    if (__conv == __len)\n-      {\n-\t__from_next = __from;\n-\t__to_next = __to + __conv;\n-\t__ret = ok;\n-      }\n-    else if (__conv > 0 && __conv < __len)\n-      {\n-\t__from_next = __from;\n-\t__to_next = __to + __conv;\n-\t__ret = partial;\n-      }\n-    else\n-      __ret = error;\n-\t\n-    return __ret; \n-  }\n-  \n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n   do_unshift(state_type&, extern_type* __to,\n@@ -174,41 +146,6 @@ namespace std\n     return noconv;\n   }\n   \n-  codecvt_base::result\n-  codecvt<wchar_t, char, mbstate_t>::\n-  do_in(state_type& __state, const extern_type* __from, \n-\tconst extern_type* __from_end, const extern_type*& __from_next,\n-\tintern_type* __to, intern_type* __to_end,\n-\tintern_type*& __to_next) const\n-  {\n-    result __ret = error;\n-    size_t __len = min(__from_end - __from, __to_end - __to);\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __c_locale __old = __uselocale(_M_c_locale_codecvt);\n-#endif\n-    size_t __conv = mbsrtowcs(__to, &__from, __len, &__state);\n-#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-    __uselocale(__old);\n-#endif\n-\n-    if (__conv == __len)\n-      {\n-\t__from_next = __from;\n-\t__to_next = __to + __conv;\n-\t__ret = ok;\n-      }\n-    else if (__conv > 0 && __conv < __len)\n-      {\n-\t__from_next = __from;\n-\t__to_next = __to + __conv;\n-\t__ret = partial;\n-      }\n-    else\n-      __ret = error;\n-\t\n-    return __ret; \n-  }\n-  \n   int \n   codecvt<wchar_t, char, mbstate_t>::\n   do_encoding() const throw()"}, {"sha": "d0129e5f940ef03b7d19fcd4bbc8ddd04669242d", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -2,22 +2,21 @@\n \n // Copyright (C) 2001, 2002 Free Software Foundation\n //\n-// This file is part of GNU CC.\n-//\n-// GNU CC is free software; you can redistribute it and/or modify\n-// it under the terms of the GNU General Public License as published by\n-// the Free Software Foundation; either version 2, or (at your option)\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n // any later version.\n-// \n-// GNU CC is distributed in the hope that it will be useful,\n+\n+// This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-// \n-// You should have received a copy of the GNU General Public License\n-// along with GNU CC; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330,\n-// Boston, MA 02111-1307, USA.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "7ca934eb379c23cb6f43ec00c2e9b7dc5c6192de", "filename": "libstdc++-v3/src/ctype.cc", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -0,0 +1,153 @@\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <locale>\n+\n+namespace std \n+{\n+  // XXX At some point, just rename this file to ctype_members_char.cc\n+  // and compile it as a separate file instead of including it here.\n+  // Platform-specific initialization code for ctype tables.\n+  #include <bits/ctype_noninline.h>\n+\n+  // Definitions for locale::id of standard facets that are specialized.\n+  locale::id ctype<char>::id;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T  \n+  locale::id ctype<wchar_t>::id;\n+#endif\n+\n+  template<>\n+    const ctype<char>&\n+    use_facet<ctype<char> >(const locale& __loc)\n+    {\n+      size_t __i = ctype<char>::id._M_id();\n+      const locale::_Impl* __tmp = __loc._M_impl;\n+      return static_cast<const ctype<char>&>(*(__tmp->_M_facets[__i]));\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    const ctype<wchar_t>&\n+    use_facet<ctype<wchar_t> >(const locale& __loc)\n+    {\n+      size_t __i = ctype<wchar_t>::id._M_id();\n+      const locale::_Impl* __tmp = __loc._M_impl;\n+      return static_cast<const ctype<wchar_t>&>(*(__tmp->_M_facets[__i]));\n+    }\n+#endif\n+\n+  // Definitions for static const data members of ctype_base.\n+  const ctype_base::mask ctype_base::space;\n+  const ctype_base::mask ctype_base::print;\n+  const ctype_base::mask ctype_base::cntrl;\n+  const ctype_base::mask ctype_base::upper;\n+  const ctype_base::mask ctype_base::lower;\n+  const ctype_base::mask ctype_base::alpha;\n+  const ctype_base::mask ctype_base::digit;\n+  const ctype_base::mask ctype_base::punct;\n+  const ctype_base::mask ctype_base::xdigit;\n+  const ctype_base::mask ctype_base::alnum;\n+  const ctype_base::mask ctype_base::graph;\n+\n+  const size_t ctype<char>::table_size;\n+\n+  ctype<char>::~ctype()\n+  { \n+    if (_M_c_locale_ctype != _S_c_locale)\n+      _S_destroy_c_locale(_M_c_locale_ctype);\n+    if (_M_del) \n+      delete[] this->table(); \n+  }\n+\n+  // These are dummy placeholders as these virtual functions are never called.\n+  bool \n+  ctype<char>::do_is(mask, char_type) const \n+  { return false; }\n+  \n+  const char*\n+  ctype<char>::do_is(const char_type* __c, const char_type*, mask*) const \n+  { return __c; }\n+  \n+  const char*\n+  ctype<char>::do_scan_is(mask, const char_type* __c, const char_type*) const \n+  { return __c; }\n+\n+  const char* \n+  ctype<char>::do_scan_not(mask, const char_type* __c, const char_type*) const\n+  { return __c; }\n+\n+  char\n+  ctype<char>::do_widen(char __c) const\n+  { return __c; }\n+  \n+  const char* \n+  ctype<char>::do_widen(const char* __lo, const char* __hi, char* __dest) const\n+  {\n+    memcpy(__dest, __lo, __hi - __lo);\n+    return __hi;\n+  }\n+  \n+  char\n+  ctype<char>::do_narrow(char __c, char /*__dfault*/) const\n+  { return __c; }\n+  \n+  const char* \n+  ctype<char>::do_narrow(const char* __lo, const char* __hi, \n+\t\t\t char /*__dfault*/, char* __dest) const\n+  {\n+    memcpy(__dest, __lo, __hi - __lo);\n+    return __hi;\n+  }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  ctype<wchar_t>::ctype(size_t __refs) \n+  : __ctype_abstract_base<wchar_t>(__refs)\n+  { _M_c_locale_ctype = _S_c_locale; }\n+\n+  ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n+  : __ctype_abstract_base<wchar_t>(__refs) \n+  { _M_c_locale_ctype = _S_clone_c_locale(__cloc); }\n+\n+  ctype<wchar_t>::~ctype() \n+  { \n+    if (_M_c_locale_ctype != _S_c_locale)\n+      _S_destroy_c_locale(_M_c_locale_ctype); \n+  }\n+\n+  template<>\n+    ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n+    : ctype<wchar_t>(__refs) \n+    { \t\n+      if (_M_c_locale_ctype != _S_c_locale)\n+\t_S_destroy_c_locale(_M_c_locale_ctype);\n+      _S_create_c_locale(_M_c_locale_ctype, __s); \n+    }\n+#endif\n+} // namespace std\n+"}, {"sha": "6314ba6a7a57198817b6a2b07595d3d0957a2b5a", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -59,15 +59,6 @@ namespace std\n   locale::_Impl* \t\tlocale::_S_global; \n   const size_t \t\t\tlocale::_S_num_categories;\n \n-  // Definitions for locale::id of standard facets that are specialized.\n-  locale::id ctype<char>::id;\n-  locale::id codecvt<char, char, mbstate_t>::id;\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  locale::id ctype<wchar_t>::id;\n-  locale::id codecvt<wchar_t, char, mbstate_t>::id;\n-#endif\n-\n   // Definitions for static const data members of locale::id\n   _Atomic_word locale::id::_S_highwater;  // init'd to 0 by linker\n \n@@ -397,97 +388,6 @@ namespace std\n   locale::id::id() \n   { }\n \n-  // Definitions for static const data members of ctype_base.\n-  const ctype_base::mask ctype_base::space;\n-  const ctype_base::mask ctype_base::print;\n-  const ctype_base::mask ctype_base::cntrl;\n-  const ctype_base::mask ctype_base::upper;\n-  const ctype_base::mask ctype_base::lower;\n-  const ctype_base::mask ctype_base::alpha;\n-  const ctype_base::mask ctype_base::digit;\n-  const ctype_base::mask ctype_base::punct;\n-  const ctype_base::mask ctype_base::xdigit;\n-  const ctype_base::mask ctype_base::alnum;\n-  const ctype_base::mask ctype_base::graph;\n-\n-  // Platform-specific initialization code for ctype tables.\n-  #include <bits/ctype_noninline.h>\n-\n-  const size_t ctype<char>::table_size;\n-\n-  ctype<char>::~ctype()\n-  { \n-    if (_M_c_locale_ctype != _S_c_locale)\n-      _S_destroy_c_locale(_M_c_locale_ctype);\n-    if (_M_del) \n-      delete[] this->table(); \n-  }\n-\n-  // These are dummy placeholders as these virtual functions are never called.\n-  bool \n-  ctype<char>::do_is(mask, char_type) const \n-  { return false; }\n-  \n-  const char*\n-  ctype<char>::do_is(const char_type* __c, const char_type*, mask*) const \n-  { return __c; }\n-  \n-  const char*\n-  ctype<char>::do_scan_is(mask, const char_type* __c, const char_type*) const \n-  { return __c; }\n-\n-  const char* \n-  ctype<char>::do_scan_not(mask, const char_type* __c, const char_type*) const\n-  { return __c; }\n-\n-  char\n-  ctype<char>::do_widen(char __c) const\n-  { return __c; }\n-  \n-  const char* \n-  ctype<char>::do_widen(const char* __lo, const char* __hi, char* __dest) const\n-  {\n-    memcpy(__dest, __lo, __hi - __lo);\n-    return __hi;\n-  }\n-  \n-  char\n-  ctype<char>::do_narrow(char __c, char /*__dfault*/) const\n-  { return __c; }\n-  \n-  const char* \n-  ctype<char>::do_narrow(const char* __lo, const char* __hi, \n-\t\t\t char /*__dfault*/, char* __dest) const\n-  {\n-    memcpy(__dest, __lo, __hi - __lo);\n-    return __hi;\n-  }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  ctype<wchar_t>::ctype(size_t __refs) \n-  : __ctype_abstract_base<wchar_t>(__refs)\n-  { _M_c_locale_ctype = _S_c_locale; }\n-\n-  ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n-  : __ctype_abstract_base<wchar_t>(__refs) \n-  { _M_c_locale_ctype = _S_clone_c_locale(__cloc); }\n-\n-  ctype<wchar_t>::~ctype() \n-  { \n-    if (_M_c_locale_ctype != _S_c_locale)\n-      _S_destroy_c_locale(_M_c_locale_ctype); \n-  }\n-\n-  template<>\n-    ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n-    : ctype<wchar_t>(__refs) \n-    { \t\n-      if (_M_c_locale_ctype != _S_c_locale)\n-\t_S_destroy_c_locale(_M_c_locale_ctype);\n-      _S_create_c_locale(_M_c_locale_ctype, __s); \n-    }\n-#endif\n-\n   // Definitions for static const data members of time_base\n   template<> \n     const char*\n@@ -511,26 +411,6 @@ namespace std\n   const money_base::pattern \n   money_base::_S_default_pattern =  { {symbol, sign, none, value} };\n \n-  template<>\n-    const ctype<char>&\n-    use_facet<ctype<char> >(const locale& __loc)\n-    {\n-      size_t __i = ctype<char>::id._M_id();\n-      const locale::_Impl* __tmp = __loc._M_impl;\n-      return static_cast<const ctype<char>&>(*(__tmp->_M_facets[__i]));\n-    }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    const ctype<wchar_t>&\n-    use_facet<ctype<wchar_t> >(const locale& __loc)\n-    {\n-      size_t __i = ctype<wchar_t>::id._M_id();\n-      const locale::_Impl* __tmp = __loc._M_impl;\n-      return static_cast<const ctype<wchar_t>&>(*(__tmp->_M_facets[__i]));\n-    }\n-#endif\n-\n   const char __num_base::_S_atoms[] = \"0123456789eEabcdfABCDF\";\n \n   bool"}, {"sha": "4d585659b9bd8371a264db4e7eceee201e28f664", "filename": "libstdc++-v3/src/strstream.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -2,22 +2,21 @@\n \n // Copyright (C) 2001, 2002 Free Software Foundation\n //\n-// This file is part of GNU CC.\n-//\n-// GNU CC is free software; you can redistribute it and/or modify\n-// it under the terms of the GNU General Public License as published by\n-// the Free Software Foundation; either version 2, or (at your option)\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n // any later version.\n-// \n-// GNU CC is distributed in the hope that it will be useful,\n+\n+// This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-// \n-// You should have received a copy of the GNU General Public License\n-// along with GNU CC; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330,\n-// Boston, MA 02111-1307, USA.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "26e09d17b57c04d315580bd0d825478371a9c6ca", "filename": "libstdc++-v3/src/vterminate.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvterminate.cc?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -2,22 +2,21 @@\n \n // Copyright (C) 2001, 2002 Free Software Foundation\n //\n-// This file is part of GNU CC.\n-//\n-// GNU CC is free software; you can redistribute it and/or modify\n-// it under the terms of the GNU General Public License as published by\n-// the Free Software Foundation; either version 2, or (at your option)\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n // any later version.\n-// \n-// GNU CC is distributed in the hope that it will be useful,\n+\n+// This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-// \n-// You should have received a copy of the GNU General Public License\n-// along with GNU CC; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330,\n-// Boston, MA 02111-1307, USA.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "1c48f8b49c2abd3438d16bd108cc40afadd314d3", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38cca750247cbf7c5e232a33c51862f42134bc0e/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=38cca750247cbf7c5e232a33c51862f42134bc0e", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -136,26 +136,35 @@ AUTOMAKE_OPTIONS = cygnus dejagnu\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n+            echo @glibcpp_builddir@/../../expect/expect ; \\\n+          else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n+\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n+\t    else echo runtest; fi`\n \n \n AM_RUNTESTFLAGS = \n RUNTESTFLAGS = \n \n CXX_fake = @glibcpp_CXX@ \n CXX = `echo $(CXX_fake) | sed 's/xgcc/g++/g'`\n-CXXLINK =  \tLD_RUN_PATH=${LD_RUN_PATH:+$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs \t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = \\\n+\tLD_RUN_PATH=${LD_RUN_PATH:+$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs\\\n+\t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n+\t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n \n \n-INCLUDES =  \t-nostdinc++ \t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n \n \n noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = testsuite_hooks.cc\n-@GLIBCPP_BUILD_ABI_CHECK_TRUE@noinst_PROGRAMS = abi_check\n+@GLIBCPP_BUILD_ABI_CHECK_TRUE@noinst_PROGRAMS = @GLIBCPP_BUILD_ABI_CHECK_TRUE@abi_check\n @GLIBCPP_BUILD_ABI_CHECK_FALSE@noinst_PROGRAMS = \n abi_check_SOURCES = abi_check.cc\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n@@ -186,7 +195,7 @@ DIST_COMMON =  README Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n SOURCES = $(libv3test_a_SOURCES) $(abi_check_SOURCES)\n OBJECTS = $(libv3test_a_OBJECTS) $(abi_check_OBJECTS)\n@@ -297,7 +306,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n+\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n \n mostlyclean-tags:\n \n@@ -354,7 +363,7 @@ site.exp: Makefile\n \t@echo 'set build_alias $(build_alias)' >> $@-t\n \t@echo 'set build_triplet $(build_triplet)' >> $@-t\n \t@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t\n-\t@test ! -f $(srcdir)/site.exp || sed '1,/^## All variables above are.*##/ d' $(srcdir)/site.exp >> $@-t\n+\t@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t\n \t@test ! -f site.exp || mv site.exp site.bak\n \t@mv $@-t site.exp\n info-am:"}]}