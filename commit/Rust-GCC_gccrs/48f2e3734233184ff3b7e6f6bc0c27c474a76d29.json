{"sha": "48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmMmUzNzM0MjMzMTg0ZmYzYjdlNmY2YmMwYzI3YzQ3NGE3NmQyOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-09T11:22:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-09T11:22:59Z"}, "message": "re PR tree-optimization/51482 (ice: invalid types in conversion to floating point)\n\n2011-12-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51482\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size):\n\tMake sure to only create REAL_TYPE and INTEGER_TYPE component\n\tvectors.\n\n\t* g++.dg/torture/pr51482.C: New testcase.\n\nFrom-SVN: r182156", "tree": {"sha": "3fd14b2819d5df4d70c0d977b8b8eb86af85045f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd14b2819d5df4d70c0d977b8b8eb86af85045f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/comments", "author": null, "committer": null, "parents": [{"sha": "7a71052e76f0de7f5342cff98ef4ad87b3e4dfdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a71052e76f0de7f5342cff98ef4ad87b3e4dfdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a71052e76f0de7f5342cff98ef4ad87b3e4dfdf"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "d56c240d5ca33153348a3710fdcc1278ce1ad7bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "patch": "@@ -1,3 +1,10 @@\n+2011-12-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51482\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size):\n+\tMake sure to only create REAL_TYPE and INTEGER_TYPE component\n+\tvectors.\n+\n 2011-12-09  Kai Tietz  <ktietz@redhat.com>\n \n \t* implicit-zee.c (num_realized): Change type to long."}, {"sha": "68002fcd5c82780fa8729691c88efb6a80031b99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "patch": "@@ -1,6 +1,11 @@\n+2011-12-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51482\n+\t* g++.dg/torture/pr51482.C: New testcase.\n+\n 2011-12-08  Andrew Pinski  <apinski@cavium.com>\n \n-\t* cc.target/mips/mult-1.c: Forbid all Octeon processors.\n+\t* gcc.target/mips/mult-1.c: Forbid all Octeon processors.\n \t* gcc.target/mips/dmult-1.c: Likewise.\n \t* gcc.target/mips/branch-1.c: Likewise.\n \t* gcc.target/mips/extend-1.c: Likewise."}, {"sha": "28435919f467a1041bc043fc4d5e3923876b4374", "filename": "gcc/testsuite/g++.dg/torture/pr51482.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51482.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51482.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51482.C?ref=48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+\n+typedef enum { CLASS_IN = 1, CLASS_OUT = -1 } FERGUSON_KEY_CLASS, BEZIER_KEY_CLASS;\n+typedef class flag_interface { } VECT3DF_SIMPLE;\n+typedef struct vect3df {\n+    float x,y,z;\n+} VECT3DF, VECT;\n+typedef struct vect4df : public vect3df {\n+    float w;\n+} VECT4DF, WVECT;\n+typedef class llist_item { } ANIM_KEY;\n+typedef class anim_track : public flag_interface, public llist_item { } ANIM_KEY_BEZ;\n+typedef class anim_track_bezier : public anim_track { } ANIM_KEY_BEZ_WVECT;\n+typedef class anim_track_bez_wvect : public anim_track_bezier {\n+    WVECT * tangent(int kn, BEZIER_KEY_CLASS key_class, WVECT *p_tn);\n+} ANIM_TRACK_BEZ_WVECT;\n+WVECT * anim_track_bez_wvect::tangent(int kn, BEZIER_KEY_CLASS key_class, WVECT *p_tn)\n+{\n+  float bias,continuity,tension,tn1,bp1;\n+  WVECT *p_p0,*p_p1,*p_p2,         t1,         g1,g2,g3;\n+  g1.x = (p_p1->x - p_p0->x)*bp1;\n+  g1.y = (p_p1->y - p_p0->y)*bp1;\n+  g1.z = (p_p1->z - p_p0->z)*bp1;\n+  g1.w = (p_p1->w - p_p0->w)*bp1;\n+  bp1 = (0.5f + key_class*0.5f*continuity);\n+  p_tn->x = (g1.x + g3.x*bp1)*tn1;\n+  p_tn->y = (g1.y + g3.y*bp1)*tn1;\n+  p_tn->z = (g1.z + g3.z*bp1)*tn1;\n+  p_tn->w = (g1.w + g3.w*bp1)*tn1;\n+}"}, {"sha": "046a76fd8ae016fbceb5b706d537bbbb3146152b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f2e3734233184ff3b7e6f6bc0c27c474a76d29/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=48f2e3734233184ff3b7e6f6bc0c27c474a76d29", "patch": "@@ -5705,6 +5705,10 @@ get_vectype_for_scalar_type_and_size (tree scalar_type, unsigned size)\n   if (nbytes == 0)\n     return NULL_TREE;\n \n+  if (GET_MODE_CLASS (inner_mode) != MODE_INT\n+      && GET_MODE_CLASS (inner_mode) != MODE_FLOAT)\n+    return NULL_TREE;\n+\n   /* We can't build a vector type of elements with alignment bigger than\n      their size.  */\n   if (nbytes < TYPE_ALIGN_UNIT (scalar_type))\n@@ -5713,16 +5717,15 @@ get_vectype_for_scalar_type_and_size (tree scalar_type, unsigned size)\n   /* For vector types of elements whose mode precision doesn't\n      match their types precision we use a element type of mode\n      precision.  The vectorization routines will have to make sure\n-     they support the proper result truncation/extension.  */\n+     they support the proper result truncation/extension.\n+     We also make sure to build vector types with INTEGER_TYPE\n+     component type only.  */\n   if (INTEGRAL_TYPE_P (scalar_type)\n-      && GET_MODE_BITSIZE (inner_mode) != TYPE_PRECISION (scalar_type))\n+      && (GET_MODE_BITSIZE (inner_mode) != TYPE_PRECISION (scalar_type)\n+\t  || TREE_CODE (scalar_type) != INTEGER_TYPE))\n     scalar_type = build_nonstandard_integer_type (GET_MODE_BITSIZE (inner_mode),\n \t\t\t\t\t\t  TYPE_UNSIGNED (scalar_type));\n \n-  if (GET_MODE_CLASS (inner_mode) != MODE_INT\n-      && GET_MODE_CLASS (inner_mode) != MODE_FLOAT)\n-    return NULL_TREE;\n-\n   /* We shouldn't end up building VECTOR_TYPEs of non-scalar components.\n      When the component mode passes the above test simply use a type\n      corresponding to that mode.  The theory is that any use that"}]}