{"sha": "405d9f1d135771015199546cd1c224ba589ab48d", "node_id": "C_kwDOANBUbNoAKDQwNWQ5ZjFkMTM1NzcxMDE1MTk5NTQ2Y2QxYzIyNGJhNTg5YWI0OGQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-03T10:58:06Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-04T14:48:37Z"}, "message": "Fix ICE with duplicate hirid on autoderef coercion site mappings\n\nImagine the call expression:\n\n  Foo(a+b)\n\nBut the a+b is an operator overload of the assignment operation. We store\nthe autoderef coercions on the HIR id of the plus_expression here which is\ngoing to conflict with the id used to store the autoderef coercions the\nargument a+b. So this patch changes that all autoderef coercions store the\nautoderef for the implicit method call on the hirid of the lvalue hirid\nwhich in this case is 'a'. This means we won't conflict and cause an ICE\nin this case.", "tree": {"sha": "d7d397f76ca483d1351a3205b5dd0f17d179a475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7d397f76ca483d1351a3205b5dd0f17d179a475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405d9f1d135771015199546cd1c224ba589ab48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405d9f1d135771015199546cd1c224ba589ab48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405d9f1d135771015199546cd1c224ba589ab48d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405d9f1d135771015199546cd1c224ba589ab48d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e53f8e55e93da8db3d948c3f16d23b7c4ba7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e53f8e55e93da8db3d948c3f16d23b7c4ba7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e53f8e55e93da8db3d948c3f16d23b7c4ba7a6"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "35861c12d9c23f79a700ab8d936c14038714441a", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405d9f1d135771015199546cd1c224ba589ab48d/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405d9f1d135771015199546cd1c224ba589ab48d/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=405d9f1d135771015199546cd1c224ba589ab48d", "patch": "@@ -1285,7 +1285,7 @@ CompileExpr::resolve_operator_overload (\n   // lookup the autoderef mappings\n   std::vector<Resolver::Adjustment> *adjustments = nullptr;\n   ok = ctx->get_tyctx ()->lookup_autoderef_mappings (\n-    expr.get_mappings ().get_hirid (), &adjustments);\n+    expr.get_lvalue_mappings ().get_hirid (), &adjustments);\n   rust_assert (ok);\n \n   // apply adjustments for the fn call"}, {"sha": "7cb86a69b2c3f88a9a3cb835fdce9b2329cbbb43", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405d9f1d135771015199546cd1c224ba589ab48d/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405d9f1d135771015199546cd1c224ba589ab48d/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=405d9f1d135771015199546cd1c224ba589ab48d", "patch": "@@ -4120,31 +4120,47 @@ class OperatorExprMeta\n {\n public:\n   OperatorExprMeta (HIR::CompoundAssignmentExpr &expr)\n-    : node_mappings (expr.get_mappings ()), locus (expr.get_locus ())\n+    : node_mappings (expr.get_mappings ()),\n+      lvalue_mappings (expr.get_expr ()->get_mappings ()),\n+      locus (expr.get_locus ())\n   {}\n \n   OperatorExprMeta (HIR::ArithmeticOrLogicalExpr &expr)\n-    : node_mappings (expr.get_mappings ()), locus (expr.get_locus ())\n+    : node_mappings (expr.get_mappings ()),\n+      lvalue_mappings (expr.get_expr ()->get_mappings ()),\n+      locus (expr.get_locus ())\n   {}\n \n   OperatorExprMeta (HIR::NegationExpr &expr)\n-    : node_mappings (expr.get_mappings ()), locus (expr.get_locus ())\n+    : node_mappings (expr.get_mappings ()),\n+      lvalue_mappings (expr.get_expr ()->get_mappings ()),\n+      locus (expr.get_locus ())\n   {}\n \n   OperatorExprMeta (HIR::DereferenceExpr &expr)\n-    : node_mappings (expr.get_mappings ()), locus (expr.get_locus ())\n+    : node_mappings (expr.get_mappings ()),\n+      lvalue_mappings (expr.get_expr ()->get_mappings ()),\n+      locus (expr.get_locus ())\n   {}\n \n   OperatorExprMeta (HIR::ArrayIndexExpr &expr)\n-    : node_mappings (expr.get_mappings ()), locus (expr.get_locus ())\n+    : node_mappings (expr.get_mappings ()),\n+      lvalue_mappings (expr.get_array_expr ()->get_mappings ()),\n+      locus (expr.get_locus ())\n   {}\n \n   const Analysis::NodeMapping &get_mappings () const { return node_mappings; }\n \n+  const Analysis::NodeMapping &get_lvalue_mappings () const\n+  {\n+    return lvalue_mappings;\n+  }\n+\n   Location get_locus () const { return locus; }\n \n private:\n   const Analysis::NodeMapping node_mappings;\n+  const Analysis::NodeMapping lvalue_mappings;\n   Location locus;\n };\n "}, {"sha": "80f351a8c45781580c847d5dbd0870be9dfbc10f", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405d9f1d135771015199546cd1c224ba589ab48d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405d9f1d135771015199546cd1c224ba589ab48d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=405d9f1d135771015199546cd1c224ba589ab48d", "patch": "@@ -365,7 +365,7 @@ TypeCheckExpr::resolve_operator_overload (\n     }\n \n   // store the adjustments for code-generation to know what to do\n-  context->insert_autoderef_mappings (expr.get_mappings ().get_hirid (),\n+  context->insert_autoderef_mappings (expr.get_lvalue_mappings ().get_hirid (),\n \t\t\t\t      std::move (candidate.adjustments));\n \n   // now its just like a method-call-expr"}]}