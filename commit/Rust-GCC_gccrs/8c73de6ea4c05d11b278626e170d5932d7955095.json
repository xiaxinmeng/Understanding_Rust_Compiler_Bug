{"sha": "8c73de6ea4c05d11b278626e170d5932d7955095", "node_id": "C_kwDOANBUbNoAKDhjNzNkZTZlYTRjMDVkMTFiMjc4NjI2ZTE3MGQ1OTMyZDc5NTUwOTU", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-10-07T07:05:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:03Z"}, "message": "[Ada] Issue warning on unused quantified expression\n\ngcc/ada/\n\n\t* sem_ch4.adb (Analyze_QUantified_Expression): Issue warning on\n\tconjunct/disjunct sub-expression of the full expression inside a\n\tquantified expression, when it does not reference the quantified\n\tvariable.", "tree": {"sha": "7230a6c3adb2afe16acab0fbc6d43e8a7318aabb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7230a6c3adb2afe16acab0fbc6d43e8a7318aabb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c73de6ea4c05d11b278626e170d5932d7955095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c73de6ea4c05d11b278626e170d5932d7955095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c73de6ea4c05d11b278626e170d5932d7955095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c73de6ea4c05d11b278626e170d5932d7955095/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fe0e53d8dbc7cae3170cd6ad783100ec3a704a"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "fecc060a4039ebdb23b747ee2d2dace11031a12e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c73de6ea4c05d11b278626e170d5932d7955095/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c73de6ea4c05d11b278626e170d5932d7955095/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=8c73de6ea4c05d11b278626e170d5932d7955095", "patch": "@@ -4299,21 +4299,67 @@ package body Sem_Ch4 is\n          Loop_Id := Defining_Identifier (Loop_Parameter_Specification (N));\n       end if;\n \n-      if Warn_On_Suspicious_Contract\n-        and then not Referenced (Loop_Id, Cond)\n-        and then not Is_Internal_Name (Chars (Loop_Id))\n-      then\n-         --  Generating C, this check causes spurious warnings on inlined\n-         --  postconditions; we can safely disable it because this check\n-         --  was previously performed when analyzing the internally built\n-         --  postconditions procedure.\n+      declare\n+         type Subexpr_Kind is (Full, Conjunct, Disjunct);\n \n-         if Modify_Tree_For_C and then In_Inlined_Body then\n-            null;\n-         else\n-            Error_Msg_N (\"?T?unused variable &\", Loop_Id);\n+         procedure Check_Subexpr (Expr : Node_Id; Kind : Subexpr_Kind);\n+         --  Check that the quantified variable appears in every sub-expression\n+         --  of the quantified expression. If Kind is Full, Expr is the full\n+         --  expression. If Kind is Conjunct (resp. Disjunct), Expr is a\n+         --  conjunct (resp. disjunct) of the full expression.\n+\n+         -------------------\n+         -- Check_Subexpr --\n+         -------------------\n+\n+         procedure Check_Subexpr (Expr : Node_Id; Kind : Subexpr_Kind) is\n+         begin\n+            if Nkind (Expr) in N_Op_And | N_And_Then\n+              and then Kind /= Disjunct\n+            then\n+               Check_Subexpr (Left_Opnd (Expr), Conjunct);\n+               Check_Subexpr (Right_Opnd (Expr), Conjunct);\n+\n+            elsif Nkind (Expr) in N_Op_Or | N_Or_Else\n+              and then Kind /= Conjunct\n+            then\n+               Check_Subexpr (Left_Opnd (Expr), Disjunct);\n+               Check_Subexpr (Right_Opnd (Expr), Disjunct);\n+\n+            elsif Kind /= Full\n+              and then not Referenced (Loop_Id, Expr)\n+            then\n+               declare\n+                  Sub : constant String :=\n+                    (if Kind = Conjunct then \"conjunct\" else \"disjunct\");\n+               begin\n+                  Error_Msg_NE\n+                    (\"?T?unused variable & in \" & Sub, Expr, Loop_Id);\n+                  Error_Msg_NE\n+                    (\"\\consider extracting \" & Sub & \" from quantified \"\n+                     & \"expression\", Expr, Loop_Id);\n+               end;\n+            end if;\n+         end Check_Subexpr;\n+\n+      begin\n+         if Warn_On_Suspicious_Contract\n+           and then not Is_Internal_Name (Chars (Loop_Id))\n+\n+           --  Generating C, this check causes spurious warnings on inlined\n+           --  postconditions; we can safely disable it because this check\n+           --  was previously performed when analyzing the internally built\n+           --  postconditions procedure.\n+\n+           and then not (Modify_Tree_For_C and In_Inlined_Body)\n+         then\n+            if not Referenced (Loop_Id, Cond) then\n+               Error_Msg_N (\"?T?unused variable &\", Loop_Id);\n+            else\n+               Check_Subexpr (Cond, Kind => Full);\n+            end if;\n          end if;\n-      end if;\n+      end;\n \n       --  Diagnose a possible misuse of the SOME existential quantifier. When\n       --  we have a quantified expression of the form:"}]}