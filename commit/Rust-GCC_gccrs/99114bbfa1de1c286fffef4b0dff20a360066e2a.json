{"sha": "99114bbfa1de1c286fffef4b0dff20a360066e2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxMTRiYmZhMWRlMWMyODZmZmZlZjRiMGRmZjIwYTM2MDA2NmUyYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-08-18T14:52:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-18T14:52:06Z"}, "message": "Allow HOST_WIDE_INT for option variable.\n\n2011-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Igor Zamyatin <igor.zamyatin@intel.com>\n\n\t* hwint.h (HOST_WIDE_INT_1): New.\n\n\t* opt-functions.awk (switch_bit_fields): Initialize the\n\thost_wide_int field.\n\t(host_wide_int_var_name): New.\n\t(var_type_struct): Check and return HOST_WIDE_INT.\n\n\t* opt-read.awk: Handle HOST_WIDE_INT for \"Variable\".\n\n\t* optc-save-gen.awk: Support HOST_WIDE_INT on var_target_other.\n\n\t* opth-gen.awk: Use HOST_WIDE_INT_1 on HOST_WIDE_INT.  Properly\n\tcheck masks for HOST_WIDE_INT.\n\n\t* opts-common.c (set_option): Support HOST_WIDE_INT flag_var.\n\t(option_enabled): Likewise.\n\t(get_option_state): Likewise.\n\n\t* opts.h (cl_option): Add cl_host_wide_int.  Change var_value\n\tto HOST_WIDE_INT.\n\nCo-Authored-By: Igor Zamyatin <igor.zamyatin@intel.com>\n\nFrom-SVN: r177864", "tree": {"sha": "281491eb9469913e27f7aa1d7338b708f181d46f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/281491eb9469913e27f7aa1d7338b708f181d46f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99114bbfa1de1c286fffef4b0dff20a360066e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99114bbfa1de1c286fffef4b0dff20a360066e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99114bbfa1de1c286fffef4b0dff20a360066e2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99114bbfa1de1c286fffef4b0dff20a360066e2a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b880ea61c107da98ea87a5ffad4520445d60007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b880ea61c107da98ea87a5ffad4520445d60007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b880ea61c107da98ea87a5ffad4520445d60007"}], "stats": {"total": 131, "additions": 114, "deletions": 17}, "files": [{"sha": "dabaf4eda27d438b58f2912d9e1cb6c25aa416f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -1,3 +1,27 @@\n+2011-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Igor Zamyatin <igor.zamyatin@intel.com>\n+\n+\t* hwint.h (HOST_WIDE_INT_1): New.\n+\n+\t* opt-functions.awk (switch_bit_fields): Initialize the\n+\thost_wide_int field.\n+\t(host_wide_int_var_name): New.\n+\t(var_type_struct): Check and return HOST_WIDE_INT.\n+\n+\t* opt-read.awk: Handle HOST_WIDE_INT for \"Variable\".\n+\n+\t* optc-save-gen.awk: Support HOST_WIDE_INT on var_target_other.\n+\n+\t* opth-gen.awk: Use HOST_WIDE_INT_1 on HOST_WIDE_INT.  Properly\n+\tcheck masks for HOST_WIDE_INT.\n+\n+\t* opts-common.c (set_option): Support HOST_WIDE_INT flag_var.\n+\t(option_enabled): Likewise.\n+\t(get_option_state): Likewise.\n+\n+\t* opts.h (cl_option): Add cl_host_wide_int.  Change var_value\n+\tto HOST_WIDE_INT.\n+\n 2011-08-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \t    Marc Glisse  <marc.glisse@normalesup.org>\n "}, {"sha": "2643aee3e01634ce757728dd1c0f43b2d661b505", "filename": "gcc/hwint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -79,6 +79,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n # define HOST_WIDE_INT_PRINT HOST_LONG_FORMAT\n # define HOST_WIDE_INT_PRINT_C \"L\"\n+# define HOST_WIDE_INT_1 1L\n   /* 'long' might be 32 or 64 bits, and the number of leading zeroes\n      must be tweaked accordingly.  */\n # if HOST_BITS_PER_WIDE_INT == 64\n@@ -91,6 +92,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n #else\n # define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n # define HOST_WIDE_INT_PRINT_C \"LL\"\n+# define HOST_WIDE_INT_1 1LL\n   /* We can assume that 'long long' is at least 64 bits.  */\n # define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n     \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\""}, {"sha": "1f582fb4a1654bcfdb8d29aaeb1faa6da85035bb", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -110,6 +110,11 @@ function switch_flags (flags)\n # Return bit-field initializers for option flags FLAGS.\n function switch_bit_fields (flags)\n {\n+\tvn = var_name(flags);\n+\tif (host_wide_int[vn] == \"yes\")\n+\t\thwi = \"Host_Wide_Int\"\n+\telse\n+\t\thwi = \"\"\n \tresult = \"\"\n \tsep_args = opt_args(\"Args\", flags)\n \tif (sep_args == \"\")\n@@ -126,6 +131,7 @@ function switch_bit_fields (flags)\n \t  flag_init(\"RejectNegative\", flags) \\\n \t  flag_init(\"JoinedOrMissing\", flags) \\\n \t  flag_init(\"UInteger\", flags) \\\n+\t  flag_init(\"Host_Wide_Int\", hwi) \\\n \t  flag_init(\"ToLower\", flags) \\\n \t  flag_init(\"Report\", flags)\n \n@@ -140,6 +146,17 @@ function var_name(flags)\n \treturn nth_arg(0, opt_args(\"Var\", flags))\n }\n \n+# Return the name of the variable if FLAGS has a HOST_WIDE_INT variable. \n+# Return the empty string otherwise.\n+function host_wide_int_var_name(flags)\n+{\n+\tsplit (flags, array, \"[ \\t]+\")\n+\tif (array[1] == \"HOST_WIDE_INT\")\n+\t\treturn array[2]\n+\telse\n+\t\treturn \"\"\n+}\n+\n # Return true if the option described by FLAGS has a globally-visible state.\n function global_state_p(flags)\n {\n@@ -197,8 +214,12 @@ function var_type_struct(flags)\n \t\treturn enum_type[en] \" \"\n \t}\n \telse if (!flag_set_p(\"Joined.*\", flags) && !flag_set_p(\"Separate\", flags)) {\n-\t\tif (flag_set_p(\".*Mask.*\", flags))\n-\t\t\treturn \"int \"\n+\t\tif (flag_set_p(\".*Mask.*\", flags)) {\n+\t\t\tif (host_wide_int[var_name(flags)] == \"yes\")\n+\t\t\t\treturn \"HOST_WIDE_INT \"\n+\t\t\telse\n+\t\t\t\treturn \"int \"\n+\t\t}\n \t\telse\n \t\t\treturn \"signed char \"\n \t}"}, {"sha": "6a4d4de0eb42ab91fa7dd09e997f01771b470498", "filename": "gcc/opt-read.awk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopt-read.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopt-read.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-read.awk?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -51,6 +51,9 @@ BEGIN {\n \t\telse if ($1 == \"Variable\") {\n \t\t\textra_vars[n_extra_vars] = $2\n \t\t\tn_extra_vars++\n+\t\t\tname = host_wide_int_var_name($2)\n+\t\t\tif (name != \"\")\n+\t\t\t\thost_wide_int[name] = \"yes\"\n \t\t}\n \t\telse if ($1 == \"TargetVariable\") {\n \t\t\t# Combination of TargetSave and Variable"}, {"sha": "654d869260249e23ad5641198243d2bba6a4a268", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -363,10 +363,16 @@ print \"{\";\n print \"  fputs (\\\"\\\\n\\\", file);\";\n for (i = 0; i < n_target_other; i++) {\n \tprint \"  if (ptr->x_\" var_target_other[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n+\tif (host_wide_int[var_target_other[i]] == \"yes\")\n+\t\tprint \"    fprintf (file, \\\"%*s%s (%#\\\" HOST_WIDE_INT_PRINT \\\"x)\\\\n\\\",\";\n+\telse\n+\t\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_other[i] \"\\\",\";\n-\tprint \"             (unsigned long)ptr->x_\" var_target_other[i] \");\";\n+\tif (host_wide_int[var_target_other[i]] == \"yes\")\n+\t\tprint \"             ptr->x_\" var_target_other[i] \");\";\n+\telse\n+\t\tprint \"             (unsigned long)ptr->x_\" var_target_other[i] \");\";\n \tprint \"\";\n }\n "}, {"sha": "2bae69533993311b0390a4f643cd217a647fa1dd", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -300,18 +300,26 @@ for (i = 0; i < n_opts; i++) {\n \tname = opt_args(\"Mask\", flags[i])\n \tvname = var_name(flags[i])\n \tmask = \"MASK_\"\n+\tmask_1 = \"1\"\n \tif (vname != \"\") {\n \t\tmask = \"OPTION_MASK_\"\n+\t\tif (host_wide_int[vname] == \"yes\")\n+\t\t\tmask_1 = \"HOST_WIDE_INT_1\"\n \t}\n \tif (name != \"\" && !flag_set_p(\"MaskExists\", flags[i]))\n-\t\tprint \"#define \" mask name \" (1 << \" masknum[vname]++ \")\"\n+\t\tprint \"#define \" mask name \" (\" mask_1 \" << \" masknum[vname]++ \")\"\n }\n for (i = 0; i < n_extra_masks; i++) {\n \tprint \"#define MASK_\" extra_masks[i] \" (1 << \" masknum[\"\"]++ \")\"\n }\n \n for (var in masknum) {\n-\tif (masknum[var] > 31) {\n+\tif (var != \"\" && host_wide_int[var] == \"yes\") {\n+\t\tprint\" #if defined(HOST_BITS_PER_WIDE_INT) && \" masknum[var] \" >= HOST_BITS_PER_WIDE_INT\"\n+\t\tprint \"#error too many masks for \" var\n+\t\tprint \"#endif\"\n+\t}\n+\telse if (masknum[var] > 31) {\n \t\tif (var == \"\")\n \t\t\tprint \"#error too many target masks\"\n \t\telse"}, {"sha": "0b86764cd79d1db5ad30d8e1d1b68b594af0fe15", "filename": "gcc/opts-common.c", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -1088,21 +1088,41 @@ set_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \tbreak;\n \n     case CLVC_EQUAL:\n-\t*(int *) flag_var = (value\n-\t\t\t     ? option->var_value\n-\t\t\t     : !option->var_value);\n+\tif (option->cl_host_wide_int) \n+\t  *(HOST_WIDE_INT *) flag_var = (value\n+\t\t\t\t\t ? option->var_value\n+\t\t\t\t\t : !option->var_value);\n+\telse\n+\t  *(int *) flag_var = (value\n+\t\t\t       ? option->var_value\n+\t\t\t       : !option->var_value);\n \tif (set_flag_var)\n \t  *(int *) set_flag_var = 1;\n \tbreak;\n \n     case CLVC_BIT_CLEAR:\n     case CLVC_BIT_SET:\n \tif ((value != 0) == (option->var_type == CLVC_BIT_SET))\n-\t  *(int *) flag_var |= option->var_value;\n+\t  {\n+\t    if (option->cl_host_wide_int) \n+\t      *(HOST_WIDE_INT *) flag_var |= option->var_value;\n+\t    else \n+\t      *(int *) flag_var |= option->var_value;\n+\t  }\n \telse\n-\t  *(int *) flag_var &= ~option->var_value;\n+\t  {\n+\t    if (option->cl_host_wide_int) \n+\t      *(HOST_WIDE_INT *) flag_var &= ~option->var_value;\n+\t    else \n+\t      *(int *) flag_var &= ~option->var_value;\n+\t  }\n \tif (set_flag_var)\n-\t  *(int *) set_flag_var |= option->var_value;\n+\t  {\n+\t    if (option->cl_host_wide_int) \n+\t      *(HOST_WIDE_INT *) set_flag_var |= option->var_value;\n+\t    else\n+\t      *(int *) set_flag_var |= option->var_value;\n+\t  }\n \tbreak;\n \n     case CLVC_STRING:\n@@ -1173,13 +1193,22 @@ option_enabled (int opt_idx, void *opts)\n \treturn *(int *) flag_var != 0;\n \n       case CLVC_EQUAL:\n-\treturn *(int *) flag_var == option->var_value;\n+\tif (option->cl_host_wide_int) \n+\t  return *(HOST_WIDE_INT *) flag_var == option->var_value;\n+\telse\n+\t  return *(int *) flag_var == option->var_value;\n \n       case CLVC_BIT_CLEAR:\n-\treturn (*(int *) flag_var & option->var_value) == 0;\n+\tif (option->cl_host_wide_int) \n+\t  return (*(HOST_WIDE_INT *) flag_var & option->var_value) == 0;\n+\telse\n+\t  return (*(int *) flag_var & option->var_value) == 0;\n \n       case CLVC_BIT_SET:\n-\treturn (*(int *) flag_var & option->var_value) != 0;\n+\tif (option->cl_host_wide_int) \n+\t  return (*(HOST_WIDE_INT *) flag_var & option->var_value) != 0;\n+\telse \n+\t  return (*(int *) flag_var & option->var_value) != 0;\n \n       case CLVC_STRING:\n       case CLVC_ENUM:\n@@ -1206,7 +1235,9 @@ get_option_state (struct gcc_options *opts, int option,\n     case CLVC_BOOLEAN:\n     case CLVC_EQUAL:\n       state->data = flag_var;\n-      state->size = sizeof (int);\n+      state->size = (cl_options[option].cl_host_wide_int\n+\t\t     ? sizeof (HOST_WIDE_INT)\n+\t\t     : sizeof (int));\n       break;\n \n     case CLVC_BIT_CLEAR:"}, {"sha": "3c0fe3f8cb7ec2f890e2ca551361d26f0eb768a6", "filename": "gcc/opts.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99114bbfa1de1c286fffef4b0dff20a360066e2a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=99114bbfa1de1c286fffef4b0dff20a360066e2a", "patch": "@@ -96,6 +96,8 @@ struct cl_option\n   BOOL_BITFIELD cl_missing_ok : 1;\n   /* Argument is an integer >=0.  */\n   BOOL_BITFIELD cl_uinteger : 1;\n+  /* Argument is a HOST_WIDE_INT.  */\n+  BOOL_BITFIELD cl_host_wide_int : 1;\n   /* Argument should be converted to lowercase.  */\n   BOOL_BITFIELD cl_tolower : 1;\n   /* Report argument with -fverbose-asm  */\n@@ -109,7 +111,7 @@ struct cl_option\n   /* How this option's value is determined and sets a field.  */\n   enum cl_var_type var_type;\n   /* Value or bit-mask with which to set a field.  */\n-  int var_value;\n+  HOST_WIDE_INT var_value;\n };\n \n /* Records that the state of an option consists of SIZE bytes starting"}]}