{"sha": "40e742039409f3095be1da4bd1433fdb5b43c620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBlNzQyMDM5NDA5ZjMwOTViZTFkYTRiZDE0MzNmZGI1YjQzYzYyMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-09T10:16:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-09T10:16:19Z"}, "message": "Fix long lines\n\nFrom-SVN: r165218", "tree": {"sha": "e82ed851739a674b0c40e6207b64c37b5dfc5565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e82ed851739a674b0c40e6207b64c37b5dfc5565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40e742039409f3095be1da4bd1433fdb5b43c620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e742039409f3095be1da4bd1433fdb5b43c620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e742039409f3095be1da4bd1433fdb5b43c620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e742039409f3095be1da4bd1433fdb5b43c620/comments", "author": null, "committer": null, "parents": [{"sha": "1ddc80579bd9239cc6164207e2a53629a3ce74cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddc80579bd9239cc6164207e2a53629a3ce74cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ddc80579bd9239cc6164207e2a53629a3ce74cd"}], "stats": {"total": 129, "additions": 73, "deletions": 56}, "files": [{"sha": "13cdf75870c4847bbe66753569b5d035bc0d044a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 73, "deletions": 56, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e742039409f3095be1da4bd1433fdb5b43c620/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e742039409f3095be1da4bd1433fdb5b43c620/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=40e742039409f3095be1da4bd1433fdb5b43c620", "patch": "@@ -203,7 +203,7 @@\n 2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_aggr.adb (Resolve_Array_Aggregate): If the expression in an\n-\tothers choice is a literal analyze it now to enable later optimizations.\n+\tothers choice is a literal, analyze it to enable later optimizations.\n \t* exp_aggr.adb (Expand_Record_Aggregate): An aggregate with static size\n \tand components can be handled by the backend even if it is of a limited\n \ttype.\n@@ -296,10 +296,9 @@\n \t(Implemented_By_Entry): Removed.\n \t(Set_Implemented_By_Entry): Removed.\n \t(Write_Entity_Flags): Remove the output for Implemented_By_Entry.\n-\t* einfo.ads: Remove flag Implemented_By_Entry and its usage in entities.\n-\t(Implemented_By_Entry): Removed along with its associated pragma Inline.\n-\t(Set_Implemented_By_Entry): Removed along with its associated pragma\n-\tInline.\n+\t* einfo.ads: Remove Implemented_By_Entry and its usage in entities.\n+\t(Implemented_By_Entry): Removed along with its associated pragma.\n+\t(Set_Implemented_By_Entry): Removed along with its associated pragma.\n \t* exp_ch9.adb: Alphabetize with and use clauses of Exp_Ch9.\n \t(Build_Dispatching_Call_Equivalent): New routine.\n \t(Build_Dispatching_Requeue): New routine.\n@@ -862,7 +861,7 @@\n \n 2010-10-05  Javier Miranda  <miranda@adacore.com>\n \n-\t* debug.adb: Update documentation because -gnatd.Z is no longer required\n+\t* debug.adb: Update documentation since -gnatd.Z is no longer required\n \tto generate the call-graph information.\n \n 2010-10-05  Javier Miranda  <miranda@adacore.com>\n@@ -914,8 +913,8 @@\n \tfile, if necessary.\n \t* prj-nmsc.adb (Look_For_Sources.Get_Sources_From_Source_Info): New\n \tprocedure.\n-\t(Look_For_Sources): If a source info file was successfully read, get the\n-\tsource data from the data read from the source info file.\n+\t(Look_For_Sources): If a source info file was successfully read, get\n+\tthe source data from the data read from the source info file.\n \t* prj-util.adb (Source_Info_Table): New table\n \t(Source_Info_Project_HTable): New hash table\n \t(Create): New procedure\n@@ -964,7 +963,7 @@\n \tthe entity that will be overridden by user-defined routines.\n \t* sem_disp.adb (Find_Primitive_Covering_Interface): Move here code\n \tpreviously located in routine Add_Internal_Interface_Entities.\n-\t* sem_disp.ads (Find_Primitive_Covering_Interface): Update documentation\n+\t* sem_disp.ads (Find_Primitive_Covering_Interface): Update docs.\n \t* sem_ch6.adb (New_Overloaded_Entity): Add missing check on\n \tavailability of attribute Alias.\n \n@@ -1002,7 +1001,8 @@\n \n \t* gnatcmd.adb, prj-proc.adb, prj-part.adb, prj-ext.adb, prj-ext.ads,\n \tswitch-m.adb, clean.adb, prj-nmsc.adb, prj-nmsc.ads, prj-env.adb,\n-\tprj-env.ads, prj-tree.adb, prj-tree.ads (Project_Search_Path): New type.\n+\tprj-env.ads, prj-tree.adb, prj-tree.ads (Project_Search_Path): New\n+\ttype.\n \n 2010-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -1056,7 +1056,8 @@\n 2010-10-04  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_disp.ads (Convert_Tag_To_Interface): New function which must be\n-\tused to convert a node referencing a tag to a class-wide interface type.\n+\tused to convert a node referencing a tag to a class-wide interface\n+\ttype.\n \t* exp_disp.adb (Convert_Tag_To_Interface): New function.\n \t(Expand_Interface_Conversion): Replace invocation of\n \tUnchecked_Conversion by new function Convert_Tag_To_Interface.\n@@ -1121,7 +1122,7 @@\n \n 2010-10-04  Vincent Celier  <celier@adacore.com>\n \n-\t* prj-makr.adb (Finalize): Invoke Pretty_Print with Max_Length set to 79\n+\t* prj-makr.adb (Finalize): Invoke Pretty_Print with Max_Length of 79.\n \t* prj-pp.adb (Pretty_Print): New parameter Max_Line_Length, that\n \treplaces global constant with the same name. When a line is too long,\n \tindent properly the next continuation line.\n@@ -1154,8 +1155,8 @@\n \tEnumeration_Rep_Expr to point to the literal, not the identifier.\n \t(Analyze_Enumeration_Representation_Clause): Improve error message for\n \tsize too small for enum rep value\n-\t(Analyze_Enumeration_Representation_Clause): Fix size test to use proper\n-\tsize (RM_Size, not Esize).\n+\t(Analyze_Enumeration_Representation_Clause): Fix size test to use\n+\tproper size (RM_Size, not Esize).\n \n 2010-10-04  Robert Dewar  <dewar@adacore.com>\n \n@@ -1855,7 +1856,7 @@\n \t* opt.ads (Short_Descriptors): New flag\n \t(Short_Descriptors_Config): New flag\n \t* par-prag.adb: Add dummy entry for Short_Descriptors pragma\n-\t* sem_prag.adb (Set_Mechanism_Value): Deal with Short_Descriptors pragma\n+\t* sem_prag.adb (Set_Mechanism_Value): Deal with Short_Descriptors.\n \t(Analyze_Pragma): Implement Short_Descriptors pragma\n \t* snames.ads-tmpl: Add entry for Short_Descriptors pragma\n \n@@ -1897,8 +1898,8 @@\n \t--create-map-file.\n \t* make.adb (Map_File): New global variable to store the value of switch\n \t--create-map-file.\n-\t(Gnatmake): Add switch -M to gnatlink if buider switch --create-map-file\n-\thas been specified.\n+\t(Gnatmake): Add switch -M to gnatlink if switch --create-map-file has\n+\tbeen specified.\n \t(Scan_Make_Arg): Recognize switch --create-map-file\n \t* makeutl.ads (Create_Map_File_Switch): New constant string for new\n \tgnatmake and gprbuild switch --create-map-file.\n@@ -2372,8 +2373,9 @@\n \t* prj-strt.adb (Attribute_Reference): Avoid enumeration range test\n \t* prj.adb (Known_Casing): Moved to Casing spec (avoid enum range)\n \t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Avoid enumeration\n-\tranges\n-\t* sem_res.adb (Resolve_Range): Check for enumeration subrange style rule\n+\tranges.\n+\t* sem_res.adb (Resolve_Range): Check for enumeration subrange style\n+\trule.\n \t* sem_type.adb (Is_Array_Class_Record_Type): New.\n \t* style.ads (Check_Enumeration_Subrange): New procedure\n \t* styleg.adb (Check_Enumeration_Subrange): New procedure\n@@ -2463,10 +2465,10 @@\n \tequality. Otherwise the body of the operations is built as for tagged\n \ttypes.\n \t(Expand_Freeze_Record_Type): Call Build_Untagged_Equality when needed.\n-\t(Make_Eq_Body): New function to create the expanded body of the equality\n-\toperation for tagged and untagged records.  In both cases the operation\n-\tcomposes, and the primitive operation of each record component is used\n-\tto generate the equality function for the type.\n+\t(Make_Eq_Body): New function to create the expanded body of the\n+\tequality operation for tagged and untagged records.  In both cases the\n+\toperation composes, and the primitive operation of each record\n+\tcomponent is used to generate the equality function for the type.\n \t* exp_ch4.adb (Expand_Composite_Equality): In Ada2012, if a component\n \thas an abstract equality defined, replace its call with a\n \tRaise_Program_Error.\n@@ -2593,7 +2595,8 @@\n \tCPP constructor. These IP are wrappers of the C++ constructors that,\n \tafter the first invocation of the constructor, read the C++ tags from\n \tthe object and save them locally. These copies of the C++ tags are used\n-\tby the IC routines to initialize tables of Ada derivations of CPP types.\n+\tby the IC routines to initialize tables of Ada derivations of CPP\n+\ttypes.\n \t(Write_DT): Indicate what primitives are imported from C++\n \t* exp_disp.ads (CPP_Num_Prims): New subprogram.\n \t(Has_CPP_Constructors): New subprogram.\n@@ -2605,9 +2608,10 @@\n \tIs_Variable_Size_Array.\n \t(Build_CPP_Init_Procedure): New subprogram that builds the tree\n \tcorresponding to the procedure that initializes the C++ part of the\n-\tdispatch table of an Ada tagged type that is a derivation of a CPP type.\n-\t(Build_Init_Procedure): Adding documentation plus code reorganization to\n-\tleave more clear the construction of the IP with C++ types.\n+\tdispatch table of an Ada tagged type that is a derivation of a CPP\n+\ttype.\n+\t(Build_Init_Procedure): Adding documentation plus code reorganization\n+\tto leave more clear the construction of the IP with C++ types.\n \t(Expand_Freeze_Record_Type): Delay call to Set_CPP_Constructors because\n \tit cannot be called after Make_Tags has been invoked.\n \t(Inherit_CPP_Tag): Removed.\n@@ -3461,10 +3465,12 @@\n \tAdjust_SCIL_Node.\n \t* exp_ch4.adb (Expand_N_In): Code cleanup: remove call to\n \tSet_SCIL_Related_Node and avoid adding the SCIL node before the\n-\treferenced node using Insert_Action because this is not longer required.\n+\treferenced node using Insert_Action because this is not longer\n+\trequired.\n \t(Expand_Short_Circuit_Operator): Remove call to SCIL node.\n \t* exp_ch6.adb (Expand_Call): Remove call to Adjust_SCIL_Node.\n-\t* sem_ch4.adb (Analyze_Type_Conversion): Remove call to Adjust_SCIL_Node\n+\t* sem_ch4.adb (Analyze_Type_Conversion): Remove call to\n+\tAdjust_SCIL_Node.\n \t* exp_disp.adb (Expand_Dispatching_Call): Minor code reorganization\n \tbecause we no longer require to generate the SCIL node before the call.\n \t(Make_DT): Remove generation of SCI_Dispatch_Table_Object_Init node.\n@@ -3666,8 +3672,9 @@\n \t* sem_ch4.adb (Collect_Generic_Type_Ops): Protect code that handles\n \tgeneric subprogram declarations to ensure proper context. Add missing\n \tsupport for generic actuals.\n-\t(Try_Primitive_Operation): Add missing support for concurrent types that\n-\thave no Corresponding_Record_Type. Required to diagnose errors compiling\n+\t(Try_Primitive_Operation): Add missing support for concurrent types\n+\tthat have no Corresponding_Record_Type. Required to diagnose errors\n+\tcompiling\n \tgenerics or when compiling with no code generation (-gnatc).\n \t* sem_ch9.adb (Analyze_Protected_Type, Analyze_Task_Type): Do not build\n \tthe corresponding record type.\n@@ -3707,7 +3714,7 @@\n 2010-06-22  Geert Bosch  <bosch@adacore.com>\n \n \t* exp_imgv.adb (Expand_Image_Attribute): Treat ordinary fixed point\n-\twith decimal small as decimal types, avoiding floating-point arithmetic.\n+\twith decimal small as decimal types, avoiding FP arithmetic.\n \t(Has_Decimal_Small): New function.\n \t* einfo.ads, einfo.adb (Aft_Value): New synthesized attributed for\n \tfixed point types.\n@@ -3951,7 +3958,7 @@\n \n 2010-06-22  Vincent Celier  <celier@adacore.com>\n \n-\t* prj-nmsc.adb (Process_Naming_Scheme): Initialize table Lib_Data_Table.\n+\t* prj-nmsc.adb (Process_Naming_Scheme): Initialize Lib_Data_Table.\n \n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n@@ -4074,7 +4081,7 @@\n \n 2010-06-22  Ed Falis  <falis@adacore.com>\n \n-\t* s-osinte-vxworks.ads: take sigset_t definition from System.VxWorks.Ext\n+\t* s-osinte-vxworks.ads: Take sigset_t definition of System.VxWorks.Ext.\n \t* s-vxwext.ads, s-vxwext-kernel.ads, s-vxwext-rtp.ads: Define sigset_t\n \tfor specific versions of VxWorks.\n \n@@ -4117,7 +4124,8 @@\n \n \t* sem_ch4.adb (Analyze_Conditional_Expression): Defend against\n \tmalformed tree.\n-\t* sprint.adb (Sprint_Node_Actual, case N_Conditional_Expression): Ditto.\n+\t* sprint.adb (Sprint_Node_Actual, case N_Conditional_Expression):\n+\tDitto.\n \n 2010-06-22  Arnaud Charlet  <charlet@adacore.com>\n \n@@ -4222,8 +4230,9 @@\n \n \t* g-expect-vms.adb, sem_res.adb: Minor reformatting.\n \t* exp_aggr.adb: Minor comment changes and reformatting.\n-\t* sem_eval.adb (Find_Universal_Operator_Type): Put in proper alpha order\n-\t* sem_util.ads: Add some missing pragma Inline's (efficiency issue only)\n+\t* sem_eval.adb (Find_Universal_Operator_Type): Put in proper alpha\n+\torder.\n+\t* sem_util.ads: Add some missing pragma Inline's.\n \n 2010-06-22  Thomas Quinot  <quinot@adacore.com>\n \n@@ -4235,8 +4244,8 @@\n \n 2010-06-22  Gary Dismukes  <dismukes@adacore.com>\n \n-\t* exp_util.adb (Find_Interface_ADT): Retrieve Designated_Type instead of\n-\tDirectly_Designated_Type when the type argument is an access type.\n+\t* exp_util.adb (Find_Interface_ADT): Retrieve Designated_Type instead\n+\tof Directly_Designated_Type when the type argument is an access type.\n \t(Find_Interface_Tag): Retrieve Designated_Type instead of\n \tDirectly_Designated_Type when the type argument is an access type.\n \t(Has_Controlled_Coextensions): Retrieve Designated_Type instead of\n@@ -4289,7 +4298,8 @@\n \toperands, when an explicit scope indication is present. Diagnose the\n \tcase where such a call is ambiguous.\n \t(Eval_Arithmetic_Op, Eval_Relational_Op, Eval_Unary_Op):\n-\tUse the above to identify the operand type so it can be properly frozen.\n+\tUse the above to identify the operand type so it can be properly\n+\tfrozen.\n \t* sem_res.adb (Make_Call_Into_Operator): Remove bogus freeze of operand\n \ttype, done in an arbitrary, possibly incorrect type (the presence of\n \tsome numeric type in the scope is checked for legality, but when more\n@@ -4422,7 +4432,8 @@\n \textract bounds, to ensure that we get the proper captured values,\n \trather than an expression that may have changed value since the point\n \twhere the subtype was elaborated.\n-\t(Find_Body_Discriminal): New utility subprogram to share code between...\n+\t(Find_Body_Discriminal): New utility subprogram to share code\n+\tbetween...\n \t(Eval_Attribute): For the case of a subtype bound that references a\n \tdiscriminant of the current concurrent type, insert appropriate\n \tdiscriminal reference.\n@@ -4775,7 +4786,8 @@\n \n 2010-06-18  Robert Dewar  <dewar@adacore.com>\n \n-\t* par-ch7.adb, sem_warn.adb, types.ads, par-ch3.adb: Minor reformatting.\n+\t* par-ch7.adb, sem_warn.adb, types.ads, par-ch3.adb: Minor\n+\treformatting.\n \t* gnat1drv.adb: Fix typo.\n \n 2010-06-18  Robert Dewar  <dewar@adacore.com>\n@@ -4875,12 +4887,13 @@\n \twhen the project is externally built.\n \t(Gnatmake): Set Must_Compile and Check_Readonly_Files to True when\n \tinvoked with -f -u and one or several mains on the command line.\n-\t(Scan_Make_Arg): Set Main_On_Command_Line to True when at least one main\n-\tis specified on the command line.\n+\t(Scan_Make_Arg): Set Main_On_Command_Line to True when at least one\n+\tmain is specified on the command line.\n \n 2010-06-18  Ed Schonberg  <schonberg@adacore.com>\n \n-\t* sem_ch6.adb (Build_Body_For_Inline): Handle extended_return_statements\n+\t* sem_ch6.adb (Build_Body_For_Inline): Handle\n+\textended_return_statements.\n \t* exp_ch6.adb (Expand_Inlined_Call): when possible, inline a body\n \tcontaining extented_return statements.\n \t* exp_util.adb (Make_CW_Equivalent_Type): If the root type is already\n@@ -4964,8 +4977,8 @@\n \tnode when expanding short circuit form with actions present for right\n \topnd.\n \t* exp_ch4.adb: Minor reformatting\n-\t(Expand_Short_Circuit_Operator): Use new Expression_With_Actions node if\n-\tright opeand has actions present, and debug flag -gnatd.X is set.\n+\t(Expand_Short_Circuit_Operator): Use new Expression_With_Actions node\n+\tif right opeand has actions present, and debug flag -gnatd.X is set.\n \t* exp_util.adb (Insert_Actions): Handle case of Expression_With_Actions\n \tnode.\n \t* nlists.adb (Prepend_List): New procedure\n@@ -5345,12 +5358,13 @@\n \n 2010-06-17  Robert Dewar  <dewar@adacore.com>\n \n-\t* einfo.ads, einfo.adb (Get_Record_Representation_Clause): New function.\n+\t* einfo.ads, einfo.adb (Get_Record_Representation_Clause): New\n+\tfunction.\n \t* freeze.adb (Freeze_Record_Type): Add call to\n \tCheck_Record_Representation_Clause.\n \t* sem_ch13.adb (Check_Record_Representation_Clause): New function\n-\t(Analyze_Record_Representation_Clause): Split out overlap code into this\n-\tnew function.\n+\t(Analyze_Record_Representation_Clause): Split out overlap code into\n+\tthis new function.\n \t(Check_Component_Overlap): Moved inside\n \tCheck_Record_Representation_Clause.\n \t* sem_ch13.ads (Check_Record_Representation_Clause): New function.\n@@ -5442,7 +5456,7 @@\n 2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch12.adb: propagate Pragma_Enabled flag to generic.\n-\t* get_scos.adb: Set C2 flag in decision entry of pragma to 'e' (enabled)\n+\t* get_scos.adb: Set C2 flag in decision entry of pragma to 'e'.\n \t* par_sco.ads, par_sco.adb (Set_SCO_Pragma_Enabled): New procedure\n \tRemove use of Node field in SCOs table\n \t(Output_Header): Set 'd' to initially disable pragma entry\n@@ -5459,7 +5473,8 @@\n \t(Switch_Subsequently_Cancelled): Function moved to the body of Switch.C\n \t* back_end.ads (Scan_Front_End_Switches): Function moved to the body of\n \tSwitch.C.\n-\t* switch-c.adb: Copied a number of global declarations from back_end.adb\n+\t* switch-c.adb: Copied a number of global declarations from\n+\tback_end.adb.\n \t(Len_Arg): New function copied from back_end.adb\n \t(Switch_Subsequently_Cancelled): New function moved from back_end.adb\n \t(Scan_Front_End_Switches): New parameter Arg_Rank used to call\n@@ -5591,7 +5606,8 @@\n \t* einfo.ads (First_Exit_Statement): New attribute for E_Loop\n \t* sem_ch5.adb (Analyze_Loop_Statement): Check_Infinite_Loop_Warning has\n \tnew calling sequence to include test for EXIT WHEN.\n-\t(Analyze_Exit_Statement): Chain EXIT statement into exit statement chain\n+\t(Analyze_Exit_Statement): Chain EXIT statement into exit statement\n+\tchain\n \t* sem_warn.ads, sem_warn.adb (Check_Infinite_Loop_Warning): Now handles\n \tEXIT WHEN case.\n \t* sinfo.adb (Next_Exit_Statement): New attribute of N_Exit_Statement\n@@ -5729,7 +5745,8 @@\n 2010-06-14  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_res.adb (Resolve_Call): For infinite recursion check, test\n-\twhether the called subprogram is inherited from a containing subprogram.\n+\twhether the called subprogram is inherited from a containing\n+\tsubprogram.\n \t(Same_Or_Aliased_Subprograms): New function\n \n 2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n@@ -5752,8 +5769,8 @@\n \t* gsocket.h, g-socket.adb, g-sothco.ads (GNAT.Sockets.Get_XXX_By_YYY):\n \tEnsure mutual exclusion for netdb operations if the target platform\n \trequires it.\n-\t(GNAT.Sockets.Thin_Common): New binding for getXXXbyYYY, treating struct\n-\thostent as an opaque type to improve portability.\n+\t(GNAT.Sockets.Thin_Common): New binding for getXXXbyYYY, treating\n+\tstruct hostent as an opaque type to improve portability.\n \t* s-oscons-tmplt.c, socket.c: For the case of Vxworks, emulate\n \tgethostbyYYY using proprietary VxWorks API so that a uniform interface\n \tis available for the Ada side."}]}