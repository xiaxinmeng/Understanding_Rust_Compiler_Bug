{"sha": "9b6907116c33fe92ae4ec23e60461a2b8cb5b706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2OTA3MTE2YzMzZmU5MmFlNGVjMjNlNjA0NjFhMmI4Y2I1YjcwNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-14T18:17:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-14T18:17:56Z"}, "message": "i386.c (ix86_save_reg): Make regno unsigned.\n\n        * config/i386/i386.c (ix86_save_reg): Make regno unsigned.\n        (ix86_safe_length, ix86_safe_length_prefix, ix86_safe_memory): Kill.\n\nFrom-SVN: r53464", "tree": {"sha": "e77d036927814e7a8833a3fe3a79fb61c963eb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e77d036927814e7a8833a3fe3a79fb61c963eb03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b6907116c33fe92ae4ec23e60461a2b8cb5b706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6907116c33fe92ae4ec23e60461a2b8cb5b706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6907116c33fe92ae4ec23e60461a2b8cb5b706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6907116c33fe92ae4ec23e60461a2b8cb5b706/comments", "author": null, "committer": null, "parents": [{"sha": "e6471be6690c30b505c52aba88fb435c76fda758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6471be6690c30b505c52aba88fb435c76fda758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6471be6690c30b505c52aba88fb435c76fda758"}], "stats": {"total": 104, "additions": 38, "deletions": 66}, "files": [{"sha": "3262b5d8220de6cd71724d7fe96089d9e4b64ab0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6907116c33fe92ae4ec23e60461a2b8cb5b706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6907116c33fe92ae4ec23e60461a2b8cb5b706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b6907116c33fe92ae4ec23e60461a2b8cb5b706", "patch": "@@ -1,6 +1,10 @@\n+2002-05-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_save_reg): Make regno unsigned.\n+\t(ix86_safe_length, ix86_safe_length_prefix, ix86_safe_memory): Kill.\n+\n 2002-05-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-config:\n \t* arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define.\n \t(CPP_SPEC): Update.\n \t(CPP_APCS_PC_SPEC, CPP_APCS_PC_DEFAULT_SPEC,"}, {"sha": "9c328b72fb236fb2c72fe344444fdfbf2a4ebb49", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 65, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6907116c33fe92ae4ec23e60461a2b8cb5b706/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6907116c33fe92ae4ec23e60461a2b8cb5b706/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b6907116c33fe92ae4ec23e60461a2b8cb5b706", "patch": "@@ -44,35 +44,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"target-def.h\"\n #include \"langhooks.h\"\n \n-static int ia32_use_dfa_pipeline_interface PARAMS ((void));\n-static int ia32_multipass_dfa_lookahead PARAMS ((void));\n-\n-#undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE ia32_use_dfa_pipeline_interface\n-#undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n-#define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD ia32_multipass_dfa_lookahead\n-\n-static int\n-ia32_use_dfa_pipeline_interface ()\n-{\n-  if (ix86_cpu == PROCESSOR_PENTIUM)\n-    return 1;\n-  return 0;\n-}\n-\n-/* How many alternative schedules to try.  This should be as wide as the\n-   scheduling freedom in the DFA, but no wider.  Making this value too\n-   large results extra work for the scheduler.  */\n-\n-static int\n-ia32_multipass_dfa_lookahead ()\n-{\n-  if (ix86_cpu == PROCESSOR_PENTIUM)\n-    return 2;\n-  else\n-   return 0;\n-}\n-\n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT (-1)\n #endif\n@@ -686,16 +657,13 @@ static rtx gen_push PARAMS ((rtx));\n static int memory_address_length PARAMS ((rtx addr));\n static int ix86_flags_dependant PARAMS ((rtx, rtx, enum attr_type));\n static int ix86_agi_dependant PARAMS ((rtx, rtx, enum attr_type));\n-static int ix86_safe_length PARAMS ((rtx));\n-static enum attr_memory ix86_safe_memory PARAMS ((rtx));\n static enum attr_ppro_uops ix86_safe_ppro_uops PARAMS ((rtx));\n static void ix86_dump_ppro_packet PARAMS ((FILE *));\n static void ix86_reorder_insn PARAMS ((rtx *, rtx *));\n static void ix86_init_machine_status PARAMS ((struct function *));\n static void ix86_mark_machine_status PARAMS ((struct function *));\n static void ix86_free_machine_status PARAMS ((struct function *));\n static int ix86_split_to_parts PARAMS ((rtx, rtx *, enum machine_mode));\n-static int ix86_safe_length_prefix PARAMS ((rtx));\n static int ix86_nsaved_regs PARAMS ((void));\n static void ix86_emit_save_regs PARAMS ((void));\n static void ix86_emit_save_regs_using_mov PARAMS ((rtx, HOST_WIDE_INT));\n@@ -711,6 +679,8 @@ static int ix86_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static void ix86_sched_init PARAMS ((FILE *, int, int));\n static int ix86_sched_reorder PARAMS ((FILE *, int, rtx *, int *, int));\n static int ix86_variable_issue PARAMS ((FILE *, int, rtx, int));\n+static int ia32_use_dfa_pipeline_interface PARAMS ((void));\n+static int ia32_multipass_dfa_lookahead PARAMS ((void));\n static void ix86_init_mmx_sse_builtins PARAMS ((void));\n \n struct ix86_address\n@@ -744,7 +714,7 @@ static int ix86_fp_comparison_arithmetics_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_fcomi_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_sahf_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_cost PARAMS ((enum rtx_code code));\n-static int ix86_save_reg PARAMS ((int, int));\n+static int ix86_save_reg PARAMS ((unsigned int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n static int ix86_comp_type_attributes PARAMS ((tree, tree));\n const struct attribute_spec ix86_attribute_table[];\n@@ -845,6 +815,12 @@ static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n #define TARGET_SCHED_INIT ix86_sched_init\n #undef TARGET_SCHED_REORDER\n #define TARGET_SCHED_REORDER ix86_sched_reorder\n+#undef TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \\\n+  ia32_use_dfa_pipeline_interface\n+#undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n+#define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD \\\n+  ia32_multipass_dfa_lookahead\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3914,7 +3890,7 @@ gen_push (arg)\n /* Return 1 if we need to save REGNO.  */\n static int\n ix86_save_reg (regno, maybe_eh_return)\n-     int regno;\n+     unsigned int regno;\n      int maybe_eh_return;\n {\n   if (regno == PIC_OFFSET_TABLE_REGNUM\n@@ -3931,7 +3907,7 @@ ix86_save_reg (regno, maybe_eh_return)\n \t  unsigned test = EH_RETURN_DATA_REGNO (i);\n \t  if (test == INVALID_REGNUM)\n \t    break;\n-\t  if (test == (unsigned) regno)\n+\t  if (test == regno)\n \t    return 1;\n \t}\n     }\n@@ -10302,36 +10278,6 @@ static union\n   } ppro;\n } ix86_sched_data;\n \n-static int\n-ix86_safe_length (insn)\n-     rtx insn;\n-{\n-  if (recog_memoized (insn) >= 0)\n-    return get_attr_length (insn);\n-  else\n-    return 128;\n-}\n-\n-static int\n-ix86_safe_length_prefix (insn)\n-     rtx insn;\n-{\n-  if (recog_memoized (insn) >= 0)\n-    return get_attr_length (insn);\n-  else\n-    return 0;\n-}\n-\n-static enum attr_memory\n-ix86_safe_memory (insn)\n-     rtx insn;\n-{\n-  if (recog_memoized (insn) >= 0)\n-    return get_attr_memory (insn);\n-  else\n-    return MEMORY_UNKNOWN;\n-}\n-\n static enum attr_ppro_uops\n ix86_safe_ppro_uops (insn)\n      rtx insn;\n@@ -10562,6 +10508,28 @@ ix86_variable_issue (dump, sched_verbose, insn, can_issue_more)\n       return --ix86_sched_data.ppro.issued_this_cycle;\n     }\n }\n+\n+static int\n+ia32_use_dfa_pipeline_interface ()\n+{\n+  if (ix86_cpu == PROCESSOR_PENTIUM)\n+    return 1;\n+  return 0;\n+}\n+\n+/* How many alternative schedules to try.  This should be as wide as the\n+   scheduling freedom in the DFA, but no wider.  Making this value too\n+   large results extra work for the scheduler.  */\n+\n+static int\n+ia32_multipass_dfa_lookahead ()\n+{\n+  if (ix86_cpu == PROCESSOR_PENTIUM)\n+    return 2;\n+  else\n+   return 0;\n+}\n+\n \f\n /* Walk through INSNS and look for MEM references whose address is DSTREG or\n    SRCREG and set the memory attribute to those of DSTREF and SRCREF, as"}]}