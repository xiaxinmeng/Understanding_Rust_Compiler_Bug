{"sha": "d592f1c398da37535d3c528d1a511a32d8b9b3ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU5MmYxYzM5OGRhMzc1MzVkM2M1MjhkMWE1MTFhMzJkOGI5YjNiYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-22T20:12:20Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-22T20:12:20Z"}, "message": "implement-c.texi: New file.\n\n\t* doc/implement-c.texi: New file.\n\t* doc/extend.texi (C Implementation): Move to there.\n\t* doc/gcc.texi: Include implement-c.texi.\n\t* Makefile.in (TEXI_GCC_FILES): Add implement-c.texi.\n\nFrom-SVN: r85058", "tree": {"sha": "349ba407635f4634a5cba890ffc550613b9f9c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/349ba407635f4634a5cba890ffc550613b9f9c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d592f1c398da37535d3c528d1a511a32d8b9b3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d592f1c398da37535d3c528d1a511a32d8b9b3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d592f1c398da37535d3c528d1a511a32d8b9b3ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d592f1c398da37535d3c528d1a511a32d8b9b3ba/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669d6ecca27f103a2be92da72ffed8fb68c9af83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669d6ecca27f103a2be92da72ffed8fb68c9af83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669d6ecca27f103a2be92da72ffed8fb68c9af83"}], "stats": {"total": 814, "additions": 413, "deletions": 401}, "files": [{"sha": "5041b3f09f4e094213cf1738fe72e364fcc19b4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d592f1c398da37535d3c528d1a511a32d8b9b3ba", "patch": "@@ -1,3 +1,10 @@\n+2004-07-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/implement-c.texi: New file.\n+\t* doc/extend.texi (C Implementation): Move to there.\n+\t* doc/gcc.texi: Include implement-c.texi.\n+\t* Makefile.in (TEXI_GCC_FILES): Add implement-c.texi.\n+\n 2004-07-22  Jason Merrill  <jason@redhat.com>\n \n \t* integrate.c (copy_decl_for_inlining): Remove invisible reference"}, {"sha": "e57458b1302472fbc337de33902b6ded2d8b9d3c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d592f1c398da37535d3c528d1a511a32d8b9b3ba", "patch": "@@ -2911,7 +2911,8 @@ TEXI_CPP_FILES = cpp.texi fdl.texi cppenv.texi cppopts.texi\n TEXI_GCC_FILES = gcc.texi gcc-common.texi frontends.texi standards.texi \\\n \t invoke.texi extend.texi md.texi objc.texi gcov.texi trouble.texi \\\n \t bugreport.texi service.texi contribute.texi compat.texi funding.texi \\\n-\t gnu.texi gpl.texi fdl.texi contrib.texi cppenv.texi cppopts.texi\n+\t gnu.texi gpl.texi fdl.texi contrib.texi cppenv.texi cppopts.texi \\\n+\t implement-c.texi\n \n TEXI_GCCINT_FILES = gccint.texi gcc-common.texi contribute.texi makefile.texi \\\n \t configterms.texi portability.texi interface.texi passes.texi \\"}, {"sha": "60498171bc4dc9bd41e0695f0324b3cc5bfab7ed", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 400, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d592f1c398da37535d3c528d1a511a32d8b9b3ba", "patch": "@@ -3,406 +3,6 @@\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n-@node C Implementation\n-@chapter C Implementation-defined behavior\n-@cindex implementation-defined behavior, C language\n-\n-A conforming implementation of ISO C is required to document its\n-choice of behavior in each of the areas that are designated\n-``implementation defined.''  The following lists all such areas,\n-along with the section number from the ISO/IEC 9899:1999 standard.\n-\n-@menu\n-* Translation implementation::\n-* Environment implementation::\n-* Identifiers implementation::\n-* Characters implementation::\n-* Integers implementation::\n-* Floating point implementation::\n-* Arrays and pointers implementation::\n-* Hints implementation::\n-* Structures unions enumerations and bit-fields implementation::\n-* Qualifiers implementation::\n-* Preprocessing directives implementation::\n-* Library functions implementation::\n-* Architecture implementation::\n-* Locale-specific behavior implementation::\n-@end menu\n-\n-@node Translation implementation\n-@section Translation\n-\n-@itemize @bullet\n-@item\n-@cite{How a diagnostic is identified (3.10, 5.1.1.3).}\n-\n-Diagnostics consist of all the output sent to stderr by GCC.\n-\n-@item\n-@cite{Whether each nonempty sequence of white-space characters other than\n-new-line is retained or replaced by one space character in translation\n-phase 3 (5.1.1.2).}\n-@end itemize\n-\n-@node Environment implementation\n-@section Environment\n-\n-The behavior of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n-\n-@node Identifiers implementation\n-@section Identifiers\n-\n-@itemize @bullet\n-@item\n-@cite{Which additional multibyte characters may appear in identifiers\n-and their correspondence to universal character names (6.4.2).}\n-\n-@item\n-@cite{The number of significant initial characters in an identifier\n-(5.2.4.1, 6.4.2).}\n-\n-For internal names, all characters are significant.  For external names,\n-the number of significant characters are defined by the linker; for\n-almost all targets, all characters are significant.\n-\n-@end itemize\n-\n-@node Characters implementation\n-@section Characters\n-\n-@itemize @bullet\n-@item\n-@cite{The number of bits in a byte (3.6).}\n-\n-@item\n-@cite{The values of the members of the execution character set (5.2.1).}\n-\n-@item\n-@cite{The unique value of the member of the execution character set produced\n-for each of the standard alphabetic escape sequences (5.2.2).}\n-\n-@item\n-@cite{The value of a @code{char} object into which has been stored any\n-character other than a member of the basic execution character set (6.2.5).}\n-\n-@item\n-@cite{Which of @code{signed char} or @code{unsigned char} has the same range,\n-representation, and behavior as ``plain'' @code{char} (6.2.5, 6.3.1.1).}\n-\n-@item\n-@cite{The mapping of members of the source character set (in character\n-constants and string literals) to members of the execution character\n-set (6.4.4.4, 5.1.1.2).}\n-\n-@item\n-@cite{The value of an integer character constant containing more than one\n-character or containing a character or escape sequence that does not map\n-to a single-byte execution character (6.4.4.4).}\n-\n-@item\n-@cite{The value of a wide character constant containing more than one\n-multibyte character, or containing a multibyte character or escape\n-sequence not represented in the extended execution character set (6.4.4.4).}\n-\n-@item\n-@cite{The current locale used to convert a wide character constant consisting\n-of a single multibyte character that maps to a member of the extended\n-execution character set into a corresponding wide character code (6.4.4.4).}\n-\n-@item\n-@cite{The current locale used to convert a wide string literal into\n-corresponding wide character codes (6.4.5).}\n-\n-@item\n-@cite{The value of a string literal containing a multibyte character or escape\n-sequence not represented in the execution character set (6.4.5).}\n-@end itemize\n-\n-@node Integers implementation\n-@section Integers\n-\n-@itemize @bullet\n-@item\n-@cite{Any extended integer types that exist in the implementation (6.2.5).}\n-\n-@item\n-@cite{Whether signed integer types are represented using sign and magnitude,\n-two's complement, or one's complement, and whether the extraordinary value\n-is a trap representation or an ordinary value (6.2.6.2).}\n-\n-GCC supports only two's complement integer types, and all bit patterns\n-are ordinary values.\n-\n-@item\n-@cite{The rank of any extended integer type relative to another extended\n-integer type with the same precision (6.3.1.1).}\n-\n-@item\n-@cite{The result of, or the signal raised by, converting an integer to a\n-signed integer type when the value cannot be represented in an object of\n-that type (6.3.1.3).}\n-\n-@item\n-@cite{The results of some bitwise operations on signed integers (6.5).}\n-@end itemize\n-\n-@node Floating point implementation\n-@section Floating point\n-\n-@itemize @bullet\n-@item\n-@cite{The accuracy of the floating-point operations and of the library\n-functions in @code{<math.h>} and @code{<complex.h>} that return floating-point\n-results (5.2.4.2.2).}\n-\n-@item\n-@cite{The rounding behaviors characterized by non-standard values\n-of @code{FLT_ROUNDS} @gol\n-(5.2.4.2.2).}\n-\n-@item\n-@cite{The evaluation methods characterized by non-standard negative\n-values of @code{FLT_EVAL_METHOD} (5.2.4.2.2).}\n-\n-@item\n-@cite{The direction of rounding when an integer is converted to a\n-floating-point number that cannot exactly represent the original\n-value (6.3.1.4).}\n-\n-@item\n-@cite{The direction of rounding when a floating-point number is\n-converted to a narrower floating-point number (6.3.1.5).}\n-\n-@item\n-@cite{How the nearest representable value or the larger or smaller\n-representable value immediately adjacent to the nearest representable\n-value is chosen for certain floating constants (6.4.4.2).}\n-\n-@item\n-@cite{Whether and how floating expressions are contracted when not\n-disallowed by the @code{FP_CONTRACT} pragma (6.5).}\n-\n-@item\n-@cite{The default state for the @code{FENV_ACCESS} pragma (7.6.1).}\n-\n-@item\n-@cite{Additional floating-point exceptions, rounding modes, environments,\n-and classifications, and their macro names (7.6, 7.12).}\n-\n-@item\n-@cite{The default state for the @code{FP_CONTRACT} pragma (7.12.2).}\n-\n-@item\n-@cite{Whether the ``inexact'' floating-point exception can be raised\n-when the rounded result actually does equal the mathematical result\n-in an IEC 60559 conformant implementation (F.9).}\n-\n-@item\n-@cite{Whether the ``underflow'' (and ``inexact'') floating-point\n-exception can be raised when a result is tiny but not inexact in an\n-IEC 60559 conformant implementation (F.9).}\n-\n-@end itemize\n-\n-@node Arrays and pointers implementation\n-@section Arrays and pointers\n-\n-@itemize @bullet\n-@item\n-@cite{The result of converting a pointer to an integer or\n-vice versa (6.3.2.3).}\n-\n-A cast from pointer to integer discards most-significant bits if the\n-pointer representation is larger than the integer type,\n-sign-extends@footnote{Future versions of GCC may zero-extend, or use\n-a target-defined @code{ptr_extend} pattern.  Do not rely on sign extension.}\n-if the pointer representation is smaller than the integer type, otherwise\n-the bits are unchanged.\n-@c ??? We've always claimed that pointers were unsigned entities.\n-@c Shouldn't we therefore be doing zero-extension?  If so, the bug\n-@c is in convert_to_integer, where we call type_for_size and request\n-@c a signed integral type.  On the other hand, it might be most useful\n-@c for the target if we extend according to POINTERS_EXTEND_UNSIGNED.\n-\n-A cast from integer to pointer discards most-significant bits if the\n-pointer representation is smaller than the integer type, extends according\n-to the signedness of the integer type if the pointer representation\n-is larger than the integer type, otherwise the bits are unchanged.\n-\n-When casting from pointer to integer and back again, the resulting\n-pointer must reference the same object as the original pointer, otherwise\n-the behavior is undefined.  That is, one may not use integer arithmetic to\n-avoid the undefined behavior of pointer arithmetic as proscribed in 6.5.6/8.\n-\n-@item\n-@cite{The size of the result of subtracting two pointers to elements\n-of the same array (6.5.6).}\n-\n-@end itemize\n-\n-@node Hints implementation\n-@section Hints\n-\n-@itemize @bullet\n-@item\n-@cite{The extent to which suggestions made by using the @code{register}\n-storage-class specifier are effective (6.7.1).}\n-\n-The @code{register} specifier affects code generation only in these ways:\n-\n-@itemize @bullet\n-@item\n-When used as part of the register variable extension, see\n-@ref{Explicit Reg Vars}.\n-\n-@item\n-When @option{-O0} is in use, the compiler allocates distinct stack\n-memory for all variables that do not have the @code{register}\n-storage-class specifier; if @code{register} is specified, the variable\n-may have a shorter lifespan than the code would indicate and may never\n-be placed in memory.\n-\n-@item\n-On some rare x86 targets, @code{setjmp} doesn't save the registers in\n-all circumstances.  In those cases, GCC doesn't allocate any variables\n-in registers unless they are marked @code{register}.\n-\n-@end itemize\n-\n-@item\n-@cite{The extent to which suggestions made by using the inline function\n-specifier are effective (6.7.4).}\n-\n-GCC will not inline any functions if the @option{-fno-inline} option is\n-used or if @option{-O0} is used.  Otherwise, GCC may still be unable to\n-inline a function for many reasons; the @option{-Winline} option may be\n-used to determine if a function has not been inlined and why not.\n-\n-@end itemize\n-\n-@node Structures unions enumerations and bit-fields implementation\n-@section Structures, unions, enumerations, and bit-fields\n-\n-@itemize @bullet\n-@item\n-@cite{Whether a ``plain'' int bit-field is treated as a @code{signed int}\n-bit-field or as an @code{unsigned int} bit-field (6.7.2, 6.7.2.1).}\n-\n-@item\n-@cite{Allowable bit-field types other than @code{_Bool}, @code{signed int},\n-and @code{unsigned int} (6.7.2.1).}\n-\n-@item\n-@cite{Whether a bit-field can straddle a storage-unit boundary (6.7.2.1).}\n-\n-@item\n-@cite{The order of allocation of bit-fields within a unit (6.7.2.1).}\n-\n-@item\n-@cite{The alignment of non-bit-field members of structures (6.7.2.1).}\n-\n-@item\n-@cite{The integer type compatible with each enumerated type (6.7.2.2).}\n-\n-@end itemize\n-\n-@node Qualifiers implementation\n-@section Qualifiers\n-\n-@itemize @bullet\n-@item\n-@cite{What constitutes an access to an object that has volatile-qualified\n-type (6.7.3).}\n-\n-@end itemize\n-\n-@node Preprocessing directives implementation\n-@section Preprocessing directives\n-\n-@itemize @bullet\n-@item\n-@cite{How sequences in both forms of header names are mapped to headers\n-or external source file names (6.4.7).}\n-\n-@item\n-@cite{Whether the value of a character constant in a constant expression\n-that controls conditional inclusion matches the value of the same character\n-constant in the execution character set (6.10.1).}\n-\n-@item\n-@cite{Whether the value of a single-character character constant in a\n-constant expression that controls conditional inclusion may have a\n-negative value (6.10.1).}\n-\n-@item\n-@cite{The places that are searched for an included @samp{<>} delimited\n-header, and how the places are specified or the header is\n-identified (6.10.2).}\n-\n-@item\n-@cite{How the named source file is searched for in an included @samp{\"\"}\n-delimited header (6.10.2).}\n-\n-@item\n-@cite{The method by which preprocessing tokens (possibly resulting from\n-macro expansion) in a @code{#include} directive are combined into a header\n-name (6.10.2).}\n-\n-@item\n-@cite{The nesting limit for @code{#include} processing (6.10.2).}\n-\n-GCC imposes a limit of 200 nested @code{#include}s.\n-\n-@item\n-@cite{Whether the @samp{#} operator inserts a @samp{\\} character before\n-the @samp{\\} character that begins a universal character name in a\n-character constant or string literal (6.10.3.2).}\n-\n-@item\n-@cite{The behavior on each recognized non-@code{STDC #pragma}\n-directive (6.10.6).}\n-\n-@item\n-@cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n-respectively, the date and time of translation are not available (6.10.8).}\n-\n-If the date and time are not available, @code{__DATE__} expands to\n-@code{@w{\"??? ?? ????\"}} and @code{__TIME__} expands to\n-@code{\"??:??:??\"}.\n-\n-@end itemize\n-\n-@node Library functions implementation\n-@section Library functions\n-\n-The behavior of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n-\n-@node Architecture implementation\n-@section Architecture\n-\n-@itemize @bullet\n-@item\n-@cite{The values or expressions assigned to the macros specified in the\n-headers @code{<float.h>}, @code{<limits.h>}, and @code{<stdint.h>}\n-(5.2.4.2, 7.18.2, 7.18.3).}\n-\n-@item\n-@cite{The number, order, and encoding of bytes in any object\n-(when not explicitly specified in this International Standard) (6.2.6.1).}\n-\n-@item\n-@cite{The value of the result of the sizeof operator (6.5.3.4).}\n-\n-@end itemize\n-\n-@node Locale-specific behavior implementation\n-@section Locale-specific behavior\n-\n-The behavior of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n-\n @node C Extensions\n @chapter Extensions to the C Language Family\n @cindex extensions, C language"}, {"sha": "6eac7efd6aaae09e1d4976cd0dcc91c474fb8894", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=d592f1c398da37535d3c528d1a511a32d8b9b3ba", "patch": "@@ -160,6 +160,7 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n @include frontends.texi\n @include standards.texi\n @include invoke.texi\n+@include implement-c.texi\n @include extend.texi\n @include objc.texi\n @include compat.texi"}, {"sha": "f179877df66103d840a95772571bfc5c5ea737eb", "filename": "gcc/doc/implement-c.texi", "status": "added", "additions": 403, "deletions": 0, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d592f1c398da37535d3c528d1a511a32d8b9b3ba/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=d592f1c398da37535d3c528d1a511a32d8b9b3ba", "patch": "@@ -0,0 +1,403 @@\n+@c Copyright (C) 2001,2002,2003,2004 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node C Implementation\n+@chapter C Implementation-defined behavior\n+@cindex implementation-defined behavior, C language\n+\n+A conforming implementation of ISO C is required to document its\n+choice of behavior in each of the areas that are designated\n+``implementation defined.''  The following lists all such areas,\n+along with the section number from the ISO/IEC 9899:1999 standard.\n+\n+@menu\n+* Translation implementation::\n+* Environment implementation::\n+* Identifiers implementation::\n+* Characters implementation::\n+* Integers implementation::\n+* Floating point implementation::\n+* Arrays and pointers implementation::\n+* Hints implementation::\n+* Structures unions enumerations and bit-fields implementation::\n+* Qualifiers implementation::\n+* Preprocessing directives implementation::\n+* Library functions implementation::\n+* Architecture implementation::\n+* Locale-specific behavior implementation::\n+@end menu\n+\n+@node Translation implementation\n+@section Translation\n+\n+@itemize @bullet\n+@item\n+@cite{How a diagnostic is identified (3.10, 5.1.1.3).}\n+\n+Diagnostics consist of all the output sent to stderr by GCC.\n+\n+@item\n+@cite{Whether each nonempty sequence of white-space characters other than\n+new-line is retained or replaced by one space character in translation\n+phase 3 (5.1.1.2).}\n+@end itemize\n+\n+@node Environment implementation\n+@section Environment\n+\n+The behavior of these points are dependent on the implementation\n+of the C library, and are not defined by GCC itself.\n+\n+@node Identifiers implementation\n+@section Identifiers\n+\n+@itemize @bullet\n+@item\n+@cite{Which additional multibyte characters may appear in identifiers\n+and their correspondence to universal character names (6.4.2).}\n+\n+@item\n+@cite{The number of significant initial characters in an identifier\n+(5.2.4.1, 6.4.2).}\n+\n+For internal names, all characters are significant.  For external names,\n+the number of significant characters are defined by the linker; for\n+almost all targets, all characters are significant.\n+\n+@end itemize\n+\n+@node Characters implementation\n+@section Characters\n+\n+@itemize @bullet\n+@item\n+@cite{The number of bits in a byte (3.6).}\n+\n+@item\n+@cite{The values of the members of the execution character set (5.2.1).}\n+\n+@item\n+@cite{The unique value of the member of the execution character set produced\n+for each of the standard alphabetic escape sequences (5.2.2).}\n+\n+@item\n+@cite{The value of a @code{char} object into which has been stored any\n+character other than a member of the basic execution character set (6.2.5).}\n+\n+@item\n+@cite{Which of @code{signed char} or @code{unsigned char} has the same range,\n+representation, and behavior as ``plain'' @code{char} (6.2.5, 6.3.1.1).}\n+\n+@item\n+@cite{The mapping of members of the source character set (in character\n+constants and string literals) to members of the execution character\n+set (6.4.4.4, 5.1.1.2).}\n+\n+@item\n+@cite{The value of an integer character constant containing more than one\n+character or containing a character or escape sequence that does not map\n+to a single-byte execution character (6.4.4.4).}\n+\n+@item\n+@cite{The value of a wide character constant containing more than one\n+multibyte character, or containing a multibyte character or escape\n+sequence not represented in the extended execution character set (6.4.4.4).}\n+\n+@item\n+@cite{The current locale used to convert a wide character constant consisting\n+of a single multibyte character that maps to a member of the extended\n+execution character set into a corresponding wide character code (6.4.4.4).}\n+\n+@item\n+@cite{The current locale used to convert a wide string literal into\n+corresponding wide character codes (6.4.5).}\n+\n+@item\n+@cite{The value of a string literal containing a multibyte character or escape\n+sequence not represented in the execution character set (6.4.5).}\n+@end itemize\n+\n+@node Integers implementation\n+@section Integers\n+\n+@itemize @bullet\n+@item\n+@cite{Any extended integer types that exist in the implementation (6.2.5).}\n+\n+@item\n+@cite{Whether signed integer types are represented using sign and magnitude,\n+two's complement, or one's complement, and whether the extraordinary value\n+is a trap representation or an ordinary value (6.2.6.2).}\n+\n+GCC supports only two's complement integer types, and all bit patterns\n+are ordinary values.\n+\n+@item\n+@cite{The rank of any extended integer type relative to another extended\n+integer type with the same precision (6.3.1.1).}\n+\n+@item\n+@cite{The result of, or the signal raised by, converting an integer to a\n+signed integer type when the value cannot be represented in an object of\n+that type (6.3.1.3).}\n+\n+@item\n+@cite{The results of some bitwise operations on signed integers (6.5).}\n+@end itemize\n+\n+@node Floating point implementation\n+@section Floating point\n+\n+@itemize @bullet\n+@item\n+@cite{The accuracy of the floating-point operations and of the library\n+functions in @code{<math.h>} and @code{<complex.h>} that return floating-point\n+results (5.2.4.2.2).}\n+\n+@item\n+@cite{The rounding behaviors characterized by non-standard values\n+of @code{FLT_ROUNDS} @gol\n+(5.2.4.2.2).}\n+\n+@item\n+@cite{The evaluation methods characterized by non-standard negative\n+values of @code{FLT_EVAL_METHOD} (5.2.4.2.2).}\n+\n+@item\n+@cite{The direction of rounding when an integer is converted to a\n+floating-point number that cannot exactly represent the original\n+value (6.3.1.4).}\n+\n+@item\n+@cite{The direction of rounding when a floating-point number is\n+converted to a narrower floating-point number (6.3.1.5).}\n+\n+@item\n+@cite{How the nearest representable value or the larger or smaller\n+representable value immediately adjacent to the nearest representable\n+value is chosen for certain floating constants (6.4.4.2).}\n+\n+@item\n+@cite{Whether and how floating expressions are contracted when not\n+disallowed by the @code{FP_CONTRACT} pragma (6.5).}\n+\n+@item\n+@cite{The default state for the @code{FENV_ACCESS} pragma (7.6.1).}\n+\n+@item\n+@cite{Additional floating-point exceptions, rounding modes, environments,\n+and classifications, and their macro names (7.6, 7.12).}\n+\n+@item\n+@cite{The default state for the @code{FP_CONTRACT} pragma (7.12.2).}\n+\n+@item\n+@cite{Whether the ``inexact'' floating-point exception can be raised\n+when the rounded result actually does equal the mathematical result\n+in an IEC 60559 conformant implementation (F.9).}\n+\n+@item\n+@cite{Whether the ``underflow'' (and ``inexact'') floating-point\n+exception can be raised when a result is tiny but not inexact in an\n+IEC 60559 conformant implementation (F.9).}\n+\n+@end itemize\n+\n+@node Arrays and pointers implementation\n+@section Arrays and pointers\n+\n+@itemize @bullet\n+@item\n+@cite{The result of converting a pointer to an integer or\n+vice versa (6.3.2.3).}\n+\n+A cast from pointer to integer discards most-significant bits if the\n+pointer representation is larger than the integer type,\n+sign-extends@footnote{Future versions of GCC may zero-extend, or use\n+a target-defined @code{ptr_extend} pattern.  Do not rely on sign extension.}\n+if the pointer representation is smaller than the integer type, otherwise\n+the bits are unchanged.\n+@c ??? We've always claimed that pointers were unsigned entities.\n+@c Shouldn't we therefore be doing zero-extension?  If so, the bug\n+@c is in convert_to_integer, where we call type_for_size and request\n+@c a signed integral type.  On the other hand, it might be most useful\n+@c for the target if we extend according to POINTERS_EXTEND_UNSIGNED.\n+\n+A cast from integer to pointer discards most-significant bits if the\n+pointer representation is smaller than the integer type, extends according\n+to the signedness of the integer type if the pointer representation\n+is larger than the integer type, otherwise the bits are unchanged.\n+\n+When casting from pointer to integer and back again, the resulting\n+pointer must reference the same object as the original pointer, otherwise\n+the behavior is undefined.  That is, one may not use integer arithmetic to\n+avoid the undefined behavior of pointer arithmetic as proscribed in 6.5.6/8.\n+\n+@item\n+@cite{The size of the result of subtracting two pointers to elements\n+of the same array (6.5.6).}\n+\n+@end itemize\n+\n+@node Hints implementation\n+@section Hints\n+\n+@itemize @bullet\n+@item\n+@cite{The extent to which suggestions made by using the @code{register}\n+storage-class specifier are effective (6.7.1).}\n+\n+The @code{register} specifier affects code generation only in these ways:\n+\n+@itemize @bullet\n+@item\n+When used as part of the register variable extension, see\n+@ref{Explicit Reg Vars}.\n+\n+@item\n+When @option{-O0} is in use, the compiler allocates distinct stack\n+memory for all variables that do not have the @code{register}\n+storage-class specifier; if @code{register} is specified, the variable\n+may have a shorter lifespan than the code would indicate and may never\n+be placed in memory.\n+\n+@item\n+On some rare x86 targets, @code{setjmp} doesn't save the registers in\n+all circumstances.  In those cases, GCC doesn't allocate any variables\n+in registers unless they are marked @code{register}.\n+\n+@end itemize\n+\n+@item\n+@cite{The extent to which suggestions made by using the inline function\n+specifier are effective (6.7.4).}\n+\n+GCC will not inline any functions if the @option{-fno-inline} option is\n+used or if @option{-O0} is used.  Otherwise, GCC may still be unable to\n+inline a function for many reasons; the @option{-Winline} option may be\n+used to determine if a function has not been inlined and why not.\n+\n+@end itemize\n+\n+@node Structures unions enumerations and bit-fields implementation\n+@section Structures, unions, enumerations, and bit-fields\n+\n+@itemize @bullet\n+@item\n+@cite{Whether a ``plain'' int bit-field is treated as a @code{signed int}\n+bit-field or as an @code{unsigned int} bit-field (6.7.2, 6.7.2.1).}\n+\n+@item\n+@cite{Allowable bit-field types other than @code{_Bool}, @code{signed int},\n+and @code{unsigned int} (6.7.2.1).}\n+\n+@item\n+@cite{Whether a bit-field can straddle a storage-unit boundary (6.7.2.1).}\n+\n+@item\n+@cite{The order of allocation of bit-fields within a unit (6.7.2.1).}\n+\n+@item\n+@cite{The alignment of non-bit-field members of structures (6.7.2.1).}\n+\n+@item\n+@cite{The integer type compatible with each enumerated type (6.7.2.2).}\n+\n+@end itemize\n+\n+@node Qualifiers implementation\n+@section Qualifiers\n+\n+@itemize @bullet\n+@item\n+@cite{What constitutes an access to an object that has volatile-qualified\n+type (6.7.3).}\n+\n+@end itemize\n+\n+@node Preprocessing directives implementation\n+@section Preprocessing directives\n+\n+@itemize @bullet\n+@item\n+@cite{How sequences in both forms of header names are mapped to headers\n+or external source file names (6.4.7).}\n+\n+@item\n+@cite{Whether the value of a character constant in a constant expression\n+that controls conditional inclusion matches the value of the same character\n+constant in the execution character set (6.10.1).}\n+\n+@item\n+@cite{Whether the value of a single-character character constant in a\n+constant expression that controls conditional inclusion may have a\n+negative value (6.10.1).}\n+\n+@item\n+@cite{The places that are searched for an included @samp{<>} delimited\n+header, and how the places are specified or the header is\n+identified (6.10.2).}\n+\n+@item\n+@cite{How the named source file is searched for in an included @samp{\"\"}\n+delimited header (6.10.2).}\n+\n+@item\n+@cite{The method by which preprocessing tokens (possibly resulting from\n+macro expansion) in a @code{#include} directive are combined into a header\n+name (6.10.2).}\n+\n+@item\n+@cite{The nesting limit for @code{#include} processing (6.10.2).}\n+\n+GCC imposes a limit of 200 nested @code{#include}s.\n+\n+@item\n+@cite{Whether the @samp{#} operator inserts a @samp{\\} character before\n+the @samp{\\} character that begins a universal character name in a\n+character constant or string literal (6.10.3.2).}\n+\n+@item\n+@cite{The behavior on each recognized non-@code{STDC #pragma}\n+directive (6.10.6).}\n+\n+@item\n+@cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n+respectively, the date and time of translation are not available (6.10.8).}\n+\n+If the date and time are not available, @code{__DATE__} expands to\n+@code{@w{\"??? ?? ????\"}} and @code{__TIME__} expands to\n+@code{\"??:??:??\"}.\n+\n+@end itemize\n+\n+@node Library functions implementation\n+@section Library functions\n+\n+The behavior of these points are dependent on the implementation\n+of the C library, and are not defined by GCC itself.\n+\n+@node Architecture implementation\n+@section Architecture\n+\n+@itemize @bullet\n+@item\n+@cite{The values or expressions assigned to the macros specified in the\n+headers @code{<float.h>}, @code{<limits.h>}, and @code{<stdint.h>}\n+(5.2.4.2, 7.18.2, 7.18.3).}\n+\n+@item\n+@cite{The number, order, and encoding of bytes in any object\n+(when not explicitly specified in this International Standard) (6.2.6.1).}\n+\n+@item\n+@cite{The value of the result of the sizeof operator (6.5.3.4).}\n+\n+@end itemize\n+\n+@node Locale-specific behavior implementation\n+@section Locale-specific behavior\n+\n+The behavior of these points are dependent on the implementation\n+of the C library, and are not defined by GCC itself."}]}