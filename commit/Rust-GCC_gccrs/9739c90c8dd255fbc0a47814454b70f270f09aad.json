{"sha": "9739c90c8dd255fbc0a47814454b70f270f09aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczOWM5MGM4ZGQyNTVmYmMwYTQ3ODE0NDU0YjcwZjI3MGYwOWFhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-06-04T15:23:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-06-04T15:23:42Z"}, "message": "linux.h (NO_PROFILE_COUNTERS): Define to 1.\n\n\t* config/i386/linux.h (NO_PROFILE_COUNTERS): Define to 1.\n\t* config/i386/freebsd.h (NO_PROFILE_COUNTERS): Likewise.\n\t* config/i386/netbsd-elf.h (NO_PROFILE_COUNTERS): Likewise.\n\t* config/xtensa/xtensa.h (NO_PROFILE_COUTNERS): Likewise.\n\t* config/darwin.h (NO_PROFILE_COUNTERS): Likewise.\n\t* final.c (NO_PROFILE_COUNTERS): Define to 0 if not defined.\n\t(profile_function): Allow NO_PROFILE_COUNTERS to be non-constant.\n\t* config/rs6000/rs6000.c (output_profile_hook): Likewise.\n\n\t* configure.in (powerpc*-*, s390*-*): Set tls_as_opt.\n\tPass it to $gcc_cv_as.\n\t* configure: Rebuilt.\n\n\t* config/rs6000/rs6000.c (rs6000_abi_name): Remove initializer.\n\t(print_operand): Allow TARGET_AIX to be non-constant.\n\t(rs6000_aix_emit_builtin_unwind_init, rs6000_emit_eh_toc_restore):\n\tDefine unconditionally.\n\t(rs6000_elf_declare_function_name): New function.\n\t* config/rs6000/rs6000.md (eh_return): Allow TARGET_AIX to be\n\tnon-constant.\n\t* config/rs6000/linux64.h [!RS6000_BI_ARCH] (TARGET_64BIT): Define\n\tto 1.\n\t(DEFAULT_ARCH64_P, RS6000_BI_ARCH_P): Define.\n\t[IN_LIBGCC2] (TARGET_64BIT): Define based on whether __powerpc64__\n\tis defined.\n\t(TARGET_AIX): Define to 1 if TARGET_64BIT.\n\t(PROCESSOR_DEFAULT): Remove.\n\t(TARGET_RELOCATABLE, RS6000_ABI_NAME, INVALID_64BIT,\n\tINVALID_32BIT, SUBSUBTARGET_OVERRIDE_OPTIONS): Define.\n\t[RS6000_BI_ARCH] (OVERRIDE_OPTIONS, ASM_FILE_START): Define.\n\t(ASM_DEFAULT_SPEC, ASM_SPEC, LINK_OS_LINUX_SPEC): Define for both\n\t-m32 and -m64.\n\t(MULTILIB_DEFAULTS): Define.\n\t(SUBSUBTARGET_EXTRA_SPECS): Define.\n\t(ASM_SPEC32, ASM_SPEC64, ASM_SPEC_COMMON): Define.\n\t(TARGET_TOC): Define only if !RS6000_BI_ARCH.\n\t(TARGET_NO_TOC): Remove.\n\t[!RS6000_BI_ARCH] (TARGET_RELOCATABLE, TARGET_EABI,\n\tTARGET_PROTOTYPE): Define to 0.\n\t(NO_PROFILE_COUNTERS): Define to TARGET_64BIT.\n\t(PROFILE_HOOK): Only call output_profile_hook if TARGET_64BIT.\n\t(ADJUST_FIELD_ALIGN, ROUND_TYPE_ALIGN): Adjust to work properly\n\tif !TARGET_64BIT.\n\t(USER_LABEL_PREFIX): Remove.\n\t(JUMP_TABLES_IN_TEXT_SECTION): Define to TARGET_64BIT.\n\t(SETUP_FRAME_ADDRESSES): Only call rs6000_aix_emit_builtin_unwind_init\n\tif TARGET_64BIT.\n\t(TARGET_OS_CPP_BUILTINS): Handle both -m32 and -m64.\n\t(LINK_OS_LINUX_SPEC32, LINK_OS_LINUX_SPEC64): Define.\n\t(STARTFILE_LINUX_SPEC, ENDFILE_LINUX_SPEC): Remove.\n\t(TOC_SECTION_ASM_OP): Define depending on TARGET_64BIT.\n\t(MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n\t(SIZE_TYPE, PTRDIFF_TYPE, WCHAR_TYPE): Define depending on\n\tTARGET_64BIT.\n\t(RS6000_CALL_GLUE): Likewise.\n\t(SAVE_FP_PREFIX, SAVE_FP_SUFFIX, RESTORE_FP_PREFIX,\n\tRESTORE_FP_SUFFIX): Likewise.\n\t(ASM_DECLARE_FUNCTION_NAME): Remove.\n\t(ASM_DECLARE_FUNCTION_SIZE, ASM_OUTPUT_SOURCE_LINE,\n\tDBX_OUTPUT_BRAC, DBX_OUTPUT_NFUN): Only output dot before function\n\tname if TARGET_64BIT.\n\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Handle both TARGET_64BIT and\n\t!TARGET_64BIT.\n\t(ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Remove undefs.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Take TARGET_64BIT into account.\n\t(DRAFT_V4_STRUCT_RET): Define.\n\t(SIGNAL_FRAMESIZE): New enum value.\n\t(MD_FALLBACK_FRAME_STATE_FOR): Define.\n\t* config/rs6000/default64.h: New file.\n\t* config/rs6000/sysv4.h (SUBTARGET_SWITCHES): Add -m32 and -m64\n\toptions.\n\t(SUBTARGET_OVERRIDE_OPTIONS): If rs6000_abi_name is NULL, set it\n\tto RS6000_ABI_NAME.  Only disallow mixing of -fPIC with -mcall-aixdesc\n\tif !TARGET_64BIT.\n\t[!RS6000_BI_ARCH] (SUBSUBTARGET_OVERRIDE_OPTIONS): Define.\n\t(ASM_DECLARE_FUNCTION_NAME): Use rs6000_elf_declare_function_name\n\tfunction.\n\t(TARGET_OS_SYSV_CPP_BUILTINS): Define.\n\t(TARGET_OS_CPP_BUILTINS): Use it.\n\t(CPP_SYSV_SPEC): Remove.\n\t(CPP_SPEC): Remove cpp_sysv.\n\t(SUBTARGET_EXTRA_SPECS): Remove cpp_sysv.\n\tAdd SUBSUBTARGET_EXTRA_SPECS.\n\t(SUBSUBTARGET_EXTRA_SPECS): Define.\n\t* config/rs6000/biarch64.h: New file.\n\t* config/rs6000/rs6000-protos.h (rs6000_elf_declare_function_name):\n\tNew prototype.\n\t* config/rs6000/x-linux64: New file.\n\t* config/rs6000/t-linux64: Build -m64, -m32 and -m32 -msoft-float\n\tmultilibs.\n\t* config/rs6000/eabi-ci.asm: Protect with #ifndef __powerpc64__.\n\t* config/rs6000/eabi-cn.asm: Likewise.\n\t* config/rs6000/tramp.asm: Likewise.\n\t* config/rs6000/sol-ci.asm: Likewise.\n\t* config/rs6000/sol-cn.asm: Likewise.\n\t* config/rs6000/linux.h (TARGET_64BIT): Define to 0.\n\t(TARGET_OS_CPP_BUILTINS): Use TARGET_OS_SYSV_CPP_BUILTINS.\n\t* config/rs6000/ppc-asm.h: Move __powerpc64__ section before\n\t_CALL_AIXDESC section.\n\t* config.gcc (powerpc64-*-linux*): Configure a bi-arch compiler,\n\tdefaulting to -m64 unless --with-cpu= is one of the 32-bit CPUs\n\tor default32.\n\nCo-Authored-By: Alan Modra <amodra@bigpond.net.au>\n\nFrom-SVN: r67442", "tree": {"sha": "de85908a357b1e8e25a4356a59ac8686963b75dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de85908a357b1e8e25a4356a59ac8686963b75dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9739c90c8dd255fbc0a47814454b70f270f09aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9739c90c8dd255fbc0a47814454b70f270f09aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9739c90c8dd255fbc0a47814454b70f270f09aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9739c90c8dd255fbc0a47814454b70f270f09aad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "150b72ed1f83d507c049fd84cd41172b14cc99b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150b72ed1f83d507c049fd84cd41172b14cc99b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150b72ed1f83d507c049fd84cd41172b14cc99b4"}], "stats": {"total": 1091, "additions": 798, "deletions": 293}, "files": [{"sha": "cd177daacb2e1f73829932c01b66b3075763b79b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -1,3 +1,109 @@\n+2003-06-04  Jakub Jelinek  <jakub@redhat.com>\n+\t    Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/i386/linux.h (NO_PROFILE_COUNTERS): Define to 1.\n+\t* config/i386/freebsd.h (NO_PROFILE_COUNTERS): Likewise.\n+\t* config/i386/netbsd-elf.h (NO_PROFILE_COUNTERS): Likewise.\n+\t* config/xtensa/xtensa.h (NO_PROFILE_COUTNERS): Likewise.\n+\t* config/darwin.h (NO_PROFILE_COUNTERS): Likewise.\n+\t* final.c (NO_PROFILE_COUNTERS): Define to 0 if not defined.\n+\t(profile_function): Allow NO_PROFILE_COUNTERS to be non-constant.\n+\t* config/rs6000/rs6000.c (output_profile_hook): Likewise.\n+\n+\t* configure.in (powerpc*-*, s390*-*): Set tls_as_opt.\n+\tPass it to $gcc_cv_as.\n+\t* configure: Rebuilt.\n+\n+\t* config/rs6000/rs6000.c (rs6000_abi_name): Remove initializer.\n+\t(print_operand): Allow TARGET_AIX to be non-constant.\n+\t(rs6000_aix_emit_builtin_unwind_init, rs6000_emit_eh_toc_restore):\n+\tDefine unconditionally.\n+\t(rs6000_elf_declare_function_name): New function.\n+\t* config/rs6000/rs6000.md (eh_return): Allow TARGET_AIX to be\n+\tnon-constant.\n+\t* config/rs6000/linux64.h [!RS6000_BI_ARCH] (TARGET_64BIT): Define\n+\tto 1.\n+\t(DEFAULT_ARCH64_P, RS6000_BI_ARCH_P): Define.\n+\t[IN_LIBGCC2] (TARGET_64BIT): Define based on whether __powerpc64__\n+\tis defined.\n+\t(TARGET_AIX): Define to 1 if TARGET_64BIT.\n+\t(PROCESSOR_DEFAULT): Remove.\n+\t(TARGET_RELOCATABLE, RS6000_ABI_NAME, INVALID_64BIT,\n+\tINVALID_32BIT, SUBSUBTARGET_OVERRIDE_OPTIONS): Define.\n+\t[RS6000_BI_ARCH] (OVERRIDE_OPTIONS, ASM_FILE_START): Define.\n+\t(ASM_DEFAULT_SPEC, ASM_SPEC, LINK_OS_LINUX_SPEC): Define for both\n+\t-m32 and -m64.\n+\t(MULTILIB_DEFAULTS): Define.\n+\t(SUBSUBTARGET_EXTRA_SPECS): Define.\n+\t(ASM_SPEC32, ASM_SPEC64, ASM_SPEC_COMMON): Define.\n+\t(TARGET_TOC): Define only if !RS6000_BI_ARCH.\n+\t(TARGET_NO_TOC): Remove.\n+\t[!RS6000_BI_ARCH] (TARGET_RELOCATABLE, TARGET_EABI,\n+\tTARGET_PROTOTYPE): Define to 0.\n+\t(NO_PROFILE_COUNTERS): Define to TARGET_64BIT.\n+\t(PROFILE_HOOK): Only call output_profile_hook if TARGET_64BIT.\n+\t(ADJUST_FIELD_ALIGN, ROUND_TYPE_ALIGN): Adjust to work properly\n+\tif !TARGET_64BIT.\n+\t(USER_LABEL_PREFIX): Remove.\n+\t(JUMP_TABLES_IN_TEXT_SECTION): Define to TARGET_64BIT.\n+\t(SETUP_FRAME_ADDRESSES): Only call rs6000_aix_emit_builtin_unwind_init\n+\tif TARGET_64BIT.\n+\t(TARGET_OS_CPP_BUILTINS): Handle both -m32 and -m64.\n+\t(LINK_OS_LINUX_SPEC32, LINK_OS_LINUX_SPEC64): Define.\n+\t(STARTFILE_LINUX_SPEC, ENDFILE_LINUX_SPEC): Remove.\n+\t(TOC_SECTION_ASM_OP): Define depending on TARGET_64BIT.\n+\t(MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n+\t(SIZE_TYPE, PTRDIFF_TYPE, WCHAR_TYPE): Define depending on\n+\tTARGET_64BIT.\n+\t(RS6000_CALL_GLUE): Likewise.\n+\t(SAVE_FP_PREFIX, SAVE_FP_SUFFIX, RESTORE_FP_PREFIX,\n+\tRESTORE_FP_SUFFIX): Likewise.\n+\t(ASM_DECLARE_FUNCTION_NAME): Remove.\n+\t(ASM_DECLARE_FUNCTION_SIZE, ASM_OUTPUT_SOURCE_LINE,\n+\tDBX_OUTPUT_BRAC, DBX_OUTPUT_NFUN): Only output dot before function\n+\tname if TARGET_64BIT.\n+\t(ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Handle both TARGET_64BIT and\n+\t!TARGET_64BIT.\n+\t(ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Remove undefs.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Take TARGET_64BIT into account.\n+\t(DRAFT_V4_STRUCT_RET): Define.\n+\t(SIGNAL_FRAMESIZE): New enum value.\n+\t(MD_FALLBACK_FRAME_STATE_FOR): Define.\n+\t* config/rs6000/default64.h: New file.\n+\t* config/rs6000/sysv4.h (SUBTARGET_SWITCHES): Add -m32 and -m64\n+\toptions.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): If rs6000_abi_name is NULL, set it\n+\tto RS6000_ABI_NAME.  Only disallow mixing of -fPIC with -mcall-aixdesc\n+\tif !TARGET_64BIT.\n+\t[!RS6000_BI_ARCH] (SUBSUBTARGET_OVERRIDE_OPTIONS): Define.\n+\t(ASM_DECLARE_FUNCTION_NAME): Use rs6000_elf_declare_function_name\n+\tfunction.\n+\t(TARGET_OS_SYSV_CPP_BUILTINS): Define.\n+\t(TARGET_OS_CPP_BUILTINS): Use it.\n+\t(CPP_SYSV_SPEC): Remove.\n+\t(CPP_SPEC): Remove cpp_sysv.\n+\t(SUBTARGET_EXTRA_SPECS): Remove cpp_sysv.\n+\tAdd SUBSUBTARGET_EXTRA_SPECS.\n+\t(SUBSUBTARGET_EXTRA_SPECS): Define.\n+\t* config/rs6000/biarch64.h: New file.\n+\t* config/rs6000/rs6000-protos.h (rs6000_elf_declare_function_name):\n+\tNew prototype.\n+\t* config/rs6000/x-linux64: New file.\n+\t* config/rs6000/t-linux64: Build -m64, -m32 and -m32 -msoft-float\n+\tmultilibs.\n+\t* config/rs6000/eabi-ci.asm: Protect with #ifndef __powerpc64__.\n+\t* config/rs6000/eabi-cn.asm: Likewise.\n+\t* config/rs6000/tramp.asm: Likewise.\n+\t* config/rs6000/sol-ci.asm: Likewise.\n+\t* config/rs6000/sol-cn.asm: Likewise.\n+\t* config/rs6000/linux.h (TARGET_64BIT): Define to 0.\n+\t(TARGET_OS_CPP_BUILTINS): Use TARGET_OS_SYSV_CPP_BUILTINS.\n+\t* config/rs6000/ppc-asm.h: Move __powerpc64__ section before\n+\t_CALL_AIXDESC section.\n+\t* config.gcc (powerpc64-*-linux*): Configure a bi-arch compiler,\n+\tdefaulting to -m64 unless --with-cpu= is one of the 32-bit CPUs\n+\tor default32.\n+\n 2003-06-04  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* config.gcc: Revert accidentally committed ARM changes."}, {"sha": "508aaf98a1440074fbaca3b3ae8e4c72db9234f9", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -1581,8 +1581,12 @@ powerpc-*-openbsd*)\n \textra_headers=\n \t;;\n powerpc64-*-linux*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/linux64.h\"\n-\ttmake_file=\"rs6000/t-fprules t-slibgcc-elf-ver t-linux rs6000/t-linux64\"\n+\ttm_file=\"rs6000/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h\"\n+\tcase x$with_cpu in\n+\tx|xpowerpc64|xdefault64) tm_file=\"${tm_file} rs6000/default64.h\";;\n+\tesac\n+\ttm_file=\"${tm_file} rs6000/linux64.h\"\n+\ttmake_file=\"rs6000/t-fprules t-slibgcc-elf-ver t-linux rs6000/t-ppccomm rs6000/t-linux64\"\n \t;;\n powerpc64-*-gnu*)\n \ttm_file=\"${cpu_type}/${cpu_type}.h elfos.h svr4.h freebsd-spec.h gnu.h rs6000/sysv4.h rs6000/linux64.h rs6000/gnu.h\"\n@@ -1713,14 +1717,14 @@ rs6000-ibm-aix4.[12]* | powerpc-ibm-aix4.[12]*)\n \textra_headers=\n \t;;\n rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n-\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix43.h rs6000/xcoff.h\"\n+\ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/aix.h rs6000/aix43.h rs6000/xcoff.h\"\n \ttmake_file=rs6000/t-aix43\n \tuse_collect2=yes\n \tthread_file='aix'\n \textra_headers=\n \t;;\n rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n-\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix51.h rs6000/xcoff.h\"\n+\ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/aix.h rs6000/aix51.h rs6000/xcoff.h\"\n \ttmake_file=rs6000/t-aix43\n \tuse_collect2=yes\n \tthread_file='aix'\n@@ -2306,7 +2310,7 @@ powerpc*-*-* | rs6000-*-*)\n                 tm_file=\"$tm_file rs6000/altivec-defs.h\"\n         fi\n \tcase \"x$with_cpu\" in\n-\t\tx)\n+\t\tx | xdefault32 | xdefault64)\n \t\t\t;;\n \n \t\txcommon | xpowerpc | xpowerpc64 \\"}, {"sha": "72c1eebcd5a744cda3cb4ef09ace6d71cdf59bf2", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -310,7 +310,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n \n /* Our profiling scheme doesn't LP labels and counter words.  */\n \n-#define NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS\t1\n \n #undef\tINIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP"}, {"sha": "64b152f0d49a77951ce3d998582cc6e3717b149e", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.  */\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n #undef  NO_PROFILE_COUNTERS\n-#define NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS\t1\n \n /* Tell final.c that we don't need a label passed to mcount.  */\n "}, {"sha": "90dcd1dad5cd680f2bb6de14bb56911c68c99858", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -51,7 +51,7 @@ Boston, MA 02111-1307, USA.  */\n    To the best of my knowledge, no Linux libc has required the label\n    argument to mcount.  */\n \n-#define NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS\t1\n \n #undef MCOUNT_NAME\n #define MCOUNT_NAME \"mcount\""}, {"sha": "3d779499c5fd0181b51d456508a9ca4abde645fb", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -76,7 +76,7 @@ Boston, MA 02111-1307, USA.  */\n /* Output assembler code to FILE to call the profiler.  */\n \n #undef NO_PROFILE_COUNTERS\n-#define NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS\t1\n \n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\"}, {"sha": "4fe076eb179602a8afc2dafaade7fe217e9738dd", "filename": "gcc/config/rs6000/biarch64.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fbiarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fbiarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fbiarch64.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -0,0 +1,22 @@\n+/* Definitions of target machine for GNU compiler, for 32/64 bit powerpc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n+#define RS6000_BI_ARCH 1"}, {"sha": "13ccd2d86e4d95b42c4a8094c863d87eb7a2624b", "filename": "gcc/config/rs6000/default64.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdefault64.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions of target machine for GNU compiler,\n+   for 64 bit powerpc linux defaulting to -m64.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_POWERPC | MASK_POWERPC64 | MASK_64BIT | MASK_NEW_MNEMONICS)"}, {"sha": "447b4e2378ca353856908b08a753a365643abe51", "filename": "gcc/config/rs6000/eabi-ci.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.\n \n #include <ppc-asm.h>\n \n+#ifndef __powerpc64__\n \t.section \".got\",\"aw\"\n \t.globl\t__GOT_START__\n \t.type\t__GOT_START__,@object\n@@ -122,3 +123,4 @@ FUNC_START(__fini)\n \tstwu 1,-16(1)\n \tmflr 0\n \tstw 0,20(1)\n+#endif"}, {"sha": "b2c609532ce370f659e444f41009177194bcb90b", "filename": "gcc/config/rs6000/eabi-cn.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -39,6 +39,7 @@ Boston, MA 02111-1307, USA.\n \t.file\t\"crtn.s\"\n \t.ident\t\"GNU C crtn.s\"\n \n+#ifndef __powerpc64__\n \t.section \".got\",\"aw\"\n \t.globl\t__GOT_END__\n \t.type\t__GOT_END__,@object\n@@ -113,3 +114,4 @@ __EH_FRAME_END__:\n \tmtlr 0\n \taddi 1,1,16\n \tblr\n+#endif"}, {"sha": "0eaf5df6772dea6901a3a71770e54d6abdb74a59", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -32,6 +32,7 @@\n       builtin_define_std (\"powerpc\");     \\\n       builtin_assert (\"cpu=powerpc\");     \\\n       builtin_assert (\"machine=powerpc\"); \\\n+      TARGET_OS_SYSV_CPP_BUILTINS ();\t  \\\n     }                                     \\\n   while (0)\n \n@@ -78,6 +79,13 @@\n #undef  DRAFT_V4_STRUCT_RET\n #define DRAFT_V4_STRUCT_RET 1\n \n+/* We are 32-bit all the time, so optimize a little.  */\n+#undef TARGET_64BIT\n+#define TARGET_64BIT 0\n+ \n+/* We don't need to generate entries in .fixup.  */\n+#undef RELOCATABLE_NEEDS_FIXUP\n+\n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */\n "}, {"sha": "f63b7d41923b0d050bace3563009920997e49a39", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 406, "deletions": 165, "changes": 571, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -19,52 +19,173 @@\n    Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n    MA 02111-1307, USA.  */\n \n-/* Yes!  We are AIX! Err. Wait. We're Linux!. No, wait, we're a\n-  combo of both!*/\n-#undef  DEFAULT_ABI\n-#define DEFAULT_ABI ABI_AIX\n+#ifndef RS6000_BI_ARCH\n \n-#undef  TARGET_AIX\n-#define TARGET_AIX 1\n+#undef\tDEFAULT_ABI\n+#define\tDEFAULT_ABI ABI_AIX\n \n-#undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_POWERPC | MASK_POWERPC64 | MASK_64BIT | MASK_NEW_MNEMONICS)\n+#undef\tTARGET_64BIT\n+#define\tTARGET_64BIT 1\n+\n+#define\tDEFAULT_ARCH64_P 1\n+#define\tRS6000_BI_ARCH_P 0\n+\n+#else\n+\n+#define\tDEFAULT_ARCH64_P (TARGET_DEFAULT & MASK_64BIT)\n+#define\tRS6000_BI_ARCH_P 1\n+\n+#endif\n+\n+#ifdef IN_LIBGCC2\n+#undef TARGET_64BIT\n+#ifdef __powerpc64__\n+#define TARGET_64BIT 1\n+#else\n+#define TARGET_64BIT 0\n+#endif\n+#endif\n+\n+#undef\tTARGET_AIX\n+#define\tTARGET_AIX TARGET_64BIT\n \n-#undef  PROCESSOR_DEFAULT\n-#define PROCESSOR_DEFAULT PROCESSOR_PPC630\n-#undef  PROCESSOR_DEFAULT64\n+#undef PROCESSOR_DEFAULT64\n #define PROCESSOR_DEFAULT64 PROCESSOR_PPC630\n \n-#undef  ASM_DEFAULT_SPEC\n-#define ASM_DEFAULT_SPEC \"-mppc64\"\n+#undef\tTARGET_RELOCATABLE\n+#define\tTARGET_RELOCATABLE (!TARGET_64BIT && (target_flags & MASK_RELOCATABLE))\n+\n+#undef\tRS6000_ABI_NAME\n+#define\tRS6000_ABI_NAME (TARGET_64BIT ? \"aixdesc\" : \"sysv\")\n+\n+#define INVALID_64BIT \"-m%s not supported in this configuration\"\n+#define INVALID_32BIT INVALID_64BIT\n+\n+#undef\tSUBSUBTARGET_OVERRIDE_OPTIONS\n+#define\tSUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      DEFAULT_ABI = ABI_AIX;\t\t\t\t\\\n+\t      error (INVALID_64BIT, \"call\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_RELOCATABLE)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_RELOCATABLE;\t\t\\\n+\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_EABI)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_EABI;\t\t\t\\\n+\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_PROTOTYPE;\t\t\t\\\n+\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (!RS6000_BI_ARCH_P)\t\t\t\t\\\n+\t    error (INVALID_32BIT, \"32\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#ifdef\tRS6000_BI_ARCH\n+\n+#undef\tOVERRIDE_OPTIONS\n+#define\tOVERRIDE_OPTIONS \\\n+  rs6000_override_options (((TARGET_DEFAULT ^ target_flags) & MASK_64BIT) \\\n+\t\t\t   ? (char *) 0 : TARGET_CPU_DEFAULT)\n+\n+#undef\tASM_FILE_START\n+#define\tASM_FILE_START(FILE)\t\t\t\t\t\t    \\\n+  do\t\t\t\t\t\t\t\t\t    \\\n+    {                                                                       \\\n+      output_file_directive ((FILE), main_input_filename);\t\t    \\\n+      rs6000_file_start (FILE, (((TARGET_DEFAULT ^ target_flags)\t    \\\n+\t\t\t\t & MASK_64BIT)\t\t\t\t    \\\n+\t\t\t\t? (char *) 0 : TARGET_CPU_DEFAULT));\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+  while (0)\n+\n+#endif\n \n+#undef\tASM_DEFAULT_SPEC\n #undef\tASM_SPEC\n-#define\tASM_SPEC \"%{.s: %{mregnames} %{mno-regnames}} \\\n-%{.S: %{mregnames} %{mno-regnames}} \\\n-%{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian} \\\n-%{v:-V} %{Qy:} %{!Qn:-Qy} -a64 %(asm_cpu) %{Wa,*:%*}\"\n+#undef\tLINK_OS_LINUX_SPEC\n \n-/* This is always a 64 bit compiler.  */\n-#undef\tTARGET_64BIT\n-#define\tTARGET_64BIT\t\t1\n+#ifndef\tRS6000_BI_ARCH\n+#define\tASM_DEFAULT_SPEC \"-mppc64\"\n+#define\tASM_SPEC         \"%(asm_spec64) %(asm_spec_common)\"\n+#define\tLINK_OS_LINUX_SPEC \"%(link_os_linux_spec64)\"\n+#else\n+#if DEFAULT_ARCH64_P\n+#define\tASM_DEFAULT_SPEC \"-mppc%{!m32:64}\"\n+#define\tASM_SPEC         \"%{m32:%(asm_spec32)}%{!m32:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_LINUX_SPEC \"%{m32:%(link_os_linux_spec32)}%{!m32:%(link_os_linux_spec64)}\"\n+#else\n+#define\tASM_DEFAULT_SPEC \"-mppc%{m64:64}\"\n+#define\tASM_SPEC         \"%{!m64:%(asm_spec32)}%{m64:%(asm_spec64)} %(asm_spec_common)\"\n+#define\tLINK_OS_LINUX_SPEC \"%{!m64:%(link_os_linux_spec32)}%{m64:%(link_os_linux_spec64)}\"\n+#endif\n+#endif\n+\n+#define ASM_SPEC32 \"-a32 %{n} %{T} %{Ym,*} %{Yd,*} \\\n+%{mrelocatable} %{mrelocatable-lib} %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{memb} %{!memb: %{msdata: -memb} %{msdata=eabi: -memb}} \\\n+%{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n+    %{mcall-freebsd: -mbig} \\\n+    %{mcall-i960-old: -mlittle} \\\n+    %{mcall-linux: -mbig} \\\n+    %{mcall-gnu: -mbig} \\\n+    %{mcall-netbsd: -mbig} \\\n+}}}}\"\n+\n+#define ASM_SPEC64 \"-a64\"\n+\n+#define ASM_SPEC_COMMON \"%(asm_cpu) \\\n+%{.s: %{mregnames} %{mno-regnames}} %{.S: %{mregnames} %{mno-regnames}} \\\n+%{v:-V} %{Qy:} %{!Qn:-Qy} %{Wa,*:%*} \\\n+%{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian}\"\n+\n+#undef\tSUBSUBTARGET_EXTRA_SPECS\n+#define SUBSUBTARGET_EXTRA_SPECS \\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\t\\\n+  { \"link_os_linux_spec32\",\tLINK_OS_LINUX_SPEC32 },\t\t\t\\\n+  { \"link_os_linux_spec64\",\tLINK_OS_LINUX_SPEC64 },\n+\n+#undef\tMULTILIB_DEFAULTS\n+#if DEFAULT_ARCH64_P\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"m32\" }\n+#endif\n+\n+#ifndef RS6000_BI_ARCH\n \n /* 64-bit PowerPC Linux always has a TOC.  */\n-#undef  TARGET_NO_TOC\n-#define TARGET_NO_TOC\t\t0\n #undef  TARGET_TOC\n #define\tTARGET_TOC\t\t1\n \n-/* Some things from sysv4.h we don't do.  */\n+/* Some things from sysv4.h we don't do when 64 bit.  */\n #undef\tTARGET_RELOCATABLE\n #define\tTARGET_RELOCATABLE\t0\n #undef\tTARGET_EABI\n #define\tTARGET_EABI\t\t0\n #undef\tTARGET_PROTOTYPE\n #define\tTARGET_PROTOTYPE\t0\n \n-/* Reuse sysv4 mask bits we made available above.  */\n-#define\tMASK_PROFILE_KERNEL\t0x08000000\n+#endif\n+\n+#define\tMASK_PROFILE_KERNEL\t0x00080000\n \n /* Non-standard profiling for kernels, which just saves LR then calls\n    _mcount without worrying about arg saves.  The idea is to change\n@@ -73,88 +194,62 @@\n #define TARGET_PROFILE_KERNEL\t(target_flags & MASK_PROFILE_KERNEL)\n \n /* Override sysv4.h.  */\n-#undef\tSUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-  {\"bit-align\",\t-MASK_NO_BITFIELD_TYPE,\t\t\t\t\t\\\n-    N_(\"Align to the base type of the bit-field\") },\t\t\t\\\n-  {\"no-bit-align\",\t MASK_NO_BITFIELD_TYPE,\t\t\t\t\\\n-    N_(\"Don't align to the base type of the bit-field\") },\t\t\\\n-  {\"strict-align\",\t MASK_STRICT_ALIGN,\t\t\t\t\\\n-    N_(\"Don't assume that unaligned accesses are handled by the system\") }, \\\n-  {\"no-strict-align\",\t-MASK_STRICT_ALIGN,\t\t\t\t\\\n-    N_(\"Assume that unaligned accesses are handled by the system\") },\t\\\n-  {\"little-endian\",\t MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce little endian code\") },\t\t\t\t\t\\\n-  {\"little\",\t\t MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce little endian code\") },\t\t\t\t\t\\\n-  {\"big-endian\",\t-MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce big endian code\") },\t\t\t\t\t\\\n-  {\"big\",\t\t-MASK_LITTLE_ENDIAN,\t\t\t\t\\\n-    N_(\"Produce big endian code\") },\t\t\t\t\t\\\n-  {\"bit-word\",\t\t-MASK_NO_BITFIELD_WORD,\t\t\t\t\\\n-    N_(\"Allow bit-fields to cross word boundaries\") },\t\t\t\\\n-  {\"no-bit-word\",\t MASK_NO_BITFIELD_WORD,\t\t\t\t\\\n-    N_(\"Do not allow bit-fields to cross word boundaries\") },\t\t\\\n-  {\"regnames\",\t\t MASK_REGNAMES,\t\t\t\t\t\\\n-    N_(\"Use alternate register names\") },\t\t\t\t\\\n-  {\"no-regnames\",\t-MASK_REGNAMES,\t\t\t\t\t\\\n-    N_(\"Don't use alternate register names\") },\t\t\t\t\\\n+#undef\tEXTRA_SUBTARGET_SWITCHES\n+#define EXTRA_SUBTARGET_SWITCHES\t\t\t\t\t\\\n   {\"profile-kernel\",\t MASK_PROFILE_KERNEL,\t\t\t\t\\\n    N_(\"Call mcount for profiling before a function prologue\") },\t\\\n   {\"no-profile-kernel\",\t-MASK_PROFILE_KERNEL,\t\t\t\t\\\n    N_(\"Call mcount for profiling after a function prologue\") },\n \n-#undef\tSUBTARGET_OPTIONS\n-#define\tSUBTARGET_OPTIONS\n-\n-#undef\tSUBTARGET_OVERRIDE_OPTIONS\n-#define\tSUBTARGET_OVERRIDE_OPTIONS {}\n-\n /* We use glibc _mcount for profiling.  */\n-#define NO_PROFILE_COUNTERS 1\n-#define PROFILE_HOOK(LABEL) output_profile_hook (LABEL)\n+#define NO_PROFILE_COUNTERS TARGET_64BIT\n+#define PROFILE_HOOK(LABEL) \\\n+  do { if (TARGET_64BIT) output_profile_hook (LABEL); } while (0)\n \n /* We don't need to generate entries in .fixup.  */\n #undef RELOCATABLE_NEEDS_FIXUP\n \n-#define USER_LABEL_PREFIX  \"\"\n-\n /* This now supports a natural alignment mode. */\n /* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n #undef  ADJUST_FIELD_ALIGN\n #define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  (TARGET_ALIGN_NATURAL ? (COMPUTED) : \\\n-  (TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE \\\n-\t      ? get_inner_array_type (FIELD) \\\n-\t      : TREE_TYPE (FIELD)) == DFmode \\\n-   ? MIN ((COMPUTED), 32) : (COMPUTED)))\n+  ((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)\t\\\n+   ? 128\t\t\t\t\t\t\t\t\\\n+   : (TARGET_64BIT\t\t\t\t\t\t\t\\\n+      && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\\\n+      && TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE\t\t\\\n+\t\t    ? get_inner_array_type (FIELD)\t\t\t\\\n+\t\t    : TREE_TYPE (FIELD)) == DFmode)\t\t\t\\\n+   ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n+   : (COMPUTED))\n \n /* AIX increases natural record alignment to doubleword if the first\n    field is an FP double while the FP fields remain word aligned.  */\n #undef  ROUND_TYPE_ALIGN\n-#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\\\n-  ((TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\\\n-    || TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\\\n-    || TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\\\n-   && TYPE_FIELDS (STRUCT) != 0\t\t\t\t\\\n-   && TARGET_ALIGN_NATURAL == 0                         \\\n-   && DECL_MODE (TYPE_FIELDS (STRUCT)) == DFmode\t\\\n-   ? MAX (MAX ((COMPUTED), (SPECIFIED)), 64)\t\t\\\n+#define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)\t\t\\\n+  ((TARGET_ALTIVEC && TREE_CODE (STRUCT) == VECTOR_TYPE)\t\\\n+   ? MAX (MAX ((COMPUTED), (SPECIFIED)), 128)\t\t\t\\\n+   : (TARGET_64BIT\t\t\t\t\t\t\\\n+      && (TREE_CODE (STRUCT) == RECORD_TYPE\t\t\t\\\n+\t  || TREE_CODE (STRUCT) == UNION_TYPE\t\t\t\\\n+\t  || TREE_CODE (STRUCT) == QUAL_UNION_TYPE)\t\t\\\n+      && TYPE_FIELDS (STRUCT) != 0\t\t\t\t\\\n+      && TARGET_ALIGN_NATURAL == 0\t\t\t\t\\\n+      && DECL_MODE (TYPE_FIELDS (STRUCT)) == DFmode)\t\t\\\n+   ? MAX (MAX ((COMPUTED), (SPECIFIED)), 64)\t\t\t\\\n    : MAX ((COMPUTED), (SPECIFIED)))\n \n /* Indicate that jump tables go in the text section.  */\n #undef  JUMP_TABLES_IN_TEXT_SECTION\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n-/* 64-bit PowerPC Linux always has GPR13 fixed.  */\n-#define FIXED_R13\t\t1\n+#define JUMP_TABLES_IN_TEXT_SECTION TARGET_64BIT\n \n /* __throw will restore its own return address to be the same as the\n    return address of the function that the throw is being made to.\n    This is unfortunate, because we want to check the original\n    return address to see if we need to restore the TOC.\n    So we have to squirrel it away with this.  */\n-#define SETUP_FRAME_ADDRESSES() rs6000_aix_emit_builtin_unwind_init ()\n+#define SETUP_FRAME_ADDRESSES() \\\n+  do { if (TARGET_64BIT) rs6000_aix_emit_builtin_unwind_init (); } while (0)\n \n /* Override svr4.h  */\n #undef MD_EXEC_PREFIX\n@@ -165,17 +260,28 @@\n #define\tCPP_SYSV_SPEC \"\"\n \n #undef  TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()            \\\n-  do                                        \\\n-    {                                       \\\n-      builtin_define (\"__PPC__\");           \\\n-      builtin_define (\"__PPC64__\");         \\\n-      builtin_define (\"__powerpc__\");       \\\n-      builtin_define (\"__powerpc64__\");     \\\n-      builtin_define (\"__PIC__\");           \\\n-      builtin_assert (\"cpu=powerpc64\");     \\\n-      builtin_assert (\"machine=powerpc64\"); \\\n-    }                                       \\\n+#define TARGET_OS_CPP_BUILTINS()            \t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define (\"__PPC__\");\t\t\t\\\n+\t  builtin_define (\"__PPC64__\");\t\t\t\\\n+\t  builtin_define (\"__powerpc__\");\t\t\\\n+\t  builtin_define (\"__powerpc64__\");\t\t\\\n+\t  builtin_define (\"__PIC__\");\t\t\t\\\n+\t  builtin_assert (\"cpu=powerpc64\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc64\");\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"PPC\");\t\t\t\\\n+\t  builtin_define_std (\"powerpc\");\t\t\\\n+\t  builtin_assert (\"cpu=powerpc\");\t\t\\\n+\t  builtin_assert (\"machine=powerpc\");\t\t\\\n+\t  TARGET_OS_SYSV_CPP_BUILTINS ();\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n #undef  CPP_OS_DEFAULT_SPEC\n@@ -205,48 +311,40 @@\n #undef\tLINK_OS_DEFAULT_SPEC\n #define LINK_OS_DEFAULT_SPEC \"%(link_os_linux)\"\n \n-#undef  LINK_OS_LINUX_SPEC\n-#define LINK_OS_LINUX_SPEC \"-m elf64ppc %{!shared: %{!static: \\\n+#define LINK_OS_LINUX_SPEC32 \"-m elf32ppclinux %{!shared: %{!static: \\\n   %{rdynamic:-export-dynamic} \\\n-  %{!dynamic-linker:-dynamic-linker /lib64/ld64.so.1}}}\"\n-\n-#ifdef NATIVE_CROSS\n-#define STARTFILE_PREFIX_SPEC \"/usr/local/lib64/ /lib64/ /usr/lib64/\"\n-#endif\n+  %{!dynamic-linker:-dynamic-linker /lib/ld.so.1}}}\"\n \n-#undef  STARTFILE_LINUX_SPEC\n-#ifdef HAVE_LD_PIE\n-#define STARTFILE_LINUX_SPEC \"\\\n-%{!shared: %{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} crti.o%s \\\n-%{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n-#else\n-#define STARTFILE_LINUX_SPEC \"\\\n-%{!shared: %{pg|p:gcrt1.o%s;:crt1.o%s}} crti.o%s \\\n-%{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n-#endif\n-\n-#undef  ENDFILE_LINUX_SPEC\n-#define ENDFILE_LINUX_SPEC \"\\\n-%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+#define LINK_OS_LINUX_SPEC64 \"-m elf64ppc %{!shared: %{!static: \\\n+  %{rdynamic:-export-dynamic} \\\n+  %{!dynamic-linker:-dynamic-linker /lib64/ld64.so.1}}}\"\n \n #undef  TOC_SECTION_ASM_OP\n-#define TOC_SECTION_ASM_OP \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\"\n+#define TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT\t\t\t\t\t\t\\\n+   ? \"\\t.section\\t\\\".toc\\\",\\\"aw\\\"\"\t\t\t\\\n+   : \"\\t.section\\t\\\".got\\\",\\\"aw\\\"\")\n \n #undef  MINIMAL_TOC_SECTION_ASM_OP\n-#define MINIMAL_TOC_SECTION_ASM_OP \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"\n+#define MINIMAL_TOC_SECTION_ASM_OP \\\n+  (TARGET_64BIT\t\t\t\t\t\t\\\n+   ? \"\\t.section\\t\\\".toc1\\\",\\\"aw\\\"\"\t\t\t\\\n+   : ((TARGET_RELOCATABLE || flag_pic)\t\t\t\\\n+      ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\"\t\t\t\\\n+      : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"))\n \n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (PowerPC64 GNU/Linux)\");\n \n /* Must be at least as big as our pointer type.  */\n-#undef  SIZE_TYPE\n-#define SIZE_TYPE \"long unsigned int\"\n+#undef\tSIZE_TYPE\n+#define\tSIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"unsigned int\")\n \n-#undef  PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long int\"\n+#undef\tPTRDIFF_TYPE\n+#define\tPTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n \n-#undef  WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n+#undef\tWCHAR_TYPE\n+#define\tWCHAR_TYPE (TARGET_64BIT ? \"int\" : \"long int\")\n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n \n@@ -260,61 +358,39 @@\n \n /* PowerPC no-op instruction.  */\n #undef  RS6000_CALL_GLUE\n-#define RS6000_CALL_GLUE \"nop\"\n+#define RS6000_CALL_GLUE (TARGET_64BIT ? \"nop\" : \"cror 31,31,31\")\n \n #undef  RS6000_MCOUNT\n #define RS6000_MCOUNT \"_mcount\"\n \n /* FP save and restore routines.  */\n #undef  SAVE_FP_PREFIX\n-#define SAVE_FP_PREFIX \"._savef\"\n+#define SAVE_FP_PREFIX (TARGET_64BIT ? \"._savef\" : \"_savefpr_\")\n #undef  SAVE_FP_SUFFIX\n-#define SAVE_FP_SUFFIX \"\"\n+#define SAVE_FP_SUFFIX (TARGET_64BIT ? \"\" : \"_l\")\n #undef  RESTORE_FP_PREFIX\n-#define RESTORE_FP_PREFIX \"._restf\"\n+#define RESTORE_FP_PREFIX (TARGET_64BIT ? \"._restf\" : \"_restfpr_\")\n #undef  RESTORE_FP_SUFFIX\n-#define RESTORE_FP_SUFFIX \"\"\n+#define RESTORE_FP_SUFFIX (TARGET_64BIT ? \"\" : \"_l\")\n \n /* Dwarf2 debugging.  */\n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-#undef  ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\t.section\\t\\\".opd\\\",\\\"aw\\\"\\n\\t.align 3\\n\", (FILE));\t\\\n-      ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\t\t\\\n-      fputs (DOUBLE_INT_ASM_OP, (FILE));\t\t\t\t\\\n-      putc ('.', (FILE));\t\t\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fputs (\",.TOC.@tocbase,0\\n\\t.previous\\n\\t.size\\t\", (FILE));\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fputs (\",24\\n\\t.type\\t.\", (FILE));\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fputs (\",@function\\n\", (FILE));\t\t\t\t\t\\\n-      if (TREE_PUBLIC (DECL) && ! DECL_WEAK (DECL))\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-\t  fputs (\"\\t.globl\\t.\", (FILE));\t\t\t\t\\\n-\t  assemble_name ((FILE), (NAME));\t\t\t\t\\\n-\t  putc ('\\n', (FILE));\t\t\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      ASM_DECLARE_RESULT ((FILE), DECL_RESULT (DECL));\t\t\t\\\n-      putc ('.', (FILE));\t\t\t\t\t\t\\\n-      ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* This is how to declare the size of a function.  */\n #undef\tASM_DECLARE_FUNCTION_SIZE\n #define\tASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  fputs (\"\\t.size\\t.\", (FILE));\t\t\t\t\t\\\n+\t  fputs (\"\\t.size\\t\", (FILE));\t\t\t\t\t\\\n+\t  if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t    putc ('.', (FILE));\t\t\t\t\t\t\\\n \t  assemble_name ((FILE), (FNAME));\t\t\t\t\\\n-\t  fputs (\",.-.\", (FILE));\t\t\t\t\t\\\n+\t  fputs (\",.-\", (FILE));\t\t\t\t\t\\\n+\t  if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t    putc ('.', (FILE));\t\t\t\t\t\t\\\n \t  assemble_name ((FILE), (FNAME));\t\t\t\t\\\n \t  putc ('\\n', (FILE));\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n@@ -341,10 +417,16 @@\n        || (GET_CODE (X) == CONST_INT \t\t\t\t\t\\\n \t   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))\t\\\n        || (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n-\t   && (TARGET_POWERPC64\t\t\t\t\t\t\\\n-\t       || TARGET_MINIMAL_TOC\t\t\t\t\t\\\n-\t       || (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\\\n-\t\t   && ! TARGET_NO_FP_IN_TOC)))))\n+\t   && ((TARGET_64BIT\t\t\t\t\t\t\\\n+\t\t&& (TARGET_POWERPC64\t\t\t\t\t\\\n+\t\t    || TARGET_MINIMAL_TOC\t\t\t\t\\\n+\t\t    || (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\\\n+\t\t\t&& ! TARGET_NO_FP_IN_TOC)))\t\t\t\\\n+\t       || (!TARGET_64BIT\t\t\t\t\t\\\n+\t\t   && !TARGET_NO_FP_IN_TOC\t\t\t\t\\\n+\t\t   && !TARGET_RELOCATABLE\t\t\t\t\\\n+\t\t   && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\\\n+\t\t   && BITS_PER_WORD == HOST_BITS_PER_INT)))))\n \n /* This is the same as the dbxelf.h version, except that we need to\n    use the function code label, not the function descriptor.  */\n@@ -357,7 +439,9 @@ do\t\t\t\t\t\t\t\t\t\\\n     ASM_GENERATE_INTERNAL_LABEL (temp, \"LM\", sym_lineno);\t\t\\\n     fprintf (FILE, \"\\t.stabn 68,0,%d,\", LINE);\t\t\t\t\\\n     assemble_name (FILE, temp);\t\t\t\t\t\t\\\n-    fputs (\"-.\", FILE);\t\t\t\t\t\t\t\\\n+    putc ('-', FILE);\t\t\t\t\t\t\t\\\n+    if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n+      putc ('.', FILE);\t\t\t\t\t\t\t\\\n     assemble_name (FILE,\t\t\t\t\t\t\\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\\\n     putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n@@ -378,7 +462,8 @@ while (0)\n \tflab = IDENTIFIER_POINTER (current_function_func_begin_label);\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  putc ('.', FILE);\t\t\t\t\t\t\\\n+\t  if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t    putc ('.', FILE);\t\t\t\t\t\t\\\n \t  flab = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       assemble_name (FILE, flab);\t\t\t\t\t\\\n@@ -395,19 +480,175 @@ while (0)\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"%s\\\"\\\",%d,0,0,\", ASM_STABS_OP, N_FUN);\t\t\\\n       assemble_name (FILE, LSCOPE);\t\t\t\t\t\\\n-      fputs (\"-.\", FILE);\t\t\t\t\t\t\\\n+      putc ('-', FILE);\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n+        putc ('.', FILE);\t\t\t\t\t\t\\\n       assemble_name (FILE, XSTR (XEXP (DECL_RTL (DECL), 0), 0));\t\\\n       putc ('\\n', FILE);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Override sysv4.h as these are ABI_V4 only.  */\n-#undef\tASM_OUTPUT_REG_PUSH\n-#undef\tASM_OUTPUT_REG_POP\n-\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.  */\n #undef\tASM_PREFERRED_EH_DATA_FORMAT\n #define\tASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n-  (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_udata8)\n+  ((TARGET_64BIT || flag_pic || TARGET_RELOCATABLE)\t\t\t\\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel\t\t\\\n+      | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))\t\t\\\n+   : DW_EH_PE_absptr)\n+\n+/* For backward compatibility, we must continue to use the AIX\n+   structure return convention.  */\n+#undef DRAFT_V4_STRUCT_RET\n+#define DRAFT_V4_STRUCT_RET (!TARGET_64BIT)\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.  */\n+\n+#ifdef IN_LIBGCC2\n+#include <signal.h>\n+#include <sys/ucontext.h>\n+\n+#ifdef __powerpc64__\n+enum { SIGNAL_FRAMESIZE = 128 };\n+#else\n+enum { SIGNAL_FRAMESIZE = 64 };\n+#endif\n+#endif\n+\n+#ifdef __powerpc64__\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR(CONTEXT, FS, SUCCESS)\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    unsigned char *pc_ = (CONTEXT)->ra;\t\t\t\t\t\\\n+    struct sigcontext *sc_;\t\t\t\t\t\t\\\n+    long new_cfa_;\t\t\t\t\t\t\t\\\n+    int i_;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* addi r1, r1, 128; li r0, 0x0077; sc  (sigreturn) */\t\t\\\n+    /* addi r1, r1, 128; li r0, 0x00AC; sc  (rt_sigreturn) */\t\t\\\n+    if (*(unsigned int *) (pc_+0) != 0x38210000 + SIGNAL_FRAMESIZE\t\\\n+\t|| *(unsigned int *) (pc_+8) != 0x44000002)\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    if (*(unsigned int *) (pc_+4) == 0x38000077)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct sigframe {\t\t\t\t\t\t\\\n+\t  char gap[SIGNAL_FRAMESIZE];\t\t\t\t\t\\\n+\t  struct sigcontext sigctx;\t\t\t\t\t\\\n+\t} *rt_ = (CONTEXT)->cfa;\t\t\t\t\t\\\n+\tsc_ = &rt_->sigctx;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else if (*(unsigned int *) (pc_+4) == 0x380000AC)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct rt_sigframe {\t\t\t\t\t\t\\\n+\t  int tramp[6];\t\t\t\t\t\t\t\\\n+\t  struct siginfo *pinfo;\t\t\t\t\t\\\n+\t  struct ucontext *puc;\t\t\t\t\t\t\\\n+\t} *rt_ = (struct rt_sigframe *) pc_;\t\t\t\t\\\n+\tsc_ = &rt_->puc->uc_mcontext;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    new_cfa_ = sc_->regs->gpr[STACK_POINTER_REGNUM];\t\t\t\\\n+    (FS)->cfa_how = CFA_REG_OFFSET;\t\t\t\t\t\\\n+    (FS)->cfa_reg = STACK_POINTER_REGNUM;\t\t\t\t\\\n+    (FS)->cfa_offset = new_cfa_ - (long) (CONTEXT)->cfa;\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    for (i_ = 0; i_ < 32; i_++)\t\t\t\t\t\t\\\n+      if (i_ != STACK_POINTER_REGNUM)\t\t\t\t\t\\\n+\t{\t    \t\t\t\t\t\t\t\\\n+\t  (FS)->regs.reg[i_].how = REG_SAVED_OFFSET;\t\t\t\\\n+\t  (FS)->regs.reg[i_].loc.offset \t\t\t\t\\\n+\t    = (long)&(sc_->regs->gpr[i_]) - new_cfa_;\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    (FS)->regs.reg[LINK_REGISTER_REGNUM].how = REG_SAVED_OFFSET;\t\\\n+    (FS)->regs.reg[LINK_REGISTER_REGNUM].loc.offset \t\t\t\\\n+      = (long)&(sc_->regs->link) - new_cfa_;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* The unwinder expects the IP to point to the following insn,\t\\\n+       whereas the kernel returns the address of the actual\t\t\\\n+       faulting insn. We store NIP+4 in an unused register slot to\t\\\n+       get the same result for multiple evaluation of the same signal\t\\\n+       frame.  */\t\t\t\t\t\t\t\\\n+    sc_->regs->gpr[47] = sc_->regs->nip + 4;  \t\t\t\t\\\n+    (FS)->regs.reg[CR0_REGNO].how = REG_SAVED_OFFSET;\t\t\t\\\n+    (FS)->regs.reg[CR0_REGNO].loc.offset \t\t\t\t\\\n+      = (long)&(sc_->regs->gpr[47]) - new_cfa_;\t\t\t\t\\\n+    (FS)->retaddr_column = CR0_REGNO;\t\t\t\t\t\\\n+    goto SUCCESS;\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#else\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR(CONTEXT, FS, SUCCESS)\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    unsigned char *pc_ = (CONTEXT)->ra;\t\t\t\t\t\\\n+    struct sigcontext *sc_;\t\t\t\t\t\t\\\n+    long new_cfa_;\t\t\t\t\t\t\t\\\n+    int i_;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* li r0, 0x7777; sc  (sigreturn old)  */\t\t\t\t\\\n+    /* li r0, 0x0077; sc  (sigreturn new)  */\t\t\t\t\\\n+    /* li r0, 0x6666; sc  (rt_sigreturn old)  */\t\t\t\\\n+    /* li r0, 0x00AC; sc  (rt_sigreturn new)  */\t\t\t\\\n+    if (*(unsigned int *) (pc_+4) != 0x44000002)\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    if (*(unsigned int *) (pc_+0) == 0x38007777\t\t\t\t\\\n+\t|| *(unsigned int *) (pc_+0) == 0x38000077)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct sigframe {\t\t\t\t\t\t\\\n+\t  char gap[SIGNAL_FRAMESIZE];\t\t\t\t\t\\\n+\t  struct sigcontext sigctx;\t\t\t\t\t\\\n+\t} *rt_ = (CONTEXT)->cfa;\t\t\t\t\t\\\n+\tsc_ = &rt_->sigctx;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else if (*(unsigned int *) (pc_+0) == 0x38006666\t\t\t\\\n+\t     || *(unsigned int *) (pc_+0) == 0x380000AC)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct rt_sigframe {\t\t\t\t\t\t\\\n+\t  char gap[SIGNAL_FRAMESIZE];\t\t\t\t\t\\\n+\t  unsigned long _unused[2];\t\t\t\t\t\\\n+\t  struct siginfo *pinfo;\t\t\t\t\t\\\n+\t  void *puc;\t\t\t\t\t\t\t\\\n+\t  struct siginfo info;\t\t\t\t\t\t\\\n+\t  struct ucontext uc;\t\t\t\t\t\t\\\n+\t} *rt_ = (CONTEXT)->cfa;\t\t\t\t\t\\\n+\tsc_ = &rt_->uc.uc_mcontext;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    new_cfa_ = sc_->regs->gpr[STACK_POINTER_REGNUM];\t\t\t\\\n+    (FS)->cfa_how = CFA_REG_OFFSET;\t\t\t\t\t\\\n+    (FS)->cfa_reg = STACK_POINTER_REGNUM;\t\t\t\t\\\n+    (FS)->cfa_offset = new_cfa_ - (long) (CONTEXT)->cfa;\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    for (i_ = 0; i_ < 32; i_++)\t\t\t\t\t\t\\\n+      if (i_ != STACK_POINTER_REGNUM)\t\t\t\t\t\\\n+\t{\t    \t\t\t\t\t\t\t\\\n+\t  (FS)->regs.reg[i_].how = REG_SAVED_OFFSET;\t\t\t\\\n+\t  (FS)->regs.reg[i_].loc.offset \t\t\t\t\\\n+\t    = (long)&(sc_->regs->gpr[i_]) - new_cfa_;\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    (FS)->regs.reg[LINK_REGISTER_REGNUM].how = REG_SAVED_OFFSET;\t\\\n+    (FS)->regs.reg[LINK_REGISTER_REGNUM].loc.offset \t\t\t\\\n+      = (long)&(sc_->regs->link) - new_cfa_;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* The unwinder expects the IP to point to the following insn,\t\\\n+       whereas the kernel returns the address of the actual\t\t\\\n+       faulting insn. We store NIP+4 in an unused register slot to\t\\\n+       get the same result for multiple evaluation of the same signal\t\\\n+       frame.  */\t\t\t\t\t\t\t\\\n+    sc_->regs->gpr[47] = sc_->regs->nip + 4;  \t\t\t\t\\\n+    (FS)->regs.reg[CR0_REGNO].how = REG_SAVED_OFFSET;\t\t\t\\\n+    (FS)->regs.reg[CR0_REGNO].loc.offset \t\t\t\t\\\n+      = (long)&(sc_->regs->gpr[47]) - new_cfa_;\t\t\t\t\\\n+    (FS)->retaddr_column = CR0_REGNO;\t\t\t\t\t\\\n+    goto SUCCESS;\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#endif"}, {"sha": "0553283aa751663bf88aa68e0d32445585cddefc", "filename": "gcc/config/rs6000/ppc-asm.h", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fppc-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fppc-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fppc-asm.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -95,21 +95,15 @@\n  * the real function with one or two leading periods respectively.\n  */\n \n-#ifdef _RELOCATABLE\n-#define DESC_SECTION \".got2\"\n-#else\n-#define DESC_SECTION \".got1\"\n-#endif\n-\n-#if defined(_CALL_AIXDESC)\n+#if defined (__powerpc64__)\n #define FUNC_NAME(name) GLUE(.,name)\n #define JUMP_TARGET(name) FUNC_NAME(name)\n #define FUNC_START(name) \\\n-\t.section DESC_SECTION,\"aw\"; \\\n+\t.section \".opd\",\"aw\"; \\\n name: \\\n-\t.long GLUE(.,name); \\\n-\t.long _GLOBAL_OFFSET_TABLE_; \\\n-\t.long 0; \\\n+\t.quad GLUE(.,name); \\\n+\t.quad .TOC.@tocbase; \\\n+\t.quad 0; \\\n \t.previous; \\\n \t.type GLUE(.,name),@function; \\\n \t.globl name; \\\n@@ -120,15 +114,22 @@ GLUE(.,name):\n GLUE(.L,name): \\\n \t.size GLUE(.,name),GLUE(.L,name)-GLUE(.,name)\n \n-#elif defined (__powerpc64__)\n+#elif defined(_CALL_AIXDESC)\n+\n+#ifdef _RELOCATABLE\n+#define DESC_SECTION \".got2\"\n+#else\n+#define DESC_SECTION \".got1\"\n+#endif\n+\n #define FUNC_NAME(name) GLUE(.,name)\n #define JUMP_TARGET(name) FUNC_NAME(name)\n #define FUNC_START(name) \\\n-\t.section \".opd\",\"aw\"; \\\n+\t.section DESC_SECTION,\"aw\"; \\\n name: \\\n-\t.quad GLUE(.,name); \\\n-\t.quad .TOC.@tocbase; \\\n-\t.quad 0; \\\n+\t.long GLUE(.,name); \\\n+\t.long _GLOBAL_OFFSET_TABLE_; \\\n+\t.long 0; \\\n \t.previous; \\\n \t.type GLUE(.,name),@function; \\\n \t.globl name; \\\n@@ -140,6 +141,7 @@ GLUE(.L,name): \\\n \t.size GLUE(.,name),GLUE(.L,name)-GLUE(.,name)\n \n #else\n+\n #define FUNC_NAME(name) GLUE(__USER_LABEL_PREFIX__,name)\n #if defined __PIC__ || defined __pic__\n #define JUMP_TARGET(name) FUNC_NAME(name@plt)\n@@ -155,4 +157,3 @@ FUNC_NAME(name):\n GLUE(.L,name): \\\n \t.size FUNC_NAME(name),GLUE(.L,name)-FUNC_NAME(name)\n #endif\n-"}, {"sha": "75f7d907b3ac764f533e2e8d5a0a5c823792bee2", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -156,6 +156,8 @@ extern rtx rs6000_function_value (tree, tree);\n extern rtx rs6000_libcall_value (enum machine_mode);\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern int function_ok_for_sibcall PARAMS ((tree));\n+extern void rs6000_elf_declare_function_name\n+  PARAMS ((FILE *, const char *, tree));\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));"}, {"sha": "d37014f0a5d0598f169c50da8f541c1b9735fa95", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 94, "deletions": 20, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -124,7 +124,7 @@ int rs6000_pic_labelno;\n \n #ifdef USING_ELFOS_H\n /* Which abi to adhere to */\n-const char *rs6000_abi_name = RS6000_ABI_NAME;\n+const char *rs6000_abi_name;\n \n /* Semantics of the small data area */\n enum rs6000_sdata_type rs6000_sdata = SDATA_DATA;\n@@ -8661,11 +8661,10 @@ print_operand (file, x, code)\n \t      break;\n \t    }\n \t}\n-#if TARGET_AIX\n-      RS6000_OUTPUT_BASENAME (file, XSTR (x, 0));\n-#else\n-      assemble_name (file, XSTR (x, 0));\n-#endif\n+      if (TARGET_AIX)\n+\tRS6000_OUTPUT_BASENAME (file, XSTR (x, 0));\n+      else\n+\tassemble_name (file, XSTR (x, 0));\n       return;\n \n     case 'Z':\n@@ -10566,7 +10565,6 @@ create_TOC_reference (symbol)\n \t\t gen_rtx_SYMBOL_REF (Pmode, toc_label_name))));\n }\n \n-#if TARGET_AIX\n /* __throw will restore its own return address to be the same as the\n    return address of the function that the throw is being made to.\n    This is unfortunate, because we want to check the original\n@@ -10694,7 +10692,6 @@ rs6000_emit_eh_toc_restore (stacksize)\n   emit_note (NULL, NOTE_INSN_LOOP_END);\n   emit_label (loop_exit);\n }\n-#endif /* TARGET_AIX */\n \f\n /* This ties together stack memory (MEM with an alias set of\n    rs6000_sr_alias_set) and the change to the stack pointer.  */\n@@ -12885,20 +12882,24 @@ output_profile_hook (labelno)\n \n   if (DEFAULT_ABI == ABI_AIX)\n     {\n-#ifdef NO_PROFILE_COUNTERS\n-      emit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 0);\n-#else\n-      char buf[30];\n-      const char *label_name;\n-      rtx fun;\n+#ifndef NO_PROFILE_COUNTERS\n+# define NO_PROFILE_COUNTERS 0\n+#endif\n+      if (NO_PROFILE_COUNTERS)  \n+\temit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 0);\n+      else\n+\t{\n+\t  char buf[30];\n+\t  const char *label_name;\n+\t  rtx fun;\n \n-      ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n-      label_name = (*targetm.strip_name_encoding) (ggc_strdup (buf));\n-      fun = gen_rtx_SYMBOL_REF (Pmode, label_name);\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n+\t  label_name = (*targetm.strip_name_encoding) (ggc_strdup (buf));\n+\t  fun = gen_rtx_SYMBOL_REF (Pmode, label_name);\n \n-      emit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 1,\n-                         fun, Pmode);\n-#endif\n+\t  emit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 1,\n+\t\t\t     fun, Pmode);\n+\t}\n     }\n   else if (DEFAULT_ABI == ABI_DARWIN)\n     {\n@@ -13934,6 +13935,79 @@ rs6000_elf_asm_out_destructor (symbol, priority)\n   else\n     assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n }\n+\n+void\n+rs6000_elf_declare_function_name (file, name, decl)\n+     FILE *file;\n+     const char *name;\n+     tree decl;\n+{\n+  if (TARGET_64BIT)\n+    {\n+      fputs (\"\\t.section\\t\\\".opd\\\",\\\"aw\\\"\\n\\t.align 3\\n\", file);\n+      ASM_OUTPUT_LABEL (file, name);\n+      fputs (DOUBLE_INT_ASM_OP, file);\n+      putc ('.', file);\n+      assemble_name (file, name);\n+      fputs (\",.TOC.@tocbase,0\\n\\t.previous\\n\\t.size\\t\", file);\n+      assemble_name (file, name);\n+      fputs (\",24\\n\\t.type\\t.\", file);\n+      assemble_name (file, name);\n+      fputs (\",@function\\n\", file);\n+      if (TREE_PUBLIC (decl) && ! DECL_WEAK (decl))\n+\t{\n+\t  fputs (\"\\t.globl\\t.\", file);\n+\t  assemble_name (file, name);\n+\t  putc ('\\n', file);\n+\t}\n+      ASM_DECLARE_RESULT (file, DECL_RESULT (decl));\n+      putc ('.', file);\n+      ASM_OUTPUT_LABEL (file, name);\n+      return;\n+    }\n+\n+  if (TARGET_RELOCATABLE\n+      && (get_pool_size () != 0 || current_function_profile)\n+      && uses_TOC())\n+    {\n+      char buf[256];\n+\n+      (*targetm.asm_out.internal_label) (file, \"LCL\", rs6000_pic_labelno);\n+\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n+      fprintf (file, \"\\t.long \");\n+      assemble_name (file, buf);\n+      putc ('-', file);\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", rs6000_pic_labelno);\n+      assemble_name (file, buf);\n+      putc ('\\n', file);\n+    }\n+\n+  ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n+  ASM_DECLARE_RESULT (file, DECL_RESULT (decl));\n+\n+  if (DEFAULT_ABI == ABI_AIX)\n+    {\n+      const char *desc_name, *orig_name;\n+\n+      orig_name = (*targetm.strip_name_encoding) (name);\n+      desc_name = orig_name;\n+      while (*desc_name == '.')\n+\tdesc_name++;\n+\n+      if (TREE_PUBLIC (decl))\n+\tfprintf (file, \"\\t.globl %s\\n\", desc_name);\n+\n+      fprintf (file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n+      fprintf (file, \"%s:\\n\", desc_name);\n+      fprintf (file, \"\\t.long %s\\n\", orig_name);\n+      fputs (\"\\t.long _GLOBAL_OFFSET_TABLE_\\n\", file);\n+      if (DEFAULT_ABI == ABI_AIX)\n+\tfputs (\"\\t.long 0\\n\", file);\n+      fprintf (file, \"\\t.previous\\n\");\n+    }\n+  ASM_OUTPUT_LABEL (file, name);\n+}\n #endif\n \n #if TARGET_XCOFF"}, {"sha": "fc4d2a7628572a789b61d330811424ea12670e8f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -14581,9 +14581,8 @@\n   \"\"\n   \"\n {\n-#if TARGET_AIX\n-  rs6000_emit_eh_toc_restore (EH_RETURN_STACKADJ_RTX);\n-#endif\n+  if (TARGET_AIX)\n+    rs6000_emit_eh_toc_restore (EH_RETURN_STACKADJ_RTX);\n   if (TARGET_32BIT)\n     emit_insn (gen_eh_set_lr_si (operands[0]));\n   else"}, {"sha": "cc97b0ac6f52b169161172ac863339ffbfe7f909", "filename": "gcc/config/rs6000/sol-ci.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fsol-ci.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fsol-ci.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol-ci.asm?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -39,6 +39,7 @@\n \t.file\t\"scrti.s\"\n \t.ident\t\"GNU C scrti.s\"\n \n+#ifndef __powerpc64__\n # Start of .text\n \t.section \".text\"\n \t.globl\t_ex_text0\n@@ -102,3 +103,4 @@ _fini:\tstwu\t%r1,-16(%r1)\n \t.space 4\n \t.weak\tenviron\n \t.set\tenviron,_environ\n+#endif"}, {"sha": "673540f7a1eb9044cf266d8458443edf8d814c65", "filename": "gcc/config/rs6000/sol-cn.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fsol-cn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fsol-cn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol-cn.asm?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -39,6 +39,7 @@\n \t.file\t\"scrtn.s\"\n \t.ident\t\"GNU C scrtn.s\"\n \n+#ifndef __powerpc64__\n # Default versions of exception handling register/deregister\n \t.weak\t_ex_register\n \t.weak\t_ex_deregister\n@@ -80,3 +81,4 @@ _ex_range1:\n \tmtlr\t%r0\n \taddi\t%r1,%r1,16\n \tblr\n+#endif"}, {"sha": "57b26e39bc7f9f850078e1367ff358398066e84d", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 42, "deletions": 55, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -149,6 +149,10 @@ extern const char *rs6000_tls_size_string; /* For -mtls-size= */\n     N_(\"Set the PPC_EMB bit in the ELF flags header\") },\t\t\\\n   { \"windiss\",           0, N_(\"Use the WindISS simulator\") },          \\\n   { \"shlib\",\t\t 0, N_(\"no description yet\") },\t\t\t\\\n+  { \"64\",\t\t MASK_64BIT | MASK_POWERPC64 | MASK_POWERPC,\t\\\n+\t\t\t N_(\"Generate 64-bit code\") },\t\t\t\\\n+  { \"32\",\t\t - (MASK_64BIT | MASK_POWERPC64),\t\t\\\n+\t\t\t N_(\"Generate 32-bit code\") },\t\t\t\\\n   EXTRA_SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n   { \"newlib\",\t\t 0, N_(\"no description yet\") },\n \n@@ -172,6 +176,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (!g_switch_set)\t\t\t\t\t\t\t\\\n     g_switch_value = SDATA_DEFAULT_SIZE;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  if (rs6000_abi_name == NULL)\t\t\t\t\t\t\\\n+    rs6000_abi_name = RS6000_ABI_NAME;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if (!strcmp (rs6000_abi_name, \"sysv\"))\t\t\t\t\\\n     rs6000_current_abi = ABI_V4;\t\t\t\t\t\\\n   else if (!strcmp (rs6000_abi_name, \"sysv-noeabi\"))\t\t\t\\\n@@ -274,7 +281,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t     rs6000_abi_name);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic > 1 && rs6000_current_abi == ABI_AIX)\t\t\t\\\n+  if (!TARGET_64BIT && flag_pic > 1 && rs6000_current_abi == ABI_AIX)\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       flag_pic = 0;\t\t\t\t\t\t\t\\\n       error (\"-fPIC and -mcall-%s are incompatible\",\t\t\t\\\n@@ -293,9 +300,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   else if (TARGET_RELOCATABLE)\t\t\t\t\t\t\\\n     flag_pic = 2;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n+#ifndef RS6000_BI_ARCH\n+# define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if ((TARGET_DEFAULT ^ target_flags) & MASK_64BIT)\t\t\t\\\n+    error (\"-m%s not supported in this configuration\",\t\t\t\\\n+\t   (target_flags & MASK_64BIT) ? \"64\" : \"32\");\t\t\t\\\n+} while (0)\n+#endif\n \n /* Override rs6000.h definition.  */\n #undef\tTARGET_DEFAULT\n@@ -590,51 +604,7 @@ extern int rs6000_pic_labelno;\n /* Override elfos.h definition.  */\n #undef\tASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    const char *const init_ptr = (TARGET_64BIT) ? \".quad\" : \".long\";\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_RELOCATABLE \t\t\t\t\t\t\\\n-\t&& (get_pool_size () != 0 || current_function_profile)\t\t\\\n-\t&& uses_TOC())\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tchar buf[256];\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t(*targetm.asm_out.internal_label) (FILE, \"LCL\", rs6000_pic_labelno); \\\n-\t\t\t\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\t\t\t\\\n-\tfprintf (FILE, \"\\t%s \", init_ptr);\t\t\t\t\\\n-\tassemble_name (FILE, buf);\t\t\t\t\t\\\n-\tputc ('-', FILE);\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", rs6000_pic_labelno);\t\\\n-\tassemble_name (FILE, buf);\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\t\t\\\n-    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (DEFAULT_ABI == ABI_AIX)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tconst char *desc_name, *orig_name;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-        orig_name = (*targetm.strip_name_encoding) (NAME);\t\t\\\n-        desc_name = orig_name;\t\t\t\t\t\t\\\n-\twhile (*desc_name == '.')\t\t\t\t\t\\\n-\t  desc_name++;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (TREE_PUBLIC (DECL))\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.globl %s\\n\", desc_name);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\t\t\\\n-\tfprintf (FILE, \"%s:\\n\", desc_name);\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s %s\\n\", init_ptr, orig_name);\t\t\\\n-\tfprintf (FILE, \"\\t%s _GLOBAL_OFFSET_TABLE_\\n\", init_ptr);\t\\\n-\tif (DEFAULT_ABI == ABI_AIX)\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s 0\\n\", init_ptr);\t\t\t\t\\\n-\tfprintf (FILE, \"\\t.previous\\n\");\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n+  rs6000_elf_declare_function_name ((FILE), (NAME), (DECL))\n \n /* The USER_LABEL_PREFIX stuff is affected by the -fleading-underscore\n    flag.  The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */\n@@ -789,6 +759,25 @@ extern int fixuplabelno;\n #define\tTARGET_VERSION fprintf (stderr, \" (PowerPC System V.4)\");\n #endif\n \f\n+#define TARGET_OS_SYSV_CPP_BUILTINS()\t  \\\n+  do                                      \\\n+    {                                     \\\n+      if (flag_pic == 1)\t\t  \\\n+        {\t\t\t\t  \\\n+\t  builtin_define (\"__pic__=1\");\t  \\\n+\t  builtin_define (\"__PIC__=1\");\t  \\\n+        }\t\t\t\t  \\\n+      else if (flag_pic == 2)\t\t  \\\n+        {\t\t\t\t  \\\n+\t  builtin_define (\"__pic__=2\");\t  \\\n+\t  builtin_define (\"__PIC__=2\");\t  \\\n+        }\t\t\t\t  \\\n+      if (target_flags_explicit\t\t  \\\n+\t  & MASK_RELOCATABLE)\t\t  \\\n+\tbuiltin_define (\"_RELOCATABLE\");  \\\n+    }                                     \\\n+  while (0)\n+\n #ifndef\tTARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()          \\\n   do                                      \\\n@@ -800,6 +789,7 @@ extern int fixuplabelno;\n       builtin_assert (\"system=svr4\");     \\\n       builtin_assert (\"cpu=powerpc\");     \\\n       builtin_assert (\"machine=powerpc\"); \\\n+      TARGET_OS_SYSV_CPP_BUILTINS ();\t  \\\n     }                                     \\\n   while (0)\n #endif\n@@ -945,14 +935,9 @@ extern int fixuplabelno;\n \n #define LINK_OS_DEFAULT_SPEC \"\"\n \n-#define CPP_SYSV_SPEC \\\n-\"%{mrelocatable*: -D_RELOCATABLE} \\\n-%{fpic|fpie: -D__PIC__=1 -D__pic__=1} \\\n-%{!fpic: %{fPIC|fPIE: -D__PIC__=2 -D__pic__=2}}\"\n-\n /* Override rs6000.h definition.  */\n #undef\tCPP_SPEC\n-#define\tCPP_SPEC \"%{posix: -D_POSIX_SOURCE} %(cpp_sysv) \\\n+#define\tCPP_SPEC \"%{posix: -D_POSIX_SOURCE} \\\n %{mads         : %(cpp_os_ads)         ; \\\n   myellowknife : %(cpp_os_yellowknife) ; \\\n   mmvme        : %(cpp_os_mvme)        ; \\\n@@ -1219,7 +1204,6 @@ ncrtn.o%s\"\n /* Override rs6000.h definition.  */\n #undef\tSUBTARGET_EXTRA_SPECS\n #define\tSUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n-  { \"cpp_sysv\",\t\t\tCPP_SYSV_SPEC },\t\t\t\\\n   { \"crtsavres_default\",        CRTSAVRES_DEFAULT_SPEC },              \\\n   { \"lib_ads\",\t\t\tLIB_ADS_SPEC },\t\t\t\t\\\n   { \"lib_yellowknife\",\t\tLIB_YELLOWKNIFE_SPEC },\t\t\t\\\n@@ -1288,7 +1272,10 @@ ncrtn.o%s\"\n   { \"cpp_os_linux\",\t\tCPP_OS_LINUX_SPEC },\t\t\t\\\n   { \"cpp_os_netbsd\",\t\tCPP_OS_NETBSD_SPEC },\t\t\t\\\n   { \"cpp_os_windiss\",           CPP_OS_WINDISS_SPEC },                  \\\n-  { \"cpp_os_default\",\t\tCPP_OS_DEFAULT_SPEC },\n+  { \"cpp_os_default\",\t\tCPP_OS_DEFAULT_SPEC },\t\t\t\\\n+  SUBSUBTARGET_EXTRA_SPECS\n+\n+#define\tSUBSUBTARGET_EXTRA_SPECS\n \n /* Define this macro as a C expression for the initializer of an\n    array of string to tell the driver program which options are"}, {"sha": "b94975e0c1d56a5233f21cb403cabc0dec5f533c", "filename": "gcc/config/rs6000/t-linux64", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-linux64?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -1,19 +1,32 @@\n-# Override t-linux.  We don't want -fPIC.\n-CRTSTUFF_T_CFLAGS_S =\n-TARGET_LIBGCC2_CFLAGS =\n+# These functions are needed for soft-float on powerpc64-linux.\n+LIB2FUNCS_EXTRA = tramp.S $(srcdir)/config/rs6000/ppc64-fp.c\n \n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o \\\n-\t\t\tcrtsavres.o\n+# Modify the shared lib version file\n+SHLIB_MKMAP_OPTS = -v dotsyms=1\n \n-# These functions are needed for soft-float on powerpc64-linux.\n-LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/ppc64-fp.c\n+MULTILIB_OPTIONS        = m64/m32 msoft-float\n+MULTILIB_DIRNAMES       = 64 32 nof\n+MULTILIB_EXTRA_OPTS     = fPIC mstrict-align\n+MULTILIB_EXCEPTIONS     = m64/msoft-float\n+MULTILIB_EXCLUSIONS     = m64/!m32/msoft-float\n+MULTILIB_OSDIRNAMES\t= ../lib64 ../lib nof\n+MULTILIB_MATCHES        = $(MULTILIB_MATCHES_FLOAT)\n \n-# ld provides these functions as needed.\n-crtsavres.S:\n-\techo >crtsavres.S\n+TARGET_LIBGCC2_CFLAGS = -mno-minimal-toc -fPIC\n \n-$(T)crtsavres.o: crtsavres.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavres.S -o $(T)crtsavres.o\n+# We want fine grained libraries, so use the new code to build the\n+# floating point emulation libraries.\n+# fp-bit is only to be used by 32-bit multilibs\n+FPBIT = fp-bit32.c\n+DPBIT = dp-bit32.c\n \n-# Modify the shared lib version file\n-SHLIB_MKMAP_OPTS = -v dotsyms=1\n+dp-bit32.c: $(srcdir)/config/fp-bit.c\n+\t( echo '#ifndef __powerpc64__'; \\\n+\t  cat $(srcdir)/config/fp-bit.c; \\\n+\t  echo '#endif' ) > dp-bit32.c\n+\n+fp-bit32.c: $(srcdir)/config/fp-bit.c\n+\t( echo '#ifndef __powerpc64__'; \\\n+\t  echo '#define FLOAT'; \\\n+\t  cat $(srcdir)/config/fp-bit.c; \\\n+\t  echo '#endif' ) > fp-bit32.c"}, {"sha": "284f938607423c0220716b77716c1ae7ca7a9333", "filename": "gcc/config/rs6000/tramp.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Ftramp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftramp.asm?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -39,6 +39,7 @@\n \t.section \".text\"\n \t#include \"ppc-asm.h\"\n \n+#ifndef __powerpc64__\n \t.type\ttrampoline_initial,@object\n \t.align\t2\n trampoline_initial:\n@@ -107,3 +108,4 @@ FUNC_START(__trampoline_setup)\n \tbl\tJUMP_TARGET(abort)\n FUNC_END(__trampoline_setup)\n \n+#endif"}, {"sha": "4371ca30431a5ccb39733661559c50a472726bbb", "filename": "gcc/config/rs6000/x-linux64", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fx-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Frs6000%2Fx-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-linux64?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -0,0 +1,2 @@\n+# parts of gcc need more than a 64k TOC.\n+X_CFLAGS = -mminimal-toc"}, {"sha": "858dcd8b28ff51bc80b1748d83dc551d66007b90", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -942,7 +942,7 @@ typedef struct xtensa_args {\n    _mcount uses a window size of 8 to make sure that it doesn't clobber\n    any incoming argument values. */\n \n-#define NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS\t1\n \n #define FUNCTION_PROFILER(FILE, LABELNO) \\\n   do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "6813c39f076845869fd9753a6bc7e550dd41460c", "filename": "gcc/configure", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -8127,6 +8127,7 @@ gcc_cv_as_tls=no\n conftest_s=\n tls_first_major=\n tls_first_minor=\n+tls_as_opt=\n case \"$target\" in\n   alpha*-*-*)\n     conftest_s='\n@@ -8224,6 +8225,7 @@ x3:\t.space 4\n \taddi 9,9,x2@tprel@l'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=-a32\n \t;;\n   powerpc64-*-*)\n     conftest_s='\n@@ -8257,6 +8259,7 @@ x3:\t.space 8\n \tnop'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=-a64\n \t;;\n   s390-*-*)\n     conftest_s='\n@@ -8275,6 +8278,7 @@ foo:\t.long\t25\n \tbas\t%r14,0(%r1,%r13):tls_ldcall:foo'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=-m31\n \t;;\n   s390x-*-*)\n     conftest_s='\n@@ -8292,6 +8296,7 @@ foo:\t.long\t25\n \tbrasl\t%r14,__tls_get_offset@PLT:tls_ldcall:foo'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=\"-m64 -Aesame\"\n \t;;\n esac\n if test -z \"$tls_first_major\"; then\n@@ -8309,7 +8314,7 @@ fi\n \n elif test x$gcc_cv_as != x; then\n   echo \"$conftest_s\" > conftest.s\n-  if $gcc_cv_as --fatal-warnings -o conftest.o conftest.s > /dev/null 2>&1\n+  if $gcc_cv_as $tls_as_opt --fatal-warnings -o conftest.o conftest.s > /dev/null 2>&1\n   then\n     gcc_cv_as_tls=yes\n   fi"}, {"sha": "b9e48324c600f416a9d38cbe81aa68befb24e3e8", "filename": "gcc/configure.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -2052,6 +2052,7 @@ gcc_cv_as_tls=no\n conftest_s=\n tls_first_major=\n tls_first_minor=\n+tls_as_opt=\n case \"$target\" in\n changequote(,)dnl\n   alpha*-*-*)\n@@ -2151,6 +2152,7 @@ x3:\t.space 4\n \taddi 9,9,x2@tprel@l'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=-a32\n \t;;\n   powerpc64-*-*)\n     conftest_s='\n@@ -2184,6 +2186,7 @@ x3:\t.space 8\n \tnop'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=-a64\n \t;;\n   s390-*-*)\n     conftest_s='\n@@ -2202,6 +2205,7 @@ foo:\t.long\t25\n \tbas\t%r14,0(%r1,%r13):tls_ldcall:foo'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=-m31\n \t;;\n   s390x-*-*)\n     conftest_s='\n@@ -2219,6 +2223,7 @@ foo:\t.long\t25\n \tbrasl\t%r14,__tls_get_offset@PLT:tls_ldcall:foo'\n \ttls_first_major=2\n \ttls_first_minor=14\n+\ttls_as_opt=\"-m64 -Aesame\"\n \t;;\n esac\n if test -z \"$tls_first_major\"; then\n@@ -2229,7 +2234,7 @@ elif test $in_tree_gas = yes ; then\n   ])\n elif test x$gcc_cv_as != x; then\n   echo \"$conftest_s\" > conftest.s\n-  if $gcc_cv_as --fatal-warnings -o conftest.o conftest.s > /dev/null 2>&1\n+  if $gcc_cv_as $tls_as_opt --fatal-warnings -o conftest.o conftest.s > /dev/null 2>&1\n   then\n     gcc_cv_as_tls=yes\n   fi"}, {"sha": "ab7a635e1e7e6a9de7d59c7fda0cec007d3b454e", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9739c90c8dd255fbc0a47814454b70f270f09aad/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9739c90c8dd255fbc0a47814454b70f270f09aad", "patch": "@@ -1426,7 +1426,7 @@ profile_function (file)\n      FILE *file ATTRIBUTE_UNUSED;\n {\n #ifndef NO_PROFILE_COUNTERS\n-  int align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);\n+# define NO_PROFILE_COUNTERS\t0\n #endif\n #if defined(ASM_OUTPUT_REG_PUSH)\n #if defined(STRUCT_VALUE_INCOMING_REGNUM) || defined(STRUCT_VALUE_REGNUM)\n@@ -1437,12 +1437,14 @@ profile_function (file)\n #endif\n #endif /* ASM_OUTPUT_REG_PUSH */\n \n-#ifndef NO_PROFILE_COUNTERS\n-  data_section ();\n-  ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n-  (*targetm.asm_out.internal_label) (file, \"LP\", current_function_funcdef_no);\n-  assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);\n-#endif\n+  if (! NO_PROFILE_COUNTERS)\n+    {\n+      int align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);\n+      data_section ();\n+      ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n+      (*targetm.asm_out.internal_label) (file, \"LP\", current_function_funcdef_no);\n+      assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);\n+    }\n \n   function_section (current_function_decl);\n "}]}