{"sha": "6c535c69ee7b8576f260912da85e8bf6bcb1425d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1MzVjNjllZTdiODU3NmYyNjA5MTJkYTg1ZThiZjZiY2IxNDI1ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-07-16T02:16:47Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-07-16T02:16:47Z"}, "message": "varargs.h: Replace with stub which issues #error.\n\n\t* ginclude/varargs.h: Replace with stub which issues #error.\n\t* ginclude/stdarg.h: __builtin_stdarg_start is renamed\n\t__builtin_va_start.\n\n\t* builtins.def (BUILT_IN_VARARGS_START): Delete.\n\t(BUILT_IN_VA_START): New.\n\t* builtins.c (expand_builtin_va_start): Eliminate first\n\targument and code to implement pre-ISO varargs.\n\t(std_expand_builtin_va_start): Ignore first argument; it is\n\talways 1.\n\t(expand_builtin): Handle BUILT_IN_VA_START and\n\tBUILT_IN_STDARG_START identically.  Delete\n\tBUILT_IN_VARARGS_START case.\n\n\t* function.c (assign_parms): Delete hide_last_arg and all\n\tits uses.\n\t(mark_varargs): Delete function.\n\t* function.h (struct function): Delete 'varargs' bit.\n\t(current_function_varargs): Delete macro.\n\t* tree.h: Don't declare mark_varargs.\n\n\t* c-decl.c (c_function_varargs, c_mark_varargs): Delete.\n\t(c_expand_body): Don't call mark_varargs.\n\t* c-objc-common.c: Handle BUILT_IN_VA_START and\n\tBUILT_IN_STDARG_START identically.  Delete\n\tBUILT_IN_VARARGS_START case.\n\t* c-tree.h: Don't declare c_mark_varargs.\n\t* c-parse.in: Remove grammar rules for '&...' (which has been\n\tcommented out since before 2.7.2) and for '...' in K+R\n\targument declarations.\n\n\t* builtins.c, function.c, integrate.c, sibcall.c,\n\tconfig/alpha/unicosmk.h, config/arc/arc.c, config/arc/arc.h,\n\tconfig/avr/avr.c, config/cris/cris.c, config/fr30/fr30.c,\n\tconfig/i960/i960.c, config/i960/i960.md, config/m32r/m32r.c,\n\tconfig/m32r/m32r.h, config/m88k/m88k.c, config/m88k/m88k.h,\n\tconfig/mips/mips.c, config/mmix/mmix.c, config/mmix/mmix.h,\n\tconfig/mn10300/mn10300.c, config/pa/som.h, config/s390/s390.c,\n\tconfig/sh/sh.c, config/sh/sh.h, config/sparc/sparc.h,\n\tconfig/stormy16/stormy16.c: Delete all references to\n\tcurrent_function_varargs, and code predicated on that flag.\n\n\t* config/alpha/alpha.c (alpha_va_start),\n\tconfig/arc/arc.c (arc_va_start),\n\tconfig/i386/i386.c (ix86_va_start),\n\tconfig/mips/mips.c (mips_va_start),\n\tconfig/mn10300/mn10300.c (mn10300_va_start),\n\tconfig/rs6000/rs6000.c (rs6000_va_start),\n\tconfig/s390/s390.c (s390_va_start),\n\tconfig/sh/sh.c (sh_va_start),\n\tIgnore first argument; it is always 1.\n\n\t* config/c4x/c4x-protos.h, config/c4x/c4x.c: Delete c4x_va_start.\n\t* config/ia64/ia64-protos.h, config/ia64/ia64.c: Delete ia64_va_start.\n\t* config/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c:\n\tDelete m68hc11_va_start.\n\t* config/c4x/c4x.h, config/ia64/ia64.h, config/m68hc11/m68hc11.h:\n\tNo need to define EXPAND_BUILTIN_VA_START.\n\n\t* doc/invoke.texi, doc/sourcebuild.texi, doc/tm.texi,\n\tdoc/trouble.texi: Remove references to GCC-provided <varargs.h>.\n\ntestsuite:\n\t* c-torture/execute/991216-3.c, c-torture/execute/strct-varg-1.c,\n\tc-torture/execute/va-arg-7.c, c-torture/execute/va-arg-8.c,\n\tc-torture/execute/va-arg-15.c, c-torture/execute/va-arg-16.c,\n\tc-torture/execute/va-arg-17.c, c-torture/execute/va-arg-19.c:\n\tConvert to use <stdarg.h>.\n\t* c-torture/execute/va-arg-3.c, c-torture/execute/va-arg-3.x:\n\tDelete.\n\t* gcc.dg/va-arg-2.c: New.\n\t* lib/gcc.exp, lib/objc.exp: Remove code to set -DNO_VARARGS.\n\nFrom-SVN: r55472", "tree": {"sha": "01f97dd69fbdd80f44d832c9dc5b8a6a0aa6c26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f97dd69fbdd80f44d832c9dc5b8a6a0aa6c26d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c535c69ee7b8576f260912da85e8bf6bcb1425d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c535c69ee7b8576f260912da85e8bf6bcb1425d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c535c69ee7b8576f260912da85e8bf6bcb1425d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c535c69ee7b8576f260912da85e8bf6bcb1425d/comments", "author": null, "committer": null, "parents": [{"sha": "5068f5468592fea84a6a9e758bee4f40c4ee58b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5068f5468592fea84a6a9e758bee4f40c4ee58b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5068f5468592fea84a6a9e758bee4f40c4ee58b9"}], "stats": {"total": 1333, "additions": 272, "deletions": 1061}, "files": [{"sha": "c71815c977904fd290c8429341de1a84db0d0d72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 38, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,3 +1,67 @@\n+2002-07-15  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* ginclude/varargs.h: Replace with stub which issues #error.\n+\t* ginclude/stdarg.h: __builtin_stdarg_start is renamed\n+\t__builtin_va_start.\n+\n+\t* builtins.def (BUILT_IN_VARARGS_START): Delete.\n+\t(BUILT_IN_VA_START): New.\n+\t* builtins.c (expand_builtin_va_start): Eliminate first\n+\targument and code to implement pre-ISO varargs.\n+\t(std_expand_builtin_va_start): Ignore first argument; it is\n+\talways 1.\n+\t(expand_builtin): Handle BUILT_IN_VA_START and\n+\tBUILT_IN_STDARG_START identically.  Delete\n+\tBUILT_IN_VARARGS_START case.\n+\n+\t* function.c (assign_parms): Delete hide_last_arg and all\n+\tits uses.\n+\t(mark_varargs): Delete function.\n+\t* function.h (struct function): Delete 'varargs' bit.\n+\t(current_function_varargs): Delete macro.\n+\t* tree.h: Don't declare mark_varargs.\n+\n+\t* c-decl.c (c_function_varargs, c_mark_varargs): Delete.\n+\t(c_expand_body): Don't call mark_varargs.\n+\t* c-objc-common.c: Handle BUILT_IN_VA_START and\n+\tBUILT_IN_STDARG_START identically.  Delete\n+\tBUILT_IN_VARARGS_START case.\n+\t* c-tree.h: Don't declare c_mark_varargs.\n+\t* c-parse.in: Remove grammar rules for '&...' (which has been\n+\tcommented out since before 2.7.2) and for '...' in K+R\n+\targument declarations.\n+\n+\t* builtins.c, function.c, integrate.c, sibcall.c,\n+\tconfig/alpha/unicosmk.h, config/arc/arc.c, config/arc/arc.h,\n+\tconfig/avr/avr.c, config/cris/cris.c, config/fr30/fr30.c,\n+\tconfig/i960/i960.c, config/i960/i960.md, config/m32r/m32r.c,\n+\tconfig/m32r/m32r.h, config/m88k/m88k.c, config/m88k/m88k.h,\n+\tconfig/mips/mips.c, config/mmix/mmix.c, config/mmix/mmix.h,\n+\tconfig/mn10300/mn10300.c, config/pa/som.h, config/s390/s390.c,\n+\tconfig/sh/sh.c, config/sh/sh.h, config/sparc/sparc.h,\n+\tconfig/stormy16/stormy16.c: Delete all references to\n+\tcurrent_function_varargs, and code predicated on that flag.\n+\n+\t* config/alpha/alpha.c (alpha_va_start),\n+\tconfig/arc/arc.c (arc_va_start),\n+\tconfig/i386/i386.c (ix86_va_start),\n+\tconfig/mips/mips.c (mips_va_start),\n+\tconfig/mn10300/mn10300.c (mn10300_va_start),\n+\tconfig/rs6000/rs6000.c (rs6000_va_start),\n+\tconfig/s390/s390.c (s390_va_start),\n+\tconfig/sh/sh.c (sh_va_start),\n+\tIgnore first argument; it is always 1.\n+\n+\t* config/c4x/c4x-protos.h, config/c4x/c4x.c: Delete c4x_va_start.\n+\t* config/ia64/ia64-protos.h, config/ia64/ia64.c: Delete ia64_va_start.\n+\t* config/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c:\n+\tDelete m68hc11_va_start.\n+\t* config/c4x/c4x.h, config/ia64/ia64.h, config/m68hc11/m68hc11.h:\n+\tNo need to define EXPAND_BUILTIN_VA_START.\n+\n+\t* doc/invoke.texi, doc/sourcebuild.texi, doc/tm.texi,\n+\tdoc/trouble.texi: Remove references to GCC-provided <varargs.h>.\n+\n 2002-07-15  Eric Botcazou  <ebotcazou@multimania.com>\n \n \tPR optimization/7153\n@@ -9,7 +73,7 @@\n \t* config/sparc/netbsd-elf.h (TRANSFER_FROM_TRAMPOLINE): Remove.\n \n 2002-07-15  Michael Matz  <matz@suse.de>,\n-            Daniel Berlin  <dberlin@dberlin.org>,\n+\t    Daniel Berlin  <dberlin@dberlin.org>,\n \t    Denis Chertykov  <denisc@overta.ru>\n \n \tAdd a new register allocator.\n@@ -298,10 +362,10 @@ Thu Jul 11 11:31:12 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-07-10  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (emit_frame_save): New.\n-        (rs6000_frame_related): Replace reg2 before reg.\n-        (rs6000_emit_prologue): Use emit_frame_save for saving gprs, fprs,\n-        and eh_return registers.\n+\t* config/rs6000/rs6000.c (emit_frame_save): New.\n+\t(rs6000_frame_related): Replace reg2 before reg.\n+\t(rs6000_emit_prologue): Use emit_frame_save for saving gprs, fprs,\n+\tand eh_return registers.\n \n 2002-07-10  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n@@ -351,8 +415,8 @@ Wed Jul 10 18:48:55 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* mn10200.c (expand_prologue): Create REG_MAYBE_DEAD notes\n \tas appropriate.\n \n-        * mn10200.c (expand_epilogue): Fix test to determine which scratch\n-        register to use.\n+\t* mn10200.c (expand_epilogue): Fix test to determine which scratch\n+\tregister to use.\n \n Wed Jul 10 16:06:00 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -412,7 +476,7 @@ Wed Jul 10 16:06:00 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t* doc/cpp.texi: Update.\n \n Tue Jul  9 22:37:44 2002  Stephen Clarke <stephen.clarke@superh.com>\n-                          J\"orn Rennecke <joern.rennecke@superh.com>\n+\t\t\t  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.c (sh_adjust_cost): Special handling of SHMEDIA code.\n \t* sh.md (attribute issues): Replace with:\n@@ -971,8 +1035,8 @@ Mon Jul  1 19:55:17 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-07-01  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * tree.c (build_function_type_list): Update function comment.\n-        Rename first argument to return_type.\n+\t* tree.c (build_function_type_list): Update function comment.\n+\tRename first argument to return_type.\n \n 2002-07-01  Neil Booth  <neil@daikokuya.co.uk>\n \n@@ -994,7 +1058,7 @@ Mon Jul  1 19:55:17 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n Fri Jun 28 17:22:37 2002  Denis Chertykov  <denisc@overta.ru>\n \t\t\t  Frank Ch. Eigler  <fche@redhat.com>\n-\t                  Matthew Green  <mrg@redhat.com>\n+\t\t\t  Matthew Green  <mrg@redhat.com>\n \t\t\t  Richard Henderson <rtl@redhat.com>\n \t\t\t  Dave Hudson  <dave.hudson@ubicom.com>\n \t\t\t  Jeff Johnston  <jjohnstn@redhat.com>\n@@ -1037,7 +1101,7 @@ Fri Jun 28 17:22:37 2002  Denis Chertykov  <denisc@overta.ru>\n \n 2002-06-30  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/i386/i386.c (ix86_init_mmx_sse_builtins): Fix typos.\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Fix typos.\n \n 2002-06-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -1055,28 +1119,28 @@ Fri Jun 28 17:22:37 2002  Denis Chertykov  <denisc@overta.ru>\n \n 2002-06-29  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/i386/i386.c (ix86_init_mmx_sse_builtins): Use\n-        build_function_type_list instead of build_function_type.\n+\t* config/i386/i386.c (ix86_init_mmx_sse_builtins): Use\n+\tbuild_function_type_list instead of build_function_type.\n \n-        * config/ia64/ia64.c (ia64_init_builtins): Same.\n+\t* config/ia64/ia64.c (ia64_init_builtins): Same.\n \n-        * config/alpha/alpha.c (alpha_init_builtins): Same.\n+\t* config/alpha/alpha.c (alpha_init_builtins): Same.\n \n-        * config/rs6000/rs6000.c (altivec_init_builtins): Same.\n+\t* config/rs6000/rs6000.c (altivec_init_builtins): Same.\n \n-        * config/arm/arm.c (arm_init_builtins): Same.\n+\t* config/arm/arm.c (arm_init_builtins): Same.\n \n-        * tree.h: Add build_function_type_list prototype.\n+\t* tree.h: Add build_function_type_list prototype.\n \n-        * tree.c (build_function_type_list): New.\n+\t* tree.c (build_function_type_list): New.\n \n 2002-06-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* collect2.c (scan_prog_file): Fix typo in message.\n \n 2002-06-28  Aaron Lehmann  <aaronl@vitelus.com>\n \n-        * fold-cont.c: Remove unused CHARMASK.\n+\t* fold-cont.c: Remove unused CHARMASK.\n \n 2002-06-29  Neil Booth  <neil@daikokuya.co.uk>\n \n@@ -1098,7 +1162,7 @@ Fri Jun 28 17:22:37 2002  Denis Chertykov  <denisc@overta.ru>\n \n 2002-06-29  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n-        * c4x.h: (TARGET_CPU_CPP_BUILTINS): Check flag_inline_functions and\n+\t* c4x.h: (TARGET_CPU_CPP_BUILTINS): Check flag_inline_functions and\n \tflag_inline_trees to enable inlining.\n \n 2002-06-28  Phil Edwards  <pme@gcc.gnu.org>\n@@ -1155,22 +1219,22 @@ Fri Jun 28 17:22:37 2002  Denis Chertykov  <denisc@overta.ru>\n \n 2002-06-28  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c: Remove unusued variables from last\n-        patch.\n+\t* config/rs6000/rs6000.c: Remove unusued variables from last\n+\tpatch.\n \n 2002-06-27  Aldy Hernandez  <aldyh@redhat.com>\n \n \tRevert:\n-        * config/rs6000/rs6000.c (rs6000_override_options): Move\n-        *SUBTARGET_OVERRIDE_OPTIONS before the -m options.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Move\n+\t*SUBTARGET_OVERRIDE_OPTIONS before the -m options.\n \n 2002-06-27  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (altivec_expand_builtin): Move\n-        lvx/stv/dst builtins...\n-        (altivec_expand_ld_builtin): ...to here.\n-        (altivec_expand_st_builtin): ...here.\n-        (altivec_expand_dst_builtin): ...and here (respectively).\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Move\n+\tlvx/stv/dst builtins...\n+\t(altivec_expand_ld_builtin): ...to here.\n+\t(altivec_expand_st_builtin): ...here.\n+\t(altivec_expand_dst_builtin): ...and here (respectively).\n \n 2002-06-28  Bob Wilson  <bob.wilson@acm.org>\n \n@@ -1192,8 +1256,8 @@ Fri Jun 28 17:22:37 2002  Denis Chertykov  <denisc@overta.ru>\n \n 2002-06-27  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (rs6000_override_options): Move\n-        *SUBTARGET_OVERRIDE_OPTIONS before the -m options.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Move\n+\t*SUBTARGET_OVERRIDE_OPTIONS before the -m options.\n \n 2002-06-27  Bob Wilson  <bob.wilson@acm.org>\n \n@@ -1268,8 +1332,8 @@ Wed Jun 26 16:32:57 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-06-26  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.h (ALTIVEC_VECTOR_MODE): Revert change to\n-        check for TARGET_ALTIVEC.\n+\t* config/rs6000/rs6000.h (ALTIVEC_VECTOR_MODE): Revert change to\n+\tcheck for TARGET_ALTIVEC.\n \n 2002-06-26  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n@@ -1290,8 +1354,8 @@ Wed Jun 26 16:32:57 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-06-25  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n-        discrepancies from motorola's documentation.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n+\tdiscrepancies from motorola's documentation.\n \n Tue Jun 25 21:51:13 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -1768,7 +1832,7 @@ Thu Jun 20 12:14:01 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-06-19  Chris Demetriou  <cgd@broadcom.com>\n \n-        * config/mips/mips.c (mips_emit_prefetch): Use hints which\n+\t* config/mips/mips.c (mips_emit_prefetch): Use hints which\n \tmatch desired locality.\n \n 2002-06-19  Dhananjay R. Deshpande  <dhananjayd@kpit.com>"}, {"sha": "60ff19cc71d1c7a230fe3b30f70573c5ea29e22d", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -98,7 +98,7 @@ static rtx expand_builtin_mathfn\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_constant_p\tPARAMS ((tree));\n static rtx expand_builtin_args_info\tPARAMS ((tree));\n static rtx expand_builtin_next_arg\tPARAMS ((tree));\n-static rtx expand_builtin_va_start\tPARAMS ((int, tree));\n+static rtx expand_builtin_va_start\tPARAMS ((tree));\n static rtx expand_builtin_va_end\tPARAMS ((tree));\n static rtx expand_builtin_va_copy\tPARAMS ((tree));\n static rtx expand_builtin_memcmp\tPARAMS ((tree, tree, rtx,\n@@ -2900,10 +2900,9 @@ expand_builtin_next_arg (arglist)\n {\n   tree fntype = TREE_TYPE (current_function_decl);\n \n-  if ((TYPE_ARG_TYPES (fntype) == 0\n-       || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t   == void_type_node))\n-      && ! current_function_varargs)\n+  if (TYPE_ARG_TYPES (fntype) == 0\n+      || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n+\t  == void_type_node))\n     {\n       error (\"`va_start' used in function with fixed args\");\n       return const0_rtx;\n@@ -2926,7 +2925,7 @@ expand_builtin_next_arg (arglist)\n       if (arg != last_parm)\n \twarning (\"second parameter of `va_start' not last named argument\");\n     }\n-  else if (! current_function_varargs)\n+  else\n     /* Evidently an out of date version of <stdarg.h>; can't validate\n        va_start's second argument, but can still work as intended.  */\n     warning (\"`__builtin_next_arg' called without an argument\");\n@@ -2991,56 +2990,40 @@ stabilize_va_list (valist, needs_lvalue)\n \n void\n std_expand_builtin_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n   tree t;\n \n-  if (! stdarg_p)\n-    {\n-      /* The dummy named parameter is declared as a 'word' sized\n-\t object, but if a 'word' is smaller than an 'int', it would\n-\t have been promoted to int when it was added to the arglist.  */\n-      int align = PARM_BOUNDARY / BITS_PER_UNIT;\n-      int size = MAX (UNITS_PER_WORD,\n-\t\t      GET_MODE_SIZE (TYPE_MODE (integer_type_node)));\n-      int offset = ((size + align - 1) / align) * align;\n-      nextarg = plus_constant (nextarg, -offset);\n-    }\n-\n   t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n \t     make_tree (ptr_type_node, nextarg));\n   TREE_SIDE_EFFECTS (t) = 1;\n \n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n }\n \n-/* Expand ARGLIST, which from a call to __builtin_stdarg_va_start or\n-   __builtin_varargs_va_start, depending on STDARG_P.  */\n+/* Expand ARGLIST, from a call to __builtin_va_start.  */\n \n static rtx\n-expand_builtin_va_start (stdarg_p, arglist)\n-     int stdarg_p;\n+expand_builtin_va_start (arglist)\n      tree arglist;\n {\n   rtx nextarg;\n-  tree chain = arglist, valist;\n+  tree chain, valist;\n \n-  if (stdarg_p)\n-    nextarg = expand_builtin_next_arg (chain = TREE_CHAIN (arglist));\n-  else\n-    nextarg = expand_builtin_next_arg (NULL_TREE);\n+  chain = TREE_CHAIN (arglist);\n \n   if (TREE_CHAIN (chain))\n     error (\"too many arguments to function `va_start'\");\n \n+  nextarg = expand_builtin_next_arg (chain);\n   valist = stabilize_va_list (TREE_VALUE (arglist), 1);\n \n #ifdef EXPAND_BUILTIN_VA_START\n-  EXPAND_BUILTIN_VA_START (stdarg_p, valist, nextarg);\n+  EXPAND_BUILTIN_VA_START (1, valist, nextarg);\n #else\n-  std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+  std_expand_builtin_va_start (1, valist, nextarg);\n #endif\n \n   return const0_rtx;\n@@ -4030,10 +4013,9 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_EH_RETURN_DATA_REGNO:\n       return expand_builtin_eh_return_data_regno (arglist);\n #endif\n-    case BUILT_IN_VARARGS_START:\n-      return expand_builtin_va_start (0, arglist);\n+    case BUILT_IN_VA_START:\n     case BUILT_IN_STDARG_START:\n-      return expand_builtin_va_start (1, arglist);\n+      return expand_builtin_va_start (arglist);\n     case BUILT_IN_VA_END:\n       return expand_builtin_va_end (arglist);\n     case BUILT_IN_VA_COPY:"}, {"sha": "40f5ccd86dfb172a09387a0f7c3c13678ab23ed2", "filename": "gcc/builtins.def", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -523,10 +523,11 @@ DEF_GCC_BUILTIN(BUILT_IN_EH_RETURN_DATA_REGNO,\n \t\t\"__builtin_eh_return_data_regno\",\n \t\tBT_FN_INT_INT)\n \n-DEF_GCC_BUILTIN(BUILT_IN_VARARGS_START,\n-\t\t\"__builtin_varargs_start\",\n-\t\tBT_FN_VOID_VALIST_REF)\n-DEF_GCC_BUILTIN(BUILT_IN_STDARG_START,\n+/* Variable argument list (stdarg.h) support */\n+DEF_GCC_BUILTIN(BUILT_IN_VA_START,\n+\t\t\"__builtin_va_start\",\n+\t\tBT_FN_VOID_VALIST_REF_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_STDARG_START,\t\t/* backward compat */\n \t\t\"__builtin_stdarg_start\",\n \t\tBT_FN_VOID_VALIST_REF_VAR)\n DEF_GCC_BUILTIN(BUILT_IN_VA_END,\n@@ -535,6 +536,7 @@ DEF_GCC_BUILTIN(BUILT_IN_VA_END,\n DEF_GCC_BUILTIN(BUILT_IN_VA_COPY,\n \t\t\"__builtin_va_copy\",\n \t\tBT_FN_VOID_VALIST_REF_VALIST_ARG)\n+\n DEF_GCC_BUILTIN(BUILT_IN_EXPECT,\n \t\t\"__builtin_expect\",\n \t\tBT_FN_LONG_LONG_LONG)"}, {"sha": "bce03a9b91a8d272375ccfa95709afc02234f9d1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -119,11 +119,6 @@ static GTY(()) tree named_labels;\n \n static GTY(()) tree shadowed_labels;\n \n-/* Nonzero when store_parm_decls is called indicates a varargs function.\n-   Value not meaningful after store_parm_decls.  */\n-\n-static int c_function_varargs;\n-\n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */\n \n@@ -6027,7 +6022,6 @@ start_function (declspecs, declarator, attributes)\n   current_function_returns_abnormally = 0;\n   warn_about_return_type = 0;\n   current_extern_inline = 0;\n-  c_function_varargs = 0;\n   named_labels = 0;\n   shadowed_labels = 0;\n \n@@ -6246,16 +6240,6 @@ start_function (declspecs, declarator, attributes)\n   \n   return 1;\n }\n-\n-/* Record that this function is going to be a varargs function.\n-   This is called before store_parm_decls, which is too early\n-   to call mark_varargs directly.  */\n-\n-void\n-c_mark_varargs ()\n-{\n-  c_function_varargs = 1;\n-}\n \f\n /* Store the parameter declarations into the current function declaration.\n    This is called after parsing the parameter declarations, before\n@@ -6858,10 +6842,6 @@ c_expand_body (fndecl, nested_p, can_defer_p)\n   immediate_size_expand = 0;\n   cfun->x_dont_save_pending_sizes_p = 1;\n \n-  /* If this is a varargs function, inform function.c.  */\n-  if (c_function_varargs)\n-    mark_varargs ();\n-\n   /* Set up parameters and prepare for return, for the function.  */\n   expand_function_start (fndecl, 0);\n "}, {"sha": "939c5345a7833c39e7c25bcdbf598dddca3abb75", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -91,7 +91,7 @@ inline_forbidden_p (nodep, walk_subtrees, fn)\n \t{\n \t  /* We cannot inline functions that take a variable number of\n \t     arguments.  */\n-\tcase BUILT_IN_VARARGS_START:\n+\tcase BUILT_IN_VA_START:\n \tcase BUILT_IN_STDARG_START:\n #if 0\n \t  /* Functions that need information about the address of the"}, {"sha": "70d95f115da0309896612ee63acda4ab215d41d2", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -533,21 +533,6 @@ unary_expr:\n \t/* Refer to the address of a label as a pointer.  */\n \t| ANDAND identifier\n \t\t{ $$ = finish_label_address_expr ($2); }\n-/* This seems to be impossible on some machines, so let's turn it off.\n-   You can use __builtin_next_arg to find the anonymous stack args.\n-\t| '&' ELLIPSIS\n-\t\t{ tree types = TYPE_ARG_TYPES (TREE_TYPE (current_function_decl));\n-\t\t  $$ = error_mark_node;\n-\t\t  if (TREE_VALUE (tree_last (types)) == void_type_node)\n-\t\t    error (\"`&...' used in function with fixed number of arguments\");\n-\t\t  else\n-\t\t    {\n-\t\t      if (pedantic)\n-\t\t\tpedwarn (\"ISO C forbids `&...'\");\n-\t\t      $$ = tree_last (DECL_ARGUMENTS (current_function_decl));\n-\t\t      $$ = build_unary_op (ADDR_EXPR, $$, 0);\n-\t\t    } }\n-*/\n \t| sizeof unary_expr  %prec UNARY\n \t\t{ skip_evaluation--;\n \t\t  if (TREE_CODE ($2) == COMPONENT_REF\n@@ -809,11 +794,6 @@ old_style_parm_decls_1:\n \t  parsing_iso_function_signature = false; /* Reset after warning.  */\n \t}\n \t| datadecls\n-\t| datadecls ELLIPSIS\n-\t\t/* ... is used here to indicate a varargs function.  */\n-\t\t{ c_mark_varargs ();\n-\t\t  if (pedantic)\n-\t\t    pedwarn (\"ISO C does not permit use of `varargs.h'\"); }\n \t;\n \n /* The following are analogous to lineno_decl, decls and decl"}, {"sha": "64eb2e14135c620c4541f57186fb12907c2b5ba8", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -196,7 +196,6 @@ extern void c_print_identifier\t\t\tPARAMS ((FILE *, tree, int));\n extern tree build_array_declarator              PARAMS ((tree, tree, int, int));\n extern tree build_enumerator                    PARAMS ((tree, tree));\n extern int  c_decode_option                     PARAMS ((int, char **));\n-extern void c_mark_varargs                      PARAMS ((void));\n extern void check_for_loop_decls                PARAMS ((void));\n extern void clear_parm_order                    PARAMS ((void));\n extern int  complete_array_type                 PARAMS ((tree, tree, int));"}, {"sha": "0b6aee09ec652e942ad4311e4db4f0ad464f0a49", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -6163,7 +6163,7 @@ alpha_build_va_list ()\n \n void\n alpha_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {\n@@ -6174,7 +6174,7 @@ alpha_va_start (stdarg_p, valist, nextarg)\n     return;\n \n   if (TARGET_ABI_UNICOSMK)\n-    std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+    std_expand_builtin_va_start (1, valist, nextarg);\n \n   /* For Unix, SETUP_INCOMING_VARARGS moves the starting address base\n      up by 48, storing fp arg registers in the first 48 bytes, and the\n@@ -6185,7 +6185,7 @@ alpha_va_start (stdarg_p, valist, nextarg)\n      in order to account for the integer arg registers which are counted\n      in argsize above, but which are not actually stored on the stack.  */\n \n-  if (NUM_ARGS <= 5 + stdarg_p)\n+  if (NUM_ARGS <= 6)\n     offset = TARGET_ABI_OPEN_VMS ? UNITS_PER_WORD : 6 * UNITS_PER_WORD;\n   else\n     offset = -6 * UNITS_PER_WORD;\n@@ -6732,7 +6732,7 @@ alpha_sa_size ()\n \n       alpha_procedure_type\n \t= (sa_size || get_frame_size() != 0\n-\t   || current_function_outgoing_args_size || current_function_varargs\n+\t   || current_function_outgoing_args_size\n \t   || current_function_stdarg || current_function_calls_alloca\n \t   || frame_pointer_needed)\n \t  ? PT_STACK : PT_REGISTER;"}, {"sha": "457cfbad737bfa548b8f8e4b0c6e6572c1425c28", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -237,47 +237,17 @@ do {\t\t\t\t\t\t\t\t\\\n    On Unicos/Mk, the standard subroutine __T3E_MISMATCH stores all register\n    arguments on the stack. Unfortunately, it doesn't always store the first\n    one (i.e. the one that arrives in $16 or $f16). This is not a problem\n-   with stdargs as we always have at least one named argument there. This is\n-   not always the case when varargs.h is used, however. In such cases, we\n-   have to store the first argument ourselves. We use the information from\n-   the CIW to determine whether the first argument arrives in $16 or $f16.  */\n+   with stdargs as we always have at least one named argument there.  */\n \n #undef SETUP_INCOMING_VARARGS\n #define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n { if ((CUM).num_reg_words < 6)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (! (NO_RTL))\t\t\t\t\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  int start;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  start = (CUM).num_reg_words;\t\t\t\t\t\\\n-\t  if (!current_function_varargs || start == 0)\t\t\t\\\n-\t    ++start;\t\t\t\t\t\t\t\\\n+\t  int start = (CUM).num_reg_words + 1;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n           emit_insn (gen_umk_mismatch_args (GEN_INT (start)));\t\t\\\n-\t  if (current_function_varargs && (CUM).num_reg_words == 0)\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      rtx tmp;\t\t\t\t\t\t\t\\\n-\t      rtx int_label, end_label;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t      tmp = gen_reg_rtx (DImode);\t\t\t\t\\\n-\t      emit_move_insn (tmp,\t\t\t\t\t\\\n-\t\t\t      gen_rtx_ZERO_EXTRACT (DImode,\t\t\\\n-\t\t\t\t\t\t    gen_rtx_REG (DImode, 2),\\\n-\t\t\t\t\t\t    (GEN_INT (1)),\t\\\n-\t\t\t\t\t\t    (GEN_INT (7))));\t\\\n-\t      int_label = gen_label_rtx ();\t\t\t\t\\\n-\t      end_label = gen_label_rtx ();\t\t\t\t\\\n-\t      emit_insn (gen_cmpdi (tmp, GEN_INT (0)));\t\t\t\\\n-\t      emit_jump_insn (gen_beq (int_label));\t\t\t\\\n-\t      emit_move_insn (gen_rtx_MEM (DFmode, virtual_incoming_args_rtx),\\\n-\t\t\t      gen_rtx_REG (DFmode, 48));\t\t\\\n-\t      emit_jump (end_label);\t\t\t\t\t\\\n-\t      emit_label (int_label);\t\t\t\t\t\\\n-\t      emit_move_insn (gen_rtx_MEM (DImode, virtual_incoming_args_rtx),\\\n-\t\t\t      gen_rtx_REG (DImode, 16));\t\t\\\n-\t      emit_label (end_label);\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n \t  emit_insn (gen_arg_home_umk ());\t\t\t\t\\\n         }\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "63767dd5f16519109cae2cec38ec20f0a8dd9697", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -802,12 +802,8 @@ arc_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n   if (mode == BLKmode)\n     abort ();\n \n-  /* We must treat `__builtin_va_alist' as an anonymous arg.  */\n-  if (current_function_varargs)\n-    first_anon_arg = *cum;\n-  else\n-    first_anon_arg = *cum + ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1)\n-\t\t\t     / UNITS_PER_WORD);\n+  first_anon_arg = *cum + ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1)\n+\t\t\t   / UNITS_PER_WORD);\n \n   if (first_anon_arg < MAX_ARC_PARM_REGS && !no_rtl)\n     {\n@@ -2266,7 +2262,7 @@ arc_ccfsm_record_branch_deleted ()\n \f\n void\n arc_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n@@ -2275,7 +2271,7 @@ arc_va_start (stdarg_p, valist, nextarg)\n       && (current_function_args_info & 1))\n     nextarg = plus_constant (nextarg, UNITS_PER_WORD);\n \n-  std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+  std_expand_builtin_va_start (1, valist, nextarg);\n }\n \n rtx"}, {"sha": "db8b8d452fd22c09b44891d68f268de21d2927c1", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -665,15 +665,9 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    a reg.  This includes arguments that have to be passed by reference as the\n    pointer to them is passed in a reg if one is available (and that is what\n    we're given).\n-   When passing arguments NAMED is always 1.  When receiving arguments NAMED\n-   is 1 for each argument except the last in a stdarg/varargs function.  In\n-   a stdarg function we want to treat the last named arg as named.  In a\n-   varargs function we want to treat the last named arg (which is\n-   `__builtin_va_alist') as unnamed.\n    This macro is only used in this file.  */\n-#define PASS_IN_REG_P(CUM, MODE, TYPE, NAMED) \\\n-((!current_function_varargs || (NAMED))\t\t\t\t\t\\\n- && (CUM) < MAX_ARC_PARM_REGS\t\t\t\t\t\t\\\n+#define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n+((CUM) < MAX_ARC_PARM_REGS\t\t\t\t\t\t\\\n  && ((ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE))\t\t\t\t\\\n       + ROUND_ADVANCE_ARG ((MODE), (TYPE))\t\t\t\t\\\n       <= MAX_ARC_PARM_REGS)))\n@@ -693,7 +687,7 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* On the ARC the first MAX_ARC_PARM_REGS args are normally in registers\n    and the rest are pushed.  */\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-(PASS_IN_REG_P ((CUM), (MODE), (TYPE), (NAMED))\t\t\t\t\\\n+(PASS_IN_REG_P ((CUM), (MODE), (TYPE))\t\t\t\t\t\\\n  ? gen_rtx_REG ((MODE), ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)))\t\\\n  : 0)\n "}, {"sha": "e5e7258a84788d63bbfcf72cb75e63d6294d8d75", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -2787,7 +2787,6 @@ frame_pointer_required_p ()\n {\n   return (current_function_calls_alloca\n \t  || current_function_args_info.nregs == 0\n-\t  || current_function_varargs\n   \t  || get_frame_size () > 0);\n }\n "}, {"sha": "7bdc1bd8746a5796053f5cedfc2f8300c402ba23", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -59,8 +59,6 @@ extern struct rtx_def *c4x_function_arg PARAMS ((CUMULATIVE_ARGS *,\n #if defined(RTX_CODE) && defined(TREE_CODE)\n extern void c4x_init_cumulative_args PARAMS ((CUMULATIVE_ARGS *c, tree, rtx));\n \n-extern void c4x_va_start PARAMS ((int, tree, rtx));\n-\n extern struct rtx_def *c4x_va_arg PARAMS ((tree, tree));\n \n extern rtx c4x_expand_builtin PARAMS ((tree, rtx, rtx,"}, {"sha": "44c916f78d9b854598a3345c640e32c833542895", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -702,19 +702,6 @@ c4x_function_arg (cum, mode, type, named)\n     return NULL_RTX;\n }\n \n-\n-void\n-c4x_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n-     tree valist;\n-     rtx nextarg;\n-{\n-  nextarg = plus_constant (nextarg, stdarg_p ? 0 : UNITS_PER_WORD * 2);\n-\n-  std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n-}\n-\n-\n /* C[34]x arguments grow in weird ways (downwards) that the standard\n    varargs stuff can't handle..  */\n rtx"}, {"sha": "3115677acd287257263edcaa48bbe467c4848c09", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1166,9 +1166,6 @@ CUMULATIVE_ARGS;\n \n /* Varargs handling.  */\n \n-#define\tEXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  c4x_va_start (stdarg, valist, nextarg)\n-\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   c4x_va_arg (valist, type)\n "}, {"sha": "6228c3130000211f083b571a08fb2ff65e8145d2", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1044,8 +1044,7 @@ struct cum_args {int regs;};\n       if (TARGET_PDEBUG)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  fprintf (asm_out_file,\t\t\t\t\t\\\n-\t\t   \"\\n; VA:: %s: %d args before, anon @ #%d, %dtime\\n\",\t\\\n-\t\t   current_function_varargs ? \"OLD\" : \"ANSI\",\t\t\\\n+\t\t   \"\\n; VA:: ANSI: %d args before, anon @ #%d, %dtime\\n\", \\\n \t\t   (ARGSSF).regs, PRETEND, SECOND);\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "f217534a308b43e2e9f0093c9b84fd5d57c7d56b", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -419,11 +419,9 @@ fr30_setup_incoming_varargs (arg_regs_used_so_far, int_mode, type, pretend_size)\n     abort ();\n \n #if STRICT_ARGUMENT_NAMING\n-  /* We must treat `__builtin_va_alist' as an anonymous arg.\n-     But otherwise if STRICT_ARGUMENT_NAMING is true then the\n-     last named arg must not be treated as an anonymous arg. */\n-  if (! current_function_varargs)\n-    arg_regs_used_so_far += fr30_num_arg_regs (int_mode, type);\n+  /* If STRICT_ARGUMENT_NAMING is true then the last named\n+     arg must not be treated as an anonymous arg. */\n+  arg_regs_used_so_far += fr30_num_arg_regs (int_mode, type);\n #endif\n   \n   size = FR30_NUM_ARG_REGS - arg_regs_used_so_far;"}, {"sha": "0911b4aa9664e8e942b978296f6f47aedb9bfa1d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -2447,7 +2447,7 @@ ix86_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n \n void\n ix86_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n@@ -2458,7 +2458,7 @@ ix86_va_start (stdarg_p, valist, nextarg)\n   /* Only 64bit target needs something special.  */\n   if (!TARGET_64BIT)\n     {\n-      std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+      std_expand_builtin_va_start (1, valist, nextarg);\n       return;\n     }\n "}, {"sha": "fab5f58819c18c7fb2f552e6787b70e306b7bcd6", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -85,9 +85,9 @@ static int ret_label = 0;\n    This is used to help identify functions that use an argument block.  */\n \n #define VARARGS_STDARG_FUNCTION(FNDECL)\t\\\n-((TYPE_ARG_TYPES (TREE_TYPE (FNDECL)) != 0\t\t\t\t\t\t      \\\n-  && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (FNDECL)))) != void_type_node))    \\\n- || current_function_varargs)\n+(TYPE_ARG_TYPES (TREE_TYPE (FNDECL)) != 0\t\t\t\t\\\n+  && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (FNDECL)))))\t\\\n+      != void_type_node)\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_SI_OP\n@@ -518,7 +518,7 @@ emit_move_sequence (operands, mode)\n   \n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) != REG\n       && (operands[1] != const0_rtx || current_function_args_size\n-\t  || current_function_varargs || current_function_stdarg\n+\t  || current_function_stdarg\n \t  || rtx_equal_function_value_matters))\n     /* Here we use the same test as movsi+1 pattern -- see i960.md.  */\n     operands[1] = force_reg (mode, operands[1]);"}, {"sha": "91fb78b56043d92f60102aa245170e47c0a31e73", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -594,7 +594,7 @@\n ;; the calling convention is defined so that the arg pointer when it is not\n ;; overwise being used is zero.  Thus, we can handle store zero to memory\n ;; by storing an unused arg pointer.  The arg pointer will be unused if\n-;; current_function_args_size is zero and this is not a stdarg/varargs\n+;; current_function_args_size is zero and this is not a stdarg\n ;; function.  This value of the former variable is not valid until after\n ;; all rtl generation is complete, including function inlining (because a\n ;; function that doesn't need an arg pointer may be inlined into a function\n@@ -605,7 +605,6 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:SI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n   \"(current_function_args_size == 0\n-    && current_function_varargs == 0\n     && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], SImode)\n@@ -643,7 +642,6 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:SI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n-    || current_function_varargs != 0\n     || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], SImode)\n@@ -692,7 +690,6 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:HI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n   \"(current_function_args_size == 0\n-    && current_function_varargs == 0\n     && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], HImode)\n@@ -731,7 +728,6 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:HI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n-    || current_function_varargs != 0\n     || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], HImode)\n@@ -777,7 +773,6 @@\n   [(set (match_operand:QI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:QI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n   \"(current_function_args_size == 0\n-    && current_function_varargs == 0\n     && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], QImode)\n@@ -816,7 +811,6 @@\n   [(set (match_operand:QI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:QI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n-    || current_function_varargs != 0\n     || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], QImode)\n@@ -862,7 +856,6 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"=d,d,d,d,m,o\")\n \t(match_operand:DI 1 \"general_operand\" \"d,I,i,m,d,J\"))]\n   \"(current_function_args_size == 0\n-    && current_function_varargs == 0\n     && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], DImode)\n@@ -892,7 +885,6 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"=d,d,d,d,m\")\n \t(match_operand:DI 1 \"general_operand\" \"d,I,i,m,d\"))]\n   \"(current_function_args_size != 0\n-    || current_function_varargs != 0\n     || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], DImode)\n@@ -945,7 +937,6 @@\n   [(set (match_operand:TI 0 \"general_operand\" \"=d,d,d,d,m,o\")\n \t(match_operand:TI 1 \"general_operand\" \"d,I,i,m,d,J\"))]\n   \"(current_function_args_size == 0\n-    && current_function_varargs == 0\n     && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], TImode)\n@@ -975,7 +966,6 @@\n   [(set (match_operand:TI 0 \"general_operand\" \"=d,d,d,d,m\")\n \t(match_operand:TI 1 \"general_operand\" \"d,I,i,m,d\"))]\n   \"(current_function_args_size != 0\n-    || current_function_varargs != 0\n     || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], TImode)\n@@ -1079,7 +1069,6 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=r,*f,d,d,m,o\")\n \t(match_operand:DF 1 \"fpmove_src_operand\" \"r,GH,F,m,d,G\"))]\n   \"(current_function_args_size == 0\n-    && current_function_varargs == 0\n     && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], DFmode)\n@@ -1115,7 +1104,6 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:DF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n   \"(current_function_args_size != 0\n-    || current_function_varargs != 0\n     || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], DFmode)\n@@ -1157,7 +1145,6 @@\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:SF 1 \"fpmove_src_operand\" \"r,GH,F,m,dG\"))]\n   \"(current_function_args_size == 0\n-    && current_function_varargs == 0\n     && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], SFmode)\n@@ -1192,7 +1179,6 @@\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:SF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n   \"(current_function_args_size != 0\n-    || current_function_varargs != 0\n     || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], SFmode)"}, {"sha": "0244b511c9d832bec7a2d11a451d781ffc31d76b", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -104,7 +104,6 @@ extern rtx ia64_function_arg PARAMS((CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, int, int));\n extern rtx ia64_expand_builtin PARAMS((tree, rtx, rtx,\n \t\t\t\t       enum machine_mode, int));\n-extern void ia64_va_start PARAMS((int, tree, rtx));\n extern rtx ia64_va_arg PARAMS((tree, tree));\n extern rtx ia64_function_value PARAMS((tree, tree));\n #endif /* RTX_CODE */"}, {"sha": "ca9d158a03ab906a5f03a566c4b0d8eb23d4e99f", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -3050,9 +3050,8 @@ ia64_setup_incoming_varargs (cum, int_mode, type, pretend_size, second_time)\n      int *           pretend_size;\n      int\t     second_time ATTRIBUTE_UNUSED;\n {\n-  /* If this is a stdarg function, then skip the current argument.  */\n-  if (! current_function_varargs)\n-    ia64_function_arg_advance (&cum, int_mode, type, 1);\n+  /* Skip the current argument.  */\n+  ia64_function_arg_advance (&cum, int_mode, type, 1);\n \n   if (cum.words < MAX_ARGUMENT_SLOTS)\n     {\n@@ -3453,27 +3452,6 @@ ia64_function_arg_pass_by_reference (cum, mode, type, named)\n   return type && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST;\n }\n \f\n-/* Implement va_start.  */\n-\n-void\n-ia64_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n-     tree valist;\n-     rtx nextarg;\n-{\n-  int arg_words;\n-  int ofs;\n-\n-  arg_words = current_function_args_info.words;\n-\n-  if (stdarg_p)\n-    ofs = 0;\n-  else\n-    ofs = (arg_words >= MAX_ARGUMENT_SLOTS ? -UNITS_PER_WORD : 0);\n-\n-  nextarg = plus_constant (nextarg, ofs);\n-  std_expand_builtin_va_start (1, valist, nextarg);\n-}\n \n /* Implement va_arg.  */\n "}, {"sha": "6f6d80edd1eb50ea78de9d97190a19422bc1ee66", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1339,10 +1339,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n (((REGNO) >= GR_ARG_FIRST && (REGNO) < (GR_ARG_FIRST + MAX_ARGUMENT_SLOTS)) \\\n  || ((REGNO) >= FR_ARG_FIRST && (REGNO) < (FR_ARG_FIRST + MAX_ARGUMENT_SLOTS)))\n \f\n-/* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  ia64_va_start (stdarg, valist, nextarg)\n-\n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   ia64_va_arg (valist, type)"}, {"sha": "df100dfd98e54ae80405016d9626d1cfe685b218", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1446,12 +1446,8 @@ m32r_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n   if (mode == BLKmode)\n     abort ();\n \n-  /* We must treat `__builtin_va_alist' as an anonymous arg.  */\n-  if (current_function_varargs)\n-    first_anon_arg = *cum;\n-  else\n-    first_anon_arg = (ROUND_ADVANCE_CUM (*cum, mode, type)\n-\t\t      + ROUND_ADVANCE_ARG (mode, type));\n+  first_anon_arg = (ROUND_ADVANCE_CUM (*cum, mode, type)\n+\t\t    + ROUND_ADVANCE_ARG (mode, type));\n \n   if (first_anon_arg < M32R_MAX_PARM_REGS)\n     {"}, {"sha": "2d978300d0284b06e94178d26ce98a67c6e0f15c", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1084,7 +1084,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n    pointer to them is passed in a reg if one is available (and that is what\n    we're given).\n    This macro is only used in this file.  */\n-#define PASS_IN_REG_P(CUM, MODE, TYPE, NAMED) \\\n+#define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n   (ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)) < M32R_MAX_PARM_REGS)\n \n /* Determine where to put an argument to a function.\n@@ -1102,14 +1102,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n /* On the M32R the first M32R_MAX_PARM_REGS args are normally in registers\n    and the rest are pushed.  */\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  (PASS_IN_REG_P ((CUM), (MODE), (TYPE), (NAMED))\t\t\t\\\n-   ? gen_rtx_REG ((MODE), ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)))\t\\\n-   : 0)\n-\n-/* ??? Quick hack to try to get varargs working the normal way.  */\n-#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED) \\\n-  (((! current_function_varargs || (NAMED))\t\t\t\t\\\n-    && PASS_IN_REG_P ((CUM), (MODE), (TYPE), (NAMED)))\t\t\t\\\n+  (PASS_IN_REG_P ((CUM), (MODE), (TYPE))\t\t\t\\\n    ? gen_rtx_REG ((MODE), ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)))\t\\\n    : 0)\n "}, {"sha": "c4a3fef042992296fdaeb6676dedf2cd54601bff", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -152,10 +152,7 @@ extern int m68hc11_function_arg_pass_by_reference PARAMS((const CUMULATIVE_ARGS*\n                                                           int));\n extern int m68hc11_function_arg_padding PARAMS((enum machine_mode, tree));\n \n-extern void m68hc11_expand_builtin_va_start PARAMS((int, tree, rtx));\n-\n extern rtx m68hc11_va_arg PARAMS((tree,tree));\n-extern void m68hc11_expand_builtin_va_start PARAMS((int,tree,rtx));\n \n extern void m68hc11_function_epilogue PARAMS((FILE*,int));\n "}, {"sha": "18d7d40e225c6fbfc4e4c476791a815dcc212ed1", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1455,29 +1455,6 @@ m68hc11_function_arg (cum, mode, type, named)\n   return NULL_RTX;\n }\n \n-/* The \"standard\" implementation of va_start: just assign `nextarg' to\n-   the variable.  */\n-void\n-m68hc11_expand_builtin_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n-     tree valist;\n-     rtx nextarg;\n-{\n-  tree t;\n-\n-  /* SCz: the default implementation in builtins.c adjust the\n-     nextarg using UNITS_PER_WORD.  This works only with -mshort\n-     and fails when integers are 32-bit.  Here is the correct way.  */\n-  if (!stdarg_p)\n-    nextarg = plus_constant (nextarg, -INT_TYPE_SIZE / 8);\n-\n-  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t     make_tree (ptr_type_node, nextarg));\n-  TREE_SIDE_EFFECTS (t) = 1;\n-\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-}\n-\n rtx\n m68hc11_va_arg (valist, type)\n      tree valist;"}, {"sha": "18a5ae51ea64a151b1f870d8c39f4a80da03d88c", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1074,9 +1074,6 @@ typedef struct m68hc11_args\n #define CALLER_SAVE_PROFITABLE(REFS,CALLS) 0\n \n /* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  m68hc11_expand_builtin_va_start (stdarg, valist, nextarg)\n-\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   m68hc11_va_arg (valist, type)\n "}, {"sha": "2f83e549119f5eacd55cd177001384c43e060944", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1947,7 +1947,6 @@ uses_arg_area_p ()\n   register tree parm;\n \n   if (current_function_decl == 0\n-      || current_function_varargs\n       || variable_args_p)\n     return 1;\n "}, {"sha": "475f23b696a1475f849525c910bbb3deac234577", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1052,8 +1052,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n    may be accessed via the stack pointer) in functions that seem suitable.\n    This is computed in `reload', in reload1.c.  */\n #define FRAME_POINTER_REQUIRED \\\n-(current_function_varargs \t\t\t\t\t\\\n- || (TARGET_OMIT_LEAF_FRAME_POINTER && !leaf_function_p ()) \t\\\n+((TARGET_OMIT_LEAF_FRAME_POINTER && !leaf_function_p ()) \t\\\n  || (write_symbols != NO_DEBUG && !TARGET_OCS_FRAME_POSITION))\n \n /* Definitions for register eliminations."}, {"sha": "e3a64d34a3bbb27fee3e90f834f4df14cf75ada9", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 42, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -4485,15 +4485,10 @@ mips_setup_incoming_varargs (cum, mode, type, no_rtl)\n \n   /* The caller has advanced CUM up to, but not beyond, the last named\n      argument.  Advance a local copy of CUM past the last \"real\" named\n-     argument, to find out how many registers are left over.\n+     argument, to find out how many registers are left over.  */\n \n-     For K&R varargs, the last named argument is a dummy word-sized one,\n-     so CUM already contains the information we need.  For stdarg, it is\n-     a real argument (such as the format in printf()) and we need to\n-     step over it.  */\n   local_cum = *cum;\n-  if (!current_function_varargs)\n-    FUNCTION_ARG_ADVANCE (local_cum, mode, type, 1);\n+  FUNCTION_ARG_ADVANCE (local_cum, mode, type, 1);\n \n   /* Found out how many registers we need to save.  */\n   gp_saved = MAX_ARGS_IN_REGISTERS - local_cum.num_gprs;\n@@ -4611,14 +4606,11 @@ mips_build_va_list ()\n     return ptr_type_node;\n }\n \n-/* Implement va_start.   stdarg_p is 0 if implementing\n-   __builtin_varargs_va_start, 1 if implementing __builtin_stdarg_va_start.\n-   Note that this routine isn't called when compiling e.g. \"_vfprintf_r\".\n-     (It doesn't have \"...\", so it inherits the pointers of its caller.) */\n+/* Implement va_start.   stdarg_p is always 1.  */\n \n void\n mips_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n@@ -4696,39 +4688,12 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t{\n \t  /* Everything is in the GPR save area, or in the overflow\n \t     area which is contiguous with it.  */\n-\n-\t  int offset = -gpr_save_area_size;\n-\t  if (gpr_save_area_size == 0)\n-\t    offset = (stdarg_p ? 0 : -UNITS_PER_WORD);\n-\t  nextarg = plus_constant (nextarg, offset);\n+\t  nextarg = plus_constant (nextarg, -gpr_save_area_size);\n \t  std_expand_builtin_va_start (1, valist, nextarg);\n \t}\n     }\n   else\n-    {\n-      /* not EABI */\n-      int ofs;\n-\n-      if (stdarg_p)\n-\tofs = 0;\n-      else\n-\t{\n-\t  /* ??? This had been conditional on\n-\t       _MIPS_SIM == _MIPS_SIM_ABI64 || _MIPS_SIM == _MIPS_SIM_NABI32\n-\t     and both iris5.h and iris6.h define _MIPS_SIM.  */\n-\t  if (mips_abi == ABI_N32\n-\t      || mips_abi == ABI_64\n-\t      || mips_abi == ABI_MEABI)\n- \t    ofs = (cum->num_gprs < MAX_ARGS_IN_REGISTERS\n-\t\t   ? 0\n-\t\t   : -UNITS_PER_WORD);\n-\t  else\n-\t    ofs = -UNITS_PER_WORD;\n-\t}\n-\n-      nextarg = plus_constant (nextarg, ofs);\n-      std_expand_builtin_va_start (1, valist, nextarg);\n-    }\n+    std_expand_builtin_va_start (1, valist, nextarg);\n }\n \n /* Implement va_arg.  */\n@@ -7241,7 +7206,7 @@ mips_output_function_prologue (file, size)\n \n       /* If this is a varargs function, we need to save all the\n          registers onto the stack anyhow.  */\n-      if (current_function_stdarg || current_function_varargs)\n+      if (current_function_stdarg)\n \tsavearg = GP_REG_FIRST + 7;\n \n       fprintf (file, \"\\tentry\\t\");"}, {"sha": "f166804d271b59fe95c02499ead2043199fa9ee4", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -546,14 +546,6 @@ mmix_function_arg (argsp, mode, type, named, incoming)\n      int named ATTRIBUTE_UNUSED;\n      int incoming;\n {\n-  /* Handling of the positional dummy parameter for varargs gets nasty.\n-     Check execute/991216-3 and function.c:assign_params.  We have to say\n-     that the dummy parameter goes on stack in order to get the correct\n-     offset when va_start and va_arg is applied.  FIXME: Should do TRT by\n-     itself in the gcc core.  */\n-  if ((! named && incoming && current_function_varargs) || argsp->now_varargs)\n-    return NULL_RTX;\n-\n   /* Last-argument marker.  */\n   if (type == void_type_node)\n     return (argsp->regs < MMIX_MAX_ARGS_IN_REGS)\n@@ -828,31 +820,10 @@ mmix_setup_incoming_varargs (args_so_farp, mode, vartype, pretend_sizep,\n      int * pretend_sizep;\n      int second_time ATTRIBUTE_UNUSED;\n {\n-  /* For stdarg, the last named variable has been handled, but\n-     args_so_farp has not been advanced for it.  For varargs, the current\n-     argument is to be counted to the anonymous ones.  */\n-  if (current_function_stdarg)\n-    {\n-      if (args_so_farp->regs + 1 < MMIX_MAX_ARGS_IN_REGS)\n-\t*pretend_sizep\n-\t  = (MMIX_MAX_ARGS_IN_REGS - (args_so_farp->regs + 1)) * 8;\n-    }\n-  else if (current_function_varargs)\n-    {\n-      if (args_so_farp->regs < MMIX_MAX_ARGS_IN_REGS)\n-\t*pretend_sizep\n-\t  = (MMIX_MAX_ARGS_IN_REGS - args_so_farp->regs) * 8;\n-\n-      /* For varargs, we get here when we see the last named parameter,\n-\t which will actually be passed on stack.  So make the next call\n-\t (there will be one) to FUNCTION_ARG return 0, to count it on\n-\t stack, so va_arg for it will get right.  FIXME: The GCC core\n-\t should provide TRT.  */\n-      args_so_farp->now_varargs = 1;\n-    }\n-  else\n-    internal_error (\"neither varargs or stdarg in mmix_setup_incoming_varargs\");\n-\n+  /* The last named variable has been handled, but\n+     args_so_farp has not been advanced for it.  */\n+  if (args_so_farp->regs + 1 < MMIX_MAX_ARGS_IN_REGS)\n+    *pretend_sizep = (MMIX_MAX_ARGS_IN_REGS - (args_so_farp->regs + 1)) * 8;\n \n   /* We assume that one argument takes up one register here.  That should\n      be true until we start messing with multi-reg parameters.   */"}, {"sha": "6eb4fafda71197574e7241702b43d519e42ad20c", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -738,10 +738,10 @@ enum reg_class\n    replace with a big comment.  */\n #define FUNCTION_ARG_CALLEE_COPIES(CUM, MODE, TYPE, NAMED) 1\n \n-typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n+typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT)\t\\\n- ((CUM).regs = 0, (CUM).lib = ((LIBNAME) != 0), (CUM).now_varargs = 0)\n+ ((CUM).regs = 0, (CUM).lib = ((LIBNAME) != 0))\n \n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\\\n  ((CUM).regs\t\t\t\t\t\t\t\\"}, {"sha": "e47c8c1f69b651fa702aba9089ebd4a279e70395", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -525,18 +525,6 @@ expand_prologue ()\n   size = get_frame_size () + current_function_outgoing_args_size;\n   size += (current_function_outgoing_args_size ? 4 : 0);\n \n-  /* If this is an old-style varargs function, then its arguments\n-     need to be flushed back to the stack.  */\n-  if (current_function_varargs)\n-    {\n-      emit_move_insn (gen_rtx_MEM (SImode,\n-\t\t\t\t   plus_constant (stack_pointer_rtx, 4)),\n-\t\t      gen_rtx_REG (SImode, 0));\n-      emit_move_insn (gen_rtx_MEM (SImode,\n-\t\t\t\t   plus_constant (stack_pointer_rtx, 8)),\n-\t\t      gen_rtx_REG (SImode, 1));\n-    }\n-\n   /* If we use any of the callee-saved registers, save them now. */\n   mn10300_gen_multiple_store (mn10300_get_live_callee_saved_regs ());\n \n@@ -887,13 +875,11 @@ mn10300_builtin_saveregs ()\n \n void\n mn10300_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n-  if (stdarg_p)\n-    nextarg = expand_builtin_saveregs ();\n-\n+  nextarg = expand_builtin_saveregs ();\n   std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n }\n "}, {"sha": "644c85900b70e83ad9fe89528d216b9120e64bae", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -198,10 +198,9 @@ do {\t\t\t\t\t\t\t\t\\\n \t\t   }\t\t\t\t\t\t\t\\\n \t       }\t\t\t\t\t\t\t\\\n \t     /* anonymous args */\t\t\t\t\t\\\n-\t     if ((TYPE_ARG_TYPES (tree_type) != 0\t\t\t\\\n-\t\t  && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (tree_type)))\\\n-\t\t      != void_type_node))\t\t\t\t\\\n-\t\t || current_function_varargs)\t\t\t\t\\\n+\t     if (TYPE_ARG_TYPES (tree_type) != 0\t\t\t\\\n+\t\t && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (tree_type)))\\\n+\t\t     != void_type_node))\t\t\t\t\\\n \t       {\t\t\t\t\t\t\t\\\n \t\t for (; i < 4; i++)\t\t\t\t\t\\\n \t\t   fprintf (FILE, \",ARGW%d=GR\", i);\t\t\t\\"}, {"sha": "fef0e172fa365bc28510b0245a88853c479dfb6a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -3099,7 +3099,7 @@ rs6000_build_va_list ()\n \n void\n rs6000_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n@@ -3110,7 +3110,7 @@ rs6000_va_start (stdarg_p, valist, nextarg)\n   /* Only SVR4 needs something special.  */\n   if (DEFAULT_ABI != ABI_V4)\n     {\n-      std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+      std_expand_builtin_va_start (1, valist, nextarg);\n       return;\n     }\n "}, {"sha": "cf1edd2ba536f856c9207bea2c03e472b406c2a7", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -3201,8 +3201,7 @@ s390_frame_info (frame)\n   if (! current_function_is_leaf\n       || frame->frame_size > 0\n       || current_function_calls_alloca \n-      || current_function_stdarg\n-      || current_function_varargs)\n+      || current_function_stdarg)\n     frame->frame_size += STARTING_FRAME_OFFSET;\n \n   /* If we need to allocate a frame, the stack pointer is changed.  */ \n@@ -3260,7 +3259,7 @@ s390_frame_info (frame)\n       frame->return_reg_saved_p = (j >= RETURN_REGNUM && i <= RETURN_REGNUM);\n     }\n \n-  if (current_function_stdarg || current_function_varargs)\n+  if (current_function_stdarg)\n     {\n       /* Varargs function need to save from gpr 2 to gpr 15.  */\n       frame->first_save_gpr = 2;\n@@ -3435,7 +3434,7 @@ s390_emit_prologue ()\n   \n   /* Save fprs for variable args.  */\n \n-  if (current_function_stdarg || current_function_varargs)\n+  if (current_function_stdarg)\n     {\n       /* Save fpr 0 and 2.  */ \n \n@@ -3950,9 +3949,8 @@ s390_build_va_list ()\n }\n \n /* Implement va_start by filling the va_list structure VALIST.\n-   STDARG_P is true if implementing __builtin_stdarg_va_start,\n-   false if implementing __builtin_varargs_va_start.  NEXTARG\n-   points to the first anonymous stack argument.\n+   STDARG_P is always true, and ignored.\n+   NEXTARG points to the first anonymous stack argument.\n \n    The following global variables are used to initialize\n    the va_list structure:\n@@ -3965,7 +3963,7 @@ s390_build_va_list ()\n \n void\n s390_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {\n@@ -4003,8 +4001,6 @@ s390_va_start (stdarg_p, valist, nextarg)\n \n   off = INTVAL (current_function_arg_offset_rtx);\n   off = off < 0 ? 0 : off;\n-  if (! stdarg_p)\n-    off = off > 0 ? off - UNITS_PER_WORD : off;\n   if (TARGET_DEBUG_ARG)\n     fprintf (stderr, \"va_start: n_gpr = %d, n_fpr = %d off %d\\n\",\n \t     (int)n_gpr, (int)n_fpr, off);"}, {"sha": "8fe71140bee66510c9a9576ec41d87b9d52a7afc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -4567,7 +4567,7 @@ sh_expand_prologue ()\n     }\n \n   /* Emit the code for SETUP_VARARGS.  */\n-  if (current_function_varargs || current_function_stdarg)\n+  if (current_function_stdarg)\n     {\n       /* This is not used by the SH3E calling convention  */\n       if (TARGET_SH1 && ! TARGET_SH3E && ! TARGET_SH5 && ! TARGET_HITACHI)\n@@ -5261,7 +5261,7 @@ sh_build_va_list ()\n \n void\n sh_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n@@ -5273,20 +5273,13 @@ sh_va_start (stdarg_p, valist, nextarg)\n   if (TARGET_SH5)\n     {\n       expand_builtin_saveregs ();\n-      /* When the varargs dummy argument is ``passed'' on a register,\n-\t we don't want std_expand_builtin_va_start() to apply any\n-\t correction for it, so set stdarg_p so as to pretend there's\n-\t no such dummy argument.  */\n-      if (current_function_args_info.arg_count[(int) SH_ARG_INT]\n-\t  < NPARM_REGS (SImode))\n-\tstdarg_p = 1;\n-      std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+      std_expand_builtin_va_start (1, valist, nextarg);\n       return;\n     }\n \n   if ((! TARGET_SH3E && ! TARGET_SH4) || TARGET_HITACHI)\n     {\n-      std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+      std_expand_builtin_va_start (1, valist, nextarg);\n       return;\n     }\n \n@@ -5338,11 +5331,6 @@ sh_va_start (stdarg_p, valist, nextarg)\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   u = make_tree (ptr_type_node, nextarg);\n-  if (! stdarg_p && (nint == 0 || nfp == 0))\n-    {\n-      u = fold (build (PLUS_EXPR, ptr_type_node, u,\n-\t\t       build_int_2 (-UNITS_PER_WORD, -1)));\n-    }\n   t = build (MODIFY_EXPR, ptr_type_node, next_stack, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);"}, {"sha": "c30c5f64feaf4cab581faa60b51e6c2b37258d17", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1846,8 +1846,7 @@ struct sh_args {\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   ((! TARGET_SH5 \\\n     && PASS_IN_REG_P ((CUM), (MODE), (TYPE))\t\t\t\t\\\n-    && ((NAMED)\t\t\t\t\t\t\t\t\\\n-\t|| (! TARGET_HITACHI && (TARGET_SH3E || ! current_function_varargs)))) \\\n+    && ((NAMED) || !TARGET_HITACHI))\t\t\t\t\t\\\n    ? gen_rtx_REG ((MODE),\t\t\t\t\t\t\\\n \t\t  ((BASE_ARG_REG (MODE) + ROUND_REG ((CUM), (MODE))) \t\\\n \t\t   ^ ((MODE) == SFmode && TARGET_SH4\t\t\t\\\n@@ -2010,7 +2009,7 @@ struct sh_args {\n    later.  Fortunately, we already have two flags that are part of struct\n    function that tell if a function uses varargs or stdarg.  */\n #define SETUP_INCOMING_VARARGS(ASF, MODE, TYPE, PAS, ST)  do \\\n-  if (! current_function_varargs && ! current_function_stdarg) \\\n+  if (! current_function_stdarg) \\\n     abort (); \\\n while (0)\n "}, {"sha": "c3c16e2515f84a78b46a1bd9581390bb3c909800", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1097,7 +1097,6 @@ extern int sparc_mode_class[];\n #define FRAME_POINTER_REQUIRED\t\t\t\t\\\n   (TARGET_FLAT\t\t\t\t\t\t\\\n    ? (current_function_calls_alloca\t\t\t\\\n-      || current_function_varargs\t\t\t\\\n       || !leaf_function_p ())\t\t\t\t\\\n    : ! (leaf_function_p () && only_leaf_regs_used ()))\n "}, {"sha": "019e18a8c1fc0d745c3a7cd56da102ab82c66d8b", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -874,7 +874,7 @@ xstormy16_compute_stack_layout ()\n     if (REG_NEEDS_SAVE (regno, ifun))\n       layout.register_save_size += UNITS_PER_WORD;\n   \n-  if (current_function_varargs || current_function_stdarg)\n+  if (current_function_stdarg)\n     layout.stdarg_save_size = NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD;\n   else\n     layout.stdarg_save_size = 0;"}, {"sha": "eae04a40e1f07afc7e7a84d89d5904291caccebb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -6923,14 +6923,13 @@ Do not include extra scratch space in floating point data blocks.  This\n results in smaller code, but slower execution, since scratch space must\n be allocated dynamically.\n \n-@cindex @file{varargs.h} and RT PC\n @cindex @file{stdarg.h} and RT PC\n @item -mfp-arg-in-fpregs\n @opindex mfp-arg-in-fpregs\n Use a calling sequence incompatible with the IBM calling convention in\n which floating point arguments are passed in floating point registers.\n-Note that @code{varargs.h} and @code{stdarg.h} will not work with\n-floating point operands if this option is specified.\n+Note that @code{stdarg.h} will not work with floating point operands\n+if this option is specified.\n \n @item -mfp-arg-in-gregs\n @opindex mfp-arg-in-gregs"}, {"sha": "ac64d8dc17e09390a9021f1d7f3cabd055325735", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -246,8 +246,8 @@ libraries are also installed by GCC; these are not documented here.\n \n Several of the headers GCC installs are in the @file{ginclude}\n directory.  These headers, @file{iso646.h},\n-@file{stdarg.h}, @file{stdbool.h}, @file{stddef.h} and\n-@file{varargs.h}, are installed in @file{@var{libsubdir}/include},\n+@file{stdarg.h}, @file{stdbool.h}, and @file{stddef.h},\n+are installed in @file{@var{libsubdir}/include},\n unless the target Makefile fragment (@pxref{Target Fragment})\n overrides this by setting @code{USER_H}.\n "}, {"sha": "d60f43848a0282af98f2d63bab0a8ac8e635b26a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -4006,7 +4006,7 @@ arguments.  But usually, on such machines, nothing else has been pushed\n yet, because the function prologue itself does all the pushing.)  This\n region is used on machines where an argument may be passed partly in\n registers and partly in memory, and, in some cases to support the\n-features in @code{<varargs.h>} and @code{<stdarg.h>}.\n+features in @code{<stdarg.h>}.\n \n @item\n An area of memory used to save certain registers used by the function."}, {"sha": "e23cb6b0dfa154e73d264c4e5645438a3061cc58", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -891,24 +891,6 @@ at its convenience, and moving them into memory truncates them.\n You can partially avoid this problem by using the @option{-ffloat-store}\n option (@pxref{Optimize Options}).\n \n-@item\n-On the MIPS, variable argument functions using @file{varargs.h}\n-cannot have a floating point value for the first argument.  The\n-reason for this is that in the absence of a prototype in scope,\n-if the first argument is a floating point, it is passed in a\n-floating point register, rather than an integer register.\n-\n-If the code is rewritten to use the ISO standard @file{stdarg.h}\n-method of variable arguments, and the prototype is in scope at\n-the time of the call, everything will work fine.\n-\n-@item\n-On the H8/300 and H8/300H, variable argument functions must be\n-implemented using the ISO standard @file{stdarg.h} method of\n-variable arguments.  Furthermore, calls to functions using @file{stdarg.h}\n-variable arguments must have a prototype for the called function\n-in scope at the time of the call.\n-\n @item\n On AIX and other platforms without weak symbol support, templates\n need to be instantiated explicitly and symbols for static members"}, {"sha": "cd25804fb3018be7bd12ed741d69e123005ce451", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -4290,17 +4290,6 @@ assign_parms (fndecl)\n   rtx conversion_insns = 0;\n   struct args_size alignment_pad;\n \n-  /* Nonzero if the last arg is named `__builtin_va_alist',\n-     which is used on some machines for old-fashioned non-ANSI varargs.h;\n-     this should be stuck onto the stack as if it had arrived there.  */\n-  int hide_last_arg\n-    = (current_function_varargs\n-       && fnargs\n-       && (parm = tree_last (fnargs)) != 0\n-       && DECL_NAME (parm)\n-       && (! strcmp (IDENTIFIER_POINTER (DECL_NAME (parm)),\n-\t\t     \"__builtin_va_alist\")));\n-\n   /* Nonzero if function takes extra anonymous args.\n      This means the last named arg must be on the stack\n      right before the anonymous ones.  */\n@@ -4369,7 +4358,7 @@ assign_parms (fndecl)\n \n       /* Set LAST_NAMED if this is last named arg before last\n \t anonymous args.  */\n-      if (stdarg || current_function_varargs)\n+      if (stdarg)\n \t{\n \t  tree tem;\n \n@@ -4397,11 +4386,6 @@ assign_parms (fndecl)\n \t  continue;\n \t}\n \n-      /* For varargs.h function, save info about regs and stack space\n-\t used by the individual args, not including the va_alist arg.  */\n-      if (hide_last_arg && last_named)\n-\tcurrent_function_args_info = args_so_far;\n-\n       /* Find mode of arg as it is passed, and mode of arg\n \t as it should be during execution of this function.  */\n       passed_mode = TYPE_MODE (passed_type);\n@@ -5125,8 +5109,7 @@ assign_parms (fndecl)\n   /* For stdarg.h function, save info about\n      regs and stack space used by the named args.  */\n \n-  if (!hide_last_arg)\n-    current_function_args_info = args_so_far;\n+  current_function_args_info = args_so_far;\n \n   /* Set the rtx used for the function return value.  Put this in its\n      own variable so any optimizers that need this information don't have\n@@ -6278,8 +6261,7 @@ prepare_function_start ()\n   /* Indicate we have no need of a frame pointer yet.  */\n   frame_pointer_needed = 0;\n \n-  /* By default assume not varargs or stdarg.  */\n-  current_function_varargs = 0;\n+  /* By default assume not stdarg.  */\n   current_function_stdarg = 0;\n \n   /* We haven't made any trampolines for this function yet.  */\n@@ -6379,15 +6361,6 @@ init_function_for_compilation ()\n   VARRAY_GROW (sibcall_epilogue, 0);\n }\n \n-/* Indicate that the current function uses extra args\n-   not explicitly mentioned in the argument list in any fashion.  */\n-\n-void\n-mark_varargs ()\n-{\n-  current_function_varargs = 1;\n-}\n-\n /* Expand a call to __main at the beginning of a possible main function.  */\n \n #if defined(INIT_SECTION_ASM_OP) && !defined(INVOKE__main)"}, {"sha": "0ee31d1ed532bba0a1df83e100c9d252a9476006", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -451,12 +451,7 @@ struct function GTY(())\n      function.  */\n   unsigned int limit_stack : 1;\n \n-  /* Nonzero if current function uses varargs.h or equivalent.\n-     Zero for functions that use stdarg.h.  */\n-  unsigned int varargs : 1;\n-\n-  /* Nonzero if current function uses stdarg.h or equivalent.\n-     Zero for functions that use varargs.h.  */\n+  /* Nonzero if current function uses stdarg.h or equivalent.  */\n   unsigned int stdarg : 1;\n \n   /* Nonzero if this function is being processed in function-at-a-time\n@@ -525,7 +520,6 @@ extern int virtuals_instantiated;\n #define current_function_pretend_args_size (cfun->pretend_args_size)\n #define current_function_outgoing_args_size (cfun->outgoing_args_size)\n #define current_function_arg_offset_rtx (cfun->arg_offset_rtx)\n-#define current_function_varargs (cfun->varargs)\n #define current_function_stdarg (cfun->stdarg)\n #define current_function_internal_arg_pointer (cfun->internal_arg_pointer)\n #define current_function_return_rtx (cfun->return_rtx)"}, {"sha": "e451c31c53f278b9895cf9d706b2ccbb34bc7c16", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -47,18 +47,13 @@ typedef __builtin_va_list __gnuc_va_list;\n    if this invocation was from the user program.  */\n #ifdef _STDARG_H\n \n-/* Note that the type used in va_arg is supposed to match the\n-   actual type **after default promotions**.\n-   Thus, va_arg (..., short) is not valid.  */\n-\n-#define va_start(v,l)\t__builtin_stdarg_start((v),l)\n-#define va_end\t\t__builtin_va_end\n-#define va_arg\t\t__builtin_va_arg\n+#define va_start(v,l)\t__builtin_va_start(v,l)\n+#define va_end(v)\t__builtin_va_end(v)\n+#define va_arg(v,l)\t__builtin_va_arg(v,l)\n #if !defined(__STRICT_ANSI__) || __STDC_VERSION__ + 0 >= 199900L\n-#define va_copy(d,s)\t__builtin_va_copy((d),(s))\n+#define va_copy(d,s)\t__builtin_va_copy(d,s)\n #endif\n-#define __va_copy(d,s)\t__builtin_va_copy((d),(s))\n-\n+#define __va_copy(d,s)\t__builtin_va_copy(d,s)\n \n /* Define va_list, if desired, from __gnuc_va_list. */\n /* We deliberately do not define va_list when called from"}, {"sha": "4b9803e71ac664e5ca43c8b2f20c7de2e49f5bdc", "filename": "gcc/ginclude/varargs.h", "status": "modified", "additions": 2, "deletions": 139, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fginclude%2Fvarargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fginclude%2Fvarargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fvarargs.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,144 +1,7 @@\n-/* Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* As a special exception, if you include this header file into source\n-   files compiled by GCC, this header file does not by itself cause\n-   the resulting executable to be covered by the GNU General Public\n-   License.  This exception does not however invalidate any other\n-   reasons why the executable file might be covered by the GNU General\n-   Public License.  */\n-\n #ifndef _VARARGS_H\n #define _VARARGS_H\n \n-#ifdef __NeXT__\n-\n-/* On Next, erase any vestiges of stdarg.h.  */\n-\n-#ifdef _ANSI_STDARG_H_\n-#define _VA_LIST_\n-#endif\n-#define _ANSI_STDARG_H_ \n-\n-#undef va_alist\n-#undef va_dcl\n-#undef va_list\n-#undef va_start\n-#undef va_end\n-#undef va_arg\n-#endif  /* __NeXT__ */\n-\n-/* These macros implement traditional (non-ANSI) varargs\n-   for GNU C.  */\n-\n-#define va_alist  __builtin_va_alist\n-\n-/* ??? We don't process attributes correctly in K&R argument context.  */\n-typedef int __builtin_va_alist_t __attribute__((__mode__(__word__)));\n-\n-/* ??? It would be nice to get rid of the ellipsis here.  It causes\n-   current_function_varargs to be set in cc1.  */\n-#define va_dcl\t\t__builtin_va_alist_t __builtin_va_alist; ...\n-\n-/* Define __gnuc_va_list, just as in stdarg.h.  */\n-\n-#ifndef __GNUC_VA_LIST\n-#define __GNUC_VA_LIST\n-typedef __builtin_va_list __gnuc_va_list;\n-#endif\n-\n-#define va_start(v)\t__builtin_varargs_start((v))\n-#define va_end\t\t__builtin_va_end\n-#define va_arg\t\t__builtin_va_arg\n-#define __va_copy(d,s)\t__builtin_va_copy((d),(s))\n-\n-/* Define va_list from __gnuc_va_list.  */\n+#error \"GCC no longer implements <varargs.h>.\"\n+#error \"Revise your code to use <stdarg.h>.\"\n \n-#ifdef _HIDDEN_VA_LIST  /* On OSF1, this means varargs.h is \"half-loaded\".  */\n-#undef _VA_LIST\n-#endif\n-\n-#if defined(__svr4__) || (defined(_SCO_DS) && !defined(__VA_LIST))\n-/* SVR4.2 uses _VA_LIST for an internal alias for va_list,\n-   so we must avoid testing it and setting it here.\n-   SVR4 uses _VA_LIST as a flag in stdarg.h, but we should\n-   have no conflict with that.  */\n-#ifndef _VA_LIST_\n-#define _VA_LIST_\n-#ifdef __i860__\n-#ifndef _VA_LIST\n-#define _VA_LIST va_list\n-#endif\n-#endif /* __i860__ */\n-typedef __gnuc_va_list va_list;\n-#ifdef _SCO_DS\n-#define __VA_LIST\n-#endif\n-#endif /* _VA_LIST_ */\n-\n-#else /* not __svr4__  || _SCO_DS */\n-\n-/* The macro _VA_LIST_ is the same thing used by this file in Ultrix.\n-   But on BSD NET2 we must not test or define or undef it.\n-   (Note that the comments in NET 2's ansi.h\n-   are incorrect for _VA_LIST_--see stdio.h!)  */\n-/* Michael Eriksson <mer@sics.se> at Thu Sep 30 11:00:57 1993:\n-   Sequent defines _VA_LIST_ in <machine/machtypes.h> to be the type to\n-   use for va_list (``typedef _VA_LIST_ va_list'') */\n-#if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386BSD____) || defined (__bsdi__) || defined (__sequent__) || defined (__FreeBSD__) || defined(WINNT)\n-/* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */\n-#ifndef _VA_LIST_DEFINED\n-/* The macro _VA_LIST is used in SCO Unix 3.2.  */\n-#ifndef _VA_LIST\n-/* The macro _VA_LIST_T_H is used in the Bull dpx2  */\n-#ifndef _VA_LIST_T_H\n-/* The macro __va_list__ is used by BeOS.  */\n-#ifndef __va_list__\n-typedef __gnuc_va_list va_list;\n-#endif /* not __va_list__ */\n-#endif /* not _VA_LIST_T_H */\n-#endif /* not _VA_LIST */\n-#endif /* not _VA_LIST_DEFINED */\n-#if !(defined (__BSD_NET2__) || defined (____386BSD____) || defined (__bsdi__) || defined (__sequent__) || defined (__FreeBSD__))\n-#define _VA_LIST_\n-#endif\n-#ifndef _VA_LIST\n-#define _VA_LIST\n #endif\n-#ifndef _VA_LIST_DEFINED\n-#define _VA_LIST_DEFINED\n-#endif\n-#ifndef _VA_LIST_T_H\n-#define _VA_LIST_T_H\n-#endif\n-#ifndef __va_list__\n-#define __va_list__\n-#endif\n-\n-#endif /* not _VA_LIST_, except on certain systems */\n-\n-#endif /* not __svr4__ */\n-\n-/* The next BSD release (if there is one) wants this symbol to be\n-   undefined instead of _VA_LIST_.  */\n-#ifdef _BSD_VA_LIST\n-#undef _BSD_VA_LIST\n-#endif\n-\n-#endif /* _VARARGS_H */"}, {"sha": "49fd4482e23bd37da5282e63d77b8426db2717e6", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -178,8 +178,7 @@ function_cannot_inline_p (fndecl)\n     return N_(\"function cannot be inline\");\n \n   /* No inlines with varargs.  */\n-  if ((last && TREE_VALUE (last) != void_type_node)\n-      || current_function_varargs)\n+  if (last && TREE_VALUE (last) != void_type_node)\n     return N_(\"varargs function cannot be inline\");\n \n   if (current_function_calls_alloca)"}, {"sha": "d13f3a9064a9b9ec0c549a993f18f1f74daa9a94", "filename": "gcc/sibcall.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -676,8 +676,7 @@ optimize_sibling_and_tail_recursive_calls ()\n \t     sibling call optimizations, but not tail recursion.\n \t     Similarly if we use varargs or stdarg since they implicitly\n \t     may take the address of an argument.  */\n-\t  if (current_function_calls_alloca\n-\t      || current_function_varargs || current_function_stdarg)\n+\t  if (current_function_calls_alloca || current_function_stdarg)\n \t    sibcall = 0;\n \n \t  /* See if there are any reasons we can't perform either sibling or"}, {"sha": "77bbae2b7dbc9015dc179a7ca1b535e318464c57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,9 +1,21 @@\n+2002-07-15  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-torture/execute/991216-3.c, c-torture/execute/strct-varg-1.c,\n+\tc-torture/execute/va-arg-7.c, c-torture/execute/va-arg-8.c,\n+\tc-torture/execute/va-arg-15.c, c-torture/execute/va-arg-16.c,\n+\tc-torture/execute/va-arg-17.c, c-torture/execute/va-arg-19.c:\n+\tConvert to use <stdarg.h>.\n+\t* c-torture/execute/va-arg-3.c, c-torture/execute/va-arg-3.x:\n+\tDelete.\n+\t* gcc.dg/va-arg-2.c: New.\n+\t* lib/gcc.exp, lib/objc.exp: Remove code to set -DNO_VARARGS.\n+\n 2002-07-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20020710-1.c: New test.\n \n Thu Jul 11 15:39:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n-                          Andrew Pinski  <pinskia@physics.uc.edu>\n+\t\t\t  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tgcc.c-torture/compile/simd-2.c: New testcase.\n \tgcc.c-torture/compile/simd-3.c: Likewise.\n@@ -12,7 +24,7 @@ Thu Jul 11 15:39:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \tPR c++/7224\n \t* g++.dg/overload/error1.C: New test.\n-\t\n+\n 2002-07-11  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* gcc.misc-tests/linkage.exp: Handle mips-sgi-irix6*o32\n@@ -28,13 +40,13 @@ Thu Jul 11 15:39:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-07-10  Jeffrey A Law  <law@redhat.com>\n \n-        * gcc.c-torture/compile/981006-1.x: Do not use -fpic for mn102.\n+\t* gcc.c-torture/compile/981006-1.x: Do not use -fpic for mn102.\n \n-        * gcc.c-torture/compile/930326-1.x: Remove.  No longer needed.\n+\t* gcc.c-torture/compile/930326-1.x: Remove.  No longer needed.\n \n 2002-07-09  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gcc.dg/20020312-2.c: Check for __PPC__.\n+\t* gcc.dg/20020312-2.c: Check for __PPC__.\n \n 2002-07-09  Diego Novillo  <dnovillo@redhat.com>\n \n@@ -57,7 +69,7 @@ Thu Jul 11 15:39:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n 2002-07-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR c++/7099\n-        * g++.dg/warn/noreturn1.C: New test.\n+\t* g++.dg/warn/noreturn1.C: New test.\n \n 2002-07-03  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -168,8 +180,8 @@ Mon Jul  1 12:51:05 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-06-27  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gcc.c-torture/execute/string-opt-8.c (strncmp): Fix typo in\n-        return type.\n+\t* gcc.c-torture/execute/string-opt-8.c (strncmp): Fix typo in\n+\treturn type.\n \n Thu Jun 27 15:23:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -269,9 +281,9 @@ Tue Jun 25 21:50:38 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-06-18  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gcc.c-torture/execute/simd-1.c: New.\n+\t* gcc.c-torture/execute/simd-1.c: New.\n \n-        * gcc.dg/simd-1.c: New.\n+\t* gcc.dg/simd-1.c: New.\n \n 2002-06-18  Hans-Peter Nilsson  <hp@axis.com>\n \n@@ -355,7 +367,7 @@ Tue Jun 25 21:50:38 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-06-04  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gcc.dg/altivec-2.c: Remove test for invalid vector type V2DF.\n+\t* gcc.dg/altivec-2.c: Remove test for invalid vector type V2DF.\n \n 2002-06-03  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "948b35f9795936c6baaadf7bc0133260785e70de", "filename": "gcc/testsuite/gcc.c-torture/execute/991216-3.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F991216-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F991216-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F991216-3.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,17 +1,16 @@\n-#include <varargs.h>\n+#include <stdarg.h>\n \n #define VALUE 0x123456789abcdefLL\n #define AFTER 0x55\n \n void\n-test (va_alist)\n-     va_dcl\n+test (int n, ...)\n {\n   va_list ap;\n-  int i, n;\n+  int i;\n+\n+  va_start (ap, n);\n \n-  va_start (ap);\n-  n = va_arg (ap, int);\n   for (i = 2; i <= n; i++)\n     {\n       if (va_arg (ap, int) != i)"}, {"sha": "ddd6f05d5acc0f17a2aea6c2719051b7e967c0a3", "filename": "gcc/testsuite/gcc.c-torture/execute/strct-varg-1.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrct-varg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrct-varg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrct-varg-1.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,28 +1,14 @@\n-#ifdef NO_VARARGS\n #include <stdarg.h>\n-#define va_alist int x_attr, ...\n-#define va_dcl\n-#else\n-#include <varargs.h>\n-#endif\n \n struct s { int x, y; };\n \n-f (va_alist)\n-     va_dcl\n+f (int attr, ...)\n {\n   struct s va_values;\n   va_list va;\n-  int attr;\n   int i;\n \n-#ifdef NO_VARARGS\n-  va_start (va, x_attr);\n-  attr = x_attr;\n-#else\n-  va_start (va);\n-  attr = va_arg (va, int);\n-#endif\n+  va_start (va, attr);\n \n   if (attr != 2)\n     abort ();"}, {"sha": "24411f8c404079d949394b76c1cf11903bb3c5d1", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-15.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-15.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,16 +1,14 @@\n-#include <varargs.h>\n+#include <stdarg.h>\n \n-void vafunction (dummy, va_alist)\n-  char *dummy;\n-  va_dcl\n+void vafunction (char *dummy, ...)\n {\n   double darg;\n   int iarg;\n   int flag = 0;\n   int i;\n   va_list ap;\n \n-  va_start(ap);\n+  va_start(ap, dummy);\n   for (i = 1; i <= 18; i++, flag++) \n     {\n       if (flag & 1)"}, {"sha": "1115ef0855d9337591db477290afa7a81c42ea6a", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-16.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-16.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,14 +1,12 @@\n-#include <varargs.h>\n+#include <stdarg.h>\n \n typedef double TYPE;\n \n-void vafunction (dummy1, dummy2, va_alist)\n-  TYPE dummy1, dummy2;\n-  va_dcl\n+void vafunction (TYPE dummy1, TYPE dummy2, ...)\n {\n   va_list ap;\n \n-  va_start(ap);\n+  va_start(ap, dummy2);\n   if (dummy1 != 888.)\n     abort();\n   if (dummy2 != 999.)"}, {"sha": "17850db14433882184a49c02c47e063f5483348f", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-17.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-17.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,14 +1,12 @@\n-#include <varargs.h>\n+#include <stdarg.h>\n \n typedef double TYPE;\n \n-void vafunction (dummy, va_alist)\n-  char *dummy;\n-  va_dcl\n+void vafunction (char *dummy, ...)\n {\n   va_list ap;\n \n-  va_start(ap);\n+  va_start(ap, dummy);\n   if (va_arg (ap, TYPE) != 1.)\n     abort();\n   if (va_arg (ap, TYPE) != 2.)"}, {"sha": "9fdf49d89dd641e235ab645b17ca784102de715e", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-19.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-19.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,14 +1,12 @@\n-#include <varargs.h>\n+#include <stdarg.h>\n \n typedef int TYPE;\n \n-void vafunction (dummy, va_alist)\n-  char *dummy;\n-  va_dcl\n+void vafunction (char *dummy, ...)\n {\n   va_list ap;\n \n-  va_start(ap);\n+  va_start(ap, dummy);\n   if (va_arg (ap, TYPE) != 1)\n     abort();\n   if (va_arg (ap, TYPE) != 2)"}, {"sha": "7b0a0b0cf36c2bd45f80a74a2c7d0df6bb6cab9b", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-3.c", "status": "removed", "additions": 0, "deletions": 339, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-3.c?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -1,339 +0,0 @@\n-/* Same as va-arg-2.c but using varargs.h.  */\n-/* The purpose of this test is to catch edge cases when arguments are passed\n-   in regs and on the stack.  We test 16 cases, trying to catch multiple\n-   targets (some use 3 regs for argument passing, some use 12, etc.).\n-   We test both the arguments and the `lastarg' (the argument to va_start).  */\n-\n-#ifdef NO_VARARGS\n-int main()\n-{\n-  exit (0);\n-}\n-\n-#else\n-#include <varargs.h>\n-\n-extern __SIZE_TYPE__ strlen ();\n-\n-int\n-to_hex (unsigned int a)\n-{\n-  static char hex[] = \"0123456789abcdef\";\n-\n-  if (a > 15)\n-    abort ();\n-  return hex[a];\n-}\n-\n-void\n-f0 (va_alist)\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 0)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f1 (a1, va_alist)\n-     int a1;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 1)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f2 (a1, a2, va_alist)\n-     int a1, a2;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 2)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f3 (a1, a2, a3, va_alist)\n-     int a1, a2, a3;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 3)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f4 (a1, a2, a3, a4, va_alist)\n-     int a1, a2, a3, a4;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 4)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f5 (a1, a2, a3, a4, a5, va_alist)\n-     int a1, a2, a3, a4, a5;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 5)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f6 (a1, a2, a3, a4, a5, a6, va_alist)\n-     int a1, a2, a3, a4, a5, a6;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 6)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f7 (a1, a2, a3, a4, a5, a6, a7, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 7)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f8 (a1, a2, a3, a4, a5, a6, a7, a8, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 8)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f9 (a1, a2, a3, a4, a5, a6, a7, a8, a9, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8, a9;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 9)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f10 (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 10)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f11 (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11,\n-     va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 11)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f12 (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 12)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f13 (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 13)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f14 (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 14)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-void\n-f15 (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, va_alist)\n-     int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;\n-     va_dcl\n-{\n-  va_list ap;\n-  char *format;\n-\n-  va_start (ap);\n-  format = va_arg (ap, char *);\n-  if (strlen (format) != 16 - 15)\n-    abort ();\n-  while (*format)\n-    if (*format++ != to_hex (va_arg (ap, int)))\n-      abort ();\n-  va_end(ap);\n-}\n-\n-main ()\n-{\n-  char *f = \"0123456789abcdef\";\n-\n-  f0 (f+0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f1 (0, f+1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f2 (0, 1, f+2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f3 (0, 1, 2, f+3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f4 (0, 1, 2, 3, f+4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f5 (0, 1, 2, 3, 4, f+5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f6 (0, 1, 2, 3, 4, 5, f+6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f7 (0, 1, 2, 3, 4, 5, 6, f+7, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f8 (0, 1, 2, 3, 4, 5, 6, 7, f+8, 8, 9, 10, 11, 12, 13, 14, 15);\n-  f9 (0, 1, 2, 3, 4, 5, 6, 7, 8, f+9, 9, 10, 11, 12, 13, 14, 15);\n-  f10 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, f+10, 10, 11, 12, 13, 14, 15);\n-  f11 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, f+11, 11, 12, 13, 14, 15);\n-  f12 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, f+12, 12, 13, 14, 15);\n-  f13 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, f+13, 13, 14, 15);\n-  f14 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, f+14, 14, 15);\n-  f15 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, f+15, 15);\n-\n-  exit (0);\n-}\n-#endif /* ! NO_VARARGS */"}, {"sha": "865aaf81c54a454da7eab0dcc1c180f5a62b44d8", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-3.x", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5068f5468592fea84a6a9e758bee4f40c4ee58b9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-3.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5068f5468592fea84a6a9e758bee4f40c4ee58b9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-3.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-3.x?ref=5068f5468592fea84a6a9e758bee4f40c4ee58b9", "patch": "@@ -1,12 +0,0 @@\n-# This doesn't work on mn10200\n-\n-if { [istarget \"mn10200*-*-*\"] } {\n-\tset torture_execute_xfail \"mn10200*-*-*\"\n-}\n-\n-if { [istarget \"h8300*-*-*\"] } {\n-\tset torture_execute_xfail \"h8300*-*-*\"\n-}\n-\n-\n-return 0"}, {"sha": "f45219a56f57d0ee627c39c45cfd04cc0fb6a2ab", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-7.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-7.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,16 +1,15 @@\n /* Origin: Franz Sirl <Franz.Sirl-kernel@lauterbach.com> */\n \n-#include <varargs.h>\n+#include <stdarg.h>\n \n inline void\n-debug(i1, i2, i3, i4, i5, i6, i7, f1, f2, f3, f4, f5, f6, f7, f8, f9, va_alist)\n-     int i1, i2, i3, i4, i5, i6, i7;\n-     double f1, f2, f3, f4, f5, f6, f7, f8, f9;\n-     va_dcl\n+debug(int i1, int i2, int i3, int i4, int i5, int i6, int i7,\n+      double f1, double f2, double f3, double f4, double f5,\n+      double f6, double f7, double f8, double f9, ...)\n {\n   va_list ap;\n \n-  va_start (ap);\n+  va_start (ap, f9);\n \n   if (va_arg (ap,int) != 8)\n     abort ();\n@@ -25,7 +24,8 @@ debug(i1, i2, i3, i4, i5, i6, i7, f1, f2, f3, f4, f5, f6, f7, f8, f9, va_alist)\n int\n main(void)\n {\n-  debug (1, 2, 3, 4, 5, 6, 7, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\n-         8.0, 9.0, 8, 9, 10);\n+  debug (1, 2, 3, 4, 5, 6, 7,\n+\t 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\n+\t 8, 9, 10);\n   exit (0);\n }"}, {"sha": "964833b5281909ee67641031c2c0ca35226206af", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-8.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-8.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -1,20 +1,19 @@\n /* Origin: Franz Sirl <Franz.Sirl-kernel@lauterbach.com> */\n \n-#include <varargs.h>\n+#include <stdarg.h>\n #include <limits.h>\n \n #if __LONG_LONG_MAX__ == 9223372036854775807LL\n \n typedef long long int INT64;\n \n inline void\n-debug(i1, i2, i3, i4, i5, i6, i7, i8, i9, va_alist)\n-     int i1, i2, i3, i4, i5, i6, i7, i8, i9;\n-     va_dcl\n+debug(int i1, int i2, int i3, int i4, int i5,\n+      int i6, int i7, int i8, int i9, ...)\n {\n   va_list ap;\n \n-  va_start (ap);\n+  va_start (ap, i9);\n \n   if (va_arg (ap,int) != 10)\n     abort ();"}, {"sha": "2e2849c1528de809657e984033e5525cade79c72", "filename": "gcc/testsuite/gcc.dg/va-arg-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-2.c?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -0,0 +1,12 @@\n+/* <varargs.h> is not supported anymore, but we do install a stub\n+   file which issues an #error telling the user to convert their code.  */\n+\n+/* { dg-do compile } */\n+\n+#include <varargs.h>  /* { dg-bogus \"varargs.h\" \"missing file\" } */\n+\n+/* { dg-error \"\" \"In file included from\" { target *-*-* } 6 } */\n+/* { dg-error \"no longer implements\" \"#error 1\" { target *-*-* } 4 } */\n+/* { dg-error \"Revise your code\" \"#error 2\" { target *-*-* } 5 } */\n+\n+int x;  /* prevent empty-source-file warning */"}, {"sha": "09e5f9e77f9c81ee739a02fd5ca53250e7840795", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -149,9 +149,6 @@ proc gcc_target_compile { source dest type options } {\n     if [info exists TOOL_OPTIONS] {\n \tlappend options \"additional_flags=$TOOL_OPTIONS\"\n     }\n-    if [target_info exists gcc,no_varargs] {\n-\tlappend options \"additional_flags=-DNO_VARARGS\"\n-    }\n     if [target_info exists gcc,timeout] {\n \tlappend options \"timeout=[target_info gcc,timeout]\"\n     }"}, {"sha": "d57b59744f04e2abf73a22b9f9671ef9ae243a14", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -165,9 +165,6 @@ proc objc_target_compile { source dest type options } {\n     if [info exists TOOL_OPTIONS] {\n \tlappend options \"additional_flags=$TOOL_OPTIONS\"\n     }\n-    if [target_info exists objc,no_varargs] {\n-\tlappend options \"additional_flags=-DNO_VARARGS\"\n-    }\n \n     # Point to the ObjC headers in libobjc.\n     set objc_include_dir \"${srcdir}/../../libobjc\""}, {"sha": "7f8c04970f02dfdb53157a021ef6ce4f03cdc2ab", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c535c69ee7b8576f260912da85e8bf6bcb1425d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6c535c69ee7b8576f260912da85e8bf6bcb1425d", "patch": "@@ -2899,7 +2899,6 @@ extern void build_common_tree_nodes_2\tPARAMS ((int));\n extern void setjmp_protect_args\t\tPARAMS ((void));\n extern void setjmp_protect\t\tPARAMS ((tree));\n extern void expand_main_function\tPARAMS ((void));\n-extern void mark_varargs\t\tPARAMS ((void));\n extern void init_dummy_function_start\tPARAMS ((void));\n extern void expand_dummy_function_end\tPARAMS ((void));\n extern void init_function_for_compilation\tPARAMS ((void));"}]}