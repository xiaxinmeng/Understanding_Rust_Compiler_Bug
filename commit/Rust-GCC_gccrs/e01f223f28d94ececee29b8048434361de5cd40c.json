{"sha": "e01f223f28d94ececee29b8048434361de5cd40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAxZjIyM2YyOGQ5NGVjZWNlZTI5YjgwNDg0MzQzNjFkZTVjZDQwYw==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-12-19T09:51:11Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-19T09:51:11Z"}, "message": "combine: Omit redundant AND in change_zero_ext.\n\nThis is another micro-optimisation in change_zero_ext.  If an\n\n  (and (lshiftrt ... (N)) (M))\n\ngenerated by change_zero_ext is equivalent to just\n\n  (lshiftrt ... (N))\n\n(because the AND constant selects the N rightmost bits of the\nresult), strip off the AND.\n\ngcc/ChangeLog:\n\n2016-12-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* combine.c (change_zero_ext): Skip generation of redundant AND.\n\nFrom-SVN: r243792", "tree": {"sha": "bcc6a4b4ea47d1b3d32ba5e04c14b62d3133c06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcc6a4b4ea47d1b3d32ba5e04c14b62d3133c06c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e01f223f28d94ececee29b8048434361de5cd40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01f223f28d94ececee29b8048434361de5cd40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01f223f28d94ececee29b8048434361de5cd40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01f223f28d94ececee29b8048434361de5cd40c/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26b14bc192861450d7d4d20faa5e54f489af1b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b14bc192861450d7d4d20faa5e54f489af1b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b14bc192861450d7d4d20faa5e54f489af1b68"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "3622483545c54a3a6127c7b1c675cd98616b6cd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01f223f28d94ececee29b8048434361de5cd40c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01f223f28d94ececee29b8048434361de5cd40c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e01f223f28d94ececee29b8048434361de5cd40c", "patch": "@@ -1,3 +1,7 @@\n+2016-12-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* combine.c (change_zero_ext): Skip generation of redundant AND.\n+\n 2016-12-19  Krister Walfridsson  <krister.walfridsson@gmail.com>\n \n \t* config/netbsd.h (LINK_EH_SPEC): Define."}, {"sha": "e74ff4c20a1f283830b2b484ab0560110fe6554e", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01f223f28d94ececee29b8048434361de5cd40c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01f223f28d94ececee29b8048434361de5cd40c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e01f223f28d94ececee29b8048434361de5cd40c", "patch": "@@ -11289,8 +11289,13 @@ change_zero_ext (rtx pat)\n       else\n \tcontinue;\n \n-      wide_int mask = wi::mask (size, false, GET_MODE_PRECISION (mode));\n-      x = gen_rtx_AND (mode, x, immed_wide_int_const (mask, mode));\n+      if (!(GET_CODE (x) == LSHIFTRT\n+\t    && CONST_INT_P (XEXP (x, 1))\n+\t    && size + INTVAL (XEXP (x, 1)) == GET_MODE_PRECISION (mode)))\n+\t{\n+\t  wide_int mask = wi::mask (size, false, GET_MODE_PRECISION (mode));\n+\t  x = gen_rtx_AND (mode, x, immed_wide_int_const (mask, mode));\n+\t}\n \n       SUBST (**iter, x);\n       changed = true;"}]}