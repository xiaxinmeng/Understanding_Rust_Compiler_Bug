{"sha": "9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5OGY4ZjljNGJlYTdiNmRkY2MxY2I5MzVlM2IxN2Q0OThiNGJlYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-08-08T19:07:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-08T19:07:47Z"}, "message": "calls.c (ECF_ALWAYS_RETURN): New constant.\n\n\t* calls.c (ECF_ALWAYS_RETURN): New constant.\n\t(emit_call_1): Add REG_ALWAYS_RETURN note if needed.\n\t(expand_call): Use LCF_ALWAYS_RETURN for __bb_fork_func.\n\t(emit_library_call_value_1): Handle LCT_ALWAYS_RETRUN.\n\t* flow.c (need_fake_edge_p): Handle REG_ALWAYS_RETURN.\n\t* rtl.c (reg_note_name): New name.\n\t* rtl.h (enum reg_note): Add REG_ALWAYS_RETURN.\n\nFrom-SVN: r44722", "tree": {"sha": "b641fa444ecc5e0162540715896c50029c4ef59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b641fa444ecc5e0162540715896c50029c4ef59f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/comments", "author": null, "committer": null, "parents": [{"sha": "82423cbad3a82b066e23d0c5aa569c24fc12cc66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82423cbad3a82b066e23d0c5aa569c24fc12cc66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82423cbad3a82b066e23d0c5aa569c24fc12cc66"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "0dcabf2cc9043d1fd10e688717f48a48e68a259d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "patch": "@@ -1,3 +1,13 @@\n+Wed Aug  8 21:06:43 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* calls.c (ECF_ALWAYS_RETURN): New constant.\n+\t(emit_call_1): Add REG_ALWAYS_RETURN note if needed.\n+\t(expand_call): Use LCF_ALWAYS_RETURN for __bb_fork_func.\n+\t(emit_library_call_value_1): Handle LCT_ALWAYS_RETRUN.\n+\t* flow.c (need_fake_edge_p): Handle REG_ALWAYS_RETURN.\n+\t* rtl.c (reg_note_name): New name.\n+\t* rtl.h (enum reg_note): Add REG_ALWAYS_RETURN.\n+\n 2001-08-07  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/mips/mips.c (mips_legitimate_address_p): Limit \"la\" addresses."}, {"sha": "7d810696660fae94cdc3a74536aa6adb45e45597", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "patch": "@@ -177,6 +177,8 @@ static int calls_function_1\tPARAMS ((tree, int));\n /* Nonzero if this is a call to a function that returns with the stack\n    pointer depressed.  */\n #define ECF_SP_DEPRESSED\t1024\n+/* Nonzero if this call is known to always return.  */\n+#define ECF_ALWAYS_RETURN\t2048\n \n static void emit_call_1\t\tPARAMS ((rtx, tree, tree, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, HOST_WIDE_INT, rtx,\n@@ -609,6 +611,9 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n   if (ecf_flags & ECF_NORETURN)\n     REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_NORETURN, const0_rtx,\n \t\t\t\t\t       REG_NOTES (call_insn));\n+  if (ecf_flags & ECF_ALWAYS_RETURN)\n+    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_ALWAYS_RETURN, const0_rtx,\n+\t\t\t\t\t       REG_NOTES (call_insn));\n \n   if (ecf_flags & ECF_RETURNS_TWICE)\n     REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_SETJMP, const0_rtx,\n@@ -2594,7 +2599,8 @@ expand_call (exp, target, ignore)\n \t is subject to race conditions, just as with multithreaded\n \t programs.  */\n \n-      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__bb_fork_func\"), 0,\n+      emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__bb_fork_func\"),\n+\t\t      \t LCT_ALWAYS_RETURN,\n \t\t\t VOIDmode, 0);\n     }\n \n@@ -3546,6 +3552,9 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n     case LCT_THROW:\n       flags = ECF_NORETURN;\n       break;\n+    case LCT_ALWAYS_RETURN:\n+      flags = ECF_ALWAYS_RETURN;\n+      break;\n     }\n   fun = orgfun;\n "}, {"sha": "61928ed9def4fa85b00f19755e3b2153e6b13ed5", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "patch": "@@ -2517,6 +2517,7 @@ need_fake_edge_p (insn)\n   if ((GET_CODE (insn) == CALL_INSN\n        && !SIBLING_CALL_P (insn)\n        && !find_reg_note (insn, REG_NORETURN, NULL)\n+       && !find_reg_note (insn, REG_ALWAYS_RETURN, NULL)\n        && !CONST_OR_PURE_CALL_P (insn)))\n     return true;\n "}, {"sha": "12b011132002526faf05030112a5fac4993dc67c", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "patch": "@@ -281,7 +281,7 @@ const char * const reg_note_name[] =\n   \"REG_EXEC_COUNT\", \"REG_NOALIAS\", \"REG_SAVE_AREA\", \"REG_BR_PRED\",\n   \"REG_FRAME_RELATED_EXPR\", \"REG_EH_CONTEXT\", \"REG_EH_REGION\",\n   \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\", \"REG_NORETURN\",\n-  \"REG_NON_LOCAL_GOTO\", \"REG_SETJMP\"\n+  \"REG_NON_LOCAL_GOTO\", \"REG_SETJMP\", \"REG_ALWAYS_RETURN\"\n };\n \n \f"}, {"sha": "9e223461255e99db6d999fb27da9882cfdfd33fd", "filename": "gcc/rtl.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9d98f8f9c4bea7b6ddcc1cb935e3b17d498b4beb", "patch": "@@ -566,7 +566,10 @@ enum reg_note\n \n   /* This kind of note is generated at each to `setjmp',\n      and similar functions that can return twice.  */\n-  REG_SETJMP\n+  REG_SETJMP,\n+\n+  /* Indicate calls that always returns.  */\n+  REG_ALWAYS_RETURN\n };\n \n /* The base value for branch probability notes.  */\n@@ -1952,7 +1955,8 @@ enum libcall_type\n   LCT_CONST_MAKE_BLOCK = 3,\n   LCT_PURE_MAKE_BLOCK = 4,\n   LCT_NORETURN = 5,\n-  LCT_THROW = 6\n+  LCT_THROW = 6,\n+  LCT_ALWAYS_RETURN = 7\n };\n \n extern void emit_library_call\t\tPARAMS ((rtx, enum libcall_type,"}]}