{"sha": "443614e35f5f491ae123ca92778947c47d3418f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzNjE0ZTM1ZjVmNDkxYWUxMjNjYTkyNzc4OTQ3YzQ3ZDM0MThmMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:14:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:14:57Z"}, "message": "[multiple changes]\n\n2009-04-15  Robert Dewar  <dewar@adacore.com>\n\n\t* rtsfind.adb: Minor reformatting.\n\n2009-04-15  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-part.adb, prj-tree.adb, prj-tree.ads (Restore_And_Free): renames\n\tRestore, and free the saved context.\n\n2009-04-15  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Private_Extension_Declaration): Move error check\n\tfor illegal private extension from a synchronized interface parent in\n\tfront of check for illegal limited extension so that limited extension\n\tfrom a synchronized interface will be rejected.\n\t(Check_Ifaces): Check that a private extension that has a synchronized\n\tinterface as a progenitor must be explicitly declared synchronized.\n\tAlso check that a record extension cannot derive from a synchronized\n\tinterface.\n\nFrom-SVN: r146103", "tree": {"sha": "5fbf723004043d0918a910e4684d2e5969f3cc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fbf723004043d0918a910e4684d2e5969f3cc72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/443614e35f5f491ae123ca92778947c47d3418f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443614e35f5f491ae123ca92778947c47d3418f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443614e35f5f491ae123ca92778947c47d3418f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443614e35f5f491ae123ca92778947c47d3418f3/comments", "author": null, "committer": null, "parents": [{"sha": "991395ab4fdc4f912b37616c6ed3e51efa4a831e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991395ab4fdc4f912b37616c6ed3e51efa4a831e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991395ab4fdc4f912b37616c6ed3e51efa4a831e"}], "stats": {"total": 117, "additions": 86, "deletions": 31}, "files": [{"sha": "5d97326a457ea0ace5b04ae71eb53aeb1b517964", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=443614e35f5f491ae123ca92778947c47d3418f3", "patch": "@@ -1,3 +1,23 @@\n+2009-04-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* rtsfind.adb: Minor reformatting.\n+\n+2009-04-15  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-part.adb, prj-tree.adb, prj-tree.ads (Restore_And_Free): renames\n+\tRestore, and free the saved context.\n+\n+2009-04-15  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Private_Extension_Declaration): Move error check\n+\tfor illegal private extension from a synchronized interface parent in\n+\tfront of check for illegal limited extension so that limited extension\n+\tfrom a synchronized interface will be rejected.\n+\t(Check_Ifaces): Check that a private extension that has a synchronized\n+\tinterface as a progenitor must be explicitly declared synchronized.\n+\tAlso check that a record extension cannot derive from a synchronized\n+\tinterface.\n+\n 2009-04-15  Pascal Obry  <obry@adacore.com>\n \n \t* adaint.h (__gnat_unlink): Add spec."}, {"sha": "77a98bc1f34894e58909bce91fa85e5e22a9466e", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=443614e35f5f491ae123ca92778947c47d3418f3", "patch": "@@ -1738,7 +1738,7 @@ package body Prj.Part is\n \n       --  And restore the comment state that was saved\n \n-      Tree.Restore (Project_Comment_State);\n+      Tree.Restore_And_Free (Project_Comment_State);\n    end Parse_Single_Project;\n \n    -----------------------"}, {"sha": "e9bc4a38853617bccf4575ce27cedf4ed4df594c", "filename": "gcc/ada/prj-tree.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fprj-tree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fprj-tree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.adb?ref=443614e35f5f491ae123ca92778947c47d3418f3", "patch": "@@ -1502,11 +1502,14 @@ package body Prj.Tree is\n       Comments.Set_Last (0);\n    end Reset_State;\n \n-   -------------\n-   -- Restore --\n-   -------------\n+   ----------------------\n+   -- Restore_And_Free --\n+   ----------------------\n+\n+   procedure Restore_And_Free (S : in out Comment_State) is\n+      procedure Unchecked_Free is new\n+        Ada.Unchecked_Deallocation (Comment_Array, Comments_Ptr);\n \n-   procedure Restore (S : Comment_State) is\n    begin\n       End_Of_Line_Node   := S.End_Of_Line_Node;\n       Previous_Line_Node := S.Previous_Line_Node;\n@@ -1520,7 +1523,9 @@ package body Prj.Tree is\n          Comments.Increment_Last;\n          Comments.Table (Comments.Last) := S.Comments (J);\n       end loop;\n-   end Restore;\n+\n+      Unchecked_Free (S.Comments);\n+   end Restore_And_Free;\n \n    ----------\n    -- Save --"}, {"sha": "57fe531dc3da4aa0e64f7f553ee0389116af7575", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=443614e35f5f491ae123ca92778947c47d3418f3", "patch": "@@ -131,9 +131,9 @@ package Prj.Tree is\n    --  Save in variable S the comment state. Called before scanning a new\n    --  project file.\n \n-   procedure Restore (S : Comment_State);\n+   procedure Restore_And_Free (S : in out Comment_State);\n    --  Restore the comment state to a previously saved value. Called after\n-   --  scanning a project file.\n+   --  scanning a project file. Frees the memory occupied by S\n \n    procedure Reset_State;\n    --  Set the comment state to its initial value. Called before scanning a"}, {"sha": "9944bbf713b6bae5d27ec2aade3953a68e59add2", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=443614e35f5f491ae123ca92778947c47d3418f3", "patch": "@@ -797,7 +797,7 @@ package body Rtsfind is\n \n    procedure Maybe_Add_With (E : RE_Id; U : in out RT_Unit_Table_Record) is\n       Is_Main : constant Boolean :=\n-        In_Extended_Main_Code_Unit (Cunit_Entity (Current_Sem_Unit));\n+                  In_Extended_Main_Code_Unit (Cunit_Entity (Current_Sem_Unit));\n \n    begin\n       --  We do not need to generate a with_clause for a call issued from\n@@ -831,18 +831,18 @@ package body Rtsfind is\n       --  Here if we've decided to add the with_clause\n \n       declare\n-         Lib_Unit : constant Node_Id := Unit (Cunit (U.Unum));\n-         Withn    : constant Node_Id :=\n-           Make_With_Clause (Standard_Location,\n-             Name =>\n-               Make_Unit_Name\n-                 (E, Defining_Unit_Name (Specification (Lib_Unit))));\n+         LibUnit : constant Node_Id := Unit (Cunit (U.Unum));\n+         Withn   : constant Node_Id :=\n+                     Make_With_Clause (Standard_Location,\n+                       Name =>\n+                         Make_Unit_Name\n+                           (E, Defining_Unit_Name (Specification (LibUnit))));\n \n       begin\n-         Set_Library_Unit          (Withn, Cunit (U.Unum));\n-         Set_Corresponding_Spec    (Withn, U.Entity);\n-         Set_First_Name            (Withn, True);\n-         Set_Implicit_With         (Withn, True);\n+         Set_Library_Unit       (Withn, Cunit (U.Unum));\n+         Set_Corresponding_Spec (Withn, U.Entity);\n+         Set_First_Name         (Withn, True);\n+         Set_Implicit_With      (Withn, True);\n \n          Mark_Rewrite_Insertion (Withn);\n          Append (Withn, Context_Items (Cunit (Current_Sem_Unit)));"}, {"sha": "8ee4b01af36b14b1a0269cc8cb9308c59a18baa6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443614e35f5f491ae123ca92778947c47d3418f3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=443614e35f5f491ae123ca92778947c47d3418f3", "patch": "@@ -3326,6 +3326,21 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n+      --  A consequence of 3.9.4 (6/2) and 7.3 (7.2/2) is that a private\n+      --  extension with a synchronized parent must be explicitly declared\n+      --  synchronized, because the full view will be a synchronized type.\n+      --  This must be checked before the check for limited types below,\n+      --  to ensure that types declared limited are not allowed extend\n+      --  synchronized interfaces.\n+\n+      elsif Is_Interface (Parent_Type)\n+        and then Is_Synchronized_Interface (Parent_Type)\n+        and then not Synchronized_Present (N)\n+      then\n+         Error_Msg_NE\n+           (\"private extension of& must be explicitly synchronized\",\n+             N, Parent_Type);\n+\n       elsif Limited_Present (N) then\n          Set_Is_Limited_Record (T);\n \n@@ -3337,18 +3352,6 @@ package body Sem_Ch3 is\n             Error_Msg_NE (\"parent type& of limited extension must be limited\",\n               N, Parent_Type);\n          end if;\n-\n-      --  A consequence of 3.9.4 (6/2) and 7.3 (2.2/2) is that a private\n-      --  extension with a synchronized parent must be explicitly declared\n-      --  synchronized, because the full view will be a synchronized type.\n-\n-      elsif Is_Interface (Parent_Type)\n-        and then Is_Synchronized_Interface (Parent_Type)\n-        and then not Synchronized_Present (N)\n-      then\n-         Error_Msg_NE\n-           (\"private extension of& must be explicitly synchronized\",\n-             N, Parent_Type);\n       end if;\n    end Analyze_Private_Extension_Declaration;\n \n@@ -8712,6 +8715,33 @@ package body Sem_Ch3 is\n             Is_Protected := True;\n          end if;\n \n+         if Is_Synchronized_Interface (Iface_Id) then\n+\n+            --  A consequence of 3.9.4 (6/2) and 7.3 (7.2/2) is that a private\n+            --  extension derived from a synchronized interface must explicitly\n+            --  be declared synchronized, because the full view will be a\n+            --  synchronized type.\n+\n+            if Nkind (N) = N_Private_Extension_Declaration then\n+               if not Synchronized_Present (N) then\n+                  Error_Msg_NE\n+                    (\"private extension of& must be explicitly synchronized\",\n+                      N, Iface_Id);\n+               end if;\n+\n+            --  However, by 3.9.4(16/2), a full type that is a record extension\n+            --  is never allowed to derive from a synchronized interface (note\n+            --  that interfaces must be excluded from this check, because those\n+            --  are represented by derived type definitions in some cases).\n+\n+            elsif Nkind (Type_Definition (N)) = N_Derived_Type_Definition\n+              and then not Interface_Present (Type_Definition (N))\n+            then\n+               Error_Msg_N (\"record extension cannot derive from synchronized\"\n+                             & \" interface\", Error_Node);\n+            end if;\n+         end if;\n+\n          --  Check that the characteristics of the progenitor are compatible\n          --  with the explicit qualifier in the declaration.\n          --  The check only applies to qualifiers that come from source."}]}