{"sha": "e2642e2b2c13b64d3d8453bc611fee20f73aa420", "node_id": "C_kwDOANBUbNoAKGUyNjQyZTJiMmMxM2I2NGQzZDg0NTNiYzYxMWZlZTIwZjczYWE0MjA", "commit": {"author": {"name": "Etienne Servais", "email": "servais@adacore.com", "date": "2021-11-15T16:32:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-05T11:32:36Z"}, "message": "[Ada] Fix condition to build subtype for discriminated types\n\ngcc/ada/\n\n\t* sem_ch3.adb (Analyze_Component_Declaration): Rework condition\n\tto build subtypes.\n\t(Analyze_Object_Declaration): Likewise.\n\t(Should_Build_Subtype): New.", "tree": {"sha": "fd429b660e9d3dc1fffd58f26548f368a72b4147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd429b660e9d3dc1fffd58f26548f368a72b4147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2642e2b2c13b64d3d8453bc611fee20f73aa420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2642e2b2c13b64d3d8453bc611fee20f73aa420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2642e2b2c13b64d3d8453bc611fee20f73aa420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2642e2b2c13b64d3d8453bc611fee20f73aa420/comments", "author": {"login": "vser1", "id": 8308457, "node_id": "MDQ6VXNlcjgzMDg0NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8308457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vser1", "html_url": "https://github.com/vser1", "followers_url": "https://api.github.com/users/vser1/followers", "following_url": "https://api.github.com/users/vser1/following{/other_user}", "gists_url": "https://api.github.com/users/vser1/gists{/gist_id}", "starred_url": "https://api.github.com/users/vser1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vser1/subscriptions", "organizations_url": "https://api.github.com/users/vser1/orgs", "repos_url": "https://api.github.com/users/vser1/repos", "events_url": "https://api.github.com/users/vser1/events{/privacy}", "received_events_url": "https://api.github.com/users/vser1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfcc4dd71b5e17488c85a42db86aef433ac712fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcc4dd71b5e17488c85a42db86aef433ac712fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcc4dd71b5e17488c85a42db86aef433ac712fd"}], "stats": {"total": 105, "additions": 88, "deletions": 17}, "files": [{"sha": "7fcde4dc87c7767fdc0a8c9d9b5418448ad95c6a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 88, "deletions": 17, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2642e2b2c13b64d3d8453bc611fee20f73aa420/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2642e2b2c13b64d3d8453bc611fee20f73aa420/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e2642e2b2c13b64d3d8453bc611fee20f73aa420", "patch": "@@ -723,6 +723,16 @@ package body Sem_Ch3 is\n    --  sets the flags SSO_Set_Low_By_Default/SSO_Set_High_By_Default according\n    --  to the setting of Opt.Default_SSO.\n \n+   function Should_Build_Subtype (T : Entity_Id) return Boolean;\n+   --  When analyzing components or object declarations, it is possible, in\n+   --  some cases, to build subtypes for discriminated types. This is\n+   --  worthwhile to avoid the backend allocating the maximum possible size for\n+   --  objects of the type.\n+   --  In particular, when T is limited, the discriminants and therefore the\n+   --  size of an object of type T cannot change. Furthermore, if T is definite\n+   --  with statically initialized defaulted discriminants, we are able and\n+   --  want to build a constrained subtype of the right size.\n+\n    procedure Signed_Integer_Type_Declaration (T : Entity_Id; Def : Node_Id);\n    --  Create a new signed integer entity, and apply the constraint to obtain\n    --  the required first named subtype of this type.\n@@ -2203,17 +2213,9 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  If the component is an unconstrained task or protected type with\n-      --  discriminants, the component and the enclosing record are limited\n-      --  and the component is constrained by its default values. Compute\n-      --  its actual subtype, else it may be allocated the maximum size by\n-      --  the backend, and possibly overflow.\n+      --  When possible, build the default subtype\n \n-      if Is_Concurrent_Type (T)\n-        and then not Is_Constrained (T)\n-        and then Has_Discriminants (T)\n-        and then not Has_Discriminants (Current_Scope)\n-      then\n+      if Should_Build_Subtype (T) then\n          declare\n             Act_T : constant Entity_Id := Build_Default_Subtype (T, N);\n \n@@ -4799,14 +4801,9 @@ package body Sem_Ch3 is\n             Apply_Length_Check (E, T);\n          end if;\n \n-      --  If the type is limited unconstrained with defaulted discriminants and\n-      --  there is no expression, then the object is constrained by the\n-      --  defaults, so it is worthwhile building the corresponding subtype.\n+      --  When possible, build the default subtype\n \n-      elsif (Is_Limited_Record (T) or else Is_Concurrent_Type (T))\n-        and then not Is_Constrained (T)\n-        and then Has_Discriminants (T)\n-      then\n+      elsif Should_Build_Subtype (T) then\n          if No (E) then\n             Act_T := Build_Default_Subtype (T, N);\n          else\n@@ -22879,6 +22876,80 @@ package body Sem_Ch3 is\n       end if;\n    end Set_Stored_Constraint_From_Discriminant_Constraint;\n \n+   --------------------------\n+   -- Should_Build_Subtype --\n+   --------------------------\n+\n+   function Should_Build_Subtype (T : Entity_Id) return Boolean is\n+\n+      function Default_Discriminant_Values_Known_At_Compile_Time\n+         (T : Entity_Id) return Boolean;\n+         --  For an unconstrained type T, return False if the given type has a\n+         --  discriminant with default value not known at compile time. Return\n+         --  True otherwise.\n+\n+      ---------------------------------------------------------\n+      -- Default_Discriminant_Values_Known_At_Compile_Time --\n+      ---------------------------------------------------------\n+\n+      function Default_Discriminant_Values_Known_At_Compile_Time\n+         (T : Entity_Id) return Boolean\n+      is\n+         Discr : Entity_Id;\n+         DDV : Node_Id;\n+\n+      begin\n+\n+         --  If the type has no discriminant, we know them all at compile time\n+\n+         if not Has_Discriminants (T) then\n+            return True;\n+         end if;\n+\n+         --  The type has discriminants, check that none of them has a default\n+         --  value not known at compile time.\n+\n+         Discr := First_Discriminant (T);\n+\n+         while Present (Discr) loop\n+            DDV := Discriminant_Default_Value (Discr);\n+\n+            if Present (DDV) and then not Compile_Time_Known_Value (DDV) then\n+               return False;\n+            end if;\n+\n+            Next_Discriminant (Discr);\n+         end loop;\n+\n+         return True;\n+      end Default_Discriminant_Values_Known_At_Compile_Time;\n+\n+   --  Start of processing for Should_Build_Subtype\n+\n+   begin\n+\n+      if Is_Constrained (T) then\n+\n+         --  We won't build a new subtype if T is constrained\n+\n+         return False;\n+      end if;\n+\n+      if not Default_Discriminant_Values_Known_At_Compile_Time (T) then\n+\n+         --  This is a special case of definite subtypes. To allocate a\n+         --  specific size to the subtype, we need to know the value at compile\n+         --  time. This might not be the case if the default value is the\n+         --  result of a function. In that case, the object might be definite\n+         --  and limited but the needed size might not be statically known or\n+         --  too tricky to obtain. In that case, we will not build the subtype.\n+\n+         return False;\n+      end if;\n+\n+      return Is_Definite_Subtype (T) and then Is_Limited_View (T);\n+   end Should_Build_Subtype;\n+\n    -------------------------------------\n    -- Signed_Integer_Type_Declaration --\n    -------------------------------------"}]}