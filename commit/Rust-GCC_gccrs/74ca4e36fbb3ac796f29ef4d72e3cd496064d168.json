{"sha": "74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjYTRlMzZmYmIzYWM3OTZmMjllZjRkNzJlM2NkNDk2MDY0ZDE2OA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-05-26T09:25:00Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-05-26T09:25:00Z"}, "message": "Replace absolute line numbers in gcc.dg\n\n2017-05-26  Tom de Vries  <tom@codesourcery.com>\n\n\tPR testsuite/80557\n\t* gcc.dg/20011021-1.c: Replace absolute line numbers.\n\t* gcc.dg/Wcxx-compat-8.c: Same.\n\t* gcc.dg/Wobjsize-1.c: Same.\n\t* gcc.dg/Wshadow-local-2.c: Same.\n\t* gcc.dg/Wstrict-aliasing-converted-assigned.c: Same.\n\t* gcc.dg/anon-struct-6.c: Same.\n\t* gcc.dg/asm-wide-1.c: Same.\n\t* gcc.dg/builtin-inf-1.c: Same.\n\t* gcc.dg/builtin-redefine.c: Same.\n\t* gcc.dg/c90-array-lval-6.c: Same.\n\t* gcc.dg/c90-array-lval-7.c: Same.\n\t* gcc.dg/c90-fordecl-1.c: Same.\n\t* gcc.dg/c99-fordecl-2.c: Same.\n\t* gcc.dg/cast-lvalue-1.c: Same.\n\t* gcc.dg/cast-lvalue-2.c: Same.\n\t* gcc.dg/compound-lvalue-1.c: Same.\n\t* gcc.dg/cond-lvalue-1.c: Same.\n\t* gcc.dg/cpp/20000419-1.c: Same.\n\t* gcc.dg/cpp/backslash.c: Same.\n\t* gcc.dg/cpp/backslash2.c: Same.\n\t* gcc.dg/cpp/macspace1.c: Same.\n\t* gcc.dg/cpp/macspace2.c: Same.\n\t* gcc.dg/cpp/multiline-2.c: Same.\n\t* gcc.dg/cpp/pr27777.c: Same.\n\t* gcc.dg/cpp/pr30786.c: Same.\n\t* gcc.dg/cpp/pr34602.c: Same.\n\t* gcc.dg/cpp/redef1.c: Same.\n\t* gcc.dg/cpp/tr-warn1.c: Same.\n\t* gcc.dg/cpp/tr-warn3.c: Same.\n\t* gcc.dg/cpp/tr-warn6.c: Same.\n\t* gcc.dg/cpp/trad/hash.c: Same.\n\t* gcc.dg/cpp/trad/redef1.c: Same.\n\t* gcc.dg/cpp/ucs.c: Same.\n\t* gcc.dg/declspec-10.c: Same.\n\t* gcc.dg/declspec-11.c: Same.\n\t* gcc.dg/declspec-18.c: Same.\n\t* gcc.dg/format/c99-strftime-1.c: Same.\n\t* gcc.dg/format/ext-3.c: Same.\n\t* gcc.dg/format/pr72858.c: Same.\n\t* gcc.dg/gomp/appendix-a/a.24.1.c: Same.\n\t* gcc.dg/init-string-1.c: Same.\n\t* gcc.dg/label-decl-3.c: Same.\n\t* gcc.dg/m-un-2.c: Same.\n\t* gcc.dg/nofixed-point-2.c: Same.\n\t* gcc.dg/noncompile/20020213-1.c: Same.\n\t* gcc.dg/pch/counter-2.c: Same.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-2.c: Same.\n\t* gcc.dg/pr27528.c: Same.\n\t* gcc.dg/pr27953.c: Same.\n\t* gcc.dg/pr35899.c: Same.\n\t* gcc.dg/pr37561.c: Same.\n\t* gcc.dg/pr45461.c: Same.\n\t* gcc.dg/pr45750.c: Same.\n\t* gcc.dg/pr53196-2.c: Same.\n\t* gcc.dg/pr53265.c: Same.\n\t* gcc.dg/redecl-1.c: Same.\n\t* gcc.dg/tls/thr-init-1.c: Same.\n\t* gcc.dg/torture/pr51106-1.c: Same.\n\t* gcc.dg/torture/pr51106-2.c: Same.\n\t* gcc.dg/uninit-19.c: Same.\n\t* gcc.dg/uninit-pr20644.c: Same.\n\nFrom-SVN: r248484", "tree": {"sha": "7ac483f3641a0ab14ad1089216741db06cdd0e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ac483f3641a0ab14ad1089216741db06cdd0e02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/comments", "author": null, "committer": null, "parents": [{"sha": "6fc9f7aa731e895585c47d740509b5cd1591e797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc9f7aa731e895585c47d740509b5cd1591e797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc9f7aa731e895585c47d740509b5cd1591e797"}], "stats": {"total": 539, "additions": 323, "deletions": 216}, "files": [{"sha": "b2fc5b6d8b1e87542381fb8b96e4a08e9df15c0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -1,3 +1,68 @@\n+2017-05-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/80557\n+\t* gcc.dg/20011021-1.c: Replace absolute line numbers.\n+\t* gcc.dg/Wcxx-compat-8.c: Same.\n+\t* gcc.dg/Wobjsize-1.c: Same.\n+\t* gcc.dg/Wshadow-local-2.c: Same.\n+\t* gcc.dg/Wstrict-aliasing-converted-assigned.c: Same.\n+\t* gcc.dg/anon-struct-6.c: Same.\n+\t* gcc.dg/asm-wide-1.c: Same.\n+\t* gcc.dg/builtin-inf-1.c: Same.\n+\t* gcc.dg/builtin-redefine.c: Same.\n+\t* gcc.dg/c90-array-lval-6.c: Same.\n+\t* gcc.dg/c90-array-lval-7.c: Same.\n+\t* gcc.dg/c90-fordecl-1.c: Same.\n+\t* gcc.dg/c99-fordecl-2.c: Same.\n+\t* gcc.dg/cast-lvalue-1.c: Same.\n+\t* gcc.dg/cast-lvalue-2.c: Same.\n+\t* gcc.dg/compound-lvalue-1.c: Same.\n+\t* gcc.dg/cond-lvalue-1.c: Same.\n+\t* gcc.dg/cpp/20000419-1.c: Same.\n+\t* gcc.dg/cpp/backslash.c: Same.\n+\t* gcc.dg/cpp/backslash2.c: Same.\n+\t* gcc.dg/cpp/macspace1.c: Same.\n+\t* gcc.dg/cpp/macspace2.c: Same.\n+\t* gcc.dg/cpp/multiline-2.c: Same.\n+\t* gcc.dg/cpp/pr27777.c: Same.\n+\t* gcc.dg/cpp/pr30786.c: Same.\n+\t* gcc.dg/cpp/pr34602.c: Same.\n+\t* gcc.dg/cpp/redef1.c: Same.\n+\t* gcc.dg/cpp/tr-warn1.c: Same.\n+\t* gcc.dg/cpp/tr-warn3.c: Same.\n+\t* gcc.dg/cpp/tr-warn6.c: Same.\n+\t* gcc.dg/cpp/trad/hash.c: Same.\n+\t* gcc.dg/cpp/trad/redef1.c: Same.\n+\t* gcc.dg/cpp/ucs.c: Same.\n+\t* gcc.dg/declspec-10.c: Same.\n+\t* gcc.dg/declspec-11.c: Same.\n+\t* gcc.dg/declspec-18.c: Same.\n+\t* gcc.dg/format/c99-strftime-1.c: Same.\n+\t* gcc.dg/format/ext-3.c: Same.\n+\t* gcc.dg/format/pr72858.c: Same.\n+\t* gcc.dg/gomp/appendix-a/a.24.1.c: Same.\n+\t* gcc.dg/init-string-1.c: Same.\n+\t* gcc.dg/label-decl-3.c: Same.\n+\t* gcc.dg/m-un-2.c: Same.\n+\t* gcc.dg/nofixed-point-2.c: Same.\n+\t* gcc.dg/noncompile/20020213-1.c: Same.\n+\t* gcc.dg/pch/counter-2.c: Same.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-2.c: Same.\n+\t* gcc.dg/pr27528.c: Same.\n+\t* gcc.dg/pr27953.c: Same.\n+\t* gcc.dg/pr35899.c: Same.\n+\t* gcc.dg/pr37561.c: Same.\n+\t* gcc.dg/pr45461.c: Same.\n+\t* gcc.dg/pr45750.c: Same.\n+\t* gcc.dg/pr53196-2.c: Same.\n+\t* gcc.dg/pr53265.c: Same.\n+\t* gcc.dg/redecl-1.c: Same.\n+\t* gcc.dg/tls/thr-init-1.c: Same.\n+\t* gcc.dg/torture/pr51106-1.c: Same.\n+\t* gcc.dg/torture/pr51106-2.c: Same.\n+\t* gcc.dg/uninit-19.c: Same.\n+\t* gcc.dg/uninit-pr20644.c: Same.\n+\n 2017-05-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/cpp1z/decomp29.C (p): New variable."}, {"sha": "2d567a75381915dca4cef9b900e966ca8d6c627d", "filename": "gcc/testsuite/gcc.dg/20011021-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -24,7 +24,7 @@ struct multilevel\n    struct t t;\n    union u u;\n    union u v;\n-   char *f;\n+   char *f; /* { dg-line multilevel_f } */\n };\n \n struct t T0 = { 1 };\t\t/* { dg-warning \"missing init\" } */\n@@ -42,4 +42,4 @@ struct multilevel M =\n   { .n = 9 },\t\t\t/* { dg-bogus \"initialization of union\" } */\n   /* \"string here\" */\n };\t\t\t\t/* { dg-warning \"missing init\" } */\n-/* { dg-message \"declared here\" \"near init\" { target *-*-* } 27 } */\n+/* { dg-message \"declared here\" \"near init\" { target *-*-* } multilevel_f } */"}, {"sha": "9627dced3472f8de0aa454b3e1a869fd0eb50014", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-8.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -63,6 +63,5 @@ void *\n f5 ()\n {\n   return &((struct t8) { });  /* { dg-warning \"invalid in C\\[+\\]\\[+\\]\" } */\n+  /* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } .-1 } */\n }\n-\n-/* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } 65 } */"}, {"sha": "19c7e68e0106ab9f5a8e331f44bd3a551c04a835", "filename": "gcc/testsuite/gcc.dg/Wobjsize-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -4,12 +4,13 @@\n #include \"Wobjsize-1.h\"\n \n char buf[6];\n+/* { dg-warning \"writing\" \"\" { target *-*-* } .-1 } */\n+\n int main(int argc, char **argv)\n {\n   strcpy (buf,\"hello \");\n   return 0;\n }\n \n-/* { dg-warning \"writing\" \"\" { target *-*-* } 6 } */\n /* { dg-message \"file included\" \"included\" { target *-*-* } 0 } */\n /* { dg-message \"inlined from\" \"inlined\" { target *-*-* } 0 } */"}, {"sha": "55ff978a12f1ef1fb173f23f67c5f143ba99cf39", "filename": "gcc/testsuite/gcc.dg/Wshadow-local-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -40,10 +40,11 @@ int func3() {\n \n void func4() {\n   struct Bar bar;     /* { dg-message \"shadowed declaration\" } */\n+  /* { dg-bogus \"shadows a global\" \"\"  { target *-*-* } .-1 } */\n+\n   if (val) {\n     int bar;          /* { dg-warning \"shadows a previous local\" } */\n     func1(bar);\n   }\n }\n \n-/* { dg-bogus \"shadows a global\" \"\"  { target *-*-* } 42 } */"}, {"sha": "c44fc429a114e39d9f82295bcdb85417104f0a28", "filename": "gcc/testsuite/gcc.dg/Wstrict-aliasing-converted-assigned.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-aliasing-converted-assigned.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-aliasing-converted-assigned.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-aliasing-converted-assigned.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -6,10 +6,9 @@ int foo()\n {\n   int i;\n   *(long*)&i = 0;  /* { dg-warning \"type-punn\" \"type-punn\" } */\n+  /* These messages are only expected for lp64, but fail there.  When they\n+     pass for lp64, replace \"xfail *-*-*\" with \"target lp64\".  */\n+  /* { dg-message \"does break strict-aliasing\" \"break\" { xfail *-*-* } .-3 } */\n+  /* { dg-message \"initialized\" \"init\" { xfail *-*-* } .-4 } */\n   return i;\n }\n-\n-/* These messages are only expected for lp64, but fail there.  When they\n-   pass for lp64, replace \"xfail *-*-*\" with \"target lp64\".  */\n-/* { dg-message \"does break strict-aliasing\" \"break\" { xfail *-*-* } 8 } */\n-/* { dg-message \"initialized\" \"init\" { xfail *-*-* } 8 } */"}, {"sha": "792769b886860e770329c496c58714beb4ed22a1", "filename": "gcc/testsuite/gcc.dg/anon-struct-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanon-struct-6.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -7,6 +7,6 @@\n struct s {\n   int a;\n   const;\n+  /* { dg-warning \"useless type qualifier in empty declaration\" \"empty\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"empty declaration\" \"empty 2\" { target *-*-* } .-2 } */\n };\n-/* { dg-warning \"useless type qualifier in empty declaration\" \"empty\" { target *-*-* } 9 } */\n-/* { dg-warning \"empty declaration\" \"empty 2\" { target *-*-* } 9 } */"}, {"sha": "88bbaed7f16a627bb382891ded3715346ab7ee7c", "filename": "gcc/testsuite/gcc.dg/asm-wide-1.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -14,19 +14,18 @@ f (void)\n   asm (L\"foo\"); /* { dg-error \"8:wide string literal in 'asm'\" } */\n   asm (\"foo\" :\n        L\"=g\" (x)); /* { dg-error \"8:wide string literal in 'asm'\" } */\n+  /* Extra errors from the substitution of \"\" for wide strings: */\n+  /* { dg-error \"output\" \"output\" { target *-*-* } .-2 } */\n   asm (\"foo\" : [x]\n        L\"=g\" (x)); /* { dg-error \"8:wide string literal in 'asm'\" } */\n+  /* { dg-error \"output\" \"output\" { target *-*-* } .-1 } */\n   asm (\"foo\" : [x] \"=g\" (x),\n        L\"=g\" (x)); /* { dg-error \"8:wide string literal in 'asm'\" } */\n+  /* { dg-error \"output\" \"output\" { target *-*-* } .-1 } */\n   asm (\"foo\" : :\n        L\"g\" (x)); /* { dg-error \"8:wide string literal in 'asm'\" } */\n   asm (\"foo\" : : :\n        L\"memory\"); /* { dg-error \"8:wide string literal in 'asm'\" } */\n   asm (\"foo\" : : : \"memory\",\n        L\"memory\"); /* { dg-error \"8:wide string literal in 'asm'\" } */\n }\n-\n-/* Extra errors from the substitution of \"\" for wide strings: */\n-/* { dg-error \"output\" \"output\" { target *-*-* } 16 } */\n-/* { dg-error \"output\" \"output\" { target *-*-* } 18 } */\n-/* { dg-error \"output\" \"output\" { target *-*-* } 20 } */"}, {"sha": "1e00bdc07614c297bfc0d90aa7201f90971ad8ea", "filename": "gcc/testsuite/gcc.dg/builtin-inf-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-inf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-inf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-inf-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -1,13 +1,13 @@\n /* { dg-do compile } */\n \n float fi = __builtin_inff();\n+/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* spu-*-* } .-1 } */\n double di = __builtin_inf();\n+/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* } .-1 } */\n long double li = __builtin_infl();\n+/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* } .-1 } */\n \n float fh = __builtin_huge_valf();\n double dh = __builtin_huge_val();\n long double lh = __builtin_huge_vall();\n \n-/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* spu-*-* } 3 } */\n-/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* } 4 } */\n-/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* } 5 } */"}, {"sha": "8090015f69344ca55cf9cb91cfa73e837bc56496", "filename": "gcc/testsuite/gcc.dg/builtin-redefine.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -25,30 +25,30 @@\n #undef __TIME__              /* Undefine while already undefined.  */\n \n #define __TIME__ \"X\"         /* Define while undefined.  */\n-#define __TIME__ \"X\"         /* Re-define while defined.  */\n+#define __TIME__ \"X\"         /* Re-define while defined.  */ /* { dg-line time_prev } */\n \n #define __TIME__ \"Y\"         /* { dg-warning \"\\\"__TIME__\\\" redefined\" } */\n-/* { dg-message \"previous definition\" \"\" { target *-*-* } 28 } */\n+/* { dg-message \"previous definition\" \"\" { target *-*-* } time_prev } */\n \n #undef __TIME__              /* Undefine while defined.  */\n \n \n #undef __DATE__              /* Undefine while already undefined.  */\n \n #define __DATE__ \"X\"         /* Define while undefined.  */\n-#define __DATE__ \"X\"         /* Re-define while defined.  */\n+#define __DATE__ \"X\"         /* Re-define while defined.  */ /* { dg-line date_prev } */\n \n #define __DATE__ \"Y\"         /* { dg-warning \"\\\"__DATE__\\\" redefined\" } */\n-/* { dg-message \"previous definition\" \"\" { target *-*-* } 39 } */\n+/* { dg-message \"previous definition\" \"\" { target *-*-* } date_prev } */\n \n #undef __DATE__              /* Undefine while defined.  */\n \n \n #define __TIMESTAMP__ \"X\"    /* Define while already defined.  */\n-#define __TIMESTAMP__ \"X\"    /* Re-define while defined.  */\n+#define __TIMESTAMP__ \"X\"    /* Re-define while defined.  */ /* { dg-line timestamp_prev } */\n \n #define __TIMESTAMP__ \"Y\"    /* { dg-warning \"\\\"__TIMESTAMP__\\\" redefined\" } */\n-/* { dg-message \"previous definition\" \"\" { target *-*-* } 48 } */\n+/* { dg-message \"previous definition\" \"\" { target *-*-* } timestamp_prev } */\n \n #undef __TIMESTAMP__         /* Undefine while defined.  */\n "}, {"sha": "dc57ed707744a903bf341c2b89cb75147dfd881f", "filename": "gcc/testsuite/gcc.dg/c90-array-lval-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-6.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -12,5 +12,5 @@ extern struct s foo(void);\n void bar(void)\n {\n   char *ptr = foo().c; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"non-lvalue\" \"array not decaying to lvalue\" { target *-*-* } .-1 } */\n }\n-/* { dg-error \"non-lvalue\" \"array not decaying to lvalue\" { target *-*-* } 14 } */"}, {"sha": "9b41777a15b14075b2f8ec425c5ab91ed8fa2750", "filename": "gcc/testsuite/gcc.dg/c90-array-lval-7.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-7.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -18,6 +18,5 @@ bar (void)\n      6.3.15 does not permit conditional expressions between arrays.\n      In C99, they decay to pointers.  */\n   (e ? (d ? b : c).c : (e ? b : c).c); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"array\" \"bad conditional\" { target *-*-* } .-1 } */\n }\n-\n-/* { dg-error \"array\" \"bad conditional\" { target *-*-* } 20 } */"}, {"sha": "0fb9b202df1267718cd8839b62eec9abd355b447", "filename": "gcc/testsuite/gcc.dg/c90-fordecl-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-fordecl-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -8,7 +8,7 @@ foo (void)\n {\n   int j = 0;\n   for (int i = 1; i <= 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"'for' loop initial declarations are only allowed in C99 or C11 mode\" \"declaration in for loop\" { target *-*-* } .-1 } */\n+    /* { dg-message \"note: use option -std=c99, -std=gnu99, -std=c11 or -std=gnu11 to compile your code\" \"note\" { target *-*-* } .-2 }} */\n     j += i;\n-  /* { dg-error \"'for' loop initial declarations are only allowed in C99 or C11 mode\" \"declaration in for loop\" { target *-*-* } 10 } */\n-  /* { dg-message \"note: use option -std=c99, -std=gnu99, -std=c11 or -std=gnu11 to compile your code\" \"note\" { target *-*-* } 10 }} */\n }"}, {"sha": "aa5bc783ff801eac0192b281ba7fc5ceaab24f6c", "filename": "gcc/testsuite/gcc.dg/c99-fordecl-2.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-fordecl-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -10,19 +10,23 @@ foo (void)\n      behind these tests.  */\n   int j = 0;\n   for (int i = 1, bar (void); i <= 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"bar\" \"function in for loop\" { target *-*-* } .-1 } */\n     j += i;\n-  /* { dg-error \"bar\" \"function in for loop\" { target *-*-* } 12 } */\n+\n   for (static int i = 1; i <= 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"static\" \"static in for loop\" { target *-*-* } .-1 } */\n     j += i;\n-  /* { dg-error \"static\" \"static in for loop\" { target *-*-* } 15 } */\n+\n   for (extern int i; j <= 500; j++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"extern\" \"extern in for loop\" { target *-*-* } .-1 } */\n     j += 5;\n-  /* { dg-error \"extern\" \"extern in for loop\" { target *-*-* } 18 } */\n+\n   for (enum { FOO } i = FOO; i < 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"FOO\" \"enum value in for loop\" { target *-*-* } .-1 } */\n     j += i;\n-  /* { dg-error \"FOO\" \"enum value in for loop\" { target *-*-* } 21 } */\n+\n   for (enum BAR { FOO } i = FOO; i < 10; i++) /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"FOO\" \"enum value in for loop\" { target *-*-* } .-1 } */\n+    /* { dg-error \"BAR\" \"enum tag in for loop\" { target *-*-* } .-2 } */\n     j += i;\n-  /* { dg-error \"FOO\" \"enum value in for loop\" { target *-*-* } 24 } */\n-  /* { dg-error \"BAR\" \"enum tag in for loop\" { target *-*-* } 24 } */\n }"}, {"sha": "ef3ae0a4db116ad665f070f459cceb30542edca3", "filename": "gcc/testsuite/gcc.dg/cast-lvalue-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -9,5 +9,5 @@ void\n foo (void)\n {\n   (char) x = 1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"lvalue\" \"cast as lvalue\" { target *-*-* } .-1 } */\n }\n-/* { dg-error \"lvalue\" \"cast as lvalue\" { target *-*-* } 11 } */"}, {"sha": "0dcbedc7c23437cb74dc3444f95f1fb8624e35ef", "filename": "gcc/testsuite/gcc.dg/cast-lvalue-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-lvalue-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -9,5 +9,5 @@ void\n foo (void)\n {\n   (int) x = 1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"lvalue\" \"cast as lvalue\" { target *-*-* } .-1 } */\n }\n-/* { dg-error \"lvalue\" \"cast as lvalue\" { target *-*-* } 11 } */"}, {"sha": "ffff76e47a4968562bad7545731a711d063a6dae", "filename": "gcc/testsuite/gcc.dg/compound-lvalue-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcompound-lvalue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcompound-lvalue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompound-lvalue-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -9,5 +9,5 @@ void\n foo (void)\n {\n   (x, y) = 1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"lvalue\" \"compound expression as lvalue\" { target *-*-* } .-1 } */\n }\n-/* { dg-error \"lvalue\" \"compound expression as lvalue\" { target *-*-* } 11 } */"}, {"sha": "d7995c7eda55536ec879a7923ea7af29100f089f", "filename": "gcc/testsuite/gcc.dg/cond-lvalue-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-lvalue-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-lvalue-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-lvalue-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -9,5 +9,5 @@ void\n foo (void)\n {\n   (x ? y : z) = 1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"lvalue\" \"conditional expression as lvalue\" { target *-*-* } .-1 } */\n }\n-/* { dg-error \"lvalue\" \"conditional expression as lvalue\" { target *-*-* } 11 } */"}, {"sha": "c23731639901ffc55a33e17659bdb89f4c9a5d7f", "filename": "gcc/testsuite/gcc.dg/cpp/20000419-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000419-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000419-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000419-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -10,6 +10,5 @@\n \n __REDIRECT (a, b, c)\n __ASMNAME2 (__USER_LABEL_PREFIX__, harumph)\n-\n-/* { dg-bogus \"used without args\" \"no args, 1\" { target *-*-* } 11 } */\n-/* { dg-bogus \"used without args\" \"no args, 1\" { target *-*-* } 12 } */\n+/* { dg-bogus \"used without args\" \"no args, 1\" { target *-*-* } .-2 } */\n+/* { dg-bogus \"used without args\" \"no args, 1\" { target *-*-* } .-2 } */"}, {"sha": "3255a6a5f9de3d49abb7f2f9c691e73d5fe88a20", "filename": "gcc/testsuite/gcc.dg/cpp/backslash.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbackslash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbackslash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbackslash.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -5,16 +5,15 @@\n \tb, \\\n \tc\n \n-/* Note the trailing whitespace on the next three lines.  */\n+/* Note the trailing whitespace on the first three lines of beta def.  */\n+/* { dg-warning \"separated by space\" \"space\" { target *-*-* } .+3 } */\n+/* { dg-warning \"separated by space\" \"tab\" { target *-*-* } .+3 } */\n+/* { dg-warning \"separated by space\" \"space and tab\" { target *-*-* } .+3 } */\n #define beta(a, b, c) \\ \n \ta, \\\t\n \tb, \\ \t\n \tc\n \n-/* { dg-warning \"separated by space\" \"space\" { target *-*-* } 9 } */\n-/* { dg-warning \"separated by space\" \"tab\" { target *-*-* } 10 } */\n-/* { dg-warning \"separated by space\" \"space and tab\" { target *-*-* } 11 } */\n-\n int x[] = {\n    alpha(1, 2, 3),\n    beta(4, 5, 6)"}, {"sha": "5c10e868107e93f240c6d181f515aed523f7a51d", "filename": "gcc/testsuite/gcc.dg/cpp/backslash2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbackslash2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbackslash2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fbackslash2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -7,8 +7,8 @@\n \n foo \\  \n bar\n-/* { dg-warning \"separated by space\" \"\" { target *-*-* } 8 } */\n+/* { dg-warning \"separated by space\" \"\" { target *-*-* } .-2 } */\n \n /* foo \\   \n    bar */\n-/* { dg-bogus \"separated by space\" \"\" { target *-*-* } 12 } */\n+/* { dg-bogus \"separated by space\" \"\" { target *-*-* } .-2 } */"}, {"sha": "b920f892ac5cfec64cafa14db98771e1bfd66179", "filename": "gcc/testsuite/gcc.dg/cpp/macspace1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -4,10 +4,12 @@\n \n #define a!\t\t/* { dg-warning \"missing whitespace\" } */\n #define b\"\t\t/* { dg-warning \"missing whitespace\" } */\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } .-1 } */\n #define c#\t\t/* { dg-warning \"missing whitespace\" } */\n #define d%\t\t/* { dg-warning \"missing whitespace\" } */\n #define e&\t\t/* { dg-warning \"missing whitespace\" } */\n #define f'\t\t/* { dg-warning \"missing whitespace\" } */\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } .-1 } */\n #define g)\t\t/* { dg-warning \"missing whitespace\" } */\n #define h*\t\t/* { dg-warning \"missing whitespace\" } */\n #define i+\t\t/* { dg-warning \"missing whitespace\" } */\n@@ -59,5 +61,3 @@\n #define ag\"abc\"\t\t/* { dg-warning \"missing whitespace\" } */\n \n int dummy;\n-/* { dg-error \"missing terminating\" \"\" { target *-*-* } 6 } */\n-/* { dg-error \"missing terminating\" \"\" { target *-*-* } 10 } */"}, {"sha": "87716d6d43c368638fe9b1766b5aac4647693c61", "filename": "gcc/testsuite/gcc.dg/cpp/macspace2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -4,10 +4,12 @@\n \n #define a!\t\t/* { dg-error \"requires whitespace\" } */\n #define b\"\t\t/* { dg-error \"requires whitespace\" } */\n+/* { dg-error \"missing terminating\" \"missing-terminating\" { target *-*-* } .-1 } */\n #define c#\t\t/* { dg-error \"requires whitespace\" } */\n #define d%\t\t/* { dg-error \"requires whitespace\" } */\n #define e&\t\t/* { dg-error \"requires whitespace\" } */\n #define f'\t\t/* { dg-error \"requires whitespace\" } */\n+/* { dg-error \"missing terminating\" \"missing-terminating\" { target *-*-* } .-1 } */\n #define g)\t\t/* { dg-error \"requires whitespace\" } */\n #define h*\t\t/* { dg-error \"requires whitespace\" } */\n #define i+\t\t/* { dg-error \"requires whitespace\" } */\n@@ -59,5 +61,3 @@\n #define ag\"abc\"\t\t/* { dg-error \"requires whitespace\" } */\n \n int dummy;\n-/* { dg-error \"missing terminating\" \"missing-terminating\" { target *-*-* } 6 } */\n-/* { dg-error \"missing terminating\" \"missing-terminating\" { target *-*-* } 10 } */"}, {"sha": "6ffeb2a8f681bfd067a38eb78b33b476bb760cee", "filename": "gcc/testsuite/gcc.dg/cpp/multiline-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -8,7 +8,6 @@\n const char *p = \"line 1\n \"\n \"\";\t\t\t      /* The compiler front end sees this.  */\n-\n-/* { dg-error \"17:missing term\" \"multiline strings\" { target *-*-* } 8 } */\n-/* { dg-error \"missing term\" \"multiline strings\" { target *-*-* } 9 } */\n+/* { dg-error \"17:missing term\" \"multiline strings\" { target *-*-* } .-3 } */\n+/* { dg-error \"missing term\" \"multiline strings\" { target *-*-* } .-3 } */\n "}, {"sha": "50e2459591cafcf31a070f70e91269f892fdc54e", "filename": "gcc/testsuite/gcc.dg/cpp/pr27777.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr27777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr27777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr27777.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -3,6 +3,5 @@\n /* { dg-options { -trigraphs -Wall } } */\n \n #error \"BUG??!\"\n-\n-/* { dg-error \"BUG\" \"\" { target *-*-* } 5 } */\n-/* { dg-warning \"trigraph\" \"\" { target *-*-* } 5 } */\n+/* { dg-error \"BUG\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"trigraph\" \"\" { target *-*-* } .-2 } */"}, {"sha": "5bcccda0a21bfd253d83d7f81853b7ecf2896e92", "filename": "gcc/testsuite/gcc.dg/cpp/pr30786.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr30786.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr30786.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr30786.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -1,9 +1,8 @@\n /* PR preprocessor/30786 - _Pragma at end of file should not ICE */\n /* { dg-do compile } */\n \n-/* { dg-error \"parenthesized\" \"parenthesized\" { target *-*-* } 9 } */\n-/* { dg-error \"expected\" \"expected\" { target *-*-* } 9 } */\n-\n int x;\n \n+/* { dg-error \"parenthesized\" \"parenthesized\" { target *-*-* } .+2 } */\n+/* { dg-error \"expected\" \"expected\" { target *-*-* } .+1 } */\n _Pragma"}, {"sha": "eb24ead84221b04d26ea7f32cf089c0febd51c17", "filename": "gcc/testsuite/gcc.dg/cpp/pr34602.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr34602.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr34602.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr34602.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -1,6 +1,5 @@\n /* PR preprocessor/34602 - no internal error trying to spell EOF.  */\n /* { dg-do preprocess } */\n \n-/* { dg-error \"unexpected end\" \"\" { target *-*-* } 6 } */\n-\n+/* { dg-error \"unexpected end\" \"\" { target *-*-* } .+1 } */\n #line"}, {"sha": "2b5304cb8b9c5325573f6040fb401a306d72425e", "filename": "gcc/testsuite/gcc.dg/cpp/redef1.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -5,15 +5,14 @@\n \n #define foo bar\n #define /* x */ foo /* x */ bar /* x */\n+/* { dg-bogus \"redefined\" \"foo redefined\"\t{ target *-*-* } .-1 } */\n+/* { dg-bogus \"previous def\" \"foo prev def\"\t{ target *-*-* } .-3 } */\n \n-#define quux(thud) a one and a thud and a two\n-#define /**/ quux( thud ) /**/ a one and a /**/ thud /**/ and /**/ a two\n-#define quux(thud) a one\tand a thud and a \ttwo /* bah */\n+#define quux(thud) a one and a thud and a two /* { dg-line quux_def_1 } */\n+#define /**/ quux( thud ) /**/ a one and a /**/ thud /**/ and /**/ a two /* { dg-line quux_def_2 } */\n+/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } quux_def_2 } */\n+/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } quux_def_1 } */\n \n-/* { dg-bogus \"redefined\" \"foo redefined\"\t{ target *-*-* } 7 } */\n-/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } 10 } */\n-/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } 11 } */\n-\n-/* { dg-bogus \"previous def\" \"foo prev def\"\t{ target *-*-* } 6 } */\n-/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } 9 } */\n-/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } 10 } */\n+#define quux(thud) a one\tand a thud and a \ttwo /* bah */ /* { dg-line quux_def_3 } */\n+/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } quux_def_3 } */\n+/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } quux_def_2 } */"}, {"sha": "20fe44e857ca1909b5b46e31ff09116c3823630f", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn1.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -20,9 +20,13 @@\n    _and_ they should get a -pedantic warning. */\n \n #assert foo(bar)\t/* { dg-warning \"indented\" \"^#ext\"    } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n # assert bar(baz)\t/* { dg-warning \"indented\" \"^# ext\"   } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n  #assert baz(quux)\t/* { dg-bogus \"indented\" \"^ #ext\"     } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n  # assert quux(weeble)\t/* { dg-bogus \"indented\" \"^ # ext\"    } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n \n /* We warn of #elif regardless of whether we're skipping or not, and\n    do not warn about indentaion.  */\n@@ -32,8 +36,3 @@\n #endif\n #elif 0\t\t\t/* { dg-warning \"#elif\" \"#elif not skipping\" }  */\n #endif\n-\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 22 } */\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 23 } */\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 24 } */\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 25 } */"}, {"sha": "85b701441479ea4b28a19b3a256a41c94bae4a63", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn3.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn3.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -25,9 +25,13 @@\n    they should get a -pedantic warning. */\n \n #assert foo(bar)\t/* { dg-warning \"indented\" \"^#ext\"    } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n # assert bar(baz)\t/* { dg-warning \"indented\" \"^# ext\"   } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n  #assert baz(quux)\t/* { dg-bogus \"indented\" \"^ #ext\"     } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n  # assert quux(weeble)\t/* { dg-bogus \"indented\" \"^ # ext\"    } */\n+/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } .-1 } */\n \n #else\n \n@@ -54,8 +58,3 @@\n  # unassert quux(weeble)\t/* { dg-bogus \"indented\" \"^ # ext\"    } */\n \n #endif\n-\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 27 } */\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 28 } */\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 29 } */\n-/* { dg-warning \"GCC extension\" \"extension warning\" { target *-*-* } 30 } */"}, {"sha": "137064eba3f82cc0eb65c32369b91e3a70f27ef3", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn6.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -11,9 +11,8 @@\n #define foo5(h2) sdf 'h2' fds 'h3' /* { dg-warning \"macro argument \\\"h2\\\" would be stringified\" \"traditional stringification\" } */\n #define foo6(h3) sdf 'h2' fds 'h3' /* { dg-warning \"macro argument \\\"h3\\\" would be stringified\" \"traditional stringification\" } */\n #define foo7(AA, hello, world, EEE) sdf \"A B hello C,world,DhelloE F\" fds EEE /* { dg-warning \"macro argument \\\"hello\\\" would be stringified\" \"traditional stringification\" } */\n-\n /* Catch the second warning from the above line.  */\n-/* { dg-warning \"macro argument \\\"world\\\" would be stringified\" \"traditional stringification second warning\" { target *-*-* } 13 } */\n+/* { dg-warning \"macro argument \\\"world\\\" would be stringified\" \"traditional stringification second warning\" { target *-*-* } .-2 } */\n \n # 19 \"sys-header.h\" 3\n /* We are in system headers now, no -Wtraditional warnings should issue.  */"}, {"sha": "4ddd9654c3b4a364703b33db02c60011729ee900", "filename": "gcc/testsuite/gcc.dg/cpp/trad/hash.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fhash.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -5,10 +5,9 @@\n #ifndef foo\n #define foo\t/**/\n #endif\n+/* { dg-bogus \"(start|end) of macro\" \"paste at end\" { target *-*-* } .-1 } */\n \n #ifndef foo\n #define foo\t/* as nothing */\n #endif\n-\n-/* { dg-bogus \"(start|end) of macro\" \"paste at end\" { target *-*-* } 7 } */\n-/* { dg-bogus \"(start|end) of macro\" \"comment at end\" { target *-*-* } 11 } */\n+/* { dg-bogus \"(start|end) of macro\" \"comment at end\" { target *-*-* } .-1 } */"}, {"sha": "ba175698024b8f54a05f9a019b51fc88e13f955a", "filename": "gcc/testsuite/gcc.dg/cpp/trad/redef1.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -6,31 +6,30 @@\n \n #define foo bar\n #define /* x */ foo /* x */ bar /* x */\n+/* { dg-bogus \"redefined\" \"foo redefined\"\t{ target *-*-* } .-1 } */\n+/* { dg-bogus \"previous def\" \"foo prev def\"\t{ target *-*-* } .-3 } */\n \n-#define quux(thud) a one and a thud and a two\n-#define /**/ quux( thud ) /**/ a one and a /**/ thud /**/ and /**/ a two\n-#define quux(thud) a one\tand a thud and a \ttwo /* bah */\n+#define quux(thud) a one and a thud and a two /* { dg-line quux_def_1 } */\n+#define /**/ quux( thud ) /**/ a one and a /**/ thud /**/ and /**/ a two /* { dg-line quux_def_2 } */\n+/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } quux_def_2 } */\n+/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } quux_def_1 } */\n+\n+#define quux(thud) a one\tand a thud and a \ttwo /* bah */ /* { dg-line quux_def_3 } */\n+/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } quux_def_3 } */\n+/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } quux_def_2 } */\n \n #define f(x, y)x \"x  y z\"  y\n #define f(x, y) x  \"x  y z\" y\n+/* { dg-bogus \"redefined\" \"f redefined\"\t\t{ target *-*-* } .-1 } */\n+/* { dg-bogus \"previous def\" \"f prev def\"\t{ target *-*-* } .-3 } */\n \n #define baz() whiz bang\n #define baz() whiz  bang\n+/* { dg-bogus \"redefined\" \"baz redefined\"\t{ target *-*-* } .-1 } */\n+/* { dg-bogus \"previous def\" \"baz prev def\"\t{ target *-*-* } .-3 } */\n \n #define g foo\n #undef g\n #define g\n-\n-/* { dg-bogus \"redefined\" \"foo redefined\"\t{ target *-*-* } 8 } */\n-/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } 11 } */\n-/* { dg-bogus \"redefined\" \"quux redefined\"\t{ target *-*-* } 12 } */\n-/* { dg-bogus \"redefined\" \"f redefined\"\t\t{ target *-*-* } 15 } */\n-/* { dg-bogus \"redefined\" \"baz redefined\"\t{ target *-*-* } 18 } */\n-/* { dg-bogus \"redefined\" \"g redefined\"\t\t{ target *-*-* } 22 } */\n-\n-/* { dg-bogus \"previous def\" \"foo prev def\"\t{ target *-*-* } 7 } */\n-/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } 10 } */\n-/* { dg-bogus \"previous def\" \"quux prev def\"\t{ target *-*-* } 11 } */\n-/* { dg-bogus \"previous def\" \"f prev def\"\t{ target *-*-* } 14 } */\n-/* { dg-bogus \"previous def\" \"baz prev def\"\t{ target *-*-* } 17 } */\n-/* { dg-bogus \"previous def\" \"g prev def\"\t{ target *-*-* } 20 } */\n+/* { dg-bogus \"redefined\" \"g redefined\"\t\t{ target *-*-* } .-1 } */\n+/* { dg-bogus \"previous def\" \"g prev def\"\t{ target *-*-* } .-4 } */"}, {"sha": "4f76fa99bf5449adf88c2430805844f87cc95ab6", "filename": "gcc/testsuite/gcc.dg/cpp/ucs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucs.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -54,7 +54,7 @@ void foo ()\n   c = L'\\u000x';\t/* { dg-error \"incomplete\" \"non-hex digit in UCN\" } */\n   /* If sizeof(HOST_WIDE_INT) > sizeof(wchar_t), we can get a multi-character\n      constant warning even for wide characters.  */\n-  /* { dg-warning \"too long|multi-character\" \"\" { target *-*-* } 54 } */\n+  /* { dg-warning \"too long|multi-character\" \"\" { target *-*-* } .-3 } */\n \n   c = '\\u0024';\t\t/* { dg-bogus \"invalid\" \"0024 is a valid UCN\" } */\n   c = \"\\u0040\"[0];\t/* { dg-bogus \"invalid\" \"0040 is a valid UCN\" } */"}, {"sha": "241422bd5ee2fdab2e7319d246c1c5b4290845c4", "filename": "gcc/testsuite/gcc.dg/declspec-10.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -16,7 +16,10 @@ void f6 (static int); /* { dg-error \"storage class specified for unnamed paramet\n void f7 (typedef int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n \n auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n-register int y; /* { dg-warning \"file-scope declaration of 'y' specifies 'register'\" } */\n+\n+register int y;\n+/* { dg-warning \"file-scope declaration of 'y' specifies 'register'\" \"\" { target *-*-* } .-1 } */\n+/* { dg-message \"error: register name not specified for 'y'\" \"not specified\" { target *-*-* } .-2 } */\n \n void h (void) { extern void x (void) {} } /* { dg-error \"nested function 'x' declared 'extern'\" } */\n /* { dg-warning \"ISO C forbids nested functions\" \"nested\" { target *-*-* } .-1 } */\n@@ -43,5 +46,3 @@ void i (void) { auto void y (void) {} } /* { dg-warning \"ISO C forbids nested fu\n /* { dg-warning \"function definition declared 'auto'\" \"nested\" { target *-*-* } .-1 } */\n \n inline int main (void) { return 0; } /* { dg-warning \"cannot inline function 'main'\" } */\n-\n-/* { dg-message \"error: register name not specified for 'y'\" \"not specified\" { target *-*-* } 19 } */"}, {"sha": "58f35ab7c794b88596b56c88b2edbdd7973e7762", "filename": "gcc/testsuite/gcc.dg/declspec-11.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -16,7 +16,10 @@ void f6 (static int); /* { dg-error \"storage class specified for unnamed paramet\n void f7 (typedef int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n \n auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n-register int y; /* { dg-error \"file-scope declaration of 'y' specifies 'register'\" } */\n+\n+register int y;\n+/* { dg-error \"file-scope declaration of 'y' specifies 'register'\" \"\" { target *-*-* } .-1 } */\n+/* { dg-message \"error: register name not specified for 'y'\" \"\" { target *-*-* } .-2 } */\n \n void h (void) { extern void x (void) {} } /* { dg-error \"nested function 'x' declared 'extern'\" } */\n /* { dg-error \"ISO C forbids nested functions\" \"nested\" { target *-*-* } .-1 } */\n@@ -43,5 +46,3 @@ void i (void) { auto void y (void) {} } /* { dg-error \"ISO C forbids nested func\n /* { dg-error \"function definition declared 'auto'\" \"nested\" { target *-*-* } .-1 } */\n \n inline int main (void) { return 0; } /* { dg-error \"cannot inline function 'main'\" } */\n-\n-/* { dg-message \"error: register name not specified for 'y'\" \"\" { target *-*-* } 19 } */"}, {"sha": "2885692e1f38fbb699828330784f30d02bd19284", "filename": "gcc/testsuite/gcc.dg/declspec-18.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-18.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -23,36 +23,48 @@ struct s {\n };\n \n typeof (z) c1;\n-typeof (x1) c2;         /* { dg-error \"undeclared\" \"undeclared\" } */\n+\n+typeof (x1) c2;\n+/* { dg-error \"undeclared\" \"undeclared\" { target *-*-* } .-1 } */\n+/* { dg-bogus \"unknown type name 'x1'\" \"unknown\" { target *-*-* } .-2 } */\n+\n typeof (const t11) c3;  /* { dg-error \"unknown type name 't11'\" } */\n-typeof (t12 *) c3;      /* { dg-error \"unknown type name 't12'\" \"t12\" { xfail *-*-* } } */\n-/* { dg-bogus \"unknown type name 'x1'\" unknown\"\" { target *-*-* } 26 } */\n-/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } 28 } */\n-/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } 28 } */\n+\n+typeof (t12 *) c3;\n+/* { dg-error \"unknown type name 't12'\" \"t12\" { xfail *-*-* } .-1 } */\n+/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } .-2 } */\n+/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } .-3 } */\n \n int recover1;\n \n int s0 = sizeof (z);\n-int s1 = sizeof (x2);          /* { dg-error \"undeclared\" \"undeclared\" } */\n+\n+int s1 = sizeof (x2);\n+/* { dg-error \"undeclared\" \"undeclared\" { target *-*-* } .-1 } */\n+/* { dg-bogus \"unknown type name 'x2'\" \"unknown\" { target *-*-* } .-2 } */\n+\n int s2 = sizeof (const t13);   /* { dg-error \"unknown type name 't13'\" } */\n-int s3 = sizeof (t14 *);       /* { dg-error \"unknown type name 't14'\" \"t14\" { xfail *-*-* } } */\n \n-int recover2;\n+int s3 = sizeof (t14 *);\n+/* { dg-error \"unknown type name 't14'\" \"t14\" { xfail *-*-* } .-1 } */\n+/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } .-2 } */\n+/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } .-3 } */\n \n-/* { dg-bogus \"unknown type name 'x2'\" \"unknown\" { target *-*-* } 36 } */\n-/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } 38 } */\n-/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } 38 } */\n+int recover2;\n \n int a0 = __alignof__ (z);\n+\n int a1 = __alignof__ (x3);          /* { dg-error \"undeclared\" } */\n+/* { dg-bogus \"unknown type name 'x3'\" \"\" { target *-*-* } .-1 } */\n+\n int a2 = __alignof__ (const t15);   /* { dg-error \"unknown type name 't15'\" } */\n-int a3 = __alignof__ (t16 *);       /* { dg-error \"unknown type name 't16'\" \"t16\" { xfail *-*-* } } */\n \n-int recover3;\n+int a3 = __alignof__ (t16 *);\n+/* { dg-error \"unknown type name 't16'\" \"t16\" { xfail *-*-* } .-1 } */\n+/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } .-2 } */\n+/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } .-3 } */\n \n-/* { dg-bogus \"unknown type name 'x3'\" \"\" { target *-*-* } 47 } */\n-/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } 49 } */\n-/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } 49 } */\n+int recover3;\n \n \n /* Cannot detect (undefd_type *) or (undefd_type (*) because it would"}, {"sha": "99a2fc6836225374435d898e9cc4453b766ddb63", "filename": "gcc/testsuite/gcc.dg/format/c99-strftime-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-strftime-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -29,10 +29,10 @@ foo (char *s, size_t m, const struct tm *tp)\n   /* Bad uses of %E and %O.  */\n   strftime (s, m, \"%EEY\", tp); /* { dg-warning \"multiple|repeated\" \"multiple %E/%O\" } */\n   strftime (s, m, \"%EOy\", tp); /* { dg-warning \"multiple|together\" \"multiple %E/%O\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%OEy\", tp); /* { dg-warning \"multiple|together\" \"multiple %E/%O\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%OOV\", tp); /* { dg-warning \"multiple|repeated\" \"multiple %E/%O\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 31 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 32 } */\n   strftime (s, m, \"%Ea\", tp); /* { dg-warning \"flag|modifier\" \"bad %Ea\" } */\n   strftime (s, m, \"%EA\", tp); /* { dg-warning \"flag|modifier\" \"bad %EA\" } */\n   strftime (s, m, \"%Eb\", tp); /* { dg-warning \"flag|modifier\" \"bad %Eb\" } */"}, {"sha": "a59edb45e50189eb749c4bddbd7ff473b2c3d5f5", "filename": "gcc/testsuite/gcc.dg/format/ext-3.c", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-3.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -85,31 +85,33 @@ foo (char *s, size_t m, const struct tm *tp)\n   strftime (s, m, \"%-Z\", tp); /* { dg-warning \"flag\" \"bad %Z\" } */\n   strftime (s, m, \"%_Z\", tp); /* { dg-warning \"flag\" \"bad %Z\" } */\n   strftime (s, m, \"%0Z\", tp); /* { dg-warning \"flag\" \"bad %Z\" } */\n+\n   /* Incorrect usages with Y2K problems.  */\n   strftime (s, m, \"%5c\", tp); /* { dg-warning \"width\" \"bad %c\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%-c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%_c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%0c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%5D\", tp); /* { dg-warning \"width\" \"bad %D\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%-D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%_D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%0D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%5x\", tp); /* { dg-warning \"width\" \"bad %x\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%-x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%_x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%0x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 89 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 90 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 91 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 92 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 93 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 94 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 95 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 96 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 97 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 98 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 99 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 100 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n+\n   /* Incorrect usages with GNU extension conversion characters.  */\n   strftime (s, m, \"%5P\", tp); /* { dg-warning \"width\" \"bad %P\" } */\n   strftime (s, m, \"%-P\", tp); /* { dg-warning \"flag\" \"bad %P\" } */\n@@ -178,27 +180,29 @@ foo (char *s, size_t m, const struct tm *tp)\n   strftime (s, m, \"%#l\", tp); /* { dg-warning \"flag\" \"bad %l\" } */\n   strftime (s, m, \"%^s\", tp); /* { dg-warning \"flag\" \"bad %s\" } */\n   strftime (s, m, \"%#s\", tp); /* { dg-warning \"flag\" \"bad %s\" } */\n+\n   /* Bad usages with Y2K problems.  */\n   strftime (s, m, \"%^c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%#c\", tp); /* { dg-warning \"flag\" \"bad %c\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%^D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%#D\", tp); /* { dg-warning \"flag\" \"bad %D\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%^g\", tp); /* { dg-warning \"flag\" \"bad %g\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%#g\", tp); /* { dg-warning \"flag\" \"bad %g\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%^x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%#x\", tp); /* { dg-warning \"flag\" \"bad %x\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%^y\", tp); /* { dg-warning \"flag\" \"bad %y\" } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n   strftime (s, m, \"%#y\", tp); /* { dg-warning \"flag\" \"bad %y\" } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 182 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 183 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 184 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 185 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 186 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 187 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 188 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 189 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 190 } */\n-  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } 191 } */\n+  /* { dg-warning \"only last 2\" \"2-digit year\" { target *-*-* } .-1 } */\n+  \n   /* GCC also accepts the glibc format extensions %P, %k, %l, %s.  */\n   strftime (s, m, \"%P%k%l%s\", tp);\n   /* GCC also accepts the glibc extension of the \"O\" modifier on some"}, {"sha": "c142d243ddbbbfe9b87eb75cdd88235b4ddacc11", "filename": "gcc/testsuite/gcc.dg/format/pr72858.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -389,19 +389,21 @@ test_LE (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n void\n test_everything (char *d, long lexpr)\n {\n-  sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr); /* { dg-warning \"26: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr); /* { dg-line test_everything_sprintf } */\n+\n+  /* { dg-warning \"26: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n                        ~~~^~~~~~\n    { dg-end-multiline-output \"\" } */\n \n-  /* { dg-warning \"28: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 4 has type 'long int'\" \"\" { target *-*-* } 392 } */\n+  /* { dg-warning \"28: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 4 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n                        ~~~~~^~~~\n    { dg-end-multiline-output \"\" } */\n \n-  /* { dg-warning \"31: format '%lld' expects argument of type 'long long int', but argument 5 has type 'long int'\" \"\" { target *-*-* } 392 } */\n+  /* { dg-warning \"31: format '%lld' expects argument of type 'long long int', but argument 5 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n                        ~~~~~~~~^"}, {"sha": "e0f0eca2fa51e37d11c5c07429aaba5fedab0c99", "filename": "gcc/testsuite/gcc.dg/gomp/appendix-a/a.24.1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fappendix-a%2Fa.24.1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fappendix-a%2Fa.24.1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fappendix-a%2Fa.24.1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -10,7 +10,7 @@ a24 (int a)\n   const int c = 1;\n   int i = 0;\n   int l = 0;\n-#pragma omp parallel default(none) private(a) shared(z)\n+#pragma omp parallel default(none) private(a) shared(z) /* { dg-line omp_parallel } */\n   {\n     int j = omp_get_num_threads ();\n     /* O.K. - j is declared within parallel region */\n@@ -20,8 +20,8 @@ a24 (int a)\n     \t\t\t\t/*       -  c has const-qualified type */\n     z[i] = y;\n     /* { dg-error \"'i' not specified\" \"\" { target *-*-* } .-1 } */\n-    /* { dg-error \"enclosing 'parallel'\" \"\" { target *-*-* } 13 } */\n-    /* { dg-error \"'y' not specified\" \"\" { target *-*-* } 21 }  */\n+    /* { dg-error \"enclosing 'parallel'\" \"\" { target *-*-* } omp_parallel } */\n+    /* { dg-error \"'y' not specified\" \"\" { target *-*-* } .-3 }  */\n #pragma omp for firstprivate(y)\n     for (i = 0; i < 10; i++)\n       {"}, {"sha": "67bd7961b75c38b0ffb763026157f92e83a2174d", "filename": "gcc/testsuite/gcc.dg/init-string-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -29,8 +29,9 @@ struct s j = {\n   \"j\",\n   1,\n   (L\"j\")\n+  /* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } .-1 } */\n }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } 31 } */\n+\n struct s k = {\n   ((\"k\")), /* { dg-bogus \"warning\" \"warning in place of error\" } */\n   /* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } .-1 } */\n@@ -47,8 +48,8 @@ struct s l = {\n struct s m = {\n   .c = L\"m\",\n   .a = (\"m\")\n+  /* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } .-1 } */\n }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-/* { dg-error \"parenthesized|near init\" \"paren array\" { target *-*-* } 49 } */\n \n char *n = (char []){ \"n\" };\n "}, {"sha": "2e9ea09e1fd1518e5e35efbcf1b85c60f2141d41", "filename": "gcc/testsuite/gcc.dg/label-decl-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-3.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -10,8 +10,8 @@ void\n f (void)\n {\n   __label__ a, b, c, d;\n+  /* { dg-error \"ISO C forbids label declarations\" \"label decls\" { target *-*-* } .-1 } */\n   __extension__ (void)&&d; /* { dg-error \"label 'd' used but not defined\" } */\n-  /* { dg-error \"ISO C forbids label declarations\" \"label decls\" { target *-*-* } 12 } */\n   goto c; /* { dg-error \"label 'c' used but not defined\" } */\n  a: (void)0;\n  b: (void)0;"}, {"sha": "141b81bb0f19669f3cd757999035a2895bf6bce6", "filename": "gcc/testsuite/gcc.dg/m-un-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fm-un-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fm-un-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fm-un-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -9,14 +9,14 @@ extern void* realloc (void*, size_t);\n struct vtable {\n   void* (* _malloc) (size_t);\n   void (* _free) (void*);\n-  void* (* _realloc) (void*, size_t);\n+  void* (* _realloc) (void*, size_t); /* { dg-line vtable_realloc } */\n };\n \n struct vtable mtable = {\n   malloc,\n   free\n }; /* { dg-warning \"missing initializer\" \"warning regression\" } */\n-   /* { dg-message \"declared here\" \"warning regression 2\" { target *-*-* } 12 } */\n+   /* { dg-message \"declared here\" \"warning regression 2\" { target *-*-* } vtable_realloc } */\n \n /* With designated initializers, we assume you meant to leave out the\n    initialization of any blank fields.  */"}, {"sha": "166a6bcb9e6a59df118c10c6aee67f741e41ff25", "filename": "gcc/testsuite/gcc.dg/nofixed-point-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fnofixed-point-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fnofixed-point-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnofixed-point-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -20,10 +20,10 @@ f3 (void)\n   return 0k;\t\t\t/* { dg-error \"not supported\" \"reject fixed-point\" } */\n }\n \n-_Sat                            /* { dg-error \"not supported\" \"reject fixed-point\" } */\n+_Sat\n+/* { dg-error \"not supported\" \"reject fixed-point\" { target *-*-* } .-1 } */\n+/* { dg-error \"is used without\" \"\" { target *-*-* } .-2 } */\n f4 (void)\n {\n   return 0k;\t\t\t/* { dg-error \"not supported\" \"reject fixed-point\" } */\n }\n-\n-/* { dg-error \"is used without\" \"\" { target *-*-* } 23 } */"}, {"sha": "fa86e4789ff0d6bf212c609dfb8f9cc8a569ebe3", "filename": "gcc/testsuite/gcc.dg/noncompile/20020213-1.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020213-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020213-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020213-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -2,33 +2,42 @@\n    Test whether argument checking is done for fputs, bzero and bcmp.  */\n typedef struct { int i; } FILE;\n typedef __SIZE_TYPE__ size_t;\n+\n int fputs (const char *, FILE *);\n+/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } .-1 } */\n+\n void bzero (void *, size_t);\n+/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } .-1 } */\n+\n int bcmp (const void *, const void *, size_t);\n+/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } .-1 } */\n \n char buf[32];\n FILE *f;\n \n int main ()\n {\n   fputs (\"foo\");\t\t/* { dg-error \"too few\" } */\n+\n   fputs (\"foo\", \"bar\", \"baz\");\t/* { dg-error \"too many\" } */\n+  /* { dg-warning \"passing argument 2 of\" \"2nd incompatible\" { target *-*-* } .-1 } */\n+\n   fputs (21, 43);\n+  /* { dg-warning \"passing argument 1 of\" \"1st incompatible\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"passing argument 2 of\" \"2nd incompatible\" { target *-*-* } .-2 } */\n+\n   bzero (buf);\t\t\t/* { dg-error \"too few\" } */\n+\n   bzero (21);\t\t\t/* { dg-error \"too few\" } */\n+  /* { dg-warning \"passing argument 1 of\" \"1st incompatible\" { target *-*-* } .-1 } */\n+\n   bcmp (buf, buf + 16);\t\t/* { dg-error \"too few\" } */\n+\n   bcmp (21);\t\t\t/* { dg-error \"too few\" } */\n+  /* { dg-warning \"passing argument 1 of\" \"1st incompatible\" { target *-*-* } .-1 } */\n+\n   fputs (\"foo\", f);\n   bzero (buf, 32);\n   bcmp (buf, buf + 16, 16);\n   return 0;\n }\n-\n-/* { dg-warning \"passing argument 2 of\" \"2nd incompatible\" { target *-*-* } 15 } */\n-/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 5 } */\n-/* { dg-warning \"passing argument 1 of\" \"1st incompatible\" { target *-*-* } 16 } */\n-/* { dg-warning \"passing argument 2 of\" \"2nd incompatible\" { target *-*-* } 16 } */\n-/* { dg-warning \"passing argument 1 of\" \"1st incompatible\" { target *-*-* } 18 } */\n-/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 6 } */\n-/* { dg-warning \"passing argument 1 of\" \"1st incompatible\" { target *-*-* } 20 } */\n-/* { dg-message \"note: expected '\\[^'\\n\\]*' but argument is of type '\\[^'\\n\\]*'\" \"note: expected\" { target *-*-* } 7 } */"}, {"sha": "c0d25bf3fccaff0a238596b709123c48a6fb8689", "filename": "gcc/testsuite/gcc.dg/pch/counter-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fcounter-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -9,7 +9,7 @@\n \n #include \"counter-2.h\" /* { dg-warning \"not used because `__COUNTER__' is invalid\" } */\n /* { dg-error \"counter-2.h: No such file or directory\" \"no such file\" { target *-*-* } 0 } */\n-/* { dg-error \"one or more PCH files were found, but they were invalid\" \"invalid files\" { target *-*-* } 10 } */\n+/* { dg-error \"one or more PCH files were found, but they were invalid\" \"invalid files\" { target *-*-* } .-2 } */\n /* { dg-message \"terminated\" \"\" { target *-*-* } 0 } */\n \n int main(void) "}, {"sha": "e9d98f4d6befc90b2b179a141c2a2eb535600aa9", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -30,7 +30,7 @@ test_stringized_token_2 (int x)\n   } while (0)\n \n   EXAMPLE(x > 0, 1, 1, 6);\n-  /* { dg-error \"unable to read substring location: cpp_interpret_string_1 failed\" \"\" { target *-*-* } 28 } */\n+  /* { dg-error \"unable to read substring location: cpp_interpret_string_1 failed\" \"\" { target *-*-* } .-5 } */\n \n #undef EXAMPLE\n }"}, {"sha": "c9bb238e96ba84bfbc9740e406c6109ef6251616", "filename": "gcc/testsuite/gcc.dg/pr27528.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27528.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -1,18 +1,23 @@\n /* Check the warnings and errors generated for asm operands that aren't\n    obviously constant but that are constrained to be constants.  */\n /* { dg-options \"\" } */\n-/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 13 } */\n-/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 14 } */\n-/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 15 } */\n-/* { dg-error \"impossible constraint\" \"\" { target *-*-* } 16 } */\n+\n int bar (int);\n void\n foo (int *x, int y)\n {\n   int constant = 0;\n   asm (\"# %0\" :: \"i\" (x)); /* { dg-warning \"probably doesn't match\" } */\n+  /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n+\n   asm (\"# %0\" :: \"i\" (bar (*x))); /* { dg-warning \"probably doesn't match\" } */\n+  /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n+\n   asm (\"# %0\" :: \"i\" (*x + 0x11)); /* { dg-warning \"probably doesn't match\" } */\n+  /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n+\n   asm (\"# %0\" :: \"i\" (constant)); /* { dg-warning \"probably doesn't match\" } */\n+  /* { dg-error \"impossible constraint\" \"\" { target *-*-* } .-1 } */\n+\n   asm (\"# %0\" :: \"i\" (y * 0)); /* folded */\n }"}, {"sha": "99ae0a3aa839869fdfc3e3347464f73f9cbde778", "filename": "gcc/testsuite/gcc.dg/pr27953.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -1,7 +1,9 @@\n /* PR c/27953 */\n \n-void foo(struct A a) {}  /* { dg-warning \"declared inside parameter list\" \"inside\" } */\n-/* { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } .-1 } */\n+void foo(struct A a) {} /* { dg-line foo_first } */\n+/* { dg-warning \"declared inside parameter list\" \"inside\" { target *-*-* } .-1 } */\n+/* { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } .-2 } */\n \n-void foo() {}            /* { dg-error \"redefinition\" \"redef\" } */\n-/* { dg-message \"note: previous definition\" \"previous\" { target *-*-* } 3 } */\n+void foo() {}\n+/* { dg-error \"redefinition\" \"redef\" { target *-*-* } .-1 } */\n+/* { dg-message \"note: previous definition\" \"previous\" { target *-*-* } foo_first } */"}, {"sha": "5361582d5dce899934c0444157f255d0c3f3c79c", "filename": "gcc/testsuite/gcc.dg/pr35899.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -5,13 +5,14 @@\n int\n foo (void)\n {\n-  int a = bar ();\n+  int a = bar (); /* { dg-line bar_implicit_decl } */\n   return a;\n }\n \n void\n-bar (void)\t\t/* { dg-warning \"conflicting types for\" } */\n+bar (void)\n+/* { dg-warning \"conflicting types for\" \"\" { target *-*-* } .-1 } */\n+/* { dg-message \"note: previous implicit declaration\" \"\" { target *-*-* } bar_implicit_decl } */\n {\n }\n \n-/* { dg-message \"note: previous implicit declaration\" \"\" { target *-*-* } 8 } */"}, {"sha": "e73beccfea4a3bcb8527271388fb19b8c7f28e72", "filename": "gcc/testsuite/gcc.dg/pr37561.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -8,16 +8,23 @@ void\n foo ()\n {\n   ((char *) p)++;\t/* { dg-error \"lvalue\" } */\n+\n   ((char *) q)++;\t/* { dg-error \"lvalue\" } */\n+  /* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } .-1 } */\n+\n   ((char *) p)--;\t/* { dg-error \"lvalue\" } */\n+\n   ((char *) q)--;\t/* { dg-error \"lvalue\" } */\n+  /* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } .-1 } */\n+\n   ++(char *) p;\t\t/* { dg-error \"lvalue\" } */\n+\n   ++(char *) q;\t\t/* { dg-error \"lvalue\" } */\n+  /* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } .-1 } */\n+\n   --(char *) p;\t\t/* { dg-error \"lvalue\" } */\n+\n   --(char *) q;\t\t/* { dg-error \"lvalue\" } */\n+  /* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } .-1 } */\n }\n \n-/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 11 } */\n-/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 13 } */\n-/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 15 } */\n-/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 17 } */"}, {"sha": "db86d86ae584b71ae0b99d38e889bd2e37aa09d1", "filename": "gcc/testsuite/gcc.dg/pr45461.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45461.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45461.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45461.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -9,10 +9,12 @@ foo (int i, ...)\n   short e;\n   va_list ap;\n   va_start (ap, i);\n+\n   e = va_arg (ap, short);\t/* { dg-warning \"is promoted\" \"promoted\" } */\n+  /* { dg-message \"note: \\\\(so you should pass\" \"should pass\" {target *-*-* } .-1 } */\n+  /* { dg-message \"note: if this code\" \"if this code\" {target *-*-* } .-2 } */\n+  \n   va_end (ap);\n   return e;\n }\n \n-/* { dg-message \"note: \\\\(so you should pass\" \"should pass\" {target *-*-* } 12 } */\n-/* { dg-message \"note: if this code\" \"if this code\" {target *-*-* } 12 } */"}, {"sha": "0359c61c6f51dc0c08426cf66933949ee9250788", "filename": "gcc/testsuite/gcc.dg/pr45750.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45750.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45750.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45750.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -11,6 +11,6 @@ int invalid[] = 0; /* { dg-error \"invalid initializer\" } */\n void foo (void)\n {\n   if (((struct S *)undeclared)->i); /* { dg-error \"undeclared\" } */\n+  /* { dg-message \"reported only once\" \"\" { target *-*-* } .-1 } */\n }\n \n-/* { dg-message \"reported only once\" \"\" { target *-*-* } 13 } */"}, {"sha": "1d47b86e4b49310d0818c6c65ad37beb2fd9283e", "filename": "gcc/testsuite/gcc.dg/pr53196-2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53196-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -8,9 +8,11 @@ struct foo { int i; };\n int\n main ()\n {\n-  struct foo f = (struct foo_typo) { };\t/* { dg-error \"invalid use of undefined type\" } */\n+  struct foo f = (struct foo_typo) { };\n+  /* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-error \"ISO C forbids empty initializer braces\" \"\" { target *-*-* } .-2 } */\n+\n   printf (\"%d\\n\", f.i);\n   return 0;\n }\n \n-/* { dg-error \"ISO C forbids empty initializer braces\" \"\" { target *-*-* } 11 } */"}, {"sha": "d6418228c3bc63a08931967104afced19ff9b94c", "filename": "gcc/testsuite/gcc.dg/pr53265.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -86,11 +86,12 @@ fn7 (void)\n {\n   int a[16], b, c;\n   bar (a);\n-  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"15 invokes undefined behavior\" } */\n+  for (b = a[c = 0]; c < 16; b = a[++c])\n+    /* { dg-warning \"15 invokes undefined behavior\" \"\" { target *-*-* } .-1 } */\n+    /* { dg-message \"note: within this loop\" \"\" { target *-*-* } .-2 } */\n     baz (b);\n }\n \n-/* { dg-message \"note: within this loop\" \"\" { target *-*-* } 89 } */\n \n const void *va, *vb, *vc, *vd, *ve;\n const void *vf[4];"}, {"sha": "a7ae0bd504fdc1fe39667a338aa9cc92044dba32", "filename": "gcc/testsuite/gcc.dg/redecl-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -52,13 +52,14 @@ void test3(void)\n \n void prime4(void)\n {\n-  bar4();\t\t\t/* { dg-warning \"implicit declaration of function\" \"implicit\" } */\n+  bar4(); /* { dg-line implicit_bar4 } */\n+  /* { dg-warning \"implicit declaration of function\" \"implicit\" { target *-*-* } implicit_bar4 } */\n }\n \n void test4(void)\n {\n   extern double bar4(double);\t/* { dg-error \"conflict\" } */\n-/* { dg-message \"note: previous implicit declaration\" \"previous\" { target *-*-* } 55 } */\n+/* { dg-message \"note: previous implicit declaration\" \"previous\" { target *-*-* } implicit_bar4 } */\n }\n \n /* Implicit decl, clashing with extern at previous function scope.  */"}, {"sha": "a9b60612be20b675c98540fa803f0b7efe7d654d", "filename": "gcc/testsuite/gcc.dg/tls/thr-init-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fthr-init-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -2,7 +2,8 @@\n /* { dg-require-effective-target tls } */\n \n static __thread int fstat ;\n-static __thread int fstat = 1 ;\n+static __thread int fstat = 1 ; /* { dg-line fstat_prev } */\n static __thread int fstat ;\n-static __thread int fstat = 2; /* { dg-error \"redefinition of 'fstat'\" } */\n-\t\t\t\t/* { dg-message \"note: previous definition of 'fstat' was here\" \"\" { target *-*-* } 5 } */\n+static __thread int fstat = 2;\n+/* { dg-error \"redefinition of 'fstat'\" \"\" { target *-*-* } .-1 } */\n+/* { dg-message \"note: previous definition of 'fstat' was here\" \"\" { target *-*-* } fstat_prev } */"}, {"sha": "8a1227d30d661dcd8fc59b4ea76e10c212a500f5", "filename": "gcc/testsuite/gcc.dg/torture/pr51106-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-1.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -6,9 +6,9 @@ int\n foo (int x)\n {\n   asm goto (\"\" : : \"i\" (x) : : lab); /* { dg-error \"impossible constraint\" } */\n+  /* { dg-warning \"probably doesn.t match constraints\" \"\" { target *-*-* } .-1 } */\n   return 1;\n lab:\n   return 0;\n }\n \n-/* { dg-warning \"probably doesn.t match constraints\" \"\" { target *-*-* } 8 } */"}, {"sha": "42095536c602d065d613c9df54ef22f4f9b27507", "filename": "gcc/testsuite/gcc.dg/torture/pr51106-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51106-2.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -7,9 +7,9 @@ int\n bar (int x)\n {\n   asm goto (\"\" : : \"i\" (x) : : lab); /* { dg-error \"impossible constraint\" } */\n+/* { dg-warning \"probably doesn.t match constraints\" \"\" { target *-*-* } .-1 } */\n   __builtin_unreachable ();\n lab:\n   return 0;\n }\n \n-/* { dg-warning \"probably doesn.t match constraints\" \"\" { target *-*-* } 9 } */"}, {"sha": "094dc0eb73d5a3fe3bc82fc82e82ca33982ed535", "filename": "gcc/testsuite/gcc.dg/uninit-19.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-19.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -11,7 +11,8 @@ fn1 (int p1, float *f1, float *f2, float *f3, unsigned char *c1, float *f4,\n      unsigned char *c2, float *p10)\n {\n   if (p1 & 8)\n-    b[3] = p10[a];  /* 14.  */\n+    b[3] = p10[a];\n+  /* { dg-warning \"may be used uninitialized\" \"\" { target { { nonpic } || { hppa*64*-*-* } } } .-1 } */\n }\n \n void\n@@ -20,8 +21,6 @@ fn2 ()\n   float *n;\n   if (l & 6)\n     n = &c + m;\n-  fn1 (l, &d, &e, &g, &i, &h, &k, n);  /* 23.  */\n+  fn1 (l, &d, &e, &g, &i, &h, &k, n);\n+  /* { dg-warning \"may be used uninitialized\" \"\" { target { ! { { nonpic } || { hppa*64*-*-* } } } } .-1 } */\n }\n-\n-/* { dg-warning \"may be used uninitialized\" \"\" { target { { nonpic } || { hppa*64*-*-* } } } 14 } */\n-/* { dg-warning \"may be used uninitialized\" \"\" { target { ! { { nonpic } || { hppa*64*-*-* } } } } 23 } */"}, {"sha": "a9a73241ef547b5409fc561a9978b2d6976d0236", "filename": "gcc/testsuite/gcc.dg/uninit-pr20644.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74ca4e36fbb3ac796f29ef4d72e3cd496064d168/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr20644.c?ref=74ca4e36fbb3ac796f29ef4d72e3cd496064d168", "patch": "@@ -16,9 +16,10 @@ int bar ()\n {\n   int i = 1;\n   int j;\n+  /* { dg-warning \"uninitialized\" \"uninitialized\" { target *-*-* } .-1 } */\n \n   if (1 == i)\n-    return j; /* { dg-warning \"uninitialized\" \"uninitialized\" { target *-*-* } 18 } */\n+    return j;\n \n   return 0;\n }"}]}