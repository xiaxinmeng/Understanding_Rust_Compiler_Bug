{"sha": "9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2OWMzYWZkNmJhOGVkNDgxNGY1YzFhYTFiNWQwZWExMmE4ZWIxMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-11T11:11:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-11T11:11:49Z"}, "message": "trans.c (Case_Statement_to_gnu): Bool-ify variable.\n\n\t* gcc-interface/trans.c (Case_Statement_to_gnu): Bool-ify variable.\n\t(gnat_to_gnu) <N_Null_Statement>: When not optimizing, generate a\n\tgoto to the next statement.\n\nFrom-SVN: r158200", "tree": {"sha": "1cd650990f68f65b8de2675fdf1eb77c7c56383d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cd650990f68f65b8de2675fdf1eb77c7c56383d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11/comments", "author": null, "committer": null, "parents": [{"sha": "c460cd49da9989d9b4cda350ae21eb12d233ace1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c460cd49da9989d9b4cda350ae21eb12d233ace1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c460cd49da9989d9b4cda350ae21eb12d233ace1"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "364381179e8912bb5cd7ae35970f65f2521091dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11", "patch": "@@ -1,3 +1,9 @@\n+2010-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Case_Statement_to_gnu): Bool-ify variable.\n+\t(gnat_to_gnu) <N_Null_Statement>: When not optimizing, generate a\n+\tgoto to the next statement.\n+\n 2010-04-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (maybe_variable): Delete."}, {"sha": "cb5ff94d7a552dbbd38ef66765bf94602ce94223", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=9c69c3afd6ba8ed4814f5c1aa1b5d0ea12a8eb11", "patch": "@@ -1876,8 +1876,8 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n        Present (gnat_when);\n        gnat_when = Next_Non_Pragma (gnat_when))\n     {\n+      bool choices_added_p = false;\n       Node_Id gnat_choice;\n-      int choices_added = 0;\n \n       /* First compile all the different case choices for the current WHEN\n \t alternative.  */\n@@ -1940,14 +1940,14 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t\t\t\t   gnu_low, gnu_high,\n \t\t\t\t   create_artificial_label (input_location)),\n \t\t\t\t  gnat_choice);\n-\t      choices_added++;\n+\t      choices_added_p = true;\n \t    }\n \t}\n \n       /* Push a binding level here in case variables are declared as we want\n \t them to be local to this set of statements instead of to the block\n \t containing the Case statement.  */\n-      if (choices_added > 0)\n+      if (choices_added_p)\n \t{\n \t  add_stmt (build_stmt_group (Statements (gnat_when), true));\n \t  add_stmt (build1 (GOTO_EXPR, void_type_node,\n@@ -4465,7 +4465,22 @@ gnat_to_gnu (Node_Id gnat_node)\n       break;\n \n     case N_Null_Statement:\n-      gnu_result = alloc_stmt_list ();\n+      /* When not optimizing, turn null statements from source into gotos to\n+\t the next statement that the middle-end knows how to preserve.  */\n+      if (!optimize && Comes_From_Source (gnat_node))\n+\t{\n+\t  tree stmt, label = create_label_decl (NULL_TREE);\n+\t  start_stmt_group ();\n+\t  stmt = build1 (GOTO_EXPR, void_type_node, label);\n+\t  set_expr_location_from_node (stmt, gnat_node);\n+\t  add_stmt (stmt);\n+\t  stmt = build1 (LABEL_EXPR, void_type_node, label);\n+\t  set_expr_location_from_node (stmt, gnat_node);\n+\t  add_stmt (stmt);\n+\t  gnu_result = end_stmt_group ();\n+\t}\n+      else\n+\tgnu_result = alloc_stmt_list ();\n       break;\n \n     case N_Assignment_Statement:"}]}