{"sha": "0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQxMTQxYTM5ZWUzOGQ4YTJlMWFmNDdhMGE2NGNjZDQ3ZjQxYjkwOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-05-06T20:18:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-05-06T20:18:13Z"}, "message": "basic_string.h: Escape class names in doxygen docs.\n\n2010-05-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/basic_string.h: Escape class names in doxygen docs.\n\nFrom-SVN: r159129", "tree": {"sha": "29a6d0a11954a6cfdad9cae8e3e8bb67fc9ad9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29a6d0a11954a6cfdad9cae8e3e8bb67fc9ad9be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe478196fa832fd44a1f1d50c032c5bb61a16f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe478196fa832fd44a1f1d50c032c5bb61a16f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe478196fa832fd44a1f1d50c032c5bb61a16f8"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "0e284ec5dcf4c51f28d4b28d2a76955877a07ec1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "patch": "@@ -1,3 +1,7 @@\n+2010-05-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/basic_string.h: Escape class names in doxygen docs.\n+\n 2010-05-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/44014"}, {"sha": "d6d9989660e7c3171f1f261ae49ec38a63392241", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "patch": "@@ -79,13 +79,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *\n    *  This approach has the enormous advantage that a string object\n    *  requires only one allocation.  All the ugliness is confined\n-   *  within a single pair of inline functions, which each compile to\n+   *  within a single %pair of inline functions, which each compile to\n    *  a single @a add instruction: _Rep::_M_data(), and\n    *  string::_M_rep(); and the allocation function which gets a\n    *  block of raw bytes and with room enough and constructs a _Rep\n    *  object at the front.\n    *\n-   *  The reason you want _M_data pointing to the character array and\n+   *  The reason you want _M_data pointing to the character %array and\n    *  not the _Rep is so that the debugger can see the string\n    *  contents. (Probably we should add a non-inline member to get\n    *  the _Rep for the debugger to use, so users can check the actual\n@@ -458,8 +458,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   size_type __n, const _Alloc& __a);\n \n       /**\n-       *  @brief  Construct string initialized by a character array.\n-       *  @param  s  Source character array.\n+       *  @brief  Construct string initialized by a character %array.\n+       *  @param  s  Source character %array.\n        *  @param  n  Number of characters to copy.\n        *  @param  a  Allocator to use (default is default allocator).\n        *\n@@ -501,7 +501,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n       /**\n-       *  @brief  Construct string from an initializer list.\n+       *  @brief  Construct string from an initializer %list.\n        *  @param  l  std::initializer_list of characters.\n        *  @param  a  Allocator to use (default is default allocator).\n        */\n@@ -571,7 +571,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n       /**\n-       *  @brief  Set value to string constructed from initializer list.\n+       *  @brief  Set value to string constructed from initializer %list.\n        *  @param  l  std::initializer_list.\n        */\n       basic_string&\n@@ -720,7 +720,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This function will %resize the %string to the specified\n        *  number of characters.  If the number is smaller than the\n        *  %string's current size the %string is truncated, otherwise\n-       *  the %string is extended and new elements are set to @a c.\n+       *  the %string is extended and new elements are %set to @a c.\n        */\n       void\n       resize(size_type __n, _CharT __c);\n@@ -1697,7 +1697,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @throw  std::out_of_range  If pos > size().\n        *\n        *  Copies up to @a n characters starting at @a pos into the C string @a\n-       *  s.  If @a pos is greater than size(), out_of_range is thrown.\n+       *  s.  If @a pos is %greater than size(), out_of_range is thrown.\n       */\n       size_type\n       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;\n@@ -2225,10 +2225,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n \n       /**\n-       *  @brief  Compare substring against a character array.\n+       *  @brief  Compare substring against a character %array.\n        *  @param pos1  Index of first character of substring.\n        *  @param n1  Number of characters in substring.\n-       *  @param s  character array to compare against.\n+       *  @param s  character %array to compare against.\n        *  @param n2  Number of characters of s.\n        *  @return  Integer < 0, 0, or > 0.\n        *"}]}