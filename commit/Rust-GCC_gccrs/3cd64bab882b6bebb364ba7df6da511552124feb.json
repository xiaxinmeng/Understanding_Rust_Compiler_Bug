{"sha": "3cd64bab882b6bebb364ba7df6da511552124feb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkNjRiYWI4ODJiNmJlYmIzNjRiYTdkZjZkYTUxMTU1MjEyNGZlYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-11T11:49:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-11T11:49:22Z"}, "message": "trans.c (lvalue_required_for_attribute_p): New static function.\n\n\t* gcc-interface/trans.c (lvalue_required_for_attribute_p): New static\n\tfunction.\n\t(lvalue_required_p) <N_Attribute_Reference>: Call it.\n\t(gnat_to_gnu) <N_Selected_Component>: Prevent build_component_ref from\n\tfolding the result only if lvalue_required_for_attribute_p is true.\n\t* gcc-interface/utils.c (maybe_unconstrained_array): Pass correctly\n\ttyped constant to build_component_ref.\n\t(unchecked_convert): Likewise.\n\t* gcc-interface/utils2.c (maybe_wrap_malloc): Likewise.\n\t(build_allocator): Likewise.\n\nFrom-SVN: r158202", "tree": {"sha": "4de7dc724b7c55a6130ca6a06a873f4b2cfaaf7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4de7dc724b7c55a6130ca6a06a873f4b2cfaaf7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd64bab882b6bebb364ba7df6da511552124feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd64bab882b6bebb364ba7df6da511552124feb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd64bab882b6bebb364ba7df6da511552124feb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd64bab882b6bebb364ba7df6da511552124feb/comments", "author": null, "committer": null, "parents": [{"sha": "87fa3d342b62a632f1e44008c18bc60a9ac90af1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fa3d342b62a632f1e44008c18bc60a9ac90af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fa3d342b62a632f1e44008c18bc60a9ac90af1"}], "stats": {"total": 128, "additions": 109, "deletions": 19}, "files": [{"sha": "55898e3e4a54baf4b998abf204135d6d68388dfe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -1,3 +1,16 @@\n+2010-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (lvalue_required_for_attribute_p): New static\n+\tfunction.\n+\t(lvalue_required_p) <N_Attribute_Reference>: Call it.\n+\t(gnat_to_gnu) <N_Selected_Component>: Prevent build_component_ref from\n+\tfolding the result only if lvalue_required_for_attribute_p is true.\n+\t* gcc-interface/utils.c (maybe_unconstrained_array): Pass correctly\n+\ttyped constant to build_component_ref.\n+\t(unchecked_convert): Likewise.\n+\t* gcc-interface/utils2.c (maybe_wrap_malloc): Likewise.\n+\t(build_allocator): Likewise.\n+\n 2010-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils2.c (build_cond_expr): Take the address and"}, {"sha": "28a2bd414bd62951af3d3d14ece4a58666b1be73", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -655,6 +655,51 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   error_gnat_node = Empty;\n }\n \f\n+/* Return a positive value if an lvalue is required for GNAT_NODE, which is\n+   an N_Attribute_Reference.  */\n+\n+static int\n+lvalue_required_for_attribute_p (Node_Id gnat_node)\n+{\n+  switch (Get_Attribute_Id (Attribute_Name (gnat_node)))\n+    {\n+    case Attr_Pos:\n+    case Attr_Val:\n+    case Attr_Pred:\n+    case Attr_Succ:\n+    case Attr_First:\n+    case Attr_Last:\n+    case Attr_Range_Length:\n+    case Attr_Length:\n+    case Attr_Object_Size:\n+    case Attr_Value_Size:\n+    case Attr_Component_Size:\n+    case Attr_Max_Size_In_Storage_Elements:\n+    case Attr_Min:\n+    case Attr_Max:\n+    case Attr_Null_Parameter:\n+    case Attr_Passed_By_Reference:\n+    case Attr_Mechanism_Code:\n+      return 0;\n+\n+    case Attr_Address:\n+    case Attr_Access:\n+    case Attr_Unchecked_Access:\n+    case Attr_Unrestricted_Access:\n+    case Attr_Code_Address:\n+    case Attr_Pool_Address:\n+    case Attr_Size:\n+    case Attr_Alignment:\n+    case Attr_Bit_Position:\n+    case Attr_Position:\n+    case Attr_First_Bit:\n+    case Attr_Last_Bit:\n+    case Attr_Bit:\n+    default:\n+      return 1;\n+    }\n+}\n+\n /* Return a positive value if an lvalue is required for GNAT_NODE.  GNU_TYPE\n    is the type that will be used for GNAT_NODE in the translated GNU tree.\n    CONSTANT indicates whether the underlying object represented by GNAT_NODE\n@@ -678,18 +723,7 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n       return 1;\n \n     case N_Attribute_Reference:\n-      {\n-\tunsigned char id = Get_Attribute_Id (Attribute_Name (gnat_parent));\n-\treturn id == Attr_Address\n-\t       || id == Attr_Access\n-\t       || id == Attr_Unchecked_Access\n-\t       || id == Attr_Unrestricted_Access\n-\t       || id == Attr_Bit_Position\n-\t       || id == Attr_Position\n-\t       || id == Attr_First_Bit\n-\t       || id == Attr_Last_Bit\n-\t       || id == Attr_Bit;\n-      }\n+      return lvalue_required_for_attribute_p (gnat_parent);\n \n     case N_Parameter_Association:\n     case N_Function_Call:\n@@ -3991,7 +4025,9 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    gnu_result\n \t      = build_component_ref (gnu_prefix, NULL_TREE, gnu_field,\n \t\t\t\t     (Nkind (Parent (gnat_node))\n-\t\t\t\t      == N_Attribute_Reference));\n+\t\t\t\t      == N_Attribute_Reference)\n+\t\t\t\t     && lvalue_required_for_attribute_p\n+\t\t\t\t\t(Parent (gnat_node)));\n \t  }\n \n \tgcc_assert (gnu_result);"}, {"sha": "fed723fa929f2974af33518f0187a686b1f8f417", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -4274,12 +4274,13 @@ maybe_unconstrained_array (tree exp)\n \t      build_component_ref (new_exp, NULL_TREE,\n \t\t\t\t   TREE_CHAIN\n \t\t\t\t   (TYPE_FIELDS (TREE_TYPE (new_exp))),\n-\t\t\t\t   0);\n+\t\t\t\t   false);\n \t}\n       else if (TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (exp)))\n \treturn\n \t  build_component_ref (exp, NULL_TREE,\n-\t\t\t       TREE_CHAIN (TYPE_FIELDS (TREE_TYPE (exp))), 0);\n+\t\t\t       TREE_CHAIN (TYPE_FIELDS (TREE_TYPE (exp))),\n+\t\t\t       false);\n       break;\n \n     default:\n@@ -4416,7 +4417,7 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n       layout_type (rec_type);\n \n       expr = unchecked_convert (rec_type, expr, notrunc_p);\n-      expr = build_component_ref (expr, NULL_TREE, field, 0);\n+      expr = build_component_ref (expr, NULL_TREE, field, false);\n     }\n \n   /* Similarly if we are converting from an integral type whose precision"}, {"sha": "7d78c25ffba4c8491e6e5c75d7895838533477f0", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -1812,7 +1812,7 @@ maybe_wrap_malloc (tree data_size, tree data_type, Node_Id gnat_node)\n \n       tree aligning_field\n \t= build_component_ref (aligning_record, NULL_TREE,\n-\t\t\t       TYPE_FIELDS (aligning_type), 0);\n+\t\t\t       TYPE_FIELDS (aligning_type), false);\n \n       tree aligning_field_addr\n         = build_unary_op (ADDR_EXPR, NULL_TREE, aligning_field);\n@@ -2003,7 +2003,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \t    build_component_ref\n \t    (build_unary_op (INDIRECT_REF, NULL_TREE,\n \t\t\t     convert (storage_ptr_type, storage)),\n-\t     NULL_TREE, TYPE_FIELDS (storage_type), 0),\n+\t     NULL_TREE, TYPE_FIELDS (storage_type), false),\n \t    build_template (template_type, type, NULL_TREE)),\n \t   convert (result_type, convert (storage_ptr_type, storage)));\n     }"}, {"sha": "1c4c5de95eb3c6d8c23773f09818563029f659bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -1,3 +1,8 @@\n+2010-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack9.adb: Remove -cargs option.\n+\t* gnat.dg/aggr12.ad[sb]: New test.\n+\n 2010-04-10  Jie Zhang  <jie@codesourcery.com>\n \n \tPR target/43417"}, {"sha": "8a18291f7911ec2a28d4081af5670669a129cbbc", "filename": "gcc/testsuite/gnat.dg/aggr12.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2Fgnat.dg%2Faggr12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2Fgnat.dg%2Faggr12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr12.adb?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-fdump-tree-original\" }\n+\n+package body Aggr12 is\n+\n+  procedure Print (Data : String) is\n+  begin\n+    null;\n+  end;\n+\n+  procedure Test is\n+  begin\n+    Print (Hair_Color_Type'Image (A.I1));\n+    Print (Hair_Color_Type'Image (A.I2));\n+  end;\n+\n+end Aggr12;\n+\n+-- { dg-final { scan-tree-dump-not \"{.i1=0, .i2=2}\" \"original\" } }\n+-- { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "32084176e789cedecd431426411ca2dc55f0c992", "filename": "gcc/testsuite/gnat.dg/aggr12.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2Fgnat.dg%2Faggr12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2Fgnat.dg%2Faggr12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr12.ads?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -0,0 +1,15 @@\n+package Aggr12 is\n+\n+  type Hair_Color_Type is (Black, Brown, Blonde, Grey, White, Red);\n+\n+  type Rec is record\n+    I1, I2 : Hair_Color_Type;\n+  end record;\n+\n+  A : constant Rec := (Black, Blonde);\n+\n+  procedure Print (Data : String);\n+\n+  procedure Test;\n+\n+end Aggr12;"}, {"sha": "705e0c1143ae6c700bd20932b4f4fa40ee944357", "filename": "gcc/testsuite/gnat.dg/pack9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2Fgnat.dg%2Fpack9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd64bab882b6bebb364ba7df6da511552124feb/gcc%2Ftestsuite%2Fgnat.dg%2Fpack9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack9.adb?ref=3cd64bab882b6bebb364ba7df6da511552124feb", "patch": "@@ -1,5 +1,5 @@\n -- { dg-do compile }\n--- { dg-options \"-O2 -gnatp -cargs -fdump-tree-optimized\" }\n+-- { dg-options \"-O2 -gnatp -fdump-tree-optimized\" }\n \n package body Pack9 is\n "}]}