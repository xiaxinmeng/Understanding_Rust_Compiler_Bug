{"sha": "c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5YzZjNWI5ZTc4YjM3Y2U2YWYxYWRmMmUxZThkMTk3ZGY4Njk0NA==", "commit": {"author": {"name": "Scott Gilbertson", "email": "scottg@mantatest.com", "date": "2003-08-21T18:39:56Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2003-08-21T18:39:56Z"}, "message": "Makefile.am (gtk_awt_peer_sources): Add gnu/java/awt/peer/GLightweightPeer.java.\n\n2003-08-21  Scott Gilbertson  <scottg@mantatest.com>\n            Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* Makefile.am (gtk_awt_peer_sources): Add\n\tgnu/java/awt/peer/GLightweightPeer.java.  Remove\n\tgnu/java/awt/GLightweightPeer.java.\n\t* gnu/java/awt/GLightweightPeer.java: Remove file.\n\t* gnu/java/awt/peer/GLightweightPeer.java: New file.\n\t* java/awt/Component.java (getToolkit): Add comment about\n\tlightweight components.\n\t* java/awt/Toolkit.java (createComponent): Return\n\tgnu.java.awt.peer.GLightweightPeer.\n\nCo-Authored-By: Thomas Fitzsimmons <fitzsim@redhat.com>\n\nFrom-SVN: r70657", "tree": {"sha": "41531114bed06e7baad469d402e3d9512df9b188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41531114bed06e7baad469d402e3d9512df9b188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/comments", "author": null, "committer": null, "parents": [{"sha": "eb849993983949d4771579cf26ea563a2bb7c0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb849993983949d4771579cf26ea563a2bb7c0de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb849993983949d4771579cf26ea563a2bb7c0de"}], "stats": {"total": 275, "additions": 169, "deletions": 106}, "files": [{"sha": "06595e00db7b8fa69a888e89570c3fff009e1cd7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -1,3 +1,16 @@\n+2003-08-21  Scott Gilbertson  <scottg@mantatest.com>\n+            Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* Makefile.am (gtk_awt_peer_sources): Add\n+\tgnu/java/awt/peer/GLightweightPeer.java.  Remove\n+\tgnu/java/awt/GLightweightPeer.java.\n+\t* gnu/java/awt/GLightweightPeer.java: Remove file.\n+\t* gnu/java/awt/peer/GLightweightPeer.java: New file.\n+\t* java/awt/Component.java (getToolkit): Add comment about\n+\tlightweight components.\n+\t* java/awt/Toolkit.java (createComponent): Return\n+\tgnu.java.awt.peer.GLightweightPeer.\n+\n 2003-08-21  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* configure.in: Fix detection of gcj when building with newlib."}, {"sha": "7869df021f30b55acc5ab01364ad1845ab80c174", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -758,10 +758,10 @@ gnu/java/awt/ComponentDataBlitOp.java \\\n gnu/java/awt/EmbeddedWindow.java \\\n gnu/java/awt/EmbeddedWindowSupport.java \\\n gnu/java/awt/EventModifier.java \\\n-gnu/java/awt/GLightweightPeer.java \\\n gnu/java/awt/image/ImageDecoder.java \\\n gnu/java/awt/image/XBMDecoder.java \\\n gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n+gnu/java/awt/peer/GLightweightPeer.java \\\n gnu/java/beans/editors/ColorEditor.java\t\\\n gnu/java/beans/editors/FontEditor.java \\\n gnu/java/beans/editors/NativeBooleanEditor.java\t\\"}, {"sha": "b98f5208d996616d44c683cf40293ceed9192149", "filename": "libjava/Makefile.in", "status": "modified", "additions": 20, "deletions": 71, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -530,10 +530,10 @@ gnu/java/awt/ComponentDataBlitOp.java \\\n gnu/java/awt/EmbeddedWindow.java \\\n gnu/java/awt/EmbeddedWindowSupport.java \\\n gnu/java/awt/EventModifier.java \\\n-gnu/java/awt/GLightweightPeer.java \\\n gnu/java/awt/image/ImageDecoder.java \\\n gnu/java/awt/image/XBMDecoder.java \\\n gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n+gnu/java/awt/peer/GLightweightPeer.java \\\n gnu/java/beans/editors/ColorEditor.java\t\\\n gnu/java/beans/editors/FontEditor.java \\\n gnu/java/beans/editors/NativeBooleanEditor.java\t\\\n@@ -2688,14 +2688,13 @@ LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n DATA =  $(jar_DATA) $(pkgconfig_DATA) $(toolexecmainlib_DATA)\n \n DIST_COMMON =  README COPYING ChangeLog Makefile.am Makefile.in NEWS \\\n-THANKS acconfig.h acinclude.m4 aclocal.m4 configure configure.in \\\n-gcj/libgcj-config.h.in gcj/stamp-h2.in include/config.h.in \\\n-include/stamp-h1.in libgcj-test.spec.in libgcj.pc.in libgcj.spec.in\n+THANKS acinclude.m4 aclocal.m4 configure configure.in \\\n+libgcj-test.spec.in libgcj.pc.in libgcj.spec.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -2789,11 +2788,11 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/awt/EmbeddedWindow.P \\\n .deps/gnu/java/awt/EmbeddedWindowSupport.P \\\n .deps/gnu/java/awt/EventModifier.P \\\n-.deps/gnu/java/awt/GLightweightPeer.P \\\n .deps/gnu/java/awt/image/ImageDecoder.P \\\n .deps/gnu/java/awt/image/XBMDecoder.P \\\n .deps/gnu/java/awt/natEmbeddedWindow.P \\\n .deps/gnu/java/awt/peer/EmbeddedWindowPeer.P \\\n+.deps/gnu/java/awt/peer/GLightweightPeer.P \\\n .deps/gnu/java/awt/peer/gtk/GdkFontMetrics.P \\\n .deps/gnu/java/awt/peer/gtk/GdkGraphics.P \\\n .deps/gnu/java/awt/peer/gtk/GtkArg.P \\\n@@ -4318,53 +4317,6 @@ config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \t$(SHELL) ./config.status --recheck\n $(srcdir)/configure: @MAINTAINER_MODE_TRUE@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)\n \tcd $(srcdir) && $(AUTOCONF)\n-\n-include/config.h: include/stamp-h1\n-\t@if test ! -f $@; then \\\n-\t\trm -f include/stamp-h1; \\\n-\t\t$(MAKE) include/stamp-h1; \\\n-\telse :; fi\n-include/stamp-h1: $(srcdir)/include/config.h.in $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES= CONFIG_HEADERS=include/config.h \\\n-\t     $(SHELL) ./config.status\n-\t@echo timestamp > include/stamp-h1 2> /dev/null\n-$(srcdir)/include/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/include/stamp-h1.in\n-\t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/include/stamp-h1.in; \\\n-\t\t$(MAKE) $(srcdir)/include/stamp-h1.in; \\\n-\telse :; fi\n-$(srcdir)/include/stamp-h1.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n-\tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/include/stamp-h1.in 2> /dev/null\n-\n-gcj/libgcj-config.h: gcj/stamp-h2\n-\t@if test ! -f $@; then \\\n-\t\trm -f gcj/stamp-h2; \\\n-\t\t$(MAKE) gcj/stamp-h2; \\\n-\telse :; fi\n-gcj/stamp-h2: $(srcdir)/gcj/libgcj-config.h.in $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES= CONFIG_HEADERS=gcj/libgcj-config.h \\\n-\t     $(SHELL) ./config.status\n-\t@echo timestamp > gcj/stamp-h2 2> /dev/null\n-$(srcdir)/gcj/libgcj-config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/gcj/stamp-h2.in\n-\t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/gcj/stamp-h2.in; \\\n-\t\t$(MAKE) $(srcdir)/gcj/stamp-h2.in; \\\n-\telse :; fi\n-$(srcdir)/gcj/stamp-h2.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n-\tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/gcj/stamp-h2.in 2> /dev/null\n-\n-mostlyclean-hdr:\n-\n-clean-hdr:\n-\n-distclean-hdr:\n-\t-rm -f include/config.h gcj/libgcj-config.h\n-\n-maintainer-clean-hdr:\n libgcj.pc: $(top_builddir)/config.status libgcj.pc.in\n \tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n libgcj.spec: $(top_builddir)/config.status libgcj.spec.in\n@@ -4829,32 +4781,29 @@ distclean-generic:\n \t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-hdr mostlyclean-toolexeclibLTLIBRARIES \\\n-\t\tmostlyclean-compile mostlyclean-libtool \\\n-\t\tmostlyclean-binPROGRAMS mostlyclean-noinstPROGRAMS \\\n-\t\tmostlyclean-tags mostlyclean-depend mostlyclean-generic\n+mostlyclean-am:  mostlyclean-toolexeclibLTLIBRARIES mostlyclean-compile \\\n+\t\tmostlyclean-libtool mostlyclean-binPROGRAMS \\\n+\t\tmostlyclean-noinstPROGRAMS mostlyclean-tags \\\n+\t\tmostlyclean-depend mostlyclean-generic\n \n mostlyclean: mostlyclean-recursive\n \n-clean-am:  clean-hdr clean-toolexeclibLTLIBRARIES clean-compile \\\n-\t\tclean-libtool clean-binPROGRAMS clean-noinstPROGRAMS \\\n-\t\tclean-tags clean-depend clean-generic mostlyclean-am \\\n-\t\tclean-local\n+clean-am:  clean-toolexeclibLTLIBRARIES clean-compile clean-libtool \\\n+\t\tclean-binPROGRAMS clean-noinstPROGRAMS clean-tags \\\n+\t\tclean-depend clean-generic mostlyclean-am clean-local\n \n clean: clean-recursive\n \n-distclean-am:  distclean-hdr distclean-toolexeclibLTLIBRARIES \\\n-\t\tdistclean-compile distclean-libtool \\\n-\t\tdistclean-binPROGRAMS distclean-noinstPROGRAMS \\\n-\t\tdistclean-tags distclean-depend distclean-generic \\\n-\t\tclean-am\n+distclean-am:  distclean-toolexeclibLTLIBRARIES distclean-compile \\\n+\t\tdistclean-libtool distclean-binPROGRAMS \\\n+\t\tdistclean-noinstPROGRAMS distclean-tags \\\n+\t\tdistclean-depend distclean-generic clean-am\n \t-rm -f libtool\n \n distclean: distclean-recursive\n \t-rm -f config.status\n \n-maintainer-clean-am:  maintainer-clean-hdr \\\n-\t\tmaintainer-clean-toolexeclibLTLIBRARIES \\\n+maintainer-clean-am:  maintainer-clean-toolexeclibLTLIBRARIES \\\n \t\tmaintainer-clean-compile maintainer-clean-libtool \\\n \t\tmaintainer-clean-binPROGRAMS \\\n \t\tmaintainer-clean-noinstPROGRAMS maintainer-clean-tags \\\n@@ -4866,9 +4815,9 @@ maintainer-clean-am:  maintainer-clean-hdr \\\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f config.status\n \n-.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \\\n-mostlyclean-toolexeclibLTLIBRARIES distclean-toolexeclibLTLIBRARIES \\\n-clean-toolexeclibLTLIBRARIES maintainer-clean-toolexeclibLTLIBRARIES \\\n+.PHONY: mostlyclean-toolexeclibLTLIBRARIES \\\n+distclean-toolexeclibLTLIBRARIES clean-toolexeclibLTLIBRARIES \\\n+maintainer-clean-toolexeclibLTLIBRARIES \\\n uninstall-toolexeclibLTLIBRARIES install-toolexeclibLTLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\\n maintainer-clean-compile mostlyclean-libtool distclean-libtool \\"}, {"sha": "064b5227625567dfa89132d54cc14d8f8a2c6584", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -125,6 +125,7 @@ STRIP = @STRIP@\n SYSDEP_SOURCES = @SYSDEP_SOURCES@\n SYSTEMSPEC = @SYSTEMSPEC@\n SYS_ZLIBS = @SYS_ZLIBS@\n+THREADCXXFLAGS = @THREADCXXFLAGS@\n THREADDEPS = @THREADDEPS@\n THREADINCS = @THREADINCS@\n THREADLDFLAGS = @THREADLDFLAGS@"}, {"sha": "5c0ea498e8236a39d23892c4b2e358ff50a99b4c", "filename": "libjava/gnu/java/awt/peer/GLightweightPeer.java", "status": "renamed", "additions": 130, "deletions": 31, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FGLightweightPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FGLightweightPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2FGLightweightPeer.java?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2000, 2002  Free Software Foundation\n+/* GLightweightPeer.java --\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -34,34 +35,109 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-package gnu.java.awt;\n-\n-import java.awt.*;\n+package gnu.java.awt.peer;\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.BufferCapabilities;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.Image;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n import java.awt.event.PaintEvent;\n-import java.awt.peer.*;\n-import java.awt.image.*;\n+import java.awt.image.ColorModel;\n+import java.awt.image.ImageObserver;\n+import java.awt.image.ImageProducer;\n+import java.awt.image.VolatileImage;\n+import java.awt.peer.ContainerPeer;\n+import java.awt.peer.LightweightPeer;\n+\n+/*\n+ * Another possible implementation strategy for lightweight peers is\n+ * to make GLightweightPeer a placeholder class that implements\n+ * LightweightPeer.  Then the Component and Container classes could\n+ * identify a peer as lightweight and handle it specially.  The\n+ * current approach is probably more clear but less efficient.\n+ */\n \n /**\n- * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>\n+ * A stub class that implements the ComponentPeer and ContainerPeer\n+ * interfaces using callbacks into the Component and Container\n+ * classes.  GLightweightPeer allows the Component and Container\n+ * classes to treat lightweight and heavyweight peers in the same way.\n+ *\n+ * Lightweight components are painted directly onto their parent\n+ * containers through an Image object provided by the toolkit.\n  */\n-public class GLightweightPeer implements LightweightPeer\n+public class GLightweightPeer\n+  implements LightweightPeer, ContainerPeer\n {\n-  public static final GLightweightPeer INSTANCE = new GLightweightPeer();\n+  private Component comp;\n \n-  public GLightweightPeer() {}\n+  private Insets containerInsets;\n \n-  // -------- java.awt.peer.ComponentPeer implementation:\n+  public GLightweightPeer(Component comp)\n+  {\n+    this.comp = comp;\n+  }\n+\n+  // -------- java.awt.peer.ContainerPeer implementation:\n+  \n+  public Insets insets()\n+  {\n+    return getInsets ();\n+  }\n+  \n+  public Insets getInsets()\n+  {\n+    if (containerInsets == null)\n+      containerInsets = new Insets (0,0,0,0);\n+    return containerInsets;\n+  }\n+  \n+  public void beginValidate()\n+  {\n+  }\n+  \n+  public void endValidate()\n+  {\n+  }\n+  \n+  public void beginLayout()\n+  {\n+  }\n   \n+  public void endLayout()\n+  {\n+  }\n+  \n+  public boolean isPaintPending()\n+  {\n+    return false;\n+  }\n+\n+  // -------- java.awt.peer.ComponentPeer implementation:\n+\n   public int checkImage(Image img, int width, int height, ImageObserver o)\n   {\n-    return 0;\n+    return comp.getToolkit().checkImage(img, width, height, o);\n   }\n \n   public Image createImage(ImageProducer prod)\n   {\n-    return null;\n+    return comp.getToolkit().createImage(prod);\n   }\n \n+  /* This method is not called. */\n   public Image createImage(int width, int height)\n   {\n     return null;\n@@ -77,32 +153,40 @@ public GraphicsConfiguration getGraphicsConfiguration()\n   {\n     return null;\n   }\n-  \n+\n   public FontMetrics getFontMetrics(Font f)\n   {\n-    return null;\n+    return comp.getToolkit().getFontMetrics(f);\n   }\n \n+  /* Returning null here tells the Component object that called us to\n+   * use its parent's Graphics. */\n   public Graphics getGraphics()\n   {\n     return null;\n   }\n \n   public Point getLocationOnScreen()\n   {\n-    return null;\n+    Point parentLocation = comp.getParent().getLocationOnScreen();\n+    return new Point (parentLocation.x + comp.getX(),\n+                      parentLocation.y + comp.getY());\n   }\n \n   public Dimension getMinimumSize()\n   {\n-    return null;\n+    return new Dimension(comp.getWidth(), comp.getHeight());\n   }\n \n+  /* A lightweight component's preferred size is equivalent to its\n+   * Component width and height values. */\n   public Dimension getPreferredSize()\n   {\n-    return null;\n+    return new Dimension(comp.getWidth(), comp.getHeight());\n   }\n \n+  /* Returning null here tells the Component object that called us to\n+   * use its parent's Toolkit. */\n   public Toolkit getToolkit()\n   {\n     return null;\n@@ -124,20 +208,20 @@ public boolean isFocusTraversable()\n \n   public Dimension minimumSize()\n   {\n-    return null;\n+    return getMinimumSize();\n   }\n \n   public Dimension preferredSize()\n   {\n-    return null;\n+    return getPreferredSize();\n   }\n \n   public void paint(Graphics graphics) {}\n \n   public boolean prepareImage(Image img, int width, int height,\n \t\t\t      ImageObserver o)\n   {\n-    return false;\n+    return comp.getToolkit().prepareImage(img, width, height, o);\n   }\n \n   public void print(Graphics graphics) {}\n@@ -146,13 +230,16 @@ public void repaint(long tm, int x, int y, int width, int height) {}\n \n   public void requestFocus() {}\n \n-  public boolean requestFocus(java.awt.Component source, boolean bool1, boolean bool2, long x) { return false; }\n+  public boolean requestFocus(Component source, boolean bool1, boolean bool2, long x)\n+  {\n+    return false;\n+  }\n \n   public void reshape(int x, int y, int width, int height) {}\n \n   public void setBackground(Color color) {}\n \n-  public void setBounds(int x, int y, int width, int height) {}\n+  public void setBounds(int x, int y, int width, int height) { }\n \n   public void setCursor(Cursor cursor) {}\n \n@@ -170,12 +257,18 @@ public void show() {}\n \n   public ColorModel getColorModel ()\n   {\n-    return null;\n+    return comp.getColorModel ();\n   }\n \n-  public boolean isObscured() { return false; }\n+  public boolean isObscured()\n+  {\n+    return false;\n+  }\n \n-  public boolean canDetermineObscurity() { return false; }\n+  public boolean canDetermineObscurity()\n+  {\n+    return false;\n+  }\n \n   public void coalescePaintEvent(PaintEvent e) { }\n \n@@ -186,14 +279,20 @@ public VolatileImage createVolatileImage(int width, int height)\n     return null; \n   }\n \n-  public boolean handlesWheelScrolling() { return false; }\n+  public boolean handlesWheelScrolling()\n+  {\n+    return false;\n+  }\n \n-  public void createBuffers(int x, java.awt.BufferCapabilities capabilities) \n-    throws java.awt.AWTException { }\n+  public void createBuffers(int x, BufferCapabilities capabilities) \n+    throws AWTException { }\n \n-  public java.awt.Image getBackBuffer() { return null; }\n+  public Image getBackBuffer()\n+  {\n+    return null;\n+  }\n \n-  public void flip(java.awt.BufferCapabilities.FlipContents contents) { }\n+  public void flip(BufferCapabilities.FlipContents contents) { }\n \n   public void destroyBuffers() { }\n }", "previous_filename": "libjava/gnu/java/awt/GLightweightPeer.java"}, {"sha": "70902622733ecbdade74706a4f064e296038bbac", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -125,6 +125,7 @@ STRIP = @STRIP@\n SYSDEP_SOURCES = @SYSDEP_SOURCES@\n SYSTEMSPEC = @SYSTEMSPEC@\n SYS_ZLIBS = @SYS_ZLIBS@\n+THREADCXXFLAGS = @THREADCXXFLAGS@\n THREADDEPS = @THREADDEPS@\n THREADINCS = @THREADINCS@\n THREADLDFLAGS = @THREADLDFLAGS@"}, {"sha": "98511ef7c6e0b4a4b2ed0fe44452992f6aaf3bc1", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -677,6 +677,7 @@ public Toolkit getToolkit()\n         if (tk != null)\n           return tk;\n       }\n+    // Get toolkit for lightweight component.\n     if (parent != null)\n       return parent.getToolkit();\n     return Toolkit.getDefaultToolkit();"}, {"sha": "f8cc6bffa2c8cf101c3e5c50e64214db7b332717", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -342,15 +342,13 @@ public Toolkit()\n    * with its own native window.  Instead, this method allows the component\n    * to draw on its parent window as a \"lightweight\" widget.\n    *\n-   * XXX: FIXME\n-   *\n    * @param target The <code>Component</code> to create the peer for.\n    *\n    * @return The peer for the specified <code>Component</code> object.\n    */\n   protected LightweightPeer createComponent(Component target)\n   {\n-    return null;\n+    return new gnu.java.awt.peer.GLightweightPeer (target);\n   }\n \n   /**"}, {"sha": "a45ec55ddb27703de6ee5e76e173810de47c278a", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c6c5b9e78b37ce6af1adf2e1e8d197df86944/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=c79c6c5b9e78b37ce6af1adf2e1e8d197df86944", "patch": "@@ -125,6 +125,7 @@ STRIP = @STRIP@\n SYSDEP_SOURCES = @SYSDEP_SOURCES@\n SYSTEMSPEC = @SYSTEMSPEC@\n SYS_ZLIBS = @SYS_ZLIBS@\n+THREADCXXFLAGS = @THREADCXXFLAGS@\n THREADDEPS = @THREADDEPS@\n THREADINCS = @THREADINCS@\n THREADLDFLAGS = @THREADLDFLAGS@"}]}