{"sha": "6037221c71ac41ed1971a58f1cb00e71da657665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzNzIyMWM3MWFjNDFlZDE5NzFhNThmMWNiMDBlNzFkYTY1NzY2NQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2004-01-05T21:35:33Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2004-01-05T21:35:33Z"}, "message": "2004-01-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/GtkScrollPanePeer.java,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c\n\t(create(int, int)): New method.\n\t(create): Call new create method.\n\t(gtkScrolledWindowNew, gtkScrolledWindowSetSize): Remove\n\tmethods.\n\t(childResized): Remove native implementation.  Implement in\n\tJava.\n\t(getHScrollbarHeight, getVScrollbarWidth): Call\n\tgtk_widget_size_request to get scrollbar dimensions.\n\t* java/awt/ScrollPane.java (getViewportSize): Reimplement.  Only\n\tcall getVScrollbarWidth and getHScrollbarHeight when vertical\n\tand horizontal scrollbars respectively are needed.\n\t(doLayout): Enlarge child if it is smaller than the viewport.\n\nFrom-SVN: r75446", "tree": {"sha": "54f0fde0c14793ae5d9f9b6f42326a0c2f6cd38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f0fde0c14793ae5d9f9b6f42326a0c2f6cd38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6037221c71ac41ed1971a58f1cb00e71da657665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6037221c71ac41ed1971a58f1cb00e71da657665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6037221c71ac41ed1971a58f1cb00e71da657665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6037221c71ac41ed1971a58f1cb00e71da657665/comments", "author": null, "committer": null, "parents": [{"sha": "4b6eeb9ac4f40f2ab115304090f6ca9822388489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6eeb9ac4f40f2ab115304090f6ca9822388489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6eeb9ac4f40f2ab115304090f6ca9822388489"}], "stats": {"total": 178, "additions": 142, "deletions": 36}, "files": [{"sha": "a86cbb777797b1d6da759dea19c9cb166964dd3d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6037221c71ac41ed1971a58f1cb00e71da657665", "patch": "@@ -1,3 +1,20 @@\n+2004-01-05  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/GtkScrollPanePeer.java,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c\n+\t(create(int, int)): New method.\n+\t(create): Call new create method.\n+\t(gtkScrolledWindowNew, gtkScrolledWindowSetSize): Remove\n+\tmethods.\n+\t(childResized): Remove native implementation.  Implement in\n+\tJava.\n+\t(getHScrollbarHeight, getVScrollbarWidth): Call\n+\tgtk_widget_size_request to get scrollbar dimensions.\n+\t* java/awt/ScrollPane.java (getViewportSize): Reimplement.  Only\n+\tcall getVScrollbarWidth and getHScrollbarHeight when vertical\n+\tand horizontal scrollbars respectively are needed.\n+\t(doLayout): Enlarge child if it is smaller than the viewport.\n+\n 2004-01-05  Fernando Nasser  <fnasser@redhat.com>\n \n \t* java/awt/Dialog.java (constructor): Accept null title as per spec."}, {"sha": "e4f5e8f312c0327447dead5a933716aa17ea7dd3", "filename": "libjava/gnu/java/awt/peer/gtk/GtkScrollPanePeer.java", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollPanePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollPanePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollPanePeer.java?ref=6037221c71ac41ed1971a58f1cb00e71da657665", "patch": "@@ -46,15 +46,17 @@\n public class GtkScrollPanePeer extends GtkContainerPeer\n   implements ScrollPanePeer\n {\n-  native void create ();\n+  native void create (int width, int height);\n+\n+  void create ()\n+  {\n+    create (awtComponent.getWidth (), awtComponent.getHeight ());\n+  }\n \n-  native void gtkScrolledWindowNew(ComponentPeer parent,\n-\t\t\t\t   int policy, int w, int h, int[] dims);\n   native void gtkScrolledWindowSetScrollPosition(int x, int y);\n   native void gtkScrolledWindowSetHScrollIncrement (int u);\n   native void gtkScrolledWindowSetVScrollIncrement (int u);\n-  native void gtkScrolledWindowSetSize(int w, int h);\n-  \n+\n   public GtkScrollPanePeer (ScrollPane sp)\n   {\n     super (sp);\n@@ -63,7 +65,24 @@ public GtkScrollPanePeer (ScrollPane sp)\n   }\n \n   native void setPolicy (int policy);\n-  native public void childResized (int width, int height);\n+  public void childResized (int width, int height)\n+  {\n+    int dim[] = new int[2];\n+\n+    gtkWidgetGetDimensions (dim);\n+\n+    // If the child is in this range, GTK adds both scrollbars, but\n+    // the AWT doesn't.  So set the peer's scroll policy to\n+    // GTK_POLICY_NEVER.\n+    if ((width > dim[0] - getVScrollbarWidth ()\n+\t && width <= dim[0])\n+\t&& (height > dim[1] - getHScrollbarHeight ()\n+\t    && height <= dim[1]))\n+      setPolicy (ScrollPane.SCROLLBARS_NEVER);\n+    else\n+      setPolicy (((ScrollPane) awtComponent).getScrollbarDisplayPolicy ());\n+  }\n+\n   native public int getHScrollbarHeight ();\n   native public int getVScrollbarWidth ();\n   native public void setScrollPosition (int x, int y);"}, {"sha": "937568a6204f69d8be8209db797773e48ab756ae", "filename": "libjava/java/awt/ScrollPane.java", "status": "modified", "additions": 78, "deletions": 7, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2Fjava%2Fawt%2FScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2Fjava%2Fawt%2FScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPane.java?ref=6037221c71ac41ed1971a58f1cb00e71da657665", "patch": "@@ -218,12 +218,71 @@ public Dimension getViewportSize ()\n {\n   Dimension viewsize = getSize ();\n   Insets insets = getInsets ();\n-  viewsize.width = (viewsize.width\n-                    - (insets.left + insets.right)\n-                    - getVScrollbarWidth ());\n-  viewsize.height = (viewsize.height\n-                     - (insets.top + insets.bottom)\n-                     - getHScrollbarHeight ());\n+\n+  viewsize.width -= (insets.left + insets.right);\n+  viewsize.height -= (insets.top + insets.bottom);\n+\n+  Component[] list = getComponents();\n+  if ((list == null) || (list.length <= 0))\n+    return viewsize;\n+\n+  Dimension dim = list[0].getPreferredSize();\n+\n+  if (dim.width <= 0 && dim.height <= 0)\n+    return viewsize;\n+\n+  int vScrollbarWidth = getVScrollbarWidth ();\n+  int hScrollbarHeight = getHScrollbarHeight ();\n+\n+  if (scrollbarDisplayPolicy == SCROLLBARS_ALWAYS)\n+    {\n+      viewsize.width -= vScrollbarWidth;\n+      viewsize.height -= hScrollbarHeight;\n+      return viewsize;\n+    }\n+\n+  if (scrollbarDisplayPolicy == SCROLLBARS_NEVER)\n+    return viewsize;\n+\n+  // The scroll policy is SCROLLBARS_AS_NEEDED, so we need to see if\n+  // either scrollbar is needed.\n+\n+  // Assume we don't need either scrollbar.\n+  boolean mayNeedVertical = false;\n+  boolean mayNeedHorizontal = false;\n+\n+  boolean needVertical = false;\n+  boolean needHorizontal = false;\n+\n+  // Check if we need vertical scrollbars.  If we do, then we need to\n+  // subtract the width of the vertical scrollbar from the viewport's\n+  // width.\n+  if (dim.height > viewsize.height)\n+    needVertical = true;\n+  else if (dim.height > (viewsize.height - hScrollbarHeight))\n+    // This is tricky.  In this case the child is tall enough that its\n+    // bottom edge would be covered by a horizontal scrollbar, if one\n+    // were present.  This means that if there's a horizontal\n+    // scrollbar then we need a vertical scrollbar.\n+    mayNeedVertical = true;\n+\n+  if (dim.width > viewsize.width)\n+    needHorizontal = true;\n+  else if (dim.width > (viewsize.width - vScrollbarWidth))\n+    mayNeedHorizontal = true;\n+\n+  if (needVertical && mayNeedHorizontal)\n+    needHorizontal = true;\n+\n+  if (needHorizontal && mayNeedVertical)\n+    needVertical = true;\n+\n+  if (needHorizontal)\n+    viewsize.height -= hScrollbarHeight;\n+\n+  if (needVertical)\n+    viewsize.width -= vScrollbarWidth;\n+\n   return viewsize;\n }\n \n@@ -391,7 +450,19 @@ protected final void addImpl (Component component, Object constraints,\n   if ((list != null) && (list.length > 0))\n     {\n       Dimension dim = list[0].getPreferredSize();\n-      list[0].resize(dim);\n+      Dimension vp = getViewportSize ();\n+\n+      if (dim.width < vp.width)\n+\tdim.width = vp.width;\n+\n+      if (dim.height < vp.height)\n+\tdim.height = vp.height;\n+\n+      ScrollPanePeer peer = (ScrollPanePeer) getPeer ();\n+      if (peer != null)\n+\tpeer.childResized (dim.width, dim.height);\n+\n+      list[0].resize (dim);\n \n       Point p = getScrollPosition();\n       if (p.x > dim.width)"}, {"sha": "79e5082bbb1df996313d3e2145f4f9aa5bc7ed99", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6037221c71ac41ed1971a58f1cb00e71da657665/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c?ref=6037221c71ac41ed1971a58f1cb00e71da657665", "patch": "@@ -41,20 +41,22 @@ exception statement from your version. */\n \n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_create \n-  (JNIEnv *env, jobject obj)\n+  (JNIEnv *env, jobject obj, int width, int height)\n {\n-  gpointer window;\n+  GtkWidget *sw;\n \n   /* Create global reference and save it for future use */\n   NSA_SET_GLOBAL_REF (env, obj);\n \n   gdk_threads_enter ();\n   \n-  window = gtk_scrolled_window_new (NULL, NULL);\n+  sw = gtk_scrolled_window_new (NULL, NULL);\n+\n+  gtk_widget_set_size_request (sw, width, height);\n \n   gdk_threads_leave ();\n \n-  NSA_SET_PTR (env, obj, window);\n+  NSA_SET_PTR (env, obj, sw);\n }\n \n JNIEXPORT void JNICALL \n@@ -116,34 +118,25 @@ Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_gtkScrolledWindowSetVScrollIncremen\n   gdk_threads_leave ();\n }\n \n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_childResized\n-  (JNIEnv *env, jobject obj, jint width, jint height)\n-{\n-  void *ptr;\n-\n-  ptr = NSA_GET_PTR (env, obj);\n-\n-  return;\n-\n-  gdk_threads_enter ();\n-  gtk_widget_set_usize (GTK_BIN (ptr)->child, width, height);\n-  gdk_threads_leave ();\n-}\n-\n JNIEXPORT jint JNICALL \n Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_getHScrollbarHeight\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n   GtkScrolledWindow *sw;\n-  jint height;\n+  GtkRequisition requisition;\n+  jint height = 0;\n+  jint spacing = 0;\n \n   ptr = NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n   sw = GTK_SCROLLED_WINDOW (ptr);\n-  height = (sw->hscrollbar_visible) ? sw->hscrollbar->allocation.height : 0;\n+\n+  gtk_widget_size_request (sw->hscrollbar, &requisition);\n+  gtk_widget_style_get (GTK_WIDGET (sw), \"scrollbar_spacing\", &spacing, NULL);\n+  height = requisition.height + spacing;\n+\n   gdk_threads_leave ();\n \n   return height;\n@@ -155,13 +148,19 @@ Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_getVScrollbarWidth\n {\n   void *ptr;\n   GtkScrolledWindow *sw;\n-  jint width;\n+  GtkRequisition requisition;\n+  jint width = 0;\n+  jint spacing = 0;\n \n   ptr = NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n   sw = GTK_SCROLLED_WINDOW (ptr);\n-  width = (sw->vscrollbar_visible) ? sw->vscrollbar->allocation.width : 0;\n+\n+  gtk_widget_size_request (sw->vscrollbar, &requisition);\n+  gtk_widget_style_get (GTK_WIDGET (sw), \"scrollbar_spacing\", &spacing, NULL);\n+  width = requisition.width + spacing;\n+\n   gdk_threads_leave ();\n \n   return width;"}]}