{"sha": "b5487346841fcd5a5834e458c8504d1febc1a46f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0ODczNDY4NDFmY2Q1YTU4MzRlNDU4Yzg1MDRkMWZlYmMxYTQ2Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-01T20:13:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-01T20:13:56Z"}, "message": "tree.h (TYPE_NONALIASED_COMPONENT): Expand comment.\n\n\t* tree.h (TYPE_NONALIASED_COMPONENT): Expand comment.\n\t(DECL_NONADDRESSABLE_P): Likewise.\n\t* alias.c (record_component_aliases): Fix comment.\n\nFrom-SVN: r134868", "tree": {"sha": "9828a8380bd06a56ecc335ce3c88debf94b1c748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9828a8380bd06a56ecc335ce3c88debf94b1c748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5487346841fcd5a5834e458c8504d1febc1a46f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5487346841fcd5a5834e458c8504d1febc1a46f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5487346841fcd5a5834e458c8504d1febc1a46f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5487346841fcd5a5834e458c8504d1febc1a46f/comments", "author": null, "committer": null, "parents": [{"sha": "32d99e6869ec4eb0d8f801893d2ea499f9951f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d99e6869ec4eb0d8f801893d2ea499f9951f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d99e6869ec4eb0d8f801893d2ea499f9951f71"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "aa08080ea1b90efe63a5c17f4cdd79ae65d669b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5487346841fcd5a5834e458c8504d1febc1a46f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5487346841fcd5a5834e458c8504d1febc1a46f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5487346841fcd5a5834e458c8504d1febc1a46f", "patch": "@@ -1,3 +1,9 @@\n+2008-05-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (TYPE_NONALIASED_COMPONENT): Expand comment.\n+\t(DECL_NONADDRESSABLE_P): Likewise.\n+\t* alias.c (record_component_aliases): Fix comment.\n+\n 2008-05-01  Simon Baldwin <simonb@google.com>\n \n \t* c-common.h (warn_array_subscript_range): New function."}, {"sha": "b29abf7032402c7534621ca14b69a9b278d907c4", "filename": "gcc/alias.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5487346841fcd5a5834e458c8504d1febc1a46f/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5487346841fcd5a5834e458c8504d1febc1a46f/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=b5487346841fcd5a5834e458c8504d1febc1a46f", "patch": "@@ -740,9 +740,8 @@ record_alias_subset (alias_set_type superset, alias_set_type subset)\n \n /* Record that component types of TYPE, if any, are part of that type for\n    aliasing purposes.  For record types, we only record component types\n-   for fields that are marked addressable.  For array types, we always\n-   record the component types, so the front end should not call this\n-   function if the individual component aren't addressable.  */\n+   for fields that are not marked non-addressable.  For array types, we\n+   only record the component type if it is not marked non-aliased.  */\n \n void\n record_component_aliases (tree type)\n@@ -756,7 +755,7 @@ record_component_aliases (tree type)\n   switch (TREE_CODE (type))\n     {\n     case ARRAY_TYPE:\n-      if (! TYPE_NONALIASED_COMPONENT (type))\n+      if (!TYPE_NONALIASED_COMPONENT (type))\n \trecord_alias_subset (superset, get_alias_set (TREE_TYPE (type)));\n       break;\n \n@@ -775,7 +774,7 @@ record_component_aliases (tree type)\n \t\t\t\t get_alias_set (BINFO_TYPE (base_binfo)));\n \t}\n       for (field = TYPE_FIELDS (type); field != 0; field = TREE_CHAIN (field))\n-\tif (TREE_CODE (field) == FIELD_DECL && ! DECL_NONADDRESSABLE_P (field))\n+\tif (TREE_CODE (field) == FIELD_DECL && !DECL_NONADDRESSABLE_P (field))\n \t  record_alias_subset (superset, get_alias_set (TREE_TYPE (field)));\n       break;\n "}, {"sha": "d52c76095fb5e378a4c30bd82de3849cf6d62d87", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5487346841fcd5a5834e458c8504d1febc1a46f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5487346841fcd5a5834e458c8504d1febc1a46f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b5487346841fcd5a5834e458c8504d1febc1a46f", "patch": "@@ -2264,8 +2264,9 @@ struct tree_block GTY(())\n #define TYPE_TRANSPARENT_UNION(NODE)  \\\n   (UNION_TYPE_CHECK (NODE)->type.transparent_union_flag)\n \n-/* For an ARRAY_TYPE, indicates that it is not permitted to\n-   take the address of a component of the type.  */\n+/* For an ARRAY_TYPE, indicates that it is not permitted to take the\n+   address of a component of the type.  This is the counterpart of\n+   DECL_NONADDRESSABLE_P for arrays, see the definition of this flag.  */\n #define TYPE_NONALIASED_COMPONENT(NODE) \\\n   (ARRAY_TYPE_CHECK (NODE)->type.transparent_union_flag)\n \n@@ -2896,7 +2897,20 @@ struct tree_decl_with_rtl GTY(())\n #define DECL_BIT_FIELD(NODE) (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_2)\n \n /* Used in a FIELD_DECL to indicate that we cannot form the address of\n-   this component.  */\n+   this component.  This makes it possible for Type-Based Alias Analysis\n+   to disambiguate accesses to this field with indirect accesses using\n+   the field's type:\n+\n+     struct S { int i; } s;\n+     int *p;\n+\n+   If the flag is set on 'i', TBAA computes that s.i and *p never conflict.\n+\n+   From the implementation's viewpoint, the alias set of the type of the\n+   field 'i' (int) will not be recorded as a subset of that of the type of\n+   's' (struct S) in record_component_aliases.  The counterpart is that\n+   accesses to s.i must not be given the alias set of the type of 'i'\n+   (int) but instead directly that of the type of 's' (struct S).  */\n #define DECL_NONADDRESSABLE_P(NODE) \\\n   (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_3)\n "}]}