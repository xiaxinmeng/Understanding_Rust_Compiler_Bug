{"sha": "ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyYmI0Mzc3MDA1ZjliZDExN2ZlZTMxNTVjOWVjZTAwZjRkNWIyNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-05T20:05:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-05T20:05:20Z"}, "message": "re PR libstdc++/38081 (time_get<>::do_get_weekday does not always recognize full names of weekdays)\n\n2010-01-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/38081\n\t* include/bits/locale_facets_nonio.h (time_get<>::\n\t_M_extract_wday_or_month): New, declare.\n\t* include/bits/locale_facets_nonio.tcc (time_get<>::\n\t_M_extract_wday_or_month): Define.\n\t(time_get<>::do_get_weekday, time_get<>::do_get_monthname): Use it.\n\t* config/abi/pre/gnu.ver: Export new symbols.\n\t* doc/xml/manual/prerequisites.xml: Add ru_RU.UTF-8 and\n\tru_RU.ISO-8859-5.\n\t* testsuite/lib/libstdc++.exp: Adjust.\n\t* testsuite/22_locale/time_get/get_weekday/char/38081-1.cc: New.\n\t* testsuite/22_locale/time_get/get_weekday/char/38081-2.cc: Likewise.\n\nFrom-SVN: r155659", "tree": {"sha": "500795f016411556c30ea480dc086798f6ec1ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500795f016411556c30ea480dc086798f6ec1ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/comments", "author": null, "committer": null, "parents": [{"sha": "9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf4cdf5755e89b6e17122b985daa4bc2510f6f9"}], "stats": {"total": 373, "additions": 314, "deletions": 59}, "files": [{"sha": "f15f43de0762cd93cc069deff033e6ee173ff391", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -1,3 +1,18 @@\n+2010-01-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/38081\n+\t* include/bits/locale_facets_nonio.h (time_get<>::\n+\t_M_extract_wday_or_month): New, declare.\n+\t* include/bits/locale_facets_nonio.tcc (time_get<>::\n+\t_M_extract_wday_or_month): Define.\n+\t(time_get<>::do_get_weekday, time_get<>::do_get_monthname): Use it.\n+\t* config/abi/pre/gnu.ver: Export new symbols.\n+\t* doc/xml/manual/prerequisites.xml: Add ru_RU.UTF-8 and\n+\tru_RU.ISO-8859-5.\n+\t* testsuite/lib/libstdc++.exp: Adjust.\n+\t* testsuite/22_locale/time_get/get_weekday/char/38081-1.cc: New.\n+\t* testsuite/22_locale/time_get/get_weekday/char/38081-2.cc: Likewise.\n+\n 2010-01-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure: Regenerate."}, {"sha": "c67898404fb374b49a029275de0bfe52f386d090", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -1,6 +1,6 @@\n ## Linker script for GNU versioning (GNU ld 2.13.91+ only.)\n ##\n-## Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+## Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the GNU ISO C++ Library.  This library is free\n@@ -149,7 +149,7 @@ GLIBCXX_3.4 {\n       std::th[a-h]*;\n       std::th[j-q]*;\n       std::th[s-z]*;\n-      std::t[i-n]*;\n+#     std::t[i-n]*;\n       std::tr1::h[^a]*;\n       std::t[s-z]*;\n #     std::[A-Zu-z]*;\n@@ -459,6 +459,21 @@ GLIBCXX_3.4 {\n     # std::money_put\n     _ZNKSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n \n+    # std::time_get\n+    _ZNSt8time_get*;\n+    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[0-9]*;\n+    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE1[0-9]*;\n+\n+    # std::time_get_byname\n+    _ZNSt15time_get_byname*;\n+    \n+    # std::time_put\n+    _ZNSt8time_put*;\n+    _ZNKSt8time_put*;\n+\n+    # std::time_put_byname\n+    _ZNSt15time_put_byname*;\n+\n     # std::numeric_limits\n     _ZNSt14numeric_limitsI[^g]E*;\n \n@@ -1081,6 +1096,9 @@ GLIBCXX_3.4.14 {\n \n     _ZSt25__throw_bad_function_callv;\n \n+    # std::time_get::_M_extract_wday_or_month\n+    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE24_M_extract_wday_or_month*;\n+\n } GLIBCXX_3.4.13;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "6a55e0c531d28300d1419357fda397e3f6558a4e", "filename": "libstdc++-v3/doc/xml/manual/prerequisites.xml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprerequisites.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprerequisites.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprerequisites.xml?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -86,6 +86,8 @@ fr_FR@euro          ISO-8859-15\n is_IS               UTF-8\n it_IT               ISO-8859-1\n ja_JP.eucjp         EUC-JP\n+ru_RU.ISO-8859-5    ISO-8859-5\n+ru_RU.UTF-8         UTF-8\n se_NO.UTF-8         UTF-8\n ta_IN               UTF-8\n zh_TW               BIG5"}, {"sha": "525a53326a9c4af1f90f1cdb0aaf18352e1a481b", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -652,13 +652,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t     int __min, int __max, size_t __len,\n \t\t     ios_base& __io, ios_base::iostate& __err) const;\n \n-      // Extract day or month name, or any unique array of string\n-      // literals in a const _CharT* array.\n+      // Extract any unique array of string literals in a const _CharT* array.\n       iter_type\n       _M_extract_name(iter_type __beg, iter_type __end, int& __member,\n \t\t      const _CharT** __names, size_t __indexlen,\n \t\t      ios_base& __io, ios_base::iostate& __err) const;\n \n+      // Extract day or month name in a const _CharT* array.\n+      iter_type\n+      _M_extract_wday_or_month(iter_type __beg, iter_type __end, int& __member,\n+\t\t\t       const _CharT** __names, size_t __indexlen,\n+\t\t\t       ios_base& __io, ios_base::iostate& __err) const;\n+\n       // Extract on a component-by-component basis, via __format argument.\n       iter_type\n       _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,"}, {"sha": "73cd7470fb05b87e3940ce45f8c83f68101d519d", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 82, "deletions": 53, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -947,6 +947,77 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       return __beg;\n     }\n \n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    time_get<_CharT, _InIter>::\n+    _M_extract_wday_or_month(iter_type __beg, iter_type __end, int& __member,\n+\t\t\t     const _CharT** __names, size_t __indexlen,\n+\t\t\t     ios_base& __io, ios_base::iostate& __err) const\n+    {\n+      typedef char_traits<_CharT>\t\t__traits_type;\n+      const locale& __loc = __io._M_getloc();\n+      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n+\n+      int* __matches = static_cast<int*>(__builtin_alloca(2 * sizeof(int)\n+\t\t\t\t\t\t\t  * __indexlen));\n+      size_t __nmatches = 0;\n+      size_t* __matches_lengths = 0;\n+      size_t __pos = 0;\n+\n+      if (__beg != __end)\n+\t{\n+\t  const char_type __c = *__beg;\n+\t  for (size_t __i = 0; __i < 2 * __indexlen; ++__i)\n+\t    if (__c == __names[__i][0]\n+\t\t|| __c == __ctype.toupper(__names[__i][0]))\n+\t      __matches[__nmatches++] = __i;\n+\t}\n+\n+      if (__nmatches)\n+\t{\n+\t  ++__beg, ++__pos;\n+\n+\t  __matches_lengths\n+\t    = static_cast<size_t*>(__builtin_alloca(sizeof(size_t)\n+\t\t\t\t\t\t    * __nmatches));\n+\t  for (size_t __i = 0; __i < __nmatches; ++__i)\n+\t    __matches_lengths[__i]\n+\t      = __traits_type::length(__names[__matches[__i]]);\n+\t}\n+\n+      for (; __beg != __end; ++__beg, ++__pos)\n+\t{\n+\t  size_t __nskipped = 0;\n+\t  const char_type __c = *__beg;\n+\t  for (size_t __i = 0; __i < __nmatches;)\n+\t    {\n+\t      const char_type* __name = __names[__matches[__i]];\n+\t      if (__pos >= __matches_lengths[__i])\n+\t\t++__nskipped, ++__i;\n+\t      else if (!(__name[__pos] == __c))\n+\t\t{\n+\t\t  --__nmatches;\n+\t\t  __matches[__i] = __matches[__nmatches];\n+\t\t  __matches_lengths[__i] = __matches_lengths[__nmatches];\n+\t\t}\n+\t      else\n+\t\t++__i;\n+\t    }\n+\t  if (__nskipped == __nmatches)\n+\t    break;\n+\t}\n+\n+      if ((__nmatches == 1 && __matches_lengths[0] == __pos)\n+\t  || (__nmatches == 2 && (__matches_lengths[0] == __pos\n+\t\t\t\t  || __matches_lengths[1] == __pos)))\n+\t__member = (__matches[0] >= __indexlen\n+\t\t    ? __matches[0] - __indexlen : __matches[0]);\n+      else\n+\t__err |= ios_base::failbit;\n+\n+      return __beg;\n+    }\n+\n   template<typename _CharT, typename _InIter>\n     _InIter\n     time_get<_CharT, _InIter>::\n@@ -991,35 +1062,14 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       const locale& __loc = __io._M_getloc();\n       const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-      const char_type*  __days[7];\n+      const char_type* __days[14];\n       __tp._M_days_abbreviated(__days);\n+      __tp._M_days(__days + 7);\n       int __tmpwday;\n       ios_base::iostate __tmperr = ios_base::goodbit;\n-      __beg = _M_extract_name(__beg, __end, __tmpwday, __days, 7,\n-\t\t\t      __io, __tmperr);\n-\n-      // Check to see if non-abbreviated name exists, and extract.\n-      // NB: Assumes both _M_days and _M_days_abbreviated organized in\n-      // exact same order, first to last, such that the resulting\n-      // __days array with the same index points to a day, and that\n-      // day's abbreviated form.\n-      // NB: Also assumes that an abbreviated name is a subset of the name.\n-      if (!__tmperr && __beg != __end)\n-\t{\n-\t  size_t __pos = __traits_type::length(__days[__tmpwday]);\n-\t  __tp._M_days(__days);\n-\t  const char_type* __name = __days[__tmpwday];\n-\t  if (__name[__pos] == *__beg)\n-\t    {\n-\t      // Extract the rest of it.\n-\t      const size_t __len = __traits_type::length(__name);\n-\t      while (__pos < __len && __beg != __end\n-\t\t     && __name[__pos] == *__beg)\n-\t\t++__beg, ++__pos;\n-\t      if (__len != __pos)\n-\t\t__tmperr |= ios_base::failbit;\n-\t    }\n-\t}\n+\n+      __beg = _M_extract_wday_or_month(__beg, __end, __tmpwday, __days, 7,\n+\t\t\t\t       __io, __tmperr);\n       if (!__tmperr)\n \t__tm->tm_wday = __tmpwday;\n       else\n@@ -1040,35 +1090,14 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       const locale& __loc = __io._M_getloc();\n       const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-      const char_type*  __months[12];\n+      const char_type*  __months[24];\n       __tp._M_months_abbreviated(__months);\n+      __tp._M_months(__months + 12);\n       int __tmpmon;\n       ios_base::iostate __tmperr = ios_base::goodbit;\n-      __beg = _M_extract_name(__beg, __end, __tmpmon, __months, 12, \n-\t\t\t      __io, __tmperr);\n-\n-      // Check to see if non-abbreviated name exists, and extract.\n-      // NB: Assumes both _M_months and _M_months_abbreviated organized in\n-      // exact same order, first to last, such that the resulting\n-      // __months array with the same index points to a month, and that\n-      // month's abbreviated form.\n-      // NB: Also assumes that an abbreviated name is a subset of the name.\n-      if (!__tmperr && __beg != __end)\n-\t{\n-\t  size_t __pos = __traits_type::length(__months[__tmpmon]);\n-\t  __tp._M_months(__months);\n-\t  const char_type* __name = __months[__tmpmon];\n-\t  if (__name[__pos] == *__beg)\n-\t    {\n-\t      // Extract the rest of it.\n-\t      const size_t __len = __traits_type::length(__name);\n-\t      while (__pos < __len && __beg != __end\n-\t\t     && __name[__pos] == *__beg)\n-\t\t++__beg, ++__pos;\n-\t      if (__len != __pos)\n-\t\t__tmperr |= ios_base::failbit;\n-\t    }\n-\t}\n+\n+      __beg = _M_extract_wday_or_month(__beg, __end, __tmpmon, __months, 12,\n+\t\t\t\t       __io, __tmperr);\n       if (!__tmperr)\n \t__tm->tm_mon = __tmpmon;\n       else"}, {"sha": "e237dcccbe98f28c8c6b8d9f7a4e90988e731ba6", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/38081-1.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F38081-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F38081-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F38081-1.cc?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -0,0 +1,86 @@\n+// { dg-require-namedlocale \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/38081\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  // basic construction\n+  locale loc(\"ru_RU.ISO-8859-5\");\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  iss.imbue(loc);\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // iter_type \n+  // get_weekday(iter_type, iter_type, ios_base&, \n+  //             ios_base::iostate&, tm*) const\n+\n+  iss.str(\"\\xbf\\xdd\\xd4\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  memset(&time01, -1, sizeof(tm));\n+  errorstate = good;\n+  tim_get.get_weekday(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_wday == 1 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"\\xbf\\xde\\xdd\\xd5\\xd4\\xd5\\xdb\\xec\\xdd\\xd8\\xda\");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  memset(&time02, -1, sizeof(tm));\n+  errorstate = good;\n+  tim_get.get_weekday(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_wday == 1 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"\\xbf\\xdd\\xd4\\xd5\\xd4\\xd5\\xdb\\xec\\xdd\\xd8\\xda\");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  memset(&time03, -1, sizeof(tm));\n+  errorstate = good;\n+  iterator_type ret = tim_get.get_weekday(is_it03, end, iss,\n+\t\t\t\t\t  errorstate, &time03);\n+  VERIFY( time03.tm_wday == 1 );\n+  VERIFY( errorstate == ios_base::goodbit );\n+  VERIFY( *ret == '\\xd5' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6f8806895df44d9cb40aa9d0e0d74556b4d33201", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/38081-2.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F38081-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F38081-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F38081-2.cc?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -0,0 +1,98 @@\n+// 2010-01-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  // basic construction\n+  locale loc(\"ru_RU.UTF8\");\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  iss.imbue(loc);\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // iter_type \n+  // get_weekday(iter_type, iter_type, ios_base&, \n+  //             ios_base::iostate&, tm*) const\n+\n+  const char* awdays[7] = { \"\\u0412\\u0441\\u043A\",\n+\t\t\t    \"\\u041F\\u043D\\u0434\",\n+\t\t\t    \"\\u0412\\u0442\\u0440\",\n+\t\t\t    \"\\u0421\\u0440\\u0434\",\n+\t\t\t    \"\\u0427\\u0442\\u0432\",\n+\t\t\t    \"\\u041F\\u0442\\u043D\",\n+\t\t\t    \"\\u0421\\u0431\\u0442\" };\n+\n+  for (unsigned i = 0; i < 7; ++i)\n+    {\n+      iss.str(awdays[i]);\n+      iterator_type is_it01(iss);\n+      tm time01;\n+      memset(&time01, -1, sizeof(tm));\n+      errorstate = good;\n+      tim_get.get_weekday(is_it01, end, iss, errorstate, &time01);\n+      VERIFY( time01.tm_wday == i );\n+      VERIFY( errorstate == ios_base::eofbit );\n+    }\n+\n+  const char* wdays[7] = { \"\\u0412\\u043E\\u0441\\u043A\\u0440\\u0435\"\n+\t\t\t   \"\\u0441\\u0435\\u043D\\u044C\\u0435\",\n+\t\t\t   \"\\u041F\\u043E\\u043D\\u0435\\u0434\\u0435\"\n+\t\t\t   \"\\u043B\\u044C\\u043D\\u0438\\u043A\",\n+\t\t\t   \"\\u0412\\u0442\\u043E\\u0440\\u043D\\u0438\\u043A\",\n+\t\t\t   \"\\u0421\\u0440\\u0435\\u0434\\u0430\",\n+\t\t\t   \"\\u0427\\u0435\\u0442\\u0432\\u0435\\u0440\\u0433\",\n+\t\t\t   \"\\u041F\\u044F\\u0442\\u043D\\u0438\\u0446\\u0430\",\n+\t\t\t   \"\\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u0430\" };\n+\n+  for (unsigned i = 0; i < 7; ++i)\n+    {\n+      iss.str(wdays[i]);\n+      iterator_type is_it01(iss);\n+      tm time01;\n+      memset(&time01, -1, sizeof(tm));\n+      errorstate = good;\n+      tim_get.get_weekday(is_it01, end, iss, errorstate, &time01);\n+      VERIFY( time01.tm_wday == i );\n+      VERIFY( errorstate == ios_base::eofbit );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "09cae6d8077693ec5dc4ae78521ad8699555dd2d", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb4377005f9bd117fee3155c9ece00f4d5b27/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=ac2bb4377005f9bd117fee3155c9ece00f4d5b27", "patch": "@@ -1,6 +1,6 @@\n # libstdc++ \"tool init file\" for DejaGNU\n \n-# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n # Free Software Foundation, Inc.\n #\n # This program is free software; you can redistribute it and/or modify\n@@ -883,6 +883,8 @@ proc check_v3_target_namedlocale { } {\n \tputs $f \"     locale(\\\"is_IS.UTF-8\\\");\"\n \tputs $f \"     locale(\\\"it_IT\\\");\"\n \tputs $f \"     locale(\\\"ja_JP.eucjp\\\");\"\n+\tputs $f \"     locale(\\\"ru_RU.ISO-8859-5\\\");\"\n+\tputs $f \"     locale(\\\"ru_RU.UTF-8\\\");\"\n \tputs $f \"     locale(\\\"se_NO.UTF-8\\\");\"\n \tputs $f \"     locale(\\\"ta_IN\\\");\"\n \tputs $f \"     locale(\\\"zh_TW\\\");\""}]}