{"sha": "7fe43755428bb289b9d52510973feb3ced77e0ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlNDM3NTU0MjhiYjI4OWI5ZDUyNTEwOTczZmViM2NlZDc3ZTBhZQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-06-29T12:32:08Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-06-29T12:32:08Z"}, "message": "[Testsuite] Selectors and options directives for ARM VFP FP16 support.\n\ngcc/\n\t* doc/sourcebuild.texi (Effective-Target keywords): Add entries\n\tfor arm_fp16_ok and arm_fp16_hw.\n\t(Add Options): Add entries for arm_fp16, arm_fp16_ieee and\n\tarm_fp16_alternative.\n\ntestsuite/\n\t* lib/target-supports.exp (add_options_for arm_fp16): Reword\n\tcomment.\n\t(add_options_for_arm_fp16_ieee): New.\n\t(add_options_for_arm_fp16_alternative): New.\n\t(effective_target_arm_fp16_ok_nocache): Add to comment.  Fix a\n\tlong-line.\n\t(effective_target_arm_fp16_hw): New.\n\nFrom-SVN: r237847", "tree": {"sha": "781640718bb1bc4327eefe38e013dab9a4946865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781640718bb1bc4327eefe38e013dab9a4946865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fe43755428bb289b9d52510973feb3ced77e0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe43755428bb289b9d52510973feb3ced77e0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe43755428bb289b9d52510973feb3ced77e0ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe43755428bb289b9d52510973feb3ced77e0ae/comments", "author": null, "committer": null, "parents": [{"sha": "264d951ae8c99ea72633487dc3404e8d2a4a02d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264d951ae8c99ea72633487dc3404e8d2a4a02d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264d951ae8c99ea72633487dc3404e8d2a4a02d8"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "cccf296932d18e6f14a8eeba8dfd61b6f6ea6db4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fe43755428bb289b9d52510973feb3ced77e0ae", "patch": "@@ -1,3 +1,10 @@\n+2016-06-29  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* doc/sourcebuild.texi (Effective-Target keywords): Add entries\n+\tfor arm_fp16_ok and arm_fp16_hw.\n+\t(Add Options): Add entries for arm_fp16, arm_fp16_ieee and\n+\tarm_fp16_alternative.\n+\n 2016-06-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR tree-optimization/71655"}, {"sha": "23d3c3f0f547274e2d281ac5513a3509962062cc", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=7fe43755428bb289b9d52510973feb3ced77e0ae", "patch": "@@ -1555,6 +1555,16 @@ options.  Some multilibs may be incompatible with these options.\n ARM Target supports @code{-mfpu=neon-vfpv4 -mfloat-abi=softfp} or compatible\n options.  Some multilibs may be incompatible with these options.\n \n+@item arm_fp16_ok\n+@anchor{arm_fp16_ok}\n+Target supports options to generate VFP half-precision floating-point\n+instructions.  Some multilibs may be incompatible with these\n+options.  This test is valid for ARM only.\n+\n+@item arm_fp16_hw\n+Target supports executing VFP half-precision floating-point\n+instructions.  This test is valid for ARM only.\n+\n @item arm_neon_fp16_ok\n @anchor{arm_neon_fp16_ok}\n ARM Target supports @code{-mfpu=neon-fp16 -mfloat-abi=softfp} or compatible\n@@ -2075,6 +2085,28 @@ NEON support.  Only ARM targets support this feature, and only then\n in certain modes; see the @ref{arm_neon_ok,,arm_neon_ok effective target\n keyword}.\n \n+@item arm_fp16\n+VFP half-precision floating point support.  This does not select the\n+FP16 format; for that, use @ref{arm_fp16_ieee,,arm_fp16_ieee} or\n+@ref{arm_fp16_alternative,,arm_fp16_alternative} instead.  This\n+feature is only supported by ARM targets and then only in certain\n+modes; see the @ref{arm_fp16_ok,,arm_fp16_ok effective target\n+keyword}.\n+\n+@item arm_fp16_ieee\n+@anchor{arm_fp16_ieee}\n+ARM IEEE 754-2008 format VFP half-precision floating point support.\n+This feature is only supported by ARM targets and then only in certain\n+modes; see the @ref{arm_fp16_ok,,arm_fp16_ok effective target\n+keyword}.\n+\n+@item arm_fp16_alternative\n+@anchor{arm_fp16_alternative}\n+ARM Alternative format VFP half-precision floating point support.\n+This feature is only supported by ARM targets and then only in certain\n+modes; see the @ref{arm_fp16_ok,,arm_fp16_ok effective target\n+keyword}.\n+\n @item arm_neon_fp16\n NEON and half-precision floating point support.  Only ARM targets\n support this feature, and only then in certain modes; see"}, {"sha": "c51c1bcda58301112a994873db6878ff2844a446", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fe43755428bb289b9d52510973feb3ced77e0ae", "patch": "@@ -1,3 +1,13 @@\n+2016-06-29  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_fp16): Reword\n+\tcomment.\n+\t(add_options_for_arm_fp16_ieee): New.\n+\t(add_options_for_arm_fp16_alternative): New.\n+\t(effective_target_arm_fp16_ok_nocache): Add to comment.  Fix a\n+\tlong-line.\n+\t(effective_target_arm_fp16_hw): New.\n+\n 2016-06-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR tree-optimization/71655"}, {"sha": "05ad5c1775cbd31816a88a1658fa652ad2d0f2ec", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe43755428bb289b9d52510973feb3ced77e0ae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7fe43755428bb289b9d52510973feb3ced77e0ae", "patch": "@@ -3184,9 +3184,9 @@ proc check_effective_target_arm_neonv2_ok { } {\n \t\tcheck_effective_target_arm_neonv2_ok_nocache]\n }\n \n-# Add the options needed for NEON.  We need either -mfloat-abi=softfp\n-# or -mfloat-abi=hard, but if one is already specified by the\n-# multilib, use it.\n+# Add the options needed for VFP FP16 support.  We need either\n+# -mfloat-abi=softfp or -mfloat-abi=hard.  If one is already specified by\n+# the multilib, use it.\n \n proc add_options_for_arm_fp16 { flags } {\n     if { ! [check_effective_target_arm_fp16_ok] } {\n@@ -3196,17 +3196,43 @@ proc add_options_for_arm_fp16 { flags } {\n     return \"$flags $et_arm_fp16_flags\"\n }\n \n+# Add the options needed to enable support for IEEE format\n+# half-precision support.  This is valid for ARM targets.\n+\n+proc add_options_for_arm_fp16_ieee { flags } {\n+    if { ! [check_effective_target_arm_fp16_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_fp16_flags\n+    return \"$flags $et_arm_fp16_flags -mfp16-format=ieee\"\n+}\n+\n+# Add the options needed to enable support for ARM Alternative format\n+# half-precision support.  This is valid for ARM targets.\n+\n+proc add_options_for_arm_fp16_alternative { flags } {\n+    if { ! [check_effective_target_arm_fp16_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_fp16_flags\n+    return \"$flags $et_arm_fp16_flags -mfp16-format=alternative\"\n+}\n+\n # Return 1 if this is an ARM target that can support a VFP fp16 variant.\n # Skip multilibs that are incompatible with these options and set\n-# et_arm_fp16_flags to the best options to add.\n+# et_arm_fp16_flags to the best options to add.  This test is valid for\n+# ARM only.\n \n proc check_effective_target_arm_fp16_ok_nocache { } {\n     global et_arm_fp16_flags\n     set et_arm_fp16_flags \"\"\n     if { ! [check_effective_target_arm32] } {\n \treturn 0;\n     }\n-    if [check-flags [list \"\" { *-*-* } { \"-mfpu=*\" } { \"-mfpu=*fp16*\" \"-mfpu=*fpv[4-9]*\" \"-mfpu=*fpv[1-9][0-9]*\" } ]] {\n+    if [check-flags \\\n+\t    [list \"\" { *-*-* } { \"-mfpu=*\" } \\\n+\t\t { \"-mfpu=*fp16*\" \"-mfpu=*fpv[4-9]*\" \\\n+\t\t       \"-mfpu=*fpv[1-9][0-9]*\" \"-mfpu=*fp-armv8*\" } ]] {\n \t# Multilib flags would override -mfpu.\n \treturn 0\n     }\n@@ -3242,6 +3268,28 @@ proc check_effective_target_arm_fp16_ok { } {\n \t\tcheck_effective_target_arm_fp16_ok_nocache]\n }\n \n+# Return 1 if the target supports executing VFP FP16 instructions, 0\n+# otherwise.  This test is valid for ARM only.\n+\n+proc check_effective_target_arm_fp16_hw { } {\n+    if {! [check_effective_target_arm_fp16_ok] } {\n+\treturn 0\n+    }\n+    global et_arm_fp16_flags\n+    check_runtime_nocache arm_fp16_hw {\n+\tint\n+\tmain (int argc, char **argv)\n+\t{\n+\t  __fp16 a = 1.0;\n+\t  float r;\n+\t  asm (\"vcvtb.f32.f16 %0, %1\"\n+\t       : \"=w\" (r) : \"w\" (a)\n+\t       : /* No clobbers.  */);\n+\t  return (r == 1.0) ? 0 : 1;\n+\t}\n+    } \"$et_arm_fp16_flags -mfp16-format=ieee\"\n+}\n+\n # Creates a series of routines that return 1 if the given architecture\n # can be selected and a routine to give the flags to select that architecture\n # Note: Extra flags may be added to disable options from newer compilers"}]}