{"sha": "2d444001636edc9408e8e847585dc6a9ef1e279b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0NDQwMDE2MzZlZGM5NDA4ZThlODQ3NTg1ZGM2YTllZjFlMjc5Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-31T13:11:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-31T13:11:19Z"}, "message": "(expand_expr, COND_EXPR case): Don't use original target as a temp if it's a volatile mem ref.\n\n(expand_expr, COND_EXPR case): Don't use original target as a temp if\nit's a volatile mem ref.  Finish previous patch (don't expand \"X ? A &\n1 : A\" as \"A & (X != 0)\").\n\nFrom-SVN: r8369", "tree": {"sha": "12f5160b14e154cc323702337d69dd6e1d190456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12f5160b14e154cc323702337d69dd6e1d190456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d444001636edc9408e8e847585dc6a9ef1e279b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d444001636edc9408e8e847585dc6a9ef1e279b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d444001636edc9408e8e847585dc6a9ef1e279b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d444001636edc9408e8e847585dc6a9ef1e279b/comments", "author": null, "committer": null, "parents": [{"sha": "eb11192f9f32c53936e354837ccf4cad7e7c69b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb11192f9f32c53936e354837ccf4cad7e7c69b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb11192f9f32c53936e354837ccf4cad7e7c69b0"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "de656b63e178f388d3d281b0e6e7ab2c43fb579f", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d444001636edc9408e8e847585dc6a9ef1e279b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d444001636edc9408e8e847585dc6a9ef1e279b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2d444001636edc9408e8e847585dc6a9ef1e279b", "patch": "@@ -5534,7 +5534,9 @@ expand_expr (exp, target, tmode, modifier)\n \t  temp = 0;\n \telse if (original_target\n \t\t && safe_from_p (original_target, TREE_OPERAND (exp, 0))\n-\t\t && GET_MODE (original_target) == mode)\n+\t\t && GET_MODE (original_target) == mode\n+\t\t && ! (GET_CODE (original_target) == MEM\n+\t\t       && MEM_VOLATILE_P (original_target)))\n \t  temp = original_target;\n \telse if (mode == BLKmode)\n \t  {\n@@ -5590,8 +5592,7 @@ expand_expr (exp, target, tmode, modifier)\n \t    optab boptab = (TREE_CODE (binary_op) == PLUS_EXPR ? add_optab\n \t\t\t    : TREE_CODE (binary_op) == MINUS_EXPR ? sub_optab\n \t\t\t    : TREE_CODE (binary_op) == BIT_IOR_EXPR ? ior_optab\n-\t\t\t    : TREE_CODE (binary_op) == BIT_XOR_EXPR ? xor_optab\n-\t\t\t    : and_optab);\n+\t\t\t    : xor_optab);\n \n \t    /* If we had X ? A : A + 1, do this as A + (X == 0).\n "}]}