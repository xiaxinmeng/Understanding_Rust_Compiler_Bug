{"sha": "d5f261c135df1c044af3d998631066551868071f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmMjYxYzEzNWRmMWMwNDRhZjNkOTk4NjMxMDY2NTUxODY4MDcxZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-06-17T21:51:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-06-17T21:51:34Z"}, "message": "[multiple changes]\n\n2005-06-17  Paolo Carlini  <pcarlini@suse.de>\n\n        Port from libstdcxx_so_7-branch:\n\t2005-01-12  Christopher Jefferson <chris@bubblescope.net>\n\n\t* include/bits/stl_function.h (mem_fun_t, const_mem_fun_t,\n\tmem_fun_ref_t, const_mem_fun_ref_t, mem_fun1_t, const_mem_fun1_t,\n\tmem_fun1_ref_t, const_mem_fun1_ref_t): Remove overloads for void\n\treturn type, just an old HP/SGI workaround.\n\t* testsuite/20_util/functional/binders.cc: Move to...\n\t* testsuite/20_util/functional/binders/3113.cc: ...here.\n\t* testsuite/20_util/functional/binders/1.cc: New.\n\nFrom-SVN: r101139", "tree": {"sha": "1172ff2132dd394861607c46753c2e33dc8f1663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1172ff2132dd394861607c46753c2e33dc8f1663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5f261c135df1c044af3d998631066551868071f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f261c135df1c044af3d998631066551868071f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f261c135df1c044af3d998631066551868071f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f261c135df1c044af3d998631066551868071f/comments", "author": null, "committer": null, "parents": [{"sha": "1651e6408e11dec7af0dd3bff41473e5a7e478d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1651e6408e11dec7af0dd3bff41473e5a7e478d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1651e6408e11dec7af0dd3bff41473e5a7e478d1"}], "stats": {"total": 260, "additions": 119, "deletions": 141}, "files": [{"sha": "120ca4c5fb764fff7be52ad1b2001b1d33c817f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d5f261c135df1c044af3d998631066551868071f", "patch": "@@ -1,3 +1,16 @@\n+2005-06-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+        Port from libstdcxx_so_7-branch:\n+\t2005-01-12  Christopher Jefferson <chris@bubblescope.net>\n+\n+\t* include/bits/stl_function.h (mem_fun_t, const_mem_fun_t,\n+\tmem_fun_ref_t, const_mem_fun_ref_t, mem_fun1_t, const_mem_fun1_t,\n+\tmem_fun1_ref_t, const_mem_fun1_ref_t): Remove overloads for void\n+\treturn type, just an old HP/SGI workaround.\n+\t* testsuite/20_util/functional/binders.cc: Move to...\n+\t* testsuite/20_util/functional/binders/3113.cc: ...here.\n+\t* testsuite/20_util/functional/binders/1.cc: New.\n+\n 2005-06-17  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/21_strings/gotw29a.txt: Update code to corrected version."}, {"sha": "a6c60dc6342b1312a343d7fe25a89a68d9d63822", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 2, "deletions": 141, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=d5f261c135df1c044af3d998631066551868071f", "patch": "@@ -566,19 +566,11 @@ namespace std\n \n   // 20.3.8 adaptors pointers members\n   /** @defgroup s20_3_8_memadaptors Adaptors for pointers to members\n-   *  There are a total of 16 = 2^4 function objects in this family.\n+   *  There are a total of 8 = 2^3 function objects in this family.\n    *   (1) Member functions taking no arguments vs member functions taking\n    *        one argument.\n    *   (2) Call through pointer vs call through reference.\n-   *   (3) Member function with void return type vs member function with\n-   *       non-void return type.\n-   *   (4) Const vs non-const member function.\n-   *\n-   *  Note that choice (3) is nothing more than a workaround: according\n-   *   to the draft, compilers should handle void and non-void the same way.\n-   *   This feature is not yet widely implemented, though.  You can only use\n-   *   member functions returning void if your compiler supports partial\n-   *   specialization.\n+   *   (3) Const vs non-const member function.\n    *\n    *  All of this complexity is in the function objects themselves.  You can\n    *   ignore it by using the helper function mem_fun and mem_fun_ref,\n@@ -714,137 +706,6 @@ namespace std\n       _Ret (_Tp::*_M_f)(_Arg) const;\n     };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp>\n-    class mem_fun_t<void, _Tp> : public unary_function<_Tp*, void>\n-    {\n-    public:\n-      explicit\n-      mem_fun_t(void (_Tp::*__pf)())\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(_Tp* __p) const\n-      { (__p->*_M_f)(); }\n-    private:\n-      void (_Tp::*_M_f)();\n-    };\n-\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp>\n-    class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*, void>\n-    {\n-    public:\n-      explicit\n-      const_mem_fun_t(void (_Tp::*__pf)() const)\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(const _Tp* __p) const\n-      { (__p->*_M_f)(); }\n-    private:\n-      void (_Tp::*_M_f)() const;\n-    };\n-\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp>\n-    class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp, void>\n-    {\n-    public:\n-      explicit\n-      mem_fun_ref_t(void (_Tp::*__pf)())\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(_Tp& __r) const\n-      { (__r.*_M_f)(); }\n-    private:\n-      void (_Tp::*_M_f)();\n-    };\n-\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp>\n-    class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp, void>\n-    {\n-    public:\n-      explicit\n-      const_mem_fun_ref_t(void (_Tp::*__pf)() const)\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(const _Tp& __r) const\n-      { (__r.*_M_f)(); }\n-    private:\n-      void (_Tp::*_M_f)() const;\n-    };\n-\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp, class _Arg>\n-    class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*, _Arg, void>\n-    {\n-    public:\n-      explicit\n-      mem_fun1_t(void (_Tp::*__pf)(_Arg))\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(_Tp* __p, _Arg __x) const\n-      { (__p->*_M_f)(__x); }\n-    private:\n-      void (_Tp::*_M_f)(_Arg);\n-    };\n-\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp, class _Arg>\n-    class const_mem_fun1_t<void, _Tp, _Arg>\n-    : public binary_function<const _Tp*, _Arg, void>\n-    {\n-    public:\n-      explicit\n-      const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const)\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(const _Tp* __p, _Arg __x) const\n-      { (__p->*_M_f)(__x); }\n-    private:\n-      void (_Tp::*_M_f)(_Arg) const;\n-    };\n-\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp, class _Arg>\n-    class mem_fun1_ref_t<void, _Tp, _Arg>\n-    : public binary_function<_Tp, _Arg, void>\n-    {\n-    public:\n-      explicit\n-      mem_fun1_ref_t(void (_Tp::*__pf)(_Arg))\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(_Tp& __r, _Arg __x) const\n-      { (__r.*_M_f)(__x); }\n-    private:\n-      void (_Tp::*_M_f)(_Arg);\n-    };\n-\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n-  template <class _Tp, class _Arg>\n-    class const_mem_fun1_ref_t<void, _Tp, _Arg>\n-    : public binary_function<_Tp, _Arg, void>\n-    {\n-    public:\n-      explicit\n-      const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const)\n-      : _M_f(__pf) {}\n-\n-      void\n-      operator()(const _Tp& __r, _Arg __x) const\n-      { (__r.*_M_f)(__x); }\n-    private:\n-      void (_Tp::*_M_f)(_Arg) const;\n-    };\n-\n   // Mem_fun adaptor helper functions.  There are only two:\n   // mem_fun and mem_fun_ref.\n   template <class _Ret, class _Tp>"}, {"sha": "e8af6533ec3e0d652b7b0517196eedc1e4678ac9", "filename": "libstdc++-v3/testsuite/20_util/functional/binders/1.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F1.cc?ref=d5f261c135df1c044af3d998631066551868071f", "patch": "@@ -0,0 +1,104 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.3.6 Binders\n+\n+// { dg-do compile }\n+\n+#include <functional>\n+using namespace std;\n+\n+struct s\n+{\n+  void f_void_int_const(int) const {}\n+  void f_void_int(int) {}\n+  int f_int_int_const(int) const {}\n+  int f_int_int(int) {}\n+  void f_void_void_const() const {}\n+  void f_void_void() {}\n+  int f_int_void_const() const {}\n+  int f_int_void() {}\n+};\n+\n+void test01(s& a)\n+{ \n+  mem_fun_t<void, s> p1(&s::f_void_void);\n+  mem_fun_t<int, s> p2(&s::f_int_void);\n+  p1(&a);\n+  p2(&a);\n+  mem_fun1_t<void, s, int> q1(&s::f_void_int);\n+  mem_fun1_t<int, s, int> q2(&s::f_int_int);\n+  q1(&a,0);\n+  q2(&a,0);\n+\n+  (mem_fun(&s::f_void_void))(&a);\n+  (mem_fun(&s::f_void_int))(&a,0);\n+  (mem_fun(&s::f_int_void))(&a);\n+  (mem_fun(&s::f_int_int))(&a,0);\n+\n+  mem_fun_ref_t<void, s> ref1(&s::f_void_void);\n+  mem_fun_ref_t<int, s> ref2(&s::f_int_void);\n+\n+  ref1(a);\n+  ref2(a);\n+\n+  mem_fun1_ref_t<void, s, int> ref3(&s::f_void_int);\n+  mem_fun1_ref_t<int, s, int> ref4(&s::f_int_int); \n+\n+  ref3(a,0);\n+  ref4(a,0);\n+\n+  (mem_fun_ref(&s::f_void_void))(a);\n+  (mem_fun_ref(&s::f_void_int))(a, 0);\n+  (mem_fun_ref(&s::f_int_void))(a);\n+  (mem_fun_ref(&s::f_int_int))(a, 0);\n+}\n+\n+void test02(const s& a)\n+{\n+  const_mem_fun_t<void, s> p1(&s::f_void_void_const);\n+  const_mem_fun_t<int, s> p2(&s::f_int_void_const);\n+  p1(&a);\n+  p2(&a);\n+  const_mem_fun1_t<void, s, int> q1(&s::f_void_int_const);\n+  const_mem_fun1_t<int, s, int> q2(&s::f_int_int_const);\n+  q1(&a,0);\n+  q2(&a,0);\n+\n+  (mem_fun(&s::f_void_void_const))(&a);\n+  (mem_fun(&s::f_void_int_const))(&a, 0);\n+  (mem_fun(&s::f_int_void_const))(&a);\n+  (mem_fun(&s::f_int_int_const))(&a, 0);\n+\n+  const_mem_fun_ref_t<void, s> ref1(&s::f_void_void_const);\n+  const_mem_fun_ref_t<int, s> ref2(&s::f_int_void_const);\n+\n+  ref1(a);\n+  ref2(a);\n+\n+  const_mem_fun1_ref_t<void, s, int> ref3(&s::f_void_int_const);\n+  const_mem_fun1_ref_t<int, s, int> ref4(&s::f_int_int_const); \n+\n+  ref3(a,0);\n+  ref4(a,0);\n+\n+  (mem_fun_ref(&s::f_void_void_const))(a);\n+  (mem_fun_ref(&s::f_void_int_const))(a, 0);\n+  (mem_fun_ref(&s::f_int_void_const))(a);\n+  (mem_fun_ref(&s::f_int_int_const))(a, 0);\n+}"}, {"sha": "dfcd41957d59abddfb38e3cb7cd744d559c98ad7", "filename": "libstdc++-v3/testsuite/20_util/functional/binders/3113.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F3113.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5f261c135df1c044af3d998631066551868071f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F3113.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F3113.cc?ref=d5f261c135df1c044af3d998631066551868071f", "previous_filename": "libstdc++-v3/testsuite/20_util/functional/binders.cc"}]}