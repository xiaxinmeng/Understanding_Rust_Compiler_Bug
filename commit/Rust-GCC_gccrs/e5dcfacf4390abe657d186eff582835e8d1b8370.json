{"sha": "e5dcfacf4390abe657d186eff582835e8d1b8370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkY2ZhY2Y0MzkwYWJlNjU3ZDE4NmVmZjU4MjgzNWU4ZDFiODM3MA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-01-13T14:46:25Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-01-13T14:46:25Z"}, "message": "re PR libstdc++/78389 (list::merge and list::sort are not exception safe)\n\nPR libstdc++/78389\n* include/bits/list.tcc (merge(list&&)):\nAdjust list sizes if the comparator throws.\n(merge(list&&, _StrictWeakOrdering)): Likewise.\n(sort()): Splice elements back from the scratch buffers\nif the comparator throws.\n(sort(_StrictWeakOrdering)): Likewise.\n* testsuite/23_containers/list/operations/78389.cc: New.\n\nFrom-SVN: r244439", "tree": {"sha": "0b93988d916d1c7b514a4937985f463ef43f4cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b93988d916d1c7b514a4937985f463ef43f4cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5dcfacf4390abe657d186eff582835e8d1b8370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5dcfacf4390abe657d186eff582835e8d1b8370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5dcfacf4390abe657d186eff582835e8d1b8370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5dcfacf4390abe657d186eff582835e8d1b8370/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45cac8baeb358b76c7255841543190cf3eeff2be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45cac8baeb358b76c7255841543190cf3eeff2be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45cac8baeb358b76c7255841543190cf3eeff2be"}], "stats": {"total": 255, "additions": 195, "deletions": 60}, "files": [{"sha": "76d86fbf705d6e6b4e7651d95eedd4b98e72f380", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dcfacf4390abe657d186eff582835e8d1b8370/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dcfacf4390abe657d186eff582835e8d1b8370/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e5dcfacf4390abe657d186eff582835e8d1b8370", "patch": "@@ -1,3 +1,14 @@\n+2017-01-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/78389\n+\t* include/bits/list.tcc (merge(list&&)):\n+\tAdjust list sizes if the comparator throws.\n+\t(merge(list&&, _StrictWeakOrdering)): Likewise.\n+\t(sort()): Splice elements back from the scratch buffers\n+\tif the comparator throws.\n+\t(sort(_StrictWeakOrdering)): Likewise.\n+\t* testsuite/23_containers/list/operations/78389.cc: New.\n+\n 2017-01-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: Mark"}, {"sha": "5be49a839972b4e780b9fb55ebd6d8d68db0d2fc", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 99, "deletions": 60, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dcfacf4390abe657d186eff582835e8d1b8370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dcfacf4390abe657d186eff582835e8d1b8370/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=e5dcfacf4390abe657d186eff582835e8d1b8370", "patch": "@@ -380,26 +380,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // 300. list::merge() specification incomplete\n       if (this != std::__addressof(__x))\n \t{\n-\t  _M_check_equal_allocators(__x); \n+\t  _M_check_equal_allocators(__x);\n \n \t  iterator __first1 = begin();\n \t  iterator __last1 = end();\n \t  iterator __first2 = __x.begin();\n \t  iterator __last2 = __x.end();\n-\t  while (__first1 != __last1 && __first2 != __last2)\n-\t    if (*__first2 < *__first1)\n-\t      {\n-\t\titerator __next = __first2;\n-\t\t_M_transfer(__first1, __first2, ++__next);\n-\t\t__first2 = __next;\n-\t      }\n-\t    else\n-\t      ++__first1;\n-\t  if (__first2 != __last2)\n-\t    _M_transfer(__last1, __first2, __last2);\n+\t  const size_t __orig_size = __x.size();\n+\t  __try {\n+\t    while (__first1 != __last1 && __first2 != __last2)\n+\t      if (*__first2 < *__first1)\n+\t\t{\n+\t\t  iterator __next = __first2;\n+\t\t  _M_transfer(__first1, __first2, ++__next);\n+\t\t  __first2 = __next;\n+\t\t}\n+\t      else\n+\t\t++__first1;\n+\t    if (__first2 != __last2)\n+\t      _M_transfer(__last1, __first2, __last2);\n \n-\t  this->_M_inc_size(__x._M_get_size());\n-\t  __x._M_set_size(0);\n+\t    this->_M_inc_size(__x._M_get_size());\n+\t    __x._M_set_size(0);\n+\t  }\n+\t  __catch(...)\n+\t    {\n+\t      size_t __dist = std::distance(__first2, __last2);\n+\t      this->_M_inc_size(__dist);\n+\t      __x._M_set_size(__orig_size - __dist);\n+\t      __throw_exception_again;\n+\t    }\n \t}\n     }\n \n@@ -423,20 +433,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    iterator __last1 = end();\n \t    iterator __first2 = __x.begin();\n \t    iterator __last2 = __x.end();\n-\t    while (__first1 != __last1 && __first2 != __last2)\n-\t      if (__comp(*__first2, *__first1))\n-\t\t{\n-\t\t  iterator __next = __first2;\n-\t\t  _M_transfer(__first1, __first2, ++__next);\n-\t\t  __first2 = __next;\n-\t\t}\n-\t      else\n-\t\t++__first1;\n-\t    if (__first2 != __last2)\n-\t      _M_transfer(__last1, __first2, __last2);\n-\n-\t    this->_M_inc_size(__x._M_get_size());\n-\t    __x._M_set_size(0);\n+\t    const size_t __orig_size = __x.size();\n+\t    __try\n+\t      {\n+\t\twhile (__first1 != __last1 && __first2 != __last2)\n+\t\t  if (__comp(*__first2, *__first1))\n+\t\t    {\n+\t\t      iterator __next = __first2;\n+\t\t      _M_transfer(__first1, __first2, ++__next);\n+\t\t      __first2 = __next;\n+\t\t    }\n+\t\t  else\n+\t\t    ++__first1;\n+\t\tif (__first2 != __last2)\n+\t\t  _M_transfer(__last1, __first2, __last2);\n+\n+\t\tthis->_M_inc_size(__x._M_get_size());\n+\t\t__x._M_set_size(0);\n+\t      }\n+\t    __catch(...)\n+\t      {\n+\t\tsize_t __dist = std::distance(__first2, __last2);\n+\t\tthis->_M_inc_size(__dist);\n+\t\t__x._M_set_size(__orig_size - __dist);\n+\t\t__throw_exception_again;\n+\t      }\n \t  }\n       }\n \n@@ -453,27 +474,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         list __tmp[64];\n         list * __fill = __tmp;\n         list * __counter;\n-\n-        do\n+\t__try\n \t  {\n-\t    __carry.splice(__carry.begin(), *this, begin());\n-\n-\t    for(__counter = __tmp;\n-\t\t__counter != __fill && !__counter->empty();\n-\t\t++__counter)\n+\t    do\n \t      {\n-\t\t__counter->merge(__carry);\n+\t\t__carry.splice(__carry.begin(), *this, begin());\n+\n+\t\tfor(__counter = __tmp;\n+\t\t    __counter != __fill && !__counter->empty();\n+\t\t    ++__counter)\n+\t\t  {\n+\t\t    __counter->merge(__carry);\n+\t\t    __carry.swap(*__counter);\n+\t\t  }\n \t\t__carry.swap(*__counter);\n+\t\tif (__counter == __fill)\n+\t\t  ++__fill;\n \t      }\n-\t    __carry.swap(*__counter);\n-\t    if (__counter == __fill)\n-\t      ++__fill;\n-\t  }\n-\twhile ( !empty() );\n+\t    while ( !empty() );\n \n-        for (__counter = __tmp + 1; __counter != __fill; ++__counter)\n-          __counter->merge(*(__counter - 1));\n-        swap( *(__fill - 1) );\n+\t    for (__counter = __tmp + 1; __counter != __fill; ++__counter)\n+\t      __counter->merge(*(__counter - 1));\n+\t    swap( *(__fill - 1) );\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    this->splice(this->end(), __carry);\n+\t    for (int i = 0; i < sizeof(__tmp)/sizeof(__tmp[0]); ++i)\n+\t      this->splice(this->end(), __tmp[i]);\n+\t    __throw_exception_again;\n+\t  }\n       }\n     }\n \n@@ -530,27 +560,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    list __tmp[64];\n \t    list * __fill = __tmp;\n \t    list * __counter;\n-\n-\t    do\n+\t    __try\n \t      {\n-\t\t__carry.splice(__carry.begin(), *this, begin());\n-\n-\t\tfor(__counter = __tmp;\n-\t\t    __counter != __fill && !__counter->empty();\n-\t\t    ++__counter)\n+\t\tdo\n \t\t  {\n-\t\t    __counter->merge(__carry, __comp);\n+\t\t    __carry.splice(__carry.begin(), *this, begin());\n+\n+\t\t    for(__counter = __tmp;\n+\t\t\t__counter != __fill && !__counter->empty();\n+\t\t\t++__counter)\n+\t\t      {\n+\t\t\t__counter->merge(__carry, __comp);\n+\t\t\t__carry.swap(*__counter);\n+\t\t      }\n \t\t    __carry.swap(*__counter);\n+\t\t    if (__counter == __fill)\n+\t\t      ++__fill;\n \t\t  }\n-\t\t__carry.swap(*__counter);\n-\t\tif (__counter == __fill)\n-\t\t  ++__fill;\n-\t      }\n-\t    while ( !empty() );\n+\t\twhile ( !empty() );\n \n-\t    for (__counter = __tmp + 1; __counter != __fill; ++__counter)\n-\t      __counter->merge(*(__counter - 1), __comp);\n-\t    swap(*(__fill - 1));\n+\t\tfor (__counter = __tmp + 1; __counter != __fill; ++__counter)\n+\t\t  __counter->merge(*(__counter - 1), __comp);\n+\t\tswap(*(__fill - 1));\n+\t      }\n+\t    __catch(...)\n+\t      {\n+\t\tthis->splice(this->end(), __carry);\n+\t\tfor (int i = 0; i < sizeof(__tmp)/sizeof(__tmp[0]); ++i)\n+\t\t  this->splice(this->end(), __tmp[i]);\n+\t\t__throw_exception_again;\n+\t      }\n \t  }\n       }\n "}, {"sha": "1cf9b0c58d1ff5949d2be805ac28a681af3ba59c", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/78389.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dcfacf4390abe657d186eff582835e8d1b8370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F78389.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dcfacf4390abe657d186eff582835e8d1b8370/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F78389.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F78389.cc?ref=e5dcfacf4390abe657d186eff582835e8d1b8370", "patch": "@@ -0,0 +1,85 @@\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.2.2.4 list operations [lib.list.ops]\n+\n+#include <testsuite_hooks.h>\n+\n+#include <list>\n+\n+struct ThrowingComparator\n+{\n+  unsigned int throw_after = 0;\n+  unsigned int count = 0;\n+  bool operator()(int, int) {\n+    if (++count >= throw_after) {\n+      throw 666;\n+    }\n+    return true;\n+  }\n+};\n+\n+struct X\n+{\n+  X() = default;\n+  X(int) {}\n+};\n+\n+unsigned int throw_after_X = 0;\n+unsigned int count_X = 0;\n+\n+bool operator<(const X&, const X&) {\n+  if (++count_X >= throw_after_X) {\n+    throw 666;\n+  }\n+  return true;\n+}\n+\n+\n+int main()\n+{\n+  std::list<int> a{1, 2, 3, 4};\n+  std::list<int> b{5, 6, 7, 8, 9, 10, 11, 12};\n+  try {\n+    a.merge(b, ThrowingComparator{5});\n+  } catch (...) {\n+  }\n+  VERIFY(a.size() == 8 && b.size() == 4);\n+  std::list<X> ax{1, 2, 3, 4};\n+  std::list<X> bx{5, 6, 7, 8, 9, 10, 11, 12};\n+  throw_after_X = 5;\n+  try {\n+    ax.merge(bx);\n+  } catch (...) {\n+  }\n+  VERIFY(ax.size() == 8 && bx.size() == 4);\n+  std::list<int> ay{5, 6, 7, 8, 9, 10, 11, 12};\n+  try {\n+    ay.sort(ThrowingComparator{5});\n+  } catch (...) {\n+  }\n+  VERIFY(ay.size() == 8);\n+  std::list<X> az{5, 6, 7, 8, 9, 10, 11, 12};\n+  throw_after_X = 5;\n+  try {\n+    az.sort();\n+  } catch (...) {\n+  }\n+  VERIFY(az.size() == 8);\n+}"}]}