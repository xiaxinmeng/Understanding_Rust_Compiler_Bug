{"sha": "78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlZDBmODBjMzhiOTA4NDc5NGFlNGEwMmU1YTU2NDhjYmQyNTVhZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-19T21:49:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-19T21:49:40Z"}, "message": "Fix tests that use allocators with incorrect value types\n\nAs a GNU extension we allow containers to be instantiated with\nallocators that use a different value type from the container, and\nautomatically rebind the allocator to the correct type. This extension\nis disabled in strict modes (when __STRICT_ANSI__ is defined, i.e.\n-std=c++NN dialects). These testcases unintentionally rely on the\nextension and so fail for strict modes.\n\nTests which intentionally make use of the extension will still fail in\nstrict dialects, but will be addressed in a later change.\n\n\t* testsuite/20_util/scoped_allocator/1.cc: Use allocator with correct\n\tvalue type for the container.\n\t* testsuite/23_containers/forward_list/cons/14.cc: Likewise.\n\t* testsuite/23_containers/map/56613.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/55043.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/allocator/copy.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/allocator/copy_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_map/allocator/minimal.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_map/allocator/move.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/allocator/move_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_map/cons/81891.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/requirements/exception/\n\tbasic.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/requirements/exception/\n\tgeneration_prohibited.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/requirements/exception/\n\tpropagation_consistent.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/55043.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/copy.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/copy_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/minimal.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/move.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/move_assign.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/requirements/exception/\n\tbasic.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/requirements/exception/\n\tgeneration_prohibited.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/requirements/exception/\n\tpropagation_consistent.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/5.cc: Likewise.\n\t* testsuite/ext/malloc_allocator/sanity.cc: Likewise.\n\nFrom-SVN: r265331", "tree": {"sha": "e171bc42b50cc79ba4a12b4ddde4dabf06def08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e171bc42b50cc79ba4a12b4ddde4dabf06def08c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f2d0bdb556df6ffe51f92ea14cde3229382531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f2d0bdb556df6ffe51f92ea14cde3229382531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f2d0bdb556df6ffe51f92ea14cde3229382531"}], "stats": {"total": 179, "additions": 111, "deletions": 68}, "files": [{"sha": "c7cdc0055023f41d13e990492f859e23abbd6722", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -1,5 +1,50 @@\n 2018-10-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/20_util/scoped_allocator/1.cc: Use allocator with correct\n+\tvalue type for the container.\n+\t* testsuite/23_containers/forward_list/cons/14.cc: Likewise.\n+\t* testsuite/23_containers/map/56613.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/55043.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/allocator/copy.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/allocator/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/allocator/minimal.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/allocator/move.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/allocator/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/cons/81891.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/requirements/exception/\n+\tbasic.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/requirements/exception/\n+\tgeneration_prohibited.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/requirements/exception/\n+\tpropagation_consistent.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/55043.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/copy.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/minimal.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/move.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/exception/\n+\tbasic.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/exception/\n+\tgeneration_prohibited.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/exception/\n+\tpropagation_consistent.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/5.cc: Likewise.\n+\t* testsuite/ext/malloc_allocator/sanity.cc: Likewise.\n+\n \t* ext/special_functions/airy_ai/check_nan.cc: Skip test for\n \tnon-standard extension when a strict -std=c++NN dialect is used.\n \t* ext/special_functions/airy_ai/check_value.cc: Likewise."}, {"sha": "b546b495d9583a8a02db6da08900651599516d17", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/1.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F1.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -57,12 +57,14 @@ void test01()\n \n void test02()\n {\n-  typedef std::scoped_allocator_adaptor<Element::allocator_type> inner_alloc_type;\n+  typedef std::scoped_allocator_adaptor<Element::allocator_type> alloc1_type;\n \n-  typedef std::vector<Element, inner_alloc_type> EltVec;\n+  typedef std::vector<Element, alloc1_type> EltVec;\n \n   typedef std::scoped_allocator_adaptor<Element::allocator_type,\n-                                        Element::allocator_type> alloc_type;\n+                                        Element::allocator_type> alloc2_type;\n+\n+  typedef std::allocator_traits<alloc2_type>::rebind_alloc<EltVec> alloc_type;\n \n   typedef std::vector<EltVec, alloc_type> EltVecVec;\n \n@@ -88,10 +90,8 @@ void test02()\n   VERIFY( evv3.get_allocator().get_personality() == 3 );\n   VERIFY( evv3[0].get_allocator().get_personality() == 4 );\n   VERIFY( evv3[0][0].get_allocator().get_personality() == 4 );\n-\n }\n \n-\n int main()\n {\n   test01();"}, {"sha": "9ee497b2e1fa67d378d7f71c90890e14fa0df077", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/14.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F14.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -26,9 +26,9 @@ void test01()\n {\n   using namespace std;\n   using list = forward_list<int>;\n-  forward_list<list, scoped_allocator_adaptor<list::allocator_type>> l;\n+  using alloc_type = allocator<list>;\n+  forward_list<list, scoped_allocator_adaptor<alloc_type>> l;\n \n   // Check for forward_list(size_type, const allocator_type&)\n   l.emplace_front(1u);\n }\n-"}, {"sha": "e639b81a730e8c47a7a6be98f4606c21ce41007e", "filename": "libstdc++-v3/testsuite/23_containers/map/56613.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -67,6 +67,6 @@ bool operator!=(alloc<T>, alloc<U>) { return false; }\n \n int main()\n {\n-  std::map<int, int, std::less<int>, alloc<int> > m;\n+  std::map<int, int, std::less<int>, alloc<std::pair<const int, int>>> m;\n   m[1];\n }"}, {"sha": "a4c7c3bb3c575c063394277f968c870ca7e6dd17", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/55043.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F55043.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -28,15 +28,9 @@ struct MoveOnly\n   MoveOnly(MoveOnly&&) = default;\n };\n \n-using hash = std::hash<int>;\n-using equal = std::equal_to<int>;\n-\n-template<typename Alloc>\n-  using test_type = std::unordered_map<int, MoveOnly, hash, equal, Alloc>;\n-\n void test01()\n {\n-  typedef test_type<std::allocator<MoveOnly>> uim;\n+  typedef std::unordered_map<int, MoveOnly> uim;\n   std::vector<uim> v;\n   v.emplace_back(uim());\n }"}, {"sha": "6e2bcef6674afe86b74102a837f6193d5df880c3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/copy.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fcopy.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -39,7 +39,7 @@ using __gnu_test::propagating_allocator;\n \n void test01()\n {\n-  typedef propagating_allocator<T, false> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, false> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -51,7 +51,7 @@ void test01()\n \n void test02()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -63,7 +63,7 @@ void test02()\n \n void test03()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,"}, {"sha": "6393bf56d2b6ea707f71b5245728f7e27f9e10b5", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/copy_assign.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fcopy_assign.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -39,7 +39,7 @@ using __gnu_test::propagating_allocator;\n \n void test01()\n {\n-  typedef propagating_allocator<T, false> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, false> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -54,7 +54,7 @@ void test01()\n \n void test02()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,"}, {"sha": "4fc096765e22d239c358c0c1bba52cb472546c85", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/minimal.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fminimal.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -40,13 +40,12 @@ struct equal_to\n bool operator==(const T& l, const T& r) { return l.i == r.i; }\n bool operator<(const T& l, const T& r) { return l.i < r.i; }\n \n-using __gnu_test::SimpleAllocator;\n+typedef __gnu_test::SimpleAllocator<std::pair<const T, T>> alloc_type;\n \n-template class std::unordered_map<T, T, hash, equal_to, SimpleAllocator<T>>;\n+template class std::unordered_map<T, T, hash, equal_to, alloc_type>;\n \n void test01()\n {\n-  typedef SimpleAllocator<T> alloc_type;\n   typedef std::allocator_traits<alloc_type> traits_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v(alloc_type{});"}, {"sha": "c79dbeb80c94c47cd574057e5711322638386236", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/move.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fmove.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -39,7 +39,7 @@ using __gnu_test::uneq_allocator;\n \n void test01()\n {\n-  typedef uneq_allocator<T> alloc_type;\n+  typedef uneq_allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -53,7 +53,7 @@ void test01()\n \n void test02()\n {\n-  typedef uneq_allocator<T> alloc_type;\n+  typedef uneq_allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,"}, {"sha": "b27269e607a2e16244658fbec5836c0a625629d7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/move_assign.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fmove_assign.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -27,7 +27,8 @@ using __gnu_test::counter_type;\n \n void test01()\n {\n-  typedef propagating_allocator<counter_type, false> alloc_type;\n+  typedef std::pair<const counter_type, counter_type> value_type;\n+  typedef propagating_allocator<value_type, false> alloc_type;\n   typedef __gnu_test::counter_type_hasher hash;\n   typedef std::unordered_map<counter_type, counter_type, hash,\n \t\t\t     std::equal_to<counter_type>,\n@@ -54,7 +55,8 @@ void test01()\n \n void test02()\n {\n-  typedef propagating_allocator<counter_type, true> alloc_type;\n+  typedef std::pair<const counter_type, counter_type> value_type;\n+  typedef propagating_allocator<value_type, true> alloc_type;\n   typedef __gnu_test::counter_type_hasher hash;\n   typedef std::unordered_map<counter_type, counter_type, hash,\n \t\t\t     std::equal_to<counter_type>,"}, {"sha": "29fbc7bcd8d866bd72a303b495abfc6f0e20d02b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/noexcept.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fnoexcept.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -44,7 +44,7 @@ using __gnu_test::propagating_allocator;\n \n void test01()\n {\n-  typedef std::allocator<T> alloc_type;\n+  typedef std::allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1;\n   test_type v2;\n@@ -55,7 +55,7 @@ void test01()\n \n void test02()\n {\n-  typedef std::allocator<T> alloc_type;\n+  typedef std::allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_map<T, T, hash_t, equal_to, alloc_type> test_type;\n   test_type v1;\n   test_type v2;\n@@ -65,7 +65,7 @@ void test02()\n \n void test03()\n {\n-  typedef std::allocator<T> alloc_type;\n+  typedef std::allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to_t, alloc_type> test_type;\n   test_type v1;\n   test_type v2;\n@@ -75,7 +75,7 @@ void test03()\n \n void test04()\n {\n-  typedef propagating_allocator<T, false> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, false> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n@@ -85,7 +85,7 @@ void test04()\n \n void test05()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_map<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));"}, {"sha": "f0f8b75e7e56bcba97f21e98e92656c41d039f22", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/cons/81891.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2F81891.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2F81891.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fcons%2F81891.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -26,7 +26,7 @@ struct fails_on_copy {\n   fails_on_copy(const fails_on_copy&) { throw 0; };\n };\n \n-using value_type = std::pair<int, fails_on_copy>;\n+using value_type = std::pair<const int, fails_on_copy>;\n \n void\n test01()"}, {"sha": "bbc4cded242762e9d8913b41be77c88b3ac15643", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/exception/basic.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fbasic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fbasic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fbasic.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -27,7 +27,8 @@ void\n value()\n {\n   typedef __gnu_cxx::throw_value_limit value_type;\n-  typedef __gnu_cxx::throw_allocator_limit<value_type> allocator_type;\n+  typedef std::pair<const value_type, value_type> pair_type;\n+  typedef __gnu_cxx::throw_allocator_limit<pair_type> allocator_type;\n   typedef std::hash<value_type> hash_type;\n   typedef std::equal_to<value_type> pred_type;\n   typedef std::unordered_map<value_type, value_type, hash_type, pred_type, allocator_type> test_type;"}, {"sha": "e04f326e1c2925fcfc2f0277daf6f6d08d29bad6", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/exception/generation_prohibited.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fgeneration_prohibited.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -27,7 +27,8 @@\n int main()\n {\n   typedef __gnu_cxx::throw_value_random value_type;\n-  typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n+  typedef std::pair<const value_type, value_type> pair_type;\n+  typedef __gnu_cxx::throw_allocator_random<pair_type> allocator_type;\n   typedef std::hash<value_type> hash_type;\n   typedef std::equal_to<value_type> pred_type;\n   typedef std::unordered_map<value_type, value_type, hash_type, pred_type, allocator_type> test_type;"}, {"sha": "eb5c0f1b88acc95c71dd105702b821be8926f5b3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/exception/propagation_consistent.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fpropagation_consistent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fpropagation_consistent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexception%2Fpropagation_consistent.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -27,7 +27,8 @@\n int main()\n {\n   typedef __gnu_cxx::throw_value_limit value_type;\n-  typedef __gnu_cxx::throw_allocator_limit<value_type> allocator_type;\n+  typedef std::pair<const value_type, value_type> pair_type;\n+  typedef __gnu_cxx::throw_allocator_limit<pair_type> allocator_type;\n   typedef std::hash<value_type> hash_type;\n   typedef std::equal_to<value_type> pred_type;\n   typedef std::unordered_map<value_type, value_type, hash_type, pred_type, allocator_type> test_type;"}, {"sha": "919cea33341dc95e9eb114e173a0a2e6fee4d6bd", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/55043.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F55043.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -28,15 +28,9 @@ struct MoveOnly\n   MoveOnly(MoveOnly&&) = default;\n };\n \n-using hash = std::hash<int>;\n-using equal = std::equal_to<int>;\n-\n-template<typename Alloc>\n-  using test_type = std::unordered_multimap<int, MoveOnly, hash, equal, Alloc>;\n-\n void test01()\n {\n-  typedef test_type<std::allocator<MoveOnly>> uim;\n+  typedef std::unordered_multimap<int, MoveOnly> uim;\n   std::vector<uim> v;\n   v.emplace_back(uim());\n }"}, {"sha": "38322316406af59380ea4bf7da41b4709f2e74fd", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/copy.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fcopy.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -39,7 +39,7 @@ using __gnu_test::propagating_allocator;\n \n void test01()\n {\n-  typedef propagating_allocator<T, false> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, false> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -51,7 +51,7 @@ void test01()\n \n void test02()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -63,7 +63,7 @@ void test02()\n \n void test03()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,"}, {"sha": "15059be652765e42d9eb5db141b3e3b4783acdf7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/copy_assign.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fcopy_assign.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -39,7 +39,7 @@ using __gnu_test::propagating_allocator;\n \n void test01()\n {\n-  typedef propagating_allocator<T, false> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, false> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -54,7 +54,7 @@ void test01()\n \n void test02()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,"}, {"sha": "8488eba37f1cdc9d01f8dca3626dad5d0b154989", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/minimal.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fminimal.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -43,11 +43,11 @@ bool operator<(const T& l, const T& r) { return l.i < r.i; }\n using __gnu_test::SimpleAllocator;\n \n template class std::unordered_multimap<T, T, hash, equal_to,\n-\t\t\t\t       SimpleAllocator<T>>;\n+\t\t\t\t       SimpleAllocator<std::pair<const T, T>>>;\n \n void test01()\n {\n-  typedef SimpleAllocator<T> alloc_type;\n+  typedef SimpleAllocator<std::pair<const T, T>> alloc_type;\n   typedef std::allocator_traits<alloc_type> traits_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v(alloc_type{});"}, {"sha": "33e987ac45b4c881c7cfea27fc70054e432fcb28", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/move.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fmove.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -39,7 +39,7 @@ using __gnu_test::uneq_allocator;\n \n void test01()\n {\n-  typedef uneq_allocator<T> alloc_type;\n+  typedef uneq_allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,\n@@ -53,7 +53,7 @@ void test01()\n \n void test02()\n {\n-  typedef uneq_allocator<T> alloc_type;\n+  typedef uneq_allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   v1.emplace(std::piecewise_construct,"}, {"sha": "35c4c289f109178a24823d910fa73d57df3c477f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/move_assign.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fmove_assign.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -25,9 +25,11 @@\n using __gnu_test::propagating_allocator;\n using __gnu_test::counter_type;\n \n+typedef std::pair<const counter_type, counter_type> value_type;\n+\n void test01()\n {\n-  typedef propagating_allocator<counter_type, false> alloc_type;\n+  typedef propagating_allocator<value_type, false> alloc_type;\n   typedef __gnu_test::counter_type_hasher hash;\n   typedef std::unordered_multimap<counter_type, counter_type, hash,\n \t\t\t\t  std::equal_to<counter_type>,\n@@ -54,7 +56,7 @@ void test01()\n \n void test02()\n {\n-  typedef propagating_allocator<counter_type, true> alloc_type;\n+  typedef propagating_allocator<value_type, true> alloc_type;\n   typedef __gnu_test::counter_type_hasher hash;\n   typedef std::unordered_multimap<counter_type, counter_type, hash,\n \t\t\t\t  std::equal_to<counter_type>,"}, {"sha": "78fc37038c3ea5f5096d6909ea00dc16329a6f62", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/noexcept.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fnoexcept.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -44,7 +44,7 @@ using __gnu_test::propagating_allocator;\n \n void test01()\n {\n-  typedef std::allocator<T> alloc_type;\n+  typedef std::allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1;\n   test_type v2;\n@@ -55,7 +55,7 @@ void test01()\n \n void test02()\n {\n-  typedef std::allocator<T> alloc_type;\n+  typedef std::allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_multimap<T, T, hash_t, equal_to, alloc_type> test_type;\n   test_type v1;\n   test_type v2;\n@@ -65,7 +65,7 @@ void test02()\n \n void test03()\n {\n-  typedef std::allocator<T> alloc_type;\n+  typedef std::allocator<std::pair<const T, T>> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to_t, alloc_type>\n     test_type;\n   test_type v1;\n@@ -76,7 +76,7 @@ void test03()\n \n void test04()\n {\n-  typedef propagating_allocator<T, false> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, false> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));\n@@ -86,7 +86,7 @@ void test04()\n \n void test05()\n {\n-  typedef propagating_allocator<T, true> alloc_type;\n+  typedef propagating_allocator<std::pair<const T, T>, true> alloc_type;\n   typedef std::unordered_multimap<T, T, hash, equal_to, alloc_type> test_type;\n   test_type v1(alloc_type(1));\n   test_type v2(alloc_type(2));"}, {"sha": "81dc0bbe8dfd8ec6e15d722845d0ede2857061e2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/exception/basic.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fbasic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fbasic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fbasic.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -27,7 +27,8 @@ void\n value()\n {\n   typedef __gnu_cxx::throw_value_limit value_type;\n-  typedef __gnu_cxx::throw_allocator_limit<value_type> allocator_type;\n+  typedef std::pair<const value_type, value_type> pair_type;\n+  typedef __gnu_cxx::throw_allocator_limit<pair_type> allocator_type;\n   typedef std::hash<value_type> hash_type;\n   typedef std::equal_to<value_type> pred_type;\n   typedef std::unordered_multimap<value_type, value_type, hash_type, pred_type, allocator_type> test_type;"}, {"sha": "a05d8867dff2acc758ba4cfb8e20195c976c6a65", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/exception/generation_prohibited.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fgeneration_prohibited.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -27,7 +27,8 @@\n int main()\n {\n   typedef __gnu_cxx::throw_value_random value_type;\n-  typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n+  typedef std::pair<const value_type, value_type> pair_type;\n+  typedef __gnu_cxx::throw_allocator_random<pair_type> allocator_type;\n   typedef std::hash<value_type> hash_type;\n   typedef std::equal_to<value_type> pred_type;\n   typedef std::unordered_multimap<value_type, value_type, hash_type, pred_type, allocator_type> test_type;"}, {"sha": "58312c99146360f9acb6d5f15af5286f1c94bf80", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/exception/propagation_consistent.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fpropagation_consistent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fpropagation_consistent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexception%2Fpropagation_consistent.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -27,7 +27,8 @@\n int main()\n {\n   typedef __gnu_cxx::throw_value_limit value_type;\n-  typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n+  typedef std::pair<const value_type, value_type> pair_type;\n+  typedef __gnu_cxx::throw_allocator_random<pair_type> allocator_type;\n   typedef std::hash<value_type> hash_type;\n   typedef std::equal_to<value_type> pred_type;\n   typedef std::unordered_multimap<value_type, value_type, hash_type, pred_type, allocator_type> test_type;"}, {"sha": "6cdf0f3f3ca7a42bbb46cdd3418a96fe2e43a088", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/5.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright (C) 2011-2018 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -23,10 +22,12 @@\n \n // { dg-do compile { target c++11 } }\n \n+using __gnu_test::ExplicitConsAlloc;\n+\n // libstdc++/50118\n+template class\n+  std::unordered_multimap<int, int, std::hash<int>, std::equal_to<int>,\n+\t\t\t  ExplicitConsAlloc<std::pair<const int, int>>>;\n template class std::unordered_multimap<int, int, std::hash<int>,\n \t\t\t\t       std::equal_to<int>,\n-\t\t\t\t       __gnu_test::ExplicitConsAlloc<int>>;\n-template class std::unordered_multimap<int, int, std::hash<int>,\n-\t\t\t\t       std::equal_to<int>,\n-\t\t\t\t       __gnu_test::ExplicitConsAlloc<char>>;\n+\t\t\t\t       ExplicitConsAlloc<char>>;"}, {"sha": "ef9df0379f912e2484759271aca7cea647140a97", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/sanity.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fsanity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78ed0f80c38b9084794ae4a02e5a5648cbd255ae/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fsanity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fsanity.cc?ref=78ed0f80c38b9084794ae4a02e5a5648cbd255ae", "patch": "@@ -24,7 +24,7 @@\n int main()\n {\n   std::map<int, int, std::less<int>,\n-\t   __gnu_cxx::malloc_allocator<std::pair<int, int> > > allocs;\n+\t   __gnu_cxx::malloc_allocator<std::pair<const int, int> > > allocs;\n   allocs[9] = 3;\n   std::vector<int, __gnu_cxx::malloc_allocator<int>> vec(10);\n   vec[5] = 42;"}]}