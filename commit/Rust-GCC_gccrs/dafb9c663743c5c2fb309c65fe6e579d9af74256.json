{"sha": "dafb9c663743c5c2fb309c65fe6e579d9af74256", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmYjljNjYzNzQzYzVjMmZiMzA5YzY1ZmU2ZTU3OWQ5YWY3NDI1Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-02-01T21:42:05Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-02-01T21:42:05Z"}, "message": "fixinc.irix: Use unique filenames for writing into /tmp,\n\n        * fixinc.irix: Use unique filenames for writing into /tmp,\n        * fixinc.ptx: Likewise.\n        * fixinc.sco: Likewise.\n        * fixinc.svr4: Likewise.\n        * fixinc.winnt: Likewise.\n\nFrom-SVN: r31742", "tree": {"sha": "f5214d85e2c815f8a37e40a673cc6156861f0b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5214d85e2c815f8a37e40a673cc6156861f0b99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dafb9c663743c5c2fb309c65fe6e579d9af74256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafb9c663743c5c2fb309c65fe6e579d9af74256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dafb9c663743c5c2fb309c65fe6e579d9af74256", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafb9c663743c5c2fb309c65fe6e579d9af74256/comments", "author": null, "committer": null, "parents": [{"sha": "2e39bdbe4b92cea918f54624604e241cd1672a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e39bdbe4b92cea918f54624604e241cd1672a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e39bdbe4b92cea918f54624604e241cd1672a52"}], "stats": {"total": 108, "additions": 58, "deletions": 50}, "files": [{"sha": "c78df4e25e30626efe655cb7dfed5844d153f840", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dafb9c663743c5c2fb309c65fe6e579d9af74256", "patch": "@@ -1,3 +1,11 @@\n+2000-02-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fixinc.irix: Use unique filenames for writing into /tmp,\n+\t* fixinc.ptx: Likewise.\n+\t* fixinc.sco: Likewise.\n+\t* fixinc.svr4: Likewise.\n+\t* fixinc.winnt: Likewise.\n+\n 2000-02-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* tsystem.h: New file."}, {"sha": "403c5441e8317f9b9f51aed63ae8fd8920736ac7", "filename": "gcc/fixinc/fixinc.irix", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.irix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.irix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.irix?ref=dafb9c663743c5c2fb309c65fe6e579d9af74256", "patch": "@@ -142,7 +142,7 @@ fi\n # in float.h to avoid redefinition errors if float.h is included first.\n \n file=limits.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -204,7 +204,7 @@ fi\n # The Irix unistd.h will introduce a call to __vfork in its libc, but the\n # function is never actually prototyped.\n file=unistd.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -236,7 +236,7 @@ done\n # This is for ANSI and also to interoperate properly with gcc's varargs.h.\n # Arrange for stdio.h to use stdarg.h to define __gnuc_va_list\n file=stdio.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else"}, {"sha": "700a725bd35df5a88a97176c9a89f921d1fad25f", "filename": "gcc/fixinc/fixinc.ptx", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.ptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.ptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.ptx?ref=dafb9c663743c5c2fb309c65fe6e579d9af74256", "patch": "@@ -118,7 +118,7 @@ fi\n # In pwd.h, PTX 1.x needs stdio.h included since FILE * was added in a\n # prototype later on in the file.\n file=pwd.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -173,7 +173,7 @@ fi\n # include <sys/byteorder.h> written out by the fixinc.svr4 script which has\n # these same routines written in an asm format supported by gcc.\n file=netinet/in.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else"}, {"sha": "a026a776683deadd298e5a7327a1ff4d1b8e92a5", "filename": "gcc/fixinc/fixinc.sco", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.sco", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.sco", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.sco?ref=dafb9c663743c5c2fb309c65fe6e579d9af74256", "patch": "@@ -185,7 +185,7 @@ cd ${INPUT}\n # Fix first broken decl of getcwd present on some svr4 systems.\n \n file=stdlib.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -213,7 +213,7 @@ fi\n # fix the incorrect decl of profil present on some svr4 systems.\n \n file=unistd.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -241,7 +241,7 @@ fi\n # Fix third broken decl of getcwd on SCO.  Also fix incorrect decl of\n # link.\n file=prototypes.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -313,7 +313,7 @@ fi\n # we blow over that one (with C++ linkage) and stick a new one in stdlib.h\n # with C linkage.   So we eat the one out of math.h.\n file=math.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else"}, {"sha": "342b14645413b2bd5f4b710f32f38db65f9f991c", "filename": "gcc/fixinc/fixinc.svr4", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.svr4?ref=dafb9c663743c5c2fb309c65fe6e579d9af74256", "patch": "@@ -267,7 +267,7 @@ done\n # Fix first broken decl of getcwd present on some svr4 systems.\n \n file=stdlib.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -295,7 +295,7 @@ fi\n # fix the incorrect decl of profil present on some svr4 systems.\n \n file=unistd.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -324,7 +324,7 @@ fi\n # and so that it is correct for both C and C++.\n \n file=sys/param.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -363,7 +363,7 @@ fi\n # and so that it is correct for both C and C++.\n \n file=stdio.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -399,7 +399,7 @@ fi\n # and so that it is correct for both C and C++.\n \n file=dbm.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -436,7 +436,7 @@ fi\n # Add a prototyped declaration of mmap to <sys/mman.h>.\n \n file=sys/mman.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -476,7 +476,7 @@ fi\n # any of this stuff when on Solaris.\n \n file=ftw.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -537,7 +537,7 @@ fi\n # Avoid the definition of the bool type in the Solaris 2.x curses.h when using\n # g++, since it's now an official type in the C++ language.\n file=curses.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -573,7 +573,7 @@ fi\n # such a declaration.\n \n file=regexp.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -611,7 +611,7 @@ fi\n # delete the lines that #define some string functions to internal forms.\n \n file=string.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -644,7 +644,7 @@ fi\n # (guessing it is necessary for all of them).\n \n file=ieeefp.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -677,7 +677,7 @@ fi\n # Also fix types of SIG_DFL, SIG_ERR, SIG_IGN, and SIG_HOLD.\n \n file=sys/signal.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -709,7 +709,7 @@ fi\n # Fix declarations of `makedev', `major', and `minor' in <sys/mkdev.h>.\n \n file=sys/mkdev.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -749,7 +749,7 @@ fi\n # Fix reference to NMSZ in <sys/adv.h>.\n \n file=sys/adv.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -777,7 +777,7 @@ fi\n # array initializers.\n \n file=sys/netcspace.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -805,7 +805,7 @@ fi\n # Conditionalize all of <fs/rfs/rf_cache.h> on _KERNEL being defined.\n \n file=fs/rfs/rf_cache.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -834,7 +834,7 @@ fi\n # Conditionalize all of <sys/erec.h> on _KERNEL being defined.\n \n file=sys/erec.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -863,7 +863,7 @@ fi\n # Conditionalize all of <sys/err.h> on _KERNEL being defined.\n \n file=sys/err.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -892,7 +892,7 @@ fi\n # Conditionalize all of <sys/char.h> on _KERNEL being defined.\n \n file=sys/char.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -921,7 +921,7 @@ fi\n # Conditionalize all of <sys/getpages.h> on _KERNEL being defined.\n \n file=sys/getpages.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -950,7 +950,7 @@ fi\n # Conditionalize all of <sys/map.h> on _KERNEL being defined.\n \n file=sys/map.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -979,7 +979,7 @@ fi\n # Conditionalize all of <sys/cmn_err.h> on _KERNEL being defined.\n \n file=sys/cmn_err.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1008,7 +1008,7 @@ fi\n # Conditionalize all of <sys/kdebugger.h> on _KERNEL being defined.\n \n file=sys/kdebugger.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1038,7 +1038,7 @@ fi\n # This has been taken out because it breaks on some versions of\n # DYNIX/ptx, and it does not seem to do much good on any system.\n # file=netinet/in.h\n-# base=`basename $file`\n+# base=`basename $file`.$$\n # if [ -r ${LIB}/$file ]; then\n #   file_to_fix=${LIB}/$file\n # else\n@@ -1068,7 +1068,7 @@ fi\n # Conditionalize some of <sys/endian.h> on __GNUC__ and __GNUG__.\n \n file=sys/endian.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1101,7 +1101,7 @@ fi\n ## In sys/types.h, don't name the enum for booleans.\n #\n #file=sys/types.h\n-#base=`basename $file`\n+#base=`basename $file`.$$\n #if [ -r ${LIB}/$file ]; then\n #  file_to_fix=${LIB}/$file\n #else\n@@ -1126,7 +1126,7 @@ fi\n # <sys/stream.h> and <sys/strsubr.h>\n \n file=sys/stream.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1154,7 +1154,7 @@ if [ \\! -z \"$file_to_fix\" ]; then\n fi\n \n file=sys/strsubr.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1185,7 +1185,7 @@ fi\n \n # Put storage class at start of decl, to avoid warning.\n file=rpc/types.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1214,7 +1214,7 @@ fi\n # Convert functions to prototype form, and fix arg names in <sys/stat.h>.\n \n file=sys/stat.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1282,7 +1282,7 @@ if [ -x /bin/sony ]; then\n     # Change <stdio.h> to not define __filbuf, __flsbuf, and __iob\n \n     file=stdio.h\n-    base=`basename $file`\n+    base=`basename $file`.$$\n     if [ -r ${LIB}/$file ]; then\n       file_to_fix=${LIB}/$file\n     else\n@@ -1316,7 +1316,7 @@ if [ -x /bin/sony ]; then\n     # Change <ctype.h> to not define __ctype\n \n     file=ctype.h\n-    base=`basename $file`\n+    base=`basename $file`.$$\n     if [ -r ${LIB}/$file ]; then\n       file_to_fix=${LIB}/$file\n     else\n@@ -1352,7 +1352,7 @@ fi\n # Solaris 2.1 has this problem.\n \n file=limits.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1437,7 +1437,7 @@ fi\n # specific math-*.h file.\n \n file=math.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1470,7 +1470,7 @@ fi\n # which conflicts with the fixproto definition.  The fixproto\n # definition and the Solaris definition are used the same way.\n for file in math.h floatingpoint.h; do\n-  base=`basename $file`\n+  base=`basename $file`.$$\n   if [ -r ${LIB}/$file ]; then\n     file_to_fix=${LIB}/$file\n   else\n@@ -1505,7 +1505,7 @@ done\n # redefine it to __math_exception.  This is not a great fix, but I\n # haven't been able to think of anything better.\n file=math.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1538,7 +1538,7 @@ fi\n \n # Similarly for struct queue in sys/stream.h.\n file=sys/stream.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -1574,7 +1574,7 @@ fi\n # installed in <sys/byteorder.h>, just remove the protos.\n set -x\n file=arpa/inet.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else"}, {"sha": "323b79a93b809e0d5627e726226bcdab6d741a8b", "filename": "gcc/fixinc/fixinc.winnt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.winnt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafb9c663743c5c2fb309c65fe6e579d9af74256/gcc%2Ffixinc%2Ffixinc.winnt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.winnt?ref=dafb9c663743c5c2fb309c65fe6e579d9af74256", "patch": "@@ -145,7 +145,7 @@ done\n # Fix first broken decl of getcwd present on some svr4 systems.\n \n file=direct.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -170,7 +170,7 @@ if [ \\! -z \"$file_to_fix\" ]; then\n fi\n \n file=rpcndr.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else\n@@ -195,7 +195,7 @@ if [ \\! -z \"$file_to_fix\" ]; then\n fi\n \n file=winnt.h\n-base=`basename $file`\n+base=`basename $file`.$$\n if [ -r ${LIB}/$file ]; then\n   file_to_fix=${LIB}/$file\n else"}]}