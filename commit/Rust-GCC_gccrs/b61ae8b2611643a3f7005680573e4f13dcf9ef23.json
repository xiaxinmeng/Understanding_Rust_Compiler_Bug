{"sha": "b61ae8b2611643a3f7005680573e4f13dcf9ef23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxYWU4YjI2MTE2NDNhM2Y3MDA1NjgwNTczZTRmMTNkY2Y5ZWYyMw==", "commit": {"author": {"name": "Dalibor Topic", "email": "robilad@kaffe.org", "date": "2005-04-29T18:47:42Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-29T18:47:42Z"}, "message": "2005-04-29  Dalibor Topic  <robilad@kaffe.org>\n\n\t* java/nio/channels/FileChannelImpl.java\n\t(FileChannelImpl(String, int)): Removed.\n\t(FileChannelImpl(File, int)): Added. Check if opened file is a\n\tdirectory.\n\t* java/io/FileInputStream.java(FileInputStream): Fixed javadocs.\n\tCall FileChannelImpl(File, int).\n\t* java/io/FileOutputStream.java (FileInputStream): Call\n\tFileChannelImpl(File, int).\n\t* java/io/RandomAccessFile.java (RandomAccessFile):\n\tCall FileChannelImpl(File, int). Switched constructors around.\n\nFrom-SVN: r99011", "tree": {"sha": "a633006bbff08f9d9c68b140ddd9e2656e06ec70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a633006bbff08f9d9c68b140ddd9e2656e06ec70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b61ae8b2611643a3f7005680573e4f13dcf9ef23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61ae8b2611643a3f7005680573e4f13dcf9ef23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b61ae8b2611643a3f7005680573e4f13dcf9ef23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61ae8b2611643a3f7005680573e4f13dcf9ef23/comments", "author": null, "committer": null, "parents": [{"sha": "2c80f015490c820ec71549975d6276b41ed9ae4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c80f015490c820ec71549975d6276b41ed9ae4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c80f015490c820ec71549975d6276b41ed9ae4c"}], "stats": {"total": 111, "additions": 74, "deletions": 37}, "files": [{"sha": "5a8022eecf81b4bf025ec80f21bc2ede4d72ac8d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b61ae8b2611643a3f7005680573e4f13dcf9ef23", "patch": "@@ -1,3 +1,16 @@\n+2005-04-29  Dalibor Topic  <robilad@kaffe.org>\n+\n+\t* java/nio/channels/FileChannelImpl.java\n+\t(FileChannelImpl(String, int)): Removed.\n+\t(FileChannelImpl(File, int)): Added. Check if opened file is a\n+\tdirectory.\n+\t* java/io/FileInputStream.java(FileInputStream): Fixed javadocs.\n+\tCall FileChannelImpl(File, int).\n+\t* java/io/FileOutputStream.java (FileInputStream): Call\n+\tFileChannelImpl(File, int).\n+\t* java/io/RandomAccessFile.java (RandomAccessFile):\n+\tCall FileChannelImpl(File, int). Switched constructors around.\n+\n 2005-04-27  Andrew Haley  <aph@redhat.com>\n \n \tPR java/19285"}, {"sha": "aaa4c26086474d5f695a356e685b06f80abac53d", "filename": "libjava/gnu/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=b61ae8b2611643a3f7005680573e4f13dcf9ef23", "patch": "@@ -41,6 +41,7 @@\n import gnu.classpath.Configuration;\n import gnu.java.nio.FileLockImpl;\n \n+import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -102,10 +103,27 @@ public FileChannelImpl ()\n   }\n \n   /* Open a file.  MODE is a combination of the above mode flags. */\n-  public FileChannelImpl (String path, int mode) throws FileNotFoundException\n+  public FileChannelImpl (File file, int mode) throws FileNotFoundException\n   {\n+    final String path = file.getPath();\n     fd = open (path, mode);\n     this.mode = mode;\n+\n+    // First open the file and then check if it is a a directory\n+    // to avoid race condition.\n+    if (file.isDirectory())\n+      {\n+\ttry \n+\t  {\n+\t      close();\n+\t  }\n+\tcatch (IOException e)\n+\t  {\n+\t      /* ignore it */\n+\t  }\n+\n+\tthrow new FileNotFoundException(path + \" is a directory\");\n+      }\n   }\n \n   /* Used by init() (native code) */"}, {"sha": "c719955434f698f1eb57ebc4708e0ad631d91695", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=b61ae8b2611643a3f7005680573e4f13dcf9ef23", "patch": "@@ -76,7 +76,8 @@ public class FileInputStream extends InputStream\n    * @param name The name of the file this stream should read from\n    *\n    * @exception SecurityException If read access to the file is not allowed\n-   * @exception FileNotFoundException If the file does not exist.\n+   * @exception FileNotFoundException If the file does not exist \n+   * or if it is a directory\n    */\n   public FileInputStream(String name) throws FileNotFoundException\n   {\n@@ -97,15 +98,16 @@ public FileInputStream(String name) throws FileNotFoundException\n    * @param file The <code>File</code> object this stream should read from\n    *\n    * @exception SecurityException If read access to the file is not allowed\n-   * @exception FileNotFoundException If the file does not exist.\n+   * @exception FileNotFoundException If the file does not exist\n+   * or if it is a directory.\n    */\n   public FileInputStream(File file) throws FileNotFoundException\n   {\n     SecurityManager s = System.getSecurityManager();\n     if (s != null)\n       s.checkRead(file.getPath());\n \n-    ch = new FileChannelImpl (file.getPath(), FileChannelImpl.READ);\n+    ch = new FileChannelImpl (file, FileChannelImpl.READ);\n   }\n \n   /**"}, {"sha": "e8784429e63a0da628dbb0ac21af4e00a8a1a100", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=b61ae8b2611643a3f7005680573e4f13dcf9ef23", "patch": "@@ -155,10 +155,10 @@ public FileOutputStream (File file, boolean append)\n     if (s != null)\n       s.checkWrite(file.getPath());\n \n-    ch = new FileChannelImpl (file.getPath(), (append\n-\t\t\t\t     ? FileChannelImpl.WRITE\n-\t\t\t\t     | FileChannelImpl.APPEND\n-\t\t\t\t     : FileChannelImpl.WRITE));\n+   ch = new FileChannelImpl (file, (append\n+\t\t\t\t    ? FileChannelImpl.WRITE\n+\t\t\t\t    | FileChannelImpl.APPEND\n+\t\t\t\t    : FileChannelImpl.WRITE));\n   }\n \n   /**"}, {"sha": "ef367949a24c8b8c06fe8a14c0e5325cf3c4f6c1", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b61ae8b2611643a3f7005680573e4f13dcf9ef23/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=b61ae8b2611643a3f7005680573e4f13dcf9ef23", "patch": "@@ -86,37 +86,11 @@ public class RandomAccessFile implements DataOutput, DataInput\n    * illegal value\n    * @exception SecurityException If the requested access to the file \n    * is not allowed\n-   * @exception IOException If any other error occurs\n+   * @exception FileNotFoundException If the file is a directory, or \n+   * any other error occurs\n    */\n   public RandomAccessFile (File file, String mode)\n     throws FileNotFoundException\n-  {\n-    this (file.getPath(), mode);\n-  }\n-\n-  /**\n-   * This method initializes a new instance of <code>RandomAccessFile</code>\n-   * to read from the specified file name with the specified access mode.\n-   * The access mode is either \"r\" for read only access, \"rw\" for read\n-   * write access, \"rws\" for synchronized read/write access of both\n-   * content and metadata, or \"rwd\" for read/write access\n-   * where only content is required to be synchronous.\n-   * <p>\n-   * Note that a <code>SecurityManager</code> check is made prior to\n-   * opening the file to determine whether or not this file is allowed to\n-   * be read or written.\n-   *\n-   * @param fileName The name of the file to read and/or write\n-   * @param mode \"r\", \"rw\", \"rws\", or \"rwd\"\n-   *\n-   * @exception IllegalArgumentException If <code>mode</code> has an \n-   * illegal value\n-   * @exception SecurityException If the requested access to the file \n-   * is not allowed\n-   * @exception FileNotFoundException If any other error occurs\n-   */\n-  public RandomAccessFile (String fileName, String mode)\n-    throws FileNotFoundException\n   {\n     int fdmode;\n     if (mode.equals(\"r\"))\n@@ -136,6 +110,8 @@ else if (mode.equals(\"rwd\"))\n     else\n       throw new IllegalArgumentException (\"invalid mode: \" + mode);\n \n+    final String fileName = file.getPath();\n+\n     // The obligatory SecurityManager stuff\n     SecurityManager s = System.getSecurityManager();\n     if (s != null)\n@@ -146,12 +122,40 @@ else if (mode.equals(\"rwd\"))\n           s.checkWrite(fileName);\n       }\n \n-    ch = new FileChannelImpl (fileName, fdmode);\n+    ch = new FileChannelImpl (file, fdmode);\n     fd = new FileDescriptor(ch);\n     out = new DataOutputStream (new FileOutputStream (fd));\n     in = new DataInputStream (new FileInputStream (fd));\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>RandomAccessFile</code>\n+   * to read from the specified file name with the specified access mode.\n+   * The access mode is either \"r\" for read only access, \"rw\" for read\n+   * write access, \"rws\" for synchronized read/write access of both\n+   * content and metadata, or \"rwd\" for read/write access\n+   * where only content is required to be synchronous.\n+   * <p>\n+   * Note that a <code>SecurityManager</code> check is made prior to\n+   * opening the file to determine whether or not this file is allowed to\n+   * be read or written.\n+   *\n+   * @param fileName The name of the file to read and/or write\n+   * @param mode \"r\", \"rw\", \"rws\", or \"rwd\"\n+   *\n+   * @exception IllegalArgumentException If <code>mode</code> has an \n+   * illegal value\n+   * @exception SecurityException If the requested access to the file \n+   * is not allowed\n+   * @exception FileNotFoundException If the file is a directory or \n+   * any other error occurs\n+   */\n+  public RandomAccessFile (String fileName, String mode)\n+    throws FileNotFoundException\n+  {\n+    this (new File(fileName), mode);\n+  }\n+\n   /**\n    * This method closes the file and frees up all file related system\n    * resources.  Since most operating systems put a limit on how many files"}]}