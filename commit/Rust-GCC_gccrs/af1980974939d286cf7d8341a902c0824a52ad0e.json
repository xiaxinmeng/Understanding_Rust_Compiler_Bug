{"sha": "af1980974939d286cf7d8341a902c0824a52ad0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxOTgwOTc0OTM5ZDI4NmNmN2Q4MzQxYTkwMmMwODI0YTUyYWQwZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-05-25T01:30:51Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-05-25T01:30:51Z"}, "message": "* loop.c (basic_induction_var): Avoid double recording of an increment.\n\nFrom-SVN: r34153", "tree": {"sha": "23deba3bdcf72e5708b166a15f5e267fa74780b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23deba3bdcf72e5708b166a15f5e267fa74780b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af1980974939d286cf7d8341a902c0824a52ad0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1980974939d286cf7d8341a902c0824a52ad0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1980974939d286cf7d8341a902c0824a52ad0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1980974939d286cf7d8341a902c0824a52ad0e/comments", "author": null, "committer": null, "parents": [{"sha": "73bb94549e0777fbd981ad68745efa6c0715f0c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bb94549e0777fbd981ad68745efa6c0715f0c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bb94549e0777fbd981ad68745efa6c0715f0c5"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "5f2ac8d4407411ffafbd28edba85a284b8757887", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1980974939d286cf7d8341a902c0824a52ad0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1980974939d286cf7d8341a902c0824a52ad0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af1980974939d286cf7d8341a902c0824a52ad0e", "patch": "@@ -1,3 +1,7 @@\n+Thu May 25 02:27:22 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* loop.c (basic_induction_var): Avoid double recording of an increment.\n+\n Thu May 25 02:19:27 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* Back out this patch:"}, {"sha": "6746c98c2b12a68284e7cddcf7ed9c0691e1005b", "filename": "gcc/loop.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af1980974939d286cf7d8341a902c0824a52ad0e/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af1980974939d286cf7d8341a902c0824a52ad0e/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=af1980974939d286cf7d8341a902c0824a52ad0e", "patch": "@@ -5995,6 +5995,11 @@ basic_induction_var (loop, x, mode, dest_reg, p, inc_val, mult_val, location)\n       /* If this register is assigned in a previous insn, look at its\n \t source, but don't go outside the loop or past a label.  */\n \n+      /* If this sets a register to itself, we would repeat any previous\n+\t biv increment if we applied this strategy blindly.  */\n+      if (rtx_equal_p (dest_reg, x))\n+\treturn 0;\n+\n       insn = p;\n       while (1)\n \t{\n@@ -6066,7 +6071,8 @@ basic_induction_var (loop, x, mode, dest_reg, p, inc_val, mult_val, location)\n       if (insn)\n \tset = single_set (insn);\n \n-      if (set && SET_DEST (set) == XEXP (x, 0)\n+      if (! rtx_equal_p (dest_reg, XEXP (x, 0))\n+\t  && set && SET_DEST (set) == XEXP (x, 0)\n \t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && INTVAL (XEXP (x, 1)) >= 0\n \t  && GET_CODE (SET_SRC (set)) == ASHIFT"}]}