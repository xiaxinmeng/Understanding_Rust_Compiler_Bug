{"sha": "ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyODA3ZjRjZDlmMWJlYWExYjRmMGRlYWMyODI3OWUwMjcxOGJiOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-04-21T11:42:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-21T11:42:51Z"}, "message": "re PR libstdc++/39835 (Bootstrap failure: libstdc++-v3/include/bits/random.h:3630: error: expected \u00e2,\u00e2 or \u00e2...\u00e2 before numeric constant)\n\n2009-04-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/39835\n\t* include/bits/random.h: Avoid the badname __alpha (and, for\n\tconsistency, __beta too).\n\t* include/bits/random.tcc: Likewise.\n\nFrom-SVN: r146516", "tree": {"sha": "e0fcc3fc22ca93cd08ba47eed8cde8517ea95df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0fcc3fc22ca93cd08ba47eed8cde8517ea95df5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9/comments", "author": null, "committer": null, "parents": [{"sha": "2970ccb3bbd710ac4905c5b2da5cf7547210adee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2970ccb3bbd710ac4905c5b2da5cf7547210adee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2970ccb3bbd710ac4905c5b2da5cf7547210adee"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "dcd313b3a21806889c7917225cbeead1e7a1aa29", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "patch": "@@ -1,3 +1,10 @@\n+2009-04-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/39835\n+\t* include/bits/random.h: Avoid the badname __alpha (and, for\n+\tconsistency, __beta too).\n+\t* include/bits/random.tcc: Likewise.\n+\n 2009-04-19  Jan Hubicka  <jh@suse.cz>\n \n \t* include/c_compatibility/stdatomic.h (__atomic_flag_for_address): Use"}, {"sha": "425420607ced6eea23cae383610c9d94369aaa37", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "patch": "@@ -3627,9 +3627,9 @@ namespace std\n \tfriend class gamma_distribution<_RealType>;\n \n \texplicit\n-\tparam_type(_RealType __alpha = _RealType(1),\n-\t\t   _RealType __beta = _RealType(1))\n-\t: _M_alpha(__alpha), _M_beta(__beta)\n+\tparam_type(_RealType __alpha_val = _RealType(1),\n+\t\t   _RealType __beta_val = _RealType(1))\n+\t: _M_alpha(__alpha_val), _M_beta(__beta_val)\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > _RealType(0));\n \t  _M_initialize();\n@@ -3660,9 +3660,9 @@ namespace std\n        * @f$ \\alpha @f$ and @f$ \\beta @f$.\n        */\n       explicit\n-      gamma_distribution(_RealType __alpha = _RealType(1),\n-\t\t\t _RealType __beta = _RealType(1))\n-      : _M_param(__alpha, __beta)\n+      gamma_distribution(_RealType __alpha_val = _RealType(1),\n+\t\t\t _RealType __beta_val = _RealType(1))\n+      : _M_param(__alpha_val, __beta_val)\n       { }\n \n       explicit"}, {"sha": "8944c116b7e5c2815cc272a634afcbf5ce541937", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2807f4cd9f1beaa1b4f0deac28279e02718bb9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=ed2807f4cd9f1beaa1b4f0deac28279e02718bb9", "patch": "@@ -1921,26 +1921,26 @@ namespace std\n \t  __aurng(__urng);\n \n \tbool __reject;\n-\tconst _RealType __alpha = __param.alpha();\n-\tconst _RealType __beta = __param.beta();\n-\tif (__alpha >= 1)\n+\tconst _RealType __alpha_val = __param.alpha();\n+\tconst _RealType __beta_val = __param.beta();\n+\tif (__alpha_val >= 1)\n \t  {\n \t    // alpha - log(4)\n-\t    const result_type __b = __alpha\n+\t    const result_type __b = __alpha_val\n \t      - result_type(1.3862943611198906188344642429163531L);\n-\t    const result_type __c = __alpha + __param._M_l_d;\n+\t    const result_type __c = __alpha_val + __param._M_l_d;\n \t    const result_type __1l = 1 / __param._M_l_d;\n \n \t    // 1 + log(9 / 2)\n \t    const result_type __k = 2.5040773967762740733732583523868748L;\n \n \t    do\n \t      {\n-\t\tconst result_type __u = __aurng() / __beta;\n-\t\tconst result_type __v = __aurng() / __beta;\n+\t\tconst result_type __u = __aurng() / __beta_val;\n+\t\tconst result_type __v = __aurng() / __beta_val;\n \n \t\tconst result_type __y = __1l * std::log(__v / (1 - __v));\n-\t\t__x = __alpha * std::exp(__y);\n+\t\t__x = __alpha_val * std::exp(__y);\n \n \t\tconst result_type __z = __u * __v * __v;\n \t\tconst result_type __r = __b + __c * __y - __x;\n@@ -1953,12 +1953,12 @@ namespace std\n \t  }\n \telse\n \t  {\n-\t    const result_type __c = 1 / __alpha;\n+\t    const result_type __c = 1 / __alpha_val;\n \n \t    do\n \t      {\n-\t\tconst result_type __z = -std::log(__aurng() / __beta);\n-\t\tconst result_type __e = -std::log(__aurng() / __beta);\n+\t\tconst result_type __z = -std::log(__aurng() / __beta_val);\n+\t\tconst result_type __e = -std::log(__aurng() / __beta_val);\n \n \t\t__x = std::pow(__z, __c);\n \n@@ -1967,7 +1967,7 @@ namespace std\n \t    while (__reject);\n \t  }\n \n-\treturn __beta * __x;\n+\treturn __beta_val * __x;\n       }\n \n   template<typename _RealType, typename _CharT, typename _Traits>\n@@ -2005,10 +2005,10 @@ namespace std\n       const typename __ios_base::fmtflags __flags = __is.flags();\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n-      _RealType __alpha, __beta;\n-      __is >> __alpha >> __beta;\n+      _RealType __alpha_val, __beta_val;\n+      __is >> __alpha_val >> __beta_val;\n       __x.param(typename gamma_distribution<_RealType>::\n-\t\tparam_type(__alpha, __beta));\n+\t\tparam_type(__alpha_val, __beta_val));\n \n       __is.flags(__flags);\n       return __is;"}]}