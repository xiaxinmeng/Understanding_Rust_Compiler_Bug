{"sha": "f7f14de056eb3887e70f29b0f29da4025f746559", "node_id": "C_kwDOANBUbNoAKGY3ZjE0ZGUwNTZlYjM4ODdlNzBmMjliMGYyOWRhNDAyNWY3NDY1NTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-02T14:28:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T14:28:27Z"}, "message": "Merge #902\n\n902: Fix enum variant discriminant values r=philberty a=philberty\n\nEnum discriminants before this patch were either:\r\n\r\n- The hir-id of the tuple/struct variant\r\n- The expression of the specified discriminant\r\n- Computed int64 of the dataless variant\r\n\r\nEach of these had tree ways of computing the qualifier this patch changes\r\nthis to be more in line with rust to compute the values unless its a\r\nspecified discriminant value. In order to compile this we now create an\r\nimplicit HIR::LiteralExpr and feed this into our constexpr code so it\r\nreuses the same path as the variants with a specified constant\r\ndiscriminant.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "7a9abfd0b49074b315715fa1b2cef51951cabdca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a9abfd0b49074b315715fa1b2cef51951cabdca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7f14de056eb3887e70f29b0f29da4025f746559", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+pULCRBK7hj4Ov3rIwAAbEQIAKIMhyi1StdnkN1qAh4L1yF9\nKlw1eYXFRlTaY8bkAhY35Hjyf7cOUP9g9qW3pB+jfKKsxzBn3ziC0t5EDwdqVyoK\nLk3jk+xHaJm5JCbH6eu4p55Nq3fmG/vB1SIOt6PoOxvb9fLiD+JZZqwORe3E9tGN\nL8G3OjlF7Gz5flMRW7+S9mGo31gX+qTmnZx08rSkbUNUbNekjnqNrjVE0oU4faay\n4FFImJ5Z84XbKtd4cOdLqQ6veQP+hfyAeTXNHwBhoFk5FJ3tHKvoloi35JyDyEww\nVCjWO6yQblYtLVlqghlGPlXN5wYjKsavtngY4HQ4SQxcW8UYzKAaqH2lhOOV8pA=\n=IXLh\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a9abfd0b49074b315715fa1b2cef51951cabdca\nparent 6e5f8f76cbe47880ceae1bcf0bf7f07f601517ec\nparent 46ee20dbdbb02b40ae199293dfa774fafad72c0e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643812107 +0000\ncommitter GitHub <noreply@github.com> 1643812107 +0000\n\nMerge #902\n\n902: Fix enum variant discriminant values r=philberty a=philberty\n\nEnum discriminants before this patch were either:\r\n\r\n- The hir-id of the tuple/struct variant\r\n- The expression of the specified discriminant\r\n- Computed int64 of the dataless variant\r\n\r\nEach of these had tree ways of computing the qualifier this patch changes\r\nthis to be more in line with rust to compute the values unless its a\r\nspecified discriminant value. In order to compile this we now create an\r\nimplicit HIR::LiteralExpr and feed this into our constexpr code so it\r\nreuses the same path as the variants with a specified constant\r\ndiscriminant.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f14de056eb3887e70f29b0f29da4025f746559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f14de056eb3887e70f29b0f29da4025f746559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f14de056eb3887e70f29b0f29da4025f746559/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5f8f76cbe47880ceae1bcf0bf7f07f601517ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5f8f76cbe47880ceae1bcf0bf7f07f601517ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5f8f76cbe47880ceae1bcf0bf7f07f601517ec"}, {"sha": "46ee20dbdbb02b40ae199293dfa774fafad72c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ee20dbdbb02b40ae199293dfa774fafad72c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ee20dbdbb02b40ae199293dfa774fafad72c0e"}], "stats": {"total": 260, "additions": 134, "deletions": 126}, "files": [{"sha": "ae4a841ad21a9f3d2efcc84712b696da6a222ef5", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -397,13 +397,11 @@ CompileExpr::visit (HIR::CallExpr &expr)\n       std::vector<tree> ctor_arguments;\n       if (adt->is_enum ())\n \t{\n-\t  HirId variant_id = variant->get_id ();\n-\t  mpz_t val;\n-\t  mpz_init_set_ui (val, variant_id);\n+\t  HIR::Expr *discrim_expr = variant->get_discriminant ();\n+\t  tree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n+\t  tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+\t  tree qualifier = folded_discrim_expr;\n \n-\t  tree t = TyTyResolveCompile::get_implicit_enumeral_node_type (ctx);\n-\t  tree qualifier\n-\t    = double_int_to_tree (t, mpz_get_double_int (t, val, true));\n \t  ctor_arguments.push_back (qualifier);\n \t}\n       for (auto &arg : arguments)"}, {"sha": "43eff7220457c09fd2b085cc3df8d251a108c633", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-compile-resolve-path.h\"\n #include \"rust-compile-block.h\"\n #include \"rust-compile-struct-field-expr.h\"\n+#include \"rust-constexpr.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -488,13 +489,10 @@ class CompileExpr : public HIRCompileBase\n     std::vector<tree> ctor_arguments;\n     if (adt->is_enum ())\n       {\n-\tHirId variant_id = variant->get_id ();\n-\tmpz_t val;\n-\tmpz_init_set_ui (val, variant_id);\n-\n-\ttree t = TyTyResolveCompile::get_implicit_enumeral_node_type (ctx);\n-\ttree qualifier\n-\t  = double_int_to_tree (t, mpz_get_double_int (t, val, true));\n+\tHIR::Expr *discrim_expr = variant->get_discriminant ();\n+\ttree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n+\ttree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+\ttree qualifier = folded_discrim_expr;\n \n \tctor_arguments.push_back (qualifier);\n       }"}, {"sha": "d715c7c4f205076e2d1a2dff5f9a165b291033d7", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -48,33 +48,10 @@ CompilePatternCaseLabelExpr::visit (HIR::PathInExpression &pattern)\n   ok = adt->lookup_variant_by_id (variant_id, &variant);\n   rust_assert (ok);\n \n-  tree case_low = error_mark_node;\n-  if (variant->is_specified_discriminant_node ())\n-    {\n-      auto discrim_node = variant->get_discriminant_node ();\n-      auto &discrim_expr = discrim_node->get_discriminant_expression ();\n-\n-      tree discrim_expr_node = CompileExpr::Compile (discrim_expr.get (), ctx);\n-      tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n-      case_low = folded_discrim_expr;\n-    }\n-  else\n-    {\n-      mpz_t disciminantl;\n-      if (variant->get_variant_type () == TyTy::VariantDef::VariantType::NUM)\n-\t{\n-\t  mpz_init_set_ui (disciminantl, variant->get_discriminant ());\n-\t}\n-      else\n-\t{\n-\t  HirId variant_id = variant->get_id ();\n-\t  mpz_init_set_ui (disciminantl, variant_id);\n-\t}\n-\n-      tree t = TyTyResolveCompile::get_implicit_enumeral_node_type (ctx);\n-      case_low\n-\t= double_int_to_tree (t, mpz_get_double_int (t, disciminantl, true));\n-    }\n+  HIR::Expr *discrim_expr = variant->get_discriminant ();\n+  tree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n+  tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+  tree case_low = folded_discrim_expr;\n \n   case_label_expr\n     = build_case_label (case_low, NULL_TREE, associated_case_label);"}, {"sha": "c6240463eaebb36ba9085a6422d0274e492637c7", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -86,33 +86,19 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n \t\t\t\t      &union_disriminator))\n \treturn ctx->get_backend ()->error_expression ();\n \n-      // FIXME should really return error_mark_node and or rust_internal_error\n-      // error_mark_node\n+      // this can only be for discriminant variants the others are built up\n+      // using call-expr or struct-init\n       rust_assert (variant->get_variant_type ()\n \t\t   == TyTy::VariantDef::VariantType::NUM);\n \n       // we need the actual gcc type\n       tree compiled_adt_type = TyTyResolveCompile::compile (ctx, adt);\n \n       // make the ctor for the union\n-      tree qualifier = error_mark_node;\n-      if (variant->is_specified_discriminant_node ())\n-\t{\n-\t  auto discrim_node = variant->get_discriminant_node ();\n-\t  auto &discrim_expr = discrim_node->get_discriminant_expression ();\n-\n-\t  tree discrim_expr_node\n-\t    = CompileExpr::Compile (discrim_expr.get (), ctx);\n-\t  tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n-\t  qualifier = folded_discrim_expr;\n-\t}\n-      else\n-\t{\n-\t  mpz_t val;\n-\t  mpz_init_set_ui (val, variant->get_discriminant ());\n-\t  tree t = TyTyResolveCompile::get_implicit_enumeral_node_type (ctx);\n-\t  qualifier = double_int_to_tree (t, mpz_get_double_int (t, val, true));\n-\t}\n+      HIR::Expr *discrim_expr = variant->get_discriminant ();\n+      tree discrim_expr_node = CompileExpr::Compile (discrim_expr, ctx);\n+      tree folded_discrim_expr = ConstCtx::fold (discrim_expr_node);\n+      tree qualifier = folded_discrim_expr;\n \n       return ctx->get_backend ()->constructor_expression (compiled_adt_type,\n \t\t\t\t\t\t\t  true, {qualifier},"}, {"sha": "cff3dbb36160d788793a8c40272576bf5933cc58", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -340,6 +340,15 @@ class ResolveItem : public ResolverBase\n   }\n \n   /* EnumItem doesn't need to be handled, no fields.  */\n+  void visit (AST::EnumItem &item) override\n+  {\n+    auto decl\n+      = CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ());\n+    auto path = prefix.append (decl);\n+    auto cpath = canonical_prefix.append (decl);\n+    mappings->insert_canonical_path (mappings->get_current_crate (),\n+\t\t\t\t     item.get_node_id (), cpath);\n+  }\n \n   void visit (AST::EnumItemTuple &item) override\n   {"}, {"sha": "83d9cf5111c09e3739e8c697d7e4b90047cf42cd", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.h", "status": "modified", "additions": 85, "deletions": 12, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -48,9 +48,30 @@ class TypeCheckEnumItem : public TypeCheckBase\n     if (last_discriminant == INT64_MAX)\n       rust_error_at (item.get_locus (), \"discriminant too big\");\n \n-    variant\n-      = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n-\t\t\t      item.get_identifier (), last_discriminant + 1);\n+    Analysis::NodeMapping mapping (item.get_mappings ().get_crate_num (),\n+\t\t\t\t   item.get_mappings ().get_nodeid (),\n+\t\t\t\t   mappings->get_next_hir_id (\n+\t\t\t\t     item.get_mappings ().get_crate_num ()),\n+\t\t\t\t   item.get_mappings ().get_local_defid ());\n+    HIR::LiteralExpr *discim_expr\n+      = new HIR::LiteralExpr (mapping, std::to_string (last_discriminant),\n+\t\t\t      HIR::Literal::LitType::INT,\n+\t\t\t      PrimitiveCoreType::CORETYPE_I64,\n+\t\t\t      item.get_locus ());\n+\n+    TyTy::BaseType *isize = nullptr;\n+    bool ok = context->lookup_builtin (\"isize\", &isize);\n+    rust_assert (ok);\n+    context->insert_type (mapping, isize);\n+\n+    const CanonicalPath *canonical_path = nullptr;\n+    ok = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n+\t\t\t\t\t  item.get_mappings ().get_nodeid (),\n+\t\t\t\t\t  &canonical_path);\n+    rust_assert (ok);\n+\n+    variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t\t    item.get_identifier (), discim_expr);\n   }\n \n   void visit (HIR::EnumItemDiscriminant &item) override\n@@ -71,8 +92,16 @@ class TypeCheckEnumItem : public TypeCheckBase\n     if (unified->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n \n+    const CanonicalPath *canonical_path = nullptr;\n+    bool ok\n+      = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n+\t\t\t\t\t item.get_mappings ().get_nodeid (),\n+\t\t\t\t\t &canonical_path);\n+    rust_assert (ok);\n+\n     variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n-\t\t\t\t    item.get_identifier (), &item);\n+\t\t\t\t    item.get_identifier (),\n+\t\t\t\t    item.get_discriminant_expression ().get ());\n   }\n \n   void visit (HIR::EnumItemTuple &item) override\n@@ -95,10 +124,32 @@ class TypeCheckEnumItem : public TypeCheckBase\n \tidx++;\n       }\n \n-    variant\n-      = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n-\t\t\t      item.get_identifier (),\n-\t\t\t      TyTy::VariantDef::VariantType::TUPLE, fields);\n+    Analysis::NodeMapping mapping (item.get_mappings ().get_crate_num (),\n+\t\t\t\t   item.get_mappings ().get_nodeid (),\n+\t\t\t\t   mappings->get_next_hir_id (\n+\t\t\t\t     item.get_mappings ().get_crate_num ()),\n+\t\t\t\t   item.get_mappings ().get_local_defid ());\n+    HIR::LiteralExpr *discim_expr\n+      = new HIR::LiteralExpr (mapping, std::to_string (last_discriminant),\n+\t\t\t      HIR::Literal::LitType::INT,\n+\t\t\t      PrimitiveCoreType::CORETYPE_I64,\n+\t\t\t      item.get_locus ());\n+\n+    TyTy::BaseType *isize = nullptr;\n+    bool ok = context->lookup_builtin (\"isize\", &isize);\n+    rust_assert (ok);\n+    context->insert_type (mapping, isize);\n+\n+    const CanonicalPath *canonical_path = nullptr;\n+    ok = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n+\t\t\t\t\t  item.get_mappings ().get_nodeid (),\n+\t\t\t\t\t  &canonical_path);\n+    rust_assert (ok);\n+\n+    variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t\t    item.get_identifier (),\n+\t\t\t\t    TyTy::VariantDef::VariantType::TUPLE,\n+\t\t\t\t    discim_expr, fields);\n   }\n \n   void visit (HIR::EnumItemStruct &item) override\n@@ -119,10 +170,32 @@ class TypeCheckEnumItem : public TypeCheckBase\n \t\t\t      ty_field->get_field_type ());\n       }\n \n-    variant\n-      = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n-\t\t\t      item.get_identifier (),\n-\t\t\t      TyTy::VariantDef::VariantType::STRUCT, fields);\n+    Analysis::NodeMapping mapping (item.get_mappings ().get_crate_num (),\n+\t\t\t\t   item.get_mappings ().get_nodeid (),\n+\t\t\t\t   mappings->get_next_hir_id (\n+\t\t\t\t     item.get_mappings ().get_crate_num ()),\n+\t\t\t\t   item.get_mappings ().get_local_defid ());\n+    HIR::LiteralExpr *discrim_expr\n+      = new HIR::LiteralExpr (mapping, std::to_string (last_discriminant),\n+\t\t\t      HIR::Literal::LitType::INT,\n+\t\t\t      PrimitiveCoreType::CORETYPE_I64,\n+\t\t\t      item.get_locus ());\n+\n+    TyTy::BaseType *isize = nullptr;\n+    bool ok = context->lookup_builtin (\"isize\", &isize);\n+    rust_assert (ok);\n+    context->insert_type (mapping, isize);\n+\n+    const CanonicalPath *canonical_path = nullptr;\n+    ok = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n+\t\t\t\t\t  item.get_mappings ().get_nodeid (),\n+\t\t\t\t\t  &canonical_path);\n+    rust_assert (ok);\n+\n+    variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t\t    item.get_identifier (),\n+\t\t\t\t    TyTy::VariantDef::VariantType::STRUCT,\n+\t\t\t\t    discrim_expr, fields);\n   }\n \n private:"}, {"sha": "b287fe5f1600ec233d93ed6955f1d83c5c0071a7", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -171,7 +171,7 @@ class TypeCheckStmt : public TypeCheckBase\n     std::vector<TyTy::VariantDef *> variants;\n     variants.push_back (new TyTy::VariantDef (\n       struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n-      TyTy::VariantDef::VariantType::TUPLE, std::move (fields)));\n+      TyTy::VariantDef::VariantType::TUPLE, nullptr, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -219,10 +219,8 @@ class TypeCheckStmt : public TypeCheckBase\n \tTyTy::VariantDef *field_type\n \t  = TypeCheckEnumItem::Resolve (variant.get (), discriminant_value);\n \n+\tdiscriminant_value++;\n \tvariants.push_back (field_type);\n-\tif (field_type->get_variant_type ()\n-\t    == TyTy::VariantDef::VariantType::NUM)\n-\t  discriminant_value = field_type->get_discriminant ();\n       }\n \n     TyTy::BaseType *type\n@@ -281,7 +279,7 @@ class TypeCheckStmt : public TypeCheckBase\n     std::vector<TyTy::VariantDef *> variants;\n     variants.push_back (new TyTy::VariantDef (\n       struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n-      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n+      TyTy::VariantDef::VariantType::STRUCT, nullptr, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -339,7 +337,7 @@ class TypeCheckStmt : public TypeCheckBase\n     std::vector<TyTy::VariantDef *> variants;\n     variants.push_back (new TyTy::VariantDef (\n       union_decl.get_mappings ().get_hirid (), union_decl.get_identifier (),\n-      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n+      TyTy::VariantDef::VariantType::STRUCT, nullptr, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (union_decl.get_mappings ().get_hirid (),"}, {"sha": "c447920cdf275020bb6f0578b703e555b4b3f826", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -106,7 +106,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     std::vector<TyTy::VariantDef *> variants;\n     variants.push_back (new TyTy::VariantDef (\n       struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n-      TyTy::VariantDef::VariantType::TUPLE, std::move (fields)));\n+      TyTy::VariantDef::VariantType::TUPLE, nullptr, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -175,7 +175,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     std::vector<TyTy::VariantDef *> variants;\n     variants.push_back (new TyTy::VariantDef (\n       struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n-      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n+      TyTy::VariantDef::VariantType::STRUCT, nullptr, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -222,10 +222,8 @@ class TypeCheckTopLevel : public TypeCheckBase\n \tTyTy::VariantDef *field_type\n \t  = TypeCheckEnumItem::Resolve (variant.get (), discriminant_value);\n \n+\tdiscriminant_value++;\n \tvariants.push_back (field_type);\n-\tif (field_type->get_variant_type ()\n-\t    == TyTy::VariantDef::VariantType::NUM)\n-\t  discriminant_value = field_type->get_discriminant ();\n       }\n \n     TyTy::BaseType *type\n@@ -288,7 +286,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n     std::vector<TyTy::VariantDef *> variants;\n     variants.push_back (new TyTy::VariantDef (\n       union_decl.get_mappings ().get_hirid (), union_decl.get_identifier (),\n-      TyTy::VariantDef::VariantType::STRUCT, std::move (fields)));\n+      TyTy::VariantDef::VariantType::STRUCT, nullptr, std::move (fields)));\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (union_decl.get_mappings ().get_hirid (),"}, {"sha": "6f392b0fdcb860d1519b6088632085cbeaac9cd2", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 13, "deletions": 42, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f14de056eb3887e70f29b0f29da4025f746559/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=f7f14de056eb3887e70f29b0f29da4025f746559", "patch": "@@ -1027,44 +1027,26 @@ class VariantDef\n     return \"\";\n   }\n \n-  VariantDef (HirId id, std::string identifier, int discriminant)\n-    : id (id), identifier (identifier), discriminant (discriminant),\n-      discriminant_node (nullptr)\n+  VariantDef (HirId id, std::string identifier, HIR::Expr *discriminant)\n+    : id (id), identifier (identifier), discriminant (discriminant)\n   {\n     type = VariantType::NUM;\n     fields = {};\n   }\n \n-  VariantDef (HirId id, std::string identifier,\n-\t      HIR::EnumItemDiscriminant *discriminant)\n-    : id (id), identifier (identifier), discriminant_node (discriminant)\n-  {\n-    type = VariantType::NUM;\n-    fields = {};\n-  }\n-\n-  VariantDef (HirId id, std::string identifier, VariantType type,\n-\t      std::vector<StructFieldType *> fields)\n-    : id (id), identifier (identifier), type (type), fields (fields),\n-      discriminant_node (nullptr)\n-  {\n-    discriminant = 0;\n-    rust_assert (type == VariantType::TUPLE || type == VariantType::STRUCT);\n-  }\n-\n   VariantDef (HirId id, std::string identifier, VariantType type,\n-\t      int discriminant, std::vector<StructFieldType *> fields)\n+\t      HIR::Expr *discriminant, std::vector<StructFieldType *> fields)\n     : id (id), identifier (identifier), type (type),\n       discriminant (discriminant), fields (fields)\n   {\n-    rust_assert ((type == VariantType::NUM && fields.empty ())\n-\t\t || (type == VariantType::TUPLE && discriminant == 0)\n-\t\t || (type == VariantType::STRUCT && discriminant == 0));\n+    rust_assert (\n+      (type == VariantType::NUM && fields.empty ())\n+      || (type == VariantType::TUPLE || type == VariantType::STRUCT));\n   }\n \n   static VariantDef &get_error_node ()\n   {\n-    static VariantDef node = VariantDef (UNKNOWN_HIRID, \"\", -1);\n+    static VariantDef node = VariantDef (UNKNOWN_HIRID, \"\", nullptr);\n     return node;\n   }\n \n@@ -1078,12 +1060,6 @@ class VariantDef\n \n   std::string get_identifier () const { return identifier; }\n \n-  int get_discriminant () const\n-  {\n-    rust_assert (!is_specified_discriminant_node ());\n-    return discriminant;\n-  }\n-\n   size_t num_fields () const { return fields.size (); }\n   StructFieldType *get_field_at_index (size_t index)\n   {\n@@ -1118,21 +1094,16 @@ class VariantDef\n     return false;\n   }\n \n-  bool is_specified_discriminant_node () const\n+  HIR::Expr *get_discriminant () const\n   {\n-    return discriminant_node != nullptr;\n-  }\n-\n-  HIR::EnumItemDiscriminant *get_discriminant_node () const\n-  {\n-    rust_assert (is_specified_discriminant_node ());\n-    return discriminant_node;\n+    rust_assert (discriminant != nullptr);\n+    return discriminant;\n   }\n \n   std::string as_string () const\n   {\n     if (type == VariantType::NUM)\n-      return identifier + \" = \" + std::to_string (discriminant);\n+      return identifier + \" = \" + discriminant->as_string ();\n \n     std::string buffer;\n     for (size_t i = 0; i < fields.size (); ++i)\n@@ -1184,9 +1155,9 @@ class VariantDef\n   HirId id;\n   std::string identifier;\n   VariantType type;\n-  int discriminant; /* Either discriminant or fields are valid.  */\n+  // can either be a structure or a discriminant value\n+  HIR::Expr *discriminant;\n   std::vector<StructFieldType *> fields;\n-  HIR::EnumItemDiscriminant *discriminant_node;\n };\n \n class ADTType : public BaseType, public SubstitutionRef"}]}