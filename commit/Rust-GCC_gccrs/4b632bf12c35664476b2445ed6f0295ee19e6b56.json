{"sha": "4b632bf12c35664476b2445ed6f0295ee19e6b56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2MzJiZjEyYzM1NjY0NDc2YjI0NDVlZDZmMDI5NWVlMTllNmI1Ng==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-03-13T11:40:25Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1999-03-13T11:40:25Z"}, "message": "arm.c (arm_split_constant): Don't try to force a constant to memory after arm_reorg has run.\n\n* arm.c (arm_split_constant): Don't try to force a constant to\nmemory after arm_reorg has run.\n(after_arm_reorg): New static variable.\n(arm_reorg): Set it.\n(output_func_epilogue): Clear it.\n\nFrom-SVN: r25742", "tree": {"sha": "3fae1b7f4220dfa1a76d91b29c2f6290a9a06aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fae1b7f4220dfa1a76d91b29c2f6290a9a06aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b632bf12c35664476b2445ed6f0295ee19e6b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b632bf12c35664476b2445ed6f0295ee19e6b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b632bf12c35664476b2445ed6f0295ee19e6b56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b632bf12c35664476b2445ed6f0295ee19e6b56/comments", "author": null, "committer": null, "parents": [{"sha": "4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4995028c823a83c92c43d5fbdde25be8c7ed2e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4995028c823a83c92c43d5fbdde25be8c7ed2e6b"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "5e2ec7ac167974a655f1ad62348b353f53e71a1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b632bf12c35664476b2445ed6f0295ee19e6b56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b632bf12c35664476b2445ed6f0295ee19e6b56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b632bf12c35664476b2445ed6f0295ee19e6b56", "patch": "@@ -1,3 +1,11 @@\n+Sat Mar 13 11:36:16 1999  Richard Earnshaw (rearnsha@arm.com)\n+\n+\t* arm.c (arm_split_constant): Don't try to force a constant to\n+\tmemory after arm_reorg has run.\n+\t(after_arm_reorg): New static variable.\n+\t(arm_reorg): Set it.\n+\t(output_func_epilogue): Clear it.\n+\n Fri Mar 12 20:26:32 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n \n \t* configure.in ({rs6000,powerpc}-ibm-aix*): Set float_format to none."}, {"sha": "4a393c94e119ab2000c868c109a3ea92b479f7b0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b632bf12c35664476b2445ed6f0295ee19e6b56/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b632bf12c35664476b2445ed6f0295ee19e6b56/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4b632bf12c35664476b2445ed6f0295ee19e6b56", "patch": "@@ -128,6 +128,8 @@ int lr_save_eliminated;\n \n static int return_used_this_function;\n \n+static int after_arm_reorg = 0;\n+\n static int arm_constant_limit = 3;\n \n /* For an explanation of these variables, see final_prescan_insn below.  */\n@@ -604,8 +606,15 @@ arm_split_constant (code, mode, val, target, source, subtargets)\n       || (GET_CODE (target) == REG && GET_CODE (source) == REG\n \t  && REGNO (target) != REGNO (source)))\n     {\n-      if (arm_gen_constant (code, mode, val, target, source, 1, 0)\n-\t  > arm_constant_limit + (code != SET))\n+      /* After arm_reorg has been called, we can't fix up expensive\n+\t constants by pushing them into memory so we must synthesise\n+\t them in-line, regardless of the cost.  This is only likely to\n+\t be more costly on chips that have load delay slots and we are\n+\t compiling without running the scheduler (so no splitting\n+\t occurred before the final instruction emission.  */\n+      if (! after_arm_reorg\n+\t  && (arm_gen_constant (code, mode, val, target, source, 1, 0)\n+\t      > arm_constant_limit + (code != SET)))\n \t{\n \t  if (code == SET)\n \t    {\n@@ -4022,6 +4031,8 @@ arm_reorg (first)\n \t  insn = scan;\n \t}\n     }\n+\n+  after_arm_reorg = 1;\n }\n \n \f\n@@ -5378,7 +5389,9 @@ output_func_epilogue (f, frame_size)\n \n epilogue_done:\n \n+  /* Reset the ARM-specific per-function variables.  */\n   current_function_anonymous_args = 0;\n+  after_arm_reorg = 0;\n }\n \n static void"}]}