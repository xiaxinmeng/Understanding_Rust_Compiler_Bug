{"sha": "57c2d13fa01341b6b3a843d321b0d8bd2518a4dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjMmQxM2ZhMDEzNDFiNmIzYTg0M2QzMjFiMGQ4YmQyNTE4YTRkZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-08-16T14:01:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-16T14:01:53Z"}, "message": "i386.md (*rep_movdi_rex64): Emit \"rep\" prefix on the same line as the instruction for all asm dialects.\n\n\t* config/i386/i386.md (*rep_movdi_rex64): Emit \"rep\" prefix on\n\tthe same line as the instruction for all asm dialects.\n\t(*rep_movsi): Ditto.\n\t(*rep_movsi_rex64): Ditto.\n\t(*rep_movqi): Ditto.\n\t(*rep_movqi_rex64): Ditto.\n\t(*rep_stosdi_rex64): Ditto.\n\t(*rep_stossi): Ditto.\n\t(*rep_stossi_rex64): Ditto.\n\t(*rep_stosqi): Ditto.\n\t(*rep_stosqi_rex64): Ditto.\n\t(*cmpstrnqi_nz_1): Ditto.\n\t(*cmpstrnqi_nz_rex_1): Ditto.\n\t(*cmpstrnqi_1): Ditto.\n\t(*cmpstrnqi_rex_1): Ditto.\n\t(*strlenqi_1): Ditto.\n\t(*strlenqi_rex_1): Ditto.\n\t* config/i386/sync.md (*sync_compare_and_swap<mode>): Emit \"lock\"\n\tprefix on the same line as the instruction for all asm dialects.\n\t(sync_double_compare_and_swap<mode>): Ditto.\n\t(*sync_double_compare_and_swapdi_pic): Ditto.\n\t(*sync_compare_and_swap_cc<mode>): Ditto.\n\t(sync_double_compare_and_swap_cc<mode>): Ditto.\n\t(*sync_double_compare_and_swap_ccdi_pic): Ditto.\n\t(sync_old_add<mode>): Ditto.\n\t(sync_add<mode>): Ditto.\n\t(sync_sub<mode>): Ditto.\n\t(sync_ior<mode>): Ditto.\n\t(sync_and<mode>): Ditto.\n\t(sync_xor<mode>): Ditto.\n\nFrom-SVN: r127558", "tree": {"sha": "d64991fcb1a9391ade764fdf4179c1aafe5fa26c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d64991fcb1a9391ade764fdf4179c1aafe5fa26c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49e308f8c34eeaef4f32699067e9712606ceede0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e308f8c34eeaef4f32699067e9712606ceede0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e308f8c34eeaef4f32699067e9712606ceede0"}], "stats": {"total": 99, "additions": 66, "deletions": 33}, "files": [{"sha": "6829864d57d4618cec7412a901d88f186c989d6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57c2d13fa01341b6b3a843d321b0d8bd2518a4dd", "patch": "@@ -1,3 +1,36 @@\n+2007-08-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*rep_movdi_rex64): Emit \"rep\" prefix on\n+\tthe same line as the instruction for all asm dialects.\n+\t(*rep_movsi): Ditto.\n+\t(*rep_movsi_rex64): Ditto.\n+\t(*rep_movqi): Ditto.\n+\t(*rep_movqi_rex64): Ditto.\n+\t(*rep_stosdi_rex64): Ditto.\n+\t(*rep_stossi): Ditto.\n+\t(*rep_stossi_rex64): Ditto.\n+\t(*rep_stosqi): Ditto.\n+\t(*rep_stosqi_rex64): Ditto.\n+\t(*cmpstrnqi_nz_1): Ditto.\n+\t(*cmpstrnqi_nz_rex_1): Ditto.\n+\t(*cmpstrnqi_1): Ditto.\n+\t(*cmpstrnqi_rex_1): Ditto.\n+\t(*strlenqi_1): Ditto.\n+\t(*strlenqi_rex_1): Ditto.\n+\t* config/i386/sync.md (*sync_compare_and_swap<mode>): Emit \"lock\"\n+\tprefix on the same line as the instruction for all asm dialects.\n+\t(sync_double_compare_and_swap<mode>): Ditto.\n+\t(*sync_double_compare_and_swapdi_pic): Ditto.\n+\t(*sync_compare_and_swap_cc<mode>): Ditto.\n+\t(sync_double_compare_and_swap_cc<mode>): Ditto.\n+\t(*sync_double_compare_and_swap_ccdi_pic): Ditto.\n+\t(sync_old_add<mode>): Ditto.\n+\t(sync_add<mode>): Ditto.\n+\t(sync_sub<mode>): Ditto.\n+\t(sync_ior<mode>): Ditto.\n+\t(sync_and<mode>): Ditto.\n+\t(sync_xor<mode>): Ditto.\n+\n 2007-08-16  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR middle-end/32897"}, {"sha": "b49e9a942645d836a4f79f3564d0ba5f5831b705", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=57c2d13fa01341b6b3a843d321b0d8bd2518a4dd", "patch": "@@ -14493,7 +14493,7 @@\n   [(return)\n    (unspec [(const_int 0)] UNSPEC_REP)]\n   \"reload_completed\"\n-  \"rep {;} ret\"\n+  \"rep{\\;| }ret\"\n   [(set_attr \"length\" \"1\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -18311,7 +18311,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"TARGET_64BIT\"\n-  \"{rep\\;movsq|rep movsq}\"\n+  \"rep movsq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -18330,7 +18330,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"!TARGET_64BIT\"\n-  \"{rep\\;movsl|rep movsd}\"\n+  \"rep movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -18349,7 +18349,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"TARGET_64BIT\"\n-  \"{rep\\;movsl|rep movsd}\"\n+  \"rep movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -18366,7 +18366,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"!TARGET_64BIT\"\n-  \"{rep\\;movsb|rep movsb}\"\n+  \"rep movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -18383,7 +18383,7 @@\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n   \"TARGET_64BIT\"\n-  \"{rep\\;movsb|rep movsb}\"\n+  \"rep movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n@@ -18563,7 +18563,7 @@\n    (use (match_operand:DI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"{rep\\;stosq|rep stosq}\"\n+  \"rep stosq\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -18580,7 +18580,7 @@\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"!TARGET_64BIT\"\n-  \"{rep\\;stosl|rep stosd}\"\n+  \"rep stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -18597,7 +18597,7 @@\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"{rep\\;stosl|rep stosd}\"\n+  \"rep stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -18613,7 +18613,7 @@\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"!TARGET_64BIT\"\n-  \"{rep\\;stosb|rep stosb}\"\n+  \"rep stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -18629,7 +18629,7 @@\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n   \"TARGET_64BIT\"\n-  \"{rep\\;stosb|rep stosb}\"\n+  \"rep stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n@@ -18738,7 +18738,7 @@\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n   \"!TARGET_64BIT\"\n-  \"repz{\\;| }cmpsb\"\n+  \"repz cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -18753,7 +18753,7 @@\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n   \"TARGET_64BIT\"\n-  \"repz{\\;| }cmpsb\"\n+  \"repz cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -18788,7 +18788,7 @@\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n   \"!TARGET_64BIT\"\n-  \"repz{\\;| }cmpsb\"\n+  \"repz cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -18806,7 +18806,7 @@\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n   \"TARGET_64BIT\"\n-  \"repz{\\;| }cmpsb\"\n+  \"repz cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -18853,7 +18853,7 @@\n    (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\"\n-  \"repnz{\\;| }scasb\"\n+  \"repnz scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n@@ -18867,7 +18867,7 @@\n    (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n-  \"repnz{\\;| }scasb\"\n+  \"repnz scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])"}, {"sha": "7282381c0407d3707174539607245d2442fbcbb1", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c2d13fa01341b6b3a843d321b0d8bd2518a4dd/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=57c2d13fa01341b6b3a843d321b0d8bd2518a4dd", "patch": "@@ -81,7 +81,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_CMPXCHG\"\n-  \"lock{\\;| }cmpxchg{<modesuffix>\\t%3, %1| %1, %3}\")\n+  \"lock cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -95,7 +95,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock{\\;| }cmpxchg<doublemodesuffix>b{\\t| }%1\")\n+  \"lock cmpxchg<doublemodesuffix>b\\t%1\")\n \n ;; Theoretically we'd like to use constraint \"r\" (any reg) for operand\n ;; 3, but that includes ecx.  If operand 3 and 4 are the same (like when\n@@ -118,7 +118,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n-  \"xchg{l}\\t%%ebx, %3\\;lock{\\;| }cmpxchg8b{\\t| }%1\\;xchg{l}\\t%%ebx, %3\")\n+  \"xchg{l}\\t%%ebx, %3\\;lock cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_expand \"sync_compare_and_swap_cc<mode>\"\n   [(parallel\n@@ -176,7 +176,7 @@\n \t    [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"TARGET_CMPXCHG\"\n-  \"lock{\\;| }cmpxchg{<modesuffix>\\t%3, %1| %1, %3}\")\n+  \"lock cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap_cc<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -195,7 +195,7 @@\n \t    UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"\"\n-  \"lock{\\;| }cmpxchg<doublemodesuffix>b{\\t| }%1\")\n+  \"lock cmpxchg<doublemodesuffix>b\\t%1\")\n \n ;; See above for the explanation of using the constraint \"SD\" for\n ;; operand 3.\n@@ -216,7 +216,7 @@\n \t    UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n-  \"xchg{l}\\t%%ebx, %3\\;lock{\\;| }cmpxchg8b{\\t| }%1\\;xchg{l}\\t%%ebx, %3\")\n+  \"xchg{l}\\t%%ebx, %3\\;lock cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_insn \"sync_old_add<mode>\"\n   [(set (match_operand:IMODE 0 \"register_operand\" \"=<modeconstraint>\")\n@@ -227,7 +227,7 @@\n \t\t    (match_operand:IMODE 2 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_XADD\"\n-  \"lock{\\;| }xadd{<modesuffix>\\t%0, %1| %1, %0}\")\n+  \"lock xadd{<modesuffix>}\\t{%0, %1|%1, %0}\")\n \n ;; Recall that xchg implicitly sets LOCK#, so adding it again wastes space.\n (define_insn \"sync_lock_test_and_set<mode>\"\n@@ -251,12 +251,12 @@\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock{\\;| }inc{<modesuffix>\\t| }%0\";\n+\treturn \"lock inc{<modesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock{\\;| }dec{<modesuffix>\\t| }%0\";\n+\treturn \"lock dec{<modesuffix>}\\t%0\";\n     }\n \n-  return \"lock{\\;| }add{<modesuffix>\\t%1, %0| %0, %1}\";\n+  return \"lock add{<modesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n (define_insn \"sync_sub<mode>\"\n@@ -271,12 +271,12 @@\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock{\\;| }dec{<modesuffix>\\t| }%0\";\n+\treturn \"lock dec{<modesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock{\\;| }inc{<modesuffix>\\t| }%0\";\n+\treturn \"lock inc{<modesuffix>}\\t%0\";\n     }\n \n-  return \"lock{\\;| }sub{<modesuffix>\\t%1, %0| %0, %1}\";\n+  return \"lock sub{<modesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n (define_insn \"sync_ior<mode>\"\n@@ -287,7 +287,7 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock{\\;| }or{<modesuffix>\\t%1, %0| %0, %1}\")\n+  \"lock or{<modesuffix>}\\t{%1, %0|%0, %1}\")\n \n (define_insn \"sync_and<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -297,7 +297,7 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock{\\;| }and{<modesuffix>\\t%1, %0| %0, %1}\")\n+  \"lock and{<modesuffix>}\\t{%1, %0|%0, %1}\")\n \n (define_insn \"sync_xor<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -307,4 +307,4 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock{\\;| }xor{<modesuffix>\\t%1, %0| %0, %1}\")\n+  \"lock xor{<modesuffix>}\\t{%1, %0|%0, %1}\")"}]}