{"sha": "2aa89839f557b7467704ddffa4dc43a130e8d027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhODk4MzlmNTU3Yjc0Njc3MDRkZGZmYTRkYzQzYTEzMGU4ZDAyNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-01-15T08:57:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-01-15T08:57:28Z"}, "message": "re PR lto/83804 ([meta] LTO memory consumption)\n\n2018-01-15  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/83804\n\t* tree.c (free_lang_data_in_type): Always unlink TYPE_DECLs\n\tfrom TYPE_FIELDS.  Free TYPE_BINFO if not used by devirtualization.\n\tReset type names to their identifier if their TYPE_DECL doesn't\n\thave linkage (and thus is used for ODR and devirt).\n\t(save_debug_info_for_decl): Remove.\n\t(save_debug_info_for_type): Likewise.\n\t(add_tree_to_fld_list): Adjust.\n\t* tree-pretty-print.c (dump_generic_node): Make dumping of\n\ttype names more robust.\n\nFrom-SVN: r256685", "tree": {"sha": "a99b33d1bcb9e41f26e0dd07602f589777237722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99b33d1bcb9e41f26e0dd07602f589777237722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aa89839f557b7467704ddffa4dc43a130e8d027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa89839f557b7467704ddffa4dc43a130e8d027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa89839f557b7467704ddffa4dc43a130e8d027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa89839f557b7467704ddffa4dc43a130e8d027/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a55e8b53d059fbe33c5f016d8d9aca9731322ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55e8b53d059fbe33c5f016d8d9aca9731322ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55e8b53d059fbe33c5f016d8d9aca9731322ab7"}], "stats": {"total": 89, "additions": 30, "deletions": 59}, "files": [{"sha": "43c9cfa0ee83f9b79afc98444c54380cdfa808b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa89839f557b7467704ddffa4dc43a130e8d027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa89839f557b7467704ddffa4dc43a130e8d027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2aa89839f557b7467704ddffa4dc43a130e8d027", "patch": "@@ -1,3 +1,16 @@\n+2018-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/83804\n+\t* tree.c (free_lang_data_in_type): Always unlink TYPE_DECLs\n+\tfrom TYPE_FIELDS.  Free TYPE_BINFO if not used by devirtualization.\n+\tReset type names to their identifier if their TYPE_DECL doesn't\n+\thave linkage (and thus is used for ODR and devirt).\n+\t(save_debug_info_for_decl): Remove.\n+\t(save_debug_info_for_type): Likewise.\n+\t(add_tree_to_fld_list): Adjust.\n+\t* tree-pretty-print.c (dump_generic_node): Make dumping of\n+\ttype names more robust.\n+\n 2018-01-15  Richard Biener  <rguenther@suse.de>\n \n \t* BASE-VER: Bump to 8.0.1."}, {"sha": "54a8dfa3b6f68d62630484c5373deefa95684469", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa89839f557b7467704ddffa4dc43a130e8d027/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa89839f557b7467704ddffa4dc43a130e8d027/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=2aa89839f557b7467704ddffa4dc43a130e8d027", "patch": "@@ -1412,8 +1412,8 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n \t  pp_space (pp);\n \t  pp_left_paren (pp);\n \t  pp_string (pp, str);\n-\t  if (TYPE_NAME (node) && DECL_NAME (TYPE_NAME (node)))\n-\t    dump_decl_name (pp, TYPE_NAME (node), flags);\n+\t  if (TYPE_IDENTIFIER (node))\n+\t    dump_generic_node (pp, TYPE_NAME (node), spc, flags, false);\n \t  else if (flags & TDF_NOUID)\n \t    pp_printf (pp, \"<Txxxx>\");\n \t  else\n@@ -1816,8 +1816,8 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       if (TREE_CODE (node) == METHOD_TYPE)\n \t{\n \t  if (TYPE_METHOD_BASETYPE (node))\n-\t    dump_decl_name (pp, TYPE_NAME (TYPE_METHOD_BASETYPE (node)),\n-\t\t\t    flags);\n+\t    dump_generic_node (pp, TYPE_NAME (TYPE_METHOD_BASETYPE (node)),\n+\t\t\t       spc, flags, false);\n \t  else\n \t    pp_string (pp, \"<null method basetype>\");\n \t  pp_colon_colon (pp);"}, {"sha": "3c1403b429a45262b59dfda262c303571d103f38", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 55, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aa89839f557b7467704ddffa4dc43a130e8d027/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aa89839f557b7467704ddffa4dc43a130e8d027/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2aa89839f557b7467704ddffa4dc43a130e8d027", "patch": "@@ -5128,15 +5128,10 @@ free_lang_data_in_type (tree type)\n       TREE_PURPOSE (p) = NULL;\n   else if (RECORD_OR_UNION_TYPE_P (type))\n     {\n-      /* Remove members that are not FIELD_DECLs (and maybe\n-\t TYPE_DECLs) from the field list of an aggregate.  These occur\n-\t in C++.  */\n+      /* Remove members that are not FIELD_DECLs from the field list\n+\t of an aggregate.  These occur in C++.  */\n       for (tree *prev = &TYPE_FIELDS (type), member; (member = *prev);)\n-\tif (TREE_CODE (member) == FIELD_DECL\n-\t    || (TREE_CODE (member) == TYPE_DECL\n-\t\t&& !DECL_IGNORED_P (member)\n-\t\t&& debug_info_level > DINFO_LEVEL_TERSE\n-\t\t&& !is_redundant_typedef (member)))\n+\tif (TREE_CODE (member) == FIELD_DECL)\n \t  prev = &DECL_CHAIN (member);\n \telse\n \t  *prev = DECL_CHAIN (member);\n@@ -5150,15 +5145,9 @@ free_lang_data_in_type (tree type)\n \t{\n \t  free_lang_data_in_binfo (TYPE_BINFO (type));\n \t  /* We need to preserve link to bases and virtual table for all\n-\t     polymorphic types to make devirtualization machinery working.\n-\t     Debug output cares only about bases, but output also\n-\t     virtual table pointers so merging of -fdevirtualize and\n-\t     -fno-devirtualize units is easier.  */\n-\t  if ((!BINFO_VTABLE (TYPE_BINFO (type))\n-\t       || !flag_devirtualize)\n-\t      && ((!BINFO_N_BASE_BINFOS (TYPE_BINFO (type))\n-\t\t   && !BINFO_VTABLE (TYPE_BINFO (type)))\n-\t\t  || debug_info_level != DINFO_LEVEL_NONE))\n+\t     polymorphic types to make devirtualization machinery working.  */\n+\t  if (!BINFO_VTABLE (TYPE_BINFO (type))\n+\t      || !flag_devirtualize)\n \t    TYPE_BINFO (type) = NULL;\n \t}\n     }\n@@ -5186,6 +5175,11 @@ free_lang_data_in_type (tree type)\n       while (ctx && TREE_CODE (ctx) == BLOCK);\n       TYPE_CONTEXT (type) = ctx;\n     }\n+\n+  /* Drop TYPE_DECLs in TYPE_NAME in favor of the identifier in the\n+     TYPE_DECL if the type doesn't have linkage.  */\n+  if (! type_with_linkage_p (type))\n+    TYPE_NAME (type) = TYPE_IDENTIFIER (type);\n }\n \n \n@@ -5408,52 +5402,16 @@ struct free_lang_data_d\n };\n \n \n-/* Save all language fields needed to generate proper debug information\n-   for DECL.  This saves most fields cleared out by free_lang_data_in_decl.  */\n-\n-static void\n-save_debug_info_for_decl (tree t)\n-{\n-  /*struct saved_debug_info_d *sdi;*/\n-\n-  gcc_assert (debug_info_level > DINFO_LEVEL_TERSE && t && DECL_P (t));\n-\n-  /* FIXME.  Partial implementation for saving debug info removed.  */\n-}\n-\n-\n-/* Save all language fields needed to generate proper debug information\n-   for TYPE.  This saves most fields cleared out by free_lang_data_in_type.  */\n-\n-static void\n-save_debug_info_for_type (tree t)\n-{\n-  /*struct saved_debug_info_d *sdi;*/\n-\n-  gcc_assert (debug_info_level > DINFO_LEVEL_TERSE && t && TYPE_P (t));\n-\n-  /* FIXME.  Partial implementation for saving debug info removed.  */\n-}\n-\n-\n /* Add type or decl T to one of the list of tree nodes that need their\n    language data removed.  The lists are held inside FLD.  */\n \n static void\n add_tree_to_fld_list (tree t, struct free_lang_data_d *fld)\n {\n   if (DECL_P (t))\n-    {\n-      fld->decls.safe_push (t);\n-      if (debug_info_level > DINFO_LEVEL_TERSE)\n-\tsave_debug_info_for_decl (t);\n-    }\n+    fld->decls.safe_push (t);\n   else if (TYPE_P (t))\n-    {\n-      fld->types.safe_push (t);\n-      if (debug_info_level > DINFO_LEVEL_TERSE)\n-\tsave_debug_info_for_type (t);\n-    }\n+    fld->types.safe_push (t);\n   else\n     gcc_unreachable ();\n }"}]}