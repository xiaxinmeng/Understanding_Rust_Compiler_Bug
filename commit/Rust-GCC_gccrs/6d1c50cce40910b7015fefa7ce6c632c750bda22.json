{"sha": "6d1c50cce40910b7015fefa7ce6c632c750bda22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQxYzUwY2NlNDA5MTBiNzAxNWZlZmE3Y2U2YzYzMmM3NTBiZGEyMg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-08-25T22:07:32Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-08-25T22:07:32Z"}, "message": "expr.c (gfc_check_assign): Add comment.\n\nfortran/\n* expr.c (gfc_check_assign): Add comment. Add new warning.\n* trans-expr.c (gfc_conv_function_call): Correctly dereference\n result of pointer valued function when not in pointer assignment.\n\ntestsuite/\n* gfortran.dg/assignment_1.f90: New test.\n\nFrom-SVN: r86585", "tree": {"sha": "964405ed0e0f03edc6848c42f8c9cc13a1404f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/964405ed0e0f03edc6848c42f8c9cc13a1404f4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d1c50cce40910b7015fefa7ce6c632c750bda22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1c50cce40910b7015fefa7ce6c632c750bda22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1c50cce40910b7015fefa7ce6c632c750bda22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1c50cce40910b7015fefa7ce6c632c750bda22/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c124b4c6f4e9017f5682cede57bd84c1129da2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c124b4c6f4e9017f5682cede57bd84c1129da2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c124b4c6f4e9017f5682cede57bd84c1129da2a"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "832c0457acede3db0ec7d338f12136bce57a4e4a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6d1c50cce40910b7015fefa7ce6c632c750bda22", "patch": "@@ -1,3 +1,9 @@\n+2004-08-25  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* expr.c (gfc_check_assign): Add comment. Add new warning.\n+\t* trans-expr.c (gfc_conv_function_call): Correctly dereference\n+ \tresult of pointer valued function when not in pointer assignment.\n+\n 2004-08-25  Paul Brook  <paul@codesourcery.com>\n \n \t* config-lang.in: Remove dead commented line."}, {"sha": "0539b6568acf9ad1eca6a79d1acc6df17e5d361c", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=6d1c50cce40910b7015fefa7ce6c632c750bda22", "patch": "@@ -1797,10 +1797,19 @@ gfc_check_assign (gfc_expr * lvalue, gfc_expr * rvalue, int conform)\n       return FAILURE;\n     }\n \n+  /* This is a guaranteed segfault and possibly a typo: p = NULL()\n+     instead of p => NULL()  */\n   if (rvalue->expr_type == EXPR_NULL)\n     gfc_warning (\"NULL appears on right-hand side in assignment at %L\",\n \t\t &rvalue->where);\n \n+  /* This is possibly a typo: x = f() instead of x => f()  */\n+  if (gfc_option.warn_surprising \n+      && rvalue->expr_type == EXPR_FUNCTION\n+      && rvalue->symtree->n.sym->attr.pointer)\n+    gfc_warning (\"POINTER valued function appears on right-hand side of \"\n+\t\t \"assignment at %L\", &rvalue->where);\n+\n   /* Check size of array assignments.  */\n   if (lvalue->rank != 0 && rvalue->rank != 0\n       && gfc_check_conformance (\"Array assignment\", lvalue, rvalue) != SUCCESS)"}, {"sha": "b39aed9b50a5e262b2cfebd29b1ce278297517a3", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6d1c50cce40910b7015fefa7ce6c632c750bda22", "patch": "@@ -1170,6 +1170,13 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   se->expr = build3 (CALL_EXPR, TREE_TYPE (fntype), se->expr,\n \t\t     arglist, NULL_TREE);\n \n+  /* If we have a pointer function, but we don't want a pointer, e.g.\n+     something like\n+        x = f()\n+     where f is pointer valued, we have to dereference the result.  */\n+  if (sym->attr.pointer && !se->want_pointer && !byref)\n+    se->expr = gfc_build_indirect_ref (se->expr);\n+\n   /* A pure function may still have side-effects - it may modify its\n      parameters.  */\n   TREE_SIDE_EFFECTS (se->expr) = 1;"}, {"sha": "4d5fcbfb8bbbba5f9c89009bf4056b0cc23d722f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d1c50cce40910b7015fefa7ce6c632c750bda22", "patch": "@@ -1,3 +1,7 @@\n+2004-08-25  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.dg/assignment_1.f90: New test.\n+\n 2004-08-25  Adam Nemet  <anemet@lnxw.com>\n \n \t* g++.dg/template/repo3.C: New test."}, {"sha": "c8018a3d4c3c669455c0455e9474b8595797af9d", "filename": "gcc/testsuite/gfortran.dg/assignment_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1c50cce40910b7015fefa7ce6c632c750bda22/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90?ref=6d1c50cce40910b7015fefa7ce6c632c750bda22", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! { dg-options -Wsurprising }\n+integer, pointer :: p\n+integer, target :: t, s\n+\n+! The tests for character pointers are currently commented out,\n+! because they don't yet work correctly.\n+! This is PR 17192\n+!!$character*5, pointer :: d\n+!!$character*5, target :: c, e\n+\n+t = 1\n+p => s\n+! We didn't dereference the pointer in the following line.\n+p = f() ! { dg-warning \"POINTER valued function\" \"\" }\n+p = p+1\n+if (p.ne.2) call abort()\n+if (p.ne.s) call abort()\n+\n+!!$! verify that we also dereference correctly the result of a function \n+!!$! which returns its result by reference\n+!!$c = \"Hallo\"\n+!!$d => e\n+!!$d = g() !  dg-warning \"POINTER valued function\" \"\" \n+!!$if (d.ne.\"Hallo\") call abort()\n+\n+contains\n+function f()\n+integer, pointer :: f\n+f => t\n+end function f\n+!!$function g()\n+!!$character, pointer :: g\n+!!$g => c\n+!!$end function g\n+end"}]}