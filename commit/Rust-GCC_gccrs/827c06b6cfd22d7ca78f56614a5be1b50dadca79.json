{"sha": "827c06b6cfd22d7ca78f56614a5be1b50dadca79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3YzA2YjZjZmQyMmQ3Y2E3OGY1NjYxNGE1YmUxYjUwZGFkY2E3OQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-15T09:39:30Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-15T09:39:30Z"}, "message": "basic-block.h (life_analysis, [...]): Update prototypes.\n\n\t* basic-block.h (life_analysis, delete_noop_moves):\n\tUpdate prototypes.\n\t* bt-load.c (branch_target_load_optimize): Don't take the\n\tinsns stream as an argument.  Update the life_analysis calls.\n\t* combine.c (combine_instructions): Update delete_noop_moves\n\tcalls.\n\t* flow.c (notice_stack_pointer_modification): Don't take the\n\tinsns stream as an argument.  Work on the flow graph.\n\t(life_analysis): Likewise.\n\t(delete_noop_moves): Likewise.\n\t* passes.c (rest_of_handle_stack_regs): Update reg_to_stack call.\n\t(rest_of_handle_life): Update life_analysis call.\n\t(rest_of_compilation): Likewise, and also update\n\tbranch_target_load_optimize call.\n\t* ra.c (reg_alloc): Update life_analysis call.\n\t* reg-stack.c (reg_to_stack): Likewise.  Also, don't take\n\tthe insns stream as an argument.\n\t* regrename.c (copyprop_hardreg_forward): Update delete_noop_moves\n\tcall.\n\t* rtl.c (branch_target_load_optimize, reg_to_stack): Update\n\tprototypes.\n\t* value-profile.c (branch_prob): Update life_analysis call.\n\t* web.c (web_main): Work on the CFG, not on the insns stream.\n\n\t* config/ip2k/ip2k.c (ip2k_reorg): Update life_analysis calls.\n\t* config/m68hc11/m68hc11.c (m68hc11_reorg): Likewise.\n\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n\nFrom-SVN: r81873", "tree": {"sha": "dcc9e5b2879fa3fbd06b71b8cf966772d254405b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc9e5b2879fa3fbd06b71b8cf966772d254405b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/827c06b6cfd22d7ca78f56614a5be1b50dadca79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827c06b6cfd22d7ca78f56614a5be1b50dadca79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827c06b6cfd22d7ca78f56614a5be1b50dadca79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827c06b6cfd22d7ca78f56614a5be1b50dadca79/comments", "author": null, "committer": null, "parents": [{"sha": "91cde0c3f5e20c4a77f68a91fc077666872483ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91cde0c3f5e20c4a77f68a91fc077666872483ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91cde0c3f5e20c4a77f68a91fc077666872483ab"}], "stats": {"total": 151, "additions": 93, "deletions": 58}, "files": [{"sha": "b16217904c435d4045daee5344dd85e9e7d8ed17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -1,3 +1,33 @@\n+2004-05-15  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* basic-block.h (life_analysis, delete_noop_moves):\n+\tUpdate prototypes.\n+\t* bt-load.c (branch_target_load_optimize): Don't take the\n+\tinsns stream as an argument.  Update the life_analysis calls.\n+\t* combine.c (combine_instructions): Update delete_noop_moves\n+\tcalls.\n+\t* flow.c (notice_stack_pointer_modification): Don't take the\n+\tinsns stream as an argument.  Work on the flow graph.\n+\t(life_analysis): Likewise.\n+\t(delete_noop_moves): Likewise.\n+\t* passes.c (rest_of_handle_stack_regs): Update reg_to_stack call.\n+\t(rest_of_handle_life): Update life_analysis call.\n+\t(rest_of_compilation): Likewise, and also update\n+\tbranch_target_load_optimize call.\n+\t* ra.c (reg_alloc): Update life_analysis call.\n+\t* reg-stack.c (reg_to_stack): Likewise.  Also, don't take\n+\tthe insns stream as an argument.\n+\t* regrename.c (copyprop_hardreg_forward): Update delete_noop_moves\n+\tcall.\n+\t* rtl.c (branch_target_load_optimize, reg_to_stack): Update\n+\tprototypes.\n+\t* value-profile.c (branch_prob): Update life_analysis call.\n+\t* web.c (web_main): Work on the CFG, not on the insns stream.\n+\n+\t* config/ip2k/ip2k.c (ip2k_reorg): Update life_analysis calls.\n+\t* config/m68hc11/m68hc11.c (m68hc11_reorg): Likewise.\n+\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n+\n 2004-05-15  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/15444\n@@ -21,7 +51,7 @@\n \n \t* tree-ssa-dom.c (redirect_edges_and_update_ssa_graph): Don't even\n \tbother marking bypassed virtuals for out-of-ssa.  Instead merge\n-        bypassed virtuals into vars_to_rename just before into-ssa pass.\n+\tbypassed virtuals into vars_to_rename just before into-ssa pass.\n \n \t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Reorganize\n \tso that it picks up more opportunities to eliminate ABS expressions\n@@ -4398,7 +4428,7 @@\n \n 2004-03-24  David Edelsohn  <edelsohn@gnu.org>\n \n-\t* doc/invoke.texi (-frename-registers: Add enabled at -O3.\n+\t* doc/invoke.texi (-frename-registers): Add enabled at -O3.\n \t(-fprofile-values): Add enabled with profile-{generate,use}.\n \t(-fvpt): Same.\n \t(-ftracer): Add enabled with profile-use."}, {"sha": "f45129b591f431235e7efc41968042b74e0771ca", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -564,7 +564,7 @@ enum update_life_extent\n \t\t\t\t\t   insns.  */\n #define CLEANUP_CFGLAYOUT\t256\t/* Do cleanup in cfglayout mode.  */\n #define CLEANUP_LOG_LINKS\t512\t/* Update log links.  */\n-extern void life_analysis (rtx, FILE *, int);\n+extern void life_analysis (FILE *, int);\n extern int update_life_info (sbitmap, enum update_life_extent, int);\n extern int update_life_info_in_dirty_blocks (enum update_life_extent, int);\n extern int count_or_remove_death_notes (sbitmap, int);\n@@ -618,7 +618,7 @@ extern void unlink_block (basic_block);\n extern void compact_blocks (void);\n extern basic_block alloc_block (void);\n extern void find_unreachable_blocks (void);\n-extern int delete_noop_moves (rtx);\n+extern int delete_noop_moves (void);\n extern basic_block force_nonfallthru (edge);\n extern rtx block_label (basic_block);\n extern bool forwarder_block_p (basic_block);"}, {"sha": "7ab8c18642ebbccedd3965247ebf001c49a2ed7a", "filename": "gcc/bt-load.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -1411,7 +1411,7 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n }\n \n void\n-branch_target_load_optimize (rtx insns, bool after_prologue_epilogue_gen)\n+branch_target_load_optimize (bool after_prologue_epilogue_gen)\n {\n   enum reg_class class = targetm.branch_target_register_class ();\n   if (class != NO_REGS)\n@@ -1429,7 +1429,7 @@ branch_target_load_optimize (rtx insns, bool after_prologue_epilogue_gen)\n       cleanup_cfg (optimize ? CLEANUP_EXPENSIVE : 0);\n #endif\n \n-      life_analysis (insns, NULL, 0);\n+      life_analysis (NULL, 0);\n \n       /* Dominator info is also needed for migrate_btr_def.  */\n       calculate_dominance_info (CDI_DOMINATORS);"}, {"sha": "5a1f89bd83da7b53d3d62ab503a4582073032555", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -750,7 +750,7 @@ combine_instructions (rtx f, unsigned int nregs)\n   EXECUTE_IF_SET_IN_SBITMAP (refresh_blocks, 0, i,\n \t\t\t     BASIC_BLOCK (i)->flags |= BB_DIRTY);\n   new_direct_jump_p |= purge_all_dead_edges (0);\n-  delete_noop_moves (f);\n+  delete_noop_moves ();\n \n   update_life_info_in_dirty_blocks (UPDATE_LIFE_GLOBAL_RM_NOTES,\n \t\t\t\t    PROP_DEATH_NOTES | PROP_SCAN_DEAD_CODE"}, {"sha": "452737ec009703d7ce1cfc91467b5a1e6c2316d7", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -5315,7 +5315,7 @@ ip2k_reorg (void)\n      things in such a way that another go will win.  Do so now!  */\n   reload_cse_regs (first_insn);\n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_REG_INFO | PROP_DEATH_NOTES);\n+  life_analysis (0, PROP_REG_INFO | PROP_DEATH_NOTES);\n   \n   /* Look for where absurd things are happening with DP.  */\n   mdr_try_dp_reload_elim (first_insn);\n@@ -5327,7 +5327,7 @@ ip2k_reorg (void)\n \n   reload_cse_regs (first_insn);\n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_REG_INFO | PROP_DEATH_NOTES);\n+  life_analysis (0, PROP_REG_INFO | PROP_DEATH_NOTES);\n   if (flag_peephole2)\n     peephole2_optimize (NULL);\n \n@@ -5354,7 +5354,7 @@ ip2k_reorg (void)\n   mdr_try_move_pushes (first_insn);\n \n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n \n   mdr_try_propagate_move (first_insn);\n   mdr_resequence_xy_yx (first_insn);\n@@ -5368,14 +5368,14 @@ ip2k_reorg (void)\n \n   reload_cse_regs (first_insn);\n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n   if (flag_peephole2)\n     peephole2_optimize (NULL);\n \n   mdr_try_propagate_move (first_insn);\n \n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n \n   ip2k_reorg_split_simode = 1;\n   split_all_insns (0);\n@@ -5386,14 +5386,14 @@ ip2k_reorg (void)\n \n   reload_cse_regs (first_insn);\n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n   if (flag_peephole2)\n     peephole2_optimize (NULL);\n \n   mdr_try_propagate_move (first_insn);\n \n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n \n   ip2k_reorg_split_himode = 1;\n   ip2k_reorg_merge_qimode = 1;\n@@ -5411,21 +5411,21 @@ ip2k_reorg (void)\n   /* Call to  jump_optimize (...) was here, but now I removed it.  */\n   \n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n   if (flag_peephole2)\n     peephole2_optimize (NULL);\n \n   mdr_try_propagate_move (first_insn);\n \n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n   mdr_try_remove_redundant_insns (first_insn);\n \n   mdr_try_propagate_clr (first_insn);\n   mdr_try_propagate_move (first_insn);\n \n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n \n   ip2k_reorg_split_qimode = 1;\n   split_all_insns (0);\n@@ -5434,7 +5434,7 @@ ip2k_reorg (void)\n   mdr_try_propagate_move (first_insn);\n \n   find_basic_blocks (first_insn, max_reg_num (), 0);\n-  life_analysis (first_insn, 0, PROP_FINAL);\n+  life_analysis (0, PROP_FINAL);\n #endif\n }\n "}, {"sha": "dadbd9a08fd2be24cf3e0580f83035f9d3b9ebbf", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -5272,7 +5272,7 @@ m68hc11_reorg (void)\n             }\n         }\n \n-      life_analysis (first, 0, PROP_REG_INFO | PROP_DEATH_NOTES);\n+      life_analysis (0, PROP_REG_INFO | PROP_DEATH_NOTES);\n     }\n \n   z_replacement_completed = 2;"}, {"sha": "128954316cac777924294907478bac130aa529ac", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -9526,7 +9526,7 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   if (optimize > 0 && flag_schedule_insns_after_reload)\n     {\n       find_basic_blocks (insns, max_reg_num (), dump_file);\n-      life_analysis (insns, dump_file, PROP_FINAL);\n+      life_analysis (dump_file, PROP_FINAL);\n \n       split_all_insns (1);\n "}, {"sha": "818f8eb0043947eba63bb3347e5c8ae816a58223", "filename": "gcc/flow.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -291,7 +291,7 @@ static int verify_wide_reg_1 (rtx *, void *);\n static void verify_wide_reg (int, basic_block);\n static void verify_local_live_at_start (regset, basic_block);\n static void notice_stack_pointer_modification_1 (rtx, rtx, void *);\n-static void notice_stack_pointer_modification (rtx);\n+static void notice_stack_pointer_modification (void);\n static void mark_reg (rtx, void *);\n static void mark_regs_live_at_end (regset);\n static void calculate_global_regs_live (sbitmap, sbitmap, int);\n@@ -351,12 +351,11 @@ first_insn_after_basic_block_note (basic_block block)\n   return NEXT_INSN (insn);\n }\n \f\n-/* Perform data flow analysis.\n-   F is the first insn of the function; FLAGS is a set of PROP_* flags\n-   to be used in accumulating flow info.  */\n+/* Perform data flow analysis for the whole control flow graph.\n+   FLAGS is a set of PROP_* flags to be used in accumulating flow info.  */\n \n void\n-life_analysis (rtx f, FILE *file, int flags)\n+life_analysis (FILE *file, int flags)\n {\n #ifdef ELIMINABLE_REGS\n   int i;\n@@ -403,13 +402,13 @@ life_analysis (rtx f, FILE *file, int flags)\n \n   /* Always remove no-op moves.  Do this before other processing so\n      that we don't have to keep re-scanning them.  */\n-  delete_noop_moves (f);\n+  delete_noop_moves ();\n \n   /* Some targets can emit simpler epilogues if they know that sp was\n      not ever modified during the function.  After reload, of course,\n      we've already emitted the epilogue so there's no sense searching.  */\n   if (! reload_completed)\n-    notice_stack_pointer_modification (f);\n+    notice_stack_pointer_modification ();\n \n   /* Allocate and zero out data structures that will record the\n      data from lifetime analysis.  */\n@@ -782,7 +781,7 @@ free_basic_block_vars (void)\n /* Delete any insns that copy a register to itself.  */\n \n int\n-delete_noop_moves (rtx f ATTRIBUTE_UNUSED)\n+delete_noop_moves (void)\n {\n   rtx insn, next;\n   basic_block bb;\n@@ -866,8 +865,9 @@ notice_stack_pointer_modification_1 (rtx x, rtx pat ATTRIBUTE_UNUSED,\n }\n \n static void\n-notice_stack_pointer_modification (rtx f)\n+notice_stack_pointer_modification (void)\n {\n+  basic_block bb;\n   rtx insn;\n \n   /* Assume that the stack pointer is unchanging if alloca hasn't\n@@ -876,17 +876,19 @@ notice_stack_pointer_modification (rtx f)\n   if (! current_function_sp_is_unchanging)\n     return;\n \n-  for (insn = f; insn; insn = NEXT_INSN (insn))\n-    {\n-      if (INSN_P (insn))\n-\t{\n-\t  /* Check if insn modifies the stack pointer.  */\n-\t  note_stores (PATTERN (insn), notice_stack_pointer_modification_1,\n-\t\t       NULL);\n-\t  if (! current_function_sp_is_unchanging)\n-\t    return;\n-\t}\n-    }\n+  FOR_EACH_BB (bb)\n+    FOR_BB_INSNS (bb, insn)\n+      {\n+\tif (INSN_P (insn))\n+\t  {\n+\t    /* Check if insn modifies the stack pointer.  */\n+\t    note_stores (PATTERN (insn),\n+\t\t\t notice_stack_pointer_modification_1,\n+\t\t\t NULL);\n+\t    if (! current_function_sp_is_unchanging)\n+\t      return;\n+\t  }\n+      }\n }\n \n /* Mark a register in SET.  Hard registers in large modes get all"}, {"sha": "379df57415f8b9a8cf4f57a20d731fea5d93392c", "filename": "gcc/passes.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -519,7 +519,7 @@ rest_of_handle_stack_regs (tree decl, rtx insns)\n   timevar_push (TV_REG_STACK);\n   open_dump_file (DFI_stack, decl);\n \n-  if (reg_to_stack (insns, dump_file) && optimize)\n+  if (reg_to_stack (dump_file) && optimize)\n     {\n       if (cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_POST_REGSTACK\n \t\t       | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0))\n@@ -1044,7 +1044,7 @@ rest_of_handle_life (tree decl, rtx insns)\n #ifdef ENABLE_CHECKING\n   verify_flow_info ();\n #endif\n-  life_analysis (insns, dump_file, PROP_FINAL);\n+  life_analysis (dump_file, PROP_FINAL);\n   if (optimize)\n     cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_UPDATE_LIFE\n \t\t | CLEANUP_LOG_LINKS\n@@ -1696,7 +1696,7 @@ rest_of_compilation (tree decl)\n       {\n \topen_dump_file (DFI_branch_target_load, decl);\n \n-\tbranch_target_load_optimize (insns, false);\n+\tbranch_target_load_optimize (/*after_prologue_epilogue_gen=*/false);\n \n \tclose_dump_file (DFI_branch_target_load, print_rtl_with_bb, insns);\n \n@@ -1715,7 +1715,7 @@ rest_of_compilation (tree decl)\n \n   if (optimize)\n     {\n-      life_analysis (insns, dump_file, PROP_POSTRELOAD);\n+      life_analysis (dump_file, PROP_POSTRELOAD);\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_UPDATE_LIFE\n \t\t   | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n \n@@ -1785,7 +1785,7 @@ rest_of_compilation (tree decl)\n \n       open_dump_file (DFI_branch_target_load, decl);\n \n-      branch_target_load_optimize (insns, true);\n+      branch_target_load_optimize (/*after_prologue_epilogue_gen=*/true);\n \n       close_dump_file (DFI_branch_target_load, print_rtl_with_bb, insns);\n "}, {"sha": "782d8a5df7570e5e8243b6730ea6bbb88dfb0a54", "filename": "gcc/ra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -856,7 +856,7 @@ reg_alloc (void)\n   /* Cleanup the flow graph.  */\n   if ((debug_new_regalloc & DUMP_LAST_FLOW) == 0)\n     dump_file = NULL;\n-  life_analysis (get_insns (), dump_file,\n+  life_analysis (dump_file,\n \t\t PROP_DEATH_NOTES | PROP_LOG_LINKS  | PROP_REG_INFO);\n   cleanup_cfg (CLEANUP_EXPENSIVE);\n   recompute_reg_usage (get_insns (), TRUE);"}, {"sha": "add718351746857cdb3330d96826b992edba3872", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -399,16 +399,15 @@ pop_stack (stack regstack, int regno)\n }\n \f\n /* Convert register usage from \"flat\" register file usage to a \"stack\n-   register file.  FIRST is the first insn in the function, FILE is the\n-   dump file, if used.\n+   register file.  FILE is the dump file, if used.\n \n    Construct a CFG and run life analysis.  Then convert each insn one\n    by one.  Run a last cleanup_cfg pass, if optimizing, to eliminate\n    code duplication created when the converter inserts pop insns on\n    the edges.  */\n \n bool\n-reg_to_stack (rtx first, FILE *file)\n+reg_to_stack (FILE *file)\n {\n   basic_block bb;\n   int i;\n@@ -434,7 +433,7 @@ reg_to_stack (rtx first, FILE *file)\n \t  && flag_schedule_insns_after_reload))\n     {\n       count_or_remove_death_notes (NULL, 1);\n-      life_analysis (first, file, PROP_DEATH_NOTES);\n+      life_analysis (file, PROP_DEATH_NOTES);\n     }\n   mark_dfs_back_edges ();\n "}, {"sha": "c4c4e709bb6ea67185f4f0c4012b41bf35862657", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -1763,7 +1763,7 @@ copyprop_hardreg_forward (void)\n       /* ??? Irritatingly, delete_noop_moves does not take a set of blocks\n \t to scan, so we have to do a life update with no initial set of\n \t blocks Just In Case.  */\n-      delete_noop_moves (get_insns ());\n+      delete_noop_moves ();\n       update_life_info (NULL, UPDATE_LIFE_GLOBAL_RM_NOTES,\n \t\t\tPROP_DEATH_NOTES\n \t\t\t| PROP_SCAN_DEAD_CODE"}, {"sha": "89f66836773d14a78c10d05e57a82835ca06beae", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -2238,7 +2238,7 @@ extern void init_loop (void);\n #ifdef BUFSIZ\n extern void loop_optimize (rtx, FILE *, int);\n #endif\n-extern void branch_target_load_optimize (rtx, bool);\n+extern void branch_target_load_optimize (bool);\n \n /* In function.c */\n extern void reposition_prologue_and_epilogue_notes (rtx);\n@@ -2339,7 +2339,7 @@ extern int local_alloc (void);\n \n /* In reg-stack.c */\n #ifdef BUFSIZ\n-extern bool reg_to_stack (rtx, FILE *);\n+extern bool reg_to_stack (FILE *);\n #endif\n \n /* In calls.c */"}, {"sha": "a140d41e651d067974e25ac1ed5dbb4791b9e6a4", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -72,7 +72,7 @@ Boston, MA 02111-1307, USA.  */\n    omit the accumulator.\n \n    There are three cases how the function may exit.  The first one is\n-   handled in adjust_return_value, the other two in adjust_accumulator_values\n+   handled in adjust_return_value, the later two in adjust_accumulator_values\n    (the second case is actually a special case of the third one and we\n    present it separately just for clarity):\n "}, {"sha": "514b98f5190cf613a6ac617f22dfc983449e67e1", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -182,7 +182,7 @@ rtl_find_values_to_profile (unsigned *n_values, struct histogram_value **values)\n   rtx insn;\n   unsigned i;\n \n-  life_analysis (get_insns (), NULL, PROP_DEATH_NOTES);\n+  life_analysis (NULL, PROP_DEATH_NOTES);\n \n   *n_values = 0;\n   *values = NULL;"}, {"sha": "11f2caa6cd2e4983e57c4495fff06b8d334fc428", "filename": "gcc/web.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827c06b6cfd22d7ca78f56614a5be1b50dadca79/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=827c06b6cfd22d7ca78f56614a5be1b50dadca79", "patch": "@@ -262,6 +262,7 @@ web_main (void)\n   int max = max_reg_num ();\n   char *used;\n   char *use_addressof;\n+  basic_block bb;\n   rtx insn;\n \n   df = df_init ();\n@@ -280,9 +281,12 @@ web_main (void)\n     union_defs (df, df->uses[i], def_entry, use_entry);\n \n   /* We can not safely rename registers whose address is taken.  */\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn))\n-      for_each_rtx (&PATTERN (insn), mark_addressof, use_addressof);\n+  FOR_EACH_BB (bb)\n+    FOR_BB_INSNS (bb, insn)\n+      {\n+\tif (INSN_P (insn))\n+\t  for_each_rtx (&PATTERN (insn), mark_addressof, use_addressof);\n+      }\n \n   /* Update the instruction stream, allocating new registers for split pseudos\n      in progress.  */"}]}