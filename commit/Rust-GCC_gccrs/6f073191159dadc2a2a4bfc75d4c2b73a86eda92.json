{"sha": "6f073191159dadc2a2a4bfc75d4c2b73a86eda92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYwNzMxOTExNTlkYWRjMmEyYTRiZmM3NWQ0YzJiNzNhODZlZGE5Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-06T05:33:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-06T05:33:31Z"}, "message": "compiler: Fix bug in embedded method handling.\n\nIf the same type was embedded in a struct at different levels,\nonly the first embedded instance was considered when building\nthe set of all methods.  A second instance was ignored, even\nif it was at a higher level and should therefore override the\nfirst instance.\n\nTest case is bug485.go in master repository.\n\nFrom-SVN: r210096", "tree": {"sha": "68c228bb0290e99375ae39f09c414532c5c92697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c228bb0290e99375ae39f09c414532c5c92697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f073191159dadc2a2a4bfc75d4c2b73a86eda92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f073191159dadc2a2a4bfc75d4c2b73a86eda92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f073191159dadc2a2a4bfc75d4c2b73a86eda92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f073191159dadc2a2a4bfc75d4c2b73a86eda92/comments", "author": null, "committer": null, "parents": [{"sha": "0c2b1bb7b665e77a4f0ebe462447abab90b87ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2b1bb7b665e77a4f0ebe462447abab90b87ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2b1bb7b665e77a4f0ebe462447abab90b87ecf"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "096d87288d485d01bf338d7019d638186825aebc", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f073191159dadc2a2a4bfc75d4c2b73a86eda92/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f073191159dadc2a2a4bfc75d4c2b73a86eda92/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=6f073191159dadc2a2a4bfc75d4c2b73a86eda92", "patch": "@@ -8924,9 +8924,8 @@ Type::finalize_methods(Gogo* gogo, const Type* type, Location location,\n \t\t       Methods** all_methods)\n {\n   *all_methods = NULL;\n-  Types_seen types_seen;\n-  Type::add_methods_for_type(type, NULL, 0, false, false, &types_seen,\n-\t\t\t     all_methods);\n+  std::vector<const Named_type*> seen;\n+  Type::add_methods_for_type(type, NULL, 0, false, false, &seen, all_methods);\n   Type::build_stub_methods(gogo, type, *all_methods, location);\n }\n \n@@ -8944,7 +8943,7 @@ Type::add_methods_for_type(const Type* type,\n \t\t\t   unsigned int depth,\n \t\t\t   bool is_embedded_pointer,\n \t\t\t   bool needs_stub_method,\n-\t\t\t   Types_seen* types_seen,\n+\t\t\t   std::vector<const Named_type*>* seen,\n \t\t\t   Methods** methods)\n {\n   // Pointer types may not have methods.\n@@ -8954,19 +8953,24 @@ Type::add_methods_for_type(const Type* type,\n   const Named_type* nt = type->named_type();\n   if (nt != NULL)\n     {\n-      std::pair<Types_seen::iterator, bool> ins = types_seen->insert(nt);\n-      if (!ins.second)\n-\treturn;\n-    }\n+      for (std::vector<const Named_type*>::const_iterator p = seen->begin();\n+\t   p != seen->end();\n+\t   ++p)\n+\t{\n+\t  if (*p == nt)\n+\t    return;\n+\t}\n \n-  if (nt != NULL)\n-    Type::add_local_methods_for_type(nt, field_indexes, depth,\n-\t\t\t\t     is_embedded_pointer, needs_stub_method,\n-\t\t\t\t     methods);\n+      seen->push_back(nt);\n+\n+      Type::add_local_methods_for_type(nt, field_indexes, depth,\n+\t\t\t\t       is_embedded_pointer, needs_stub_method,\n+\t\t\t\t       methods);\n+    }\n \n   Type::add_embedded_methods_for_type(type, field_indexes, depth,\n \t\t\t\t      is_embedded_pointer, needs_stub_method,\n-\t\t\t\t      types_seen, methods);\n+\t\t\t\t      seen, methods);\n \n   // If we are called with depth > 0, then we are looking at an\n   // anonymous field of a struct.  If such a field has interface type,\n@@ -8975,6 +8979,9 @@ Type::add_methods_for_type(const Type* type,\n   // following the usual rules for an interface type.\n   if (depth > 0)\n     Type::add_interface_methods_for_type(type, field_indexes, depth, methods);\n+\n+  if (nt != NULL)\n+      seen->pop_back();\n }\n \n // Add the local methods for the named type NT to *METHODS.  The\n@@ -9020,7 +9027,7 @@ Type::add_embedded_methods_for_type(const Type* type,\n \t\t\t\t    unsigned int depth,\n \t\t\t\t    bool is_embedded_pointer,\n \t\t\t\t    bool needs_stub_method,\n-\t\t\t\t    Types_seen* types_seen,\n+\t\t\t\t    std::vector<const Named_type*>* seen,\n \t\t\t\t    Methods** methods)\n {\n   // Look for anonymous fields in TYPE.  TYPE has fields if it is a\n@@ -9064,7 +9071,7 @@ Type::add_embedded_methods_for_type(const Type* type,\n \t\t\t\t (needs_stub_method\n \t\t\t\t  || is_pointer\n \t\t\t\t  || i > 0),\n-\t\t\t\t types_seen,\n+\t\t\t\t seen,\n \t\t\t\t methods);\n     }\n }"}, {"sha": "e6ba995429fc65e561cb6fb96e8076bf9024c01f", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f073191159dadc2a2a4bfc75d4c2b73a86eda92/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f073191159dadc2a2a4bfc75d4c2b73a86eda92/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=6f073191159dadc2a2a4bfc75d4c2b73a86eda92", "patch": "@@ -1171,14 +1171,11 @@ class Type\n   static tree\n   build_receive_return_type(tree type);\n \n-  // A hash table we use to avoid infinite recursion.\n-  typedef Unordered_set_hash(const Named_type*, Type_hash_identical,\n-\t\t\t     Type_identical) Types_seen;\n-\n   // Add all methods for TYPE to the list of methods for THIS.\n   static void\n   add_methods_for_type(const Type* type, const Method::Field_indexes*,\n-\t\t       unsigned int depth, bool, bool, Types_seen*,\n+\t\t       unsigned int depth, bool, bool,\n+\t\t       std::vector<const Named_type*>*,\n \t\t       Methods**);\n \n   static void\n@@ -1189,7 +1186,8 @@ class Type\n   static void\n   add_embedded_methods_for_type(const Type* type,\n \t\t\t\tconst Method::Field_indexes*,\n-\t\t\t\tunsigned int depth, bool, bool, Types_seen*,\n+\t\t\t\tunsigned int depth, bool, bool,\n+\t\t\t\tstd::vector<const Named_type*>*,\n \t\t\t\tMethods**);\n \n   static void"}]}