{"sha": "26b3c423d5a1bbefbdd659dce21a84a260bae459", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiM2M0MjNkNWExYmJlZmJkZDY1OWRjZTIxYTg0YTI2MGJhZTQ1OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-17T22:13:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-17T22:13:51Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1005", "tree": {"sha": "441b9d55cd2e165f785d10996da493dd963d0652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/441b9d55cd2e165f785d10996da493dd963d0652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b3c423d5a1bbefbdd659dce21a84a260bae459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b3c423d5a1bbefbdd659dce21a84a260bae459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b3c423d5a1bbefbdd659dce21a84a260bae459", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b3c423d5a1bbefbdd659dce21a84a260bae459/comments", "author": null, "committer": null, "parents": [{"sha": "98f21a70bfc35eae3e85e2257bc0c972d3db9968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f21a70bfc35eae3e85e2257bc0c972d3db9968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f21a70bfc35eae3e85e2257bc0c972d3db9968"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "751a2587c0007d2861af648121e96fa034af3862", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b3c423d5a1bbefbdd659dce21a84a260bae459/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b3c423d5a1bbefbdd659dce21a84a260bae459/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=26b3c423d5a1bbefbdd659dce21a84a260bae459", "patch": "@@ -782,6 +782,17 @@ c_alignof (type)\n \n   return size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n }\n+\n+/* Print a warning if a constant expression had overflow in folding.\n+   This doesn't really work--it is waiting for changes in fold.  */\n+\n+void\n+constant_expression_warning (value)\n+     tree value;\n+{\n+  if (TREE_CODE (value) == NON_LVALUE_EXPR && TREE_CONSTANT_OVERFLOW (value))\n+    pedwarn (\"overflow in constant expression\");\n+}\n \f\n /* Implement the __alignof keyword: Return the minimum required\n    alignment of EXPR, measured in bytes.  For VAR_DECL's and\n@@ -3013,7 +3024,7 @@ build_unary_op (code, xarg, noconvert)\n \t  return error_mark_node;\n \n \t/* Report a read-only lvalue.  */\n-\tif (TYPE_READONLY (TREE_TYPE (arg)))\n+\tif (TREE_READONLY (arg))\n \t  readonly_warning (arg, \n \t\t\t    ((code == PREINCREMENT_EXPR\n \t\t\t      || code == POSTINCREMENT_EXPR)\n@@ -4203,6 +4214,9 @@ store_init_value (decl, init)\n     }\n #endif\n \n+  /* ANSI wants warnings about out-of-range constant initializers.  */\n+  constant_expression_warning (value);\n+\n   DECL_INITIAL (decl) = value;\n }\n \f"}]}