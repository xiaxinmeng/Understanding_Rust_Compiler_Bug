{"sha": "5551501e84dd51b569801c0e52b24f9e30124166", "node_id": "C_kwDOANBUbNoAKDU1NTE1MDFlODRkZDUxYjU2OTgwMWMwZTUyYjI0ZjllMzAxMjQxNjY", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:46Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:46Z"}, "message": "Split code out of vect_transform_slp_perm_load\n\nSimilarly to the previous vectorizable_slp_permutation patch,\nthis one splits out the main part of vect_transform_slp_perm_load\nso that a later patch can test a permutation without constructing\na node for it.\n\nAlso fixes a lingering use of STMT_VINFO_VECTYPE.\n\ngcc/\n\t* tree-vect-slp.cc (vect_transform_slp_perm_load_1): Split out from...\n\t(vect_transform_slp_perm_load): ...here.  Use SLP_TREE_VECTYPE instead\n\tof STMT_VINFO_VECTYPE.", "tree": {"sha": "543ac794d4dd8c1203d46e2aba7d696239baad48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543ac794d4dd8c1203d46e2aba7d696239baad48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5551501e84dd51b569801c0e52b24f9e30124166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5551501e84dd51b569801c0e52b24f9e30124166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5551501e84dd51b569801c0e52b24f9e30124166", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5551501e84dd51b569801c0e52b24f9e30124166/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5edc67b773372bf013f98a357912381d99de65f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edc67b773372bf013f98a357912381d99de65f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edc67b773372bf013f98a357912381d99de65f5"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "64b3379b5308cf72000db0e6112b7802093535b3", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5551501e84dd51b569801c0e52b24f9e30124166/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5551501e84dd51b569801c0e52b24f9e30124166/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=5551501e84dd51b569801c0e52b24f9e30124166", "patch": "@@ -6631,23 +6631,23 @@ vect_get_slp_defs (vec_info *,\n     }\n }\n \n-/* Generate vector permute statements from a list of loads in DR_CHAIN.\n-   If ANALYZE_ONLY is TRUE, only check that it is possible to create valid\n-   permute statements for the SLP node NODE.  Store the number of vector\n-   permute instructions in *N_PERMS and the number of vector load\n-   instructions in *N_LOADS.  If DCE_CHAIN is true, remove all definitions\n-   that were not needed.  */\n+/* A subroutine of vect_transform_slp_perm_load with two extra arguments:\n+   - PERM gives the permutation that the caller wants to use for NODE,\n+     which might be different from SLP_LOAD_PERMUTATION.\n+   - DUMP_P controls whether the function dumps information.  */\n \n-bool\n-vect_transform_slp_perm_load (vec_info *vinfo,\n-\t\t\t      slp_tree node, const vec<tree> &dr_chain,\n-\t\t\t      gimple_stmt_iterator *gsi, poly_uint64 vf,\n-\t\t\t      bool analyze_only, unsigned *n_perms,\n-\t\t\t      unsigned int *n_loads, bool dce_chain)\n+static bool\n+vect_transform_slp_perm_load_1 (vec_info *vinfo, slp_tree node,\n+\t\t\t\tload_permutation_t &perm,\n+\t\t\t\tconst vec<tree> &dr_chain,\n+\t\t\t\tgimple_stmt_iterator *gsi, poly_uint64 vf,\n+\t\t\t\tbool analyze_only, bool dump_p,\n+\t\t\t\tunsigned *n_perms, unsigned int *n_loads,\n+\t\t\t\tbool dce_chain)\n {\n   stmt_vec_info stmt_info = SLP_TREE_SCALAR_STMTS (node)[0];\n   int vec_index = 0;\n-  tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n+  tree vectype = SLP_TREE_VECTYPE (node);\n   unsigned int group_size = SLP_TREE_SCALAR_STMTS (node).length ();\n   unsigned int mask_element;\n   machine_mode mode;\n@@ -6732,8 +6732,7 @@ vect_transform_slp_perm_load (vec_info *vinfo,\n     {\n       unsigned int iter_num = j / group_size;\n       unsigned int stmt_num = j % group_size;\n-      unsigned int i = (iter_num * DR_GROUP_SIZE (stmt_info)\n-\t\t\t+ SLP_TREE_LOAD_PERMUTATION (node)[stmt_num]);\n+      unsigned int i = (iter_num * DR_GROUP_SIZE (stmt_info) + perm[stmt_num]);\n       bitmap_set_bit (used_in_lanes, i);\n       if (repeating_p)\n \t{\n@@ -6759,7 +6758,7 @@ vect_transform_slp_perm_load (vec_info *vinfo,\n \t    }\n \t  else\n \t    {\n-\t      if (dump_enabled_p ())\n+\t      if (dump_p)\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t\t \"permutation requires at \"\n \t\t\t\t \"least three vectors %G\",\n@@ -6780,7 +6779,7 @@ vect_transform_slp_perm_load (vec_info *vinfo,\n \t  indices.new_vector (mask, second_vec_index == -1 ? 1 : 2, nunits);\n \t  if (!can_vec_perm_const_p (mode, mode, indices))\n \t    {\n-\t      if (dump_enabled_p ())\n+\t      if (dump_p)\n \t\t{\n \t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n \t\t\t\t   vect_location,\n@@ -6896,6 +6895,27 @@ vect_transform_slp_perm_load (vec_info *vinfo,\n   return true;\n }\n \n+/* Generate vector permute statements from a list of loads in DR_CHAIN.\n+   If ANALYZE_ONLY is TRUE, only check that it is possible to create valid\n+   permute statements for the SLP node NODE.  Store the number of vector\n+   permute instructions in *N_PERMS and the number of vector load\n+   instructions in *N_LOADS.  If DCE_CHAIN is true, remove all definitions\n+   that were not needed.  */\n+\n+bool\n+vect_transform_slp_perm_load (vec_info *vinfo,\n+\t\t\t      slp_tree node, const vec<tree> &dr_chain,\n+\t\t\t      gimple_stmt_iterator *gsi, poly_uint64 vf,\n+\t\t\t      bool analyze_only, unsigned *n_perms,\n+\t\t\t      unsigned int *n_loads, bool dce_chain)\n+{\n+  return vect_transform_slp_perm_load_1 (vinfo, node,\n+\t\t\t\t\t SLP_TREE_LOAD_PERMUTATION (node),\n+\t\t\t\t\t dr_chain, gsi, vf, analyze_only,\n+\t\t\t\t\t dump_enabled_p (), n_perms, n_loads,\n+\t\t\t\t\t dce_chain);\n+}\n+\n /* Produce the next vector result for SLP permutation NODE by adding a vector\n    statement at GSI.  If MASK_VEC is nonnull, add:\n "}]}