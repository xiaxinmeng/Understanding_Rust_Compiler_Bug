{"sha": "699851185ad5f8039da3cdc62a60c79dda4ce180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5ODUxMTg1YWQ1ZjgwMzlkYTNjZGM2MmE2MGM3OWRkYTRjZTE4MA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-14T16:16:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-14T16:16:46Z"}, "message": "dsp16xx-protos.h: New file.\n\n\t* dsp16xx-protos.h: New file.\n\n\t* dsp16xx.c: Include tm_p.h.  Add static prototypes.  Fix compile\n\ttime warnings.\n\n\t* dsp16xx.h: Move prototypes to dsp16xx-protos.h.  Fix compile time\n\twarnings.\n\n\t* dsp16xx.md: Likewise.\n\nFrom-SVN: r31416", "tree": {"sha": "c42724701b40cf4f6b94f36a72cd261a65ca16a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42724701b40cf4f6b94f36a72cd261a65ca16a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/699851185ad5f8039da3cdc62a60c79dda4ce180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699851185ad5f8039da3cdc62a60c79dda4ce180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699851185ad5f8039da3cdc62a60c79dda4ce180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699851185ad5f8039da3cdc62a60c79dda4ce180/comments", "author": null, "committer": null, "parents": [{"sha": "6b995286d688d8f2d23b5e179d5cbe44cce48308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b995286d688d8f2d23b5e179d5cbe44cce48308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b995286d688d8f2d23b5e179d5cbe44cce48308"}], "stats": {"total": 415, "additions": 254, "deletions": 161}, "files": [{"sha": "29f0ccfa82bfbd744f5479a65d778b8744d9117c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=699851185ad5f8039da3cdc62a60c79dda4ce180", "patch": "@@ -1,3 +1,15 @@\n+2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* dsp16xx-protos.h: New file.\n+\n+\t* dsp16xx.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* dsp16xx.h: Move prototypes to dsp16xx-protos.h.  Fix compile time\n+\twarnings.\n+\t\n+\t* dsp16xx.md: Likewise.\n+\n 2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* convex-protos.h: New file."}, {"sha": "dc9295467c39ef16faa1013f0cd6b5f6fec7ad5e", "filename": "gcc/config/dsp16xx/dsp16xx-protos.h", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h?ref=699851185ad5f8039da3cdc62a60c79dda4ce180", "patch": "@@ -0,0 +1,85 @@\n+/* Definitions of target machine for GNU compiler.  AT&T DSP1600.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Michael Collison (collison@world.std.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+extern struct rtx_def *gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n+extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int arith_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int symbolic_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int Y_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int sp_operand PARAMS ((rtx, enum machine_mode));\n+extern int sp_operand2 PARAMS ((rtx, enum machine_mode));\n+extern int nonmemory_arith_operand PARAMS ((rtx, enum machine_mode));\n+extern int dsp16xx_comparison_operator PARAMS ((rtx, enum machine_mode));\n+\n+extern void notice_update_cc PARAMS ((rtx));\n+extern void double_reg_from_memory PARAMS ((rtx[]));\n+extern void double_reg_to_memory PARAMS ((rtx[]));\n+extern enum rtx_code next_cc_user_code PARAMS ((rtx));\n+extern int next_cc_user_unsigned PARAMS ((rtx));\n+extern struct rtx_def *gen_tst_reg PARAMS ((rtx));\n+extern const char *output_block_move PARAMS ((rtx[]));\n+extern enum reg_class preferred_reload_class PARAMS ((rtx, enum reg_class));\n+extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n+\t\t\t\t\t\t      enum machine_mode, rtx));\n+extern int emit_move_sequence PARAMS ((rtx *, enum machine_mode));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern void output_dsp16xx_float_const PARAMS ((rtx *));\n+extern void emit_1600_core_shift PARAMS ((enum rtx_code, rtx *, int));\n+extern int dsp16xx_address_cost PARAMS ((rtx));\n+extern int symbolic_address_p PARAMS ((rtx));\n+#endif /* RTX_CODE */\n+\n+\n+#ifdef TREE_CODE\n+extern struct rtx_def *dsp16xx_function_arg PARAMS ((CUMULATIVE_ARGS,\n+\t\t\t\t\t\t     enum machine_mode,\n+\t\t\t\t\t\t     tree, int));\n+extern void dsp16xx_function_arg_advance PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t  enum machine_mode,\n+\t\t\t\t\t\t  tree, int));\n+#endif /* TREE_CODE */\n+\n+extern void dsp16xx_invalid_register_for_compare PARAMS ((void));\n+extern int class_max_nregs PARAMS ((enum reg_class, enum machine_mode));\n+extern enum reg_class limit_reload_class PARAMS ((enum reg_class, enum machine_mode));\n+extern int dsp16xx_register_move_cost PARAMS ((enum reg_class, enum reg_class));\n+extern int dsp16xx_makes_calls PARAMS ((void));\n+extern long compute_frame_size PARAMS ((int));\n+extern int dsp16xx_call_saved_register PARAMS ((int));\n+extern int dsp16xx_call_saved_register PARAMS ((int));\n+extern void init_emulation_routines PARAMS ((void));\n+extern int ybase_regs_ever_used PARAMS ((void));\n+extern void override_options PARAMS ((void));\n+extern int dsp16xx_starting_frame_offset PARAMS ((void));\n+extern int initial_frame_pointer_offset PARAMS ((void));\n+extern void asm_output_common PARAMS ((FILE *, const char *, int, int));\n+extern void asm_output_local PARAMS ((FILE *, const char *, int, int));\n+extern void asm_output_float PARAMS ((FILE *, double));\n+extern void asm_output_long PARAMS ((FILE *, long));\n+extern void dsp16xx_file_start PARAMS ((void));\n+extern struct rtx_def *(*dsp16xx_compare_gen) PARAMS (());\n+extern int hard_regno_mode_ok PARAMS ((int, enum machine_mode));\n+extern enum reg_class dsp16xx_reg_class_from_letter PARAMS ((int));\n+extern int regno_reg_class PARAMS ((int));\n+extern void function_prologue PARAMS ((FILE *, int));\n+extern void function_epilogue PARAMS ((FILE *, int));"}, {"sha": "0c81dd1340281d80c5a2d26be824646f28f975e1", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 130, "deletions": 122, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=699851185ad5f8039da3cdc62a60c79dda4ce180", "patch": "@@ -36,18 +36,21 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"flags.h\"\n #include \"ggc.h\"\n-\n-char *text_seg_name;\n-char *rsect_text;\n-char *data_seg_name;\n-char *rsect_data;\n-char *bss_seg_name;\n-char *rsect_bss;\n-char *const_seg_name;\n-char *rsect_const;\n-\n-char *chip_name;\n-char *save_chip_name;\n+#include \"toplev.h\"\n+#include \"recog.h\"\n+#include \"tm_p.h\"\n+\n+const char *text_seg_name;\n+const char *rsect_text;\n+const char *data_seg_name;\n+const char *rsect_data;\n+const char *bss_seg_name;\n+const char *rsect_bss;\n+const char *const_seg_name;\n+const char *rsect_const;\n+\n+const char *chip_name;\n+const char *save_chip_name;\n \n /* Save the operands of a compare. The 16xx has not lt or gt, so\n    in these cases we swap the operands and reverse the condition */\n@@ -56,10 +59,10 @@ rtx dsp16xx_compare_op0;\n rtx dsp16xx_compare_op1;\n struct rtx_def *(*dsp16xx_compare_gen)();\n \n-static char *fp;\n-static char *sp;\n-static char *rr;\n-static char *a1h;\n+static const char *fp;\n+static const char *sp;\n+static const char *rr;\n+static const char *a1h;\n \n struct dsp16xx_frame_info current_frame_info;\n struct dsp16xx_frame_info zero_frame_info;\n@@ -87,65 +90,67 @@ rtx dsp16xx_ashlhi3_libcall = (rtx) 0;\n rtx dsp16xx_ucmphi2_libcall = (rtx) 0;\n rtx dsp16xx_lshrhi3_libcall = (rtx) 0;\n \n-char *himode_reg_name[] = HIMODE_REGISTER_NAMES;\n+static const char *const himode_reg_name[] = HIMODE_REGISTER_NAMES;\n \n #define SHIFT_INDEX_1   0\n #define SHIFT_INDEX_4   1\n #define SHIFT_INDEX_8   2\n #define SHIFT_INDEX_16  3\n \n-static char *ashift_right_asm[] = \n+static const char *const ashift_right_asm[] = \n {\n   \"%0=%0>>1\",\n   \"%0=%0>>4\",\n   \"%0=%0>>8\",\n   \"%0=%0>>16\"\n };\n \n-static char *ashift_right_asm_first[] = \n+static const char *const ashift_right_asm_first[] = \n {\n   \"%0=%1>>1\",\n   \"%0=%1>>4\",\n   \"%0=%1>>8\",\n   \"%0=%1>>16\"\n };\n \n-static char *ashift_left_asm[] = \n+static const char *const ashift_left_asm[] = \n {\n   \"%0=%0<<1\",\n   \"%0=%0<<4\",\n   \"%0=%0<<8\",\n   \"%0=%0<<16\"\n };\n \n-static char *ashift_left_asm_first[] = \n+static const char *const ashift_left_asm_first[] = \n {\n   \"%0=%1<<1\",\n   \"%0=%1<<4\",\n   \"%0=%1<<8\",\n   \"%0=%1<<16\"\n };\n \n-static char *lshift_right_asm[] = \n+static const char *const lshift_right_asm[] = \n {\n   \"%0=%0>>1\\n\\t%0=%b0&0x7fff\",\n   \"%0=%0>>4\\n\\t%0=%b0&0x0fff\",\n   \"%0=%0>>8\\n\\t%0=%b0&0x00ff\",\n   \"%0=%0>>16\\n\\t%0=%b0&0x0000\"\n };\n \n-static char *lshift_right_asm_first[] = \n+static const char *const lshift_right_asm_first[] = \n {\n   \"%0=%1>>1\\n\\t%0=%b0&0x7fff\",\n   \"%0=%1>>4\\n\\t%0=%b0&0x0fff\",\n   \"%0=%1>>8\\n\\t%0=%b0&0x00ff\",\n   \"%0=%1>>16\\n\\t%0=%b0&0x0000\"\n };\n \n+static int reg_save_size PARAMS ((void));\n+\n int \n hard_regno_mode_ok (regno, mode)\n-int regno;\n-enum machine_mode mode;\n+     int regno;\n+     enum machine_mode mode;\n {\n   switch ((int) mode)\n     {\n@@ -186,7 +191,7 @@ enum machine_mode mode;\n \n enum reg_class\n dsp16xx_reg_class_from_letter (c)\n-int c;\n+     int c;\n {\n   switch (c)\n     {\n@@ -272,7 +277,7 @@ int c;\n \n int \n regno_reg_class(regno)\n-int regno;\n+     int regno;\n {\n   switch (regno)\n     {\n@@ -345,16 +350,16 @@ int regno;\n \n int\n class_max_nregs(class, mode)\n-enum reg_class class;\n-enum machine_mode mode;\n+     enum reg_class class ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n     return (GET_MODE_SIZE(mode));\n }\n \n enum reg_class\n limit_reload_class (mode, class)\n-enum machine_mode mode;\n-enum reg_class class;\n+     enum machine_mode mode;\n+     enum reg_class class;\n {\n   switch ((int) class)\n     {\n@@ -551,7 +556,7 @@ enum reg_class class;\n \n int\n dsp16xx_register_move_cost (from, to)\n-enum reg_class from, to;\n+     enum reg_class from, to;\n {\n #if 0\n   if (from == NO_REGS || to == NO_REGS || (from == to))\n@@ -870,15 +875,15 @@ secondary_reload_class (class, mode, in)\n \n int\n symbolic_address_operand (op, mode)\n-rtx op;\n-enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-    return (symbolic_address_p (op));\n-\n+  return (symbolic_address_p (op));\n }\n \n-int symbolic_address_p (op)\n-rtx op;\n+int\n+symbolic_address_p (op)\n+     rtx op;\n {\n   switch (GET_CODE (op))\n     {\n@@ -904,16 +909,16 @@ rtx op;\n \n int\n Y_address_operand (op, mode)\n-rtx op;\n-enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode;\n {\n-   return (memory_address_p (mode, op) && !symbolic_address_p (op));\n+  return (memory_address_p (mode, op) && !symbolic_address_p (op));\n }\t     \n \n int\n sp_operand (op, mode)\n-rtx op;\n-enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n     return (GET_CODE (op) == PLUS\n \t    && (XEXP (op, 0) == stack_pointer_rtx\n@@ -923,8 +928,8 @@ enum machine_mode mode;\n \n int\n sp_operand2 (op, mode)\n-rtx op;\n-enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if ((GET_CODE (op) == PLUS \n        && (XEXP (op, 0) == stack_pointer_rtx\n@@ -944,16 +949,16 @@ enum machine_mode mode;\n \n int\n nonmemory_arith_operand (op, mode)\n-rtx op;\n-enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode;\n {\n   return (immediate_operand (op, mode) || arith_reg_operand (op, mode));\n }\n \n int\n arith_reg_operand (op, mode)\n-rtx op;\n-enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode;\n {\n   return (register_operand (op, mode)\n \t  && (GET_CODE (op) != REG\n@@ -964,8 +969,8 @@ enum machine_mode mode;\n \n int\n call_address_operand (op, mode)\n-rtx op;\n-enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n     if (symbolic_address_p (op) || REG_P(op))\n     {\n@@ -988,7 +993,7 @@ dsp16xx_comparison_operator (op, mode)\n \n void\n notice_update_cc(exp)\n-rtx exp;\n+     rtx exp;\n {\n     if (GET_CODE (exp) == SET)\n     {\n@@ -1104,8 +1109,9 @@ dsp16xx_makes_calls ()\n   return 0;\n }\n \n-long compute_frame_size (size)\n-int size;\n+long\n+compute_frame_size (size)\n+     int size;\n {\n   long total_size;\n   long var_size;\n@@ -1144,7 +1150,7 @@ int size;\n \n int\n dsp16xx_call_saved_register (regno)\n-int regno;\n+     int regno;\n {\n   return (regs_ever_live[regno] && !call_used_regs[regno] &&\n \t  !IS_YBASE_REGISTER_WINDOW(regno));\n@@ -1169,8 +1175,8 @@ ybase_regs_ever_used ()\n \n void \n function_prologue (file, size)\n-FILE *file;\n-int  size;\n+     FILE *file;\n+     int  size;\n {\n   int regno;\n   long total_size;\n@@ -1182,14 +1188,14 @@ int  size;\n   total_size = compute_frame_size (size);\n   \n   fprintf( file, \"\\t/* FUNCTION PROLOGUE: */\\n\" );\n-  fprintf (file, \"\\t/* total=%d, vars= %d, regs= %d, args=%d, extra= %d */\\n\",\n+  fprintf (file, \"\\t/* total=%ld, vars= %ld, regs= %d, args=%d, extra= %ld */\\n\",\n \t   current_frame_info.total_size,\n \t   current_frame_info.var_size,\n \t   current_frame_info.reg_size,\n \t   current_function_outgoing_args_size,\n \t   current_frame_info.extra_size);\n   \n-  fprintf (file, \"\\t/* fp save offset= %d, sp save_offset= %d */\\n\\n\",\n+  fprintf (file, \"\\t/* fp save offset= %ld, sp save_offset= %ld */\\n\\n\",\n \t   current_frame_info.fp_save_offset,\n \t   current_frame_info.sp_save_offset);\n   /* Set up the 'ybase' register window. */\n@@ -1217,7 +1223,7 @@ int  size;\n       else\n         {\n \t  if(SMALL_INTVAL(current_frame_info.var_size) && ((current_frame_info.var_size & 0x8000) == 0))\n-\t    fprintf (file, \"\\t%s=%d\\n\\t*%s++%s\\n\", reg_names[REG_J], current_frame_info.var_size, sp, reg_names[REG_J]);\n+\t    fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", reg_names[REG_J], current_frame_info.var_size, sp, reg_names[REG_J]);\n \t  else\n \t    fatal (\"Stack size > 32k\");\n \t}\n@@ -1244,7 +1250,7 @@ int  size;\n       else\n         {\n \t  if(SMALL_INTVAL(current_frame_info.args_size) && ((current_frame_info.args_size & 0x8000) == 0))\n-\t    fprintf (file, \"\\t%s=%d\\n\\t*%s++%s\\n\", reg_names[REG_J], current_frame_info.args_size, sp, reg_names[REG_J]);\n+\t    fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", reg_names[REG_J], current_frame_info.args_size, sp, reg_names[REG_J]);\n \t  else\n \t    fatal (\"Stack size > 32k\");\n \t}\n@@ -1254,7 +1260,7 @@ int  size;\n     {\n       fprintf( file, \"\\t%s=%s\\n\", a1h, sp );\n       fprintf( file, \"\\t%s=%s\\n\", fp, a1h );  /* Establish new base frame */\n-      fprintf( file, \"\\t%s=%d\\n\", reg_names[REG_J], -total_size);\n+      fprintf( file, \"\\t%s=%ld\\n\", reg_names[REG_J], -total_size);\n       fprintf( file, \"\\t*%s++%s\\n\", fp, reg_names[REG_J]);\n     }\n   \n@@ -1290,11 +1296,13 @@ init_emulation_routines ()\n }\n void\n function_epilogue (file, size)\n-FILE *file;\n-int   size;\n+     FILE *file;\n+     int size ATTRIBUTE_UNUSED;\n {\n   int regno;\n+#if OLD_REGISTER_SAVE  \n   int initial_stack_dec = 0;\n+#endif\n   \n   fp = reg_names[FRAME_POINTER_REGNUM];\n   sp = reg_names[STACK_POINTER_REGNUM];\n@@ -1309,7 +1317,7 @@ int   size;\n \tfprintf (file, \"\\t*%s--\\n\", sp);\n       else\n \t{\n-\t  fprintf (file, \"\\t%s=%d\\n\\t*%s++%s\\n\", \n+\t  fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", \n \t\t   reg_names[REG_J], -current_frame_info.args_size, sp, reg_names[REG_J]);\n \t}\n     }\n@@ -1356,7 +1364,7 @@ int   size;\n \tfprintf (file, \"\\t*%s--\\n\", sp);\n       else\n \t{\n-\t  fprintf (file, \"\\t%s=%d\\n\\t*%s++%s\\n\", \n+\t  fprintf (file, \"\\t%s=%ld\\n\\t*%s++%s\\n\", \n \t\t   reg_names[REG_J], -current_frame_info.var_size, sp, reg_names[REG_J]);\n \t}\n     }\n@@ -1391,7 +1399,7 @@ emit_move_sequence (operands, mode)\n \n void\n double_reg_from_memory (operands)\n-rtx operands[];\n+     rtx operands[];\n {\n     rtx xoperands[4];\n \n@@ -1412,7 +1420,6 @@ rtx operands[];\n     else if (GET_CODE(XEXP(operands[1],0)) == PLUS)\n     {\n       rtx addr;\n-      rtx base;\n       int offset;\n \n       output_asm_insn (\"%u0=%1\", operands);\n@@ -1440,7 +1447,7 @@ rtx operands[];\n \n void\n double_reg_to_memory (operands)\n-rtx operands[];\n+     rtx operands[];\n {\n     rtx xoperands[4];\n \n@@ -1491,6 +1498,8 @@ rtx operands[];\n void\n override_options ()\n {\n+  char *tmp;\n+\n   if (chip_name == (char *) 0)\n     chip_name = DEFAULT_CHIP_NAME;\n \n@@ -1508,19 +1517,21 @@ override_options ()\n   \n   save_chip_name = xstrdup (chip_name);\n \n-  rsect_text = (char *) xmalloc (strlen(\".rsect \") + \n-\t\t\t\t strlen(text_seg_name) + 3);\n-  rsect_data = (char *) xmalloc (strlen(\".rsect \") + \n-\t\t\t\t strlen(data_seg_name) + 3);\n-  rsect_bss = (char *) xmalloc (strlen(\".rsect \") + \n-\t\t\t\tstrlen(bss_seg_name) + 3);\n-  rsect_const = (char *) xmalloc (strlen(\".rsect \") + \n-\t\t\t\t  strlen(const_seg_name) + 3);\n-  \n-  sprintf (rsect_text, \".rsect \\\"%s\\\"\", text_seg_name);\n-  sprintf (rsect_data, \".rsect \\\"%s\\\"\", data_seg_name);\n-  sprintf (rsect_bss,  \".rsect \\\"%s\\\"\", bss_seg_name);\n-  sprintf (rsect_const, \".rsect \\\"%s\\\"\", const_seg_name);\n+  rsect_text = tmp = (char *) xmalloc (strlen(\".rsect \") + \n+\t\t\t\t       strlen(text_seg_name) + 3);\n+  sprintf (tmp, \".rsect \\\"%s\\\"\", text_seg_name);\n+\n+  rsect_data = tmp = (char *) xmalloc (strlen(\".rsect \") + \n+\t\t\t\t       strlen(data_seg_name) + 3);\n+  sprintf (tmp, \".rsect \\\"%s\\\"\", data_seg_name);\n+\n+  rsect_bss = tmp = (char *) xmalloc (strlen(\".rsect \") + \n+\t\t\t\t      strlen(bss_seg_name) + 3);\n+  sprintf (tmp,  \".rsect \\\"%s\\\"\", bss_seg_name);\n+\n+  rsect_const = tmp = (char *) xmalloc (strlen(\".rsect \") + \n+\t\t\t\t\tstrlen(const_seg_name) + 3);\n+  sprintf (tmp, \".rsect \\\"%s\\\"\", const_seg_name);\n   \n   if (optimize)\n     {\n@@ -1558,7 +1569,7 @@ override_options ()\n \n enum rtx_code\n next_cc_user_code (insn)\n-rtx insn;\n+     rtx insn;\n {\n   if ( !(insn = next_cc0_user (insn)))\n     abort ();\n@@ -1592,9 +1603,9 @@ next_cc_user_unsigned (insn)\n \n void\n print_operand(file, op, letter)\n-FILE *file;\n-rtx op;\n-int letter;\n+     FILE *file;\n+     rtx op;\n+     int letter;\n {\n     enum rtx_code code;\n \n@@ -1688,8 +1699,8 @@ int letter;\n \n void\n print_operand_address(file, addr)\n-FILE *file;\n-rtx addr;\n+     FILE *file;\n+     rtx addr;\n {\n   rtx base;\n   int offset;\n@@ -1733,9 +1744,8 @@ rtx addr;\n \n void\n output_dsp16xx_float_const(operands)\n-rtx *operands;\n+     rtx *operands;\n {\n-  rtx dst = operands[0];\n   rtx src = operands[1];\n   \n #if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n@@ -1752,7 +1762,7 @@ rtx *operands;\n #endif\n }\n \n-int\n+static int\n reg_save_size ()\n {\n   int reg_save_size = 0;\n@@ -1785,8 +1795,6 @@ dsp16xx_starting_frame_offset()\n int\n initial_frame_pointer_offset()\n {\n-  int frame_size;\n-  int regno;\n   int offset = 0;\n   \n   offset = compute_frame_size (get_frame_size());\n@@ -1804,10 +1812,10 @@ initial_frame_pointer_offset()\n #if 0\n void\n emit_1600_core_shift (shift_op, operands, shift_amount, mode)\n-enum rtx_code shift_op;\n-rtx *operands;\n-int shift_amount;\n-enum machine_mode mode;\n+     enum rtx_code shift_op;\n+     rtx *operands;\n+     int shift_amount;\n+     enum machine_mode mode;\n {\n   int quotient;\n   int i;\n@@ -1868,15 +1876,15 @@ enum machine_mode mode;\n #else\n void\n emit_1600_core_shift (shift_op, operands, shift_amount)\n-enum rtx_code shift_op;\n-rtx *operands;\n-int shift_amount;\n+     enum rtx_code shift_op;\n+     rtx *operands;\n+     int shift_amount;\n {\n   int quotient;\n   int i;\n   int first_shift_emitted = 0;\n-  char **shift_asm_ptr;\n-  char **shift_asm_ptr_first;\n+  const char * const *shift_asm_ptr;\n+  const char * const *shift_asm_ptr_first;\n \n   if (shift_op == ASHIFT)\n     {\n@@ -1938,11 +1946,11 @@ int shift_amount;\n }\n #endif\n void\n-  asm_output_common(file, name, size, rounded)\n-FILE *file;\n-char *name;\n-int size;\n-int rounded;\n+asm_output_common(file, name, size, rounded)\n+     FILE *file;\n+     const char *name;\n+     int size ATTRIBUTE_UNUSED;\n+     int rounded;\n {\n     bss_section ();\n     ASM_GLOBALIZE_LABEL (file, name);\n@@ -1956,10 +1964,10 @@ int rounded;\n \n void\n asm_output_local(file, name, size, rounded)\n-FILE *file;\n-char *name;\n-int size;\n-int rounded;\n+     FILE *file;\n+     const char *name;\n+     int size ATTRIBUTE_UNUSED;\n+     int rounded;\n {\n     bss_section ();\n     assemble_name (file, name);\n@@ -1972,8 +1980,8 @@ int rounded;\n \n void\n asm_output_float (file, fp_const)\n-FILE *file;\n-double fp_const;\n+     FILE *file;\n+     double fp_const;\n {\n #if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n       REAL_VALUE_TYPE d = fp_const;\n@@ -1982,9 +1990,9 @@ double fp_const;\n       REAL_VALUE_TO_TARGET_SINGLE (d, value);\n       fputs (\"\\tint \", file);\n #ifdef WORDS_BIG_ENDIAN\n-      fprintf (file, \"0x%-4.4x, 0x%-4.4x\", (value >> 16) & 0xffff, (value & 0xffff));\n+      fprintf (file, \"0x%-4.4lx, 0x%-4.4lx\", (value >> 16) & 0xffff, (value & 0xffff));\n #else\n-      fprintf (file, \"0x%-4.4x, 0x%-4.4x\", (value & 0xffff), (value >> 16) & 0xffff);\n+      fprintf (file, \"0x%-4.4lx, 0x%-4.4lx\", (value & 0xffff), (value >> 16) & 0xffff);\n #endif\n       fputs (\"\\n\", file);\n #else\n@@ -1994,21 +2002,21 @@ double fp_const;\n \n void\n asm_output_long (file, value)\n-FILE *file;\n-long value;\n+     FILE *file;\n+     long value;\n {\n       fputs (\"\\tint \", file);\n #ifdef WORDS_BIG_ENDIAN\n-      fprintf (file, \"0x%-4.4x, 0x%-4.4x\", (value >> 16) & 0xffff, (value & 0xffff));\n+      fprintf (file, \"0x%-4.4lx, 0x%-4.4lx\", (value >> 16) & 0xffff, (value & 0xffff));\n #else\n-      fprintf (file, \"0x%-4.4x, 0x%-4.4x\", (value & 0xffff), (value >> 16) & 0xffff);\n+      fprintf (file, \"0x%-4.4lx, 0x%-4.4lx\", (value & 0xffff), (value >> 16) & 0xffff);\n #endif\n       fputs (\"\\n\", file);\n }\n \n int\n dsp16xx_address_cost (addr)\n-rtx addr;\n+     rtx addr;\n {\n     switch (GET_CODE (addr))\n     {\n@@ -2129,7 +2137,7 @@ dsp16xx_function_arg_advance (cum, mode, type, named)\n      CUMULATIVE_ARGS *cum;\t/* current arg information */\n      enum machine_mode mode;\t/* current arg mode */\n      tree type;\t\t\t/* type of the argument or 0 if lib support */\n-     int named;\t\t\t/* whether or not the argument was named */\n+     int named ATTRIBUTE_UNUSED;/* whether or not the argument was named */\n {\n   if (TARGET_REGPARM)\n     {\n@@ -2259,7 +2267,7 @@ gen_compare_reg (code, x, y)\n   return cc0_rtx;\n }\n \n-char *\n+const char *\n output_block_move (operands)\n      rtx operands[];\n {"}, {"sha": "26a69318c7edbe63b0b80fd101c5e653a16ec8c3", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=699851185ad5f8039da3cdc62a60c79dda4ce180", "patch": "@@ -19,20 +19,18 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern char *low_reg_names[];\n-extern char *text_seg_name;\n-extern char *rsect_text;\n-extern char *data_seg_name;\n-extern char *rsect_data;\n-extern char *bss_seg_name;\n-extern char *rsect_bss;\n-extern char *const_seg_name;\n-extern char *rsect_const;\n-extern char *chip_name;\n-extern char *save_chip_name;\n+extern const char *low_reg_names[];\n+extern const char *text_seg_name;\n+extern const char *rsect_text;\n+extern const char *data_seg_name;\n+extern const char *rsect_data;\n+extern const char *bss_seg_name;\n+extern const char *rsect_bss;\n+extern const char *const_seg_name;\n+extern const char *rsect_const;\n+extern const char *chip_name;\n+extern const char *save_chip_name;\n extern struct rtx_def *dsp16xx_compare_op0, *dsp16xx_compare_op1;\n-extern struct rtx_def *(*dsp16xx_compare_gen)();\n-extern struct rtx_def *gen_compare_reg();\n extern struct rtx_def *dsp16xx_addhf3_libcall;\n extern struct rtx_def *dsp16xx_subhf3_libcall;\n extern struct rtx_def *dsp16xx_mulhf3_libcall;\n@@ -56,29 +54,6 @@ extern struct rtx_def *dsp16xx_ashrhi3_libcall;\n extern struct rtx_def *dsp16xx_ashlhi3_libcall;\n extern struct rtx_def *dsp16xx_lshrhi3_libcall;\n \n-\n-extern int hard_regno_mode_ok ();\n-extern enum reg_class dsp16xx_reg_class_from_letter ();\n-extern enum reg_class dsp16xx_limit_reload_class ();\n-extern int hard_regno_nregs ();\n-extern int regno_reg_class ();\n-extern int move_operand ();\n-extern int symbolic_address_p ();\n-extern int Y_address ();\n-extern int call_address_operand ();\n-extern void notice_update_cc();\n-extern void function_prologue ();\n-extern void function_epilogue ();\n-extern int  dsp1600_comparison_reverse ();\n-extern void double_reg_from_memory ();\n-extern void double_reg_to_memory ();\n-extern struct rtx_def *dsp16xx_function_arg ();\n-extern void dsp16xx_function_arg_advance ();\n-extern enum rtx_code next_cc_user_code ();\n-extern int next_cc_user_unsigned ();\n-extern struct rtx_def *gen_tst_reg ();\n-extern char *output_block_move();\n-\n /* RUN-TIME TARGET SPECIFICATION */\n #define DSP16XX   1\n \n@@ -1671,11 +1646,11 @@ const_section ()                                                   \\\n #define ASM_OUTPUT_ASCII(MYFILE, MYSTRING, MYLENGTH) \\\n   do {\t\t\t\t\t\t\t\t\t      \\\n     FILE *_hide_asm_out_file = (MYFILE);\t\t\t\t      \\\n-    unsigned char *_hide_p = (unsigned char *) (MYSTRING);\t\t      \\\n+    const unsigned char *_hide_p = (const unsigned char *) (MYSTRING);\t      \\\n     int _hide_thissize = (MYLENGTH);\t\t\t\t\t      \\\n     {\t\t\t\t\t\t\t\t\t      \\\n       FILE *asm_out_file = _hide_asm_out_file;\t\t\t\t      \\\n-      unsigned char *p = _hide_p;\t\t\t\t\t      \\\n+      const unsigned char *p = _hide_p;\t\t\t\t\t      \\\n       int thissize = _hide_thissize;\t\t\t\t\t      \\\n       int i;\t\t\t\t\t\t\t\t      \\\n \t\t\t\t\t\t\t\t\t      \\\n@@ -1970,4 +1945,3 @@ const_section ()                                                   \\\n    are not currently supporting c++. */\n #define INIT_SECTION_ASM_OP  1\n \n-void dsp16xx_invalid_register_for_compare ();"}, {"sha": "8f9646737ba2678a7b436414ef5da854eb32bab9", "filename": "gcc/config/dsp16xx/dsp16xx.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/699851185ad5f8039da3cdc62a60c79dda4ce180/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md?ref=699851185ad5f8039da3cdc62a60c79dda4ce180", "patch": "@@ -117,6 +117,8 @@\n \n \t   case 2:\n    \t      return \\\"%0&%H1\\\";\n+           default:\n+              abort();\n          }\n }\"\n   [(set_attr \"type\" \"f3_alu,malu,f3_alu_i\")])\n@@ -405,6 +407,8 @@\n \n     case 7:\n       return \\\"%3=%2\\;*%0++%3\\\";\n+    default:\n+      abort();\n     }\n }\")\n \n@@ -485,6 +489,8 @@\n     case 3:\n     case 4:\n       return \\\"%m0=%m1-%m2\\\";\n+    default:\n+      abort();\n     }\n }\")\n \n@@ -921,6 +927,8 @@\n \t\tcase 8:\n \t\tcase 9:\n \t\t   return \\\"\\\";\n+                default:\n+                   abort();\n         }\n }\"\n [(set_attr \"type\" \"move,move,load_i,load_i,load,store,load,store,move,move\")])\n@@ -986,6 +994,8 @@\n \n                 case 9: case 10:\n \t\t   return \\\"%0=%1\\\";\n+                default:\n+                   abort();\n \t}\n }\")\n \n@@ -1032,6 +1042,8 @@\n \n                 case 9: case 10:\n \t\t   return \\\"%0=%1\\\";\n+                default:\n+                   abort();\n \t}\n }\")\n \n@@ -1187,6 +1199,8 @@\n \t\tcase 5:\n \t\tcase 6:\n \t\t   return \\\"%u0=%u1\\;%w0=%w1\\\";\n+                default:\n+                   abort();\n         }\n }\"\n [(set_attr \"type\" \"move,move,load_i,load,store,load,store\")])"}]}