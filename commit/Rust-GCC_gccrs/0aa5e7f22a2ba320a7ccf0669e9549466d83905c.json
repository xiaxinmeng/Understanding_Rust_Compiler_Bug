{"sha": "0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFhNWU3ZjIyYTJiYTMyMGE3Y2NmMDY2OWU5NTQ5NDY2ZDgzOTA1Yw==", "commit": {"author": {"name": "Evan Shaw", "email": "edsrzf@gmail.com", "date": "2011-04-25T16:39:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-25T16:39:24Z"}, "message": "Use backend interface for basic types\n\n\t* go-gcc.c (class Gcc_tree): Make get_tree const.\n\t(Gcc_backend::void_type): Implement.\n\t(Gcc_backend::bool_type): Implement.\n\t(Gcc_backend::integer_type): Implement.\n\t(Gcc_backend::float_type): Implement.\n\t(Gcc_backend::complex_type): New function.\n\t(Gcc_backend::pointer_type): New function.\n\t(Gcc_backend::make_type): New function.\n\t(type_to_tree): New function.\n\nFrom-SVN: r172931", "tree": {"sha": "25e8a8eb25aed74e0e1ebcb4a54dca47f1fb93cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e8a8eb25aed74e0e1ebcb4a54dca47f1fb93cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/comments", "author": {"login": "edsrzf", "id": 369904, "node_id": "MDQ6VXNlcjM2OTkwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/369904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edsrzf", "html_url": "https://github.com/edsrzf", "followers_url": "https://api.github.com/users/edsrzf/followers", "following_url": "https://api.github.com/users/edsrzf/following{/other_user}", "gists_url": "https://api.github.com/users/edsrzf/gists{/gist_id}", "starred_url": "https://api.github.com/users/edsrzf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edsrzf/subscriptions", "organizations_url": "https://api.github.com/users/edsrzf/orgs", "repos_url": "https://api.github.com/users/edsrzf/repos", "events_url": "https://api.github.com/users/edsrzf/events{/privacy}", "received_events_url": "https://api.github.com/users/edsrzf/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5157a881bba46a6cf7682eda323a00450b1f825f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5157a881bba46a6cf7682eda323a00450b1f825f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5157a881bba46a6cf7682eda323a00450b1f825f"}], "stats": {"total": 224, "additions": 156, "deletions": 68}, "files": [{"sha": "ad7ec733fe8ba4b34a237ef7c5efff60ff0d98c8", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "patch": "@@ -1,3 +1,15 @@\n+2011-04-25  Evan Shaw  <edsrzf@gmail.com>\n+\n+\t* go-gcc.c (class Gcc_tree): Make get_tree const.\n+\t(Gcc_backend::void_type): Implement.\n+\t(Gcc_backend::bool_type): Implement.\n+\t(Gcc_backend::integer_type): Implement.\n+\t(Gcc_backend::float_type): Implement.\n+\t(Gcc_backend::complex_type): New function.\n+\t(Gcc_backend::pointer_type): New function.\n+\t(Gcc_backend::make_type): New function.\n+\t(type_to_tree): New function.\n+\n 2011-04-21  Ian Lance Taylor  <iant@google.com>\n \n \t* go-system.h (go_assert, go_unreachable): Define."}, {"sha": "96375220638272c9007063ccf869d3ec525725a6", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 113, "deletions": 7, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "patch": "@@ -52,7 +52,7 @@ class Gcc_tree\n   { }\n \n   tree\n-  get_tree()\n+  get_tree() const\n   { return this->t_; }\n \n  private:\n@@ -133,24 +133,28 @@ class Gcc_backend : public Backend\n \n   Btype*\n   void_type()\n-  { gcc_unreachable(); }\n+  { return this->make_type(void_type_node); }\n \n   Btype*\n   bool_type()\n-  { gcc_unreachable(); }\n+  { return this->make_type(boolean_type_node); }\n \n   Btype*\n-  integer_type(bool /* is_unsigned */, int /* bits */)\n-  { gcc_unreachable(); }\n+  integer_type(bool, int);\n \n   Btype*\n-  float_type(int /* bits */)\n-  { gcc_unreachable(); }\n+  float_type(int);\n+\n+  Btype*\n+  complex_type(int);\n \n   Btype*\n   string_type()\n   { gcc_unreachable(); }\n \n+  Btype*\n+  pointer_type(const Btype*);\n+\n   Btype*\n   function_type(const Function_type*, Btype* /* receiver */,\n \t\tconst Btypes* /* parameters */,\n@@ -283,6 +287,11 @@ class Gcc_backend : public Backend\n   Bstatement*\n   make_statement(tree t)\n   { return new Bstatement(t); }\n+\n+  // Make a Btype from a tree.\n+  Btype*\n+  make_type(tree t)\n+  { return new Btype(t); }\n };\n \n // A helper function.\n@@ -293,6 +302,97 @@ get_identifier_from_string(const std::string& str)\n   return get_identifier_with_length(str.data(), str.length());\n }\n \n+// Get an unnamed integer type.\n+\n+Btype*\n+Gcc_backend::integer_type(bool is_unsigned, int bits)\n+{\n+  tree type;\n+  if (is_unsigned)\n+    {\n+      if (bits == INT_TYPE_SIZE)\n+        type = unsigned_type_node;\n+      else if (bits == CHAR_TYPE_SIZE)\n+        type = unsigned_char_type_node;\n+      else if (bits == SHORT_TYPE_SIZE)\n+        type = short_unsigned_type_node;\n+      else if (bits == LONG_TYPE_SIZE)\n+        type = long_unsigned_type_node;\n+      else if (bits == LONG_LONG_TYPE_SIZE)\n+        type = long_long_unsigned_type_node;\n+      else\n+        type = make_unsigned_type(bits);\n+    }\n+  else\n+    {\n+      if (bits == INT_TYPE_SIZE)\n+        type = integer_type_node;\n+      else if (bits == CHAR_TYPE_SIZE)\n+        type = signed_char_type_node;\n+      else if (bits == SHORT_TYPE_SIZE)\n+        type = short_integer_type_node;\n+      else if (bits == LONG_TYPE_SIZE)\n+        type = long_integer_type_node;\n+      else if (bits == LONG_LONG_TYPE_SIZE)\n+        type = long_long_integer_type_node;\n+      else\n+        type = make_signed_type(bits);\n+    }\n+  return this->make_type(type);\n+}\n+\n+// Get an unnamed float type.\n+\n+Btype*\n+Gcc_backend::float_type(int bits)\n+{\n+  tree type;\n+  if (bits == FLOAT_TYPE_SIZE)\n+    type = float_type_node;\n+  else if (bits == DOUBLE_TYPE_SIZE)\n+    type = double_type_node;\n+  else if (bits == LONG_DOUBLE_TYPE_SIZE)\n+    type = long_double_type_node;\n+  else\n+    {\n+      type = make_node(REAL_TYPE);\n+      TYPE_PRECISION(type) = bits;\n+      layout_type(type);\n+    }\n+  return this->make_type(type);\n+}\n+\n+// Get an unnamed complex type.\n+\n+Btype*\n+Gcc_backend::complex_type(int bits)\n+{\n+  tree type;\n+  if (bits == FLOAT_TYPE_SIZE * 2)\n+    type = complex_float_type_node;\n+  else if (bits == DOUBLE_TYPE_SIZE * 2)\n+    type = complex_double_type_node;\n+  else if (bits == LONG_DOUBLE_TYPE_SIZE * 2)\n+    type = complex_long_double_type_node;\n+  else\n+    {\n+      type = make_node(REAL_TYPE);\n+      TYPE_PRECISION(type) = bits / 2;\n+      layout_type(type);\n+      type = build_complex_type(type);\n+    }\n+  return this->make_type(type);\n+}\n+\n+// Get a pointer type.\n+\n+Btype*\n+Gcc_backend::pointer_type(const Btype* to_type)\n+{\n+  tree type = build_pointer_type(to_type->get_tree());\n+  return this->make_type(type);\n+}\n+\n // An expression as a statement.\n \n Bstatement*\n@@ -866,6 +966,12 @@ tree_to_block(tree t)\n   return new Bblock(t);\n }\n \n+tree\n+type_to_tree(Btype* bt)\n+{\n+  return bt->get_tree();\n+}\n+\n tree\n expr_to_tree(Bexpression* be)\n {"}, {"sha": "2d7300c72242ee8a10d73b2a351c5ca3b4f062fe", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "patch": "@@ -73,10 +73,18 @@ class Backend\n   virtual Btype*\n   float_type(int bits) = 0;\n \n+  // Get an unnamed complex type with the given number of bits.\n+  virtual Btype*\n+  complex_type(int bits) = 0;\n+\n   // Get the unnamed string type.\n   virtual Btype*\n   string_type() = 0;\n \n+  // Get a pointer type.\n+  virtual Btype*\n+  pointer_type(const Btype* to_type) = 0;\n+\n   // Get a function type.  The receiver, parameter, and results are\n   // generated from the types in the Function_type.  The Function_type\n   // is provided so that the names are available.\n@@ -299,6 +307,7 @@ extern Bexpression* tree_to_expr(tree);\n extern Bstatement* tree_to_stat(tree);\n extern Bfunction* tree_to_function(tree);\n extern Bblock* tree_to_block(tree);\n+extern tree type_to_tree(Btype*);\n extern tree expr_to_tree(Bexpression*);\n extern tree stat_to_tree(Bstatement*);\n extern tree block_to_tree(Bblock*);"}, {"sha": "f8d705b374a223ccf5819f80ddbafa1eb976ebf4", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 22, "deletions": 61, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa5e7f22a2ba320a7ccf0669e9549466d83905c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=0aa5e7f22a2ba320a7ccf0669e9549466d83905c", "patch": "@@ -31,6 +31,7 @@ extern \"C\"\n #include \"statements.h\"\n #include \"export.h\"\n #include \"import.h\"\n+#include \"backend.h\"\n #include \"types.h\"\n \n // Class Type.\n@@ -1622,8 +1623,11 @@ class Void_type : public Type\n \n  protected:\n   tree\n-  do_get_tree(Gogo*)\n-  { return void_type_node; }\n+  do_get_tree(Gogo* gogo)\n+  {\n+    Btype* btype = gogo->backend()->void_type();\n+    return type_to_tree(btype);\n+  }\n \n   tree\n   do_get_init_tree(Gogo*, tree, bool)\n@@ -1660,8 +1664,11 @@ class Boolean_type : public Type\n \n  protected:\n   tree\n-  do_get_tree(Gogo*)\n-  { return boolean_type_node; }\n+  do_get_tree(Gogo* gogo)\n+  {\n+    Btype* btype = gogo->backend()->bool_type();\n+    return type_to_tree(btype);\n+  }\n \n   tree\n   do_get_init_tree(Gogo*, tree type_tree, bool is_clear)\n@@ -1806,36 +1813,10 @@ Integer_type::do_get_tree(Gogo*)\n       return error_mark_node;\n     }\n \n-  if (this->is_unsigned_)\n-    {\n-      if (this->bits_ == INT_TYPE_SIZE)\n-\treturn unsigned_type_node;\n-      else if (this->bits_ == CHAR_TYPE_SIZE)\n-\treturn unsigned_char_type_node;\n-      else if (this->bits_ == SHORT_TYPE_SIZE)\n-\treturn short_unsigned_type_node;\n-      else if (this->bits_ == LONG_TYPE_SIZE)\n-\treturn long_unsigned_type_node;\n-      else if (this->bits_ == LONG_LONG_TYPE_SIZE)\n-\treturn long_long_unsigned_type_node;\n-      else\n-\treturn make_unsigned_type(this->bits_);\n-    }\n-  else\n-    {\n-      if (this->bits_ == INT_TYPE_SIZE)\n-\treturn integer_type_node;\n-      else if (this->bits_ == CHAR_TYPE_SIZE)\n-\treturn signed_char_type_node;\n-      else if (this->bits_ == SHORT_TYPE_SIZE)\n-\treturn short_integer_type_node;\n-      else if (this->bits_ == LONG_TYPE_SIZE)\n-\treturn long_integer_type_node;\n-      else if (this->bits_ == LONG_LONG_TYPE_SIZE)\n-\treturn long_long_integer_type_node;\n-      else\n-\treturn make_signed_type(this->bits_);\n-    }\n+  // FIXME: GOGO can be NULL when called from go_type_for_size, so call\n+  // go_get_backend() instead of gogo->backend().\n+  Btype* btype = go_get_backend()->integer_type(this->is_unsigned_, this->bits_);\n+  return type_to_tree(btype);\n }\n \n tree\n@@ -1968,19 +1949,8 @@ Float_type::do_hash_for_method(Gogo*) const\n tree\n Float_type::type_tree() const\n {\n-  if (this->bits_ == FLOAT_TYPE_SIZE)\n-    return float_type_node;\n-  else if (this->bits_ == DOUBLE_TYPE_SIZE)\n-    return double_type_node;\n-  else if (this->bits_ == LONG_DOUBLE_TYPE_SIZE)\n-    return long_double_type_node;\n-  else\n-    {\n-      tree ret = make_node(REAL_TYPE);\n-      TYPE_PRECISION(ret) = this->bits_;\n-      layout_type(ret);\n-      return ret;\n-    }\n+  Btype* btype = go_get_backend()->float_type(this->bits_);\n+  return type_to_tree(btype);\n }\n \n // Get a tree.\n@@ -2124,19 +2094,8 @@ Complex_type::do_hash_for_method(Gogo*) const\n tree\n Complex_type::type_tree() const\n {\n-  if (this->bits_ == FLOAT_TYPE_SIZE * 2)\n-    return complex_float_type_node;\n-  else if (this->bits_ == DOUBLE_TYPE_SIZE * 2)\n-    return complex_double_type_node;\n-  else if (this->bits_ == LONG_DOUBLE_TYPE_SIZE * 2)\n-    return complex_long_double_type_node;\n-  else\n-    {\n-      tree ret = make_node(REAL_TYPE);\n-      TYPE_PRECISION(ret) = this->bits_ / 2;\n-      layout_type(ret);\n-      return build_complex_type(ret);\n-    }\n+  Btype* btype = go_get_backend()->complex_type(this->bits_);\n+  return type_to_tree(btype);\n }\n \n // Get a tree.\n@@ -3136,7 +3095,9 @@ Pointer_type::do_hash_for_method(Gogo* gogo) const\n tree\n Pointer_type::do_get_tree(Gogo* gogo)\n {\n-  return build_pointer_type(this->to_type_->get_tree(gogo));\n+  Btype* to_btype = tree_to_type(this->to_type_->get_tree(gogo));\n+  Btype* btype = gogo->backend()->pointer_type(to_btype);\n+  return type_to_tree(btype);\n }\n \n // Initialize a pointer type."}]}