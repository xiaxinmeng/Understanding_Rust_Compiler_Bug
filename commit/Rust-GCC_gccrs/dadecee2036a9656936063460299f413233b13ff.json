{"sha": "dadecee2036a9656936063460299f413233b13ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkZWNlZTIwMzZhOTY1NjkzNjA2MzQ2MDI5OWY0MTMyMzNiMTNmZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-07-29T13:48:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-29T13:48:40Z"}, "message": "re PR target/47715 ([x32] TLS doesn't work)\n\n\tPR target/47715\n\t* config/i386/i386.md (*load_tp_x32): New.\n\t(*load_tp_x32_zext): Ditto.\n\t(*add_tp_x32): Ditto.\n\t(*add_tp_x32_zext): Ditto.\n\t(*load_tp_<mode>): Disable for TARGET_X32 targets.\n\t(*add_tp_<mode>): Ditto.\n\t* config/i386/i386.c (get_thread_pointer): Load thread pointer in\n\tptr_mode and convert to Pmode if needed.\n\nFrom-SVN: r176924", "tree": {"sha": "c5de10fd2dd2a214db09002d032ac6d25d8bb75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5de10fd2dd2a214db09002d032ac6d25d8bb75d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dadecee2036a9656936063460299f413233b13ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadecee2036a9656936063460299f413233b13ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dadecee2036a9656936063460299f413233b13ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dadecee2036a9656936063460299f413233b13ff/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db7ccee202ecc15386eb283a83f75530f7ed856a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7ccee202ecc15386eb283a83f75530f7ed856a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7ccee202ecc15386eb283a83f75530f7ed856a"}], "stats": {"total": 93, "additions": 81, "deletions": 12}, "files": [{"sha": "2f7117403b6a6d682380946bbf7e57a681727386", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadecee2036a9656936063460299f413233b13ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadecee2036a9656936063460299f413233b13ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dadecee2036a9656936063460299f413233b13ff", "patch": "@@ -1,5 +1,17 @@\n+2011-07-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/47715\n+\t* config/i386/i386.md (*load_tp_x32): New.\n+\t(*load_tp_x32_zext): Ditto.\n+\t(*add_tp_x32): Ditto.\n+\t(*add_tp_x32_zext): Ditto.\n+\t(*load_tp_<mode>): Disable for TARGET_X32 targets.\n+\t(*add_tp_<mode>): Ditto.\n+\t* config/i386/i386.c (get_thread_pointer): Load thread pointer in\n+\tptr_mode and convert to Pmode if needed.\n+\n 2011-07-29  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/49687\n \t* config/avr/avr.md (mulsi3, *mulsi3, mulu<mode>si3,\n \tmuls<mode>si3, mulohisi3, mulhisi3, umulhisi3, usmulhisi3,\n@@ -18,7 +30,7 @@\n \tare not suitable.\n \n 2011-07-29  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/49313\n \t* config/avr/libgcc.S (__ffshi2): Don't skip 2-word instruction.\n \t(__ctzsi2): Result for 0 may be undefined."}, {"sha": "f751e748d2fc55a8ed8d2497a92345c1d92618bc", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadecee2036a9656936063460299f413233b13ff/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadecee2036a9656936063460299f413233b13ff/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dadecee2036a9656936063460299f413233b13ff", "patch": "@@ -12118,17 +12118,15 @@ legitimize_pic_address (rtx orig, rtx reg)\n static rtx\n get_thread_pointer (bool to_reg)\n {\n-  rtx tp, reg, insn;\n+  rtx tp = gen_rtx_UNSPEC (ptr_mode, gen_rtvec (1, const0_rtx), UNSPEC_TP);\n \n-  tp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx), UNSPEC_TP);\n-  if (!to_reg)\n-    return tp;\n+  if (GET_MODE (tp) != Pmode)\n+    tp = convert_to_mode (Pmode, tp, 1);\n \n-  reg = gen_reg_rtx (Pmode);\n-  insn = gen_rtx_SET (VOIDmode, reg, tp);\n-  insn = emit_insn (insn);\n+  if (to_reg)\n+    tp = copy_addr_to_reg (tp);\n \n-  return reg;\n+  return tp;\n }\n \n /* Construct the SYMBOL_REF for the tls_get_addr function.  */"}, {"sha": "2210bc819d9e0b4b84536fe930d4a9c911aa6587", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadecee2036a9656936063460299f413233b13ff/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadecee2036a9656936063460299f413233b13ff/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=dadecee2036a9656936063460299f413233b13ff", "patch": "@@ -12444,23 +12444,72 @@\n (define_mode_attr tp_seg [(SI \"gs\") (DI \"fs\")])\n \n ;; Load and add the thread base pointer from %<tp_seg>:0.\n+(define_insn \"*load_tp_x32\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(const_int 0)] UNSPEC_TP))]\n+  \"TARGET_X32\"\n+  \"mov{l}\\t{%%fs:0, %0|%0, DWORD PTR fs:0}\"\n+  [(set_attr \"type\" \"imov\")\n+   (set_attr \"modrm\" \"0\")\n+   (set_attr \"length\" \"7\")\n+   (set_attr \"memory\" \"load\")\n+   (set_attr \"imm_disp\" \"false\")])\n+\n+(define_insn \"*load_tp_x32_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (unspec:SI [(const_int 0)] UNSPEC_TP)))]\n+  \"TARGET_X32\"\n+  \"mov{l}\\t{%%fs:0, %k0|%k0, DWORD PTR fs:0}\"\n+  [(set_attr \"type\" \"imov\")\n+   (set_attr \"modrm\" \"0\")\n+   (set_attr \"length\" \"7\")\n+   (set_attr \"memory\" \"load\")\n+   (set_attr \"imm_disp\" \"false\")])\n+\n (define_insn \"*load_tp_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec:P [(const_int 0)] UNSPEC_TP))]\n-  \"\"\n+  \"!TARGET_X32\"\n   \"mov{<imodesuffix>}\\t{%%<tp_seg>:0, %0|%0, <iptrsize> PTR <tp_seg>:0}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"modrm\" \"0\")\n    (set_attr \"length\" \"7\")\n    (set_attr \"memory\" \"load\")\n    (set_attr \"imm_disp\" \"false\")])\n \n+(define_insn \"*add_tp_x32\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (unspec:SI [(const_int 0)] UNSPEC_TP)\n+\t\t (match_operand:SI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_X32\"\n+  \"add{l}\\t{%%fs:0, %0|%0, DWORD PTR fs:0}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"modrm\" \"0\")\n+   (set_attr \"length\" \"7\")\n+   (set_attr \"memory\" \"load\")\n+   (set_attr \"imm_disp\" \"false\")])\n+\n+(define_insn \"*add_tp_x32_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI (unspec:SI [(const_int 0)] UNSPEC_TP)\n+\t\t   (match_operand:SI 1 \"register_operand\" \"0\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_X32\"\n+  \"add{l}\\t{%%fs:0, %k0|%k0, DWORD PTR fs:0}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"modrm\" \"0\")\n+   (set_attr \"length\" \"7\")\n+   (set_attr \"memory\" \"load\")\n+   (set_attr \"imm_disp\" \"false\")])\n+\n (define_insn \"*add_tp_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(plus:P (unspec:P [(const_int 0)] UNSPEC_TP)\n \t\t(match_operand:P 1 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"!TARGET_X32\"\n   \"add{<imodesuffix>}\\t{%%<tp_seg>:0, %0|%0, <iptrsize> PTR <tp_seg>:0}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"modrm\" \"0\")"}, {"sha": "8f8c96ffa855c23bf39b616e2d01cbbd4d77abeb", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dadecee2036a9656936063460299f413233b13ff/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dadecee2036a9656936063460299f413233b13ff/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=dadecee2036a9656936063460299f413233b13ff", "patch": "@@ -4570,9 +4570,14 @@ stack_protect_prologue (void)\n   tree guard_decl = targetm.stack_protect_guard ();\n   rtx x, y;\n \n+  printf (\"TESTx\\n\");\n+\n   x = expand_normal (crtl->stack_protect_guard);\n   y = expand_normal (guard_decl);\n \n+  debug_rtx (x);\n+  debug_rtx (y);\n+\n   /* Allow the target to copy from Y to X without leaking Y into a\n      register.  */\n   if (HAVE_stack_protect_set)\n@@ -4604,9 +4609,14 @@ stack_protect_epilogue (void)\n   rtx label = gen_label_rtx ();\n   rtx x, y, tmp;\n \n+  printf (\"TESTz\\n\");\n+\n   x = expand_normal (crtl->stack_protect_guard);\n   y = expand_normal (guard_decl);\n \n+  debug_rtx (x);\n+  debug_rtx (y);\n+\n   /* Allow the target to compare Y with X without leaking either into\n      a register.  */\n   switch (HAVE_stack_protect_test != 0)"}]}