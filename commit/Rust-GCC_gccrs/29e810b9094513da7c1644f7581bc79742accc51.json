{"sha": "29e810b9094513da7c1644f7581bc79742accc51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllODEwYjkwOTQ1MTNkYTdjMTY0NGY3NTgxYmM3OTc0MmFjY2M1MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-03T10:02:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-03T10:02:56Z"}, "message": "tree-affine.c (add_elt_to_tree): Fix association issue...\n\n2013-09-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-affine.c (add_elt_to_tree): Fix association issue,\n\tavoid useless converts and make sure to always return a\n\tproperly typed result.\n\nFrom-SVN: r202205", "tree": {"sha": "306dbde1bee536787e4b291fdb877dabd8dcd151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/306dbde1bee536787e4b291fdb877dabd8dcd151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29e810b9094513da7c1644f7581bc79742accc51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e810b9094513da7c1644f7581bc79742accc51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e810b9094513da7c1644f7581bc79742accc51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e810b9094513da7c1644f7581bc79742accc51/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbfc28948e3e382cc1e6409087e963ba2266d0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfc28948e3e382cc1e6409087e963ba2266d0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfc28948e3e382cc1e6409087e963ba2266d0b9"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "e107860ae1a2279c62a3b56051865322e5996d51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e810b9094513da7c1644f7581bc79742accc51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e810b9094513da7c1644f7581bc79742accc51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29e810b9094513da7c1644f7581bc79742accc51", "patch": "@@ -1,3 +1,9 @@\n+2013-09-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-affine.c (add_elt_to_tree): Fix association issue,\n+\tavoid useless converts and make sure to always return a\n+\tproperly typed result.\n+\n 2013-09-03  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57656"}, {"sha": "81da521277f5d6fb224ad20c2240021035558475", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e810b9094513da7c1644f7581bc79742accc51/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e810b9094513da7c1644f7581bc79742accc51/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=29e810b9094513da7c1644f7581bc79742accc51", "patch": "@@ -381,36 +381,43 @@ add_elt_to_tree (tree expr, tree type, tree elt, double_int scale,\n   if (scale.is_minus_one ()\n       && POINTER_TYPE_P (TREE_TYPE (elt)))\n     {\n-      elt = fold_build1 (NEGATE_EXPR, sizetype, convert_to_ptrofftype (elt));\n+      elt = convert_to_ptrofftype (elt);\n+      elt = fold_build1 (NEGATE_EXPR, TREE_TYPE (elt), elt);\n       scale = double_int_one;\n     }\n \n   if (scale.is_one ())\n     {\n       if (!expr)\n-\treturn elt;\n+\t{\n+\t  if (POINTER_TYPE_P (TREE_TYPE (elt)))\n+\t    return elt;\n+\t  else\n+\t    return fold_convert (type1, elt);\n+\t}\n \n       if (POINTER_TYPE_P (TREE_TYPE (expr)))\n-\treturn fold_build_pointer_plus (expr, convert_to_ptrofftype (elt));\n+\treturn fold_build_pointer_plus (expr, elt);\n       if (POINTER_TYPE_P (TREE_TYPE (elt)))\n-\treturn fold_build_pointer_plus (elt, convert_to_ptrofftype (expr));\n+\treturn fold_build_pointer_plus (elt, expr);\n       return fold_build2 (PLUS_EXPR, type1,\n-\t\t\t  fold_convert (type1, expr),\n-\t\t\t  fold_convert (type1, elt));\n+\t\t\t  expr, fold_convert (type1, elt));\n     }\n \n   if (scale.is_minus_one ())\n     {\n       if (!expr)\n-\treturn fold_build1 (NEGATE_EXPR, TREE_TYPE (elt), elt);\n+\treturn fold_build1 (NEGATE_EXPR, type1,\n+\t\t\t    fold_convert (type1, elt));\n \n       if (POINTER_TYPE_P (TREE_TYPE (expr)))\n-\treturn fold_build_pointer_plus\n-\t    (expr, convert_to_ptrofftype\n-\t     (fold_build1 (NEGATE_EXPR, TREE_TYPE (elt), elt)));\n+\t{\n+\t  elt = convert_to_ptrofftype (elt);\n+\t  elt = fold_build1 (NEGATE_EXPR, TREE_TYPE (elt), elt);\n+\t  return fold_build_pointer_plus (expr, elt);\n+\t}\n       return fold_build2 (MINUS_EXPR, type1,\n-\t\t\t  fold_convert (type1, expr),\n-\t\t\t  fold_convert (type1, elt));\n+\t\t\t  expr, fold_convert (type1, elt));\n     }\n \n   elt = fold_convert (type1, elt);\n@@ -434,8 +441,7 @@ add_elt_to_tree (tree expr, tree type, tree elt, double_int scale,\n         elt = fold_build1 (NEGATE_EXPR, type1, elt);\n       return fold_build_pointer_plus (expr, elt);\n     }\n-  return fold_build2 (code, type1,\n-\t\t      fold_convert (type1, expr), elt);\n+  return fold_build2 (code, type1, expr, elt);\n }\n \n /* Makes tree from the affine combination COMB.  */"}]}