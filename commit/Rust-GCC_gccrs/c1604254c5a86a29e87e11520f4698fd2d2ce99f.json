{"sha": "c1604254c5a86a29e87e11520f4698fd2d2ce99f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2MDQyNTRjNWE4NmEyOWU4N2UxMTUyMGY0Njk4ZmQyZDJjZTk5Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-11T11:17:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-11T11:17:21Z"}, "message": "re PR tree-optimization/61452 (hang at -O1 and -Os on x86_64-linux-gnu)\n\n2014-06-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61452\n\t* tree-ssa-sccvn.c (visit_phi): Remove pointless setting of\n\texpr and has_constants in case we found a leader.\n\t(simplify_binary_expression): Always valueize operands first.\n\t(simplify_unary_expression): Likewise.\n\n\t* gcc.dg/torture/pr61452.c: New testcase.\n\nFrom-SVN: r211450", "tree": {"sha": "dc1836abf9516c940ddea1b6de6e2edd678210f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc1836abf9516c940ddea1b6de6e2edd678210f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1604254c5a86a29e87e11520f4698fd2d2ce99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1604254c5a86a29e87e11520f4698fd2d2ce99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1604254c5a86a29e87e11520f4698fd2d2ce99f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1604254c5a86a29e87e11520f4698fd2d2ce99f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac8345a525674204550c7a9f5cbb3deec7467d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8345a525674204550c7a9f5cbb3deec7467d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8345a525674204550c7a9f5cbb3deec7467d6d"}], "stats": {"total": 130, "additions": 69, "deletions": 61}, "files": [{"sha": "c586b44a030d23c99c53a28cc9c2a4445495d596", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1604254c5a86a29e87e11520f4698fd2d2ce99f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1604254c5a86a29e87e11520f4698fd2d2ce99f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1604254c5a86a29e87e11520f4698fd2d2ce99f", "patch": "@@ -1,3 +1,8 @@\n+2014-06-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61452\n+\t* gcc.dg/torture/pr61452.c: New testcase.\n+\n 2014-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/34049"}, {"sha": "a62de30fd8468809db8f072c28695272e2ad3b73", "filename": "gcc/testsuite/gcc.dg/torture/pr61452.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1604254c5a86a29e87e11520f4698fd2d2ce99f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61452.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1604254c5a86a29e87e11520f4698fd2d2ce99f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61452.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61452.c?ref=c1604254c5a86a29e87e11520f4698fd2d2ce99f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+int a, b;\n+short c, d;\n+char e, f;\n+\n+int\n+fn1 (int p1, char p2)\n+{\n+  return p1 || p2 ? 0 : p2;\n+}\n+\n+void\n+fn2 ()\n+{\n+  for (; a;)\n+    {\n+      int g;\n+      g = c = e;\n+      for (; a;)\n+\tb = fn1 (g = d = e, g);\n+      f = g; \n+    }\n+}\n+\n+int\n+main ()\n+{\n+  fn2 (); \n+  return 0;\n+}"}, {"sha": "b949bfa725d055a07c8635fdbf3f3cf6158817e5", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 33, "deletions": 61, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1604254c5a86a29e87e11520f4698fd2d2ce99f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1604254c5a86a29e87e11520f4698fd2d2ce99f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=c1604254c5a86a29e87e11520f4698fd2d2ce99f", "patch": "@@ -3140,35 +3140,12 @@ visit_phi (gimple phi)\n   /* If all value numbered to the same value, the phi node has that\n      value.  */\n   if (allsame)\n-    {\n-      if (is_gimple_min_invariant (sameval))\n-\t{\n-\t  VN_INFO (PHI_RESULT (phi))->has_constants = true;\n-\t  if (sameval != VN_TOP)\n-\t    VN_INFO (PHI_RESULT (phi))->expr = sameval;\n-\t}\n-      else\n-\t{\n-\t  VN_INFO (PHI_RESULT (phi))->has_constants = false;\n-\t  if (sameval != VN_TOP)\n-\t    VN_INFO (PHI_RESULT (phi))->expr = sameval;\n-\t}\n-\n-      if (TREE_CODE (sameval) == SSA_NAME)\n-\treturn visit_copy (PHI_RESULT (phi), sameval);\n-\n-      return set_ssa_val_to (PHI_RESULT (phi), sameval);\n-    }\n+    return set_ssa_val_to (PHI_RESULT (phi), sameval);\n \n   /* Otherwise, see if it is equivalent to a phi node in this block.  */\n   result = vn_phi_lookup (phi);\n   if (result)\n-    {\n-      if (TREE_CODE (result) == SSA_NAME)\n-\tchanged = visit_copy (PHI_RESULT (phi), result);\n-      else\n-\tchanged = set_ssa_val_to (PHI_RESULT (phi), result);\n-    }\n+    changed = set_ssa_val_to (PHI_RESULT (phi), result);\n   else\n     {\n       vn_phi_insert (phi, PHI_RESULT (phi));\n@@ -3262,24 +3239,18 @@ simplify_binary_expression (gimple stmt)\n      catch those with constants.  The goal here is to simultaneously\n      combine constants between expressions, but avoid infinite\n      expansion of expressions during simplification.  */\n-  if (TREE_CODE (op0) == SSA_NAME)\n-    {\n-      if (VN_INFO (op0)->has_constants\n+  op0 = vn_valueize (op0);\n+  if (TREE_CODE (op0) == SSA_NAME\n+      && (VN_INFO (op0)->has_constants\n \t  || TREE_CODE_CLASS (code) == tcc_comparison\n-\t  || code == COMPLEX_EXPR)\n-\top0 = vn_get_expr_for (op0);\n-      else\n-\top0 = vn_valueize (op0);\n-    }\n+\t  || code == COMPLEX_EXPR))\n+    op0 = vn_get_expr_for (op0);\n \n-  if (TREE_CODE (op1) == SSA_NAME)\n-    {\n-      if (VN_INFO (op1)->has_constants\n-\t  || code == COMPLEX_EXPR)\n-\top1 = vn_get_expr_for (op1);\n-      else\n-\top1 = vn_valueize (op1);\n-    }\n+  op1 = vn_valueize (op1);\n+  if (TREE_CODE (op1) == SSA_NAME\n+      && (VN_INFO (op1)->has_constants\n+\t  || code == COMPLEX_EXPR))\n+    op1 = vn_get_expr_for (op1);\n \n   /* Pointer plus constant can be represented as invariant address.\n      Do so to allow further propatation, see also tree forwprop.  */\n@@ -3333,28 +3304,29 @@ simplify_unary_expression (gimple stmt)\n       || code == BIT_FIELD_REF)\n     op0 = TREE_OPERAND (op0, 0);\n \n-  if (TREE_CODE (op0) != SSA_NAME)\n-    return NULL_TREE;\n-\n   orig_op0 = op0;\n-  if (VN_INFO (op0)->has_constants)\n-    op0 = vn_get_expr_for (op0);\n-  else if (CONVERT_EXPR_CODE_P (code)\n-\t   || code == REALPART_EXPR\n-\t   || code == IMAGPART_EXPR\n-\t   || code == VIEW_CONVERT_EXPR\n-\t   || code == BIT_FIELD_REF)\n+  op0 = vn_valueize (op0);\n+  if (TREE_CODE (op0) == SSA_NAME)\n     {\n-      /* We want to do tree-combining on conversion-like expressions.\n-         Make sure we feed only SSA_NAMEs or constants to fold though.  */\n-      tree tem = vn_get_expr_for (op0);\n-      if (UNARY_CLASS_P (tem)\n-\t  || BINARY_CLASS_P (tem)\n-\t  || TREE_CODE (tem) == VIEW_CONVERT_EXPR\n-\t  || TREE_CODE (tem) == SSA_NAME\n-\t  || TREE_CODE (tem) == CONSTRUCTOR\n-\t  || is_gimple_min_invariant (tem))\n-\top0 = tem;\n+      if (VN_INFO (op0)->has_constants)\n+\top0 = vn_get_expr_for (op0);\n+      else if (CONVERT_EXPR_CODE_P (code)\n+\t       || code == REALPART_EXPR\n+\t       || code == IMAGPART_EXPR\n+\t       || code == VIEW_CONVERT_EXPR\n+\t       || code == BIT_FIELD_REF)\n+\t{\n+\t  /* We want to do tree-combining on conversion-like expressions.\n+\t     Make sure we feed only SSA_NAMEs or constants to fold though.  */\n+\t  tree tem = vn_get_expr_for (op0);\n+\t  if (UNARY_CLASS_P (tem)\n+\t      || BINARY_CLASS_P (tem)\n+\t      || TREE_CODE (tem) == VIEW_CONVERT_EXPR\n+\t      || TREE_CODE (tem) == SSA_NAME\n+\t      || TREE_CODE (tem) == CONSTRUCTOR\n+\t      || is_gimple_min_invariant (tem))\n+\t    op0 = tem;\n+\t}\n     }\n \n   /* Avoid folding if nothing changed, but remember the expression.  */"}]}