{"sha": "425ebda24393eb4f40190228b7ef4b69e6253251", "node_id": "C_kwDOANBUbNoAKDQyNWViZGEyNDM5M2ViNGY0MDE5MDIyOGI3ZWY0YjY5ZTYyNTMyNTE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-17T15:27:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-18T08:10:52Z"}, "message": "type-path-fn: Add location info on start of Fn token", "tree": {"sha": "89c1f6d2a8d74a8392f410c901c5385f5b6bdda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c1f6d2a8d74a8392f410c901c5385f5b6bdda0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/425ebda24393eb4f40190228b7ef4b69e6253251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425ebda24393eb4f40190228b7ef4b69e6253251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/425ebda24393eb4f40190228b7ef4b69e6253251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425ebda24393eb4f40190228b7ef4b69e6253251/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef06769781a76eaa0de6fb500bebb8473e549f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef06769781a76eaa0de6fb500bebb8473e549f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef06769781a76eaa0de6fb500bebb8473e549f7e"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "ed37f400dc58364694eba96a8141b6a57b31ef91", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425ebda24393eb4f40190228b7ef4b69e6253251/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425ebda24393eb4f40190228b7ef4b69e6253251/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=425ebda24393eb4f40190228b7ef4b69e6253251", "patch": "@@ -541,11 +541,13 @@ struct TypePathFunction\n   // FIXME: think of better way to mark as invalid than taking up storage\n   bool is_invalid;\n \n-  // TODO: should this have location info?\n+  Location locus;\n \n protected:\n   // Constructor only used to create invalid type path functions.\n-  TypePathFunction (bool is_invalid) : is_invalid (is_invalid) {}\n+  TypePathFunction (bool is_invalid, Location locus)\n+    : is_invalid (is_invalid), locus (locus)\n+  {}\n \n public:\n   // Returns whether the return type of the function has been specified.\n@@ -558,13 +560,16 @@ struct TypePathFunction\n   bool is_error () const { return is_invalid; }\n \n   // Creates an error state function.\n-  static TypePathFunction create_error () { return TypePathFunction (true); }\n+  static TypePathFunction create_error ()\n+  {\n+    return TypePathFunction (true, Location ());\n+  }\n \n   // Constructor\n-  TypePathFunction (std::vector<std::unique_ptr<Type> > inputs,\n+  TypePathFunction (std::vector<std::unique_ptr<Type> > inputs, Location locus,\n \t\t    std::unique_ptr<Type> type = nullptr)\n     : inputs (std::move (inputs)), return_type (std::move (type)),\n-      is_invalid (false)\n+      is_invalid (false), locus (locus)\n   {}\n \n   // Copy constructor with clone"}, {"sha": "c35595c29d705e0390af92f6fb56029f81e26cc9", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425ebda24393eb4f40190228b7ef4b69e6253251/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425ebda24393eb4f40190228b7ef4b69e6253251/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=425ebda24393eb4f40190228b7ef4b69e6253251", "patch": "@@ -6436,7 +6436,8 @@ Parser<ManagedTokenSource>::parse_type_path_segment ()\n       }\n       case LEFT_PAREN: {\n \t// parse type path function\n-\tAST::TypePathFunction type_path_function = parse_type_path_function ();\n+\tAST::TypePathFunction type_path_function\n+\t  = parse_type_path_function (locus);\n \n \tif (type_path_function.is_error ())\n \t  {\n@@ -6462,7 +6463,7 @@ Parser<ManagedTokenSource>::parse_type_path_segment ()\n // Parses a function call representation inside a type path.\n template <typename ManagedTokenSource>\n AST::TypePathFunction\n-Parser<ManagedTokenSource>::parse_type_path_function ()\n+Parser<ManagedTokenSource>::parse_type_path_function (Location id_location)\n {\n   if (!skip_token (LEFT_PAREN))\n     {\n@@ -6508,7 +6509,8 @@ Parser<ManagedTokenSource>::parse_type_path_function ()\n   std::unique_ptr<AST::Type> return_type = parse_function_return_type ();\n \n   inputs.shrink_to_fit ();\n-  return AST::TypePathFunction (std::move (inputs), std::move (return_type));\n+  return AST::TypePathFunction (std::move (inputs), id_location,\n+\t\t\t\tstd::move (return_type));\n }\n \n // Parses a path inside an expression that allows generic arguments."}, {"sha": "17440d50f28a4cb99758bdcd17acb9888d5ba632", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/425ebda24393eb4f40190228b7ef4b69e6253251/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/425ebda24393eb4f40190228b7ef4b69e6253251/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=425ebda24393eb4f40190228b7ef4b69e6253251", "patch": "@@ -139,7 +139,7 @@ template <typename ManagedTokenSource> class Parser\n   AST::PathIdentSegment parse_path_ident_segment ();\n   AST::GenericArgs parse_path_generic_args ();\n   AST::GenericArgsBinding parse_generic_args_binding ();\n-  AST::TypePathFunction parse_type_path_function ();\n+  AST::TypePathFunction parse_type_path_function (Location locus);\n   AST::PathExprSegment parse_path_expr_segment ();\n   AST::QualifiedPathInExpression\n   // When given a pratt_parsed_loc, use it as the location of the"}]}