{"sha": "2cca9751700946f1398fc3bcb96d529bb2964f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjYTk3NTE3MDA5NDZmMTM5OGZjM2JjYjk2ZDUyOWJiMjk2NGYwZg==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-11-10T17:14:47Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-11-10T17:14:47Z"}, "message": "opts: Change `is incompatible with` messages to have standard parametrised form\n\nHello,\n\nIn a recent review for one of the hwasan patches Richard S. noticed there are\nquite a few errors of the form \"%<someflag%> is incompatible with\n<otherflag%>\".\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-October/556137.html\n\nIn order to avoid this creating extra work for translators we would like to\nchange these error messages to use the form \"%qs is incompatible with %qs\" and\npass the flag as format arguments.\n\nThis patch implements that change.\nThere is only one change in the output the compiler produces from this patch,\nan error message of \"-fsanitize=address and -fsanitize=kernel-address are\nincompatible with -fsanitize=thread\" has been changed to \"-fsanitize=thread is\nincompatible with -fsanitize=address|kernel-address\".\nThis matches the similar error messages for live patching which use the\nmessages \"-f<something> is incompatible with\n-flive-patching=inline-only-static|inline-clone\".\n\nOk for trunk?\n\ngcc/ChangeLog:\n\n\t* opts.c (control_options_for_live_patching): Reform 'is incompatible\n\twith' error messages to use a standard message with differing format\n\targuments.\n\t(finish_options): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/ubsan/sanitize-recover-7.c: Update testcase.", "tree": {"sha": "d4bf1197b641c86787d0fa11d72af6fddcbb3bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4bf1197b641c86787d0fa11d72af6fddcbb3bce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cca9751700946f1398fc3bcb96d529bb2964f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cca9751700946f1398fc3bcb96d529bb2964f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cca9751700946f1398fc3bcb96d529bb2964f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cca9751700946f1398fc3bcb96d529bb2964f0f/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831f24a778a016c6ce1ae739235e3f7e1f28ed8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831f24a778a016c6ce1ae739235e3f7e1f28ed8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831f24a778a016c6ce1ae739235e3f7e1f28ed8c"}], "stats": {"total": 108, "additions": 51, "deletions": 57}, "files": [{"sha": "ac9972d9c386247af3482e07a94c76da3e1abb4d", "filename": "gcc/opts.c", "status": "modified", "additions": 50, "deletions": 56, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cca9751700946f1398fc3bcb96d529bb2964f0f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cca9751700946f1398fc3bcb96d529bb2964f0f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2cca9751700946f1398fc3bcb96d529bb2964f0f", "patch": "@@ -688,40 +688,36 @@ control_options_for_live_patching (struct gcc_options *opts,\n     {\n     case LIVE_PATCHING_INLINE_ONLY_STATIC:\n       if (opts_set->x_flag_ipa_cp_clone && opts->x_flag_ipa_cp_clone)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-cp-clone%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-cp-clone\", \"-flive-patching=inline-only-static\");\n       else\n \topts->x_flag_ipa_cp_clone = 0;\n \n       if (opts_set->x_flag_ipa_sra && opts->x_flag_ipa_sra)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-sra%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-sra\", \"-flive-patching=inline-only-static\");\n       else\n \topts->x_flag_ipa_sra = 0;\n \n       if (opts_set->x_flag_partial_inlining && opts->x_flag_partial_inlining)\n-\terror_at (loc,\n-\t\t  \"%<-fpartial-inlining%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fpartial-inlining\", \"-flive-patching=inline-only-static\");\n       else\n \topts->x_flag_partial_inlining = 0;\n \n       if (opts_set->x_flag_ipa_cp && opts->x_flag_ipa_cp)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-cp%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-cp\", \"-flive-patching=inline-only-static\");\n       else\n \topts->x_flag_ipa_cp = 0;\n \n       /* FALLTHROUGH.  */\n     case LIVE_PATCHING_INLINE_CLONE:\n       /* live patching should disable whole-program optimization.  */\n       if (opts_set->x_flag_whole_program && opts->x_flag_whole_program)\n-\terror_at (loc,\n-\t\t  \"%<-fwhole-program%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fwhole-program\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_whole_program = 0;\n \n@@ -730,65 +726,65 @@ control_options_for_live_patching (struct gcc_options *opts,\n \t && !flag_partial_inlining.  */\n \n       if (opts_set->x_flag_ipa_pta && opts->x_flag_ipa_pta)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-pta%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-pta\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_pta = 0;\n \n       if (opts_set->x_flag_ipa_reference && opts->x_flag_ipa_reference)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-reference%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-reference\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_reference = 0;\n \n       if (opts_set->x_flag_ipa_ra && opts->x_flag_ipa_ra)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-ra%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-ra\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_ra = 0;\n \n       if (opts_set->x_flag_ipa_icf && opts->x_flag_ipa_icf)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-icf%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-icf\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_icf = 0;\n \n       if (opts_set->x_flag_ipa_icf_functions && opts->x_flag_ipa_icf_functions)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-icf-functions%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-icf-functions\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_icf_functions = 0;\n \n       if (opts_set->x_flag_ipa_icf_variables && opts->x_flag_ipa_icf_variables)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-icf-variables%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-icf-variables\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_icf_variables = 0;\n \n       if (opts_set->x_flag_ipa_bit_cp && opts->x_flag_ipa_bit_cp)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-bit-cp%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-bit-cp\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_bit_cp = 0;\n \n       if (opts_set->x_flag_ipa_vrp && opts->x_flag_ipa_vrp)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-vrp%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-vrp\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_vrp = 0;\n \n       if (opts_set->x_flag_ipa_pure_const && opts->x_flag_ipa_pure_const)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-pure-const%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-pure-const\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_pure_const = 0;\n \n@@ -804,18 +800,18 @@ control_options_for_live_patching (struct gcc_options *opts,\n       /* discovery of functions/variables with no address taken.  */\n       if (opts_set->x_flag_ipa_reference_addressable\n \t  && opts->x_flag_ipa_reference_addressable)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-reference-addressable%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-reference-addressable\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_reference_addressable = 0;\n \n       /* ipa stack alignment propagation.  */\n       if (opts_set->x_flag_ipa_stack_alignment\n \t  && opts->x_flag_ipa_stack_alignment)\n-\terror_at (loc,\n-\t\t  \"%<-fipa-stack-alignment%> is incompatible with \"\n-\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+\terror_at (loc, \"%qs is incompatible with %qs\",\n+\t\t  \"-fipa-stack-alignment\",\n+\t\t  \"-flive-patching=inline-only-static|inline-clone\");\n       else\n \topts->x_flag_ipa_stack_alignment = 0;\n       break;\n@@ -1081,21 +1077,19 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n   /* Userspace and kernel ASan conflict with each other.  */\n   if ((opts->x_flag_sanitize & SANITIZE_USER_ADDRESS)\n       && (opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n-    error_at (loc,\n-\t      \"%<-fsanitize=address%> is incompatible with \"\n-\t      \"%<-fsanitize=kernel-address%>\");\n+    error_at (loc, \"%qs is incompatible with %qs\",\n+\t      \"-fsanitize=address\", \"-fsanitize=kernel-address\");\n \n   /* And with TSan.  */\n   if ((opts->x_flag_sanitize & SANITIZE_ADDRESS)\n       && (opts->x_flag_sanitize & SANITIZE_THREAD))\n-    error_at (loc,\n-\t      \"%<-fsanitize=address%> and %<-fsanitize=kernel-address%> \"\n-\t      \"are incompatible with %<-fsanitize=thread%>\");\n+    error_at (loc, \"%qs is incompatible with %qs\",\n+\t      \"-fsanitize=thread\", \"-fsanitize=address|kernel-address\");\n \n   if ((opts->x_flag_sanitize & SANITIZE_LEAK)\n       && (opts->x_flag_sanitize & SANITIZE_THREAD))\n-    error_at (loc,\n-\t      \"%<-fsanitize=leak%> is incompatible with %<-fsanitize=thread%>\");\n+    error_at (loc, \"%qs is incompatible with %qs\",\n+\t      \"-fsanitize=leak\", \"-fsanitize=thread\");\n \n   /* Check error recovery for -fsanitize-recover option.  */\n   for (int i = 0; sanitizer_opts[i].name != NULL; ++i)"}, {"sha": "f325a7472289595d6b489f121dcd91d795a85c8b", "filename": "gcc/testsuite/c-c++-common/ubsan/sanitize-recover-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cca9751700946f1398fc3bcb96d529bb2964f0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cca9751700946f1398fc3bcb96d529bb2964f0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsanitize-recover-7.c?ref=2cca9751700946f1398fc3bcb96d529bb2964f0f", "patch": "@@ -3,4 +3,4 @@\n \n int i;\n \n-/* { dg-error \".-fsanitize=address. and .-fsanitize=kernel-address. are incompatible with .-fsanitize=thread.\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \".-fsanitize=thread. is incompatible with .-fsanitize=address|kernel-address.\" \"\" { target *-*-* } 0 } */"}]}