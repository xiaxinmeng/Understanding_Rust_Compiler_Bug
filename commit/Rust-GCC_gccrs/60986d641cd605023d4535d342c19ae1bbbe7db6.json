{"sha": "60986d641cd605023d4535d342c19ae1bbbe7db6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5ODZkNjQxY2Q2MDUwMjNkNDUzNWQzNDJjMTlhZTFiYmJlN2RiNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.org", "date": "2003-04-25T22:09:12Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2003-04-25T22:09:12Z"}, "message": "ia64.c (ia64_expand_compare_and_swap): Add rmode for return mode.\n\n2003-04-25  H.J. Lu <hjl@gnu.org>\n\n\t* config/ia64/ia64.c (ia64_expand_compare_and_swap): Add rmode\n\tfor return mode.\n\t(ia64_expand_builtin): Set rmode to SImode for\n\tIA64_BUILTIN_BOOL_COMPARE_AND_SWAP_SI,\n\tIA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI and\n\tIA64_BUILTIN_BOOL_COMPARE_AND_SWAP_DI. Set remode to DImode\n\tfor IA64_BUILTIN_VAL_COMPARE_AND_SWAP_DI.\n\nFrom-SVN: r66077", "tree": {"sha": "04921574615e213a6f07b3d82e9412da50b6118a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04921574615e213a6f07b3d82e9412da50b6118a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60986d641cd605023d4535d342c19ae1bbbe7db6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60986d641cd605023d4535d342c19ae1bbbe7db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60986d641cd605023d4535d342c19ae1bbbe7db6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60986d641cd605023d4535d342c19ae1bbbe7db6/comments", "author": null, "committer": null, "parents": [{"sha": "d45148c102f8f563cd11194972ce46c95dbc696f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45148c102f8f563cd11194972ce46c95dbc696f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45148c102f8f563cd11194972ce46c95dbc696f"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "43cab67554d6027e76c25536a8ec3be69a93d088", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60986d641cd605023d4535d342c19ae1bbbe7db6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60986d641cd605023d4535d342c19ae1bbbe7db6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60986d641cd605023d4535d342c19ae1bbbe7db6", "patch": "@@ -1,3 +1,13 @@\n+2003-04-25  H.J. Lu <hjl@gnu.org>\n+\n+\t* config/ia64/ia64.c (ia64_expand_compare_and_swap): Add rmode\n+\tfor return mode.\n+\t(ia64_expand_builtin): Set rmode to SImode for\n+\tIA64_BUILTIN_BOOL_COMPARE_AND_SWAP_SI,\n+\tIA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI and\n+\tIA64_BUILTIN_BOOL_COMPARE_AND_SWAP_DI. Set remode to DImode\n+\tfor IA64_BUILTIN_VAL_COMPARE_AND_SWAP_DI.\n+\n 2003-04-25  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* configure.in (make_compare_target):  Test for GNU cmp and set this"}, {"sha": "eed9a7b766cc818e1bed7504d58469e1ef4f5b84", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60986d641cd605023d4535d342c19ae1bbbe7db6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60986d641cd605023d4535d342c19ae1bbbe7db6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=60986d641cd605023d4535d342c19ae1bbbe7db6", "patch": "@@ -197,8 +197,9 @@ static rtx ia64_expand_fetch_and_op PARAMS ((optab, enum machine_mode,\n \t\t\t\t\t     tree, rtx));\n static rtx ia64_expand_op_and_fetch PARAMS ((optab, enum machine_mode,\n \t\t\t\t\t     tree, rtx));\n-static rtx ia64_expand_compare_and_swap PARAMS ((enum machine_mode, int,\n-\t\t\t\t\t\t tree, rtx));\n+static rtx ia64_expand_compare_and_swap PARAMS ((enum machine_mode,\n+\t\t\t\t\t\t enum machine_mode,\n+\t\t\t\t\t\t int, tree, rtx));\n static rtx ia64_expand_lock_test_and_set PARAMS ((enum machine_mode,\n \t\t\t\t\t\t  tree, rtx));\n static rtx ia64_expand_lock_release PARAMS ((enum machine_mode, tree, rtx));\n@@ -8026,7 +8027,8 @@ ia64_expand_op_and_fetch (binoptab, mode, arglist, target)\n */\n \n static rtx\n-ia64_expand_compare_and_swap (mode, boolp, arglist, target)\n+ia64_expand_compare_and_swap (rmode, mode, boolp, arglist, target)\n+     enum machine_mode rmode;\n      enum machine_mode mode;\n      int boolp;\n      tree arglist;\n@@ -8074,7 +8076,7 @@ ia64_expand_compare_and_swap (mode, boolp, arglist, target)\n   if (boolp)\n     {\n       if (! target)\n-\ttarget = gen_reg_rtx (mode);\n+\ttarget = gen_reg_rtx (rmode);\n       return emit_store_flag_force (target, EQ, tmp, old, mode, 1, 1);\n     }\n   else\n@@ -8149,11 +8151,16 @@ ia64_expand_builtin (exp, target, subtarget, mode, ignore)\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n   tree arglist = TREE_OPERAND (exp, 1);\n+  enum machine_mode rmode;\n \n   switch (fcode)\n     {\n     case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_SI:\n     case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI:\n+      mode = SImode;\n+      rmode = SImode;\n+      break;\n+\n     case IA64_BUILTIN_LOCK_TEST_AND_SET_SI:\n     case IA64_BUILTIN_LOCK_RELEASE_SI:\n     case IA64_BUILTIN_FETCH_AND_ADD_SI:\n@@ -8172,7 +8179,15 @@ ia64_expand_builtin (exp, target, subtarget, mode, ignore)\n       break;\n \n     case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_DI:\n+      mode = DImode;\n+      rmode = SImode;\n+      break;\n+\n     case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_DI:\n+      mode = DImode;\n+      rmode = DImode;\n+      break;\n+\n     case IA64_BUILTIN_LOCK_TEST_AND_SET_DI:\n     case IA64_BUILTIN_LOCK_RELEASE_DI:\n     case IA64_BUILTIN_FETCH_AND_ADD_DI:\n@@ -8198,11 +8213,13 @@ ia64_expand_builtin (exp, target, subtarget, mode, ignore)\n     {\n     case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_SI:\n     case IA64_BUILTIN_BOOL_COMPARE_AND_SWAP_DI:\n-      return ia64_expand_compare_and_swap (mode, 1, arglist, target);\n+      return ia64_expand_compare_and_swap (rmode, mode, 1, arglist,\n+\t\t\t\t\t   target);\n \n     case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI:\n     case IA64_BUILTIN_VAL_COMPARE_AND_SWAP_DI:\n-      return ia64_expand_compare_and_swap (mode, 0, arglist, target);\n+      return ia64_expand_compare_and_swap (rmode, mode, 0, arglist,\n+\t\t\t\t\t   target);\n \n     case IA64_BUILTIN_SYNCHRONIZE:\n       emit_insn (gen_mf ());"}]}