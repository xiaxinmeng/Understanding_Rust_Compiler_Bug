{"sha": "ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzNDAwZTg4MWVmNTg3MGRkNmIxZDI3NGRmY2QwOWM3MzgyOGExYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-11-15T15:50:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-11-15T15:50:51Z"}, "message": "diagnostic.c (finish_abort): New fn.\n\n        * diagnostic.c (finish_abort): New fn.\n        (fancy_abort, error_recursion): Use it.\n        * toplev.c (crash_signal): Likewise.\n        * diagnostic.h: Declare it.\n\n        * typeck2.c (friendly_abort): Uncount the error before handing\n        off to fancy_abort.\n\nFrom-SVN: r37480", "tree": {"sha": "f927bdafd430a86ad8fdd9549af9b7897ba84be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f927bdafd430a86ad8fdd9549af9b7897ba84be5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/comments", "author": null, "committer": null, "parents": [{"sha": "12e1243e426a12358e793cef2735e77c37452ec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e1243e426a12358e793cef2735e77c37452ec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e1243e426a12358e793cef2735e77c37452ec7"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "7f461b5e43261ad49eeff5a778582b1fc4c3edc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "patch": "@@ -1,3 +1,10 @@\n+2000-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* diagnostic.c (finish_abort): New fn.\n+\t(fancy_abort, error_recursion): Use it.\n+\t* toplev.c (crash_signal): Likewise.\n+\t* diagnostic.h: Declare it.\n+\n 2000-11-13  Andrew Haley  <aph@redhat.com>\n \n \t* tree.c (build_type_no_quals): New function.\n@@ -179,17 +186,17 @@ Tue Nov 14 12:34:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-11-13  Neil Booth  <neilb@earthling.net>\n \n-        * cpplex.c (_cpp_lex_token): CPP_COMMENT and true CPP_EOF\n-        cases return without MI check.\n-        * cpplib.c (do_diagnostic): Take boolean of whether to\n-        print the directive name.\n-        (do_error, do_warning): Update.\n-        (do_pragma_dependency): Use it.\n-        * cpplib.h (VARARGS_FIRST): Delete.\n-        (struct cpp_token): Delete integer.\n-        * cppmacro.c (enter_macro_context): Move disabled check\n-        to _cpp_get_token.\n-        (_cpp_get_token): Simplify into a single loop.\n+\t* cpplex.c (_cpp_lex_token): CPP_COMMENT and true CPP_EOF\n+\tcases return without MI check.\n+\t* cpplib.c (do_diagnostic): Take boolean of whether to\n+\tprint the directive name.\n+\t(do_error, do_warning): Update.\n+\t(do_pragma_dependency): Use it.\n+\t* cpplib.h (VARARGS_FIRST): Delete.\n+\t(struct cpp_token): Delete integer.\n+\t* cppmacro.c (enter_macro_context): Move disabled check\n+\tto _cpp_get_token.\n+\t(_cpp_get_token): Simplify into a single loop.\n \n 2000-11-13  Richard Earnshaw  <rearnsha@arm.com>\n "}, {"sha": "c5a369ccf4d87041568fe0bcc43b821c0035e783", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "patch": "@@ -1,3 +1,8 @@\n+2000-11-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck2.c (friendly_abort): Uncount the error before handing\n+\toff to fancy_abort.\n+\n 2000-11-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* typeck.c (lookup_anon_field): Cope with qv qualifiers."}, {"sha": "b030a0504908fff1720e5949f6c2720661ca67fe", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "patch": "@@ -259,6 +259,9 @@ friendly_abort (where, file, line, func)\n   if (where > 0)\n     error (\"Internal error #%d.\", where);\n \n+  /* Uncount this error, so finish_abort will do the right thing.  */\n+  --errorcount;\n+\n   fancy_abort (file, line, func);\n }\n "}, {"sha": "036b1ce3c90990aacf4183e5efdbe7d68ac025a4", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "patch": "@@ -1638,11 +1638,8 @@ error_recursion ()\n     finish_diagnostic ();\n \n   fprintf (stderr,\n-\"Internal compiler error: Error reporting routines re-entered.\\n\\\n-Please submit a full bug report.\\n\\\n-See %s for instructions.\\n\", GCCBUGURL);\n-\n-  exit (FATAL_EXIT_CODE);\n+\t   \"Internal compiler error: Error reporting routines re-entered.\");\n+  finish_abort ();\n }\n \n /* Given a partial pathname as input, return another pathname that\n@@ -1676,11 +1673,27 @@ fancy_abort (file, line, function)\n      int line;\n      const char *function;\n {\n-  fatal (\n-\"Internal compiler error in %s, at %s:%d\\n\\\n+  error (\"Internal compiler error in %s, at %s:%d\",\n+\t function, trim_filename (file), line);\n+  finish_abort ();\n+}\n+\n+/* Finish reporting an internal compiler error.  If the only error we've\n+   seen is the current one, encourage the user to file a bug report;\n+   otherwise, fixing their code will probably avoid the crash.  */\n+\n+void\n+finish_abort ()\n+{\n+  if (errorcount > 1 || sorrycount > 0)\n+    fprintf (stderr, \"confused by earlier errors, bailing out\\n\");\n+  else\n+    fprintf (stderr, \"\\\n Please submit a full bug report.\\n\\\n-See %s for instructions.\",\n-\t function, trim_filename (file), line, GCCBUGURL);\n+See %s for instructions.\\n\",\n+\t   GCCBUGURL);\n+\n+  exit (FATAL_EXIT_CODE);\n }\n \n /* Setup DC for reporting a diagnostic MESSAGE (an error of a WARNING),"}, {"sha": "5abae7b8171a888ee2ec7706a7344dc85e09f30a", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "patch": "@@ -207,5 +207,6 @@ void record_last_error_module   PARAMS ((void));\n int error_function_changed      PARAMS ((void));\n void record_last_error_function PARAMS ((void));\n void report_problematic_module  PARAMS ((output_buffer *));     \n+void finish_abort\t\tPARAMS ((void)) ATTRIBUTE_NORETURN;\n \n #endif /* __GCC_DIAGNOSTIC_H__ */"}, {"sha": "95955fb6ca3f8f277631814cbae0ef2038a0870c", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3400e881ef5870dd6b1d274dfcd09c73828a1a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ee3400e881ef5870dd6b1d274dfcd09c73828a1a", "patch": "@@ -1685,9 +1685,8 @@ crash_signal (signo)\n      /* If this is missing, some compilers complain.  */\n      int signo;\n {\n-  fatal (\"Internal error: %s.\\n\\\n-Please submit a full bug report.\\n\\\n-See %s for instructions.\", strsignal (signo), GCCBUGURL);\n+  error (\"Internal error: %s.\", strsignal (signo));\n+  finish_abort ();\n }\n \n /* Strip off a legitimate source ending from the input string NAME of"}]}