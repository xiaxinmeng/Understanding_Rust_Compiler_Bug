{"sha": "a01eb545c4ec23419355bc3cc4d231d5043d02a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxZWI1NDVjNGVjMjM0MTkzNTViYzNjYzRkMjMxZDUwNDNkMDJhOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-07-02T18:55:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-07-02T18:55:35Z"}, "message": "cppinit.c (lang_defaults): New table.\n\n\t* cppinit.c (lang_defaults): New table.\n\t(set_lang): Just read from lang_defaults into the live options\n\tstructure.\n\nFrom-SVN: r43699", "tree": {"sha": "ab6bd2f992892a6b2c75cbf2c039e78ef7e993ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab6bd2f992892a6b2c75cbf2c039e78ef7e993ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01eb545c4ec23419355bc3cc4d231d5043d02a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01eb545c4ec23419355bc3cc4d231d5043d02a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01eb545c4ec23419355bc3cc4d231d5043d02a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01eb545c4ec23419355bc3cc4d231d5043d02a8/comments", "author": null, "committer": null, "parents": [{"sha": "51817b107a4a4558c9b89cf92956fdbaff7a941e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51817b107a4a4558c9b89cf92956fdbaff7a941e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51817b107a4a4558c9b89cf92956fdbaff7a941e"}], "stats": {"total": 116, "additions": 44, "deletions": 72}, "files": [{"sha": "ec3252cfbb3ec49161d9a050c40a9d54faaabbff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01eb545c4ec23419355bc3cc4d231d5043d02a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01eb545c4ec23419355bc3cc4d231d5043d02a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a01eb545c4ec23419355bc3cc4d231d5043d02a8", "patch": "@@ -1,3 +1,9 @@\n+2001-07-02  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* cppinit.c (lang_defaults): New table.\n+\t(set_lang): Just read from lang_defaults into the live options\n+\tstructure.\n+\n 2001-07-02  Zack Weinberg  <zackw@stanford.edu>\n \n \t* Makefile.in (doc): Depend on $(GENERATED_MANPAGES)."}, {"sha": "3c446b2798914555eae2ae9edca1a5a314acca4f", "filename": "gcc/cppinit.c", "status": "modified", "additions": 38, "deletions": 72, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01eb545c4ec23419355bc3cc4d231d5043d02a8/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01eb545c4ec23419355bc3cc4d231d5043d02a8/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a01eb545c4ec23419355bc3cc4d231d5043d02a8", "patch": "@@ -370,85 +370,51 @@ merge_include_chains (pfile)\n \n /* Sets internal flags correctly for a given language, and defines\n    macros if necessary.  */\n+\n+struct lang_flags\n+{\n+  char c99;\n+  char objc;\n+  char cplusplus;\n+  char extended_numbers;\n+  char trigraphs;\n+  char dollars_in_ident;\n+  char cplusplus_comments;\n+  char digraphs;\n+};\n+\n+/* ??? Enable $ in identifiers in assembly? */\n+static const struct lang_flags lang_defaults[] =\n+{ /*              c99 objc c++ xnum trig dollar c++comm digr  */\n+  /* GNUC89 */  { 0,  0,   0,  1,   0,   1,     1,      1     },\n+  /* GNUC99 */  { 1,  0,   0,  1,   0,   1,     1,      1     },\n+  /* STDC89 */  { 0,  0,   0,  0,   1,   0,     0,      0     },\n+  /* STDC94 */  { 0,  0,   0,  0,   1,   0,     0,      1     },\n+  /* STDC99 */  { 1,  0,   0,  1,   1,   0,     1,      1     },\n+  /* GNUCXX */  { 0,  0,   1,  1,   0,   1,     1,      1     },\n+  /* CXX98  */  { 0,  0,   1,  1,   1,   0,     1,      1     },\n+  /* OBJC   */  { 0,  1,   0,  1,   0,   1,     1,      1     },\n+  /* OBJCXX */  { 0,  1,   1,  1,   0,   1,     1,      1     },\n+  /* ASM    */  { 0,  0,   0,  1,   0,   0,     1,      0     }\n+};\n+\n static void\n set_lang (pfile, lang)\n      cpp_reader *pfile;\n      enum c_lang lang;\n {\n-  /* Defaults.  */\n+  const struct lang_flags *l = &lang_defaults[(int) lang];\n+  \n   CPP_OPTION (pfile, lang) = lang;\n-  CPP_OPTION (pfile, objc) = 0;\n-  CPP_OPTION (pfile, cplusplus) = 0;\n-  CPP_OPTION (pfile, extended_numbers) = 1; /* Allowed in GNU C and C99.  */\n-\n-  switch (lang)\n-    {\n-      /* GNU C.  */\n-    case CLK_GNUC99:\n-      CPP_OPTION (pfile, trigraphs) = 0;\n-      CPP_OPTION (pfile, dollars_in_ident) = 1;\n-      CPP_OPTION (pfile, cplusplus_comments) = 1;\n-      CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c99) = 1;\n-      break;\n-    case CLK_GNUC89:\n-      CPP_OPTION (pfile, trigraphs) = 0;\n-      CPP_OPTION (pfile, dollars_in_ident) = 1;\n-      CPP_OPTION (pfile, cplusplus_comments) = 1;\n-      CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c99) = 0;\n-      break;\n \n-      /* ISO C.  */\n-    case CLK_STDC94:\n-    case CLK_STDC89:\n-      CPP_OPTION (pfile, trigraphs) = 1;\n-      CPP_OPTION (pfile, dollars_in_ident) = 0;\n-      CPP_OPTION (pfile, cplusplus_comments) = 0;\n-      CPP_OPTION (pfile, digraphs) = lang == CLK_STDC94;\n-      CPP_OPTION (pfile, c99) = 0;\n-      CPP_OPTION (pfile, extended_numbers) = 0;\n-      break;\n-    case CLK_STDC99:\n-      CPP_OPTION (pfile, trigraphs) = 1;\n-      CPP_OPTION (pfile, dollars_in_ident) = 0;\n-      CPP_OPTION (pfile, cplusplus_comments) = 1;\n-      CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c99) = 1;\n-      break;\n-\n-      /* Objective C.  */\n-    case CLK_OBJCXX:\n-      CPP_OPTION (pfile, cplusplus) = 1;\n-    case CLK_OBJC:\n-      CPP_OPTION (pfile, trigraphs) = 0;\n-      CPP_OPTION (pfile, dollars_in_ident) = 1;\n-      CPP_OPTION (pfile, cplusplus_comments) = 1;\n-      CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c99) = 0;\n-      CPP_OPTION (pfile, objc) = 1;\n-      break;\n-\n-      /* C++.  */\n-    case CLK_GNUCXX:\n-    case CLK_CXX98:\n-      CPP_OPTION (pfile, cplusplus) = 1;\n-      CPP_OPTION (pfile, trigraphs) = lang == CLK_CXX98;\n-      CPP_OPTION (pfile, dollars_in_ident) = lang == CLK_GNUCXX;\n-      CPP_OPTION (pfile, cplusplus_comments) = 1;\n-      CPP_OPTION (pfile, digraphs) = 1;\n-      CPP_OPTION (pfile, c99) = 0;\n-      break;\n-\n-      /* Assembler.  */\n-    case CLK_ASM:\n-      CPP_OPTION (pfile, trigraphs) = 0;\n-      CPP_OPTION (pfile, dollars_in_ident) = 0;\t/* Maybe not?  */\n-      CPP_OPTION (pfile, cplusplus_comments) = 1;\n-      CPP_OPTION (pfile, digraphs) = 0; \n-      CPP_OPTION (pfile, c99) = 0;\n-      break;\n-    }\n+  CPP_OPTION (pfile, c99)\t\t = l->c99;\n+  CPP_OPTION (pfile, objc)\t\t = l->objc;\n+  CPP_OPTION (pfile, cplusplus)\t\t = l->cplusplus;\n+  CPP_OPTION (pfile, extended_numbers)\t = l->extended_numbers;\n+  CPP_OPTION (pfile, trigraphs)\t\t = l->trigraphs;\n+  CPP_OPTION (pfile, dollars_in_ident)\t = l->dollars_in_ident;\n+  CPP_OPTION (pfile, cplusplus_comments) = l->cplusplus_comments;\n+  CPP_OPTION (pfile, digraphs)\t\t = l->digraphs;\n }\n \n #ifdef HOST_EBCDIC"}]}