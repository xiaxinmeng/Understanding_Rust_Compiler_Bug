{"sha": "c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlZjlkOGQzZjExMjIxZGYxZWE2MzU4YjhkNGU3OWU0MmYwNzRmYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-30T09:46:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-31T13:19:13Z"}, "message": "debug/96383 - emit debug info for used external functions\n\nThis makes sure to emit full declaration DIEs including\nformal parameters for used external functions.  This helps\ndebugging when debug information of the external entity is\nnot available and also helps external tools cross-checking\nABI compatibility which was the bug reporters use case.\n\nFor cc1 this affects debug information size as follows:\n\n     VM SIZE                     FILE SIZE\n ++++++++++++++ GROWING       ++++++++++++++\n  [ = ]       0 .debug_info   +1.63Mi  +1.3%\n  [ = ]       0 .debug_str     +263Ki  +3.4%\n  [ = ]       0 .debug_abbrev  +101Ki  +4.9%\n  [ = ]       0 .debug_line   +5.71Ki  +0.0%\n   +44%     +16 [Unmapped]        +48  +1.2%\n\n -------------- SHRINKING     --------------\n  [ = ]       0 .debug_loc       -213  -0.0%\n  -0.0%     -48 .text             -48  -0.0%\n  [ = ]       0 .debug_ranges     -16  -0.0%\n\n  -0.0%     -32 TOTAL         +1.99Mi  +0.6%\n\nand DWARF compression via DWZ can only shave off minor bits\nhere.\n\nPreviously we emitted no DIEs for external functions at all\nunless they were referenced via DW_TAG_GNU_call_site which\nfor some GCC revs caused a regular DIE to appear and since\nGCC 4.9 only a stub without formal parameters.  This means\nat -O0 we did not emit any DIE for external functions\nbut with optimization we emitted stubs.\n\n2020-07-30  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/96383\n\t* langhooks-def.h (lhd_finalize_early_debug): Declare.\n\t(LANG_HOOKS_FINALIZE_EARLY_DEBUG): Define.\n\t(LANG_HOOKS_INITIALIZER): Amend.\n\t* langhooks.c: Include cgraph.h and debug.h.\n\t(lhd_finalize_early_debug): Default implementation from\n\tformer code in finalize_compilation_unit.\n\t* langhooks.h (lang_hooks::finalize_early_debug): Add.\n\t* cgraphunit.c (symbol_table::finalize_compilation_unit):\n\tCall the finalize_early_debug langhook.\n\ngcc/c-family/\n\t* c-common.h (c_common_finalize_early_debug): Declare.\n\t* c-common.c: Include debug.h.\n\t(c_common_finalize_early_debug): finalize_early_debug langhook\n\timplementation generating debug for extern declarations.\n\ngcc/c/\n\t* c-objc-common.h (LANG_HOOKS_FINALIZE_EARLY_DEBUG):\n\tDefine to c_common_finalize_early_debug.\n\ngcc/cp/\n\t* cp-objcp-common.h (LANG_HOOKS_FINALIZE_EARLY_DEBUG):\n\tDefine to c_common_finalize_early_debug.\n\ngcc/testsuite/\n\t* gcc.dg/debug/dwarf2/pr96383-1.c: New testcase.\n\t* gcc.dg/debug/dwarf2/pr96383-2.c: Likewise.\n\nlibstdc++-v3/\n\t* testsuite/20_util/assume_aligned/3.cc: Use -g0.", "tree": {"sha": "1395c4090dc0f0cea95303eceb8e922f4dcc45a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1395c4090dc0f0cea95303eceb8e922f4dcc45a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c35be3bf493859b92c3c6ca7893075212169ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c35be3bf493859b92c3c6ca7893075212169ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c35be3bf493859b92c3c6ca7893075212169ab"}], "stats": {"total": 89, "additions": 82, "deletions": 7}, "files": [{"sha": "b97539c0c2aa88c9743108b4b5e34cfab5cafaf3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"spellcheck.h\"\n #include \"c-spellcheck.h\"\n #include \"selftest.h\"\n+#include \"debug.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n@@ -9086,4 +9087,20 @@ braced_lists_to_strings (tree type, tree ctor)\n   return braced_lists_to_strings (type, ctor, false);\n }\n \n+\n+/* Emit debug for functions before finalizing early debug.  */\n+\n+void\n+c_common_finalize_early_debug (void)\n+{\n+  /* Emit early debug for reachable functions, and by consequence,\n+     locally scoped symbols.  Also emit debug for extern declared\n+     functions that are still reachable at this point.  */\n+  struct cgraph_node *cnode;\n+  FOR_EACH_FUNCTION (cnode)\n+    if (!cnode->alias && !cnode->thunk.thunk_p\n+\t&& (cnode->has_gimple_body_p () || !DECL_IS_BUILTIN (cnode->decl)))\n+      (*debug_hooks->early_global_decl) (cnode->decl);\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "4fc64bc4aa64d4409b73bc532bd9db5ef7f7de5b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -885,6 +885,8 @@ extern bool bool_promoted_to_int_p (tree);\n extern tree fold_for_warn (tree);\n extern tree c_common_get_narrower (tree, int *);\n extern bool get_attribute_operand (tree, unsigned HOST_WIDE_INT *);\n+extern void c_common_finalize_early_debug (void);\n+\n \n #define c_sizeof(LOC, T)  c_sizeof_or_alignof_type (LOC, T, true, false, 1)\n #define c_alignof(LOC, T) c_sizeof_or_alignof_type (LOC, T, false, false, 1)"}, {"sha": "925795986e785366fe5ee610c4dd1ce0e249e15e", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -65,6 +65,8 @@ along with GCC; see the file COPYING3.  If not see\n   c_simulate_builtin_function_decl\n #undef LANG_HOOKS_EMITS_BEGIN_STMT\n #define LANG_HOOKS_EMITS_BEGIN_STMT true\n+#undef LANG_HOOKS_FINALIZE_EARLY_DEBUG\n+#define LANG_HOOKS_FINALIZE_EARLY_DEBUG c_common_finalize_early_debug\n \n /* Attribute hooks.  */\n #undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE"}, {"sha": "0b1009d0dea14e9546e3d2a696c602f88005b814", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -2998,11 +2998,9 @@ symbol_table::finalize_compilation_unit (void)\n \n   if (!seen_error ())\n     {\n-      /* Emit early debug for reachable functions, and by consequence,\n-\t locally scoped symbols.  */\n-      struct cgraph_node *cnode;\n-      FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (cnode)\n-\t(*debug_hooks->early_global_decl) (cnode->decl);\n+      /* Give the frontends the chance to emit early debug based on\n+\t what is still reachable in the TU.  */\n+      (*lang_hooks.finalize_early_debug) ();\n \n       /* Clean up anything that needs cleaning up after initial debug\n \t generation.  */"}, {"sha": "0936f166d5b7694ea5e39cc52e881e30c48548bb", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -115,6 +115,8 @@ extern tree cxx_simulate_enum_decl (location_t, const char *,\n #define LANG_HOOKS_BLOCK_MAY_FALLTHRU cxx_block_may_fallthru\n #undef LANG_HOOKS_EMITS_BEGIN_STMT\n #define LANG_HOOKS_EMITS_BEGIN_STMT true\n+#undef LANG_HOOKS_FINALIZE_EARLY_DEBUG\n+#define LANG_HOOKS_FINALIZE_EARLY_DEBUG c_common_finalize_early_debug\n \n /* Attribute hooks.  */\n #undef LANG_HOOKS_COMMON_ATTRIBUTE_TABLE"}, {"sha": "67b02107c495dcf638af1a043ec55889558c1fd9", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -92,6 +92,7 @@ extern const char *lhd_get_substring_location (const substring_loc &,\n \t\t\t\t\t       location_t *out_loc);\n extern int lhd_decl_dwarf_attribute (const_tree, int);\n extern int lhd_type_dwarf_attribute (const_tree, int);\n+extern void lhd_finalize_early_debug (void);\n \n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n@@ -139,6 +140,7 @@ extern int lhd_type_dwarf_attribute (const_tree, int);\n #define LANG_HOOKS_EMITS_BEGIN_STMT\tfalse\n #define LANG_HOOKS_RUN_LANG_SELFTESTS   lhd_do_nothing\n #define LANG_HOOKS_GET_SUBSTRING_LOCATION lhd_get_substring_location\n+#define LANG_HOOKS_FINALIZE_EARLY_DEBUG lhd_finalize_early_debug\n \n /* Attribute hooks.  */\n #define LANG_HOOKS_ATTRIBUTE_TABLE\t\tNULL\n@@ -364,7 +366,8 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_CUSTOM_FUNCTION_DESCRIPTORS, \\\n   LANG_HOOKS_EMITS_BEGIN_STMT, \\\n   LANG_HOOKS_RUN_LANG_SELFTESTS, \\\n-  LANG_HOOKS_GET_SUBSTRING_LOCATION \\\n+  LANG_HOOKS_GET_SUBSTRING_LOCATION, \\\n+  LANG_HOOKS_FINALIZE_EARLY_DEBUG \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "3cbe04c6899ae72468c4a89c2391a15e0b83c8fe", "filename": "gcc/langhooks.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -36,6 +36,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"timevar.h\"\n #include \"stor-layout.h\"\n+#include \"cgraph.h\"\n+#include \"debug.h\"\n \n /* Do nothing; in many cases the default hook.  */\n \n@@ -866,6 +868,18 @@ lhd_unit_size_without_reusable_padding (tree t)\n   return TYPE_SIZE_UNIT (t);\n }\n \n+/* Default implementation for the finalize_early_debug hook.  */\n+\n+void\n+lhd_finalize_early_debug (void)\n+{\n+  /* Emit early debug for reachable functions, and by consequence,\n+     locally scoped symbols.  */\n+  struct cgraph_node *cnode;\n+  FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (cnode)\n+    (*debug_hooks->early_global_decl) (cnode->decl);\n+}\n+\n /* Returns true if the current lang_hooks represents the GNU C frontend.  */\n \n bool"}, {"sha": "6ab6fb682f3bf63d63ac48d8b0de3a5a2242dae5", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -580,6 +580,9 @@ struct lang_hooks\n   const char *(*get_substring_location) (const substring_loc &,\n \t\t\t\t\t location_t *out_loc);\n \n+  /* Invoked before the early_finish debug hook is invoked.  */\n+  void (*finalize_early_debug) (void);\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "a9c0efb3fa87fe5b5560fc02d555e6d54a7c5f79", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr96383-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr96383-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr96383-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr96383-1.c?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-g -gdwarf -dA\" } */\n+\n+extern void foo (int);\n+extern void unusedbar (int);\n+\n+int main()\n+{\n+  foo (1);\n+}\n+\n+/* We want subprogram DIEs for both foo and main and a DIE for\n+   the formal parameter of foo.  We do not want a DIE for\n+   unusedbar.  */\n+/* { dg-final { scan-assembler-times \"DW_TAG_subprogram\" 4 } } */\n+/* { dg-final { scan-assembler-times \"DW_TAG_formal_parameter\" 2 } } */\n+/* { dg-final { scan-assembler-not \"unusedbar\" } } */"}, {"sha": "c3a710e2f89387f729ab1cfe791ae09a73034489", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr96383-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr96383-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr96383-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr96383-2.c?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O2 -gdwarf -dA\" } */\n+\n+extern void foo (int);\n+extern void unusedbar (int);\n+\n+int main()\n+{\n+  foo (1);\n+}\n+\n+/* We want subprogram DIEs for both foo and main and a DIE for\n+   the formal parameter of foo.  We do not want a DIE for\n+   unusedbar.  */\n+/* { dg-final { scan-assembler-times \"DW_TAG_subprogram\" 4 } } */\n+/* { dg-final { scan-assembler-times \"DW_TAG_formal_parameter\" 2 } } */\n+/* { dg-final { scan-assembler-not \"unusedbar\" } } */"}, {"sha": "25f64d7aad144499cc6891bf5102f677e5c68a26", "filename": "libstdc++-v3/testsuite/20_util/assume_aligned/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fassume_aligned%2F3.cc?ref=c6ef9d8d3f11221df1ea6358b8d4e79e42f074fb", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++2a -O2\" }\n+// { dg-options \"-std=gnu++2a -O2 -g0\" }\n // { dg-do compile { target c++2a } }\n // { dg-final { scan-assembler-not \"undefined\" } }\n "}]}