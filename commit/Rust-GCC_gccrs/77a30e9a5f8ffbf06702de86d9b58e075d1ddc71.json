{"sha": "77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhMzBlOWE1ZjhmZmJmMDY3MDJkZTg2ZDliNThlMDc1ZDFkZGM3MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-28T01:53:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-28T01:53:53Z"}, "message": "re PR libstdc++/48760 (std::complex constructor buggy in the face of NaN's)\n\n\tPR libstdc++/48760\n\tImplement list-initialization of _Complex.\n\t* decl.c (reshape_init_r): Allow {real,imag} for _Complex.\n\t(check_initializer): Likewise.\n\t* call.c (build_complex_conv): New.\n\t(implicit_conversion): Call it.\n\t(convert_like_real): Handle it.\n\t* typeck2.c (check_narrowing): Handle it.\n\nFrom-SVN: r173058", "tree": {"sha": "6d7ca1938e69e3ced048dc0b648f5f15cbe83eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d7ca1938e69e3ced048dc0b648f5f15cbe83eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e79a6b402a7485aa214fc82be04bc5163951aba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79a6b402a7485aa214fc82be04bc5163951aba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79a6b402a7485aa214fc82be04bc5163951aba3"}], "stats": {"total": 173, "additions": 172, "deletions": 1}, "files": [{"sha": "e1afe47ecea6b224e72670393f639937235c0d93", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "patch": "@@ -1,5 +1,14 @@\n 2011-04-27  Jason Merrill  <jason@redhat.com>\n \n+\tPR libstdc++/48760\n+\tImplement list-initialization of _Complex.\n+\t* decl.c (reshape_init_r): Allow {real,imag} for _Complex.\n+\t(check_initializer): Likewise.\n+\t* call.c (build_complex_conv): New.\n+\t(implicit_conversion): Call it.\n+\t(convert_like_real): Handle it.\n+\t* typeck2.c (check_narrowing): Handle it.\n+\n \t* init.c (build_vec_delete_1): Look for sfk_deleting_destructor to\n \tdecide whether to delete.\n \t(build_vec_init): Pass sfk_complete_destructor."}, {"sha": "dcc38595a10f144bad161139e6f310c4f8db86f9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "patch": "@@ -847,6 +847,49 @@ build_array_conv (tree type, tree ctor, int flags)\n   return c;\n }\n \n+/* Represent a conversion from CTOR, a braced-init-list, to TYPE, a\n+   complex type, if such a conversion is possible.  */\n+\n+static conversion *\n+build_complex_conv (tree type, tree ctor, int flags)\n+{\n+  conversion *c;\n+  unsigned HOST_WIDE_INT len = CONSTRUCTOR_NELTS (ctor);\n+  tree elttype = TREE_TYPE (type);\n+  unsigned i;\n+  tree val;\n+  bool bad = false;\n+  bool user = false;\n+  enum conversion_rank rank = cr_exact;\n+\n+  if (len != 2)\n+    return NULL;\n+\n+  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (ctor), i, val)\n+    {\n+      conversion *sub\n+\t= implicit_conversion (elttype, TREE_TYPE (val), val,\n+\t\t\t       false, flags);\n+      if (sub == NULL)\n+\treturn NULL;\n+\n+      if (sub->rank > rank)\n+\trank = sub->rank;\n+      if (sub->user_conv_p)\n+\tuser = true;\n+      if (sub->bad_p)\n+\tbad = true;\n+    }\n+\n+  c = alloc_conversion (ck_aggr);\n+  c->type = type;\n+  c->rank = rank;\n+  c->user_conv_p = user;\n+  c->bad_p = bad;\n+  c->u.next = NULL;\n+  return c;\n+}\n+\n /* Build a representation of the identity conversion from EXPR to\n    itself.  The TYPE should match the type of EXPR, if EXPR is non-NULL.  */\n \n@@ -1646,6 +1689,14 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       if (is_std_init_list (to))\n \treturn build_list_conv (to, expr, flags);\n \n+      /* As an extension, allow list-initialization of _Complex.  */\n+      if (TREE_CODE (to) == COMPLEX_TYPE)\n+\t{\n+\t  conv = build_complex_conv (to, expr, flags);\n+\t  if (conv)\n+\t    return conv;\n+\t}\n+\n       /* Allow conversion from an initializer-list with one element to a\n \t scalar type.  */\n       if (SCALAR_TYPE_P (to))\n@@ -5516,6 +5567,17 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       }\n \n     case ck_aggr:\n+      if (TREE_CODE (totype) == COMPLEX_TYPE)\n+\t{\n+\t  tree real = CONSTRUCTOR_ELT (expr, 0)->value;\n+\t  tree imag = CONSTRUCTOR_ELT (expr, 1)->value;\n+\t  real = perform_implicit_conversion (TREE_TYPE (totype),\n+\t\t\t\t\t      real, complain);\n+\t  imag = perform_implicit_conversion (TREE_TYPE (totype),\n+\t\t\t\t\t      imag, complain);\n+\t  expr = build2 (COMPLEX_EXPR, totype, real, imag);\n+\t  return fold_if_not_in_template (expr);\n+\t}\n       return get_target_expr (digest_init (totype, expr));\n \n     default:"}, {"sha": "5bf637e507d3651729b3b1d09156fc43ac97263c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "patch": "@@ -5058,6 +5058,27 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p)\n   if (error_operand_p (init))\n     return error_mark_node;\n \n+  if (TREE_CODE (type) == COMPLEX_TYPE)\n+    {\n+      /* A complex type can be initialized from one or two initializers,\n+\t but braces are not elided.  */\n+      d->cur++;\n+      if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+\t{\n+\t  if (CONSTRUCTOR_NELTS (init) > 2)\n+\t    error (\"too many initializers for %qT\", type);\n+\t}\n+      else if (first_initializer_p && d->cur != d->end)\n+\t{\n+\t  VEC(constructor_elt, gc) *v = 0;\n+\t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, init);\n+\t  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, d->cur->value);\n+\t  d->cur++;\n+\t  init = build_constructor (init_list_type_node, v);\n+\t}\n+      return init;\n+    }\n+\n   /* A non-aggregate type is always initialized with a single\n      initializer.  */\n   if (!CP_AGGREGATE_TYPE_P (type))\n@@ -5325,7 +5346,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t      init = build_zero_init (type, NULL_TREE, false);\n \t    }\n-\t  else if (init_len != 1)\n+\t  else if (init_len != 1 && TREE_CODE (type) != COMPLEX_TYPE)\n \t    {\n \t      error (\"scalar object %qD requires one element in initializer\",\n \t\t     decl);"}, {"sha": "aec54f9d07f8d43891285986e2db714e4dc9d270", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "patch": "@@ -728,6 +728,16 @@ check_narrowing (tree type, tree init)\n   if (!ARITHMETIC_TYPE_P (type))\n     return;\n \n+  if (BRACE_ENCLOSED_INITIALIZER_P (init)\n+      && TREE_CODE (type) == COMPLEX_TYPE)\n+    {\n+      tree elttype = TREE_TYPE (type);\n+      check_narrowing (elttype, CONSTRUCTOR_ELT (init, 0)->value);\n+      if (CONSTRUCTOR_NELTS (init) > 1)\n+\tcheck_narrowing (elttype, CONSTRUCTOR_ELT (init, 1)->value);\n+      return;\n+    }\n+\n   init = maybe_constant_value (init);\n \n   if (TREE_CODE (type) == INTEGER_TYPE"}, {"sha": "9604518f1907d5417981aba23065f3b832d3f09e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "patch": "@@ -1,5 +1,7 @@\n 2011-04-27  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/ext/complex8.C: New.\n+\n \t* g++.dg/cpp0x/initlist49.C: New.\n \t* g++.dg/init/new30.C: New.\n "}, {"sha": "9b8ac1b186f54b9e845224f93382206726635b98", "filename": "gcc/testsuite/g++.dg/ext/complex8.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplex8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplex8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplex8.C?ref=77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "patch": "@@ -0,0 +1,67 @@\n+// PR libstdc++/48760\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+constexpr _Complex int i{1,2};\n+constexpr _Complex int j{3};\n+\n+#define SA(X) static_assert((X),#X)\n+\n+SA(__real i == 1);\n+SA(__imag i == 2);\n+SA(__real j == 3);\n+SA(__imag j == 0);\n+\n+struct A\n+{\n+  _Complex int c;\n+  constexpr A(int i, int j): c{i,j} { }\n+  constexpr A(int i): c{i} { }\n+};\n+\n+constexpr A a1(1,2);\n+constexpr A a2(3);\n+\n+SA(__real a1.c == 1);\n+SA(__imag a1.c == 2);\n+SA(__real a2.c == 3);\n+SA(__imag a2.c == 0);\n+\n+typedef _Complex int ci;\n+\n+SA((__real ci{1,2} == 1));\n+SA((__imag ci{1,2} == 2));\n+SA((__real ci{3} == 3));\n+SA((__imag ci{3} == 0));\n+\n+struct B\n+{\n+  _Complex int c;\n+  int i;\n+};\n+\n+constexpr B b1 = { { 1,2 }, 42 };\n+constexpr B b2 = { { 3 }, 24 };\n+// No brace elision for complex.\n+constexpr B b3 = { 5, 6 };\n+\n+SA(__real b1.c == 1);\n+SA(__imag b1.c == 2);\n+SA(b1.i == 42);\n+SA(__real b2.c == 3);\n+SA(__imag b2.c == 0);\n+SA(b2.i == 24);\n+SA(__real b3.c == 5);\n+SA(__imag b3.c == 0);\n+SA(b3.i == 6);\n+\n+int main()\n+{\n+  ci* p = new ci{1,2};\n+  if (__real *p != 1 || __imag *p != 2)\n+    return 1;\n+  delete p;\n+  p = new ci{3};\n+  if (__real *p != 3 || __imag *p != 0)\n+    return 1;\n+}"}]}