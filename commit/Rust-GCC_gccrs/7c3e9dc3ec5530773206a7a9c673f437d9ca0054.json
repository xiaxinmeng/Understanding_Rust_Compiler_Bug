{"sha": "7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzZTlkYzNlYzU1MzA3NzMyMDZhN2E5YzY3M2Y0MzdkOWNhMDA1NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-17T18:16:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-17T18:16:51Z"}, "message": "tree-ssa-forwprop.c (get_prop_dest_stmt): Clean up tuplification.\n\n2009-04-17  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (get_prop_dest_stmt): Clean up\n\ttuplification.\n\t(get_prop_source_stmt): Likewise.\n\t(can_propagate_from): Likewise.\n\nFrom-SVN: r146281", "tree": {"sha": "b1efe2b33b558bac034ca5ab5c1f4a74c8905f39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1efe2b33b558bac034ca5ab5c1f4a74c8905f39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3e9dc3ec5530773206a7a9c673f437d9ca0054/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aca600aaf96fc061671829703b50ec8c6acae2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca600aaf96fc061671829703b50ec8c6acae2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca600aaf96fc061671829703b50ec8c6acae2c0"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "c3c34e986adc741153765faf61c7448160c002a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9dc3ec5530773206a7a9c673f437d9ca0054/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9dc3ec5530773206a7a9c673f437d9ca0054/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "patch": "@@ -1,3 +1,10 @@\n+2009-04-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (get_prop_dest_stmt): Clean up\n+\ttuplification.\n+\t(get_prop_source_stmt): Likewise.\n+\t(can_propagate_from): Likewise.\n+\n 2009-04-17  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* configure.ac: Add new AC_SUBST for TM_ENDIAN_CONFIG,"}, {"sha": "c596e8b75414d6d27f4756d3db481d914f00a3cd", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e9dc3ec5530773206a7a9c673f437d9ca0054/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e9dc3ec5530773206a7a9c673f437d9ca0054/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=7c3e9dc3ec5530773206a7a9c673f437d9ca0054", "patch": "@@ -186,8 +186,7 @@ get_prop_dest_stmt (tree name, tree *final_name_p)\n       return NULL;\n \n     /* If this is not a trivial copy, we found it.  */\n-    if (!gimple_assign_copy_p (use_stmt)\n-\t|| TREE_CODE (gimple_assign_lhs (use_stmt)) != SSA_NAME\n+    if (!gimple_assign_ssa_name_copy_p (use_stmt)\n \t|| gimple_assign_rhs1 (use_stmt) != name)\n       break;\n \n@@ -225,12 +224,11 @@ get_prop_source_stmt (tree name, bool single_use_only, bool *single_use_p)\n       }\n \n     /* If name is defined by a PHI node or is the default def, bail out.  */\n-    if (gimple_code (def_stmt) != GIMPLE_ASSIGN)\n+    if (!is_gimple_assign (def_stmt))\n       return NULL;\n \n-    /* If name is not a simple copy destination, we found it.  */\n-    if (!gimple_assign_copy_p (def_stmt)\n-        || TREE_CODE (gimple_assign_rhs1 (def_stmt)) != SSA_NAME)\n+    /* If def_stmt is not a simple copy, we possibly found it.  */\n+    if (!gimple_assign_ssa_name_copy_p (def_stmt))\n       {\n \ttree rhs;\n \n@@ -266,6 +264,7 @@ can_propagate_from (gimple def_stmt)\n   ssa_op_iter iter;\n \n   gcc_assert (is_gimple_assign (def_stmt));\n+\n   /* If the rhs has side-effects we cannot propagate from it.  */\n   if (gimple_has_volatile_ops (def_stmt))\n     return false;\n@@ -276,8 +275,8 @@ can_propagate_from (gimple def_stmt)\n     return false;\n \n   /* Constants can be always propagated.  */\n-  if (is_gimple_min_invariant \n-      (rhs_to_tree (TREE_TYPE (gimple_assign_lhs (def_stmt)), def_stmt)))\n+  if (gimple_assign_single_p (def_stmt)\n+      && is_gimple_min_invariant (gimple_assign_rhs1 (def_stmt)))\n     return true;\n \n   /* We cannot propagate ssa names that occur in abnormal phi nodes.  */\n@@ -289,14 +288,14 @@ can_propagate_from (gimple def_stmt)\n      then we can not apply optimizations as some targets require\n      function pointers to be canonicalized and in this case this\n      optimization could eliminate a necessary canonicalization.  */\n-  if (is_gimple_assign (def_stmt)\n-      && (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt))))\n+  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n     {\n       tree rhs = gimple_assign_rhs1 (def_stmt);\n       if (POINTER_TYPE_P (TREE_TYPE (rhs))\n           && TREE_CODE (TREE_TYPE (TREE_TYPE (rhs))) == FUNCTION_TYPE)\n         return false;\n     }\n+\n   return true;\n }\n "}]}