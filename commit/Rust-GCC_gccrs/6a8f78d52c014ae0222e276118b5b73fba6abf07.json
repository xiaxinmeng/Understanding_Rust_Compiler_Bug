{"sha": "6a8f78d52c014ae0222e276118b5b73fba6abf07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4Zjc4ZDUyYzAxNGFlMDIyMmUyNzYxMThiNWI3M2ZiYTZhYmYwNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-16T20:45:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-16T20:45:16Z"}, "message": "typeck2.c (my_friendly_abort): Don't fatal twice in a row.\n\n\t* typeck2.c (my_friendly_abort): Don't fatal twice in a row.\n\t* typeck.c (c_expand_start_case): Use build_expr_type_conversion.\n\tSimplify.\nFixes Sec6/4_2/G06164.gr\n\t* parse.y (structsp): Fix cut-and-paste error.\nFixes Sec6/4_2/C06166.cm\n\t* init.c (build_new): Complain about non-integral size.\nFixes Sec5/3_4/E05276.C\n\t* parse.y (unary_expr): Complain about defining types in sizeof.\nFixes Sec5/3_3/S05178.C\n\t* typeck.c (expr_sizeof): Complain about sizeof an overloaded fn.\nFixes Sec5/3_3/S05161.C\n\t* rtti.c (build_x_typeid): Complain about typeid without\n\tincluding <typeinfo>.\n\t(get_typeid): Likewise.  Complain about typeid of incomplete type.\n\t(get_tinfo_fn_dynamic): Likewise.\n\t(get_typeid_1): Not static anymore.\n\t* except.c (build_eh_type_type): Use get_typeid_1.\nFixes Sec5/2_8/C05517.cm\n\t* rtti.c (build_dynamic_cast_1): Give errors for dynamic_cast to\n\tambiguous or private bases.  Fix warning for reference cast.\nFixes Sec5/2_7/C05516.cm\n\nFrom-SVN: r23678", "tree": {"sha": "6d358bc09a0493bbd2f6db806f1bb441a5f92658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d358bc09a0493bbd2f6db806f1bb441a5f92658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a8f78d52c014ae0222e276118b5b73fba6abf07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8f78d52c014ae0222e276118b5b73fba6abf07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8f78d52c014ae0222e276118b5b73fba6abf07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8f78d52c014ae0222e276118b5b73fba6abf07/comments", "author": null, "committer": null, "parents": [{"sha": "efc97ef076f10601b5d21de530e37f8182779b13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc97ef076f10601b5d21de530e37f8182779b13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc97ef076f10601b5d21de530e37f8182779b13"}], "stats": {"total": 1415, "additions": 724, "deletions": 691}, "files": [{"sha": "4faa807fc91a717d6eb2ecddd4bdab4adfba68f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -1,3 +1,28 @@\n+1998-11-16  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck2.c (my_friendly_abort): Don't fatal twice in a row.\n+\n+\t* typeck.c (c_expand_start_case): Use build_expr_type_conversion.\n+\tSimplify.\n+\n+\t* parse.y (structsp): Fix cut-and-paste error.\n+\n+\t* init.c (build_new): Complain about non-integral size.\n+\n+\t* parse.y (unary_expr): Complain about defining types in sizeof.\n+\n+\t* typeck.c (expr_sizeof): Complain about sizeof an overloaded fn.\n+\n+\t* rtti.c (build_x_typeid): Complain about typeid without \n+\tincluding <typeinfo>.\n+\t(get_typeid): Likewise.  Complain about typeid of incomplete type.\n+\t(get_tinfo_fn_dynamic): Likewise.\n+\t(get_typeid_1): Not static anymore.\n+\t* except.c (build_eh_type_type): Use get_typeid_1.\n+\n+\t* rtti.c (build_dynamic_cast_1): Give errors for dynamic_cast to\n+\tambiguous or private bases.  Fix warning for reference cast.\n+\n 1998-11-16  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (DECL_TEMPLATE_INSTANTIATED): New macro."}, {"sha": "033c29ab5f78fb7aa8587b85cb53fe328d7e8417", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -2984,6 +2984,7 @@ extern tree build_typeid\t\t\tPROTO((tree));\n extern tree build_x_typeid\t\t\tPROTO((tree));\n extern tree get_tinfo_fn\t\t\tPROTO((tree));\n extern tree get_typeid\t\t\t\tPROTO((tree));\n+extern tree get_typeid_1\t\t\tPROTO((tree));\n extern tree build_dynamic_cast\t\t\tPROTO((tree, tree));\n extern void synthesize_tinfo_fn\t\t\tPROTO((tree));\n "}, {"sha": "a1d028e93ae6debba907e4406b78bf700dba6b4b", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -411,9 +411,7 @@ build_eh_type_type (type)\n   type = TYPE_MAIN_VARIANT (type);\n \n   if (flag_rtti)\n-    {\n-      return build1 (ADDR_EXPR, ptr_type_node, get_typeid (type));\n-    }\n+    return build1 (ADDR_EXPR, ptr_type_node, get_typeid_1 (type));\n \n   typestring = build_overload_name (type, 1, 1);\n   exp = combine_strings (build_string (strlen (typestring)+1, typestring));"}, {"sha": "c7df0b0af44d66f61e5ab2699d26fb6494a79b17", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -1960,6 +1960,11 @@ build_new (placement, decl, init, use_global_new)\n \t\t}\n \t      else\n \t\t{\n+\t\t  int flags = pedantic ? WANT_INT : (WANT_INT | WANT_ENUM);\n+\t\t  if (build_expr_type_conversion (flags, this_nelts, 0)\n+\t\t      == NULL_TREE)\n+\t\t    pedwarn (\"size in array new must have integral type\");\n+\n \t\t  this_nelts = save_expr (cp_convert (sizetype, this_nelts));\n \t\t  absdcl = TREE_OPERAND (absdcl, 0);\n \t          if (this_nelts == integer_zero_node)"}, {"sha": "99ae3ae3a0a9e892d8c4133ce9218fcdb2bebed5", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 623, "deletions": 626, "changes": 1249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07"}, {"sha": "a055fa1dc4c0e5c17a61fb9418960e1f670676ef", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -1096,7 +1096,8 @@ unary_expr:\n \t| SIZEOF unary_expr  %prec UNARY\n \t\t{ $$ = expr_sizeof ($2); }\n \t| SIZEOF '(' type_id ')'  %prec HYPERUNARY\n-\t\t{ $$ = c_sizeof (groktypename ($3.t)); }\n+\t\t{ $$ = c_sizeof (groktypename ($3.t));\n+\t\t  check_for_new_type (\"sizeof\", $3); }\n \t| ALIGNOF unary_expr  %prec UNARY\n \t\t{ $$ = grok_alignof ($2); }\n \t| ALIGNOF '(' type_id ')'  %prec HYPERUNARY\n@@ -2092,7 +2093,7 @@ structsp:\n                 { TYPE_VALUES (current_enum_type) = $4;\n \t\t  $$.t = finish_enum (current_enum_type);\n \t\t  $$.new_type_flag = 1;\n-\t\t  current_enum_type = $<ttype>4;\n+\t\t  current_enum_type = $<ttype>3;\n \t\t  resume_momentary ((int) $<itype>1);\n \t\t  check_for_missing_semicolon ($$.t); }\n \t| ENUM '{' '}'"}, {"sha": "6ccda36beeaa4c2675d175fc4839a9110aa245d7", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -39,7 +39,6 @@ static tree call_void_fn PROTO((char *));\n static tree build_headof_sub PROTO((tree));\n static tree build_headof PROTO((tree));\n static tree get_tinfo_var PROTO((tree));\n-static tree get_typeid_1 PROTO((tree));\n static tree ifnonnull PROTO((tree, tree));\n static tree build_dynamic_cast_1 PROTO((tree, tree));\n static void expand_si_desc PROTO((tree, tree));\n@@ -204,20 +203,20 @@ get_tinfo_fn_dynamic (exp)\n   /* Peel off cv qualifiers.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n+  if (TYPE_SIZE (complete_type (type)) == NULL_TREE)\n+    {\n+      cp_error (\"taking typeid of incomplete type `%T'\", type);\n+      return error_mark_node;\n+    }\n+\n   /* If exp is a reference to polymorphic type, get the real type_info.  */\n   if (TYPE_VIRTUAL_P (type) && ! resolves_to_fixed_type_p (exp, 0))\n     {\n       /* build reference to type_info from vtable.  */\n       tree t;\n \n       if (! flag_rtti)\n-\t{\n-\t  warning (\"taking dynamic typeid of object without -frtti\");\n-\t  push_obstacks (&permanent_obstack, &permanent_obstack);\n-\t  init_rtti_processing ();\n-\t  pop_obstacks ();\n-\t  flag_rtti = 1;\n-\t}\n+\terror (\"taking dynamic typeid of object with -fno-rtti\");\n \n       /* If we don't have rtti stuff, get to a sub-object that does.  */\n       if (! CLASSTYPE_VFIELDS (type))\n@@ -256,6 +255,12 @@ build_x_typeid (exp)\n   tree type = TREE_TYPE (tinfo_fn_type);\n   int nonnull;\n \n+  if (TYPE_SIZE (type_info_type_node) == NULL_TREE)\n+    {\n+      error (\"must #include <typeinfo> before using typeid\");\n+      return error_mark_node;\n+    }\n+  \n   if (processing_template_decl)\n     return build_min_nt (TYPEID_EXPR, exp);\n \n@@ -379,11 +384,13 @@ get_tinfo_fn (type)\n   return d;\n }\n \n-static tree\n+tree\n get_typeid_1 (type)\n      tree type;\n {\n-  tree t = build_call\n+  tree t;\n+\n+  t = build_call\n     (get_tinfo_fn (type), TREE_TYPE (tinfo_fn_type), NULL_TREE);\n   return convert_from_reference (t);\n }\n@@ -396,15 +403,15 @@ get_typeid (type)\n {\n   if (type == error_mark_node)\n     return error_mark_node;\n-  \n-  if (! flag_rtti)\n+\n+  if (TYPE_SIZE (type_info_type_node) == NULL_TREE)\n     {\n-      warning (\"requesting typeid of object without -frtti\");\n-      push_obstacks (&permanent_obstack, &permanent_obstack);\n-      init_rtti_processing ();\n-      pop_obstacks ();\n-      flag_rtti = 1;\n+      error (\"must #include <typeinfo> before using typeid\");\n+      return error_mark_node;\n     }\n+  \n+  if (! flag_rtti)\n+    error (\"requesting typeid with -fno-rtti\");\n \n   if (processing_template_decl)\n     return build_min_nt (TYPEID_EXPR, type);\n@@ -419,6 +426,12 @@ get_typeid (type)\n      that is the operand of typeid are always ignored.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n+  if (TYPE_SIZE (complete_type (type)) == NULL_TREE)\n+    {\n+      cp_error (\"taking typeid of incomplete type `%T'\", type);\n+      return error_mark_node;\n+    }\n+\n   return get_typeid_1 (type);\n }\n \n@@ -446,6 +459,7 @@ build_dynamic_cast_1 (type, expr)\n   tree exprtype = TREE_TYPE (expr);\n   enum tree_code ec;\n   tree dcast_fn;\n+  tree old_expr = expr;\n \n   assert (exprtype != NULL_TREE);\n   ec = TREE_CODE (exprtype);\n@@ -512,6 +526,20 @@ build_dynamic_cast_1 (type, expr)\n \n     distance = get_base_distance (TREE_TYPE (type), TREE_TYPE (exprtype), 1,\n \t\t\t\t  &path);\n+\n+    if (distance == -2)\n+      {\n+\tcp_error (\"dynamic_cast from `%T' to ambiguous base class `%T'\",\n+\t\t  TREE_TYPE (exprtype), TREE_TYPE (type));\n+\treturn error_mark_node;\n+      }\n+    if (distance == -3)\n+      {\n+\tcp_error (\"dynamic_cast from `%T' to private base class `%T'\",\n+\t\t  TREE_TYPE (exprtype), TREE_TYPE (type));\n+\treturn error_mark_node;\n+      }\n+\n     if (distance >= 0)\n       return build_vbase_path (PLUS_EXPR, type, expr, path, 0);\n   }\n@@ -547,11 +575,11 @@ build_dynamic_cast_1 (type, expr)\n \t     dynamic_cast<D&>(b) (b an object) cannot succeed.  */\n \t  if (ec == REFERENCE_TYPE)\n \t    {\n-\t      if (TREE_CODE (expr) == VAR_DECL\n-\t\t  && TREE_CODE (TREE_TYPE (expr)) == RECORD_TYPE)\n+\t      if (TREE_CODE (old_expr) == VAR_DECL\n+\t\t  && TREE_CODE (TREE_TYPE (old_expr)) == RECORD_TYPE)\n \t\t{\n \t\t  cp_warning (\"dynamic_cast of `%#D' to `%#T' can never succeed\",\n-\t\t\t      expr, type);\n+\t\t\t      old_expr, type);\n \t\t  return throw_bad_cast ();\n \t\t}\n \t    }"}, {"sha": "53ca221b585cdc3e03eeea58d7b12f16d005cde7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -1520,15 +1520,12 @@ expr_sizeof (e)\n       && (TREE_CODE (TREE_TYPE (e)) == ARRAY_TYPE\n \t  || TREE_CODE (TREE_TYPE (e)) == FUNCTION_TYPE))\n     e = default_conversion (e);\n-  else if (TREE_CODE (e) == TREE_LIST)\n+  else if (is_overloaded_fn (e))\n     {\n-      tree t = TREE_VALUE (e);\n-      if (t != NULL_TREE\n-\t  && ((TREE_TYPE (t)\n-\t       && TREE_CODE (TREE_TYPE (t)) == FUNCTION_TYPE)\n-\t      || is_overloaded_fn (t)))\n-\tpedwarn (\"ANSI C++ forbids taking the sizeof a function type\");\n+      pedwarn (\"ANSI C++ forbids taking the sizeof a function type\");\n+      return size_int (1);\n     }\n+\n   return c_sizeof (TREE_TYPE (e));\n }\n   \n@@ -7290,45 +7287,26 @@ tree\n c_expand_start_case (exp)\n      tree exp;\n {\n-  tree type;\n-  register enum tree_code code;\n-\n-  /* Convert from references, etc.  */\n-  exp = default_conversion (exp);\n-  type = TREE_TYPE (exp);\n-  code = TREE_CODE (type);\n-\n-  if (IS_AGGR_TYPE_CODE (code))\n-    exp = build_type_conversion (CONVERT_EXPR, integer_type_node, exp, 1);\n+  tree type, idx;\n \n+  exp = build_expr_type_conversion (WANT_INT | WANT_ENUM, exp, 1);\n   if (exp == NULL_TREE)\n     {\n       error (\"switch quantity not an integer\");\n       exp = error_mark_node;\n     }\n-  type = TREE_TYPE (exp);\n-  code = TREE_CODE (type);\n-\n-  if (code != INTEGER_TYPE && code != ENUMERAL_TYPE && code != ERROR_MARK)\n-    {\n-      error (\"switch quantity not an integer\");\n-      exp = error_mark_node;\n-    }\n-  else\n-    {\n-      tree idx;\n+  if (exp == error_mark_node)\n+    return error_mark_node;\n \n-      exp = default_conversion (exp);\n-      type = TREE_TYPE (exp);\n-      idx = get_unwidened (exp, 0);\n-      /* We can't strip a conversion from a signed type to an unsigned,\n-\t because if we did, int_fits_type_p would do the wrong thing\n-\t when checking case values for being in range,\n-\t and it's too hard to do the right thing.  */\n-      if (TREE_UNSIGNED (TREE_TYPE (exp))\n-\t  == TREE_UNSIGNED (TREE_TYPE (idx)))\n-\texp = idx;\n-    }\n+  exp = default_conversion (exp);\n+  type = TREE_TYPE (exp);\n+  idx = get_unwidened (exp, 0);\n+  /* We can't strip a conversion from a signed type to an unsigned,\n+     because if we did, int_fits_type_p would do the wrong thing\n+     when checking case values for being in range,\n+     and it's too hard to do the right thing.  */\n+  if (TREE_UNSIGNED (TREE_TYPE (exp)) == TREE_UNSIGNED (TREE_TYPE (idx)))\n+    exp = idx;\n \n   expand_start_case\n     (1, fold (build1 (CLEANUP_POINT_EXPR, TREE_TYPE (exp), exp)),"}, {"sha": "8766925cee592430262d26e99826a7aa600018cd", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8f78d52c014ae0222e276118b5b73fba6abf07/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=6a8f78d52c014ae0222e276118b5b73fba6abf07", "patch": "@@ -395,7 +395,7 @@ my_friendly_abort (i)\n   else\n     error (\"Internal compiler error %d.\", i);\n \n-  fatal (\"Please submit a full bug report to `egcs-bugs@cygnus.com'.\");\n+  error (\"Please submit a full bug report to `egcs-bugs@cygnus.com'.\");\n   fatal (\"See <URL:http://egcs.cygnus.com/faq.html#bugreport> for details.\");\n }\n "}]}