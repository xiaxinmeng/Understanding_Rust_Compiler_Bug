{"sha": "8a01289e7b43bb0d84edea4b710b8ef71df15d73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwMTI4OWU3YjQzYmIwZDg0ZWRlYTRiNzEwYjhlZjcxZGYxNWQ3Mw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-04-01T17:30:46Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-04-01T17:30:46Z"}, "message": "Removed thumb-pe support.\n\nFrom-SVN: r18938", "tree": {"sha": "7a6051c9c1c67d9b18a0f2052200b6eb2115a7c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a6051c9c1c67d9b18a0f2052200b6eb2115a7c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a01289e7b43bb0d84edea4b710b8ef71df15d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a01289e7b43bb0d84edea4b710b8ef71df15d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a01289e7b43bb0d84edea4b710b8ef71df15d73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a01289e7b43bb0d84edea4b710b8ef71df15d73/comments", "author": null, "committer": null, "parents": [{"sha": "ea65007e03fba1e5692479be8d4864c93dfe3193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea65007e03fba1e5692479be8d4864c93dfe3193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea65007e03fba1e5692479be8d4864c93dfe3193"}], "stats": {"total": 562, "additions": 10, "deletions": 552}, "files": [{"sha": "253c814cbaf6d2c4e4881f8df595c1c68d112efc", "filename": "gcc/config/arm/t-pe-thumb", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea65007e03fba1e5692479be8d4864c93dfe3193/gcc%2Fconfig%2Farm%2Ft-pe-thumb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea65007e03fba1e5692479be8d4864c93dfe3193/gcc%2Fconfig%2Farm%2Ft-pe-thumb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-pe-thumb?ref=ea65007e03fba1e5692479be8d4864c93dfe3193", "patch": "@@ -1,37 +0,0 @@\n-# Makefile fragment\n-# Copyright (c) 1998 Free Software Foundation\n-# CYGNUS LOCAL (entire file) nickc/thumb-pe\n-\n-CROSS_LIBGCC1 = libgcc1-asm.a\n-LIB1ASMSRC = arm/lib1thumb.asm\n-LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX\n-\n-# These are really part of libgcc1, but this will cause them to be\n-# built correctly, so...\n-\n-LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#define FLOAT' > fp-bit.c\n-\techo '#ifndef __ARMEB__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifndef __ARMEB__' > dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#define FLOAT_WORD_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\n-# Rule to build Psion specific GCC functions.\n-pe.o: $(srcdir)/config/arm/pe.c\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/arm/pe.c\n-\n-# Avoid building a duplicate set of libraries for the default endian-ness.\n-MULTILIB_OPTIONS = mthumb-interwork\n-MULTILIB_DIRNAMES = interwork\n-\n-LIBGCC = stmp-multilib\n-INSTALL_LIBGCC = install-multilib"}, {"sha": "53ce57c84de252d4c027194b75c75778b966e270", "filename": "gcc/config/arm/thumb.c", "status": "modified", "additions": 7, "deletions": 86, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a01289e7b43bb0d84edea4b710b8ef71df15d73/gcc%2Fconfig%2Farm%2Fthumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a01289e7b43bb0d84edea4b710b8ef71df15d73/gcc%2Fconfig%2Farm%2Fthumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.c?ref=8a01289e7b43bb0d84edea4b710b8ef71df15d73", "patch": "@@ -540,24 +540,6 @@ thumb_reload_out_si (operands)\n   abort ();\n }\n \n-#ifdef THUMB_PE /* CYGNUS LOCAL nickc/thumb-pe */\n-/* Return non-zero if FUNC is a naked function.  */\n-\n-static int\n-arm_naked_function_p (func)\n-     tree func;\n-{\n-  tree a;\n-\n-  if (TREE_CODE (func) != FUNCTION_DECL)\n-    abort ();\n-\n-  a = lookup_attribute (\"naked\", DECL_MACHINE_ATTRIBUTES (func));\n-  return a != NULL_TREE;\n-}\n-#endif /* END CYGNUS LOCAL nickc/thumb-pe */\n-\n-/* CYGNUS LOCAL nickc/super-interworking */\n /* Return non-zero if FUNC must be entered in ARM mode.  */\n int\n is_called_in_ARM_mode (func)\n@@ -570,13 +552,9 @@ is_called_in_ARM_mode (func)\n   if (TARGET_CALLEE_INTERWORKING && TREE_PUBLIC (func))\n     return TRUE;\n \n-#ifdef THUMB_PE \n-  return lookup_attribute (\"interfacearm\", DECL_MACHINE_ATTRIBUTES (func)) != NULL_TREE;\n-#else\n   return FALSE;\n-#endif\n }\n-/* END CYGNUS LOCAL */\n+\n \f\n /* Routines for emitting code */\n \n@@ -675,10 +653,7 @@ thumb_exit (f, reg_containing_return_addr)\n   \n   else if (   ! TARGET_THUMB_INTERWORK\n \t   && ! TARGET_BACKTRACE\n-/* CYGNUS LOCAL nickc/super-interworking */\n-\t   && ! is_called_in_ARM_mode (current_function_decl)\n-/* END CYGNUS LOCAL */\n-\t      )\n+\t   && ! is_called_in_ARM_mode (current_function_decl))\n     {\n       asm_fprintf (f, \"\\tpop\\t{pc}\\n\" );\n \n@@ -1039,10 +1014,7 @@ output_return ()\n \t}\n       else if (   TARGET_THUMB_INTERWORK\n \t       || TARGET_BACKTRACE\n-/* CYGNUS LOCAL nickc/super-interworking */\n-\t       || is_called_in_ARM_mode (current_function_decl)\n-/* END CYGNUS LOCAL */\t\t  \n-\t\t  )\n+\t       || is_called_in_ARM_mode (current_function_decl))\n \t{\n \t  thumb_exit (asm_out_file, -1);\n \t}\n@@ -1063,10 +1035,7 @@ output_return ()\n \n       if (   TARGET_THUMB_INTERWORK\n \t  || TARGET_BACKTRACE\n-/* CYGNUS LOCAL nickc/super-interworking */\n-\t  || is_called_in_ARM_mode (current_function_decl)\n-/* END CYGNUS LOCAL */\n-\t     )\n+\t  || is_called_in_ARM_mode (current_function_decl))\n \t{\n \t  asm_fprintf (asm_out_file, \"}\\n\");\n \t  thumb_exit (asm_out_file, -1);\n@@ -1089,12 +1058,6 @@ thumb_function_prologue (f, frame_size)\n   int store_arg_regs = 0;\n   int regno;\n \n-#ifdef THUMB_PE   /* CYGNUS LOCAL nickc/thumb-pe */\n-  if (arm_naked_function_p (current_function_decl))\n-    return;\n-#endif /* CYGNUS LOCAL nickc/thumb-pe */\n-\n-/* CYGNUS LOCAL nickc/super-interworking */\n   if (is_called_in_ARM_mode (current_function_decl))\n     {\n       char * name;\n@@ -1124,7 +1087,6 @@ thumb_function_prologue (f, frame_size)\n       asm_fprintf (f, \"\\t.thumb_func\\n\");\n       asm_fprintf (f, \"%s%U%s:\\n\", STUB_NAME, name);\n     }\n-/* END CYGNUS LOCAL nickc/super-interworking */\n     \n   if (current_function_anonymous_args && current_function_pretend_args_size)\n     store_arg_regs = 1;\n@@ -1517,10 +1479,7 @@ thumb_unexpanded_epilogue ()\n   if (current_function_pretend_args_size == 0 || TARGET_BACKTRACE)\n     {\n       if (had_to_push_lr\n-/* CYGNUS LOCAL nickc/super-interworking */\n-\t  && ! is_called_in_ARM_mode (current_function_decl)\n-/* END CYGNUS LOCAL nickc/super-interworking */\n-\t  )\n+\t  && ! is_called_in_ARM_mode (current_function_decl))\n \tlive_regs_mask |= 1 << PROGRAM_COUNTER;\n \n       /* Either no argument registers were pushed or a backtrace\n@@ -1537,13 +1496,8 @@ thumb_unexpanded_epilogue ()\n       \n       if ((live_regs_mask & (1 << PROGRAM_COUNTER)) == 0)\n \tthumb_exit (asm_out_file,\n-\t\t    (\n-\t\t     had_to_push_lr\n-/* CYGNUS LOCAL nickc/super-interworking */\n-\t\t     && is_called_in_ARM_mode (current_function_decl)\n-/* END CYGNUS LOCAL */\n-\t\t     ) ? -1 : LINK_REGISTER\n-\t\t    );\n+\t\t    (had_to_push_lr\n+\t\t     && is_called_in_ARM_mode (current_function_decl)) ? -1 : LINK_REGISTER);\n     }\n   else\n     {\n@@ -2057,36 +2011,3 @@ void thumb_override_options()\n \twarning (\"Structure size boundary can only be set to 8 or 32\");\n     }\n }\n-\f\n-#ifdef THUMB_PE /* CYGNUS LOCAL nickc/thumb-pe */\n-/* Return nonzero if ATTR is a valid attribute for DECL.\n-   ATTRIBUTES are any existing attributes and ARGS are the arguments\n-   supplied with ATTR.\n-\n-   Supported attributes:\n-\n-   naked: don't output any prologue or epilogue code, the user is assumed\n-   to do the right thing.\n-\n-   interfacearm: Always assume that this function will be entered in ARM\n-   mode, not Thumb mode, and that the caller wishes to be returned to in\n-   ARM mode.  */\n-int\n-arm_valid_machine_decl_attribute (decl, attributes, attr, args)\n-     tree decl;\n-     tree attributes;\n-     tree attr;\n-     tree args;\n-{\n-  if (args != NULL_TREE)\n-    return 0;\n-\n-  if (is_attribute_p (\"naked\", attr))\n-    return TREE_CODE (decl) == FUNCTION_DECL;\n-  \n-  if (is_attribute_p (\"interfacearm\", attr))\n-    return TREE_CODE (decl) == FUNCTION_DECL;\n-  \n-  return 0;\n-}\n-#endif /* END CYGNUS LOCAL nickc/thumb-pe */"}, {"sha": "d4341a6a7dba4ecf606aaa879dab1352710946f7", "filename": "gcc/config/arm/thumb.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a01289e7b43bb0d84edea4b710b8ef71df15d73/gcc%2Fconfig%2Farm%2Fthumb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a01289e7b43bb0d84edea4b710b8ef71df15d73/gcc%2Fconfig%2Farm%2Fthumb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.h?ref=8a01289e7b43bb0d84edea4b710b8ef71df15d73", "patch": "@@ -59,8 +59,8 @@ Boston, MA 02111-1307, USA.  */\n #define THUMB_FLAG_BACKTRACE    \t\t0x0002\n #define THUMB_FLAG_LEAF_BACKTRACE\t\t0x0004\n #define ARM_FLAG_THUMB\t\t\t\t0x1000\t/* same as in arm.h */\n-#define THUMB_FLAG_CALLEE_SUPER_INTERWORKING\t0x40000 /* CYGNUS LOCAL nickc */\n-#define THUMB_FLAG_CALLER_SUPER_INTERWORKING\t0x80000 /* CYGNUS LOCAL nickc */\n+#define THUMB_FLAG_CALLEE_SUPER_INTERWORKING\t0x40000 \n+#define THUMB_FLAG_CALLER_SUPER_INTERWORKING\t0x80000 \n \n \n /* Run-time compilation parameters selecting different hardware/software subsets.  */\n@@ -72,7 +72,6 @@ extern int target_flags;\n \t\t\t\t ? (target_flags & THUMB_FLAG_LEAF_BACKTRACE) \\\n \t\t\t\t : (target_flags & THUMB_FLAG_BACKTRACE))\n \n-/* CYGNUS LOCAL nickc/super-interworking */\n /* Set if externally visable functions should assume that they\n    might be called in ARM mode, from a non-thumb aware code.  */\n #define TARGET_CALLEE_INTERWORKING\t\\\n@@ -82,7 +81,6 @@ extern int target_flags;\n    destination is non-Thumb aware.  */\n #define TARGET_CALLER_INTERWORKING\t\\\n      (target_flags & THUMB_FLAG_CALLER_SUPER_INTERWORKING)\n-/* END CYGNUS LOCAL */\n \n /* SUBTARGET_SWITCHES is used to add flags on a per-config basis. */\n #ifndef SUBTARGET_SWITCHES\n@@ -99,12 +97,10 @@ extern int target_flags;\n   {\"no-tpcs-frame\",                -THUMB_FLAG_BACKTRACE},\t\\\n   {\"tpcs-leaf-frame\",\t  \t    THUMB_FLAG_LEAF_BACKTRACE},\t\\\n   {\"no-tpcs-leaf-frame\",           -THUMB_FLAG_LEAF_BACKTRACE},\t\\\n-  /* CYGNUS LOCAL nickc/super-interworking */ \\\n   {\"callee-super-interworking\",\t    THUMB_FLAG_CALLEE_SUPER_INTERWORKING}, \\\n   {\"no-callee-super-interworking\", -THUMB_FLAG_CALLEE_SUPER_INTERWORKING}, \\\n   {\"caller-super-interworking\",\t    THUMB_FLAG_CALLER_SUPER_INTERWORKING}, \\\n   {\"no-caller-super-interworking\", -THUMB_FLAG_CALLER_SUPER_INTERWORKING}, \\\n-  /* END CYGNUS LOCAL */ \\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n   {\"\",                          TARGET_DEFAULT}         \t\\\n }\n@@ -1053,12 +1049,10 @@ int thumb_shiftable_const ();\n /* Emit a special directive when defining a function name.\n    This is used by the assembler to assit with interworking.  */\n #define ASM_DECLARE_FUNCTION_NAME(file, name, decl)             \\\n-/* CYGNUS LOCAL nickc/supr-interworking */ \\\n   if (! is_called_in_ARM_mode (decl))\t\t\t\\\n     fprintf (file, \"\\t.thumb_func\\n\") ;\t\t\t\\\n   else\t\t\t\t\t\t\t\\\n     fprintf (file, \"\\t.code\\t32\\n\") ;\t\t\t\\\n-/* END CYGNUS LOCAL */ \\\n   ASM_OUTPUT_LABEL (file, name)\n \n #define ASM_OUTPUT_REG_PUSH(STREAM,REGNO)\t\t\t\\\n@@ -1132,5 +1126,5 @@ extern char * output_move_mem_multiple ();\n extern char * thumb_load_double_from_address ();\n extern char * output_return ();\n extern int    far_jump_used_p();\n-extern int    is_called_in_ARM_mode (); /* CYGNUS LOCAL */\n+extern int    is_called_in_ARM_mode ();\n "}, {"sha": "375a84c107dd7cd872eb1e6c48d4276552b176fc", "filename": "gcc/config/arm/tpe.h", "status": "removed", "additions": 0, "deletions": 420, "changes": 420, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea65007e03fba1e5692479be8d4864c93dfe3193/gcc%2Fconfig%2Farm%2Ftpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea65007e03fba1e5692479be8d4864c93dfe3193/gcc%2Fconfig%2Farm%2Ftpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftpe.h?ref=ea65007e03fba1e5692479be8d4864c93dfe3193", "patch": "@@ -1,420 +0,0 @@\n-/* CYGNUS LOCAL (entire file) nickc/thumb-pe */\n-/* Definitions of target machine for GNU compiler,\n-   for Thumb with PE object format.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n-   Derived from arm/coff.h and arm/pe.h originally by Doug Evans (evans@cygnus.com).\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#include \"arm/thumb.h\"\n-\f\n-#define THUMB_PE 1\n-\n-/* Run-time Target Specification.  */\n-#undef TARGET_VERSION\n-#define TARGET_VERSION fputs (\" (Thumb/pe)\", stderr)\n-\f\n-/* Support the __declspec keyword by turning them into attributes.\n-   We currently only support: naked, dllimport, and dllexport.\n-   Note that the current way we do this may result in a collision with\n-   predefined attributes later on.  This can be solved by using one attribute,\n-   say __declspec__, and passing args to it.  The problem with that approach\n-   is that args are not accumulated: each new appearance would clobber any\n-   existing args.  */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"\\\n--Dthumb -D__thumb -D__pe__ -Acpu(arm) -Amachine(arm) \\\n--D__declspec(x)=__attribute__((x)) \\\n-\"\n-\n-/* Experimental addition for pr 7885.\n-   Ignore dllimport for functions.  */\n-#define ARM_FLAG_NOP_FUN_IMPORT\t\t0x20000\n-#define TARGET_NOP_FUN_DLLIMPORT (target_flags & ARM_FLAG_NOP_FUN_IMPORT)\n-\n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-{ \"nop-fun-dllimport\",\t\t  ARM_FLAG_NOP_FUN_IMPORT }, \\\n-{ \"no-nop-fun-dllimport\",\t -ARM_FLAG_NOP_FUN_IMPORT }, \n-\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT ARM_FLAG_NOP_FUN_IMPORT\n-\f\n-/* Setting this to 32 produces more efficient code, but the value set in previous\n-   versions of this toolchain was 8, which produces more compact structures. The\n-   command line option -mstructure_size_boundary=<n> can be used to change this\n-   value.  */\n-#undef STRUCTURE_SIZE_BOUNDARY\n-#define STRUCTURE_SIZE_BOUNDARY arm_structure_size_boundary\n-\n-extern int arm_structure_size_boundary;\n-\f\n-/* This is COFF, but prefer stabs.  */\n-#define SDB_DEBUGGING_INFO\n-\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-#include \"dbxcoff.h\"\n-\f\n-/* Note - it is important that these definitions match those in semi.h for the ARM port.  */\n-#undef LOCAL_LABEL_PREFIX\n-#define LOCAL_LABEL_PREFIX \".\"\n-\n-#undef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"_\"\n-\n-/* A C statement to output assembler commands which will identify the\n-   object file as having been compiled with GNU CC (or another GNU\n-   compiler).  */\n-#define ASM_IDENTIFY_GCC(STREAM)\t\t\t\t\\\n-     fprintf (STREAM, \"%sgcc2_compiled.:\\n%s\", LOCAL_LABEL_PREFIX, ASM_APP_OFF )\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(STREAM) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  extern char *version_string;\t\t\t\t\t\\\n-  fprintf ((STREAM), \"%s Generated by gcc %s for Thumb/coff\\n\", \\\n-\t   ASM_COMMENT_START, version_string);\t                \\\n-  fprintf ((STREAM), ASM_APP_OFF);                              \\\n-} while (0)\n-\n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\\n-} while (0)\n-\f\n-/* Support the ctors/dtors and other sections.  */\n-\n-#undef INIT_SECTION_ASM_OP\n-\n-/* Define this macro if jump tables (for `tablejump' insns) should be\n-   output in the text section, along with the assembler instructions.\n-   Otherwise, the readonly data section is used.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION\n-\n-#undef READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION\trdata_section\n-#undef RDATA_SECTION_ASM_OP\n-#define RDATA_SECTION_ASM_OP\t\"\\t.section .rdata\"\n-\n-#undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section .ctors,\\\"x\\\"\"\n-#undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section .dtors,\\\"x\\\"\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS in_rdata, in_ctors, in_dtors\n-\n-#define SUBTARGET_EXTRA_SECTIONS\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS \\\n-  RDATA_SECTION_FUNCTION\t\\\n-  CTORS_SECTION_FUNCTION\t\\\n-  DTORS_SECTION_FUNCTION\t\\\n-  SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-\n-#define RDATA_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_rdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define CTORS_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\f\n-/* Support the ctors/dtors sections for g++.  */\n-\n-#define INT_ASM_OP \".word\"\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(STREAM,NAME) \\\n-do {\t\t\t\t\t\t\\\n-  ctors_section ();\t\t\t\t\\\n-  fprintf (STREAM, \"\\t%s\\t \", INT_ASM_OP);\t\\\n-  assemble_name (STREAM, NAME);\t\t\t\\\n-  fprintf (STREAM, \"\\n\");\t\t\t\\\n-} while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(STREAM,NAME) \\\n-do {\t\t\t\t\t\t\\\n-  dtors_section ();                   \t\t\\\n-  fprintf (STREAM, \"\\t%s\\t \", INT_ASM_OP);\t\\\n-  assemble_name (STREAM, NAME);              \t\\\n-  fprintf (STREAM, \"\\n\");\t\t\t\\\n-} while (0)\n-\n-/* __CTOR_LIST__ and __DTOR_LIST__ must be defined by the linker script.  */\n-#define CTOR_LISTS_DEFINED_EXTERNALLY\n-\n-#undef DO_GLOBAL_CTORS_BODY\n-#undef DO_GLOBAL_DTORS_BODY\n-\n-/* The ARM development system has atexit and doesn't have _exit,\n-   so define this for now.  */\n-#define HAVE_ATEXIT\n-\n-/* The ARM development system defines __main.  */\n-#define NAME__MAIN \"__gccmain\"\n-#define SYMBOL__MAIN __gccmain\n-\f\n-/* This is to better conform to the ARM PCS.\n-   Richard Earnshaw hasn't put this into FSF sources yet so it's here.  */\n-#undef RETURN_IN_MEMORY\n-#define RETURN_IN_MEMORY(TYPE) \t\t\t\t\t\t\\\n-  ((TYPE_MODE ((TYPE)) == BLKmode && ! TYPE_NO_FORCE_BLK (TYPE))\t\\\n-   || (AGGREGATE_TYPE_P ((TYPE)) && arm_pe_return_in_memory ((TYPE))))\n-\f\n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-extern int arm_pe_valid_machine_decl_attribute ();\n-extern int arm_valid_machine_decl_attribute ();\n-#undef VALID_MACHINE_DECL_ATTRIBUTE\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  arm_pe_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n-extern union tree_node * arm_pe_merge_machine_decl_attributes ();\n-#define MERGE_MACHINE_DECL_ATTRIBUTES(OLD, NEW) \\\n-  arm_pe_merge_machine_decl_attributes ((OLD), (NEW))\n-\n-/* In addition to the stuff done in arm.h, we must mark dll symbols specially.\n-   Definitions of dllexport'd objects install some info in the .drectve\n-   section.  References to dllimport'd objects are fetched indirectly via\n-   __imp_.  If both are declared, dllexport overrides.\n-   This is also needed to implement one-only vtables: they go into their own\n-   section and we need to set DECL_SECTION_NAME so we do that here.\n-   Note that we can be called twice on the same decl.  */\n-extern void arm_pe_encode_section_info ();\n-#undef ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL) \\\n-  arm_pe_encode_section_info (DECL)\n-\n-     /* Utility used only in this file.  */\n-#define ARM_STRIP_NAME_ENCODING(SYM_NAME) \\\n-((SYM_NAME) + ((SYM_NAME)[0] == '@' ? 3 : 0))\n-\n-/* Strip any text from SYM_NAME added by ENCODE_SECTION_INFO and store\n-   the result in VAR.  */\n-#undef STRIP_NAME_ENCODING\n-#define STRIP_NAME_ENCODING(VAR, SYM_NAME) \\\n-(VAR) = ARM_STRIP_NAME_ENCODING (SYM_NAME)\n-\n-/* Define this macro if in some cases global symbols from one translation\n-   unit may not be bound to undefined symbols in another translation unit\n-   without user intervention.  For instance, under Microsoft Windows\n-   symbols must be explicitly imported from shared libraries (DLLs).  */\n-#define MULTIPLE_SYMBOL_SPACES\n-\n-#define UNIQUE_SECTION_P(DECL) DECL_ONE_ONLY (DECL)\n-extern void arm_pe_unique_section ();\n-#define UNIQUE_SECTION(DECL,RELOC) arm_pe_unique_section (DECL, RELOC)\n-\n-#define SUPPORTS_ONE_ONLY 1\n-\n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-#undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC) \t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\\n-  /* Functions may have been compiled at various levels of\t\\\n-     optimization so we can't use `same_size' here.  Instead,\t\\\n-     have the linker pick one.  */\t\t\t\t\\\n-  if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\\\n-\t     TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-\t     ? \"discard\" : \"same_size\");\t\t\t\\\n-} while (0)\n-\f\n-/* This outputs a lot of .req's to define alias for various registers.\n-   Let's try to avoid this.  */\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(STREAM) \\\n-do {\t\t\t\t\t\t\t\t\\\n-  extern char *version_string;\t\t\t\t\t\\\n-  fprintf (STREAM, \"%s Generated by gcc %s for ARM/pe\\n\",\t\\\n-\t   ASM_COMMENT_START, version_string);\t\t\t\\\n-  output_file_directive ((STREAM), main_input_filename);\t\\\n-} while (0)\n-\n-/* Output a reference to a label.  */\n-#undef ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(STREAM, NAME)  \\\n-fprintf (STREAM, \"%s%s\", USER_LABEL_PREFIX, ARM_STRIP_NAME_ENCODING (NAME))\n-\n-/* Output a function definition label.  */\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(STREAM, NAME, DECL) \\\n-do {\t\t\t\t\t\t\t\\\n-  if (arm_dllexport_name_p (NAME))\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      drectve_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n-\t       ARM_STRIP_NAME_ENCODING (NAME));\t\t\\\n-      function_section (DECL);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  if (! is_called_in_ARM_mode (decl))\t\t\t\\\n-    fprintf (STREAM, \"\\t.thumb_func\\n\") ;\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.code\\t32\\n\") ;\t\t\t\\\n-  ASM_OUTPUT_LABEL ((STREAM), (NAME));\t\t\t\\\n-} while (0)\n-\n-/* Output a common block.  */\n-#undef ASM_OUTPUT_COMMON\n-#define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED) \\\n-do {\t\t\t\t\t\t\t\\\n-  if (arm_dllexport_name_p (NAME))\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      drectve_section ();\t\t\t\t\\\n-      fprintf ((STREAM), \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n-\t       ARM_STRIP_NAME_ENCODING (NAME));\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  if (! arm_dllimport_name_p (NAME))\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf ((STREAM), \"\\t.comm\\t\"); \t\t\t\\\n-      assemble_name ((STREAM), (NAME));\t\t\t\\\n-      fprintf ((STREAM), \", %d\\t%s %d\\n\",\t\t\\\n-\t       (ROUNDED), ASM_COMMENT_START, (SIZE));\t\\\n-    }\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* Output the label for an initialized variable.  */\n-#undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(STREAM, NAME, DECL) \\\n-do {\t\t\t\t\t\t\t\\\n-  if (arm_dllexport_name_p (NAME))\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      enum in_section save_section = in_section;\t\\\n-      drectve_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.ascii \\\" -export:%s\\\"\\n\",\t\\\n-\t       ARM_STRIP_NAME_ENCODING (NAME));\t\t\\\n-      switch_to_section (save_section, (DECL));\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_LABEL ((STREAM), (NAME));\t\t\t\\\n-} while (0)\n-\f\n-/* Support the ctors/dtors and other sections.  */\n-\n-#define DRECTVE_SECTION_ASM_OP\t\"\\t.section .drectve\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef SUBTARGET_EXTRA_SECTIONS\n-#define SUBTARGET_EXTRA_SECTIONS in_drectve,\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS \\\n-  DRECTVE_SECTION_FUNCTION\t\\\n-  SWITCH_TO_SECTION_FUNCTION\n-\n-#define DRECTVE_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\t\\\n-drectve_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_drectve)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DRECTVE_SECTION_ASM_OP);\t\t\\\n-      in_section = in_drectve;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Switch to SECTION (an `enum in_section').\n-\n-   ??? This facility should be provided by GCC proper.\n-   The problem is that we want to temporarily switch sections in\n-   ASM_DECLARE_OBJECT_NAME and then switch back to the original section\n-   afterwards.  */\n-#define SWITCH_TO_SECTION_FUNCTION \\\n-void \\\n-switch_to_section (section, decl) \\\n-     enum in_section section; \\\n-     tree decl; \\\n-{ \\\n-  switch (section) \\\n-    { \\\n-      case in_text: text_section (); break; \\\n-      case in_data: data_section (); break; \\\n-      case in_named: named_section (decl, NULL, 0); break; \\\n-      case in_rdata: rdata_section (); break; \\\n-      case in_ctors: ctors_section (); break; \\\n-      case in_dtors: dtors_section (); break; \\\n-      case in_drectve: drectve_section (); break; \\\n-      default: abort (); break; \\\n-    } \\\n-}\n-\n-\n-\f\n-extern int thumb_pe_valid_machine_decl_attribute ();"}]}