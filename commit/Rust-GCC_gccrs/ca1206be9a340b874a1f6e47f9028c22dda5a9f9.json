{"sha": "ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExMjA2YmU5YTM0MGI4NzRhMWY2ZTQ3ZjkwMjhjMjJkZGE1YTlmOQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-04-26T15:03:08Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-04-26T15:03:08Z"}, "message": "match.pd: u + 3 < u is u > UINT_MAX - 3\n\n2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd (X + CST CMP X): New transformation.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/overflow-1.c: New testcase.\n\nFrom-SVN: r235448", "tree": {"sha": "a20377d202cdfae0362b32db059864c23e70cdad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a20377d202cdfae0362b32db059864c23e70cdad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b02a5e265db4d32cf1e67ee142bf337c185873ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02a5e265db4d32cf1e67ee142bf337c185873ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02a5e265db4d32cf1e67ee142bf337c185873ea"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "325eb874a988fa5d4ba280baa98aeda9fd393d33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "patch": "@@ -1,3 +1,7 @@\n+2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (X + CST CMP X): New transformation.\n+\n 2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* genmatch.c (write_predicate): Add ATTRIBUTE_UNUSED."}, {"sha": "476818709cf0f2ba2a1da68589ee56e14c1a28ac", "filename": "gcc/match.pd", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "patch": "@@ -2482,6 +2482,32 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    replace if (x == 0) with tem = ~x; if (tem != 0) which is\n    clearly less optimal and which we'll transform again in forwprop.  */\n \n+/* When one argument is a constant, overflow detection can be simplified.\n+   Currently restricted to single use so as not to interfere too much with\n+   ADD_OVERFLOW detection in tree-ssa-math-opts.c.\n+   A + CST CMP A  ->  A CMP' CST' */\n+(for cmp (lt le ge gt)\n+     out (gt gt le le)\n+ (simplify\n+  (cmp (plus@2 @0 INTEGER_CST@1) @0)\n+  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))\n+       && wi::ne_p (@1, 0)\n+       && single_use (@2))\n+   (out @0 { wide_int_to_tree (TREE_TYPE (@0), wi::max_value\n+\t       (TYPE_PRECISION (TREE_TYPE (@0)), UNSIGNED) - @1); }))))\n+/* A CMP A + CST  ->  A CMP' CST' */\n+(for cmp (gt ge le lt)\n+     out (gt gt le le)\n+ (simplify\n+  (cmp @0 (plus@2 @0 INTEGER_CST@1))\n+  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))\n+       && wi::ne_p (@1, 0)\n+       && single_use (@2))\n+   (out @0 { wide_int_to_tree (TREE_TYPE (@0), wi::max_value\n+\t       (TYPE_PRECISION (TREE_TYPE (@0)), UNSIGNED) - @1); }))))\n+\n \n /* Simplification of math builtins.  These rules must all be optimizations\n    as well as IL simplifications.  If there is a possibility that the new"}, {"sha": "b77a17b1c602de0be4116b5af945fe8d5b1e7e54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "patch": "@@ -1,3 +1,7 @@\n+2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/overflow-1.c: New testcase.\n+\n 2016-04-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67784"}, {"sha": "e126609c53d9490ab65b5e641821b39e07891671", "filename": "gcc/testsuite/gcc.dg/tree-ssa/overflow-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foverflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1206be9a340b874a1f6e47f9028c22dda5a9f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foverflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Foverflow-1.c?ref=ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(unsigned a){\n+    unsigned b=5;\n+    unsigned c=a-b;\n+    return c>a;\n+}\n+int g(unsigned a){\n+    unsigned b=32;\n+    unsigned c=a+b;\n+    return c<a;\n+}\n+\n+/* { dg-final { scan-tree-dump \"a_\\[0-9\\]+.D. <= 4;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"a_\\[0-9\\]+.D. > 4294967263;\" \"optimized\" } } */"}]}