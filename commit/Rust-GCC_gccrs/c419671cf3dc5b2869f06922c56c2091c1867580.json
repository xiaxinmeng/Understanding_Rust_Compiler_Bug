{"sha": "c419671cf3dc5b2869f06922c56c2091c1867580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxOTY3MWNmM2RjNWIyODY5ZjA2OTIyYzU2YzIwOTFjMTg2NzU4MA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-10-27T19:37:07Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-10-27T19:37:07Z"}, "message": "ipa-prop.c (compute_pass_through_member_ptrs): Rename parm_info to parm_ainfo.\n\n2011-10-27  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.c (compute_pass_through_member_ptrs): Rename parm_info\n\tto parm_ainfo.\n\t(ipa_compute_jump_functions_for_edge): Likewise.\n\t(ipa_compute_jump_functions): Likewise.\n\t(ipa_analyze_indirect_call_uses): Likewise.\n\t(ipa_analyze_call_uses): Likewise.\n\t(ipa_analyze_params_uses): Likewise.\n\t(ipa_analyze_node): Likewise.\n\nFrom-SVN: r180578", "tree": {"sha": "3745e920d78662c98e05d8f367628f790f3f7b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3745e920d78662c98e05d8f367628f790f3f7b57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c419671cf3dc5b2869f06922c56c2091c1867580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c419671cf3dc5b2869f06922c56c2091c1867580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c419671cf3dc5b2869f06922c56c2091c1867580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c419671cf3dc5b2869f06922c56c2091c1867580/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5625e6a6a2e2da90ae7f8b0851bd6161792130d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5625e6a6a2e2da90ae7f8b0851bd6161792130d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5625e6a6a2e2da90ae7f8b0851bd6161792130d9"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "66d62cceb697a6f01f41e62a4c350455b39f5e3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c419671cf3dc5b2869f06922c56c2091c1867580/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c419671cf3dc5b2869f06922c56c2091c1867580/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c419671cf3dc5b2869f06922c56c2091c1867580", "patch": "@@ -1,3 +1,14 @@\n+2011-10-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.c (compute_pass_through_member_ptrs): Rename parm_info\n+\tto parm_ainfo.\n+\t(ipa_compute_jump_functions_for_edge): Likewise.\n+\t(ipa_compute_jump_functions): Likewise.\n+\t(ipa_analyze_indirect_call_uses): Likewise.\n+\t(ipa_analyze_call_uses): Likewise.\n+\t(ipa_analyze_params_uses): Likewise.\n+\t(ipa_analyze_node): Likewise.\n+\n 2011-10-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/50875"}, {"sha": "f47781242726689c8a73b04cd6a62650b3b3d2bd", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c419671cf3dc5b2869f06922c56c2091c1867580/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c419671cf3dc5b2869f06922c56c2091c1867580/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=c419671cf3dc5b2869f06922c56c2091c1867580", "patch": "@@ -794,7 +794,7 @@ is_parm_modified_before_call (struct param_analysis_info *parm_info,\n \n static bool\n compute_pass_through_member_ptrs (struct ipa_node_params *info,\n-\t\t\t\t  struct param_analysis_info *parms_info,\n+\t\t\t\t  struct param_analysis_info *parms_ainfo,\n \t\t\t\t  struct ipa_edge_args *args,\n \t\t\t\t  gimple call)\n {\n@@ -813,7 +813,8 @@ compute_pass_through_member_ptrs (struct ipa_node_params *info,\n \t      int index = ipa_get_param_decl_index (info, arg);\n \n \t      gcc_assert (index >=0);\n-\t      if (!is_parm_modified_before_call (&parms_info[index], call, arg))\n+\t      if (!is_parm_modified_before_call (&parms_ainfo[index], call,\n+\t\t\t\t\t\t arg))\n \t\t{\n \t\t  struct ipa_jump_func *jfunc = ipa_get_ith_jump_func (args,\n \t\t\t\t\t\t\t\t       num);\n@@ -968,7 +969,7 @@ compute_cst_member_ptr_arguments (struct ipa_edge_args *args,\n    to this callsite.  */\n \n static void\n-ipa_compute_jump_functions_for_edge (struct param_analysis_info *parms_info,\n+ipa_compute_jump_functions_for_edge (struct param_analysis_info *parms_ainfo,\n \t\t\t\t     struct cgraph_edge *cs)\n {\n   struct ipa_node_params *info = IPA_NODE_REF (cs->caller);\n@@ -985,7 +986,7 @@ ipa_compute_jump_functions_for_edge (struct param_analysis_info *parms_info,\n \n   /* Let's check whether there are any potential member pointers and if so,\n      whether we can determine their functions as pass_through.  */\n-  if (!compute_pass_through_member_ptrs (info, parms_info, args, call))\n+  if (!compute_pass_through_member_ptrs (info, parms_ainfo, args, call))\n     return;\n \n   /* Finally, let's check whether we actually pass a new constant member\n@@ -998,7 +999,7 @@ ipa_compute_jump_functions_for_edge (struct param_analysis_info *parms_info,\n \n static void\n ipa_compute_jump_functions (struct cgraph_node *node,\n-\t\t\t    struct param_analysis_info *parms_info)\n+\t\t\t    struct param_analysis_info *parms_ainfo)\n {\n   struct cgraph_edge *cs;\n \n@@ -1010,11 +1011,11 @@ ipa_compute_jump_functions (struct cgraph_node *node,\n \t functions unless they may become known during lto/whopr.  */\n       if (!callee->analyzed && !flag_lto)\n \tcontinue;\n-      ipa_compute_jump_functions_for_edge (parms_info, cs);\n+      ipa_compute_jump_functions_for_edge (parms_ainfo, cs);\n     }\n \n   for (cs = node->indirect_calls; cs; cs = cs->next_callee)\n-    ipa_compute_jump_functions_for_edge (parms_info, cs);\n+    ipa_compute_jump_functions_for_edge (parms_ainfo, cs);\n }\n \n /* If RHS looks like a rhs of a statement loading pfn from a member\n@@ -1111,7 +1112,7 @@ ipa_note_param_call (struct cgraph_node *node, int param_index, gimple stmt)\n }\n \n /* Analyze the CALL and examine uses of formal parameters of the caller NODE\n-   (described by INFO).  PARMS_INFO is a pointer to a vector containing\n+   (described by INFO).  PARMS_AINFO is a pointer to a vector containing\n    intermediate information about each formal parameter.  Currently it checks\n    whether the call calls a pointer that is a formal parameter and if so, the\n    parameter is marked with the called flag and an indirect call graph edge\n@@ -1170,7 +1171,7 @@ ipa_note_param_call (struct cgraph_node *node, int param_index, gimple stmt)\n static void\n ipa_analyze_indirect_call_uses (struct cgraph_node *node,\n \t\t\t\tstruct ipa_node_params *info,\n-\t\t\t\tstruct param_analysis_info *parms_info,\n+\t\t\t\tstruct param_analysis_info *parms_ainfo,\n \t\t\t\tgimple call, tree target)\n {\n   gimple def;\n@@ -1283,7 +1284,7 @@ ipa_analyze_indirect_call_uses (struct cgraph_node *node,\n     return;\n \n   index = ipa_get_param_decl_index (info, rec);\n-  if (index >= 0 && !is_parm_modified_before_call (&parms_info[index],\n+  if (index >= 0 && !is_parm_modified_before_call (&parms_ainfo[index],\n \t\t\t\t\t\t   call, rec))\n     ipa_note_param_call (node, index, call);\n \n@@ -1347,36 +1348,36 @@ ipa_analyze_virtual_call_uses (struct cgraph_node *node,\n }\n \n /* Analyze a call statement CALL whether and how it utilizes formal parameters\n-   of the caller (described by INFO).  PARMS_INFO is a pointer to a vector\n+   of the caller (described by INFO).  PARMS_AINFO is a pointer to a vector\n    containing intermediate information about each formal parameter.  */\n \n static void\n ipa_analyze_call_uses (struct cgraph_node *node,\n \t\t       struct ipa_node_params *info,\n-\t\t       struct param_analysis_info *parms_info, gimple call)\n+\t\t       struct param_analysis_info *parms_ainfo, gimple call)\n {\n   tree target = gimple_call_fn (call);\n \n   if (!target)\n     return;\n   if (TREE_CODE (target) == SSA_NAME)\n-    ipa_analyze_indirect_call_uses (node, info, parms_info, call, target);\n+    ipa_analyze_indirect_call_uses (node, info, parms_ainfo, call, target);\n   else if (TREE_CODE (target) == OBJ_TYPE_REF)\n     ipa_analyze_virtual_call_uses (node, info, call, target);\n }\n \n \n /* Analyze the call statement STMT with respect to formal parameters (described\n    in INFO) of caller given by NODE.  Currently it only checks whether formal\n-   parameters are called.  PARMS_INFO is a pointer to a vector containing\n+   parameters are called.  PARMS_AINFO is a pointer to a vector containing\n    intermediate information about each formal parameter.  */\n \n static void\n ipa_analyze_stmt_uses (struct cgraph_node *node, struct ipa_node_params *info,\n-\t\t       struct param_analysis_info *parms_info, gimple stmt)\n+\t\t       struct param_analysis_info *parms_ainfo, gimple stmt)\n {\n   if (is_gimple_call (stmt))\n-    ipa_analyze_call_uses (node, info, parms_info, stmt);\n+    ipa_analyze_call_uses (node, info, parms_ainfo, stmt);\n }\n \n /* Callback of walk_stmt_load_store_addr_ops for the visit_load.\n@@ -1403,12 +1404,12 @@ visit_ref_for_mod_analysis (gimple stmt ATTRIBUTE_UNUSED,\n \n /* Scan the function body of NODE and inspect the uses of formal parameters.\n    Store the findings in various structures of the associated ipa_node_params\n-   structure, such as parameter flags, notes etc.  PARMS_INFO is a pointer to a\n+   structure, such as parameter flags, notes etc.  PARMS_AINFO is a pointer to a\n    vector containing intermediate information about each formal parameter.   */\n \n static void\n ipa_analyze_params_uses (struct cgraph_node *node,\n-\t\t\t struct param_analysis_info *parms_info)\n+\t\t\t struct param_analysis_info *parms_ainfo)\n {\n   tree decl = node->decl;\n   basic_block bb;\n@@ -1440,7 +1441,7 @@ ipa_analyze_params_uses (struct cgraph_node *node,\n \t  if (is_gimple_debug (stmt))\n \t    continue;\n \n-\t  ipa_analyze_stmt_uses (node, info, parms_info, stmt);\n+\t  ipa_analyze_stmt_uses (node, info, parms_ainfo, stmt);\n \t  walk_stmt_load_store_addr_ops (stmt, info,\n \t\t\t\t\t visit_ref_for_mod_analysis,\n \t\t\t\t\t visit_ref_for_mod_analysis,\n@@ -1464,7 +1465,7 @@ void\n ipa_analyze_node (struct cgraph_node *node)\n {\n   struct ipa_node_params *info;\n-  struct param_analysis_info *parms_info;\n+  struct param_analysis_info *parms_ainfo;\n   int i, param_count;\n \n   ipa_check_create_node_params ();\n@@ -1475,15 +1476,15 @@ ipa_analyze_node (struct cgraph_node *node)\n   ipa_initialize_node_params (node);\n \n   param_count = ipa_get_param_count (info);\n-  parms_info = XALLOCAVEC (struct param_analysis_info, param_count);\n-  memset (parms_info, 0, sizeof (struct param_analysis_info) * param_count);\n+  parms_ainfo = XALLOCAVEC (struct param_analysis_info, param_count);\n+  memset (parms_ainfo, 0, sizeof (struct param_analysis_info) * param_count);\n \n-  ipa_analyze_params_uses (node, parms_info);\n-  ipa_compute_jump_functions (node, parms_info);\n+  ipa_analyze_params_uses (node, parms_ainfo);\n+  ipa_compute_jump_functions (node, parms_ainfo);\n \n   for (i = 0; i < param_count; i++)\n-    if (parms_info[i].visited_statements)\n-      BITMAP_FREE (parms_info[i].visited_statements);\n+    if (parms_ainfo[i].visited_statements)\n+      BITMAP_FREE (parms_ainfo[i].visited_statements);\n \n   current_function_decl = NULL;\n   pop_cfun ();"}]}