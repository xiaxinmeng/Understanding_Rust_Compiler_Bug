{"sha": "f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjYThlMjc3MmU3N2IzOWVmZGI3MzVjY2Y2ZGZkMWI3MzM4OTc3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-09-15T17:27:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-09-15T17:27:23Z"}, "message": "re PR libstdc++/23875 (operator<<(short) should not call operator<<(long), etc.)\n\n2005-09-15  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/23875\n\t* include/std/std_ostream.h (operator<<(short), operator<<(unsigned\n\tshort), operator<<(int), operator<<(unsigned int), operator<<(float)):\n\tDon't call operator<<(long), operator<<(unsigned long), or\n\toperator<<(double), do the work mandated by the resolution of DR117...\n\t* include/bits/ostream.tcc (operator<<(short), operator<<(unsigned\n\tshort), operator<<(int), operator<<(unsigned int), operator<<(float)):\n\t... here.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/pod/23875.cc: New.\n\nFrom-SVN: r104313", "tree": {"sha": "98f62ab59a889a5d7e2c70f0f1025004dd906ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f62ab59a889a5d7e2c70f0f1025004dd906ddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/comments", "author": null, "committer": null, "parents": [{"sha": "14b33c04a1920fb97bde191021a509b439f3cf29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b33c04a1920fb97bde191021a509b439f3cf29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b33c04a1920fb97bde191021a509b439f3cf29"}], "stats": {"total": 268, "additions": 244, "deletions": 24}, "files": [{"sha": "1d8713e473eb20725f8996d5eb1a14db46250b5e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "patch": "@@ -1,3 +1,15 @@\n+2005-09-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/23875\n+\t* include/std/std_ostream.h (operator<<(short), operator<<(unsigned\n+\tshort), operator<<(int), operator<<(unsigned int), operator<<(float)):\n+\tDon't call operator<<(long), operator<<(unsigned long), or\n+\toperator<<(double), do the work mandated by the resolution of DR117...\n+\t* include/bits/ostream.tcc (operator<<(short), operator<<(unsigned\n+\tshort), operator<<(int), operator<<(unsigned int), operator<<(float)):\n+\t... here.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/pod/23875.cc: New.\n+\n 2005-09-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/testsuite_character.h: Specialize character<>"}, {"sha": "e26ad50d6b8ce3c00b8de52be7c976906bc609db", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "patch": "@@ -119,6 +119,122 @@ namespace std\n       return *this;\n     }\n \n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(short __n)\n+    {\n+      sentry __cerb(*this);\n+      if (__cerb)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 117. basic_ostream uses nonexistent num_put member functions.\n+\t      long __l;\n+\t      const ios_base::fmtflags __fmt = (this->flags()\n+\t\t\t\t\t\t& ios_base::basefield);\n+\t      if (__fmt == ios_base::oct || __fmt == ios_base::hex)\n+\t\t__l = static_cast<long>(static_cast<unsigned short>(__n));\n+\t      else\n+\t\t__l = static_cast<long>(__n);\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __l).failed())\n+\t\t__err |= ios_base::badbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(unsigned short __n)\n+    {\n+      sentry __cerb(*this);\n+      if (__cerb)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 117. basic_ostream uses nonexistent num_put member functions.\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(),\n+\t\t\t   static_cast<unsigned long>(__n)).failed())\n+\t\t__err |= ios_base::badbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(int __n)\n+    {\n+      sentry __cerb(*this);\n+      if (__cerb)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 117. basic_ostream uses nonexistent num_put member functions.\n+\t      long __l;\n+\t      const ios_base::fmtflags __fmt = (this->flags()\n+\t\t\t\t\t\t& ios_base::basefield);\n+\t      if (__fmt == ios_base::oct || __fmt == ios_base::hex)\n+\t\t__l = static_cast<long>(static_cast<unsigned int>(__n));\n+\t      else\n+\t\t__l = static_cast<long>(__n);\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(), __l).failed())\n+\t\t__err |= ios_base::badbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(unsigned int __n)\n+    {\n+      sentry __cerb(*this);\n+      if (__cerb)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 117. basic_ostream uses nonexistent num_put member functions.\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(),\n+\t\t\t   static_cast<unsigned long>(__n)).failed())\n+\t\t__err |= ios_base::badbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::\n@@ -213,6 +329,32 @@ namespace std\n     }\n #endif\n \n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(float __n)\n+    {\n+      sentry __cerb(*this);\n+      if (__cerb)\n+\t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+\t  try\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 117. basic_ostream uses nonexistent num_put member functions.\n+\t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n+\t      if (__np.put(*this, *this, this->fill(),\n+\t\t\t   static_cast<double>(__n)).failed())\n+\t\t__err |= ios_base::badbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  if (__err)\n+\t    this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::"}, {"sha": "ffc1a2817304dee2a47f3a3725451623218598c2", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "patch": "@@ -173,34 +173,16 @@ namespace std\n       operator<<(bool __n);\n \n       __ostream_type& \n-      operator<<(short __n)\n-      { \n-\tconst ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\tif (__fmt == ios_base::oct || __fmt == ios_base::hex)\n-\t  return this->operator<<(static_cast<long>\n-\t\t\t\t  (static_cast<unsigned short>(__n)));\n-\telse\n-\t  return this->operator<<(static_cast<long>(__n));\n-      }\n+      operator<<(short __n);\n \n       __ostream_type& \n-      operator<<(unsigned short __n)\n-      { return this->operator<<(static_cast<unsigned long>(__n)); }\n+      operator<<(unsigned short __n);\n \n       __ostream_type& \n-      operator<<(int __n)\n-      { \n-\tconst ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\tif (__fmt == ios_base::oct || __fmt == ios_base::hex)\n-\t  return this->operator<<(static_cast<long>\n-\t\t\t\t  (static_cast<unsigned int>(__n)));\n-\telse\n-\t  return this->operator<<(static_cast<long>(__n));\n-      }\n+      operator<<(int __n);\n \n       __ostream_type& \n-      operator<<(unsigned int __n)\n-      { return this->operator<<(static_cast<unsigned long>(__n)); }\n+      operator<<(unsigned int __n);\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n       __ostream_type& \n@@ -214,8 +196,7 @@ namespace std\n       operator<<(double __f);\n \n       __ostream_type& \n-      operator<<(float __f)\n-      { return this->operator<<(static_cast<double>(__f)); }\n+      operator<<(float __f);\n \n       __ostream_type& \n       operator<<(long double __f);"}, {"sha": "760103c197f7810f9a8944bf50671d696ce9fefa", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/pod/23875.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fpod%2F23875.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ca8e2772e77b39efdb735ccf6dfd1b73389778/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fpod%2F23875.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fpod%2F23875.cc?ref=f4ca8e2772e77b39efdb735ccf6dfd1b73389778", "patch": "@@ -0,0 +1,85 @@\n+// 2005-09-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.6.2.5.2  Arithmetic inserters\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+bool test __attribute__((unused)) = true;\n+using __gnu_test::pod_ushort;\n+\n+namespace std\n+{\n+  template<>\n+    basic_ostream<pod_ushort>&\n+    basic_ostream<pod_ushort>::\n+    operator<<(long)\n+    {\n+      VERIFY( false );\n+      return *this;\n+    }\n+\n+  template<>\n+    basic_ostream<pod_ushort>&\n+    basic_ostream<pod_ushort>::\n+    operator<<(unsigned long)\n+    {\n+      VERIFY( false );\n+      return *this;\n+    }\n+  \n+  template<>\n+    basic_ostream<pod_ushort>&\n+    basic_ostream<pod_ushort>::\n+    operator<<(double)\n+    {\n+      VERIFY( false );\n+      return *this;\n+    }\n+}\n+\n+// libstdc++/23875\n+void test01()\n+{\n+  std::basic_ostringstream<pod_ushort> ostr;\n+\n+  short s = 1;\n+  ostr << s;\n+\n+  unsigned short us = 1;\n+  ostr << us;\n+\n+  int i = 1;\n+  ostr << i;\n+\n+  unsigned int ui = 1;\n+  ostr << ui;\n+\n+  float f = 1.0f;\n+  ostr << f;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}