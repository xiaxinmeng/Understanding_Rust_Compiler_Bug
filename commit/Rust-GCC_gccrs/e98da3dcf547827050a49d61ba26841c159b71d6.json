{"sha": "e98da3dcf547827050a49d61ba26841c159b71d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4ZGEzZGNmNTQ3ODI3MDUwYTQ5ZDYxYmEyNjg0MWMxNTliNzFkNg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-07-12T04:52:04Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-07-12T04:52:04Z"}, "message": "backport: Applet.java: New file.\n\n2000-07-12  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\tMerged implementation of java.applet from classpath:\n\t* java/applet/Applet.java: New file.\n\t* java/applet/AppletContext.java: New file.\n\t* java/applet/AppletStub.java: New file.\n\t* java/applet/AudioClip.java: New file.\n\n\t* Makefile.am: Added new java.applet classes.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r34981", "tree": {"sha": "13e77f853dc420bd2d5c2ba1f17193850b06429c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13e77f853dc420bd2d5c2ba1f17193850b06429c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98da3dcf547827050a49d61ba26841c159b71d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98da3dcf547827050a49d61ba26841c159b71d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98da3dcf547827050a49d61ba26841c159b71d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98da3dcf547827050a49d61ba26841c159b71d6/comments", "author": null, "committer": null, "parents": [{"sha": "2a59078d5140c24ab8d868626bef79738d145ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a59078d5140c24ab8d868626bef79738d145ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a59078d5140c24ab8d868626bef79738d145ac8"}], "stats": {"total": 566, "additions": 566, "deletions": 0}, "files": [{"sha": "ce60672ce1028ddc670fc1d63628d433ed6930ee", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e98da3dcf547827050a49d61ba26841c159b71d6", "patch": "@@ -1,3 +1,14 @@\n+2000-07-12  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tMerged implementation of java.applet from classpath:\n+\t* java/applet/Applet.java: New file.\n+\t* java/applet/AppletContext.java: New file.\n+\t* java/applet/AppletStub.java: New file.\n+\t* java/applet/AudioClip.java: New file.\n+\n+\t* Makefile.am: Added new java.applet classes.\n+\t* Makefile.in: Rebuilt.\n+\n 2000-07-12  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \tAWT Stuff:"}, {"sha": "f0a1a6468969ce417a8ee522742474b030b21f93", "filename": "libjava/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=e98da3dcf547827050a49d61ba26841c159b71d6", "patch": "@@ -660,6 +660,10 @@ gnu/java/lang/ClassHelper.java \\\n gnu/java/security/provider/Gnu.java \\\n gnu/java/security/provider/SHA.java \\\n gnu/java/security/provider/SHA1PRNG.java \\\n+java/applet/Applet.java \\\n+java/applet/AppletStub.java \\\n+java/applet/AppletContext.java \\\n+java/applet/AudioClip.java \\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\\n java/io/BufferedReader.java \\"}, {"sha": "def9d6fc963939b1f02c368786e41b79a3b8de19", "filename": "libjava/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=e98da3dcf547827050a49d61ba26841c159b71d6", "patch": "@@ -430,6 +430,10 @@ gnu/java/lang/ClassHelper.java \\\n gnu/java/security/provider/Gnu.java \\\n gnu/java/security/provider/SHA.java \\\n gnu/java/security/provider/SHA1PRNG.java \\\n+java/applet/Applet.java \\\n+java/applet/AppletStub.java \\\n+java/applet/AppletContext.java \\\n+java/applet/AudioClip.java \\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\\n java/io/BufferedReader.java \\\n@@ -1011,6 +1015,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/security/provider/Gnu.P \\\n .deps/gnu/java/security/provider/SHA.P \\\n .deps/gnu/java/security/provider/SHA1PRNG.P .deps/interpret.P \\\n+.deps/java/applet/Applet.P .deps/java/applet/AppletContext.P \\\n+.deps/java/applet/AppletStub.P .deps/java/applet/AudioClip.P \\\n .deps/java/awt/AWTError.P .deps/java/awt/AWTEvent.P \\\n .deps/java/awt/AWTEventMulticaster.P .deps/java/awt/AWTException.P \\\n .deps/java/awt/ActiveEvent.P .deps/java/awt/Adjustable.P \\"}, {"sha": "fe962394bc9fa5c6f4c1255030d10b2171693a77", "filename": "libjava/java/applet/Applet.java", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FApplet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FApplet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fapplet%2FApplet.java?ref=e98da3dcf547827050a49d61ba26841c159b71d6", "patch": "@@ -0,0 +1,296 @@\n+/* Applet.java -- Java base applet class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+ \n+This file is part of GNU Classpath.\n+ \n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+ \n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+ \n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.applet;\n+\n+import java.awt.Dimension;\n+import java.awt.Image;\n+import java.net.URL;\n+import java.util.Locale;\n+\n+/**\n+  * This is the base applet class.  An applet is a Java program that\n+  * runs inside a web browser or other applet viewer in a restricted\n+  * environment.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Applet extends java.awt.Panel implements java.io.Serializable\n+{\n+  // The applet stub for this applet\n+  private AppletStub stub;\n+\n+  /**\n+    * Default constructor for subclasses.\n+    */\n+  public Applet() {}\n+\n+  /**\n+    * Returns the URL of the document this applet is embedded in.\n+    *\n+    * @return The URL of the document this applet is embedded in.\n+    */\n+  public URL getDocumentBase()\n+  {\n+    return (stub.getDocumentBase ());\n+  }\n+\n+  /**\n+    * Returns the URL of the code base for this applet.\n+    *\n+    * @return The URL of the code base for this applet.\n+    */\n+  public URL getCodeBase()\n+  {\n+    return (stub.getCodeBase ());\n+  }\n+\n+  /**\n+    * Returns the value of the specified parameter that was specified in \n+    * the &lt;APPLET&gt; tag for this applet.\n+    *\n+    * @param name The parameter name.\n+    *\n+    * @param value The parameter value, or <code>null</code> if the parameter\n+    * does not exist.\n+    */\n+  public String getParameter(String name)\n+  {\n+    return (stub.getParameter (name));\n+  }\n+\n+  /**\n+    * Returns the applet context for this applet.\n+    *\n+    * @return The applet context for this applet.\n+    */\n+  public AppletContext getAppletContext()\n+  {\n+    return (stub.getAppletContext ());\n+  }\n+\n+  /**\n+    * Tests whether or not this applet is currently active.\n+    *\n+    * @return <code>true</code> if this applet is active, <code>false</code>\n+    * otherwise.\n+    */\n+  public boolean isActive()\n+  {\n+    return (stub.isActive ());\n+  }\n+\n+  /**\n+    * Requests that the applet window for this applet be resized.\n+    *\n+    * @param width The new width in pixels.\n+    * @param height The new height in pixels.\n+    */\n+  public void resize(int width, int height)\n+  {\n+    stub.appletResize (width, height);\n+  }\n+\n+  /**\n+    * Requests that the applet window for this applet be resized.\n+    *\n+    * @param dim The <code>Dimension</code> object with the requested\n+    * width and height.\n+    */\n+  public void resize(Dimension dim)\n+  {\n+    resize (dim.width, dim.height);\n+  }\n+\n+  /**\n+    * Returns an audio clip from the specified URL.\n+    *\n+    * @param url The URL of the audio clip.\n+    *\n+    * @return The retrieved audio clip. \n+    */\n+  public AudioClip getAudioClip(URL url)\n+  {\n+    return (getAppletContext ().getAudioClip (url));\n+  }\n+\n+  /**\n+    * Returns an audio clip from the specified URL and name\n+    *\n+    * @param url The base URL of the audio clip.\n+    * @param name The name of the clip relative to the URL.\n+    *\n+    * @return The retrieved audio clip. \n+    */\n+  public AudioClip getAudioClip(URL url, String name)\n+  {\n+    try\n+      {\n+        return (getAppletContext ().getAudioClip (new URL (url.toExternalForm()\n+                                                \t   + name)));\n+      }\n+    catch(Exception e)\n+      {\n+        return (getAudioClip (url));\n+      }\n+  }\n+\n+  /**\n+    * Loads and plays the audio clip pointed to by the specified URL.\n+    *\n+    * @param The URL of the audio clip.\n+    */\n+  public void play (URL url)\n+  {\n+    getAudioClip (url).play ();\n+  }\n+\n+  /**\n+    * Loads and plays the audio clip pointed to by the specified URL.\n+    *\n+    * @param The base URL of the audio clip.\n+    * @param name The name of the audio clip relative to the URL.\n+    */\n+  public void play (URL url, String name)\n+  {\n+    getAudioClip (url, name).play ();\n+  }\n+\n+  /**\n+    * Returns an image from the specified URL.  Note that the image is not\n+    * actually retrieved until the applet attempts to display it, so this\n+    * method returns immediately.\n+    *\n+    * @param url The URL of the image.\n+    *\n+    * @return The retrieved image.\n+    */\n+  public Image getImage(URL url)\n+  {\n+    return (getAppletContext ().getImage (url));\n+  }\n+\n+  /**\n+    * Returns an image from the specified URL.  Note that the image is not\n+    * actually retrieved until the applet attempts to display it, so this\n+    * method returns immediately.\n+    *\n+    * @param url The base URL of the image.\n+    * @param name The name of the image relative to the URL.\n+    *\n+    * @return The retrieved image.\n+    */\n+  public Image getImage(URL url, String name)\n+  {\n+    try\n+      {\n+        return (getAppletContext ().getImage (new URL (url.toExternalForm()\n+                                        \t       + name)));\n+      }\n+    catch(Exception e)\n+      {\n+        return (getImage (url));\n+      }\n+  }\n+\n+  /**\n+    * Returns the locale for this applet, if it has been set.  If no applet\n+    * specific locale has been set, the default locale is returned.\n+    *\n+    * @return The locale for this applet.\n+    */\n+  public Locale getLocale()\n+  {\n+    return (super.getLocale ());\n+  }\n+\n+  /**\n+    * Returns a descriptive string with applet defined information.  The\n+    * implementation in this class returns <code>null</code>.  Applets who\n+    * wish to return this information should override.\n+    *\n+    * @return A string describing the applet.\n+    */\n+  public String getAppletInfo()\n+  {\n+    return (null);\n+  }\n+\n+  /**\n+    * Returns a list of parameters this applet supports.  Each element of\n+    * the array is a list of three strings with the name of the parameter,\n+    * the data type or valid values, and a description.  This method is\n+    * optional and the default implementation returns <code>null</code>.\n+    *\n+    * @return The list of parameters supported by this applet.\n+    */\n+  public String[][] getParameterInfo()\n+  {\n+    return (null);\n+  }\n+\n+  /**\n+    * This method is called when the applet is first loaded.  The default\n+    * implementation does nothing.  Applets that wish to do one time\n+    * initialization should override.\n+    */\n+  public void init() {}\n+\n+  /**\n+    * This method is called when the applet is being unloaded.  The default\n+    * implementation does nothing.  Applets that need to clean up resources\n+    * on exit should override.\n+    */\n+  public void destroy() {}\n+\n+  /**\n+    * This method is called when the applet should start running.  This is\n+    * normally each time a web page containing it is loaded.  The default\n+    * implemention does nothing.  Subclasses should override.\n+    */\n+  public void start() {}\n+\n+  /**\n+    * This method is called when the applet should stop running.  This is\n+    * normally when the next web page is loaded.  The default implementation\n+    * does nothing.\n+    */\n+  public void stop() {}\n+\n+  /**\n+    * The browser calls this method to set the applet's stub, which is the\n+    * low level interface to the browser.\n+    *\n+    * @param stub The applet stub for this applet.\n+    */\n+  public final void setStub (AppletStub stub)\n+  {\n+    this.stub = stub;\n+  }\n+\n+} // class Applet\n+"}, {"sha": "e8c2c935b39dd83fda12e51fdd98c8c9da9d364e", "filename": "libjava/java/applet/AppletContext.java", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FAppletContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FAppletContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fapplet%2FAppletContext.java?ref=e98da3dcf547827050a49d61ba26841c159b71d6", "patch": "@@ -0,0 +1,108 @@\n+/* AppletContext.java -- Access the applet's runtime environment.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+ \n+This file is part of GNU Classpath.\n+ \n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+ \n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+ \n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.applet;\n+\n+import java.awt.Image;\n+import java.net.URL;\n+import java.util.Enumeration;\n+\n+/**\n+  * This interface allows an applet access to the browser to retrieve\n+  * additional data files and display documents.  It also allows the\n+  * applet to find out other applets in the same document.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface AppletContext\n+{\n+  /**\n+    * Returns an audio clip from the specified URL.\n+    *\n+    * @param url The URL of the audio clip.\n+    *\n+    * @return The retrieved audio clip // FIXME: What happens on error?\n+    */\n+  AudioClip getAudioClip(URL url);\n+\n+  /**\n+    * Returns an image from the specified URL.  Note that the image is not\n+    * actually retrieved until the applet attempts to display it, so this\n+    * method returns immediately.\n+    *\n+    * @param url The URL of the image.\n+    *\n+    * @return The retrieved image.  // FIXME: What happens on eror?\n+    */\n+  Image getImage(URL url);\n+\n+  /**\n+    * Returns the applet in the document for this object that has the\n+    * specified name.\n+    *\n+    * @param name The applet name.\n+    *\n+    * @return The requested applet, or <code>null</code> if an applet with\n+    * the requested name cannot be found.\n+    */\n+  Applet getApplet(String name);\n+\n+  /**\n+    * Returns a list of all the applets in the document for this object.\n+    *\n+    * @return A list of all the applets in the document for this object.\n+    */\n+  Enumeration getApplets();\n+\n+  /**\n+    * Displays the web page pointed to by the specified URL in the window\n+    * for this object.  This page replaces the document that is currently\n+    * there.\n+    *\n+    * @param url The URL of the web page to load.\n+    */\n+  void showDocument(URL url);\n+\n+  /**\n+    * Displays the web page pointed to be the sepcified URL in the window\n+    * with the specified name.  The standard names \"_top\", \"_blank\",\n+    * \"_parent\", and \"_self\" are allowed.\n+    *\n+    * @param url The URL of the web page to load.\n+    * @param target The target window.\n+    */\n+  void showDocument(URL url, String target);\n+\n+  /**\n+    * Displays the specified message in the status window if that window\n+    * exists.\n+    *\n+    * @param message The status message.\n+    */\n+  void showStatus(String message);\n+\n+} // interface AppletContext"}, {"sha": "268426473694d80b3fad5cbe2c484caf9f67ab52", "filename": "libjava/java/applet/AppletStub.java", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FAppletStub.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FAppletStub.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fapplet%2FAppletStub.java?ref=e98da3dcf547827050a49d61ba26841c159b71d6", "patch": "@@ -0,0 +1,88 @@\n+/* AppletStub.java -- Low level interface to the browser.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+ \n+This file is part of GNU Classpath.\n+ \n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+ \n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+ \n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.applet;\n+\n+import java.net.URL;\n+\n+/**\n+  * This interface is the low level interface between the applet and the\n+  * browser.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface AppletStub\n+{\n+  /**\n+    * Returns the URL of the document this applet is embedded in.\n+    *\n+    * @return The URL of the document this applet is embedded in.\n+    */\n+  URL getDocumentBase();\n+\n+  /**\n+    * Returns the URL of the code base for this applet.\n+    *\n+    * @return The URL of the code base for this applet.\n+    */\n+  URL getCodeBase();\n+\n+  /**\n+    * Returns the value of the specified parameter that was specified in \n+    * the &lt;APPLET&gt; tag for this applet.\n+    *\n+    * @param name The parameter name.\n+    *\n+    * @param value The parameter value, or <code>null</code> if the parameter\n+    * does not exist.\n+    */\n+  String getParameter(String name);\n+\n+  /**\n+    * Returns the applet context for this applet.\n+    *\n+    * @return The applet context for this applet.\n+    */\n+  AppletContext getAppletContext();\n+\n+  /**\n+    * Tests whether or not this applet is currently active.\n+    *\n+    * @return <code>true</code> if this applet is active, <code>false</code>\n+    * otherwise.\n+    */\n+  boolean isActive();\n+\n+  /**\n+    * Requests that the applet window for this applet be resized.\n+    *\n+    * @param width The new width in pixels.\n+    * @param height The new height in pixels.\n+    */\n+  void appletResize(int width, int height);\n+\n+} // interface AppletStub\n+"}, {"sha": "add9748c0907abaf030dadfc92e35fe2f3c9edbc", "filename": "libjava/java/applet/AudioClip.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FAudioClip.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98da3dcf547827050a49d61ba26841c159b71d6/libjava%2Fjava%2Fapplet%2FAudioClip.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fapplet%2FAudioClip.java?ref=e98da3dcf547827050a49d61ba26841c159b71d6", "patch": "@@ -0,0 +1,53 @@\n+/* AudioClip.java -- Play an audio clip.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+ \n+This file is part of GNU Classpath.\n+ \n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+ \n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+ \n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.applet;\n+\n+/**\n+  * This interface provides a simple mechanism for playing audio clips.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface AudioClip\n+{\n+  /**\n+    * Plays the audio clip starting from the beginning.\n+    */\n+  void play();\n+\n+  /**\n+    * Stops playing this audio clip.  There is no mechanism for restarting\n+    * at the point where the clip is stopped.\n+    */\n+  void stop();\n+\n+  /**\n+    * Plays this audio clip in a continuous loop.\n+    */\n+  void loop();\n+\n+} // interface AudioClip"}]}