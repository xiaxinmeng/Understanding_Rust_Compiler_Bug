{"sha": "cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JlZmEzYzlhMmI4ODBjY2FiNDk1NGU3ZTBmOGM4ZDU3MWQ4OWQzMQ==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2003-12-16T07:42:08Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2003-12-16T07:42:08Z"}, "message": "altivec.h (vec_cmple, [...]): Fix typo.\n\n      * altivec.h (vec_cmple, vec_all_numeric): Fix typo.\n      * testsuite/gcc.dg/altivec-10.c: Test for above.\n\nFrom-SVN: r74675", "tree": {"sha": "2a97321d42957f324b02362fa4beec1033096324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a97321d42957f324b02362fa4beec1033096324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31/comments", "author": null, "committer": null, "parents": [{"sha": "d1a0ec38115da4208e71540a0262d78722b2ea69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a0ec38115da4208e71540a0262d78722b2ea69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a0ec38115da4208e71540a0262d78722b2ea69"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "45e05a8c989a4d65b33cab0497f957ce50ad8e07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31", "patch": "@@ -1,3 +1,8 @@\n+2003-12-16  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* altivec.h (vec_cmple, vec_all_numeric): Fix typo.\n+\t* testsuite/gcc.dg/altivec-10.c: Test for above.\n+\t\n 2003-12-15  David O'Brien  <obrien@FreeBSD.org>\n \n \t* Makefile.in (CPPFLAGS): Initialize from configure."}, {"sha": "c98d6ea374338d0c3c6e2b5331e18b8ac0781467", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31", "patch": "@@ -1094,7 +1094,7 @@ vec_vcmpgtub (vector unsigned char a1, vector unsigned char a2)\n inline vector signed int\n vec_cmple (vector float a1, vector float a2)\n {\n-  return (vector signed int) __builtin_altivec_vcmpgefp ((vector float) a1, (vector float) a2);\n+  return (vector signed int) __builtin_altivec_vcmpgefp ((vector float) a2, (vector float) a1);\n }\n \n /* vec_cmplt */\n@@ -5526,7 +5526,7 @@ vec_all_nlt (vector float a1, vector float a2)\n inline int\n vec_all_numeric (vector float a1)\n {\n-  return __builtin_altivec_vcmpeqfp_p (__CR6_EQ, a1, a1);\n+  return __builtin_altivec_vcmpeqfp_p (__CR6_LT, a1, a1);\n }\n \n /* vec_any_eq */\n@@ -6521,7 +6521,7 @@ __ch (__bin_args_eq (vector unsigned char, (a1), vector unsigned char, (a2)), \\\n       ((vector signed char) __builtin_altivec_vcmpgtub ((vector signed char) (a1), (vector signed char) (a2))), \\\n   __altivec_link_error_invalid_argument ())\n \n-#define vec_cmple(a1, a2) __builtin_altivec_vcmpgefp ((a1), (a2))\n+#define vec_cmple(a1, a2) __builtin_altivec_vcmpgefp ((a2), (a1))\n \n #define vec_cmplt(a2, a1) \\\n __ch (__bin_args_eq (vector unsigned char, (a1), vector unsigned char, (a2)), \\\n@@ -8343,7 +8343,7 @@ __ch (__bin_args_eq (vector float, (a1), vector float, (a2)), \\\n \n #define vec_all_nlt(a1, a2) __builtin_altivec_vcmpgtfp_p (__CR6_EQ, (a2), (a1))\n \n-#define vec_all_numeric(a1) __builtin_altivec_vcmpeqfp_p (__CR6_EQ, (a1), (a1))\n+#define vec_all_numeric(a1) __builtin_altivec_vcmpeqfp_p (__CR6_LT, (a1), (a1))\n \n #define vec_any_eq(a1, a2) \\\n __ch (__bin_args_eq (vector signed char, (a1), vector unsigned char, (a2)), \\"}, {"sha": "8d9223f3be482dc38a4d3c3f5b2e9f52b14e3984", "filename": "gcc/testsuite/gcc.dg/altivec-10.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-10.c?ref=cbefa3c9a2b880ccab4954e7e0f8c8d571d89d31", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec -mabi=altivec -fno-inline\" } */\n+\n+#include <altivec.h>\n+#include <signal.h>\n+\n+void \n+sig_ill_handler (int sig)\n+{\n+    exit(0);\n+}\n+\n+typedef union\n+{\n+  float         f[4];\n+  unsigned int  i[4];\n+  vector float  v;\n+} vec_float_t;\n+\n+void \n+check_vec_all_num ()\n+{\n+  vec_float_t a, b, c;\n+\n+  a.i[0] = 0xfffa5a5a;\n+  a.f[1] = 1.0;\n+  a.f[2] = 1.0;\n+  a.f[3] = 1.0;\n+\n+  b.f[0] = 1.0;\n+  b.f[1] = 1.0;\n+  b.f[2] = 1.0;\n+  b.f[3] = 1.0;\n+\n+  c.i[0] = 0xfffa5a5a;\n+  c.i[1] = 0xfffa5a5a;\n+  c.i[2] = 0xfffa5a5a;\n+  c.i[3] = 0xfffa5a5a;\n+\n+  if (vec_all_numeric (a.v))\n+    abort ();\n+\n+  if (vec_all_nan (a.v))\n+    abort ();\n+\n+  if (!vec_all_numeric (b.v))\n+    abort ();\n+\n+  if (vec_all_nan (b.v))\n+    abort ();\n+\n+  if (vec_all_numeric (c.v))\n+    abort ();\n+\n+  if (!vec_all_nan (c.v))\n+    abort ();\n+\n+}\n+\n+void \n+check_cmple()\n+{\n+  vector float a = {1.0, 2.0, 3.0, 4.0};\n+  vector float b = {1.0, 3.0, 2.0, 5.0};\n+  vector signed int aux;\n+  vector signed int le = {-1, -1, 0, -1};\n+\n+  aux = vec_cmple (a, b);\n+\n+  if (!vec_all_eq (aux, le))\n+    abort ();\n+}\n+\n+\n+int \n+main()\n+{\n+  /* Exit on systems without altivec.  */\n+  signal (SIGILL, sig_ill_handler);\n+  asm volatile (\"vor 0,0,0\");\n+  signal (SIGILL, SIG_DFL);\n+\n+  check_cmple ();\n+  check_vec_all_num ();\n+  exit (0);\n+}"}]}