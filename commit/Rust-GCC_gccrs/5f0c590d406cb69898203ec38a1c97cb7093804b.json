{"sha": "5f0c590d406cb69898203ec38a1c97cb7093804b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwYzU5MGQ0MDZjYjY5ODk4MjAzZWMzOGExYzk3Y2I3MDkzODA0Yg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-07-08T22:05:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-08T22:05:40Z"}, "message": "pa.h (LEGITIMIZE_RELOAD_ADDRESS): Handle addresses created by LEGITIMIZE_RELOAD_ADDRESS.\n\n        * pa.h (LEGITIMIZE_RELOAD_ADDRESS): Handle addresses created by\n        LEGITIMIZE_RELOAD_ADDRESS.\n        * tm.texi (LEGITIMIZE_RELOAD_ADDRESS): Note that this macro must be\n        able to handle addresses created by previous invocations of the macro.\n\nFrom-SVN: r21014", "tree": {"sha": "ee82a667b2d0822e966814febc004b38df6148a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee82a667b2d0822e966814febc004b38df6148a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0c590d406cb69898203ec38a1c97cb7093804b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0c590d406cb69898203ec38a1c97cb7093804b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0c590d406cb69898203ec38a1c97cb7093804b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0c590d406cb69898203ec38a1c97cb7093804b/comments", "author": null, "committer": null, "parents": [{"sha": "2710ffc868d8ddc383886b626e7c35ade2d58936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2710ffc868d8ddc383886b626e7c35ade2d58936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2710ffc868d8ddc383886b626e7c35ade2d58936"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "964f026d0d9352553f123f537061af9966048d35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c590d406cb69898203ec38a1c97cb7093804b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c590d406cb69898203ec38a1c97cb7093804b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f0c590d406cb69898203ec38a1c97cb7093804b", "patch": "@@ -1,5 +1,10 @@\n Wed Jul  8 21:43:14 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.h (LEGITIMIZE_RELOAD_ADDRESS): Handle addresses created by\n+\tLEGITIMIZE_RELOAD_ADDRESS.\n+\t* tm.texi (LEGITIMIZE_RELOAD_ADDRESS): Note that this macro must be\n+\table to handle addresses created by previous invocations of the macro.\n+\n \t* flow.c (find_auto_inc): Remove most recent change.  Real bug was\n \telsewhere.\n "}, {"sha": "fb65b403fcb5ddfc984685b0c3b28cde57c06a9d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c590d406cb69898203ec38a1c97cb7093804b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c590d406cb69898203ec38a1c97cb7093804b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=5f0c590d406cb69898203ec38a1c97cb7093804b", "patch": "@@ -1638,14 +1638,22 @@ extern struct rtx_def *hppa_builtin_saveregs ();\n #define LEGITIMIZE_RELOAD_ADDRESS(AD, MODE, OPNUM, TYPE, IND, WIN) \t\\\n do { \t\t\t\t\t\t\t\t\t\\\n   int offset, newoffset, mask;\t\t\t\t\t\t\\\n+  rtx new, temp = NULL_RTX;\t\t\t\t\t\t\\\n   mask = GET_MODE_CLASS (MODE) == MODE_FLOAT ? 0x1f : 0x3fff;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (optimize\t\t\t\t\t\t\t\t\\\n-      && GET_CODE (AD) == PLUS\t\t\t\t\t\t\\\n-      && GET_CODE (XEXP (AD, 0)) == REG\t\t\t\t\t\\\n-      && GET_CODE (XEXP (AD, 1)) == CONST_INT)\t\t\t\t\\\n+      && GET_CODE (AD) == PLUS)\t\t\t\t\t\t\\\n+    temp = simplify_binary_operation (PLUS, Pmode,\t\t\t\\\n+\t\t\t\t      XEXP (AD, 0), XEXP (AD, 1));\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  new = temp ? temp : AD;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (optimize\t\t\t\t\t\t\t\t\\\n+      && GET_CODE (new) == PLUS\t\t\t\t\t\t\\\n+      && GET_CODE (XEXP (new, 0)) == REG\t\t\t\t\\\n+      && GET_CODE (XEXP (new, 1)) == CONST_INT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      offset = INTVAL (XEXP ((AD), 1));\t\t\t\t\t\\\n+      offset = INTVAL (XEXP ((new), 1));\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* Choose rounding direction.  Round up if we are >= halfway.  */\t\\\n       if ((offset & mask) >= ((mask + 1) / 2))\t\t\t\t\\\n@@ -1656,11 +1664,8 @@ do { \t\t\t\t\t\t\t\t\t\\\n       if (newoffset != 0\t\t\t\t\t\t\\\n \t  && VAL_14_BITS_P (newoffset))\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  rtx temp;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  /* Unshare the sum as well.  */\t\t\t\t\\\n-\t  AD = copy_rtx (AD);\t\t\t\t\t\t\\\n-\t  temp = gen_rtx_PLUS (Pmode, XEXP (AD, 0),\t\t\t\\\n+\t  temp = gen_rtx_PLUS (Pmode, XEXP (new, 0),\t\t\t\\\n \t\t\t       GEN_INT (newoffset));\t\t\t\\\n \t  AD = gen_rtx_PLUS (Pmode, temp, GEN_INT (offset - newoffset));\\\n \t  push_reload (XEXP (AD, 0), 0, &XEXP (AD, 0), 0,\t\t\\"}, {"sha": "32c5a75d053a5f0dbb1ec74304274e90ea661053", "filename": "gcc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c590d406cb69898203ec38a1c97cb7093804b/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c590d406cb69898203ec38a1c97cb7093804b/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=5f0c590d406cb69898203ec38a1c97cb7093804b", "patch": "@@ -4310,6 +4310,10 @@ to know something of how reload works in order to effectively use this,\n and it is quite easy to produce macros that build in too much knowledge\n of reload internals.\n \n+@emph{Note}: This macro must be able to reload an address created by a\n+previous invocation of this macro.  If it fails to handle such addresses\n+then the compiler may generate incorrect code or abort.\n+\n @findex push_reload\n The macro definition should use @code{push_reload} to indicate parts that\n need reloading; @var{opnum}, @var{type} and @var{ind_levels} are usually"}]}