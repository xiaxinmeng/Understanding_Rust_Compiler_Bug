{"sha": "9107d6526b938eba8168025c0d90d06ad3634e69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwN2Q2NTI2YjkzOGViYTgxNjgwMjVjMGQ5MGQwNmFkMzYzNGU2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-22T11:51:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-22T11:51:52Z"}, "message": "re PR tree-optimization/92173 (ICE in optab_for_tree_code, at optabs-tree.c:81)\n\n2019-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92173\n\t* tree-vect-loop.c (vectorizable_reduction): If\n\tvect_transform_reduction cannot handle code-generation try without\n\tthe single-def-use-cycle optimization.  Pass optab_vector to\n\toptab_for_tree_code to get vector shifts as that's what we'd\n\tgenerate.\n\n\t* gcc.dg/torture/pr92173.c: New testcase.\n\nFrom-SVN: r277286", "tree": {"sha": "f68ece130b15ef7fd87ff67e14398ae09cce0d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f68ece130b15ef7fd87ff67e14398ae09cce0d0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9107d6526b938eba8168025c0d90d06ad3634e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9107d6526b938eba8168025c0d90d06ad3634e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9107d6526b938eba8168025c0d90d06ad3634e69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9107d6526b938eba8168025c0d90d06ad3634e69/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eefb1290536f9366ba0493ee1109e52d97ef9881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefb1290536f9366ba0493ee1109e52d97ef9881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eefb1290536f9366ba0493ee1109e52d97ef9881"}], "stats": {"total": 79, "additions": 55, "deletions": 24}, "files": [{"sha": "8f0af771b5f500af98e4b70a8032da4794460e79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9107d6526b938eba8168025c0d90d06ad3634e69", "patch": "@@ -1,3 +1,12 @@\n+2019-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92173\n+\t* tree-vect-loop.c (vectorizable_reduction): If\n+\tvect_transform_reduction cannot handle code-generation try without\n+\tthe single-def-use-cycle optimization.  Pass optab_vector to\n+\toptab_for_tree_code to get vector shifts as that's what we'd\n+\tgenerate.\n+\n 2019-10-22  Martin Liska  <mliska@suse.cz>\n \n \t* diagnostic-format-json.cc (json_from_expanded_location):"}, {"sha": "9827b38387d03dc2cdc498ebba068d693c91c5dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9107d6526b938eba8168025c0d90d06ad3634e69", "patch": "@@ -1,3 +1,8 @@\n+2019-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92173\n+\t* gcc.dg/torture/pr92173.c: New testcase.\n+\n 2019-10-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* g++.dg/diagnostic/aka5.h: New test."}, {"sha": "fcb3548b716987542210ebaf0be76b981b538528", "filename": "gcc/testsuite/gcc.dg/torture/pr92173.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92173.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92173.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr92173.c?ref=9107d6526b938eba8168025c0d90d06ad3634e69", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+unsigned int\n+yo (unsigned int o0, signed char s1)\n+{\n+  for (s1 = 0; s1 < 1; s1 -= 2)\n+    o0 += o0;\n+\n+  return o0 + s1;\n+}"}, {"sha": "e22d2dd7abbf43aa0c8707b9422b90612188ad2a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9107d6526b938eba8168025c0d90d06ad3634e69/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=9107d6526b938eba8168025c0d90d06ad3634e69", "patch": "@@ -6240,61 +6240,67 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n       && (!STMT_VINFO_IN_PATTERN_P (use_stmt_info)\n \t  || !STMT_VINFO_PATTERN_DEF_SEQ (use_stmt_info))\n       && vect_stmt_to_vectorize (use_stmt_info) == stmt_info)\n-    STMT_VINFO_FORCE_SINGLE_CYCLE (reduc_info) = single_defuse_cycle = true;\n+    single_defuse_cycle = true;\n \n-  if (single_defuse_cycle\n-      || code == DOT_PROD_EXPR\n-      || code == WIDEN_SUM_EXPR\n-      || code == SAD_EXPR)\n+  bool lane_reduc_code_p\n+    = (code == DOT_PROD_EXPR || code == WIDEN_SUM_EXPR || code == SAD_EXPR);\n+  if (single_defuse_cycle || lane_reduc_code_p)\n     {\n       gcc_assert (code != COND_EXPR);\n \n       /* 4. Supportable by target?  */\n+      bool ok = true;\n \n       /* 4.1. check support for the operation in the loop  */\n-      optab optab = optab_for_tree_code (code, vectype_in, optab_default);\n+      optab optab = optab_for_tree_code (code, vectype_in, optab_vector);\n       if (!optab)\n-        {\n-          if (dump_enabled_p ())\n+\t{\n+\t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t     \"no optab.\\n\");\n-\n-          return false;\n+\t  ok = false;\n         }\n \n       machine_mode vec_mode = TYPE_MODE (vectype_in);\n-      if (optab_handler (optab, vec_mode) == CODE_FOR_nothing)\n+      if (ok && optab_handler (optab, vec_mode) == CODE_FOR_nothing)\n         {\n           if (dump_enabled_p ())\n             dump_printf (MSG_NOTE, \"op not supported by target.\\n\");\n-\n \t  if (maybe_ne (GET_MODE_SIZE (vec_mode), UNITS_PER_WORD)\n \t      || !vect_worthwhile_without_simd_p (loop_vinfo, code))\n-            return false;\n-\n-          if (dump_enabled_p ())\n-\t    dump_printf (MSG_NOTE, \"proceeding using word mode.\\n\");\n+\t    ok = false;\n+\t  else\n+\t    if (dump_enabled_p ())\n+\t      dump_printf (MSG_NOTE, \"proceeding using word mode.\\n\");\n         }\n \n       /* Worthwhile without SIMD support?  */\n-      if (!VECTOR_MODE_P (TYPE_MODE (vectype_in))\n+      if (ok\n+\t  && !VECTOR_MODE_P (TYPE_MODE (vectype_in))\n \t  && !vect_worthwhile_without_simd_p (loop_vinfo, code))\n         {\n           if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t     \"not worthwhile without SIMD support.\\n\");\n-\n-          return false;\n+\t  ok = false;\n         }\n+\n+      /* lane-reducing operations have to go through vect_transform_reduction.\n+         For the other cases try without the single cycle optimization.  */\n+      if (!ok)\n+\t{\n+\t  if (lane_reduc_code_p)\n+\t    return false;\n+\t  else\n+\t    single_defuse_cycle = false;\n+\t}\n     }\n+  STMT_VINFO_FORCE_SINGLE_CYCLE (reduc_info) = single_defuse_cycle;\n \n   /* If the reduction stmt is one of the patterns that have lane\n      reduction embedded we cannot handle the case of ! single_defuse_cycle.  */\n-  if ((ncopies > 1\n-       && ! single_defuse_cycle)\n-      && (code == DOT_PROD_EXPR\n-\t  || code == WIDEN_SUM_EXPR\n-\t  || code == SAD_EXPR))\n+  if ((ncopies > 1 && ! single_defuse_cycle)\n+      && lane_reduc_code_p)\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}]}