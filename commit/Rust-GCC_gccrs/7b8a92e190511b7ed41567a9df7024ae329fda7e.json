{"sha": "7b8a92e190511b7ed41567a9df7024ae329fda7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4YTkyZTE5MDUxMWI3ZWQ0MTU2N2E5ZGY3MDI0YWUzMjlmZGE3ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-16T15:18:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-16T15:18:15Z"}, "message": "tree-data-ref.c (compute_all_dependences): Change the type of dependence_relations to VEC(ddr_p,heap)**.\n\n\t* tree-data-ref.c (compute_all_dependences): Change the type\n\tof dependence_relations to VEC(ddr_p,heap)**.\n\t(compute_data_dependences_for_loop): Change the type of\n\tallrelations to VEC(ddr_p,heap)*.\n\nFrom-SVN: r99778", "tree": {"sha": "fe7962ccce728d396e46e9828d09fff457913a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe7962ccce728d396e46e9828d09fff457913a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b8a92e190511b7ed41567a9df7024ae329fda7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8a92e190511b7ed41567a9df7024ae329fda7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8a92e190511b7ed41567a9df7024ae329fda7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8a92e190511b7ed41567a9df7024ae329fda7e/comments", "author": null, "committer": null, "parents": [{"sha": "a1bbd445e2f512343859ddcd2676aefb61c6ddfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bbd445e2f512343859ddcd2676aefb61c6ddfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1bbd445e2f512343859ddcd2676aefb61c6ddfe"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "5739c60f2b7ba031bac98f81edb08349b65c616a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8a92e190511b7ed41567a9df7024ae329fda7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8a92e190511b7ed41567a9df7024ae329fda7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b8a92e190511b7ed41567a9df7024ae329fda7e", "patch": "@@ -5,6 +5,11 @@\n \t(mem_loc_descriptor, add_const_value_attributes,\n \tdwarf2out_init): Adjust uses of used_rtx_varray.\n \n+\t* tree-data-ref.c (compute_all_dependences): Change the type\n+\tof dependence_relations to VEC(ddr_p,heap)**.\n+\t(compute_data_dependences_for_loop): Change the type of\n+\tallrelations to VEC(ddr_p,heap)*.\n+\n 2005-05-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* Makefile.in (options.c): Tell optc-gen.awk to include config.h,"}, {"sha": "b1d160545bb33cc1251112018a253f8b57a2c00b", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8a92e190511b7ed41567a9df7024ae329fda7e/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8a92e190511b7ed41567a9df7024ae329fda7e/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=7b8a92e190511b7ed41567a9df7024ae329fda7e", "patch": "@@ -2178,6 +2178,11 @@ compute_affine_dependence (struct data_dependence_relation *ddr)\n     fprintf (dump_file, \")\\n\");\n }\n \n+\n+typedef struct data_dependence_relation *ddr_p;\n+DEF_VEC_P(ddr_p);\n+DEF_VEC_ALLOC_P(ddr_p,heap);\n+\n /* Compute a subset of the data dependence relation graph.  Don't\n    compute read-read relations, and avoid the computation of the\n    opposite relation, i.e. when AB has been computed, don't compute BA.\n@@ -2186,7 +2191,7 @@ compute_affine_dependence (struct data_dependence_relation *ddr)\n \n static void \n compute_all_dependences (varray_type datarefs, \n-\t\t\t varray_type *dependence_relations)\n+\t\t\t VEC(ddr_p,heap) **dependence_relations)\n {\n   unsigned int i, j, N;\n \n@@ -2202,7 +2207,7 @@ compute_all_dependences (varray_type datarefs,\n \tb = VARRAY_GENERIC_PTR (datarefs, j);\n \tddr = initialize_data_dependence_relation (a, b);\n \n-\tVARRAY_PUSH_GENERIC_PTR (*dependence_relations, ddr);\n+\tVEC_safe_push (ddr_p, heap, *dependence_relations, ddr);\n \tcompute_affine_dependence (ddr);\n \tcompute_subscript_distance (ddr);\n       }\n@@ -2329,7 +2334,8 @@ compute_data_dependences_for_loop (unsigned nb_loops,\n \t\t\t\t   varray_type *dependence_relations)\n {\n   unsigned int i;\n-  varray_type allrelations;\n+  VEC(ddr_p,heap) *allrelations;\n+  struct data_dependence_relation *ddr;\n \n   /* If one of the data references is not computable, give up without\n      spending time to compute other dependences.  */\n@@ -2346,13 +2352,11 @@ compute_data_dependences_for_loop (unsigned nb_loops,\n       return;\n     }\n \n-  VARRAY_GENERIC_PTR_INIT (allrelations, 1, \"Data dependence relations\");\n+  allrelations = NULL;\n   compute_all_dependences (*datarefs, &allrelations);\n \n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (allrelations); i++)\n+  for (i = 0; VEC_iterate (ddr_p, allrelations, i, ddr); i++)\n     {\n-      struct data_dependence_relation *ddr;\n-      ddr = VARRAY_GENERIC_PTR (allrelations, i);\n       if (build_classic_dist_vector (ddr, nb_loops, loop->depth))\n \t{\n \t  VARRAY_PUSH_GENERIC_PTR (*dependence_relations, ddr);"}]}