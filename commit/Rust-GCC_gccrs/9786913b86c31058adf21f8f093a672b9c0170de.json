{"sha": "9786913b86c31058adf21f8f093a672b9c0170de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc4NjkxM2I4NmMzMTA1OGFkZjIxZjhmMDkzYTY3MmI5YzAxNzBkZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-19T14:49:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-07-19T14:49:01Z"}, "message": "tm.texi.in (MODE_AFTER): Add entity as the first macro argument.\n\n\t* doc/tm.texi.in (MODE_AFTER): Add entity as the first macro argument.\n\t* doc/tm.texi: Regenerate.\n\t* mode-switching.c (optimize_mode_switching): Update MODE_AFTER call.\n\t* config/sh/sh.h (MODE_AFTER): Update.\n\t* config/epiphany/epiphany.h (MODE_AFTER): Update.\n\nFrom-SVN: r189665", "tree": {"sha": "d900abd1cef893b1054fb71a4046f6ef59c641f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d900abd1cef893b1054fb71a4046f6ef59c641f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9786913b86c31058adf21f8f093a672b9c0170de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9786913b86c31058adf21f8f093a672b9c0170de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9786913b86c31058adf21f8f093a672b9c0170de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9786913b86c31058adf21f8f093a672b9c0170de/comments", "author": null, "committer": null, "parents": [{"sha": "29476fe16250a88853c906020e3e0a4798420918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29476fe16250a88853c906020e3e0a4798420918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29476fe16250a88853c906020e3e0a4798420918"}], "stats": {"total": 147, "additions": 77, "deletions": 70}, "files": [{"sha": "9466848b5c685f7dd0a6178b2ed843baa3590fc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 67, "deletions": 62, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9786913b86c31058adf21f8f093a672b9c0170de", "patch": "@@ -1,3 +1,11 @@\n+2012-07-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* doc/tm.texi.in (MODE_AFTER): Add entity as the first macro argument.\n+\t* doc/tm.texi: Regenerate.\n+\t* mode-switching.c (optimize_mode_switching): Update MODE_AFTER call.\n+\t* config/sh/sh.h (MODE_AFTER): Update.\n+\t* config/epiphany/epiphany.h (MODE_AFTER): Update.\n+\n 2012-07-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/54017\n@@ -12,19 +20,17 @@\n \t* config/sh/sh.c (gen_far_branch): Set JUMP_LABEL for return jumps.\n \n 2012-07-19  Richard Guenther  <rguenther@suse.de>\n-\tEric Botcazou  <ebotcazou@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-ccp.c (valid_lattice_transition): Clarify comment\n \tabout transition from invariant to known bits.\n-\t(likely_value): Addresses with UNDEFINED components are\n-\tUNDEFINED.\n+\t(likely_value): Addresses with UNDEFINED components are UNDEFINED.\n \n 2012-07-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53970\n-\t* tree-vect-data-refs.c (not_size_aligned): Avoid sign-compare\n-\twarning.\n- \n+\t* tree-vect-data-refs.c (not_size_aligned): Avoid sign-compare warning.\n+\n 2012-07-19  Tristan Gingold  <gingold@adacore.com>\n \t    Richard Henderson  <rth@redhat.com>\n \n@@ -44,16 +50,16 @@\n \t    Chao-ying Fu  <fu@mips.com>\n \n \t* config/mips/mips.opt (mmcu): New option.\n-\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Define \n+\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Define\n \t_mips_mcu when TARGET_MCU.\n \t(ASM_SPEC): Pass mcu options to the assembler.\n \t* doc/invoke.texi (MIPS Options): Document -mmcu and -mno-mcu.\n \n 2012-07-18  Ralf Cors\u00e9pius  <ralf.corsepius@rtems.org>\n \n-       * config.gcc (v850-*-rtems*): New target.\n-       * config/v850/rtems.h: New.\n-       * config/v850/t-rtems: New.\n+\t* config.gcc (v850-*-rtems*): New target.\n+\t* config/v850/rtems.h: New.\n+\t* config/v850/t-rtems: New.\n \n 2012-07-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n@@ -71,8 +77,7 @@\n 2012-07-18  Jie Zhang  <jzhang918@gmail.com>\n \t    Julian Brown  <julian@codesourcery.com>\n \n-\t* config/arm/arm.c (arm_rtx_costs_1): Adjust cost for\n-\tCONST_VECTOR.\n+\t* config/arm/arm.c (arm_rtx_costs_1): Adjust cost for CONST_VECTOR.\n \t(arm_size_rtx_costs): Likewise.\n \t(neon_valid_immediate): Add a case for double 0.0.\n \n@@ -372,7 +377,7 @@\n \t* doc/tm.texi: Regenerate.\n \n \t* emit-rtl.c (emit_label_before): Do not allow the same label\n-        to be emitted twice.\n+\tto be emitted twice.\n \t(emit_label_after): Likewise.\n \t(emit_label): Likewise.\n \n@@ -426,59 +431,59 @@\n \t* stmt.c: Include dumpfile.h.\n \t(emit_case_decision_tree): Re-enable printing expand details only\n \tif TDF_DETAILS.\n-\t* alias.c, auto-inc-dec.c, bb-reorder.c, caller-save.c, cfg.c, \n-\tcfgcleanup.c, cfgexpand.c, cfgloop.c, cfgloopmanip.c, cgraph.c, \n-\tcgraphclones.c, cgraphunit.c, combine.c, combine-stack-adj.c, \n-\tcoverage.c, cprop.c, cse.c, cselib.c, dbgcnt.c, dce.c, df-core.c, \n-\tdse.c, dwarf2out.c, emit-rtl.c, except.c, expr.c, final.c, \n-\tfunction.c, fwprop.c, gcse.c, gimple-fold.c, \n-\tgimple-pretty-print.c, gimple-ssa-strength-reduction.c, \n-\tgimplify.c, graphite-blocking.c, graphite-clast-to-gimple.c, \n-\tgraphite-dependences.c, graphite-interchange.c, \n-\tgraphite-optimize-isl.c, graphite-poly.c, \n-\tgraphite-sese-to-poly.c, haifa-sched.c, hw-doloop.c, ifcvt.c, \n-\tipa.c, ipa-cp.c, ipa-inline-analysis.c, ipa-inline.c, \n-\tipa-inline-transform.c, ipa-prop.c, ipa-pure-const.c, \n-\tipa-reference.c, ipa-split.c, ipa-utils.c, ira.c, ira-emit.c, \n-\tjump.c, loop-doloop.c, loop-init.c, loop-invariant.c, loop-iv.c, \n-\tloop-unroll.c, loop-unswitch.c, lower-subreg.c, \n-\tlto-section-out.c, lto-streamer-in.c, matrix-reorg.c, mcf.c, \n-\tmode-switching.c, modulo-sched.c, omega.c, omp-low.c, passes.c, \n-\tplugin.c, postreload.c, postreload-gcse.c, predict.c, print-rtl.c, \n-\tprint-tree.c, profile.c, recog.c, ree.c, regcprop.c, reginfo.c, \n-\tregmove.c, regrename.c, reg-stack.c, reload1.c, reorg.c, \n-\tsched-rgn.c, sched-vis.c, sel-sched.c, sel-sched-ir.c, \n-\tstore-motion.c, tracer.c, trans-mem.c, tree-affine.c, \n-\ttree-call-cdce.c, tree-cfgcleanup.c, tree-chrec.c, \n+\t* alias.c, auto-inc-dec.c, bb-reorder.c, caller-save.c, cfg.c,\n+\tcfgcleanup.c, cfgexpand.c, cfgloop.c, cfgloopmanip.c, cgraph.c,\n+\tcgraphclones.c, cgraphunit.c, combine.c, combine-stack-adj.c,\n+\tcoverage.c, cprop.c, cse.c, cselib.c, dbgcnt.c, dce.c, df-core.c,\n+\tdse.c, dwarf2out.c, emit-rtl.c, except.c, expr.c, final.c,\n+\tfunction.c, fwprop.c, gcse.c, gimple-fold.c,\n+\tgimple-pretty-print.c, gimple-ssa-strength-reduction.c,\n+\tgimplify.c, graphite-blocking.c, graphite-clast-to-gimple.c,\n+\tgraphite-dependences.c, graphite-interchange.c,\n+\tgraphite-optimize-isl.c, graphite-poly.c,\n+\tgraphite-sese-to-poly.c, haifa-sched.c, hw-doloop.c, ifcvt.c,\n+\tipa.c, ipa-cp.c, ipa-inline-analysis.c, ipa-inline.c,\n+\tipa-inline-transform.c, ipa-prop.c, ipa-pure-const.c,\n+\tipa-reference.c, ipa-split.c, ipa-utils.c, ira.c, ira-emit.c,\n+\tjump.c, loop-doloop.c, loop-init.c, loop-invariant.c, loop-iv.c,\n+\tloop-unroll.c, loop-unswitch.c, lower-subreg.c,\n+\tlto-section-out.c, lto-streamer-in.c, matrix-reorg.c, mcf.c,\n+\tmode-switching.c, modulo-sched.c, omega.c, omp-low.c, passes.c,\n+\tplugin.c, postreload.c, postreload-gcse.c, predict.c, print-rtl.c,\n+\tprint-tree.c, profile.c, recog.c, ree.c, regcprop.c, reginfo.c,\n+\tregmove.c, regrename.c, reg-stack.c, reload1.c, reorg.c,\n+\tsched-rgn.c, sched-vis.c, sel-sched.c, sel-sched-ir.c,\n+\tstore-motion.c, tracer.c, trans-mem.c, tree-affine.c,\n+\ttree-call-cdce.c, tree-cfgcleanup.c, tree-chrec.c,\n \ttree-data-ref.c, tree-diagnostic.c, tree-dump.c,\n-\ttree-eh.c, tree-flow-inline.h, tree-if-conv.c, tree-into-ssa.c, \n-\ttree-mudflap.c, tree-nrv.c, tree-object-size.c, \n-\ttree-optimize.c, tree-outof-ssa.c, tree-predcom.c, \n-\ttree-pretty-print.c, tree-profile.c, tree-scalar-evolution.c, \n-\ttree-sra.c, tree-ssa-address.c, tree-ssa-alias.c, tree-ssa.c, \n-\ttree-ssa-ccp.c, tree-ssa-coalesce.c, tree-ssa-copy.c, \n-\ttree-ssa-copyrename.c,, tree-ssa-dce.c, tree-ssa-dom.c, \n-\ttree-ssa-dse.c, tree-ssa-forwprop.c, tree-ssa-ifcombine.c, \n-\ttree-ssa-loop.c, tree-ssa-loop-ch.c, tree-ssa-loop-im.c, \n-\ttree-ssa-loop-ivcanon.c, tree-ssa-loop-ivopts.c, \n-\ttree-ssa-loop-manip.c, tree-ssa-loop-niter.c, \n-\ttree-ssa-loop-prefetch.c, tree-ssa-loop-unswitch.c, \n-\ttree-ssa-math-opts.c, tree-ssa-operands.c, tree-ssa-phiopt.c, \n-\ttree-ssa-phiprop.c, tree-ssa-pre.c, tree-ssa-propagate.c, \n-\ttree-ssa-reassoc.c, tree-ssa-sccvn.c, tree-ssa-sink.c, \n-\ttree-ssa-structalias.c, tree-ssa-tail-merge.c, tree-ssa-ter.c, \n-\ttree-ssa-threadedge.c, tree-ssa-threadupdate.c, \n-\ttree-ssa-uncprop.c, tree-ssa-uninit.c, \n-\ttree-switch-conversion.c, tree-tailcall.c, \n-\ttree-vect-data-refs.c, tree-vect-loop.c, \n-\ttree-vect-loop-manip.c, tree-vectorizer.c, \n-\ttree-vect-patterns.c, tree-vect-slp.c, tree-vect-stmts.c, \n+\ttree-eh.c, tree-flow-inline.h, tree-if-conv.c, tree-into-ssa.c,\n+\ttree-mudflap.c, tree-nrv.c, tree-object-size.c,\n+\ttree-optimize.c, tree-outof-ssa.c, tree-predcom.c,\n+\ttree-pretty-print.c, tree-profile.c, tree-scalar-evolution.c,\n+\ttree-sra.c, tree-ssa-address.c, tree-ssa-alias.c, tree-ssa.c,\n+\ttree-ssa-ccp.c, tree-ssa-coalesce.c, tree-ssa-copy.c,\n+\ttree-ssa-copyrename.c,, tree-ssa-dce.c, tree-ssa-dom.c,\n+\ttree-ssa-dse.c, tree-ssa-forwprop.c, tree-ssa-ifcombine.c,\n+\ttree-ssa-loop.c, tree-ssa-loop-ch.c, tree-ssa-loop-im.c,\n+\ttree-ssa-loop-ivcanon.c, tree-ssa-loop-ivopts.c,\n+\ttree-ssa-loop-manip.c, tree-ssa-loop-niter.c,\n+\ttree-ssa-loop-prefetch.c, tree-ssa-loop-unswitch.c,\n+\ttree-ssa-math-opts.c, tree-ssa-operands.c, tree-ssa-phiopt.c,\n+\ttree-ssa-phiprop.c, tree-ssa-pre.c, tree-ssa-propagate.c,\n+\ttree-ssa-reassoc.c, tree-ssa-sccvn.c, tree-ssa-sink.c,\n+\ttree-ssa-structalias.c, tree-ssa-tail-merge.c, tree-ssa-ter.c,\n+\ttree-ssa-threadedge.c, tree-ssa-threadupdate.c,\n+\ttree-ssa-uncprop.c, tree-ssa-uninit.c,\n+\ttree-switch-conversion.c, tree-tailcall.c,\n+\ttree-vect-data-refs.c, tree-vect-loop.c,\n+\ttree-vect-loop-manip.c, tree-vectorizer.c,\n+\ttree-vect-patterns.c, tree-vect-slp.c, tree-vect-stmts.c,\n \ttree-vrp.c, value-prof.c, var-tracking.c, web.c: Include tree-pass.h\n \tonly if needed.  If tree-pass.h is included, do not include timevar.h\n \tand dumpfile.h.  If tree-pass.h is not included but dump_file, or\n \tdump_flags, or the TDF_* flags are used, include dumpfile.h.\n-\tIf gimple-pretty-print.h is included, don't include tree-pretty-print.h.\n-\tRemove assorted unnecessary includes.\n+\tIf gimple-pretty-print.h is included, don't include\n+\ttree-pretty-print.h.  Remove assorted unnecessary includes.\n \n \t* config/mn10300/mn10300.c, config/c6x/c6x.c, config/ia64/ia64.c,\n \tconfig/arm/arm.c, config/bfin/bfin.c, config/frv/frv.c,\n@@ -622,7 +627,7 @@\n \treflect the change to include %2 in expansion.  All callers changed.\n \t(qm3): New mode_attr.\n \t(\"atomic_fetch_<atomic_op_name><mode>\"): Use <atomic_op_op_pred>\n-\tas predicate for operand 2. \n+\tas predicate for operand 2.\n \t(\"cris_atomic_fetch_<atomic_op_name><mode>_1\"): Update FIXME.  Use\n \t\"<atomic_op_op_pred>\" \"<atomic_op_op_cnstr>\" for predicate and\n \tconstraint for operand 2."}, {"sha": "b1b5e8b956b4c9daf0d38fed27be28bc53656e18", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=9786913b86c31058adf21f8f093a672b9c0170de", "patch": "@@ -888,8 +888,8 @@ enum epiphany_function_type\n \n #define MODE_ENTRY(ENTITY) (epiphany_mode_entry_exit ((ENTITY), false))\n #define MODE_EXIT(ENTITY) (epiphany_mode_entry_exit ((ENTITY), true))\n-#define MODE_AFTER(LAST_MODE, INSN) \\\n-  (epiphany_mode_after (e, (LAST_MODE), (INSN)))\n+#define MODE_AFTER(ENTITY, LAST_MODE, INSN) \\\n+  (epiphany_mode_after ((ENTITY), (LAST_MODE), (INSN)))\n \n #define TARGET_INSERT_MODE_SWITCH_USE epiphany_insert_mode_switch_use\n "}, {"sha": "aa36497fba1df9b792384209cd535e0f1c44af2f", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9786913b86c31058adf21f8f093a672b9c0170de", "patch": "@@ -2347,7 +2347,7 @@ extern int current_function_interrupt;\n    ? get_attr_fp_mode (INSN)\t\t\t\t\t\t\\\n    : FP_MODE_NONE)\n \n-#define MODE_AFTER(MODE, INSN)                  \\\n+#define MODE_AFTER(ENTITY, MODE, INSN)\t\t\\\n      (TARGET_HITACHI\t\t\t\t\\\n       && recog_memoized (INSN) >= 0\t\t\\\n       && get_attr_fp_set (INSN) != FP_SET_NONE  \\"}, {"sha": "9f6b5dd0ff13d00139fea9ecbaac593ebedb02a0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9786913b86c31058adf21f8f093a672b9c0170de", "patch": "@@ -9708,8 +9708,9 @@ return an integer value not larger than the corresponding element in\n be switched into prior to the execution of @var{insn}.\n @end defmac\n \n-@defmac MODE_AFTER (@var{mode}, @var{insn})\n-If this macro is defined, it is evaluated for every @var{insn} during\n+@defmac MODE_AFTER (@var{entity}, @var{mode}, @var{insn})\n+@var{entity} is an integer specifying a mode-switched entity.  If\n+this macro is defined, it is evaluated for every @var{insn} during\n mode switching.  It determines the mode that an insn results in (if\n different from the incoming mode).\n @end defmac"}, {"sha": "df597c2a2072973f56c697246ef389998597c29a", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=9786913b86c31058adf21f8f093a672b9c0170de", "patch": "@@ -9587,8 +9587,9 @@ return an integer value not larger than the corresponding element in\n be switched into prior to the execution of @var{insn}.\n @end defmac\n \n-@defmac MODE_AFTER (@var{mode}, @var{insn})\n-If this macro is defined, it is evaluated for every @var{insn} during\n+@defmac MODE_AFTER (@var{entity}, @var{mode}, @var{insn})\n+@var{entity} is an integer specifying a mode-switched entity.  If\n+this macro is defined, it is evaluated for every @var{insn} during\n mode switching.  It determines the mode that an insn results in (if\n different from the incoming mode).\n @end defmac"}, {"sha": "1984a694c8987cd4843b50991cbc8124a3f23899", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9786913b86c31058adf21f8f093a672b9c0170de/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=9786913b86c31058adf21f8f093a672b9c0170de", "patch": "@@ -533,7 +533,7 @@ optimize_mode_switching (void)\n \t\t      RESET_BIT (transp[bb->index], j);\n \t\t    }\n #ifdef MODE_AFTER\n-\t\t  last_mode = MODE_AFTER (last_mode, insn);\n+\t\t  last_mode = MODE_AFTER (e, last_mode, insn);\n #endif\n \t\t  /* Update LIVE_NOW.  */\n \t\t  for (link = REG_NOTES (insn); link; link = XEXP (link, 1))"}]}