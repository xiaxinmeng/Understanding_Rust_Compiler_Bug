{"sha": "d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ1NzNmZmUxZWQ5ZDE0YzFiZTNlY2Q0ZjJmMThmMThlYTM3NDY2MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-29T14:42:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-29T14:42:03Z"}, "message": "match.pd: Implement a first set of conversion patterns.\n\n2014-10-29  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Implement a first set of conversion patterns.\n\t* fold-const.c (fold_unary_loc): Remove them here.\n\t* tree-ssa-forwprop.c (simplify_vce): Remove.\n\t(pass_forwprop::execute): Do not call simplify_vce.\n\nFrom-SVN: r216839", "tree": {"sha": "885ad5c969671552fbdfb8b8988a7b208226e980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/885ad5c969671552fbdfb8b8988a7b208226e980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc1b3a8840c2ab808b1085399a7b76e0c9f4103a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1b3a8840c2ab808b1085399a7b76e0c9f4103a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc1b3a8840c2ab808b1085399a7b76e0c9f4103a"}], "stats": {"total": 150, "additions": 49, "deletions": 101}, "files": [{"sha": "e391126285e6f81d75ad5e30c4f1d44fc9e6d786", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "patch": "@@ -1,3 +1,10 @@\n+2014-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Implement a first set of conversion patterns.\n+\t* fold-const.c (fold_unary_loc): Remove them here.\n+\t* tree-ssa-forwprop.c (simplify_vce): Remove.\n+\t(pass_forwprop::execute): Do not call simplify_vce.\n+\n 2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* addresses.h, alias.c, asan.c, auto-inc-dec.c, bt-load.c, builtins.c,"}, {"sha": "9b9754db7bcafa0a0cf32133ea1f9767995d8d88", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "patch": "@@ -7664,14 +7664,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \n   switch (code)\n     {\n-    case PAREN_EXPR:\n-      /* Re-association barriers around constants and other re-association\n-\t barriers can be removed.  */\n-      if (CONSTANT_CLASS_P (op0)\n-\t  || TREE_CODE (op0) == PAREN_EXPR)\n-\treturn fold_convert_loc (loc, type, op0);\n-      return NULL_TREE;\n-\n     case NON_LVALUE_EXPR:\n       if (!maybe_lvalue_p (op0))\n \treturn fold_convert_loc (loc, type, op0);\n@@ -7680,9 +7672,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n     CASE_CONVERT:\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n-      if (TREE_TYPE (op0) == type)\n-\treturn op0;\n-\n       if (COMPARISON_CLASS_P (op0))\n \t{\n \t  /* If we have (type) (a CMP b) and type is an integral type, return\n@@ -7953,35 +7942,10 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n       return tem ? tem : NULL_TREE;\n \n     case VIEW_CONVERT_EXPR:\n-      if (TREE_TYPE (op0) == type)\n-\treturn op0;\n-      if (TREE_CODE (op0) == VIEW_CONVERT_EXPR)\n-\treturn fold_build1_loc (loc, VIEW_CONVERT_EXPR,\n-\t\t\t    type, TREE_OPERAND (op0, 0));\n       if (TREE_CODE (op0) == MEM_REF)\n \treturn fold_build2_loc (loc, MEM_REF, type,\n \t\t\t\tTREE_OPERAND (op0, 0), TREE_OPERAND (op0, 1));\n \n-      /* For integral conversions with the same precision or pointer\n-\t conversions use a NOP_EXPR instead.  */\n-      if ((INTEGRAL_TYPE_P (type)\n-\t   || POINTER_TYPE_P (type))\n-\t  && (INTEGRAL_TYPE_P (TREE_TYPE (op0))\n-\t      || POINTER_TYPE_P (TREE_TYPE (op0)))\n-\t  && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (op0)))\n-\treturn fold_convert_loc (loc, type, op0);\n-\n-      /* Strip inner integral conversions that do not change the precision.  */\n-      if (CONVERT_EXPR_P (op0)\n-\t  && (INTEGRAL_TYPE_P (TREE_TYPE (op0))\n-\t      || POINTER_TYPE_P (TREE_TYPE (op0)))\n-\t  && (INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (op0, 0)))\n-\t      || POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (op0, 0))))\n-\t  && (TYPE_PRECISION (TREE_TYPE (op0))\n-\t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))))\n-\treturn fold_build1_loc (loc, VIEW_CONVERT_EXPR,\n-\t\t\t    type, TREE_OPERAND (op0, 0));\n-\n       return fold_view_convert_expr (type, op0);\n \n     case NEGATE_EXPR:"}, {"sha": "e9571d158a52801ce155cd188c96feaae9f18a99", "filename": "gcc/match.pd", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "patch": "@@ -88,3 +88,45 @@ along with GCC; see the file COPYING3.  If not see\n   (bit_xor @0 @0)\n   { build_zero_cst (type); })\n \n+\n+/* Simplifications of conversions.  */\n+\n+/* Basic strip-useless-type-conversions / strip_nops.  */\n+(for cvt (convert view_convert)\n+ (simplify\n+  (cvt @0)\n+  (if ((GIMPLE && useless_type_conversion_p (type, TREE_TYPE (@0)))\n+       || (GENERIC && type == TREE_TYPE (@0)))\n+   @0)))\n+\n+/* Contract view-conversions.  */\n+(simplify\n+  (view_convert (view_convert @0))\n+  (view_convert @0))\n+\n+/* For integral conversions with the same precision or pointer\n+   conversions use a NOP_EXPR instead.  */\n+(simplify\n+  (view_convert @0)\n+  (if ((INTEGRAL_TYPE_P (type) || POINTER_TYPE_P (type))\n+       && (INTEGRAL_TYPE_P (TREE_TYPE (@0)) || POINTER_TYPE_P (TREE_TYPE (@0)))\n+       && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (@0)))\n+   (convert @0)))\n+\n+/* Strip inner integral conversions that do not change precision or size.  */\n+(simplify\n+  (view_convert (convert@0 @1))\n+  (if ((INTEGRAL_TYPE_P (TREE_TYPE (@0)) || POINTER_TYPE_P (TREE_TYPE (@0)))\n+       && (INTEGRAL_TYPE_P (TREE_TYPE (@1)) || POINTER_TYPE_P (TREE_TYPE (@1)))\n+       && (TYPE_PRECISION (TREE_TYPE (@0)) == TYPE_PRECISION (TREE_TYPE (@1)))\n+       && (TYPE_SIZE (TREE_TYPE (@0)) == TYPE_SIZE (TREE_TYPE (@1))))\n+   (view_convert @1)))\n+\n+/* Re-association barriers around constants and other re-association\n+   barriers can be removed.  */\n+(simplify\n+ (paren CONSTANT_CLASS_P@0)\n+ @0)\n+(simplify\n+ (paren (paren@1 @0))\n+ @1)"}, {"sha": "a5283a2b34c30a8200a0dca0b83cae9bee22b2f4", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=d4573ffe1ed9d14c1be3ecd4f2f18f18ea374660", "patch": "@@ -3174,69 +3174,6 @@ combine_conversions (gimple_stmt_iterator *gsi)\n   return 0;\n }\n \n-/* Combine VIEW_CONVERT_EXPRs with their defining statement.  */\n-\n-static bool\n-simplify_vce (gimple_stmt_iterator *gsi)\n-{\n-  gimple stmt = gsi_stmt (*gsi);\n-  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n-\n-  /* Drop useless VIEW_CONVERT_EXPRs.  */\n-  tree op = TREE_OPERAND (gimple_assign_rhs1 (stmt), 0);\n-  if (useless_type_conversion_p (type, TREE_TYPE (op)))\n-    {\n-      gimple_assign_set_rhs1 (stmt, op);\n-      update_stmt (stmt);\n-      return true;\n-    }\n-\n-  if (TREE_CODE (op) != SSA_NAME)\n-    return false;\n-\n-  gimple def_stmt = SSA_NAME_DEF_STMT (op);\n-  if (!is_gimple_assign (def_stmt))\n-    return false;\n-\n-  tree def_op = gimple_assign_rhs1 (def_stmt);\n-  switch (gimple_assign_rhs_code (def_stmt))\n-    {\n-    CASE_CONVERT:\n-      /* Strip integral conversions that do not change the precision.  */\n-      if ((INTEGRAL_TYPE_P (TREE_TYPE (op))\n-\t   || POINTER_TYPE_P (TREE_TYPE (op)))\n-\t  && (INTEGRAL_TYPE_P (TREE_TYPE (def_op))\n-\t      || POINTER_TYPE_P (TREE_TYPE (def_op)))\n-\t  && (TYPE_PRECISION (TREE_TYPE (op))\n-\t      == TYPE_PRECISION (TREE_TYPE (def_op))))\n-\t{\n-\t  TREE_OPERAND (gimple_assign_rhs1 (stmt), 0) = def_op;\n-\t  update_stmt (stmt);\n-\t  return true;\n-\t}\n-      break;\n-\n-    case VIEW_CONVERT_EXPR:\n-      /* Series of VIEW_CONVERT_EXPRs on register operands can\n-\t be contracted.  */\n-      if (TREE_CODE (TREE_OPERAND (def_op, 0)) == SSA_NAME)\n-\t{\n-\t  if (useless_type_conversion_p (type,\n-\t\t\t\t\t TREE_TYPE (TREE_OPERAND (def_op, 0))))\n-\t    gimple_assign_set_rhs1 (stmt, TREE_OPERAND (def_op, 0));\n-\t  else\n-\t    TREE_OPERAND (gimple_assign_rhs1 (stmt), 0)\n-\t\t= TREE_OPERAND (def_op, 0);\n-\t  update_stmt (stmt);\n-\t  return true;\n-\t}\n-\n-    default:;\n-    }\n-\n-  return false;\n-}\n-\n /* Combine an element access with a shuffle.  Returns true if there were\n    any changes made, else it returns false.  */\n  \n@@ -3912,8 +3849,6 @@ pass_forwprop::execute (function *fun)\n \t\t      \n \t\t    changed = did_something != 0;\n \t\t  }\n-\t\telse if (code == VIEW_CONVERT_EXPR)\n-\t\t  changed = simplify_vce (&gsi);\n \t\telse if (code == VEC_PERM_EXPR)\n \t\t  {\n \t\t    int did_something = simplify_permutation (&gsi);"}]}