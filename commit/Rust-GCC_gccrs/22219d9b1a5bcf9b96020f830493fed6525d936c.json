{"sha": "22219d9b1a5bcf9b96020f830493fed6525d936c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyMTlkOWIxYTViY2Y5Yjk2MDIwZjgzMDQ5M2ZlZDY1MjVkOTM2Yw==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@imgtec.com", "date": "2015-09-01T22:41:08Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2015-09-01T22:41:08Z"}, "message": "MIPS compact branch support\n\ngcc/\n\t* config/mips/mips-opts.h (mips_cb_setting): New enum.\n\t* config/mips/mips-protos.h: Add definitions for\n\tmips_output_jump and mips_output_equal_conditional_branch\n\t* gcc/config/mips/mips.c (MIPS_JR): Change to support the\n\tJIC instruction.\n\t(mips_emit_compare): Add support for the MIPS R6 conditional\n\tcompact branches.\n\t(mips_process_sync_loop): Likewise.\n\t(mips_output_order_conditional_branch): Likewise.\n\t(mips16_build_call_stub): Change MIPS_CALL to\n\tmips_output_jump.\n\t(mips_print_operand_punctuation): Update 's' case to only\n\tapply to micromips r2.\n\t(mips_adjust_insn_length): Add support for forbidden slot\n\thazards.\n\t(mips_avoid_hazard): Likewise.\n\t(mips_reorg_process_insns): Likewise.\n\t(mips_output_jump): New function.\n\t(mips_output_equal_conditional_branch): Likewise.\n\t(mips_output_conditional_branch): Use jrc/bc if compact\n\tbranch support is enabled.  Ensure the forbidden slots\n\tbetween the two branch instructions is filled with a nop.\n\t(mips_option_override): Add support to process the compact\n\tbranch option and set the correct defaults.  Prevent\n\tnon-explict relocs being using for MIPS R6.\n\t(mips_trampoline_init): Add compact branch support.\n\t(mips_mult_zero_zero_cost): Allow zero initialisation of\n\taccumulators with TARGET_DSP.\n\t* gcc/config/mips/mips.h (TARGET_CB_NEVER): New define.\n\t(TARGET_CB_MAYBE): New define.\n\t(TARGET_CB_ALWAYS): New define.\n\t(ISA_HAS_DELAY_SLOTS): New define.\n\t(ISA_HAS_COMPACT_BRANCHES): New define.\n\t(ISA_HAS_JRC): New define.\n\t(MIPS_BRANCH_C): New define.\n\t(MIPS_CALL): Removed.\n\t(MICROMIPS_J): Removed.\n\t* config/mips/mips.md (compact_form): New attr.\n\t(hazard): Add support for forbidden slots.\n\t(define_delay): Add support for compact branches.\n\t(*branch_order<mode>): Likewise.\n\t(*branch_order<mode>_inverted): Likewise.\n\t(*branch_equality<mode>): Likewise.\n\t(*branch_equality<mode>_inverted): Likewise.\n\t(*jump_absolute): Likewise.\n\t(*jump_pic): Likewise.\n\t(indirect_jump): Use mips_output_jump to produce assembly output.\n\t(tablejump_<mode>\"): Likewise.\n\t(*<optab>\"): Likewise.\n\t(<optab>_internal): Likewise.\n\t(sibcall_internal): Likewise.\n\t(sibcall_value_internal): Likewise.\n\t(sibcall_value_multiple_internal): Likewise.\n\t(call_internal): Likewise.\n\t(call_split): Likewise.\n\t(call_internal_direct): Likewise.\n\t(call_direct_split): Likewise.\n\t(call_value_internal): Likewise.\n\t(call_value_split): Likewise.\n\t(call_value_internal_direct): Likewise.\n\t(call_value_direct_split): Likewise.\n\t(call_value_multiple_internal): Likewise.\n\t(call_value_multiple_split): Likewise.\n\t(mips_get_fcsr_mips16_<mode>): Likewise.\n\t(mips_set_fcsr_mips16_<mode>): Likewise.\n\t(tls_get_tp_mips16_<mode>): Likewise.\n\t* config/mips/mips.opt: Add -mcompact-branches option.\n\t* config/mips/predicates.md (order_operator): Ensure the\n\tconditional compact branches are only used if the ISA them.\n\t* doc/invoke.texi: Document -mcompact-branches option.\n\ngcc/testsuite/\n\t* gcc.target/mips/mips.exp (mips-dg-options): Handle the\n\tdependencies between ISA level and compact-branches.\n\t* gcc.target/mips/branch-10.c: Update expected output to allow\n\tcompact forms of b/bal.\n\t* gcc.target/mips/branch-11.c: Likewise.\n\t* gcc.target/mips/branch-12.c: Likewise.\n\t* gcc.target/mips/branch-13.c: Likewise.\n\t* gcc.target/mips/branch-3.c: Likewise.\n\t* gcc.target/mips/branch-4.c: Likewise.\n\t* gcc.target/mips/branch-5.c: Likewise.\n\t* gcc.target/mips/branch-6.c: Likewise.\n\t* gcc.target/mips/branch-7.c: Likewise.\n\t* gcc.target/mips/branch-8.c: Likewise.\n\t* gcc.target/mips/branch-9.c: Likewise.\n\t* gcc.target/mips/branch-cost-1.c: Likewise.\n\t* gcc.target/mips/call-1.c: Likewise.\n\t* gcc.target/mips/call-2.c: Likewise.\n\t* gcc.target/mips/call-3.c: Likewise.\n\t* gcc.target/mips/call-4.c: Likewise.\n\t* gcc.target/mips/call-5.c: Likewise.\n\t* gcc.target/mips/call-6.c: Likewise.\n\t* gcc.target/mips/lazy-binding-1.c: Likewise.\n\t* gcc.target/mips/near-far-1.c: Likewise.\n\t* gcc.target/mips/near-far-2.c: Likewise.\n\t* gcc.target/mips/near-far-3.c: Likewise.\n\t* gcc.target/mips/near-far-4.c: Likewise.\n\t* gcc.target/mips/umips-branch-3.c: Ensure the test is\n\trun with compact branches allowed.\n\t* gcc.target/mips/compact-branches-1.c: New file.\n\t* gcc.target/mips/compact-branches-2.c: Likewise.\n\t* gcc.target/mips/compact-branches-3.c: Likewise.\n\t* gcc.target/mips/compact-branches-4.c: Likewise.\n\t* gcc.target/mips/compact-branches-5.c: Likewise.\n\t* gcc.target/mips/compact-branches-6.c: Likewise.\n\t* gcc.target/mips/compact-branches-7.c: Likewise.\n\nCo-Authored-By: Andrew Bennett <andrew.bennett@imgtec.com>\n\nFrom-SVN: r227385", "tree": {"sha": "ecac4cd742ebbbe8111646b7cdb719b74aedb20c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecac4cd742ebbbe8111646b7cdb719b74aedb20c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22219d9b1a5bcf9b96020f830493fed6525d936c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22219d9b1a5bcf9b96020f830493fed6525d936c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22219d9b1a5bcf9b96020f830493fed6525d936c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22219d9b1a5bcf9b96020f830493fed6525d936c/comments", "author": {"login": "mfortune", "id": 10220247, "node_id": "MDQ6VXNlcjEwMjIwMjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/10220247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfortune", "html_url": "https://github.com/mfortune", "followers_url": "https://api.github.com/users/mfortune/followers", "following_url": "https://api.github.com/users/mfortune/following{/other_user}", "gists_url": "https://api.github.com/users/mfortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfortune/subscriptions", "organizations_url": "https://api.github.com/users/mfortune/orgs", "repos_url": "https://api.github.com/users/mfortune/repos", "events_url": "https://api.github.com/users/mfortune/events{/privacy}", "received_events_url": "https://api.github.com/users/mfortune/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2503fd9e072207822ff7e3d1bd8df97bdfd32666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2503fd9e072207822ff7e3d1bd8df97bdfd32666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2503fd9e072207822ff7e3d1bd8df97bdfd32666"}], "stats": {"total": 1021, "additions": 801, "deletions": 220}, "files": [{"sha": "b9e7bac3266409142f9c3b096ee09894de0006ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,3 +1,77 @@\n+2015-09-01  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\t    Andrew Bennett  <andrew.bennett@imgtec.com>\n+\n+\t* config/mips/mips-opts.h (mips_cb_setting): New enum.\n+\t* config/mips/mips-protos.h: Add definitions for\n+\tmips_output_jump and mips_output_equal_conditional_branch\n+\t* gcc/config/mips/mips.c (MIPS_JR): Change to support the\n+\tJIC instruction.\n+\t(mips_emit_compare): Add support for the MIPS R6 conditional\n+\tcompact branches.\n+\t(mips_process_sync_loop): Likewise.\n+\t(mips_output_order_conditional_branch): Likewise.\n+\t(mips16_build_call_stub): Change MIPS_CALL to\n+\tmips_output_jump.\n+\t(mips_print_operand_punctuation): Update 's' case to only\n+\tapply to micromips r2.\n+\t(mips_adjust_insn_length): Add support for forbidden slot\n+\thazards.\n+\t(mips_avoid_hazard): Likewise.\n+\t(mips_reorg_process_insns): Likewise.\n+\t(mips_output_jump): New function.\n+\t(mips_output_equal_conditional_branch): Likewise.\n+\t(mips_output_conditional_branch): Use jrc/bc if compact\n+\tbranch support is enabled.  Ensure the forbidden slots\n+\tbetween the two branch instructions is filled with a nop.\n+\t(mips_option_override): Add support to process the compact\n+\tbranch option and set the correct defaults.  Prevent\n+\tnon-explict relocs being using for MIPS R6.\n+\t(mips_trampoline_init): Add compact branch support.\n+\t(mips_mult_zero_zero_cost): Allow zero initialisation of\n+\taccumulators with TARGET_DSP.\n+\t* gcc/config/mips/mips.h (TARGET_CB_NEVER): New define.\n+\t(TARGET_CB_MAYBE): New define.\n+\t(TARGET_CB_ALWAYS): New define.\n+\t(ISA_HAS_DELAY_SLOTS): New define.\n+\t(ISA_HAS_COMPACT_BRANCHES): New define.\n+\t(ISA_HAS_JRC): New define.\n+\t(MIPS_BRANCH_C): New define.\n+\t(MIPS_CALL): Removed.\n+\t(MICROMIPS_J): Removed.\n+\t* config/mips/mips.md (compact_form): New attr.\n+\t(hazard): Add support for forbidden slots.\n+\t(define_delay): Add support for compact branches.\n+\t(*branch_order<mode>): Likewise.\n+\t(*branch_order<mode>_inverted): Likewise.\n+\t(*branch_equality<mode>): Likewise.\n+\t(*branch_equality<mode>_inverted): Likewise.\n+\t(*jump_absolute): Likewise.\n+\t(*jump_pic): Likewise.\n+\t(indirect_jump): Use mips_output_jump to produce assembly output.\n+\t(tablejump_<mode>\"): Likewise.\n+\t(*<optab>\"): Likewise.\n+\t(<optab>_internal): Likewise.\n+\t(sibcall_internal): Likewise.\n+\t(sibcall_value_internal): Likewise.\n+\t(sibcall_value_multiple_internal): Likewise.\n+\t(call_internal): Likewise.\n+\t(call_split): Likewise.\n+\t(call_internal_direct): Likewise.\n+\t(call_direct_split): Likewise.\n+\t(call_value_internal): Likewise.\n+\t(call_value_split): Likewise.\n+\t(call_value_internal_direct): Likewise.\n+\t(call_value_direct_split): Likewise.\n+\t(call_value_multiple_internal): Likewise.\n+\t(call_value_multiple_split): Likewise.\n+\t(mips_get_fcsr_mips16_<mode>): Likewise.\n+\t(mips_set_fcsr_mips16_<mode>): Likewise.\n+\t(tls_get_tp_mips16_<mode>): Likewise.\n+\t* config/mips/mips.opt: Add -mcompact-branches option.\n+\t* config/mips/predicates.md (order_operator): Ensure the\n+\tconditional compact branches are only used if the ISA them.\n+\t* doc/invoke.texi: Document -mcompact-branches option.\n+\n 2015-09-01  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/61578"}, {"sha": "3c2c6590e3dc3c6d00b7cb202de609d310daa439", "filename": "gcc/config/mips/mips-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-opts.h?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -47,4 +47,10 @@ enum mips_r10k_cache_barrier_setting {\n #define MIPS_ARCH_OPTION_FROM_ABI -1\n #define MIPS_ARCH_OPTION_NATIVE -2\n \n+/* Enumerates the setting of the -mcompact-branches= option.  */\n+enum mips_cb_setting {\n+  MIPS_CB_NEVER,\n+  MIPS_CB_OPTIMAL,\n+  MIPS_CB_ALWAYS\n+};\n #endif"}, {"sha": "8a9ae0147ed2aee8dab5a90db6d11d9b19f126dd", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -298,6 +298,9 @@ extern const char *mips_output_conditional_branch (rtx_insn *, rtx *,\n \t\t\t\t\t\t   const char *, const char *);\n extern const char *mips_output_order_conditional_branch (rtx_insn *, rtx *,\n \t\t\t\t\t\t\t bool);\n+extern const char *mips_output_equal_conditional_branch (rtx_insn *, rtx *,\n+\t\t\t\t\t\t\t bool);\n+extern const char *mips_output_jump (rtx *, int, int, bool);\n extern const char *mips_output_sync (void);\n extern const char *mips_output_sync_loop (rtx_insn *, rtx *);\n extern unsigned int mips_sync_loop_insns (rtx_insn *, rtx *);"}, {"sha": "0e0ecf232d9b57724a801720f8cd6b44530abdd2", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 339, "deletions": 38, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -176,7 +176,8 @@ along with GCC; see the file COPYING3.  If not see\n /* Return the opcode to jump to register DEST.  When the JR opcode is not\n    available use JALR $0, DEST.  */\n #define MIPS_JR(DEST) \\\n-  (((DEST) << 21) | (ISA_HAS_JR ? 0x8 : 0x9))\n+  (TARGET_CB_ALWAYS ? ((0x1b << 27) | ((DEST) << 16)) \\\n+\t\t    : (((DEST) << 21) | (ISA_HAS_JR ? 0x8 : 0x9)))\n \n /* Return the opcode for:\n \n@@ -5181,7 +5182,8 @@ mips_allocate_fcc (machine_mode mode)\n    conditions are:\n \n       - EQ or NE between two registers.\n-      - any comparison between a register and zero.  */\n+      - any comparison between a register and zero.\n+      - if compact branches are available then any condition is valid.  */\n \n static void\n mips_emit_compare (enum rtx_code *code, rtx *op0, rtx *op1, bool need_eq_ne_p)\n@@ -5203,6 +5205,44 @@ mips_emit_compare (enum rtx_code *code, rtx *op0, rtx *op1, bool need_eq_ne_p)\n \t  else\n \t    *op1 = force_reg (GET_MODE (cmp_op0), cmp_op1);\n \t}\n+      else if (!need_eq_ne_p && TARGET_CB_MAYBE)\n+\t{\n+\t  bool swap = false;\n+\t  switch (*code)\n+\t    {\n+\t    case LE:\n+\t      swap = true;\n+\t      *code = GE;\n+\t      break;\n+\t    case GT:\n+\t      swap = true;\n+\t      *code = LT;\n+\t      break;\n+\t    case LEU:\n+\t      swap = true;\n+\t      *code = GEU;\n+\t      break;\n+\t    case GTU:\n+\t      swap = true;\n+\t      *code = LTU;\n+\t      break;\n+\t    case GE:\n+\t    case LT:\n+\t    case GEU:\n+\t    case LTU:\n+\t      /* Do nothing.  */\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  *op1 = force_reg (GET_MODE (cmp_op0), cmp_op1);\n+\t  if (swap)\n+\t    {\n+\t      rtx tmp = *op1;\n+\t      *op1 = *op0;\n+\t      *op0 = tmp;\n+\t    }\n+\t}\n       else\n \t{\n \t  /* The comparison needs a separate scc instruction.  Store the\n@@ -7260,7 +7300,7 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n       if (fp_ret_p)\n \t{\n \t  /* Now call the non-MIPS16 function.  */\n-\t  output_asm_insn (MIPS_CALL (\"jal\", &fn, 0, -1), &fn);\n+\t  output_asm_insn (mips_output_jump (&fn, 0, -1, true), &fn);\n \t  fprintf (asm_out_file, \"\\t.cfi_register 31,18\\n\");\n \n \t  /* Move the result from floating-point registers to\n@@ -8378,7 +8418,7 @@ mips_pop_asm_switch (struct mips_asm_switch *asm_switch)\n    '!'  Print \"s\" to use the short version if the delay slot contains a\n \t16-bit instruction.\n \n-   See also mips_init_print_operand_pucnt.  */\n+   See also mips_init_print_operand_punct.  */\n \n static void\n mips_print_operand_punctuation (FILE *file, int ch)\n@@ -8462,16 +8502,18 @@ mips_print_operand_punctuation (FILE *file, int ch)\n \n     case ':':\n       /* When final_sequence is 0, the delay slot will be a nop.  We can\n-\t use the compact version for microMIPS.  */\n+\t use the compact version where available.  The %: formatter will\n+\t only be present if a compact form of the branch is available.  */\n       if (final_sequence == 0)\n \tputc ('c', file);\n       break;\n \n     case '!':\n       /* If the delay slot instruction is short, then use the\n \t compact version.  */\n-      if (final_sequence == 0\n-\t  || get_attr_length (final_sequence->insn (1)) == 2)\n+      if (TARGET_MICROMIPS && !TARGET_INTERLINK_COMPRESSED && mips_isa_rev <= 5\n+\t  && (final_sequence == 0\n+\t      || get_attr_length (final_sequence->insn (1)) == 2))\n \tputc ('s', file);\n       break;\n \n@@ -12969,6 +13011,7 @@ mips_adjust_insn_length (rtx_insn *insn, int length)\n \tbreak;\n \n       case HAZARD_DELAY:\n+      case HAZARD_FORBIDDEN_SLOT:\n \tlength += NOP_INSN_LENGTH;\n \tbreak;\n \n@@ -12980,6 +13023,78 @@ mips_adjust_insn_length (rtx_insn *insn, int length)\n   return length;\n }\n \n+/* Return the asm template for a call.  OPERANDS are the operands, TARGET_OPNO\n+   is the operand number of the target.  SIZE_OPNO is the operand number of\n+   the argument size operand that can optionally hold the call attributes.  If\n+   SIZE_OPNO is not -1 and the call is indirect, use the function symbol from\n+   the call attributes to attach a R_MIPS_JALR relocation to the call.  LINK_P\n+   indicates whether the jump is a call and needs to set the link register.\n+\n+   When generating GOT code without explicit relocation operators, all calls\n+   should use assembly macros.  Otherwise, all indirect calls should use \"jr\"\n+   or \"jalr\"; we will arrange to restore $gp afterwards if necessary.  Finally,\n+   we can only generate direct calls for -mabicalls by temporarily switching\n+   to non-PIC mode.\n+\n+   For microMIPS jal(r), we try to generate jal(r)s when a 16-bit\n+   instruction is in the delay slot of jal(r).\n+\n+   Where compact branches are available, we try to use them if the delay slot\n+   has a NOP (or equivalently delay slots were not enabled for the instruction\n+   anyway).  */\n+\n+const char *\n+mips_output_jump (rtx *operands, int target_opno, int size_opno, bool link_p)\n+{\n+  static char buffer[300];\n+  char *s = buffer;\n+  bool reg_p = REG_P (operands[target_opno]);\n+\n+  const char *and_link = link_p ? \"al\" : \"\";\n+  const char *reg = reg_p ? \"r\" : \"\";\n+  const char *compact = \"\";\n+  const char *nop = \"%/\";\n+  const char *short_delay = link_p ? \"%!\" : \"\";\n+  const char *insn_name = TARGET_CB_NEVER || reg_p ? \"j\" : \"b\";\n+\n+  /* Compact branches can only be described when the ISA has support for them\n+     as both the compact formatter '%:' and the delay slot NOP formatter '%/'\n+     work as a mutually exclusive pair.  I.e. a NOP is never required if a\n+     compact form is available.  */\n+  if (!final_sequence\n+      && (TARGET_CB_MAYBE\n+\t  || (ISA_HAS_JRC && !link_p && reg_p)))\n+    {\n+      compact = \"c\";\n+      nop = \"\";\n+    }\n+\n+  if (TARGET_USE_GOT && !TARGET_EXPLICIT_RELOCS)\n+    sprintf (s, \"%%*%s%s\\t%%%d%%/\", insn_name, and_link, target_opno);\n+  else\n+    {\n+      if (!reg_p && TARGET_ABICALLS_PIC2)\n+\ts += sprintf (s, \".option\\tpic0\\n\\t\");\n+\n+      if (reg_p && mips_get_pic_call_symbol (operands, size_opno))\n+\t{\n+\t  s += sprintf (s, \"%%*.reloc\\t1f,R_MIPS_JALR,%%%d\\n1:\\t\", size_opno);\n+\t  /* Not sure why this shouldn't permit a short delay but it did not\n+\t     allow it before so we still don't allow it.  */\n+\t  short_delay = \"\";\n+\t}\n+      else\n+\ts += sprintf (s, \"%%*\");\n+\n+      s += sprintf (s, \"%s%s%s%s%s\\t%%%d%s\", insn_name, and_link, reg, compact, short_delay,\n+\t\t\t\t\t    target_opno, nop);\n+\n+      if (!reg_p && TARGET_ABICALLS_PIC2)\n+\ts += sprintf (s, \"\\n\\t.option\\tpic2\");\n+    }\n+  return buffer;\n+}\n+\n /* Return the assembly code for INSN, which has the operands given by\n    OPERANDS, and which branches to OPERANDS[0] if some condition is true.\n    BRANCH_IF_TRUE is the asm template that should be used if OPERANDS[0]\n@@ -13033,12 +13148,25 @@ mips_output_conditional_branch (rtx_insn *insn, rtx *operands,\n     }\n \n   /* Output the unconditional branch to TAKEN.  */\n-  if (TARGET_ABSOLUTE_JUMPS)\n+  if (TARGET_ABSOLUTE_JUMPS && TARGET_CB_MAYBE)\n+    {\n+      /* Add a hazard nop.  */\n+      if (!final_sequence)\n+\t{\n+\t  output_asm_insn (\"nop\\t\\t# hazard nop\", 0);\n+\t  fprintf (asm_out_file, \"\\n\");\n+\t}\n+      output_asm_insn (MIPS_ABSOLUTE_JUMP (\"bc\\t%0\"), &taken);\n+    }\n+  else if (TARGET_ABSOLUTE_JUMPS)\n     output_asm_insn (MIPS_ABSOLUTE_JUMP (\"j\\t%0%/\"), &taken);\n   else\n     {\n       mips_output_load_label (taken);\n-      output_asm_insn (\"jr\\t%@%]%/\", 0);\n+      if (TARGET_CB_MAYBE)\n+\toutput_asm_insn (\"jrc\\t%@%]\", 0);\n+      else\n+\toutput_asm_insn (\"jr\\t%@%]%/\", 0);\n     }\n \n   /* Now deal with its delay slot; see above.  */\n@@ -13052,7 +13180,7 @@ mips_output_conditional_branch (rtx_insn *insn, rtx *operands,\n \t\t\t   asm_out_file, optimize, 1, NULL);\n \t  final_sequence->insn (1)->set_deleted ();\n \t}\n-      else\n+      else if (TARGET_CB_NEVER)\n \toutput_asm_insn (\"nop\", 0);\n       fprintf (asm_out_file, \"\\n\");\n     }\n@@ -13063,43 +13191,156 @@ mips_output_conditional_branch (rtx_insn *insn, rtx *operands,\n   return \"\";\n }\n \n+/* Return the assembly code for INSN, which branches to OPERANDS[0]\n+   if some equality condition is true.  The condition is given by\n+   OPERANDS[1] if !INVERTED_P, otherwise it is the inverse of\n+   OPERANDS[1].  OPERANDS[2] is the comparison's first operand;\n+   OPERANDS[3] is the second operand and may be zero or a register.  */\n+\n+const char *\n+mips_output_equal_conditional_branch (rtx_insn* insn, rtx *operands,\n+\t\t\t\t      bool inverted_p)\n+{\n+  const char *branch[2];\n+  /* For a simple BNEZ or BEQZ microMIPSr3 branch.  */\n+  if (TARGET_MICROMIPS\n+      && mips_isa_rev <= 5\n+      && operands[3] == const0_rtx\n+      && get_attr_length (insn) <= 8)\n+    {\n+      if (mips_cb == MIPS_CB_OPTIMAL)\n+\t{\n+\t  branch[!inverted_p] = \"%*b%C1z%:\\t%2,%0\";\n+\t  branch[inverted_p] = \"%*b%N1z%:\\t%2,%0\";\n+\t}\n+      else\n+\t{\n+\t  branch[!inverted_p] = \"%*b%C1z\\t%2,%0%/\";\n+\t  branch[inverted_p] = \"%*b%N1z\\t%2,%0%/\";\n+\t}\n+    }\n+  else if (TARGET_CB_MAYBE)\n+    {\n+      if (operands[3] == const0_rtx)\n+\t{\n+\t  branch[!inverted_p] = MIPS_BRANCH_C (\"b%C1z\", \"%2,%0\");\n+\t  branch[inverted_p] = MIPS_BRANCH_C (\"b%N1z\", \"%2,%0\");\n+\t}\n+      else if (REGNO (operands[2]) != REGNO (operands[3]))\n+\t{\n+\t  branch[!inverted_p] = MIPS_BRANCH_C (\"b%C1\", \"%2,%3,%0\");\n+\t  branch[inverted_p] = MIPS_BRANCH_C (\"b%N1\", \"%2,%3,%0\");\n+\t}\n+      else\n+\t{\n+\t  /* This case is degenerate.  It should not happen, but does.  */\n+\t  if (GET_CODE (operands[1]) == NE)\n+\t    inverted_p = !inverted_p;\n+\n+\t  branch[!inverted_p] = MIPS_BRANCH_C (\"b\", \"%0\");\n+\t  branch[inverted_p] = \"%*\\t\\t# branch never\";\n+\t}\n+    }\n+  else\n+    {\n+      branch[!inverted_p] = MIPS_BRANCH (\"b%C1\", \"%2,%z3,%0\");\n+      branch[inverted_p] = MIPS_BRANCH (\"b%N1\", \"%2,%z3,%0\");\n+    }\n+\n+  return mips_output_conditional_branch (insn, operands, branch[1], branch[0]);\n+}\n+\n /* Return the assembly code for INSN, which branches to OPERANDS[0]\n    if some ordering condition is true.  The condition is given by\n    OPERANDS[1] if !INVERTED_P, otherwise it is the inverse of\n    OPERANDS[1].  OPERANDS[2] is the comparison's first operand;\n-   its second is always zero.  */\n+   OPERANDS[3] is the second operand and may be zero or a register.  */\n \n const char *\n-mips_output_order_conditional_branch (rtx_insn *insn, rtx *operands, bool inverted_p)\n+mips_output_order_conditional_branch (rtx_insn *insn, rtx *operands,\n+\t\t\t\t      bool inverted_p)\n {\n   const char *branch[2];\n \n   /* Make BRANCH[1] branch to OPERANDS[0] when the condition is true.\n      Make BRANCH[0] branch on the inverse condition.  */\n-  switch (GET_CODE (operands[1]))\n+  if (operands[3] != const0_rtx)\n     {\n-      /* These cases are equivalent to comparisons against zero.  */\n-    case LEU:\n-      inverted_p = !inverted_p;\n-      /* Fall through.  */\n-    case GTU:\n-      branch[!inverted_p] = MIPS_BRANCH (\"bne\", \"%2,%.,%0\");\n-      branch[inverted_p] = MIPS_BRANCH (\"beq\", \"%2,%.,%0\");\n-      break;\n+      /* Handle degenerate cases that should not, but do, occur.  */\n+      if (REGNO (operands[2]) == REGNO (operands[3]))\n+\t{\n+\t  switch (GET_CODE (operands[1]))\n+\t    {\n+\t    case LT:\n+\t    case LTU:\n+\t      inverted_p = !inverted_p;\n+\t      /* Fall through.  */\n+\t    case GE:\n+\t    case GEU:\n+\t      branch[!inverted_p] = MIPS_BRANCH_C (\"b\", \"%0\");\n+\t      branch[inverted_p] = \"%*\\t\\t# branch never\";\n+\t      break;\n+\t   default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  branch[!inverted_p] = MIPS_BRANCH_C (\"b%C1\", \"%2,%3,%0\");\n+\t  branch[inverted_p] = MIPS_BRANCH_C (\"b%N1\", \"%2,%3,%0\");\n+\t}\n+    }\n+  else\n+    {\n+      switch (GET_CODE (operands[1]))\n+\t{\n+\t  /* These cases are equivalent to comparisons against zero.  */\n+\tcase LEU:\n+\t  inverted_p = !inverted_p;\n+\t  /* Fall through.  */\n+\tcase GTU:\n+\t  if (TARGET_CB_MAYBE)\n+\t    {\n+\t      branch[!inverted_p] = MIPS_BRANCH_C (\"bnez\", \"%2,%0\");\n+\t      branch[inverted_p] = MIPS_BRANCH_C (\"beqz\", \"%2,%0\");\n+\t    }\n+\t  else\n+\t    {\n+\t      branch[!inverted_p] = MIPS_BRANCH (\"bne\", \"%2,%.,%0\");\n+\t      branch[inverted_p] = MIPS_BRANCH (\"beq\", \"%2,%.,%0\");\n+\t    }\n+\t  break;\n \n-      /* These cases are always true or always false.  */\n-    case LTU:\n-      inverted_p = !inverted_p;\n-      /* Fall through.  */\n-    case GEU:\n-      branch[!inverted_p] = MIPS_BRANCH (\"beq\", \"%.,%.,%0\");\n-      branch[inverted_p] = MIPS_BRANCH (\"bne\", \"%.,%.,%0\");\n-      break;\n+\t  /* These cases are always true or always false.  */\n+\tcase LTU:\n+\t  inverted_p = !inverted_p;\n+\t  /* Fall through.  */\n+\tcase GEU:\n+\t  if (TARGET_CB_MAYBE)\n+\t    {\n+\t      branch[!inverted_p] = MIPS_BRANCH_C (\"b\", \"%0\");\n+\t      branch[inverted_p] = \"%*\\t\\t# branch never\";\n+\t    }\n+\t  else\n+\t    {\n+\t      branch[!inverted_p] = MIPS_BRANCH (\"beq\", \"%.,%.,%0\");\n+\t      branch[inverted_p] = MIPS_BRANCH (\"bne\", \"%.,%.,%0\");\n+\t    }\n+\t  break;\n \n-    default:\n-      branch[!inverted_p] = MIPS_BRANCH (\"b%C1z\", \"%2,%0\");\n-      branch[inverted_p] = MIPS_BRANCH (\"b%N1z\", \"%2,%0\");\n-      break;\n+\tdefault:\n+\t  if (TARGET_CB_MAYBE)\n+\t    {\n+\t      branch[!inverted_p] = MIPS_BRANCH_C (\"b%C1z\", \"%2,%0\");\n+\t      branch[inverted_p] = MIPS_BRANCH_C (\"b%N1z\", \"%2,%0\");\n+\t    }\n+\t  else\n+\t    {\n+\t      branch[!inverted_p] = MIPS_BRANCH (\"b%C1z\", \"%2,%0\");\n+\t      branch[inverted_p] = MIPS_BRANCH (\"b%N1z\", \"%2,%0\");\n+\t    }\n+\t  break;\n+\t}\n     }\n   return mips_output_conditional_branch (insn, operands, branch[1], branch[0]);\n }\n@@ -13302,11 +13543,18 @@ mips_process_sync_loop (rtx_insn *insn, rtx *operands)\n \t\t\t       at, oldval, inclusive_mask, NULL);\n \t  tmp1 = at;\n \t}\n-      mips_multi_add_insn (\"bne\\t%0,%z1,2f\", tmp1, required_oldval, NULL);\n+      if (TARGET_CB_NEVER)\n+\tmips_multi_add_insn (\"bne\\t%0,%z1,2f\", tmp1, required_oldval, NULL);\n \n       /* CMP = 0 [delay slot].  */\n       if (cmp)\n         mips_multi_add_insn (\"li\\t%0,0\", cmp, NULL);\n+\n+      if (TARGET_CB_MAYBE && required_oldval == const0_rtx)\n+\tmips_multi_add_insn (\"bnezc\\t%0,2f\", tmp1, NULL);\n+      else if (TARGET_CB_MAYBE)\n+\tmips_multi_add_insn (\"bnec\\t%0,%1,2f\", tmp1, required_oldval, NULL);\n+\n     }\n \n   /* $TMP1 = OLDVAL & EXCLUSIVE_MASK.  */\n@@ -13369,7 +13617,10 @@ mips_process_sync_loop (rtx_insn *insn, rtx *operands)\n      be annulled.  To ensure this behaviour unconditionally use a NOP\n      in the delay slot for the branch likely case.  */\n \n-  mips_multi_add_insn (\"beq%?\\t%0,%.,1b%~\", at, NULL);\n+  if (TARGET_CB_MAYBE)\n+    mips_multi_add_insn (\"beqzc\\t%0,1b\", at, NULL);\n+  else\n+    mips_multi_add_insn (\"beq%?\\t%0,%.,1b%~\", at, NULL);\n \n   /* if (INSN1 != MOVE && INSN1 != LI) NEWVAL = $TMP3 [delay slot].  */\n   if (insn1 != SYNC_INSN1_MOVE && insn1 != SYNC_INSN1_LI && tmp3 != newval)\n@@ -16651,7 +16902,7 @@ mips_orphaned_high_part_p (mips_offset_table *htab, rtx_insn *insn)\n \n static void\n mips_avoid_hazard (rtx_insn *after, rtx_insn *insn, int *hilo_delay,\n-\t\t   rtx *delayed_reg, rtx lo_reg)\n+\t\t   rtx *delayed_reg, rtx lo_reg, bool *fs_delay)\n {\n   rtx pattern, set;\n   int nops, ninsns;\n@@ -16677,6 +16928,15 @@ mips_avoid_hazard (rtx_insn *after, rtx_insn *insn, int *hilo_delay,\n     nops = 2 - *hilo_delay;\n   else if (*delayed_reg != 0 && reg_referenced_p (*delayed_reg, pattern))\n     nops = 1;\n+  /* If processing a forbidden slot hazard then a NOP is required if the\n+     branch instruction was not in a sequence (as the sequence would\n+     imply it is not actually a compact branch anyway) and the current\n+     insn is not an inline asm, and can't go in a delay slot.  */\n+  else if (*fs_delay && get_attr_can_delay (insn) == CAN_DELAY_NO\n+\t   && GET_CODE (PATTERN (after)) != SEQUENCE\n+\t   && GET_CODE (pattern) != ASM_INPUT\n+\t   && asm_noperands (pattern) < 0)\n+    nops = 1;\n   else\n     nops = 0;\n \n@@ -16689,12 +16949,18 @@ mips_avoid_hazard (rtx_insn *after, rtx_insn *insn, int *hilo_delay,\n   /* Set up the state for the next instruction.  */\n   *hilo_delay += ninsns;\n   *delayed_reg = 0;\n+  *fs_delay = false;\n   if (INSN_CODE (insn) >= 0)\n     switch (get_attr_hazard (insn))\n       {\n       case HAZARD_NONE:\n \tbreak;\n \n+      case HAZARD_FORBIDDEN_SLOT:\n+\tif (TARGET_CB_MAYBE)\n+\t  *fs_delay = true;\n+\tbreak;\n+\n       case HAZARD_HILO:\n \t*hilo_delay = 0;\n \tbreak;\n@@ -16718,6 +16984,7 @@ mips_reorg_process_insns (void)\n   rtx_insn *insn, *last_insn, *subinsn, *next_insn;\n   rtx lo_reg, delayed_reg;\n   int hilo_delay;\n+  bool fs_delay;\n \n   /* Force all instructions to be split into their final form.  */\n   split_all_insns_noflow ();\n@@ -16786,6 +17053,7 @@ mips_reorg_process_insns (void)\n   hilo_delay = 2;\n   delayed_reg = 0;\n   lo_reg = gen_rtx_REG (SImode, LO_REGNUM);\n+  fs_delay = false;\n \n   /* Make a second pass over the instructions.  Delete orphaned\n      high-part relocations or turn them into NOPs.  Avoid hazards\n@@ -16809,7 +17077,7 @@ mips_reorg_process_insns (void)\n \t\t\tINSN_CODE (subinsn) = CODE_FOR_nop;\n \t\t      }\n \t\t    mips_avoid_hazard (last_insn, subinsn, &hilo_delay,\n-\t\t\t\t       &delayed_reg, lo_reg);\n+\t\t\t\t       &delayed_reg, lo_reg, &fs_delay);\n \t\t  }\n \t      last_insn = insn;\n \t    }\n@@ -16830,7 +17098,7 @@ mips_reorg_process_insns (void)\n \t      else\n \t\t{\n \t\t  mips_avoid_hazard (last_insn, insn, &hilo_delay,\n-\t\t\t\t     &delayed_reg, lo_reg);\n+\t\t\t\t     &delayed_reg, lo_reg, &fs_delay);\n \t\t  last_insn = insn;\n \t\t}\n \t    }\n@@ -17695,6 +17963,27 @@ mips_option_override (void)\n       target_flags |= MASK_ODD_SPREG;\n     }\n \n+  if (!ISA_HAS_COMPACT_BRANCHES && mips_cb == MIPS_CB_ALWAYS)\n+    {\n+      error (\"unsupported combination: %qs%s %s\",\n+\t      mips_arch_info->name, TARGET_MICROMIPS ? \" -mmicromips\" : \"\",\n+\t      \"-mcompact-branches=always\");\n+    }\n+  else if (!ISA_HAS_DELAY_SLOTS && mips_cb == MIPS_CB_NEVER)\n+    {\n+      error (\"unsupported combination: %qs%s %s\",\n+\t      mips_arch_info->name, TARGET_MICROMIPS ? \" -mmicromips\" : \"\",\n+\t      \"-mcompact-branches=never\");\n+    }\n+\n+  /* Require explicit relocs for MIPS R6 onwards.  This enables simplification\n+     of the compact branch and jump support through the backend.  */\n+  if (!TARGET_EXPLICIT_RELOCS && mips_isa_rev >= 6)\n+    {\n+      error (\"unsupported combination: %qs %s\",\n+\t     mips_arch_info->name, \"-mno-explicit-relocs\");\n+    }\n+\n   /* The effect of -mabicalls isn't defined for the EABI.  */\n   if (mips_abi == ABI_EABI && TARGET_ABICALLS)\n     {\n@@ -18714,6 +19003,18 @@ mips_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \n #undef OP\n \n+  /* If we are using compact branches we don't have delay slots so\n+     place the instruction that was in the delay slot before the JRC\n+     instruction.  */\n+\n+  if (TARGET_CB_ALWAYS)\n+    {\n+      rtx temp;\n+      temp = trampoline[i-2];\n+      trampoline[i-2] = trampoline[i-1];\n+      trampoline[i-1] = temp;\n+    }\n+\n   /* Copy the trampoline code.  Leave any padding uninitialized.  */\n   for (j = 0; j < i; j++)\n     {"}, {"sha": "25a1e0622cd4024f70e4c30431caeac6df83486a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -92,6 +92,33 @@ struct mips_cpu_info {\n /* True if we are generating position-independent VxWorks RTP code.  */\n #define TARGET_RTP_PIC (TARGET_VXWORKS_RTP && flag_pic)\n \n+/* Compact branches must not be used if the user either selects the\n+   'never' policy or the 'optimal' policy on a core that lacks\n+   compact branch instructions.  */\n+#define TARGET_CB_NEVER (mips_cb == MIPS_CB_NEVER\t\\\n+\t\t\t || (mips_cb == MIPS_CB_OPTIMAL \\\n+\t\t\t     && !ISA_HAS_COMPACT_BRANCHES))\n+\n+/* Compact branches may be used if the user either selects the\n+   'always' policy or the 'optimal' policy on a core that supports\n+   compact branch instructions.  */\n+#define TARGET_CB_MAYBE (TARGET_CB_ALWAYS\t\t\\\n+\t\t\t || (mips_cb == MIPS_CB_OPTIMAL \\\n+\t\t\t     && ISA_HAS_COMPACT_BRANCHES))\n+\n+/* Compact branches must always be generated if the user selects\n+   the 'always' policy or the 'optimal' policy om a core that\n+   lacks delay slot branch instructions.  */\n+#define TARGET_CB_ALWAYS (mips_cb == MIPS_CB_ALWAYS\t\\\n+\t\t\t || (mips_cb == MIPS_CB_OPTIMAL \\\n+\t\t\t     && !ISA_HAS_DELAY_SLOTS))\n+\n+/* Special handling for JRC that exists in microMIPSR3 as well as R6\n+   ISAs with full compact branch support.  */\n+#define ISA_HAS_JRC ((ISA_HAS_COMPACT_BRANCHES\t\t\\\n+\t\t      || TARGET_MICROMIPS)\t\t\\\n+\t\t     && mips_cb != MIPS_CB_NEVER)\n+\n /* True if the output file is marked as \".abicalls; .option pic0\"\n    (-call_nonpic).  */\n #define TARGET_ABICALLS_PIC0 \\\n@@ -872,6 +899,10 @@ struct mips_cpu_info {\n \n #define ISA_HAS_JR\t\t(mips_isa_rev <= 5)\n \n+#define ISA_HAS_DELAY_SLOTS\t1\n+\n+#define ISA_HAS_COMPACT_BRANCHES (mips_isa_rev >= 6)\n+\n /* ISA has branch likely instructions (e.g. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n@@ -2645,52 +2676,16 @@ typedef struct mips_args {\n #define MIPS_BRANCH(OPCODE, OPERANDS) \\\n   \"%*\" OPCODE \"%?\\t\" OPERANDS \"%/\"\n \n+#define MIPS_BRANCH_C(OPCODE, OPERANDS) \\\n+  \"%*\" OPCODE \"%:\\t\" OPERANDS\n+\n /* Return an asm string that forces INSN to be treated as an absolute\n    J or JAL instruction instead of an assembler macro.  */\n #define MIPS_ABSOLUTE_JUMP(INSN) \\\n   (TARGET_ABICALLS_PIC2\t\t\t\t\t\t\\\n    ? \".option\\tpic0\\n\\t\" INSN \"\\n\\t.option\\tpic2\"\t\t\\\n    : INSN)\n \n-/* Return the asm template for a call.  INSN is the instruction's mnemonic\n-   (\"j\" or \"jal\"), OPERANDS are its operands, TARGET_OPNO is the operand\n-   number of the target.  SIZE_OPNO is the operand number of the argument size\n-   operand that can optionally hold the call attributes.  If SIZE_OPNO is not\n-   -1 and the call is indirect, use the function symbol from the call\n-   attributes to attach a R_MIPS_JALR relocation to the call.\n-\n-   When generating GOT code without explicit relocation operators,\n-   all calls should use assembly macros.  Otherwise, all indirect\n-   calls should use \"jr\" or \"jalr\"; we will arrange to restore $gp\n-   afterwards if necessary.  Finally, we can only generate direct\n-   calls for -mabicalls by temporarily switching to non-PIC mode.\n-\n-   For microMIPS jal(r), we try to generate jal(r)s when a 16-bit\n-   instruction is in the delay slot of jal(r).  */\n-#define MIPS_CALL(INSN, OPERANDS, TARGET_OPNO, SIZE_OPNO)\t\\\n-  (TARGET_USE_GOT && !TARGET_EXPLICIT_RELOCS\t\t\t\\\n-   ? \"%*\" INSN \"\\t%\" #TARGET_OPNO \"%/\"\t\t\t\t\\\n-   : REG_P (OPERANDS[TARGET_OPNO])\t\t\t\t\\\n-   ? (mips_get_pic_call_symbol (OPERANDS, SIZE_OPNO)\t\t\\\n-      ? (\"%*.reloc\\t1f,R_MIPS_JALR,%\" #SIZE_OPNO \"\\n\"\t\t\\\n-\t \"1:\\t\" INSN \"r\\t%\" #TARGET_OPNO \"%/\")\t\t\t\\\n-      : TARGET_MICROMIPS && !TARGET_INTERLINK_COMPRESSED\t\\\n-      ? \"%*\" INSN \"r%!\\t%\" #TARGET_OPNO \"%/\"\t\t\t\\\n-      : \"%*\" INSN \"r\\t%\" #TARGET_OPNO \"%/\")\t\t\t\\\n-   : TARGET_MICROMIPS && !TARGET_INTERLINK_COMPRESSED\t\t\\\n-     ? MIPS_ABSOLUTE_JUMP (\"%*\" INSN \"%!\\t%\" #TARGET_OPNO \"%/\")\t\\\n-     : MIPS_ABSOLUTE_JUMP (\"%*\" INSN \"\\t%\" #TARGET_OPNO \"%/\"))\t\\\n-\n-/* Similar to MIPS_CALL, but this is for MICROMIPS \"j\" to generate\n-   \"jrc\" when nop is in the delay slot of \"jr\".  */\n-\n-#define MICROMIPS_J(INSN, OPERANDS, OPNO)\t\t\t\\\n-  (TARGET_USE_GOT && !TARGET_EXPLICIT_RELOCS\t\t\t\\\n-   ? \"%*j\\t%\" #OPNO \"%/\"\t\t\t\t\t\\\n-   : REG_P (OPERANDS[OPNO])\t\t\t\t\t\\\n-   ? \"%*jr%:\\t%\" #OPNO\t\t\t\t\t\t\\\n-   : MIPS_ABSOLUTE_JUMP (\"%*\" INSN \"\\t%\" #OPNO \"%/\"))\n-\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "1d1c42bf5f5552c1ba97b449277224985b6df6d4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 116, "deletions": 97, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -409,6 +409,15 @@\n \t (eq_attr \"sync_mem\" \"!none\") (const_string \"syncloop\")]\n \t(const_string \"unknown\")))\n \n+(define_attr \"compact_form\" \"always,maybe,never\"\n+  (cond [(eq_attr \"jal\" \"direct\")\n+\t (const_string \"always\")\n+\t (eq_attr \"jal\" \"indirect\")\n+\t (const_string \"maybe\")\n+\t (eq_attr \"type\" \"jump\")\n+\t (const_string \"maybe\")]\n+\t(const_string \"never\")))\n+\n ;; Mode for conversion types (fcvt)\n ;; I2S          integer to float single (SI/DI to SF)\n ;; I2D          integer to float double (SI/DI to DF)\n@@ -694,7 +703,7 @@\n ;; DELAY means that the next instruction cannot read the result\n ;; of this one.  HILO means that the next two instructions cannot\n ;; write to HI or LO.\n-(define_attr \"hazard\" \"none,delay,hilo\"\n+(define_attr \"hazard\" \"none,delay,hilo,forbidden_slot\"\n   (cond [(and (eq_attr \"type\" \"load,fpload,fpidxload\")\n \t      (match_test \"ISA_HAS_LOAD_DELAY\"))\n \t (const_string \"delay\")\n@@ -1045,21 +1054,37 @@\n    (nil)\n    (eq_attr \"can_delay\" \"yes\")])\n \n-;; Branches that don't have likely variants do not annul on false.\n+;; Branches that have delay slots and don't have likely variants do\n+;; not annul on false.\n (define_delay (and (eq_attr \"type\" \"branch\")\n \t\t   (not (match_test \"TARGET_MIPS16\"))\n+\t\t   (ior (match_test \"TARGET_CB_NEVER\")\n+\t\t\t(and (eq_attr \"compact_form\" \"maybe\")\n+\t\t\t     (not (match_test \"TARGET_CB_ALWAYS\")))\n+\t\t\t(eq_attr \"compact_form\" \"never\"))\n \t\t   (eq_attr \"branch_likely\" \"no\"))\n   [(eq_attr \"can_delay\" \"yes\")\n    (nil)\n    (nil)])\n \n-(define_delay (eq_attr \"type\" \"jump\")\n+(define_delay (and (eq_attr \"type\" \"jump\")\n+\t\t   (ior (match_test \"TARGET_CB_NEVER\")\n+\t\t\t(and (eq_attr \"compact_form\" \"maybe\")\n+\t\t\t     (not (match_test \"TARGET_CB_ALWAYS\")))\n+\t\t\t(eq_attr \"compact_form\" \"never\")))\n   [(eq_attr \"can_delay\" \"yes\")\n    (nil)\n    (nil)])\n \n+;; Call type instructions should never have a compact form as the\n+;; type is only used for MIPS16 patterns.  For safety put the compact\n+;; branch detection condition in anyway.\n (define_delay (and (eq_attr \"type\" \"call\")\n-\t\t   (eq_attr \"jal_macro\" \"no\"))\n+\t\t   (eq_attr \"jal_macro\" \"no\")\n+\t\t   (ior (match_test \"TARGET_CB_NEVER\")\n+\t\t\t(and (eq_attr \"compact_form\" \"maybe\")\n+\t\t\t     (not (match_test \"TARGET_CB_ALWAYS\")))\n+\t\t\t(eq_attr \"compact_form\" \"never\")))\n   [(eq_attr \"can_delay\" \"yes\")\n    (nil)\n    (nil)])\n@@ -5813,25 +5838,29 @@\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"order_operator\"\n-\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d\")\n-\t\t\t  (const_int 0)])\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d,d\")\n+\t\t\t  (match_operand:GPR 3 \"reg_or_0_operand\" \"J,d\")])\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n   \"!TARGET_MIPS16\"\n   { return mips_output_order_conditional_branch (insn, operands, false); }\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"compact_form\" \"maybe,always\")\n+   (set_attr \"hazard\" \"forbidden_slot\")])\n \n (define_insn \"*branch_order<mode>_inverted\"\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 1 \"order_operator\"\n-\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d\")\n-\t\t\t  (const_int 0)])\n+\t\t\t [(match_operand:GPR 2 \"register_operand\" \"d,d\")\n+\t\t\t  (match_operand:GPR 3 \"reg_or_0_operand\" \"J,d\")])\n \t (pc)\n \t (label_ref (match_operand 0 \"\" \"\"))))]\n   \"!TARGET_MIPS16\"\n   { return mips_output_order_conditional_branch (insn, operands, true); }\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"compact_form\" \"maybe,always\")\n+   (set_attr \"hazard\" \"forbidden_slot\")])\n \n ;; Conditional branch on equality comparison.\n \n@@ -5844,20 +5873,10 @@\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n   \"!TARGET_MIPS16\"\n-{\n-  /* For a simple BNEZ or BEQZ microMIPS branch.  */\n-  if (TARGET_MICROMIPS\n-      && operands[3] == const0_rtx\n-      && get_attr_length (insn) <= 8)\n-    return mips_output_conditional_branch (insn, operands,\n-\t\t\t\t\t   \"%*b%C1z%:\\t%2,%0\",\n-\t\t\t\t\t   \"%*b%N1z%:\\t%2,%0\");\n-\n-  return mips_output_conditional_branch (insn, operands,\n-\t\t\t\t\t MIPS_BRANCH (\"b%C1\", \"%2,%z3,%0\"),\n-\t\t\t\t\t MIPS_BRANCH (\"b%N1\", \"%2,%z3,%0\"));\n-}\n-  [(set_attr \"type\" \"branch\")])\n+  { return mips_output_equal_conditional_branch (insn, operands, false); }\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"compact_form\" \"maybe\")\n+   (set_attr \"hazard\" \"forbidden_slot\")])\n \n (define_insn \"*branch_equality<mode>_inverted\"\n   [(set (pc)\n@@ -5868,20 +5887,10 @@\n \t (pc)\n \t (label_ref (match_operand 0 \"\" \"\"))))]\n   \"!TARGET_MIPS16\"\n-{\n-  /* For a simple BNEZ or BEQZ microMIPS branch.  */\n-  if (TARGET_MICROMIPS\n-      && operands[3] == const0_rtx\n-      && get_attr_length (insn) <= 8)\n-    return mips_output_conditional_branch (insn, operands,\n-\t\t\t\t\t   \"%*b%N0z%:\\t%2,%1\",\n-\t\t\t\t\t   \"%*b%C0z%:\\t%2,%1\");\n-\n-  return mips_output_conditional_branch (insn, operands,\n-\t\t\t\t\t MIPS_BRANCH (\"b%N1\", \"%2,%z3,%0\"),\n-\t\t\t\t\t MIPS_BRANCH (\"b%C1\", \"%2,%z3,%0\"));\n-}\n-  [(set_attr \"type\" \"branch\")])\n+  { return mips_output_equal_conditional_branch (insn, operands, true); }\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"compact_form\" \"maybe\")\n+   (set_attr \"hazard\" \"forbidden_slot\")])\n \n ;; MIPS16 branches\n \n@@ -6176,26 +6185,46 @@\n   \"!TARGET_MIPS16 && TARGET_ABSOLUTE_JUMPS\"\n {\n   if (get_attr_length (insn) <= 8)\n-    return \"%*b\\t%l0%/\";\n+    {\n+      if (TARGET_CB_MAYBE)\n+\treturn MIPS_ABSOLUTE_JUMP (\"%*b%:\\t%l0\");\n+      else\n+\treturn MIPS_ABSOLUTE_JUMP (\"%*b\\t%l0%/\");\n+    }\n   else\n-    return MIPS_ABSOLUTE_JUMP (\"%*j\\t%l0%/\");\n+    {\n+      if (TARGET_CB_MAYBE && !final_sequence)\n+\treturn MIPS_ABSOLUTE_JUMP (\"%*bc\\t%l0\");\n+      else\n+\treturn MIPS_ABSOLUTE_JUMP (\"%*j\\t%l0%/\");\n+    }\n }\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"compact_form\" \"maybe\")])\n \n (define_insn \"*jump_pic\"\n   [(set (pc)\n \t(label_ref (match_operand 0)))]\n   \"!TARGET_MIPS16 && !TARGET_ABSOLUTE_JUMPS\"\n {\n   if (get_attr_length (insn) <= 8)\n-    return \"%*b\\t%l0%/\";\n+    {\n+      if (TARGET_CB_MAYBE)\n+\treturn \"%*b%:\\t%l0\";\n+      else\n+\treturn \"%*b\\t%l0%/\";\n+    }\n   else\n     {\n       mips_output_load_label (operands[0]);\n-      return \"%*jr\\t%@%/%]\";\n+      if (TARGET_CB_MAYBE)\n+\treturn \"%*jr%:\\t%@%]\";\n+      else\n+\treturn \"%*jr\\t%@%/%]\";\n     }\n }\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"compact_form\" \"maybe\")])\n \n ;; We need a different insn for the mips16, because a mips16 branch\n ;; does not have a delay slot.\n@@ -6242,12 +6271,9 @@\n (define_insn \"indirect_jump_<mode>\"\n   [(set (pc) (match_operand:P 0 \"register_operand\" \"d\"))]\n   \"\"\n-{\n-  if (TARGET_MICROMIPS)\n-    return \"%*jr%:\\t%0\";\n-  else\n-    return \"%*j\\t%0%/\";\n-}\n+  {\n+    return mips_output_jump (operands, 0, -1, false);\n+  }\n   [(set_attr \"type\" \"jump\")\n    (set_attr \"mode\" \"none\")])\n \n@@ -6291,12 +6317,9 @@\n \t(match_operand:P 0 \"register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n-{\n-  if (TARGET_MICROMIPS)\n-    return \"%*jr%:\\t%0\";\n-  else\n-    return \"%*j\\t%0%/\";\n-}\n+  {\n+    return mips_output_jump (operands, 0, -1, false);\n+  }\n   [(set_attr \"type\" \"jump\")\n    (set_attr \"mode\" \"none\")])\n \n@@ -6508,10 +6531,8 @@\n   [(any_return)]\n   \"\"\n   {\n-    if (TARGET_MICROMIPS)\n-      return \"%*jr%:\\t$31\";\n-    else\n-      return \"%*j\\t$31%/\";\n+    operands[0] = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n+    return mips_output_jump (operands, 0, -1, false);\n   }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")])\n@@ -6522,12 +6543,10 @@\n   [(any_return)\n    (use (match_operand 0 \"pmode_register_operand\" \"\"))]\n   \"\"\n-{\n-  if (TARGET_MICROMIPS)\n-    return \"%*jr%:\\t%0\";\n-  else\n-    return \"%*j\\t%0%/\";\n-}\n+  {\n+    operands[0] = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n+    return mips_output_jump (operands, 0, -1, false);\n+  }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")])\n \n@@ -6783,12 +6802,7 @@\n   [(call (mem:SI (match_operand 0 \"call_insn_operand\" \"j,S\"))\n \t (match_operand 1 \"\" \"\"))]\n   \"TARGET_SIBCALLS && SIBLING_CALL_P (insn)\"\n-{\n-  if (TARGET_MICROMIPS)\n-    return MICROMIPS_J (\"j\", operands, 0);\n-  else\n-    return MIPS_CALL (\"j\", operands, 0, 1);\n-}\n+  { return mips_output_jump (operands, 0, 1, false); }\n   [(set_attr \"jal\" \"indirect,direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -6809,12 +6823,7 @@\n         (call (mem:SI (match_operand 1 \"call_insn_operand\" \"j,S\"))\n               (match_operand 2 \"\" \"\")))]\n   \"TARGET_SIBCALLS && SIBLING_CALL_P (insn)\"\n-{\n-  if (TARGET_MICROMIPS)\n-    return MICROMIPS_J (\"j\", operands, 1);\n-  else\n-    return MIPS_CALL (\"j\", operands, 1, 2);\n-}\n+  { return mips_output_jump (operands, 1, 2, false); }\n   [(set_attr \"jal\" \"indirect,direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -6826,12 +6835,7 @@\n \t(call (mem:SI (match_dup 1))\n \t      (match_dup 2)))]\n   \"TARGET_SIBCALLS && SIBLING_CALL_P (insn)\"\n-{\n-  if (TARGET_MICROMIPS)\n-    return MICROMIPS_J (\"j\", operands, 1);\n-  else\n-    return MIPS_CALL (\"j\", operands, 1, 2);\n-}\n+  { return mips_output_jump (operands, 1, 2, false); }\n   [(set_attr \"jal\" \"indirect,direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -6887,7 +6891,10 @@\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0, 1); }\n+  {\n+    return (TARGET_SPLIT_CALLS ? \"#\"\n+\t    : mips_output_jump (operands, 0, 1, true));\n+  }\n   \"reload_completed && TARGET_SPLIT_CALLS\"\n   [(const_int 0)]\n {\n@@ -6902,7 +6909,7 @@\n    (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 0, 1); }\n+  { return mips_output_jump (operands, 0, 1, true); }\n   [(set_attr \"jal\" \"indirect,direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -6916,7 +6923,10 @@\n    (const_int 1)\n    (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 0, -1); }\n+  {\n+    return (TARGET_SPLIT_CALLS ? \"#\"\n+\t    : mips_output_jump (operands, 0, -1, true));\n+  }\n   \"reload_completed && TARGET_SPLIT_CALLS\"\n   [(const_int 0)]\n {\n@@ -6933,7 +6943,7 @@\n    (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n+  { return mips_output_jump (operands, 0, -1, true); }\n   [(set_attr \"jal\" \"direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -6956,7 +6966,10 @@\n               (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, 2); }\n+  {\n+    return (TARGET_SPLIT_CALLS ? \"#\"\n+\t    : mips_output_jump (operands, 1, 2, true));\n+  }\n   \"reload_completed && TARGET_SPLIT_CALLS\"\n   [(const_int 0)]\n {\n@@ -6974,7 +6987,7 @@\n    (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 1, 2); }\n+  { return mips_output_jump (operands, 1, 2, true); }\n   [(set_attr \"jal\" \"indirect,direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -6986,7 +6999,10 @@\n    (const_int 1)\n    (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, -1); }\n+  {\n+    return (TARGET_SPLIT_CALLS ? \"#\"\n+\t    : mips_output_jump (operands, 1, -1, true));\n+  }\n   \"reload_completed && TARGET_SPLIT_CALLS\"\n   [(const_int 0)]\n {\n@@ -7005,7 +7021,7 @@\n    (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 1, -1); }\n+  { return mips_output_jump (operands, 1, -1, true); }\n   [(set_attr \"jal\" \"direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -7019,7 +7035,10 @@\n \t      (match_dup 2)))\n    (clobber (reg:SI RETURN_ADDR_REGNUM))]\n   \"\"\n-  { return TARGET_SPLIT_CALLS ? \"#\" : MIPS_CALL (\"jal\", operands, 1, 2); }\n+  {\n+    return (TARGET_SPLIT_CALLS ? \"#\"\n+\t    : mips_output_jump (operands, 1, 2, true));\n+  }\n   \"reload_completed && TARGET_SPLIT_CALLS\"\n   [(const_int 0)]\n {\n@@ -7040,7 +7059,7 @@\n    (clobber (reg:SI RETURN_ADDR_REGNUM))\n    (clobber (reg:SI 28))]\n   \"TARGET_SPLIT_CALLS\"\n-  { return MIPS_CALL (\"jal\", operands, 1, 2); }\n+  { return mips_output_jump (operands, 1, 2, true); }\n   [(set_attr \"jal\" \"indirect,direct\")\n    (set_attr \"jal_macro\" \"no\")])\n \n@@ -7411,7 +7430,7 @@\n    (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n    (clobber (reg:P RETURN_ADDR_REGNUM))]\n   \"HAVE_AS_TLS && TARGET_MIPS16\"\n-  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n+  { return mips_output_jump (operands, 0, -1, true); }\n   [(set_attr \"type\" \"call\")\n    (set_attr \"insn_count\" \"3\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -7452,7 +7471,7 @@\n    (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n    (clobber (reg:P RETURN_ADDR_REGNUM))]\n   \"TARGET_HARD_FLOAT_ABI && TARGET_MIPS16\"\n-  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n+  { return mips_output_jump (operands, 0, -1, true); }\n   [(set_attr \"type\" \"call\")\n    (set_attr \"insn_count\" \"3\")])\n \n@@ -7482,7 +7501,7 @@\n    (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n    (clobber (reg:P RETURN_ADDR_REGNUM))]\n   \"TARGET_HARD_FLOAT_ABI && TARGET_MIPS16\"\n-  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n+  { return mips_output_jump (operands, 0, -1, true); }\n   [(set_attr \"type\" \"call\")\n    (set_attr \"insn_count\" \"3\")])\n "}, {"sha": "84887d11623c47e5ed97b77cb2b297578404152b", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -418,3 +418,20 @@ Driver\n mload-store-pairs\n Target Report Var(TARGET_LOAD_STORE_PAIRS) Init(1)\n Enable load/store bonding.\n+\n+mcompact-branches=\n+Target RejectNegative JoinedOrMissing Var(mips_cb) Report Enum(mips_cb_setting) Init(MIPS_CB_OPTIMAL)\n+Specify the compact branch usage policy\n+\n+Enum\n+Name(mips_cb_setting) Type(enum mips_cb_setting)\n+Policies available for use with -mcompact-branches=:\n+\n+EnumValue\n+Enum(mips_cb_setting) String(never) Value(MIPS_CB_NEVER)\n+\n+EnumValue\n+Enum(mips_cb_setting) String(optimal) Value(MIPS_CB_OPTIMAL)\n+\n+EnumValue\n+Enum(mips_cb_setting) String(always) Value(MIPS_CB_ALWAYS)"}, {"sha": "3259232bb89e646772249b2b8176449cf7257cac", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -475,7 +475,18 @@\n   (match_code \"eq,ne,lt,ltu,ge,geu\"))\n \n (define_predicate \"order_operator\"\n-  (match_code \"lt,ltu,le,leu,ge,geu,gt,gtu\"))\n+  (match_code \"lt,ltu,le,leu,ge,geu,gt,gtu\")\n+{\n+  if (XEXP (op, 1) == const0_rtx)\n+    return true;\n+\n+  if (TARGET_CB_MAYBE\n+      && (GET_CODE (op) == LT || GET_CODE (op) == LTU\n+\t  || GET_CODE (op) == GE || GET_CODE (op) == GEU))\n+    return true;\n+\n+  return false;\n+})\n \n ;; For NE, cstore uses sltu instructions in which the first operand is $0.\n ;; This isn't possible in mips16 code."}, {"sha": "e7bbcec27bbc663bf463d9a497a97758078a2b7b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -782,6 +782,7 @@ Objective-C and Objective-C++ Dialects}.\n -mgp32  -mgp64  -mfp32  -mfpxx  -mfp64  -mhard-float  -msoft-float @gol\n -mno-float  -msingle-float  -mdouble-float @gol\n -modd-spreg -mno-odd-spreg @gol\n+-mcompact-branches=@var{policy} @gol\n -mabs=@var{mode}  -mnan=@var{encoding} @gol\n -mdsp  -mno-dsp  -mdspr2  -mno-dspr2 @gol\n -mmcu -mmno-mcu @gol\n@@ -17303,6 +17304,30 @@ for the o32 ABI.  This is the default for processors that are known to\n support these registers.  When using the o32 FPXX ABI, @option{-mno-odd-spreg}\n is set by default.\n \n+@item -mcompact-branches=never\n+@itemx -mcompact-branches=optimal\n+@itemx -mcompact-branches=always\n+@opindex mcompact-branches=never\n+@opindex mcompact-branches=optimal\n+@opindex mcompact-branches=always\n+These options control which form of branches will be generated.  The\n+default is @option{-mcompact-branches=optimal}.\n+\n+The @option{-mcompact-branches=never} option ensures that compact branch\n+instructions will never be generated.\n+\n+The @option{-mcompact-branches=always} option ensures that a compact\n+branch instruction will be generated if available.  If a compact branch\n+instruction is not available, a delay slot form of the branch will be\n+used instead.\n+\n+This option is supported from MIPS Release 6 onwards.\n+\n+The @option{-mcompact-branches=optimal} option will cause a delay slot\n+branch to be used if one is available in the current ISA and the delay\n+slot is successfully filled.  If the delay slot is not filled, a compact\n+branch will be chosen if one is available.\n+\n @item -mabs=2008\n @itemx -mabs=legacy\n @opindex mabs=2008"}, {"sha": "6d2f6280e20b9193a335dcfdbc30c2f48e68623f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,3 +1,42 @@\n+2015-09-01  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\t    Andrew Bennett  <andrew.bennett@imgtec.com>\n+\n+\t* gcc.target/mips/mips.exp (mips-dg-options): Handle the\n+\tdependencies between ISA level and compact-branches.\n+\t* gcc.target/mips/branch-10.c: Update expected output to allow\n+\tcompact forms of b/bal.\n+\t* gcc.target/mips/branch-11.c: Likewise.\n+\t* gcc.target/mips/branch-12.c: Likewise.\n+\t* gcc.target/mips/branch-13.c: Likewise.\n+\t* gcc.target/mips/branch-3.c: Likewise.\n+\t* gcc.target/mips/branch-4.c: Likewise.\n+\t* gcc.target/mips/branch-5.c: Likewise.\n+\t* gcc.target/mips/branch-6.c: Likewise.\n+\t* gcc.target/mips/branch-7.c: Likewise.\n+\t* gcc.target/mips/branch-8.c: Likewise.\n+\t* gcc.target/mips/branch-9.c: Likewise.\n+\t* gcc.target/mips/branch-cost-1.c: Likewise.\n+\t* gcc.target/mips/call-1.c: Likewise.\n+\t* gcc.target/mips/call-2.c: Likewise.\n+\t* gcc.target/mips/call-3.c: Likewise.\n+\t* gcc.target/mips/call-4.c: Likewise.\n+\t* gcc.target/mips/call-5.c: Likewise.\n+\t* gcc.target/mips/call-6.c: Likewise.\n+\t* gcc.target/mips/lazy-binding-1.c: Likewise.\n+\t* gcc.target/mips/near-far-1.c: Likewise.\n+\t* gcc.target/mips/near-far-2.c: Likewise.\n+\t* gcc.target/mips/near-far-3.c: Likewise.\n+\t* gcc.target/mips/near-far-4.c: Likewise.\n+\t* gcc.target/mips/umips-branch-3.c: Ensure the test is\n+\trun with compact branches allowed.\n+\t* gcc.target/mips/compact-branches-1.c: New file.\n+\t* gcc.target/mips/compact-branches-2.c: Likewise.\n+\t* gcc.target/mips/compact-branches-3.c: Likewise.\n+\t* gcc.target/mips/compact-branches-4.c: Likewise.\n+\t* gcc.target/mips/compact-branches-5.c: Likewise.\n+\t* gcc.target/mips/compact-branches-6.c: Likewise.\n+\t* gcc.target/mips/compact-branches-7.c: Likewise.\n+\n 2015-09-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/read_dir.f90: XFAIL this testcase on FreeBSD."}, {"sha": "9428254f0dfd2be8a87b67120fc9f60d174d778d", "filename": "gcc/testsuite/gcc.target/mips/branch-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-10.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-mshared -mabi=n32\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$28|%gp_rel|%got)\" } } */\n-/* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n \n #include \"branch-helper.h\"\n "}, {"sha": "9238d9ca1eba987e7f1c7dacad83b8deabc4dcfe", "filename": "gcc/testsuite/gcc.target/mips/branch-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-11.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -4,7 +4,7 @@\n /* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$28,\\\\\\$28,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$1,%got_page\\\\(\\[^)\\]*\\\\)\\\\(\\\\\\$28\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$1,\\\\\\$1,%got_ofst\\\\(\\[^)\\]*\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n \n #include \"branch-helper.h\"\n "}, {"sha": "97261acea6007206ad231a90cff74f569bd9a416", "filename": "gcc/testsuite/gcc.target/mips/branch-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-12.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-mshared -mabi=64\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$28|%gp_rel|%got)\" } } */\n-/* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n \n #include \"branch-helper.h\"\n "}, {"sha": "5ea5f1b64fef06cd7b9b9618a57e8595e9e04b7c", "filename": "gcc/testsuite/gcc.target/mips/branch-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-13.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -4,7 +4,7 @@\n /* { dg-final { scan-assembler \"\\tdaddiu\\t\\\\\\$28,\\\\\\$28,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tld\\t\\\\\\$1,%got_page\\\\(\\[^)\\]*\\\\)\\\\(\\\\\\$28\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tdaddiu\\t\\\\\\$1,\\\\\\$1,%got_ofst\\\\(\\[^)\\]*\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n \n #include \"branch-helper.h\"\n "}, {"sha": "310812aa4da1d4279e5c3e20f94e3aa6ba8ec26d", "filename": "gcc/testsuite/gcc.target/mips/branch-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-3.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-mshared -mabi=32\" } */\n /* { dg-final { scan-assembler \"\\t\\\\.cpload\\t\\\\\\$25\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\\\.cprestore\" } } */\n \n #include \"branch-helper.h\""}, {"sha": "9dec90469f5aa7213d3946a6aeeb51bbb546378f", "filename": "gcc/testsuite/gcc.target/mips/branch-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-4.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-mshared -mabi=n32\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$25|\\\\\\$28|%gp_rel|%got)\" } } */\n-/* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n \n #include \"branch-helper.h\"\n "}, {"sha": "60daf27d06b855ff4d32f4bdd7a3c76156c6f4c6", "filename": "gcc/testsuite/gcc.target/mips/branch-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-5.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"-mshared -mabi=n32\" } */\n /* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$3,\\\\\\$3,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$1,%got_page\\\\(\\[^)\\]*\\\\)\\\\(\\\\\\$3\\\\)\\\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\\\\\$28\" } } */\n \n #include \"branch-helper.h\""}, {"sha": "4262ba7e8499f5f194a34c3476a97f2106b1be81", "filename": "gcc/testsuite/gcc.target/mips/branch-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-6.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-mshared -mabi=64\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$25|\\\\\\$28|%gp_rel|%got)\" } } */\n-/* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n \n #include \"branch-helper.h\"\n "}, {"sha": "a0c28a2bb6554fa9cd2125bb22e87467ed2656f4", "filename": "gcc/testsuite/gcc.target/mips/branch-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-7.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-options \"-mshared -mabi=64\" } */\n /* { dg-final { scan-assembler \"\\tdaddiu\\t\\\\\\$3,\\\\\\$3,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tld\\t\\\\\\$1,%got_page\\\\(\\[^)\\]*\\\\)\\\\(\\\\\\$3\\\\)\\\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\\\\\$28\" } } */\n \n #include \"branch-helper.h\""}, {"sha": "5a5494e0bd1a872b27a39090f5063612d76ab14d", "filename": "gcc/testsuite/gcc.target/mips/branch-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-8.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-mshared -mabi=32\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$28|cpload|cprestore)\" } } */\n-/* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n \n #include \"branch-helper.h\"\n "}, {"sha": "88a6d9a063f332cc2e9f683c7a56177173f86165", "filename": "gcc/testsuite/gcc.target/mips/branch-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-9.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -4,7 +4,7 @@\n /* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$1,16\\\\(\\\\\\$(fp|sp)\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$1,%got\\\\(\\[^)\\]*\\\\)\\\\(\\\\\\$1\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$1,\\\\\\$1,%lo\\\\(\\[^)\\]*\\\\)\\n\" } } */\n-/* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tjrc?\\t\\\\\\$1\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\\\\\$28\" } } */\n \n #include \"branch-helper.h\""}, {"sha": "61c3029dd77abd617eedbcd3f4d93030c166bbea", "filename": "gcc/testsuite/gcc.target/mips/branch-cost-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-cost-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-cost-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-cost-1.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -6,4 +6,4 @@ foo (int x, int y, int z, int k)\n   return x == k ? x + y : z - x;\n }\n /* { dg-final { scan-assembler-not \"\\t(movz|movn)\\t\" } } */\n-/* { dg-final { scan-assembler \"\\t(bne|beq)\\t\" } } */\n+/* { dg-final { scan-assembler \"\\t(bnec?|beqc?)\\t\" } } */"}, {"sha": "46a2536754b7b705a5446a7d63338d13a4242c53", "filename": "gcc/testsuite/gcc.target/mips/call-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-1.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,12 +1,12 @@\n /* { dg-options \"-mrelax-pic-calls -mshared -foptimize-sibling-calls -mabi=32\" } */\n /* { dg-skip-if \"requires -foptimize-sibling-calls\" { *-*-* } { \"-O0\" } { \"\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal\\n1:\\tjalrs?\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal2\\n1:\\tjalrs?\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,staticfunc\\n1:\\tjalrs?\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail\\n1:)?\\tjrc?\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail2\\n1:)?\\tjrc?\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail3\\n1:)?\\tjrc?\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail4\\n1:)?\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal\\n1:\\tjalrc?s?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal2\\n1:\\tjalrc?s?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,staticfunc\\n1:\\tjalrc?s?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail\\n1:\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail2\\n1:\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail3\\n1:\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail4\\n1:\\tjrc?\\t\" } } */\n \n __attribute__ ((noinline)) static void staticfunc () { asm (\"\"); }\n int normal ();"}, {"sha": "175933cbe77b9e083e5c0f4350463d14f0168bc0", "filename": "gcc/testsuite/gcc.target/mips/call-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-2.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* See through some simple data-flow.  */\n /* { dg-options \"-mrelax-pic-calls\" } */\n-/* { dg-final { scan-assembler-times \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalrs?\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalrc?s?\\t\" 2 } } */\n \n extern void g (void);\n "}, {"sha": "08cf336a4240c9365782199fa9d29246cda3d02b", "filename": "gcc/testsuite/gcc.target/mips/call-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-3.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-options \"-mrelax-pic-calls -mno-shared\" } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalrs?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalrc?s?\\t\" } } */\n /* { dg-require-visibility \"\" } */\n \n __attribute__ ((visibility (\"hidden\"))) void g ();"}, {"sha": "bf357c7a5b07baa235f9f1d353bd160b79a7991d", "filename": "gcc/testsuite/gcc.target/mips/call-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-4.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,6 +1,6 @@\n /* See through some simple data-flow.  */\n /* { dg-options \"-mrelax-pic-calls\" } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalr\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,g\\n1:\\tjalrc?\\t\" } } */\n \n extern void g (void);\n "}, {"sha": "f6ebae9db79eda212ecdb85911a78fa0458e5aaf", "filename": "gcc/testsuite/gcc.target/mips/call-5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-5.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -2,13 +2,13 @@\n    in this case (PR target/57260).  */\n /* { dg-options \"-mrelax-pic-calls -mshared -foptimize-sibling-calls -mabi=n32\" } */\n /* { dg-skip-if \"requires -foptimize-sibling-calls\" { *-*-* } { \"-O0\" } { \"\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal2\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,staticfunc\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail2\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail3\\n1:)?\\tjrc?\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail4\\n1:)?\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal2\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,staticfunc\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail2\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail3\\n1:\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail4\\n1:\\tjrc?\\t\" } } */\n \n __attribute__ ((noinline)) static void staticfunc () { asm (\"\"); }\n int normal ();"}, {"sha": "00f4a1ef3532ef24a71ec1ddc7e281209b035d71", "filename": "gcc/testsuite/gcc.target/mips/call-6.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-6.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,13 +1,13 @@\n /* Like call-5.c, but for n64.  */\n /* { dg-options \"-mrelax-pic-calls -mshared -foptimize-sibling-calls -mabi=64\" } */\n /* { dg-skip-if \"requires -foptimize-sibling-calls\" { *-*-* } { \"-O0\" } { \"\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal2\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,staticfunc\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail2\\n1:\\tjalr\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail3\\n1:)?\\tjrc?\\t\" } } */\n-/* { dg-final { scan-assembler \"(\\\\.reloc\\t1f,R_MIPS_JALR,tail4\\n1:)?\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,normal2\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,staticfunc\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail2\\n1:\\tjalrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail3\\n1:\\tjrc?\\t\" } } */\n+/* { dg-final { scan-assembler \"\\\\.reloc\\t1f,R_MIPS_JALR,tail4\\n1:\\tjrc?\\t\" } } */\n \n __attribute__ ((noinline)) static void staticfunc () { asm (\"\"); }\n int normal ();"}, {"sha": "9c7365e2659fb637fd9088b652516a77d8d4990d", "filename": "gcc/testsuite/gcc.target/mips/compact-branches-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-1.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-mcompact-branches=always -mno-micromips\" } */\n+int glob;\n+\n+void\n+foo (int a, int b)\n+{\n+  if (a < b)\n+    glob = 1;\n+}\n+\n+/* { dg-final { scan-assembler \"\\tbgec\\t\\\\\\$\\[0-9\\]*,\\\\\\$\\[0-9\\]*\" } } */\n+/* { dg-final { scan-assembler \"\\tjrc\\t\\\\\\$31\" } } */"}, {"sha": "0f8064f5d88b87466f7bb6c98f6e904a0c6f9719", "filename": "gcc/testsuite/gcc.target/mips/compact-branches-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-2.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-mcompact-branches=never\" } */\n+int glob;\n+\n+void\n+foo (int a, int b)\n+{\n+  if (a < b)\n+    glob = 1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tb\\[^ \\t\\]*c\" } } */\n+/* { dg-final { scan-assembler-not \"\\tj\\[^ \\t\\]*c\" } } */"}, {"sha": "d6becb10eeebfa287fda88198c9c0e667a2bbb4d", "filename": "gcc/testsuite/gcc.target/mips/compact-branches-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-3.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-mcompact-branches=never isa_rev>=6\" } */\n+int glob;\n+\n+void\n+foo (int a, int b, volatile int * bar)\n+{\n+  if (a < b)\n+    glob = *bar;\n+}\n+\n+/* { dg-final { scan-assembler \"\\tnop\" } } */\n+/* { dg-final { scan-assembler-not \"\\tb\\[^ \\t\\]*c\" } } */\n+/* { dg-final { scan-assembler-not \"\\tj\\[^ \\t\\]*c\" } } */"}, {"sha": "fd99ad64f6da483209277d161e27ee6cb670f7b5", "filename": "gcc/testsuite/gcc.target/mips/compact-branches-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-4.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-mcompact-branches=optimal isa_rev>=6\" } */\n+int glob;\n+\n+void\n+foo (int a, int b, volatile int * bar)\n+{\n+  if (a < b)\n+    glob = *bar;\n+}\n+\n+/* { dg-final { scan-assembler \"\\tb\\[^ \\t\\]*c\" } } */"}, {"sha": "90d312c614dfc363c26170c1d55439d2715f96a8", "filename": "gcc/testsuite/gcc.target/mips/compact-branches-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-5.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mno-abicalls -mcompact-branches=never isa_rev>=6\" } */\n+void bar (int);\n+\n+void\n+foo ()\n+{\n+  bar (1);\n+}\n+\n+/* { dg-final { scan-assembler \"\\t(j|jal)\\t\" } } */"}, {"sha": "dd35a5581bde378f3ab4943918713e2a95baf65a", "filename": "gcc/testsuite/gcc.target/mips/compact-branches-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-6.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-mno-abicalls -mcompact-branches=optimal isa_rev>=6\" } */\n+void bar (int);\n+\n+void\n+foo ()\n+{\n+  bar (1);\n+}\n+\n+/* { dg-final { scan-assembler \"\\t(bc|balc)\\t\" } } */"}, {"sha": "36700c9a2ce4bdcb4c849c901c99fb237606214b", "filename": "gcc/testsuite/gcc.target/mips/compact-branches-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcompact-branches-7.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-mhard-float -mcompact-branches=always isa_rev>=6 -mno-micromips\" } */\n+int bar;\n+\n+void\n+foo (float a, volatile int * b)\n+{\n+  if (a < 0.1)\n+    bar = *b;\n+}\n+\n+/* { dg-final { scan-assembler \"\\t(bc1eqz|bc1nez)\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tnop\" } } */"}, {"sha": "a112781a99e15d17d448c487d8a31b4b076ab5ce", "filename": "gcc/testsuite/gcc.target/mips/lazy-binding-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flazy-binding-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flazy-binding-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flazy-binding-1.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -19,6 +19,6 @@ foo (int n)\n /* There should be exactly five uses of $25: one to set up $gp, two to\n    load the address of bar (), and two to call it.  */\n /* { dg-final { scan-assembler-times \"\\tl.\\t\\\\\\$25,%call16\\\\\\(bar\\\\\\)\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tjalrs?\\t\\\\\\$25\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tjalrc?s?\\t\\\\\\$25\" 2 } } */\n /* { dg-final { scan-assembler \"(\\\\\\$28,|\\t.cpload\\t)\\\\\\$25\" } } */\n /* { dg-final { scan-assembler-times \"\\\\\\$25\" 5 } } */"}, {"sha": "42e7fff0de5073114ec99e8b272c69d887c2d375", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -243,6 +243,7 @@ set mips_option_groups {\n     mips16 \"-mips16|-mno-mips16|-mflip-mips16\"\n     mips3d \"-mips3d|-mno-mips3d\"\n     pic \"-f(no-|)(pic|PIC)\"\n+    cb \"-mcompact-branches=.*\"\n     profiling \"-pg\"\n     small-data \"-G[0-9]+\"\n     warnings \"-w\"\n@@ -1068,8 +1069,10 @@ proc mips-dg-options { args } {\n \t# We need a revision 6 or better ISA for:\n \t#\n \t#   - When the LSA instruction is required\n+\t#   - When only using compact branches\n \tif { $isa_rev < 6\n-\t     && ([mips_have_test_option_p options \"HAS_LSA\"]) } {\n+\t     && ([mips_have_test_option_p options \"HAS_LSA\"]\n+\t\t || [mips_have_test_option_p options \"-mcompact-branches=always\"]) } {\n \t    if { $gp_size == 32 } {\n \t\tmips_make_test_option options \"-mips32r6\"\n \t    } else {\n@@ -1164,6 +1167,9 @@ proc mips-dg-options { args } {\n \t\tmips_make_test_option options \"-mips64r5\"\n \t    }\n \t    mips_make_test_option options \"-mnan=2008\"\n+\t    if { [mips_have_option_p options \"-mcompact-branches=always\"] } {\n+\t\tmips_make_test_option options \"-mcompact-branches=optimal\"\n+\t    }\n \t# Check whether we need to switch from a 32-bit processor to the\n \t# \"nearest\" 64-bit processor.\n \t} elseif { $gp_size == 64 && [mips_32bit_arch_p $arch] } {\n@@ -1308,6 +1314,11 @@ proc mips-dg-options { args } {\n \t    mips_make_test_option options \"-mno-micromips\"\n \t    mips_make_test_option options \"-mnan=legacy\"\n \t}\n+\tif { $isa_rev < 6 } {\n+\t    if { [mips_have_option_p options \"-mcompact-branches=always\"] } {\n+\t\tmips_make_test_option options \"-mcompact-branches=optimal\"\n+\t    }\n+\t}\n         if { $isa_rev > 5 } {\n \t    mips_make_test_option options \"-mno-dsp\"\n \t    mips_make_test_option options \"-mno-mips16\""}, {"sha": "b746cf6030c1686dfafbca7f4749de82a9ace665", "filename": "gcc/testsuite/gcc.target/mips/near-far-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-1.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -16,5 +16,5 @@ int test ()\n \n /* { dg-final { scan-assembler-not \"\\tjal\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tjal\\tfar_func\\n\" } } */\n-/* { dg-final { scan-assembler     \"\\tjal(|s)\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tnear_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tjal\\tnormal_func\\n\" } } */"}, {"sha": "2c140e2ceb2db6c91856e0c809bf0e04e004b7a4", "filename": "gcc/testsuite/gcc.target/mips/near-far-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-2.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -16,5 +16,5 @@ int test ()\n \n /* { dg-final { scan-assembler-not \"\\tjal(|s)\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tjal(|s)\\tfar_func\\n\" } } */\n-/* { dg-final { scan-assembler     \"\\tjal(|s)\\tnear_func\\n\" } } */\n-/* { dg-final { scan-assembler     \"\\tjal(|s)\\tnormal_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(jal(|s)|balc)\\tnormal_func\\n\" } } */"}, {"sha": "7bf3e14bc80a43b5f6a56137228c9e46958c7b18", "filename": "gcc/testsuite/gcc.target/mips/near-far-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-3.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -13,5 +13,5 @@ NOMIPS16 int test4 () { return normal_func (); }\n \n /* { dg-final { scan-assembler-not \"\\tj\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tj\\tfar_func\\n\" } } */\n-/* { dg-final { scan-assembler     \"\\tj(|al|als)\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tnear_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tj\\tnormal_func\\n\" } } */"}, {"sha": "cd12a1dbcbb6d95b8972d0c4c1e73c1fedb71cf7", "filename": "gcc/testsuite/gcc.target/mips/near-far-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fnear-far-4.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -13,5 +13,5 @@ NOMIPS16 int test4 () { return normal_func (); }\n \n /* { dg-final { scan-assembler-not \"\\tj\\tlong_call_func\\n\" } } */\n /* { dg-final { scan-assembler-not \"\\tj\\tfar_func\\n\" } } */\n-/* { dg-final { scan-assembler     \"\\tj(|al|als)\\tnear_func\\n\" } } */\n-/* { dg-final { scan-assembler     \"\\tj(|al|als)\\tnormal_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tnear_func\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\t(j(|al|als)|b(|al)c)\\tnormal_func\\n\" } } */"}, {"sha": "74465c9f808e4235a0577da10f999a4e4e9f2571", "filename": "gcc/testsuite/gcc.target/mips/umips-branch-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fumips-branch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22219d9b1a5bcf9b96020f830493fed6525d936c/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fumips-branch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fumips-branch-3.c?ref=22219d9b1a5bcf9b96020f830493fed6525d936c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"(-mmicromips)\" } */\n+/* { dg-options \"(-mmicromips) -mcompact-branches=optimal\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n \n void MICROMIPS"}]}