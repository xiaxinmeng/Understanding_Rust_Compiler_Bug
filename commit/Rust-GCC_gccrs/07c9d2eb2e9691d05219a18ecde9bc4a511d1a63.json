{"sha": "07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjOWQyZWIyZTk2OTFkMDUyMTlhMThlY2RlOWJjNGE1MTFkMWE2Mw==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-10-22T14:43:31Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-10-22T14:43:31Z"}, "message": "target.h (struct gcc_target): Add asm_out.exception_section, asm_out.eh_frame_section.\n\n        * target.h (struct gcc_target): Add asm_out.exception_section,\n        asm_out.eh_frame_section.\n        * target-def.h (TARGET_ASM_EXCEPTION_SECTION): New macro.\n        (TARGET_ASM_EH_FRAME_SECTION): New.\n        (TARGET_INITIALIZER): Update.\n        * output.h (default_exception_section): Declare.\n        (default_eh_frame_section): Declare.\n        * dwarf2out.c: Include target.h.\n        (output_call_frame_info): Call target hook for eh frames.\n        (default_eh_frame_section): New function.\n        * except.c: Include target.h.\n        (output_function_exception_table): Call target hook for exception\n        section.\n        * varasm.c (default_exception_section): Rename from\n        exception_section, remove EXCEPTION_SECTION macro.\n\n        * config/darwin.h (darwin_eh_frame_section): New function.\n        (EXCEPTION_SECTION): Remove.\n        (TARGET_ASM_EXCEPTION_SECTION): Define.\n        * config/nextstep.h (EH_FRAME_SECTION_ASM_OP): Remove.\n        (nextstep_exception_section): New function.\n        (nextstep_eh_frame_section): New function.\n        (TARGET_ASM_EXCEPTION_SECTION): Define.\n        (TARGET_ASM_EH_FRAME_SECTION): Define.\n\n        * config/pa/som.h (EXCEPTION_SECTION): Remove.\n        (TARGET_ASM_EXCEPTION_SECTION): Define.\n        * config/rs6000/sysv4.h, config/rs6000/xcoff.h\n        (EXCEPTION_SECTION): Remove.\n        (TARGET_ASM_EXCEPTION_SECTION): Define.\n        * config/stormy16/stormy16.h: Remove comments referencing\n        EXCEPTION_SECTION and EH_FRAME_SECTION_ASM_OP.\n\n        * doc/tm.texi: Document TARGET_ASM_EXCEPTION_SECTION and\n        TARGET_ASM_EH_FRAME_SECTION.\n\nFrom-SVN: r46409", "tree": {"sha": "6028234f9c01f45261eb56b926fa2cdb55368889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6028234f9c01f45261eb56b926fa2cdb55368889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/comments", "author": null, "committer": null, "parents": [{"sha": "bbea0391f048d6564ce44f4a27b8987318f2ea75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbea0391f048d6564ce44f4a27b8987318f2ea75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbea0391f048d6564ce44f4a27b8987318f2ea75"}], "stats": {"total": 180, "additions": 122, "deletions": 58}, "files": [{"sha": "5b0816e21f4b63b17852adc575b82cfc80e264f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -1,3 +1,41 @@\n+2001-10-22  Stan Shebs  <shebs@apple.com>\n+\n+\t* target.h (struct gcc_target): Add asm_out.exception_section,\n+\tasm_out.eh_frame_section.\n+\t* target-def.h (TARGET_ASM_EXCEPTION_SECTION): New macro.\n+\t(TARGET_ASM_EH_FRAME_SECTION): New.\n+\t(TARGET_INITIALIZER): Update.\n+\t* output.h (default_exception_section): Declare.\n+\t(default_eh_frame_section): Declare.\n+\t* dwarf2out.c: Include target.h.\n+\t(output_call_frame_info): Call target hook for eh frames.\n+\t(default_eh_frame_section): New function.\n+\t* except.c: Include target.h.\n+\t(output_function_exception_table): Call target hook for exception\n+\tsection.\n+\t* varasm.c (default_exception_section): Rename from\n+\texception_section, remove EXCEPTION_SECTION macro.\n+\n+\t* config/darwin.h (darwin_eh_frame_section): New function.\n+\t(EXCEPTION_SECTION): Remove.\n+\t(TARGET_ASM_EXCEPTION_SECTION): Define.\n+\t* config/nextstep.h (EH_FRAME_SECTION_ASM_OP): Remove.\n+\t(nextstep_exception_section): New function.\n+\t(nextstep_eh_frame_section): New function.\n+\t(TARGET_ASM_EXCEPTION_SECTION): Define.\n+\t(TARGET_ASM_EH_FRAME_SECTION): Define.\n+\n+\t* config/pa/som.h (EXCEPTION_SECTION): Remove.\n+\t(TARGET_ASM_EXCEPTION_SECTION): Define.\n+\t* config/rs6000/sysv4.h, config/rs6000/xcoff.h\n+\t(EXCEPTION_SECTION): Remove.\n+\t(TARGET_ASM_EXCEPTION_SECTION): Define.\n+\t* config/stormy16/stormy16.h: Remove comments referencing\n+\tEXCEPTION_SECTION and EH_FRAME_SECTION_ASM_OP.\n+\n+\t* doc/tm.texi: Document TARGET_ASM_EXCEPTION_SECTION and\n+\tTARGET_ASM_EH_FRAME_SECTION.\n+\n 2001-10-22  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* config/mips/mips.md (mul_acc_si): Fix precedence of conditional"}, {"sha": "35207af26d5d14d1115b06bb155b1409a56ed49b", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -352,7 +352,7 @@ do { if (!strcmp (alias_name, name))\t\t\t\t\t\\\n   in_machopic_lazy_symbol_ptr,\t\t\t\t\\\n   in_machopic_symbol_stub,\t\t\t\t\\\n   in_machopic_picsymbol_stub,\t\t\t\t\\\n-  in_darwin_exception, \\\n+  in_darwin_exception, in_darwin_eh_frame,\t\t\\\n   num_sections\n \n #undef\tEXTRA_SECTION_FUNCTIONS\n@@ -460,6 +460,9 @@ SECTION_FUNCTION (machopic_picsymbol_stub_section,\t\\\n SECTION_FUNCTION (darwin_exception_section,\t\t\\\n \t\tin_darwin_exception,\t\t\t\\\n \t\t\".section __TEXT,__gcc_except_tab\", 0)\t\\\n+SECTION_FUNCTION (darwin_eh_frame_section,\t\t\\\n+\t\tin_darwin_eh_frame,\t\t\t\\\n+\t\t\".section __TEXT,__eh_frame\", 0)\t\\\n \t\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\\\n objc_section_init ()\t\t\t\t\\\n@@ -781,8 +784,10 @@ enum machopic_addr_class {\n       }\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n-#define EXCEPTION_SECTION() darwin_exception_section ()\n+#define TARGET_ASM_EXCEPTION_SECTION darwin_exception_section\n \n+#define TARGET_ASM_EH_FRAME_SECTION darwin_eh_frame_section\n+  \n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)  \\\n   (((CODE) == 1 || (GLOBAL) == 0) ? DW_EH_PE_pcrel : DW_EH_PE_absptr)\n "}, {"sha": "827584371e16b9c526d6d2520e3e2e2573e4e874", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -217,13 +217,10 @@ Boston, MA 02111-1307, USA.  */\n extern void nextstep_asm_out_constructor  PARAMS ((struct rtx_def *, int));\n extern void nextstep_asm_out_destructor  PARAMS ((struct rtx_def *, int));\n \n-/* ??? Should be changed to EH_FRAME_SECTION_NAME, but that requires\n-   named section support.  Based on this definition, it seems clear\n-   that the object file format supports named sections, but it has\n-   not been implemented in gcc.  */\n-#error \"Implement named section support\"\n-#define EH_FRAME_SECTION_ASM_OP \"\\t.section __TEXT,__eh_frame,regular\"\n+#define TARGET_ASM_EXCEPTION_SECTION nextstep_exception_section\n \n+#define TARGET_ASM_EH_FRAME_SECTION nextstep_eh_frame_section\n+  \n /* Don't output a .file directive.  That is only used by the assembler for\n    error reporting.  */\n #undef\tASM_FILE_START\n@@ -326,6 +323,7 @@ FUNCTION ()\t\t\t\t\t\t\t\t\\\n #define EXTRA_SECTIONS\t\t\t\t\t\\\n   in_const, in_cstring, in_literal4, in_literal8,\t\\\n   in_constructor, in_destructor,\t\t\t\\\n+  in_nextstep_exception, in_nextstep_eh_frame,\t\t\\\n   in_objc_class, in_objc_meta_class, in_objc_category,\t\\\n   in_objc_class_vars, in_objc_instance_vars,\t\t\\\n   in_objc_cls_meth, in_objc_inst_meth,\t\t\t\\\n@@ -357,6 +355,12 @@ SECTION_FUNCTION (constructor_section,\t\t\\\n SECTION_FUNCTION (destructor_section,\t\t\\\n \t\t  in_destructor,\t\t\\\n \t\t  \".destructor\", 0, 0)\t\t\\\n+SECTION_FUNCTION (nextstep_exception_section,\t\\\n+\t\t  in_nextstep_exception,\t\\\n+\t\t  \".section __TEXT,__gcc_except_tab,regular\", 0, 0)\t\\\n+SECTION_FUNCTION (nextstep_eh_frame_section,\t\\\n+\t\t  in_nextstep_eh_frame,\t\t\\\n+\t\t  \".section __TEXT,__eh_frame,regular\", 0, 0)\t\t\\\n SECTION_FUNCTION (objc_class_section,\t\t\\\n \t\t  in_objc_class,\t\t\\\n \t\t  \".objc_class\", 0, 1)\t\t\\"}, {"sha": "863b4f781646e32b5193dc7718c2a448716d55e5", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -265,7 +265,7 @@ do {  \\\n    complain.\n \n    So, we force exception information into the data section.  */\n-#define EXCEPTION_SECTION data_section\n+#define TARGET_ASM_EXCEPTION_SECTION data_section\n \n /* Define the .bss section for ASM_OUTPUT_LOCAL to use. */\n "}, {"sha": "0a24cc30be4849d083a407d3c55d2189b9f2217f", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -1548,5 +1548,6 @@ ncrtn.o%s\"\n    ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4) \\\n    : DW_EH_PE_absptr)\n \n-#define EXCEPTION_SECTION readonly_data_section\n+#define TARGET_ASM_EXCEPTION_SECTION readonly_data_section\n+\n #define DOUBLE_INT_ASM_OP \"\\t.quad\\t\""}, {"sha": "758a95b30fb59278bf869436ad5993f1f49f07ec", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -495,7 +495,7 @@ toc_section ()\t\t\t\t\t\t\\\n \n /* Define the name of the section to use for the EH language specific\n    data areas (.gcc_except_table on most other systems).  */\n-#define EXCEPTION_SECTION data_section\n+#define TARGET_ASM_EXCEPTION_SECTION data_section\n \n /* Define to prevent DWARF2 unwind info in the data section rather\n    than in the .eh_frame section.  We do this because the AIX linker"}, {"sha": "f625ae8f014574afd2aefe52d3c2fdb8bb64eb29", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -4493,23 +4493,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    This macro need not be defined on most platforms.  */\n /* #define ASM_OUTPUT_EH_REGION_END() */\n \n-/* A C expression to switch to the section in which the main exception table is\n-   to be placed.  The default is a section named `.gcc_except_table' on machines\n-   that support named sections via `ASM_OUTPUT_SECTION_NAME', otherwise if `-fpic'\n-   or `-fPIC' is in effect, the `data_section', otherwise the\n-   `readonly_data_section'.  */\n-/* #define EXCEPTION_SECTION() */\n-\n-/* If defined, a C string constant for the assembler operation to switch to the\n-   section for exception handling frame unwind information.  If not defined,\n-   GNU CC will provide a default definition if the target supports named\n-   sections.  `crtstuff.c' uses this macro to switch to the appropriate\n-   section.\n-\n-   You should define this symbol if your target supports DWARF 2 frame unwind\n-   information and the default definition does not work.  */\n-/* #define EH_FRAME_SECTION_ASM_OP */\n-\n /* A C expression that is nonzero if the normal exception table output should\n    be omitted.\n "}, {"sha": "96c04d982d00394a0da700812f83c92546d6acf2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -7151,15 +7151,6 @@ A C expression to output text to mark the end of an exception region.\n \n This macro need not be defined on most platforms.\n \n-@findex EXCEPTION_SECTION\n-@item EXCEPTION_SECTION ()\n-A C expression to switch to the section in which the main\n-exception table is to be placed (@pxref{Sections}).  The default is a\n-section named @code{.gcc_except_table} on machines that support named\n-sections via @code{TARGET_ASM_NAMED_SECTION}, otherwise if @option{-fpic}\n-or @option{-fPIC} is in effect, the @code{data_section}, otherwise the\n-@code{readonly_data_section}.\n-\n @findex EH_FRAME_SECTION_NAME\n @item EH_FRAME_SECTION_NAME\n If defined, a C string constant for the name of the section containing\n@@ -7232,6 +7223,24 @@ the target supports DWARF 2 frame unwind information.\n \n @end table\n \n+@deftypefn {Target Hook} void TARGET_ASM_EXCEPTION_SECTION ()\n+If defined, a function that switches to the section in which the main\n+exception table is to be placed (@pxref{Sections}).  The default is a\n+function that switches to a section named @code{.gcc_except_table} on\n+machines that support named sections via\n+@code{TARGET_ASM_NAMED_SECTION}, otherwise if @option{-fpic} or\n+@option{-fPIC} is in effect, the @code{data_section}, otherwise the\n+@code{readonly_data_section}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_ASM_EH_FRAME_SECTION ()\n+If defined, a function that switches to the section in which the DWARF 2\n+frame unwind information to be placed (@pxref{Sections}).  The default\n+is a function that outputs a standard GAS section directive, if\n+@code{EH_FRAME_SECTION_NAME} is defined, or else a data section\n+directive followed by a synthetic label.\n+@end deftypefn\n+\n @node Alignment Output\n @subsection Assembler Commands for Alignment\n "}, {"sha": "d98b3f2921b90e17f80c779c09aae49b0f0c9314", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -59,6 +59,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"diagnostic.h\"\n #include \"debug.h\"\n+#include \"target.h\"\n \n #ifdef DWARF2_DEBUGGING_INFO\n static void dwarf2out_source_line\tPARAMS ((unsigned int, const char *));\n@@ -1738,18 +1739,7 @@ output_call_frame_info (for_eh)\n     app_enable ();\n \n   if (for_eh)\n-    {\n-#ifdef EH_FRAME_SECTION_NAME\n-      named_section_flags (EH_FRAME_SECTION_NAME, SECTION_WRITE);\n-#else\n-      tree label = get_file_function_name ('F');\n-\n-      data_section ();\n-      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n-      ASM_GLOBALIZE_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n-      ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n-#endif\n-    }\n+    (*targetm.asm_out.eh_frame_section) ();\n   else\n     named_section_flags (DEBUG_FRAME_SECTION, SECTION_DEBUG);\n \n@@ -1978,6 +1968,21 @@ output_call_frame_info (for_eh)\n     app_disable ();\n }\n \n+void\n+default_eh_frame_section ()\n+{\n+#ifdef EH_FRAME_SECTION_NAME\n+  named_section_flags (EH_FRAME_SECTION_NAME, SECTION_WRITE);\n+#else\n+  tree label = get_file_function_name ('F');\n+\n+  data_section ();\n+  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n+  ASM_GLOBALIZE_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n+  ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n+#endif\n+}\n+\n /* Output a marker (i.e. a label) for the beginning of a function, before\n    the prologue.  */\n "}, {"sha": "788f54ed34f3ca9ca605acd18cafe3a9ae6600d0", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -69,7 +69,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"intl.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n-\n+#include \"target.h\"\n \n /* Provide defaults for stuff that may not be defined when using\n    sjlj exceptions.  */\n@@ -3518,7 +3518,7 @@ output_function_exception_table ()\n   /* Note that varasm still thinks we're in the function's code section.\n      The \".endp\" directive that will immediately follow will take us back.  */\n #else\n-  exception_section ();\n+  (*targetm.asm_out.exception_section) ();\n #endif\n \n   have_tt_data = (VARRAY_ACTIVE_SIZE (cfun->eh->ttype_data) > 0"}, {"sha": "585d355bbcbd120b70b973ea90f6f7c807b4a5b7", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -209,7 +209,10 @@ extern void named_section\t\tPARAMS ((tree, const char *, int));\n extern void function_section\t\tPARAMS ((tree));\n \n /* Tell assembler to switch to the section for the exception table.  */\n-extern void exception_section\t\tPARAMS ((void));\n+extern void default_exception_section\tPARAMS ((void));\n+\n+/* Tell assembler to switch to the section for the EH frames.  */\n+extern void default_eh_frame_section\tPARAMS ((void));\n \n /* Tell assembler to switch to the section for string merging.  */\n extern void mergeable_string_section\tPARAMS ((tree, unsigned HOST_WIDE_INT,"}, {"sha": "59b5e8de0c8929f9b6d0f099301cc3845e0006d9", "filename": "gcc/target-def.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -19,12 +19,16 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n  You are forbidden to forbid anyone else to use, share and improve\n  what you give them.   Help stamp out software-hoarding!  */\n \n-/* See target.h for a desciption of what this file contains and how to\n+/* See target.h for a description of what this file contains and how to\n    use it.\n \n    We want to have non-NULL default definitions of all hook functions,\n    even if they do nothing.  */\n \n+/* Note that if one of these macros must be defined in an OS .h file\n+   rather than the .c file, then we need to wrap the default\n+   definition in a #ifndef, since files include tm.h before this one.  */\n+\n /* Assembler output.  */\n #define TARGET_ASM_OPEN_PAREN \"(\"\n #define TARGET_ASM_CLOSE_PAREN \")\"\n@@ -72,13 +76,23 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_HAVE_NAMED_SECTIONS false\n #endif\n \n+#ifndef TARGET_ASM_EXCEPTION_SECTION\n+#define TARGET_ASM_EXCEPTION_SECTION default_exception_section\n+#endif\n+\n+#ifndef TARGET_ASM_EH_FRAME_SECTION\n+#define TARGET_ASM_EH_FRAME_SECTION default_eh_frame_section\n+#endif\n+\n #define TARGET_ASM_OUT {TARGET_ASM_OPEN_PAREN,\t\t\t\\\n \t\t\tTARGET_ASM_CLOSE_PAREN,\t\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_PROLOGUE,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_END_PROLOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_EPILOGUE,\t\t\\\n \t\t\tTARGET_ASM_NAMED_SECTION,\t\t\\\n+\t\t\tTARGET_ASM_EXCEPTION_SECTION,\t\t\\\n+\t\t\tTARGET_ASM_EH_FRAME_SECTION,\t\t\\\n \t\t\tTARGET_ASM_CONSTRUCTOR,\t\t\t\\\n \t\t\tTARGET_ASM_DESTRUCTOR}\n "}, {"sha": "a0545800c27865011715fbc973940c8881f5068d", "filename": "gcc/target.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -68,6 +68,12 @@ struct gcc_target\n        specified by FLAGS.  */\n     void (* named_section) PARAMS ((const char *, unsigned int));\n \n+    /* Switch to the section that holds the exception table.  */\n+    void (* exception_section) PARAMS ((void));\n+\n+    /* Switch to the section that holds the exception frames.  */\n+    void (* eh_frame_section) PARAMS ((void));\n+\n     /* Output a constructor for a symbol with a given priority.  */\n     void (* constructor) PARAMS ((rtx, int));\n "}, {"sha": "6658fec22b5b7825da998ec39c5a02bb8e881b81", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c9d2eb2e9691d05219a18ecde9bc4a511d1a63/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=07c9d2eb2e9691d05219a18ecde9bc4a511d1a63", "patch": "@@ -603,18 +603,14 @@ variable_section (decl, reloc)\n    table.  */\n \n void\n-exception_section ()\n+default_exception_section ()\n {\n-#if defined (EXCEPTION_SECTION)\n-  EXCEPTION_SECTION ();\n-#else\n   if (targetm.have_named_sections)\n     named_section (NULL_TREE, \".gcc_except_table\", 0);\n   else if (flag_pic)\n     data_section ();\n   else\n     readonly_data_section ();\n-#endif\n }\n \n /* Tell assembler to switch to the section for string merging.  */"}]}