{"sha": "ee43dab5e00224b3c0ec40112e65802c966e3343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0M2RhYjVlMDAyMjRiM2MwZWM0MDExMmU2NTgwMmM5NjZlMzM0Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-03T19:05:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-03T19:05:12Z"}, "message": "re PR c++/10771 (Unreadable error message for illegal specialization)\n\n\tPR c++/10771\n\t* parser.c (cp_parser_check_for_invalid_template_id): New\n\tfunction.\n\t(cp_parser_simple_type_specifier): Use it.\n\t(cp_parser_elaborated_type_specifier): Likewise.\n\t(cp_parser_class_head): Likewise.\n\n\tPR c++/10771\n\t* g++.dg/template/error5.C: New test.\n\nFrom-SVN: r74239", "tree": {"sha": "706e464c3361e136a06a7c457742151daf6c4595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/706e464c3361e136a06a7c457742151daf6c4595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee43dab5e00224b3c0ec40112e65802c966e3343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee43dab5e00224b3c0ec40112e65802c966e3343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee43dab5e00224b3c0ec40112e65802c966e3343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee43dab5e00224b3c0ec40112e65802c966e3343/comments", "author": null, "committer": null, "parents": [{"sha": "bee6ab3e7241334f1a3550c4e0ac9fe8be715a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee6ab3e7241334f1a3550c4e0ac9fe8be715a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee6ab3e7241334f1a3550c4e0ac9fe8be715a6b"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "de5c7142d5bf89e442533c4a7fc00092a41833f6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee43dab5e00224b3c0ec40112e65802c966e3343", "patch": "@@ -1,3 +1,12 @@\n+2003-12-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10771\n+\t* parser.c (cp_parser_check_for_invalid_template_id): New\n+\tfunction.\n+\t(cp_parser_simple_type_specifier): Use it.\n+\t(cp_parser_elaborated_type_specifier): Likewise.\n+\t(cp_parser_class_head): Likewise.\n+\n 2003-12-02  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/10126\r"}, {"sha": "9ec128c9edfc7c6b8443a538f27873f6a5fd9c32", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ee43dab5e00224b3c0ec40112e65802c966e3343", "patch": "@@ -1702,6 +1702,8 @@ static void cp_parser_check_type_definition\n   (cp_parser *);\n static void cp_parser_check_for_definition_in_return_type\n   (tree, int);\n+static void cp_parser_check_for_invalid_template_id\n+  (cp_parser *, tree);\n static tree cp_parser_non_constant_expression\n   (const char *);\n static bool cp_parser_diagnose_invalid_type_name\n@@ -1813,6 +1815,54 @@ cp_parser_check_for_definition_in_return_type (tree declarator,\n     error (\"new types may not be defined in a return type\");\n }\n \n+/* A type-specifier (TYPE) has been parsed which cannot be followed by\n+   \"<\" in any valid C++ program.  If the next token is indeed \"<\",\n+   issue a message warning the user about what appears to be an\n+   invalid attempt to form a template-id.  */\n+\n+static void\n+cp_parser_check_for_invalid_template_id (cp_parser* parser, \n+\t\t\t\t\t tree type)\n+{\n+  ptrdiff_t start;\n+  cp_token *token;\n+\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n+    {\n+      if (TYPE_P (type))\n+\terror (\"`%T' is not a template\", type);\n+      else if (TREE_CODE (type) == IDENTIFIER_NODE)\n+\terror (\"`%s' is not a template\", IDENTIFIER_POINTER (type));\n+      else\n+\terror (\"invalid template-id\");\n+      /* Remember the location of the invalid \"<\".  */\n+      if (cp_parser_parsing_tentatively (parser)\n+\t  && !cp_parser_committed_to_tentative_parse (parser))\n+\t{\n+\t  token = cp_lexer_peek_token (parser->lexer);\n+\t  token = cp_lexer_prev_token (parser->lexer, token);\n+\t  start = cp_lexer_token_difference (parser->lexer,\n+\t\t\t\t\t     parser->lexer->first_token,\n+\t\t\t\t\t     token);\n+\t}\n+      else\n+\tstart = -1;\n+      /* Consume the \"<\".  */\n+      cp_lexer_consume_token (parser->lexer);\n+      /* Parse the template arguments.  */\n+      cp_parser_enclosed_template_argument_list (parser);\n+      /* Permanently remove the invalid template arugments so that\n+\t this error message is not issued again.  */\n+      if (start >= 0)\n+\t{\n+\t  token = cp_lexer_advance_token (parser->lexer,\n+\t\t\t\t\t  parser->lexer->first_token,\n+\t\t\t\t\t  start);\n+\t  cp_lexer_purge_tokens_after (parser->lexer, token);\n+\t}\n+    }\n+}\n+\n /* Issue an error message about the fact that THING appeared in a\n    constant-expression.  Returns ERROR_MARK_NODE.  */\n \n@@ -8520,17 +8570,8 @@ cp_parser_simple_type_specifier (cp_parser* parser, cp_parser_flags flags,\n   /* There is no valid C++ program where a non-template type is\n      followed by a \"<\".  That usually indicates that the user thought\n      that the type was a template.  */\n-  if (type && cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n-    {\n-      error (\"`%T' is not a template\", TREE_TYPE (type));\n-      /* Consume the \"<\".  */\n-      cp_lexer_consume_token (parser->lexer);\n-      /* Parse the template arguments.  */\n-      cp_parser_enclosed_template_argument_list (parser);\n-      /* Attempt to recover by using the basic type, ignoring the\n-\t template arguments.  */\n-      return type;\n-    }\n+  if (type)\n+    cp_parser_check_for_invalid_template_id (parser, TREE_TYPE (type));\n \n   return type;\n }\n@@ -8827,6 +8868,11 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n     }\n   if (tag_type != enum_type)\n     cp_parser_check_class_key (tag_type, type);\n+\n+  /* A \"<\" cannot follow an elaborated type specifier.  If that\n+     happens, the user was probably trying to form a template-id.  */\n+  cp_parser_check_for_invalid_template_id (parser, type);\n+\n   return type;\n }\n \n@@ -11664,6 +11710,8 @@ cp_parser_class_head (cp_parser* parser,\n \n   pop_deferring_access_checks ();\n \n+  cp_parser_check_for_invalid_template_id (parser, id);\n+\n   /* If it's not a `:' or a `{' then we can't really be looking at a\n      class-head, since a class-head only appears as part of a\n      class-specifier.  We have to detect this situation before calling"}, {"sha": "b6883f55baffec77191e884bef629c2b0f1c4540", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee43dab5e00224b3c0ec40112e65802c966e3343", "patch": "@@ -1,3 +1,8 @@\n+2003-12-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10771\n+\t* g++.dg/template/error5.C: New test.\n+\n 2003-12-02  David Ung  <davidu@mips.com>\n \n \t* gcc.dg/compat/vector-check.h: Corrected type for var "}, {"sha": "0c793509da4031998adb3825a3d81451a65dfd78", "filename": "gcc/testsuite/g++.dg/template/error5.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee43dab5e00224b3c0ec40112e65802c966e3343/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror5.C?ref=ee43dab5e00224b3c0ec40112e65802c966e3343", "patch": "@@ -0,0 +1,6 @@\n+template <typename T>\n+struct X<T*> { // { dg-error \"not a template\" }\n+   typedef int Y;\n+};\n+\n+extern struct Z<int> s; // { dg-error \"not a template\" }"}]}