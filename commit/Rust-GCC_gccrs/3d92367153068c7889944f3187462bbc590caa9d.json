{"sha": "3d92367153068c7889944f3187462bbc590caa9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5MjM2NzE1MzA2OGM3ODg5OTQ0ZjMxODc0NjJiYmM1OTBjYWE5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-25T16:24:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-25T16:24:20Z"}, "message": "[multiple changes]\n\n2010-01-25  Bob Duff  <duff@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Array_Aggregate): Check for the case where this\n\tis an internally-generated positional aggregate, and the bounds are\n\talready correctly set. We don't want to overwrite those bounds with\n\tbounds determined by context.\n\n2010-01-25  Robert Dewar  <dewar@adacore.com>\n\n\t* g-sercom.ads, gnatcmd.adb, gnatlink.adb, a-ststio.adb, exp_ch6.adb,\n\texp_ch9.adb, g-sechas.ads: Minor reformatting.\n\n2010-01-25  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-commun.adb (Last_Index): Count must be converted to SEO (a signed\n\tinteger type) before subtracting 1, otherwise the computation may wrap\n\t(because size_t is modular) and cause the conversion to fail.\n\n2010-01-25  Ed Falis  <falis@adacore.com>\n\n\t* sysdep.c, init.c: Adapt to support full run-time on VxWorks MILS.\n\n2010-01-25  Vincent Celier  <celier@adacore.com>\n\n\t* prj-attr.adb: New attribute Run_Path_Origin_Required\n\t* prj-nmsc.adb (Process_Project_Level_Simple_Attributes): Process new\n\tattribute Run_Path_Origin_Required.\n\t* prj.ads (Project_Configuration): New component\n\tRun_Path_Origin_Supported.\n\t* snames.ads-tmpl: New standard name Run_Path_Origin_Required\n\nFrom-SVN: r156215", "tree": {"sha": "73a6d903734214bb3ccd477d21e07ab33a02e844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73a6d903734214bb3ccd477d21e07ab33a02e844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d92367153068c7889944f3187462bbc590caa9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d92367153068c7889944f3187462bbc590caa9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d92367153068c7889944f3187462bbc590caa9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d92367153068c7889944f3187462bbc590caa9d/comments", "author": null, "committer": null, "parents": [{"sha": "03d838ba0317bf85fb6c994d0dc7cfc65c64421e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d838ba0317bf85fb6c994d0dc7cfc65c64421e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d838ba0317bf85fb6c994d0dc7cfc65c64421e"}], "stats": {"total": 303, "additions": 198, "deletions": 105}, "files": [{"sha": "f3949898e5a08c6970717f78f8387e747b2ffedc", "filename": "gcc/ada/a-ststio.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fa-ststio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fa-ststio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ststio.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Interfaces.C_Streams;  use Interfaces.C_Streams;\n+with Interfaces.C_Streams; use Interfaces.C_Streams;\n \n with System;               use System;\n with System.Communication; use System.Communication;"}, {"sha": "4ab2df7b8786de8ae3037f92d2df12c5c2eff3db", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -4506,14 +4506,12 @@ package body Exp_Ch6 is\n             --  Create protected operation as well. Even though the operation\n             --  is only accessible within the body, it is possible to make it\n             --  available outside of the protected object by using 'Access to\n-            --  provide a callback, so we build the protected version in all\n-            --  cases.\n+            --  provide a callback, so build protected version in all cases.\n \n             Prot_Decl :=\n-                 Make_Subprogram_Declaration (Loc,\n-                   Specification =>\n-                     Build_Protected_Sub_Specification\n-                      (N, Scop, Protected_Mode));\n+              Make_Subprogram_Declaration (Loc,\n+                Specification =>\n+                  Build_Protected_Sub_Specification (N, Scop, Protected_Mode));\n             Insert_Before (Prot_Bod, Prot_Decl);\n             Analyze (Prot_Decl);\n "}, {"sha": "ac4399171073c329e05e32320dd99c98e0520db4", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -2602,13 +2602,12 @@ package body Exp_Ch9 is\n       else\n          New_Spec :=\n            Make_Function_Specification (Loc,\n-              Defining_Unit_Name       =>\n-                Make_Defining_Identifier (Sloc (Body_Id),\n-                  Chars => Chars (Body_Id)),\n-              Parameter_Specifications =>\n-                Plist,\n-              Result_Definition        =>\n-                New_Occurrence_Of (Etype (Body_Id), Loc));\n+             Defining_Unit_Name       =>\n+               Make_Defining_Identifier (Sloc (Body_Id),\n+                 Chars => Chars (Body_Id)),\n+             Parameter_Specifications => Plist,\n+             Result_Definition        =>\n+               New_Occurrence_Of (Etype (Body_Id), Loc));\n       end if;\n \n       Decl := Make_Subprogram_Declaration (Loc, Specification => New_Spec);"}, {"sha": "6197cfc5ec4d720fb9ee16cc3ef2d79337e10a64", "filename": "gcc/ada/g-sechas.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fg-sechas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fg-sechas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sechas.ads?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -134,11 +134,10 @@ package GNAT.Secure_Hashes is\n       --  The internal processing state of the hashing function\n \n       function \"=\" (L, R : Context) return Boolean is abstract;\n-      --  Context is the internal, implementation defined state of an\n-      --  intermediate state in a hash computation, and no specific semantics\n-      --  can be expected on equality of context values. Only equality of\n-      --  final hash values (as returned by the [Wide_]Digest functions below)\n-      --  is meaningful.\n+      --  Context is the internal, implementation defined intermediate state\n+      --  in a hash computation, and no specific semantics can be expected on\n+      --  equality of context values. Only equality of final hash values (as\n+      --  returned by the [Wide_]Digest functions below) is meaningful.\n \n       Initial_Context : constant Context;\n       --  Initial value of a Context object. May be used to reinitialize"}, {"sha": "c891cc87a255d46e7a5d7ed8d293f24d8d716a00", "filename": "gcc/ada/g-sercom.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fg-sercom.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fg-sercom.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sercom.ads?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -92,8 +92,8 @@ package GNAT.Serial_Communications is\n       Last   : out Ada.Streams.Stream_Element_Offset);\n    --  Read a set of bytes, put result into Buffer and set Last accordingly.\n    --  Last is set to Buffer'First - 1 if no byte has been read, unless\n-   --  Buffer'First = Stream_Element_Offset'First, in which case\n-   --  Constraint_Error raised instead.\n+   --  Buffer'First = Stream_Element_Offset'First, in which case the exception\n+   --  Constraint_Error is raised instead.\n \n    overriding procedure Write\n      (Port   : in out Serial_Port;"}, {"sha": "8d246759e487ffd0b97fb40977c52e2af6adccd2", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -579,7 +579,7 @@ procedure GNATCmd is\n                         Add_Char_To_Name_Buffer ('\"');\n                         Add_Str_To_Name_Buffer\n                           (Get_Name_String\n-                             (Unit.File_Names (Kind).Path.Display_Name));\n+                            (Unit.File_Names (Kind).Path.Display_Name));\n                         Add_Char_To_Name_Buffer ('\"');\n \n                         if FD /= Invalid_FD then"}, {"sha": "4469c91ec5d7f93d33a8bc9518082acb897c5056", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 62, "deletions": 57, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -1166,8 +1166,11 @@ procedure Gnatlink is\n                      Last := Nlast;\n                   end if;\n \n-                  --  Given a Gnat standard library, search the\n-                  --  library path to find the library location\n+                  --  Given a Gnat standard library, search the library path to\n+                  --  find the library location.\n+\n+                  --  Shouldn't we abstract a proc here, we are getting awfully\n+                  --  heavily nested ???\n \n                   declare\n                      File_Path : String_Access;\n@@ -1204,16 +1207,17 @@ procedure Gnatlink is\n \n                         elsif GNAT_Shared then\n                            if Opt.Run_Path_Option then\n+\n                               --  If shared gnatlib desired, add the\n                               --  appropriate system specific switch\n                               --  so that it can be located at runtime.\n \n                               if Run_Path_Opt'Length /= 0 then\n+\n                                  --  Output the system specific linker command\n                                  --  that allows the image activator to find\n-                                 --  the shared library at runtime.\n-                                 --  Also add path to find libgcc_s.so, if\n-                                 --  relevant.\n+                                 --  the shared library at runtime. Also add\n+                                 --  path to find libgcc_s.so, if relevant.\n \n                                  declare\n                                     Path : String (1 .. File_Path'Length + 15);\n@@ -1235,6 +1239,7 @@ procedure Gnatlink is\n                                       Index (Path (1 .. Path_Last), \"gcc-lib\");\n \n                                     if GCC_Index /= 0 then\n+\n                                        --  The shared version of libgcc is\n                                        --  located in the parent directory.\n \n@@ -1282,11 +1287,11 @@ procedure Gnatlink is\n                                        Linker_Options.Increment_Last;\n                                        Linker_Options.Table\n                                          (Linker_Options.Last) :=\n-                                         new String'\n-                                           (Run_Path_Opt\n-                                            & File_Path\n-                                              (1 .. File_Path'Length\n-                                               - File_Name'Length));\n+                                           new String'\n+                                             (Run_Path_Opt\n+                                              & File_Path\n+                                                (1 .. File_Path'Length\n+                                                 - File_Name'Length));\n \n                                        if GCC_Index /= 0 then\n                                           Linker_Options.Increment_Last;\n@@ -1296,20 +1301,21 @@ procedure Gnatlink is\n                                               (Run_Path_Opt\n                                                & Path (1 .. GCC_Index));\n                                        end if;\n+\n                                     else\n                                        for J in reverse\n                                          1 .. Linker_Options.Last\n                                        loop\n                                           if Linker_Options.Table (J) /= null\n                                             and then\n                                               Linker_Options.Table (J)'Length\n-                                              > Run_Path_Opt'Length\n+                                                        > Run_Path_Opt'Length\n                                             and then\n                                               Linker_Options.Table (J)\n-                                              (1 .. Run_Path_Opt'Length) =\n-                                              Run_Path_Opt\n+                                                (1 .. Run_Path_Opt'Length) =\n+                                                                 Run_Path_Opt\n                                           then\n-                                             --  We have found a already\n+                                             --  We have found an already\n                                              --  specified run_path_option: we\n                                              --  will add to this switch,\n                                              --  because only one\n@@ -1332,47 +1338,48 @@ procedure Gnatlink is\n                                           if Run_Path_Opt_Index = 0 then\n                                              Linker_Options.Table\n                                                (Linker_Options.Last) :=\n-                                               new String'\n-                                                 (Run_Path_Opt\n-                                                  & File_Path\n-                                                    (1 .. File_Path'Length\n-                                                     - File_Name'Length));\n+                                                 new String'\n+                                                   (Run_Path_Opt\n+                                                    & File_Path\n+                                                      (1 .. File_Path'Length\n+                                                       - File_Name'Length));\n \n                                           else\n                                              Linker_Options.Table\n                                                (Run_Path_Opt_Index) :=\n-                                               new String'\n-                                                 (Linker_Options.Table\n-                                                      (Run_Path_Opt_Index).all\n-                                                  & Path_Separator\n-                                                  & File_Path\n-                                                    (1 .. File_Path'Length\n-                                                     - File_Name'Length));\n+                                                 new String'\n+                                                   (Linker_Options.Table\n+                                                     (Run_Path_Opt_Index).all\n+                                                    & Path_Separator\n+                                                    & File_Path\n+                                                      (1 .. File_Path'Length\n+                                                       - File_Name'Length));\n                                           end if;\n \n                                        else\n                                           if Run_Path_Opt_Index = 0 then\n                                              Linker_Options.Table\n                                                (Linker_Options.Last) :=\n-                                               new String'(Run_Path_Opt\n-                                                 & File_Path\n-                                                   (1 .. File_Path'Length\n-                                                    - File_Name'Length)\n-                                                 & Path_Separator\n-                                                 & Path (1 .. GCC_Index));\n+                                                 new String'\n+                                                   (Run_Path_Opt\n+                                                    & File_Path\n+                                                      (1 .. File_Path'Length\n+                                                       - File_Name'Length)\n+                                                    & Path_Separator\n+                                                    & Path (1 .. GCC_Index));\n \n                                           else\n                                              Linker_Options.Table\n                                                (Run_Path_Opt_Index) :=\n-                                               new String'\n-                                                 (Linker_Options.Table\n-                                                      (Run_Path_Opt_Index).all\n-                                                  & Path_Separator\n-                                                  & File_Path\n-                                                    (1 .. File_Path'Length\n-                                                     - File_Name'Length)\n-                                                  & Path_Separator\n-                                                  & Path (1 .. GCC_Index));\n+                                                 new String'\n+                                                   (Linker_Options.Table\n+                                                     (Run_Path_Opt_Index).all\n+                                                    & Path_Separator\n+                                                    & File_Path\n+                                                      (1 .. File_Path'Length\n+                                                       - File_Name'Length)\n+                                                    & Path_Separator\n+                                                    & Path (1 .. GCC_Index));\n                                           end if;\n                                        end if;\n                                     end if;\n@@ -1490,10 +1497,9 @@ procedure Gnatlink is\n --  Start of processing for Gnatlink\n \n begin\n-   --  Add the directory where gnatlink is invoked in front of the\n-   --  path, if gnatlink is invoked with directory information.\n-   --  Only do this if the platform is not VMS, where the notion of path\n-   --  does not really exist.\n+   --  Add the directory where gnatlink is invoked in front of the path, if\n+   --  gnatlink is invoked with directory information. Only do this if the\n+   --  platform is not VMS, where the notion of path does not really exist.\n \n    if not Hostparm.OpenVMS then\n       declare\n@@ -1507,10 +1513,10 @@ begin\n                                    Normalize_Pathname\n                                      (Command (Command'First .. Index));\n \n-                  PATH         : constant String :=\n-                                   Absolute_Dir &\n-                  Path_Separator &\n-                  Getenv (\"PATH\").all;\n+                  PATH : constant String :=\n+                           Absolute_Dir &\n+                           Path_Separator &\n+                           Getenv (\"PATH\").all;\n \n                begin\n                   Setenv (\"PATH\", PATH);\n@@ -1525,8 +1531,7 @@ begin\n    Process_Args;\n \n    if Argument_Count = 0\n-     or else\n-     (Verbose_Mode and then Argument_Count = 1)\n+     or else (Verbose_Mode and then Argument_Count = 1)\n    then\n       Write_Usage;\n       Exit_Program (E_Fatal);\n@@ -1552,10 +1557,10 @@ begin\n       Exit_With_Error (Ali_File_Name.all & \" not found\");\n    end if;\n \n-   --  Read the ALI file of the main subprogram if the binder generated\n-   --  file needs to be compiled and no --GCC= switch has been specified.\n-   --  Fetch the back end switches from this ALI file and use these switches\n-   --  to compile the binder generated file\n+   --  Read the ALI file of the main subprogram if the binder generated file\n+   --  needs to be compiled and no --GCC= switch has been specified. Fetch the\n+   --  back end switches from this ALI file and use these switches to compile\n+   --  the binder generated file\n \n    if Compile_Bind_File and then Standard_Gcc then\n \n@@ -1614,8 +1619,8 @@ begin\n                             := String_Access (Arg);\n                      end if;\n \n-                     --  Set the RTS_*_Path_Name variables, so that the\n-                     --  correct directories will be set when\n+                     --  Set the RTS_*_Path_Name variables, so that\n+                     --  the correct directories will be set when\n                      --  Osint.Add_Default_Search_Dirs will be called later.\n \n                      Opt.RTS_Src_Path_Name :="}, {"sha": "28498c428a52cbee4654e08b82d31699d7c7b41f", "filename": "gcc/ada/init.c", "status": "modified", "additions": 79, "deletions": 24, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -310,8 +310,7 @@ __gnat_adjust_context_for_raise (int signo, void *ucontext)\n }\n \n static void\n-__gnat_error_handler\n-  (int sig, siginfo_t *sip, struct sigcontext *context)\n+__gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n {\n   struct Exception_Data *exception;\n   static int recurse = 0;\n@@ -582,7 +581,11 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n {\n   mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n \n-  /* On the i386 and x86-64 architectures, stack checking is performed by\n+  /* On the i386 and x86-64 architectures, we specifically detect calls to\n+     the null address and entirely fold the not-yet-fully-established frame\n+     to prevent it from stopping the unwinding.\n+\n+     On the i386 and x86-64 architectures, stack checking is performed by\n      means of probes with moving stack pointer, that is to say the probed\n      address is always the value of the stack pointer.  Upon hitting the\n      guard page, the stack pointer therefore points to an inaccessible\n@@ -602,13 +605,25 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n \n #if defined (i386)\n   unsigned long *pc = (unsigned long *)mcontext->gregs[REG_EIP];\n+  /* The call insn pushes the return address onto the stack.  Pop it.  */\n+  if (pc == NULL)\n+    {\n+      mcontext->gregs[REG_EIP] = *(unsigned long *)mcontext->gregs[REG_ESP];\n+      mcontext->gregs[REG_ESP] += 4;\n+    }\n   /* The pattern is \"orl $0x0,(%esp)\" for a probe in 32-bit mode.  */\n-  if (signo == SIGSEGV && pc && *pc == 0x00240c83)\n+  else if (signo == SIGSEGV && *pc == 0x00240c83)\n     mcontext->gregs[REG_ESP] += 4096 + 4 * sizeof (unsigned long);\n #elif defined (__x86_64__)\n   unsigned long *pc = (unsigned long *)mcontext->gregs[REG_RIP];\n+  /* The call insn pushes the return address onto the stack.  Pop it.  */\n+  if (pc == NULL)\n+    {\n+      mcontext->gregs[REG_RIP] = *(unsigned long *)mcontext->gregs[REG_RSP];\n+      mcontext->gregs[REG_RSP] += 8;\n+    }\n   /* The pattern is \"orq $0x0,(%rsp)\" for a probe in 64-bit mode.  */\n-  if (signo == SIGSEGV && pc && (*pc & 0xffffffffff) == 0x00240c8348)\n+  else if (signo == SIGSEGV && (*pc & 0xffffffffff) == 0x00240c8348)\n     mcontext->gregs[REG_RSP] += 4096 + 4 * sizeof (unsigned long);\n #elif defined (__ia64__)\n   /* ??? The IA-64 unwinder doesn't compensate for signals.  */\n@@ -624,8 +639,12 @@ __gnat_error_handler (int sig,\n                       void *ucontext)\n {\n   struct Exception_Data *exception;\n-  const char *msg;\n   static int recurse = 0;\n+  const char *msg;\n+\n+  /* Adjusting is required for every fault context, so adjust for this one\n+     now, before we possibly trigger a recursive fault below.  */\n+  __gnat_adjust_context_for_raise (sig, ucontext);\n \n   switch (sig)\n     {\n@@ -682,14 +701,8 @@ __gnat_error_handler (int sig,\n       exception = &program_error;\n       msg = \"unhandled signal\";\n     }\n-  recurse = 0;\n-\n-  /* We adjust the interrupted context here (and not in the fallback\n-     unwinding routine) because recent versions of the Native POSIX\n-     Thread Library (NPTL) are compiled with unwind information, so\n-     the fallback routine is never executed for signal frames.  */\n-  __gnat_adjust_context_for_raise (sig, ucontext);\n \n+  recurse = 0;\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n@@ -997,28 +1010,55 @@ __gnat_install_handler(void)\n /* Likewise regarding how the \"instruction pointer\" register slot can\n    be identified in signal machine contexts.  We have either \"REG_PC\"\n    or \"PC\" at hand, depending on the target CPU and Solaris version.  */\n-\n #if !defined (REG_PC)\n #define REG_PC PC\n #endif\n \n-static void __gnat_error_handler (int, siginfo_t *, ucontext_t *);\n+static void __gnat_error_handler (int, siginfo_t *, void *);\n+\n+#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n+\n+void\n+__gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n+{\n+  mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n+  unsigned long *pc = (unsigned long *)mcontext->gregs[REG_PC];\n+\n+  /* We specifically detect calls to the null address and entirely fold\n+     the not-yet-fully-established frame to prevent it from stopping the\n+     unwinding.  */\n+  if (pc == NULL)\n+#if defined (__sparc)\n+    /* The call insn moves the return address into %o7.  Move it back.  */\n+    mcontext->gregs[REG_PC] = mcontext->gregs[REG_O7];\n+#elif defined (i386)\n+    {\n+      /* The call insn pushes the return address onto the stack.  Pop it.  */\n+      mcontext->gregs[REG_PC] = *(unsigned long *)mcontext->gregs[UESP];\n+      mcontext->gregs[UESP] += 4;\n+    }\n+#elif defined (__x86_64__)\n+    {\n+      /* The call insn pushes the return address onto the stack.  Pop it.  */\n+      mcontext->gregs[REG_PC] = *(unsigned long *)mcontext->gregs[REG_RSP];\n+      mcontext->gregs[REG_RSP] += 8;\n+    }\n+#else\n+#error architecture not supported on Solaris\n+#endif\n+}\n \n static void\n-__gnat_error_handler (int sig, siginfo_t *sip, ucontext_t *cx ATTRIBUTE_UNUSED)\n+__gnat_error_handler (int sig, siginfo_t *sip, void *ucontext)\n {\n   struct Exception_Data *exception;\n   static int recurse = 0;\n   const char *msg;\n \n-  /* If this was an explicit signal from a \"kill\", just resignal it.  */\n-  if (SI_FROMUSER (sip))\n-    {\n-      signal (sig, SIG_DFL);\n-      kill (getpid(), sig);\n-    }\n+  /* Adjusting is required for every fault context, so adjust for this one\n+     now, before we possibly trigger a recursive fault below.  */\n+  __gnat_adjust_context_for_raise (sig, ucontext);\n \n-  /* Otherwise, treat it as something we handle.  */\n   switch (sig)\n     {\n     case SIGSEGV:\n@@ -1030,6 +1070,7 @@ __gnat_error_handler (int sig, siginfo_t *sip, ucontext_t *cx ATTRIBUTE_UNUSED)\n \t much too hard to do anything else and we're just determining\n \t which exception to raise.  */\n       if (sip->si_code == SEGV_ACCERR\n+\t  || (long) sip->si_addr == 0\n \t  || (((long) sip->si_addr) & 3) != 0\n \t  || recurse)\n \t{\n@@ -1066,7 +1107,6 @@ __gnat_error_handler (int sig, siginfo_t *sip, ucontext_t *cx ATTRIBUTE_UNUSED)\n     }\n \n   recurse = 0;\n-\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n@@ -1816,6 +1856,20 @@ __gnat_map_signal (int sig)\n       msg = \"SIGFPE\";\n       break;\n #ifdef VTHREADS\n+#ifdef __VXWORKSMILS__\n+    case SIGILL:\n+      exception = &storage_error;\n+      msg = \"SIGILL: possible stack overflow\";\n+      break;\n+    case SIGSEGV:\n+      exception = &storage_error;\n+      msg = \"SIGSEGV\";\n+      break;\n+    case SIGBUS:\n+      exception = &program_error;\n+      msg = \"SIGBUS\";\n+      break;\n+#else\n     case SIGILL:\n       exception = &constraint_error;\n       msg = \"Floating point exception or SIGILL\";\n@@ -1828,6 +1882,7 @@ __gnat_map_signal (int sig)\n       exception = &storage_error;\n       msg = \"SIGBUS: possible stack overflow\";\n       break;\n+#endif\n #elif (_WRS_VXWORKS_MAJOR == 6)\n     case SIGILL:\n       exception = &constraint_error;"}, {"sha": "74b0269a57fd8c65bcc85ea3ac1cd4a5db69c91a", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -112,6 +112,7 @@ package body Prj.Attr is\n \n    \"SVdefault_language#\" &\n    \"LVrun_path_option#\" &\n+   \"SVrun_path_origin_supported#\" &\n    \"SVseparate_run_path_options#\" &\n    \"Satoolchain_version#\" &\n    \"Satoolchain_description#\" &"}, {"sha": "6c45f5433dc820cbc8d988110b580dd830d28eb0", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -2093,6 +2093,22 @@ package body Prj.Nmsc is\n                           In_Tree   => Data.Tree);\n                   end if;\n \n+               elsif Attribute.Name = Name_Run_Path_Origin_Supported then\n+                  declare\n+                     pragma Unsuppress (All_Checks);\n+                  begin\n+                     Project.Config.Run_Path_Origin_Supported :=\n+                       Boolean'Value (Get_Name_String (Attribute.Value.Value));\n+                  exception\n+                     when Constraint_Error =>\n+                        Error_Msg\n+                          (Data.Flags,\n+                           \"invalid value \"\"\" &\n+                           Get_Name_String (Attribute.Value.Value) &\n+                           \"\"\" for Run_Path_Origin_Supported\",\n+                           Attribute.Value.Location, Project);\n+                  end;\n+\n                elsif Attribute.Name = Name_Separate_Run_Path_Options then\n                   declare\n                      pragma Unsuppress (All_Checks);"}, {"sha": "2bdaa756450f3eef6589818e5615d3a21e13bce1", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -906,6 +906,10 @@ package Prj is\n       --  The option to use when linking to specify the path where to look for\n       --  libraries.\n \n+      Run_Path_Origin_Supported : Boolean := False;\n+      --  Specify if the run path option support $ORIGIN to indicate paths\n+      --  reative to the directory of the executable.\n+\n       Separate_Run_Path_Options : Boolean := False;\n       --  True if each directory needs to be specified in a separate run path\n       --  option.\n@@ -1017,6 +1021,7 @@ package Prj is\n    Default_Project_Config : constant Project_Configuration :=\n                               (Target                        => No_Name,\n                                Run_Path_Option               => No_Name_List,\n+                               Run_Path_Origin_Supported     => False,\n                                Separate_Run_Path_Options     => False,\n                                Executable_Suffix             => No_Name,\n                                Linker                        => No_Path,"}, {"sha": "afeec6dfcce58fb46c18ab4a6d8b29ceae642722", "filename": "gcc/ada/s-commun.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fs-commun.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fs-commun.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-commun.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -48,7 +48,7 @@ package body System.Communication is\n          raise Constraint_Error with\n            \"last index out of range (no element transferred)\";\n       else\n-         return First + SEO (Count - 1);\n+         return First + SEO (Count) - 1;\n       end if;\n    end Last_Index;\n "}, {"sha": "6c0177968d6d0564014d3432dbe9b0189a8a282b", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -2173,6 +2173,16 @@ package body Sem_Aggr is\n          end if;\n       end if;\n \n+      --  If the aggregate already has bounds attached to it, it means this is\n+      --  a positional aggregate created as an optimization by\n+      --  Exp_Aggr.Convert_To_Positional, so we don't want to change those\n+      --  bounds.\n+\n+      if Present (Aggregate_Bounds (N)) and then not Others_Allowed then\n+         Aggr_Low := Low_Bound (Aggregate_Bounds (N));\n+         Aggr_High := High_Bound (Aggregate_Bounds (N));\n+      end if;\n+\n       Set_Aggregate_Bounds\n         (N, Make_Range (Loc, Low_Bound => Aggr_Low, High_Bound => Aggr_High));\n "}, {"sha": "d1ed4b4ad69698515463cb53b99a79a2cae7d8ae", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -1130,6 +1130,7 @@ package Snames is\n    Name_Roots                            : constant Name_Id := N + $; --  GPR\n    Name_Required_Switches                : constant Name_Id := N + $;\n    Name_Run_Path_Option                  : constant Name_Id := N + $;\n+   Name_Run_Path_Origin_Supported        : constant Name_Id := N + $;\n    Name_Separate_Run_Path_Options        : constant Name_Id := N + $;\n    Name_Shared_Library_Minimum_Switches  : constant Name_Id := N + $;\n    Name_Shared_Library_Prefix            : constant Name_Id := N + $;"}, {"sha": "13a11cc827a0cd343a78a3ebea7b2336834e2184", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d92367153068c7889944f3187462bbc590caa9d/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=3d92367153068c7889944f3187462bbc590caa9d", "patch": "@@ -34,8 +34,10 @@\n \n #ifdef __vxworks\n #include \"ioLib.h\"\n+#if ! defined (__VXWORKSMILS__)\n #include \"dosFsLib.h\"\n-#if ! defined ( __RTP__) && ! defined (VTHREADS)\n+#endif\n+#if ! defined (__RTP__) && ! defined (VTHREADS)\n # include \"nfsLib.h\"\n #endif\n #include \"selectLib.h\"\n@@ -985,7 +987,9 @@ __gnat_is_file_not_found_error (int errno_val) {\n       /* In the case of VxWorks, we also have to take into account various\n        * filesystem-specific variants of this error.\n        */\n+#if ! defined (__VXWORKSMILS__)\n       case S_dosFsLib_FILE_NOT_FOUND:\n+#endif\n #if ! defined (__RTP__) && ! defined (VTHREADS)\n       case S_nfsLib_NFSERR_NOENT:\n #endif"}]}