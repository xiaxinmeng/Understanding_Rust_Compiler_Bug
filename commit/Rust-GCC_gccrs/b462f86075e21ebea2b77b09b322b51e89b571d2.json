{"sha": "b462f86075e21ebea2b77b09b322b51e89b571d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ2MmY4NjA3NWUyMWViZWEyYjc3YjA5YjMyMmI1MWU4OWI1NzFkMg==", "commit": {"author": {"name": "Svante Signell", "email": "svante.signell@gmail.com", "date": "2016-03-16T10:04:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-03-16T10:04:01Z"}, "message": "Makefile.in: Add support for x86 GNU/Hurd.\n\n\t* gcc-interface/Makefile.in: Add support for x86 GNU/Hurd.\n\t* s-osinte-gnu.ads: New file.\n\nFrom-SVN: r234252", "tree": {"sha": "0d04201d8f6ad8b02b5533fffff2ab9cccce6f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d04201d8f6ad8b02b5533fffff2ab9cccce6f9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b462f86075e21ebea2b77b09b322b51e89b571d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b462f86075e21ebea2b77b09b322b51e89b571d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b462f86075e21ebea2b77b09b322b51e89b571d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b462f86075e21ebea2b77b09b322b51e89b571d2/comments", "author": {"login": "gnu-srs", "id": 8969044, "node_id": "MDQ6VXNlcjg5NjkwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8969044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnu-srs", "html_url": "https://github.com/gnu-srs", "followers_url": "https://api.github.com/users/gnu-srs/followers", "following_url": "https://api.github.com/users/gnu-srs/following{/other_user}", "gists_url": "https://api.github.com/users/gnu-srs/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnu-srs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnu-srs/subscriptions", "organizations_url": "https://api.github.com/users/gnu-srs/orgs", "repos_url": "https://api.github.com/users/gnu-srs/repos", "events_url": "https://api.github.com/users/gnu-srs/events{/privacy}", "received_events_url": "https://api.github.com/users/gnu-srs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7662b718e1f0e5abc8b5f3f02e87495fb6d09f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7662b718e1f0e5abc8b5f3f02e87495fb6d09f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7662b718e1f0e5abc8b5f3f02e87495fb6d09f95"}], "stats": {"total": 837, "additions": 836, "deletions": 1}, "files": [{"sha": "e915dd57c8168b41da3706597a621a465d22dd13", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b462f86075e21ebea2b77b09b322b51e89b571d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b462f86075e21ebea2b77b09b322b51e89b571d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b462f86075e21ebea2b77b09b322b51e89b571d2", "patch": "@@ -1,3 +1,8 @@\n+2016-03-16  Svante Signell  <svante.signell@gmail.com>\n+\n+\t* gcc-interface/Makefile.in: Add support for x86 GNU/Hurd.\n+\t* s-osinte-gnu.ads: New file.\n+\n 2016-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* system-vxworks-m68k.ads (Stack_Check_Probes): Set to True."}, {"sha": "bfc718b38bbae741c6707856e50791d84fbf9475", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b462f86075e21ebea2b77b09b322b51e89b571d2/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b462f86075e21ebea2b77b09b322b51e89b571d2/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=b462f86075e21ebea2b77b09b322b51e89b571d2", "patch": "@@ -1,5 +1,5 @@\n # Makefile for GNU Ada Compiler (GNAT).\n-#   Copyright (C) 1994-2015 Free Software Foundation, Inc.\n+#   Copyright (C) 1994-2016 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -1420,6 +1420,35 @@ ifeq ($(strip $(filter-out %86 kfreebsd%,$(target_cpu) $(target_os))),)\n   MISCLIB = -lutil\n endif\n \n+# i[3456]86-pc-gnu i.e. GNU Hurd\n+ifeq ($(strip $(filter-out %86 pc gnu,$(target_cpu) $(target_vendor) $(target_os))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<a-intnam-freebsd.ads \\\n+  s-inmaop.adb<s-inmaop-posix.adb \\\n+  s-intman.adb<s-intman-posix.adb \\\n+  s-osinte.adb<s-osinte-posix.adb \\\n+  s-osinte.ads<s-osinte-gnu.ads \\\n+  s-osprim.adb<s-osprim-posix.adb \\\n+  s-taprop.adb<s-taprop-posix.adb \\\n+  s-taspri.ads<s-taspri-posix.ads \\\n+  s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n+  $(ATOMICS_TARGET_PAIRS) \\\n+  $(X86_TARGET_PAIRS) \\\n+  system.ads<system-freebsd-x86.ads\n+\n+  TOOLS_TARGET_PAIRS =  \\\n+    mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n+    indepsw.adb<indepsw-gnu.adb\n+\n+  EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n+\n+  EH_MECHANISM=-gcc\n+  THREADSLIB = -lpthread\n+  GNATLIB_SHARED = gnatlib-shared-dual\n+  GMEM_LIB = gmemlib\n+  LIBRARY_VERSION := $(LIB_VERSION)\n+endif\n+\n ifeq ($(strip $(filter-out x86_64 kfreebsd%,$(target_cpu) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-freebsd.ads \\"}, {"sha": "b3397c1ea8e4a15e8c431fe6fd410e32262df378", "filename": "gcc/ada/s-osinte-gnu.ads", "status": "added", "additions": 801, "deletions": 0, "changes": 801, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b462f86075e21ebea2b77b09b322b51e89b571d2/gcc%2Fada%2Fs-osinte-gnu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b462f86075e21ebea2b77b09b322b51e89b571d2/gcc%2Fada%2Fs-osinte-gnu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-gnu.ads?ref=b462f86075e21ebea2b77b09b322b51e89b571d2", "patch": "@@ -0,0 +1,801 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--             Copyright (C) 1991-1994, Florida State University            --\n+--          Copyright (C) 1995-2016, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the GNU/Hurd (POSIX Threads) version of this package\n+\n+--  This package encapsulates all direct interfaces to OS services\n+--  that are needed by children of System.\n+\n+--  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n+--  Preelaborate. This package is designed to be a bottom-level (leaf) package\n+\n+with Interfaces.C;\n+with Unchecked_Conversion;\n+\n+package System.OS_Interface is\n+   pragma Preelaborate;\n+\n+   pragma Linker_Options (\"-lpthread\");\n+   pragma Linker_Options (\"-lrt\");\n+\n+   subtype int            is Interfaces.C.int;\n+   subtype char           is Interfaces.C.char;\n+   subtype short          is Interfaces.C.short;\n+   subtype long           is Interfaces.C.long;\n+   subtype unsigned       is Interfaces.C.unsigned;\n+   subtype unsigned_short is Interfaces.C.unsigned_short;\n+   subtype unsigned_long  is Interfaces.C.unsigned_long;\n+   subtype unsigned_char  is Interfaces.C.unsigned_char;\n+   subtype plain_char     is Interfaces.C.plain_char;\n+   subtype size_t         is Interfaces.C.size_t;\n+\n+   -----------\n+   -- Errno --\n+   -----------\n+   --  From /usr/include/i386-gnu/bits/errno.h\n+\n+   function errno return int;\n+   pragma Import (C, errno, \"__get_errno\");\n+\n+   EAGAIN   : constant := 1073741859;\n+   EINTR    : constant := 1073741828;\n+   EINVAL   : constant := 1073741846;\n+   ENOMEM   : constant := 1073741836;\n+   EPERM    : constant := 1073741825;\n+   ETIMEDOUT    : constant := 1073741884;\n+\n+   -------------\n+   -- Signals --\n+   -------------\n+   --  From /usr/include/i386-gnu/bits/signum.h\n+\n+   Max_Interrupt : constant := 32;\n+   type Signal is new int range 0 .. Max_Interrupt;\n+   for Signal'Size use int'Size;\n+\n+   SIGHUP     : constant := 1; --  hangup\n+   SIGINT     : constant := 2; --  interrupt (rubout)\n+   SIGQUIT    : constant := 3; --  quit (ASCD FS)\n+   SIGILL     : constant := 4; --  illegal instruction (not reset)\n+   SIGTRAP    : constant := 5; --  trace trap (not reset)\n+   SIGIOT     : constant := 6; --  IOT instruction\n+   SIGABRT    : constant := 6; --  used by abort, replace SIGIOT in the  future\n+   SIGEMT     : constant := 7; --  EMT instruction\n+   SIGFPE     : constant := 8; --  floating point exception\n+   SIGKILL    : constant := 9; --  kill (cannot be caught or ignored)\n+   SIGBUS     : constant := 10; --  bus error\n+   SIGSEGV    : constant := 11; --  segmentation violation\n+   SIGSYS     : constant := 12; --  bad argument to system call\n+   SIGPIPE    : constant := 13; --  write on a pipe with no one to read it\n+   SIGALRM    : constant := 14; --  alarm clock\n+   SIGTERM    : constant := 15; --  software termination signal from kill\n+   SIGURG     : constant := 16; --  urgent condition on IO channel\n+   SIGSTOP    : constant := 17; --  stop (cannot be caught or ignored)\n+   SIGTSTP    : constant := 18; --  user stop requested from tty\n+   SIGCONT    : constant := 19; --  stopped process has been continued\n+   SIGCLD     : constant := 20; --  alias for SIGCHLD\n+   SIGCHLD    : constant := 20; --  child status change\n+   SIGTTIN    : constant := 21; --  background tty read attempted\n+   SIGTTOU    : constant := 22; --  background tty write attempted\n+   SIGIO      : constant := 23; --  I/O possible (Solaris SIGPOLL alias)\n+   SIGPOLL    : constant := 23; --  I/O possible (same as SIGIO?)\n+   SIGXCPU    : constant := 24; --  CPU time limit exceeded\n+   SIGXFSZ    : constant := 25; --  filesize limit exceeded\n+   SIGVTALRM  : constant := 26; --  virtual timer expired\n+   SIGPROF    : constant := 27; --  profiling timer expired\n+   SIGWINCH   : constant := 28; --  window size change\n+   SIGINFO    : constant := 29; --  information request (NetBSD/FreeBSD)\n+   SIGUSR1    : constant := 30; --  user defined signal 1\n+   SIGUSR2    : constant := 31; --  user defined signal 2\n+   SIGLOST    : constant := 32; --  Resource lost (Sun); server died (GNU)\n+\n+   SIGADAABORT : constant := SIGABRT;\n+   --  Change this if you want to use another signal for task abort.\n+   --  SIGTERM might be a good one.\n+\n+   type Signal_Set is array (Natural range <>) of Signal;\n+\n+   Unmasked    : constant Signal_Set := (\n+      SIGTRAP,\n+      --  To enable debugging on multithreaded applications, mark SIGTRAP to\n+      --  be kept unmasked.\n+\n+      SIGBUS,\n+\n+      SIGTTIN, SIGTTOU, SIGTSTP,\n+      --  Keep these three signals unmasked so that background processes\n+      --  and IO behaves as normal \"C\" applications\n+\n+      SIGPROF,\n+      --  To avoid confusing the profiler\n+\n+      SIGKILL, SIGSTOP);\n+      --  These two signals actually cannot be masked;\n+      --  POSIX simply won't allow it.\n+\n+   Reserved    : constant Signal_Set :=\n+   --  I am not sure why the following signal is reserved.\n+   --  I guess they are not supported by this version of GNU/Hurd.\n+     (0 .. 0 => SIGVTALRM);\n+\n+   type sigset_t is private;\n+\n+   --  From /usr/include/signal.h /usr/include/i386-gnu/bits/sigset.h\n+   function sigaddset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigaddset, \"sigaddset\");\n+\n+   function sigdelset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigdelset, \"sigdelset\");\n+\n+   function sigfillset (set : access sigset_t) return int;\n+   pragma Import (C, sigfillset, \"sigfillset\");\n+\n+   function sigismember (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigismember, \"sigismember\");\n+\n+   function sigemptyset (set : access sigset_t) return int;\n+   pragma Import (C, sigemptyset, \"sigemptyset\");\n+\n+   --  sigcontext is architecture dependent, so define it private\n+   type struct_sigcontext is private;\n+\n+   --  From /usr/include/i386-gnu/bits/sigaction.h: Note: arg. order differs\n+   type struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_mask    : sigset_t;\n+      sa_flags   : int;\n+   end record;\n+   pragma Convention (C, struct_sigaction);\n+\n+   type struct_sigaction_ptr is access all struct_sigaction;\n+\n+   --  From /usr/include/i386-gnu/bits/sigaction.h\n+   SIG_BLOCK   : constant := 1;\n+   SIG_UNBLOCK : constant := 2;\n+   SIG_SETMASK : constant := 3;\n+\n+   --  From /usr/include/i386-gnu/bits/signum.h\n+   SIG_ERR  : constant := 1;\n+   SIG_DFL  : constant := 0;\n+   SIG_IGN  : constant := 1;\n+   SIG_HOLD : constant := 2;\n+\n+   --  From /usr/include/i386-gnu/bits/sigaction.h\n+   SA_SIGINFO : constant := 16#0040#;\n+   SA_ONSTACK : constant := 16#0001#;\n+\n+   function sigaction\n+     (sig  : Signal;\n+      act  : struct_sigaction_ptr;\n+      oact : struct_sigaction_ptr) return int;\n+   pragma Import (C, sigaction, \"sigaction\");\n+\n+   ----------\n+   -- Time --\n+   ----------\n+\n+   Time_Slice_Supported : constant Boolean := True;\n+   --  Indicates whether time slicing is supported (i.e SCHED_RR is supported)\n+\n+   type timespec is private;\n+\n+   function nanosleep (rqtp, rmtp : access timespec) return int;\n+   pragma Import (C, nanosleep, \"nanosleep\");\n+\n+   type clockid_t is new int;\n+   CLOCK_REALTIME : constant clockid_t := 0;\n+\n+   --  From: /usr/include/time.h\n+   function clock_gettime\n+     (clock_id : clockid_t;\n+      tp       : access timespec)\n+      return int;\n+   pragma Import (C, clock_gettime, \"clock_gettime\");\n+\n+   function clock_getres\n+     (clock_id : clockid_t;\n+      res      : access timespec) return int;\n+   pragma Import (C, clock_getres, \"clock_getres\");\n+\n+   function To_Duration (TS : timespec) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timespec (D : Duration) return timespec;\n+   pragma Inline (To_Timespec);\n+\n+   --  From: /usr/include/unistd.h\n+   function sysconf (name : int) return long;\n+   pragma Import (C, sysconf);\n+\n+   --  From /usr/include/i386-gnu/bits/confname.h\n+   SC_CLK_TCK          : constant := 2;\n+   SC_NPROCESSORS_ONLN : constant := 84;\n+\n+   -------------------------\n+   -- Priority Scheduling --\n+   -------------------------\n+   --  From /usr/include/i386-gnu/bits/sched.h\n+\n+   SCHED_OTHER : constant := 0;\n+   SCHED_FIFO  : constant := 1;\n+   SCHED_RR    : constant := 2;\n+\n+   function To_Target_Priority\n+     (Prio : System.Any_Priority) return Interfaces.C.int;\n+   --  Maps System.Any_Priority to a POSIX priority.\n+\n+   -------------\n+   -- Process --\n+   -------------\n+\n+   type pid_t is private;\n+\n+   --  From: /usr/include/signal.h\n+   function kill (pid : pid_t; sig : Signal) return int;\n+   pragma Import (C, kill, \"kill\");\n+\n+   --  From: /usr/include/unistd.h\n+   function getpid return pid_t;\n+   pragma Import (C, getpid, \"getpid\");\n+\n+   ---------\n+   -- LWP --\n+   ---------\n+\n+   --  From: /usr/include/pthread/pthread.h\n+   function lwp_self return System.Address;\n+   --  lwp_self does not exist on this thread library, revert to pthread_self\n+   --  which is the closest approximation (with getpid). This function is\n+   --  needed to share 7staprop.adb across POSIX-like targets.\n+   pragma Import (C, lwp_self, \"pthread_self\");\n+\n+   -------------\n+   -- Threads --\n+   -------------\n+\n+   type Thread_Body is access\n+     function (arg : System.Address) return System.Address;\n+   pragma Convention (C, Thread_Body);\n+\n+   function Thread_Body_Access is new\n+     Unchecked_Conversion (System.Address, Thread_Body);\n+\n+   --  From: /usr/include/bits/pthread.h:typedef int __pthread_t;\n+   --  /usr/include/pthread/pthreadtypes.h:typedef __pthread_t pthread_t;\n+   type pthread_t is new unsigned_long;\n+   subtype Thread_Id        is pthread_t;\n+\n+   function To_pthread_t is new Unchecked_Conversion\n+     (unsigned_long, pthread_t);\n+\n+   type pthread_mutex_t     is limited private;\n+   type pthread_rwlock_t     is limited private;\n+   type pthread_cond_t      is limited private;\n+   type pthread_attr_t      is limited private;\n+   type pthread_mutexattr_t is limited private;\n+   type pthread_rwlockattr_t is limited private;\n+   type pthread_condattr_t  is limited private;\n+   type pthread_key_t       is private;\n+\n+   --  From /usr/include/pthread/pthreadtypes.h\n+   PTHREAD_CREATE_DETACHED : constant := 1;\n+   PTHREAD_CREATE_JOINABLE : constant := 0;\n+\n+   PTHREAD_SCOPE_PROCESS : constant := 1;\n+   PTHREAD_SCOPE_SYSTEM  : constant := 0;\n+\n+   -----------\n+   -- Stack --\n+   -----------\n+\n+   --  From: /usr/include/i386-gnu/bits/sigstack.h\n+   type stack_t is record\n+      ss_sp    : System.Address;\n+      ss_size  : size_t;\n+      ss_flags : int;\n+   end record;\n+   pragma Convention (C, stack_t);\n+\n+   function sigaltstack\n+     (ss  : not null access stack_t;\n+      oss : access stack_t) return int;\n+   pragma Import (C, sigaltstack, \"sigaltstack\");\n+\n+   Alternate_Stack : aliased System.Address;\n+   --  This is a dummy definition, never used (Alternate_Stack_Size is null)\n+\n+   Alternate_Stack_Size : constant := 0;\n+   --  No alternate signal stack is used on this platform\n+\n+   Stack_Base_Available : constant Boolean := False;\n+   --  Indicates whether the stack base is available on this target\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address;\n+   pragma Inline (Get_Stack_Base);\n+   --  returns the stack base of the specified thread. Only call this function\n+   --  when Stack_Base_Available is True.\n+\n+   --  From: /usr/include/unistd.h __getpagesize or getpagesize??\n+   function Get_Page_Size return int;\n+   pragma Import (C, Get_Page_Size, \"__getpagesize\");\n+   --  Returns the size of a page\n+\n+   --  From /usr/include/i386-gnu/bits/mman.h\n+   PROT_NONE  : constant := 0;\n+   PROT_READ  : constant := 4;\n+   PROT_WRITE : constant := 2;\n+   PROT_EXEC  : constant := 1;\n+   PROT_ALL   : constant := PROT_READ + PROT_WRITE + PROT_EXEC;\n+   PROT_ON    : constant := PROT_NONE;\n+   PROT_OFF   : constant := PROT_ALL;\n+\n+   --  From /usr/include/i386-gnu/bits/mman.h\n+   function mprotect (addr : Address; len : size_t; prot : int) return int;\n+   pragma Import (C, mprotect);\n+\n+   ---------------------------------------\n+   -- Nonstandard Thread Initialization --\n+   ---------------------------------------\n+\n+   procedure pthread_init;\n+   pragma Inline (pthread_init);\n+   --  This is a dummy procedure to share some GNULLI files\n+\n+   -------------------------\n+   -- POSIX.1c  Section 3 --\n+   -------------------------\n+\n+   --  From: /usr/include/signal.h:\n+   --  sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)\n+   function sigwait (set : access sigset_t; sig : access Signal) return int;\n+   pragma Import (C, sigwait, \"sigwait\");\n+\n+   --  From: /usr/include/pthread/pthread.h:\n+   --  extern int pthread_kill (pthread_t thread, int signo);\n+   function pthread_kill (thread : pthread_t; sig : Signal) return int;\n+   pragma Import (C, pthread_kill, \"pthread_kill\");\n+\n+   --  From: /usr/include/i386-gnu/bits/sigthread.h\n+   --  extern int pthread_sigmask (int __how, __const __sigset_t *__newmask,\n+   --  __sigset_t *__oldmask) __THROW;\n+   function pthread_sigmask\n+     (how  : int;\n+      set  : access sigset_t;\n+      oset : access sigset_t) return int;\n+   pragma Import (C, pthread_sigmask, \"pthread_sigmask\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 11 --\n+   --------------------------\n+\n+   --  From: /usr/include/pthread/pthread.h and\n+   --  /usr/include/pthread/pthreadtypes.h\n+   function pthread_mutexattr_init\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_init, \"pthread_mutexattr_init\");\n+\n+   function pthread_mutexattr_destroy\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_destroy, \"pthread_mutexattr_destroy\");\n+\n+   function pthread_mutex_init\n+     (mutex : access pthread_mutex_t;\n+      attr  : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutex_init, \"pthread_mutex_init\");\n+\n+   function pthread_mutex_destroy (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_destroy, \"pthread_mutex_destroy\");\n+\n+   function pthread_mutex_lock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_lock, \"pthread_mutex_lock\");\n+\n+   function pthread_mutex_unlock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_unlock, \"pthread_mutex_unlock\");\n+\n+   function pthread_rwlockattr_init\n+     (attr : access pthread_rwlockattr_t) return int;\n+   pragma Import (C, pthread_rwlockattr_init, \"pthread_rwlockattr_init\");\n+\n+   function pthread_rwlockattr_destroy\n+     (attr : access pthread_rwlockattr_t) return int;\n+   pragma Import (C, pthread_rwlockattr_destroy, \"pthread_rwlockattr_destroy\");\n+   PTHREAD_RWLOCK_PREFER_READER_NP              : constant := 0;\n+   PTHREAD_RWLOCK_PREFER_WRITER_NP              : constant := 1;\n+   PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP : constant := 2;\n+\n+   function pthread_rwlockattr_setkind_np\n+     (attr : access pthread_rwlockattr_t;\n+      pref : int) return int;\n+   pragma Import\n+     (C, pthread_rwlockattr_setkind_np, \"pthread_rwlockattr_setkind_np\");\n+\n+   function pthread_rwlock_init\n+     (mutex : access pthread_rwlock_t;\n+      attr  : access pthread_rwlockattr_t) return int;\n+   pragma Import (C, pthread_rwlock_init, \"pthread_rwlock_init\");\n+\n+   function pthread_rwlock_destroy\n+     (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_destroy, \"pthread_rwlock_destroy\");\n+\n+   function pthread_rwlock_rdlock (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_rdlock, \"pthread_rwlock_rdlock\");\n+\n+   function pthread_rwlock_wrlock (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_wrlock, \"pthread_rwlock_wrlock\");\n+\n+   function pthread_rwlock_unlock (mutex : access pthread_rwlock_t) return int;\n+   pragma Import (C, pthread_rwlock_unlock, \"pthread_rwlock_unlock\");\n+\n+   function pthread_condattr_init\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_init, \"pthread_condattr_init\");\n+\n+   function pthread_condattr_destroy\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_destroy, \"pthread_condattr_destroy\");\n+\n+   function pthread_cond_init\n+     (cond : access pthread_cond_t;\n+      attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_cond_init, \"pthread_cond_init\");\n+\n+   function pthread_cond_destroy (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_destroy, \"pthread_cond_destroy\");\n+\n+   function pthread_cond_signal (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_signal, \"pthread_cond_signal\");\n+\n+   function pthread_cond_wait\n+     (cond  : access pthread_cond_t;\n+      mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_cond_wait, \"pthread_cond_wait\");\n+\n+   function pthread_cond_timedwait\n+     (cond    : access pthread_cond_t;\n+      mutex   : access pthread_mutex_t;\n+      abstime : access timespec) return int;\n+   pragma Import (C, pthread_cond_timedwait, \"pthread_cond_timedwait\");\n+\n+   Relative_Timed_Wait : constant Boolean := False;\n+   --  pthread_cond_timedwait requires an absolute delay time\n+\n+   --------------------------\n+   -- POSIX.1c  Section 13 --\n+   --------------------------\n+   --  From /usr/include/pthread/pthreadtypes.h\n+\n+   PTHREAD_PRIO_NONE    : constant := 0;\n+   PTHREAD_PRIO_PROTECT : constant := 2;\n+   PTHREAD_PRIO_INHERIT : constant := 1;\n+\n+   --  From: /usr/include/pthread/pthread.h\n+   function pthread_mutexattr_setprotocol\n+     (attr     : access pthread_mutexattr_t;\n+      protocol : int) return int;\n+   pragma Import (C, pthread_mutexattr_setprotocol,\n+     \"pthread_mutexattr_setprotocol\");\n+\n+   function pthread_mutexattr_getprotocol\n+     (attr     : access pthread_mutexattr_t;\n+      protocol : access int) return int;\n+   pragma Import (C, pthread_mutexattr_getprotocol,\n+     \"pthread_mutexattr_getprotocol\");\n+\n+   function pthread_mutexattr_setprioceiling\n+     (attr     : access pthread_mutexattr_t;\n+      prioceiling : int) return int;\n+   pragma Import (C, pthread_mutexattr_setprioceiling,\n+     \"pthread_mutexattr_setprioceiling\");\n+\n+   function pthread_mutexattr_getprioceiling\n+     (attr     : access pthread_mutexattr_t;\n+      prioceiling : access int) return int;\n+   pragma Import (C, pthread_mutexattr_getprioceiling,\n+     \"pthread_mutexattr_getprioceiling\");\n+\n+   type struct_sched_param is record\n+      sched_priority : int;  --  scheduling priority\n+   end record;\n+   pragma Convention (C, struct_sched_param);\n+\n+   function pthread_setschedparam\n+     (thread : pthread_t;\n+      policy : int;\n+      param  : access struct_sched_param) return int;\n+   pragma Import (C, pthread_setschedparam, \"pthread_setschedparam\");\n+\n+   function pthread_attr_setscope\n+     (attr            : access pthread_attr_t;\n+      contentionscope : int) return int;\n+   pragma Import (C, pthread_attr_setscope, \"pthread_attr_setscope\");\n+\n+   function pthread_attr_getscope\n+     (attr            : access pthread_attr_t;\n+      contentionscope : access int) return int;\n+   pragma Import (C, pthread_attr_getscope, \"pthread_attr_getscope\");\n+\n+   function pthread_attr_setinheritsched\n+     (attr            : access pthread_attr_t;\n+      inheritsched : int) return int;\n+   pragma Import (C, pthread_attr_setinheritsched,\n+     \"pthread_attr_setinheritsched\");\n+\n+   function pthread_attr_getinheritsched\n+     (attr         : access pthread_attr_t;\n+      inheritsched : access int) return int;\n+   pragma Import (C, pthread_attr_getinheritsched,\n+     \"pthread_attr_getinheritsched\");\n+\n+   function pthread_attr_setschedpolicy\n+     (attr   : access pthread_attr_t;\n+      policy : int) return int;\n+   pragma Import (C, pthread_attr_setschedpolicy, \"pthread_setschedpolicy\");\n+\n+   function sched_yield return int;\n+   pragma Import (C, sched_yield, \"sched_yield\");\n+\n+   ---------------------------\n+   -- P1003.1c - Section 16 --\n+   ---------------------------\n+\n+   function pthread_attr_init\n+     (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_init, \"pthread_attr_init\");\n+\n+   function pthread_attr_destroy\n+     (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_destroy, \"pthread_attr_destroy\");\n+\n+   function pthread_attr_setdetachstate\n+     (attr        : access pthread_attr_t;\n+      detachstate : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setdetachstate, \"pthread_attr_setdetachstate\");\n+\n+   function pthread_attr_setstacksize\n+     (attr      : access pthread_attr_t;\n+      stacksize : size_t) return int;\n+   pragma Import (C, pthread_attr_setstacksize, \"pthread_attr_setstacksize\");\n+\n+   --  From: /usr/include/pthread/pthread.h\n+   function pthread_create\n+     (thread        : access pthread_t;\n+      attributes    : access pthread_attr_t;\n+      start_routine : Thread_Body;\n+      arg           : System.Address) return int;\n+   pragma Import (C, pthread_create, \"pthread_create\");\n+\n+   procedure pthread_exit (status : System.Address);\n+   pragma Import (C, pthread_exit, \"pthread_exit\");\n+\n+   function pthread_self return pthread_t;\n+   pragma Import (C, pthread_self, \"pthread_self\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 17 --\n+   --------------------------\n+\n+   function pthread_setspecific\n+     (key   : pthread_key_t;\n+      value : System.Address) return int;\n+   pragma Import (C, pthread_setspecific, \"pthread_setspecific\");\n+\n+   function pthread_getspecific (key : pthread_key_t) return System.Address;\n+   pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n+\n+   type destructor_pointer is access procedure (arg : System.Address);\n+   pragma Convention (C, destructor_pointer);\n+\n+   function pthread_key_create\n+     (key        : access pthread_key_t;\n+      destructor : destructor_pointer) return int;\n+   pragma Import (C, pthread_key_create, \"pthread_key_create\");\n+\n+   --  From /usr/include/i386-gnu/bits/sched.h\n+   CPU_SETSIZE : constant := 1_024;\n+\n+   type bit_field is array (1 .. CPU_SETSIZE) of Boolean;\n+   for bit_field'Size use CPU_SETSIZE;\n+   pragma Pack (bit_field);\n+   pragma Convention (C, bit_field);\n+\n+   type cpu_set_t is record\n+      bits : bit_field;\n+   end record;\n+   pragma Convention (C, cpu_set_t);\n+\n+private\n+\n+   type sigset_t is array (1 .. 4) of unsigned;\n+\n+   --  In GNU/Hurd the component sa_handler turns out to\n+   --  be one a union type, and the selector is a macro:\n+   --  #define sa_handler __sigaction_handler.sa_handler\n+   --  #define sa_sigaction __sigaction_handler.sa_sigaction\n+\n+   --  Should we add a signal_context type here ?\n+   --  How could it be done independent of the CPU architecture ?\n+   --  sigcontext type is opaque, so it is architecturally neutral.\n+   --  It is always passed as an access type, so define it as an empty record\n+   --  since the contents are not used anywhere.\n+   type struct_sigcontext is null record;\n+   pragma Convention (C, struct_sigcontext);\n+\n+   type pid_t is new int;\n+\n+   type time_t is new long;\n+\n+   type timespec is record\n+      tv_sec  : time_t;\n+      tv_nsec : long;\n+   end record;\n+   pragma Convention (C, timespec);\n+\n+   --  From: /usr/include/pthread/pthreadtypes.h:\n+   --  typedef struct __pthread_attr pthread_attr_t;\n+   --  /usr/include/i386-gnu/bits/thread-attr.h: struct __pthread_attr...\n+   --  /usr/include/pthread/pthreadtypes.h: enum __pthread_contentionscope\n+   --   enum __pthread_detachstate detachstate;\n+   --   enum __pthread_inheritsched inheritsched;\n+   --   enum __pthread_contentionscope contentionscope;\n+   --   Not used: schedpolicy   : int;\n+   type pthread_attr_t is record\n+      schedparam    : struct_sched_param;\n+      stackaddr     : System.Address;\n+      stacksize     : size_t;\n+      guardsize     : size_t;\n+      detachstate   : int;\n+      inheritsched  : int;\n+      contentionscope : int;\n+      schedpolicy   : int;\n+   end record;\n+   pragma Convention (C, pthread_attr_t);\n+\n+   --  From: /usr/include/pthread/pthreadtypes.h:\n+   --  typedef struct __pthread_condattr pthread_condattr_t;\n+   --  From: /usr/include/i386-gnu/bits/condition-attr.h:\n+   --  struct __pthread_condattr {\n+   --    enum __pthread_process_shared pshared;\n+   --    __Clockid_T Clock;}\n+   --  From: /usr/include/pthread/pthreadtypes.h:\n+   --  enum __pthread_process_shared\n+   type pthread_condattr_t is record\n+      pshared : int;\n+      clock   : clockid_t;\n+   end record;\n+   pragma Convention (C, pthread_condattr_t);\n+\n+   --  From: /usr/include/pthread/pthreadtypes.h:\n+   --  typedef struct __pthread_mutexattr pthread_mutexattr_t; and\n+   --  /usr/include/i386-gnu/bits/mutex-attr.h\n+   --  struct __pthread_mutexattr {\n+   --  int prioceiling;\n+   --  enum __pthread_mutex_protocol protocol;\n+   --  enum __pthread_process_shared pshared;\n+   --  enum __pthread_mutex_type mutex_type;};\n+   type pthread_mutexattr_t is record\n+      prioceiling : int;\n+      protocol    : int;\n+      pshared     : int;\n+      mutex_type  : int;\n+   end record;\n+   pragma Convention (C, pthread_mutexattr_t);\n+\n+   --  From: /usr/include/pthread/pthreadtypes.h\n+   --  typedef struct __pthread_mutex pthread_mutex_t; and\n+   --  /usr/include/i386-gnu/bits/mutex.h:\n+   --  struct __pthread_mutex {\n+   --  __pthread_spinlock_t __held;\n+   --  __pthread_spinlock_t __lock;\n+   --  /* in cthreads, mutex_init does not initialized the third\n+   --    pointer, as such, we cannot rely on its value for anything.  */\n+   --    char *cthreadscompat1;\n+   --  struct __pthread *__queue;\n+   --  struct __pthread_mutexattr *attr;\n+   --  void *data;\n+   --  /*  up to this point, we are completely compatible with cthreads\n+   --    and what libc expects.  */\n+   --    void *owner;\n+   --  unsigned locks;\n+   --  /* if null then the default attributes apply.  */\n+   --    };\n+\n+   type pthread_mutex_t is record\n+      held          : int;\n+      lock          : int;\n+      cthreadcompat : System.Address;\n+      queue         : System.Address;\n+      attr          : System.Address;\n+      data          : System.Address;\n+      owner         : System.Address;\n+      locks         : unsigned;\n+   end record;\n+   pragma Convention (C, pthread_mutex_t);\n+   --  pointer needed?\n+   --  type pthread_mutex_t_ptr is access pthread_mutex_t;\n+\n+   --  From: /usr/include/pthread/pthreadtypes.h:\n+   --  typedef struct __pthread_cond pthread_cond_t;\n+   --  typedef struct __pthread_condattr pthread_condattr_t;\n+   --  /usr/include/i386-gnu/bits/condition.h:struct __pthread_cond{}\n+   --  pthread_condattr_t: see above!\n+   --  /usr/include/i386-gnu/bits/condition.h:\n+   --  struct __pthread_condimpl *__impl;\n+\n+   type pthread_cond_t is record\n+      lock       : int;\n+      queue      : System.Address;\n+      condattr   : System.Address;\n+      impl       : System.Address;\n+      data       : System.Address;\n+   end record;\n+   pragma Convention (C, pthread_cond_t);\n+\n+   --  From: /usr/include/pthread/pthreadtypes.h:\n+   --  typedef __pthread_key pthread_key_t; and\n+   --  /usr/include/i386-gnu/bits/thread-specific.h:\n+   --  typedef int __pthread_key;\n+\n+   type pthread_key_t is new int;\n+\n+   --  From: /usr/include/i386-gnu/bits/rwlock-attr.h:\n+   --  struct __pthread_rwlockattr {\n+   --  enum __pthread_process_shared pshared; };\n+\n+   type pthread_rwlockattr_t is record\n+      pshared : int;\n+   end record;\n+   pragma Convention (C, pthread_rwlockattr_t);\n+\n+   --  From: /usr/include/i386-gnu/bits/rwlock.h:\n+   --  struct __pthread_rwlock {\n+   --  __pthread_spinlock_t __held;\n+   --  __pthread_spinlock_t __lock;\n+   --  int readers;\n+   --  struct __pthread *readerqueue;\n+   --  struct __pthread *writerqueue;\n+   --  struct __pthread_rwlockattr *__attr;\n+   --  void *__data; };\n+\n+   type pthread_rwlock_t is record\n+      held        : int;\n+      lock        : int;\n+      readers     : int;\n+      readerqueue : System.Address;\n+      writerqueue : System.Address;\n+      attr        : pthread_rwlockattr_t;\n+      data        : int;\n+   end record;\n+   pragma Convention (C, pthread_rwlock_t);\n+\n+end System.OS_Interface;"}]}