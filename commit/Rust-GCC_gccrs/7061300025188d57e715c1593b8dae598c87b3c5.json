{"sha": "7061300025188d57e715c1593b8dae598c87b3c5", "node_id": "C_kwDOANBUbNoAKDcwNjEzMDAwMjUxODhkNTdlNzE1YzE1OTNiOGRhZTU5OGM4N2IzYzU", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-17T12:28:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-17T12:28:44Z"}, "message": "Add IFN_COND_FMIN/FMAX functions\n\nThis patch adds conditional forms of FMAX and FMIN, following\nthe pattern for existing conditional binary functions.\n\ngcc/\n\t* doc/md.texi (cond_fmin@var{mode}, cond_fmax@var{mode}): Document.\n\t* optabs.def (cond_fmin_optab, cond_fmax_optab): New optabs.\n\t* internal-fn.def (COND_FMIN, COND_FMAX): New functions.\n\t* internal-fn.c (first_commutative_argument): Handle them.\n\t(FOR_EACH_COND_FN_PAIR): Likewise.\n\t* match.pd (UNCOND_BINARY, COND_BINARY): Likewise.\n\t* config/aarch64/aarch64-sve.md (cond_<fmaxmin><mode>): New\n\tpattern.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_fmaxnm_5.c: New test.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_7.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_8.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fmaxnm_8_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_7.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_8.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_fminnm_8_run.c: Likewise.", "tree": {"sha": "98d1c757d4566fba3fd619ee171e41bfb94920bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98d1c757d4566fba3fd619ee171e41bfb94920bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7061300025188d57e715c1593b8dae598c87b3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7061300025188d57e715c1593b8dae598c87b3c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7061300025188d57e715c1593b8dae598c87b3c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7061300025188d57e715c1593b8dae598c87b3c5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf5f41e4fcc396b359f096231a37a3cb411cc9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5f41e4fcc396b359f096231a37a3cb411cc9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf5f41e4fcc396b359f096231a37a3cb411cc9df"}], "stats": {"total": 275, "additions": 274, "deletions": 1}, "files": [{"sha": "0f5bf5ea8cb2135332b003d812ac713df2e21f7d", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -6287,7 +6287,7 @@\n ;; -------------------------------------------------------------------------\n \n ;; Unpredicated fmax/fmin (the libm functions).  The optabs for the\n-;; smin/smax rtx codes are handled in the generic section above.\n+;; smax/smin rtx codes are handled in the generic section above.\n (define_expand \"<fmaxmin><mode>3\"\n   [(set (match_operand:SVE_FULL_F 0 \"register_operand\")\n \t(unspec:SVE_FULL_F\n@@ -6302,6 +6302,23 @@\n   }\n )\n \n+;; Predicated fmax/fmin (the libm functions).  The optabs for the\n+;; smax/smin rtx codes are handled in the generic section above.\n+(define_expand \"cond_<fmaxmin><mode>\"\n+  [(set (match_operand:SVE_FULL_F 0 \"register_operand\")\n+\t(unspec:SVE_FULL_F\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (unspec:SVE_FULL_F\n+\t     [(match_dup 1)\n+\t      (const_int SVE_RELAXED_GP)\n+\t      (match_operand:SVE_FULL_F 2 \"register_operand\")\n+\t      (match_operand:SVE_FULL_F 3 \"aarch64_sve_float_maxmin_operand\")]\n+\t     SVE_COND_FP_MAXMIN_PUBLIC)\n+\t   (match_operand:SVE_FULL_F 4 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+)\n+\n ;; Predicated floating-point maximum/minimum.\n (define_insn \"@aarch64_pred_<optab><mode>\"\n   [(set (match_operand:SVE_FULL_F 0 \"register_operand\" \"=w, w, ?&w, ?&w\")"}, {"sha": "589f841ea74143d54d8b3e338f5a4c83f7356df3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -6930,6 +6930,8 @@ operand 0, otherwise (operand 2 + operand 3) is moved.\n @cindex @code{cond_smax@var{mode}} instruction pattern\n @cindex @code{cond_umin@var{mode}} instruction pattern\n @cindex @code{cond_umax@var{mode}} instruction pattern\n+@cindex @code{cond_fmin@var{mode}} instruction pattern\n+@cindex @code{cond_fmax@var{mode}} instruction pattern\n @cindex @code{cond_ashl@var{mode}} instruction pattern\n @cindex @code{cond_ashr@var{mode}} instruction pattern\n @cindex @code{cond_lshr@var{mode}} instruction pattern\n@@ -6947,6 +6949,8 @@ operand 0, otherwise (operand 2 + operand 3) is moved.\n @itemx @samp{cond_smax@var{mode}}\n @itemx @samp{cond_umin@var{mode}}\n @itemx @samp{cond_umax@var{mode}}\n+@itemx @samp{cond_fmin@var{mode}}\n+@itemx @samp{cond_fmax@var{mode}}\n @itemx @samp{cond_ashl@var{mode}}\n @itemx @samp{cond_ashr@var{mode}}\n @itemx @samp{cond_lshr@var{mode}}"}, {"sha": "e5b85f0db0e3b2c2ee92bd878565c51e9f0ec878", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -3842,6 +3842,8 @@ first_commutative_argument (internal_fn fn)\n     case IFN_COND_MUL:\n     case IFN_COND_MIN:\n     case IFN_COND_MAX:\n+    case IFN_COND_FMIN:\n+    case IFN_COND_FMAX:\n     case IFN_COND_AND:\n     case IFN_COND_IOR:\n     case IFN_COND_XOR:\n@@ -3961,6 +3963,8 @@ conditional_internal_fn_code (internal_fn ifn)\n /* Invoke T(IFN) for each internal function IFN that also has an\n    IFN_COND_* form.  */\n #define FOR_EACH_COND_FN_PAIR(T) \\\n+  T (FMAX) \\\n+  T (FMIN) \\\n   T (FMA) \\\n   T (FMS) \\\n   T (FNMA) \\"}, {"sha": "bb4d8ab80966829b0288821dc8c43ab65f7b07bb", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -188,6 +188,8 @@ DEF_INTERNAL_SIGNED_OPTAB_FN (COND_MIN, ECF_CONST, first,\n \t\t\t      cond_smin, cond_umin, cond_binary)\n DEF_INTERNAL_SIGNED_OPTAB_FN (COND_MAX, ECF_CONST, first,\n \t\t\t      cond_smax, cond_umax, cond_binary)\n+DEF_INTERNAL_OPTAB_FN (COND_FMIN, ECF_CONST, cond_fmin, cond_binary)\n+DEF_INTERNAL_OPTAB_FN (COND_FMAX, ECF_CONST, cond_fmax, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_AND, ECF_CONST | ECF_NOTHROW,\n \t\t       cond_and, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_IOR, ECF_CONST | ECF_NOTHROW,"}, {"sha": "89df7b2a17450de8d3910fb87f6efcbe367eafd0", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -90,12 +90,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   plus minus\n   mult trunc_div trunc_mod rdiv\n   min max\n+  IFN_FMIN IFN_FMAX\n   bit_and bit_ior bit_xor\n   lshift rshift)\n (define_operator_list COND_BINARY\n   IFN_COND_ADD IFN_COND_SUB\n   IFN_COND_MUL IFN_COND_DIV IFN_COND_MOD IFN_COND_RDIV\n   IFN_COND_MIN IFN_COND_MAX\n+  IFN_COND_FMIN IFN_COND_FMAX\n   IFN_COND_AND IFN_COND_IOR IFN_COND_XOR\n   IFN_COND_SHL IFN_COND_SHR)\n "}, {"sha": "e25f4c9a3466421b25f870fffae8afc18855d3bb", "filename": "gcc/optabs.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -241,6 +241,8 @@ OPTAB_D (cond_smin_optab, \"cond_smin$a\")\n OPTAB_D (cond_smax_optab, \"cond_smax$a\")\n OPTAB_D (cond_umin_optab, \"cond_umin$a\")\n OPTAB_D (cond_umax_optab, \"cond_umax$a\")\n+OPTAB_D (cond_fmin_optab, \"cond_fmin$a\")\n+OPTAB_D (cond_fmax_optab, \"cond_fmax$a\")\n OPTAB_D (cond_fma_optab, \"cond_fma$a\")\n OPTAB_D (cond_fms_optab, \"cond_fms$a\")\n OPTAB_D (cond_fnma_optab, \"cond_fnma$a\")"}, {"sha": "4bae7e02de4b464df97d444d11921cc04b2aa4a3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_5.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "1aa2eb4f5373ffd02dba676e9d22b1acb3f70093", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_5_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_5_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_1_run.c\""}, {"sha": "912db00466e747f7fa4bc18de9c3a15e55ee7614", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_6.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_2.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "19f6eddb83932c2643bd49e870abe7b5c4e21c62", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_6_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_6_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_2_run.c\""}, {"sha": "30f07f62ddb7c33ec12b1253aabd64e503e4af87", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_7.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_7.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_3.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */"}, {"sha": "3e647ed914f75618cfb7c5bb31c811a090fa3914", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_7_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_7_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_3_run.c\""}, {"sha": "a590d382b6a724c4eb5b4e5a5ea182d0aeecec43", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_8.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_8.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_4.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "d421e54f996d727ea0429729fd999959cc6be1aa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fmaxnm_8_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fmaxnm_8_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fmaxnm_4_run.c\""}, {"sha": "290c4beac246791c8ec0914f8929923814a1ced9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_5.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "76baf6a96f578de455fc8e01cb2d9fd1ab9f0760", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_5_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_5_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_1_run.c\""}, {"sha": "cc9db999cbd39a9c96fd18ef6b7f84ee4b618c36", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_6.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_2.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "dbafea1ac6b737c560a4ec07c9cfa00f9351e110", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_6_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_6_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_2_run.c\""}, {"sha": "347a1a3540b84f4941ff67538fd851227f49bcff", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_7.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_7.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_3.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */"}, {"sha": "6617095fea03e9c2e2a3204aebb973a4630fdbeb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_7_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_7_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_3_run.c\""}, {"sha": "20d6cb505fe2056ed849891259289c8c5d38893a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_8.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"cond_fmaxnm_4.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "4fb649727d0fece7a4f2122677c4377fd37ed317", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_fminnm_8_run.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7061300025188d57e715c1593b8dae598c87b3c5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_fminnm_8_run.c?ref=7061300025188d57e715c1593b8dae598c87b3c5", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_fminnm_4_run.c\""}]}