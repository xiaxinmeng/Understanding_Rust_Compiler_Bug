{"sha": "e740f3d73144abbca1ad98a04825c6bd63314a0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0MGYzZDczMTQ0YWJiY2ExYWQ5OGEwNDgyNWM2YmQ2MzMxNGEwYg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-20T07:53:14Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-05-22T13:30:23Z"}, "message": "Add missing vector truncmn2 expanders [PR92658]\n\n2020-05-22  Hongtao.liu  <hongtao.liu@intel.com>\n\ngcc/ChangeLog:\n\tPR target/92658\n\t* config/i386/sse.md (trunc<pmov_src_lower><mode>2): New expander\n\t(truncv32hiv32qi2): Ditto.\n\t(trunc<ssedoublemodelower><mode>2): Ditto.\n\t(trunc<mode><pmov_dst_3>2): Ditto.\n\t(trunc<mode><pmov_dst_mode_4>2): Ditto.\n\t(truncv2div2si2): Ditto.\n\t(truncv8div8qi2): Ditto.\n\t(avx512f_<code>v8div16qi2): Renaming from *avx512f_<code>v8div16qi2.\n\t(avx512vl_<code>v2div2si): Renaming from *avx512vl_<code>v2div2si2.\n\t(avx512vl_<code><mode>v2<ssecakarnum>qi2): Renaming\n\tfrom *avx512vl_<code><mode>v<ssescalarnum>qi2.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/pr92658-avx512f.c: New test.\n\t* gcc.target/i386/pr92658-avx512vl.c: Ditto.\n\t* gcc.target/i386/pr92658-avx512bw-trunc.c: Ditto.", "tree": {"sha": "602f5aa0812e522d3d4ebc25eaa3504ad0890dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/602f5aa0812e522d3d4ebc25eaa3504ad0890dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e740f3d73144abbca1ad98a04825c6bd63314a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e740f3d73144abbca1ad98a04825c6bd63314a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e740f3d73144abbca1ad98a04825c6bd63314a0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e740f3d73144abbca1ad98a04825c6bd63314a0b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "808b611bfb4b05703ea174e50874c711dca44c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808b611bfb4b05703ea174e50874c711dca44c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808b611bfb4b05703ea174e50874c711dca44c98"}], "stats": {"total": 424, "additions": 420, "deletions": 4}, "files": [{"sha": "4049ac308e2e6c52d3a1e0902690221301897448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e740f3d73144abbca1ad98a04825c6bd63314a0b", "patch": "@@ -1,3 +1,18 @@\n+2020-05-22  Hongtao.liu  <hongtao.liu@intel.com>\n+\n+\tPR target/92658\n+\t* config/i386/sse.md (trunc<pmov_src_lower><mode>2): New expander\n+\t(truncv32hiv32qi2): Ditto.\n+\t(trunc<ssedoublemodelower><mode>2): Ditto.\n+\t(trunc<mode><pmov_dst_3>2): Ditto.\n+\t(trunc<mode><pmov_dst_mode_4>2): Ditto.\n+\t(truncv2div2si2): Ditto.\n+\t(truncv8div8qi2): Ditto.\n+\t(avx512f_<code>v8div16qi2): Renaming from *avx512f_<code>v8div16qi2.\n+\t(avx512vl_<code>v2div2si): Renaming from *avx512vl_<code>v2div2si2.\n+\t(avx512vl_<code><mode>v2<ssecakarnum>qi2): Renaming from\n+\t*avx512vl_<code><mode>v<ssescalarnum>qi2.\n+\n 2020-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/95258"}, {"sha": "bb8ee19b64bc4141c44ca9a14a559d5f479ca475", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e740f3d73144abbca1ad98a04825c6bd63314a0b", "patch": "@@ -10513,6 +10513,12 @@\n (define_mode_attr pmov_suff_1\n   [(V16QI \"db\") (V16HI \"dw\") (V8SI \"qd\") (V8HI \"qw\")])\n \n+(define_expand \"trunc<pmov_src_lower><mode>2\"\n+  [(set (match_operand:PMOV_DST_MODE_1 0 \"nonimmediate_operand\")\n+\t(truncate:PMOV_DST_MODE_1\n+\t  (match_operand:<pmov_src_mode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_insn \"*avx512f_<code><pmov_src_lower><mode>2\"\n   [(set (match_operand:PMOV_DST_MODE_1 0 \"nonimmediate_operand\" \"=v,m\")\n \t(any_truncate:PMOV_DST_MODE_1\n@@ -10547,6 +10553,12 @@\n       (match_operand:<avx512fmaskmode> 2 \"register_operand\")))]\n   \"TARGET_AVX512F\")\n \n+(define_expand \"truncv32hiv32qi2\"\n+  [(set (match_operand:V32QI 0 \"nonimmediate_operand\")\n+\t(truncate:V32QI\n+\t  (match_operand:V32HI 1 \"register_operand\")))]\n+  \"TARGET_AVX512BW\")\n+\n (define_insn \"avx512bw_<code>v32hiv32qi2\"\n   [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n \t(any_truncate:V32QI\n@@ -10586,6 +10598,12 @@\n (define_mode_attr pmov_suff_2\n   [(V16QI \"wb\") (V8HI \"dw\") (V4SI \"qd\")])\n \n+(define_expand \"trunc<ssedoublemodelower><mode>2\"\n+  [(set (match_operand:PMOV_DST_MODE_2 0 \"nonimmediate_operand\")\n+\t(truncate:PMOV_DST_MODE_2\n+\t  (match_operand:<ssedoublemode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512VL\")\n+\n (define_insn \"*avx512vl_<code><ssedoublemodelower><mode>2\"\n   [(set (match_operand:PMOV_DST_MODE_2 0 \"nonimmediate_operand\" \"=v,m\")\n \t(any_truncate:PMOV_DST_MODE_2\n@@ -10628,7 +10646,20 @@\n (define_mode_attr pmov_suff_3\n   [(V4DI \"qb\") (V2DI \"qb\") (V8SI \"db\") (V4SI \"db\") (V8HI \"wb\")])\n \n-(define_insn \"*avx512vl_<code><mode>v<ssescalarnum>qi2\"\n+(define_expand \"trunc<mode><pmov_dst_3>2\"\n+  [(set (match_operand:<pmov_dst_3> 0 \"register_operand\")\n+\t(truncate:<pmov_dst_3>\n+\t  (match_operand:PMOV_SRC_MODE_3 1 \"register_operand\")))]\n+  \"TARGET_AVX512VL\"\n+{\n+  operands[0] = simplify_gen_subreg (V16QImode, operands[0], <pmov_dst_3>mode, 0);\n+  emit_insn (gen_avx512vl_truncate<mode>v<ssescalarnum>qi2 (operands[0],\n+\t\t\t\t\t\t\t    operands[1],\n+\t\t\t\t\t\t\t    CONST0_RTX (<pmov_dst_zeroed_3>mode)));\n+  DONE;\n+})\n+\n+(define_insn \"avx512vl_<code><mode>v<ssescalarnum>qi2\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n     (vec_concat:V16QI\n       (any_truncate:<pmov_dst_3>\n@@ -10920,7 +10951,21 @@\n (define_mode_attr pmov_suff_4\n   [(V4DI \"qw\") (V2DI \"qw\") (V4SI \"dw\")])\n \n-(define_insn \"*avx512vl_<code><mode>v<ssescalarnum>hi2\"\n+(define_expand \"trunc<mode><pmov_dst_4>2\"\n+  [(set (match_operand:<pmov_dst_4> 0 \"register_operand\")\n+\t(truncate:<pmov_dst_4>\n+\t  (match_operand:PMOV_SRC_MODE_4 1 \"register_operand\")))]\n+  \"TARGET_AVX512VL\"\n+{\n+  operands[0] = simplify_gen_subreg (V8HImode, operands[0], <pmov_dst_4>mode, 0);\n+  emit_insn (gen_avx512vl_truncate<mode>v<ssescalarnum>hi2 (operands[0],\n+\t\t\t\t\t\t\t    operands[1],\n+\t\t\t\t\t\t\t    CONST0_RTX (<pmov_dst_zeroed_4>mode)));\n+  DONE;\n+\n+})\n+\n+(define_insn \"avx512vl_<code><mode>v<ssescalarnum>hi2\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n     (vec_concat:V8HI\n       (any_truncate:<pmov_dst_4>\n@@ -11085,7 +11130,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512vl_<code>v2div2si2\"\n+(define_expand \"truncv2div2si2\"\n+  [(set (match_operand:V2SI 0 \"register_operand\")\n+\t(truncate:V2SI\n+\t  (match_operand:V2DI 1 \"register_operand\")))]\n+  \"TARGET_AVX512VL\"\n+{\n+  operands[0] = simplify_gen_subreg (V4SImode, operands[0], V2SImode, 0);\n+  emit_insn (gen_avx512vl_truncatev2div2si2 (operands[0],\n+\t\t\t\t\t     operands[1],\n+\t\t\t\t\t     CONST0_RTX (V2SImode)));\n+  DONE;\n+})\n+\n+(define_insn \"avx512vl_<code>v2div2si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n     (vec_concat:V4SI\n       (any_truncate:V2SI\n@@ -11164,7 +11222,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx512f_<code>v8div16qi2\"\n+(define_expand \"truncv8div8qi2\"\n+  [(set (match_operand:V8QI 0 \"register_operand\")\n+\t(truncate:V8QI\n+\t    (match_operand:V8DI 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  operands[0] = simplify_gen_subreg (V16QImode, operands[0], V8QImode, 0);\n+  emit_insn (gen_avx512f_truncatev8div16qi2 (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_<code>v8div16qi2\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V16QI\n \t  (any_truncate:V8QI"}, {"sha": "7812e3f0f57281d2a6d4629bf5f51ea348aa4803", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e740f3d73144abbca1ad98a04825c6bd63314a0b", "patch": "@@ -1,3 +1,9 @@\n+2020-05-22  Hongtao.liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr92658-avx512f.c: New test.\n+\t* gcc.target/i386/pr92658-avx512vl.c: Ditto.\n+\t* gcc.target/i386/pr92658-avx512bw-trunc.c: Ditto.\n+\n 2020-05-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/95268"}, {"sha": "bdfad7a4d18d24ed397122a031236849bed7a4c6", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx512bw-trunc.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw-trunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw-trunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw-trunc.c?ref=e740f3d73144abbca1ad98a04825c6bd63314a0b", "patch": "@@ -0,0 +1,91 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512bw -mavx512vl\" } */\n+\n+typedef unsigned char v8qi __attribute__((vector_size (8)));\n+typedef unsigned char v16qi __attribute__((vector_size (16)));\n+typedef unsigned char v32qi __attribute__((vector_size (32)));\n+typedef unsigned short v8hi __attribute__((vector_size (16)));\n+typedef unsigned short v16hi __attribute__((vector_size (32)));\n+typedef unsigned short v32hi __attribute__((vector_size (64)));\n+\n+\n+void\n+truncwb_512 (v32qi * dst, v32hi * __restrict src)\n+{\n+  unsigned char tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  tem[16] = (*src)[16];\n+  tem[17] = (*src)[17];\n+  tem[18] = (*src)[18];\n+  tem[19] = (*src)[19];\n+  tem[20] = (*src)[20];\n+  tem[21] = (*src)[21];\n+  tem[22] = (*src)[22];\n+  tem[23] = (*src)[23];\n+  tem[24] = (*src)[24];\n+  tem[25] = (*src)[25];\n+  tem[26] = (*src)[26];\n+  tem[27] = (*src)[27];\n+  tem[28] = (*src)[28];\n+  tem[29] = (*src)[29];\n+  tem[30] = (*src)[30];\n+  tem[31] = (*src)[31];\n+  dst[0] = *(v32qi *) tem;\n+}\n+\n+void\n+truncwb_256 (v16qi * dst, v16hi * __restrict src)\n+{\n+  unsigned char tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16qi *) tem;\n+}\n+\n+void\n+truncwb_128 (v16qi * dst, v8hi * __restrict src)\n+{\n+  unsigned char tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v16qi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovwb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\" 3 { xfail *-*-* } } } */"}, {"sha": "2ba29074a8169df46d67cf1072555b227992d4b0", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx512f.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512f.c?ref=e740f3d73144abbca1ad98a04825c6bd63314a0b", "patch": "@@ -0,0 +1,106 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512f\" } */\n+\n+typedef unsigned char v8qi __attribute__((vector_size (8)));\n+typedef unsigned char v16qi __attribute__((vector_size (16)));\n+typedef unsigned short v8hi __attribute__((vector_size (16)));\n+typedef unsigned short v16hi __attribute__((vector_size (32)));\n+typedef unsigned int v8si __attribute__((vector_size (32)));\n+typedef unsigned int v16si __attribute__((vector_size (64)));\n+typedef unsigned long long v8di __attribute__((vector_size (64)));\n+\n+void\n+truncqd (v8si * dst, v8di * __restrict src)\n+{\n+  unsigned tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+void\n+truncqw (v8hi * dst, v8di * __restrict src)\n+{\n+  unsigned short tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+void\n+truncqb (v8qi * dst, v8di * __restrict src)\n+{\n+  unsigned char tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v8qi *) tem;\n+}\n+\n+void\n+truncdw (v16hi * dst, v16si * __restrict src)\n+{\n+  unsigned short tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16hi *) tem;\n+}\n+\n+\n+void\n+truncdb (v16qi * dst, v16si * __restrict src)\n+{\n+  unsigned char tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16qi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovqd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovqw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovqb\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vpmovdw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovdb\" 1 } } */\n+"}, {"sha": "50b32f968ac3c4d05e86c967079dd3dfaba98d5b", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx512vl.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e740f3d73144abbca1ad98a04825c6bd63314a0b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c?ref=e740f3d73144abbca1ad98a04825c6bd63314a0b", "patch": "@@ -0,0 +1,129 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512f -mavx512vl\" } */\n+\n+typedef unsigned char v16qi __attribute__((vector_size (16)));\n+typedef unsigned short v8hi __attribute__((vector_size (16)));\n+typedef unsigned int v4si __attribute__((vector_size (16)));\n+typedef unsigned int v8si __attribute__((vector_size (32)));\n+typedef unsigned long long v2di __attribute__((vector_size (16)));\n+typedef unsigned long long v4di __attribute__((vector_size (32)));\n+\n+void\n+truncqd_256 (v4si * dst, v4di * __restrict src)\n+{\n+  unsigned tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+void\n+truncqw_256 (v8hi * dst, v4di * __restrict src)\n+{\n+  unsigned short tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+void\n+truncqb_256 (v16qi * dst, v4di * __restrict src)\n+{\n+  unsigned char tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v16qi *) tem;\n+}\n+\n+void\n+truncqd_128 (v4si * dst, v2di * __restrict src)\n+{\n+  unsigned tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+void\n+truncqw_128 (v8hi * dst, v2di * __restrict src)\n+{\n+  unsigned short tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+void\n+truncqb_128 (v16qi * dst, v2di * __restrict src)\n+{\n+  unsigned char tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v16qi *) tem;\n+}\n+\n+void\n+truncdw_256 (v8hi * dst, v8si * __restrict src)\n+{\n+  unsigned short tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+void\n+truncdb_256 (v16qi * dst, v8si * __restrict src)\n+{\n+  unsigned char tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v16qi *) tem;\n+}\n+\n+void\n+truncdw_128 (v8hi * dst, v4si * __restrict src)\n+{\n+  unsigned short tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+void\n+truncdb_128 (v16qi * dst, v4si * __restrict src)\n+{\n+  unsigned char tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v16qi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpmovqd\" 2 } } } */\n+/* { dg-final { scan-assembler-times \"vpmovqw\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vpmovqb\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vpmovdw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovdw\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vpmovdb\" 2 { xfail *-*-* } } } */"}]}