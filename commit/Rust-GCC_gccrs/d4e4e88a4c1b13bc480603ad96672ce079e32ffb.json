{"sha": "d4e4e88a4c1b13bc480603ad96672ce079e32ffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRlNGU4OGE0YzFiMTNiYzQ4MDYwM2FkOTY2NzJjZTA3OWUzMmZmYg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-20T09:50:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:50:24Z"}, "message": "[Ada] Improve efficiency of aggregates with <>\n\nThe generated code has been improved so that aggregates with <> are more\nefficient.  No change in behavior; no test.\n\n2019-08-20  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Expand_Array_Aggregate): Use build-in-place in\n\tthe nonlimited case in STEP 4. This improves the efficiency of\n\tthings like (1 .. 1000 => <>).  We still generate some code for\n\tthat, unfortunately, but it is much improved.\n\t(Aggr_Assignment_OK_For_Backend): Return false if <> components\n\tare present.\n\nFrom-SVN: r274739", "tree": {"sha": "d80df430cc29541eb81fd0f218dd73c10d28f927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d80df430cc29541eb81fd0f218dd73c10d28f927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4e4e88a4c1b13bc480603ad96672ce079e32ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e4e88a4c1b13bc480603ad96672ce079e32ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e4e88a4c1b13bc480603ad96672ce079e32ffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e4e88a4c1b13bc480603ad96672ce079e32ffb/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf0e5ca723edbb63719ca075fce3f84eb8e43553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0e5ca723edbb63719ca075fce3f84eb8e43553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0e5ca723edbb63719ca075fce3f84eb8e43553"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "ddf17cc61351d6f2f80929649e446e5aa6dff743", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e4e88a4c1b13bc480603ad96672ce079e32ffb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e4e88a4c1b13bc480603ad96672ce079e32ffb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d4e4e88a4c1b13bc480603ad96672ce079e32ffb", "patch": "@@ -1,3 +1,12 @@\n+2019-08-20  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Use build-in-place in\n+\tthe nonlimited case in STEP 4. This improves the efficiency of\n+\tthings like (1 .. 1000 => <>).  We still generate some code for\n+\tthat, unfortunately, but it is much improved.\n+\t(Aggr_Assignment_OK_For_Backend): Return false if <> components\n+\tare present.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch6.adb (Needs_BIP_Alloc_Form): Call"}, {"sha": "7f11b4105bd0bf08bcd43c3dd18359956e2df58e", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e4e88a4c1b13bc480603ad96672ce079e32ffb/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e4e88a4c1b13bc480603ad96672ce079e32ffb/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=d4e4e88a4c1b13bc480603ad96672ce079e32ffb", "patch": "@@ -5233,6 +5233,12 @@ package body Exp_Aggr is\n          Value     : Uint;\n \n       begin\n+         --  Back end doesn't know about <>\n+\n+         if Has_Default_Init_Comps (N) then\n+            return False;\n+         end if;\n+\n          --  Recurse as far as possible to find the innermost component type\n \n          Ctyp := Etype (N);\n@@ -6292,9 +6298,7 @@ package body Exp_Aggr is\n       --  previously excluded controlled components but this is an old\n       --  oversight: the rules in 7.6 (17) are clear.\n \n-      if (not Has_Default_Init_Comps (N)\n-           or else Is_Limited_Type (Etype (N)))\n-        and then Comes_From_Source (Parent_Node)\n+      if Comes_From_Source (Parent_Node)\n         and then Parent_Kind = N_Object_Declaration\n         and then Present (Expression (Parent_Node))\n         and then not"}]}