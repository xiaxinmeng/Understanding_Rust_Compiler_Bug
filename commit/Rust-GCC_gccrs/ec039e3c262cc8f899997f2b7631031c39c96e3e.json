{"sha": "ec039e3c262cc8f899997f2b7631031c39c96e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwMzllM2MyNjJjYzhmODk5OTk3ZjJiNzYzMTAzMWMzOWM5NmUzZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-07-10T20:51:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-07-10T20:51:23Z"}, "message": "ia64.c (got_symbolic_operand): New.\n\n        * config/ia64/ia64.c (got_symbolic_operand): New.\n        (symbolic_operand, move_operand): Revert 0701 change.\n        * config/ia64/ia64.h (PREDICATE_CODES): Update.\n        * config/ia64/ia64-protos.h (got_symbolic_operand): Declare.\n        * config/ia64/ia64.md (movdi): Revert 0701 wrt symbolic_operand;\n        split the offset into a 14-bit low part instead of a 13-bit low part.\n        (load_fptr): Mark the mem as unchanging.\n        (load_symptr): Use got_symbolic_operand.\n\nFrom-SVN: r34948", "tree": {"sha": "6bf99fafa30d915e46de32158bd710236413606d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bf99fafa30d915e46de32158bd710236413606d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec039e3c262cc8f899997f2b7631031c39c96e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec039e3c262cc8f899997f2b7631031c39c96e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec039e3c262cc8f899997f2b7631031c39c96e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec039e3c262cc8f899997f2b7631031c39c96e3e/comments", "author": null, "committer": null, "parents": [{"sha": "14e7eabd2408684bbebd898d2da4d73a4d9f4cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e7eabd2408684bbebd898d2da4d73a4d9f4cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e7eabd2408684bbebd898d2da4d73a4d9f4cc1"}], "stats": {"total": 152, "additions": 95, "deletions": 57}, "files": [{"sha": "1207b5ca17c1fd7c4727b8fcdc929255981078be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec039e3c262cc8f899997f2b7631031c39c96e3e", "patch": "@@ -1,3 +1,14 @@\n+2000-07-10  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.c (got_symbolic_operand): New.\n+\t(symbolic_operand, move_operand): Revert 0701 change.\n+\t* config/ia64/ia64.h (PREDICATE_CODES): Update.\n+\t* config/ia64/ia64-protos.h (got_symbolic_operand): Declare.\n+\t* config/ia64/ia64.md (movdi): Revert 0701 wrt symbolic_operand;\n+\tsplit the offset into a 14-bit low part instead of a 13-bit low part.\n+\t(load_fptr): Mark the mem as unchanging.\n+\t(load_symptr): Use got_symbolic_operand.\n+\n 2000-07-10  Nick Clifton  <nickc@cygnus.com>\n \n \t* libgcc2.c (next_stack_level): Cast result of computation to\n@@ -143,7 +154,7 @@\n \n 2000-07-08  Richard Henderson  <rth@cygnus.com>\n \n-        * final.c (final): Do not abort when reg-stack introduces\n+\t* final.c (final): Do not abort when reg-stack introduces\n \ta new insn.\n \n 2000-07-08  Zack Weinberg  <zack@wolery.cumb.org>\n@@ -475,33 +486,33 @@ Mon Jul  3 21:31:43 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \tcheck_macro_redefinition, save_expansion): New.\n \n \t* cpplex.c (skip_block_comment, skip_line_comment, parse_name,\n-        parse_string, output_line_command, trigraph_replace,\n-        lex_line, cpp_push_buffer, cpp_pop_buffer, cpp_output_tokens,\n-        cpp_scan_buffer_nooutput, cpp_scan_buffer, cpp_free_toklist,\n-        cpp_idcmp, _cpp_get_directive_token, _cpp_init_input_buffer,\n+\tparse_string, output_line_command, trigraph_replace,\n+\tlex_line, cpp_push_buffer, cpp_pop_buffer, cpp_output_tokens,\n+\tcpp_scan_buffer_nooutput, cpp_scan_buffer, cpp_free_toklist,\n+\tcpp_idcmp, _cpp_get_directive_token, _cpp_init_input_buffer,\n \t_cpp_skip_rest_of_line): Modify.\n \n-        (maybe_macroexpand, skip_comment, copy_comment, skip_string,\n+\t(maybe_macroexpand, skip_comment, copy_comment, skip_string,\n \tfind_position, null_warning, bump_column, expand_name_space,\n \tpedantic_whitespace, _cpp_output_list, _cpp_slice_toklist,\n \t_cpp_squeeze_toklist, _cpp_scan_until, _cpp_skip_hspace,\n \t_cpp_parse_name, _cpp_lex_token, cpp_get_non_space_token,\n \t_cpp_prescan): Delete.\n \n \t(dump_param_spelling, process_directive, lex_next,\n-        is_macro_disabled, stringify_arg, expand_context_stack,\n-        output_token, make_string_token, alloc_number_token,\n-        special_symbol, duplicate_token, maybe_paste_with_next,\n-        can_paste, prevent_macro_expansion, restore_macro_expansion,\n-        get_temp_token, release_temp_tokens, quote_string,\n-        token_names, token_spellings, _cpp_expand_name_space,\n-        _cpp_glue_header_name, _cpp_reserve_name_space,\n-        digraph_spellings, trigraph_ok, skip_whitespace, save_comment,\n-        placemarker_token, eof_token, cpp_context, macro_args,\n-        get_raw_token, parse_arg, parse_args, save_token,\n-        push_arg_context, push_macro_context, pop_context,\n-        do_pop_context, free_macro_args, _cpp_get_line,\n-        _cpp_run_directive): New.\n+\tis_macro_disabled, stringify_arg, expand_context_stack,\n+\toutput_token, make_string_token, alloc_number_token,\n+\tspecial_symbol, duplicate_token, maybe_paste_with_next,\n+\tcan_paste, prevent_macro_expansion, restore_macro_expansion,\n+\tget_temp_token, release_temp_tokens, quote_string,\n+\ttoken_names, token_spellings, _cpp_expand_name_space,\n+\t_cpp_glue_header_name, _cpp_reserve_name_space,\n+\tdigraph_spellings, trigraph_ok, skip_whitespace, save_comment,\n+\tplacemarker_token, eof_token, cpp_context, macro_args,\n+\tget_raw_token, parse_arg, parse_args, save_token,\n+\tpush_arg_context, push_macro_context, pop_context,\n+\tdo_pop_context, free_macro_args, _cpp_get_line,\n+\t_cpp_run_directive): New.\n \n \t* cpplib.c (validate_else, parse_include, push_conditional,\n \tpass_thru_directive, read_line_number, parse_ifdef,\n@@ -777,8 +788,8 @@ Mon Jul  3 00:32:47 2000  Jeffrey A Law  (law@cygnus.com)\n \n 2000-06-30  Catherine Moore  <clm@cygnus.com>\n  \n-        * c-common.c (decl_attributes):  Differentiate between\n-        types and type decls for alignment.\n+\t* c-common.c (decl_attributes):  Differentiate between\n+\ttypes and type decls for alignment.\n \n 2000-06-30  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -860,8 +871,8 @@ Mon Jul  3 00:32:47 2000  Jeffrey A Law  (law@cygnus.com)\n \n 2000-06-29  Andrew Haley  <aph@cygnus.com>\n \n-        * config/ia64/linux.h (JMP_BUF_SIZE): Size is in Pmode units, not\n-        bytes: remove the multiply by 8.\n+\t* config/ia64/linux.h (JMP_BUF_SIZE): Size is in Pmode units, not\n+\tbytes: remove the multiply by 8.\n \n 2000-06-29  Philipp Thomas  <pthomas@suse.de>\n "}, {"sha": "af3e5d797af61e75db02b415e1805fadc5bad93d", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=ec039e3c262cc8f899997f2b7631031c39c96e3e", "patch": "@@ -29,6 +29,7 @@ extern rtx ia64_compare_op0, ia64_compare_op1;\n #ifdef RTX_CODE\n extern int call_operand PARAMS((rtx, enum machine_mode));\n extern int sdata_symbolic_operand PARAMS((rtx, enum machine_mode));\n+extern int got_symbolic_operand PARAMS((rtx, enum machine_mode));\n extern int symbolic_operand PARAMS((rtx, enum machine_mode));\n extern int function_operand PARAMS((rtx, enum machine_mode));\n extern int setjmp_operand PARAMS((rtx, enum machine_mode));"}, {"sha": "3628cb4f85c2eaf4347f2ec17521eb32ee08676a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ec039e3c262cc8f899997f2b7631031c39c96e3e", "patch": "@@ -176,10 +176,10 @@ sdata_symbolic_operand (op, mode)\n   return 0;\n }\n \n-/* Return 1 if OP refers to a symbol.  */\n+/* Return 1 if OP refers to a symbol, and is appropriate for a GOT load.  */\n \n int\n-symbolic_operand (op, mode)\n+got_symbolic_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n@@ -194,12 +194,43 @@ symbolic_operand (op, mode)\n       op = XEXP (op, 1);\n       if (GET_CODE (op) != CONST_INT)\n \treturn 0;\n-      /* Force the low 13 bits of the constant to zero so that we do not\n+\n+\treturn 1;\n+\n+      /* Ok if we're not using GOT entries at all.  */\n+      if (TARGET_NO_PIC || TARGET_AUTO_PIC)\n+\treturn 1;\n+\n+      /* \"Ok\" while emitting rtl, since otherwise we won't be provided\n+\t with the entire offset during emission, which makes it very\n+\t hard to split the offset into high and low parts.  */\n+      if (rtx_equal_function_value_matters)\n+\treturn 1;\n+\n+      /* Force the low 14 bits of the constant to zero so that we do not\n \t use up so many GOT entries.  */\n-      if (! TARGET_NO_PIC && ! TARGET_AUTO_PIC && (INTVAL (op) & 0x1fff) != 0)\n-\treturn 0;\n+      return (INTVAL (op) & 0x3fff) == 0;\n+\n+    case SYMBOL_REF:\n+    case LABEL_REF:\n       return 1;\n \n+    default:\n+      break;\n+    }\n+  return 0;\n+}\n+\n+/* Return 1 if OP refers to a symbol.  */\n+\n+int\n+symbolic_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  switch (GET_CODE (op))\n+    {\n+    case CONST:\n     case SYMBOL_REF:\n     case LABEL_REF:\n       return 1;\n@@ -284,10 +315,7 @@ move_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  if (! TARGET_NO_PIC\n-      && (GET_CODE (op) == CONST\n-\t  || GET_CODE (op) == SYMBOL_REF\n-\t  || GET_CODE (op) == LABEL_REF))\n+  if (! TARGET_NO_PIC && symbolic_operand (op, mode))\n     return 0;\n \n   return general_operand (op, mode);"}, {"sha": "be94fc016ec9a3fef5b83efb46b2036abd167bc5", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ec039e3c262cc8f899997f2b7631031c39c96e3e", "patch": "@@ -2705,6 +2705,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define PREDICATE_CODES \\\n { \"call_operand\", {SUBREG, REG, SYMBOL_REF}},\t\t\t\t\\\n+{ \"got_symbolic_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\\\n { \"sdata_symbolic_operand\", {SYMBOL_REF, CONST}},\t\t\t\\\n { \"symbolic_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\t\\\n { \"function_operand\", {SYMBOL_REF}},\t\t\t\t\t\\"}, {"sha": "bab7b903def271006db4935b91698a600da0cdb2", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec039e3c262cc8f899997f2b7631031c39c96e3e/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=ec039e3c262cc8f899997f2b7631031c39c96e3e", "patch": "@@ -255,10 +255,7 @@\n {\n   /* ??? Should generalize this, so that we can also support 32 bit\n      pointers.  */\n-  if (! TARGET_NO_PIC\n-      && (GET_CODE (operands[1]) == CONST\n-\t  || GET_CODE (operands[1]) == SYMBOL_REF\n-\t  || GET_CODE (operands[1]) == LABEL_REF))\n+  if (! TARGET_NO_PIC && symbolic_operand (operands[1], DImode))\n     {\n       rtx temp;\n \n@@ -281,15 +278,18 @@\n \t       && GET_CODE (XEXP (XEXP (operands[1], 0), 1)) == CONST_INT\n \t       && (INTVAL (XEXP (XEXP (operands[1], 0), 1)) & 0x1fff) != 0)\n \t{\n-\t  HOST_WIDE_INT ofs = INTVAL (XEXP (XEXP (operands[1], 0), 1));\n-\t  rtx sym = XEXP (XEXP (operands[1], 0), 0);\n \t  rtx subtarget = no_new_pseudos ? temp : gen_reg_rtx (DImode);\n-\n-\t  sym = plus_constant (sym, ofs & ~(HOST_WIDE_INT)0x1fff);\n-\t  ofs &= 0x1fff;\n-\n-\t  emit_insn (gen_load_symptr (subtarget, sym));\n-\t  emit_insn (gen_adddi3 (temp, subtarget, GEN_INT (ofs)));\n+\t  rtx sym = XEXP (XEXP (operands[1], 0), 0);\n+\t  HOST_WIDE_INT ofs, hi, lo;\n+\n+\t  /* Split the offset into a sign extended 14-bit low part\n+\t     and a complementary high part.  */\n+\t  ofs = INTVAL (XEXP (XEXP (operands[1], 0), 1));\n+\t  lo = ((ofs & 0x3fff) ^ 0x2000) - 0x2000;\n+\t  hi = ofs - lo;\n+\t\n+\t  emit_insn (gen_load_symptr (subtarget, plus_constant (sym, hi)));\n+\t  emit_insn (gen_adddi3 (temp, subtarget, GEN_INT (lo)));\n \t}\n       else\n \temit_insn (gen_load_symptr (temp, operands[1]));\n@@ -329,14 +329,13 @@\n (define_expand \"load_fptr\"\n   [(set (match_dup 2)\n \t(plus:DI (reg:DI 1) (match_operand:DI 1 \"function_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\") (mem:DI (match_dup 2)))]\n+   (set (match_operand:DI 0 \"register_operand\" \"\") (match_dup 3))]\n   \"\"\n   \"\n {\n-  if (reload_in_progress)\n-    operands[2] = operands[0];\n-  else\n-    operands[2] = gen_reg_rtx (DImode);\n+  operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (DImode);\n+  operands[3] = gen_rtx_MEM (DImode, operands[2]);\n+  RTX_UNCHANGING_P (operands[3]) = 1;\n }\")\n \n (define_insn \"*load_fptr_internal1\"\n@@ -366,28 +365,26 @@\n    (set (match_operand:DI 0 \"register_operand\" \"\")\n \t(plus:DI (reg:DI 1) (match_dup 2)))]\n   \"\"\n-  \"{\n-  if (reload_in_progress)\n-    operands[2] = operands[0];\n-  else\n-    operands[2] = gen_reg_rtx (DImode);\n+  \"\n+{\n+  operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (DImode);\n }\")\n \n (define_expand \"load_symptr\"\n   [(set (match_dup 2)\n-\t(plus:DI (reg:DI 1) (match_operand:DI 1 \"symbolic_operand\" \"\")))\n+\t(plus:DI (reg:DI 1) (match_operand:DI 1 \"got_symbolic_operand\" \"\")))\n    (set (match_operand:DI 0 \"register_operand\" \"\") (match_dup 3))]\n   \"\"\n   \"\n {\n-  operands[2] = reload_in_progress ? operands[0] : gen_reg_rtx (DImode);\n+  operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (DImode);\n   operands[3] = gen_rtx_MEM (DImode, operands[2]);\n   RTX_UNCHANGING_P (operands[3]) = 1;\n }\")\n \n (define_insn \"*load_symptr_internal1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (reg:DI 1) (match_operand:DI 1 \"symbolic_operand\" \"s\")))]\n+\t(plus:DI (reg:DI 1) (match_operand:DI 1 \"got_symbolic_operand\" \"s\")))]\n   \"\"\n   \"addl %0 = @ltoff(%1), gp\"\n   [(set_attr \"type\" \"A\")])"}]}