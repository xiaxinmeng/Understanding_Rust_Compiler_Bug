{"sha": "b05e02332f86e3168b96708263a88ec8f07c5e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA1ZTAyMzMyZjg2ZTMxNjhiOTY3MDgyNjNhODhlYzhmMDdjNWU1YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-21T13:57:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-21T13:57:40Z"}, "message": "tree-vectorizer.h (LOC, [...]): Remove wrappers and fix all users.\n\n2013-11-21  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (LOC, UNKNOWN_LOC, EXPR_LOC, LOC_FILE,\n\tLOC_LINE): Remove wrappers and fix all users.\n\t(struct _loop_vec_info): Remove loop_line_number member.\n\t(LOOP_VINFO_LOC): Remove.\n\t* tree-parloops.c, tree-vect-loop-manip.c, tree-vect-slp.c,\n\ttree-vectorizer.c: Fix users of LOC, UNKNOWN_LOC, EXPR_LOC, LOC_FILE\n\tand LOC_LINE.\n\nFrom-SVN: r205216", "tree": {"sha": "8e642d44a66bc1192bf5b9d678473043c95ac1e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e642d44a66bc1192bf5b9d678473043c95ac1e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b05e02332f86e3168b96708263a88ec8f07c5e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05e02332f86e3168b96708263a88ec8f07c5e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b05e02332f86e3168b96708263a88ec8f07c5e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05e02332f86e3168b96708263a88ec8f07c5e5a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32f9be169ca3c5e1c56735c8b1e076570d56389c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f9be169ca3c5e1c56735c8b1e076570d56389c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32f9be169ca3c5e1c56735c8b1e076570d56389c"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "766421d978e418e9abe40a61df45e65714245caf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b05e02332f86e3168b96708263a88ec8f07c5e5a", "patch": "@@ -1,3 +1,13 @@\n+2013-11-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (LOC, UNKNOWN_LOC, EXPR_LOC, LOC_FILE,\n+\tLOC_LINE): Remove wrappers and fix all users.\n+\t(struct _loop_vec_info): Remove loop_line_number member.\n+\t(LOOP_VINFO_LOC): Remove.\n+\t* tree-parloops.c, tree-vect-loop-manip.c, tree-vect-slp.c,\n+\ttree-vectorizer.c: Fix users of LOC, UNKNOWN_LOC, EXPR_LOC, LOC_FILE\n+\tand LOC_LINE.\n+\n 2013-11-21  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (simplify_vce): New function."}, {"sha": "78b35df1b3a755a8e7b83d3b687b7448d387dbab", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=b05e02332f86e3168b96708263a88ec8f07c5e5a", "patch": "@@ -2145,7 +2145,7 @@ parallelize_loops (void)\n   reduction_info_table_type reduction_list;\n   struct obstack parloop_obstack;\n   HOST_WIDE_INT estimated;\n-  LOC loop_loc;\n+  source_location loop_loc;\n \n   /* Do not parallelize loops in the functions created by parallelization.  */\n   if (parallelized_function_p (cfun->decl))\n@@ -2225,9 +2225,9 @@ parallelize_loops (void)\n \telse\n \t  fprintf (dump_file, \"parallelizing inner loop %d\\n\",loop->header->index);\n \tloop_loc = find_loop_location (loop);\n-\tif (loop_loc != UNKNOWN_LOC)\n+\tif (loop_loc != UNKNOWN_LOCATION)\n \t  fprintf (dump_file, \"\\nloop at %s:%d: \",\n-\t\t   LOC_FILE (loop_loc), LOC_LINE (loop_loc));\n+\t\t   LOCATION_FILE (loop_loc), LOCATION_LINE (loop_loc));\n       }\n       gen_parallel_loop (loop, reduction_list,\n \t\t\t n_threads, &niter_desc);"}, {"sha": "f5192e82d1475cdb7a5d86a2bf66905acfe41016", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=b05e02332f86e3168b96708263a88ec8f07c5e5a", "patch": "@@ -661,7 +661,7 @@ slpeel_make_loop_iterate_ntimes (struct loop *loop, tree niters)\n   bool insert_after;\n   tree init = build_int_cst (TREE_TYPE (niters), 0);\n   tree step = build_int_cst (TREE_TYPE (niters), 1);\n-  LOC loop_loc;\n+  source_location loop_loc;\n   enum tree_code code;\n \n   orig_cond = get_loop_exit_condition (loop);\n@@ -691,9 +691,9 @@ slpeel_make_loop_iterate_ntimes (struct loop *loop, tree niters)\n   loop_loc = find_loop_location (loop);\n   if (dump_enabled_p ())\n     {\n-      if (LOCATION_LOCUS (loop_loc) != UNKNOWN_LOC)\n-\tdump_printf (MSG_NOTE, \"\\nloop at %s:%d: \", LOC_FILE (loop_loc),\n-\t\t     LOC_LINE (loop_loc));\n+      if (LOCATION_LOCUS (loop_loc) != UNKNOWN_LOCATION)\n+\tdump_printf (MSG_NOTE, \"\\nloop at %s:%d: \", LOCATION_FILE (loop_loc),\n+\t\t     LOCATION_LINE (loop_loc));\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, cond_stmt, 0);\n       dump_printf (MSG_NOTE, \"\\n\");\n     }\n@@ -1057,7 +1057,7 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n   basic_block new_exit_bb;\n   gimple_stmt_iterator gsi;\n   edge exit_e = single_exit (loop);\n-  LOC loop_loc;\n+  source_location loop_loc;\n   tree cost_pre_condition = NULL_TREE;\n   /* There are many aspects to how likely the first loop is going to be executed.\n      Without histogram we can't really do good job.  Simply set it to\n@@ -1365,15 +1365,15 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n    location is calculated.\n    Return the loop location if succeed and NULL if not.  */\n \n-LOC\n+source_location\n find_loop_location (struct loop *loop)\n {\n   gimple stmt = NULL;\n   basic_block bb;\n   gimple_stmt_iterator si;\n \n   if (!loop)\n-    return UNKNOWN_LOC;\n+    return UNKNOWN_LOCATION;\n \n   stmt = get_loop_exit_condition (loop);\n \n@@ -1385,7 +1385,7 @@ find_loop_location (struct loop *loop)\n      try to estimate the loop location */\n \n   if (!loop->header)\n-    return UNKNOWN_LOC;\n+    return UNKNOWN_LOCATION;\n \n   bb = loop->header;\n \n@@ -1396,7 +1396,7 @@ find_loop_location (struct loop *loop)\n         return gimple_location (stmt);\n     }\n \n-  return UNKNOWN_LOC;\n+  return UNKNOWN_LOCATION;\n }\n \n \n@@ -2224,7 +2224,7 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n   loop_version (loop, cond_expr, &condition_bb,\n \t\tprob, prob, REG_BR_PROB_BASE - prob, true);\n \n-  if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOC\n+  if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOCATION\n       && dump_enabled_p ())\n     {\n       if (version_alias)"}, {"sha": "c2e491241683d1f8283e6272219258174a13ca58", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=b05e02332f86e3168b96708263a88ec8f07c5e5a", "patch": "@@ -48,23 +48,23 @@ along with GCC; see the file COPYING3.  If not see\n /* Extract the location of the basic block in the source code.\n    Return the basic block location if succeed and NULL if not.  */\n \n-LOC\n+source_location\n find_bb_location (basic_block bb)\n {\n   gimple stmt = NULL;\n   gimple_stmt_iterator si;\n \n   if (!bb)\n-    return UNKNOWN_LOC;\n+    return UNKNOWN_LOCATION;\n \n   for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n     {\n       stmt = gsi_stmt (si);\n-      if (gimple_location (stmt) != UNKNOWN_LOC)\n+      if (gimple_location (stmt) != UNKNOWN_LOCATION)\n         return gimple_location (stmt);\n     }\n \n-  return UNKNOWN_LOC;\n+  return UNKNOWN_LOCATION;\n }\n \n "}, {"sha": "7416aaa61350c89d6acd830034e3ec03225a5ac9", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=b05e02332f86e3168b96708263a88ec8f07c5e5a", "patch": "@@ -79,7 +79,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n \n /* Loop or bb location.  */\n-LOC vect_location;\n+source_location vect_location;\n \n /* Vector mapping GIMPLE stmt to stmt_vec_info. */\n vec<vec_void_p> stmt_vec_info_vec;\n@@ -354,10 +354,11 @@ vectorize_loops (void)\n       {\n \tloop_vec_info loop_vinfo;\n \tvect_location = find_loop_location (loop);\n-        if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOC\n+        if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOCATION\n \t    && dump_enabled_p ())\n \t  dump_printf (MSG_NOTE, \"\\nAnalyzing loop at %s:%d\\n\",\n-                       LOC_FILE (vect_location), LOC_LINE (vect_location));\n+                       LOCATION_FILE (vect_location),\n+\t\t       LOCATION_LINE (vect_location));\n \n \tloop_vinfo = vect_analyze_loop (loop);\n \tloop->aux = loop_vinfo;\n@@ -368,7 +369,7 @@ vectorize_loops (void)\n         if (!dbg_cnt (vect_loop))\n \t  break;\n \n-        if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOC\n+        if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOCATION\n \t    && dump_enabled_p ())\n           dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n                            \"loop vectorized\\n\");\n@@ -390,7 +391,7 @@ vectorize_loops (void)\n \t  }\n       }\n \n-  vect_location = UNKNOWN_LOC;\n+  vect_location = UNKNOWN_LOCATION;\n \n   statistics_counter_event (cfun, \"Vectorized loops\", num_vectorized_loops);\n   if (dump_enabled_p ()\n@@ -549,7 +550,7 @@ increase_alignment (void)\n {\n   struct varpool_node *vnode;\n \n-  vect_location = UNKNOWN_LOC;\n+  vect_location = UNKNOWN_LOCATION;\n \n   /* Increase the alignment of all global arrays for vectorization.  */\n   FOR_EACH_DEFINED_VARIABLE (vnode)"}, {"sha": "23c4d88beb338acfa15512071d66176bd02e4f4d", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05e02332f86e3168b96708263a88ec8f07c5e5a/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=b05e02332f86e3168b96708263a88ec8f07c5e5a", "patch": "@@ -25,12 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"hash-table.h\"\n \n-typedef source_location LOC;\n-#define UNKNOWN_LOC UNKNOWN_LOCATION\n-#define EXPR_LOC(e) EXPR_LOCATION (e)\n-#define LOC_FILE(l) LOCATION_FILE (l)\n-#define LOC_LINE(l) LOCATION_LINE (l)\n-\n /* Used for naming of new temporaries.  */\n enum vect_var_kind {\n   vect_simple_var,\n@@ -273,9 +267,6 @@ typedef struct _loop_vec_info {\n   /* Unrolling factor  */\n   int vectorization_factor;\n \n-  /* The loop location in the source.  */\n-  LOC loop_line_number;\n-\n   /* Unknown DRs according to which loop was peeled.  */\n   struct data_reference *unaligned_dr;\n \n@@ -343,6 +334,10 @@ typedef struct _loop_vec_info {\n      this.  */\n   bool peeling_for_gaps;\n \n+  /* When the number of iterations is not a multiple of the vector size\n+     we need to peel off iterations at the end to form an epilogue loop.  */\n+  bool peeling_for_niter;\n+\n   /* Reductions are canonicalized so that the last operand is the reduction\n      operand.  If this places a constant into RHS1, this decanonicalizes\n      GIMPLE for other phases, so we must track when this has occurred and\n@@ -369,7 +364,6 @@ typedef struct _loop_vec_info {\n #define LOOP_PEELING_FOR_ALIGNMENT(L)      (L)->peeling_for_alignment\n #define LOOP_VINFO_UNALIGNED_DR(L)         (L)->unaligned_dr\n #define LOOP_VINFO_MAY_MISALIGN_STMTS(L)   (L)->may_misalign_stmts\n-#define LOOP_VINFO_LOC(L)                  (L)->loop_line_number\n #define LOOP_VINFO_MAY_ALIAS_DDRS(L)       (L)->may_alias_ddrs\n #define LOOP_VINFO_COMP_ALIAS_DDRS(L)      (L)->comp_alias_ddrs\n #define LOOP_VINFO_GROUPED_STORES(L)       (L)->grouped_stores\n@@ -925,7 +919,7 @@ unlimited_cost_model ()\n }\n \n /* Source location */\n-extern LOC vect_location;\n+extern source_location vect_location;\n \n /*-----------------------------------------------------------------*/\n /* Function prototypes.                                            */\n@@ -941,7 +935,7 @@ extern void vect_do_peeling_for_loop_bound (loop_vec_info, tree, tree,\n \t\t\t\t\t    unsigned int, bool);\n extern void vect_do_peeling_for_alignment (loop_vec_info, tree,\n \t\t\t\t\t   unsigned int, bool);\n-extern LOC find_loop_location (struct loop *);\n+extern source_location find_loop_location (struct loop *);\n extern bool vect_can_advance_ivs_p (loop_vec_info);\n \n /* In tree-vect-stmts.c.  */\n@@ -1072,7 +1066,7 @@ extern void vect_detect_hybrid_slp (loop_vec_info);\n extern void vect_get_slp_defs (vec<tree> , slp_tree,\n \t\t\t       vec<vec<tree> > *, int);\n \n-extern LOC find_bb_location (basic_block);\n+extern source_location find_bb_location (basic_block);\n extern bb_vec_info vect_slp_analyze_bb (basic_block);\n extern void vect_slp_transform_bb (basic_block);\n "}]}