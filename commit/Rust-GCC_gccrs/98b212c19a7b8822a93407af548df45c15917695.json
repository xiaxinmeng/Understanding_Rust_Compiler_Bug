{"sha": "98b212c19a7b8822a93407af548df45c15917695", "node_id": "C_kwDOANBUbNoAKDk4YjIxMmMxOWE3Yjg4MjJhOTM0MDdhZjU0OGRmNDVjMTU5MTc2OTU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-04T18:44:15Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-06T13:11:58Z"}, "message": "Cleanup back_threader::find_path_to_names.\n\nThe main path discovery function was due for a cleanup.  First,\nthere's a nagging goto and second, my bitmap use was sloppy.  Hopefully\nthis makes the code easier for others to read.\n\nRegstrapped on x86-64 Linux.  I also made sure there were no difference\nin the number of threads with this patch.\n\nNo functional changes.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (back_threader::find_paths_to_names):\n\tRemove gotos and other cleanups.", "tree": {"sha": "c403489e72b2f0706f5331dcdbbd89fcb705a0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c403489e72b2f0706f5331dcdbbd89fcb705a0f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b212c19a7b8822a93407af548df45c15917695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b212c19a7b8822a93407af548df45c15917695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b212c19a7b8822a93407af548df45c15917695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b212c19a7b8822a93407af548df45c15917695/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "851dff042a238f9ba566468ac6934f878a9e5ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851dff042a238f9ba566468ac6934f878a9e5ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851dff042a238f9ba566468ac6934f878a9e5ac5"}], "stats": {"total": 65, "additions": 24, "deletions": 41}, "files": [{"sha": "0085ad01cdc98da360196949a071fc4f0b6ffce4", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b212c19a7b8822a93407af548df45c15917695/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b212c19a7b8822a93407af548df45c15917695/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=98b212c19a7b8822a93407af548df45c15917695", "patch": "@@ -89,7 +89,7 @@ class back_threader\n   void find_paths (basic_block bb, tree name);\n   bool debug_counter ();\n   edge maybe_register_path ();\n-  bool find_paths_to_names (basic_block bb, bitmap imports);\n+  void find_paths_to_names (basic_block bb, bitmap imports);\n   bool resolve_def (tree name, bitmap interesting, vec<tree> &worklist);\n   void resolve_phi (gphi *phi, bitmap imports);\n   edge find_taken_edge (const vec<basic_block> &path);\n@@ -388,40 +388,28 @@ back_threader::resolve_def (tree name, bitmap interesting, vec<tree> &worklist)\n // Find jump threading paths to any of the SSA names in the\n // INTERESTING bitmap, and register any such paths.\n //\n-// Return TRUE if no further processing past this block is necessary.\n-// This is because we've either registered a path, or because there is\n-// nothing of interesting beyond this block.\n-//\n // BB is the current path being processed.\n \n-bool\n+void\n back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n {\n   if (m_visited_bbs.add (bb))\n-    return true;\n+    return;\n \n   m_path.safe_push (bb);\n \n-  if (m_path.length () > 1\n-      && !m_profit.profitable_path_p (m_path, m_name, NULL))\n-    {\n-      m_path.pop ();\n-      m_visited_bbs.remove (bb);\n-      return false;\n-    }\n-\n   // Try to resolve the path without looking back.\n-  if (m_path.length () > 1 && maybe_register_path ())\n+  if (m_path.length () > 1\n+      && (!m_profit.profitable_path_p (m_path, m_name, NULL)\n+\t  || maybe_register_path ()))\n     {\n       m_path.pop ();\n       m_visited_bbs.remove (bb);\n-      return true;\n+      return;\n     }\n \n   auto_bitmap processed;\n-  unsigned i;\n   bool done = false;\n-\n   // We use a worklist instead of iterating through the bitmap,\n   // because we may add new items in-flight.\n   auto_vec<tree> worklist (bitmap_count_bits (interesting));\n@@ -433,37 +421,32 @@ back_threader::find_paths_to_names (basic_block bb, bitmap interesting)\n       basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (name));\n \n       // Process any names defined in this block.\n-      if (def_bb == bb)\n+      if (def_bb == bb\n+\t  && bitmap_set_bit (processed, i)\n+\t  && resolve_def (name, interesting, worklist))\n \t{\n-\t  bitmap_set_bit (processed, i);\n-\n-\t  if (resolve_def (name, interesting, worklist))\n-\t    {\n-\t      done = true;\n-\t      goto leave_bb;\n-\t    }\n+\t  done = true;\n+\t  break;\n \t}\n     }\n-\n   // If there are interesting names not yet processed, keep looking.\n-  bitmap_and_compl_into (interesting, processed);\n-  if (!bitmap_empty_p (interesting))\n+  if (!done)\n     {\n-      edge_iterator iter;\n-      edge e;\n-      FOR_EACH_EDGE (e, iter, bb->preds)\n-\tif ((e->flags & EDGE_ABNORMAL) == 0)\n-\t  done |= find_paths_to_names (e->src, interesting);\n+      bitmap_and_compl_into (interesting, processed);\n+      if (!bitmap_empty_p (interesting))\n+\t{\n+\t  edge_iterator iter;\n+\t  edge e;\n+\t  FOR_EACH_EDGE (e, iter, bb->preds)\n+\t    if ((e->flags & EDGE_ABNORMAL) == 0)\n+\t      find_paths_to_names (e->src, interesting);\n+\t}\n     }\n \n- leave_bb:\n-  bitmap_iterator bi;\n-  EXECUTE_IF_SET_IN_BITMAP (processed, 0, i, bi)\n-    bitmap_set_bit (interesting, i);\n-\n+  // Reset things to their original state.\n+  bitmap_ior_into (interesting, processed);\n   m_path.pop ();\n   m_visited_bbs.remove (bb);\n-  return done;\n }\n \n // Search backwards from BB looking for paths where the final"}]}