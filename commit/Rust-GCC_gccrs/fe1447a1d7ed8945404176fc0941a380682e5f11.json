{"sha": "fe1447a1d7ed8945404176fc0941a380682e5f11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxNDQ3YTFkN2VkODk0NTQwNDE3NmZjMDk0MWEzODA2ODJlNWYxMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-01T20:47:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-01T20:47:50Z"}, "message": "[AArch64] Minor rtx costs tweak\n\naarch64_rtx_costs uses the number of registers in a mode as the basis\nof SET costs.  This patch makes it get the number of registers from\naarch64_hard_regno_nregs rather than repeating the calcalation inline.\nHandling SVE modes in aarch64_hard_regno_nregs is then enough to get\nthe correct SET cost as well.\n\n2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Use\n\taarch64_hard_regno_nregs to get the number of registers\n\tin a mode.\n\nReviewed-By: James Greenhalgh  <james.greenhalgh@arm.com>\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254327", "tree": {"sha": "0d017d8d73160a28b24aeb8961ce2c0add358ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d017d8d73160a28b24aeb8961ce2c0add358ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe1447a1d7ed8945404176fc0941a380682e5f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1447a1d7ed8945404176fc0941a380682e5f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1447a1d7ed8945404176fc0941a380682e5f11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1447a1d7ed8945404176fc0941a380682e5f11/comments", "author": null, "committer": null, "parents": [{"sha": "ff1335e2080f16f9b42b9a886c8c063f869a6eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1335e2080f16f9b42b9a886c8c063f869a6eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1335e2080f16f9b42b9a886c8c063f869a6eed"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "7ef2988ba2dd4510b5fc414ad02f7c649dfbc947", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1447a1d7ed8945404176fc0941a380682e5f11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1447a1d7ed8945404176fc0941a380682e5f11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe1447a1d7ed8945404176fc0941a380682e5f11", "patch": "@@ -1,3 +1,11 @@\n+2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Use\n+\taarch64_hard_regno_nregs to get the number of registers\n+\tin a mode.\n+\n 2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "62682a476a49c45adcbc9beed88e6878f7c88899", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1447a1d7ed8945404176fc0941a380682e5f11/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1447a1d7ed8945404176fc0941a380682e5f11/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fe1447a1d7ed8945404176fc0941a380682e5f11", "patch": "@@ -6939,18 +6939,16 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t  /* The cost is one per vector-register copied.  */\n \t  if (VECTOR_MODE_P (GET_MODE (op0)) && REG_P (op1))\n \t    {\n-\t      int n_minus_1 = (GET_MODE_SIZE (GET_MODE (op0)) - 1)\n-\t\t\t      / GET_MODE_SIZE (V4SImode);\n-\t      *cost = COSTS_N_INSNS (n_minus_1 + 1);\n+\t      int nregs = aarch64_hard_regno_nregs (V0_REGNUM, GET_MODE (op0));\n+\t      *cost = COSTS_N_INSNS (nregs);\n \t    }\n \t  /* const0_rtx is in general free, but we will use an\n \t     instruction to set a register to 0.  */\n \t  else if (REG_P (op1) || op1 == const0_rtx)\n \t    {\n \t      /* The cost is 1 per register copied.  */\n-\t      int n_minus_1 = (GET_MODE_SIZE (GET_MODE (op0)) - 1)\n-\t\t\t      / UNITS_PER_WORD;\n-\t      *cost = COSTS_N_INSNS (n_minus_1 + 1);\n+\t      int nregs = aarch64_hard_regno_nregs (R0_REGNUM, GET_MODE (op0));\n+\t      *cost = COSTS_N_INSNS (nregs);\n \t    }\n           else\n \t    /* Cost is just the cost of the RHS of the set.  */"}]}