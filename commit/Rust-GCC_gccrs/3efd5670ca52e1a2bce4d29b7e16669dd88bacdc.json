{"sha": "3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmZDU2NzBjYTUyZTFhMmJjZTRkMjliN2UxNjY2OWRkODhiYWNkYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-04-12T13:03:17Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-04-12T13:03:17Z"}, "message": "md.texi (Blackfin family constraints): Document PA and PB.\n\n\t* doc/md.texi (Blackfin family constraints): Document PA and PB.\n\t* config/bfin/bfin.h (CONST_OK_FOR_P): Handle PA and PB.\n\t(MACFLAGS_MATCH_P): New macro.\n\t* config/bfin/bfin.c (print_operand): Handle MACFLAG_IS_M.\n\t(bfin_secondary_reload): Treat EVEN_AREGS and ODD_AREGS like AREGS.\n\t* config/bfin/bfin.md (MACFLAG_IS_M): New constant.  Renumber some of\n\tthe other MACFLAG constants.\n\t(sum_of_accumulators, lshrpdi3, ashrpdi3): New patterns.\n\t(flag_machi): Tighten constraints.  Renumber some of the operands.\n\t(flag_machi_acconly): Tighten constraints.  Correct operand numbers in\n\toutput template.\n\t(flag_machi_parts_acconly): New pattern.\n\t(flag_macinithi): Tighten constraints.  Allow any accumulator to be\n\tused.\n\t(flag_macinit1hi): Tighten constraints.\n\t(flag_mul_macv2hi_parts_acconly): New pattern.\n\nFrom-SVN: r123745", "tree": {"sha": "4ed1b7b9f4de2f2a74e9b4b54b9045f209f12db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed1b7b9f4de2f2a74e9b4b54b9045f209f12db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/comments", "author": null, "committer": null, "parents": [{"sha": "f4de8ba686f8a4c7cc2d7ff9fa53315e826560c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4de8ba686f8a4c7cc2d7ff9fa53315e826560c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4de8ba686f8a4c7cc2d7ff9fa53315e826560c4"}], "stats": {"total": 225, "additions": 194, "deletions": 31}, "files": [{"sha": "7d1953044b2a97fadbc0218cfc64a21f5d199075", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "patch": "@@ -1,3 +1,22 @@\n+2007-04-12  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* doc/md.texi (Blackfin family constraints): Document PA and PB.\n+\t* config/bfin/bfin.h (CONST_OK_FOR_P): Handle PA and PB.\n+\t(MACFLAGS_MATCH_P): New macro.\n+\t* config/bfin/bfin.c (print_operand): Handle MACFLAG_IS_M.\n+\t(bfin_secondary_reload): Treat EVEN_AREGS and ODD_AREGS like AREGS.\n+\t* config/bfin/bfin.md (MACFLAG_IS_M): New constant.  Renumber some of\n+\tthe other MACFLAG constants.\n+\t(sum_of_accumulators, lshrpdi3, ashrpdi3): New patterns.\n+\t(flag_machi): Tighten constraints.  Renumber some of the operands.\n+\t(flag_machi_acconly): Tighten constraints.  Correct operand numbers in\n+\toutput template.\n+\t(flag_machi_parts_acconly): New pattern.\n+\t(flag_macinithi): Tighten constraints.  Allow any accumulator to be\n+\tused.\n+\t(flag_macinit1hi): Tighten constraints.\n+\t(flag_mul_macv2hi_parts_acconly): New pattern.\n+\n 2007-04-12  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config.gcc (*-*-vxworks*): Don't add to tm_files in this stanza."}, {"sha": "ecadb57e403e0835be63dd0b9dadb61a233f1dff", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "patch": "@@ -1356,6 +1356,9 @@ print_operand (FILE *file, rtx x, char code)\n \t\tcase MACFLAG_M:\n \t\t  fputs (\"(M)\", file);\n \t\t  break;\n+\t\tcase MACFLAG_IS_M:\n+\t\t  fputs (\"(IS,M)\", file);\n+\t\t  break;\n \t\tcase MACFLAG_ISS2:\n \t\t  fputs (\"(ISS2)\", file);\n \t\t  break;\n@@ -2014,10 +2017,12 @@ bfin_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x, enum reg_class class,\n   /* Data can usually be moved freely between registers of most classes.\n      AREGS are an exception; they can only move to or from another register\n      in AREGS or one in DREGS.  They can also be assigned the constant 0.  */\n-  if (x_class == AREGS)\n-    return class == DREGS || class == AREGS ? NO_REGS : DREGS;\n+  if (x_class == AREGS || x_class == EVEN_AREGS || x_class == ODD_AREGS)\n+    return (class == DREGS || class == AREGS || class == EVEN_AREGS\n+\t    || class == ODD_AREGS\n+\t    ? NO_REGS : DREGS);\n \n-  if (class == AREGS)\n+  if (class == AREGS || class == EVEN_AREGS || class == ODD_AREGS)\n     {\n       if (x != const0_rtx && x_class != DREGS)\n \treturn DREGS;"}, {"sha": "2c67bef91a6ab3cc38ff1b55b03538270101e225", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "patch": "@@ -1084,6 +1084,8 @@ do {\t\t\t\t\t       \\\n      : (STR)[1] == '2' ? (VALUE) == 2 \\\n      : (STR)[1] == '3' ? (VALUE) == 3 \\\n      : (STR)[1] == '4' ? (VALUE) == 4 \\\n+     : (STR)[1] == 'A' ? (VALUE) != MACFLAG_M && (VALUE) != MACFLAG_IS_M \\\n+     : (STR)[1] == 'B' ? (VALUE) == MACFLAG_M || (VALUE) == MACFLAG_IS_M \\\n      : 0)\n \n #define CONST_OK_FOR_K(VALUE, STR)\t\t\t\\\n@@ -1143,6 +1145,17 @@ do {\t\t\t\t\t       \\\n #define EXTRA_CONSTRAINT(VALUE, D) \\\n     ((D) == 'Q' ? GET_CODE (VALUE) == SYMBOL_REF : 0)\n \n+/* Evaluates to true if A and B are mac flags that can be used\n+   together in a single multiply insn.  That is the case if they are\n+   both the same flag not involving M, or if one is a combination of\n+   the other with M.  */\n+#define MACFLAGS_MATCH_P(A, B) \\\n+ ((A) == (B) \\\n+  || ((A) == MACFLAG_NONE && (B) == MACFLAG_M) \\\n+  || ((A) == MACFLAG_M && (B) == MACFLAG_NONE) \\\n+  || ((A) == MACFLAG_IS && (B) == MACFLAG_IS_M) \\\n+  || ((A) == MACFLAG_IS_M && (B) == MACFLAG_IS))\n+\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n "}, {"sha": "e1eeaa6b96fc8b55500263140a21418167fe66f7", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 146, "deletions": 28, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "patch": "@@ -154,9 +154,10 @@\n    (MACFLAG_IU 5)\n    (MACFLAG_W32 6)\n    (MACFLAG_M 7)\n-   (MACFLAG_S2RND 8)\n-   (MACFLAG_ISS2 9)\n-   (MACFLAG_IH 10)])\n+   (MACFLAG_IS_M 8)\n+   (MACFLAG_S2RND 9)\n+   (MACFLAG_ISS2 10)\n+   (MACFLAG_IH 11)])\n \n (define_attr \"type\"\n   \"move,movcc,mvi,mcld,mcst,dsp32,mult,alu0,shft,brcc,br,call,misc,sync,compare,dummy\"\n@@ -1226,6 +1227,19 @@\n   \"%0 = %1 - %2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n+;; Accumulator addition\n+\n+(define_insn \"sum_of_accumulators\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(ss_truncate:SI\n+\t (ss_plus:PDI (match_operand:PDI 2 \"register_operand\" \"1\")\n+\t\t      (match_operand:PDI 3 \"register_operand\" \"B\"))))\n+   (set (match_operand:PDI 1 \"register_operand\" \"=A\")\n+\t (ss_plus:PDI (match_dup 2) (match_dup 3)))]\n+  \"\"\n+  \"%0 = (A0 += A1)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n ;; Bit test instructions\n \n (define_insn \"*not_bittst\"\n@@ -1643,6 +1657,22 @@\n    %0 = %1 >> %2;\"\n   [(set_attr \"type\" \"shft,dsp32,shft\")])\n \n+(define_insn \"lshrpdi3\"\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n+\t(lshiftrt:PDI (match_operand:PDI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"Ku5\")))]\n+  \"\"\n+  \"%0 = %1 >> %2%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"ashrpdi3\"\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n+\t(ashiftrt:PDI (match_operand:PDI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"Ku5\")))]\n+  \"\"\n+  \"%0 = %1 >>> %2%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n ;; A pattern to reload the equivalent of\n ;;   (set (Dreg) (plus (FP) (large_constant)))\n ;; or\n@@ -3031,52 +3061,83 @@\n }\n   [(set_attr \"type\" \"dsp32\")])\n \n+;; Three alternatives here to cover all possible allocations:\n+;; 0. mac flag is usable only for accumulator 1 - use A1 and odd DREG\n+;; 1. mac flag is usable for accumulator 0 - use A0 and even DREG\n+;; 2. mac flag is usable in any accumulator - use A1 and odd DREG\n+;; Other patterns which don't have a DREG destination can collapse cases\n+;; 1 and 2 into one.\n (define_insn \"flag_machi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(unspec:HI [(match_operand:HI 1 \"register_operand\" \"d\")\n-\t\t    (match_operand:HI 2 \"register_operand\" \"d\")\n-\t\t    (match_operand 3 \"register_operand\" \"A\")\n-\t\t    (match_operand 4 \"const01_operand\" \"P0P1\")\n-\t\t    (match_operand 5 \"const_int_operand\" \"n\")]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=W,D,W\")\n+\t(unspec:HI [(match_operand:HI 2 \"register_operand\" \"d,d,d\")\n+\t\t    (match_operand:HI 3 \"register_operand\" \"d,d,d\")\n+\t\t    (match_operand 4 \"register_operand\" \"1,1,1\")\n+\t\t    (match_operand 5 \"const01_operand\" \"P0P1,P0P1,P0P1\")\n+\t\t    (match_operand 6 \"const_int_operand\" \"PB,PA,PA\")]\n \t\t   UNSPEC_MAC_WITH_FLAG))\n-   (set (match_operand:PDI 6 \"register_operand\" \"=A\")\n+   (set (match_operand:PDI 1 \"register_operand\" \"=B,A,B\")\n \t(unspec:PDI [(match_dup 1) (match_dup 2) (match_dup 3)\n \t\t     (match_dup 4) (match_dup 5)]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n-  \"%h0 = (A0 %b4 %h1 * %h2) %M6%!\"\n+  \"%h0 = (%1 %b5 %h2 * %h3) %M6%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_machi_acconly\"\n-  [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n-\t(unspec:PDI [(match_operand:HI 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:HI 2 \"register_operand\" \"d\")\n-\t\t     (match_operand 3 \"register_operand\" \"A\")\n-\t\t     (match_operand 4 \"const01_operand\" \"P0P1\")\n-\t\t     (match_operand 5 \"const_int_operand\" \"n\")]\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=B,e\")\n+\t(unspec:PDI [(match_operand:HI 1 \"register_operand\" \"d,d\")\n+\t\t     (match_operand:HI 2 \"register_operand\" \"d,d\")\n+\t\t     (match_operand 3 \"register_operand\" \"0,0\")\n+\t\t     (match_operand 4 \"const01_operand\" \"P0P1,P0P1\")\n+\t\t     (match_operand 5 \"const_int_operand\" \"PB,PA\")]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n-  \"%0 %b4 %h1 * %h2 %M6%!\"\n+  \"%0 %b4 %h1 * %h2 %M5%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+(define_insn \"flag_machi_parts_acconly\"\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=B,e\")\n+\t(unspec:PDI [(vec_select:HI\n+\t\t      (match_operand:V2HI 1 \"register_operand\" \"d,d\")\n+\t\t      (parallel [(match_operand 3 \"const01_operand\" \"P0P1,P0P1\")]))\n+\t\t     (vec_select:HI\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"d,d\")\n+\t\t      (parallel [(match_operand 4 \"const01_operand\" \"P0P1,P0P1\")]))\n+\t\t     (match_operand:PDI 5 \"register_operand\" \"0,0\")\n+\t\t     (match_operand 6 \"const01_operand\" \"P0P1,P0P1\")\n+\t\t     (match_operand 7 \"const_int_operand\" \"PB,PA\")]\n+\t\t    UNSPEC_MAC_WITH_FLAG))]\n+  \"\"\n+{\n+  const char *templates[] = {\n+    \"%0 %b6 %h1 * %h2 %M7%!\",\n+    \"%0 %b6 %d1 * %h2 %M7%!\",\n+    \"%0 %b6 %h1 * %d2 %M7%!\",\n+    \"%0 %b6 %d1 * %d2 %M7%!\"\n+  };\n+  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1);\n+  return templates[alt];\n+}\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_macinithi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(unspec:HI [(match_operand:HI 1 \"register_operand\" \"d\")\n-\t\t    (match_operand:HI 2 \"register_operand\" \"d\")\n-\t\t    (match_operand 3 \"const_int_operand\" \"n\")]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=W,D,W\")\n+\t(unspec:HI [(match_operand:HI 1 \"register_operand\" \"d,d,d\")\n+\t\t    (match_operand:HI 2 \"register_operand\" \"d,d,d\")\n+\t\t    (match_operand 3 \"const_int_operand\" \"PB,PA,PA\")]\n \t\t   UNSPEC_MAC_WITH_FLAG))\n-   (set (match_operand:PDI 4 \"register_operand\" \"=A\")\n+   (set (match_operand:PDI 4 \"register_operand\" \"=B,A,B\")\n \t(unspec:PDI [(match_dup 1) (match_dup 2) (match_dup 3)]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n-  \"%h0 = (A0 = %h1 * %h2) %M3%!\"\n+  \"%h0 = (%4 = %h1 * %h2) %M3%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_macinit1hi\"\n-  [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n-\t(unspec:PDI [(match_operand:HI 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:HI 2 \"register_operand\" \"d\")\n-\t\t     (match_operand 3 \"const_int_operand\" \"n\")]\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=B,e\")\n+\t(unspec:PDI [(match_operand:HI 1 \"register_operand\" \"d,d\")\n+\t\t     (match_operand:HI 2 \"register_operand\" \"d,d\")\n+\t\t     (match_operand 3 \"const_int_operand\" \"PB,PA\")]\n \t\t    UNSPEC_MAC_WITH_FLAG))]\n   \"\"\n   \"%0 = %h1 * %h2 %M3%!\"\n@@ -3338,6 +3399,63 @@\n }\n   [(set_attr \"type\" \"dsp32\")])\n \n+;; A mixture of multiply and multiply-accumulate for when we only want to\n+;; initialize one part.\n+(define_insn \"flag_mul_macv2hi_parts_acconly\"\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=B,e,e\")\n+\t(unspec:PDI [(vec_select:HI\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"d,d,d\")\n+\t\t      (parallel [(match_operand 4 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (vec_select:HI\n+\t\t      (match_operand:V2HI 3 \"register_operand\" \"d,d,d\")\n+\t\t      (parallel [(match_operand 6 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (match_operand 10 \"const_int_operand\" \"PB,PA,PA\")]\n+\t\t    UNSPEC_MUL_WITH_FLAG))\n+   (set (match_operand:PDI 1 \"register_operand\" \"=B,e,e\")\n+\t(unspec:PDI [(vec_select:HI\n+\t\t      (match_dup 2)\n+\t\t      (parallel [(match_operand 5 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (vec_select:HI\n+\t\t      (match_dup 3)\n+\t\t      (parallel [(match_operand 7 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (match_operand:PDI 8 \"register_operand\" \"1,1,1\")\n+\t\t     (match_operand 9 \"const01_operand\" \"P0P1,P0P1,P0P1\")\n+\t\t     (match_operand 11 \"const_int_operand\" \"PA,PB,PA\")]\n+\t\t    UNSPEC_MAC_WITH_FLAG))]\n+  \"MACFLAGS_MATCH_P (INTVAL (operands[10]), INTVAL (operands[11]))\"\n+{\n+  rtx xops[6];\n+  const char *templates[] = {\n+    \"%0 = %h2 * %h3, %1 %b4 %h2 * %h3 %M5%!\",\n+    \"%0 = %d2 * %h3, %1 %b4 %h2 * %h3 %M5%!\",\n+    \"%0 = %h2 * %h3, %1 %b4 %d2 * %h3 %M5%!\",\n+    \"%0 = %d2 * %h3, %1 %b4 %d2 * %h3 %M5%!\",\n+    \"%0 = %h2 * %d3, %1 %b4 %h2 * %h3 %M5%!\",\n+    \"%0 = %d2 * %d3, %1 %b4 %h2 * %h3 %M5%!\",\n+    \"%0 = %h2 * %d3, %1 %b4 %d2 * %h3 %M5%!\",\n+    \"%0 = %d2 * %d3, %1 %b4 %d2 * %h3 %M5%!\",\n+    \"%0 = %h2 * %h3, %1 %b4 %h2 * %d3 %M5%!\",\n+    \"%0 = %d2 * %h3, %1 %b4 %h2 * %d3 %M5%!\",\n+    \"%0 = %h2 * %h3, %1 %b4 %d2 * %d3 %M5%!\",\n+    \"%0 = %d2 * %h3, %1 %b4 %d2 * %d3 %M5%!\",\n+    \"%0 = %h2 * %d3, %1 %b4 %h2 * %d3 %M5%!\",\n+    \"%0 = %d2 * %d3, %1 %b4 %h2 * %d3 %M5%!\",\n+    \"%0 = %h2 * %d3, %1 %b4 %d2 * %d3 %M5%!\",\n+    \"%0 = %d2 * %d3, %1 %b4 %d2 * %d3 %M5%!\" };\n+  int alt = (INTVAL (operands[4]) + (INTVAL (operands[5]) << 1)\n+\t     + (INTVAL (operands[6]) << 2)  + (INTVAL (operands[7]) << 3));\n+  xops[0] = operands[0];\n+  xops[1] = operands[1];\n+  xops[2] = operands[2];\n+  xops[3] = operands[3];\n+  xops[4] = operands[9];\n+  xops[5] = which_alternative == 0 ? operands[10] : operands[11];\n+  output_asm_insn (templates[alt], xops);\n+  return \"\";\n+}\n+  [(set_attr \"type\" \"dsp32\")])\n+\n+\n (define_code_macro s_or_u [sign_extend zero_extend])\n (define_code_attr su_optab [(sign_extend \"mul\")\n \t\t\t    (zero_extend \"umul\")])"}, {"sha": "4d485df41b825f6947e4cda05a72a6f7fa3e61a7", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3efd5670ca52e1a2bce4d29b7e16669dd88bacdc/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=3efd5670ca52e1a2bce4d29b7e16669dd88bacdc", "patch": "@@ -2249,6 +2249,14 @@ Unsigned 3 bit integer (in the range 0 to 7)\n @item P@var{n}\n Constant @var{n}, where @var{n} is a single-digit constant in the range 0 to 4.\n \n+@item PA\n+An integer equal to one of the MACFLAG_XXX constants that is suitable for\n+use with either accumulator.\n+\n+@item PB\n+An integer equal to one of the MACFLAG_XXX constants that is suitable for\n+use only with accumulator A1.\n+\n @item M1\n Constant 255.\n "}]}