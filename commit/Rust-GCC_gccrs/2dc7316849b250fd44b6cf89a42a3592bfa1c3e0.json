{"sha": "2dc7316849b250fd44b6cf89a42a3592bfa1c3e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjNzMxNjg0OWIyNTBmZDQ0YjZjZjg5YTQyYTM1OTJiZmExYzNlMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-01-18T00:20:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-01-18T00:20:52Z"}, "message": "Changes suggested by Per Bothner:\n\n\t* gcj.texi (Input Options): Don't mention input files.\n\t(Code Generation): Updated --main information.\n\t(Invoking jcf-dump): Mention that --javap is incomplete.\n\tFrom Alexandre Petit-Bianco:\n\t(Warnings): Don't mention -Wunsupported-jdk11.\n\tMy stuff:\n\t(Compatibility): Mention JDK 1.2-ness of libraries.\n\t(Resources): Mention resources used when writing gcj.\n\nFrom-SVN: r39103", "tree": {"sha": "63408c38742eeba5a431cb35023b2d146ceee530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63408c38742eeba5a431cb35023b2d146ceee530"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0/comments", "author": null, "committer": null, "parents": [{"sha": "6fee9e99fa7644d51100511eed8e28fed2d8f855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fee9e99fa7644d51100511eed8e28fed2d8f855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fee9e99fa7644d51100511eed8e28fed2d8f855"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "e904b7470366be9a0df81384addc94a29345a5ec", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2dc7316849b250fd44b6cf89a42a3592bfa1c3e0", "patch": "@@ -1,3 +1,15 @@\n+2001-01-17  Tom Tromey  <tromey@redhat.com>\n+\n+\tChanges suggested by Per Bothner:\n+\t* gcj.texi (Input Options): Don't mention input files.\n+\t(Code Generation): Updated --main information.\n+\t(Invoking jcf-dump): Mention that --javap is incomplete.\n+\tFrom Alexandre Petit-Bianco:\n+\t(Warnings): Don't mention -Wunsupported-jdk11.\n+\tMy stuff:\n+\t(Compatibility): Mention JDK 1.2-ness of libraries.\n+\t(Resources): Mention resources used when writing gcj.\n+\n 2001-01-17  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj.texi: New file."}, {"sha": "5b3cd83d88d17eaeb23900a57ca59e03592947c6", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc7316849b250fd44b6cf89a42a3592bfa1c3e0/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=2dc7316849b250fd44b6cf89a42a3592bfa1c3e0", "patch": "@@ -61,7 +61,7 @@ gcc, Using the GNU Compiler Collection}.  This manual only documents the\n options specific to @code{gcj}.\n \n @menu\n-* Input Options::\t\tHow to find input files\n+* Input Options::\t\tHow gcj finds files\n * Encodings::                   Options controlling source file encoding\n * Warnings::\t\t\tOptions controlling warnings specific to gcj\n * Code Generation::\t\tOptions controlling the output of gcj\n@@ -74,14 +74,16 @@ options specific to @code{gcj}.\n \n @cindex class path\n \n-@code{gcj} has options to control where it looks to find input files.\n-Like other compilers for the Java language, @code{gcj} has a notion of a\n-@dfn{class path}.  There are several options and environment variables\n-which can be used to manipulate the class path.  When @code{gcj} looks\n-for a given class, it searches the class path looking for the\n-corresponding @file{.class} file.  @code{gcj} comes with a built-in\n-class path which points at the installed @file{libgcj.jar}, a file which\n-contains all the standard classes.\n+@code{gcj} has options to control where it looks to find files it needs.\n+For instance, @code{gcj} might need to load a class that is referenced\n+by the file it has been asked to compile.  Like other compilers for the\n+Java language, @code{gcj} has a notion of a @dfn{class path}.  There are\n+several options and environment variables which can be used to\n+manipulate the class path.  When @code{gcj} looks for a given class, it\n+searches the class path looking for the corresponding @file{.class}\n+file.  @code{gcj} comes with a built-in class path which points at the\n+installed @file{libgcj.jar}, a file which contains all the standard\n+classes.\n \n In the below, a directory or path component can refer either to an\n actual directory on the filesystem, or to a @file{.zip} or @file{.jar}\n@@ -169,11 +171,6 @@ document the form of the warning which will have an effect -- the\n default being the opposite of what is listed.\n \n @table @code\n-@item -Wunsupported-jdk11\n-This will cause @code{gcj} to warn that @code{final} local variables are\n-being treated as non-final.\n-@c FIXME: why do we want this?  Is it just not implemented yet?\n-\n @item -Wredundant-modifiers\n With this flag, @code{gcj} will warn about redundant modifiers.  For\n instance, it will warn if an interface method is declared @code{public}.\n@@ -204,13 +201,13 @@ In addition to the many @code{gcc} options controlling code generation,\n \n @table @code\n @item --main=@var{CLASSNAME}\n-This option is used when linking.  Since the linker expects to find a\n-method simply named @code{main}, and since Java programs won't have such\n-a method (due to name mangling), at link time @code{gcj} will generate a\n-stub @code{main} function which will initialize the runtime and then\n-invoke the @code{main} method of the appropriate class.  This option is\n-used to specify the name of the class whose @code{main} method should be\n-invoked when the resulting executable is run.\n+This option is used when linking to specify the name of the class whose\n+@code{main} method should be invoked when the resulting executable is\n+run.  @footnote{The linker by default looks for a global function named\n+@code{main}.  Since Java does not have global functions, and a\n+collection of Java classes may have more than one class with a\n+@code{main} method, you need to let the linker know which of those\n+@code{main} methods it should invoke when starting the application.}\n \n @item -D@var{name}[=@var{value}]\n This option can only be used with @code{--main}.  It defines a system\n@@ -229,9 +226,6 @@ to be put in the appropriate subdirectory of @var{directory}.  By\n default they will be put in subdirectories of the current working\n directory.\n \n-@c @item -fassume-compiled\n-@c Nobody is sure what this does and anyway it doesn't work.\n-\n @item -fno-bounds-check\n By default, @code{gcj} generates code which checks the bounds of all\n array indexing operations.  With this option, these checks are omitted.\n@@ -278,7 +272,7 @@ dividing by zero.\n \n \n @node Compatibility\n-@chapter Compatibility\n+@chapter Compatibility with the Java Platform\n \n As we believe it is important that the Java platform not be fragmented,\n @code{gcj} and @code{libgcj} try to conform to the relevant Java\n@@ -296,7 +290,11 @@ Java 2 @code{strictfp} keyword (it recognizes the keyword but ignores\n it).\n \n @item\n-@code{libgcj} is missing many packages, most notably @code{java.awt}.\n+@code{libgcj} is largely compatible with the JDK 1.2 libraries.\n+However, @code{libgcj} is missing many packages, most notably\n+@code{java.awt}.  There are also individual missing classes and methods.\n+We currently do not have a list showing differences between\n+@code{libgcj} and the Java 2 platform.\n \n @item\n Sometimes the @code{libgcj} implementation of a method or class differs\n@@ -407,7 +405,8 @@ or file name.\n Disassemble method bodies.  By default method bodies are not printed.\n \n @item --javap\n-Generate output in @code{javap} format.\n+Generate output in @code{javap} format.  The implementation of this\n+feature is very incomplete.\n \n @item --classpath=@var{path}\n @itemx --CLASSPATH=@var{path}\n@@ -468,6 +467,13 @@ as the name of a jar file, not a class.\n @node Resources\n @chapter Resources\n \n+While writing @code{gcj} and @code{libgcj} we have, of course, relied\n+heavily on documentation from Sun Microsystems.  In particular we have\n+used The Java Language Specification (both first and second editions),\n+the Java Class Libraries (volumes one and two), and the Java Virtual\n+Machine Specification.  In addition we've used the online documentation\n+at @uref{http://java.sun.com/}.\n+\n The current @code{gcj} home page is\n @uref{http://sources.redhat.com/java/}.  This is likely to change in the\n near future."}]}