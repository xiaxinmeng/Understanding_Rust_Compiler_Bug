{"sha": "23bee8f4f1c78abc6d2cfad600424d7b37f60557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiZWU4ZjRmMWM3OGFiYzZkMmNmYWQ2MDA0MjRkN2IzN2Y2MDU1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-05-21T19:56:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-05-21T19:56:03Z"}, "message": "re PR c++/36023 (ICE with cast to variable-sized object)\n\n\tPR c++/36023\n\t* cp-tree.h (check_array_initializer): New prototype.\n\t* decl.c (check_array_initializer): New function.\n\t(check_initializer): Call it.\n\t* semantics.c (finish_compound_literal): Call it for ARRAY_TYPEs.\n\n\t* g++.dg/ext/complit10.C: New test.\n\nFrom-SVN: r135734", "tree": {"sha": "d2873c16dd8713c73413caf63949e0dc6fdadee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2873c16dd8713c73413caf63949e0dc6fdadee8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23bee8f4f1c78abc6d2cfad600424d7b37f60557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bee8f4f1c78abc6d2cfad600424d7b37f60557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23bee8f4f1c78abc6d2cfad600424d7b37f60557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bee8f4f1c78abc6d2cfad600424d7b37f60557/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6110c44a9732fde36136ca7404eebee9c072c85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6110c44a9732fde36136ca7404eebee9c072c85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6110c44a9732fde36136ca7404eebee9c072c85a"}], "stats": {"total": 89, "additions": 71, "deletions": 18}, "files": [{"sha": "f87d30c73a21bc4d72ab751f5770593dc41e8f74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23bee8f4f1c78abc6d2cfad600424d7b37f60557", "patch": "@@ -1,3 +1,11 @@\n+2008-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36023\n+\t* cp-tree.h (check_array_initializer): New prototype.\n+\t* decl.c (check_array_initializer): New function.\n+\t(check_initializer): Call it.\n+\t* semantics.c (finish_compound_literal): Call it for ARRAY_TYPEs.\n+\n 2008-05-21  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR/36280"}, {"sha": "0c3d0dd21aab2a1100f0811ef0be1b5dca7a6cab", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=23bee8f4f1c78abc6d2cfad600424d7b37f60557", "patch": "@@ -4211,6 +4211,7 @@ extern tree shadow_tag\t\t\t\t(cp_decl_specifier_seq *);\n extern tree groktypename\t\t\t(cp_decl_specifier_seq *, const cp_declarator *);\n extern tree start_decl\t\t\t\t(const cp_declarator *, cp_decl_specifier_seq *, int, tree, tree, tree *);\n extern void start_decl_1\t\t\t(tree, bool);\n+extern bool check_array_initializer\t\t(tree, tree, tree);\n extern void cp_finish_decl\t\t\t(tree, tree, bool, tree, int);\n extern void finish_decl\t\t\t\t(tree, tree, tree);\n extern int cp_complete_array_type\t\t(tree *, tree, bool);"}, {"sha": "0898d5d7fd2feccafc5c0c097df103fb0a182da2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=23bee8f4f1c78abc6d2cfad600424d7b37f60557", "patch": "@@ -4894,6 +4894,38 @@ reshape_init (tree type, tree init)\n   return new_init;\n }\n \n+/* Verify array initializer.  Returns true if errors have been reported.  */\n+\n+bool\n+check_array_initializer (tree decl, tree type, tree init)\n+{\n+  tree element_type = TREE_TYPE (type);\n+\n+  /* The array type itself need not be complete, because the\n+     initializer may tell us how many elements are in the array.\n+     But, the elements of the array must be complete.  */\n+  if (!COMPLETE_TYPE_P (complete_type (element_type)))\n+    {\n+      if (decl)\n+\terror (\"elements of array %q#D have incomplete type\", decl);\n+      else\n+\terror (\"elements of array %q#T have incomplete type\", type);\n+      return true;\n+    }\n+  /* It is not valid to initialize a VLA.  */\n+  if (init\n+      && ((COMPLETE_TYPE_P (type) && !TREE_CONSTANT (TYPE_SIZE (type)))\n+\t  || !TREE_CONSTANT (TYPE_SIZE (element_type))))\n+    {\n+      if (decl)\n+\terror (\"variable-sized object %qD may not be initialized\", decl);\n+      else\n+\terror (\"variable-sized compound literal\");\n+      return true;\n+    }\n+  return false;\n+}\n+\n /* Verify INIT (the initializer for DECL), and record the\n    initialization in DECL_INITIAL, if appropriate.  CLEANUP is as for\n    grok_reference_init.\n@@ -4917,24 +4949,8 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n-      tree element_type = TREE_TYPE (type);\n-\n-      /* The array type itself need not be complete, because the\n-\t initializer may tell us how many elements are in the array.\n-\t But, the elements of the array must be complete.  */\n-      if (!COMPLETE_TYPE_P (complete_type (element_type)))\n-\t{\n-\t  error (\"elements of array %q#D have incomplete type\", decl);\n-\t  return NULL_TREE;\n-\t}\n-      /* It is not valid to initialize a VLA.  */\n-      if (init\n-\t  && ((COMPLETE_TYPE_P (type) && !TREE_CONSTANT (TYPE_SIZE (type)))\n-\t      || !TREE_CONSTANT (TYPE_SIZE (element_type))))\n-\t{\n-\t  error (\"variable-sized object %qD may not be initialized\", decl);\n-\t  return NULL_TREE;\n-\t}\n+      if (check_array_initializer (decl, type, init))\n+\treturn NULL_TREE;\n     }\n   else if (!COMPLETE_TYPE_P (type))\n     {"}, {"sha": "d35319e72079c079cb62d850534f1c3cbffcd615", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=23bee8f4f1c78abc6d2cfad600424d7b37f60557", "patch": "@@ -2123,6 +2123,9 @@ finish_compound_literal (tree type, VEC(constructor_elt,gc) *initializer_list)\n     }\n \n   type = complete_type (type);\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && check_array_initializer (NULL_TREE, type, compound_literal))\n+    return error_mark_node;\n   compound_literal = reshape_init (type, compound_literal);\n   if (TREE_CODE (type) == ARRAY_TYPE)\n     cp_complete_array_type (&type, compound_literal, false);"}, {"sha": "11f44b99e7e6e2f57bf2085a7b73135cc43d5a85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23bee8f4f1c78abc6d2cfad600424d7b37f60557", "patch": "@@ -1,3 +1,8 @@\n+2008-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/36023\n+\t* g++.dg/ext/complit10.C: New test.\n+\n 2008-05-21  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gfortran.dg/nint_2.f90: XFAIL only when using -O0."}, {"sha": "7f159f0f707ab0f012a8c792c3e5c788866284ac", "filename": "gcc/testsuite/g++.dg/ext/complit10.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bee8f4f1c78abc6d2cfad600424d7b37f60557/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit10.C?ref=23bee8f4f1c78abc6d2cfad600424d7b37f60557", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/36023\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+struct A;\n+\n+void\n+f1 (int i)\n+{\n+  (int[i]) { 1 };\t// { dg-error \"variable-sized compound literal\" }\n+  (A[5]) { 1 };\t\t// { dg-error \"have incomplete type\" }\n+  (A[i]) { 1 };\t\t// { dg-error \"have incomplete type\" }\n+}\n+\n+void\n+f2 ()\n+{\n+  (int[]) { 1 };\n+  (int[1]) { 1 };\n+}"}]}