{"sha": "c8497ed6217cce05019295fcc046e08beeb2e4d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0OTdlZDYyMTdjY2UwNTAxOTI5NWZjYzA0NmUwOGJlZWIyZTRkNQ==", "commit": {"author": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-23T22:19:21Z"}, "committer": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-23T22:19:21Z"}, "message": "converted some entries in the hash structure from ints to shorts.\n\nthis was done to use a less expensive division instruction\nin the hashIndex() routine.\n\nFrom-SVN: r68", "tree": {"sha": "4ce956eee62e63d5e4fe3af0b185b54d4b62348a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce956eee62e63d5e4fe3af0b185b54d4b62348a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8497ed6217cce05019295fcc046e08beeb2e4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8497ed6217cce05019295fcc046e08beeb2e4d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8497ed6217cce05019295fcc046e08beeb2e4d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8497ed6217cce05019295fcc046e08beeb2e4d5/comments", "author": null, "committer": null, "parents": [{"sha": "b6793c3947f3c2fc625306616cb846ca54546ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6793c3947f3c2fc625306616cb846ca54546ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6793c3947f3c2fc625306616cb846ca54546ee6"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "672fb75a160a20671313311618e92947bf7125ff", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8497ed6217cce05019295fcc046e08beeb2e4d5/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8497ed6217cce05019295fcc046e08beeb2e4d5/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=c8497ed6217cce05019295fcc046e08beeb2e4d5", "patch": "@@ -21,10 +21,14 @@\n  * along with this program; if not, write to the Free Software\n  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n  * \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.h,v 0.3 1991/11/07 23:23:40 dennisg Exp dennisg $\n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.h,v 0.4 1991/11/21 22:25:19 dennisg Exp dennisg $\n   $Author: dennisg $\n-  $Date: 1991/11/07 23:23:40 $\n+  $Date: 1991/11/21 22:25:19 $\n   $Log: hash.h,v $\n+ * Revision 0.4  1991/11/21  22:25:19  dennisg\n+ * deleted hash mask information from hash struct.\n+ * changed hashing algorithm.  those values are no longer needed.\n+ *\n  * Revision 0.3  1991/11/07  23:23:40  dennisg\n  * implemented hash table expansion as suggested by rms.\n  *\n@@ -89,7 +93,7 @@ typedef struct cache {\n \t * Variables used to track the size of the hash\n \t *\ttable so to determine when to resize it.\n \t */\n-  u_int       sizeOfHash,                         /* Number of buckets \n+  u_short     sizeOfHash,                         /* Number of buckets \n                                                     allocated for the hash\n                                                     table (number of array\n                                                     entries allocated for\n@@ -132,11 +136,6 @@ void hash_add( Cache_t* theCache, void* aKey, void* aValue );\n                                                   assert() if the key isn't \n                                                   in the table. */\n void hash_remove( Cache_t theCache, void* aKey );\n-                                                /* Given key, return its \n-                                                  value.  Return NULL if the\n-                                                  key/value pair isn't in\n-                                                  the hash. */\n-void* hash_value_for_key( Cache_t theCache, void* aKey );\n                                                 /* Used to index through the\n                                                   hash table.  Start with NULL\n                                                   to get the first entry."}]}