{"sha": "34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjZTNkN2JhNWE0ODJkNzlhNTZkY2JkZmU3MmM3ZmJmNTkzMmM2Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-02-09T02:00:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-02-09T02:00:44Z"}, "message": "arm.c (arm_expand_prologue): Do tell the dwarf2 backend about the SP adjustment for saving the static chain...\n\n        * config/arm/arm.c (arm_expand_prologue): Do tell the dwarf2 backend\n        about the SP adjustment for saving the static chain pointer.\n        * dwarf2out.c (dwarf2out_frame_debug_expr): Use the specified\n        offset when setting a temporary CFA register.\n\nFrom-SVN: r39554", "tree": {"sha": "3c4a4455cb22bad2dd8d24ed45b3202db90aee51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c4a4455cb22bad2dd8d24ed45b3202db90aee51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a5f950e04d5f96083ffe0898c072efc51435c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5f950e04d5f96083ffe0898c072efc51435c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5f950e04d5f96083ffe0898c072efc51435c28"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "d2562aa40bcb4a3d4d9d610c4293ab9fed6f6f82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63", "patch": "@@ -1,3 +1,10 @@\n+2001-02-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* config/arm/arm.c (arm_expand_prologue): Do tell the dwarf2 backend\n+\tabout the SP adjustment for saving the static chain pointer.\n+\t* dwarf2out.c (dwarf2out_frame_debug_expr): Use the specified\n+\toffset when setting a temporary CFA register.\n+\n 2001-02-08  Chandrakala Chavva  <cchavva@redhat.com>\n \n \t* config.gcc : New targets, i386-*-chorusos*, sparc-*-chorusos*,"}, {"sha": "d906b14c51486def0da6a2f3063e9de1a20b867d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63", "patch": "@@ -7804,27 +7804,34 @@ arm_expand_prologue ()\n \t\t  \n \t     If neither of these places is available, we abort (for now).\n \n-\t     Note - setting RTX_FRAME_RELATED_P on these insns breaks\n-\t     the dwarf2 parsing code in various bits of gcc.  This ought\n-\t     to be fixed sometime, but until then the flag is suppressed.\n-\t     [Use gcc/testsuite/gcc.c-torture/execute/921215-1.c with\n-\t     \"-O3 -g\" to test this].  */\n+\t     Note - we only need to tell the dwarf2 backend about the SP\n+\t     adjustment in the second variant; the static chain register\n+\t     doesn't need to be unwound, as it doesn't contain a value\n+\t     inherited from the caller.  */\n \n \t  if (regs_ever_live[3] == 0)\n \t    {\n \t      insn = gen_rtx_REG (SImode, 3);\n \t      insn = gen_rtx_SET (SImode, insn, ip_rtx);\n \t      insn = emit_insn (insn);\n-\t      /* RTX_FRAME_RELATED_P (insn) = 1; */\n \t    }\n \t  else if (current_function_pretend_args_size == 0)\n \t    {\n+\t      rtx dwarf;\n \t      insn = gen_rtx_PRE_DEC (SImode, stack_pointer_rtx);\n \t      insn = gen_rtx_MEM (SImode, insn);\n \t      insn = gen_rtx_SET (VOIDmode, insn, ip_rtx);\n \t      insn = emit_insn (insn);\n-\t      /* RTX_FRAME_RELATED_P (insn) = 1; */\n+\n \t      fp_offset = 4;\n+\n+\t      /* Just tell the dwarf backend that we adjusted SP.  */\n+\t      dwarf = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t   gen_rtx_PLUS (SImode, stack_pointer_rtx,\n+\t\t\t\t\t\t GEN_INT (-fp_offset)));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n+\t\t\t\t\t\t    dwarf, REG_NOTES (insn));\n \t    }\n \t  else\n \t    /* FIXME - the way to handle this situation is to allow\n@@ -7931,15 +7938,13 @@ arm_expand_prologue ()\n \t      insn = gen_rtx_REG (SImode, 3);\n \t      insn = gen_rtx_SET (SImode, ip_rtx, insn);\n \t      insn = emit_insn (insn);\n-\t      /* RTX_FRAME_RELATED_P (insn) = 1; */\n \t    }\n \t  else /* if (current_function_pretend_args_size == 0) */\n \t    {\n \t      insn = gen_rtx_PLUS (SImode, hard_frame_pointer_rtx, GEN_INT (4));\n \t      insn = gen_rtx_MEM (SImode, insn);\n \t      insn = gen_rtx_SET (SImode, ip_rtx, insn);\n \t      insn = emit_insn (insn);\n-\t      /* RTX_FRAME_RELATED_P (insn) = 1; */\n \t    }\n \t}\n     }"}, {"sha": "fa62101ef6faa0ad4600ff3a55bc65b648b3c929", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=34ce3d7ba5a482d79a56dcbdfe72c7fbf5932c63", "patch": "@@ -1321,8 +1321,6 @@ dw_cfa_location cfa_temp;\n   Rules  1- 4: Setting a register's value to cfa.reg or an expression\n   \t       with cfa.reg as the first operand changes the cfa.reg and its\n \t       cfa.offset.\n-\t       (For an unknown reason, Rule 4 does not fully obey the\n-\t       invariant.)\n \n   Rules  6- 9: Set a non-cfa.reg register value to a constant or an\n \t       expression yielding a constant.  This sets cfa_temp.reg\n@@ -1362,8 +1360,6 @@ dw_cfa_location cfa_temp;\n   constraints: <reg1> != fp\n   \t       <reg1> != sp\n   effects: cfa.reg = <reg1>\n-  questions: Where is <const_int> used?\n-\t     Should cfa.offset be changed?\n \n   Rule 5:\n   (set <reg1> (plus <reg2>:cfa_temp.reg sp:cfa.reg))\n@@ -1547,9 +1543,15 @@ dwarf2out_frame_debug_expr (expr, label)\n \t      if (GET_CODE (XEXP (src, 0)) == REG\n \t\t  && REGNO (XEXP (src, 0)) == cfa.reg\n \t\t  && GET_CODE (XEXP (src, 1)) == CONST_INT)\n-\t\t/* Setting a temporary CFA register that will be copied\n-\t\t   into the FP later on.  */\n-\t\tcfa.reg = REGNO (dest);\n+\t\t{\n+\t\t  /* Setting a temporary CFA register that will be copied\n+\t\t     into the FP later on.  */\n+\t\t  offset = INTVAL (XEXP (src, 1));\n+\t\t  if (GET_CODE (src) == PLUS)\n+\t\t    offset = -offset;\n+\t\t  cfa.offset += offset;\n+\t\t  cfa.reg = REGNO (dest);\n+\t\t}\n \t      /* Rule 5 */\n \t      else\n \t\t{"}]}