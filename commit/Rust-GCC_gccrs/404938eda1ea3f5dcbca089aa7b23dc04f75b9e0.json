{"sha": "404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0OTM4ZWRhMWVhM2Y1ZGNiY2EwODlhYTdiMjNkYzA0Zjc1YjllMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-21T13:18:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-21T13:18:35Z"}, "message": "re PR tree-optimization/81900 (GCC trunk miscompiles Perl / __sigsetjmp issue)\n\n2017-08-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81900\n\t* tree-ssa-pre.c (compute_antic_aux): Properly compute changed\n\tfor blocks with abnormal predecessors.\n\t(compute_antic): Do not set visited flag prematurely.\n\n\t* gcc.dg/torture/pr81900.c: New testcase.\n\nFrom-SVN: r251226", "tree": {"sha": "192534fbe477f8655f8011eda548a0babc4ce3a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192534fbe477f8655f8011eda548a0babc4ce3a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26b14dd952c9ff87aca0d5e68323c4b304cb46f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b14dd952c9ff87aca0d5e68323c4b304cb46f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b14dd952c9ff87aca0d5e68323c4b304cb46f7"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "25b745208a78ce63bae54ee16469fe805b7b43ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "patch": "@@ -1,3 +1,10 @@\n+2017-08-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81900\n+\t* tree-ssa-pre.c (compute_antic_aux): Properly compute changed\n+\tfor blocks with abnormal predecessors.\n+\t(compute_antic): Do not set visited flag prematurely.\n+\n 2017-08-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/79883"}, {"sha": "53505ef21f40673e866b07df8535e80ad27ca608", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "patch": "@@ -1,3 +1,8 @@\n+2017-08-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81900\n+\t* gcc.dg/torture/pr81900.c: New testcase.\n+\n 2017-08-21  Richard Biener  <rguenther@suse.de>\n \n \t* c-c++-common/asan/global-overflow-1.c: Adjust diagnostic location"}, {"sha": "9e4e8f4a7cad6e7e6ea1cf78e366e043a398fb18", "filename": "gcc/testsuite/gcc.dg/torture/pr81900.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81900.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81900.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81900.c?ref=404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "patch": "@@ -0,0 +1,19 @@\n+/* PR/81900 */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+/* { dg-options \"-fdump-tree-optimized\" } */\n+\n+void Perl_croak() __attribute__((noreturn));\n+char *Perl_sv_gets();\n+void __attribute__((returns_twice)) __sigsetjmp ();\n+void a() {\n+    __sigsetjmp();\n+    char *b;\n+    if ((b = Perl_sv_gets()) == 0)\n+      Perl_croak(\"No Perl script found in input\\n\");\n+    if (*b == '#')\n+      __asm__(\"\" : : \"\"(\"badbad\"));\n+}\n+\n+/* Do not elide the test against zero.  */\n+/* { dg-final { scan-tree-dump \" == 0B\" \"optimized\" } } */"}, {"sha": "7243cf808f52504c4b80af96dd5147bdbdbbe70b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/404938eda1ea3f5dcbca089aa7b23dc04f75b9e0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=404938eda1ea3f5dcbca089aa7b23dc04f75b9e0", "patch": "@@ -2119,16 +2119,15 @@ static sbitmap has_abnormal_preds;\n static bool\n compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n {\n-  bool changed = false;\n   bitmap_set_t S, old, ANTIC_OUT;\n   bitmap_iterator bi;\n   unsigned int bii;\n   edge e;\n   edge_iterator ei;\n-  bool was_visited = BB_VISITED (block);\n \n-  old = ANTIC_OUT = S = NULL;\n+  bool changed = ! BB_VISITED (block);\n   BB_VISITED (block) = 1;\n+  old = ANTIC_OUT = S = NULL;\n \n   /* If any edges from predecessors are abnormal, antic_in is empty,\n      so do nothing.  */\n@@ -2217,7 +2216,7 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n   /* clean (ANTIC_IN (block)) is defered to after the iteration converged\n      because it can cause non-convergence, see for example PR81181.  */\n \n-  if (!was_visited || !bitmap_set_equal (old, ANTIC_IN (block)))\n+  if (!bitmap_set_equal (old, ANTIC_IN (block)))\n     changed = true;\n \n  maybe_dump_sets:\n@@ -2396,9 +2395,6 @@ compute_antic (void)\n \tif (e->flags & EDGE_ABNORMAL)\n \t  {\n \t    bitmap_set_bit (has_abnormal_preds, block->index);\n-\n-\t    /* We also anticipate nothing.  */\n-\t    BB_VISITED (block) = 1;\n \t    break;\n \t  }\n "}]}