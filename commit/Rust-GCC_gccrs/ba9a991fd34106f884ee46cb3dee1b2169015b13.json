{"sha": "ba9a991fd34106f884ee46cb3dee1b2169015b13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5YTk5MWZkMzQxMDZmODg0ZWU0NmNiM2RlZTFiMjE2OTAxNWIxMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-25T06:01:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-25T06:01:55Z"}, "message": "class.c (end_of_base): New method.\n\n\t* class.c (end_of_base): New method.\n\t(end_of_class): Use it.  Check indirect virtual bases.\n\n\t* g++.dg/abi/empty9.C: New test.\n\nFrom-SVN: r58521", "tree": {"sha": "abed8f7f410b2a41e121c0be01b3d0ad3011079b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abed8f7f410b2a41e121c0be01b3d0ad3011079b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba9a991fd34106f884ee46cb3dee1b2169015b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9a991fd34106f884ee46cb3dee1b2169015b13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9a991fd34106f884ee46cb3dee1b2169015b13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9a991fd34106f884ee46cb3dee1b2169015b13/comments", "author": null, "committer": null, "parents": [{"sha": "ca7c2b85296ad76d29df2519a0977b26a5135aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7c2b85296ad76d29df2519a0977b26a5135aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca7c2b85296ad76d29df2519a0977b26a5135aff"}], "stats": {"total": 77, "additions": 60, "deletions": 17}, "files": [{"sha": "e90cb2408de9063fd2d2fc16c8b3ea3cd9ddbb9b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ba9a991fd34106f884ee46cb3dee1b2169015b13", "patch": "@@ -1,5 +1,8 @@\n 2002-10-24  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* class.c (end_of_base): New method.\n+\t(end_of_class): Use it.  Check indirect virtual bases.\n+\n \t* class.c (check_field_decls): Fix typo.\n \n 2002-10-23  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "c4b49b072878fa351e98f1cbd18698640f80c068", "filename": "gcc/cp/class.c", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ba9a991fd34106f884ee46cb3dee1b2169015b13", "patch": "@@ -210,6 +210,7 @@ static bool contains_empty_class_p (tree);\n static tree dfs_base_derived_from (tree, void *);\n static bool base_derived_from (tree, tree);\n static int empty_base_at_nonzero_offset_p (tree, tree, splay_tree);\n+static tree end_of_base (tree);\n \n /* Macros for dfs walking during vtt construction. See\n    dfs_ctor_vtable_bases_queue_p, dfs_build_secondary_vptr_vtt_inits\n@@ -4698,6 +4699,25 @@ layout_virtual_bases (record_layout_info rli, splay_tree offsets)\n   dfs_walk (TYPE_BINFO (t), dfs_set_offset_for_unshared_vbases, NULL, t);\n }\n \n+/* Returns the offset of the byte just past the end of the base class\n+   BINFO.  */\n+\n+static tree\n+end_of_base (tree binfo)\n+{\n+  tree size;\n+\n+  if (is_empty_class (BINFO_TYPE (binfo)))\n+    /* An empty class has zero CLASSTYPE_SIZE_UNIT, but we need to\n+       allocate some space for it. It cannot have virtual bases, so\n+       TYPE_SIZE_UNIT is fine.  */\n+    size = TYPE_SIZE_UNIT (BINFO_TYPE (binfo));\n+  else\n+    size = CLASSTYPE_SIZE_UNIT (BINFO_TYPE (binfo));\n+\n+  return size_binop (PLUS_EXPR, BINFO_OFFSET (binfo), size);\n+}\n+\n /* Returns the offset of the byte just past the end of the base class\n    with the highest offset in T.  If INCLUDE_VIRTUALS_P is zero, then\n    only non-virtual bases are included.  */\n@@ -4708,35 +4728,35 @@ end_of_class (t, include_virtuals_p)\n      int include_virtuals_p;\n {\n   tree result = size_zero_node;\n+  tree binfo;\n+  tree offset;\n   int i;\n \n   for (i = 0; i < CLASSTYPE_N_BASECLASSES (t); ++i)\n     {\n-      tree base_binfo;\n-      tree offset;\n-      tree size;\n-\n-      base_binfo = BINFO_BASETYPE (TYPE_BINFO (t), i);\n+      binfo = BINFO_BASETYPE (TYPE_BINFO (t), i);\n \n       if (!include_virtuals_p\n-\t  && TREE_VIA_VIRTUAL (base_binfo) \n-\t  && !BINFO_PRIMARY_P (base_binfo))\n+\t  && TREE_VIA_VIRTUAL (binfo) \n+\t  && !BINFO_PRIMARY_P (binfo))\n \tcontinue;\n \n-      if (is_empty_class (BINFO_TYPE (base_binfo)))\n-\t/* An empty class has zero CLASSTYPE_SIZE_UNIT, but we need to\n-\t   allocate some space for it. It cannot have virtual bases,\n-\t   so TYPE_SIZE_UNIT is fine.  */\n-\tsize = TYPE_SIZE_UNIT (BINFO_TYPE (base_binfo));\n-      else\n-\tsize = CLASSTYPE_SIZE_UNIT (BINFO_TYPE (base_binfo));\n-      offset = size_binop (PLUS_EXPR, \n-\t\t\t   BINFO_OFFSET (base_binfo),\n-\t\t\t   size);\n+      offset = end_of_base (binfo);\n       if (INT_CST_LT_UNSIGNED (result, offset))\n \tresult = offset;\n     }\n \n+  /* G++ 3.2 did not check indirect virtual bases.  */\n+  if (abi_version_at_least (2) && include_virtuals_p)\n+    for (binfo = CLASSTYPE_VBASECLASSES (t); \n+\t binfo; \n+\t binfo = TREE_CHAIN (binfo))\n+      {\n+\toffset = end_of_base (TREE_VALUE (binfo));\n+\tif (INT_CST_LT_UNSIGNED (result, offset))\n+\t  result = offset;\n+      }\n+\n   return result;\n }\n "}, {"sha": "6ba32d842ce58f5910f9376c7e91ff20b91a63dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba9a991fd34106f884ee46cb3dee1b2169015b13", "patch": "@@ -1,3 +1,7 @@\n+2002-10-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/abi/empty9.C: New test.\n+\n 2002-10-24  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/inherit/thunk1.C: Enable for ia64."}, {"sha": "757bf6c8690e39e4b9975702d067fa65c49e6e10", "filename": "gcc/testsuite/g++.dg/abi/empty9.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9a991fd34106f884ee46cb3dee1b2169015b13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty9.C?ref=ba9a991fd34106f884ee46cb3dee1b2169015b13", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do run { target i?86-*-* } }\n+// { dg-options \"-w -fabi-version=0\" }\n+\n+struct E1 {};\n+struct E2 : public E1 {\n+  virtual void f ();\n+};\n+struct E3 : virtual public E1 {\n+};\n+struct S : public E2, virtual public E3 {\n+};\n+\n+int main () {\n+  if (sizeof (S) != 12)\n+    return 1;\n+}"}]}