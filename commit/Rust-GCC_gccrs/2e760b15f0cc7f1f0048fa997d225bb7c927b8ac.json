{"sha": "2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU3NjBiMTVmMGNjN2YxZjAwNDhmYTk5N2QyMjViYjdjOTI3YjhhYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-05-30T01:35:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-05-30T01:35:12Z"}, "message": "h8300-protos.h: Remove prototypes for ok_for_bclr and small_power_of_two.\n\n\t* config/h8300/h8300-protos.h: Remove prototypes for\n\tok_for_bclr and small_power_of_two.\n\t* config/h8300/h8300.c (small_power_of_two): Remove.\n\t(ok_for_blcr): Likewise.\n\t(fix_bit_operand): Make WHAT deal with an integer instead of a\n\tconstraint character.\n\t* config/h8300/h8300.h (CONST_OK_FOR_O): Remove.\n\t(CONST_OK_FOR_P): Likewise.\n\t(CONST_OK_FOR_LETTER_P): Do not call CONST_OK_FOR_O or\n\tCONST_OK_FOR_P any more.\n\t* config/h8300/h8300.md (andqi3): Adjust to the new prototype\n\tof fix_bit_operand.\n\t(iorqi3): Likewise.\n\t(xorqi3): Likewise.\n\nFrom-SVN: r54037", "tree": {"sha": "ff1dfda87a769361d3707bb78a4b7cc2c9df4b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff1dfda87a769361d3707bb78a4b7cc2c9df4b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/comments", "author": null, "committer": null, "parents": [{"sha": "e1c293ae205da90f0bc0788fbf9bbe87336dcd58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c293ae205da90f0bc0788fbf9bbe87336dcd58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c293ae205da90f0bc0788fbf9bbe87336dcd58"}], "stats": {"total": 93, "additions": 40, "deletions": 53}, "files": [{"sha": "19bcad2d1e376914db1c8ff5a704896f5aa5ba54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "patch": "@@ -1,3 +1,20 @@\n+2002-05-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Remove prototypes for\n+\tok_for_bclr and small_power_of_two.\n+\t* config/h8300/h8300.c (small_power_of_two): Remove.\n+\t(ok_for_blcr): Likewise.\n+\t(fix_bit_operand): Make WHAT deal with an integer instead of a\n+\tconstraint character.\n+\t* config/h8300/h8300.h (CONST_OK_FOR_O): Remove.\n+\t(CONST_OK_FOR_P): Likewise.\n+\t(CONST_OK_FOR_LETTER_P): Do not call CONST_OK_FOR_O or\n+\tCONST_OK_FOR_P any more.\n+\t* config/h8300/h8300.md (andqi3): Adjust to the new prototype\n+\tof fix_bit_operand.\n+\t(iorqi3): Likewise.\n+\t(xorqi3): Likewise.\n+\n 2002-05-29  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/mips/netbsd.h (TARGET_OS_CPP_BUILTINS): Define."}, {"sha": "aa337d15e50558e0b1c2c7c51ae6fb6265ef0136", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "patch": "@@ -74,8 +74,6 @@ extern int h8300_tiny_data_p PARAMS ((tree));\n extern void h8300_init_once PARAMS ((void));\n extern void asm_file_start PARAMS ((FILE *));\n extern void asm_file_end PARAMS ((FILE *));\n-extern int ok_for_bclr PARAMS ((HOST_WIDE_INT));\n-extern int small_power_of_two PARAMS ((HOST_WIDE_INT));\n extern int initial_offset PARAMS ((int, int));\n \n #ifdef GCC_C_PRAGMA_H"}, {"sha": "59e316192a74a563e35f0416d4acb117019589d9", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "patch": "@@ -521,28 +521,6 @@ asm_file_end (file)\n   fprintf (file, \"\\t.end\\n\");\n }\n \f\n-/* Return true if VALUE is a valid constant for constraint 'P'.\n-   IE: VALUE is a power of two <= 2**15.  */\n-\n-int\n-small_power_of_two (value)\n-     HOST_WIDE_INT value;\n-{\n-  int power = exact_log2 (value);\n-  return power >= 0 && power <= 15;\n-}\n-\n-/* Return true if VALUE is a valid constant for constraint 'O', which\n-   means that the constant would be ok to use as a bit for a bclr\n-   instruction.  */\n-\n-int\n-ok_for_bclr (value)\n-     HOST_WIDE_INT value;\n-{\n-  return small_power_of_two ((~value) & 0xff);\n-}\n-\n /* Return true if OP is a valid source operand for an integer move\n    instruction.  */\n \n@@ -3245,32 +3223,30 @@ fix_bit_operand (operands, what, type)\n      only 'U' memory afterwards, so if this is a MEM operand, we must force\n      it to be valid for 'U' by reloading the address.  */\n \n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if ((what == 0 && single_zero_operand (operands[2], QImode))\n+      || (what == 1 && single_one_operand (operands[2], QImode)))\n     {\n-      if (CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), what))\n+      /* OK to have a memory dest.  */\n+      if (GET_CODE (operands[0]) == MEM\n+\t  && !EXTRA_CONSTRAINT (operands[0], 'U'))\n \t{\n-\t  /* Ok to have a memory dest.  */\n-\t  if (GET_CODE (operands[0]) == MEM\n-\t      && !EXTRA_CONSTRAINT (operands[0], 'U'))\n-\t    {\n-\t      rtx mem = gen_rtx_MEM (GET_MODE (operands[0]),\n-\t\t\t\t     copy_to_mode_reg (Pmode,\n-\t\t\t\t\t\t       XEXP (operands[0], 0)));\n-\t      MEM_COPY_ATTRIBUTES (mem, operands[0]);\n-\t      operands[0] = mem;\n-\t    }\n+\t  rtx mem = gen_rtx_MEM (GET_MODE (operands[0]),\n+\t\t\t\t copy_to_mode_reg (Pmode,\n+\t\t\t\t\t\t   XEXP (operands[0], 0)));\n+\t  MEM_COPY_ATTRIBUTES (mem, operands[0]);\n+\t  operands[0] = mem;\n+\t}\n \n-\t  if (GET_CODE (operands[1]) == MEM\n-\t      && !EXTRA_CONSTRAINT (operands[1], 'U'))\n-\t    {\n-\t      rtx mem = gen_rtx_MEM (GET_MODE (operands[1]),\n-\t\t\t\t     copy_to_mode_reg (Pmode,\n-\t\t\t\t\t\t       XEXP (operands[1], 0)));\n-\t      MEM_COPY_ATTRIBUTES (mem, operands[0]);\n-\t      operands[1] = mem;\n-\t    }\n-\t  return 0;\n+      if (GET_CODE (operands[1]) == MEM\n+\t  && !EXTRA_CONSTRAINT (operands[1], 'U'))\n+\t{\n+\t  rtx mem = gen_rtx_MEM (GET_MODE (operands[1]),\n+\t\t\t\t copy_to_mode_reg (Pmode,\n+\t\t\t\t\t\t   XEXP (operands[1], 0)));\n+\t  MEM_COPY_ATTRIBUTES (mem, operands[0]);\n+\t  operands[1] = mem;\n \t}\n+      return 0;\n     }\n \n   /* Dest and src op must be register.  */"}, {"sha": "8109aee683c4b3a6901900a10360cc2be0b84315", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "patch": "@@ -429,8 +429,6 @@ enum reg_class {\n   (TARGET_H8300H || TARGET_H8300S\t\t\t\\\n    ? (VALUE) == -1 || (VALUE) == -2 || (VALUE) == -4\t\\\n    : (VALUE) == -1 || (VALUE) == -2)\n-#define CONST_OK_FOR_O(VALUE) (ok_for_bclr (VALUE))\n-#define CONST_OK_FOR_P(VALUE) (small_power_of_two (VALUE))\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\\\n   ((C) == 'I' ? CONST_OK_FOR_I (VALUE) :\t\\\n@@ -439,8 +437,6 @@ enum reg_class {\n    (C) == 'L' ? CONST_OK_FOR_L (VALUE) :\t\\\n    (C) == 'M' ? CONST_OK_FOR_M (VALUE) :\t\\\n    (C) == 'N' ? CONST_OK_FOR_N (VALUE) :\t\\\n-   (C) == 'O' ? CONST_OK_FOR_O (VALUE) :\t\\\n-   (C) == 'P' ? CONST_OK_FOR_P (VALUE) :\t\\\n    0)\n \n /* Similar, but for floating constants, and defining letters G and H."}, {"sha": "b789a3b446a04ac382b9508df71cb564d1eb892b", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e760b15f0cc7f1f0048fa997d225bb7c927b8ac/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=2e760b15f0cc7f1f0048fa997d225bb7c927b8ac", "patch": "@@ -1023,7 +1023,7 @@\n   \"\"\n   \"\n {\n-  if (fix_bit_operand (operands, 'O', AND))\n+  if (fix_bit_operand (operands, 0, AND))\n     DONE;\n }\")\n \n@@ -1094,7 +1094,7 @@\n   \"\"\n   \"\n {\n-  if (fix_bit_operand (operands, 'P', IOR))\n+  if (fix_bit_operand (operands, 1, IOR))\n     DONE;\n }\")\n \n@@ -1136,7 +1136,7 @@\n   \"\"\n   \"\n {\n-  if (fix_bit_operand (operands, 'O', XOR))\n+  if (fix_bit_operand (operands, 1, XOR))\n     DONE;\n }\")\n "}]}