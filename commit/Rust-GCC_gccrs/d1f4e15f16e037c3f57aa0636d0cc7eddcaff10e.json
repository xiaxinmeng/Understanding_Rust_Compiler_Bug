{"sha": "d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmNGUxNWYxNmUwMzdjM2Y1N2FhMDYzNmQwY2M3ZWRkY2FmZjEwZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-10T08:50:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-10T08:50:39Z"}, "message": "re PR tree-optimization/49937 (g++.dg/tree-ssa/fwprop-align.C)\n\n2011-08-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49937\n\t* tree-ssa-ccp.c (get_value_from_alignment): Re-implement\n\tusing get_object_alignment_1.\n\nFrom-SVN: r177615", "tree": {"sha": "d974d386adeae98ea83ec38928d4cd997cad1c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d974d386adeae98ea83ec38928d4cd997cad1c82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3016c478e43ed67bdf301679d53352dffe7f3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3016c478e43ed67bdf301679d53352dffe7f3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3016c478e43ed67bdf301679d53352dffe7f3d0"}], "stats": {"total": 83, "additions": 20, "deletions": 63}, "files": [{"sha": "2c50a1d34445ff96b404f60f2d6d0b884e1f8c8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "patch": "@@ -1,3 +1,9 @@\n+2011-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49937\n+\t* tree-ssa-ccp.c (get_value_from_alignment): Re-implement\n+\tusing get_object_alignment_1.\n+\n 2011-08-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_emit_i387_round): New function."}, {"sha": "55a504ee52d760181eafce45eaf8a753b160a327", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 14, "deletions": 63, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d1f4e15f16e037c3f57aa0636d0cc7eddcaff10e", "patch": "@@ -505,74 +505,25 @@ value_to_double_int (prop_value_t val)\n static prop_value_t\n get_value_from_alignment (tree expr)\n {\n+  tree type = TREE_TYPE (expr);\n   prop_value_t val;\n-  HOST_WIDE_INT bitsize, bitpos;\n-  tree base, offset;\n-  enum machine_mode mode;\n-  int align;\n+  unsigned HOST_WIDE_INT bitpos;\n+  unsigned int align;\n \n   gcc_assert (TREE_CODE (expr) == ADDR_EXPR);\n \n-  base = get_inner_reference (TREE_OPERAND (expr, 0),\n-\t\t\t      &bitsize, &bitpos, &offset,\n-\t\t\t      &mode, &align, &align, false);\n-  if (TREE_CODE (base) == MEM_REF)\n-    val = bit_value_binop (PLUS_EXPR, TREE_TYPE (expr),\n-\t\t\t   TREE_OPERAND (base, 0), TREE_OPERAND (base, 1));\n-  else if (base\n-\t   && ((align = get_object_alignment (base, BIGGEST_ALIGNMENT))\n-\t\t> BITS_PER_UNIT))\n-    {\n-      val.lattice_val = CONSTANT;\n-      /* We assume pointers are zero-extended.  */\n-      val.mask = double_int_and_not\n-\t           (double_int_mask (TYPE_PRECISION (TREE_TYPE (expr))),\n-\t\t    uhwi_to_double_int (align / BITS_PER_UNIT - 1));\n-      val.value = build_int_cst (TREE_TYPE (expr), 0);\n-    }\n+  align = get_object_alignment_1 (TREE_OPERAND (expr, 0), &bitpos);\n+  val.mask\n+    = double_int_and_not (POINTER_TYPE_P (type) || TYPE_UNSIGNED (type)\n+\t\t\t  ? double_int_mask (TYPE_PRECISION (type))\n+\t\t\t  : double_int_minus_one,\n+\t\t\t  uhwi_to_double_int (align / BITS_PER_UNIT - 1));\n+  val.lattice_val = double_int_minus_one_p (val.mask) ? VARYING : CONSTANT;\n+  if (val.lattice_val == CONSTANT)\n+    val.value\n+      = double_int_to_tree (type, uhwi_to_double_int (bitpos / BITS_PER_UNIT));\n   else\n-    {\n-      val.lattice_val = VARYING;\n-      val.mask = double_int_minus_one;\n-      val.value = NULL_TREE;\n-    }\n-  if (bitpos != 0)\n-    {\n-      double_int value, mask;\n-      bit_value_binop_1 (PLUS_EXPR, TREE_TYPE (expr), &value, &mask,\n-\t\t\t TREE_TYPE (expr), value_to_double_int (val), val.mask,\n-\t\t\t TREE_TYPE (expr),\n-\t\t\t shwi_to_double_int (bitpos / BITS_PER_UNIT),\n-\t\t\t double_int_zero);\n-      val.lattice_val = double_int_minus_one_p (mask) ? VARYING : CONSTANT;\n-      val.mask = mask;\n-      if (val.lattice_val == CONSTANT)\n-\tval.value = double_int_to_tree (TREE_TYPE (expr), value);\n-      else\n-\tval.value = NULL_TREE;\n-    }\n-  /* ???  We should handle i * 4 and more complex expressions from\n-     the offset, possibly by just expanding get_value_for_expr.  */\n-  if (offset != NULL_TREE)\n-    {\n-      double_int value, mask;\n-      prop_value_t oval = get_value_for_expr (offset, true);\n-      bit_value_binop_1 (PLUS_EXPR, TREE_TYPE (expr), &value, &mask,\n-\t\t\t TREE_TYPE (expr), value_to_double_int (val), val.mask,\n-\t\t\t TREE_TYPE (expr), value_to_double_int (oval),\n-\t\t\t oval.mask);\n-      val.mask = mask;\n-      if (double_int_minus_one_p (mask))\n-\t{\n-\t  val.lattice_val = VARYING;\n-\t  val.value = NULL_TREE;\n-\t}\n-      else\n-\t{\n-\t  val.lattice_val = CONSTANT;\n-\t  val.value = double_int_to_tree (TREE_TYPE (expr), value);\n-\t}\n-    }\n+    val.value = NULL_TREE;\n \n   return val;\n }"}]}