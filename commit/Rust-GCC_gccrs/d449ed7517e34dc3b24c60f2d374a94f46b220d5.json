{"sha": "d449ed7517e34dc3b24c60f2d374a94f46b220d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0OWVkNzUxN2UzNGRjM2IyNGM2MGYyZDM3NGE5NGY0NmIyMjBkNQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:34:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T09:34:10Z"}, "message": "[multiple changes]\n\n2017-09-25  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* adabkend.adb (Call_Back_End): Fix wording of \"front-end\" and\n\t\"back-end\" in comments.\n\n2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Call_Helper): The extra accessibility check in a\n\tcall that appears in a classwide precondition and that mentions an\n\taccess formal of the subprogram, must use the accessibility level of\n\tthe actual in the call. This is one case in which a reference to a\n\tformal parameter appears outside of the body of the subprogram.\n\nFrom-SVN: r253141", "tree": {"sha": "71a9345678d16e2df3d29e1ea1f07d3faef73557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a9345678d16e2df3d29e1ea1f07d3faef73557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d449ed7517e34dc3b24c60f2d374a94f46b220d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d449ed7517e34dc3b24c60f2d374a94f46b220d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d449ed7517e34dc3b24c60f2d374a94f46b220d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d449ed7517e34dc3b24c60f2d374a94f46b220d5/comments", "author": null, "committer": null, "parents": [{"sha": "f71b4cd44483310677019f5d47cabbdeedfcfc75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71b4cd44483310677019f5d47cabbdeedfcfc75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71b4cd44483310677019f5d47cabbdeedfcfc75"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "979748ed75d14b2a453a18593df821ef902be253", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d449ed7517e34dc3b24c60f2d374a94f46b220d5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d449ed7517e34dc3b24c60f2d374a94f46b220d5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d449ed7517e34dc3b24c60f2d374a94f46b220d5", "patch": "@@ -1,3 +1,16 @@\n+2017-09-25  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* adabkend.adb (Call_Back_End): Fix wording of \"front-end\" and\n+\t\"back-end\" in comments.\n+\n+2017-09-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): The extra accessibility check in a\n+\tcall that appears in a classwide precondition and that mentions an\n+\taccess formal of the subprogram, must use the accessibility level of\n+\tthe actual in the call. This is one case in which a reference to a\n+\tformal parameter appears outside of the body of the subprogram.\n+\n 2017-09-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Replace_Actual_Discriminants): Replace a discriminant"}, {"sha": "2ab4b19a1d8d515c94691a1c3ebc7cce52a8aa92", "filename": "gcc/ada/adabkend.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d449ed7517e34dc3b24c60f2d374a94f46b220d5/gcc%2Fada%2Fadabkend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d449ed7517e34dc3b24c60f2d374a94f46b220d5/gcc%2Fada%2Fadabkend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadabkend.adb?ref=d449ed7517e34dc3b24c60f2d374a94f46b220d5", "patch": "@@ -57,10 +57,10 @@ package body Adabkend is\n          Write_Eol;\n       end if;\n \n-      --  Frontend leaves the Current_Error_Node at a location that is\n-      --  meaningless and confusing when emitting bugboxes from the backed. By\n-      --  resetting it here we default to \"No source file position information\n-      --  available\" message on backend crashes.\n+      --  The front end leaves the Current_Error_Node at a location that is\n+      --  meaningless and confusing when emitting bug boxes from the back end.\n+      --  By resetting it here we default to \"No source file position\n+      --  information available\" message on back end crashes.\n \n       Current_Error_Node := Empty;\n \n@@ -91,7 +91,7 @@ package body Adabkend is\n       --\n       --  If the switch is not valid, control will not return. The switches\n       --  must still be scanned to skip the \"-o\" arguments, or internal GCC\n-      --  switches, which may be safely ignored by other back-ends.\n+      --  switches, which may be safely ignored by other back ends.\n \n       ----------------------------\n       -- Scan_Back_End_Switches --\n@@ -251,7 +251,7 @@ package body Adabkend is\n                else\n                   Add_Src_Search_Dir (Argv);\n \n-                  --  Add directory to lib search so that back-end can take as\n+                  --  Add directory to lib search so that back end can take as\n                   --  input ALI files if needed. Otherwise this won't have any\n                   --  impact on the compiler.\n "}, {"sha": "2ee1c7879c62b3f269463cc31f3a7c46ccc8a658", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d449ed7517e34dc3b24c60f2d374a94f46b220d5/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d449ed7517e34dc3b24c60f2d374a94f46b220d5/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=d449ed7517e34dc3b24c60f2d374a94f46b220d5", "patch": "@@ -3004,6 +3004,20 @@ package body Exp_Ch6 is\n             then\n                Prev_Orig := Prev;\n \n+            --  A class-wide precondition generates a test in which formals of\n+            --  the subprogram are replaced by actuals that came from source.\n+            --  In that case as well, the accessiblity comes from the actual.\n+            --  This is the one case in which there are references to formals\n+            --  outside of their subprogram.\n+\n+            elsif Prev_Orig /= Prev\n+              and then Is_Entity_Name (Prev_Orig)\n+              and then Present (Entity (Prev_Orig))\n+              and then Is_Formal (Entity (Prev_Orig))\n+              and then not In_Open_Scopes (Scope (Entity (Prev_Orig)))\n+            then\n+               Prev_Orig := Prev;\n+\n             --  If the actual is a formal of an enclosing subprogram it is\n             --  the right entity, even if it is a rewriting. This happens\n             --  when the call is within an inherited condition or predicate."}]}