{"sha": "0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkOTE0ODRlY2Q1MDhmMmE5ZjA2YTY1ZGJiYTFhNWJjMDg5MDJkMA==", "commit": {"author": {"name": "Tobias Grosser", "email": "grosser@fim.uni-passau.de", "date": "2009-11-30T22:07:59Z"}, "committer": {"name": "Tobias Grosser", "email": "grosser@gcc.gnu.org", "date": "2009-11-30T22:07:59Z"}, "message": "Protect loops that might be executed zero times.\n\n2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n\n\tPR middle-end/42130\n\t* graphite-clast-to-gimple.c (graphite_create_new_loop_guard,\n\ttranslate_clast_for_loop): New.\n\t(translate_clast_for): Add a condition around the loop, to do not\n\texecute loops with zero iterations.\n\t* testsuite/g++.dg/graphite/pr42130.C: New.\n\t* testsuite/gcc.dg/graphite/pr35356-2.c: Adapt.\n\nFrom-SVN: r154849", "tree": {"sha": "706b09e8fc9c4a9701fee8c98393c08fe513b518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/706b09e8fc9c4a9701fee8c98393c08fe513b518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/comments", "author": {"login": "tobiasgrosser", "id": 521960, "node_id": "MDQ6VXNlcjUyMTk2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/521960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobiasgrosser", "html_url": "https://github.com/tobiasgrosser", "followers_url": "https://api.github.com/users/tobiasgrosser/followers", "following_url": "https://api.github.com/users/tobiasgrosser/following{/other_user}", "gists_url": "https://api.github.com/users/tobiasgrosser/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobiasgrosser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobiasgrosser/subscriptions", "organizations_url": "https://api.github.com/users/tobiasgrosser/orgs", "repos_url": "https://api.github.com/users/tobiasgrosser/repos", "events_url": "https://api.github.com/users/tobiasgrosser/events{/privacy}", "received_events_url": "https://api.github.com/users/tobiasgrosser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89"}], "stats": {"total": 128, "additions": 124, "deletions": 4}, "files": [{"sha": "863b0be38ee9d3e00c7155e26e1e84c5f6acf199", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "patch": "@@ -1,3 +1,13 @@\n+2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n+\n+\tPR middle-end/42130\n+\t* graphite-clast-to-gimple.c (graphite_create_new_loop_guard,\n+\ttranslate_clast_for_loop): New.\n+\t(translate_clast_for): Add a condition around the loop, to do not\n+\texecute loops with zero iterations.\n+\t* testsuite/g++.dg/graphite/pr42130.C: New.\n+\t* testsuite/gcc.dg/graphite/pr35356-2.c: Adapt.\n+\n 2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n \n \t* graphite-clast-to-gimple.c (try_mark_loop_parallel): New."}, {"sha": "3795f6fad6c536f951d46d437c891e74bc221fd3", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 82, "deletions": 2, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "patch": "@@ -768,8 +768,47 @@ try_mark_loop_parallel (sese region, loop_p loop, htab_t bb_pbb_mapping)\n     loop->can_be_parallel = true;\n }\n \n+static tree gcc_type_for_iv_of_clast_loop (struct clast_for *);\n \n-/* Translates a clast for statement STMT to gimple.\n+\n+/* Creates a new if region protecting the loop to be executed, if the execution\n+ * count is zero (lb > ub).  */\n+static edge\n+graphite_create_new_loop_guard (sese region, edge entry_edge,\n+\t\t\t\tstruct clast_for *stmt,\n+\t\t\t\tVEC (tree, heap) *newivs,\n+\t\t\t\thtab_t newivs_index, htab_t params_index)\n+{\n+  tree cond_expr;\n+  edge exit_edge;\n+  tree type = gcc_type_for_iv_of_clast_loop (stmt);\n+  tree lb = clast_to_gcc_expression (type, stmt->LB, region, newivs,\n+\t\t\t\t     newivs_index, params_index);\n+  tree ub = clast_to_gcc_expression (type, stmt->UB, region, newivs,\n+\t\t\t\t     newivs_index, params_index);\n+\n+  /* XXX: Adding +1 and using LT_EXPR helps with loop latches that have a\n+   * loop iteration count of \"PARAMETER - 1\".  For PARAMETER == 0 this becomes\n+   * 2^{32|64}, and the condition lb <= ub is true, even if we do not want this.\n+   * However lb < ub + 1 is false, as expected.\n+   * There might be a problem with cases where ub is 2^32.  */\n+  tree one;\n+  Value gmp_one;\n+  value_init (gmp_one);\n+  value_set_si (gmp_one, 1);\n+  one = gmp_cst_to_tree (type, gmp_one);\n+  value_clear (gmp_one);\n+\n+  ub = fold_build2 (PLUS_EXPR, type, ub, one);\n+  cond_expr = fold_build2 (LT_EXPR, boolean_type_node, lb, ub);\n+\n+  exit_edge = create_empty_if_region_on_edge (entry_edge, cond_expr);\n+\n+  return exit_edge;\n+}\n+\n+\n+/* Create the loop for a clast for statement.\n \n    - REGION is the sese region we used to generate the scop.\n    - NEXT_E is the edge where new generated code should be attached.\n@@ -779,7 +818,7 @@ try_mark_loop_parallel (sese region, loop_p loop, htab_t bb_pbb_mapping)\n    - PARAMS_INDEX connects the cloog parameters with the gimple parameters in\n      the sese region.  */\n static edge\n-translate_clast_for (sese region, struct clast_for *stmt, edge next_e,\n+translate_clast_for_loop (sese region, struct clast_for *stmt, edge next_e,\n \t\t     htab_t rename_map, VEC (tree, heap) **newivs,\n \t\t     htab_t newivs_index, htab_t bb_pbb_mapping,\n \t\t     htab_t params_index)\n@@ -802,6 +841,47 @@ translate_clast_for (sese region, struct clast_for *stmt, edge next_e,\n   return last_e;\n }\n \n+/* Translates a clast for statement STMT to gimple.  First a guard is created\n+ * protecting the loop, if it is executed zero times.  In this guard we create\n+ * the real loop structure.\n+\n+   - REGION is the sese region we used to generate the scop.\n+   - NEXT_E is the edge where new generated code should be attached.\n+   - RENAME_MAP contains a set of tuples of new names associated to\n+     the original variables names.\n+   - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.\n+   - PARAMS_INDEX connects the cloog parameters with the gimple parameters in\n+     the sese region.  */\n+static edge\n+translate_clast_for (sese region, struct clast_for *stmt, edge next_e,\n+\t\t     htab_t rename_map, VEC (tree, heap) **newivs,\n+\t\t     htab_t newivs_index, htab_t bb_pbb_mapping,\n+\t\t     htab_t params_index)\n+{\n+  edge last_e = graphite_create_new_loop_guard (region, next_e, stmt, *newivs,\n+\t\t\t\t\t   newivs_index, params_index);\n+\n+  edge true_e = get_true_edge_from_guard_bb (next_e->dest);\n+  edge false_e = get_false_edge_from_guard_bb (next_e->dest);\n+  edge exit_true_e = single_succ_edge (true_e->dest);\n+  edge exit_false_e = single_succ_edge (false_e->dest);\n+\n+  htab_t before_guard = htab_create (10, rename_map_elt_info,\n+\t\t\t\t     eq_rename_map_elts, free);\n+  htab_traverse (rename_map, copy_renames, before_guard);\n+\n+  next_e = translate_clast_for_loop (region, stmt, true_e, rename_map, newivs,\n+\t\t\t\t     newivs_index, bb_pbb_mapping,\n+\t\t\t\t     params_index);\n+\n+  insert_guard_phis (last_e->src, exit_true_e, exit_false_e,\n+\t\t     before_guard, rename_map);\n+\n+  htab_delete (before_guard);\n+\n+  return last_e;\n+}\n+\n /* Translates a clast guard statement STMT to gimple.\n \n    - REGION is the sese region we used to generate the scop."}, {"sha": "92d3bd83bdc8780122ebc803886fd8491e64f08a", "filename": "gcc/testsuite/g++.dg/graphite/pr42130.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42130.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42130.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42130.C?ref=0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -fno-tree-ch\" } */\n+#include <vector>\n+\n+using std::vector;\n+\n+vector<unsigned> & __attribute__((noinline)) foo(unsigned n, unsigned k)\n+{\n+  vector<unsigned> *vv = new vector<unsigned>(n, 0u);\n+  return *vv;\n+}\n+\n+\n+int main()\n+{\n+  foo(0, 1);\n+}\n+/* { dg-do run  } */\n+"}, {"sha": "e5b0213768c099d707c00c1269c71a9f9b92a4ce", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-2.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd91484ecd508f2a9f06a65dbba1a5bc08902d0/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-2.c?ref=0dd91484ecd508f2a9f06a65dbba1a5bc08902d0", "patch": "@@ -25,8 +25,20 @@ foo (int bar, int n, int k)\n    | for (i = max(k+1,0); i < n; i++)\n    |   a[i] = i;\n \n+   XXX: At the moment we generate to protect loops that are executed zero times.\n+\n+   | if (0 < min (n, k) + 1)\n+   |   for (i = 0; i < min (n, k); i++)\n+   |     a[i] = i;\n+   | if (k >= 0 && k < n)\n+   |   a[k] = 1;\n+   | if (0 < max(n, k) + 1)\n+   |   for (i = max(k+1,0); i < n; i++)\n+   |     a[i] = i;\n+\n */\n \n-/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 1 \"graphite\" } } */\n-/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 1 \"graphite\" } } */\n+\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 2 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}]}