{"sha": "a98838ff82af79fcb85e2b7eafa029267a91cd1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4ODM4ZmY4MmFmNzlmY2I4NWUyYjdlYWZhMDI5MjY3YTkxY2QxZg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2013-09-10T14:43:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T14:43:06Z"}, "message": "sem_prag.adb (Get_SPARK_Mode_Id): Handle the case where the pragma may appear without an argument.\n\n2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Get_SPARK_Mode_Id): Handle the\n\tcase where the pragma may appear without an argument.\n\t(Analyze_Global_List): Add expanded_name to the list of constructs\n\tthat denote a single item.\n\t(Collect_Global_List): Add expanded_name to the list of constructs\n\tthat denote a single item.\n\n2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Apply_Accessibility_Check): Add local constant\n\tPool_Id and local variables Fin_Call and Free_Stmt. Finalize\n\tand deallocate a heap-allocated class-wide object after it\n\thas been determined that it violates the accessibility rules.\n\t* rtsfind.ads: Add new RTU_Id for System.Memory. Add new RE_Id\n\tand entry in RE_Unit_Table for RE_Free.\n\nFrom-SVN: r202451", "tree": {"sha": "28fba3b9d88978185757af88a48b88c326736655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28fba3b9d88978185757af88a48b88c326736655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a98838ff82af79fcb85e2b7eafa029267a91cd1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98838ff82af79fcb85e2b7eafa029267a91cd1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98838ff82af79fcb85e2b7eafa029267a91cd1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98838ff82af79fcb85e2b7eafa029267a91cd1f/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9b1c957b1de8d3f3754b4069ad17bae9d182943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b1c957b1de8d3f3754b4069ad17bae9d182943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b1c957b1de8d3f3754b4069ad17bae9d182943"}], "stats": {"total": 129, "additions": 105, "deletions": 24}, "files": [{"sha": "52e373235c77978ab26c4d493567c7da3a9d6dd7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a98838ff82af79fcb85e2b7eafa029267a91cd1f", "patch": "@@ -1,3 +1,21 @@\n+2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Get_SPARK_Mode_Id): Handle the\n+\tcase where the pragma may appear without an argument.\n+\t(Analyze_Global_List): Add expanded_name to the list of constructs\n+\tthat denote a single item.\n+\t(Collect_Global_List): Add expanded_name to the list of constructs\n+\tthat denote a single item.\n+\n+2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Apply_Accessibility_Check): Add local constant\n+\tPool_Id and local variables Fin_Call and Free_Stmt. Finalize\n+\tand deallocate a heap-allocated class-wide object after it\n+\thas been determined that it violates the accessibility rules.\n+\t* rtsfind.ads: Add new RTU_Id for System.Memory. Add new RE_Id\n+\tand entry in RE_Unit_Table for RE_Free.\n+\n 2013-09-01  Eric Botcazou  <ebotcazou@adacore.com>\n \t    Iain Sandoe  <iain@codesourcery.com>\n "}, {"sha": "79789b6978d39790c22e12da015a0927d202e674", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a98838ff82af79fcb85e2b7eafa029267a91cd1f", "patch": "@@ -725,20 +725,23 @@ package body Exp_Ch4 is\n         (Ref            : Node_Id;\n          Built_In_Place : Boolean := False)\n       is\n-         Cond    : Node_Id;\n-         Obj_Ref : Node_Id;\n-         Stmts   : List_Id;\n+         Pool_Id   : constant Entity_Id := Associated_Storage_Pool (PtrT);\n+         Cond      : Node_Id;\n+         Fin_Call  : Node_Id;\n+         Free_Stmt : Node_Id;\n+         Obj_Ref   : Node_Id;\n+         Stmts     : List_Id;\n \n       begin\n          if Ada_Version >= Ada_2005\n            and then Is_Class_Wide_Type (DesigT)\n+           and then (Tagged_Type_Expansion or else VM_Target /= No_VM)\n            and then not Scope_Suppress.Suppress (Accessibility_Check)\n            and then\n              (Type_Access_Level (Etype (Exp)) > Type_Access_Level (PtrT)\n                or else\n                  (Is_Class_Wide_Type (Etype (Exp))\n                    and then Scope (PtrT) /= Current_Scope))\n-           and then (Tagged_Type_Expansion or else VM_Target /= No_VM)\n          then\n             --  If the allocator was built in place, Ref is already a reference\n             --  to the access object initialized to the result of the allocator\n@@ -750,7 +753,7 @@ package body Exp_Ch4 is\n \n             if Built_In_Place then\n                Remove_Side_Effects (Ref);\n-               Obj_Ref := New_Copy (Ref);\n+               Obj_Ref := New_Copy_Tree (Ref);\n             else\n                Obj_Ref := New_Reference_To (Ref, Loc);\n             end if;\n@@ -759,27 +762,68 @@ package body Exp_Ch4 is\n \n             Stmts := New_List;\n \n-            --  Why don't we free the object ??? discussion and explanation\n-            --  needed of why old approach did not work ???\n+            --  Deallocate the object if the accessibility check fails. This\n+            --  is done only on targets or profiles that support deallocation.\n+\n+            --    Free (Obj_Ref);\n+\n+            if RTE_Available (RE_Free) then\n+               Free_Stmt := Make_Free_Statement (Loc, New_Copy_Tree (Obj_Ref));\n+               Set_Storage_Pool (Free_Stmt, Pool_Id);\n+\n+               Append_To (Stmts, Free_Stmt);\n+\n+            --  The target or profile cannot deallocate objects\n+\n+            else\n+               Free_Stmt := Empty;\n+            end if;\n+\n+            --  Finalize the object if applicable. Generate:\n \n-            --  Generate:\n             --    [Deep_]Finalize (Obj_Ref.all);\n \n             if Needs_Finalization (DesigT) then\n-               Append_To (Stmts,\n+               Fin_Call :=\n                  Make_Final_Call (\n                    Obj_Ref =>\n                      Make_Explicit_Dereference (Loc, New_Copy (Obj_Ref)),\n-                   Typ     => DesigT));\n+                   Typ     => DesigT);\n+\n+               --  When the target or profile supports deallocation, wrap the\n+               --  finalization call in a block to ensure proper deallocation\n+               --  even if finalization fails. Generate:\n+\n+               --    begin\n+               --       <Fin_Call>\n+               --    exception\n+               --       when others =>\n+               --          <Free_Stmt>\n+               --          raise;\n+               --    end;\n+\n+               if Present (Free_Stmt) then\n+                  Fin_Call :=\n+                    Make_Block_Statement (Loc,\n+                      Handled_Statement_Sequence =>\n+                        Make_Handled_Sequence_Of_Statements (Loc,\n+                          Statements => New_List (Fin_Call),\n+\n+                        Exception_Handlers => New_List (\n+                          Make_Exception_Handler (Loc,\n+                            Exception_Choices => New_List (\n+                              Make_Others_Choice (Loc)),\n+\n+                            Statements        => New_List (\n+                              New_Copy_Tree (Free_Stmt),\n+                              Make_Raise_Statement (Loc))))));\n+               end if;\n+\n+               Prepend_To (Stmts, Fin_Call);\n             end if;\n \n             --  Signal the accessibility failure through a Program_Error\n \n-            --  Since we may have a storage leak, I would be inclined to\n-            --  define a new PE_ code that warns of this possibility where\n-            --  the message would be Accessibility_Check_Failed (causing\n-            --  storage leak) ???\n-\n             Append_To (Stmts,\n               Make_Raise_Program_Error (Loc,\n                 Condition => New_Reference_To (Standard_True, Loc),"}, {"sha": "511f83348fcafd27bd4a2bbbc3aff135163258a1", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=a98838ff82af79fcb85e2b7eafa029267a91cd1f", "patch": "@@ -278,6 +278,7 @@ package Rtsfind is\n       System_Machine_Code,\n       System_Mantissa,\n       System_Memcop,\n+      System_Memory,\n       System_Multiprocessors,\n       System_Pack_03,\n       System_Pack_05,\n@@ -940,7 +941,9 @@ package Rtsfind is\n      RE_Asm_Input_Operand,               -- System.Machine_Code\n      RE_Asm_Output_Operand,              -- System.Machine_Code\n \n-     RE_Mantissa_Value,                  -- System_Mantissa\n+     RE_Mantissa_Value,                  -- System.Mantissa\n+\n+     RE_Free,                            -- System.Memory\n \n      RE_CPU_Range,                       -- System.Multiprocessors\n \n@@ -2197,6 +2200,8 @@ package Rtsfind is\n \n      RE_Mantissa_Value                   => System_Mantissa,\n \n+     RE_Free                             => System_Memory,\n+\n      RE_CPU_Range                        => System_Multiprocessors,\n \n      RE_Bits_03                          => System_Pack_03,"}, {"sha": "5e532b7e50ef5a03c16bfb35ae7fcc0e7da47883", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98838ff82af79fcb85e2b7eafa029267a91cd1f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a98838ff82af79fcb85e2b7eafa029267a91cd1f", "patch": "@@ -1576,7 +1576,10 @@ package body Sem_Prag is\n       begin\n          --  Single global item declaration\n \n-         if Nkind_In (List, N_Identifier, N_Selected_Component) then\n+         if Nkind_In (List, N_Expanded_Name,\n+                            N_Identifier,\n+                            N_Selected_Component)\n+         then\n             Analyze_Global_Item (List, Global_Mode);\n \n          --  Simple global list or moded global list declaration\n@@ -16338,7 +16341,7 @@ package body Sem_Prag is\n          -- SPARK_Mode --\n          ----------------\n \n-         --  pragma SPARK_Mode (On | Off | Auto);\n+         --  pragma SPARK_Mode [(On | Off | Auto)];\n \n          when Pragma_SPARK_Mode => SPARK_Mod : declare\n             procedure Chain_Pragma (Context : Entity_Id; Prag : Node_Id);\n@@ -18369,7 +18372,10 @@ package body Sem_Prag is\n       begin\n          --  Single global item declaration\n \n-         if Nkind_In (List, N_Identifier, N_Selected_Component) then\n+         if Nkind_In (List, N_Expanded_Name,\n+                            N_Identifier,\n+                            N_Selected_Component)\n+         then\n             Collect_Global_Item (List, Mode);\n \n          --  Simple global list or moded global list declaration\n@@ -18596,16 +18602,24 @@ package body Sem_Prag is\n    -----------------------\n \n    function Get_SPARK_Mode_Id (N : Node_Id) return SPARK_Mode_Id is\n+      Args : List_Id;\n       Mode : Node_Id;\n \n    begin\n-      pragma Assert\n-        (Nkind (N) = N_Pragma\n-          and then Present (Pragma_Argument_Associations (N)));\n+      pragma Assert (Nkind (N) = N_Pragma);\n+      Args := Pragma_Argument_Associations (N);\n+\n+      --  Extract the mode from the argument list\n \n-      Mode := First (Pragma_Argument_Associations (N));\n+      if Present (Args) then\n+         Mode := First (Pragma_Argument_Associations (N));\n+         return Get_SPARK_Mode_Id (Chars (Get_Pragma_Arg (Mode)));\n \n-      return Get_SPARK_Mode_Id (Chars (Get_Pragma_Arg (Mode)));\n+      --  When SPARK_Mode appears without an argument, the default is ON\n+\n+      else\n+         return SPARK_On;\n+      end if;\n    end Get_SPARK_Mode_Id;\n \n    ----------------"}]}