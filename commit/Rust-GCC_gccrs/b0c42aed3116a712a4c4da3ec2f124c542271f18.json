{"sha": "b0c42aed3116a712a4c4da3ec2f124c542271f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjNDJhZWQzMTE2YTcxMmE0YzRkYTNlYzJmMTI0YzU0MjI3MWYxOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-01-31T23:34:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-01-31T23:34:17Z"}, "message": "loop.c (emit_prefetch_instructions): Do conversion at right place in RTL chain.\n\n\t* loop.c (emit_prefetch_instructions):  Do conversion at right place in\n\tRTL chain.\n\n\t* combine.c (simplify_set): Reverse order of ragumetns to\n\tREG_CANNOT_CHANGE_MODE_P\n\t* df.c (df_def_record_1): Likewise.\n\t* recog.c (register_operand): Likewise.\n\t* simplify-rtx.c (simplify_subreg): Likewise.\n\t* hard-reg-set.h (REG_CANNOT_CHANGE_MODE_P): Update use of\n\tCANNOT_CHANGE_MODE_CLASS.\n\t* regclass.c (cannot_change_mode_set_regs, invalid_mode_change_p):\n\tLikewise.\n\t* reload.c (push_reload): Likewise.\n\t* alpha.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n\t* ia64.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n\t* mips.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n\t* mips-protos.h (mips_cannot_change_mode_class): Update prototype.\n\t* mips.c (mips_cannot_change_mode_class): Update.\n\t* pa64-regs.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n\t* rs6000.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n\t* s390.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n\t* sh.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n\t* sh-protos.h (sh_cannot_change_mode_class): Update prototype.\n\t* sh.c (sh_cannot_change_mode_class): Update.\n\t* i386.h (CANNOT_CHANGE_MODE_CLASS): New.\n\t* tm.texi (CANNOT_CHANGE_MODE_CLASS): Update documentation.\n\nFrom-SVN: r62212", "tree": {"sha": "138fc4b6ba88f9caad65f412fbe421e92fc1dcf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/138fc4b6ba88f9caad65f412fbe421e92fc1dcf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c42aed3116a712a4c4da3ec2f124c542271f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c42aed3116a712a4c4da3ec2f124c542271f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c42aed3116a712a4c4da3ec2f124c542271f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c42aed3116a712a4c4da3ec2f124c542271f18/comments", "author": null, "committer": null, "parents": [{"sha": "1f61a15d9e3cde5dbe910c23b045f300d03f3c6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f61a15d9e3cde5dbe910c23b045f300d03f3c6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f61a15d9e3cde5dbe910c23b045f300d03f3c6f"}], "stats": {"total": 176, "additions": 114, "deletions": 62}, "files": [{"sha": "769983ae93a70378887060a4b0a688ec8548639a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -1,3 +1,32 @@\n+Sat Feb  1 00:28:30 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* loop.c (emit_prefetch_instructions):  Do conversion at right place in\n+\tRTL chain.\n+\n+\t* combine.c (simplify_set): Reverse order of ragumetns to\n+\tREG_CANNOT_CHANGE_MODE_P\n+\t* df.c (df_def_record_1): Likewise.\n+\t* recog.c (register_operand): Likewise.\n+\t* simplify-rtx.c (simplify_subreg): Likewise.\n+\t* hard-reg-set.h (REG_CANNOT_CHANGE_MODE_P): Update use of\n+\tCANNOT_CHANGE_MODE_CLASS.\n+\t* regclass.c (cannot_change_mode_set_regs, invalid_mode_change_p):\n+\tLikewise.\n+\t* reload.c (push_reload): Likewise.\n+\t* alpha.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n+\t* ia64.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n+\t* mips.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n+\t* mips-protos.h (mips_cannot_change_mode_class): Update prototype.\n+\t* mips.c (mips_cannot_change_mode_class): Update.\n+\t* pa64-regs.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n+\t* rs6000.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n+\t* s390.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n+\t* sh.h (CANNOT_CHANGE_MODE_CLASS): Update definition.\n+\t* sh-protos.h (sh_cannot_change_mode_class): Update prototype.\n+\t* sh.c (sh_cannot_change_mode_class): Update.\n+\t* i386.h (CANNOT_CHANGE_MODE_CLASS): New.\n+\t* tm.texi (CANNOT_CHANGE_MODE_CLASS): Update documentation.\n+\n 2003-01-31  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.h (LINK_COMMAND_SPEC): Update for Nathan's recent"}, {"sha": "d3203fe5a49ed8fc0e71665d4a1247ca8ce5c6a8", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -5238,8 +5238,8 @@ simplify_set (x)\n #ifdef CANNOT_CHANGE_MODE_CLASS\n       && ! (GET_CODE (dest) == REG && REGNO (dest) < FIRST_PSEUDO_REGISTER\n \t    && REG_CANNOT_CHANGE_MODE_P (REGNO (dest),\n-\t\t\t\t\t GET_MODE (src), \n-\t\t\t\t\t GET_MODE (SUBREG_REG (src))))\n+\t\t\t\t\t GET_MODE (SUBREG_REG (src)), \n+\t\t\t\t\t GET_MODE (src)))\n #endif\n       && (GET_CODE (dest) == REG\n \t  || (GET_CODE (dest) == SUBREG"}, {"sha": "8824f12f0f78f70ce0ef3c07e0bcfbe54737b97f", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -869,8 +869,9 @@ enum reg_class {\n \n /* Return the class of registers that cannot change mode from FROM to TO.  */\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO) \\\n-  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) ? FLOAT_REGS : NO_REGS)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\\\n+   ? reg_classes_intersect_p (FLOAT_REGS, CLASS) : 0)\n \n /* Define the cost of moving between registers of various classes.  Moving\n    between FLOAT_REGS and anything else except float regs is expensive. "}, {"sha": "edf6d44747eb43b2b53de6df02078450c4afec78", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -10153,7 +10153,6 @@ ix86_expand_int_addcc (operands)\n   rtx compare_op;\n   rtx val = const0_rtx;\n   bool fpcmp = false;\n-  rtx pat, clob;\n   enum machine_mode mode = GET_MODE (operands[0]);\n \n   if (operands[3] != const1_rtx"}, {"sha": "e46a19f6b3094806d1a0af49923a64ba25713042", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -1558,6 +1558,20 @@ enum reg_class\n    || ((CLASS) == SIREG)\t\t\t\t\t\t\\\n    || ((CLASS) == DIREG))\n \n+/* Return a class of registers that cannot change FROM mode to TO mode.\n+  \n+   x87 registers can't do subreg as all values are reformated to extended\n+   precision.  XMM registers does not support with nonzero offsets equal\n+   to 4, 8 and 12 otherwise valid for integer registers. Since we can't\n+   determine these, prohibit all nonparadoxical subregs changing size.  */\n+\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\\n+  (GET_MODE_SIZE (TO) < GET_MODE_SIZE (FROM)\t\t\\\n+   ? reg_classes_intersect_p (FLOAT_SSE_REGS, (CLASS))\t\\\n+     || MAYBE_MMX_CLASS_P (CLASS) \t\t\t\\\n+   : GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\\\n+   ? reg_classes_intersect_p (FLOAT_REGS, (CLASS)) : 0)\n+\n /* A C statement that adds to CLOBBERS any hard regs the port wishes\n    to automatically clobber for all asms.\n "}, {"sha": "835c93faeab9e9dcacd5e1c061b14288e9029350", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -1036,8 +1036,9 @@ enum reg_class\n /* In FP regs, we can't change FP values to integer values and vice\n    versa, but we can change e.g. DImode to SImode.  */\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO) \t\\\n-  (GET_MODE_CLASS (FROM) != GET_MODE_CLASS (TO) ? FR_REGS : NO_REGS)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \t\\\n+  (GET_MODE_CLASS (FROM) != GET_MODE_CLASS (TO)\t\t\\\n+   ? reg_classes_intersect_p (CLASS, FR_REGS) : 0)\n \n /* A C expression that defines the machine-dependent operand constraint\n    letters (`I', `J', `K', .. 'P') that specify particular ranges of"}, {"sha": "75489de623bd102f0e8d18f4d62f98317f2a5204", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -121,8 +121,9 @@ extern int              mips_adjust_insn_length PARAMS ((rtx, int));\n extern enum reg_class\tmips_secondary_reload_class PARAMS ((enum reg_class,\n \t\t\t\t\t\t\t     enum machine_mode,\n \t\t\t\t\t\t\t     rtx, int));\n-extern enum reg_class\tmips_cannot_change_mode_class \n-\t\t\t  PARAMS ((enum machine_mode, enum machine_mode));\n+extern bool\t\tmips_cannot_change_mode_class \n+\t\t\t  PARAMS ((enum machine_mode, enum machine_mode,\n+\t\t\t\t   enum reg_class));\n extern int              mips_class_max_nregs PARAMS ((enum reg_class,\n \t\t\t\t\t\t      enum machine_mode));\n extern int              mips_register_move_cost PARAMS ((enum machine_mode,"}, {"sha": "bcfc0f65f1be6d6df920b395950f4fa90c0d29df", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -8779,19 +8779,20 @@ function_arg_pass_by_reference (cum, mode, type, named)\n    We can't allow 64-bit float registers to change from a 32-bit\n    mode to a 64-bit mode.  */\n \n-enum reg_class\n-mips_cannot_change_mode_class (from, to)\n+bool\n+mips_cannot_change_mode_class (from, to, class)\n      enum machine_mode from, to;\n+     enum reg_class class;\n {\n   if (GET_MODE_SIZE (from) != GET_MODE_SIZE (to))\n     {\n       if (TARGET_BIG_ENDIAN)\n-        return FP_REGS;\n+\treturn reg_classes_intersect_p (FP_REGS, class);\n       if (TARGET_FLOAT64)\n-        return HI_AND_FP_REGS;\n-      return HI_REG;\n+\treturn reg_classes_intersect_p (HI_AND_FP_REGS, class);\n+      return reg_classes_intersect_p (HI_REG, class);\n     }\n-  return NO_REGS;\n+  return false;\n }\n \n /* This function returns the register class required for a secondary"}, {"sha": "e76a7395259fd379600b7fb99e61e65766849c3a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -2376,8 +2376,8 @@ extern enum reg_class mips_char_to_class[256];\n \n #define CLASS_MAX_NREGS(CLASS, MODE) mips_class_max_nregs (CLASS, MODE)\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO) \\\n-  mips_cannot_change_mode_class (FROM, TO)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \\\n+  mips_cannot_change_mode_class (FROM, TO, CLASS)\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "ced7df737e747fcc347fb2baaf53f42aa89c6bd1", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -240,9 +240,9 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS,\n    we inhibit changes from SImode unless they are to a mode that is\n    identical in size.  */\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO)\t\t\t\\\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\\\n   ((FROM) == SImode && GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)       \\\n-   ? FP_REGS : NO_REGS)\n+   ? reg_classes_intersect_p (CLASS, FP_REGS) : 0)\n \n /* Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression"}, {"sha": "7cfb3ccfdc42c17fabab6842747b330bf8ac8c0e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -1329,10 +1329,12 @@ enum reg_class\n \n /* Return a class of registers that cannot change FROM mode to TO mode.  */\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO)\t\t\t\t \\\n-  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) ? FLOAT_REGS\t\t \\\n-   : (SPE_VECTOR_MODE (FROM) + SPE_VECTOR_MODE (TO)) == 1 ? GENERAL_REGS \\\n-   : NO_REGS)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\t\\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\t\\\n+   ? reg_classes_intersect_p (FLOAT_REGS, CLASS)\t\t\t\\\n+   : (SPE_VECTOR_MODE (FROM) + SPE_VECTOR_MODE (TO)) == 1\t\t\\\n+   ? reg_classes_intersect_p (GENERAL_REGS, CLASS) \t\t\t\\\n+   : 0)\n \n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "3cc731c84f29e1daa1aedf3d9e97af2e55be5ec2", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -374,8 +374,9 @@ do\t\t\t\t\t\t\t\t\\\n /* If a 4-byte value is loaded into a FPR, it is placed into the\n    *upper* half of the register, not the lower.  Therefore, we\n    cannot use SUBREGs to switch between modes in FP registers.  */\n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO)\t\t\\\n-  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) ? FP_REGS : NO_REGS)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\\\n+   ? reg_classes_intersect_p (FP_REGS, CLASS) : 0)\n \n /* Register classes.  */\n  "}, {"sha": "f04ab01670925ee1c943efd832fffddb8b9628c0", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -123,8 +123,8 @@ extern int sh_pr_n_sets PARAMS ((void));\n extern int sh_hard_regno_rename_ok PARAMS ((unsigned int, unsigned int));\n extern int sh_cfun_interrupt_handler_p PARAMS ((void));\n extern void sh_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n-extern enum reg_class sh_cannot_change_mode_class\n-\t      PARAMS ((enum machine_mode, enum machine_mode));\n+extern bool sh_cannot_change_mode_class\n+\t      PARAMS ((enum machine_mode, enum machine_mode, enum reg_class));\n extern void sh_mark_label PARAMS ((rtx, int));\n extern int sh_register_move_cost\n   PARAMS ((enum machine_mode mode, enum reg_class, enum reg_class));"}, {"sha": "b1df940dd9d826a5f05ad1e59bc7193c5113c29a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -8030,24 +8030,25 @@ sh_expand_binop_v2sf (code, op0, op1, op2)\n \n /* Return the class of registers for which a mode change from FROM to TO\n    is invalid.  */\n-enum reg_class \n-sh_cannot_change_mode_class (from, to)\n+bool\n+sh_cannot_change_mode_class (from, to, class)\n      enum machine_mode from, to;\n+     enum reg_class class;\n {\n   if (GET_MODE_SIZE (from) != GET_MODE_SIZE (to))\n     {\n        if (TARGET_LITTLE_ENDIAN)\n          {\n \t   if (GET_MODE_SIZE (to) < 8 || GET_MODE_SIZE (from) < 8)\n-\t     return DF_REGS;\n+\t     return reg_classes_intersect_p (DF_REGS, class);\n \t }\n        else\n \t {\n \t   if (GET_MODE_SIZE (from) < 8)\n-\t     return DF_HI_REGS;\n+\t     return reg_classes_intersect_p (DF_HI_REGS, class);\n \t }\n     }\n-  return NO_REGS;\n+  return 0;\n }\n \n "}, {"sha": "25406a17839ca537f785c0cea9d203d759992683", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -1395,8 +1395,8 @@ extern enum reg_class reg_class_from_letter[];\n /* ??? We need to renumber the internal numbers for the frnn registers\n    when in little endian in order to allow mode size changes.  */\n \n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO) \t\t\t    \\\n-  sh_cannot_change_mode_class (FROM, TO)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \t\t\t    \\\n+  sh_cannot_change_mode_class (FROM, TO, CLASS)\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}, {"sha": "c151249a197ccf620ce70a07e0241a69be9b2d89", "filename": "gcc/df.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -928,8 +928,8 @@ df_def_record_1 (df, x, bb, insn)\n \n #ifdef CLASS_CANNOT_CHANGE_MODE\n   if (GET_CODE (dst) == SUBREG\n-      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n-\t\t\t\t     GET_MODE (SUBREG_REG (dst))))\n+      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (SUBREG_REG (dst)),\n+\t\t\t\t     GET_MODE (dst)))\n     flags |= DF_REF_MODE_CHANGE;\n #endif\n \n@@ -949,8 +949,8 @@ df_def_record_1 (df, x, bb, insn)\n \t}\n #ifdef CLASS_CANNOT_CHANGE_MODE\n       if (GET_CODE (dst) == SUBREG\n-\t  && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n-\t\t\t\t         GET_MODE (SUBREG_REG (dst))))\n+\t  && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (SUBREG_REG (dst)),\n+\t\t\t\t         GET_MODE (dst)))\n         flags |= DF_REF_MODE_CHANGE;\n #endif\n       loc = &XEXP (dst, 0);"}, {"sha": "b5cb2404429be11db2b4dc0b36333e4344ce9f48", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -2599,10 +2599,9 @@ should be the maximum value of @code{HARD_REGNO_NREGS (@var{regno},\n This macro helps control the handling of multiple-word values\n in the reload pass.\n \n-@item CANNOT_CHANGE_MODE_CLASS(@var{from}, @var{to})\n-If defined, a C expression that returns a register class for which\n-a change from mode @var{from} to mode @var{to} is invalid, otherwise the\n-macro returns @code{NO_REGS}.\n+@item CANNOT_CHANGE_MODE_CLASS(@var{from}, @var{to}, @var{class})\n+If defined, a C expression that returns nonzero for a @var{class} for which\n+a change from mode @var{from} to mode @var{to} is invalid.\n \n For the example, loading 32-bit integer or floating-point objects into\n floating-point registers on the Alpha extends them to 64 bits.\n@@ -2612,8 +2611,9 @@ register.  Therefore, @file{alpha.h} defines @code{CANNOT_CHANGE_MODE_CLASS}\n as below:\n \n @example\n-#define CANNOT_CHANGE_MODE_CLASS \\\n-  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) ? FLOAT_REGS : NO_REGS)\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) \\\n+   ? reg_classes_intersect_p (FLOAT_REGS, (CLASS)) : 0)\n @end example\n @end table\n "}, {"sha": "53330cf28b7675f3bc85954852e8e85f6ee357a2", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -491,8 +491,6 @@ extern const char * reg_names[FIRST_PSEUDO_REGISTER];\n /* Given a hard REGN a FROM mode and a TO mode, return nonzero if\n    REGN cannot change modes between the specified modes.  */\n #define REG_CANNOT_CHANGE_MODE_P(REGN, FROM, TO)                          \\\n-        (TEST_HARD_REG_BIT                                                \\\n-          (reg_class_contents[(int) CANNOT_CHANGE_MODE_CLASS (FROM, TO)],  \\\n-           REGN))\n+         CANNOT_CHANGE_MODE_CLASS (FROM, TO, REGNO_REG_CLASS (REGN))\n \n #endif /* ! GCC_HARD_REG_SET_H */"}, {"sha": "4bdef2d0af7711428d3cbc5298006dd0b29492ae", "filename": "gcc/loop.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -4199,7 +4199,15 @@ emit_prefetch_instructions (loop)\n \t\t non-constant INIT_VAL to have the same mode as REG, which\n \t\t in this case we know to be Pmode.  */\n \t      if (GET_MODE (init_val) != Pmode && !CONSTANT_P (init_val))\n-\t\tinit_val = convert_to_mode (Pmode, init_val, 0);\n+\t\t{\n+\t\t  rtx seq;\n+\n+\t\t  start_sequence ();\n+\t\t  init_val = convert_to_mode (Pmode, init_val, 0);\n+\t\t  seq = get_insns ();\n+\t\t  end_sequence ();\n+\t\t  loop_insn_emit_before (loop, 0, loop_start, seq);\n+\t\t}\n \t      loop_iv_add_mult_emit_before (loop, init_val,\n \t\t\t\t\t    info[i].giv->mult_val,\n \t\t\t\t\t    add_val, reg, 0, loop_start);"}, {"sha": "34eaeb3273205a608cd7e3cbf12178f7a79ba1af", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -1088,7 +1088,7 @@ register_operand (op, mode)\n #ifdef CANNOT_CHANGE_MODE_CLASS\n       if (GET_CODE (sub) == REG\n \t  && REGNO (sub) < FIRST_PSEUDO_REGISTER\n-\t  && REG_CANNOT_CHANGE_MODE_P (REGNO (sub), mode, GET_MODE (sub))\n+\t  && REG_CANNOT_CHANGE_MODE_P (REGNO (sub), GET_MODE (sub), mode)\n \t  && GET_MODE_CLASS (GET_MODE (sub)) != MODE_COMPLEX_INT\n \t  && GET_MODE_CLASS (GET_MODE (sub)) != MODE_COMPLEX_FLOAT)\n \treturn 0;"}, {"sha": "5481ea2a26f2fe24fcd550952e3d4a45bed5b0ad", "filename": "gcc/regclass.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -2633,14 +2633,15 @@ cannot_change_mode_set_regs (used, from, regno)\n      unsigned int regno;\n {\n   enum machine_mode to;\n-  enum reg_class class;\n \n   for (to = VOIDmode; to < MAX_MACHINE_MODE; ++to)\n     if (REGNO_REG_SET_P (&subregs_of_mode[to], regno))\n       {\n-        class = CANNOT_CHANGE_MODE_CLASS (from, to);\n-        if (class != NO_REGS)\n-          IOR_HARD_REG_SET (*used, reg_class_contents [(int) class]);\n+\tint i;\n+\tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+          if (! TEST_HARD_REG_BIT (*used, i)\n+\t      && REG_CANNOT_CHANGE_MODE_P (from, to, i))\n+\t    SET_HARD_REG_BIT (*used, i);\n       }\n }\n \n@@ -2657,8 +2658,7 @@ invalid_mode_change_p (regno, class, from_mode)\n \n   for (to_mode = 0; to_mode < NUM_MACHINE_MODES; ++to_mode)\n     if (REGNO_REG_SET_P (&subregs_of_mode[(int) to_mode], regno)\n-\t&& reg_classes_intersect_p \n-\t     (class, CANNOT_CHANGE_MODE_CLASS (from_mode, to_mode)))\n+\t&& CANNOT_CHANGE_MODE_CLASS (from_mode, to_mode, class))\n       return 1;\n   return 0;\n }"}, {"sha": "46d0d6417df02b41b73bb22c36dbaa8c3ac30b96", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -976,9 +976,7 @@ push_reload (in, out, inloc, outloc, class,\n   if (in != 0 && GET_CODE (in) == SUBREG\n       && (subreg_lowpart_p (in) || strict_low)\n #ifdef CANNOT_CHANGE_MODE_CLASS\n-      && !reg_classes_intersect_p \n-\t   (class, CANNOT_CHANGE_MODE_CLASS (GET_MODE (SUBREG_REG (in)),\n-\t\t\t\t\t     inmode))\n+      && !CANNOT_CHANGE_MODE_CLASS (GET_MODE (SUBREG_REG (in)), inmode, class)\n #endif\n       && (CONSTANT_P (SUBREG_REG (in))\n \t  || GET_CODE (SUBREG_REG (in)) == PLUS\n@@ -1088,9 +1086,7 @@ push_reload (in, out, inloc, outloc, class,\n   if (out != 0 && GET_CODE (out) == SUBREG\n       && (subreg_lowpart_p (out) || strict_low)\n #ifdef CANNOT_CHANGE_MODE_CLASS\n-      && !reg_classes_intersect_p \n-\t    (class, CANNOT_CHANGE_MODE_CLASS (GET_MODE (SUBREG_REG (out)),\n-\t\t\t\t\t      outmode))\n+      && !CANNOT_CHANGE_MODE_CLASS (GET_MODE (SUBREG_REG (out)), outmode, class)\n #endif\n       && (CONSTANT_P (SUBREG_REG (out))\n \t  || strict_low"}, {"sha": "d563caeae2ffef178cbf12755c5d123ed94925f8", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c42aed3116a712a4c4da3ec2f124c542271f18/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=b0c42aed3116a712a4c4da3ec2f124c542271f18", "patch": "@@ -2544,7 +2544,7 @@ simplify_subreg (outermode, op, innermode, byte)\n \t  || ! rtx_equal_function_value_matters)\n       && REGNO (op) < FIRST_PSEUDO_REGISTER\n #ifdef CANNOT_CHANGE_MODE_CLASS\n-      && ! (REG_CANNOT_CHANGE_MODE_P (REGNO (op), outermode, innermode)\n+      && ! (REG_CANNOT_CHANGE_MODE_P (REGNO (op), innermode, outermode)\n \t    && GET_MODE_CLASS (innermode) != MODE_COMPLEX_INT\n \t    && GET_MODE_CLASS (innermode) != MODE_COMPLEX_FLOAT)\n #endif"}]}