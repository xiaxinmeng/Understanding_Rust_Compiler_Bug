{"sha": "705d3b776dbf4f447230e6dce2271eec219c89af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA1ZDNiNzc2ZGJmNGY0NDcyMzBlNmRjZTIyNzFlZWMyMTljODlhZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-20T12:52:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-20T12:52:21Z"}, "message": "re PR target/79568 (ICE in extract_insn, at recog.c:2311 for pr70325.c (with -mavx512bw))\n\n\tPR target/79568\n\t* config/i386/i386.c (ix86_expand_builtin): Handle\n\tOPTION_MASK_ISA_AVX512VL and OPTION_MASK_ISA_64BIT in\n\tix86_builtins_isa[fcode].isa as a requirement of those\n\tflags and any other flag in the bitmask.\n\t(ix86_init_mmx_sse_builtins): Use 0 instead of\n\t~OPTION_MASK_ISA_64BIT as mask.\n\t* config/i386/i386-builtin.def (__builtin_ia32_rdtsc,\n\t__builtin_ia32_rdtscp, __builtin_ia32_pause, __builtin_ia32_bsrsi,\n\t__builtin_ia32_rdpmc, __builtin_ia32_rolqi, __builtin_ia32_rolhi,\n\t__builtin_ia32_rorqi, __builtin_ia32_rorhi): Likewise.\n\n\t* gcc.target/i386/pr79568-1.c: New test.\n\t* gcc.target/i386/pr79568-2.c: New test.\n\t* gcc.target/i386/pr79568-3.c: New test.\n\nFrom-SVN: r245602", "tree": {"sha": "5d3260dfb1b2134a1fe38594aec49103c37b39a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d3260dfb1b2134a1fe38594aec49103c37b39a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/705d3b776dbf4f447230e6dce2271eec219c89af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705d3b776dbf4f447230e6dce2271eec219c89af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705d3b776dbf4f447230e6dce2271eec219c89af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705d3b776dbf4f447230e6dce2271eec219c89af/comments", "author": null, "committer": null, "parents": [{"sha": "1b51df94425a71e9f0ee1d53559e2063a29e85cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b51df94425a71e9f0ee1d53559e2063a29e85cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b51df94425a71e9f0ee1d53559e2063a29e85cc"}], "stats": {"total": 125, "additions": 105, "deletions": 20}, "files": [{"sha": "a14d091a88dfd05cb0d257c4c90bd12ea6200e67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=705d3b776dbf4f447230e6dce2271eec219c89af", "patch": "@@ -1,3 +1,17 @@\n+2017-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79568\n+\t* config/i386/i386.c (ix86_expand_builtin): Handle\n+\tOPTION_MASK_ISA_AVX512VL and OPTION_MASK_ISA_64BIT in\n+\tix86_builtins_isa[fcode].isa as a requirement of those\n+\tflags and any other flag in the bitmask.\n+\t(ix86_init_mmx_sse_builtins): Use 0 instead of\n+\t~OPTION_MASK_ISA_64BIT as mask.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_rdtsc,\n+\t__builtin_ia32_rdtscp, __builtin_ia32_pause, __builtin_ia32_bsrsi,\n+\t__builtin_ia32_rdpmc, __builtin_ia32_rolqi, __builtin_ia32_rolhi,\n+\t__builtin_ia32_rorqi, __builtin_ia32_rorhi): Likewise.\n+\n 2017-02-20  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \tPR target/78012"}, {"sha": "4ef4a01dc323d6cce38cd57f4c56974988ee9471", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=705d3b776dbf4f447230e6dce2271eec219c89af", "patch": "@@ -88,9 +88,9 @@ BDESC_END (PCMPISTR, SPECIAL_ARGS)\n \n /* Special builtins with variable number of arguments.  */\n BDESC_FIRST (special_args, SPECIAL_ARGS,\n-       ~OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_rdtsc\", IX86_BUILTIN_RDTSC, UNKNOWN, (int) UINT64_FTYPE_VOID)\n-BDESC (~OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_rdtscp\", IX86_BUILTIN_RDTSCP, UNKNOWN, (int) UINT64_FTYPE_PUNSIGNED)\n-BDESC (~OPTION_MASK_ISA_64BIT, CODE_FOR_pause, \"__builtin_ia32_pause\", IX86_BUILTIN_PAUSE, UNKNOWN, (int) VOID_FTYPE_VOID)\n+       0, CODE_FOR_nothing, \"__builtin_ia32_rdtsc\", IX86_BUILTIN_RDTSC, UNKNOWN, (int) UINT64_FTYPE_VOID)\n+BDESC (0, CODE_FOR_nothing, \"__builtin_ia32_rdtscp\", IX86_BUILTIN_RDTSCP, UNKNOWN, (int) UINT64_FTYPE_PUNSIGNED)\n+BDESC (0, CODE_FOR_pause, \"__builtin_ia32_pause\", IX86_BUILTIN_PAUSE, UNKNOWN, (int) VOID_FTYPE_VOID)\n \n /* 80387 (for use internally for atomic compound assignment).  */\n BDESC (0, CODE_FOR_fnstenv, \"__builtin_ia32_fnstenv\", IX86_BUILTIN_FNSTENV, UNKNOWN, (int) VOID_FTYPE_PVOID)\n@@ -385,13 +385,13 @@ BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */\n BDESC_FIRST (args, ARGS,\n-       ~OPTION_MASK_ISA_64BIT, CODE_FOR_bsr, \"__builtin_ia32_bsrsi\", IX86_BUILTIN_BSRSI, UNKNOWN, (int) INT_FTYPE_INT)\n+       0, CODE_FOR_bsr, \"__builtin_ia32_bsrsi\", IX86_BUILTIN_BSRSI, UNKNOWN, (int) INT_FTYPE_INT)\n BDESC (OPTION_MASK_ISA_64BIT, CODE_FOR_bsr_rex64, \"__builtin_ia32_bsrdi\", IX86_BUILTIN_BSRDI, UNKNOWN, (int) INT64_FTYPE_INT64)\n-BDESC (~OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_rdpmc\", IX86_BUILTIN_RDPMC, UNKNOWN, (int) UINT64_FTYPE_INT)\n-BDESC (~OPTION_MASK_ISA_64BIT, CODE_FOR_rotlqi3, \"__builtin_ia32_rolqi\", IX86_BUILTIN_ROLQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT)\n-BDESC (~OPTION_MASK_ISA_64BIT, CODE_FOR_rotlhi3, \"__builtin_ia32_rolhi\", IX86_BUILTIN_ROLHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT)\n-BDESC (~OPTION_MASK_ISA_64BIT, CODE_FOR_rotrqi3, \"__builtin_ia32_rorqi\", IX86_BUILTIN_RORQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT)\n-BDESC (~OPTION_MASK_ISA_64BIT, CODE_FOR_rotrhi3, \"__builtin_ia32_rorhi\", IX86_BUILTIN_RORHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT)\n+BDESC (0, CODE_FOR_nothing, \"__builtin_ia32_rdpmc\", IX86_BUILTIN_RDPMC, UNKNOWN, (int) UINT64_FTYPE_INT)\n+BDESC (0, CODE_FOR_rotlqi3, \"__builtin_ia32_rolqi\", IX86_BUILTIN_ROLQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT)\n+BDESC (0, CODE_FOR_rotlhi3, \"__builtin_ia32_rolhi\", IX86_BUILTIN_ROLHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT)\n+BDESC (0, CODE_FOR_rotrqi3, \"__builtin_ia32_rorqi\", IX86_BUILTIN_RORQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT)\n+BDESC (0, CODE_FOR_rotrhi3, \"__builtin_ia32_rorhi\", IX86_BUILTIN_RORHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT)\n \n /* MMX */\n BDESC (OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)"}, {"sha": "fe2dd6a0ce753383c21ab2a48ef978859ba338b9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=705d3b776dbf4f447230e6dce2271eec219c89af", "patch": "@@ -32078,11 +32078,11 @@ ix86_init_mmx_sse_builtins (void)\n \t       IX86_BUILTIN_SBB64);\n \n   /* Read/write FLAGS.  */\n-  def_builtin (~OPTION_MASK_ISA_64BIT, \"__builtin_ia32_readeflags_u32\",\n+  def_builtin (0, \"__builtin_ia32_readeflags_u32\",\n                UNSIGNED_FTYPE_VOID, IX86_BUILTIN_READ_FLAGS);\n   def_builtin (OPTION_MASK_ISA_64BIT, \"__builtin_ia32_readeflags_u64\",\n                UINT64_FTYPE_VOID, IX86_BUILTIN_READ_FLAGS);\n-  def_builtin (~OPTION_MASK_ISA_64BIT, \"__builtin_ia32_writeeflags_u32\",\n+  def_builtin (0, \"__builtin_ia32_writeeflags_u32\",\n                VOID_FTYPE_UNSIGNED, IX86_BUILTIN_WRITE_FLAGS);\n   def_builtin (OPTION_MASK_ISA_64BIT, \"__builtin_ia32_writeeflags_u64\",\n                VOID_FTYPE_UINT64, IX86_BUILTIN_WRITE_FLAGS);\n@@ -36726,9 +36726,18 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n      Originally the builtin was not created if it wasn't applicable to the\n      current ISA based on the command line switches.  With function specific\n      options, we need to check in the context of the function making the call\n-     whether it is supported.  */\n-  if ((ix86_builtins_isa[fcode].isa\n-       && !(ix86_builtins_isa[fcode].isa & ix86_isa_flags))\n+     whether it is supported.  Treat AVX512VL specially.  For other flags,\n+     if isa includes more than one ISA bit, treat those are requiring any\n+     of them.  For AVX512VL, require both AVX512VL and the non-AVX512VL\n+     ISAs.  Similarly for 64BIT, but we shouldn't be building such builtins\n+     at all, -m64 is a whole TU option.  */\n+  if (((ix86_builtins_isa[fcode].isa\n+\t& ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_64BIT))\n+       && !(ix86_builtins_isa[fcode].isa\n+\t    & ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_64BIT)\n+\t    & ix86_isa_flags))\n+      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512VL)\n+\t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512VL))\n       || (ix86_builtins_isa[fcode].isa2\n \t  && !(ix86_builtins_isa[fcode].isa2 & ix86_isa_flags2)))\n     {"}, {"sha": "c821a842c73c40edad82570de708a32925febdbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=705d3b776dbf4f447230e6dce2271eec219c89af", "patch": "@@ -1,19 +1,26 @@\n+2017-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79568\n+\t* gcc.target/i386/pr79568-1.c: New test.\n+\t* gcc.target/i386/pr79568-2.c: New test.\n+\t* gcc.target/i386/pr79568-3.c: New test.\n+\n 2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79382\n-\t* gfortran.dg/dtio_10.f90 : Change test of error message.\n-\t* gfortran.dg/dtio_23.f90 : New test.\n-\t* gfortran.dg/dtio_24.f90 : New test.\n+\t* gfortran.dg/dtio_10.f90: Change test of error message.\n+\t* gfortran.dg/dtio_23.f90: New test.\n+\t* gfortran.dg/dtio_24.f90: New test.\n \n 2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79434\n-\t* gfortran.dg/submodule_25.f08 : New test.\n+\t* gfortran.dg/submodule_25.f08: New test.\n \n 2017-02-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79447\n-\t* gfortran.dg/submodule_24.f08 : New test.\n+\t* gfortran.dg/submodule_24.f08: New test.\n \n 2017-02-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n@@ -460,7 +467,7 @@\n \n 2017-02-07  Andrew Pinski  <apinski@cavium.com>\n \n-\t* gcc.target/aarch64/popcount.c : New Testcase.\n+\t* gcc.target/aarch64/popcount.c: New Testcase.\n \n 2017-02-07  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "92956d430d585824c4dbf7365eede4725383af98", "filename": "gcc/testsuite/gcc.target/i386/pr79568-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-1.c?ref=705d3b776dbf4f447230e6dce2271eec219c89af", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/79568 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-avx512vl -mavx512bw -O2\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"avx512vl,avx512bw\")\n+void\n+foo (char *x, char __attribute__ ((__vector_size__(32))) *y, int z)\n+{\n+  __builtin_ia32_storedquqi256_mask (x, *y, z);\n+}\n+#pragma GCC pop_options\n+\n+void\n+bar (char *x, char __attribute__ ((__vector_size__(32))) *y, int z)\n+{\n+  __builtin_ia32_storedquqi256_mask (x, *y, z); /* { dg-error \"needs isa option\" } */\n+}"}, {"sha": "a0ee8e9213919b85ae240aabf86cf4166a3cafe8", "filename": "gcc/testsuite/gcc.target/i386/pr79568-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-2.c?ref=705d3b776dbf4f447230e6dce2271eec219c89af", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/79568 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-mno-lwp\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"lwp\")\n+void\n+foo (unsigned long x, unsigned int y)\n+{\n+  __builtin_ia32_lwpval64 (x, y, 1);\n+}\n+#pragma GCC pop_options\n+\n+void\n+bar (unsigned long x, unsigned int y)\n+{\n+  __builtin_ia32_lwpval64 (x, y, 1);\t /* { dg-error \"needs isa option\" } */\n+}"}, {"sha": "c21016243851ad7c0b8ace062518404748bae19b", "filename": "gcc/testsuite/gcc.target/i386/pr79568-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705d3b776dbf4f447230e6dce2271eec219c89af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79568-3.c?ref=705d3b776dbf4f447230e6dce2271eec219c89af", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/79568 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-sahf -mno-mmx -mno-sse\" } */\n+/* { dg-additional-options \"-march=i386\" { target ia32 } } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"sse\")\n+void\n+foo (void)\n+{\n+  __builtin_ia32_pause ();\n+}\n+#pragma GCC pop_options\n+\n+void\n+bar (void)\n+{\n+  __builtin_ia32_pause ();\n+}"}]}