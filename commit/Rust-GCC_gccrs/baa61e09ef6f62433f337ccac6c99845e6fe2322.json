{"sha": "baa61e09ef6f62433f337ccac6c99845e6fe2322", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFhNjFlMDllZjZmNjI0MzNmMzM3Y2NhYzZjOTk4NDVlNmZlMjMyMg==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-17T13:46:02Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-17T13:46:02Z"}, "message": "[multiple changes]\n\n2004-07-17  Mark Wielaard  <mark@klomp.org>\n\n\t* gnu/java/nio/channels/FileChannelImpl.java (truncate): Only truncate\n\twhen size is smaller.\n\t* java/io/RandomAccessFile.java (setLength): Use truncate for\n\tshrinking the file and seek plus write for expanding the file.\n\n2004-07-17  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/channels/natFileChannelPosix.cc\n\t(implTruncate): Always save current position. Only reposition file\n\tpointer to where we started if not beyond new lenght. Reposition file\n\tpointer to file length if it points beyond the end of file.\n\nFrom-SVN: r84868", "tree": {"sha": "e3b46bce712fc96cd55d5375844c9ae031cde8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b46bce712fc96cd55d5375844c9ae031cde8eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baa61e09ef6f62433f337ccac6c99845e6fe2322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baa61e09ef6f62433f337ccac6c99845e6fe2322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baa61e09ef6f62433f337ccac6c99845e6fe2322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baa61e09ef6f62433f337ccac6c99845e6fe2322/comments", "author": null, "committer": null, "parents": [{"sha": "3e25b3a8f80447b0ce191d1742b292b7b1fd2e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e25b3a8f80447b0ce191d1742b292b7b1fd2e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e25b3a8f80447b0ce191d1742b292b7b1fd2e5c"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "b3e347fde2ec2248f92161734fe042678316b3a3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=baa61e09ef6f62433f337ccac6c99845e6fe2322", "patch": "@@ -1,3 +1,17 @@\n+2004-07-17  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gnu/java/nio/channels/FileChannelImpl.java (truncate): Only truncate\n+\twhen size is smaller.\n+\t* java/io/RandomAccessFile.java (setLength): Use truncate for\n+\tshrinking the file and seek plus write for expanding the file.\n+\n+2004-07-17  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/channels/natFileChannelPosix.cc\n+\t(implTruncate): Always save current position. Only reposition file\n+\tpointer to where we started if not beyond new lenght. Reposition file\n+\tpointer to file length if it points beyond the end of file.\n+\n 2004-07-17  Mark Wielaard  <mark@klomp.org>\n \n \t* javax/swing/Box.java: Put FIXME comment above class declaration."}, {"sha": "678e10f23495808c9ca5d425e6cf736e648aaf93", "filename": "libjava/gnu/java/nio/channels/FileChannelImpl.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FFileChannelImpl.java?ref=baa61e09ef6f62433f337ccac6c99845e6fe2322", "patch": "@@ -422,7 +422,9 @@ public FileChannel truncate (long size)\n     if ((mode & WRITE) == 0)\n        throw new NonWritableChannelException ();\n \n-    implTruncate (size);\n+    if (size < size ())\n+      implTruncate (size);\n+\n     return this;\n   }\n }"}, {"sha": "a2c1c7962b0590f9449d8c1a34bc79387e090c96", "filename": "libjava/gnu/java/nio/channels/natFileChannelPosix.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc?ref=baa61e09ef6f62433f337ccac6c99845e6fe2322", "patch": "@@ -274,7 +274,10 @@ FileChannelImpl::implTruncate (jlong size)\n     }\n   else\n     {\n-      if (::ftruncate (fd, (off_t) pos))\n+      if (::ftruncate (fd, (off_t) size))\n+\tthrow new IOException (JvNewStringLatin1 (strerror (errno)));\n+      if (pos > size\n+\t  && ::lseek (fd, (off_t) size, SEEK_SET) == -1)\n \tthrow new IOException (JvNewStringLatin1 (strerror (errno)));\n       pos = size;\n     }"}, {"sha": "7907d46f2fd95d031c0545cb660ba8821bcf15fe", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baa61e09ef6f62433f337ccac6c99845e6fe2322/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=baa61e09ef6f62433f337ccac6c99845e6fe2322", "patch": "@@ -194,12 +194,14 @@ public long getFilePointer () throws IOException\n   }\n \n   /**\n-   * This method sets the length of the file to the specified length.  If\n-   * the currently length of the file is longer than the specified length,\n-   * then the file is truncated to the specified length.  If the current\n-   * length of the file is shorter than the specified length, the file\n-   * is extended with bytes of an undefined value.\n-   *  <p>\n+   * This method sets the length of the file to the specified length.\n+   * If the currently length of the file is longer than the specified\n+   * length, then the file is truncated to the specified length (the\n+   * file position is set to the end of file in this case).  If the\n+   * current length of the file is shorter than the specified length,\n+   * the file is extended with bytes of an undefined value (the file\n+   * position is unchanged in this case).\n+   * <p>\n    * The file must be open for write access for this operation to succeed.\n    *\n    * @param newlen The new length of the file\n@@ -208,7 +210,19 @@ public long getFilePointer () throws IOException\n    */\n   public void setLength (long newLen) throws IOException\n   {\n-    ch.truncate (newLen);\n+    // FIXME: Extending a file should probably be done by one method call.\n+\n+    // FileChannel.truncate() can only shrink a file.\n+    // To expand it we need to seek forward and write at least one byte.\n+    if (newLen < length())\n+      ch.truncate (newLen);\n+    else if (newLen > length())\n+      {\n+\tlong pos = getFilePointer();\n+\tseek(newLen - 1);\n+\twrite(0);\n+\tseek(pos);\n+      }\n   }\n \n   /**"}]}