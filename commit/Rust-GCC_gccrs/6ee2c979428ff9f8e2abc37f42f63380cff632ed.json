{"sha": "6ee2c979428ff9f8e2abc37f42f63380cff632ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlMmM5Nzk0MjhmZjlmOGUyYWJjMzdmNDJmNjMzODBjZmY2MzJlZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-09-11T05:38:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-09-11T05:38:06Z"}, "message": "cppalloc.c (xstrdup): Use memcpy.\n\n1999-09-10 22:37 -0700  Zack Weinberg  <zack@bitmover.com>\n\n\t* cppalloc.c (xstrdup): Use memcpy.\n\t* cpperror.c (cpp_print_containing_files): Don't use\n\tcpp_notice.\n\t* cpplib.c (conditional_skip): Set temp->lineno.\n\t(do_endif): Make error message less obscure.\n\t(if_directive_name): New function.\n\t(cpp_get_token [case EOF]): Unwind the if stack and generate\n\terror messages for each unterminated conditional in this file.\n\t(parse_string):  Do not behave differently if -traditional.\n\nFrom-SVN: r29279", "tree": {"sha": "52c46696ab752bb46fd99b5d07c89df8ea0e819d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52c46696ab752bb46fd99b5d07c89df8ea0e819d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee2c979428ff9f8e2abc37f42f63380cff632ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee2c979428ff9f8e2abc37f42f63380cff632ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee2c979428ff9f8e2abc37f42f63380cff632ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee2c979428ff9f8e2abc37f42f63380cff632ed/comments", "author": null, "committer": null, "parents": [{"sha": "27e934d8bae03ea7eddeb3770641440333a71478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e934d8bae03ea7eddeb3770641440333a71478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e934d8bae03ea7eddeb3770641440333a71478"}], "stats": {"total": 163, "additions": 102, "deletions": 61}, "files": [{"sha": "6b969622fd8051179dc2d6297b365b4563b9d77c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ee2c979428ff9f8e2abc37f42f63380cff632ed", "patch": "@@ -1,3 +1,15 @@\n+1999-09-10 22:37 -0700  Zack Weinberg  <zack@bitmover.com>\n+\n+\t* cppalloc.c (xstrdup): Use memcpy.\n+\t* cpperror.c (cpp_print_containing_files): Don't use\n+\tcpp_notice.\n+\t* cpplib.c (conditional_skip): Set temp->lineno.\n+\t(do_endif): Make error message less obscure.\n+\t(if_directive_name): New function.\n+\t(cpp_get_token [case EOF]): Unwind the if stack and generate\n+\terror messages for each unterminated conditional in this file.\n+\t(parse_string):  Do not behave differently if -traditional.\n+\n Fri Sep 10 14:04:07 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* builtins.c (expand_builtin_va_arg): Cope with an array-type\n@@ -110,7 +122,7 @@ Thu Sep  9 16:42:06 1999  Richard Henderson  <rth@cygnus.com>\n \t* i386.h (CC1_CPU_SPEC): Don't add -march=foo.  Remove -mno-foo.\n \t(CPP_486_SPEC, CPP_586_SPEC, CPP_686_SPEC): Delete.\n \t(CPP_CPU_DEFAULT_SPEC): Define to __tune_foo__.\n-\t(CC1_CPU_SPEC): Make -march=foo define __foo__, and provide \n+\t(CC1_CPU_SPEC): Make -march=foo define __foo__, and provide\n \t__tune_foo__ if no -mcpu.  Make -mcpu=bar define __tune_bar__.\n \t(EXTRA_SPECS): Remove deleted specs.\n \n@@ -124,7 +136,7 @@ Thu Sep  9 14:36:31 1999  Mark Mitchell  <mark@codesourcery.com>\n \t* ggc.h (lang_cleanup_tree): Remove.\n \t* gcc-simple.c (ggc_free_tree): Don't call lang_cleanup_tree.\n \t* ggc-callbacks.c (lang_cleanup_tree): Remove.\n-\t\n+\n \t* c-decl.c (finish_struct): Use ggc_alloc to allocate\n \tTYPE_LANG_SPECIFIC when garbage collecting.\n \t(lang_mark_tree): Mark TYPE_LANG_SPECIFIC.\n@@ -152,7 +164,7 @@ Thu Sep  9 09:40:58 1999  Mark Mitchell  <mark@codesourcery.com>\n \t(free_lang_status): Likewise.\n \t(push_function_context_to): Don't set function::decl here.\n \t(free_after_copmilation): Make decl parameter implicit.  Call\n-\tfree_lang_status if defined. \n+\tfree_lang_status if defined.\n \t(prepare_function_start): Call init_lang_status if defined.\n \t(init_function_start): Set function::decl here.\n \t* profile.c (output_func_start_profiler): Don't call pushdecl\n@@ -161,7 +173,7 @@ Thu Sep  9 09:40:58 1999  Mark Mitchell  <mark@codesourcery.com>\n \t* toplev.c (rest_of_compilation): Don't pass decl to\n \tfree_after_compilation.\n \t* varasm.c (free_varasm_status): Likewise.\n-\t\n+\n Thu Sep  9 17:23:19 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* except.c (call_get_eh_context): Add root when allocating static\n@@ -195,7 +207,7 @@ Thu Sep  9 03:37:31 1999  Richard Henderson  <rth@cygnus.com>\n \tUse IS_MARKED. Use ggc_free_any.\n \n 1999-09-09  Scott Bambrough <scottb@netwinder.org>\n- \n+\n \t* config/arm/linux-elf.h: define NO_IMPLICIT_EXTERN_C\n \n Thu Sep  9 01:55:21 1999  Richard Henderson  <rth@cygnus.com>\n@@ -254,8 +266,8 @@ Thu Sep  9 13:46:06 1999  Geoffrey Keating  <geoffk@cygnus.com>\n \t(do_xifdef): Handle `#ifdef xxx' for poisoned xxx.\n \n \t* cccp.c: Add T_POISON node type.\n-\t(special_symbol): Handle `defined(xxx)' and plain `xxx' for \n-\tpoisoned xxx.  \n+\t(special_symbol): Handle `defined(xxx)' and plain `xxx' for\n+\tpoisoned xxx.\n \t(do_define): Generalise to handle poisoned definitions,\n \tredefining poisoned identifiers, etc.\n \t(do_undef): Don't allow poisoned identifiers to be undefined.\n@@ -287,7 +299,7 @@ Wed Sep  8 16:41:27 1999  Richard Henderson  <rth@cygnus.com>\n \n Wed Sep  8 16:07:52 1999  Richard Henderson  <rth@cygnus.com>\n \n-\t* gengenrtl.c (CONST_DOUBLE_FORMAT): Take the size REAL_ARITHMETIC \n+\t* gengenrtl.c (CONST_DOUBLE_FORMAT): Take the size REAL_ARITHMETIC\n \twill use into account.  Expand the max width to 5.\n \t* rtl.c: Likewise.\n \n@@ -312,7 +324,7 @@ Wed Sep  8 15:32:16 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \tNEED_DECLARATION_REALLOC test.\n \n \t* mips-tdump.c (malloc, calloc, realloc): Don't prototype.\n-\t\n+\n Wed Sep  8 11:40:47 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gansidecl.h (__attribute__, ATTRIBUTE_UNUSED_LABEL,\n@@ -325,7 +337,7 @@ Wed Sep  8 11:40:47 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \t* cccp.c (pcfinclude): Likewise.\n \n \t* global.c (allocno_compare): Likewise.\n-\t\n+\n \t* haifa-sched.c (rank_for_schedule): Likewise.\n \n \t* local-alloc.c (qty_sugg_compare_1, qty_compare_1): Likewise.\n@@ -378,7 +390,7 @@ Wed Sep  8 00:33:43 1999  Alasdair Baird  <alasdair@wildcat.demon.co.uk>\n \n Wed Sep  8 18:55:17 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n-\t* config/c4x/c4x.c: Include ggc.h. \n+\t* config/c4x/c4x.c: Include ggc.h.\n \t(c4x_add_gc_roots): New function.\n \t(c4x_override_options): Call c4x_add_gc_roots.\n \n@@ -485,7 +497,7 @@ Tue Sep  7 21:41:38 1999  Richard Henderson  <rth@cygnus.com>\n Tue Sep  7 17:15:21 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \tAdd some machine-dependent GC roots.\n-\t* sparc.c: Include ggc.h. \n+\t* sparc.c: Include ggc.h.\n \t(sparc_add_gc_roots): New function.\n \t(mark_ultrasparc_pipeline_state): Likewise.\n \t(override_options): Call sparc_add_gc_roots.\n@@ -564,7 +576,7 @@ Tue Sep  7 00:47:52 1999  Mark Mitchell  <mark@codesourcery.com>\n \t(free_varasm_status): Likewise.\n \t(free_emit_status): Likewise.\n \t(free_stmt_status): New function.\n-\t* ggc-simple.c (rtx, vecs, trees, strings, bytes_alloced_since_gc): \n+\t* ggc-simple.c (rtx, vecs, trees, strings, bytes_alloced_since_gc):\n \tRemove, replacing with ...\n \t(ggc_status): New structure.\n \t(ggc_chain): New variable.\n@@ -593,7 +605,7 @@ Tue Sep  7 00:47:52 1999  Mark Mitchell  <mark@codesourcery.com>\n \t(push_obstacks_nochange): Likewise.\n \t(pop_obstacks): Liekwise.\n \t* varasm.c (free_varasm_status): Take decl as a parameter.\n-\t\n+\n Tue Sep  7 08:15:49 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* config/mips/mips.h (MULTILIB_ENDIAN_DEFAULT) : New macro.\n@@ -779,12 +791,12 @@ Sun Sep  5 18:57:42 1999  Mark Mitchell  <mark@codesourcery.com>\n \t(ggc_add_tree_hash_table_root): Likewise.\n \t* varray.h (const_equiv_data): Use struct rtx_def *, rather than\n \trtx, when defining fields.\n-\t\n+\n Sun Sep  5 18:57:42 1999  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \n \t* profile.c (output_func_start_profiler): Remove apparently\n \tnonsensical call to start_sequence.\n-\t\n+\n Sun Sep  5 17:34:33 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* clipper/clipper.c (clipper_va_start): Fix typos.\n@@ -802,14 +814,14 @@ Sun Sep  5 19:11:01 1999  Michael Meissner  <meissner@cygnus.com>\n \tdefines.\n \n Sun Sep  5 09:31:56 1999  Richard Henderson  <rth@cygnus.com>\n-\t                  Bernd Schmidt <bernds@cygnus.co.uk>\n+\t\t\t  Bernd Schmidt <bernds@cygnus.co.uk>\n \n \t* integrate.c (function_cannot_inline_p): Do not inline\n \tfunctions with forced labels.\n \n Sun Sep  5 00:35:17 1999  Richard Henderson  <rth@cygnus.com>\n-\t                  Bernd Schmidt <bernds@cygnus.co.uk>\n-\t                  Mark Mitchell  <mark@codesourcery.com>\n+\t\t\t  Bernd Schmidt <bernds@cygnus.co.uk>\n+\t\t\t  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (ggc-simple.o): Depend on varray.h.\n \t(rtl.o): Depend on ggc.h.\n@@ -866,15 +878,15 @@ Sun Sep  5 00:35:17 1999  Richard Henderson  <rth@cygnus.com>\n \t(tree_cons): Likewise.\n \t(build1): Likewise.\n \t(type_hash_canon): Don't call obstack_free when GC'ing.\n-\t\n+\n Sat Sep  4 21:52:32 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* haifa-sched.c (schedule_block): Use next_nonnote_insn instead\n \tof NEXT_INSN when examining speculative insns for SCHED_GROUP_P.\n \n Sat Sep  4 20:40:19 1999  Richard Henderson  <rth@cygnus.com>\n-\t                  Bernd Schmidt <bernds@cygnus.co.uk>\n-\t                  Mark Mitchell  <mark@codesourcery.com>\n+\t\t\t  Bernd Schmidt <bernds@cygnus.co.uk>\n+\t\t\t  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (stor-layout.o): Depend on ggc.h.\n \t(expr.o): Depend on ggc.h.\n@@ -893,9 +905,9 @@ Sat Sep  4 20:40:19 1999  Richard Henderson  <rth@cygnus.com>\n \t(set_sizetype): Add gc root.\n \t(init_stor_layout_once): New function.\n \t* toplev.c (compile_file): Call it.\n-\t\n+\n Sat Sep  4 19:26:25 1999  Richard Henderson  <rth@cygnus.com>\n-\t                  Bernd Schmidt <bernds@cygnus.co.uk>\n+\t\t\t  Bernd Schmidt <bernds@cygnus.co.uk>\n \t\t\t  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (tree.o): Depend on ggc.h.\n@@ -943,7 +955,7 @@ Sat Sep  4 19:26:25 1999  Richard Henderson  <rth@cygnus.com>\n \t* varasm.c: Include ggc.h.\n \t(mark_pool_constant): New function.\n \t(mark_varasm_state): New function.\n-\t\n+\n Sat Sep  4 22:28:56 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ggc-simple.c (ggc_root, ggc_collect): Wrap prototype with PROTO.\n@@ -1042,7 +1054,7 @@ Sat Sep  4 11:19:52 1999  Richard Henderson  <rth@cygnus.com>\n \t(all_time): New variable.\n \t(compile_file): Print gc time.\n \t(print_time): Calculate percentage of the whole.\n-\t\n+\n Sat Sep  4 13:11:01 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \tChange obstack memory management and varasm constant pool handling so\n@@ -1148,7 +1160,7 @@ Fri Sep  3 19:02:38 1999  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \t(restore_lang_status): Likewise.\n \t(push_function_context_to): Call language-specific save function.\n \t(pop_function_context_from): Call language-specific restore function.\n-\t\n+\n Fri Sep  3 01:16:18 1999  Alasdair Baird  <alasdair@wildcat.demon.co.uk>\n \n \t* i386.md (movsf_1): Check REG_P before use of REGNO.\n@@ -1167,7 +1179,7 @@ Sat Sep  4 11:37:15 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \t(c4x_shiftable_constant): Declare.\n \t* config/c4x/c4x.md (loadqi_big_constant, loadhi_big_constant,\n  \tashlqi3_noclobber): Add new patterns and associated splitters.\n-\t\n+\n Fri Sep  3 16:22:17 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* dbxout.c (dbxout_init): Use xcalloc instead of xmalloc+bzero.\n@@ -1239,11 +1251,11 @@ Fri Sep  3 15:10:20 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \tscan_linker_output): Constify a char*.\n \t(symbol_hash_newfunc, file_hash_newfunc, demangled_hash_newfunc,\n \tdo_tlink): Mark parameters with ATTRIBUTE_UNUSED.\n-\t\n+\n Fri Sep  3 18:09:24 1999  Andrew Haley  <aph@cygnus.com>\n \n \t* config/m68k/m68kelf.h: Set USE_GAS; this makes gcc generate jbsr\n-\t(relative) rather than jsr (absolute) subroutine call insns.  \n+\t(relative) rather than jsr (absolute) subroutine call insns.\n \t* config/m68k/m68k-coff.h: Ditto.\n \n Fri Sep  3 17:24:31 1999  Richard Earnshaw <rearnsha@arm.com>\n@@ -1458,7 +1470,7 @@ Tue Aug 31 13:35:42 1999  Richard Henderson  <rth@cygnus.com>\n \t* genpeep.c (main): Conditionalize entire output on HAVE_peephole.\n \t* flags.h (flag_peephole2): Declare.\n \t* toplev.c: New pass peephole2.  New flag -fpeephole2.\n- \n+\n \t* genattrtab.c (main): Count DEFINE_PEEPHOLE2.\n \t* gencodes.c (main): Likewise.\n \t* genextract.c (main): Likewise.\n@@ -2652,7 +2664,7 @@ Fri Aug 20 22:32:17 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \t* gencheck.c: Do not define any *_CHECK1 macros.\n \n Thu Aug 19 14:42:38 1999  Mike Stump <mrs@wrs.com>\n-\t\t          Mark Mitchell <mark@codesourcery.com>\n+\t\t\t  Mark Mitchell <mark@codesourcery.com>\n \n \t* c-common.c (c_get_alias_set): Fix support for poitners and\n \treferences.\n@@ -5119,7 +5131,7 @@ Fri Jul  2 01:36:36 1999  Robert Lipe  <robertlipe@usa.net>\n \tntohs.\n \n Fri Jul  2 00:46:47 1999  Richard Henderson  <rth@cygnus.com>\n-\t                  Jeff Law <law@cygnus.com>\n+\t\t\t  Jeff Law <law@cygnus.com>\n \n \t* ginclude/varargs.h (va_dcl): Use word_mode for type of\n \t__builtin_va_list.\n@@ -5878,7 +5890,7 @@ Mon Jun  7 22:05:03 1999  Mark Kettenis  <kettenis@gnu.org>\n \t* fixinc/fixincl.x, fixinc/fixincl.sh: Rebuilt.\n \n Mon Jun  7 20:34:20 1999  Robert Lipe <robertlipe@usa.net>\n-\t                  Jeffrey A Law  (law@cygnus.com)\n+\t\t\t  Jeffrey A Law  (law@cygnus.com)\n \n \t* varasm.c (assemble_start_function): Remove the function\n \tfrom the pending weak decls list when we define a function."}, {"sha": "47712e7a1ae28e55c73e2a4bcf124b5b6d54c0da", "filename": "gcc/cppalloc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2Fcppalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2Fcppalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppalloc.c?ref=6ee2c979428ff9f8e2abc37f42f63380cff632ed", "patch": "@@ -74,8 +74,8 @@ char *\n xstrdup (input)\n   const char *input;\n {\n-  unsigned size = strlen (input);\n-  char *output = xmalloc (size + 1);\n-  strcpy (output, input);\n+  size_t size = strlen (input) + 1;\n+  char *output = xmalloc (size);\n+  memcpy (output, input, size);\n   return output;\n }"}, {"sha": "bf335814f09a1b020c0caac03c38eb2c69e44f92", "filename": "gcc/cpperror.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=6ee2c979428ff9f8e2abc37f42f63380cff632ed", "patch": "@@ -63,8 +63,8 @@ cpp_print_containing_files (pfile)\n \t  if (first)\n \t    {\n \t      first = 0;\n-\t      cpp_notice (\"In file included from %s:%ld\",\n-\t\t\t  ip->nominal_fname, line);\n+\t      cpp_message (pfile, -1, \"In file included from %s:%ld\",\n+\t\t\t   ip->nominal_fname, line);\n \t    }\n \t  else\n \t    cpp_message (pfile, -1, \",\\n                 from %s:%ld\","}, {"sha": "b31518612184e3cda1756fce339766f2970ae7c6", "filename": "gcc/cpplib.c", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2c979428ff9f8e2abc37f42f63380cff632ed/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=6ee2c979428ff9f8e2abc37f42f63380cff632ed", "patch": "@@ -1944,9 +1944,7 @@ conditional_skip (pfile, skip, type, control_macro)\n \n   temp = (IF_STACK_FRAME *) xcalloc (1, sizeof (IF_STACK_FRAME));\n   temp->fname = CPP_BUFFER (pfile)->nominal_fname;\n-#if 0\n   temp->lineno = CPP_BUFFER (pfile)->lineno;\n-#endif\n   temp->next = pfile->if_stack;\n   temp->control_macro = control_macro;\n   pfile->if_stack = temp;\n@@ -2177,7 +2175,7 @@ do_endif (pfile, keyword)\n   skip_rest_of_line (pfile);\n \n   if (pfile->if_stack == CPP_BUFFER (pfile)->if_stack)\n-    cpp_error (pfile, \"unbalanced `#endif'\");\n+    cpp_error (pfile, \"`#endif' not within a conditional\");\n   else\n     {\n       IF_STACK_FRAME *temp = pfile->if_stack;\n@@ -2235,6 +2233,25 @@ validate_else (pfile, directive)\n \t\t \"text following `%s' violates ANSI standard\", directive);\n }\n \n+/* Convert T_IF, etc. to a string.   Used in error messages.  */\n+static const char *\n+if_directive_name (pfile, ifs)\n+     cpp_reader *pfile;\n+     struct if_stack *ifs;\n+{\n+  switch (ifs->type)\n+    {\n+    case T_IF:\t    return \"#if\";\n+    case T_IFDEF:   return \"#ifdef\";\n+    case T_IFNDEF:  return \"#ifndef\";\n+    case T_ELIF:    return \"#elif\";\n+    case T_ELSE:    return \"#else\";\n+    default:\n+      cpp_fatal (pfile, \"impossible if_stack->type value %d\", ifs->type);\n+      return \"unknown\";\n+    }\n+}\n+\n /* Get the next token, and add it to the text in pfile->token_buffer.\n    Return the kind of token we got.  */\n   \n@@ -2265,9 +2282,23 @@ cpp_get_token (pfile)\n \t}\n       else\n \t{\n-\t  cpp_buffer *next_buf\n-\t    = CPP_PREV_BUFFER (CPP_BUFFER (pfile));\n-\t  CPP_BUFFER (pfile)->seen_eof = 1;\n+\t  cpp_buffer *next_buf = CPP_PREV_BUFFER (CPP_BUFFER (pfile));\n+\t  struct if_stack *ifs, *nifs;\n+\n+\t  /* Unwind the conditional stack and generate error messages.  */\n+\t  for (ifs = pfile->if_stack;\n+\t       ifs != CPP_BUFFER (pfile)->if_stack;\n+\t       ifs = nifs)\n+\t    {\n+\t      cpp_error_with_line (pfile, ifs->lineno, -1,\n+\t\t\t\t   \"unterminated `%s' conditional\",\n+\t\t\t\t   if_directive_name (pfile, ifs));\n+\n+\t      nifs = ifs->next;\n+\t      free (ifs);\n+\t    }\n+\t  pfile->if_stack = ifs;\n+\n \t  if (CPP_BUFFER (pfile)->nominal_fname\n \t      && next_buf != CPP_NULL_BUFFER (pfile))\n \t    {\n@@ -2280,6 +2311,8 @@ cpp_get_token (pfile)\n \t      output_line_command (pfile, leave_file);\n \t      CPP_BUFFER (pfile) = cur_buffer;\n \t    }\n+\n+\t  CPP_BUFFER (pfile)->seen_eof = 1;\n \t  return CPP_POP;\n \t}\n     }\n@@ -2824,17 +2857,15 @@ parse_string (pfile, c)\n \t      cpp_pop_buffer (pfile);\n \t      continue;\n \t    }\n-\t  if (!CPP_TRADITIONAL (pfile))\n-\t    {\n-\t      cpp_error_with_line (pfile, start_line, start_column,\n-\t\t\t\t \"unterminated string or character constant\");\n-\t      if (pfile->multiline_string_line != start_line\n-\t\t  && pfile->multiline_string_line != 0)\n-\t\tcpp_error_with_line (pfile,\n-\t\t\t\t     pfile->multiline_string_line, -1,\n-\t\t\t       \"possible real start of unterminated constant\");\n-\t      pfile->multiline_string_line = 0;\n-\t    }\n+\n+\t  cpp_error_with_line (pfile, start_line, start_column,\n+\t\t\t       \"unterminated string or character constant\");\n+\t  if (pfile->multiline_string_line != start_line\n+\t      && pfile->multiline_string_line != 0)\n+\t    cpp_error_with_line (pfile,\n+\t\t\t\t pfile->multiline_string_line, -1,\n+\t\t\t \"possible real start of unterminated constant\");\n+\t  pfile->multiline_string_line = 0;\n \t  break;\n \t}\n       CPP_PUTC (pfile, cc);\n@@ -2843,11 +2874,9 @@ parse_string (pfile, c)\n \tcase '\\n':\n \t  CPP_BUMP_LINE (pfile);\n \t  pfile->lineno++;\n-\t  /* Traditionally, end of line ends a string constant with\n-\t     no error.  */\n-\t  if (CPP_TRADITIONAL (pfile))\n-\t    return;\n-\t  /* Character constants may not extend over multiple lines.  */\n+\t  /* Character constants may not extend over multiple lines.\n+\t     In ANSI, neither may strings.  We accept multiline strings\n+\t     as an extension.  */\n \t  if (c == '\\'')\n \t    {\n \t      cpp_error_with_line (pfile, start_line, start_column,"}]}