{"sha": "0b47752e7e5169370c84eb30016b3aeac06ddc5e", "node_id": "C_kwDOANBUbNoAKDBiNDc3NTJlN2U1MTY5MzcwYzg0ZWIzMDAxNmIzYWVhYzA2ZGRjNWU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-30T00:16:47Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-30T00:16:47Z"}, "message": "Daily bump.", "tree": {"sha": "55e5f26b9a8361a5691fc12f14ecc88f552bd3d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55e5f26b9a8361a5691fc12f14ecc88f552bd3d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b47752e7e5169370c84eb30016b3aeac06ddc5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b47752e7e5169370c84eb30016b3aeac06ddc5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b47752e7e5169370c84eb30016b3aeac06ddc5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b47752e7e5169370c84eb30016b3aeac06ddc5e/comments", "author": null, "committer": null, "parents": [{"sha": "98973354b8690f01e06b9f36106e786fd94ac7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98973354b8690f01e06b9f36106e786fd94ac7a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98973354b8690f01e06b9f36106e786fd94ac7a3"}], "stats": {"total": 172, "additions": 171, "deletions": 1}, "files": [{"sha": "1a5967a24008a69bc2d559332ec3b6c023ec662b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b47752e7e5169370c84eb30016b3aeac06ddc5e", "patch": "@@ -1,3 +1,116 @@\n+2022-08-29  David Faust  <david.faust@oracle.com>\n+\n+\tPR target/106745\n+\t* config/bpf/coreout.cc (bpf_core_get_sou_member_index): Fix\n+\tcomputation of index for anonymous members.\n+\n+2022-08-29  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* config/bpf/bpf.cc (bpf_target_macros): Define __bpf__ as a\n+\ttarget macro.\n+\n+2022-08-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/106748\n+\t* config/i386/i386-expand.cc\n+\t(ix86_avx256_split_vector_move_misalign): Handle E_V16BFmode.\n+\t* config/i386/sse.md (V_256H): Add V16BF.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/s390.cc (s390_address_cost): Declare.\n+\t(s390_hard_regno_nregs): Declare.\n+\t(s390_rtx_costs): Add handling for REG and MEM in SET.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/s390.cc (expand_perm_with_vpdi): Recognize swap pattern.\n+\t(is_reverse_perm_mask): New function.\n+\t(expand_perm_with_rot): Recognize reverse pattern.\n+\t(expand_perm_with_vstbrq): New function.\n+\t(expand_perm_with_vster): Use vler/vster for element reversal on z15.\n+\t(vectorize_vec_perm_const_1): Use.\n+\t(s390_vectorize_vec_perm_const): Add expand functions.\n+\t* config/s390/vx-builtins.md: Prefer vster over vler.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/s390.md: Remove UNSPEC_VEC_EXTRACT.\n+\t* config/s390/vector.md: Rewrite patterns to use vec_select.\n+\t* config/s390/vx-builtins.md (vec_scatter_element<V_HW_2:mode>_SI):\n+\tLikewise.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\tPR target/100869\n+\t* config/s390/vector.md (@vpdi4_2<mode>): New pattern.\n+\t(rotl<mode>3_di): New pattern.\n+\t* config/s390/vx-builtins.md: Use vpdi and verll for reversing\n+\telements.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* config/s390/s390.cc (s390_issue_rate): Add z15.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* common/config/s390/s390-common.cc: Enable -funroll-loops and\n+\t-munroll-only-small-loops for OPT_LEVELS_2_PLUS_SPEED_ONLY.\n+\t* config/s390/s390.cc (s390_loop_unroll_adjust): Do not unroll\n+\tloops larger than 12 instructions.\n+\t(s390_override_options_after_change): Set unroll options.\n+\t(s390_option_override_internal): Likewise.\n+\t* config/s390/s390.opt: Document munroll-only-small-loops.\n+\n+2022-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (is_loop_exit,\n+\tfind_control_equiv_block): Inline into single caller ...\n+\t(uninit_analysis::init_use_preds): ... here and refactor.\n+\n+2022-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (compute_control_dep_chain):\n+\tInline is_loop_exit and refactor, add comment about\n+\tloop exits.\n+\n+2022-08-29  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.cc (riscv_frame_info): Introduce `reset(void)`;\n+\t(riscv_frame_info::reset(void)): New.\n+\t(riscv_compute_frame_info): Use riscv_frame_info::reset instead\n+\tof memset when clean frame.\n+\n+2022-08-29  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.cc (riscv_v_ext_vector_mode_p): New function.\n+\t(riscv_classify_address): Disallow PLUS/LO_SUM/CONST_INT address types for RVV.\n+\t(riscv_address_insns): Add RVV modes condition.\n+\t(riscv_binary_cost): Ditto.\n+\t(riscv_rtx_costs): Adjust cost for RVV.\n+\t(riscv_secondary_memory_needed): Add RVV modes condition.\n+\t(riscv_hard_regno_nregs): Add RVV register allocation.\n+\t(riscv_hard_regno_mode_ok): Add RVV register allocation.\n+\t(riscv_class_max_nregs): Add RVV register allocation.\n+\t* config/riscv/riscv.h (DWARF_FRAME_REGNUM): Add VL/VTYPE and vector registers in Dwarf.\n+\t(UNITS_PER_V_REG): New macro.\n+\t(FIRST_PSEUDO_REGISTER): Adjust first pseudo num for RVV.\n+\t(V_REG_FIRST): New macro.\n+\t(V_REG_LAST): Ditto.\n+\t(V_REG_NUM): Ditto.\n+\t(V_REG_P): Ditto.\n+\t(VL_REG_P): Ditto.\n+\t(VTYPE_REG_P): Ditto.\n+\t(RISCV_DWARF_VL): Ditto.\n+\t(RISCV_DWARF_VTYPE): Ditto.\n+\t(enum reg_class): Add RVV register types.\n+\t(REG_CLASS_CONTENTS): Add RVV register types.\n+\t* config/riscv/riscv.md: Add VL/VTYPE register number constants.\n+\n+2022-08-29  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.md: Add new type for vector instructions.\n+\n 2022-08-28  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/106017"}, {"sha": "41f0d849079eb32f242baa787ee09d7759bd540b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0b47752e7e5169370c84eb30016b3aeac06ddc5e", "patch": "@@ -1 +1 @@\n-20220829\n+20220830"}, {"sha": "b59685c37413b70b34e9184717f6eb8fb370e354", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b47752e7e5169370c84eb30016b3aeac06ddc5e", "patch": "@@ -1,3 +1,9 @@\n+2022-08-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106712\n+\t* decl.cc (grokdeclarator): Reverse the order of arguments to\n+\tattr_chainon.\n+\n 2022-08-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/81159"}, {"sha": "33006b2f8b2f98d9f68e9ab4164e4ce9e494d3a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b47752e7e5169370c84eb30016b3aeac06ddc5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b47752e7e5169370c84eb30016b3aeac06ddc5e", "patch": "@@ -1,3 +1,54 @@\n+2022-08-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106712\n+\t* g++.dg/cpp0x/gen-attrs-77.C: New test.\n+\n+2022-08-29  David Faust  <david.faust@oracle.com>\n+\n+\tPR target/106745\n+\t* gcc.target/bpf/core-pr106745.c: New test.\n+\n+2022-08-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/106748\n+\t* gcc.target/i386/pr106748.c: New test.\n+\n+2022-08-29  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/func-call-medium-1.c: Refine test\n+\tdepending on __tls_get_addr with { target tls_native }.\n+\t* gcc.target/loongarch/func-call-medium-2.c: Likewise.\n+\t* gcc.target/loongarch/func-call-medium-3.c: Likewise.\n+\t* gcc.target/loongarch/func-call-medium-4.c: Likewise.\n+\t* gcc.target/loongarch/func-call-medium-5.c: Likewise.\n+\t* gcc.target/loongarch/func-call-medium-6.c: Likewise.\n+\t* gcc.target/loongarch/func-call-medium-7.c: Likewise.\n+\t* gcc.target/loongarch/func-call-medium-8.c: Likewise.\n+\t* gcc.target/loongarch/tls-gd-noplt.c: Likewise.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-sum-across-no-lower-subreg-1.c: New test.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/vperm-rev-z14.c: New test.\n+\t* gcc.target/s390/vector/vperm-rev-z15.c: New test.\n+\t* gcc.target/s390/zvector/vec-reve-store-byte.c: Adjust test\n+\texpectation.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-reve-int-long.c: New test.\n+\n+2022-08-29  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-copysign.c: Do not unroll.\n+\t* gcc.target/s390/zvector/autovec-double-quiet-uneq.c: Dito.\n+\t* gcc.target/s390/zvector/autovec-double-signaling-ltgt.c: Dito.\n+\t* gcc.target/s390/zvector/autovec-float-quiet-uneq.c: Dito.\n+\t* gcc.target/s390/zvector/autovec-float-signaling-ltgt.c: Dito.\n+\n 2022-08-28  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/106017"}]}