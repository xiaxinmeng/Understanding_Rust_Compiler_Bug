{"sha": "ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyNDBhYjUwOTkwYzAxY2I2NTdiNGE0MzA2ZWQ2ZjRiMmQ0ZmI2ZQ==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-07-16T15:39:23Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-07-24T10:44:53Z"}, "message": "aarch64: add PAC-RET protection to libitm sjlj.S\n\n_ITM_beginTransaction is a 'returns_twice' function that saves x30\non the stack as part of gtm_jmpbuf (that is passed down to\nGTM_begin_transaction), but the saved x30 is also used for return.\n\nThe return path should be protected so we don't leave an\n  ldp x29, x30, [sp]\n  ret\ngadget in the code, so x30 is signed on function entry. This\nexposes the signed address in the gtm_jmpbuf too. The jmpbuf does\nnot need a signed address since GTM_longjmp uses\n  ldp x29, x30, [x1]\n  br x30\nand with BTI there is a BTI j at the _ITM_beginTransaction call site\nwhere this jump returns. Using PAC does not hurt: the gtm_jmpbuf is\ninternal to libitm and its layout is only used by sjlj.S so the\nsigned address does not escape. Saving signed x30 into gtm_jmpbuf\nprovides a bit of extra protection, but more importantly it allows\nadding the PAC-RET support without changing the existing code much.\n\nIn theory bti and pac-ret protection can be added unconditionally\nsince the instructions are in the nop space, in practice they\ncan cause trouble if some tooling does not understand the gnu\nproperty note (e.g. old binutils) or some unwinder or debugger\ndoes not understand the new dwarf op code used for pac-ret (e.g\nold gdb). So the code is written to only support branch-protection\naccording to the code generation options.\n\nlibitm/ChangeLog:\n\n\t* config/aarch64/sjlj.S: Add conditional pac-ret protection.", "tree": {"sha": "dfe4392b4a893998763a0ddce8db85637df8188f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfe4392b4a893998763a0ddce8db85637df8188f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edfb3a30a6cef8e8c25197a7534628961233d772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfb3a30a6cef8e8c25197a7534628961233d772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfb3a30a6cef8e8c25197a7534628961233d772"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "c84e98aecad52a431c9e82846716b4fcddd932e2", "filename": "libitm/config/aarch64/sjlj.S", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e/libitm%2Fconfig%2Faarch64%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e/libitm%2Fconfig%2Faarch64%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Faarch64%2Fsjlj.S?ref=ab240ab50990c01cb657b4a4306ed6f4b2d4fb6e", "patch": "@@ -25,6 +25,35 @@\n #include \"asmcfi.h\"\n \n #define BTI_C\thint\t34\n+#define PACIASP\thint\t25\n+#define AUTIASP\thint\t29\n+#define PACIBSP\thint\t27\n+#define AUTIBSP\thint\t31\n+\n+#if defined(HAVE_AS_CFI_PSEUDO_OP) && defined(__GCC_HAVE_DWARF2_CFI_ASM)\n+# define cfi_window_save .cfi_window_save\n+# define cfi_b_key_frame .cfi_b_key_frame\n+#else\n+# define cfi_window_save\n+# define cfi_b_key_frame\n+#endif\n+\n+#if __ARM_FEATURE_PAC_DEFAULT & 1\n+# define CFI_PAC_TOGGLE\tcfi_window_save\n+# define CFI_PAC_KEY\n+# define PAC_AND_BTI\tPACIASP\n+# define AUT\tAUTIASP\n+#elif __ARM_FEATURE_PAC_DEFAULT & 2\n+# define CFI_PAC_TOGGLE\tcfi_window_save\n+# define CFI_PAC_KEY\tcfi_b_key_frame\n+# define PAC_AND_BTI\tPACIBSP\n+# define AUT\tAUTIBSP\n+#else\n+# define CFI_PAC_TOGGLE\n+# define CFI_PAC_KEY\n+# define PAC_AND_BTI\tBTI_C\n+# define AUT\n+#endif\n \n \t.text\n \t.align\t2\n@@ -33,7 +62,9 @@\n \n _ITM_beginTransaction:\n \tcfi_startproc\n-\tBTI_C\n+\tCFI_PAC_KEY\n+\tPAC_AND_BTI\n+\tCFI_PAC_TOGGLE\n \tmov\tx1, sp\n \tstp\tx29, x30, [sp, -11*16]!\n \tcfi_adjust_cfa_offset(11*16)\n@@ -60,6 +91,8 @@ _ITM_beginTransaction:\n \tcfi_adjust_cfa_offset(-11*16)\n \tcfi_restore(x29)\n \tcfi_restore(x30)\n+\tAUT\n+\tCFI_PAC_TOGGLE\n \tret\n \tcfi_endproc\n \t.size\t_ITM_beginTransaction, . - _ITM_beginTransaction\n@@ -73,6 +106,7 @@ GTM_longjmp:\n \t/* The first parameter becomes the return value (x0).\n \t   The third parameter is ignored for now.  */\n \tcfi_startproc\n+\tCFI_PAC_KEY\n \tBTI_C\n \tldp\tx19, x20, [x1, 1*16]\n \tldp\tx21, x22, [x1, 2*16]\n@@ -86,7 +120,10 @@ GTM_longjmp:\n \tldr\tx3, [x1, 10*16]\n \tldp\tx29, x30, [x1]\n \tcfi_def_cfa(x1, 0)\n+\tCFI_PAC_TOGGLE\n \tmov\tsp, x3\n+\tAUT\n+\tCFI_PAC_TOGGLE\n \tbr\tx30\n \tcfi_endproc\n \t.size\tGTM_longjmp, . - GTM_longjmp\n@@ -96,6 +133,19 @@ GTM_longjmp:\n #define FEATURE_1_BTI 1\n #define FEATURE_1_PAC 2\n \n+/* Supported features based on the code generation options.  */\n+#if defined(__ARM_FEATURE_BTI_DEFAULT)\n+# define BTI_FLAG FEATURE_1_BTI\n+#else\n+# define BTI_FLAG 0\n+#endif\n+\n+#if __ARM_FEATURE_PAC_DEFAULT & 3\n+# define PAC_FLAG FEATURE_1_PAC\n+#else\n+# define PAC_FLAG 0\n+#endif\n+\n /* Add a NT_GNU_PROPERTY_TYPE_0 note.  */\n #define GNU_PROPERTY(type, value)\t\\\n   .section .note.gnu.property, \"a\";\t\\\n@@ -113,7 +163,7 @@ GTM_longjmp:\n .section .note.GNU-stack, \"\", %progbits\n \n /* Add GNU property note if built with branch protection.  */\n-# ifdef __ARM_FEATURE_BTI_DEFAULT\n-GNU_PROPERTY (FEATURE_1_AND, FEATURE_1_BTI)\n+# if (BTI_FLAG|PAC_FLAG) != 0\n+GNU_PROPERTY (FEATURE_1_AND, BTI_FLAG|PAC_FLAG)\n # endif\n #endif"}]}