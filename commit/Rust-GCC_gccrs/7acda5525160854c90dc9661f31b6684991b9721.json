{"sha": "7acda5525160854c90dc9661f31b6684991b9721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjZGE1NTI1MTYwODU0YzkwZGM5NjYxZjMxYjY2ODQ5OTFiOTcyMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-11-30T00:01:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-11-30T00:01:45Z"}, "message": "expr.c (expand_expr_real_1, [...]): Properly handle REDUCE_BIT_FIELD by applying it to result, not input, of conversion.\n\n\t* expr.c (expand_expr_real_1, case NOP_EXPR): Properly handle\n\tREDUCE_BIT_FIELD by applying it to result, not input, of conversion.\n\nFrom-SVN: r91498", "tree": {"sha": "dfbf6f2ea293600c13665faeb6960583e8f04567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfbf6f2ea293600c13665faeb6960583e8f04567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7acda5525160854c90dc9661f31b6684991b9721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7acda5525160854c90dc9661f31b6684991b9721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7acda5525160854c90dc9661f31b6684991b9721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7acda5525160854c90dc9661f31b6684991b9721/comments", "author": null, "committer": null, "parents": [{"sha": "0d0a0935545f258cd934235e5fc4dba4a21f242b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0a0935545f258cd934235e5fc4dba4a21f242b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0a0935545f258cd934235e5fc4dba4a21f242b"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "2f285dae98f46fd98688f3d47dffbc5b65a6cc59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7acda5525160854c90dc9661f31b6684991b9721/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7acda5525160854c90dc9661f31b6684991b9721/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7acda5525160854c90dc9661f31b6684991b9721", "patch": "@@ -1,3 +1,8 @@\n+2004-11-30  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (expand_expr_real_1, case NOP_EXPR): Properly handle\n+\tREDUCE_BIT_FIELD by applying it to result, not input, of conversion.\n+\n 2004-11-30  Ben Elliston  <bje@au.ibm.com>\n \n \t* Makefile.in (REGS_H): Depend on $(BASIC_BLOCK_H)."}, {"sha": "ec44ce3ed966f056ba47a11d20239b5a98c6615d", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7acda5525160854c90dc9661f31b6684991b9721/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7acda5525160854c90dc9661f31b6684991b9721/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7acda5525160854c90dc9661f31b6684991b9721", "patch": "@@ -7241,36 +7241,39 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t}\n \n       op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, modifier);\n-      op0 = REDUCE_BIT_FIELD (op0);\n       if (GET_MODE (op0) == mode)\n-\treturn op0;\n+\t;\n \n       /* If OP0 is a constant, just convert it into the proper mode.  */\n-      if (CONSTANT_P (op0))\n+      else if (CONSTANT_P (op0))\n \t{\n \t  tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n \t  enum machine_mode inner_mode = TYPE_MODE (inner_type);\n \n \t  if (modifier == EXPAND_INITIALIZER)\n-\t    return simplify_gen_subreg (mode, op0, inner_mode,\n-\t\t\t\t\tsubreg_lowpart_offset (mode,\n-\t\t\t\t\t\t\t       inner_mode));\n+\t    op0 = simplify_gen_subreg (mode, op0, inner_mode,\n+\t\t\t\t       subreg_lowpart_offset (mode,\n+\t\t\t\t\t\t\t      inner_mode));\n \t  else\n-\t    return convert_modes (mode, inner_mode, op0,\n-\t\t\t\t  TYPE_UNSIGNED (inner_type));\n+\t    op0=  convert_modes (mode, inner_mode, op0,\n+\t\t\t\t TYPE_UNSIGNED (inner_type));\n \t}\n \n-      if (modifier == EXPAND_INITIALIZER)\n-\treturn gen_rtx_fmt_e (unsignedp ? ZERO_EXTEND : SIGN_EXTEND, mode, op0);\n+      else if (modifier == EXPAND_INITIALIZER)\n+\top0 = gen_rtx_fmt_e (unsignedp ? ZERO_EXTEND : SIGN_EXTEND, mode, op0);\n \n-      if (target == 0)\n-\treturn\n-\t  convert_to_mode (mode, op0,\n-\t\t\t   TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))));\n+      else if (target == 0)\n+\top0 = convert_to_mode (mode, op0,\n+\t\t\t       TYPE_UNSIGNED (TREE_TYPE\n+\t\t\t\t\t      (TREE_OPERAND (exp, 0))));\n       else\n-\tconvert_move (target, op0,\n-\t\t      TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))));\n-      return target;\n+\t{\n+\t  convert_move (target, op0,\n+\t\t\tTYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))));\n+\t  op0 = target;\n+\t}\n+\n+      return REDUCE_BIT_FIELD (op0);\n \n     case VIEW_CONVERT_EXPR:\n       op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, modifier);"}]}