{"sha": "5320014a061cd33f2e36baa9ec17a62519f0f8bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMyMDAxNGEwNjFjZDMzZjJlMzZiYWE5ZWMxN2E2MjUxOWYwZjhiZA==", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2007-12-09T11:07:54Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@gcc.gnu.org", "date": "2007-12-09T11:07:54Z"}, "message": "re PR ada/34366 (Legal program rejected, various anonymous access-to-subprogram types, Ada 2005)\n\n    gcc/ada/\n\tPR ada/34366\n\t* sem_ch3.adb (Designates_T): New function.\n\t(Mentions_T): Factor reusable part of the logic into Designates_T.\n\tConsider non-access parameters and access and non-access result.\n\t(Check_Anonymous_Access_Components): Set ekind of anonymous access to\n\tE_Subprogram_Type to E_Anonymous_Access_Subprogram_Type.\n\n\t* einfo.ads: Update comment for E_Anonymous_Access_Subprogram_Type.\n\n    gcc/testsuite/\n\tPR ada/34366\n\t* gnat.dg/enclosing_record_reference.ads,\n\tgnat.dg/enclosing_record_reference.adb: New test.\n\nFrom-SVN: r130720", "tree": {"sha": "4818e0fca8062f79b9b7f51e705d3452749260e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4818e0fca8062f79b9b7f51e705d3452749260e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5320014a061cd33f2e36baa9ec17a62519f0f8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5320014a061cd33f2e36baa9ec17a62519f0f8bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5320014a061cd33f2e36baa9ec17a62519f0f8bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5320014a061cd33f2e36baa9ec17a62519f0f8bd/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28d08315ed4962e850886887085d35e135d6a34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d08315ed4962e850886887085d35e135d6a34e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d08315ed4962e850886887085d35e135d6a34e"}], "stats": {"total": 212, "additions": 149, "deletions": 63}, "files": [{"sha": "cf8b613d0ae7057149adc7ffc7bafa306c5a67bb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5320014a061cd33f2e36baa9ec17a62519f0f8bd", "patch": "@@ -1,3 +1,14 @@\n+2007-12-09  Samuel Tardieu  <sam@rfc1149.net>\n+\n+\tPR ada/34366\n+\t* sem_ch3.adb (Designates_T): New function.\n+\t(Mentions_T): Factor reusable part of the logic into Designates_T.\n+\tConsider non-access parameters and access and non-access result.\n+\t(Check_Anonymous_Access_Components): Set ekind of anonymous access to\n+\tE_Subprogram_Type to E_Anonymous_Access_Subprogram_Type.\n+\n+\t* einfo.ads: Update comment for E_Anonymous_Access_Subprogram_Type.\n+\n 2007-12-07  Ludovic Brenta  <ludovic@ludovic-brenta.org>\n \n \tPR ada/34361"}, {"sha": "a24995c169fb0c37212ce036ed0254a49ac7fc1b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5320014a061cd33f2e36baa9ec17a62519f0f8bd", "patch": "@@ -3786,7 +3786,9 @@ package Einfo is\n \n       E_Anonymous_Access_Subprogram_Type,\n       --  An anonymous access to subprogram type, created by an access to\n-      --  subprogram declaration.\n+      --  subprogram declaration, or generated for a current instance of\n+      --  a type name appearing within a component definition that has an\n+      --  anonymous access to subprogram type.\n \n       E_Access_Protected_Subprogram_Type,\n       --  An access to a protected subprogram, created by the corresponding"}, {"sha": "711023102daf9e3024cf4aa238bcae7fe83c8424", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 90, "deletions": 62, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5320014a061cd33f2e36baa9ec17a62519f0f8bd", "patch": "@@ -15983,12 +15983,15 @@ package body Sem_Ch3 is\n       --  This is done only once, and only if there is no previous partial\n       --  view of the type.\n \n+      function Designates_T (Subt : Node_Id) return Boolean;\n+      --  Check whether a node designates the enclosing record type\n+\n       function Mentions_T (Acc_Def : Node_Id) return Boolean;\n       --  Check whether an access definition includes a reference to\n-      --  the enclosing record type. The reference can be a subtype\n-      --  mark in the access definition itself, or a 'Class attribute\n-      --  reference, or recursively a reference appearing in a parameter\n-      --  type in an access_to_subprogram definition.\n+      --  the enclosing record type. The reference can be a subtype mark\n+      --  in the access definition itself, a 'Class attribute reference, or\n+      --  recursively a reference appearing in a parameter specification\n+      --  or result definition of an access_to_subprogram definition.\n \n       --------------------------------------\n       -- Build_Incomplete_Type_Declaration --\n@@ -16071,12 +16074,12 @@ package body Sem_Ch3 is\n          end if;\n       end Build_Incomplete_Type_Declaration;\n \n-      ----------------\n-      -- Mentions_T --\n-      ----------------\n+      ------------------\n+      -- Designates_T --\n+      ------------------\n+\n+      function Designates_T (Subt : Node_Id) return Boolean is\n \n-      function Mentions_T (Acc_Def : Node_Id) return Boolean is\n-         Subt : Node_Id;\n          Type_Id : constant Name_Id := Chars (Typ);\n \n          function Names_T (Nam : Node_Id) return Boolean;\n@@ -16113,75 +16116,94 @@ package body Sem_Ch3 is\n             end if;\n          end Names_T;\n \n-      --  Start of processing for Mentions_T\n+      --  Start of processing for Designates_T\n \n       begin\n-         if No (Access_To_Subprogram_Definition (Acc_Def)) then\n-            Subt := Subtype_Mark (Acc_Def);\n-\n-            if Nkind (Subt) = N_Identifier then\n-               return Chars (Subt) = Type_Id;\n+         if Nkind (Subt) = N_Identifier then\n+            return Chars (Subt) = Type_Id;\n \n             --  Reference can be through an expanded name which has not been\n             --  analyzed yet, and which designates enclosing scopes.\n \n-            elsif Nkind (Subt) = N_Selected_Component then\n-               if Names_T (Subt) then\n-                  return True;\n-\n-               --  Otherwise it must denote an entity that is already visible.\n-               --  The access definition may name a subtype of the enclosing\n-               --  type, if there is a previous incomplete declaration for it.\n-\n-               else\n-                  Find_Selected_Component (Subt);\n-                  return\n-                    Is_Entity_Name (Subt)\n-                      and then Scope (Entity (Subt)) = Current_Scope\n-                      and then (Chars (Base_Type (Entity (Subt))) = Type_Id\n-                        or else\n-                          (Is_Class_Wide_Type (Entity (Subt))\n-                            and then\n-                              Chars (Etype (Base_Type (Entity (Subt))))\n-                                = Type_Id));\n-               end if;\n+         elsif Nkind (Subt) = N_Selected_Component then\n+            if Names_T (Subt) then\n+               return True;\n \n-            --  A reference to the current type may appear as the prefix of\n-            --  a 'Class attribute.\n+            --  Otherwise it must denote an entity that is already visible.\n+            --  The access definition may name a subtype of the enclosing\n+            --  type, if there is a previous incomplete declaration for it.\n \n-            elsif Nkind (Subt) = N_Attribute_Reference\n-              and then Attribute_Name (Subt) = Name_Class\n-            then\n-               return Names_T (Prefix (Subt));\n             else\n-               return False;\n+               Find_Selected_Component (Subt);\n+               return\n+                 Is_Entity_Name (Subt)\n+                   and then Scope (Entity (Subt)) = Current_Scope\n+                   and then\n+                     (Chars (Base_Type (Entity (Subt))) = Type_Id\n+                       or else\n+                         (Is_Class_Wide_Type (Entity (Subt))\n+                           and then\n+                           Chars (Etype (Base_Type (Entity (Subt))))\n+                             = Type_Id));\n             end if;\n \n+         --  A reference to the current type may appear as the prefix of\n+         --  a 'Class attribute.\n+\n+         elsif Nkind (Subt) = N_Attribute_Reference\n+           and then Attribute_Name (Subt) = Name_Class\n+         then\n+            return Names_T (Prefix (Subt));\n+\n          else\n-            --  Component is an access_to_subprogram: examine its formals\n+            return False;\n+         end if;\n+      end Designates_T;\n \n-            declare\n-               Param_Spec : Node_Id;\n+      ----------------\n+      -- Mentions_T --\n+      ----------------\n \n-            begin\n-               Param_Spec :=\n-                 First\n-                   (Parameter_Specifications\n-                     (Access_To_Subprogram_Definition (Acc_Def)));\n-               while Present (Param_Spec) loop\n-                  if Nkind (Parameter_Type (Param_Spec))\n-                       = N_Access_Definition\n-                    and then Mentions_T (Parameter_Type (Param_Spec))\n-                  then\n-                     return True;\n-                  end if;\n+      function Mentions_T (Acc_Def : Node_Id) return Boolean is\n+         Param_Spec : Node_Id;\n \n-                  Next (Param_Spec);\n-               end loop;\n+         Acc_Subprg : constant Node_Id :=\n+           Access_To_Subprogram_Definition (Acc_Def);\n \n-               return False;\n-            end;\n+      begin\n+         if No (Acc_Subprg) then\n+            return Designates_T (Subtype_Mark (Acc_Def));\n          end if;\n+\n+         --  Component is an access_to_subprogram: examine its formals,\n+         --  and result definition in the case of an access_to_function.\n+\n+         Param_Spec := First (Parameter_Specifications (Acc_Subprg));\n+         while Present (Param_Spec) loop\n+            if Nkind (Parameter_Type (Param_Spec)) = N_Access_Definition\n+              and then Mentions_T (Parameter_Type (Param_Spec))\n+            then\n+               return True;\n+\n+            elsif Designates_T (Parameter_Type (Param_Spec)) then\n+               return True;\n+            end if;\n+\n+            Next (Param_Spec);\n+         end loop;\n+\n+         if Nkind (Acc_Subprg) = N_Access_Function_Definition then\n+            if Nkind (Result_Definition (Acc_Subprg)) =\n+                 N_Access_Definition\n+            then\n+               return Mentions_T (Result_Definition (Acc_Subprg));\n+            else\n+               return Designates_T (Result_Definition (Acc_Subprg));\n+            end if;\n+         end if;\n+\n+         return False;\n+\n       end Mentions_T;\n \n    --  Start of processing for Check_Anonymous_Access_Components\n@@ -16279,7 +16301,13 @@ package body Sem_Ch3 is\n               Make_Component_Definition (Loc,\n                 Subtype_Indication =>\n                New_Occurrence_Of (Anon_Access, Loc)));\n-            Set_Ekind (Anon_Access, E_Anonymous_Access_Type);\n+\n+            if Ekind (Designated_Type (Anon_Access)) = E_Subprogram_Type then\n+               Set_Ekind (Anon_Access, E_Anonymous_Access_Subprogram_Type);\n+            else\n+               Set_Ekind (Anon_Access, E_Anonymous_Access_Type);\n+            end if;\n+\n             Set_Is_Local_Anonymous_Access (Anon_Access);\n          end if;\n "}, {"sha": "8127e050fde5a91e7f33391b187ed281edf6cbcb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5320014a061cd33f2e36baa9ec17a62519f0f8bd", "patch": "@@ -1,3 +1,9 @@\n+2007-12-09  Samuel Tardieu  <sam@rfc1149.net>\n+\n+\tPR ada/34366\n+\t* gnat.dg/enclosing_record_reference.ads,\n+\tgnat.dg/enclosing_record_reference.adb: New test.\n+\n 2007-12-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32129"}, {"sha": "69c85bcc66e642e0d273354102c1122f6f375164", "filename": "gcc/testsuite/gnat.dg/enclosing_record_reference.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Ftestsuite%2Fgnat.dg%2Fenclosing_record_reference.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Ftestsuite%2Fgnat.dg%2Fenclosing_record_reference.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenclosing_record_reference.adb?ref=5320014a061cd33f2e36baa9ec17a62519f0f8bd", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do compile }\n+package body Enclosing_Record_Reference is\n+\n+    R: aliased T;\n+\n+    function F1 (x: integer) return T         is begin return R; end;\n+    function F2 (x: T) return integer         is begin return 0; end;\n+    function F3 (x: T) return T               is begin return R; end;\n+    function F4 (x: integer) return access T  is begin return R'access; end;\n+    function F5 (x: access T) return integer  is begin return 0; end;\n+    function F6 (x: access T) return access T is begin return R'access; end;\n+    function F7 (x: T) return access T        is begin return R'access; end;\n+    function F8 (x: access T) return T        is begin return R; end;\n+\n+begin\n+    R.F1 := F1'Access;\n+    R.F2 := F2'Access;\n+    R.F3 := F3'Access;\n+    R.F4 := F4'Access;\n+    R.F5 := F5'Access;\n+    R.F6 := F6'Access;\n+    R.F7 := F7'Access;\n+    R.F8 := F8'Access;\n+end Enclosing_Record_Reference;"}, {"sha": "6573b1d54341c535ea5301fee1add6b7052a154f", "filename": "gcc/testsuite/gnat.dg/enclosing_record_reference.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Ftestsuite%2Fgnat.dg%2Fenclosing_record_reference.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5320014a061cd33f2e36baa9ec17a62519f0f8bd/gcc%2Ftestsuite%2Fgnat.dg%2Fenclosing_record_reference.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fenclosing_record_reference.ads?ref=5320014a061cd33f2e36baa9ec17a62519f0f8bd", "patch": "@@ -0,0 +1,15 @@\n+package Enclosing_Record_Reference is\n+  pragma elaborate_body;\n+\n+    type T is record\n+        F1: access function(x: integer) return T;\n+        F2: access function(x: T) return integer;             --??\n+        F3: access function(x: T) return T;                   --??\n+        F4: access function(x: integer) return access T;      --??\n+        F5: access function(x: access T) return integer;\n+        F6: access function(x: access T) return access T;\n+        F7: access function(x: T) return access T;            --??\n+        F8: access function(x: access T) return T;\n+    end record;\n+\n+end Enclosing_Record_Reference;"}]}