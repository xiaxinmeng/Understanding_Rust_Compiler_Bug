{"sha": "16137fbb9256ef365dd498d39024eb33de1a4cd8", "node_id": "C_kwDOANBUbNoAKDE2MTM3ZmJiOTI1NmVmMzY1ZGQ0OThkMzkwMjRlYjMzZGUxYTRjZDg", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-11-19T16:44:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-11-19T16:47:57Z"}, "message": "Restore ancient -Waddress for weak symbols [PR33925].\n\nResolves:\nPR c/33925 - gcc -Waddress lost some useful warnings\nPR c/102867 - -Waddress from macro expansion in readelf.c\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/33925\n\tPR c/102867\n\t* c-common.c (decl_with_nonnull_addr_p): Call maybe_nonzero_address\n\tand improve handling tof defined symbols.\n\ngcc/c/ChangeLog:\n\n\tPR c++/33925\n\tPR c/102867\n\t* c-typeck.c (maybe_warn_for_null_address): Suppress warnings for\n\tcode resulting from macro expansion.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/33925\n\tPR c/102867\n\t* typeck.c (warn_for_null_address): Suppress warnings for code\n\tresulting from macro expansion.\n\ngcc/ChangeLog:\n\n\tPR c++/33925\n\tPR c/102867\n\t* doc/invoke.texi (-Waddress): Update.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/33925\n\tPR c/102867\n\t* g++.dg/warn/Walways-true-2.C: Adjust to avoid a valid warning.\n\t* c-c++-common/Waddress-5.c: New test.\n\t* c-c++-common/Waddress-6.c: New test.\n\t* g++.dg/warn/Waddress-7.C: New test.\n\t* gcc.dg/Walways-true-2.c: Adjust to avoid a valid warning.\n\t* gcc.dg/weak/weak-3.c: Expect a warning.", "tree": {"sha": "27fd0ecb6e5cdf0b6d36a242539bfbbcd4a73df1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27fd0ecb6e5cdf0b6d36a242539bfbbcd4a73df1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16137fbb9256ef365dd498d39024eb33de1a4cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16137fbb9256ef365dd498d39024eb33de1a4cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16137fbb9256ef365dd498d39024eb33de1a4cd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16137fbb9256ef365dd498d39024eb33de1a4cd8/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee448a523d377f9ed882dac806d2f5001bfa2432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee448a523d377f9ed882dac806d2f5001bfa2432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee448a523d377f9ed882dac806d2f5001bfa2432"}], "stats": {"total": 299, "additions": 288, "deletions": 11}, "files": [{"sha": "a25d59fa77b031b805da10ee87c3aa682603e31f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -3413,16 +3413,43 @@ c_wrap_maybe_const (tree expr, bool non_const)\n \n /* Return whether EXPR is a declaration whose address can never be NULL.\n    The address of the first struct member could be NULL only if it were\n-   accessed through a NULL pointer, and such an access would be invalid.  */\n+   accessed through a NULL pointer, and such an access would be invalid.\n+   The address of a weak symbol may be null unless it has a definition.  */\n \n bool\n decl_with_nonnull_addr_p (const_tree expr)\n {\n-  return (DECL_P (expr)\n-\t  && (TREE_CODE (expr) == FIELD_DECL\n-\t      || TREE_CODE (expr) == PARM_DECL\n-\t      || TREE_CODE (expr) == LABEL_DECL\n-\t      || !DECL_WEAK (expr)));\n+  if (!DECL_P (expr))\n+    return false;\n+\n+  if (TREE_CODE (expr) == FIELD_DECL\n+      || TREE_CODE (expr) == PARM_DECL\n+      || TREE_CODE (expr) == LABEL_DECL)\n+    return true;\n+\n+  if (!VAR_OR_FUNCTION_DECL_P (expr))\n+    return false;\n+\n+  if (!DECL_WEAK (expr))\n+    /* Ordinary (non-weak) symbols have nonnull addresses.  */\n+    return true;\n+\n+  if (DECL_INITIAL (expr) && DECL_INITIAL (expr) != error_mark_node)\n+    /* Initialized weak symbols have nonnull addresses.  */\n+    return true;\n+\n+  if (DECL_EXTERNAL (expr) || !TREE_STATIC (expr))\n+    /* Uninitialized extern weak symbols and weak symbols with no\n+       allocated storage might have a null address.  */\n+    return false;\n+\n+  tree attribs = DECL_ATTRIBUTES (expr);\n+  if (lookup_attribute (\"weakref\", attribs))\n+    /* Weakref symbols might have a null address unless their referent\n+       is known not to.  Don't bother following weakref targets here.  */\n+    return false;\n+\n+  return true;\n }\n \n /* Prepare expr to be an argument of a TRUTH_NOT_EXPR,"}, {"sha": "50d701047661c95ac5187da06ad62c37af8e277b", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -11588,7 +11588,10 @@ build_vec_cmp (tree_code code, tree type,\n static void\n maybe_warn_for_null_address (location_t loc, tree op, tree_code code)\n {\n-  if (!warn_address || warning_suppressed_p (op, OPT_Waddress))\n+  /* Prevent warnings issued for macro expansion.  */\n+  if (!warn_address\n+      || warning_suppressed_p (op, OPT_Waddress)\n+      || from_macro_expansion_at (loc))\n     return;\n \n   if (TREE_CODE (op) == NOP_EXPR)"}, {"sha": "58919aaf13e963f1fa875574fbfc6eb6b6bfdb07", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -4594,9 +4594,11 @@ build_vec_cmp (tree_code code, tree type,\n static void\n warn_for_null_address (location_t location, tree op, tsubst_flags_t complain)\n {\n+  /* Prevent warnings issued for macro expansion.  */\n   if (!warn_address\n       || (complain & tf_warning) == 0\n       || c_inhibit_evaluation_warnings != 0\n+      || from_macro_expansion_at (location)\n       || warning_suppressed_p (op, OPT_Waddress))\n     return;\n "}, {"sha": "11ef7970378739c29d36234d2ddce379e2a62263", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -8689,6 +8689,8 @@ suppressed by casting the pointer operand to an integer type such\n as @code{inptr_t} or @code{uinptr_t}.\n Comparisons against string literals result in unspecified behavior\n and are not portable, and suggest the intent was to call @code{strcmp}.\n+The warning is suppressed if the suspicious expression is the result\n+of macro expansion.\n @option{-Waddress} warning is enabled by @option{-Wall}.\n \n @item -Wno-address-of-packed-member"}, {"sha": "5d63c7dae7c9404152661b07452137e6aadd9615", "filename": "gcc/testsuite/c-c++-common/Waddress-5.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-5.c?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -0,0 +1,133 @@\n+/* PR c/33925 - missing -Waddress with the address of an inline function\n+   { dg-do compile }\n+   { dg-options \"-Wall\" }\n+   { dg-require-weak \"\" } */\n+\n+extern inline int eifn (void);\n+extern inline int eifn_def (void) { return 0; }\n+\n+static inline int sifn (void);\n+static inline int sifn_def (void) { return 0; }\n+\n+inline int ifn (void);\n+inline int ifn_def (void) { return 0; }\n+\n+extern __attribute__ ((weak)) int ewfn (void);\n+extern __attribute__ ((weak)) int ewfn_def (void) { return 0;  }\n+\n+__attribute__ ((weak)) int wfn (void);\n+__attribute__ ((weak)) int wfn_def (void) { return 0; }\n+\n+static __attribute__((weakref (\"ewfn\"))) int swrfn (void);\n+\n+void test_function_eqz (int *p)\n+{\n+  *p++ = eifn == 0;                     // { dg-warning \"-Waddress\" }\n+  *p++ = eifn_def == 0;                 // { dg-warning \"-Waddress\" }\n+  *p++ = sifn == 0;                     // { dg-warning \"-Waddress\" }\n+  *p++ = sifn_def == 0;                 // { dg-warning \"-Waddress\" }\n+  *p++ = ifn == 0;                      // { dg-warning \"-Waddress\" }\n+  *p++ = ifn_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = ewfn == 0;\n+  *p++ = ewfn_def == 0;                 // { dg-warning \"-Waddress\" }\n+  *p++ = wfn == 0;\n+  *p++ = wfn_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = swrfn == 0;\n+}\n+\n+\n+int test_function_if (int i)\n+{\n+  if (eifn)                             // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (eifn_def)                         // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (sifn)                             // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (sifn_def)                         // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (ifn)                              // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (ifn_def)                          // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (ewfn)\n+    i++;\n+  if (ewfn_def)                         // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (wfn)\n+    i++;\n+  if(wfn_def)                           // { dg-warning \"-Waddress\" }\n+    i++;\n+  if (swrfn)\n+    i++;\n+  return i;\n+}\n+\n+\n+extern int ei;\n+extern int ei_def = 1;\n+\n+static int si;\n+static int si_def = 1;\n+\n+int i;\n+int i_def = 1;\n+\n+extern __attribute__ ((weak)) int ewi;   // declaration (may be null)\n+extern __attribute__ ((weak)) int ewi_def = 1;\n+\n+__attribute__ ((weak)) int wi;          // definition (cannot be bull)\n+__attribute__ ((weak)) int wi_def = 1;\n+\n+static __attribute__((weakref (\"ewi\"))) int swri;\n+\n+void test_scalar (int *p)\n+{\n+  *p++ = &ei == 0;                      // { dg-warning \"-Waddress\" }\n+  *p++ = &ei_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = &si == 0;                      // { dg-warning \"-Waddress\" }\n+  *p++ = &si_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = &i == 0;                       // { dg-warning \"-Waddress\" }\n+  *p++ = &i_def == 0;                   // { dg-warning \"-Waddress\" }\n+  *p++ = &ewi == 0;\n+  *p++ = &ewi_def == 0;                 // { dg-warning \"-Waddress\" }\n+  *p++ = &wi == 0;                      // { dg-warning \"-Waddress\" }\n+  *p++ = &wi_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = &swri == 0;\n+}\n+\n+\n+extern int eia[];\n+extern int eia_def[] = { 1 };\n+\n+static int sia[1];\n+static int sia_def[1] = { 1 };\n+\n+int ia[1];\n+int ia_def[] = { 1 };\n+\n+extern __attribute__ ((weak)) int ewia[];\n+extern __attribute__ ((weak)) int ewia_def[] = { 1 };\n+\n+__attribute__ ((weak)) int wia[1];      // definition (cannot be null)\n+__attribute__ ((weak)) int wia_def[] = { 1 };\n+\n+static __attribute__((weakref (\"ewia\"))) int swria[1];\n+\n+void test_array (int *p)\n+{\n+  *p++ = eia == 0;                      // { dg-warning \"-Waddress\" }\n+  *p++ = eia_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = sia == 0;                      // { dg-warning \"-Waddress\" }\n+  *p++ = sia_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = ia == 0;                       // { dg-warning \"-Waddress\" }\n+  *p++ = ia_def == 0;                   // { dg-warning \"-Waddress\" }\n+  *p++ = ewia == 0;\n+  *p++ = ewia_def == 0;                 // { dg-warning \"-Waddress\" }\n+  *p++ = wia == 0;                      // { dg-warning \"-Waddress\" }\n+  *p++ = wia_def == 0;                  // { dg-warning \"-Waddress\" }\n+  *p++ = swria == 0;\n+}\n+\n+/* { dg-prune-output \"never defined\" }\n+   { dg-prune-output \"initialized and declared 'extern'\" } */"}, {"sha": "e66e6e4a0b0b731835a5116725d7b1869de49329", "filename": "gcc/testsuite/c-c++-common/Waddress-6.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-6.c?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -0,0 +1,32 @@\n+/* PR c/102867 - -Waddress from macro expansion in readelf.c\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+#define F(x) ((&x) != 0)\n+\n+int warn_nomacro (int *p, int i)\n+{\n+  return &p[i] != 0;          // { dg-warning \"-Waddress\" }\n+}\n+\n+int nowarn_macro_expansion (int *p, int i)\n+{\n+  // Verify that -Waddress isn't issued for code from macro expansion.\n+  return F (p[i]);            // { dg-bogus \"-Waddress\" }\n+}\n+\n+#define G(x, i) ((&x) + i)\n+\n+int warn_function_macro_expansion (int *p, int i)\n+{\n+  /* Verify that -Waddress is issued for code involving macro expansion\n+     where the comparison takes place outside the macro.  */\n+  return G (*p, i) != 0;      // { dg-warning \"-Waddress\" }\n+}\n+\n+#define malloc __builtin_malloc\n+\n+int warn_object_macro_expansion (int *p, int i)\n+{\n+  return malloc != 0;         // { dg-warning \"-Waddress\" }\n+}"}, {"sha": "efdafa50cd19b1be2ae86e23a0c386569f42d5a9", "filename": "gcc/testsuite/g++.dg/warn/Waddress-7.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-7.C?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -0,0 +1,76 @@\n+/* PR c/33925 - missing -Waddress with the address of an inline function\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+struct A\n+{\n+  int mf ();\n+  int mf_def () { return 0; }\n+\n+  static int smf ();\n+  static int smf_def () { return 0; }\n+\n+  int mi;\n+  static int smi;\n+  static int smi_def;\n+\n+  __attribute__ ((weak)) static int wsmi;\n+  __attribute__ ((weak)) static int wsmi_def;\n+\n+  int mia[];\n+  static int smia[];\n+  static int smia_def[];\n+\n+  __attribute__ ((weak)) static int wsmia[];\n+  __attribute__ ((weak)) static int wsmia_def[];\n+\n+  void test_waddress (bool*);\n+};\n+\n+\n+/* __attribute__ ((weak)) static */ int A::smi_def = 0;\n+/* __attribute__ ((weak)) static */ int A::smia_def[] = { 0 };\n+\n+/* __attribute__ ((weak)) static */ int A::wsmi_def = 0;\n+/* __attribute__ ((weak)) static */ int A::wsmia_def[] = { 0 };\n+\n+\n+\n+void A::test_waddress (bool *p)\n+{\n+  if (mf)                               // { dg-error \"cannot convert\" }\n+    p++;\n+  if (mf_def)                           // { dg-error \"cannot convert\" }\n+    p++;\n+\n+  if (smf)                              // { dg-warning \"-Waddress\" }\n+    p++;\n+  if (smf_def)                          // { dg-warning \"-Waddress\" }\n+    p++;\n+\n+  if (&mi)                              // { dg-warning \"-Waddress\" }\n+    p++;\n+  if (&smi)                             // { dg-warning \"-Waddress\" }\n+    p++;\n+  if (&smi_def)                         // { dg-warning \"-Waddress\" }\n+    p++;\n+\n+  if (&wsmi)\n+    p++;\n+\n+  if (&wsmi_def)                        // { dg-warning \"-Waddress\" }\n+    p++;\n+\n+  if (mia)                              // { dg-warning \"-Waddress\" }\n+    p++;\n+  if (smia)                             // { dg-warning \"-Waddress\" }\n+    p++;\n+  if (smia_def)                         // { dg-warning \"-Waddress\" }\n+    p++;\n+\n+  if (wsmia)\n+    p++;\n+\n+  if (wsmia_def)                        // { dg-warning \"-Waddress\" }\n+    p++;\n+}"}, {"sha": "e951e95b33636e42857ba28dfa06a41e01984547", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -9,7 +9,7 @@\n \n extern int foo (int) __attribute__ ((weak));\n \n-int i __attribute__ ((weak));\n+extern int i __attribute__ ((weak));\n \n void\n bar (int a)"}, {"sha": "ae3262b6876b1fedb9f7714f6bcc6c97bb3fb2a8", "filename": "gcc/testsuite/gcc.dg/Walways-true-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalways-true-2.c?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -9,7 +9,7 @@\n \n extern int foo (int) __attribute__ ((weak));\n \n-int i __attribute__ ((weak));\n+extern int i __attribute__ ((weak));\n \n void\n bar (int a)"}, {"sha": "5fdf029cf35772d916acf5d74d4a5c88511e59bc", "filename": "gcc/testsuite/gcc.dg/weak/weak-3.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16137fbb9256ef365dd498d39024eb33de1a4cd8/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-3.c?ref=16137fbb9256ef365dd498d39024eb33de1a4cd8", "patch": "@@ -55,7 +55,7 @@ void * foo1e (void)\n extern void * ffoo1f (void);    \n void * foo1f (void)\n {\n-  if (ffoo1f) /* { dg-warning \"\" } */\n+  if (ffoo1f) /* { dg-warning \"-Waddress\" } */\n     ffoo1f ();\n   return 0;\n }\n@@ -68,7 +68,9 @@ void * ffoox1g (void) { return (void *)0; }\n extern void * ffoo1g (void)  __attribute__((weak, alias (\"ffoox1g\")));\n void * foo1g (void)\n {\n-  if (ffoo1g)\n+  /* ffoo1g is a weak alias for a symbol defined in this file, expect\n+     a -Waddress for the test (which is folded to true).  */\n+  if (ffoo1g)       // { dg-warning \"-Waddress\" }\n     ffoo1g ();\n   return 0;\n }"}]}