{"sha": "3f8e2835ae414fe8f6895ed7cfe7171cea506c70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4ZTI4MzVhZTQxNGZlOGY2ODk1ZWQ3Y2ZlNzE3MWNlYTUwNmM3MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-04-28T21:27:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-04-28T21:27:17Z"}, "message": "re PR c++/65896 (Erroneous uninitialized variable access error in constexpr function with temporary variables)\n\n\tPR c++/65896\n\t* constexpr.c (cxx_eval_store_expression): Don't try to actually\n\tstore an empty class.\n\nFrom-SVN: r222549", "tree": {"sha": "f164f28394dd9a352b0fea7f1bd3117604375ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f164f28394dd9a352b0fea7f1bd3117604375ebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8e2835ae414fe8f6895ed7cfe7171cea506c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8e2835ae414fe8f6895ed7cfe7171cea506c70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8e2835ae414fe8f6895ed7cfe7171cea506c70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8e2835ae414fe8f6895ed7cfe7171cea506c70/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db6113067cc3a35141c9a341aa7ffb60786e3e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6113067cc3a35141c9a341aa7ffb60786e3e5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6113067cc3a35141c9a341aa7ffb60786e3e5b"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "a2d2a7c26bfda7166ecf2b9f7ed3bb201f02c60c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8e2835ae414fe8f6895ed7cfe7171cea506c70/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8e2835ae414fe8f6895ed7cfe7171cea506c70/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f8e2835ae414fe8f6895ed7cfe7171cea506c70", "patch": "@@ -1,5 +1,9 @@\n 2015-04-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/65896\n+\t* constexpr.c (cxx_eval_store_expression): Don't try to actually\n+\tstore an empty class.\n+\n \tPR c++/65656\n \t* constexpr.c (cxx_eval_builtin_function_call): Fix\n \t__builtin_constant_p."}, {"sha": "9ebb6406878e0863ff1607370ef457ce2f606f96", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8e2835ae414fe8f6895ed7cfe7171cea506c70/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8e2835ae414fe8f6895ed7cfe7171cea506c70/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3f8e2835ae414fe8f6895ed7cfe7171cea506c70", "patch": "@@ -2580,12 +2580,25 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \n   /* First we figure out where we're storing to.  */\n   tree target = TREE_OPERAND (t, 0);\n+  tree type = TREE_TYPE (target);\n   target = cxx_eval_constant_expression (ctx, target,\n \t\t\t\t\t true,\n \t\t\t\t\t non_constant_p, overflow_p);\n   if (*non_constant_p)\n     return t;\n \n+  if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (target), type))\n+    {\n+      /* For initialization of an empty base, the original target will be\n+         *(base*)this, which the above evaluation resolves to the object\n+\t argument, which has the derived type rather than the base type.  In\n+\t this situation, just evaluate the initializer and return, since\n+\t there's no actual data to store.  */\n+      gcc_assert (is_empty_class (type));\n+      return cxx_eval_constant_expression (ctx, init, false,\n+\t\t\t\t\t   non_constant_p, overflow_p);\n+    }\n+\n   /* And then find the underlying variable.  */\n   vec<tree,va_gc> *refs = make_tree_vector();\n   tree object = NULL_TREE;\n@@ -2622,7 +2635,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       *non_constant_p = true;\n       return t;\n     }\n-  tree type = TREE_TYPE (object);\n+  type = TREE_TYPE (object);\n   while (!refs->is_empty())\n     {\n       if (*valp == NULL_TREE)"}, {"sha": "26b4863448989e34e7263f2bbdaf691ab8500a1d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-empty9.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8e2835ae414fe8f6895ed7cfe7171cea506c70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8e2835ae414fe8f6895ed7cfe7171cea506c70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty9.C?ref=3f8e2835ae414fe8f6895ed7cfe7171cea506c70", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/65896\n+// { dg-do compile { target c++11 } }\n+\n+struct base {};\n+\n+struct derived :  base {\n+\tconstexpr derived():\n+\t\tbase{},\n+\t\tm_value(0) {\n+\t}\n+\tint m_value;\n+};\n+\n+constexpr int by_ref(derived && value) {\n+\treturn value.m_value;\n+}\n+\n+constexpr int value = by_ref(derived{});"}]}