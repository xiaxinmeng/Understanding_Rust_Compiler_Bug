{"sha": "07bd2703047d222ed7ff189d86350e73c5cc2c9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiZDI3MDMwNDdkMjIyZWQ3ZmYxODlkODYzNTBlNzNjNWNjMmM5ZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-07-15T15:26:45Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-07-15T15:27:17Z"}, "message": "Change the type of return value of profile_count::value to uint64_t\n\nThe field in which profile_count holds the count has 61 bits but the\ngetter method only returns it as a 32 bit number.  The getter is (and\nshould be) only used for dumping but even dumps are better when they\ndo not lie.\n\ngcc/ChangeLog:\n\n2021-07-13  Martin Jambor  <mjambor@suse.cz>\n\n\t* profile-count.h (profile_count::value): Change the return type to\n\tuint64_t.\n\t* gimple-pretty-print.c (dump_gimple_bb_header): Adjust print\n\tstatement.\n\t* tree-cfg.c (dump_function_to_file): Likewise.", "tree": {"sha": "1ccd08c4ccd264413e71c876b714ab1b90210400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ccd08c4ccd264413e71c876b714ab1b90210400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07bd2703047d222ed7ff189d86350e73c5cc2c9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmDwU9UACgkQv2PBvD+k\nNUB9SA//RwcAh/p3yxLPPS1d+6DN8CnZdLXoZ8saVquAobukbqGWILpA4IrT1CQT\nFbFAtsv+k05bwQFRXcYetqxJ6P6idAkOhGO++epfsIVRmG/f8VfrCfkW75tBSIjV\n3f1dz49FnitiY8dDqB8ajmTieJWtkyl3Tsy/6I2PTm3lygnepRziNZLL8YavymxE\nGuh9Pgno58mX351Za0NnPcwwiDaZdTxb/KSlFWPDvg4ZAj4GnJyN39h0dD28k47d\nqp2WKwUaAWzBd3lQ7lPVoYtxKO4Ii1N1sk4APsPMIrLpRommZZepUzgRJTxA0Z4/\nxH4dTnvTcLGqWmOx/4g+KsOpxI0xTBMhs+xSFUlwddB2S64f/0M7F7drjvlMwq4w\nbcX8capRqX+xUjyQ0/kO26StczEk8ocZw4JfalvtTa7aRySz/VFEAFbgHPFPoXkM\nxhRv0/Mr+e1xcGU3DDNf2m5fpL3ESWiagh1O9v0Xs0SpwdD8RWMhth7n5xX0ooHz\nVQ6nX3HwdBs8AcUY6hZCMSDYlRYRjJ8+v9NE1POxMlVYW7NYE5/GplWwRGykPCpB\njOzeUQukhbh70RjjEnPs5vi5EwFGF7UZb8yOKZibo3oi/rCJwBvGZhmwIeL6oU5O\ni2xTA7FU+bbVVwIKQkVw0DtwJppiAgjORIzpVTco+pS/0QfrdCY=\n=EjAX\n-----END PGP SIGNATURE-----", "payload": "tree 1ccd08c4ccd264413e71c876b714ab1b90210400\nparent 17855eed7fc76b2cee7fbbc26f84d3c8b99be13c\nauthor Martin Jambor <mjambor@suse.cz> 1626362805 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1626362837 +0200\n\nChange the type of return value of profile_count::value to uint64_t\n\nThe field in which profile_count holds the count has 61 bits but the\ngetter method only returns it as a 32 bit number.  The getter is (and\nshould be) only used for dumping but even dumps are better when they\ndo not lie.\n\ngcc/ChangeLog:\n\n2021-07-13  Martin Jambor  <mjambor@suse.cz>\n\n\t* profile-count.h (profile_count::value): Change the return type to\n\tuint64_t.\n\t* gimple-pretty-print.c (dump_gimple_bb_header): Adjust print\n\tstatement.\n\t* tree-cfg.c (dump_function_to_file): Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd2703047d222ed7ff189d86350e73c5cc2c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07bd2703047d222ed7ff189d86350e73c5cc2c9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bd2703047d222ed7ff189d86350e73c5cc2c9e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "d6e63d6e57ff913471a4b070311ac8937d4526fe", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bd2703047d222ed7ff189d86350e73c5cc2c9e/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bd2703047d222ed7ff189d86350e73c5cc2c9e/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=07bd2703047d222ed7ff189d86350e73c5cc2c9e", "patch": "@@ -2831,7 +2831,7 @@ dump_gimple_bb_header (FILE *outf, basic_block bb, int indent,\n \t  if (bb->loop_father->header == bb)\n \t    fprintf (outf, \",loop_header(%d)\", bb->loop_father->num);\n \t  if (bb->count.initialized_p ())\n-\t    fprintf (outf, \",%s(%d)\",\n+\t    fprintf (outf, \",%s(%\" PRIu64 \")\",\n \t\t     profile_quality_as_string (bb->count.quality ()),\n \t\t     bb->count.value ());\n \t  fprintf (outf, \"):\\n\");"}, {"sha": "c7a45ac5ee39a982818f0c5318771c182d6373ca", "filename": "gcc/profile-count.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bd2703047d222ed7ff189d86350e73c5cc2c9e/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bd2703047d222ed7ff189d86350e73c5cc2c9e/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=07bd2703047d222ed7ff189d86350e73c5cc2c9e", "patch": "@@ -804,7 +804,7 @@ struct GTY(()) profile_count\n     }\n \n   /* Get the value of the count.  */\n-  uint32_t value () const { return m_val; }\n+  uint64_t value () const { return m_val; }\n \n   /* Get the quality of the count.  */\n   enum profile_quality quality () const { return m_quality; }"}, {"sha": "c8b0f7b33e129cb53c96680d830757cc454596a6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07bd2703047d222ed7ff189d86350e73c5cc2c9e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07bd2703047d222ed7ff189d86350e73c5cc2c9e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=07bd2703047d222ed7ff189d86350e73c5cc2c9e", "patch": "@@ -8086,7 +8086,7 @@ dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n \t{\n \t  basic_block bb = ENTRY_BLOCK_PTR_FOR_FN (cfun);\n \t  if (bb->count.initialized_p ())\n-\t    fprintf (file, \",%s(%d)\",\n+\t    fprintf (file, \",%s(%\" PRIu64 \")\",\n \t\t     profile_quality_as_string (bb->count.quality ()),\n \t\t     bb->count.value ());\n \t  fprintf (file, \")\\n%s (\", function_name (fun));"}]}