{"sha": "5e620b36cd34b85b0e28c34160245d84bc5acd68", "node_id": "C_kwDOANBUbNoAKDVlNjIwYjM2Y2QzNGI4NWIwZTI4YzM0MTYwMjQ1ZDg0YmM1YWNkNjg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T07:49:16Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T06:41:14Z"}, "message": "RISC-V: allow vx instruction use \"zero\" as scalar register.\n\n  li a5,0\n  vdiv.vx v0,v1,a5 =======> vdiv.vx v0,v1,zero\n\ngcc/ChangeLog:\n\n\t* config/riscv/vector.md: use \"zero\" reg.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-121.c: New test.", "tree": {"sha": "21367addfd6d6325374266c1100e2380f86244eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21367addfd6d6325374266c1100e2380f86244eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e620b36cd34b85b0e28c34160245d84bc5acd68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e620b36cd34b85b0e28c34160245d84bc5acd68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e620b36cd34b85b0e28c34160245d84bc5acd68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e620b36cd34b85b0e28c34160245d84bc5acd68/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "316c83b158dbae2559f130fb7e44718c99941266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316c83b158dbae2559f130fb7e44718c99941266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316c83b158dbae2559f130fb7e44718c99941266"}], "stats": {"total": 112, "additions": 88, "deletions": 24}, "files": [{"sha": "f9c39adb5da78de0c16c0efea74a216c6d553ff7", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e620b36cd34b85b0e28c34160245d84bc5acd68/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e620b36cd34b85b0e28c34160245d84bc5acd68/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=5e620b36cd34b85b0e28c34160245d84bc5acd68", "patch": "@@ -1247,11 +1247,11 @@\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (any_commutative_binop:VI_QHS\n \t    (vec_duplicate:VI_QHS\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t      (match_operand:<VEL> 4 \"reg_or_0_operand\"  \" rJ, rJ\"))\n \t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\"))\n \t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  \"v<insn>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1269,10 +1269,10 @@\n \t  (any_non_commutative_binop:VI_QHS\n \t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\")\n \t    (vec_duplicate:VI_QHS\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t      (match_operand:<VEL> 4 \"reg_or_0_operand\"  \" rJ, rJ\")))\n \t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  \"v<insn>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1324,8 +1324,11 @@\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n \tif (riscv_vector::simm32_p (operands[4]))\n-\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n-\t\tforce_reg (Pmode, operands[4]));\n+\t  {\n+\t    if (!rtx_equal_p (operands[4], const0_rtx))\n+\t      operands[4] = force_reg (Pmode, operands[4]);\n+\t    operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode, operands[4]);\n+\t  }\n \telse\n \t  {\n \t    if (CONST_INT_P (operands[4]))\n@@ -1356,11 +1359,11 @@\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (any_commutative_binop:VI_D\n \t    (vec_duplicate:VI_D\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t      (match_operand:<VEL> 4 \"reg_or_0_operand\"  \" rJ, rJ\"))\n \t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\"))\n \t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  \"v<insn>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1378,11 +1381,11 @@\n \t  (any_commutative_binop:VI_D\n \t    (vec_duplicate:VI_D\n \t      (sign_extend:<VEL>\n-\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n+\t        (match_operand:<VSUBEL> 4 \"reg_or_0_operand\" \" rJ, rJ\")))\n \t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\"))\n \t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  \"v<insn>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1411,8 +1414,11 @@\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n \tif (riscv_vector::simm32_p (operands[4]))\n-\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n-\t\tforce_reg (Pmode, operands[4]));\n+\t  {\n+\t    if (!rtx_equal_p (operands[4], const0_rtx))\n+\t      operands[4] = force_reg (Pmode, operands[4]);\n+\t    operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode, operands[4]);\n+\t  }\n \telse\n \t  {\n \t    if (CONST_INT_P (operands[4]))\n@@ -1444,10 +1450,10 @@\n \t  (any_non_commutative_binop:VI_D\n \t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\")\n \t    (vec_duplicate:VI_D\n-\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t      (match_operand:<VEL> 4 \"reg_or_0_operand\"  \" rJ, rJ\")))\n \t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  \"v<insn>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1466,10 +1472,10 @@\n \t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\")\n \t    (vec_duplicate:VI_D\n \t      (sign_extend:<VEL>\n-\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\"))))\n+\t        (match_operand:<VSUBEL> 4 \"reg_or_0_operand\" \" rJ, rJ\"))))\n \t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  \"v<insn>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1836,11 +1842,11 @@\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (unspec:VI_QHS\n \t    [(vec_duplicate:VI_QHS\n-\t       (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t       (match_operand:<VEL> 4 \"reg_or_0_operand\"  \" rJ, rJ\"))\n \t     (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\")] VMULH)\n \t  (match_operand:VI_QHS 2 \"vector_merge_operand\"  \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"vmulh<v_su>.vx\\t%0,%3,%4%p1\"\n+  \"vmulh<v_su>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"vimul\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1867,8 +1873,11 @@\n \trtx v = gen_reg_rtx (<MODE>mode);\n \n \tif (riscv_vector::simm32_p (operands[4]))\n-\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n-\t\tforce_reg (Pmode, operands[4]));\n+\t  {\n+\t    if (!rtx_equal_p (operands[4], const0_rtx))\n+\t      operands[4] = force_reg (Pmode, operands[4]);\n+\t    operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode, operands[4]);\n+\t  }\n \telse\n \t  {\n \t    if (CONST_INT_P (operands[4]))\n@@ -1899,11 +1908,11 @@\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (unspec:VFULLI_D\n \t    [(vec_duplicate:VFULLI_D\n-\t       (match_operand:<VEL> 4 \"register_operand\"   \"  r,  r\"))\n+\t       (match_operand:<VEL> 4 \"register_operand\"   \" rJ, rJ\"))\n \t     (match_operand:VFULLI_D 3 \"register_operand\"  \" vr, vr\")] VMULH)\n \t  (match_operand:VFULLI_D 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"vmulh<v_su>.vx\\t%0,%3,%4%p1\"\n+  \"vmulh<v_su>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"vimul\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1921,11 +1930,11 @@\n \t  (unspec:VFULLI_D\n \t    [(vec_duplicate:VFULLI_D\n \t       (sign_extend:<VEL>\n-\t         (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n+\t         (match_operand:<VSUBEL> 4 \"reg_or_0_operand\" \" rJ, rJ\")))\n \t     (match_operand:VFULLI_D 3 \"register_operand\"     \" vr, vr\")] VMULH)\n \t  (match_operand:VFULLI_D 2 \"vector_merge_operand\"    \"0vu,0vu\")))]\n   \"TARGET_VECTOR\"\n-  \"vmulh<v_su>.vx\\t%0,%3,%4%p1\"\n+  \"vmulh<v_su>.vx\\t%0,%3,%z4%p1\"\n   [(set_attr \"type\" \"vimul\")\n    (set_attr \"mode\" \"<MODE>\")])\n "}, {"sha": "4d2de91bc1485a514eb13255a6ec387cabbfe058", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-121.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e620b36cd34b85b0e28c34160245d84bc5acd68/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e620b36cd34b85b0e28c34160245d84bc5acd68/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-121.c?ref=5e620b36cd34b85b0e28c34160245d84bc5acd68", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vmulh_vx_i32m1 (v2, 0, 4);\n+    __riscv_vse32_v_i32m1 (out, v3, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in, 4);\n+    vint64m1_t v3 = __riscv_vmulh_vx_i64m1 (v2, 0, 4);\n+    __riscv_vse64_v_i64m1 (out, v3, 4);\n+}\n+\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vdiv_vx_i32m1 (v2, 0, 4);\n+    __riscv_vse32_v_i32m1 (out, v3, 4);\n+}\n+\n+void f4 (void * in, void *out, int32_t x)\n+{\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in, 4);\n+    vint64m1_t v3 = __riscv_vdiv_vx_i64m1 (v2, 0, 4);\n+    __riscv_vse64_v_i64m1 (out, v3, 4);\n+}\n+\n+void f5 (void * in, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+    vint32m1_t v3 = __riscv_vrem_vx_i32m1 (v2, 0, 4);\n+    __riscv_vse32_v_i32m1 (out, v3, 4);\n+}\n+\n+void f6 (void * in, void *out, int32_t x)\n+{\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in, 4);\n+    vint64m1_t v3 = __riscv_vrem_vx_i64m1 (v2, 0, 4);\n+    __riscv_vse64_v_i64m1 (out, v3, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmulh\\.vx\\s+v[0-9]+,\\s*v[0-9]+,zero} 2 } } */\n+/* { dg-final { scan-assembler-times {vdiv\\.vx\\s+v[0-9]+,\\s*v[0-9]+,zero} 2 } } */\n+/* { dg-final { scan-assembler-times {vrem\\.vx\\s+v[0-9]+,\\s*v[0-9]+,zero} 2 } } */"}]}