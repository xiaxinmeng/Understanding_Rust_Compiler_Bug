{"sha": "2e23972ecbc374ca535d8fd40d18550e95bdd69d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyMzk3MmVjYmMzNzRjYTUzNWQ4ZmQ0MGQxODU1MGU5NWJkZDY5ZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-10-17T18:09:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-10-17T18:09:25Z"}, "message": "re PR fortran/41608 ([OOP] ICE with CLASS and invalid code)\n\n2009-10-17  Janus Weil  <janus@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41608\n\t* decl.c (gfc_match_data_decl): Add BT_CLASS for undefined type\n\tand empty type errors.\n\t* parse.c (gfc_build_block_ns): Only set recursive if parent ns\n\thas a proc_name.\n\n\tPR fortran/41629\n\tPR fortran/41618\n\tPR fortran/41587\n\t* gfortran.h : Add class_ok bitfield to symbol_attr.\n\t* decl.c (build_sym): Set attr.class_ok if dummy, pointer or\n\tallocatable.\n\t(build_struct): Use gfc_try 't' to carry errors past the call\n\tto encapsulate_class_symbol.\n\t(attr_decl1): For a CLASS object, apply the new attribute to\n\tthe data component.\n\t* match.c (gfc_match_select_type): Set attr.class_ok for an\n\tassigned selector.\n\t* resolve.c (resolve_fl_variable_derived): Check a CLASS object\n\tis dummy, pointer or allocatable by testing the class_ok and\n\tthe use_assoc attribute.\n\n2009-10-17  Janus Weil  <janus@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41629\n\t* gfortran.dg/class_6.f90: New test.\n\n\tPR fortran/41608\n\tPR fortran/41587\n\t* gfortran.dg/class_7.f90: New test.\n\n\tPR fortran/41618\n\t* gfortran.dg/class_8.f90: New test.\n\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r152955", "tree": {"sha": "03b99fc40494c871043fba245074cae8252f0e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b99fc40494c871043fba245074cae8252f0e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e23972ecbc374ca535d8fd40d18550e95bdd69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e23972ecbc374ca535d8fd40d18550e95bdd69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e23972ecbc374ca535d8fd40d18550e95bdd69d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e23972ecbc374ca535d8fd40d18550e95bdd69d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ee41d433d6d0fe65a719a5bb704de31043b2b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee41d433d6d0fe65a719a5bb704de31043b2b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee41d433d6d0fe65a719a5bb704de31043b2b78"}], "stats": {"total": 168, "additions": 147, "deletions": 21}, "files": [{"sha": "24e83e645a3377af6a9866e4b4919a3e2564a946", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -1,3 +1,28 @@\n+2009-10-17  Janus Weil  <janus@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41608\n+\t* decl.c (gfc_match_data_decl): Add BT_CLASS for undefined type\n+\tand empty type errors.\n+\t* parse.c (gfc_build_block_ns): Only set recursive if parent ns\n+\thas a proc_name.\n+\n+\tPR fortran/41629\n+\tPR fortran/41618\n+\tPR fortran/41587\n+\t* gfortran.h : Add class_ok bitfield to symbol_attr.\n+\t* decl.c (build_sym): Set attr.class_ok if dummy, pointer or\n+\tallocatable.\n+\t(build_struct): Use gfc_try 't' to carry errors past the call\n+\tto encapsulate_class_symbol.\n+\t(attr_decl1): For a CLASS object, apply the new attribute to\n+\tthe data component.\n+\t* match.c (gfc_match_select_type): Set attr.class_ok for an\n+\tassigned selector.\n+\t* resolve.c (resolve_fl_variable_derived): Check a CLASS object\n+\tis dummy, pointer or allocatable by testing the class_ok and\n+\tthe use_assoc attribute.\n+\n 2009-10-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41719"}, {"sha": "08d2bd69ddfb2099e459f49aa3bf203ed17eb4f4", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -1181,7 +1181,12 @@ build_sym (const char *name, gfc_charlen *cl,\n   sym->attr.implied_index = 0;\n \n   if (sym->ts.type == BT_CLASS)\n-    encapsulate_class_symbol (&sym->ts, &sym->attr, &sym->as);\n+    {\n+      sym->attr.class_ok = (sym->attr.dummy\n+\t\t\t      || sym->attr.pointer\n+\t\t\t      || sym->attr.allocatable) ? 1 : 0;\n+      encapsulate_class_symbol (&sym->ts, &sym->attr, &sym->as);\n+    }\n \n   return SUCCESS;\n }\n@@ -1472,6 +1477,7 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \t      gfc_array_spec **as)\n {\n   gfc_component *c;\n+  gfc_try t = SUCCESS;\n \n   /* F03:C438/C439. If the current symbol is of the same derived type that we're\n      constructing, it must have the pointer attribute.  */\n@@ -1554,20 +1560,17 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \t}\n     }\n \n-  if (c->ts.type == BT_CLASS)\n-    encapsulate_class_symbol (&c->ts, &c->attr, &c->as);\n-\n   /* Check array components.  */\n   if (!c->attr.dimension)\n-    return SUCCESS;\n+    goto scalar;\n \n   if (c->attr.pointer)\n     {\n       if (c->as->type != AS_DEFERRED)\n \t{\n \t  gfc_error (\"Pointer array component of structure at %C must have a \"\n \t\t     \"deferred shape\");\n-\t  return FAILURE;\n+\t  t = FAILURE;\n \t}\n     }\n   else if (c->attr.allocatable)\n@@ -1576,7 +1579,7 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \t{\n \t  gfc_error (\"Allocatable component of structure at %C must have a \"\n \t\t     \"deferred shape\");\n-\t  return FAILURE;\n+\t  t = FAILURE;\n \t}\n     }\n   else\n@@ -1585,11 +1588,15 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n \t{\n \t  gfc_error (\"Array component of structure at %C must have an \"\n \t\t     \"explicit shape\");\n-\t  return FAILURE;\n+\t  t = FAILURE;\n \t}\n     }\n \n-  return SUCCESS;\n+scalar:\n+  if (c->ts.type == BT_CLASS)\n+    encapsulate_class_symbol (&c->ts, &c->attr, &c->as);\n+\n+  return t;\n }\n \n \n@@ -3761,7 +3768,8 @@ gfc_match_data_decl (void)\n   if (m != MATCH_YES)\n     return m;\n \n-  if (current_ts.type == BT_DERIVED && gfc_current_state () != COMP_DERIVED)\n+  if ((current_ts.type == BT_DERIVED || current_ts.type == BT_CLASS)\n+\t&& gfc_current_state () != COMP_DERIVED)\n     {\n       sym = gfc_use_derived (current_ts.u.derived);\n \n@@ -3781,7 +3789,8 @@ gfc_match_data_decl (void)\n       goto cleanup;\n     }\n \n-  if (current_ts.type == BT_DERIVED && current_ts.u.derived->components == NULL\n+  if ((current_ts.type == BT_DERIVED || current_ts.type == BT_CLASS)\n+      && current_ts.u.derived->components == NULL\n       && !current_ts.u.derived->attr.zero_comp)\n     {\n \n@@ -5694,13 +5703,31 @@ attr_decl1 (void)\n \t}\n     }\n \n-  /* Update symbol table.  DIMENSION attribute is set\n-     in gfc_set_array_spec().  */\n-  if (current_attr.dimension == 0\n-      && gfc_copy_attr (&sym->attr, &current_attr, &var_locus) == FAILURE)\n+  /* Update symbol table.  DIMENSION attribute is set in\n+     gfc_set_array_spec().  For CLASS variables, this must be applied\n+     to the first component, or '$data' field.  */\n+  if (sym->ts.type == BT_CLASS && sym->ts.u.derived)\n     {\n-      m = MATCH_ERROR;\n-      goto cleanup;\n+      gfc_component *comp;\n+      comp = gfc_find_component (sym->ts.u.derived, \"$data\", true, true);\n+      if (comp == NULL || gfc_copy_attr (&comp->attr, &current_attr,\n+\t\t\t\t\t &var_locus) == FAILURE)\n+\t{\n+\t  m = MATCH_ERROR;\n+\t  goto cleanup;\n+\t}\n+      sym->attr.class_ok = (sym->attr.class_ok\n+\t\t\t      || current_attr.allocatable\n+\t\t\t      || current_attr.pointer);\n+    }\n+  else\n+    {\n+      if (current_attr.dimension == 0\n+\t    && gfc_copy_attr (&sym->attr, &current_attr, &var_locus) == FAILURE)\n+\t{\n+\t  m = MATCH_ERROR;\n+\t  goto cleanup;\n+\t}\n     }\n \n   if (gfc_set_array_spec (sym, as, &var_locus) == FAILURE)"}, {"sha": "74a31d2661caa8c37fc6da92408a650e7c4df283", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -672,6 +672,7 @@ typedef struct\n   unsigned is_bind_c:1;\t\t/* say if is bound to C.  */\n   unsigned extension:1;\t\t/* extends a derived type.  */\n   unsigned is_class:1;\t\t/* is a CLASS container.  */\n+  unsigned class_ok:1;\t\t/* is a CLASS object with correct attributes.  */\n \n   /* These flags are both in the typespec and attribute.  The attribute\n      list is what gets read from/written to a module file.  The typespec"}, {"sha": "d75ef0ea2f56a41cde6f5fc2e465eb879b5f4756", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -4080,6 +4080,7 @@ gfc_match_select_type (void)\n \treturn MATCH_ERROR;\n       expr1->symtree->n.sym->ts = expr2->ts;\n       expr1->symtree->n.sym->attr.referenced = 1;\n+      expr1->symtree->n.sym->attr.class_ok = 1;\n     }\n   else\n     {"}, {"sha": "c168c52147fb2349c4752e9acf6e4f22ed9b46ae", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -3069,7 +3069,9 @@ gfc_build_block_ns (gfc_namespace *parent_ns)\n \t\t\t  my_ns->proc_name->name, NULL);\n       gcc_assert (t == SUCCESS);\n     }\n-  my_ns->proc_name->attr.recursive = parent_ns->proc_name->attr.recursive;\n+\n+  if (parent_ns->proc_name)\n+    my_ns->proc_name->attr.recursive = parent_ns->proc_name->attr.recursive;\n \n   return my_ns;\n }"}, {"sha": "285228c4405fa18daef7779085c9379e0ef02657", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -8641,9 +8641,8 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n \t}\n \n       /* C509.  */\n-      if (!(sym->attr.dummy || sym->attr.allocatable || sym->attr.pointer\n-\t      || sym->ts.u.derived->components->attr.allocatable\n-\t      || sym->ts.u.derived->components->attr.pointer))\n+      /* Assume that use associated symbols were checked in the module ns.  */ \n+      if (!sym->attr.class_ok && !sym->attr.use_assoc)\n \t{\n \t  gfc_error (\"CLASS variable '%s' at %L must be dummy, allocatable \"\n \t\t     \"or pointer\", sym->name, &sym->declared_at);"}, {"sha": "14900619ee6bfeadb098ade21845350065921de1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -1,3 +1,16 @@\n+2009-10-17  Janus Weil  <janus@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41629\n+\t* gfortran.dg/class_6.f90: New test.\n+\n+\tPR fortran/41608\n+\tPR fortran/41587\n+\t* gfortran.dg/class_7.f90: New test.\n+\n+\tPR fortran/41618\n+\t* gfortran.dg/class_8.f90: New test.\n+\n 2009-10-17  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/lto/20091017-1_0.c: New testcase."}, {"sha": "2f3ff62a6fad1c4dc821efeb2812ee0161c25e23", "filename": "gcc/testsuite/gfortran.dg/class_6.f03", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_6.f03?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+!\n+! PR 41629: [OOP] gimplification error on valid code\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+  type t1\n+    integer :: comp\n+  end type\n+\n+  type(t1), target :: a\n+\n+  class(t1) :: x\n+  pointer :: x       ! This is valid\n+\n+  a%comp = 3\n+  x => a\n+  print *,x%comp\n+  if (x%comp/=3) call abort()\n+\n+end"}, {"sha": "ed4eeba93402779ef02d324c93be32a3383f0383", "filename": "gcc/testsuite/gfortran.dg/class_7.f03", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_7.f03?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! Test fixes for PR41587 and PR41608.\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+! PR41587: used to accept the declaration of component 'foo'\n+  type t0\n+    integer :: j = 42\n+  end type t0\n+  type t\n+    integer :: i\n+    class(t0), allocatable :: foo(3)  ! { dg-error \"deferred shape\" }\n+  end type t\n+\n+! PR41608: Would ICE on missing type decl\n+  class(t1), pointer :: c  ! { dg-error \"before it is defined\" }\n+\n+  select type (c)          ! { dg-error \"shall be polymorphic\" }\n+    type is (t1)           ! { dg-error \"Unexpected\" }\n+  end select               ! { dg-error \"Expecting END PROGRAM\" }\n+end"}, {"sha": "78f10ebe2bd9f9e389b7ca1ae315ab4c343ce17b", "filename": "gcc/testsuite/gfortran.dg/class_8.f03", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e23972ecbc374ca535d8fd40d18550e95bdd69d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_8.f03?ref=2e23972ecbc374ca535d8fd40d18550e95bdd69d", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! Test fixes for PR41618.\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+!\n+ type t1\n+   integer :: comp\n+   class(t1),pointer :: cc\n+ end type\n+\n+ class(t1) :: x ! { dg-error \"must be dummy, allocatable or pointer\" }\n+\n+ x%comp = 3\n+ print *,x%comp\n+\n+end"}]}