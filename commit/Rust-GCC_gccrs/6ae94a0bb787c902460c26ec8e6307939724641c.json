{"sha": "6ae94a0bb787c902460c26ec8e6307939724641c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFlOTRhMGJiNzg3YzkwMjQ2MGMyNmVjOGU2MzA3OTM5NzI0NjQxYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:51:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:51:31Z"}, "message": "config/iq2000: Use rtx_insn\n\ngcc/\n\t* config/iq2000/iq2000-protos.h (final_prescan_insn): Strengthen\n\tfirst param from rtx to rtx_insn *.\n\t(iq2000_adjust_insn_length): Likewise.\n\t(iq2000_output_conditional_branch): Likewise.\n\t* config/iq2000/iq2000.c (final_prescan_insn): Likewise for param\n\t\"insn\" and local \"nop_insn\".\n\t(iq2000_annotate_frame_insn): Likewise for param \"insn\".\n\t(iq2000_expand_prologue): Likewise for both locals \"insn\".\n\t(iq2000_adjust_insn_length): Likewise for param \"insn\".\n\t(iq2000_output_conditional_branch): Likewise.\n\nFrom-SVN: r214446", "tree": {"sha": "cb1e9f870038aa8eddccdcfdf5d7cb09a1d0cd97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb1e9f870038aa8eddccdcfdf5d7cb09a1d0cd97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ae94a0bb787c902460c26ec8e6307939724641c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae94a0bb787c902460c26ec8e6307939724641c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae94a0bb787c902460c26ec8e6307939724641c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae94a0bb787c902460c26ec8e6307939724641c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd3d2b3567f7b8d7a22ee9c124e413da37bb5d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3d2b3567f7b8d7a22ee9c124e413da37bb5d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3d2b3567f7b8d7a22ee9c124e413da37bb5d2b"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "6b97628587b30215e20d0e63c66838e972cf5408", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae94a0bb787c902460c26ec8e6307939724641c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae94a0bb787c902460c26ec8e6307939724641c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ae94a0bb787c902460c26ec8e6307939724641c", "patch": "@@ -1,3 +1,16 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/iq2000/iq2000-protos.h (final_prescan_insn): Strengthen\n+\tfirst param from rtx to rtx_insn *.\n+\t(iq2000_adjust_insn_length): Likewise.\n+\t(iq2000_output_conditional_branch): Likewise.\n+\t* config/iq2000/iq2000.c (final_prescan_insn): Likewise for param\n+\t\"insn\" and local \"nop_insn\".\n+\t(iq2000_annotate_frame_insn): Likewise for param \"insn\".\n+\t(iq2000_expand_prologue): Likewise for both locals \"insn\".\n+\t(iq2000_adjust_insn_length): Likewise for param \"insn\".\n+\t(iq2000_output_conditional_branch): Likewise.\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_expand_tls_address): Strengthen local"}, {"sha": "17adef6282ab892f362454eef7c92d79ac498012", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae94a0bb787c902460c26ec8e6307939724641c/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae94a0bb787c902460c26ec8e6307939724641c/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=6ae94a0bb787c902460c26ec8e6307939724641c", "patch": "@@ -25,15 +25,16 @@ extern int              iq2000_reg_mode_ok_for_base_p (rtx, enum machine_mode, i\n extern const char *     iq2000_fill_delay_slot (const char *, enum delay_type, rtx *, rtx);\n extern const char *     iq2000_move_1word (rtx *, rtx, int);\n extern HOST_WIDE_INT    iq2000_debugger_offset (rtx, HOST_WIDE_INT);\n-extern void             final_prescan_insn (rtx, rtx *, int);\n+extern void             final_prescan_insn (rtx_insn *, rtx *, int);\n extern HOST_WIDE_INT    compute_frame_size (HOST_WIDE_INT);\n extern int              iq2000_initial_elimination_offset (int, int);\n extern void             iq2000_expand_prologue (void);\n extern void             iq2000_expand_epilogue (void);\n extern void             iq2000_expand_eh_return (rtx);\n extern int              iq2000_can_use_return_insn (void);\n-extern int              iq2000_adjust_insn_length (rtx, int);\n-extern char *           iq2000_output_conditional_branch (rtx, rtx *, int, int, int, int);\n+extern int              iq2000_adjust_insn_length (rtx_insn *, int);\n+extern char *           iq2000_output_conditional_branch (rtx_insn *, rtx *,\n+\t\t\t\t\t\t\t  int, int, int, int);\n \n #ifdef RTX_CODE\n extern rtx              gen_int_relational (enum rtx_code, rtx, rtx, rtx, int *);"}, {"sha": "b5c5718217654cd2d74170ba675ca70faf4eec0b", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae94a0bb787c902460c26ec8e6307939724641c/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae94a0bb787c902460c26ec8e6307939724641c/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=6ae94a0bb787c902460c26ec8e6307939724641c", "patch": "@@ -1507,7 +1507,7 @@ iq2000_debugger_offset (rtx addr, HOST_WIDE_INT offset)\n    of load delays, and also to update the delay slot statistics.  */\n \n void\n-final_prescan_insn (rtx insn, rtx opvec[] ATTRIBUTE_UNUSED,\n+final_prescan_insn (rtx_insn *insn, rtx opvec[] ATTRIBUTE_UNUSED,\n \t\t    int noperands ATTRIBUTE_UNUSED)\n {\n   if (dslots_number_nops > 0)\n@@ -1541,7 +1541,7 @@ final_prescan_insn (rtx insn, rtx opvec[] ATTRIBUTE_UNUSED,\n        || (GET_CODE (PATTERN (insn)) == RETURN))\n \t   && NEXT_INSN (PREV_INSN (insn)) == insn)\n     {\n-      rtx nop_insn = emit_insn_after (gen_nop (), insn);\n+      rtx_insn *nop_insn = emit_insn_after (gen_nop (), insn);\n \n       INSN_ADDRESSES_NEW (nop_insn, -1);\n     }\n@@ -1773,7 +1773,7 @@ iq2000_add_large_offset_to_sp (HOST_WIDE_INT offset)\n    operation DWARF_PATTERN.  */\n \n static void\n-iq2000_annotate_frame_insn (rtx insn, rtx dwarf_pattern)\n+iq2000_annotate_frame_insn (rtx_insn *insn, rtx dwarf_pattern)\n {\n   RTX_FRAME_RELATED_P (insn) = 1;\n   REG_NOTES (insn) = alloc_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n@@ -2021,7 +2021,8 @@ iq2000_expand_prologue (void)\n   if (tsize > 0)\n     {\n       rtx tsize_rtx = GEN_INT (tsize);\n-      rtx adjustment_rtx, insn, dwarf_pattern;\n+      rtx adjustment_rtx, dwarf_pattern;\n+      rtx_insn *insn;\n \n       if (tsize > 32767)\n \t{\n@@ -2044,7 +2045,7 @@ iq2000_expand_prologue (void)\n \n       if (frame_pointer_needed)\n \t{\n-\t  rtx insn = 0;\n+\t  rtx_insn *insn = 0;\n \n \t  insn = emit_insn (gen_movsi (hard_frame_pointer_rtx,\n \t\t\t\t       stack_pointer_rtx));\n@@ -2283,7 +2284,7 @@ iq2000_pass_by_reference (cumulative_args_t cum_v, enum machine_mode mode,\n    attributes in the machine-description file.  */\n \n int\n-iq2000_adjust_insn_length (rtx insn, int length)\n+iq2000_adjust_insn_length (rtx_insn *insn, int length)\n {\n   /* A unconditional jump has an unfilled delay slot if it is not part\n      of a sequence.  A conditional jump normally has a delay slot.  */\n@@ -2311,8 +2312,9 @@ iq2000_adjust_insn_length (rtx insn, int length)\n    reversed conditional branch around a `jr' instruction.  */\n \n char *\n-iq2000_output_conditional_branch (rtx insn, rtx * operands, int two_operands_p,\n-\t\t\t\t  int float_p, int inverted_p, int length)\n+iq2000_output_conditional_branch (rtx_insn *insn, rtx * operands,\n+\t\t\t\t  int two_operands_p, int float_p,\n+\t\t\t\t  int inverted_p, int length)\n {\n   static char buffer[200];\n   /* The kind of comparison we are doing.  */"}]}