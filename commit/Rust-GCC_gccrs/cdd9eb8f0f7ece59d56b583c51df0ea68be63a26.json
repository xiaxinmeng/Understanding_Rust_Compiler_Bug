{"sha": "cdd9eb8f0f7ece59d56b583c51df0ea68be63a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkOWViOGYwZjdlY2U1OWQ1NmI1ODNjNTFkZjBlYTY4YmU2M2EyNg==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2000-03-03T06:32:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-03-03T06:32:46Z"}, "message": "Denis Chertykov  <denisc@overta.ru>\n\n        * avr.c (print_operand): Use print_operand_address instead of\n        output_addr_const.\n        * avr/libgcc.S: Cleanup code.\n\nFrom-SVN: r32305", "tree": {"sha": "387dd2b0d8937d215dabacd09b3936eb13e97c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/387dd2b0d8937d215dabacd09b3936eb13e97c4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26/comments", "author": null, "committer": null, "parents": [{"sha": "e68c380c8fd70d9c056b13175e0f380e50b31c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68c380c8fd70d9c056b13175e0f380e50b31c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68c380c8fd70d9c056b13175e0f380e50b31c07"}], "stats": {"total": 222, "additions": 103, "deletions": 119}, "files": [{"sha": "52c3aa6e6374b3dc3a1b5819908f8276a3e3ce82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdd9eb8f0f7ece59d56b583c51df0ea68be63a26", "patch": "@@ -1,3 +1,9 @@\n+2000-03-02  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* avr.c (print_operand): Use print_operand_address instead of\n+\toutput_addr_const.\n+\t* avr/libgcc.S: Cleanup code.\n+\n 2000-03-02  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (alpha_emit_set_const_1): Also try c + small constant."}, {"sha": "c999ba60a28cdd0bdc7added4c7044b9035c3bdc", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=cdd9eb8f0f7ece59d56b583c51df0ea68be63a26", "patch": "@@ -911,7 +911,7 @@ print_operand (file, x, code)\n   else if (code == 'k')\n     asm_fprintf (file, cond_string (reverse_condition (GET_CODE (x))));\n   else\n-    output_addr_const (file, x);\n+    print_operand_address (file, x);\n }\n \n /* Recognise operand OP of mode MODE used in call instructions */"}, {"sha": "db6c4117f508d2137b16ea5a6fe69d66ed4f4ed9", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 96, "deletions": 118, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd9eb8f0f7ece59d56b583c51df0ea68be63a26/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=cdd9eb8f0f7ece59d56b583c51df0ea68be63a26", "patch": "@@ -32,18 +32,14 @@ Boston, MA 02111-1307, USA.  */\n    This exception does not however invalidate any other reasons why\n    the executable file might be covered by the GNU General Public License.  */\n \n-#define TEXT_SEG(x) .section .text.libgcc ; x\n-#define GLOBAL(x) .global _##x\n-#define FUNCTION(x) .func _##x\n-#define LABEL(x) _##x##:\n-#define ENDFUNC .endfunc\n-\n #define __zero_reg__ r1\n #define __tmp_reg__ r0\n #define __SREG__ 0x3f\n #define __SP_H__ 0x3e\n #define __SP_L__ 0x3d\n \n+\t.section .text.libgcc\n+\t\n /*******************************************************\n                Multiplication  8 x 8\n *******************************************************/\n@@ -53,13 +49,12 @@ Boston, MA 02111-1307, USA.  */\n #define\tr_arg1 \tr24\t\t/* multiplier */\n #define r_res\t__tmp_reg__\t/* result */\n \n-TEXT_SEG(mulqi3)\n-GLOBAL (mulqi3)\n-FUNCTION (mulqi3)\n-LABEL(mulqi3)\n+\t.global\t_mulqi3\n+\t.func\t_mulqi3\n+_mulqi3:\n \n-GLOBAL (umulqi3)\n-LABEL(umulqi3)\n+\t.global\t_umulqi3\n+_umulqi3:\n \tclr\tr_res\t\t; clear result\n __mulqi3_loop:\n \tsbrc\tr_arg1,0\n@@ -76,7 +71,7 @@ __mulqi3_exit:\n #undef r_arg1  \n #undef r_res   \n \t\n-ENDFUNC\n+.endfunc\n #endif \t/* defined (Lmulqi3) */\n \n \n@@ -91,13 +86,12 @@ ENDFUNC\n #define r_resL\tr20\t\t/* result Low */\n #define r_resH  r21\t\t/* result High */\n \n-TEXT_SEG(mulhi3)\n-GLOBAL (mulhi3)\n-FUNCTION (mulhi3)\n-LABEL(mulhi3)\n+\t.global\t_mulhi3\n+\t.func\t_mulhi3\n+_mulhi3:\n \n-GLOBAL (umulhi3)\n-LABEL(umulhi3)\n+\t.global\t_umulhi3\n+_umulhi3:\n \t\n \tclr\tr_resH\t\t; clear result\n \tclr\tr_resL\t\t; clear result\n@@ -129,7 +123,7 @@ __mulhi3_exit:\n #undef r_resL \t\n #undef r_resH \n \n-ENDFUNC\n+.endfunc\n #endif /* defined (Lmulhi3) */\n \n #if defined (Lmulsi3)\n@@ -153,13 +147,12 @@ ENDFUNC\n #define r_resHH  r31\t\t/* result High */\n \n \t\n-TEXT_SEG(mulsi3)\n-GLOBAL (mulsi3)\n-FUNCTION (mulsi3)\n-LABEL(mulsi3)\n+\t.global\t_mulsi3\n+\t.func\t_mulsi3\n+_mulsi3:\n \n-GLOBAL (umulsi3)\n-LABEL(umulsi3)\n+\t.global\t_umulsi3\n+_umulsi3:\n \tclr\tr_resHH\t\t; clear result\n \tclr\tr_resHL\t\t; clear result\n \tclr\tr_resH\t\t; clear result\n@@ -207,7 +200,7 @@ __mulsi3_exit:\n #undef r_resHL \n #undef r_resHH \n \n-ENDFUNC\n+.endfunc\n #endif /* defined (Lmulsi3) */\n \t\n /*******************************************************\n@@ -220,55 +213,51 @@ ENDFUNC\n \n #if defined (Lumodqi3)\n \n-TEXT_SEG(divqi3)\n-GLOBAL (umodqi3)\n-FUNCTION (umodqi3)\n-LABEL(umodqi3)\n+\t.global\t_umodqi3\n+\t.func\t_umodqi3\n+_umodqi3:\n \tclt\n \trcall\t_udivqi3\n \tmov\tr24,r_rem\n \tret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Lumodqi3) */\n \t\n #if defined (Ludivqi3)\n \n-TEXT_SEG(divqi3)\n-GLOBAL (udivqi3)\n-FUNCTION (udivqi3)\n-LABEL(udivqi3)\n+\t.global\t_udivqi3\n+\t.func\t_udivqi3\n+_udivqi3:\n \tclr\t__tmp_reg__\n \trjmp\t_divqi_raw\n-ENDFUNC\n+.endfunc\n #endif /* defined (Ludivqi3) */\n \n #if defined (Lmodqi3)\n \t\n-TEXT_SEG (divqi3)\n-GLOBAL (moqhi3)\n-FUNCTION (moqhi3)\n-LABEL (modqi3)\n+\t.global\t_moqhi3\n+\t.func\t_moqhi3\n+_modqi3:\n \trcall\t_divqi3\n \tmov\tr24,r_rem\n \tret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Lmodqi3) */\n \n #if defined (Ldivqi3)\n \n-TEXT_SEG(divqi3)\n-GLOBAL (divqi3)\n-FUNCTION (divqi3)\n-LABEL(divqi3)\n+\t.global\t_divqi3\n+\t.func\t_divqi3\n+_divqi3:\n         bst     r_arg1,7\t; store sign of divident\n         mov     __tmp_reg__,r_arg1\n         eor     __tmp_reg__,r_arg2; r0.7 is sign of result\n         sbrc\tr_arg1,7\n         neg     r_arg1\t\t; divident negative : negate\n         sbrc\tr_arg2,7\n         neg     r_arg2\t\t; divisor negative : negate\n-GLOBAL (divqi_raw)\n-LABEL (divqi_raw)\t\n+\t.global\t_divqi_raw\n+_divqi_raw:\t\n \tsub\tr_rem,r_rem\t; clear remainder and carry\n \tldi\tr_cnt,9\t\t; init loop counter\n \trjmp\t__divqi3_ep\t; jump to entry point\n@@ -291,7 +280,7 @@ __divqi3_1:\n __divqi3_exit:\n \tmov\tr24,r_arg1\t; put result to return register\n \tret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Ldivqi3) */\n \n #undef r_rem\n@@ -315,53 +304,49 @@ ENDFUNC\n #define\tr_cnt\tr21\t/* loop count */\n #if defined (Lumodhi3)\n \t\n-TEXT_SEG (divhi3)\n-GLOBAL (umodhi3)\n-FUNCTION (umodhi3)\n-LABEL (umodhi3)\n+\t.global\t_umodhi3\n+\t.func\t_umodhi3\n+_umodhi3:\n \tclt\n \trcall\t_udivhi3\n-GLOBAL (umodhi3_ret)\n-LABEL (umodhi3_ret)\n+\t.global\t_umodhi3_ret\n+_umodhi3_ret:\n \tmov\tr24,r_remL\n \tmov\tr25,r_remH\n \tret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Lumodhi3) */\n \t\n #if defined (Ludivhi3)\n \t\n-TEXT_SEG (divhi3)\n-GLOBAL (udivhi3)\n-FUNCTION (udivhi3)\n-LABEL (udivhi3)\n+\t.global\t_udivhi3\n+\t.func\t_udivhi3\n+_udivhi3:\n \tclr\t__tmp_reg__\n \trjmp\t_divhi_raw\n-ENDFUNC\n+.endfunc\n #endif /* defined (Ludivhi3) */\n \n #if defined (Lmodhi3)\n \t\n-TEXT_SEG (divhi3)\n-GLOBAL (modhi3)\n-FUNCTION (modhi3)\n-LABEL (modhi3)\n-GLOBAL (div)\n-LABEL (div)\n+\t.global\t_modhi3\n+\t.func\t_modhi3\n+_modhi3:\n+\t.global\t_div\n+_div:\n \trcall\t_divhi3\n \tmov\tr22,r24\t\t; needed for div () function\n \tmov\tr23,r25\n \trjmp\t_umodhi3_ret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Lmodhi3) */\n \t\n \t\n #if defined (Ldivhi3)\n \t\n-TEXT_SEG (divhi3)\n-GLOBAL (divhi3)\n-FUNCTION (divhi3)\n-LABEL (divhi3)\n+\t.global\t_divhi3\n+\t.func\t_divhi3\n+_divhi3:\n         bst     r_arg1H,7\t; store sign of divident\n         mov     __tmp_reg__,r_arg1H\n         eor     __tmp_reg__,r_arg2H   ; r0.7 is sign of result\n@@ -376,8 +361,8 @@ __divhi3_skip1:\n         neg     r_arg2L\t\t; divisor negative : negate\n \tsbci\tr_arg2H,0xff\n __divhi3_skip2:\n-GLOBAL (divhi_raw)\n-LABEL (divhi_raw)\n+\t.global\t_divhi_raw\n+_divhi_raw:\n \tsub\tr_remL,r_remL\n \tsub\tr_remH,r_remH\t\t; clear remainder and carry\n \tldi\tr_cnt,17\t; init loop counter\n@@ -408,7 +393,7 @@ __divhi3_exit:\n \tcom\tr_arg1L\n \tcom\tr_arg1H\n \tret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Ldivhi3) */\n \t\n #undef r_remH  \n@@ -444,58 +429,54 @@ ENDFUNC\n \n #if defined (Lumodsi3)\n \n-TEXT_SEG(divsi3)\n-GLOBAL (umodsi3)\n-FUNCTION (umodsi3)\n-LABEL(umodsi3)\n+\t.global\t_umodsi3\n+\t.func\t_umodsi3\n+_umodsi3:\n \tclt\n \trcall\t_udivsi3\n-GLOBAL (umodsi3_ret)\n-LABEL (umodsi3_ret)\n+\t.global\t_umodsi3_ret\n+_umodsi3_ret:\n \tmov\tr25,r_remHH\n \tmov\tr24,r_remHL\n \tmov\tr23,r_remH\n \tmov\tr22,r_remL\n-GLOBAL (cleanup)\n-LABEL (cleanup)\n+\t.global\t_cleanup\n+_cleanup:\n \tret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Lumodsi3) */\n \t\n #if defined (Ludivsi3)\n \n-TEXT_SEG(divsi3)\n-GLOBAL (udivsi3)\n-FUNCTION (udivsi3)\n-LABEL(udivsi3)\n+\t.global\t_udivsi3\n+\t.func\t_udivsi3\n+_udivsi3:\n \tclr\t__tmp_reg__\n \trjmp\t_divsi_raw\n-ENDFUNC\n+.endfunc\n #endif /* defined (Ludivsi3) */\n \n #if defined (Lmodsi3)\n \t\n-TEXT_SEG (divsi3)\n-GLOBAL (modsi3)\n-FUNCTION (modsi3)\n-LABEL (modsi3)\n-GLOBAL (ldiv)\n-LABEL (ldiv)\n+\t.global\t_modsi3\n+\t.func\t_modsi3\n+_modsi3:\n+\t.global\t_ldiv\n+_ldiv:\n \trcall\t_divsi3\n \tmov\tr18,r22\t\t/* Needed for ldiv */\n \tmov\tr19,r23\n \tmov\tr20,r24\n \tmov\tr21,r25\n \trjmp\t_umodsi3_ret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Lmodsi3) */\n \n #if defined (Ldivsi3)\n \n-TEXT_SEG(divsi3)\n-GLOBAL (divsi3)\n-FUNCTION (divsi3)\n-LABEL(divsi3)\n+\t.global\t_divsi3\n+\t.func\t_divsi3\n+_divsi3:\n         bst     r_arg1HH,7\t; store sign of divident\n         mov     __tmp_reg__,r_arg1HH\n         eor     __tmp_reg__,r_arg2HH   ; r0.7 is sign of result\n@@ -518,8 +499,8 @@ __divsi3_skip1:\n \tsbci\tr_arg2HL,0xff\n \tsbci\tr_arg2HH,0xff\n __divsi3_skip2:\n-GLOBAL (divsi_raw)\n-LABEL (divsi_raw)\n+\t.global\t_divsi_raw\n+_divsi_raw:\n \tpush\tr_cnt\n \tsub\tr_remL,r_remL\n \tsub\tr_remH,r_remH\n@@ -571,18 +552,17 @@ __divsi3_exit:\n \tcom\tr_arg1HL\n \tcom\tr_arg1HH\n \tret\n-ENDFUNC\n+.endfunc\n #endif /* defined (Ldivsi3) */\n \n /**********************************\n  * This is a prologue subroutine\n  **********************************/\n #if defined (Lprologue)\n \n-TEXT_SEG (_prologue_saves)\n-GLOBAL (_prologue_saves__)\n-FUNCTION (_prologue_saves__)\n-LABEL (_prologue_saves__)\n+\t.global\t__prologue_saves__\n+\t.func\t__prologue_saves__\n+__prologue_saves__:\n \tpush r2\n \tpush r3\n \tpush r4\n@@ -614,18 +594,17 @@ LABEL (_prologue_saves__)\n \tout\t__SP_H__,r29\n _prologue_end:\n \tijmp\n-ENDFUNC\n+.endfunc\n #endif /* defined (Lprologue) */\n \n /*\n  * This is a epilogue subroutine\n  */\n #if defined (Lepilogue)\n \n-TEXT_SEG (_epilogue_restores)\n-GLOBAL (_epilogue_restores__)\n-FUNCTION (_epilogue_restores__)\n-LABEL (_epilogue_restores__)\n+\t.global\t__epilogue_restores__\n+\t.func\t__epilogue_restores__\n+__epilogue_restores__:\n \tldd\tr2,Y+18\n \tldd\tr3,Y+17\n \tldd\tr4,Y+16\n@@ -657,10 +636,9 @@ LABEL (_epilogue_restores__)\n #endif /* defined (Lepilogue) */\n \n #ifdef L__exit\n-TEXT_SEG(exit)\n-GLOBAL (exit)\n-FUNCTION (exit)\n-LABEL(exit)\n+\t.global\t_exit\n+\t.func\t_exit\n+_exit:\n \trjmp\t_exit\n-ENDFUNC\n-#endif\n\\ No newline at end of file\n+.endfunc\n+#endif"}]}