{"sha": "4a4a4e99330f1586681a5e28cb88a6352f89f833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0YTRlOTkzMzBmMTU4NjY4MWE1ZTI4Y2I4OGE2MzUyZjg5ZjgzMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-05-12T05:49:28Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-05-12T05:49:28Z"}, "message": "re PR target/37137 (unrecognized command line option \"-minterlink-mips16\")\n\nChangeLog:\nPR target/37137\n* Makefile.def (flags_to_pass): Remove redundant and incomplete\nSTAGE1_CFLAGS, STAGE2_CFLAGS, STAGE3_CFLAGS, and STAGE4_CFLAGS.\nAdd FLAGS_FOR_TARGET and BUILD_CONFIG.\n(bootstrap_stage): Remove bootstrap-debug custom stages.  Turn\nstage_configureflags, stage_cflags and stage_libcflags into\nexplicit Makefile macros.\n* Makefile.tpl (HOST_EXPORTS, EXTRA_HOST_FLAGS): Pass GCJ and\nGFORTRAN.\n(POSTSTAGE1_HOST_EXPORTS): Add XGCC_FLAGS_FOR_TARGET and TFLAGS to\nCC.  Set CC_FOR_BUILD from CC.\n(BASE_TARGET_EXPORTS, RAW_CXX_TARGET_EXPORTS,\nNORMAL_TARGET_EXPORTS): Move SYSROOT_CFLAGS_FOR_TARGET and\nDEBUG_PREFIX_CFLAGS_FOR_TARGET from CFLAGS and CXXFLAGS to\nXGCC_FLAGS_FOR_TARGET.  Add it along with TFLAGS to CC, CXX, GCJ,\nand GFORTRAN.\n(TFLAGS, STAGE_CFLAGS, STAGE_TFLAGS, STAGE_CONFIGURE_FLAGS): New.\n(_LIBCFLAGS): Renamed to _TFLAGS.\n(do-compare-debug, do-compare3-debug): Drop.\n(CC, GCC_FOR_TARGET, CXX_FOR_TARGET, RAW_CXX_FOR_TARGET,\nGCJ_FOR_TARGET, GFORTRAN_FOR_TARGET): Remove FLAGS_FOR_TARGET.\n(FLAGS_FOR_TARGET, SYSROOT_CFLAGS_FOR_TARGET,\nDEBUG_PREFIX_CFLAGS_FOR_TARGET): Move down.\n(XGCC_FLAGS_FOR_TARGET): New.\n(BASE_FLAGS_TO_PASS): Pass STAGEid_CFLAGS, STAGEid_TFLAGS and TFLAGS.\n(EXTRA_HOST_FLAGS): Pass GCJ and GFORTRAN.\n(POSTSTAGE1_FLAGS_TO_PASS): Move SYSROOT_CFLAGS_FOR_TARGET and\nDEBUG_PREFIX_CFLAGS_FOR_TARGET from CFLAGS, CXXFLAGS, LIBCFLAGS,\nLIBCXXFLAGS to XGCC_FLAGS_FOR_TARGET.    Add it along with TFLAGS\nto CC, CXX, GCJ, and GFORTRAN.  Pass XGCC_FLAGS_FOR_TARGET and\nTFLAGS.\n(BUILD_CONFIG): Include if requested.\n(all): Set TFLAGS on bootstrap.\n(configure-stageid-prefixmodule): Pass TFLAGS, adjust FLAGS.\n(all-stageid-prefixmodule): Likewise.\n(do-clean, distclean-stageid): Set TFLAGS.\n(restrap): Fix whitespace.\n* Makefile.in: Rebuilt.\nconfig/ChangeLog:\n* multi.m4: Save CXX, GFORTRAN and GCJ in config.status.\n* mt-gnu (CXXFLAGS_FOR_TARGET): Adjust.\n* bootstrap-O1.mk: New.\n* bootstrap-O3.mk: New.\n* bootstrap-debug.mk: New.\ngcc/ChangeLog:\nPR target/37137\n* doc/install.texi (STAGE1_TFLAGS, BUILD_CONFIG): Document.\ngcc/java/ChangeLog:\n* Make-lang.in (GCJ): Renamed to...\n(XGCJ): ... this.\nlibjava/ChangeLog:\n* configure.ac: Insert libgcjdir in the GCJ passed in the\nenvironment, rather than overriding completely.\n* configure: Rebuilt.\n\nFrom-SVN: r147415", "tree": {"sha": "44f4d346a033125341ef30a73f2e8210e0faa458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44f4d346a033125341ef30a73f2e8210e0faa458"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a4a4e99330f1586681a5e28cb88a6352f89f833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4a4e99330f1586681a5e28cb88a6352f89f833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4a4e99330f1586681a5e28cb88a6352f89f833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4a4e99330f1586681a5e28cb88a6352f89f833/comments", "author": null, "committer": null, "parents": [{"sha": "72b9acff14f5486a970e94f412e03051fc7d85a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b9acff14f5486a970e94f412e03051fc7d85a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b9acff14f5486a970e94f412e03051fc7d85a4"}], "stats": {"total": 5963, "additions": 1902, "deletions": 4061}, "files": [{"sha": "9a4630eed79741ed10064afa25c8fa1ef28cc37b", "filename": "ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1,3 +1,44 @@\n+2009-05-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR target/37137\n+\t* Makefile.def (flags_to_pass): Remove redundant and incomplete\n+\tSTAGE1_CFLAGS, STAGE2_CFLAGS, STAGE3_CFLAGS, and STAGE4_CFLAGS.\n+\tAdd FLAGS_FOR_TARGET and BUILD_CONFIG.\n+\t(bootstrap_stage): Remove bootstrap-debug custom stages.  Turn\n+\tstage_configureflags, stage_cflags and stage_libcflags into\n+\texplicit Makefile macros.\n+\t* Makefile.tpl (HOST_EXPORTS, EXTRA_HOST_FLAGS): Pass GCJ and\n+\tGFORTRAN.\n+\t(POSTSTAGE1_HOST_EXPORTS): Add XGCC_FLAGS_FOR_TARGET and TFLAGS to\n+\tCC.  Set CC_FOR_BUILD from CC.\n+\t(BASE_TARGET_EXPORTS, RAW_CXX_TARGET_EXPORTS,\n+\tNORMAL_TARGET_EXPORTS): Move SYSROOT_CFLAGS_FOR_TARGET and\n+\tDEBUG_PREFIX_CFLAGS_FOR_TARGET from CFLAGS and CXXFLAGS to\n+\tXGCC_FLAGS_FOR_TARGET.  Add it along with TFLAGS to CC, CXX, GCJ,\n+\tand GFORTRAN.\n+\t(TFLAGS, STAGE_CFLAGS, STAGE_TFLAGS, STAGE_CONFIGURE_FLAGS): New.\n+\t(_LIBCFLAGS): Renamed to _TFLAGS.\n+\t(do-compare-debug, do-compare3-debug): Drop.\n+\t(CC, GCC_FOR_TARGET, CXX_FOR_TARGET, RAW_CXX_FOR_TARGET,\n+\tGCJ_FOR_TARGET, GFORTRAN_FOR_TARGET): Remove FLAGS_FOR_TARGET.\n+\t(FLAGS_FOR_TARGET, SYSROOT_CFLAGS_FOR_TARGET,\n+\tDEBUG_PREFIX_CFLAGS_FOR_TARGET): Move down.\n+\t(XGCC_FLAGS_FOR_TARGET): New.\n+\t(BASE_FLAGS_TO_PASS): Pass STAGEid_CFLAGS, STAGEid_TFLAGS and TFLAGS.\n+\t(EXTRA_HOST_FLAGS): Pass GCJ and GFORTRAN.\n+\t(POSTSTAGE1_FLAGS_TO_PASS): Move SYSROOT_CFLAGS_FOR_TARGET and\n+\tDEBUG_PREFIX_CFLAGS_FOR_TARGET from CFLAGS, CXXFLAGS, LIBCFLAGS,\n+\tLIBCXXFLAGS to XGCC_FLAGS_FOR_TARGET.    Add it along with TFLAGS\n+\tto CC, CXX, GCJ, and GFORTRAN.  Pass XGCC_FLAGS_FOR_TARGET and\n+\tTFLAGS.\n+\t(BUILD_CONFIG): Include if requested.\n+\t(all): Set TFLAGS on bootstrap.\n+\t(configure-stageid-prefixmodule): Pass TFLAGS, adjust FLAGS.\n+\t(all-stageid-prefixmodule): Likewise.\n+\t(do-clean, distclean-stageid): Set TFLAGS.\n+\t(restrap): Fix whitespace.\n+\t* Makefile.in: Rebuilt.\n+\n 2009-05-07  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* config.guess: Sync with src."}, {"sha": "86cf7588da58fa3987c6bf449654fc074782f657", "filename": "Makefile.def", "status": "modified", "additions": 8, "deletions": 51, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -255,12 +255,8 @@ flags_to_pass = { flag= CXXFLAGS ; };\n flags_to_pass = { flag= LDFLAGS ; };\n flags_to_pass = { flag= LIBCFLAGS ; };\n flags_to_pass = { flag= LIBCXXFLAGS ; };\n-flags_to_pass = { flag= STAGE1_CFLAGS ; };\n flags_to_pass = { flag= STAGE1_CHECKING ; };\n flags_to_pass = { flag= STAGE1_LANGUAGES ; };\n-flags_to_pass = { flag= STAGE2_CFLAGS ; };\n-flags_to_pass = { flag= STAGE3_CFLAGS ; };\n-flags_to_pass = { flag= STAGE4_CFLAGS ; };\n flags_to_pass = { flag= GNATBIND ; };\n flags_to_pass = { flag= GNATMAKE ; };\n \n@@ -273,6 +269,7 @@ flags_to_pass = { flag= CPPFLAGS_FOR_TARGET ; };\n flags_to_pass = { flag= CXX_FOR_TARGET ; };\n flags_to_pass = { flag= CXXFLAGS_FOR_TARGET ; };\n flags_to_pass = { flag= DLLTOOL_FOR_TARGET ; };\n+flags_to_pass = { flag= FLAGS_FOR_TARGET ; };\n flags_to_pass = { flag= GCJ_FOR_TARGET ; };\n flags_to_pass = { flag= GFORTRAN_FOR_TARGET ; };\n flags_to_pass = { flag= LD_FOR_TARGET ; };\n@@ -288,6 +285,7 @@ flags_to_pass = { flag= WINDRES_FOR_TARGET ; };\n flags_to_pass = { flag= WINDMC_FOR_TARGET ; };\n \n // Miscellaneous\n+flags_to_pass = { flag= BUILD_CONFIG ; };\n flags_to_pass = { flag= LANGUAGES ; optional=true ; };\n flags_to_pass = { flag= LEAN ; };\n \n@@ -555,62 +553,21 @@ languages = { language=objc;\tgcc-check-target=check-objc;\n languages = { language=obj-c++;\tgcc-check-target=check-obj-c++; };\n \n // Toplevel bootstrap\n-bootstrap_stage = {\n-\tid=1 ;\n-\n-\t// * We force-disable intermodule optimizations, even if\n-\t//   --enable-intermodule was passed, since the installed compiler\n-\t//   probably can't handle them.  Luckily, autoconf always respects\n-\t//   the last argument when conflicting --enable arguments are passed.\n-\t// * Likewise, we force-disable coverage flags, since the installed\n-\t//   compiler probably has never heard of them.\n-\tstage_configure_flags='--disable-intermodule $(STAGE1_CHECKING) \\\n-\t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\"' ;\n-\tstage_cflags='$(STAGE1_CFLAGS)' ;\n-\tstage_libcflags='$(STAGE1_LIBCFLAGS)' ; };\n+bootstrap_stage = { id=1 ; };\n bootstrap_stage = {\n \tid=2 ; prev=1 ;\n-\tbootstrap_target=bootstrap2 ;\n-\tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE2_CFLAGS)\" ;\n-\tstage_libcflags=\"$(STAGE2_LIBCFLAGS)\" ; };\n-bootstrap_stage = {\n-\tid=b2g0 ; prev=1 ;\n-\tbootstrap_target=bootstrap2-debug ;\n-\tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE2_CFLAGS) -g0\" ;\n-\tstage_libcflags=\"$(STAGE2_LIBCFLAGS) -g0\" ; };\n+\tbootstrap_target=bootstrap2 ; };\n bootstrap_stage = {\n \tid=3 ; prev=2 ; lean=1 ;\n \tcompare_target=compare ;\n \tbootstrap_target=bootstrap ;\n-\tcleanstrap_target=cleanstrap ;\n-\tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE3_CFLAGS)\" ;\n-\tstage_libcflags=\"$(STAGE3_LIBCFLAGS)\" ; };\n-bootstrap_stage = {\n-\tid=b3g2 ; prev=b2g0 ; lean=1 ;\n-\tcompare_target=compare-debug ;\n-\tbootstrap_target=bootstrap-debug ;\n-\tcleanstrap_target=cleanstrap-debug ;\n-\tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE3_CFLAGS) -g2\" ;\n-\tstage_libcflags=\"$(STAGE3_LIBCFLAGS) -g2\" ; };\n+\tcleanstrap_target=cleanstrap ; };\n bootstrap_stage = {\n \tid=4 ; prev=3 ; lean=2 ;\n \tcompare_target=compare3 ;\n-\tbootstrap_target=bootstrap4 ;\n-\tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags=\"$(STAGE4_CFLAGS)\" ;\n-\tstage_libcflags=\"$(STAGE4_CFLAGS)\" ; };\n+\tbootstrap_target=bootstrap4 ; };\n bootstrap_stage = {\n-\tid=profile ; prev=1 ;\n-\tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags='$(STAGE2_CFLAGS) -fprofile-generate' ;\n-\tstage_libcflags='$(STAGE2_LIBCFLAGS)' ; };\n+\tid=profile ; prev=1 ; };\n bootstrap_stage = {\n \tid=feedback ; prev=profile ;\n-\tbootstrap_target=profiledbootstrap ;\n-\tstage_configure_flags=\"@stage2_werror_flag@\" ;\n-\tstage_cflags='$(STAGE3_CFLAGS) -fprofile-use' ;\n-\tstage_libcflags='$(STAGE3_LIBCFLAGS) -fprofile-use' ; };\n+\tbootstrap_target=profiledbootstrap ; };"}, {"sha": "d969c6d052977a683e62f6eb75c5957ea105862a", "filename": "Makefile.in", "status": "modified", "additions": 1605, "deletions": 3895, "changes": 5500, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833"}, {"sha": "056296a78bf3cb4bf7453574b1bf3e2f231f2cc8", "filename": "Makefile.tpl", "status": "modified", "additions": 117, "deletions": 57, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -6,7 +6,7 @@ in\n #\n # Makefile for directory with subdirs to build.\n #   Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-#   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+#   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n #   Free Software Foundation\n #\n # This file is free software; you can redistribute it and/or modify\n@@ -178,6 +178,8 @@ HOST_EXPORTS = \\\n \tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n \tCXX=\"$(CXX)\"; export CXX; \\\n \tCXXFLAGS=\"$(CXXFLAGS)\"; export CXXFLAGS; \\\n+\tGCJ=\"$(GCJ)\"; export GCJ; \\\n+\tGFORTRAN=\"$(GFORTRAN)\"; export GFORTRAN; \\\n \tAR=\"$(AR)\"; export AR; \\\n \tAS=\"$(AS)\"; export AS; \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n@@ -213,11 +215,9 @@ HOST_EXPORTS = \\\n POSTSTAGE1_HOST_EXPORTS = \\\n \t$(HOST_EXPORTS) \\\n \tCC=\"$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/xgcc$(exeext) \\\n-\t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/\"; export CC; \\\n-\tCC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) \\\n-\t  $$r/$(HOST_SUBDIR)/prev-gcc/xgcc$(exeext) \\\n-\t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ \\\n-\t  -B$(build_tooldir)/bin/\"; export CC_FOR_BUILD; \\\n+\t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ \\\n+\t  $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export CC; \\\n+\tCC_FOR_BUILD=\"$$CC\"; export CC_FOR_BUILD; \\\n \tGNATBIND=\"$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind\"; export GNATBIND \\\n \tLDFLAGS=\"$(BOOT_LDFLAGS)\"; export LDFLAGS;\n \n@@ -232,13 +232,13 @@ BASE_TARGET_EXPORTS = \\\n \t$(BASE_EXPORTS) \\\n \tAR=\"$(AR_FOR_TARGET)\"; export AR; \\\n \tAS=\"$(COMPILER_AS_FOR_TARGET)\"; export AS; \\\n-\tCC=\"$(CC_FOR_TARGET)\"; export CC; \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCC=\"$(CC_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export CC; \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n \tCONFIG_SHELL=\"$(SHELL)\"; export CONFIG_SHELL; \\\n \tCPPFLAGS=\"$(CPPFLAGS_FOR_TARGET)\"; export CPPFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tGCJ=\"$(GCJ_FOR_TARGET)\"; export GCJ; \\\n-\tGFORTRAN=\"$(GFORTRAN_FOR_TARGET)\"; export GFORTRAN; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tGCJ=\"$(GCJ_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export GCJ; \\\n+\tGFORTRAN=\"$(GFORTRAN_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export GFORTRAN; \\\n \tDLLTOOL=\"$(DLLTOOL_FOR_TARGET)\"; export DLLTOOL; \\\n \tLD=\"$(COMPILER_LD_FOR_TARGET)\"; export LD; \\\n \tLDFLAGS=\"$(LDFLAGS_FOR_TARGET)\"; export LDFLAGS; \\\n@@ -254,11 +254,11 @@ BASE_TARGET_EXPORTS = \\\n RAW_CXX_TARGET_EXPORTS = \\\n \t$(BASE_TARGET_EXPORTS) \\\n \tCXX_FOR_TARGET=\"$(RAW_CXX_FOR_TARGET)\"; export CXX_FOR_TARGET; \\\n-\tCXX=\"$(RAW_CXX_FOR_TARGET)\"; export CXX;\n+\tCXX=\"$(RAW_CXX_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export CXX;\n \n NORMAL_TARGET_EXPORTS = \\\n \t$(BASE_TARGET_EXPORTS) \\\n-\tCXX=\"$(CXX_FOR_TARGET)\"; export CXX;\n+\tCXX=\"$(CXX_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export CXX;\n \n # Where to find GMP\n HOST_GMPLIBS = @gmplibs@\n@@ -358,48 +358,65 @@ LIBCFLAGS = $(CFLAGS)\n CXXFLAGS = @CXXFLAGS@\n LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates\n \n+TFLAGS =\n+\n+# Defaults for all stages; some are overridden below.\n+\n+STAGE_CFLAGS = $(BOOT_CFLAGS)\n+STAGE_TFLAGS = $(TFLAGS)\n+STAGE_CONFIGURE_FLAGS=@stage2_werror_flag@\n+\n+[+ FOR bootstrap-stage +]\n+# Defaults for stage [+id+]; some are overridden below.\n+STAGE[+id+]_CFLAGS = $(STAGE_CFLAGS)\n+STAGE[+id+]_TFLAGS = $(STAGE_TFLAGS)\n+STAGE[+id+]_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n+[+ ENDFOR bootstrap-stage +]\n+\n # Only build the C compiler for stage1, because that is the only one that\n # we can guarantee will build with the native compiler, and also it is the\n # only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),\n # MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them\n # overrideable (for a bootstrap build stage1 also builds gcc.info).\n \n+STAGE1_CFLAGS = @stage1_cflags@\n STAGE1_CHECKING=@stage1_checking@\n STAGE1_LANGUAGES=@stage1_languages@\n+# * We force-disable intermodule optimizations, even if\n+#   --enable-intermodule was passed, since the installed compiler\n+#   probably can't handle them.  Luckily, autoconf always respects\n+#   the last argument when conflicting --enable arguments are passed.\n+# * Likewise, we force-disable coverage flags, since the installed\n+#   compiler probably has never heard of them.\n+STAGE1_CONFIGURE_FLAGS = --disable-intermodule $(STAGE1_CHECKING) \\\n+\t  --disable-coverage --enable-languages=\"$(STAGE1_LANGUAGES)\"\n \n-STAGE1_CFLAGS=@stage1_cflags@\n-STAGE2_CFLAGS=$(BOOT_CFLAGS)\n-STAGE3_CFLAGS=$(BOOT_CFLAGS)\n-STAGE4_CFLAGS=$(BOOT_CFLAGS)\n+STAGEprofile_CFLAGS = $(STAGE2_CFLAGS) -fprofile-generate\n+STAGEprofile_TFLAGS = $(STAGE2_TFLAGS)\n \n-STAGE1_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n-STAGE2_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n-STAGE3_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n-STAGE4_LIBCFLAGS=$(CFLAGS_FOR_TARGET)\n+STAGEfeedback_CFLAGS = $(STAGE3_CFLAGS) -fprofile-use\n+STAGEfeedback_TFLAGS = $(STAGE3_TFLAGS)\n \n do-compare = @do_compare@\n do-compare3 = $(do-compare)\n-do-compare-debug = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2\n \n # -----------------------------------------------\n # Programs producing files for the TARGET machine\n # -----------------------------------------------\n \n-FLAGS_FOR_TARGET = @FLAGS_FOR_TARGET@\n-\n AR_FOR_TARGET=@AR_FOR_TARGET@\n AS_FOR_TARGET=@AS_FOR_TARGET@\n-CC_FOR_TARGET=$(STAGE_CC_WRAPPER) @CC_FOR_TARGET@ $(FLAGS_FOR_TARGET)\n+CC_FOR_TARGET=$(STAGE_CC_WRAPPER) @CC_FOR_TARGET@\n \n # If GCC_FOR_TARGET is not overriden on the command line, then this\n # variable is passed down to the gcc Makefile, where it is used to\n # build libgcc2.a.  We define it here so that it can itself be\n # overridden on the command line.\n-GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) @GCC_FOR_TARGET@ $(FLAGS_FOR_TARGET)\n-CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @CXX_FOR_TARGET@ $(FLAGS_FOR_TARGET)\n-RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @RAW_CXX_FOR_TARGET@ $(FLAGS_FOR_TARGET)\n-GCJ_FOR_TARGET=$(STAGE_CC_WRAPPER) @GCJ_FOR_TARGET@ $(FLAGS_FOR_TARGET)\n-GFORTRAN_FOR_TARGET=$(STAGE_CC_WRAPPER) @GFORTRAN_FOR_TARGET@ $(FLAGS_FOR_TARGET)\n+GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) @GCC_FOR_TARGET@\n+CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @CXX_FOR_TARGET@\n+RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @RAW_CXX_FOR_TARGET@\n+GCJ_FOR_TARGET=$(STAGE_CC_WRAPPER) @GCJ_FOR_TARGET@\n+GFORTRAN_FOR_TARGET=$(STAGE_CC_WRAPPER) @GFORTRAN_FOR_TARGET@\n DLLTOOL_FOR_TARGET=@DLLTOOL_FOR_TARGET@\n LD_FOR_TARGET=@LD_FOR_TARGET@\n \n@@ -417,13 +434,17 @@ COMPILER_NM_FOR_TARGET=@COMPILER_NM_FOR_TARGET@\n \n CFLAGS_FOR_TARGET = @CFLAGS_FOR_TARGET@\n CXXFLAGS_FOR_TARGET = @CXXFLAGS_FOR_TARGET@\n-SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@\n-DEBUG_PREFIX_CFLAGS_FOR_TARGET = @DEBUG_PREFIX_CFLAGS_FOR_TARGET@\n \n LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)\n LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates\n LDFLAGS_FOR_TARGET = \n \n+FLAGS_FOR_TARGET = @FLAGS_FOR_TARGET@\n+SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@\n+DEBUG_PREFIX_CFLAGS_FOR_TARGET = @DEBUG_PREFIX_CFLAGS_FOR_TARGET@\n+\n+XGCC_FLAGS_FOR_TARGET = $(FLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\n+\n # ------------------------------------\n # Miscellaneous targets and flag lists\n # ------------------------------------\n@@ -473,7 +494,10 @@ HOST_LIB_PATH_[+module+] = \\\n # Flags to pass down to all sub-makes.\n BASE_FLAGS_TO_PASS =[+ FOR flags_to_pass +][+ IF optional +] \\\n \t\"`echo '[+flag+]=$([+flag+])' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"[+ ELSE optional +] \\\n-\t\"[+flag+]=$([+flag+])\"[+ ENDIF optional+][+ ENDFOR flags_to_pass +] \\\n+\t\"[+flag+]=$([+flag+])\"[+ ENDIF optional+][+ ENDFOR flags_to_pass +][+ FOR bootstrap-stage +] \\\n+\t\"STAGE[+id+]_CFLAGS=$(STAGE[+id+]_CFLAGS)\" \\\n+\t\"STAGE[+id+]_TFLAGS=$(STAGE[+id+]_TFLAGS)\"[+ ENDFOR bootstrap-stage +] \\\n+\t\"TFLAGS=$(TFLAGS)\" \\\n \t\"CONFIG_SHELL=$(SHELL)\" \\\n \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \n \n@@ -488,6 +512,8 @@ EXTRA_HOST_FLAGS = \\\n \t'CC=$(CC)' \\\n \t'CXX=$(CXX)' \\\n \t'DLLTOOL=$(DLLTOOL)' \\\n+\t'GCJ=$(GCJ)' \\\n+\t'GFORTRAN=$(GFORTRAN)' \\\n \t'LD=$(LD)' \\\n \t'LIPO=$(LIPO)' \\\n \t'NM=$(NM)' \\\n@@ -526,20 +552,24 @@ POSTSTAGE1_FLAGS_TO_PASS = \\\n EXTRA_TARGET_FLAGS = \\\n \t'AR=$$(AR_FOR_TARGET)' \\\n \t'AS=$(COMPILER_AS_FOR_TARGET)' \\\n-\t'CC=$$(CC_FOR_TARGET)' \\\n-\t'CFLAGS=$$(CFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n-\t'CXX=$$(CXX_FOR_TARGET)' \\\n-\t'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n+\t'CC=$$(CC_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \\\n+\t'CFLAGS=$$(CFLAGS_FOR_TARGET)' \\\n+\t'CXX=$$(CXX_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \\\n+\t'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET)' \\\n \t'DLLTOOL=$$(DLLTOOL_FOR_TARGET)' \\\n+\t'GCJ=$$(GCJ_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \\\n+\t'GFORTRAN=$$(GFORTRAN_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \\\n \t'LD=$(COMPILER_LD_FOR_TARGET)' \\\n \t'LDFLAGS=$$(LDFLAGS_FOR_TARGET)' \\\n-\t'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n-\t'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \\\n+\t'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET)' \\\n+\t'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET)' \\\n \t'NM=$(COMPILER_NM_FOR_TARGET)' \\\n \t'OBJDUMP=$$(OBJDUMP_FOR_TARGET)' \\\n \t'RANLIB=$$(RANLIB_FOR_TARGET)' \\\n \t'WINDRES=$$(WINDRES_FOR_TARGET)' \\\n-\t'WINDMC=$$(WINDMC_FOR_TARGET)'\n+\t'WINDMC=$$(WINDMC_FOR_TARGET)' \\\n+\t'XGCC_FLAGS_FOR_TARGET=$(XGCC_FLAGS_FOR_TARGET)' \\\n+\t\"TFLAGS=$$TFLAGS\"\n \n TARGET_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS)\n \n@@ -559,6 +589,13 @@ EXTRA_GCC_FLAGS = \\\n \n GCC_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_HOST_FLAGS) $(EXTRA_GCC_FLAGS)\n \n+@if gcc\n+BUILD_CONFIG =\n+ifneq ($(BUILD_CONFIG),)\n+include $(foreach CONFIG, $(BUILD_CONFIG), $(srcdir)/config/$(CONFIG).mk)\n+endif\n+@endif gcc\n+\n .PHONY: configure-host\n configure-host: [+\n   FOR host_modules +] \\\n@@ -582,11 +619,17 @@ all:\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tif [ -f stage_last ]; then \\\n+@if gcc-bootstrap\n+\tif [ -f stage_last ]; then : ; \\\n+\t  TFLAGS=\"$(STAGE$(shell sed s,^stage,, stage_last)_TFLAGS)\"; \\\n \t  $(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target; \\\n \telse \\\n+@endif gcc-bootstrap\n \t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-host all-target; \\\n-\tfi\n+@if gcc-bootstrap\n+\tfi; \\\n+@endif gcc-bootstrap\n+\t:\n \n .PHONY: all-build\n [+ FOR build_modules +]\n@@ -867,6 +910,7 @@ configure-stage[+id+]-[+prefix+][+module+]:\n \t@$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+]\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\"; \\\n \t[+ IF check_multilibs\n \t+]echo \"Checking multilib configuration for [+module+]...\"; \\\n \t$(CC_FOR_TARGET) --print-multi-lib > [+subdir+]/[+module+]/multilib.tmp 2> /dev/null ; \\\n@@ -882,11 +926,14 @@ configure-stage[+id+]-[+prefix+][+module+]:\n \tfi; \\\n \t[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \\\n \t[+exports+][+ IF prev +] \\\n-\t[+poststage1_exports+][+ ENDIF prev +] [+ IF prefix +] \\\n-\tCFLAGS=\"[+stage_libcflags+] $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"[+stage_libcflags+] $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)\"; export CXXFLAGS; [+ ELSE +] \\\n-\tCFLAGS=\"[+stage_cflags+]\"; export CFLAGS; \\\n-\tCXXFLAGS=\"[+stage_cflags+]\"; export CXXFLAGS; [+ ENDIF +] \\\n+\t[+poststage1_exports+][+ ENDIF prev +][+ IF prefix +] \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;[+ ELSE prefix +] \\\n+\tCFLAGS=\"$(STAGE[+id+]_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGE[+id+]_CFLAGS)\"; export CXXFLAGS;[+ IF prev +] \\\n+\tLIBCFLAGS=\"$(STAGE[+id+]_CFLAGS)\"[+ ELSE prev +] \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS)\"[+ ENDIF prev +]; export LIBCFLAGS;[+ ENDIF prefix +] \\\n \techo Configuring stage [+id+] in [+subdir+]/[+module+] ; \\\n \t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n \tcd [+subdir+]/[+module+] || exit 1; \\\n@@ -899,9 +946,10 @@ configure-stage[+id+]-[+prefix+][+module+]:\n \tlibsrcdir=\"$$s/[+module+]\"; \\\n \t$(SHELL) $${libsrcdir}/configure \\\n \t  [+args+] --build=${build_alias} --host=[+host_alias+] \\\n-\t  --target=[+target_alias+] $${srcdiroption} \\\n-\t  [+ IF prev +]--with-build-libsubdir=$(HOST_SUBDIR)[+ ENDIF prev +] \\\n-\t  [+stage_configure_flags+] [+extra_configure_flags+]\n+\t  --target=[+target_alias+] $${srcdiroption} [+ IF prev +]\\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) [+ ENDIF prev +]\\\n+\t  $(STAGE[+id+]_CONFIGURE_FLAGS)[+ IF extra_configure_flags +] \\\n+\t  [+extra_configure_flags+][+ ENDIF extra_configure_flags +]\n @endif [+prefix+][+module+]-bootstrap\n [+ ENDFOR bootstrap_stage +]\n [+ ENDIF bootstrap +]\n@@ -941,16 +989,25 @@ all-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n \t@[ $(current_stage) = stage[+id+] ] || $(MAKE) stage[+id+]-start\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\"; \\\n \t[+exports+][+ IF prev +] \\\n \t[+poststage1_exports+][+ ENDIF prev +] \\\n \tcd [+subdir+]/[+module+] && \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"[+stage_cflags+]\" CXXFLAGS=\"[+stage_cflags+]\" \\\n-\t\tLIBCFLAGS=\"[+stage_libcflags+]\" \\\n-\t\tCFLAGS_FOR_TARGET=\"[+stage_libcflags+]\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"[+stage_libcflags+]\" [+args+] [+\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS)[+ IF prefix +] \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"[+ ELSE prefix +] \\\n+\t\tCFLAGS=\"$(STAGE[+id+]_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGE[+id+]_CFLAGS)\"[+ IF prev +] \\\n+\t\tLIBCFLAGS=\"$(STAGE[+id+]_CFLAGS)\"[+ ELSE prev +] \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS)\"[+ ENDIF prev +][+ ENDIF prefix +] \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t[+args+] [+\n \t\tIF prev +][+poststage1_args+][+ ENDIF prev\n \t\t+] [+extra_make_flags+] \\\n+\t\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\" \\\n \t\t$(TARGET-stage[+id+]-[+prefix+][+module+])\n \n maybe-clean-stage[+id+]-[+prefix+][+module+]: clean-stage[+id+]-[+prefix+][+module+]\n@@ -1408,6 +1465,7 @@ do-clean: clean-stage[+id+]\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\"; \\\n \t$(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target\n \n [+bootstrap-target+]-lean:\n@@ -1418,6 +1476,7 @@ do-clean: clean-stage[+id+]\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\"; \\\n \t$(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target\n [+ ENDIF bootstrap-target +]\n \n@@ -1440,6 +1499,7 @@ distclean-stage[+id+]::\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\"; \\\n \t$(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target\n [+ ENDIF cleanstrap-target +]\n @endif gcc-bootstrap\n@@ -1477,8 +1537,8 @@ stage_current:\n .PHONY: restrap\n restrap::\n \t@: $(MAKE); $(stage)\n-\trm -rf stage1-$(TARGET_SUBDIR) [+ FOR bootstrap-stage +][+ IF prev\n-\t  +]stage[+id+]-* [+ ENDIF prev +][+ ENDFOR bootstrap-stage +]\n+\trm -rf stage1-$(TARGET_SUBDIR)[+ FOR bootstrap-stage +][+ IF prev\n+\t  +] stage[+id+]-*[+ ENDIF prev +][+ ENDFOR bootstrap-stage +]\n restrap:: all\n @endif gcc-bootstrap\n "}, {"sha": "e1ca63e747166025ac61f149155906ae487f62b3", "filename": "config/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1,3 +1,11 @@\n+2009-05-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* multi.m4: Save CXX, GFORTRAN and GCJ in config.status.\n+\t* mt-gnu (CXXFLAGS_FOR_TARGET): Adjust.\n+\t* bootstrap-O1.mk: New.\n+\t* bootstrap-O3.mk: New.\n+\t* bootstrap-debug.mk: New.\n+\n 2009-05-07  Paolo Bonzini\n \n \tSync from src:"}, {"sha": "031645a1251447b6bef8bb6c7054d57ffdd7ff2d", "filename": "config/bootstrap-O1.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fbootstrap-O1.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fbootstrap-O1.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-O1.mk?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -0,0 +1 @@\n+BOOT_CFLAGS := -O1 $(filter-out -O%, $(BOOT_CFLAGS))"}, {"sha": "b269a3f7e12acfc567323339e1745916e6cbaf17", "filename": "config/bootstrap-O3.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fbootstrap-O3.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fbootstrap-O3.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-O3.mk?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -0,0 +1 @@\n+BOOT_CFLAGS := -O3 $(filter-out -O%, $(BOOT_CFLAGS))"}, {"sha": "521be82419432e067f5a04e89493fae54088567d", "filename": "config/bootstrap-debug.mk", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fbootstrap-debug.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fbootstrap-debug.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-debug.mk?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -0,0 +1,2 @@\n+STAGE2_CFLAGS += -g0\n+do-compare = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2"}, {"sha": "15bf41716033a0f68f346b21fc19a9595b80a902", "filename": "config/mt-gnu", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fmt-gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fmt-gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmt-gnu?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1,2 +1 @@\n-CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \\\n-\t$(DEBUG_PREFIX_CFLAGS_FOR_TARGET) -D_GNU_SOURCE\n+CXXFLAGS_FOR_TARGET = $(CXXFLAGS) -D_GNU_SOURCE"}, {"sha": "5b62ecc0aa06d856dceced2b3ac984831ccdf4ae", "filename": "config/multi.m4", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fmulti.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/config%2Fmulti.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmulti.m4?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1,5 +1,5 @@\n ##                                                          -*- Autoconf -*-\n-# Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006\n+# Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2008\n # Free Software Foundation, Inc.\n #\n # This file is free software; the Free Software Foundation\n@@ -62,4 +62,7 @@ with_target_subdir=\"$with_target_subdir\"\n ac_configure_args=\"${multilib_arg} ${ac_configure_args}\"\n multi_basedir=\"$multi_basedir\"\n CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n-CC=\"$CC\"])])dnl\n+CC=\"$CC\"\n+CXX=\"$CXX\"\n+GFORTRAN=\"$GFORTRAN\"\n+GCJ=\"$GCJ\"])])dnl"}, {"sha": "898f87b16b38977dbb561ecf5a59224aaf01ef3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1,3 +1,8 @@\n+2009-05-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR target/37137\n+\t* doc/install.texi (STAGE1_TFLAGS, BUILD_CONFIG): Document.\n+\n 2009-05-12  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tree.c (iterative_hash_pointer): Delete."}, {"sha": "920d569664c37b76e389a5c35eff1a46d9354d71", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1982,7 +1982,7 @@ bootstrapped, you can use @code{CFLAGS_FOR_TARGET} to modify their\n compilation flags, as for non-bootstrapped target libraries.\n Again, if the native compiler miscompiles the stage1 compiler, you may\n need to work around this by avoiding non-working parts of the stage1\n-compiler.  Use @code{STAGE1_LIBCFLAGS} to this end.\n+compiler.  Use @code{STAGE1_TFLAGS} to this end.\n \n If you used the flag @option{--enable-languages=@dots{}} to restrict\n the compilers to be built, only those you've actually enabled will be\n@@ -2006,6 +2006,26 @@ the one you are building on: for example, you could build a\n @code{powerpc64-unknown-linux-gnu} host.  In this case, pass\n @option{--enable-bootstrap} to the configure script.\n \n+@code{BUILD_CONFIG} can be used to bring in additional customization to\n+the build.  It can be set to a whitespace-separated list of names.  For\n+each such @code{NAME}, top-level @file{config/@code{NAME}.mk} will be\n+included by the top-level @file{Makefile}, bringing in any settings it\n+contains.  Some examples are:\n+\n+@table @asis\n+@item @samp{bootstrap-O1}\n+Removes any @option{-O}-started option from @code{BOOT_CFLAGS}, and adds\n+@option{-O1} to it.  @samp{BUILD_CONFIG=bootstrap-O1} is equivalent to\n+@samp{BOOT_CFLAGS='-g -O1'}.\n+\n+@item @samp{bootstrap-O3}\n+Analogous to @code{bootstrap-O1}.\n+\n+@item @samp{bootstrap-debug}\n+Builds stage2 without debug information, and uses\n+@file{contrib/compare-debug} to compare object files.\n+\n+@end table\n \n @section Building a cross compiler\n "}, {"sha": "960e1144f91a17df74ab93c943457e2b79b0a2ac", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1,3 +1,8 @@\n+2009-05-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* Make-lang.in (GCJ): Renamed to...\n+\t(XGCJ): ... this.\n+\n 2009-04-27  Ian Lance Taylor  <iant@google.com>\n \n \t* builtins.c (java_builtins): Add casts to enum type."}, {"sha": "fafa94ae76633d5516ab0a29ec545a97a15c1102", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -44,10 +44,10 @@\n JAVA_INSTALL_NAME := $(shell echo gcj|sed '$(program_transform_name)')\n JAVA_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gcj|sed '$(program_transform_name)')\n \n-GCJ = gcj\n+XGCJ = gcj\n \n # Define the names for selecting java in LANGUAGES.\n-java: jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) jcf-dump$(exeext)\n+java: jc1$(exeext) $(XGCJ)$(exeext) jvgenmain$(exeext) jcf-dump$(exeext)\n \n # Define the name of target independent tools to be installed in $(bindir)\n # Names are subject to changes\n@@ -62,17 +62,17 @@ jvspec.o: $(srcdir)/java/jvspec.c $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \\\n \t\t$(INCLUDES) $(srcdir)/java/jvspec.c $(OUTPUT_OPTION))\n \n-# Create the compiler driver for $(GCJ).\n-$(GCJ)$(exeext): $(GCC_OBJS) jvspec.o java/jcf-path.o version.o \\\n+# Create the compiler driver for $(XGCJ).\n+$(XGCJ)$(exeext): $(GCC_OBJS) jvspec.o java/jcf-path.o version.o \\\n \t   prefix.o intl.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) jvspec.o \\\n \t  java/jcf-path.o prefix.o intl.o \\\n \t  version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n-# Create a version of the $(GCJ) driver which calls the cross-compiler.\n-$(GCJ)-cross$(exeext): $(GCJ)$(exeext)\n-\t-rm -f $(GCJ)-cross$(exeext)\n-\tcp $(GCJ)$(exeext) $(GCJ)-cross$(exeext)\n+# Create a version of the $(XGCJ) driver which calls the cross-compiler.\n+$(XGCJ)-cross$(exeext): $(XGCJ)$(exeext)\n+\t-rm -f $(XGCJ)-cross$(exeext)\n+\tcp $(XGCJ)$(exeext) $(XGCJ)-cross$(exeext)\n \n java.srcextra:\n \n@@ -115,8 +115,8 @@ jvgenmain$(exeext): $(JVGENMAIN_OBJS) $(LIBDEPS)\n #\f\n # Build hooks:\n \n-java.all.cross: $(GCJ)-cross$(exeext)\n-java.start.encap: $(GCJ)$(exeext)\n+java.all.cross: $(XGCJ)-cross$(exeext)\n+java.start.encap: $(XGCJ)$(exeext)\n java.rest.encap:\n \n \n@@ -158,11 +158,11 @@ check-java-subtargets :\n \n # Install gcj as well as the target-independent tools.\n java.install-common: installdirs\n-\t-if [ -f $(GCJ)$(exeext) ]; then \\\n+\t-if [ -f $(XGCJ)$(exeext) ]; then \\\n \t  rm -f $(DESTDIR)$(bindir)/$(JAVA_INSTALL_NAME)$(exeext); \\\n-\t  $(INSTALL_PROGRAM) $(GCJ)$(exeext) $(DESTDIR)$(bindir)/$(JAVA_INSTALL_NAME)$(exeext); \\\n+\t  $(INSTALL_PROGRAM) $(XGCJ)$(exeext) $(DESTDIR)$(bindir)/$(JAVA_INSTALL_NAME)$(exeext); \\\n \t  chmod a+x $(DESTDIR)$(bindir)/$(JAVA_INSTALL_NAME)$(exeext); \\\n-\t  if [ -f $(GCJ)-cross$(exeext) ]; then \\\n+\t  if [ -f $(XGCJ)-cross$(exeext) ]; then \\\n \t    true; \\\n \t  else \\\n \t    rm -f $(DESTDIR)$(bindir)/$(JAVA_TARGET_INSTALL_NAME)$(exeext); \\\n@@ -211,7 +211,7 @@ java.install-pdf: $(JAVA_PDFFILES)\n java.mostlyclean:\n \t-rm -f java/*$(objext) $(DEMANGLER_PROG)\n \t-rm -f java/*$(coverageexts)\n-\t-rm -f jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) \\\n+\t-rm -f jc1$(exeext) $(XGCJ)$(exeext) jvgenmain$(exeext) \\\n           jcf-dump$(exeext) s-java\n java.clean:\n java.distclean:"}, {"sha": "024e018192372a9f08ae232c8c1da4d1a0950cda", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -1,3 +1,9 @@\n+2009-05-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* configure.ac: Insert libgcjdir in the GCJ passed in the\n+\tenvironment, rather than overriding completely.\n+\t* configure: Rebuilt.\n+\n 2009-04-28  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \t* testsuite/libjava.jvmti/jvmti-interp.exp"}, {"sha": "8fa8ed3616d70c13d86790ab3922fe8ff98e8128", "filename": "libjava/configure", "status": "modified", "additions": 47, "deletions": 34, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -5469,23 +5469,33 @@ else\n      which_gcj=path\n   fi\n fi\n+libgcjdir=`${PWDCMD-pwd}`\n+case $GCJ in\n+*\" -B\"*)\n+  # Just in case there is a comma in the build dir, quote it for the\n+  # sed command below.\n+  case $libgcjdir in\n+  *[,\\\\]*) qlibgcjdir=`echo \"$libgcjdir\" | sed 's:[,\\\\]:\\\\&:g'`;;\n+  *) qlibgcjdir=$libgcjdir;;\n+  esac\n+  GCJ=`echo \"$GCJ\" | sed \"s, -B, -B$qlibgcjdir/&,\"`\n+  ;;\n+*)\n+  GCJ=$GCJ\" -B$libgcjdir/\"\n+  ;;\n+esac\n case \"${which_gcj}\" in\n    built)\n-      GCJ=\"$built_gcc_dir/gcj -B`${PWDCMD-pwd}`/ -B$built_gcc_dir/\"\n       GCJH='$(top_builddir)/$(MULTIBUILDTOP)../../$(host_subdir)/gcc/gcjh'\n    ;;\n    cross)\n       if test \"x${with_newlib}\" = \"xyes\"; then\n          # FIXME (comment): Why is this needed?\n          GCC_UNWIND_INCLUDE=\n-         GCJ=\"${target_noncanonical}-gcj\"\n-      else\n-         GCJ=\"${target_noncanonical}-gcj -B`${PWDCMD-pwd}`/\"\n       fi\n       GCJH='$(target_noncanonical)-gcjh'\n    ;;\n    path)\n-      GCJ=\"gcj -B`${PWDCMD-pwd}`/\"\n       GCJH=gcjh\n    ;;\n esac\n@@ -6003,13 +6013,13 @@ if test \"${lt_cv_nm_interface+set}\" = set; then\n else\n   lt_cv_nm_interface=\"BSD nm\"\n   echo \"int some_variable = 0;\" > conftest.$ac_ext\n-  (eval echo \"\\\"\\$as_me:6006: $ac_compile\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:6016: $ac_compile\\\"\" >&5)\n   (eval \"$ac_compile\" 2>conftest.err)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:6009: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:6019: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n   (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:6012: output\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:6022: output\\\"\" >&5)\n   cat conftest.out >&5\n   if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n     lt_cv_nm_interface=\"MS dumpbin\"\n@@ -7156,7 +7166,7 @@ ia64-*-hpux*)\n   ;;\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 7159 \"configure\"' > conftest.$ac_ext\n+  echo '#line 7169 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -9539,11 +9549,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:9542: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:9552: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:9546: \\$? = $ac_status\" >&5\n+   echo \"$as_me:9556: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -9878,11 +9888,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:9881: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:9891: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:9885: \\$? = $ac_status\" >&5\n+   echo \"$as_me:9895: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -9983,11 +9993,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:9986: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:9996: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:9990: \\$? = $ac_status\" >&5\n+   echo \"$as_me:10000: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -10038,11 +10048,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:10041: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:10051: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:10045: \\$? = $ac_status\" >&5\n+   echo \"$as_me:10055: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -12905,7 +12915,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12908 \"configure\"\n+#line 12918 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13001,7 +13011,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13004 \"configure\"\n+#line 13014 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15027,11 +15037,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:15030: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:15040: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:15034: \\$? = $ac_status\" >&5\n+   echo \"$as_me:15044: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -15126,11 +15136,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:15129: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:15139: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:15133: \\$? = $ac_status\" >&5\n+   echo \"$as_me:15143: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -15178,11 +15188,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:15181: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:15191: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:15185: \\$? = $ac_status\" >&5\n+   echo \"$as_me:15195: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -16595,11 +16605,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16598: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16608: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:16602: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16612: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -16928,11 +16938,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:16931: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:16941: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:16935: \\$? = $ac_status\" >&5\n+   echo \"$as_me:16945: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -17027,11 +17037,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:17030: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:17040: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:17034: \\$? = $ac_status\" >&5\n+   echo \"$as_me:17044: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -17079,11 +17089,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:17082: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:17092: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:17086: \\$? = $ac_status\" >&5\n+   echo \"$as_me:17096: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -18775,7 +18785,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then\n   :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 18778 \"configure\"\n+#line 18788 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -29106,6 +29116,9 @@ ac_configure_args=\"${multilib_arg} ${ac_configure_args}\"\n multi_basedir=\"$multi_basedir\"\n CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n CC=\"$CC\"\n+CXX=\"$CXX\"\n+GFORTRAN=\"$GFORTRAN\"\n+GCJ=\"$GCJ\"\n AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"\n \n "}, {"sha": "3074a0c0fd481bfc6beaa07fae5e4ebddd67181f", "filename": "libjava/configure.ac", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4a4e99330f1586681a5e28cb88a6352f89f833/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4a4e99330f1586681a5e28cb88a6352f89f833/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=4a4a4e99330f1586681a5e28cb88a6352f89f833", "patch": "@@ -409,23 +409,33 @@ else\n      which_gcj=path\n   fi\n fi\n+libgcjdir=`${PWDCMD-pwd}`\n+case $GCJ in\n+*\" -B\"*)\n+  # Just in case there is a comma in the build dir, quote it for the\n+  # sed command below.\n+  case $libgcjdir in\n+  *[[,\\\\]]*) qlibgcjdir=`echo \"$libgcjdir\" | sed 's:[[,\\\\]]:\\\\&:g'`;;\n+  *) qlibgcjdir=$libgcjdir;;\n+  esac\n+  GCJ=`echo \"$GCJ\" | sed \"s, -B, -B$qlibgcjdir/&,\"`\n+  ;;\n+*)\n+  GCJ=$GCJ\" -B$libgcjdir/\"\n+  ;;\n+esac\n case \"${which_gcj}\" in\n    built)\n-      GCJ=\"$built_gcc_dir/gcj -B`${PWDCMD-pwd}`/ -B$built_gcc_dir/\"\n       GCJH='$(top_builddir)/$(MULTIBUILDTOP)../../$(host_subdir)/gcc/gcjh'\n    ;;\n    cross)\n       if test \"x${with_newlib}\" = \"xyes\"; then\n          # FIXME (comment): Why is this needed?\n          GCC_UNWIND_INCLUDE=\n-         GCJ=\"${target_noncanonical}-gcj\"\n-      else\n-         GCJ=\"${target_noncanonical}-gcj -B`${PWDCMD-pwd}`/\"\n       fi\n       GCJH='$(target_noncanonical)-gcjh'\n    ;;\n    path)\n-      GCJ=\"gcj -B`${PWDCMD-pwd}`/\"\n       GCJH=gcjh\n    ;;\n esac"}]}