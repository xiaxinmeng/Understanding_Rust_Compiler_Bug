{"sha": "c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkNzA5NDZiM2M5ZjEwY2ZkNTYwNDA3YWFjOGIwYjQ1MTVmMTBiNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-03-05T23:48:06Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-03-05T23:48:06Z"}, "message": "c: ignore initializers for elements of variable-size types [PR93577]\n\nBug 93577, apparently a regression (although it isn't very clear to me\nexactly when it was introduced; tests I made with various past\ncompilers produced inconclusive results, including e.g. ICEs appearing\nwith 64-bit-host compilers for some versions but not 32-bit-host\ncompilers for the same versions) is an C front-end tree-checking ICE\nprocessing initializers for structs using the VLA-in-struct extension.\nThere is an error for such initializers, but other processing that\nstill takes place for them results in the ICE.\n\nThis patch ensures that processing of initializers for variable-size\ntypes stops earlier to avoid the code that results in the ICE (and\nensures it stops earlier for error_mark_node to avoid ICEs in the\ncheck for variable-size types), adjusts the conditions for the \"empty\nscalar initializer\" diagnostic to avoid consequent excess errors in\nthe case of a bad type name, and adds tests for a few variations on\nwhat such initializers might look like, as well as tests for cases\nidentified from ICEs seen with an earlier version of this patch.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\n\tPR c/93577\ngcc/c:\n\t* c-typeck.c (pop_init_level): Do not diagnose initializers as\n\tempty when initialized type is error_mark_node.\n\t(set_designator, process_init_element): Ignore initializers for\n\telements of a variable-size type or of error_mark_node.\n\ngcc/testsuite:\n\t* gcc.dg/pr93577-1.c, gcc.dg/pr93577-2.c, gcc.dg/pr93577-3.c,\n\tgcc.dg/pr93577-4.c, gcc.dg/pr93577-5.c, gcc.dg/pr93577-6.c: New\n\ttests.\n\t* gcc.dg/vla-init-1.c: Expect fewer errors about VLA initializer.", "tree": {"sha": "7c33f8f5efb0edd9f96cdbd80efd4cb0eca7b813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c33f8f5efb0edd9f96cdbd80efd4cb0eca7b813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c044c65773398096c3fe7d396b0a95eb8b97e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c044c65773398096c3fe7d396b0a95eb8b97e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c044c65773398096c3fe7d396b0a95eb8b97e17"}], "stats": {"total": 128, "additions": 121, "deletions": 7}, "files": [{"sha": "5b8236ddb09861ddd4e507a34b4d65451eb175cc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -1,3 +1,11 @@\n+2020-03-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/93577\n+\t* c-typeck.c (pop_init_level): Do not diagnose initializers as\n+\tempty when initialized type is error_mark_node.\n+\t(set_designator, process_init_element): Ignore initializers for\n+\telements of a variable-size type or of error_mark_node.\n+\n 2020-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/93926"}, {"sha": "d8025de1996ddde77c89392495d181740722514e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -8759,7 +8759,7 @@ pop_init_level (location_t loc, int implicit,\n \t the element, after verifying there is just one.  */\n       if (vec_safe_is_empty (constructor_elements))\n \t{\n-\t  if (!constructor_erroneous)\n+\t  if (!constructor_erroneous && constructor_type != error_mark_node)\n \t    error_init (loc, \"empty scalar initializer\");\n \t  ret.value = error_mark_node;\n \t}\n@@ -8836,15 +8836,21 @@ set_designator (location_t loc, bool array,\n   enum tree_code subcode;\n \n   /* Don't die if an entire brace-pair level is superfluous\n-     in the containing level.  */\n-  if (constructor_type == NULL_TREE)\n+     in the containing level, or for an erroneous type.  */\n+  if (constructor_type == NULL_TREE || constructor_type == error_mark_node)\n     return true;\n \n   /* If there were errors in this designator list already, bail out\n      silently.  */\n   if (designator_erroneous)\n     return true;\n \n+  /* Likewise for an initializer for a variable-size type.  Those are\n+     diagnosed in digest_init.  */\n+  if (COMPLETE_TYPE_P (constructor_type)\n+      && TREE_CODE (TYPE_SIZE (constructor_type)) != INTEGER_CST)\n+    return true;\n+\n   if (!designator_depth)\n     {\n       gcc_assert (!constructor_range_stack);\n@@ -9955,8 +9961,14 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n     }\n \n   /* Ignore elements of a brace group if it is entirely superfluous\n-     and has already been diagnosed.  */\n-  if (constructor_type == NULL_TREE)\n+     and has already been diagnosed, or if the type is erroneous.  */\n+  if (constructor_type == NULL_TREE || constructor_type == error_mark_node)\n+    return;\n+\n+  /* Ignore elements of an initializer for a variable-size type.\n+     Those are diagnosed in digest_init.  */\n+  if (COMPLETE_TYPE_P (constructor_type)\n+      && TREE_CODE (TYPE_SIZE (constructor_type)) != INTEGER_CST)\n     return;\n \n   if (!implicit && warn_designated_init && !was_designated"}, {"sha": "1ff727f9e09e51c0fdc990e029dd71925e716da4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -1,3 +1,11 @@\n+2020-03-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/93577\n+\t* gcc.dg/pr93577-1.c, gcc.dg/pr93577-2.c, gcc.dg/pr93577-3.c,\n+\tgcc.dg/pr93577-4.c, gcc.dg/pr93577-5.c, gcc.dg/pr93577-6.c: New\n+\ttests.\n+\t* gcc.dg/vla-init-1.c: Expect fewer errors about VLA initializer.\n+\n 2020-03-05  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/91890"}, {"sha": "31023d79d99c2106cac5d1768601d777a440ffe2", "filename": "gcc/testsuite/gcc.dg/pr93577-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-1.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -0,0 +1,16 @@\n+/* Test ICE with variable-size struct initializer: bug 93577.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void\n+f (int c)\n+{\n+  struct s\n+  {\n+    int x[c];\n+    struct\n+    {\n+      int z;\n+    } nest;\n+  } v = { 1, 2 }; /* { dg-error \"variable-sized object may not be initialized\" } */\n+}"}, {"sha": "c61589ea670904db0bd2f10129d0fbc922f2f0db", "filename": "gcc/testsuite/gcc.dg/pr93577-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-2.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -0,0 +1,16 @@\n+/* Test ICE with variable-size struct initializer: bug 93577.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void\n+f (int c)\n+{\n+  struct s\n+  {\n+    int x[c];\n+    struct\n+    {\n+      int a, b;\n+    } nest;\n+  } v = { .nest.b = 1, .nest.a = 2 }; /* { dg-error \"variable-sized object may not be initialized\" } */\n+}"}, {"sha": "278146b16bd777c58ca6fb6b702a5e4478004f3e", "filename": "gcc/testsuite/gcc.dg/pr93577-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-3.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -0,0 +1,17 @@\n+/* Test ICE with variable-size struct initializer: bug 93577.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void\n+f (int c)\n+{\n+  struct s\n+  {\n+    int a;\n+    int x[c];\n+    struct\n+    {\n+      int a, b;\n+    } nest;\n+  } v = { .a = 2, .nest.b = 1 }; /* { dg-error \"variable-sized object may not be initialized\" } */\n+}"}, {"sha": "0ac117c4d7761c446032b020215a873db95fc710", "filename": "gcc/testsuite/gcc.dg/pr93577-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-4.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -0,0 +1,17 @@\n+/* Test ICE with variable-size struct initializer: bug 93577.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void\n+f (int c)\n+{\n+  struct s\n+  {\n+    int a;\n+    int x[c];\n+    struct\n+    {\n+      int a, b;\n+    } nest;\n+  } v[2] = { [1].nest.b = 1 }; /* { dg-error \"variable-sized object may not be initialized\" } */\n+}"}, {"sha": "68dfc1faaaaadcbb0531aea90ead0440446525dc", "filename": "gcc/testsuite/gcc.dg/pr93577-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-5.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -0,0 +1,11 @@\n+/* Test ICE with designated initializer in compound literal with bad\n+   type name (ICE seen with early version of fix for bug 93577 but not\n+   covered in other tests).  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void *\n+f (void)\n+{\n+  return &(const bad_type) { .a = 0 }; /* { dg-error \"unknown type name\" } */\n+}"}, {"sha": "5ec668fd4df7bc8b451ea67e5bb39721c194f157", "filename": "gcc/testsuite/gcc.dg/pr93577-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93577-6.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -0,0 +1,11 @@\n+/* Test ICE with designated initializer in compound literal with bad\n+   type name (ICE seen with early version of fix for bug 93577 but not\n+   covered in other tests).  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void *\n+f (void)\n+{\n+  return &(const bad_type) { [0] = 0 }; /* { dg-error \"unknown type name\" } */\n+}"}, {"sha": "3125b703451223128f27d0b4f39ad832d546b7a2", "filename": "gcc/testsuite/gcc.dg/vla-init-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d70946b3c9f10cfd560407aac8b0b4515f10b6/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c?ref=c9d70946b3c9f10cfd560407aac8b0b4515f10b6", "patch": "@@ -10,6 +10,4 @@ void\n foo (void)\n {\n   int x[a] = { 1 }; /* { dg-error \"variable-sized object may not be initialized\" \"VLA init\" } */\n-  /* { dg-warning \"excess elements in array initializer\" \"excess\" { target *-*-* } .-1 } */\n-  /* { dg-message \"near initialization\" \"near\" { target *-*-* } .-2 } */\n }"}]}