{"sha": "c7a69424c90fc575a08ac9a5bbf000cc152f3eae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdhNjk0MjRjOTBmYzU3NWEwOGFjOWE1YmJmMDAwY2MxNTJmM2VhZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-06-02T12:49:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-06-02T12:49:07Z"}, "message": "i386.md (\"sse4_1_blendvpd\"): Require \"z\" class XMM register for operand[3].\n\n        * config/i386/i386.md (\"sse4_1_blendvpd\"): Require \"z\" class XMM\n        register for operand[3].  Adjust asm template.\n        (\"sse4_1_blendvpd\"): Ditto.\n        (\"sse4_1_pblendvb\"): Ditto.\n        * config/i386/i386.c (ix86_expand_sse_4_operands_builtin): Call\n        safe_vector_operand() if input operand is VECTOR_MODE_P operand. Do not\n        force operands[3] into xmm0 register for variable blend instructions.\n        (ix86_expand_sse_pcmpestr): Do not check operands for\n        \"register_operand\", when insn operand predicate is \"register_operand\".\n        (ix86_expand_sse_pcmpistr): Ditto.\n\nFrom-SVN: r125280", "tree": {"sha": "86bd7ef1dcb220868861b747ce7ae14c1d658b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86bd7ef1dcb220868861b747ce7ae14c1d658b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7a69424c90fc575a08ac9a5bbf000cc152f3eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a69424c90fc575a08ac9a5bbf000cc152f3eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a69424c90fc575a08ac9a5bbf000cc152f3eae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a69424c90fc575a08ac9a5bbf000cc152f3eae/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06f4e35d821a7f9b36961c55b000a802e5e3a0f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f4e35d821a7f9b36961c55b000a802e5e3a0f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f4e35d821a7f9b36961c55b000a802e5e3a0f5"}], "stats": {"total": 113, "additions": 59, "deletions": 54}, "files": [{"sha": "64d203c6d2a0c540bc74ddab5481e4c080f83164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a69424c90fc575a08ac9a5bbf000cc152f3eae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a69424c90fc575a08ac9a5bbf000cc152f3eae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7a69424c90fc575a08ac9a5bbf000cc152f3eae", "patch": "@@ -1,3 +1,16 @@\n+2007-06-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (\"sse4_1_blendvpd\"): Require \"z\" class XMM\n+\tregister for operand[3].  Adjust asm template.\n+\t(\"sse4_1_blendvpd\"): Ditto.\n+\t(\"sse4_1_pblendvb\"): Ditto.\n+\t* config/i386/i386.c (ix86_expand_sse_4_operands_builtin): Call\n+\tsafe_vector_operand() if input operand is VECTOR_MODE_P operand. Do not\n+\tforce operands[3] into xmm0 register for variable blend instructions.\n+\t(ix86_expand_sse_pcmpestr): Do not check operands for\n+\t\"register_operand\", when insn operand predicate is \"register_operand\".\n+\t(ix86_expand_sse_pcmpistr): Ditto.\n+\n 2007-06-02  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "64fb97ed89f0f6af7ebfca6df9f70243820fd5bf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 40, "deletions": 48, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a69424c90fc575a08ac9a5bbf000cc152f3eae/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a69424c90fc575a08ac9a5bbf000cc152f3eae/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c7a69424c90fc575a08ac9a5bbf000cc152f3eae", "patch": "@@ -16929,8 +16929,7 @@ static const struct builtin_description bdesc_crc32[] =\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32di, 0, IX86_BUILTIN_CRC32DI, 0, 0 },\n };\n \n-/* SSE builtins with 3 arguments and the last argument must be a 8 bit\n-   constant or xmm0.  */\n+/* SSE builtins with 3 arguments and the last argument must be an immediate or xmm0.  */\n static const struct builtin_description bdesc_sse_3arg[] =\n {\n   /* SSE4.1 */\n@@ -18279,51 +18278,48 @@ ix86_expand_sse_4_operands_builtin (enum insn_code icode, tree exp,\n   rtx op1 = expand_normal (arg1);\n   rtx op2 = expand_normal (arg2);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n-  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n-  enum machine_mode mode2;\n-  rtx xmm0;\n-\n-  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n-    op0 = copy_to_mode_reg (mode0, op0);\n-  if ((optimize && !register_operand (op1, mode1))\n-      || !(*insn_data[icode].operand[2].predicate) (op1, mode1))\n-    op1 = copy_to_mode_reg (mode1, op1);\n+  enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode2 = insn_data[icode].operand[2].mode;\n+  enum machine_mode mode3 = insn_data[icode].operand[3].mode;\n \n-  switch (icode)\n-    {\n-    case CODE_FOR_sse4_1_blendvpd:\n-    case CODE_FOR_sse4_1_blendvps:\n-    case CODE_FOR_sse4_1_pblendvb:\n-      /* The third argument of variable blends must be xmm0.  */\n-      xmm0 = gen_rtx_REG (tmode, FIRST_SSE_REG);\n-      emit_move_insn (xmm0, op2);\n-      op2 = xmm0;\n-      break;\n-    default:\n-      mode2 = insn_data[icode].operand[2].mode;\n-      if (! (*insn_data[icode].operand[3].predicate) (op2, mode2))\n-\t{\n-\t  switch (icode)\n-\t    {\n-\t    case CODE_FOR_sse4_1_roundsd:\n-\t    case CODE_FOR_sse4_1_roundss:\n-\t      error (\"the third argument must be a 4-bit immediate\");\n-\t      break;\n-\t    default:\n-\t      error (\"the third argument must be a 8-bit immediate\");\n-\t      break;\n-\t    }\n-\t  return const0_rtx;\n-\t}\n-      break;\n-    }\n+  if (VECTOR_MODE_P (mode1))\n+    op0 = safe_vector_operand (op0, mode1);\n+  if (VECTOR_MODE_P (mode2))\n+    op1 = safe_vector_operand (op1, mode2);\n+  if (VECTOR_MODE_P (mode3))\n+    op2 = safe_vector_operand (op2, mode3);\n \n   if (optimize\n       || target == 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n     target = gen_reg_rtx (tmode);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n+    op0 = copy_to_mode_reg (mode1, op0);\n+  if ((optimize && !register_operand (op1, mode2))\n+      || !(*insn_data[icode].operand[2].predicate) (op1, mode2))\n+    op1 = copy_to_mode_reg (mode2, op1);\n+\n+  if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n+    switch (icode)\n+      {\n+      case CODE_FOR_sse4_1_blendvpd:\n+      case CODE_FOR_sse4_1_blendvps:\n+      case CODE_FOR_sse4_1_pblendvb:\n+\top2 = copy_to_mode_reg (mode3, op2);\n+\tbreak;\n+\n+      case CODE_FOR_sse4_1_roundsd:\n+      case CODE_FOR_sse4_1_roundss:\n+\terror (\"the third argument must be a 4-bit immediate\");\n+\treturn const0_rtx;\n+\n+      default:\n+\terror (\"the third argument must be an 8-bit immediate\");\n+\treturn const0_rtx;\n+      }\n+\n   pat = GEN_FCN (icode) (target, op0, op1, op2);\n   if (! pat)\n     return 0;\n@@ -18732,17 +18728,14 @@ ix86_expand_sse_pcmpestr (const struct builtin_description *d,\n   if (VECTOR_MODE_P (modev4))\n     op2 = safe_vector_operand (op2, modev4);\n \n-  if ((optimize && !register_operand (op0, modev2))\n-      || !(*insn_data[d->icode].operand[2].predicate) (op0, modev2))\n+  if (! (*insn_data[d->icode].operand[2].predicate) (op0, modev2))\n     op0 = copy_to_mode_reg (modev2, op0);\n-  if ((optimize && !register_operand (op1, modei3))\n-      || !(*insn_data[d->icode].operand[3].predicate) (op1, modei3))\n+  if (! (*insn_data[d->icode].operand[3].predicate) (op1, modei3))\n     op1 = copy_to_mode_reg (modei3, op1);\n   if ((optimize && !register_operand (op2, modev4))\n       || !(*insn_data[d->icode].operand[4].predicate) (op2, modev4))\n     op2 = copy_to_mode_reg (modev4, op2);\n-  if ((optimize && !register_operand (op3, modei5))\n-      || !(*insn_data[d->icode].operand[5].predicate) (op3, modei5))\n+  if (! (*insn_data[d->icode].operand[5].predicate) (op3, modei5))\n     op3 = copy_to_mode_reg (modei5, op3);\n \n   if (! (*insn_data[d->icode].operand[6].predicate) (op4, modeimm))\n@@ -18833,8 +18826,7 @@ ix86_expand_sse_pcmpistr (const struct builtin_description *d,\n   if (VECTOR_MODE_P (modev3))\n     op1 = safe_vector_operand (op1, modev3);\n \n-  if ((optimize && !register_operand (op0, modev2))\n-      || !(*insn_data[d->icode].operand[2].predicate) (op0, modev2))\n+  if (! (*insn_data[d->icode].operand[2].predicate) (op0, modev2))\n     op0 = copy_to_mode_reg (modev2, op0);\n   if ((optimize && !register_operand (op1, modev3))\n       || !(*insn_data[d->icode].operand[3].predicate) (op1, modev3))"}, {"sha": "1f8086f99c79ddcf4f08057f83f9c835ca0da2b7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a69424c90fc575a08ac9a5bbf000cc152f3eae/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a69424c90fc575a08ac9a5bbf000cc152f3eae/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c7a69424c90fc575a08ac9a5bbf000cc152f3eae", "patch": "@@ -5844,10 +5844,10 @@\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\"  \"0\")\n \t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")\n-\t\t      (reg:V2DF 21)]\n+\t\t      (match_operand:V2DF 3 \"register_operand\" \"z\")]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"blendvpd\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n+  \"blendvpd\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2DF\")])\n@@ -5856,10 +5856,10 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")\n-\t\t      (reg:V4SF 21)]\n+\t\t      (match_operand:V4SF 3 \"register_operand\" \"z\")]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"blendvps\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n+  \"blendvps\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n@@ -5927,10 +5927,10 @@\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\"  \"0\")\n \t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")\n-\t\t       (reg:V16QI 21)]\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"z\")]\n \t\t      UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n-  \"pblendvb\\t{%%xmm0, %2, %0|%0, %2, %%xmm0}\"\n+  \"pblendvb\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])"}]}