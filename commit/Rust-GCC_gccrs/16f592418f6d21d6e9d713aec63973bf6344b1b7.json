{"sha": "16f592418f6d21d6e9d713aec63973bf6344b1b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZmNTkyNDE4ZjZkMjFkNmU5ZDcxM2FlYzYzOTczYmY2MzQ0YjFiNw==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-11-23T00:35:38Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-11-23T00:35:38Z"}, "message": "2004-11-22  James A. Morrison  <phython@gcc.gnu.org\n\n        * config/sparc/sparc.c: Include insn-codes.h and langhooks.h.\n        (sparc_init_builtins): New function.\n        (sparc_init_vis_builtins): Create builtin functions for VIS\n        instructions.\n        (sparc_expand_builtin): Expand builtin functions for VIS instructions.\n        (TARGET_INIT_BUILTINS): Define to sparc_init_builtins.\n        (TARGET_EXPAND_BUILTIN): Define to sparc_expand_builtin.\n        (def_builtin): New macro for creating builtin functions.\n        (P): New mode macro for pointer types.\n        (UNSPEC_FPACK16, UNSPEC_FPACK32, UNSPEC_FPACKFIX, UNSPEC_FEXPAND,\n        UNSPEC_FPMERGE, UNSPEC_MUL16AL, UNSPEC_MUL8UL, UNSPEC_MULDUL,\n        UNSPEC_ALIGNDATA, UNSPEC_ALIGNADDR, UNSPEC_PDIST): New constants.\n        (fpack16_vis, fpackfix_vis, fpack32_vis, fexpand_vis, fpmerge_vis,\n        fmul8x16_vis, fmul8x16au_vis, fmul8x16al_vis, fmul8sux16_vis,\n        fmul8ulx16_vis, fmuld8sux16_vis, fmuld8ulx16_vis, pdist_vis,\n        faligndata<V64:mode>_vis, alignaddr<P:mode>_vis): New patterns.\n\ntestsuite:\n        * gcc.target/sparc/align.c, gcc.target/sparc/combined-2.c,\n        gcc.target/sparc/fpack16.c, gcc.target/sparc/fpack32.c,\n        gcc.target/sparc/fpackfix.c, gcc.target/fexpand.c,\n        gcc.target/sparc/fpmerge.c, gcc.target/sparc/fpmul.c,\n        gcc.target/sparc/pdist.c: New tests.\n\nFrom-SVN: r91057", "tree": {"sha": "f8e466895eabdaea724ca0e1612370f5426f38db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e466895eabdaea724ca0e1612370f5426f38db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16f592418f6d21d6e9d713aec63973bf6344b1b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f592418f6d21d6e9d713aec63973bf6344b1b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16f592418f6d21d6e9d713aec63973bf6344b1b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16f592418f6d21d6e9d713aec63973bf6344b1b7/comments", "author": null, "committer": null, "parents": [{"sha": "3174451e1627ac2b8dc30f20404eb871d3cece5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3174451e1627ac2b8dc30f20404eb871d3cece5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3174451e1627ac2b8dc30f20404eb871d3cece5c"}], "stats": {"total": 532, "additions": 532, "deletions": 0}, "files": [{"sha": "ca6009f69d1cdaa1c2baa79bea21ef3b3802ba35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -1,3 +1,22 @@\n+2004-11-22  James A. Morrison  <phython@gcc.gnu.org\n+\n+\t* config/sparc/sparc.c: Include insn-codes.h and langhooks.h.\n+\t(sparc_init_builtins): New function.\n+\t(sparc_init_vis_builtins): Create builtin functions for VIS\n+\tinstructions.\n+\t(sparc_expand_builtin): Expand builtin functions for VIS instructions.\n+\t(TARGET_INIT_BUILTINS): Define to sparc_init_builtins.\n+\t(TARGET_EXPAND_BUILTIN): Define to sparc_expand_builtin.\n+\t(def_builtin): New macro for creating builtin functions.\n+\t(P): New mode macro for pointer types.\n+\t(UNSPEC_FPACK16, UNSPEC_FPACK32, UNSPEC_FPACKFIX, UNSPEC_FEXPAND,\n+\tUNSPEC_FPMERGE, UNSPEC_MUL16AL, UNSPEC_MUL8UL, UNSPEC_MULDUL,\n+\tUNSPEC_ALIGNDATA, UNSPEC_ALIGNADDR, UNSPEC_PDIST): New constants.\n+\t(fpack16_vis, fpackfix_vis, fpack32_vis, fexpand_vis, fpmerge_vis,\n+\tfmul8x16_vis, fmul8x16au_vis, fmul8x16al_vis, fmul8sux16_vis,\n+\tfmul8ulx16_vis, fmuld8sux16_vis, fmuld8ulx16_vis, pdist_vis,\n+\tfaligndata<V64:mode>_vis, alignaddr<P:mode>_vis): New patterns.\n+\n 2004-11-22  Devang Patel  <dpatel@apple.com>\n \n \t* tree-if-conv.c (clean_predicate_lists): Clean all basic blocks."}, {"sha": "4ab98d85bdefbddbc40cad2002a91f611952c45c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"hard-reg-set.h\"\n #include \"real.h\"\n #include \"insn-config.h\"\n+#include \"insn-codes.h\"\n #include \"conditions.h\"\n #include \"output.h\"\n #include \"insn-attr.h\"\n@@ -48,6 +49,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target-def.h\"\n #include \"cfglayout.h\"\n #include \"tree-gimple.h\"\n+#include \"langhooks.h\"\n \n /* Processor costs */\n static const\n@@ -332,6 +334,9 @@ static void emit_hard_tfmode_operation (enum rtx_code, rtx *);\n \n static bool sparc_function_ok_for_sibcall (tree, tree);\n static void sparc_init_libfuncs (void);\n+static void sparc_init_builtins (void);\n+static void sparc_vis_init_builtins (void);\n+static rtx sparc_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void sparc_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t   HOST_WIDE_INT, tree);\n static bool sparc_can_output_mi_thunk (tree, HOST_WIDE_INT,\n@@ -417,6 +422,11 @@ enum processor_type sparc_cpu;\n \n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS sparc_init_libfuncs\n+#undef TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS sparc_init_builtins\n+\n+#undef TARGET_EXPAND_BUILTIN\n+#define TARGET_EXPAND_BUILTIN sparc_expand_builtin\n \n #ifdef HAVE_AS_TLS\n #undef TARGET_HAVE_TLS\n@@ -8446,6 +8456,163 @@ sparc_init_libfuncs (void)\n   gofast_maybe_init_libfuncs ();\n }\n \f\n+#define def_builtin(NAME, CODE, TYPE) \\\n+  lang_hooks.builtin_function((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL, \\\n+                              NULL_TREE)\n+\n+/* Implement the TARGET_INIT_BUILTINS target hook.\n+   Create builtin functions for special SPARC instructions.  */\n+\n+static void\n+sparc_init_builtins (void)\n+{\n+  if (TARGET_VIS)\n+    sparc_vis_init_builtins ();\n+}\n+\n+/* Create builtin functions for VIS 1.0 instructions.  */\n+\n+static void\n+sparc_vis_init_builtins (void)\n+{\n+  tree v4qi = build_vector_type (unsigned_intQI_type_node, 4);\n+  tree v8qi = build_vector_type (unsigned_intQI_type_node, 8);\n+  tree v4hi = build_vector_type (intHI_type_node, 4);\n+  tree v2hi = build_vector_type (intHI_type_node, 2);\n+  tree v2si = build_vector_type (intSI_type_node, 2);\n+\n+  tree v4qi_ftype_v4hi = build_function_type_list (v4qi, v4hi, 0);\n+  tree v8qi_ftype_v2si_v8qi = build_function_type_list (v8qi, v2si, v8qi, 0);\n+  tree v2hi_ftype_v2si = build_function_type_list (v2hi, v2si, 0);\n+  tree v4hi_ftype_v4qi = build_function_type_list (v4hi, v4qi, 0);\n+  tree v8qi_ftype_v4qi_v4qi = build_function_type_list (v8qi, v4qi, v4qi, 0);\n+  tree v4hi_ftype_v4qi_v4hi = build_function_type_list (v4hi, v4qi, v4hi, 0);\n+  tree v4hi_ftype_v4qi_v2hi = build_function_type_list (v4hi, v4qi, v2hi, 0);\n+  tree v2si_ftype_v4qi_v2hi = build_function_type_list (v2si, v4qi, v2hi, 0);\n+  tree v4hi_ftype_v8qi_v4hi = build_function_type_list (v4hi, v8qi, v4hi, 0);\n+  tree v4hi_ftype_v4hi_v4hi = build_function_type_list (v4hi, v4hi, v4hi, 0);\n+  tree v2si_ftype_v2si_v2si = build_function_type_list (v2si, v2si, v2si, 0);\n+  tree v8qi_ftype_v8qi_v8qi = build_function_type_list (v8qi, v8qi, v8qi, 0);\n+  tree di_ftype_v8qi_v8qi_di = build_function_type_list (intDI_type_node,\n+\t\t\t\t\t\t\t v8qi, v8qi,\n+\t\t\t\t\t\t\t intDI_type_node, 0);\n+  tree di_ftype_di_di = build_function_type_list (intDI_type_node,\n+\t\t\t\t\t\t  intDI_type_node,\n+\t\t\t\t\t\t  intDI_type_node, 0);\n+  tree ptr_ftype_ptr_si = build_function_type_list (ptr_type_node,\n+\t\t        \t\t\t    ptr_type_node,\n+\t\t\t\t\t            intSI_type_node, 0);\n+  tree ptr_ftype_ptr_di = build_function_type_list (ptr_type_node,\n+\t\t        \t\t\t    ptr_type_node,\n+\t\t\t\t\t            intDI_type_node, 0);\n+\n+  /* Packing and expanding vectors.  */\n+  def_builtin (\"__builtin_vis_fpack16\", CODE_FOR_fpack16_vis, v4qi_ftype_v4hi);\n+  def_builtin (\"__builtin_vis_fpack32\", CODE_FOR_fpack32_vis,\n+\t       v8qi_ftype_v2si_v8qi);\n+  def_builtin (\"__builtin_vis_fpackfix\", CODE_FOR_fpackfix_vis,\n+\t       v2hi_ftype_v2si);\n+  def_builtin (\"__builtin_vis_fexpand\", CODE_FOR_fexpand_vis, v4hi_ftype_v4qi);\n+  def_builtin (\"__builtin_vis_fpmerge\", CODE_FOR_fpmerge_vis,\n+\t       v8qi_ftype_v4qi_v4qi);\n+\n+  /* Multiplications.  */\n+  def_builtin (\"__builtin_vis_fmul8x16\", CODE_FOR_fmul8x16_vis,\n+\t       v4hi_ftype_v4qi_v4hi);\n+  def_builtin (\"__builtin_vis_fmul8x16au\", CODE_FOR_fmul8x16au_vis,\n+\t       v4hi_ftype_v4qi_v2hi);\n+  def_builtin (\"__builtin_vis_fmul8x16al\", CODE_FOR_fmul8x16al_vis,\n+\t       v4hi_ftype_v4qi_v2hi);\n+  def_builtin (\"__builtin_vis_fmul8sux16\", CODE_FOR_fmul8sux16_vis,\n+\t       v4hi_ftype_v8qi_v4hi);\n+  def_builtin (\"__builtin_vis_fmul8ulx16\", CODE_FOR_fmul8ulx16_vis,\n+\t       v4hi_ftype_v8qi_v4hi);\n+  def_builtin (\"__builtin_vis_fmuld8sux16\", CODE_FOR_fmuld8sux16_vis,\n+\t       v2si_ftype_v4qi_v2hi);\n+  def_builtin (\"__builtin_vis_fmuld8ulx16\", CODE_FOR_fmuld8ulx16_vis,\n+\t       v2si_ftype_v4qi_v2hi);\n+\n+  /* Data aligning.  */\n+  def_builtin (\"__builtin_vis_faligndatav4hi\", CODE_FOR_faligndatav4hi_vis,\n+\t       v4hi_ftype_v4hi_v4hi);\n+  def_builtin (\"__builtin_vis_faligndatav8qi\", CODE_FOR_faligndatav8qi_vis,\n+\t       v8qi_ftype_v8qi_v8qi);\n+  def_builtin (\"__builtin_vis_faligndatav2si\", CODE_FOR_faligndatav2si_vis,\n+\t       v2si_ftype_v2si_v2si);\n+  def_builtin (\"__builtin_vis_faligndatadi\", CODE_FOR_faligndatadi_vis,\n+               di_ftype_di_di);\n+  if (TARGET_ARCH64)\n+    def_builtin (\"__builtin_vis_alignaddr\", CODE_FOR_alignaddrdi_vis,\n+\t         ptr_ftype_ptr_di);\n+  else\n+    def_builtin (\"__builtin_vis_alignaddr\", CODE_FOR_alignaddrsi_vis,\n+\t         ptr_ftype_ptr_si);\n+\n+  /* Pixel distance.  */\n+  def_builtin (\"__builtin_vis_pdist\", CODE_FOR_pdist_vis,\n+\t       di_ftype_v8qi_v8qi_di);\n+}\n+\n+/* Handle TARGET_EXPAND_BUILTIN target hook.\n+   Expand builtin functions for sparc instrinsics.  */\n+\n+static rtx\n+sparc_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n+\t\t      enum machine_mode tmode, int ignore ATTRIBUTE_UNUSED)\n+{\n+  tree arglist;\n+  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  unsigned int icode = DECL_FUNCTION_CODE (fndecl);\n+  rtx pat, op[4];\n+  enum machine_mode mode[4];\n+  int arg_count = 0;\n+\n+  mode[arg_count] = tmode;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    op[arg_count] = gen_reg_rtx (tmode);\n+  else\n+    op[arg_count] = target;\n+\n+  for (arglist = TREE_OPERAND (exp, 1); arglist;\n+       arglist = TREE_CHAIN (arglist))\n+    {\n+      tree arg = TREE_VALUE (arglist);\n+\n+      arg_count++;\n+      mode[arg_count] = insn_data[icode].operand[arg_count].mode;\n+      op[arg_count] = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n+\n+      if (! (*insn_data[icode].operand[arg_count].predicate) (op[arg_count],\n+\t\t\t\t\t\t\t      mode[arg_count]))\n+\top[arg_count] = copy_to_mode_reg (mode[arg_count], op[arg_count]);\n+    }\n+\n+  switch (arg_count)\n+    {\n+    case 1:\n+      pat = GEN_FCN (icode) (op[0], op[1]);\n+      break;\n+    case 2:\n+      pat = GEN_FCN (icode) (op[0], op[1], op[2]);\n+      break;\n+    case 3:\n+      pat = GEN_FCN (icode) (op[0], op[1], op[2], op[3]);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (!pat)\n+    return NULL_RTX;\n+\n+  emit_insn (pat);\n+\n+  return op[0];\n+}\n+\f\n int\n sparc_extra_constraint_check (rtx op, int c, int strict)\n {"}, {"sha": "5e5e1f654fb9ef7b9a13d49a7274261ff09aa21b", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -45,6 +45,18 @@\n    (UNSPEC_TLSIE\t\t33)\n    (UNSPEC_TLSLE\t\t34)\n    (UNSPEC_TLSLD_BASE\t\t35)\n+\n+   (UNSPEC_FPACK16\t \t40)\n+   (UNSPEC_FPACK32\t\t41)\n+   (UNSPEC_FPACKFIX\t\t42)\n+   (UNSPEC_FEXPAND\t\t43)\n+   (UNSPEC_FPMERGE\t\t44)\n+   (UNSPEC_MUL16AL\t\t45)\n+   (UNSPEC_MUL8UL\t\t46)\n+   (UNSPEC_MULDUL\t\t47)\n+   (UNSPEC_ALIGNDATA\t\t48)\n+   (UNSPEC_ALIGNADDR\t\t49)\n+   (UNSPEC_PDIST\t\t50)\n   ])\n \n (define_constants\n@@ -8961,3 +8973,161 @@\n   \"fnands\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fga\")\n    (set_attr \"fptype\" \"single\")])\n+\n+;; Hard to generate VIS instructions.  We have builtins for these.\n+\n+(define_insn \"fpack16_vis\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=f\")\n+        (unspec:V4QI [(match_operand:V4HI 1 \"register_operand\" \"e\")]\n+\t\t      UNSPEC_FPACK16))]\n+  \"TARGET_VIS\"\n+  \"fpack16\\t%1, %0\"\n+  [(set_attr \"type\" \"fga\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fpackfix_vis\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=f\")\n+        (unspec:V2HI [(match_operand:V2SI 1 \"register_operand\" \"e\")]\n+\t\t      UNSPEC_FPACKFIX))]\n+  \"TARGET_VIS\"\n+  \"fpackfix\\t%1, %0\"\n+  [(set_attr \"type\" \"fga\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fpack32_vis\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=e\")\n+        (unspec:V8QI [(match_operand:V2SI 1 \"register_operand\" \"e\")\n+        \t      (match_operand:V8QI 2 \"register_operand\" \"e\")]\n+                     UNSPEC_FPACK32))]\n+  \"TARGET_VIS\"\n+  \"fpack32\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fga\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fexpand_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (unspec:V4HI [(match_operand:V4QI 1 \"register_operand\" \"f\")]\n+         UNSPEC_FEXPAND))]\n+ \"TARGET_VIS\"\n+ \"fexpand\\t%1, %0\"\n+ [(set_attr \"type\" \"fga\")\n+  (set_attr \"fptype\" \"double\")])\n+\n+;; It may be possible to describe this operation as (1 indexed):\n+;; (vec_select (vec_duplicate (vec_duplicate (vec_concat 1 2)))\n+;;  1,5,10,14,19,23,28,32)\n+;; Note that (vec_merge:V8QI [(V4QI) (V4QI)] (10101010 = 170) doesn't work\n+;; because vec_merge expects all the operands to be of the same type.\n+(define_insn \"fpmerge_vis\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=e\")\n+        (unspec:V8QI [(match_operand:V4QI 1 \"register_operand\" \"f\")\n+                      (match_operand:V4QI 2 \"register_operand\" \"f\")]\n+         UNSPEC_FPMERGE))]\n+ \"TARGET_VIS\"\n+ \"fpmerge\\t%1, %2, %0\"\n+ [(set_attr \"type\" \"fga\")\n+  (set_attr \"fptype\" \"double\")])\n+\n+;; Partitioned multiply instructions\n+(define_insn \"fmul8x16_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (mult:V4HI (match_operand:V4QI 1 \"register_operand\" \"f\")\n+                   (match_operand:V4HI 2 \"register_operand\" \"e\")))]\n+  \"TARGET_VIS\"\n+  \"fmul8x16\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+;; Only one of the following two insns can be a multiply.\n+(define_insn \"fmul8x16au_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (mult:V4HI (match_operand:V4QI 1 \"register_operand\" \"f\")\n+                   (match_operand:V2HI 2 \"register_operand\" \"f\")))]\n+  \"TARGET_VIS\"\n+  \"fmul8x16au\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fmul8x16al_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (unspec:V4HI [(match_operand:V4QI 1 \"register_operand\" \"f\")\n+                      (match_operand:V2HI 2 \"register_operand\" \"f\")]\n+         UNSPEC_MUL16AL))]\n+  \"TARGET_VIS\"\n+  \"fmul8x16al\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+;; Only one of the following two insns can be a multiply.\n+(define_insn \"fmul8sux16_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (mult:V4HI (match_operand:V8QI 1 \"register_operand\" \"e\")\n+                   (match_operand:V4HI 2 \"register_operand\" \"e\")))]\n+  \"TARGET_VIS\"\n+  \"fmul8sux16\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fmul8ulx16_vis\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=e\")\n+        (unspec:V4HI [(match_operand:V8QI 1 \"register_operand\" \"e\")\n+                      (match_operand:V4HI 2 \"register_operand\" \"e\")]\n+         UNSPEC_MUL8UL))]\n+  \"TARGET_VIS\"\n+  \"fmul8ulx16\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+;; Only one of the following two insns can be a multiply.\n+(define_insn \"fmuld8sux16_vis\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=e\")\n+        (mult:V2SI (match_operand:V4QI 1 \"register_operand\" \"f\")\n+                   (match_operand:V2HI 2 \"register_operand\" \"f\")))]\n+  \"TARGET_VIS\"\n+  \"fmuld8sux16\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_insn \"fmuld8ulx16_vis\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=e\")\n+        (unspec:V2SI [(match_operand:V4QI 1 \"register_operand\" \"f\")\n+                      (match_operand:V2HI 2 \"register_operand\" \"f\")]\n+         UNSPEC_MULDUL))]\n+  \"TARGET_VIS\"\n+  \"fmuld8ulx16\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fpmul\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+;; Using faligndata only makes sense after an alignaddr since the choice of\n+;; bytes to take out of each operand is dependant on the results of the last\n+;; alignaddr.\n+(define_insn \"faligndata<V64I:mode>_vis\"\n+  [(set (match_operand:V64I 0 \"register_operand\" \"=e\")\n+        (unspec:V64I [(match_operand:V64I 1 \"register_operand\" \"e\")\n+                      (match_operand:V64I 2 \"register_operand\" \"e\")]\n+         UNSPEC_ALIGNDATA))]\n+  \"TARGET_VIS\"\n+  \"faligndata\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fga\")\n+   (set_attr \"fptype\" \"double\")])\n+\n+(define_mode_macro P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n+\n+(define_insn \"alignaddr<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"reg_or_0_operand\" \"rJ\")\n+                   (match_operand:P 2 \"reg_or_0_operand\" \"rJ\")]\n+         UNSPEC_ALIGNADDR))]\n+  \"TARGET_VIS\"\n+  \"alignaddr\\t%r1, %r2, %0\")\n+\n+(define_insn \"pdist_vis\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n+        (unspec:DI [(match_operand:V8QI 1 \"register_operand\" \"e\")\n+                    (match_operand:V8QI 2 \"register_operand\" \"e\")\n+                    (match_operand:DI 3 \"register_operand\" \"0\")]\n+         UNSPEC_PDIST))]\n+  \"TARGET_VIS\"\n+  \"pdist\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"fga\")\n+   (set_attr \"fptype\" \"double\")])"}, {"sha": "4b9cd3f8b0dc2a26a510b318adf096fce0b5e283", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -1,3 +1,11 @@\n+2004-11-22  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* gcc.target/sparc/align.c, gcc.target/sparc/combined-2.c,\n+\tgcc.target/sparc/fpack16.c, gcc.target/sparc/fpack32.c,\n+\tgcc.target/sparc/fpackfix.c, gcc.target/fexpand.c,\n+\tgcc.target/sparc/fpmerge.c, gcc.target/sparc/fpmul.c,\n+\tgcc.target/sparc/pdist.c: New tests.\n+\n 2004-11-22  Bob Wilson  <bob.wilson@acm.org>\n \n \t* gcc.dg/uninit-H.c: Define ASM for Xtensa targets."}, {"sha": "9a9827237e1621b4aa1898b91c9498bc9dd8d713", "filename": "gcc/testsuite/gcc.target/sparc/align.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Falign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Falign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Falign.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+#include <stdint.h>\n+typedef int vec32 __attribute__((vector_size(8)));\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef char vec8 __attribute__((vector_size(8)));\n+\n+vec16 foo1 (vec16 a, vec16 b) {\n+  return __builtin_vis_faligndatav4hi (a, b);\n+}\n+\n+vec32 foo2 (vec32 a, vec32 b) {\n+  return __builtin_vis_faligndatav2si (a, b);\n+}\n+\n+vec8 foo3 (vec8 a, vec8 b) {\n+  return __builtin_vis_faligndatav8qi (a, b);\n+}\n+\n+int64_t foo4 (int64_t a, int64_t b) {\n+  return __builtin_vis_faligndatadi (a, b);\n+}\n+\n+unsigned char * foo5 (unsigned char *data) {\n+  return __builtin_vis_alignaddr (data, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"faligndata\" 4 } } */\n+/* { dg-final { scan-assembler \"alignaddr.*%g0\" } } */"}, {"sha": "016e4fa6a6cb453cb2a6d4189e8738e89ae5c608", "filename": "gcc/testsuite/gcc.target/sparc/combined-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcombined-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcombined-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcombined-2.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=ultrasparc -mvis\" } */\n+typedef char pixel __attribute__((vector_size(4)));\n+typedef char vec8 __attribute__((vector_size(8)));\n+typedef short vec16 __attribute__((vector_size(8)));\n+\n+vec16 foo (pixel a, pixel b) {\n+  vec8 c = __builtin_vis_fpmerge (a, b);\n+  vec16 d = { -1, -1, -1, -1 };\n+  vec16 e = __builtin_vis_fmul8x16 (a, d);\n+\n+  return e;\n+}\n+\n+vec16 bar (pixel a) {\n+  vec16 d = { 0, 0, 0, 0 };\n+  vec16 e = __builtin_vis_fmul8x16 (a, d);  /* Mulitplication by 0 = 0.  */\n+\n+  return e;\n+}\n+\n+/* { dg-final { scan-assembler \"fmul8x16\" } } */\n+/* { dg-final { scan-assembler \"fzero\" } } */"}, {"sha": "2483f4f7235e4d7a580af8a39a4b77a402b61ef1", "filename": "gcc/testsuite/gcc.target/sparc/fexpand.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffexpand.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef char vec8 __attribute__((vector_size(4)));\n+\n+vec16 foo (vec8 a) {\n+  return __builtin_vis_fexpand (a);\n+}\n+\n+/* { dg-final { scan-assembler \"fexpand\\t%\" } } */"}, {"sha": "2f7aac5617135951157aef3e9a1efc031c8f5db5", "filename": "gcc/testsuite/gcc.target/sparc/fpack16.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack16.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef char vec8 __attribute__((vector_size(4)));\n+\n+vec8 foo (vec16 a) {\n+  return __builtin_vis_fpack16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"fpack16\\t%\" } } */"}, {"sha": "031372e219ae58083d64f6b6a6e8cbc74e523b94", "filename": "gcc/testsuite/gcc.target/sparc/fpack32.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpack32.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+typedef int vec32 __attribute__((vector_size(8)));\n+typedef unsigned char vec8 __attribute__((vector_size(8)));\n+\n+vec8 foo (vec32 a, vec8 b) {\n+  return __builtin_vis_fpack32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"fpack32\\t%\" } } */"}, {"sha": "815bec0cf38eef78079bd3efee29743cb8626e54", "filename": "gcc/testsuite/gcc.target/sparc/fpackfix.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpackfix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpackfix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpackfix.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+typedef int vec32 __attribute__((vector_size(8)));\n+typedef short vec16 __attribute__((vector_size(4)));\n+\n+vec16 foo (vec32 a) {\n+  return __builtin_vis_fpackfix (a);\n+}\n+\n+/* { dg-final { scan-assembler \"fpackfix\\t%\" } } */"}, {"sha": "013795cc6d77cf09e14798dc41deb2ac018f21d0", "filename": "gcc/testsuite/gcc.target/sparc/fpmerge.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmerge.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+typedef char pixel __attribute__((vector_size(8)));\n+typedef char vec8 __attribute__((vector_size(4)));\n+\n+pixel foo (vec8 a, vec8 b) {\n+  return __builtin_vis_fpmerge (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"fpmerge\\t%\" } } */"}, {"sha": "991cc75d661dacbcf6e1fc07f28ec92c4ebe6dc1", "filename": "gcc/testsuite/gcc.target/sparc/fpmul.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpmul.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+typedef int vec32 __attribute__((vector_size(8)));\n+typedef short vec16 __attribute__((vector_size(8)));\n+typedef char pixel __attribute__((vector_size(4)));\n+typedef short pixel16 __attribute__((vector_size(4)));\n+typedef char vec8 __attribute__((vector_size(8)));\n+\n+vec16 foo1 (pixel a, vec16 b) {\n+  return __builtin_vis_fmul8x16 (a, b);\n+}\n+\n+vec16 foo2 (pixel a, pixel16 b) {\n+  return __builtin_vis_fmul8x16au (a, b);\n+}\n+\n+vec16 foo3 (pixel a, pixel16 b) {\n+  return __builtin_vis_fmul8x16al (a, b);\n+}\n+\n+vec16 foo4 (vec8 a, vec16 b) {\n+  return __builtin_vis_fmul8sux16 (a, b);\n+}\n+\n+vec16 foo5 (vec8 a, vec16 b) {\n+  return __builtin_vis_fmul8ulx16 (a, b);\n+}\n+\n+vec32 foo6 (pixel a, pixel16 b) {\n+  return __builtin_vis_fmuld8sux16 (a, b);\n+}\n+\n+vec32 foo7 (pixel a, pixel16 b) {\n+  return __builtin_vis_fmuld8ulx16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"fmul8x16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fmul8x16au\\t%\" } } */\n+/* { dg-final { scan-assembler \"fmul8x16al\\t%\" } } */\n+/* { dg-final { scan-assembler \"fmul8sux16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fmul8ulx16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fmuld8sux16\\t%\" } } */\n+/* { dg-final { scan-assembler \"fmuld8ulx16\\t%\" } } */"}, {"sha": "d2ba9811d581d687a8c6de4ec8fe41f52161187e", "filename": "gcc/testsuite/gcc.target/sparc/pdist.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16f592418f6d21d6e9d713aec63973bf6344b1b7/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fpdist.c?ref=16f592418f6d21d6e9d713aec63973bf6344b1b7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ultrasparc -mvis\" } */\n+#include <stdint.h>\n+\n+typedef char vec8 __attribute__((vector_size(8)));\n+\n+int64_t foo (vec8 a, vec8 b) {\n+  int64_t d = 0;\n+  d = __builtin_vis_pdist (a, b, d);\n+  return d;\n+}\n+\n+int64_t bar (vec8 a, vec8 b) {\n+  int64_t d = 0;\n+  return __builtin_vis_pdist (a, b, d);\n+}\n+\n+int64_t baz (vec8 a, vec8 b, int64_t d) {\n+  int64_t e = __builtin_vis_pdist (a, b, d);\n+  return e + d;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pdist\" 4 } } */"}]}