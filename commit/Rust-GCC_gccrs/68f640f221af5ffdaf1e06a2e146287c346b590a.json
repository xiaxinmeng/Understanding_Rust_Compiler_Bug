{"sha": "68f640f221af5ffdaf1e06a2e146287c346b590a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhmNjQwZjIyMWFmNWZmZGFmMWUwNmEyZTE0NjI4N2MzNDZiNTkwYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-26T09:45:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-26T09:45:37Z"}, "message": "[multiple changes]\n\n2012-04-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Proper_First_Index): Moved from Sem_Util.\n\t* einfo.ads: Add new synthesized attribute Proper_First_Index\n\talong with usage in nodes.\n\t(Proper_First_Index): Moved from Sem_Util.\n\t* sem_util.ads, sem_util.adb (Proper_First_Index): Moved to Einfo.\n\n2012-04-26  Gary Dismukes  <dismukes@adacore.com>\n\n\t* layout.adb (Layout_Component_List): Test for the case of a\n\tsingle variant and the size of its component list was computed\n\tas an integer literal, and use that size (which is in bits)\n\tas is rather than converting to storage units.\n\n2012-04-26  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb: Minor reformatting.\n\nFrom-SVN: r186866", "tree": {"sha": "332087b968fe63a4bb96f59b2844c041ca6d2696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332087b968fe63a4bb96f59b2844c041ca6d2696"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68f640f221af5ffdaf1e06a2e146287c346b590a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f640f221af5ffdaf1e06a2e146287c346b590a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f640f221af5ffdaf1e06a2e146287c346b590a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f640f221af5ffdaf1e06a2e146287c346b590a/comments", "author": null, "committer": null, "parents": [{"sha": "50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50cd5b4de92b3c4616e4ee567f7ad7bcec068f18"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "c485fadfafd0c285482544a4f488cbdbd47fb046", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=68f640f221af5ffdaf1e06a2e146287c346b590a", "patch": "@@ -1,3 +1,22 @@\n+2012-04-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Proper_First_Index): Moved from Sem_Util.\n+\t* einfo.ads: Add new synthesized attribute Proper_First_Index\n+\talong with usage in nodes.\n+\t(Proper_First_Index): Moved from Sem_Util.\n+\t* sem_util.ads, sem_util.adb (Proper_First_Index): Moved to Einfo.\n+\n+2012-04-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* layout.adb (Layout_Component_List): Test for the case of a\n+\tsingle variant and the size of its component list was computed\n+\tas an integer literal, and use that size (which is in bits)\n+\tas is rather than converting to storage units.\n+\n+2012-04-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_aggr.adb: Minor reformatting.\n+\n 2012-04-26  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb: Minor reformatting."}, {"sha": "46d8ace5e66a7cc733e5c328b2dedff46794886e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=68f640f221af5ffdaf1e06a2e146287c346b590a", "patch": "@@ -6456,6 +6456,26 @@ package body Einfo is\n                 and then Present (Prival_Link (Id)));\n    end Is_Prival;\n \n+   ------------------------\n+   -- Proper_First_Index --\n+   ------------------------\n+\n+   function Proper_First_Index (Id : E) return E is\n+      Typ : Entity_Id;\n+\n+   begin\n+      Typ := Id;\n+\n+      --  The First_Index field is always empty for string literals, use the\n+      --  base type instead.\n+\n+      if Ekind (Typ) = E_String_Literal_Subtype then\n+         Typ := Base_Type (Typ);\n+      end if;\n+\n+      return First_Index (Typ);\n+   end Proper_First_Index;\n+\n    ----------------------------\n    -- Is_Protected_Component --\n    ----------------------------"}, {"sha": "1badc882d09f77891b9a4ab395f3d49db31b20c3", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=68f640f221af5ffdaf1e06a2e146287c346b590a", "patch": "@@ -3336,13 +3336,6 @@ package Einfo is\n --       conditions are present. The precondition_wrapper body is the original\n --       entry call, decorated with the given precondition for the entry.\n \n---    Primitive_Operations (synthesized)\n---       Present in concurrent types, tagged record types and subtypes, tagged\n---       private types and tagged incomplete types. For concurrent types whose\n---       Corresponding_Record_Type (CRT) is available, returns the list of\n---       Direct_Primitive_Operations of its CRT; otherwise returns No_Elist.\n---       For all the other types returns the Direct_Primitive_Operations.\n-\n --    Predicate_Function (synthesized)\n --       Present in all types. Set for types for which (Has_Predicates is True)\n --       and for which a predicate procedure has been built that tests that the\n@@ -3353,6 +3346,13 @@ package Einfo is\n --       Note: the reason this is marked as a synthesized attribute is that the\n --       way this is stored is as an element of the Subprograms_For_Type field.\n \n+--    Primitive_Operations (synthesized)\n+--       Present in concurrent types, tagged record types and subtypes, tagged\n+--       private types and tagged incomplete types. For concurrent types whose\n+--       Corresponding_Record_Type (CRT) is available, returns the list of\n+--       Direct_Primitive_Operations of its CRT; otherwise returns No_Elist.\n+--       For all the other types returns the Direct_Primitive_Operations.\n+\n --    Prival (Node17)\n --       Present in private components of protected types. Refers to the entity\n --       of the component renaming declaration generated inside protected\n@@ -3393,6 +3393,11 @@ package Einfo is\n --       in the shadow entity, it points to the proper location in which to\n --       restore the private view saved in the shadow.\n \n+--    Proper_First_Index (synthesized)\n+--       Applies to array types and subtypes. Returns the First_Index of the\n+--       type unless it is a string literal. In that case, the First_Index is\n+--       obtained from the base type.\n+\n --    Protected_Formal (Node22)\n --       Present in formal parameters (in, in out and out parameters). Used\n --       only for formals of protected operations. References corresponding\n@@ -5026,6 +5031,7 @@ package Einfo is\n    --    Is_Constrained                      (Flag12)\n    --    Next_Index                          (synth)\n    --    Number_Dimensions                   (synth)\n+   --    Proper_First_Index                  (synth)\n    --    (plus type attributes)\n \n    --  E_Block\n@@ -5688,13 +5694,15 @@ package Einfo is\n    --    Is_Constrained                      (Flag12)\n    --    Next_Index                          (synth)\n    --    Number_Dimensions                   (synth)\n+   --    Proper_First_Index                  (synth)\n    --    (plus type attributes)\n \n    --  E_String_Literal_Subtype\n    --    String_Literal_Low_Bound            (Node15)\n    --    String_Literal_Length               (Uint16)\n    --    First_Index                         (Node17)   (always Empty)\n    --    Packed_Array_Type                   (Node23)\n+   --    Proper_First_Index                  (synth)\n    --    (plus type attributes)\n \n    --  E_Subprogram_Body\n@@ -6532,6 +6540,7 @@ package Einfo is\n    function Number_Formals                      (Id : E) return Pos;\n    function Parameter_Mode                      (Id : E) return Formal_Kind;\n    function Primitive_Operations                (Id : E) return L;\n+   function Proper_First_Index                  (Id : E) return E;\n    function Root_Type                           (Id : E) return E;\n    function Safe_Emax_Value                     (Id : E) return U;\n    function Safe_First_Value                    (Id : E) return R;"}, {"sha": "f1c47569800275c481d923089ec1f5dee203d08b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=68f640f221af5ffdaf1e06a2e146287c346b590a", "patch": "@@ -6031,9 +6031,9 @@ package body Exp_Aggr is\n \n          --  At this stage we have a suitable aggregate for handling at compile\n          --  time (the only remaining checks are that the values of expressions\n-         --  in the aggregate are compile time known (check is performed by\n-         --  Get_Component_Val), and that any subtypes or ranges are statically\n-         --  known.\n+         --  in the aggregate are compile-time known, checks are performed by\n+         --  Get_Component_Val, and that any subtypes or ranges are statically\n+         --  known).\n \n          --  If the aggregate is not fully positional at this stage, then\n          --  convert it to positional form. Either this will fail, in which\n@@ -6097,22 +6097,28 @@ package body Exp_Aggr is\n                   exit;\n \n                elsif Is_Record_Type (Etype (Enclosing_Aggregate))\n-                    and then Reverse_Storage_Order\n-                               (Etype (Enclosing_Aggregate))\n+                 and then Reverse_Storage_Order (Etype (Enclosing_Aggregate))\n                then\n                   In_Reverse_Storage_Order_Record := True;\n                   exit;\n                end if;\n+\n                Enclosing_Aggregate := Parent (Enclosing_Aggregate);\n             end loop;\n \n             --  For little endian, we fill up the low order bits of the target\n             --  value. For big endian we fill up the high order bits of the\n             --  target value (which is a left justified modular value).\n \n+            --  Above comment needs extending for the code below, which is by\n+            --  the way incomprehensible, I have no idea what a xor b xor c\n+            --  means, and it hurts my brain to try to figure it out???\n+            --  Let's introduce a new variable, perhaps Effectively_Big_Endian\n+            --  and compute it with clearer code ???\n+\n             if Bytes_Big_Endian\n-                 xor Debug_Flag_8\n-                 xor In_Reverse_Storage_Order_Record\n+              xor Debug_Flag_8\n+              xor In_Reverse_Storage_Order_Record\n             then\n                Shift := Csiz * (Len - 1);\n                Incr  := -Csiz;"}, {"sha": "9b6c0ce9f949b5dda6e9d970dedfee392706adf7", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=68f640f221af5ffdaf1e06a2e146287c346b590a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2135,7 +2135,18 @@ package body Layout is\n                      --  others case.\n \n                      if No (RM_Siz_Expr) then\n-                        RM_Siz_Expr := Bits_To_SU (RM_SizV);\n+\n+                        --  If this is the only variant and the size is a\n+                        --  literal, then use bit size as is, otherwise convert\n+                        --  to storage units and continue to the next variant.\n+\n+                        if No (Prev (Var))\n+                          and then Nkind (RM_SizV) = N_Integer_Literal\n+                        then\n+                           RM_Siz_Expr := RM_SizV;\n+                        else\n+                           RM_Siz_Expr := Bits_To_SU (RM_SizV);\n+                        end if;\n \n                      --  Otherwise construct the appropriate test\n "}, {"sha": "0c8783103958f51db671c32d41c5571f8ac05bf0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=68f640f221af5ffdaf1e06a2e146287c346b590a", "patch": "@@ -11652,23 +11652,6 @@ package body Sem_Util is\n       Set_Sloc (Endl, Loc);\n    end Process_End_Label;\n \n-   ------------------------\n-   -- Proper_First_Index --\n-   ------------------------\n-\n-   function Proper_First_Index (Array_Typ : Entity_Id) return Entity_Id is\n-      Typ : Entity_Id;\n-\n-   begin\n-      Typ := Array_Typ;\n-\n-      if Ekind (Typ) = E_String_Literal_Subtype then\n-         Typ := Base_Type (Typ);\n-      end if;\n-\n-      return First_Index (Typ);\n-   end Proper_First_Index;\n-\n    ------------------------------------\n    -- References_Generic_Formal_Type --\n    ------------------------------------"}, {"sha": "607bd8e72e049be9b3dc9489a5ef8b3f207b800e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f640f221af5ffdaf1e06a2e146287c346b590a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=68f640f221af5ffdaf1e06a2e146287c346b590a", "patch": "@@ -1284,11 +1284,6 @@ package Sem_Util is\n    --  parameter Ent gives the entity to which the End_Label refers,\n    --  and to which cross-references are to be generated.\n \n-   function Proper_First_Index (Array_Typ : Entity_Id) return Entity_Id;\n-   --  Return the First_Index attribute of an arbitrary array type unless it\n-   --  is a string literal subtype in which case return the First_Index of the\n-   --  base type.\n-\n    function References_Generic_Formal_Type (N : Node_Id) return Boolean;\n    --  Returns True if the expression Expr contains any references to a\n    --  generic type. This can only happen within a generic template."}]}