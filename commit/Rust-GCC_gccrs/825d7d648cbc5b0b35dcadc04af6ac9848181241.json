{"sha": "825d7d648cbc5b0b35dcadc04af6ac9848181241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1ZDdkNjQ4Y2JjNWIwYjM1ZGNhZGMwNGFmNmFjOTg0ODE4MTI0MQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-12T07:11:38Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-12T07:11:38Z"}, "message": "fixinc/inclhack.def (svr4_krnl): Rename from svr4_kernel.\n\n\tfixinc/inclhack.def (svr4_krnl): Rename from svr4_kernel.  Enable\n\tfor selected machines.  Comment heavily.\n\tfixinc/fixincl.x: Rebuild.\n\tfixinc/tests/base/fs/rfs/rf_cache.h: New file.\n\nFrom-SVN: r70362", "tree": {"sha": "0260ca89368b12498e7e37b2f09c2948b32df9ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0260ca89368b12498e7e37b2f09c2948b32df9ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/825d7d648cbc5b0b35dcadc04af6ac9848181241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825d7d648cbc5b0b35dcadc04af6ac9848181241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825d7d648cbc5b0b35dcadc04af6ac9848181241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825d7d648cbc5b0b35dcadc04af6ac9848181241/comments", "author": null, "committer": null, "parents": [{"sha": "2b81b2c9703efa4c7adba975a0c9802672cc1876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b81b2c9703efa4c7adba975a0c9802672cc1876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b81b2c9703efa4c7adba975a0c9802672cc1876"}], "stats": {"total": 116, "additions": 104, "deletions": 12}, "files": [{"sha": "9fcf7448361d962b89c93676fa3d9b12e6ca0de1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=825d7d648cbc5b0b35dcadc04af6ac9848181241", "patch": "@@ -1,3 +1,10 @@\n+2003-08-12  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\tfixinc/inclhack.def (svr4_krnl): Rename from svr4_kernel.  Enable\n+\tfor selected machines.  Comment heavily.\n+\tfixinc/fixincl.x: Rebuild.\n+\tfixinc/tests/base/fs/rfs/rf_cache.h: New file.\n+\n 2003-08-12  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h: Tweak various comments."}, {"sha": "95c5dd7751069ed53c031a34a1ace360a867bb1b", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=825d7d648cbc5b0b35dcadc04af6ac9848181241", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Monday August  4, 2003 at 03:26:31 PM EDT\n+ * It has been AutoGen-ed  Tuesday August 12, 2003 at 03:04:53 AM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Mon Aug  4 15:26:31 EDT 2003\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Tue Aug 12 03:04:53 EDT 2003\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 156 fixup descriptions.\n+ * This file contains 157 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4902,6 +4902,46 @@ static const char* apzSvr4_GetcwdPatch[] = {\n     \"getcwd(char *, size_t)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Svr4_Krnl fix\n+ */\n+tSCC zSvr4_KrnlName[] =\n+     \"svr4_krnl\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSvr4_KrnlList[] =\n+  \"|fs/rfs/rf_cache.h|sys/erec.h|sys/err.h|sys/char.h|sys/getpages.h|sys/map.h|sys/cmn_err.h|sys/kdebugger.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSvr4_KrnlMachs[] = {\n+        \"*-*-sysv4*\",\n+        \"i?86-sequent-ptx*\",\n+        \"i?86-sequent-sysv3*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSvr4_KrnlBypass0[] =\n+       \"_KERNEL\";\n+\n+#define    SVR4_KRNL_TEST_CT  1\n+static tTestDesc aSvr4_KrnlTests[] = {\n+  { TT_NEGREP,   zSvr4_KrnlBypass0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Svr4_Krnl\n+ */\n+static const char* apzSvr4_KrnlPatch[] = {\n+    \"wrap\",\n+    \"#ifdef _KERNEL\\n\",\n+    \"#endif /* _KERNEL */\\n\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Svr4_Profil fix\n@@ -6193,9 +6233,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          176\n+#define REGEX_COUNT          177\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            156\n+#define FIX_COUNT            157\n \n /*\n  *  Enumerate the fixes\n@@ -6323,6 +6363,7 @@ typedef enum {\n     SVR4__P_FIXIDX,\n     SVR4_DISABLE_OPT_FIXIDX,\n     SVR4_GETCWD_FIXIDX,\n+    SVR4_KRNL_FIXIDX,\n     SVR4_PROFIL_FIXIDX,\n     SVR4_UNDECLARED_GETRNGE_FIXIDX,\n     SYSV68_STRING_FIXIDX,\n@@ -6970,6 +7011,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SVR4_GETCWD_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSvr4_GetcwdTests,   apzSvr4_GetcwdPatch, 0 },\n \n+  {  zSvr4_KrnlName,    zSvr4_KrnlList,\n+     apzSvr4_KrnlMachs,\n+     SVR4_KRNL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSvr4_KrnlTests,   apzSvr4_KrnlPatch, 0 },\n+\n   {  zSvr4_ProfilName,    zSvr4_ProfilList,\n      apzSvr4_ProfilMachs,\n      SVR4_PROFIL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "374b860a9ed124e706136352445c914133c34bd1", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=825d7d648cbc5b0b35dcadc04af6ac9848181241", "patch": "@@ -2788,11 +2788,22 @@ fix = {\n \n \n /*\n- *  set ifdef _KERNEL\n- */\n-#ifdef SVR4\n-fix = {\n-    hackname = svr4_kernel;\n+ *  Wrap some files on System V r4 and DYNIX/ptx systems with\n+ *  #ifdef _KERNEL, presumably to prevent kernel headers from\n+ *  leaking into userspace.  This may not be necessary at all,\n+ *  but it was in the old scripts, so it seems safest to keep it for now.\n+ */\n+fix = {\n+    /* Can't name this with _kernel, or the test case will hit the bypass! */\n+    hackname = svr4_krnl;\n+    /* Since I'm rather unsure about the validity of this, limit it\n+     * to the specific systems it was operating on before.  It should\n+     * also be bypassed for i?86-*-sysv4.3uw2, by that rule, but I didn't\n+     * see an easy way to do that.  Hopefully it will be harmless\n+     * in any case. -- Nathanael */\n+    mach     = '*-*-sysv4*';\n+    mach     = 'i?86-sequent-ptx*';\n+    mach     = 'i?86-sequent-sysv3*';\n     files    = fs/rfs/rf_cache.h;\n     files    = sys/erec.h;\n     files    = sys/err.h;\n@@ -2801,14 +2812,21 @@ fix = {\n     files    = sys/map.h;\n     files    = sys/cmn_err.h;\n     files    = sys/kdebugger.h;\n+\n+    /* This bypass will match _KERNEL, __KERNEL, __KERNEL__, etc.\n+     * It will also match SVR4_KERNEL_CHECK, which means that the\n+     * testsuite case will always be bypassed.  Which is fine with me. */\n     bypass   = '_KERNEL';\n-    c_fix     = wrap;\n \n+    c_fix     = wrap;\n     c_fix_arg = \"#ifdef _KERNEL\\n\";\n     c_fix_arg = \"#endif /* _KERNEL */\\n\";\n+\n+    /* There's no reasonable test for this given that we don't know exactly\n+     * what problem inspired it in the first place. */\n     test_text = \"\";\n };\n-#endif\n+\n \n /*\n  *  Delete any #defines of `__i386' which may be present in <ieeefp.h>.  They"}, {"sha": "45fec6349e016702fd2ff54c53887777dfec8d23", "filename": "gcc/fixinc/tests/base/fs/rfs/rf_cache.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2Ffixinc%2Ftests%2Fbase%2Ffs%2Frfs%2Frf_cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825d7d648cbc5b0b35dcadc04af6ac9848181241/gcc%2Ffixinc%2Ftests%2Fbase%2Ffs%2Frfs%2Frf_cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Ffs%2Frfs%2Frf_cache.h?ref=825d7d648cbc5b0b35dcadc04af6ac9848181241", "patch": "@@ -0,0 +1,21 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/fs/rfs/rf_cache.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+#ifndef FIXINC_WRAP_FS_RFS_RF_CACHE_H_SVR4_KRNL\n+#define FIXINC_WRAP_FS_RFS_RF_CACHE_H_SVR4_KRNL 1\n+\n+#ifdef _KERNEL\n+\n+\n+#if defined( SVR4_KRNL_CHECK )\n+\n+#endif  /* SVR4_KRNL_CHECK */\n+#endif /* _KERNEL */\n+\n+#endif  /* FIXINC_WRAP_FS_RFS_RF_CACHE_H_SVR4_KRNL */"}]}