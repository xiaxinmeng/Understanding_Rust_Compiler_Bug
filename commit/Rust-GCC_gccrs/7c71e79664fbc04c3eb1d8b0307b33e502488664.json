{"sha": "7c71e79664fbc04c3eb1d8b0307b33e502488664", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M3MWU3OTY2NGZiYzA0YzNlYjFkOGIwMzA3YjMzZTUwMjQ4ODY2NA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-20T09:59:54Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-20T09:59:54Z"}, "message": "re PR fortran/82923 (Automatic allocation of deferred length character using function result)\n\n2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82923\n\tPR fortran/66694\n\tPR fortran/82617\n\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Set the\n\tcharlen backend_decl of the rhs expr to ss->info->string_length\n\tso that the value in the current scope is used.\n\n2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82923\n\t* gfortran.dg/allocate_assumed_charlen_4.f90: New test. Note\n\tthat the patch fixes PR66694 & PR82617, although the testcases\n\tare not explicitly included.\n\nFrom-SVN: r260413", "tree": {"sha": "37d3d79d63b181d1efcb204fd84191266809ecda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d3d79d63b181d1efcb204fd84191266809ecda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c71e79664fbc04c3eb1d8b0307b33e502488664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c71e79664fbc04c3eb1d8b0307b33e502488664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c71e79664fbc04c3eb1d8b0307b33e502488664", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c71e79664fbc04c3eb1d8b0307b33e502488664/comments", "author": null, "committer": null, "parents": [{"sha": "69e7672a3bc8b1b40b92277437947f2778c51b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69e7672a3bc8b1b40b92277437947f2778c51b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69e7672a3bc8b1b40b92277437947f2778c51b96"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "a52932c103fa1727674bc2abefed2e5967319acd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7c71e79664fbc04c3eb1d8b0307b33e502488664", "patch": "@@ -1,3 +1,9 @@\n+2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82275\n+\t* match.c (gfc_match_type_spec): Go through the array ref and\n+\tdecrement 'rank' for every dimension that is an element.\n+\n 2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82923"}, {"sha": "0931edd84aaf9cffabe798cb49502a3dc7c56de2", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=7c71e79664fbc04c3eb1d8b0307b33e502488664", "patch": "@@ -2118,7 +2118,7 @@ gfc_match_type_spec (gfc_typespec *ts)\n      or list item in a type-list of an OpenMP reduction clause.  Need to\n      differentiate REAL([KIND]=scalar-int-initialization-expr) from\n      REAL(A,[KIND]) and REAL(KIND,A).  Logically, when this code was\n-     written the use of LOGICAL as a type-spec or intrinsic subprogram \n+     written the use of LOGICAL as a type-spec or intrinsic subprogram\n      was overlooked.  */\n \n   m = gfc_match (\" %n\", name);\n@@ -5935,6 +5935,7 @@ copy_ts_from_selector_to_associate (gfc_expr *associate, gfc_expr *selector)\n {\n   gfc_ref *ref;\n   gfc_symbol *assoc_sym;\n+  int rank = 0;\n \n   assoc_sym = associate->symtree->n.sym;\n \n@@ -5971,14 +5972,28 @@ copy_ts_from_selector_to_associate (gfc_expr *associate, gfc_expr *selector)\n \tselector->rank = ref->u.ar.dimen;\n       else\n \tselector->rank = 0;\n+\n+      rank = selector->rank;\n     }\n \n-  if (selector->rank)\n+  if (rank)\n     {\n-      assoc_sym->attr.dimension = 1;\n-      assoc_sym->as = gfc_get_array_spec ();\n-      assoc_sym->as->rank = selector->rank;\n-      assoc_sym->as->type = AS_DEFERRED;\n+      for (int i = 0; i < ref->u.ar.dimen + ref->u.ar.codimen; i++)\n+\tif (ref->u.ar.dimen_type[i] == DIMEN_ELEMENT\n+\t    || (ref->u.ar.dimen_type[i] == DIMEN_UNKNOWN\n+\t\t&& ref->u.ar.end[i] == NULL\n+\t\t&& ref->u.ar.stride[i] == NULL))\n+\t  rank--;\n+\n+      if (rank)\n+\t{\n+\t  assoc_sym->attr.dimension = 1;\n+\t  assoc_sym->as = gfc_get_array_spec ();\n+\t  assoc_sym->as->rank = rank;\n+\t  assoc_sym->as->type = AS_DEFERRED;\n+\t}\n+      else\n+\tassoc_sym->as = NULL;\n     }\n   else\n     assoc_sym->as = NULL;"}, {"sha": "372661152ccabdb4be63817b283f6c124ae43820", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c71e79664fbc04c3eb1d8b0307b33e502488664", "patch": "@@ -1,3 +1,8 @@\n+2018-05-20  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82923\n+\t* gfortran.dg/select_type_42.f90: New test.\n+\n 2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/82923"}, {"sha": "ff73e6c78583acf35df5ffdc304375014623e8fe", "filename": "gcc/testsuite/gfortran.dg/select_type_42.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_42.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c71e79664fbc04c3eb1d8b0307b33e502488664/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_42.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_42.f90?ref=7c71e79664fbc04c3eb1d8b0307b33e502488664", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do run }\n+!\n+! Tests the fix for PR82275.\n+! Associating a name with a reduced-dimension section of a\n+! multidimensional array precluded subsequent use of the name\n+! with the appropriately reduced dimensionality and instead\n+! required use of the (invalid) full set of original dimensions.\n+!\n+! Contributed by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+  type component\n+   integer :: i\n+  end type\n+  type container\n+    class(component), allocatable :: component_array(:,:)\n+  end type\n+  type(container) bag\n+  type(component) section_copy\n+  allocate(bag%component_array, source = reshape ([component(10), component (100)], [1,2]))\n+  select type(associate_name=>bag%component_array(1,:))\n+    type is (component)\n+      section_copy = associate_name(2)  ! gfortran rejected valid\n+!      section_copy = associate_name(1,1)! gfortran accepted invalid\n+  end select\n+  if (section_copy%i .ne. 100) stop 1\n+end"}]}