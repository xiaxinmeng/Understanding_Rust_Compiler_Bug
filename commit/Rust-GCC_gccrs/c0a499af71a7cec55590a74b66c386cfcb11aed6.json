{"sha": "c0a499af71a7cec55590a74b66c386cfcb11aed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhNDk5YWY3MWE3Y2VjNTU1OTBhNzRiNjZjMzg2Y2ZjYjExYWVkNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-12-21T19:16:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-12-21T19:16:01Z"}, "message": "[PR c++/83406] deducing lambda type\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-12/msg01432.html\n\tPR c++/83406\n\t* parser.c (cp_parser_lambda_body): Remove obsolete\n\tsingle-return-statement handling.\n\n\tPR c++/83406\n\t* g++.dg/cpp0x/lambda/lambda-ice15.C: Adjust error.\n\t* g++.dg/cpp1y/pr83406.C: New.\n\nFrom-SVN: r255950", "tree": {"sha": "a9f1fcc47a948a7cf5b20b9c7d843c58e1200a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f1fcc47a948a7cf5b20b9c7d843c58e1200a64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0a499af71a7cec55590a74b66c386cfcb11aed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a499af71a7cec55590a74b66c386cfcb11aed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a499af71a7cec55590a74b66c386cfcb11aed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a499af71a7cec55590a74b66c386cfcb11aed6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb4b152d88b9c77f552345917601d401010dc4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4b152d88b9c77f552345917601d401010dc4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4b152d88b9c77f552345917601d401010dc4b3"}], "stats": {"total": 134, "additions": 68, "deletions": 66}, "files": [{"sha": "e8295507c56ba809711b9af4068ab98a0e27470c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c0a499af71a7cec55590a74b66c386cfcb11aed6", "patch": "@@ -1,3 +1,9 @@\n+2017-12-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/83406\n+\t* parser.c (cp_parser_lambda_body): Remove obsolete\n+\tsingle-return-statement handling.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "57467bda59603d9353852d3fdf7625e4786037ba", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 65, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c0a499af71a7cec55590a74b66c386cfcb11aed6", "patch": "@@ -10578,98 +10578,42 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n   bool nested = (current_function_decl != NULL_TREE);\n   bool local_variables_forbidden_p = parser->local_variables_forbidden_p;\n   bool in_function_body = parser->in_function_body;\n+\n   if (nested)\n     push_function_context ();\n   else\n     /* Still increment function_depth so that we don't GC in the\n        middle of an expression.  */\n     ++function_depth;\n+\n   vec<tree> omp_privatization_save;\n   save_omp_privatization_clauses (omp_privatization_save);\n   /* Clear this in case we're in the middle of a default argument.  */\n   parser->local_variables_forbidden_p = false;\n   parser->in_function_body = true;\n \n-  /* Finish the function call operator\n-     - class_specifier\n-     + late_parsing_for_member\n-     + function_definition_after_declarator\n-     + ctor_initializer_opt_and_function_body  */\n   {\n     local_specialization_stack s (lss_copy);\n-\n     tree fco = lambda_function (lambda_expr);\n     tree body = start_lambda_function (fco, lambda_expr);\n-    bool done = false;\n-    tree compound_stmt;\n-\n     matching_braces braces;\n-    if (!braces.require_open (parser))\n-      goto out;\n \n-    compound_stmt = begin_compound_stmt (0);\n-\n-    /* 5.1.1.4 of the standard says:\n-         If a lambda-expression does not include a trailing-return-type, it\n-         is as if the trailing-return-type denotes the following type:\n-\t  * if the compound-statement is of the form\n-               { return attribute-specifier [opt] expression ; }\n-             the type of the returned expression after lvalue-to-rvalue\n-             conversion (_conv.lval_ 4.1), array-to-pointer conversion\n-             (_conv.array_ 4.2), and function-to-pointer conversion\n-             (_conv.func_ 4.3);\n-          * otherwise, void.  */\n-\n-    /* In a lambda that has neither a lambda-return-type-clause\n-       nor a deducible form, errors should be reported for return statements\n-       in the body.  Since we used void as the placeholder return type, parsing\n-       the body as usual will give such desired behavior.  */\n-    if (is_auto (TREE_TYPE (TREE_TYPE (fco)))\n-        && cp_lexer_peek_nth_token (parser->lexer, 1)->keyword == RID_RETURN\n-        && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SEMICOLON)\n+    if (braces.require_open (parser))\n       {\n-\ttree expr = NULL_TREE;\n-\tcp_id_kind idk = CP_ID_KIND_NONE;\n-\n-\t/* Parse tentatively in case there's more after the initial return\n-\t   statement.  */\n-\tcp_parser_parse_tentatively (parser);\n-\n-\tcp_parser_require_keyword (parser, RID_RETURN, RT_RETURN);\n-\n-\texpr = cp_parser_expression (parser, &idk);\n-\n-\tcp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n-\tbraces.require_close (parser);\n+\ttree compound_stmt = begin_compound_stmt (0);\n \n-\tif (cp_parser_parse_definitely (parser))\n-\t  {\n-\t    if (!processing_template_decl)\n-\t      {\n-\t\ttree type = lambda_return_type (expr);\n-\t\tapply_deduced_return_type (fco, type);\n-\t\tif (type == error_mark_node)\n-\t\t  expr = error_mark_node;\n-\t      }\n-\n-\t    /* Will get error here if type not deduced yet.  */\n-\t    finish_return_stmt (expr);\n-\n-\t    done = true;\n-\t  }\n-      }\n+\t/* Originally C++11 required us to peek for 'return expr'; and\n+\t   process it specially here to deduce the return type.  N3638\n+\t   removed the need for that.  */\n \n-    if (!done)\n-      {\n \twhile (cp_lexer_next_token_is_keyword (parser->lexer, RID_LABEL))\n \t  cp_parser_label_declaration (parser);\n \tcp_parser_statement_seq_opt (parser, NULL_TREE);\n \tbraces.require_close (parser);\n-      }\n \n-    finish_compound_stmt (compound_stmt);\n+\tfinish_compound_stmt (compound_stmt);\n+      }\n \n-  out:\n     finish_lambda_function (body);\n   }\n "}, {"sha": "d6928f00fbd203eabb78c25ffbd292b3ad907030", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0a499af71a7cec55590a74b66c386cfcb11aed6", "patch": "@@ -1,3 +1,9 @@\n+2017-12-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/83406\n+\t* g++.dg/cpp0x/lambda/lambda-ice15.C: Adjust error.\n+\t* g++.dg/cpp1y/pr83406.C: New.\n+\n 2017-12-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/83467"}, {"sha": "7a04bb5a51629ddb86488fb607cf7c5f4538f990", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice15.C", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice15.C?ref=c0a499af71a7cec55590a74b66c386cfcb11aed6", "patch": "@@ -5,6 +5,11 @@ class A\n {\n   void foo ()\n   {\n-    [=] { return foo; };  // { dg-error \"invalid use of member function\" }\n+    [=] { return foo; };  // { dg-error \"cannot convert\" }\n+  }\n+  void bar () const;\n+  void bar ()\n+  {\n+    [=] { return bar; };  // { dg-error \"unable to deduce\" }\n   }\n };"}, {"sha": "c348968edc3b42f6496beecf82f0e0c3df131509", "filename": "gcc/testsuite/g++.dg/cpp1y/pr83406.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr83406.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a499af71a7cec55590a74b66c386cfcb11aed6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr83406.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr83406.C?ref=c0a499af71a7cec55590a74b66c386cfcb11aed6", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile { target c++14 } }\n+// PR 83406, lambda late returns are not the same as missing returns\n+\n+class Bar\n+{\n+public:\n+  const int& getter() const;\n+  int& getter();\n+};\n+\n+auto one = [](const Bar& bar) -> decltype(auto)\n+{\n+  return bar.getter();\n+};\n+\n+auto two = [](const Bar& bar) -> auto\n+{\n+  return bar.getter();\n+};\n+\n+auto three = [](const Bar& bar)\n+{\n+  return bar.getter();\n+};\n+\n+template <typename T, typename U> struct X \n+{\n+  static const bool same = false;\n+};\n+\n+template <typename T> struct X<T,T>\n+{\n+  static const bool same = true;\n+};\n+\n+void frob (Bar &x)\n+{\n+  static_assert (X<const int &, decltype (one (x))>::same, \"not const int &\");\n+  static_assert (X<int, decltype (two (x))>::same, \"not int\");\n+  static_assert (X<int, decltype (three (x))>::same, \"not int\");\n+}"}]}