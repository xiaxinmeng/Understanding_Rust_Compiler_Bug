{"sha": "a5a42b92933220e45ac15c4034065c0a2be5b209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhNDJiOTI5MzMyMjBlNDVhYzE1YzQwMzQwNjVjMGEyYmU1YjIwOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-12T05:56:27Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-12T05:56:27Z"}, "message": "Makefile.in (final.o): Depend on debug.h.\n\n\t* Makefile.in (final.o): Depend on debug.h.\n\t* dbxout.c (dbxout_begin_block, dbxout_end_block): New.\n\t(dbx_debug_hooks): Add new hooks.\n\t(xcoff_debug_hooks): New.\n\t* debug.c (debug_nothing_file_int_int): New.\n\t(do_nothing_debug_hooks): Update.\n\t* debug.h (gcc_debug_hooks): New hooks begin_block and end_block.\n\t(debug_nothing_file_int_int): New.\n\t* dwarf2out.c (dwarf2out_begin_block, dwarf2out_end_block): Make\n\tstatic, update prototype.\n\t(dwarf2_debug_hooks): Update.\n\t* dwarf2out.h (dwarf2out_begin_block, dwarf2out_end_block): Remove.\n\t* dwarfout.c (dwarfout_begin_block, dwarfout_end_block): Make\n\tstatic, update prototype.\n\t(dwarf_debug_hooks): Update.\n\t* dwarfout.h (dwarfout_begin_block, dwarfout_end_block): Remove.\n\t* final.c: Include debug.h.\n\t(final_scan_insn): Use debug hooks when beginning and ending blocks.\n\t* sdbout.c (sdbout_begin_block, sdbout_end_block): Make\n\tstatic, update prototype.\n\t(sdb_debug_hooks): Update.\n\t* sdbout.h (sdbout_begin_block, sdbout_end_block): Remove.\n\t* toplev.c: Distinguish between xcoff and dbx.\n\n\t* f/lex.c (ffelex_file_pop_, ffelex_file_push_, ffelex_hash_):\n\tCall all debug hooks, not just dwarf ones.\n\nFrom-SVN: r43959", "tree": {"sha": "40b384a205e08322f34b489f268f42300c96c0bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b384a205e08322f34b489f268f42300c96c0bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a42b92933220e45ac15c4034065c0a2be5b209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a42b92933220e45ac15c4034065c0a2be5b209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a42b92933220e45ac15c4034065c0a2be5b209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a42b92933220e45ac15c4034065c0a2be5b209/comments", "author": null, "committer": null, "parents": [{"sha": "c177db4bbe9370c05dbcd18220f4c927aea7c94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c177db4bbe9370c05dbcd18220f4c927aea7c94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c177db4bbe9370c05dbcd18220f4c927aea7c94b"}], "stats": {"total": 235, "additions": 154, "deletions": 81}, "files": [{"sha": "866a6d6869f1c058c5f445914e4881d63845c8bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -1,3 +1,32 @@\n+2001-07-12  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (final.o): Depend on debug.h.\n+\t* dbxout.c (dbxout_begin_block, dbxout_end_block): New.\n+\t(dbx_debug_hooks): Add new hooks.\n+\t(xcoff_debug_hooks): New.\n+\t* debug.c (debug_nothing_file_int_int): New.\n+\t(do_nothing_debug_hooks): Update.\n+\t* debug.h (gcc_debug_hooks): New hooks begin_block and end_block.\n+\t(debug_nothing_file_int_int): New.\n+\t* dwarf2out.c (dwarf2out_begin_block, dwarf2out_end_block): Make\n+\tstatic, update prototype.\n+\t(dwarf2_debug_hooks): Update.\n+\t* dwarf2out.h (dwarf2out_begin_block, dwarf2out_end_block): Remove.\n+\t* dwarfout.c (dwarfout_begin_block, dwarfout_end_block): Make\n+\tstatic, update prototype.\n+\t(dwarf_debug_hooks): Update.\n+\t* dwarfout.h (dwarfout_begin_block, dwarfout_end_block): Remove.\n+\t* final.c: Include debug.h.\n+\t(final_scan_insn): Use debug hooks when beginning and ending blocks.\n+\t* sdbout.c (sdbout_begin_block, sdbout_end_block): Make\n+\tstatic, update prototype.\n+\t(sdb_debug_hooks): Update.\n+\t* sdbout.h (sdbout_begin_block, sdbout_end_block): Remove.\n+\t* toplev.c: Distinguish between xcoff and dbx.\n+\n+\t* f/lex.c (ffelex_file_pop_, ffelex_file_push_, ffelex_hash_):\n+\tCall all debug hooks, not just dwarf ones.\n+\n 2001-07-11  Timothy Wall  <twall@redhat.com>\n \n         * config.gcc: Add configuration for AIX5/IA64."}, {"sha": "a03f77f19dc5824422ac3033ab1bc1f007ee1cd7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -1523,7 +1523,7 @@ sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) sched-int.h \\\n    hard-reg-set.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(REGS_H) $(TM_P_H)\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h intl.h \\\n    $(REGS_H) $(RECOG_H) conditions.h insn-config.h $(INSN_ATTR_H) function.h \\\n-   real.h output.h hard-reg-set.h except.h \\\n+   real.h output.h hard-reg-set.h except.h debug.h \\\n    xcoffout.h toplev.h reload.h dwarfout.h dwarf2out.h sdbout.h \\\n    dbxout.h $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) function.h $(BASIC_BLOCK_H) \\"}, {"sha": "d88b8eb609d8a7c79cb227963841da9aa407d4c4", "filename": "gcc/dbxout.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -312,15 +312,37 @@ static void dbxout_block\t\tPARAMS ((tree, int, tree));\n static void dbxout_really_begin_function PARAMS ((tree));\n \f\n /* The debug hooks structure.  */\n+#if defined (DBX_DEBUGGING_INFO)\n+\n+static void dbxout_begin_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n+static void dbxout_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n+\n struct gcc_debug_hooks dbx_debug_hooks =\n {\n   dbxout_init,\n   dbxout_finish,\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   dbxout_start_source_file,\n-  dbxout_end_source_file\n+  dbxout_end_source_file,\n+  dbxout_begin_block,\n+  dbxout_end_block\n };\n+#endif /* DBX_DEBUGGING_INFO  */\n+\n+#if defined (XCOFF_DEBUGGING_INFO)\n+struct gcc_debug_hooks xcoff_debug_hooks =\n+{\n+  dbxout_init,\n+  dbxout_finish,\n+  debug_nothing_int_charstar,\n+  debug_nothing_int_charstar,\n+  dbxout_start_source_file,\n+  dbxout_end_source_file,\n+  xcoffout_begin_block,\n+  xcoffout_end_block\n+};\n+#endif /* XCOFF_DEBUGGING_INFO  */\n \f\n #if defined(ASM_OUTPUT_SECTION_NAME)\n static void\n@@ -549,6 +571,32 @@ dbxout_source_line (file, filename, lineno)\n #endif\n }\n \n+#if defined (DBX_DEBUGGING_INFO)\n+\n+/* Describe the beginning of an internal block within a function.  */\n+\n+static void\n+dbxout_begin_block (file, line, n)\n+     FILE *file;\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     unsigned int n;\n+{\n+  ASM_OUTPUT_INTERNAL_LABEL (file, \"LBB\", n);\n+}\n+\n+/* Describe the end line-number of an internal block within a function.  */\n+\n+static void\n+dbxout_end_block (file, line, n)\n+     FILE *file;\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     unsigned int n;\n+{\n+  ASM_OUTPUT_INTERNAL_LABEL (file, \"LBE\", n);\n+}\n+\n+#endif /* DBX_DEBUGGING_INFO  */\n+\n /* At the end of compilation, finish writing the symbol table.\n    Unless you define DBX_OUTPUT_MAIN_SOURCE_FILE_END, the default is\n    to do nothing.  */"}, {"sha": "5fb9a6f472261861b4d1b1f5d42f05e66912cbe6", "filename": "gcc/debug.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -27,7 +27,9 @@ struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n-  debug_nothing_int\n+  debug_nothing_int,\n+  debug_nothing_file_int_int,\n+  debug_nothing_file_int_int\n };\n \n /* This file contains implementations of each debug hook that do\n@@ -52,3 +54,11 @@ debug_nothing_int (line)\n      unsigned int line ATTRIBUTE_UNUSED;\n {\n }\n+\n+void\n+debug_nothing_file_int_int (file, line, n)\n+     FILE *file ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     unsigned int n ATTRIBUTE_UNUSED;\n+{\n+}"}, {"sha": "755ac0ae9ee0c2de0d19333162ab932da7b84f87", "filename": "gcc/debug.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -43,6 +43,13 @@ struct gcc_debug_hooks\n   /* Record the resumption of a source file.  LINE is the line number\n      in the source file we are returning to.  */\n   void (* end_source_file) PARAMS ((unsigned int line));\n+\n+  /* Record the beginning of block N, counting from 1 and not\n+     including the function-scope block, at LINE.  Output to FILE.  */\n+  void (* begin_block) PARAMS ((FILE *, unsigned int line, unsigned int n));\n+\n+  /* Record the end of a block.  Arguments as for begin_block.  */\n+  void (* end_block) PARAMS ((FILE *, unsigned int line, unsigned int n));\n };\n \n extern struct gcc_debug_hooks *debug_hooks;\n@@ -54,11 +61,14 @@ extern void debug_nothing_int_charstar\n   PARAMS ((unsigned int, const char *));\n extern void debug_nothing_int\n   PARAMS ((unsigned int));\n+extern void debug_nothing_file_int_int\n+  PARAMS ((FILE *, unsigned int, unsigned int));\n \n /* Hooks for various debug formats.  */\n extern struct gcc_debug_hooks do_nothing_debug_hooks;\n extern struct gcc_debug_hooks dbx_debug_hooks;\n extern struct gcc_debug_hooks sdb_debug_hooks;\n+extern struct gcc_debug_hooks xcoff_debug_hooks;\n extern struct gcc_debug_hooks dwarf_debug_hooks;\n extern struct gcc_debug_hooks dwarf2_debug_hooks;\n "}, {"sha": "c0359d3cd4c579f6757eb9b305a88a19e13f8705", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -3007,6 +3007,8 @@ static void dwarf2out_define\t        PARAMS ((unsigned int, const char *));\n static void dwarf2out_undef\t        PARAMS ((unsigned int, const char *));\n static void dwarf2out_start_source_file\tPARAMS ((unsigned, const char *));\n static void dwarf2out_end_source_file\tPARAMS ((unsigned));\n+static void dwarf2out_begin_block\tPARAMS ((FILE *, unsigned, unsigned));\n+static void dwarf2out_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n \n /* The debug hooks structure.  */\n \n@@ -3017,7 +3019,9 @@ struct gcc_debug_hooks dwarf2_debug_hooks =\n   dwarf2out_define,\n   dwarf2out_undef,\n   dwarf2out_start_source_file,\n-  dwarf2out_end_source_file\n+  dwarf2out_end_source_file,\n+  dwarf2out_begin_block,\n+  dwarf2out_end_block\n };\n \f\n /* NOTE: In the comments in this file, many references are made to\n@@ -11103,9 +11107,11 @@ dwarf2out_decl (decl)\n /* Output a marker (i.e. a label) for the beginning of the generated code for\n    a lexical block.  */\n \n-void\n-dwarf2out_begin_block (blocknum)\n-     register unsigned blocknum;\n+static void\n+dwarf2out_begin_block (file, line, blocknum)\n+     FILE *file ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     unsigned int blocknum;\n {\n   function_section (current_function_decl);\n   ASM_OUTPUT_DEBUG_LABEL (asm_out_file, BLOCK_BEGIN_LABEL, blocknum);\n@@ -11114,9 +11120,11 @@ dwarf2out_begin_block (blocknum)\n /* Output a marker (i.e. a label) for the end of the generated code for a\n    lexical block.  */\n \n-void\n-dwarf2out_end_block (blocknum)\n-     register unsigned blocknum;\n+static void\n+dwarf2out_end_block (file, line, blocknum)\n+     FILE *file ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     unsigned int blocknum;\n {\n   function_section (current_function_decl);\n   ASM_OUTPUT_DEBUG_LABEL (asm_out_file, BLOCK_END_LABEL, blocknum);"}, {"sha": "4250dfd727023d07a8c613d1ba31e790dbe59b99", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -18,8 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dwarf2out_begin_block\tPARAMS ((unsigned));\n-extern void dwarf2out_end_block\t\tPARAMS ((unsigned));\n extern int dwarf2out_ignore_block\tPARAMS ((tree));\n extern void dwarf2out_decl\t\tPARAMS ((tree));\t\n extern void dwarf2out_line\t\tPARAMS ((const char *, unsigned));"}, {"sha": "3263f107c5f49d3bb65488115fd5c955f6347ba9", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -795,6 +795,8 @@ static void dwarfout_start_source_file\tPARAMS ((unsigned, const char *));\n static void dwarfout_start_source_file_check PARAMS ((unsigned, const char *));\n static void dwarfout_end_source_file\tPARAMS ((unsigned));\n static void dwarfout_end_source_file_check PARAMS ((unsigned));\n+static void dwarfout_begin_block\tPARAMS ((FILE *, unsigned, unsigned));\n+static void dwarfout_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n static const char *dwarf_tag_name\tPARAMS ((unsigned));\n static const char *dwarf_attr_name\tPARAMS ((unsigned));\n static const char *dwarf_stack_op_name\tPARAMS ((unsigned));\n@@ -1375,7 +1377,9 @@ struct gcc_debug_hooks dwarf_debug_hooks =\n   dwarfout_define,\n   dwarfout_undef,\n   dwarfout_start_source_file_check,\n-  dwarfout_end_source_file_check\n+  dwarfout_end_source_file_check,\n+  dwarfout_begin_block,\n+  dwarfout_end_block\n };\n \f\n /************************ general utility functions **************************/\n@@ -5833,9 +5837,11 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n /* Output a marker (i.e. a label) for the beginning of the generated code\n    for a lexical block.\t */\n \n-void\n-dwarfout_begin_block (blocknum)\n-     register unsigned blocknum;\n+static void\n+dwarfout_begin_block (file, line, blocknum)\n+     FILE *file ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     unsigned int blocknum;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n@@ -5847,9 +5853,11 @@ dwarfout_begin_block (blocknum)\n /* Output a marker (i.e. a label) for the end of the generated code\n    for a lexical block.\t */\n \n-void\n-dwarfout_end_block (blocknum)\n-     register unsigned blocknum;\n+static void\n+dwarfout_end_block (file, line, blocknum)\n+     FILE *file ATTRIBUTE_UNUSED;\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     unsigned int blocknum;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n "}, {"sha": "9e4ca6275b63cc88c990a671a7d7880ffa42688c", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -24,7 +24,5 @@ extern void dwarfout_begin_function\tPARAMS ((void));\n extern void dwarfout_end_function\tPARAMS ((void));\n extern void dwarfout_begin_epilogue\tPARAMS ((void));\n extern void dwarfout_end_epilogue\tPARAMS ((void));\n-extern void dwarfout_begin_block\tPARAMS ((unsigned));\n-extern void dwarfout_end_block\t\tPARAMS ((unsigned));\n \n extern void dwarfout_line\t\tPARAMS ((const char *, unsigned));"}, {"sha": "05e627bdc8b3a242a0a27210cf5692c8bdb6ef29", "filename": "gcc/f/lex.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -857,8 +857,7 @@ ffelex_file_pop_ (const char *input_filename)\n       input_file_stack = p->next;\n       free (p);\n       input_file_stack_tick++;\n-      if (write_symbols == DWARF_DEBUG)\n-\t(*debug_hooks->end_source_file) (input_file_stack->line);\n+      (*debug_hooks->end_source_file) (input_file_stack->line);\n     }\n   else\n     error (\"#-lines for entering and leaving files don't match\");\n@@ -883,8 +882,7 @@ ffelex_file_push_ (int old_lineno, const char *input_filename)\n   input_file_stack = p;\n   input_file_stack_tick++;\n \n-  if (write_symbols == DWARF_DEBUG)\n-    (*debug_hooks->start_source_file) (0, input_filename);\n+  (*debug_hooks->start_source_file) (0, input_filename);\n \n   /* Now that we've pushed or popped the input stack,\n      update the name in the top element.  */\n@@ -1165,8 +1163,7 @@ ffelex_hash_ (FILE *finput)\n \n \t      c = ffelex_get_directive_line_ (&text, finput);\n \n-\t      if ((debug_info_level == DINFO_LEVEL_VERBOSE)\n-\t\t  && (write_symbols == DWARF_DEBUG))\n+\t      if (debug_info_level == DINFO_LEVEL_VERBOSE)\n \t\t(*debug_hooks->define) (lineno, text);\n \n \t      goto skipline;\n@@ -1185,8 +1182,7 @@ ffelex_hash_ (FILE *finput)\n \n \t      c = ffelex_get_directive_line_ (&text, finput);\n \n-\t      if ((debug_info_level == DINFO_LEVEL_VERBOSE)\n-\t\t  && (write_symbols == DWARF_DEBUG))\n+\t      if (debug_info_level == DINFO_LEVEL_VERBOSE)\n \t\t(*debug_hooks->undef) (lineno, text);\n \n \t      goto skipline;"}, {"sha": "99cc446216f622800e9f341fdd1afa11169659af", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -66,6 +66,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"intl.h\"\n #include \"basic-block.h\"\n #include \"target.h\"\n+#include \"debug.h\"\n \n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n #include \"dbxout.h\"\n@@ -2138,27 +2139,8 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      ++block_depth;\n \t      high_block_linenum = last_linenum;\n \n-\t    /* Output debugging info about the symbol-block beginning.  */\n-#ifdef SDB_DEBUGGING_INFO\n-\t      if (write_symbols == SDB_DEBUG)\n-\t\tsdbout_begin_block (file, last_linenum, n);\n-#endif\n-#ifdef XCOFF_DEBUGGING_INFO\n-\t      if (write_symbols == XCOFF_DEBUG)\n-\t\txcoffout_begin_block (file, last_linenum, n);\n-#endif\n-#ifdef DBX_DEBUGGING_INFO\n-\t      if (write_symbols == DBX_DEBUG)\n-\t\tASM_OUTPUT_INTERNAL_LABEL (file, \"LBB\", n);\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-\t      if (write_symbols == DWARF_DEBUG)\n-\t\tdwarfout_begin_block (n);\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-\t      if (write_symbols == DWARF2_DEBUG)\n-\t\tdwarf2out_begin_block (n);\n-#endif\n+\t      /* Output debugging info about the symbol-block beginning.  */\n+\t      (*debug_hooks->begin_block) (file, last_linenum, n);\n \n \t      /* Mark this block as output.  */\n \t      TREE_ASM_WRITTEN (NOTE_BLOCK (insn)) = 1;\n@@ -2180,26 +2162,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      if (block_depth < 0)\n \t\tabort ();\n \n-#ifdef XCOFF_DEBUGGING_INFO\n-\t      if (write_symbols == XCOFF_DEBUG)\n-\t\txcoffout_end_block (file, high_block_linenum, n);\n-#endif\n-#ifdef DBX_DEBUGGING_INFO\n-\t      if (write_symbols == DBX_DEBUG)\n-\t\tASM_OUTPUT_INTERNAL_LABEL (file, \"LBE\", n);\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-\t      if (write_symbols == SDB_DEBUG)\n-\t\tsdbout_end_block (file, high_block_linenum, n);\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-\t      if (write_symbols == DWARF_DEBUG)\n-\t\tdwarfout_end_block (n);\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-\t      if (write_symbols == DWARF2_DEBUG)\n-\t\tdwarf2out_end_block (n);\n-#endif\n+\t      (*debug_hooks->end_block) (file, high_block_linenum, n);\n \t    }\n \t  break;\n "}, {"sha": "aecdcf7826fa4f1f55cba1b65781f99d897bb7d1", "filename": "gcc/sdbout.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -95,6 +95,8 @@ extern tree current_function_decl;\n static void sdbout_init\t\t\tPARAMS ((FILE *, const char *));\n static void sdbout_start_source_file\tPARAMS ((unsigned, const char *));\n static void sdbout_end_source_file\tPARAMS ((unsigned));\n+static void sdbout_begin_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n+static void sdbout_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n static char *gen_fake_label\t\tPARAMS ((void));\n static int plain_type\t\t\tPARAMS ((tree));\n static int template_name_p\t\tPARAMS ((tree));\n@@ -299,7 +301,9 @@ struct gcc_debug_hooks sdb_debug_hooks =\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   sdbout_start_source_file,\n-  sdbout_end_source_file\n+  sdbout_end_source_file,\n+  sdbout_begin_block,\n+  sdbout_end_block\n };\n \f\n #if 0\n@@ -1466,11 +1470,11 @@ sdbout_reg_parms (parms)\n    The blocks match the BLOCKs in DECL_INITIAL (current_function_decl),\n    if the count starts at 0 for the outermost one.  */\n \n-void\n+static void\n sdbout_begin_block (file, line, n)\n      FILE *file ATTRIBUTE_UNUSED;\n-     int line;\n-     int n;\n+     unsigned int line;\n+     unsigned int n;\n {\n   tree decl = current_function_decl;\n   MAKE_LINE_SAFE (line);\n@@ -1507,8 +1511,8 @@ sdbout_begin_block (file, line, n)\n void\n sdbout_end_block (file, line, n)\n      FILE *file ATTRIBUTE_UNUSED;\n-     int line;\n-     int n ATTRIBUTE_UNUSED;\n+     unsigned int line;\n+     unsigned int n ATTRIBUTE_UNUSED;\n {\n   MAKE_LINE_SAFE (line);\n "}, {"sha": "0118cd1dafb7285d1cd65ab93e0d77bdbb5e7443", "filename": "gcc/sdbout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fsdbout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Fsdbout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.h?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -21,9 +21,6 @@ Boston, MA 02111-1307, USA.  */\n extern void sdbout_begin_function\tPARAMS ((int));\n extern void sdbout_end_function\t\tPARAMS ((int));\n \n-extern void sdbout_begin_block\t\tPARAMS ((FILE *, int, int));\n-extern void sdbout_end_block\t\tPARAMS ((FILE *, int, int));\n-\n extern void sdbout_label\t\tPARAMS ((rtx));\n extern void sdbout_symbol\t\tPARAMS ((tree, int));\n extern void sdbout_toplevel_data\tPARAMS ((tree));"}, {"sha": "f99e9d4a4f3b655b637a377e3b3ad2c815d03c41", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a42b92933220e45ac15c4034065c0a2be5b209/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a5a42b92933220e45ac15c4034065c0a2be5b209", "patch": "@@ -2289,10 +2289,14 @@ compile_file (name)\n   /* Set up the debug hooks based on write_symbols.  Default to doing\n      nothing.  */\n   debug_hooks = &do_nothing_debug_hooks;  \n-#if defined(DBX_DEBUGGING_INFO) || defined(XCOFF_DEBUGGING_INFO)\n-  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+#if defined(DBX_DEBUGGING_INFO)\n+  if (write_symbols == DBX_DEBUG)\n     debug_hooks = &dbx_debug_hooks;\n #endif\n+#if defined(XCOFF_DEBUGGING_INFO)\n+  if (write_symbols == XCOFF_DEBUG)\n+    debug_hooks = &xcoff_debug_hooks;\n+#endif\n #ifdef SDB_DEBUGGING_INFO\n   if (write_symbols == SDB_DEBUG)\n     debug_hooks = &sdb_debug_hooks;"}]}