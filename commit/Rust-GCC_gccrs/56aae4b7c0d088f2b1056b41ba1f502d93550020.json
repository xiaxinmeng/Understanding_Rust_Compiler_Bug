{"sha": "56aae4b7c0d088f2b1056b41ba1f502d93550020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhYWU0YjdjMGQwODhmMmIxMDU2YjQxYmExZjUwMmQ5MzU1MDAyMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-08T17:49:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-08T17:49:34Z"}, "message": "ipa-polymorphic-call.c (walk_ssa_copies): Fix spelling - becuase -> because.\n\n\t* ipa-polymorphic-call.c (walk_ssa_copies): Fix spelling\n\t- becuase -> because.\n\t* ipa-reference.c (ignore_module_statics): Likewise.\n\t* cgraph.c (cgraph_node::get_body): Likewise.\n\t* ipa-inline.c (early_inliner): Likewise.\n\t* ipa-devirt.c (types_same_for_odr): Likewise.\n\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Likewise.\n\t* config/i386/i386.h (ACCUMULATE_OUTGOING_ARGS): Likewise.\ncp/\n\t* decl.c (duplicate_decls): Fix spelling - becuase -> because.\nlto/\n\t* lto-symtab.h (lto_symtab_prevail_decl): Fix spelling\n\t- becuase -> because.\n\nFrom-SVN: r234061", "tree": {"sha": "4588609e22a86a635c375d52a059b83f1f464d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4588609e22a86a635c375d52a059b83f1f464d83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56aae4b7c0d088f2b1056b41ba1f502d93550020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56aae4b7c0d088f2b1056b41ba1f502d93550020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56aae4b7c0d088f2b1056b41ba1f502d93550020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56aae4b7c0d088f2b1056b41ba1f502d93550020/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6edbcfc3f49faf16204e2b2907d0dc47f461aa3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edbcfc3f49faf16204e2b2907d0dc47f461aa3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edbcfc3f49faf16204e2b2907d0dc47f461aa3e"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "5e90eb9f00499bec302649afef847fe792560555", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -1,3 +1,14 @@\n+2016-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ipa-polymorphic-call.c (walk_ssa_copies): Fix spelling\n+\t- becuase -> because.\n+\t* ipa-reference.c (ignore_module_statics): Likewise.\n+\t* cgraph.c (cgraph_node::get_body): Likewise.\n+\t* ipa-inline.c (early_inliner): Likewise.\n+\t* ipa-devirt.c (types_same_for_odr): Likewise.\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Likewise.\n+\t* config/i386/i386.h (ACCUMULATE_OUTGOING_ARGS): Likewise.\n+\n 2016-03-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* tree-ssa-math-opts.c: Fix typo in comment."}, {"sha": "ee6a209083893faad9b440840adb30a3ffbbdcf0", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -3356,7 +3356,7 @@ cgraph_node::get_body (void)\n   updated = get_untransformed_body ();\n \n   /* Getting transformed body makes no sense for inline clones;\n-     we should never use this on real clones becuase they are materialized\n+     we should never use this on real clones because they are materialized\n      early.\n      TODO: Materializing clones here will likely lead to smaller LTRANS\n      footprint. */"}, {"sha": "8d39b5de2cb9299974716d98e5e4cf062c1f4922", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -1621,7 +1621,7 @@ enum reg_class\n    function prologue should increase the stack frame size by this amount.  \n \n    In 32bit mode enabling argument accumulation results in about 5% code size\n-   growth becuase move instructions are less compact than push.  In 64bit\n+   growth because move instructions are less compact than push.  In 64bit\n    mode the difference is less drastic but visible.  \n \n    FIXME: Unlike earlier implementations, the size of unwind info seems to"}, {"sha": "54dd3ecbc8e61be30f663165d8c5f2fdfbb3fece", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -1,3 +1,7 @@\n+2016-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl.c (duplicate_decls): Fix spelling - becuase -> because.\n+\n 2016-03-07  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/66786"}, {"sha": "27c3597a570215e0fcac3e7f6e5a44001fdbaeaf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -2646,7 +2646,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n      Before releasing the node, be sore to remove function from symbol\n      table that might have been inserted there to record comdat group.\n-     Be sure to however do not free DECL_STRUCT_FUNCTION becuase this\n+     Be sure to however do not free DECL_STRUCT_FUNCTION because this\n      structure is shared in between newdecl and oldecl.  */\n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     DECL_STRUCT_FUNCTION (newdecl) = NULL;"}, {"sha": "2da5c013cf5f8e5ce53ce8f701f282455ce7edf0", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -393,7 +393,7 @@ odr_vtable_hasher::hash (const odr_type_d *odr_type)\n \n    When STRICT is true, we compare types by their names for purposes of\n    ODR violation warnings.  When strict is false, we consider variants\n-   equivalent, becuase it is all that matters for devirtualization machinery.\n+   equivalent, because it is all that matters for devirtualization machinery.\n */\n \n bool"}, {"sha": "55899ef17302f2afaa122e7b49f354d691e9cc92", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -2688,7 +2688,7 @@ early_inliner (function *fun)\n       /* If some always_inline functions was inlined, apply the changes.\n \t This way we will not account always inline into growth limits and\n \t moreover we will inline calls from always inlines that we skipped\n-\t previously becuase of conditional above.  */\n+\t previously because of conditional above.  */\n       if (inlined)\n \t{\n \t  timevar_push (TV_INTEGRATION);"}, {"sha": "842ca13cd06d2a360317e2e9bdd307eef969866f", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -812,7 +812,7 @@ walk_ssa_copies (tree op, hash_set<tree> **global_visited = NULL)\n \t   ptr = ptr.foo;\n \t This pattern is implicitly produced for casts to non-primary\n \t bases.  When doing context analysis, we do not really care\n-\t about the case pointer is NULL, becuase the call will be\n+\t about the case pointer is NULL, because the call will be\n \t undefined anyway.  */\n       if (gimple_code (SSA_NAME_DEF_STMT (op)) == GIMPLE_PHI)\n \t{"}, {"sha": "b52db42ed28f0a1db7f5b51431ec48fa46f32498", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -104,7 +104,7 @@ static splay_tree reference_vars_to_consider;\n    static we are considering.  This is added to the local info when asm\n    code is found that clobbers all memory.  */\n static bitmap all_module_statics;\n-/* Set of all statics that should be ignored becuase they are touched by\n+/* Set of all statics that should be ignored because they are touched by\n    -fno-ipa-reference code.  */\n static bitmap ignore_module_statics;\n "}, {"sha": "7a298d6edf055ee8712db08145cc1b9a19eb9393", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -1,3 +1,8 @@\n+2016-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lto-symtab.h (lto_symtab_prevail_decl): Fix spelling\n+\t- becuase -> because.\n+\n 2016-02-15  Tom de Vries  <tom@codesourcery.com>\n \n \tPR lto/69655"}, {"sha": "821e2e0b4808d1040a5c4bc8b07fef83a27e876a", "filename": "gcc/lto/lto-symtab.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Flto%2Flto-symtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Flto%2Flto-symtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.h?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -25,7 +25,7 @@ extern tree lto_symtab_prevailing_virtual_decl (tree decl);\n /* Mark DECL to be previailed by PREVAILING.\n    Use DECL_ABSTRACT_ORIGIN and DECL_CHAIN as special markers; those do not\n    disturb debug_tree and diagnostics.\n-   We are safe to modify them as we wish, becuase the declarations disappear\n+   We are safe to modify them as we wish, because the declarations disappear\n    from the IL after the merging.  */\n \n inline void"}, {"sha": "c37755d20084727ca7edfe076b5597795e6cb284", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56aae4b7c0d088f2b1056b41ba1f502d93550020/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=56aae4b7c0d088f2b1056b41ba1f502d93550020", "patch": "@@ -325,7 +325,7 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, TYPE_READONLY (expr), 1);\n   /* We used to stream TYPE_ALIAS_SET == 0 information to let frontends mark\n      types that are opaque for TBAA.  This however did not work as intended,\n-     becuase TYPE_ALIAS_SET == 0 was regularly lost in type merging.  */\n+     because TYPE_ALIAS_SET == 0 was regularly lost in type merging.  */\n   if (RECORD_OR_UNION_TYPE_P (expr))\n     {\n       bp_pack_value (bp, TYPE_TRANSPARENT_AGGR (expr), 1);"}]}