{"sha": "6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwYzkyZTZiMzdlMjdiMTRkYzNmYjhhMDJlZTRlMGU4YzMzYjY1OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-01-14T12:15:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-01-14T12:15:43Z"}, "message": "re PR tree-optimization/47286 (Invalid code when using register ... asm)\n\n2011-01-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/47286\n\t* tree-ssa-structalias.c (new_var_info): Register variables\n\tare global.\n\n\t* gcc.dg/tree-ssa/pr47286.c: New testcase.\n\nFrom-SVN: r168779", "tree": {"sha": "96cb277606ed0c9ba072b1fe08d770be7c52ad62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96cb277606ed0c9ba072b1fe08d770be7c52ad62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db09f9434d83e144068149a34fe3b24b5d5a5d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db09f9434d83e144068149a34fe3b24b5d5a5d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db09f9434d83e144068149a34fe3b24b5d5a5d61"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "939d7f197c9e8e822cf358a334d76f8cb65df15d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "patch": "@@ -1,3 +1,9 @@\n+2011-01-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47286\n+\t* tree-ssa-structalias.c (new_var_info): Register variables\n+\tare global.\n+\n 2011-01-14  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/46823"}, {"sha": "ed3a7870c4d91e97616d721560609bcf094e4d48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "patch": "@@ -1,3 +1,8 @@\n+2011-01-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47286\n+\t* gcc.dg/tree-ssa/pr47286.c: New testcase.\n+\n 2011-01-13  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR c++/47213"}, {"sha": "b03c59b832b72ad96e0f1ef408e93221a68740dc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr47286.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr47286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr47286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr47286.c?ref=6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! { i?86-*-* x86_64-*-* } } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct thread_info { int preempt_count; };\n+static inline struct thread_info *current_thread_info(void)\n+{\n+  register struct thread_info *sp asm(\"esp\");\n+  return sp;\n+}\n+void testcase(void)\n+{\n+  current_thread_info()->preempt_count += 1;\n+}\n+\n+/* We have to make sure that alias analysis treats sp as pointing\n+   to globals and thus the store not optimized away.  */\n+\n+/* { dg-final { scan-tree-dump \"->preempt_count =\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d3a54c65beb6a2b25ac13bf4384917a097df1670", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6c0c92e6b37e27b14dc3fb8a02ee4e0e8c33b658", "patch": "@@ -413,7 +413,10 @@ new_var_info (tree t, const char *name)\n   ret->is_global_var = (t == NULL_TREE);\n   ret->is_fn_info = false;\n   if (t && DECL_P (t))\n-    ret->is_global_var = is_global_var (t);\n+    ret->is_global_var = (is_global_var (t)\n+\t\t\t  /* We have to treat even local register variables\n+\t\t\t     as escape points.  */\n+\t\t\t  || (TREE_CODE (t) == VAR_DECL && DECL_REGISTER (t)));\n   ret->solution = BITMAP_ALLOC (&pta_obstack);\n   ret->oldsolution = BITMAP_ALLOC (&oldpta_obstack);\n   ret->next = NULL;"}]}