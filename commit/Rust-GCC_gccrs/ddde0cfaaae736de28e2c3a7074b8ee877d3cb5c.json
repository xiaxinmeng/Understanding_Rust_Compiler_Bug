{"sha": "ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "node_id": "C_kwDOANBUbNoAKGRkZGUwY2ZhYWFlNzM2ZGUyOGUyYzNhNzA3NGI4ZWU4NzdkM2NiNWM", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-04-18T16:42:59Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-04-18T16:42:59Z"}, "message": "Merge commit 'cbe93dfa4d41d5a131b53bd3f97c973939f98ae6' into HEAD [#2130]", "tree": {"sha": "fb4b00160b4bae3690af4600eeef26a19c03a9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb4b00160b4bae3690af4600eeef26a19c03a9d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c44f0066adabc51103f03cd96a7f02efc4214d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c44f0066adabc51103f03cd96a7f02efc4214d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c44f0066adabc51103f03cd96a7f02efc4214d"}, {"sha": "cbe93dfa4d41d5a131b53bd3f97c973939f98ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbe93dfa4d41d5a131b53bd3f97c973939f98ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbe93dfa4d41d5a131b53bd3f97c973939f98ae6"}], "stats": {"total": 301486, "additions": 155067, "deletions": 146419}, "files": [{"sha": "61b05aa486c979333d212925fd1ab760f2b93390", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,7 @@\n+2023-04-06  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* MAINTAINERS: Add myself.\n+\n 2023-03-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* MAINTAINERS: Add myself as OpenMP and libgomp maintainer."}, {"sha": "33e4b506765e2afbc14aff0a4f2f061c61acfc09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 282, "deletions": 0, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,285 @@\n+2023-04-16  Jeff Law  <jlaw@ventanamicro>\n+\n+\tPR target/109508\n+\t* config/riscv/riscv.cc (riscv_expand_conditional_move): For\n+\tTARGET_SFB_ALU, force the true arm into a register.\n+\n+2023-04-15  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR target/104989\n+\t* config/pa/pa-protos.h (pa_function_arg_size): Update prototype.\n+\t* config/pa/pa.cc (pa_function_arg): Return NULL_RTX if argument\n+\tsize is zero.\n+\t(pa_arg_partial_bytes): Don't call pa_function_arg_size twice.\n+\t(pa_function_arg_size): Change return type to int.  Return zero\n+\tfor arguments larger than 1 GB.  Update comments.\n+\n+2023-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109154\n+\t* tree-if-conv.cc (predicate_scalar_phi): For complex PHIs, emit just\n+\targs_len - 1 COND_EXPRs rather than args_len.  Formatting fix.\n+\n+2023-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109514\n+\t* gimple-ssa-warn-access.cc (pass_waccess::check_dangling_stores):\n+\tOverhaul lhs_ref.ref analysis.\n+\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109502\n+\t* tree-vect-stmts.cc (vectorizable_assignment): Fix\n+\tcheck for conversion between mask and non-mask types.\n+\n+2023-04-14  Jeff Law  <jlaw@ventanamicro.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108947\n+\tPR target/109040\n+\t* combine.cc (simplify_and_const_int_1): Compute nonzero_bits in\n+\tword_mode rather than mode if WORD_REGISTER_OPERATIONS and mode is\n+\tsmaller than word_mode.\n+\t* simplify-rtx.cc (simplify_context::simplify_binary_operation_1)\n+\t<case AND>: Likewise.\n+\n+2023-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* loop-iv.cc (iv_number_of_iterations): Use gen_int_mode instead\n+\tof GEN_INT.\n+\n+2023-04-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/108139\n+\tPR tree-optimization/109462\n+\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Remove\n+\tequivalency check for PHI nodes.\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Ensure def\n+\tdoes not dominate single-arg equivalency edges.\n+\n+2023-04-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/108910\n+\t* config/aarch64/aarch64.cc (aarch64_function_arg_alignment): Do\n+\tnot trust TYPE_ALIGN for pointer types; use POINTER_SIZE instead.\n+\n+2023-04-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109491\n+\t* tree-ssa-sccvn.cc (expressions_equal_p): Restore the\n+\tNULL operands test.\n+\n+2023-04-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/109479\n+\t* config/riscv/riscv-vector-builtins-types.def (vint8mf8_t): Fix predicate.\n+\t(vint16mf4_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vint64m1_t): Ditto.\n+\t(vint64m2_t): Ditto.\n+\t(vint64m4_t): Ditto.\n+\t(vint64m8_t): Ditto.\n+\t(vuint8mf8_t): Ditto.\n+\t(vuint16mf4_t): Ditto.\n+\t(vuint32mf2_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t(vfloat32mf2_t): Ditto.\n+\t(vbool64_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (register_builtin_type): Add comments.\n+\t(register_vector_type): Ditto.\n+\t(check_required_extensions): Fix condition.\n+\t* config/riscv/riscv-vector-builtins.h (RVV_REQUIRE_ZVE64): Remove it.\n+\t(RVV_REQUIRE_ELEN_64): New define.\n+\t(RVV_REQUIRE_MIN_VLEN_64): Ditto.\n+\t* config/riscv/riscv-vector-switch.def (TARGET_VECTOR_FP32): Remove it.\n+\t(TARGET_VECTOR_FP64): Ditto.\n+\t(ENTRY): Fix predicate.\n+\t* config/riscv/vector-iterators.md: Fix predicate.\n+\n+2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109410\n+\t* tree-ssa-reassoc.cc (build_and_add_sum): Split edge from entry\n+\tblock if first statement of the function is a call to returns_twice\n+\tfunction.\n+\n+2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/109458\n+\t* config/i386/i386.cc: Include rtl-error.h.\n+\t(ix86_print_operand): For z modifier warning, use warning_for_asm\n+\tif this_is_asm_operands.  For Z modifier errors, use %c and code\n+\tinstead of hardcoded Z.\n+\n+2023-04-12  Costas Argyris  <costas.argyris@gmail.com>\n+\n+\t* config/i386/x-mingw32-utf8: Remove extrataneous $@\n+\n+2023-04-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109462\n+\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Don't\n+\tcheck for equivalences if NAME is a phi node.\n+\n+2023-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109473\n+\t* tree-vect-loop.cc (vect_create_epilog_for_reduction):\n+\tConvert scalar result to the computation type before performing\n+\tthe reduction adjustment.\n+\n+2023-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109469\n+\t* tree-vect-slp.cc (vect_slp_function): Skip region starts with\n+\ta returns-twice call.\n+\n+2023-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109434\n+\t* tree-ssa-dse.cc (initialize_ao_ref_for_dse): Properly\n+\thandle possibly throwing calls when processing the LHS\n+\tand may-defs are not OK.\n+\n+2023-04-11  Lin Sinan  <mynameisxiaou@gmail.com>\n+\n+\t* config/riscv/predicates.md (uimm_extra_bit_or_twobits): Adjust\n+\tpredicate to avoid splitting arith constants.\n+\n+2023-04-11  Yanzhang Wang  <yanzhang.wang@intel.com>\n+\t    Pan Li  <pan2.li@intel.com>\n+\t    Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/109104\n+\t* config/riscv/riscv-protos.h (emit_hard_vlmax_vsetvl): New.\n+\t* config/riscv/riscv-v.cc (emit_hard_vlmax_vsetvl): New.\n+\t(emit_vlmax_vsetvl): Use emit_hard_vlmax_vsetvl.\n+\t* config/riscv/riscv.cc (vector_zero_call_used_regs): New.\n+\t(riscv_zero_call_used_regs): New.\n+\t(TARGET_ZERO_CALL_USED_REGS): New.\n+\n+2023-04-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/108241\n+\t* opts.cc (finish_options): Drop also\n+\tx_flag_var_tracking_assignments.\n+\n+2023-04-11  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR tree-optimization/108888\n+\t* tree-if-conv.cc (predicate_statements): Fix gimple call check.\n+\n+2023-04-11  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/108812\n+\t* config/rs6000/vsx.md (vsx_sign_extend_qi_<mode>): Rename to...\n+\t(vsx_sign_extend_v16qi_<mode>): ... this.\n+\t(vsx_sign_extend_hi_<mode>): Rename to...\n+\t(vsx_sign_extend_v8hi_<mode>): ... this.\n+\t(vsx_sign_extend_si_v2di): Rename to...\n+\t(vsx_sign_extend_v4si_v2di): ... this.\n+\t(vsignextend_qi_<mode>): Remove.\n+\t(vsignextend_hi_<mode>): Remove.\n+\t(vsignextend_si_v2di): Remove.\n+\t(vsignextend_v2di_v1ti): Remove.\n+\t(*xxspltib_<mode>_split): Replace gen_vsx_sign_extend_qi_v2di with\n+\tgen_vsx_sign_extend_v16qi_v2di and gen_vsx_sign_extend_qi_v4si\n+\twith gen_vsx_sign_extend_v16qi_v4si.\n+\t* config/rs6000/rs6000.md (split for DI constant generation):\n+\tReplace gen_vsx_sign_extend_qi_si with gen_vsx_sign_extend_v16qi_si.\n+\t(split for HSDI constant generation): Replace gen_vsx_sign_extend_qi_di\n+\twith gen_vsx_sign_extend_v16qi_di and gen_vsx_sign_extend_qi_si\n+\twith gen_vsx_sign_extend_v16qi_si.\n+\t* config/rs6000/rs6000-builtins.def (__builtin_altivec_vsignextsb2d):\n+\tSet bif-pattern to vsx_sign_extend_v16qi_v2di.\n+\t(__builtin_altivec_vsignextsb2w): Set bif-pattern to\n+\tvsx_sign_extend_v16qi_v4si.\n+\t(__builtin_altivec_visgnextsh2d): Set bif-pattern to\n+\tvsx_sign_extend_v8hi_v2di.\n+\t(__builtin_altivec_vsignextsh2w): Set bif-pattern to\n+\tvsx_sign_extend_v8hi_v4si.\n+\t(__builtin_altivec_vsignextsw2d): Set bif-pattern to\n+\tvsx_sign_extend_si_v2di.\n+\t(__builtin_altivec_vsignext): Set bif-pattern to\n+\tvsx_sign_extend_v2di_v1ti.\n+\t* config/rs6000/rs6000-builtin.cc (lxvrse_expand_builtin): Replace\n+\tgen_vsx_sign_extend_qi_v2di with gen_vsx_sign_extend_v16qi_v2di,\n+\tgen_vsx_sign_extend_hi_v2di with gen_vsx_sign_extend_v8hi_v2di and\n+\tgen_vsx_sign_extend_si_v2di with gen_vsx_sign_extend_v4si_v2di.\n+\n+2023-04-10   Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/70243\n+\t* config/rs6000/vsx.md (vsx_fmav4sf4): Do not generate vmaddfp.\n+\t(vsx_nfmsv4sf4): Do not generate vnmsubfp.\n+\n+2023-04-10  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* config/i386/i386.h (PTA_GRANITERAPIDS): Add PTA_AMX_COMPLEX.\n+\n+2023-04-10  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect AMX-COMPLEX.\n+\t* common/config/i386/i386-common.cc\n+\t(OPTION_MASK_ISA2_AMX_COMPLEX_SET,\n+\tOPTION_MASK_ISA2_AMX_COMPLEX_UNSET): New.\n+\t(ix86_handle_option): Handle -mamx-complex.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_AMX_COMPLEX.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n+\tamx-complex.\n+\t* config.gcc: Add amxcomplexintrin.h.\n+\t* config/i386/cpuid.h (bit_AMX_COMPLEX): New.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n+\t__AMX_COMPLEX__.\n+\t* config/i386/i386-isa.def (AMX_COMPLEX): Add DEF_PTA(AMX_COMPLEX).\n+\t* config/i386/i386-options.cc (ix86_valid_target_attribute_inner_p):\n+\tHandle amx-complex.\n+\t* config/i386/i386.opt: Add option -mamx-complex.\n+\t* config/i386/immintrin.h: Include amxcomplexintrin.h.\n+\t* doc/extend.texi: Document amx-complex.\n+\t* doc/invoke.texi: Document -mamx-complex.\n+\t* doc/sourcebuild.texi: Document target amx-complex.\n+\t* config/i386/amxcomplexintrin.h: New file.\n+\n+2023-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109392\n+\t* tree-vect-generic.cc (tree_vec_extract): Handle failure\n+\tof maybe_push_res_to_seq better.\n+\n+2023-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Makefile.in (CORETYPES_H): Depend on align.h, poly-int.h and\n+\tpoly-int-types.h.\n+\t(SYSTEM_H): Depend on $(HASHTAB_H).\n+\t* config/riscv/t-riscv (build/genrvv-type-indexer.o): Remove unused\n+\tdependency on $(RTL_BASE_H), remove redundant dependency on\n+\tinsn-modes.h.\n+\n+2023-04-06  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/107674\n+\t* config/arm/arm.cc (arm_effective_regno): New function.\n+\t(mve_vector_mem_operand): Use it.\n+\n+2023-04-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109417\n+\t* gimple-range-gori.cc (gori_compute::may_recompute_p): Check if\n+\tdependency is in SSA_NAME_FREE_LIST.\n+\n+2023-04-06  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/109427\n+\t* params.opt (-param=vect-induction-float=):\n+\tFix option attribute typo for IntegerRange.\n+\n 2023-04-05  Jeff Law  <jlaw@ventanamicro>\n \n \tPR target/108892"}, {"sha": "27b1d3f07db7ed48ca27c2a01dbb7178a8ddce5f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1 +1 @@\n-20230406\n+20230417"}, {"sha": "2e1ea47a32d592452fba99aaf8e78bc9ef0f6368", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -950,7 +950,8 @@ TARGET_DEF_H = target-def.h target-hooks-def.h $(HOOKS_H) targhooks.h\n C_TARGET_DEF_H = c-family/c-target-def.h c-family/c-target-hooks-def.h \\\n   $(TREE_H) $(C_COMMON_H) $(HOOKS_H) common/common-targhooks.h\n CORETYPES_H = coretypes.h insn-modes.h signop.h wide-int.h wide-int-print.h \\\n-  insn-modes-inline.h $(MACHMODE_H) double-int.h\n+  insn-modes-inline.h $(MACHMODE_H) double-int.h align.h poly-int.h \\\n+  poly-int-types.h\n RTL_BASE_H = $(CORETYPES_H) rtl.h rtl.def reg-notes.def \\\n   insn-notes.def $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) \\\n   $(FIXED_VALUE_H) alias.h $(HASHTAB_H)\n@@ -1003,7 +1004,8 @@ C_COMMON_H = c-family/c-common.h c-family/c-common.def $(TREE_H) \\\n C_PRAGMA_H = c-family/c-pragma.h $(CPPLIB_H)\n C_TREE_H = c/c-tree.h $(C_COMMON_H) $(DIAGNOSTIC_H)\n SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h \\\n-\t$(srcdir)/../include/safe-ctype.h $(srcdir)/../include/filenames.h\n+\t$(srcdir)/../include/safe-ctype.h $(srcdir)/../include/filenames.h \\\n+\t$(HASHTAB_H)\n PREDICT_H = predict.h predict.def\n CPPLIB_H = $(srcdir)/../libcpp/include/line-map.h \\\n \t$(srcdir)/../libcpp/include/cpplib.h"}, {"sha": "84237190634617ca76caa6cb3c0f6d1220b9d31f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,18 @@\n+2023-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR bootstrap/109510\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <types>: Do not reset\n+\talign to zero in any case.  Set TYPE_USER_ALIGN on the type only if\n+\tit is an aggregate type, or else a type whose default alignment is\n+\tspecifically capped on selected platforms.\n+\n+2023-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR bootstrap/109510\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <types>: Reset align\n+\tto zero if its value is equal to TYPE_ALIGN and the type is scalar.\n+\tSet TYPE_USER_ALIGN on the type only if align is positive.\n+\n 2023-03-06  Javier Miranda  <miranda@adacore.com>\n \n \tPR ada/108858"}, {"sha": "20f43de9ea9f125ad6257474e96841eb8bad766b", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -4364,7 +4364,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* If the alignment has not already been processed and this is not\n \t an unconstrained array type, see if an alignment is specified.\n \t If not, we pick a default alignment for atomic objects.  */\n-      if (align != 0 || TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE)\n+      if (align > 0 || TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE)\n \t;\n       else if (Known_Alignment (gnat_entity))\n \t{\n@@ -4653,6 +4653,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* If this is not an unconstrained array type, set some flags.  */\n       if (TREE_CODE (gnu_type) != UNCONSTRAINED_ARRAY_TYPE)\n \t{\n+\t  bool align_clause;\n+\n \t  /* Record the property that objects of tagged types are guaranteed to\n \t     be properly aligned.  This is necessary because conversions to the\n \t     class-wide type are translated into conversions to the root type,\n@@ -4665,8 +4667,20 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  if (is_by_ref && !VOID_TYPE_P (gnu_type))\n \t    TYPE_BY_REFERENCE_P (gnu_type) = 1;\n \n-\t  /* Record whether an alignment clause was specified.  */\n-\t  if (Present (Alignment_Clause (gnat_entity)))\n+\t  /* Record whether an alignment clause was specified.  At this point\n+\t     scalar types with a non-confirming clause have been wrapped into\n+\t     a record type, so only scalar types with a confirming clause are\n+\t     left untouched; we do not set the flag on them except if they are\n+\t     types whose default alignment is specifically capped in order not\n+\t     to lose the specified alignment.  */\n+\t  if ((AGGREGATE_TYPE_P (gnu_type)\n+\t       && Present (Alignment_Clause (gnat_entity)))\n+\t      || (double_float_alignment > 0\n+\t\t  && is_double_float_or_array (gnat_entity, &align_clause)\n+\t\t  && align_clause)\n+\t      || (double_scalar_alignment > 0\n+\t\t  && is_double_scalar_or_array (gnat_entity, &align_clause)\n+\t\t  && align_clause))\n \t    TYPE_USER_ALIGN (gnu_type) = 1;\n \n \t  /* Record whether a pragma Universal_Aliasing was specified.  */"}, {"sha": "f5f54769edaa4e5d10e95ac8ded1409bfea8489d", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -196,10 +196,11 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Clone reference REF to this symtab_node and set its stmt to STMT.  */\n   ipa_ref *clone_reference (ipa_ref *ref, gimple *stmt);\n \n-  /* Find the structure describing a reference to REFERRED_NODE\n-     and associated with statement STMT.  */\n+  /* Find the structure describing a reference to REFERRED_NODE of USE_TYPE and\n+     associated with statement STMT or LTO_STMT_UID.  */\n   ipa_ref *find_reference (symtab_node *referred_node, gimple *stmt,\n-\t\t\t   unsigned int lto_stmt_uid);\n+\t\t\t   unsigned int lto_stmt_uid,\n+\t\t\t   enum ipa_ref_use use_type);\n \n   /* Remove all references that are associated with statement STMT.  */\n   void remove_stmt_references (gimple *stmt);"}, {"sha": "0106092e456895925740396c05d1813061aaed82", "filename": "gcc/combine.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -10055,9 +10055,12 @@ simplify_and_const_int_1 (scalar_int_mode mode, rtx varop,\n \n   /* See what bits may be nonzero in VAROP.  Unlike the general case of\n      a call to nonzero_bits, here we don't care about bits outside\n-     MODE.  */\n+     MODE unless WORD_REGISTER_OPERATIONS is true.  */\n \n-  nonzero = nonzero_bits (varop, mode) & GET_MODE_MASK (mode);\n+  scalar_int_mode tmode = mode;\n+  if (WORD_REGISTER_OPERATIONS && GET_MODE_BITSIZE (mode) < BITS_PER_WORD)\n+    tmode = word_mode;\n+  nonzero = nonzero_bits (varop, tmode) & GET_MODE_MASK (tmode);\n \n   /* Turn off all bits in the constant that are known to already be zero.\n      Thus, if the AND isn't needed at all, we will have CONSTOP == NONZERO_BITS\n@@ -10071,7 +10074,7 @@ simplify_and_const_int_1 (scalar_int_mode mode, rtx varop,\n \n   /* If VAROP is a NEG of something known to be zero or 1 and CONSTOP is\n      a power of two, we can replace this with an ASHIFT.  */\n-  if (GET_CODE (varop) == NEG && nonzero_bits (XEXP (varop, 0), mode) == 1\n+  if (GET_CODE (varop) == NEG && nonzero_bits (XEXP (varop, 0), tmode) == 1\n       && (i = exact_log2 (constop)) >= 0)\n     return simplify_shift_const (NULL_RTX, ASHIFT, mode, XEXP (varop, 0), i);\n "}, {"sha": "61559ed9de2481e0ba15e438a1ad5a7b9dae974a", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -879,6 +879,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t{\n \t  if (eax & bit_AMX_FP16)\n \t    set_feature (FEATURE_AMX_FP16);\n+\t  if (edx & bit_AMX_COMPLEX)\n+\t    set_feature (FEATURE_AMX_COMPLEX);\n \t}\n     }\n "}, {"sha": "d90c558311bb4fab0821faaf07c27d21c5a7ec64", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -117,6 +117,8 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA2_AMX_TILE | OPTION_MASK_ISA2_AMX_FP16)\n #define OPTION_MASK_ISA2_PREFETCHI_SET OPTION_MASK_ISA2_PREFETCHI\n #define OPTION_MASK_ISA2_RAOINT_SET OPTION_MASK_ISA2_RAOINT\n+#define OPTION_MASK_ISA2_AMX_COMPLEX_SET \\\n+  (OPTION_MASK_ISA2_AMX_TILE | OPTION_MASK_ISA2_AMX_COMPLEX)\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -282,7 +284,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_TSXLDTRK_UNSET OPTION_MASK_ISA2_TSXLDTRK\n #define OPTION_MASK_ISA2_AMX_TILE_UNSET \\\n   (OPTION_MASK_ISA2_AMX_TILE | OPTION_MASK_ISA2_AMX_INT8_UNSET \\\n-   | OPTION_MASK_ISA2_AMX_BF16_UNSET | OPTION_MASK_ISA2_AMX_FP16_UNSET)\n+   | OPTION_MASK_ISA2_AMX_BF16_UNSET | OPTION_MASK_ISA2_AMX_FP16_UNSET \\\n+   | OPTION_MASK_ISA2_AMX_COMPLEX_UNSET)\n #define OPTION_MASK_ISA2_AMX_INT8_UNSET OPTION_MASK_ISA2_AMX_INT8\n #define OPTION_MASK_ISA2_AMX_BF16_UNSET OPTION_MASK_ISA2_AMX_BF16\n #define OPTION_MASK_ISA2_UINTR_UNSET OPTION_MASK_ISA2_UINTR\n@@ -296,6 +299,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_FP16_UNSET OPTION_MASK_ISA2_AMX_FP16\n #define OPTION_MASK_ISA2_PREFETCHI_UNSET OPTION_MASK_ISA2_PREFETCHI\n #define OPTION_MASK_ISA2_RAOINT_UNSET OPTION_MASK_ISA2_RAOINT\n+#define OPTION_MASK_ISA2_AMX_COMPLEX_UNSET OPTION_MASK_ISA2_AMX_COMPLEX\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1246,6 +1250,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mamx_complex:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_COMPLEX_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_COMPLEX_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AMX_COMPLEX_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_COMPLEX_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "2dafbb25a49debaa511f2763a93daf0fc04d56d5", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -253,6 +253,7 @@ enum processor_features\n   FEATURE_AMX_FP16,\n   FEATURE_PREFETCHI,\n   FEATURE_RAOINT,\n+  FEATURE_AMX_COMPLEX,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "d4b0b23b417f8bf621222d5c5e92d91e43d490f9", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -184,4 +184,6 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"amx-fp16\", FEATURE_AMX_FP16, P_NONE, \"-mamx-fp16\")\n   ISA_NAMES_TABLE_ENTRY(\"prefetchi\", FEATURE_PREFETCHI, P_NONE, \"-mprefetchi\")\n   ISA_NAMES_TABLE_ENTRY(\"raoint\", FEATURE_RAOINT, P_NONE, \"-mraoint\")\n+  ISA_NAMES_TABLE_ENTRY(\"amx-complex\", FEATURE_AMX_COMPLEX,\n+\t\t\tP_NONE, \"-mamx-complex\")\n ISA_NAMES_TABLE_END"}, {"sha": "d15fcea23d1046595f84b9f2f67c29eae59a9d5f", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -446,7 +446,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n \t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\n \t\t       cmpccxaddintrin.h amxfp16intrin.h prfchiintrin.h\n-\t\t       raointintrin.h\"\n+\t\t       raointintrin.h amxcomplexintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "52112ba7c489e55ccc65bea5b181d74f4a785c3b", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -44,6 +44,9 @@ AARCH64_EXTRA_TUNING_OPTION (\"cheap_shift_extend\", CHEAP_SHIFT_EXTEND)\n /* Disallow load/store pair instructions on Q-registers.  */\n AARCH64_EXTRA_TUNING_OPTION (\"no_ldp_stp_qregs\", NO_LDP_STP_QREGS)\n \n+/* Disallow load-pair instructions to be formed in combine/peephole.  */\n+AARCH64_EXTRA_TUNING_OPTION (\"no_ldp_combine\", NO_LDP_COMBINE)\n+\n AARCH64_EXTRA_TUNING_OPTION (\"rename_load_regs\", RENAME_LOAD_REGS)\n \n AARCH64_EXTRA_TUNING_OPTION (\"cse_sve_vl_constants\", CSE_SVE_VL_CONSTANTS)"}, {"sha": "0f04ab9fba025c5f8a76da87c521dc90127a48fd", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1933,7 +1933,7 @@ static const struct tune_params ampere1_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE),\t\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NO_LDP_COMBINE),\t/* tune_flags.  */\n   &ampere1_prefetch_tune\n };\n \n@@ -1971,7 +1971,7 @@ static const struct tune_params ampere1a_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE),\t\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NO_LDP_COMBINE),\t/* tune_flags.  */\n   &ampere1_prefetch_tune\n };\n \n@@ -7484,7 +7484,20 @@ aarch64_function_arg_alignment (machine_mode mode, const_tree type,\n   gcc_assert (TYPE_MODE (type) == mode);\n \n   if (!AGGREGATE_TYPE_P (type))\n-    return TYPE_ALIGN (TYPE_MAIN_VARIANT (type));\n+    {\n+      /* The ABI alignment is the natural alignment of the type, without\n+\t any attributes applied.  Normally this is the alignment of the\n+\t TYPE_MAIN_VARIANT, but not always; see PR108910 for a counterexample.\n+\t For now we just handle the known exceptions explicitly.  */\n+      type = TYPE_MAIN_VARIANT (type);\n+      if (POINTER_TYPE_P (type))\n+\t{\n+\t  gcc_assert (known_eq (POINTER_SIZE, GET_MODE_BITSIZE (mode)));\n+\t  return POINTER_SIZE;\n+\t}\n+      gcc_assert (!TYPE_USER_ALIGN (type));\n+      return TYPE_ALIGN (type);\n+    }\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n     return TYPE_ALIGN (TREE_TYPE (type));\n@@ -26040,6 +26053,20 @@ aarch64_operands_ok_for_ldpstp (rtx *operands, bool load,\n   enum reg_class rclass_1, rclass_2;\n   rtx mem_1, mem_2, reg_1, reg_2;\n \n+  /* Allow the tuning structure to disable LDP instruction formation\n+     from combining instructions (e.g., in peephole2).\n+     TODO: Implement fine-grained tuning control for LDP and STP:\n+\t   1. control policies for load and store separately;\n+\t   2. support the following policies:\n+\t      - default (use what is in the tuning structure)\n+\t      - always\n+\t      - never\n+\t      - aligned (only if the compiler can prove that the\n+\t\tload will be aligned to 2 * element_size)  */\n+  if (load && (aarch64_tune_params.extra_tuning_flags\n+\t       & AARCH64_EXTRA_TUNE_NO_LDP_COMBINE))\n+    return false;\n+\n   if (load)\n     {\n       mem_1 = operands[1];"}, {"sha": "bf7ff9a97048c62a360e04945c97b6a4d71cbb03", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -13639,6 +13639,19 @@ arm_coproc_mem_operand_no_writeback (rtx op)\n   return arm_coproc_mem_operand_wb (op, 0);\n }\n \n+/* In non-STRICT mode, return the register number; in STRICT mode return\n+   the hard regno or the replacement if it won't be a mem.  Otherwise, return\n+   the original pseudo number.  */\n+static int\n+arm_effective_regno (rtx op, bool strict)\n+{\n+  gcc_assert (REG_P (op));\n+  if (!strict || REGNO (op) < FIRST_PSEUDO_REGISTER\n+      || !reg_renumber || reg_renumber[REGNO (op)] < 0)\n+    return REGNO (op);\n+  return reg_renumber[REGNO (op)];\n+}\n+\n /* This function returns TRUE on matching mode and op.\n 1. For given modes, check for [Rn], return TRUE for Rn <= LO_REGS.\n 2. For other modes, check for [Rn], return TRUE for Rn < R15 (expect R13).  */\n@@ -13651,7 +13664,7 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n   /* Match: (mem (reg)).  */\n   if (REG_P (op))\n     {\n-      int reg_no = REGNO (op);\n+      reg_no = arm_effective_regno (op, strict);\n       return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n \t       ? reg_no <= LAST_LO_REGNUM\n \t       : reg_no < LAST_ARM_REGNUM)\n@@ -13662,7 +13675,7 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n   if (code == POST_INC || code == PRE_DEC\n       || code == PRE_INC || code == POST_DEC)\n     {\n-      reg_no = REGNO (XEXP (op, 0));\n+      reg_no = arm_effective_regno (XEXP (op, 0), strict);\n       return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n \t       ? reg_no <= LAST_LO_REGNUM\n \t       :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n@@ -13678,7 +13691,7 @@ mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n \t   || (reload_completed && code == PLUS && REG_P (XEXP (op, 0))\n \t       && GET_CODE (XEXP (op, 1)) == CONST_INT))\n     {\n-      reg_no = REGNO (XEXP (op, 0));\n+      reg_no = arm_effective_regno (XEXP (op, 0), strict);\n       if (code == PLUS)\n \tval = INTVAL (XEXP (op, 1));\n       else"}, {"sha": "6ea1eca04007d94ee54e9a28566e66e839c613e6", "filename": "gcc/config/i386/amxcomplexintrin.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Famxcomplexintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Famxcomplexintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Famxcomplexintrin.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,59 @@\n+/* Copyright (C) 2023 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <amxcomplexintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AMXCOMPLEXINTRIN_H_INCLUDED\n+#define _AMXCOMPLEXINTRIN_H_INCLUDED\n+\n+#if !defined(__AMX_COMPLEX__)\n+#pragma GCC push_options\n+#pragma GCC target(\"amx-complex\")\n+#define __DISABLE_AMX_COMPLEX__\n+#endif /* __AMX_COMPLEX__ */\n+\n+#if defined(__x86_64__)\n+#define _tile_cmmimfp16ps_internal(src1_dst,src2,src3)\t\t\t\t\\\n+  __asm__ volatile\\\n+  (\"{tcmmimfp16ps\\t%%tmm\"#src3\", %%tmm\"#src2\", %%tmm\"#src1_dst\"|tcmmimfp16ps\\t%%tmm\"#src1_dst\", %%tmm\"#src2\", %%tmm\"#src3\"}\" ::)\n+\n+#define _tile_cmmrlfp16ps_internal(src1_dst,src2,src3)\t\t\t\t\\\n+  __asm__ volatile\\\n+  (\"{tcmmrlfp16ps\\t%%tmm\"#src3\", %%tmm\"#src2\", %%tmm\"#src1_dst\"|tcmmrlfp16ps\\t%%tmm\"#src1_dst\", %%tmm\"#src2\", %%tmm\"#src3\"}\" ::)\n+\n+#define _tile_cmmimfp16ps(src1_dst,src2,src3)\t\t\t\t\t\\\n+  _tile_cmmimfp16ps_internal (src1_dst, src2, src3)\n+\n+#define _tile_cmmrlfp16ps(src1_dst,src2,src3)\t\t\t\t\t\\\n+  _tile_cmmrlfp16ps_internal (src1_dst, src2, src3)\n+\n+#endif\n+\n+#ifdef __DISABLE_AMX_COMPLEX__\n+#undef __DISABLE_AMX_COMPLEX__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AMX_COMPLEX__ */\n+\n+#endif /* _AMXCOMPLEXINTRIN_H_INCLUDED */"}, {"sha": "e1d6d2ff77c7eb62c8382ccd224d1d9623062174", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -141,6 +141,7 @@\n #define bit_AMX_BF16    (1 << 22)\n #define bit_AMX_TILE    (1 << 24)\n #define bit_AMX_INT8    (1 << 25)\n+#define bit_AMX_COMPLEX (1 << 8)\n \n /* Extended State Enumeration Sub-leaf (%eax == 0xd, %ecx == 1) */\n #define bit_XSAVEOPT\t(1 << 0)"}, {"sha": "e7bd7cc706c9e79693f956db8bceb9d8a58c998c", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -675,6 +675,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__PREFETCHI__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_RAOINT)\n     def_or_undef (parse_in, \"__RAOINT__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AMX_COMPLEX)\n+    def_or_undef (parse_in, \"__AMX_COMPLEX__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "0634c6f5bac31eab051e5f4326808f5624434ac6", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -116,3 +116,4 @@ DEF_PTA(CMPCCXADD)\n DEF_PTA(AMX_FP16)\n DEF_PTA(PREFETCHI)\n DEF_PTA(RAOINT)\n+DEF_PTA(AMX_COMPLEX)"}, {"sha": "2cb0bddcd35e1caf30c268483cb19543d84219a1", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -238,7 +238,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mcmpccxadd\",      OPTION_MASK_ISA2_CMPCCXADD },\n   { \"-mamx-fp16\",       OPTION_MASK_ISA2_AMX_FP16 },\n   { \"-mprefetchi\",      OPTION_MASK_ISA2_PREFETCHI },\n-  { \"-mraoint\", \tOPTION_MASK_ISA2_RAOINT }\n+  { \"-mraoint\", \tOPTION_MASK_ISA2_RAOINT },\n+  { \"-mamx-complex\",\tOPTION_MASK_ISA2_AMX_COMPLEX }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1089,6 +1090,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"amx-fp16\", OPT_mamx_fp16),\n     IX86_ATTR_ISA (\"prefetchi\",   OPT_mprefetchi),\n     IX86_ATTR_ISA (\"raoint\", OPT_mraoint),\n+    IX86_ATTR_ISA (\"amx-complex\", OPT_mamx_complex),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "fbd33a6bfd1283bc63801b84c634f97c0c0f95b9", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -96,6 +96,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"i386-expand.h\"\n #include \"i386-features.h\"\n #include \"function-abi.h\"\n+#include \"rtl-error.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -13218,7 +13219,13 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    }\n \n \t  if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\t    warning (0, \"non-integer operand used with operand code %<z%>\");\n+\t    {\n+\t      if (this_is_asm_operands)\n+\t\twarning_for_asm (this_is_asm_operands,\n+\t\t\t\t \"non-integer operand used with operand code %<z%>\");\n+\t      else\n+\t\twarning (0, \"non-integer operand used with operand code %<z%>\");\n+\t    }\n \t  /* FALLTHRU */\n \n \tcase 'Z':\n@@ -13281,11 +13288,12 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  else\n \t    {\n \t      output_operand_lossage (\"invalid operand type used with \"\n-\t\t\t\t      \"operand code 'Z'\");\n+\t\t\t\t      \"operand code '%c'\", code);\n \t      return;\n \t    }\n \n-\t  output_operand_lossage (\"invalid operand size for operand code 'Z'\");\n+\t  output_operand_lossage (\"invalid operand size for operand code '%c'\",\n+\t\t\t\t  code);\n \t  return;\n \n \tcase 'd':"}, {"sha": "1da6dce8e0ba128e582b40921af95b747df8ade1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2361,7 +2361,7 @@ constexpr wide_int_bitmask PTA_ALDERLAKE = PTA_TREMONT | PTA_ADX | PTA_AVX\n constexpr wide_int_bitmask PTA_SIERRAFOREST = PTA_ALDERLAKE | PTA_AVXIFMA\n   | PTA_AVXVNNIINT8 | PTA_AVXNECONVERT | PTA_CMPCCXADD;\n constexpr wide_int_bitmask PTA_GRANITERAPIDS = PTA_SAPPHIRERAPIDS | PTA_AMX_FP16\n-  | PTA_PREFETCHI;\n+  | PTA_PREFETCHI | PTA_AMX_COMPLEX;\n constexpr wide_int_bitmask PTA_GRANDRIDGE = PTA_SIERRAFOREST | PTA_RAOINT;\n constexpr wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n   | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;"}, {"sha": "d74f6b1f8fc3b0fcde5c93bf286088dcde2e8237", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1274,3 +1274,7 @@ Enum(lam_type) String(u48) Value(lam_u48)\n \n EnumValue\n Enum(lam_type) String(u57) Value(lam_u57)\n+\n+mamx-complex\n+Target Mask(ISA2_AMX_COMPLEX) Var(ix86_isa_flags2) Save\n+Support AMX-COMPLEX built-in functions and code generation."}, {"sha": "b220d8719427f7760584bbe8114f2dd32ef25067", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -132,6 +132,8 @@\n \n #include <amxbf16intrin.h>\n \n+#include <amxcomplexintrin.h>\n+\n #include <prfchwintrin.h>\n \n #include <keylockerintrin.h>"}, {"sha": "b5a6cfcf7023467e274685202c7966c33b0ade03", "filename": "gcc/config/i386/x-mingw32-utf8", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fx-mingw32-utf8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fi386%2Fx-mingw32-utf8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-mingw32-utf8?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -34,7 +34,7 @@ utf8rc-mingw32.o : $(srcdir)/config/i386/utf8-mingw32.rc \\\n # Create an object file that just exports the global symbol\n # HOST_EXTRA_OBJS_SYMBOL\n sym-mingw32.o : $(srcdir)/config/i386/sym-mingw32.cc\n-\t$(COMPILER) -c $< $@\n+\t$(COMPILER) -c $<\n \n # Combine the two object files into one which has both the\n # compiled utf8 resource and the HOST_EXTRA_OBJS_SYMBOL symbol.\n@@ -44,8 +44,10 @@ sym-mingw32.o : $(srcdir)/config/i386/sym-mingw32.cc\n # If nothing references it into libbackend.a, it will not\n # get linked into the compiler proper eventually.\n # Therefore we need to request the symbol at compiler link time.\n+# -nostdlib is required for supporting old gcc versions that\n+# don't apply it automatically with -r.\n utf8-mingw32.o : utf8rc-mingw32.o sym-mingw32.o\n-\t$(COMPILER) -r utf8rc-mingw32.o sym-mingw32.o -o $@\n+\t$(COMPILER) -r -nostdlib utf8rc-mingw32.o sym-mingw32.o -o $@\n \n # Force compilers to link against the utf8 resource by\n # requiring the symbol to be defined."}, {"sha": "b4b1310a52d0d2bbeaa1752a4d23e738862b3de2", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -106,7 +106,7 @@ extern void pa_asm_output_aligned_local (FILE *, const char *,\n \t\t\t\t\t unsigned int);\n extern void pa_hpux_asm_output_external (FILE *, tree, const char *);\n extern HOST_WIDE_INT pa_initial_elimination_offset (int, int);\n-extern HOST_WIDE_INT pa_function_arg_size (machine_mode, const_tree);\n+extern int pa_function_arg_size (machine_mode, const_tree);\n extern void pa_output_function_label (FILE *);\n extern void hppa_profile_hook (int);\n "}, {"sha": "db633b275e5ebf50ee5b6fc65283908fd9bb2421", "filename": "gcc/config/pa/pa.cc", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fpa%2Fpa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Fpa%2Fpa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -9784,6 +9784,8 @@ pa_function_arg (cumulative_args_t cum_v, const function_arg_info &arg)\n     return NULL_RTX;\n \n   arg_size = pa_function_arg_size (mode, type);\n+  if (!arg_size)\n+    return NULL_RTX;\n \n   /* If this arg would be passed partially or totally on the stack, then\n      this routine should return zero.  pa_arg_partial_bytes will\n@@ -9985,15 +9987,16 @@ pa_arg_partial_bytes (cumulative_args_t cum_v, const function_arg_info &arg)\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n   unsigned int max_arg_words = 8;\n   unsigned int offset = 0;\n+  int arg_size;\n \n   if (!TARGET_64BIT)\n     return 0;\n \n-  if (pa_function_arg_size (arg.mode, arg.type) > 1 && (cum->words & 1))\n+  arg_size = pa_function_arg_size (arg.mode, arg.type);\n+  if (arg_size > 1 && (cum->words & 1))\n     offset = 1;\n \n-  if (cum->words + offset + pa_function_arg_size (arg.mode, arg.type)\n-      <= max_arg_words)\n+  if (cum->words + offset + arg_size <= max_arg_words)\n     /* Arg fits fully into registers.  */\n     return 0;\n   else if (cum->words + offset >= max_arg_words)\n@@ -11067,17 +11070,25 @@ pa_starting_frame_offset (void)\n   return 8;\n }\n \n-/* Figure out the size in words of the function argument.  The size\n-   returned by this function should always be greater than zero because\n-   we pass variable and zero sized objects by reference.  */\n+/* Figure out the size in words of the function argument.  */\n \n-HOST_WIDE_INT\n+int\n pa_function_arg_size (machine_mode mode, const_tree type)\n {\n   HOST_WIDE_INT size;\n \n   size = mode != BLKmode ? GET_MODE_SIZE (mode) : int_size_in_bytes (type); \n-  return CEIL (size, UNITS_PER_WORD);\n+\n+  /* The 64-bit runtime does not restrict the size of stack frames,\n+     but the gcc calling conventions limit argument sizes to 1G.  Our\n+     prologue/epilogue code limits frame sizes to just under 32 bits.\n+     1G is also the maximum frame size that can be handled by the HPUX\n+     unwind descriptor.  Since very large TYPE_SIZE_UNIT values can\n+     occur for (parallel:BLK []), we need to ignore large arguments\n+     passed by value.  */\n+  if (size >= (1 << (HOST_BITS_PER_INT - 2)))\n+    size = 0;\n+  return (int) CEIL (size, UNITS_PER_WORD);\n }\n \n #include \"gt-pa.h\""}, {"sha": "8654dbc5943544a441a6219ddd5b4a118a9fbdad", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -399,7 +399,7 @@\n (define_predicate \"uimm_extra_bit_or_twobits\"\n   (and (match_code \"const_int\")\n        (ior (match_operand 0 \"uimm_extra_bit_operand\")\n-\t    (match_operand 0 \"const_twobits_operand\"))))\n+\t    (match_operand 0 \"const_twobits_not_arith_operand\"))))\n \n ;; A CONST_INT operand that fits into the negative half of a\n ;; signed-immediate after a single cleared top bit has been"}, {"sha": "5244e8dcbf0a69f1e6c5ed3d4f81c62b7ffe0cd6", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -159,6 +159,7 @@ bool check_builtin_call (location_t, vec<location_t>, unsigned int,\n bool const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n bool legitimize_move (rtx, rtx, machine_mode);\n void emit_vlmax_vsetvl (machine_mode, rtx);\n+void emit_hard_vlmax_vsetvl (machine_mode, rtx);\n void emit_vlmax_op (unsigned, rtx, rtx, machine_mode);\n void emit_vlmax_op (unsigned, rtx, rtx, rtx, machine_mode);\n void emit_nonvlmax_op (unsigned, rtx, rtx, rtx, machine_mode);"}, {"sha": "392f5d02e17c0ce6c5d76a2248343f70ba41a4c6", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -118,6 +118,17 @@ const_vec_all_same_in_range_p (rtx x, HOST_WIDE_INT minval,\n \t  && IN_RANGE (INTVAL (elt), minval, maxval));\n }\n \n+/* Emit a vlmax vsetvl instruction.  This should only be used when\n+   optimization is disabled or after vsetvl insertion pass.  */\n+void\n+emit_hard_vlmax_vsetvl (machine_mode vmode, rtx vl)\n+{\n+  unsigned int sew = get_sew (vmode);\n+  emit_insn (gen_vsetvl (Pmode, vl, RVV_VLMAX, gen_int_mode (sew, Pmode),\n+\t\t\t gen_int_mode (get_vlmul (vmode), Pmode), const0_rtx,\n+\t\t\t const0_rtx));\n+}\n+\n void\n emit_vlmax_vsetvl (machine_mode vmode, rtx vl)\n {\n@@ -126,9 +137,7 @@ emit_vlmax_vsetvl (machine_mode vmode, rtx vl)\n   unsigned int ratio = calculate_ratio (sew, vlmul);\n \n   if (!optimize)\n-    emit_insn (gen_vsetvl (Pmode, vl, RVV_VLMAX, gen_int_mode (sew, Pmode),\n-\t\t\t   gen_int_mode (get_vlmul (vmode), Pmode), const0_rtx,\n-\t\t\t   const0_rtx));\n+    emit_hard_vlmax_vsetvl (vmode, vl);\n   else\n     emit_insn (gen_vlmax_avl (Pmode, vl, gen_int_mode (ratio, Pmode)));\n }"}, {"sha": "a74df066521052d3dec31386828210a7cf344d72", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "modified", "additions": 174, "deletions": 174, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -235,53 +235,53 @@ along with GCC; see the file COPYING3. If not see\n #define DEF_RVV_LMUL4_OPS(TYPE, REQUIRE)\n #endif\n \n-DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_I_OPS (vint8mf4_t, 0)\n DEF_RVV_I_OPS (vint8mf2_t, 0)\n DEF_RVV_I_OPS (vint8m1_t, 0)\n DEF_RVV_I_OPS (vint8m2_t, 0)\n DEF_RVV_I_OPS (vint8m4_t, 0)\n DEF_RVV_I_OPS (vint8m8_t, 0)\n-DEF_RVV_I_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_I_OPS (vint16mf2_t, 0)\n DEF_RVV_I_OPS (vint16m1_t, 0)\n DEF_RVV_I_OPS (vint16m2_t, 0)\n DEF_RVV_I_OPS (vint16m4_t, 0)\n DEF_RVV_I_OPS (vint16m8_t, 0)\n-DEF_RVV_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_I_OPS (vint32m1_t, 0)\n DEF_RVV_I_OPS (vint32m2_t, 0)\n DEF_RVV_I_OPS (vint32m4_t, 0)\n DEF_RVV_I_OPS (vint32m8_t, 0)\n-DEF_RVV_I_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_I_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_I_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_I_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_U_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_U_OPS (vuint8mf4_t, 0)\n DEF_RVV_U_OPS (vuint8mf2_t, 0)\n DEF_RVV_U_OPS (vuint8m1_t, 0)\n DEF_RVV_U_OPS (vuint8m2_t, 0)\n DEF_RVV_U_OPS (vuint8m4_t, 0)\n DEF_RVV_U_OPS (vuint8m8_t, 0)\n-DEF_RVV_U_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_U_OPS (vuint16mf2_t, 0)\n DEF_RVV_U_OPS (vuint16m1_t, 0)\n DEF_RVV_U_OPS (vuint16m2_t, 0)\n DEF_RVV_U_OPS (vuint16m4_t, 0)\n DEF_RVV_U_OPS (vuint16m8_t, 0)\n-DEF_RVV_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_U_OPS (vuint32m1_t, 0)\n DEF_RVV_U_OPS (vuint32m2_t, 0)\n DEF_RVV_U_OPS (vuint32m4_t, 0)\n DEF_RVV_U_OPS (vuint32m8_t, 0)\n-DEF_RVV_U_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_U_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_U_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_U_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_F_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_F_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_F_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_F_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_F_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n@@ -291,90 +291,90 @@ DEF_RVV_F_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_F_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_B_OPS (vbool64_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_B_OPS (vbool64_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_B_OPS (vbool32_t, 0)\n DEF_RVV_B_OPS (vbool16_t, 0)\n DEF_RVV_B_OPS (vbool8_t, 0)\n DEF_RVV_B_OPS (vbool4_t, 0)\n DEF_RVV_B_OPS (vbool2_t, 0)\n DEF_RVV_B_OPS (vbool1_t, 0)\n \n-DEF_RVV_WEXTI_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTI_OPS (vint16mf2_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m1_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m2_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m4_t, 0)\n DEF_RVV_WEXTI_OPS (vint16m8_t, 0)\n-DEF_RVV_WEXTI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTI_OPS (vint32m1_t, 0)\n DEF_RVV_WEXTI_OPS (vint32m2_t, 0)\n DEF_RVV_WEXTI_OPS (vint32m4_t, 0)\n DEF_RVV_WEXTI_OPS (vint32m8_t, 0)\n-DEF_RVV_WEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTI_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTI_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTI_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTI_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_QEXTI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_QEXTI_OPS (vint32m1_t, 0)\n DEF_RVV_QEXTI_OPS (vint32m2_t, 0)\n DEF_RVV_QEXTI_OPS (vint32m4_t, 0)\n DEF_RVV_QEXTI_OPS (vint32m8_t, 0)\n-DEF_RVV_QEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTI_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTI_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTI_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTI_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_OEXTI_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTI_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTI_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTI_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTI_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTI_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTI_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTI_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_WEXTU_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTU_OPS (vuint16mf2_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m1_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m2_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m4_t, 0)\n DEF_RVV_WEXTU_OPS (vuint16m8_t, 0)\n-DEF_RVV_WEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WEXTU_OPS (vuint32m1_t, 0)\n DEF_RVV_WEXTU_OPS (vuint32m2_t, 0)\n DEF_RVV_WEXTU_OPS (vuint32m4_t, 0)\n DEF_RVV_WEXTU_OPS (vuint32m8_t, 0)\n-DEF_RVV_WEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_WEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_QEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_QEXTU_OPS (vuint32m1_t, 0)\n DEF_RVV_QEXTU_OPS (vuint32m2_t, 0)\n DEF_RVV_QEXTU_OPS (vuint32m4_t, 0)\n DEF_RVV_QEXTU_OPS (vuint32m8_t, 0)\n-DEF_RVV_QEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_QEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_QEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_QEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_OEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_OEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_OEXTU_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTU_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTU_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_OEXTU_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_FULL_V_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_I_OPS (vint8mf4_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8mf2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m1_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m4_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint8m8_t, 0)\n-DEF_RVV_FULL_V_I_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_I_OPS (vint16mf2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m1_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m4_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint16m8_t, 0)\n-DEF_RVV_FULL_V_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_I_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_I_OPS (vint32m1_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint32m2_t, 0)\n DEF_RVV_FULL_V_I_OPS (vint32m4_t, 0)\n@@ -384,20 +384,20 @@ DEF_RVV_FULL_V_I_OPS (vint64m2_t, RVV_REQUIRE_FULL_V)\n DEF_RVV_FULL_V_I_OPS (vint64m4_t, RVV_REQUIRE_FULL_V)\n DEF_RVV_FULL_V_I_OPS (vint64m8_t, RVV_REQUIRE_FULL_V)\n \n-DEF_RVV_FULL_V_U_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_U_OPS (vuint8mf4_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8mf2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m1_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m4_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint8m8_t, 0)\n-DEF_RVV_FULL_V_U_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_U_OPS (vuint16mf2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m1_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m4_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint16m8_t, 0)\n-DEF_RVV_FULL_V_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_FULL_V_U_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_FULL_V_U_OPS (vuint32m1_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint32m2_t, 0)\n DEF_RVV_FULL_V_U_OPS (vuint32m4_t, 0)\n@@ -412,128 +412,128 @@ DEF_RVV_WEXTF_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WEXTF_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WEXTF_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_CONVERT_I_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_CONVERT_I_OPS (vint32m1_t, 0)\n DEF_RVV_CONVERT_I_OPS (vint32m2_t, 0)\n DEF_RVV_CONVERT_I_OPS (vint32m4_t, 0)\n DEF_RVV_CONVERT_I_OPS (vint32m8_t, 0)\n-DEF_RVV_CONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_CONVERT_U_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_CONVERT_U_OPS (vuint32m1_t, 0)\n DEF_RVV_CONVERT_U_OPS (vuint32m2_t, 0)\n DEF_RVV_CONVERT_U_OPS (vuint32m4_t, 0)\n DEF_RVV_CONVERT_U_OPS (vuint32m8_t, 0)\n-DEF_RVV_CONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_CONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_CONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_WCONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_I_OPS (vint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n \n-DEF_RVV_WCONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n-DEF_RVV_WCONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n+DEF_RVV_WCONVERT_U_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_WCONVERT_F_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_WCONVERT_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_WI_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WI_OPS (vint8mf4_t, 0)\n DEF_RVV_WI_OPS (vint8mf2_t, 0)\n DEF_RVV_WI_OPS (vint8m1_t, 0)\n DEF_RVV_WI_OPS (vint8m2_t, 0)\n DEF_RVV_WI_OPS (vint8m4_t, 0)\n DEF_RVV_WI_OPS (vint8m8_t, 0)\n-DEF_RVV_WI_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WI_OPS (vint16mf2_t, 0)\n DEF_RVV_WI_OPS (vint16m1_t, 0)\n DEF_RVV_WI_OPS (vint16m2_t, 0)\n DEF_RVV_WI_OPS (vint16m4_t, 0)\n DEF_RVV_WI_OPS (vint16m8_t, 0)\n-DEF_RVV_WI_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WI_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WI_OPS (vint32m1_t, 0)\n DEF_RVV_WI_OPS (vint32m2_t, 0)\n DEF_RVV_WI_OPS (vint32m4_t, 0)\n DEF_RVV_WI_OPS (vint32m8_t, 0)\n \n-DEF_RVV_WU_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WU_OPS (vuint8mf4_t, 0)\n DEF_RVV_WU_OPS (vuint8mf2_t, 0)\n DEF_RVV_WU_OPS (vuint8m1_t, 0)\n DEF_RVV_WU_OPS (vuint8m2_t, 0)\n DEF_RVV_WU_OPS (vuint8m4_t, 0)\n DEF_RVV_WU_OPS (vuint8m8_t, 0)\n-DEF_RVV_WU_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WU_OPS (vuint16mf2_t, 0)\n DEF_RVV_WU_OPS (vuint16m1_t, 0)\n DEF_RVV_WU_OPS (vuint16m2_t, 0)\n DEF_RVV_WU_OPS (vuint16m4_t, 0)\n DEF_RVV_WU_OPS (vuint16m8_t, 0)\n-DEF_RVV_WU_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_WU_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WU_OPS (vuint32m1_t, 0)\n DEF_RVV_WU_OPS (vuint32m2_t, 0)\n DEF_RVV_WU_OPS (vuint32m4_t, 0)\n DEF_RVV_WU_OPS (vuint32m8_t, 0)\n \n-DEF_RVV_WF_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_WF_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_WF_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_WF_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_WF_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_WF_OPS (vfloat32m8_t, RVV_REQUIRE_ELEN_FP_32)\n \n-DEF_RVV_EI16_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vint8mf4_t, 0)\n DEF_RVV_EI16_OPS (vint8mf2_t, 0)\n DEF_RVV_EI16_OPS (vint8m1_t, 0)\n DEF_RVV_EI16_OPS (vint8m2_t, 0)\n DEF_RVV_EI16_OPS (vint8m4_t, 0)\n-DEF_RVV_EI16_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vint16mf2_t, 0)\n DEF_RVV_EI16_OPS (vint16m1_t, 0)\n DEF_RVV_EI16_OPS (vint16m2_t, 0)\n DEF_RVV_EI16_OPS (vint16m4_t, 0)\n DEF_RVV_EI16_OPS (vint16m8_t, 0)\n-DEF_RVV_EI16_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vint32m1_t, 0)\n DEF_RVV_EI16_OPS (vint32m2_t, 0)\n DEF_RVV_EI16_OPS (vint32m4_t, 0)\n DEF_RVV_EI16_OPS (vint32m8_t, 0)\n-DEF_RVV_EI16_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vuint8mf4_t, 0)\n DEF_RVV_EI16_OPS (vuint8mf2_t, 0)\n DEF_RVV_EI16_OPS (vuint8m1_t, 0)\n DEF_RVV_EI16_OPS (vuint8m2_t, 0)\n DEF_RVV_EI16_OPS (vuint8m4_t, 0)\n-DEF_RVV_EI16_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vuint16mf2_t, 0)\n DEF_RVV_EI16_OPS (vuint16m1_t, 0)\n DEF_RVV_EI16_OPS (vuint16m2_t, 0)\n DEF_RVV_EI16_OPS (vuint16m4_t, 0)\n DEF_RVV_EI16_OPS (vuint16m8_t, 0)\n-DEF_RVV_EI16_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vuint32m1_t, 0)\n DEF_RVV_EI16_OPS (vuint32m2_t, 0)\n DEF_RVV_EI16_OPS (vuint32m4_t, 0)\n DEF_RVV_EI16_OPS (vuint32m8_t, 0)\n-DEF_RVV_EI16_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EI16_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_EI16_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EI16_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EI16_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_EI16_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_EI16_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n@@ -543,67 +543,67 @@ DEF_RVV_EI16_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_EI16_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_EI16_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_EEW8_INTERPRET_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16mf2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint16m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vint32m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16mf2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint16m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m1_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m2_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m4_t, 0)\n DEF_RVV_EEW8_INTERPRET_OPS (vuint32m8_t, 0)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW8_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW8_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_EEW16_INTERPRET_OPS (vint8mf4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8mf2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint8m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vint32m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8mf4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8mf2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint8m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m1_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m2_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m4_t, 0)\n DEF_RVV_EEW16_INTERPRET_OPS (vuint32m8_t, 0)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW16_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW16_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_EEW32_INTERPRET_OPS (vint8mf2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint8m1_t, 0)\n@@ -615,10 +615,10 @@ DEF_RVV_EEW32_INTERPRET_OPS (vint16m1_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint16m2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint16m4_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vint16m8_t, 0)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vint64m8_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint8mf2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint8m1_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint8m2_t, 0)\n@@ -629,10 +629,10 @@ DEF_RVV_EEW32_INTERPRET_OPS (vuint16m1_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint16m2_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint16m4_t, 0)\n DEF_RVV_EEW32_INTERPRET_OPS (vuint16m8_t, 0)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_EEW32_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_EEW32_INTERPRET_OPS (vuint64m8_t, RVV_REQUIRE_ELEN_64)\n \n DEF_RVV_EEW64_INTERPRET_OPS (vint8m1_t, 0)\n DEF_RVV_EEW64_INTERPRET_OPS (vint8m2_t, 0)\n@@ -659,162 +659,162 @@ DEF_RVV_EEW64_INTERPRET_OPS (vuint32m2_t, 0)\n DEF_RVV_EEW64_INTERPRET_OPS (vuint32m4_t, 0)\n DEF_RVV_EEW64_INTERPRET_OPS (vuint32m8_t, 0)\n \n-DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint8m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint16m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint32m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint32m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vint32m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint8m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint16m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint32m1_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint32m2_t, 0)\n DEF_RVV_X2_VLMUL_EXT_OPS (vuint32m4_t, 0)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_X2_VLMUL_EXT_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint8m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint16mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint16m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint16m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint32m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vint32m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint8m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint16m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint16m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint32m1_t, 0)\n DEF_RVV_X4_VLMUL_EXT_OPS (vuint32m2_t, 0)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_X4_VLMUL_EXT_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint8mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint8m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint16mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint16m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vint32m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint8m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint16m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vuint32m1_t, 0)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X8_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n+DEF_RVV_X8_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X8_VLMUL_EXT_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_X8_VLMUL_EXT_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n \n-DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf4_t, 0)\n DEF_RVV_X16_VLMUL_EXT_OPS (vint8mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vint16mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n DEF_RVV_X16_VLMUL_EXT_OPS (vuint8mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X16_VLMUL_EXT_OPS (vuint16mf2_t, 0)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X16_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_ZVE64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vuint32mf2_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X16_VLMUL_EXT_OPS (vfloat32mf2_t, RVV_REQUIRE_ELEN_FP_32 | RVV_REQUIRE_MIN_VLEN_64)\n \n-DEF_RVV_X32_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X32_VLMUL_EXT_OPS (vint8mf4_t, 0)\n-DEF_RVV_X32_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X32_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n DEF_RVV_X32_VLMUL_EXT_OPS (vuint8mf4_t, 0)\n-DEF_RVV_X32_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X32_VLMUL_EXT_OPS (vuint16mf4_t, RVV_REQUIRE_MIN_VLEN_64)\n \n-DEF_RVV_X64_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n-DEF_RVV_X64_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_X64_VLMUL_EXT_OPS (vint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n+DEF_RVV_X64_VLMUL_EXT_OPS (vuint8mf8_t, RVV_REQUIRE_MIN_VLEN_64)\n \n DEF_RVV_LMUL1_OPS (vint8m1_t, 0)\n DEF_RVV_LMUL1_OPS (vint16m1_t, 0)\n DEF_RVV_LMUL1_OPS (vint32m1_t, 0)\n-DEF_RVV_LMUL1_OPS (vint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL1_OPS (vint64m1_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL1_OPS (vuint8m1_t, 0)\n DEF_RVV_LMUL1_OPS (vuint16m1_t, 0)\n DEF_RVV_LMUL1_OPS (vuint32m1_t, 0)\n-DEF_RVV_LMUL1_OPS (vuint64m1_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL1_OPS (vuint64m1_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL1_OPS (vfloat32m1_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_LMUL1_OPS (vfloat64m1_t, RVV_REQUIRE_ELEN_FP_64)\n \n DEF_RVV_LMUL2_OPS (vint8m2_t, 0)\n DEF_RVV_LMUL2_OPS (vint16m2_t, 0)\n DEF_RVV_LMUL2_OPS (vint32m2_t, 0)\n-DEF_RVV_LMUL2_OPS (vint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL2_OPS (vint64m2_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL2_OPS (vuint8m2_t, 0)\n DEF_RVV_LMUL2_OPS (vuint16m2_t, 0)\n DEF_RVV_LMUL2_OPS (vuint32m2_t, 0)\n-DEF_RVV_LMUL2_OPS (vuint64m2_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL2_OPS (vuint64m2_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL2_OPS (vfloat32m2_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_LMUL2_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n \n DEF_RVV_LMUL4_OPS (vint8m4_t, 0)\n DEF_RVV_LMUL4_OPS (vint16m4_t, 0)\n DEF_RVV_LMUL4_OPS (vint32m4_t, 0)\n-DEF_RVV_LMUL4_OPS (vint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL4_OPS (vint64m4_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL4_OPS (vuint8m4_t, 0)\n DEF_RVV_LMUL4_OPS (vuint16m4_t, 0)\n DEF_RVV_LMUL4_OPS (vuint32m4_t, 0)\n-DEF_RVV_LMUL4_OPS (vuint64m4_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_LMUL4_OPS (vuint64m4_t, RVV_REQUIRE_ELEN_64)\n DEF_RVV_LMUL4_OPS (vfloat32m4_t, RVV_REQUIRE_ELEN_FP_32)\n DEF_RVV_LMUL4_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n "}, {"sha": "01cea23d3e687031c6ddf1945af76b43a60c15cf", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2312,6 +2312,10 @@ register_builtin_type (vector_type_index type, tree eltype, machine_mode mode)\n   builtin_types[type].scalar = eltype;\n   builtin_types[type].scalar_ptr = build_pointer_type (eltype);\n   builtin_types[type].scalar_const_ptr = build_const_pointer (eltype);\n+  /* TODO: We currently just skip the register of the illegal RVV type.\n+     Ideally, we should report error message more friendly instead of\n+     reporting \"unknown\" type. Support more friendly error message in\n+     the future.  */\n   if (!riscv_v_ext_vector_mode_p (mode))\n     return;\n \n@@ -2362,6 +2366,10 @@ register_vector_type (vector_type_index type)\n \n   /* When vectype is NULL, the corresponding builtin type\n      is disabled according to '-march'.  */\n+  /* TODO: We currently just skip the register of the illegal RVV type.\n+     Ideally, we should report error message more friendly instead of\n+     reporting \"unknown\" type. Support more friendly error message in\n+     the future.  */\n   if (!vectype)\n     return;\n   tree id = get_identifier (vector_types[type].name);\n@@ -2452,12 +2460,14 @@ check_required_extensions (const function_instance &instance)\n     riscv_isa_flags |= RVV_REQUIRE_ELEN_FP_32;\n   if (TARGET_VECTOR_ELEN_FP_64)\n     riscv_isa_flags |= RVV_REQUIRE_ELEN_FP_64;\n-  if (TARGET_MIN_VLEN > 32)\n-    riscv_isa_flags |= RVV_REQUIRE_ZVE64;\n+  if (TARGET_VECTOR_ELEN_64)\n+    riscv_isa_flags |= RVV_REQUIRE_ELEN_64;\n   if (TARGET_64BIT)\n     riscv_isa_flags |= RVV_REQUIRE_RV64BIT;\n   if (TARGET_FULL_V)\n     riscv_isa_flags |= RVV_REQUIRE_FULL_V;\n+  if (TARGET_MIN_VLEN > 32)\n+    riscv_isa_flags |= RVV_REQUIRE_MIN_VLEN_64;\n \n   uint64_t missing_extensions = required_extensions & ~riscv_isa_flags;\n   if (missing_extensions != 0)"}, {"sha": "8ffb9d33e33b762b2c112f1bb2b4739ee0a972ee", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -103,10 +103,11 @@ static const unsigned int CP_WRITE_CSR = 1U << 5;\n \n /* Bit values used to identify required extensions for RVV intrinsics.  */\n #define RVV_REQUIRE_RV64BIT (1 << 0)\t/* Require RV64.  */\n-#define RVV_REQUIRE_ZVE64 (1 << 1)\t/* Require TARGET_MIN_VLEN > 32.  */\n+#define RVV_REQUIRE_ELEN_64 (1 << 1)\t/* Require TARGET_VECTOR_ELEN_64.  */\n #define RVV_REQUIRE_ELEN_FP_32 (1 << 2) /* Require FP ELEN >= 32.  */\n #define RVV_REQUIRE_ELEN_FP_64 (1 << 3) /* Require FP ELEN >= 64.  */\n #define RVV_REQUIRE_FULL_V (1 << 4) /* Require Full 'V' extension.  */\n+#define RVV_REQUIRE_MIN_VLEN_64 (1 << 5)\t/* Require TARGET_MIN_VLEN >= 64.  */\n \n /* Enumerates the RVV operand types.  */\n enum operand_type_index"}, {"sha": "3b944547b491c9082c2558db13365a17a188e028", "filename": "gcc/config/riscv/riscv-vector-switch.def", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-switch.def?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -83,16 +83,6 @@ TODO: FP16 vector needs support of 'zvfh', we don't support it yet.  */\n #define ENTRY(MODE, REQUIREMENT, VLMUL_FOR_MIN_VLEN32, RATIO_FOR_MIN_VLEN32,   \\\n \t      VLMUL_FOR_MIN_VLEN64, RATIO_FOR_MIN_VLEN64)\n #endif\n-/* Flag of FP32 vector.  */\n-#ifndef TARGET_VECTOR_FP32\n-#define TARGET_VECTOR_FP32                                                     \\\n-  (TARGET_HARD_FLOAT && (TARGET_VECTOR_ELEN_FP_32 || TARGET_VECTOR_ELEN_FP_64))\n-#endif\n-/* Flag of FP64 vector.  */\n-#ifndef TARGET_VECTOR_FP64\n-#define TARGET_VECTOR_FP64                                                     \\\n-  (TARGET_DOUBLE_FLOAT && TARGET_VECTOR_ELEN_FP_64 && (TARGET_MIN_VLEN > 32))\n-#endif\n \n /* Mask modes. Disable VNx64BImode when TARGET_MIN_VLEN == 32.  */\n ENTRY (VNx64BI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_8, 1)\n@@ -129,35 +119,31 @@ ENTRY (VNx2HF, false, LMUL_1, 16, LMUL_F2, 32)\n ENTRY (VNx1HF, false, LMUL_F2, 32, LMUL_F4, 64)\n \n /* SEW = 32. Disable VNx16SImode when TARGET_MIN_VLEN == 32.\n-   For single-precision floating-point, we need TARGET_VECTOR_FP32 ==\n-   RVV_ENABLE.  */\n+   For single-precision floating-point, we need TARGET_VECTOR_ELEN_FP_32 to be\n+   true.  */\n ENTRY (VNx16SI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_8, 4)\n ENTRY (VNx8SI, true, LMUL_8, 4, LMUL_4, 8)\n ENTRY (VNx4SI, true, LMUL_4, 8, LMUL_2, 16)\n ENTRY (VNx2SI, true, LMUL_2, 16, LMUL_1, 32)\n ENTRY (VNx1SI, true, LMUL_1, 32, LMUL_F2, 64)\n \n-ENTRY (VNx16SF, TARGET_VECTOR_FP32 && (TARGET_MIN_VLEN > 32), LMUL_RESERVED, 0,\n-       LMUL_8, 4)\n-ENTRY (VNx8SF, TARGET_VECTOR_FP32, LMUL_8, 4, LMUL_4, 8)\n-ENTRY (VNx4SF, TARGET_VECTOR_FP32, LMUL_4, 8, LMUL_2, 16)\n-ENTRY (VNx2SF, TARGET_VECTOR_FP32, LMUL_2, 16, LMUL_1, 32)\n-ENTRY (VNx1SF, TARGET_VECTOR_FP32, LMUL_1, 32, LMUL_F2, 64)\n-\n-/* SEW = 64. Enable when TARGET_MIN_VLEN > 32.\n-   For double-precision floating-point, we need TARGET_VECTOR_FP64 ==\n-   RVV_ENABLE.  */\n-ENTRY (VNx8DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_8, 8)\n-ENTRY (VNx4DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_4, 16)\n-ENTRY (VNx2DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_2, 32)\n-ENTRY (VNx1DI, TARGET_MIN_VLEN > 32, LMUL_RESERVED, 0, LMUL_1, 64)\n-\n-ENTRY (VNx8DF, TARGET_VECTOR_FP64 && (TARGET_MIN_VLEN > 32), LMUL_RESERVED, 0,\n-       LMUL_8, 8)\n-ENTRY (VNx4DF, TARGET_VECTOR_FP64, LMUL_RESERVED, 0, LMUL_4, 16)\n-ENTRY (VNx2DF, TARGET_VECTOR_FP64, LMUL_RESERVED, 0, LMUL_2, 32)\n-ENTRY (VNx1DF, TARGET_VECTOR_FP64, LMUL_RESERVED, 0, LMUL_1, 64)\n-\n-#undef TARGET_VECTOR_FP32\n-#undef TARGET_VECTOR_FP64\n+ENTRY (VNx16SF, TARGET_VECTOR_ELEN_FP_32, LMUL_RESERVED, 0, LMUL_8, 4)\n+ENTRY (VNx8SF, TARGET_VECTOR_ELEN_FP_32, LMUL_8, 4, LMUL_4, 8)\n+ENTRY (VNx4SF, TARGET_VECTOR_ELEN_FP_32, LMUL_4, 8, LMUL_2, 16)\n+ENTRY (VNx2SF, TARGET_VECTOR_ELEN_FP_32, LMUL_2, 16, LMUL_1, 32)\n+ENTRY (VNx1SF, TARGET_VECTOR_ELEN_FP_32, LMUL_1, 32, LMUL_F2, 64)\n+\n+/* SEW = 64. Enable when TARGET_VECTOR_ELEN_64 is true.\n+   For double-precision floating-point, we need TARGET_VECTOR_ELEN_FP_64 to be\n+   true.  */\n+ENTRY (VNx8DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_8, 8)\n+ENTRY (VNx4DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_4, 16)\n+ENTRY (VNx2DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_2, 32)\n+ENTRY (VNx1DI, TARGET_VECTOR_ELEN_64, LMUL_RESERVED, 0, LMUL_1, 64)\n+\n+ENTRY (VNx8DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_8, 8)\n+ENTRY (VNx4DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_4, 16)\n+ENTRY (VNx2DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_2, 32)\n+ENTRY (VNx1DF, TARGET_VECTOR_ELEN_FP_64, LMUL_RESERVED, 0, LMUL_1, 64)\n+\n #undef ENTRY"}, {"sha": "e88fa2d6337a28a911ce0464b8148dab4de21645", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -3419,6 +3419,12 @@ riscv_expand_conditional_move (rtx dest, rtx op, rtx cons, rtx alt)\n     {\n       riscv_emit_int_compare (&code, &op0, &op1);\n       rtx cond = gen_rtx_fmt_ee (code, GET_MODE (op0), op0, op1);\n+\n+      /* The expander allows (const_int 0) for CONS for the benefit of\n+\t TARGET_XTHEADCONDMOV, but that case isn't supported for\n+\t TARGET_SFB_ALU.  So force that operand into a register if\n+\t necessary.  */\n+      cons = force_reg (GET_MODE (dest), cons);\n       emit_insn (gen_rtx_SET (dest, gen_rtx_IF_THEN_ELSE (GET_MODE (dest),\n \t\t\t\t\t\t\t  cond, cons, alt)));\n       return true;\n@@ -7066,6 +7072,77 @@ riscv_shamt_matches_mask_p (int shamt, HOST_WIDE_INT mask)\n   return shamt == ctz_hwi (mask);\n }\n \n+static HARD_REG_SET\n+vector_zero_call_used_regs (HARD_REG_SET need_zeroed_hardregs)\n+{\n+  HARD_REG_SET zeroed_hardregs;\n+  CLEAR_HARD_REG_SET (zeroed_hardregs);\n+\n+  /* Find a register to hold vl.  */\n+  unsigned vl_regno = INVALID_REGNUM;\n+  /* Skip the first GPR, otherwise the existing vl is kept due to the same\n+     between vl and avl.  */\n+  for (unsigned regno = GP_REG_FIRST + 1; regno <= GP_REG_LAST; regno++)\n+    {\n+      if (TEST_HARD_REG_BIT (need_zeroed_hardregs, regno))\n+\t{\n+\t  vl_regno = regno;\n+\t  break;\n+\t}\n+    }\n+\n+  if (vl_regno > GP_REG_LAST)\n+    sorry (\"cannot allocate vl register for %qs on this target\",\n+\t   \"-fzero-call-used-regs\");\n+\n+  /* Vector configurations need not be saved and restored here.  The\n+     -fzero-call-used-regs=* option will zero all vector registers and\n+     return.  So there's no vector operations between them.  */\n+\n+  bool emitted_vlmax_vsetvl = false;\n+  rtx vl = gen_rtx_REG (Pmode, vl_regno); /* vl is VLMAX.  */\n+  for (unsigned regno = V_REG_FIRST; regno <= V_REG_LAST; ++regno)\n+    {\n+      if (TEST_HARD_REG_BIT (need_zeroed_hardregs, regno))\n+\t{\n+\t  rtx target = regno_reg_rtx[regno];\n+\t  machine_mode mode = GET_MODE (target);\n+\t  poly_uint16 nunits = GET_MODE_NUNITS (mode);\n+\t  machine_mode mask_mode\n+\t    = riscv_vector::get_vector_mode (BImode, nunits).require ();\n+\n+\t  if (!emitted_vlmax_vsetvl)\n+\t    {\n+\t      riscv_vector::emit_hard_vlmax_vsetvl (mode, vl);\n+\t      emitted_vlmax_vsetvl = true;\n+\t    }\n+\n+\t  riscv_vector::emit_vlmax_op (code_for_pred_mov (mode), target,\n+\t\t\t\t       CONST0_RTX (mode), vl, mask_mode);\n+\n+\t  SET_HARD_REG_BIT (zeroed_hardregs, regno);\n+\t}\n+    }\n+\n+  return zeroed_hardregs;\n+}\n+\n+/* Generate a sequence of instructions that zero registers specified by\n+   NEED_ZEROED_HARDREGS.  Return the ZEROED_HARDREGS that are actually\n+   zeroed.  */\n+HARD_REG_SET\n+riscv_zero_call_used_regs (HARD_REG_SET need_zeroed_hardregs)\n+{\n+  HARD_REG_SET zeroed_hardregs;\n+  CLEAR_HARD_REG_SET (zeroed_hardregs);\n+\n+  if (TARGET_VECTOR)\n+    zeroed_hardregs |= vector_zero_call_used_regs (need_zeroed_hardregs);\n+\n+  return zeroed_hardregs | default_zero_call_used_regs (need_zeroed_hardregs\n+\t\t\t\t\t\t\t& ~zeroed_hardregs);\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -7317,6 +7394,9 @@ riscv_shamt_matches_mask_p (int shamt, HOST_WIDE_INT mask)\n #undef TARGET_DWARF_POLY_INDETERMINATE_VALUE\n #define TARGET_DWARF_POLY_INDETERMINATE_VALUE riscv_dwarf_poly_indeterminate_value\n \n+#undef TARGET_ZERO_CALL_USED_REGS\n+#define TARGET_ZERO_CALL_USED_REGS riscv_zero_call_used_regs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-riscv.h\""}, {"sha": "1252d6f851ac55b1d865a1b718bd978e79655bc7", "filename": "gcc/config/riscv/t-riscv", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Ft-riscv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Ft-riscv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Ft-riscv?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -102,8 +102,8 @@ $(common_out_file): $(srcdir)/config/riscv/riscv-cores.def \\\n     $(srcdir)/config/riscv/riscv-protos.h \\\n     $(srcdir)/config/riscv/riscv-subset.h\n \n-build/genrvv-type-indexer.o: $(srcdir)/config/riscv/genrvv-type-indexer.cc $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H) insn-modes.h\n+build/genrvv-type-indexer.o: $(srcdir)/config/riscv/genrvv-type-indexer.cc $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H)\n \n build/genrvv-type-indexer$(build_exeext): build/genrvv-type-indexer.o\n \t+$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) -o $@ \\"}, {"sha": "70ad85b661be44b597e3ce066ae89dfa86d51e4a", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -86,8 +86,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -102,8 +102,8 @@\n (define_mode_iterator VEEWEXT2 [\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -117,8 +117,8 @@\n \n (define_mode_iterator VEEWEXT4 [\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -131,8 +131,8 @@\n ])\n \n (define_mode_iterator VEEWEXT8 [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n   (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n   (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n@@ -162,8 +162,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n   VNx1SI VNx2SI VNx4SI VNx8SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -177,7 +177,7 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI\n   VNx1HI VNx2HI VNx4HI VNx8HI\n   VNx1SI VNx2SI VNx4SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -189,7 +189,7 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI\n   VNx1HI VNx2HI VNx4HI\n   VNx1SI VNx2SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n@@ -215,8 +215,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -232,8 +232,8 @@\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VI_ZVE32 [\n@@ -291,8 +291,8 @@\n ])\n \n (define_mode_iterator VI_D [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VFULLI_D [\n@@ -302,28 +302,28 @@\n \n (define_mode_iterator VNX1_QHSD [\n   VNx1QI VNx1HI VNx1SI\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n (define_mode_iterator VNX2_QHSD [\n   VNx2QI VNx2HI VNx2SI\n-  (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n (define_mode_iterator VNX4_QHSD [\n   VNx4QI VNx4HI VNx4SI\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n (define_mode_iterator VNX8_QHSD [\n   VNx8QI VNx8HI VNx8SI\n-  (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n@@ -373,8 +373,8 @@\n   (VNx4QI \"TARGET_MIN_VLEN == 32\") VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n   (VNx2HI \"TARGET_MIN_VLEN == 32\") VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   (VNx1SI \"TARGET_MIN_VLEN == 32\") VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n   (VNx1SF \"TARGET_VECTOR_ELEN_FP_32 && TARGET_MIN_VLEN == 32\")\n   (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n   (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n@@ -401,8 +401,8 @@\n (define_mode_iterator VWEXTI [\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VWEXTF [\n@@ -413,21 +413,21 @@\n ])\n \n (define_mode_iterator VWCONVERTI [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n-  (VNx2DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n-  (VNx8DI \"TARGET_MIN_VLEN > 32 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8DI \"TARGET_VECTOR_ELEN_64 && TARGET_VECTOR_ELEN_FP_32\")\n ])\n \n (define_mode_iterator VQEXTI [\n   VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_iterator VOEXTI [\n-  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n-  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_VECTOR_ELEN_64\") (VNx2DI \"TARGET_VECTOR_ELEN_64\")\n+  (VNx4DI \"TARGET_VECTOR_ELEN_64\") (VNx8DI \"TARGET_VECTOR_ELEN_64\")\n ])\n \n (define_mode_attr VLMULX2 ["}, {"sha": "534698e7d3e8629473bbc544e9465dd706f2132b", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2840,17 +2840,17 @@ lxvrse_expand_builtin (rtx target, insn_code icode, rtx *op,\n   if (icode == CODE_FOR_vsx_lxvrbx)\n     {\n       temp1  = simplify_gen_subreg (V16QImode, tiscratch, TImode, 0);\n-      emit_insn (gen_vsx_sign_extend_qi_v2di (discratch, temp1));\n+      emit_insn (gen_vsx_sign_extend_v16qi_v2di (discratch, temp1));\n     }\n   else if (icode == CODE_FOR_vsx_lxvrhx)\n     {\n       temp1  = simplify_gen_subreg (V8HImode, tiscratch, TImode, 0);\n-      emit_insn (gen_vsx_sign_extend_hi_v2di (discratch, temp1));\n+      emit_insn (gen_vsx_sign_extend_v8hi_v2di (discratch, temp1));\n     }\n   else if (icode == CODE_FOR_vsx_lxvrwx)\n     {\n       temp1  = simplify_gen_subreg (V4SImode, tiscratch, TImode, 0);\n-      emit_insn (gen_vsx_sign_extend_si_v2di (discratch, temp1));\n+      emit_insn (gen_vsx_sign_extend_v4si_v2di (discratch, temp1));\n     }\n   else if (icode == CODE_FOR_vsx_lxvrdx)\n     discratch = simplify_gen_subreg (V2DImode, tiscratch, TImode, 0);"}, {"sha": "a03353724f3a4531b45b702ee085db95b032dff0", "filename": "gcc/config/rs6000/rs6000-builtins.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2687,19 +2687,19 @@\n     VRLWNM altivec_vrlwnm {}\n \n   const vsll __builtin_altivec_vsignextsb2d (vsc);\n-    VSIGNEXTSB2D vsignextend_qi_v2di {}\n+    VSIGNEXTSB2D vsx_sign_extend_v16qi_v2di {}\n \n   const vsi __builtin_altivec_vsignextsb2w (vsc);\n-    VSIGNEXTSB2W vsignextend_qi_v4si {}\n+    VSIGNEXTSB2W vsx_sign_extend_v16qi_v4si {}\n \n   const vsll __builtin_altivec_visgnextsh2d (vss);\n-    VSIGNEXTSH2D vsignextend_hi_v2di {}\n+    VSIGNEXTSH2D vsx_sign_extend_v8hi_v2di {}\n \n   const vsi __builtin_altivec_vsignextsh2w (vss);\n-    VSIGNEXTSH2W vsignextend_hi_v4si {}\n+    VSIGNEXTSH2W vsx_sign_extend_v8hi_v4si {}\n \n   const vsll __builtin_altivec_vsignextsw2d (vsi);\n-    VSIGNEXTSW2D vsignextend_si_v2di {}\n+    VSIGNEXTSW2D vsx_sign_extend_v4si_v2di {}\n \n   const vsc __builtin_altivec_vslv (vsc, vsc);\n     VSLV vslv {}\n@@ -3440,7 +3440,7 @@\n     VRLQNM altivec_vrlqnm {}\n \n   const vsq __builtin_altivec_vsignext (vsll);\n-    VSIGNEXTSD2Q vsignextend_v2di_v1ti {}\n+    VSIGNEXTSD2Q vsx_sign_extend_v2di_v1ti {}\n \n   const vsc __builtin_altivec_vsldb_v16qi (vsc, vsc, const int<3>);\n     VSLDB_V16QI vsldb_v16qi {}"}, {"sha": "b0db8ae508d8ee50e34f85b654988ae0919e152f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -7873,7 +7873,7 @@\n   rtx op0_v16qi = gen_rtx_REG (V16QImode, r);\n \n   emit_insn (gen_xxspltib_v16qi (op0_v16qi, op1));\n-  emit_insn (gen_vsx_sign_extend_qi_si (operands[0], op0_v16qi));\n+  emit_insn (gen_vsx_sign_extend_v16qi_si (operands[0], op0_v16qi));\n   DONE;\n })\n \n@@ -9826,9 +9826,9 @@\n \n   emit_insn (gen_xxspltib_v16qi (op0_v16qi, op1));\n   if (<MODE>mode == DImode)\n-    emit_insn (gen_vsx_sign_extend_qi_di (operands[0], op0_v16qi));\n+    emit_insn (gen_vsx_sign_extend_v16qi_di (operands[0], op0_v16qi));\n   else if (<MODE>mode == SImode)\n-    emit_insn (gen_vsx_sign_extend_qi_si (operands[0], op0_v16qi));\n+    emit_insn (gen_vsx_sign_extend_v16qi_si (operands[0], op0_v16qi));\n   else if (<MODE>mode == HImode)\n     {\n       rtx op0_v8hi = gen_rtx_REG (V8HImode, r);"}, {"sha": "7d845df5c2d9aea94f7e37eaafa760ec73da9160", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 22, "deletions": 94, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1158,10 +1158,10 @@\n   emit_insn (gen_xxspltib_v16qi (tmp, GEN_INT (value)));\n \n   if (<MODE>mode == V2DImode)\n-    emit_insn (gen_vsx_sign_extend_qi_v2di (op0, tmp));\n+    emit_insn (gen_vsx_sign_extend_v16qi_v2di (op0, tmp));\n \n   else if (<MODE>mode == V4SImode)\n-    emit_insn (gen_vsx_sign_extend_qi_v4si (op0, tmp));\n+    emit_insn (gen_vsx_sign_extend_v16qi_v4si (op0, tmp));\n \n   else if (<MODE>mode == V8HImode)\n     emit_insn (gen_altivec_vupkhsb  (op0, tmp));\n@@ -2009,22 +2009,23 @@\n   \"x<VSv>tsqrt<sd>p %0,%x1\"\n   [(set_attr \"type\" \"<VStype_simple>\")])\n \n-;; Fused vector multiply/add instructions. Support the classical Altivec\n-;; versions of fma, which allows the target to be a separate register from the\n-;; 3 inputs.  Under VSX, the target must be either the addend or the first\n-;; multiply.\n-\n+;; Fused vector multiply/add instructions. Do not generate the Altivec versions\n+;; of fma (vmaddfp and vnmsubfp).  These instructions allows the target to be a\n+;; separate register from the 3 inputs, which can possibly save an extra move\n+;; being generated (assuming all registers are AltiVec registers).  However,\n+;; vmaddfp and vnmsubfp can have different behaviors than the VSX instructions\n+;; in some corner cases due to VSCR[NJ] being set or if the addend is +0.0\n+;; instead of -0.0.\n (define_insn \"*vsx_fmav4sf4\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,v\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(fma:V4SF\n-\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa,v\")\n-\t  (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0,v\")\n-\t  (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa,v\")))]\n+\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa\")\n+\t  (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0\")\n+\t  (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa\")))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"@\n    xvmaddasp %x0,%x1,%x2\n-   xvmaddmsp %x0,%x1,%x3\n-   vmaddfp %0,%1,%2,%3\"\n+   xvmaddmsp %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"*vsx_fmav2df4\"\n@@ -2066,18 +2067,17 @@\n   [(set_attr \"type\" \"<VStype_mul>\")])\n \n (define_insn \"*vsx_nfmsv4sf4\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,v\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(neg:V4SF\n \t (fma:V4SF\n-\t   (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa,v\")\n-\t   (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0,v\")\n+\t   (match_operand:V4SF 1 \"vsx_register_operand\" \"%wa,wa\")\n+\t   (match_operand:V4SF 2 \"vsx_register_operand\" \"wa,0\")\n \t   (neg:V4SF\n-\t     (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa,v\")))))]\n+\t     (match_operand:V4SF 3 \"vsx_register_operand\" \"0,wa\")))))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"@\n    xvnmsubasp %x0,%x1,%x2\n-   xvnmsubmsp %x0,%x1,%x3\n-   vnmsubfp %0,%1,%2,%3\"\n+   xvnmsubmsp %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"*vsx_nfmsv2df4\"\n@@ -4905,27 +4905,9 @@\n  \"vextsd2q %0,%1\"\n [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_v2di_v1ti\"\n-  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:V1TI [(match_operand:V2DI 1 \"vsx_register_operand\" \"v\")]\n-\t\t     UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_POWER10\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      rtx tmp = gen_reg_rtx (V2DImode);\n-\n-      emit_insn (gen_altivec_vrevev2di2(tmp, operands[1]));\n-      emit_insn (gen_vsx_sign_extend_v2di_v1ti(operands[0], tmp));\n-      DONE;\n-     }\n-\n-  emit_insn (gen_vsx_sign_extend_v2di_v1ti(operands[0], operands[1]));\n-})\n-\n ;; ISA 3.0 vector extend sign support\n \n-(define_insn \"vsx_sign_extend_qi_<mode>\"\n+(define_insn \"vsx_sign_extend_v16qi_<mode>\"\n   [(set (match_operand:VSINT_84 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:VSINT_84\n \t [(match_operand:V16QI 1 \"vsx_register_operand\" \"v\")]\n@@ -4934,25 +4916,7 @@\n   \"vextsb2<wd> %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_qi_<mode>\"\n-  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:VIlong\n-\t [(match_operand:V16QI 1 \"vsx_register_operand\" \"v\")]\n-\t UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      rtx tmp = gen_reg_rtx (V16QImode);\n-      emit_insn (gen_altivec_vrevev16qi2(tmp, operands[1]));\n-      emit_insn (gen_vsx_sign_extend_qi_<mode>(operands[0], tmp));\n-    }\n-  else\n-    emit_insn (gen_vsx_sign_extend_qi_<mode>(operands[0], operands[1]));\n-  DONE;\n-})\n-\n-(define_insn \"vsx_sign_extend_hi_<mode>\"\n+(define_insn \"vsx_sign_extend_v8hi_<mode>\"\n   [(set (match_operand:VSINT_84 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:VSINT_84\n \t [(match_operand:V8HI 1 \"vsx_register_operand\" \"v\")]\n@@ -4961,50 +4925,14 @@\n   \"vextsh2<wd> %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_hi_<mode>\"\n-  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:VIlong\n-\t [(match_operand:V8HI 1 \"vsx_register_operand\" \"v\")]\n-\t UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      rtx tmp = gen_reg_rtx (V8HImode);\n-      emit_insn (gen_altivec_vrevev8hi2(tmp, operands[1]));\n-      emit_insn (gen_vsx_sign_extend_hi_<mode>(operands[0], tmp));\n-    }\n-  else\n-     emit_insn (gen_vsx_sign_extend_hi_<mode>(operands[0], operands[1]));\n-  DONE;\n-})\n-\n-(define_insn \"vsx_sign_extend_si_v2di\"\n+(define_insn \"vsx_sign_extend_v4si_v2di\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:V2DI [(match_operand:V4SI 1 \"vsx_register_operand\" \"v\")]\n \t\t     UNSPEC_VSX_SIGN_EXTEND))]\n   \"TARGET_P9_VECTOR\"\n   \"vextsw2d %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_si_v2di\"\n-  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:V2DI [(match_operand:V4SI 1 \"vsx_register_operand\" \"v\")]\n-\t\t     UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-       rtx tmp = gen_reg_rtx (V4SImode);\n-\n-       emit_insn (gen_altivec_vrevev4si2(tmp, operands[1]));\n-       emit_insn (gen_vsx_sign_extend_si_v2di(operands[0], tmp));\n-    }\n-  else\n-     emit_insn (gen_vsx_sign_extend_si_v2di(operands[0], operands[1]));\n-  DONE;\n-})\n-\n ;; Sign extend DI to TI.  We provide both GPR targets and Altivec targets on\n ;; power10.  On earlier systems, the machine independent code will generate a\n ;; shift left to sign extend the 64-bit value to 128-bit."}, {"sha": "bb4881d09819e82d1b40ef3fd5ea9beafba079f3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,42 @@\n+2023-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109357\n+\t* constexpr.cc (cxx_eval_constant_expression) [TARGET_EXPR]:\n+\tCheck for complex initializer.\n+\n+2023-04-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/109420\n+\t* decl.cc (make_typename_type): Also ignore non-types during the\n+\tlookup if tag_type corresponds to an elaborated-type-specifier.\n+\t* pt.cc (tsubst) <case TYPENAME_TYPE>: Pass class_type or\n+\tenum_type as tag_type to make_typename_type accordingly instead\n+\tof always passing typename_type.\n+\n+2023-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109277\n+\t* semantics.cc (check_trait_type): Handle incomplete type directly.\n+\t* typeck2.cc (cxx_incomplete_type_diagnostic): Remove assert.\n+\n+2023-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck2.cc (cxx_incomplete_type_diagnostic): Return bool.\n+\t* cp-tree.h (cxx_incomplete_type_diagnostic): Adjust.\n+\n+2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (s-cp-module-version): New target.\n+\t(cp/module.o): Depend on it.\n+\t(MODULE_VERSION): Remove variable.\n+\t(CFLAGS-cp/module.o): For -DMODULE_VERSION= argument just\n+\tcat s-cp-module-version.\n+\n+2023-04-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (coro_rewrite_function_body): Ensure that added\n+\tbind expressions have scope blocks.\n+\n 2023-04-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/107484"}, {"sha": "4ee26fad93d646afd7c1bb2d47472ba80da9fae7", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -59,12 +59,21 @@ CFLAGS-cp/module.o += -DHOST_MACHINE=\\\"$(host)\\\" \\\n \n # In non-release builds, use a date-related module version.\n ifneq ($(DEVPHASE_c),)\n-# Some date's don't grok 'r', if so, simply use today's\n-# date (don't bootstrap at midnight).\n-MODULE_VERSION := $(shell date -r $(srcdir)/cp/module.cc '+%y%m%d-%H%M' \\\n-  2>/dev/null || date '+%y%m%d-0000' 2>/dev/null || echo 0)\n-\n-CFLAGS-cp/module.o += -DMODULE_VERSION='($(subst -,,$(MODULE_VERSION))U)'\n+# Some date's don't grok 'r', if so, simply use today's date,\n+# but use date from previous stage if bootstrapping to avoid breaking\n+# bootstraps across midnight.\n+s-cp-module-version: $(srcdir)/cp/module.cc\n+\tMODULE_VERSION=`if date -r $(srcdir)/cp/module.cc '+%y%m%d%H%MU' \\\n+\t\t\t  2>/dev/null; then :; \\\n+\t\t\telif test ../prev-gcc/s-cp-module-version -nt \\\n+\t\t\t       $(srcdir)/cp/module.cc; then \\\n+\t\t\t  cat ../prev-gcc/s-cp-module-version; \\\n+\t\t\telse \\\n+\t\t\t  date '+%y%m%d0000U' 2>/dev/null; \\\n+\t\t\tfi`; \\\n+\techo $${MODULE_VERSION} > s-cp-module-version\n+cp/module.o: s-cp-module-version\n+CFLAGS-cp/module.o += -DMODULE_VERSION='$(shell cat s-cp-module-version)'\n endif\n \n # Create the compiler driver for g++."}, {"sha": "d1097764b109f38f3d27906b8c987397bddfd7a1", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -7230,16 +7230,23 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t  non_constant_p, overflow_p);\n \tif (*non_constant_p)\n \t  break;\n-\t/* Adjust the type of the result to the type of the temporary.  */\n-\tr = adjust_temp_type (type, r);\n+\t/* If the initializer is complex, evaluate it to initialize slot.  */\n+\tbool is_complex = target_expr_needs_replace (t);\n+\tif (!is_complex)\n+\t  {\n+\t    r = unshare_constructor (r);\n+\t    /* Adjust the type of the result to the type of the temporary.  */\n+\t    r = adjust_temp_type (type, r);\n+\t    ctx->global->put_value (slot, r);\n+\t  }\n \tif (TARGET_EXPR_CLEANUP (t) && !CLEANUP_EH_ONLY (t))\n \t  ctx->global->cleanups->safe_push (TARGET_EXPR_CLEANUP (t));\n-\tr = unshare_constructor (r);\n-\tctx->global->put_value (slot, r);\n \tif (ctx->save_exprs)\n \t  ctx->save_exprs->safe_push (slot);\n \tif (lval)\n \t  return slot;\n+\tif (is_complex)\n+\t  r = ctx->global->get_value (slot);\n       }\n       break;\n "}, {"sha": "59a240ebd403996494dd8004c1e41a667b9d6cf7", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -4113,6 +4113,10 @@ coro_rewrite_function_body (location_t fn_start, tree fnbody, tree orig,\n       tree bind_wrap = build3_loc (fn_start, BIND_EXPR, void_type_node,\n \t\t\t\t   NULL, NULL, NULL);\n       BIND_EXPR_BODY (bind_wrap) = fnbody;\n+      /* Ensure we have a block to connect up the scopes.  */\n+      tree new_blk = make_node (BLOCK);\n+      BIND_EXPR_BLOCK (bind_wrap) = new_blk;\n+      BLOCK_SUBBLOCKS (top_block) = new_blk;\n       fnbody = bind_wrap;\n     }\n "}, {"sha": "a14eb8d0b9a538e49c3c53220a3df0bc6557091b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -8155,7 +8155,7 @@ extern void maybe_warn_pessimizing_move\t     (tree, tree, bool);\n \n /* in typeck2.cc */\n extern void require_complete_eh_spec_types\t(tree, tree);\n-extern void cxx_incomplete_type_diagnostic\t(location_t, const_tree,\n+extern bool cxx_incomplete_type_diagnostic\t(location_t, const_tree,\n \t\t\t\t\t\t const_tree, diagnostic_t);\n inline location_t\n loc_or_input_loc (location_t loc)\n@@ -8178,12 +8178,12 @@ cp_expr_loc_or_input_loc (const_tree t)\n   return cp_expr_loc_or_loc (t, input_location);\n }\n \n-inline void\n+inline bool\n cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \t\t\t\tdiagnostic_t diag_kind)\n {\n-  cxx_incomplete_type_diagnostic (cp_expr_loc_or_input_loc (value),\n-\t\t\t\t  value, type, diag_kind);\n+  return cxx_incomplete_type_diagnostic (cp_expr_loc_or_input_loc (value),\n+\t\t\t\t\t value, type, diag_kind);\n }\n \n extern void cxx_incomplete_type_error\t\t(location_t, const_tree,"}, {"sha": "772c059dc2c340c706269e878ce59cead76c8ab4", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -4307,7 +4307,17 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n      lookup will stop when we hit a dependent base.  */\n   if (!dependent_scope_p (context))\n     {\n-      bool want_type = (complain & tf_qualifying_scope);\n+      /* We generally don't ignore non-types during TYPENAME_TYPE lookup\n+\t (as per [temp.res.general]/3), unless\n+\t   - the tag corresponds to a class-key or 'enum' so\n+\t     [basic.lookup.elab] applies, or\n+\t   - the tag corresponds to scope_type or tf_qualifying_scope is\n+\t     set so [basic.lookup.qual]/1 applies.\n+\t TODO: If we'd set/track the scope_type tag thoroughly on all\n+\t TYPENAME_TYPEs that are followed by :: then we wouldn't need the\n+\t tf_qualifying_scope flag.  */\n+      bool want_type = (tag_type != none_type && tag_type != typename_type)\n+\t|| (complain & tf_qualifying_scope);\n       t = lookup_member (context, name, /*protect=*/2, want_type, complain);\n     }\n   else"}, {"sha": "fcc8e0d1d571ce4f8887d7b94d57afe8825534a2", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -16580,9 +16580,16 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      return error_mark_node;\n \t  }\n \n+\t/* FIXME: TYPENAME_IS_CLASS_P conflates 'class' vs 'struct' vs 'union'\n+\t   tags.  TYPENAME_TYPE should probably remember the exact tag that\n+\t   was written.  */\n+\tenum tag_types tag_type\n+\t  = TYPENAME_IS_CLASS_P (t) ? class_type\n+\t  : TYPENAME_IS_ENUM_P (t) ? enum_type\n+\t  : typename_type;\n \ttsubst_flags_t tcomplain = complain | tf_keep_type_decl;\n \ttcomplain |= tst_ok_flag | qualifying_scope_flag;\n-\tf = make_typename_type (ctx, f, typename_type, tcomplain);\n+\tf = make_typename_type (ctx, f, tag_type, tcomplain);\n \tif (f == error_mark_node)\n \t  return f;\n \tif (TREE_CODE (f) == TYPE_DECL)"}, {"sha": "45e0b0e81d30a6c389af2beed03d5c105d824b08", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -12107,7 +12107,12 @@ check_trait_type (tree type, int kind = 1)\n   if (VOID_TYPE_P (type))\n     return true;\n \n-  return !!complete_type_or_else (strip_array_types (type), NULL_TREE);\n+  type = complete_type (strip_array_types (type));\n+  if (!COMPLETE_TYPE_P (type)\n+      && cxx_incomplete_type_diagnostic (NULL_TREE, type, DK_PERMERROR)\n+      && !flag_permissive)\n+    return false;\n+  return true;\n }\n \n /* Process a trait expression.  */"}, {"sha": "bf03967a71f07bcff1ef39d7352770dc15b62392", "filename": "gcc/cp/typeck2.cc", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Ftypeck2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fcp%2Ftypeck2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -292,19 +292,15 @@ cxx_incomplete_type_inform (const_tree type)\n    and TYPE is the type that was invalid.  DIAG_KIND indicates the\n    type of diagnostic (see diagnostic.def).  */\n \n-void\n+bool\n cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \t\t\t\tconst_tree type, diagnostic_t diag_kind)\n {\n   bool is_decl = false, complained = false;\n \n-  gcc_assert (diag_kind == DK_WARNING \n-\t      || diag_kind == DK_PEDWARN \n-\t      || diag_kind == DK_ERROR);\n-\n   /* Avoid duplicate error message.  */\n   if (TREE_CODE (type) == ERROR_MARK)\n-    return;\n+    return false;\n \n   if (value)\n     {\n@@ -336,7 +332,7 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n       break;\n \n     case VOID_TYPE:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of %qT\", type);\n       break;\n \n@@ -346,7 +342,7 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \t  type = TREE_TYPE (type);\n \t  goto retry;\n \t}\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of array with unspecified bounds\");\n       break;\n \n@@ -365,12 +361,12 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \t       add a fix-it hint.  */\n \t    if (type_num_arguments (TREE_TYPE (member)) == 1)\n \t      richloc.add_fixit_insert_after (\"()\");\n-\t    emit_diagnostic (diag_kind, &richloc, 0,\n+\t    complained = emit_diagnostic (diag_kind, &richloc, 0,\n \t\t\t     \"invalid use of member function %qD \"\n \t\t\t     \"(did you forget the %<()%> ?)\", member);\n \t  }\n \telse\n-\t  emit_diagnostic (diag_kind, loc, 0,\n+\t  complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of member %qD \"\n \t\t\t   \"(did you forget the %<&%> ?)\", member);\n       }\n@@ -380,59 +376,61 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n       if (is_auto (type))\n \t{\n \t  if (CLASS_PLACEHOLDER_TEMPLATE (type))\n-\t    emit_diagnostic (diag_kind, loc, 0,\n+\t    complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t     \"invalid use of placeholder %qT\", type);\n \t  else\n-\t    emit_diagnostic (diag_kind, loc, 0,\n+\t    complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t     \"invalid use of %qT\", type);\n \t}\n       else\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"invalid use of template type parameter %qT\", type);\n       break;\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of template template parameter %qT\",\n \t\t       TYPE_NAME (type));\n       break;\n \n     case TYPE_PACK_EXPANSION:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of pack expansion %qT\", type);\n       break;\n \n     case TYPENAME_TYPE:\n     case DECLTYPE_TYPE:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of dependent type %qT\", type);\n       break;\n \n     case LANG_TYPE:\n       if (type == init_list_type_node)\n \t{\n-\t  emit_diagnostic (diag_kind, loc, 0,\n+\t  complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of brace-enclosed initializer list\");\n \t  break;\n \t}\n       gcc_assert (type == unknown_type_node);\n       if (value && TREE_CODE (value) == COMPONENT_REF)\n \tgoto bad_member;\n       else if (value && TREE_CODE (value) == ADDR_EXPR)\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"address of overloaded function with no contextual \"\n \t\t\t \"type information\");\n       else if (value && TREE_CODE (value) == OVERLOAD)\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"overloaded function with no contextual type information\");\n       else\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"insufficient contextual information to determine type\");\n       break;\n \n     default:\n       gcc_unreachable ();\n     }\n+\n+  return complained;\n }\n \n /* Print an error message for invalid use of an incomplete type."}, {"sha": "b2a1643c53f6a0df71ee06d31b40eb995065de58", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -7069,6 +7069,11 @@ Enable/disable the generation of the PREFETCHI instructions.\n @itemx no-raoint\n Enable/disable the generation of the RAOINT instructions.\n \n+@cindex @code{target(\"amx-complex\")} function attribute, x86\n+@item amx-complex\n+@itemx no-amx-complex\n+Enable/disable the generation of the AMX-COMPLEX instructions.\n+\n @cindex @code{target(\"cld\")} function attribute, x86\n @item cld\n @itemx no-cld"}, {"sha": "a38547f53e53563784fb85a3aa78ae44785955c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1429,7 +1429,7 @@ See RS/6000 and PowerPC Options.\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni\n -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\n--mprefetchi -mraoint\n+-mprefetchi -mraoint -mamx-complex\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg}\n -mkl -mwidekl\n@@ -33337,6 +33337,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @opindex mraoint\n @itemx -mraoint\n+@need 200\n+@opindex mamx-complex\n+@itemx -mamx-complex\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -33347,9 +33350,9 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512-FP16,\n-AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI, RAOINT or\n-CLDEMOTE extended instruction sets. Each has a corresponding @option{-mno-}\n-option to disable use of these instructions.\n+AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI, RAOINT,\n+AMX-COMPLEX or CLDEMOTE extended instruction sets. Each has a corresponding\n+@option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "526020c751150cd74f766eb83eaf61de6f4374cf", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2514,6 +2514,9 @@ Target supports the execution of @code{amx-int8} instructions.\n @item amx_bf16\n Target supports the execution of @code{amx-bf16} instructions.\n \n+@item amx_complex\n+Target supports the execution of @code{amx-complex} instructions.\n+\n @item amx_fp16\n Target supports the execution of @code{amx-fp16} instructions.\n "}, {"sha": "4fa083acf3c645fc0d9a8e51605b3344e4a97637", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,75 @@\n+2023-04-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/109511\n+\t* simplify.cc (gfc_simplify_set_exponent): Fix implementation of\n+\tcompile-time simplification of intrinsic SET_EXPONENT for argument\n+\tX < 1 and for I < 0.\n+\n+2023-04-14  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/104272\n+\t* gfortran.h : Add expr3_not_explicit bit field to gfc_code.\n+\t* resolve.cc (resolve_allocate_expr): Set bit field when the\n+\tdefault initializer is applied to expr3.\n+\t* trans-stmt.cc (gfc_trans_allocate): If expr3_not_explicit is\n+\tset, do not deallocate expr3.\n+\n+2023-04-13  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/109492\n+\t* trans-expr.cc (gfc_conv_power_op): Use absu_hwi and\n+\tunsigned HOST_WIDE_INT for portability.\n+\n+2023-04-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104312\n+\t* resolve.cc (resolve_entries): Handle functions with ENTRY and\n+\tALLOCATABLE results.\n+\t* trans-expr.cc (gfc_conv_procedure_call): Functions with a result\n+\twith the POINTER or ALLOCATABLE attribute shall not get any special\n+\ttreatment with -ff2c, as they cannot be written in Fortran 77.\n+\t* trans-types.cc (gfc_return_by_reference): Likewise.\n+\t(gfc_get_function_type): Likewise.\n+\n+2023-04-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/61615\n+\tPR fortran/99982\n+\t* interface.cc (compare_parameter): Enable type and rank checks for\n+\targuments of derived type from the intrinsic module ISO_C_BINDING.\n+\n+2023-04-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87477\n+\t* iresolve.cc (gfc_resolve_adjustl, gfc_resolve_adjustr): if\n+\tstring length is deferred use the string typespec for result.\n+\t* resolve.cc (resolve_assoc_var): Handle parentheses around the\n+\ttarget expression.\n+\t(resolve_block_construct): Remove unnecessary static decls.\n+\t* trans-array.cc (gfc_conv_expr_descriptor): Guard string len\n+\texpression in condition. Improve handling of string length and\n+\tspan, especially for substrings of the descriptor.\n+\t(duplicate_allocatable): Make element type more explicit with\n+\t'eltype'.\n+\t* trans-decl.cc (gfc_get_symbol_decl): Emit a fatal error with\n+\tappropriate message instead of ICE if symbol type is unknown.\n+\t(gfc_generate_function_code): Set current locus to proc_sym\n+\tdeclared_at.\n+\t* trans-expr.cc (gfc_get_expr_charlen): Retain last charlen in\n+\t'previous' and use if end expression in substring reference is\n+\tnull.\n+\t(gfc_conv_string_length): Use gfc_conv_expr_descriptor if\n+\t'expr_flat' is an array. Add post block to catch deallocation\n+\tof temporaries.\n+\t(gfc_conv_procedure_call): Assign the parmse string length to\n+\tthe expression string length, if it is deferred.\n+\t(gfc_trans_alloc_subarray_assign): If this is a deferred string\n+\tlength component, store the string length in the hidden comp.\n+\tUpdate the typespec length accordingly. Generate a new type\n+\tspec for the call to gfc_duplicate-allocatable in this case.\n+\t* trans-io.cc (gfc_trans_transfer): Scalarize transfer of\n+\tdeferred character array components.\n+\n 2023-04-04  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104349"}, {"sha": "db77d24e8b5bf7b01f96ddec21c557a2530d4c94", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -3005,6 +3005,8 @@ typedef struct gfc_code\n       /* Take the array specification from expr3 to allocate arrays\n \t without an explicit array specification.  */\n       unsigned arr_spec_from_expr3:1;\n+      /* expr3 is not explicit  */\n+      unsigned expr3_not_explicit:1;\n     }\n     alloc;\n "}, {"sha": "e9843e9549c9143b0ead0e3d4d2494748e23cb39", "filename": "gcc/fortran/interface.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Finterface.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Finterface.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2361,7 +2361,23 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       && formal->ts.u.derived && formal->ts.u.derived->ts.is_iso_c\n       && actual->ts.type == BT_DERIVED\n       && actual->ts.u.derived && actual->ts.u.derived->ts.is_iso_c)\n-    return true;\n+    {\n+      if (formal->ts.u.derived->intmod_sym_id\n+\t  != actual->ts.u.derived->intmod_sym_id)\n+\treturn false;\n+\n+      if (ranks_must_agree\n+\t  && symbol_rank (formal) != actual->rank\n+\t  && symbol_rank (formal) != -1)\n+\t{\n+\t  if (where)\n+\t    argument_rank_mismatch (formal->name, &actual->where,\n+\t\t\t\t    symbol_rank (formal), actual->rank,\n+\t\t\t\t    NULL);\n+\t  return false;\n+\t}\n+      return true;\n+    }\n \n   if (formal->ts.type == BT_CLASS && actual->ts.type == BT_DERIVED)\n     /* Make sure the vtab symbol is present when"}, {"sha": "8acad60a02be8786e1bbe387ef6f0c2c7a8c21cb", "filename": "gcc/fortran/iresolve.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Firesolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Firesolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -230,7 +230,9 @@ gfc_resolve_adjustl (gfc_expr *f, gfc_expr *string)\n {\n   f->ts.type = BT_CHARACTER;\n   f->ts.kind = string->ts.kind;\n-  if (string->ts.u.cl)\n+  if (string->ts.deferred)\n+    f->ts = string->ts;\n+  else if (string->ts.u.cl)\n     f->ts.u.cl = gfc_new_charlen (gfc_current_ns, string->ts.u.cl);\n \n   f->value.function.name = gfc_get_string (\"__adjustl_s%d\", f->ts.kind);\n@@ -242,7 +244,9 @@ gfc_resolve_adjustr (gfc_expr *f, gfc_expr *string)\n {\n   f->ts.type = BT_CHARACTER;\n   f->ts.kind = string->ts.kind;\n-  if (string->ts.u.cl)\n+  if (string->ts.deferred)\n+    f->ts = string->ts;\n+  else if (string->ts.u.cl)\n     f->ts.u.cl = gfc_new_charlen (gfc_current_ns, string->ts.u.cl);\n \n   f->value.function.name = gfc_get_string (\"__adjustr_s%d\", f->ts.kind);\n@@ -3361,7 +3365,7 @@ gfc_resolve_mvbits (gfc_code *c)\n }\n \n \n-/* Set up the call to RANDOM_INIT.  */ \n+/* Set up the call to RANDOM_INIT.  */\n \n void\n gfc_resolve_random_init (gfc_code *c)"}, {"sha": "55d8e326a87fab0dc0c7decfcc8bdf32640f0070", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -702,7 +702,8 @@ resolve_entries (gfc_namespace *ns)\n   gfc_code *c;\n   gfc_symbol *proc;\n   gfc_entry_list *el;\n-  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  /* Provide sufficient space to hold \"master.%d.%s\".  */\n+  char name[GFC_MAX_SYMBOL_LEN + 1 + 18];\n   static int master_count = 0;\n \n   if (ns->proc_name == NULL)\n@@ -827,6 +828,9 @@ resolve_entries (gfc_namespace *ns)\n \t\t\t    \"entries returning variables of different \"\n \t\t\t    \"string lengths\", ns->entries->sym->name,\n \t\t\t    &ns->entries->sym->declared_at);\n+\t  else if (el->sym->result->attr.allocatable\n+\t\t   != ns->entries->sym->result->attr.allocatable)\n+\t    break;\n \t}\n \n       if (el == NULL)\n@@ -838,6 +842,8 @@ resolve_entries (gfc_namespace *ns)\n \t    gfc_set_array_spec (proc, gfc_copy_array_spec (sym->as), NULL);\n \t  if (sym->attr.pointer)\n \t    gfc_add_pointer (&proc->attr, NULL);\n+\t  if (sym->attr.allocatable)\n+\t    gfc_add_allocatable (&proc->attr, NULL);\n \t}\n       else\n \t{\n@@ -869,6 +875,17 @@ resolve_entries (gfc_namespace *ns)\n \t\t\t       \"FUNCTION %s at %L\", sym->name,\n \t\t\t       ns->entries->sym->name, &sym->declared_at);\n \t\t}\n+\t      else if (sym->attr.allocatable)\n+\t\t{\n+\t\t  if (el == ns->entries)\n+\t\t    gfc_error (\"FUNCTION result %s cannot be ALLOCATABLE in \"\n+\t\t\t       \"FUNCTION %s at %L\", sym->name,\n+\t\t\t       ns->entries->sym->name, &sym->declared_at);\n+\t\t  else\n+\t\t    gfc_error (\"ENTRY result %s cannot be ALLOCATABLE in \"\n+\t\t\t       \"FUNCTION %s at %L\", sym->name,\n+\t\t\t       ns->entries->sym->name, &sym->declared_at);\n+\t\t}\n \t      else\n \t\t{\n \t\t  ts = &sym->ts;\n@@ -8072,6 +8089,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)\n   if (!t)\n     goto failure;\n \n+  code->ext.alloc.expr3_not_explicit = 0;\n   if (e->ts.type == BT_CLASS && CLASS_DATA (e)->attr.dimension\n \t&& !code->expr3 && code->ext.alloc.ts.type == BT_DERIVED)\n     {\n@@ -8080,13 +8098,15 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)\n \t when the allocated type is different from the declared type but\n \t no SOURCE exists by setting expr3.  */\n       code->expr3 = gfc_default_initializer (&code->ext.alloc.ts);\n+      code->ext.alloc.expr3_not_explicit = 1;\n     }\n   else if (flag_coarray != GFC_FCOARRAY_LIB && e->ts.type == BT_DERIVED\n \t   && e->ts.u.derived->from_intmod == INTMOD_ISO_FORTRAN_ENV\n \t   && e->ts.u.derived->intmod_sym_id == ISOFORTRAN_EVENT_TYPE)\n     {\n       /* We have to zero initialize the integer variable.  */\n       code->expr3 = gfc_get_int_expr (gfc_default_integer_kind, &e->where, 0);\n+      code->ext.alloc.expr3_not_explicit = 1;\n     }\n \n   if (e->ts.type == BT_CLASS && !unlimited && !UNLIMITED_POLY (code->expr3))\n@@ -9084,6 +9104,7 @@ static void\n resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n {\n   gfc_expr* target;\n+  bool parentheses = false;\n \n   gcc_assert (sym->assoc);\n   gcc_assert (sym->attr.flavor == FL_VARIABLE);\n@@ -9096,6 +9117,16 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n     return;\n   gcc_assert (!sym->assoc->dangling);\n \n+  if (target->expr_type == EXPR_OP\n+      && target->value.op.op == INTRINSIC_PARENTHESES\n+      && target->value.op.op1->expr_type == EXPR_VARIABLE)\n+    {\n+      sym->assoc->target = gfc_copy_expr (target->value.op.op1);\n+      gfc_free_expr (target);\n+      target = sym->assoc->target;\n+      parentheses = true;\n+    }\n+\n   if (resolve_target && !gfc_resolve_expr (target))\n     return;\n \n@@ -9177,6 +9208,7 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n \n   /* See if this is a valid association-to-variable.  */\n   sym->assoc->variable = (target->expr_type == EXPR_VARIABLE\n+\t\t\t  && !parentheses\n \t\t\t  && !gfc_has_vector_subscript (target));\n \n   /* Finally resolve if this is an array or not.  */\n@@ -9191,7 +9223,6 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n       return;\n     }\n \n-\n   /* We cannot deal with class selectors that need temporaries.  */\n   if (target->ts.type == BT_CLASS\n \t&& gfc_ref_needs_temporary_p (target->ref))\n@@ -10885,11 +10916,6 @@ gfc_resolve_forall (gfc_code *code, gfc_namespace *ns, int forall_save)\n \n \n /* Resolve a BLOCK construct statement.  */\n-static gfc_expr*\n-get_temp_from_expr (gfc_expr *, gfc_namespace *);\n-static gfc_code *\n-build_assignment (gfc_exec_op, gfc_expr *, gfc_expr *,\n-\t\t  gfc_component *, gfc_component *, locus);\n \n static void\n resolve_block_construct (gfc_code* code)"}, {"sha": "b65854c102173573e32bd200316c811f836c78a2", "filename": "gcc/fortran/simplify.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Fsimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Fsimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -7364,7 +7364,7 @@ gfc_simplify_set_exponent (gfc_expr *x, gfc_expr *i)\n {\n   gfc_expr *result;\n   mpfr_t exp, absv, log2, pow2, frac;\n-  unsigned long exp2;\n+  long exp2;\n \n   if (x->expr_type != EXPR_CONSTANT || i->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -7396,19 +7396,19 @@ gfc_simplify_set_exponent (gfc_expr *x, gfc_expr *i)\n   mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n   mpfr_log2 (log2, absv, GFC_RND_MODE);\n \n-  mpfr_trunc (log2, log2);\n+  mpfr_floor (log2, log2);\n   mpfr_add_ui (exp, log2, 1, GFC_RND_MODE);\n \n   /* Old exponent value, and fraction.  */\n   mpfr_ui_pow (pow2, 2, exp, GFC_RND_MODE);\n \n-  mpfr_div (frac, absv, pow2, GFC_RND_MODE);\n+  mpfr_div (frac, x->value.real, pow2, GFC_RND_MODE);\n \n   /* New exponent.  */\n-  exp2 = (unsigned long) mpz_get_d (i->value.integer);\n-  mpfr_mul_2exp (result->value.real, frac, exp2, GFC_RND_MODE);\n+  exp2 = mpz_get_si (i->value.integer);\n+  mpfr_mul_2si (result->value.real, frac, exp2, GFC_RND_MODE);\n \n-  mpfr_clears (absv, log2, pow2, frac, NULL);\n+  mpfr_clears (absv, log2, exp, pow2, frac, NULL);\n \n   return range_check (result, \"SET_EXPONENT\");\n }"}, {"sha": "e17258080335d48c9ab9c5e21fbf6081f8a73c0b", "filename": "gcc/fortran/trans-array.cc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -7568,6 +7568,7 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n   int full;\n   bool subref_array_target = false;\n   bool deferred_array_component = false;\n+  bool substr = false;\n   gfc_expr *arg, *ss_expr;\n \n   if (se->want_coarray)\n@@ -7618,6 +7619,9 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \t  && TREE_CODE (desc) == COMPONENT_REF)\n \tdeferred_array_component = true;\n \n+      substr = info->ref && info->ref->next\n+\t       && info->ref->next->type == REF_SUBSTRING;\n+\n       subref_array_target = (is_subref_array (expr)\n \t\t\t     && (se->direct_byref\n \t\t\t\t || expr->ts.type == BT_CHARACTER));\n@@ -7659,7 +7663,10 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \t\t\t\t      subref_array_target, expr);\n \n \t      /* ....and set the span field.  */\n-\t      tmp = gfc_conv_descriptor_span_get (desc);\n+\t      if (ss_info->expr->ts.type == BT_CHARACTER)\n+\t\ttmp = gfc_conv_descriptor_span_get (desc);\n+\t      else\n+\t\ttmp = gfc_get_array_span (desc, expr);\n \t      gfc_conv_descriptor_span_set (&se->pre, se->expr, tmp);\n \t    }\n \t  else if (se->want_pointer)\n@@ -7730,6 +7737,7 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \n \t  need_tmp = 1;\n \t  if (expr->ts.type == BT_CHARACTER\n+\t\t&& expr->ts.u.cl->length\n \t\t&& expr->ts.u.cl->length->expr_type != EXPR_CONSTANT)\n \t    get_array_charlen (expr, se);\n \n@@ -7915,7 +7923,7 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n       /* Set the string_length for a character array.  */\n       if (expr->ts.type == BT_CHARACTER)\n \t{\n-\t  if (deferred_array_component)\n+\t  if (deferred_array_component && !substr)\n \t    se->string_length = ss_info->string_length;\n \t  else\n \t    se->string_length =  gfc_get_expr_charlen (expr);\n@@ -7992,7 +8000,11 @@ gfc_conv_expr_descriptor (gfc_se *se, gfc_expr *expr)\n \t}\n \n       /* Set the span field.  */\n-      tmp = gfc_get_array_span (desc, expr);\n+      tmp = NULL_TREE;\n+      if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (desc)))\n+\ttmp = gfc_conv_descriptor_span_get (desc);\n+      else\n+\ttmp = gfc_get_array_span (desc, expr);\n       if (tmp)\n \tgfc_conv_descriptor_span_set (&loop.pre, parm, tmp);\n \n@@ -8766,6 +8778,7 @@ duplicate_allocatable (tree dest, tree src, tree type, int rank,\n \t\t       tree add_when_allocated)\n {\n   tree tmp;\n+  tree eltype;\n   tree size;\n   tree nelems;\n   tree null_cond;\n@@ -8782,10 +8795,11 @@ duplicate_allocatable (tree dest, tree src, tree type, int rank,\n       null_data = gfc_finish_block (&block);\n \n       gfc_init_block (&block);\n+      eltype = TREE_TYPE (type);\n       if (str_sz != NULL_TREE)\n \tsize = str_sz;\n       else\n-\tsize = TYPE_SIZE_UNIT (TREE_TYPE (type));\n+\tsize = TYPE_SIZE_UNIT (eltype);\n \n       if (!no_malloc)\n \t{\n@@ -8812,11 +8826,19 @@ duplicate_allocatable (tree dest, tree src, tree type, int rank,\n       else\n \tnelems = gfc_index_one_node;\n \n+      /* If type is not the array type, then it is the element type.  */\n+      if (GFC_ARRAY_TYPE_P (type) || GFC_DESCRIPTOR_TYPE_P (type))\n+\teltype = gfc_get_element_type (type);\n+      else\n+\teltype = type;\n+\n       if (str_sz != NULL_TREE)\n \ttmp = fold_convert (gfc_array_index_type, str_sz);\n       else\n \ttmp = fold_convert (gfc_array_index_type,\n-\t\t\t    TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n+\t\t\t    TYPE_SIZE_UNIT (eltype));\n+\n+      tmp = gfc_evaluate_now (tmp, &block);\n       size = fold_build2_loc (input_location, MULT_EXPR, gfc_array_index_type,\n \t\t\t      nelems, tmp);\n       if (!no_malloc)\n@@ -9865,6 +9887,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl, tree dest,\n \t      /* This component cannot have allocatable components,\n \t\t therefore add_when_allocated of duplicate_allocatable ()\n \t\t is always NULL.  */\n+\t      rank = c->as ? c->as->rank : 0;\n \t      tmp = duplicate_allocatable (dcmp, comp, ctype, rank,\n \t\t\t\t\t   false, false, size, NULL_TREE);\n \t      gfc_add_expr_to_block (&fnblock, tmp);"}, {"sha": "299764b08b25d9ac31b73d07ebeb7667f70685cf", "filename": "gcc/fortran/trans-decl.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1791,6 +1791,9 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       return decl;\n     }\n \n+  if (sym->ts.type == BT_UNKNOWN)\n+    gfc_fatal_error (\"%s at %C has no default type\", sym->name);\n+\n   if (sym->attr.intrinsic)\n     gfc_internal_error (\"intrinsic variable which isn't a procedure\");\n \n@@ -7538,6 +7541,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n     }\n \n   trans_function_start (sym);\n+  gfc_current_locus = sym->declared_at;\n \n   gfc_init_block (&init);\n   gfc_init_block (&cleanup);"}, {"sha": "09cdd9263c4ebe2642ad61019a2c73dc9e644bfb", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2124,6 +2124,7 @@ gfc_get_expr_charlen (gfc_expr *e)\n {\n   gfc_ref *r;\n   tree length;\n+  tree previous = NULL_TREE;\n   gfc_se se;\n \n   gcc_assert (e->expr_type == EXPR_VARIABLE\n@@ -2149,6 +2150,7 @@ gfc_get_expr_charlen (gfc_expr *e)\n   /* Look through the reference chain for component references.  */\n   for (r = e->ref; r; r = r->next)\n     {\n+      previous = length;\n       switch (r->type)\n \t{\n \tcase REF_COMPONENT:\n@@ -2164,7 +2166,10 @@ gfc_get_expr_charlen (gfc_expr *e)\n \t  gfc_init_se (&se, NULL);\n \t  gfc_conv_expr_type (&se, r->u.ss.start, gfc_charlen_type_node);\n \t  length = se.expr;\n-\t  gfc_conv_expr_type (&se, r->u.ss.end, gfc_charlen_type_node);\n+\t  if (r->u.ss.end)\n+\t    gfc_conv_expr_type (&se, r->u.ss.end, gfc_charlen_type_node);\n+\t  else\n+\t    se.expr = previous;\n \t  length = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t    gfc_charlen_type_node,\n \t\t\t\t    se.expr, length);\n@@ -2554,23 +2559,25 @@ gfc_conv_string_length (gfc_charlen * cl, gfc_expr * expr, stmtblock_t * pblock)\n       expr_flat = gfc_copy_expr (expr);\n       flatten_array_ctors_without_strlen (expr_flat);\n       gfc_resolve_expr (expr_flat);\n-\n-      gfc_conv_expr (&se, expr_flat);\n-      gfc_add_block_to_block (pblock, &se.pre);\n-      cl->backend_decl = convert (gfc_charlen_type_node, se.string_length);\n-\n+      if (expr_flat->rank)\n+\tgfc_conv_expr_descriptor (&se, expr_flat);\n+      else\n+\tgfc_conv_expr (&se, expr_flat);\n+      if (expr_flat->expr_type != EXPR_VARIABLE)\n+\tgfc_add_block_to_block (pblock, &se.pre);\n+      se.expr = convert (gfc_charlen_type_node, se.string_length);\n+      gfc_add_block_to_block (pblock, &se.post);\n       gfc_free_expr (expr_flat);\n-      return;\n     }\n-\n-  /* Convert cl->length.  */\n-\n-  gcc_assert (cl->length);\n-\n-  gfc_conv_expr_type (&se, cl->length, gfc_charlen_type_node);\n-  se.expr = fold_build2_loc (input_location, MAX_EXPR, gfc_charlen_type_node,\n-\t\t\t     se.expr, build_zero_cst (TREE_TYPE (se.expr)));\n-  gfc_add_block_to_block (pblock, &se.pre);\n+  else\n+    {\n+      /* Convert cl->length.  */\n+      gfc_conv_expr_type (&se, cl->length, gfc_charlen_type_node);\n+      se.expr = fold_build2_loc (input_location, MAX_EXPR,\n+\t\t\t\t gfc_charlen_type_node, se.expr,\n+\t\t\t\t build_zero_cst (TREE_TYPE (se.expr)));\n+      gfc_add_block_to_block (pblock, &se.pre);\n+    }\n \n   if (cl->backend_decl && VAR_P (cl->backend_decl))\n     gfc_add_modify (pblock, cl->backend_decl, se.expr);\n@@ -3393,11 +3400,12 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n       && TREE_CODE (TREE_TYPE (rse.expr)) == INTEGER_TYPE)\n     {\n       wi::tree_to_wide_ref wlhs = wi::to_wide (lse.expr);\n-      HOST_WIDE_INT v, w;\n+      HOST_WIDE_INT v;\n+      unsigned HOST_WIDE_INT w;\n       int kind, ikind, bit_size;\n \n       v = wlhs.to_shwi ();\n-      w = abs (v);\n+      w = absu_hwi (v);\n \n       kind = expr->value.op.op1->ts.kind;\n       ikind = gfc_validate_kind (BT_INTEGER, kind, false);\n@@ -7310,17 +7318,31 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n       if (parmse.string_length && fsym && fsym->ts.deferred)\n \t{\n \t  if (INDIRECT_REF_P (parmse.string_length))\n-\t    /* In chains of functions/procedure calls the string_length already\n-\t       is a pointer to the variable holding the length.  Therefore\n-\t       remove the deref on call.  */\n-\t    parmse.string_length = TREE_OPERAND (parmse.string_length, 0);\n+\t    {\n+\t      /* In chains of functions/procedure calls the string_length already\n+\t\t is a pointer to the variable holding the length.  Therefore\n+\t\t remove the deref on call.  */\n+\t      tmp = parmse.string_length;\n+\t      parmse.string_length = TREE_OPERAND (parmse.string_length, 0);\n+\t    }\n \t  else\n \t    {\n \t      tmp = parmse.string_length;\n \t      if (!VAR_P (tmp) && TREE_CODE (tmp) != COMPONENT_REF)\n \t\ttmp = gfc_evaluate_now (parmse.string_length, &se->pre);\n \t      parmse.string_length = gfc_build_addr_expr (NULL_TREE, tmp);\n \t    }\n+\n+\t  if (e && e->expr_type == EXPR_VARIABLE\n+\t      && fsym->attr.allocatable\n+\t      && e->ts.u.cl->backend_decl\n+\t      && VAR_P (e->ts.u.cl->backend_decl))\n+\t    {\n+\t      if (INDIRECT_REF_P (tmp))\n+\t\ttmp = TREE_OPERAND (tmp, 0);\n+\t      gfc_add_modify (&se->post, e->ts.u.cl->backend_decl,\n+\t\t\t      fold_convert (gfc_charlen_type_node, tmp));\n+\t    }\n \t}\n \n       /* Character strings are passed as two parameters, a length and a\n@@ -7779,6 +7801,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n   */\n   if (flag_f2c && sym->ts.type == BT_REAL\n       && sym->ts.kind == gfc_default_real_kind\n+      && !sym->attr.pointer\n+      && !sym->attr.allocatable\n       && !sym->attr.always_explicit)\n     se->expr = fold_convert (gfc_get_real_type (sym->ts.kind), se->expr);\n \n@@ -8584,6 +8608,20 @@ gfc_trans_alloc_subarray_assign (tree dest, gfc_component * cm,\n   gfc_conv_expr_descriptor (&se, expr);\n   gfc_add_block_to_block (&block, &se.pre);\n   gfc_add_modify (&block, dest, se.expr);\n+  if (cm->ts.type == BT_CHARACTER\n+      && gfc_deferred_strlen (cm, &tmp))\n+    {\n+      tmp = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t     TREE_TYPE (tmp),\n+\t\t\t     TREE_OPERAND (dest, 0),\n+\t\t\t     tmp, NULL_TREE);\n+      gfc_add_modify (&block, tmp,\n+\t\t\t      fold_convert (TREE_TYPE (tmp),\n+\t\t\t      se.string_length));\n+      cm->ts.u.cl->backend_decl = gfc_create_var (gfc_charlen_type_node,\n+\t\t\t\t\t\t  \"slen\");\n+      gfc_add_modify (&block, cm->ts.u.cl->backend_decl, se.string_length);\n+    }\n \n   /* Deal with arrays of derived types with allocatable components.  */\n   if (gfc_bt_struct (cm->ts.type)\n@@ -8607,11 +8645,16 @@ gfc_trans_alloc_subarray_assign (tree dest, gfc_component * cm,\n \t\t\t\t\t   tmp, expr->rank, NULL_TREE);\n \t}\n     }\n+  else if (cm->ts.type == BT_CHARACTER && cm->ts.deferred)\n+    tmp = gfc_duplicate_allocatable (dest, se.expr,\n+\t\t\t\t     gfc_typenode_for_spec (&cm->ts),\n+\t\t\t\t     cm->as->rank, NULL_TREE);\n   else\n     tmp = gfc_duplicate_allocatable (dest, se.expr,\n \t\t\t\t     TREE_TYPE(cm->backend_decl),\n \t\t\t\t     cm->as->rank, NULL_TREE);\n \n+\n   gfc_add_expr_to_block (&block, tmp);\n   gfc_add_block_to_block (&block, &se.post);\n "}, {"sha": "9b54d2f0d31a79490c760e74f02c1fb493bc2616", "filename": "gcc/fortran/trans-io.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2622,10 +2622,10 @@ gfc_trans_transfer (gfc_code * code)\n \n       if (expr->ts.type != BT_CLASS\n \t && expr->expr_type == EXPR_VARIABLE\n-\t && gfc_expr_attr (expr).pointer)\n+\t && ((expr->symtree->n.sym->ts.type == BT_DERIVED && expr->ts.deferred)\n+\t     || gfc_expr_attr (expr).pointer))\n \tgoto scalarize;\n \n-\n       if (!(gfc_bt_struct (expr->ts.type)\n \t      || expr->ts.type == BT_CLASS)\n \t    && ref && ref->next == NULL"}, {"sha": "776f98d08d92c961f6cc4917405a6797e3d638c8", "filename": "gcc/fortran/trans-stmt.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -6458,12 +6458,15 @@ gfc_trans_allocate (gfc_code * code)\n       /* Deallocate any allocatable components in expressions that use a\n \t temporary object, i.e. are not a simple alias of to an EXPR_VARIABLE.\n \t E.g. temporaries of a function call need freeing of their components\n-\t here.  */\n+\t here. Explicit derived type allocation of class entities uses expr3\n+\t to carry the default initializer. This must not be deallocated or\n+\t finalized.  */\n       if ((code->expr3->ts.type == BT_DERIVED\n \t   || code->expr3->ts.type == BT_CLASS)\n \t  && (code->expr3->expr_type != EXPR_VARIABLE || temp_obj_created)\n \t  && code->expr3->ts.u.derived->attr.alloc_comp\n-\t  && !code->expr3->must_finalize)\n+\t  && !code->expr3->must_finalize\n+\t  && !code->ext.alloc.expr3_not_explicit)\n \t{\n \t  tmp = gfc_deallocate_alloc_comp (code->expr3->ts.u.derived,\n \t\t\t\t\t   expr3, code->expr3->rank);"}, {"sha": "fc5c221a3017bb2e585bdb7e2b56c84e23f575d8", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2962,6 +2962,8 @@ gfc_return_by_reference (gfc_symbol * sym)\n      require an explicit interface, as no compatibility problems can\n      arise there.  */\n   if (flag_f2c && sym->ts.type == BT_COMPLEX\n+      && !sym->attr.pointer\n+      && !sym->attr.allocatable\n       && !sym->attr.intrinsic && !sym->attr.always_explicit)\n     return 1;\n \n@@ -3273,6 +3275,8 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n     type = gfc_get_mixed_entry_union (sym->ns);\n   else if (flag_f2c && sym->ts.type == BT_REAL\n \t   && sym->ts.kind == gfc_default_real_kind\n+\t   && !sym->attr.pointer\n+\t   && !sym->attr.allocatable\n \t   && !sym->attr.always_explicit)\n     {\n       /* Special case: f2c calling conventions require that (scalar)"}, {"sha": "2314478d55849d7ae973a4bc65e26edfe565ac28", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1218,6 +1218,8 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       // See if any equivalences can refine it.\n+      // PR 109462, like 108139 below, a one way equivalence introduced\n+      // by a PHI node can also be through the definition side.  Disallow it.\n       if (m_oracle)\n \t{\n \t  tree equiv_name;\n@@ -1235,13 +1237,6 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n \t      if (!m_gori.has_edge_range_p (equiv_name))\n \t\tcontinue;\n \n-\t      // PR 108139. It is hazardous to assume an equivalence with\n-\t      // a PHI is the same value.  The PHI may be an equivalence\n-\t      // via UNDEFINED arguments which is really a one way equivalence.\n-\t      // PHIDEF == name, but name may not be == PHIDEF.\n-\t      if (is_a<gphi *> (SSA_NAME_DEF_STMT (equiv_name)))\n-\t\tcontinue;\n-\n \t      // Check if the equiv definition dominates this block\n \t      if (equiv_bb == bb ||\n \t\t  (equiv_bb && !dominated_by_p (CDI_DOMINATORS, bb, equiv_bb)))"}, {"sha": "429734f954a7588917426120190ca1b5b7009a79", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -795,9 +795,28 @@ fold_using_range::range_of_phi (vrange &r, gphi *phi, fur_source &src)\n     // If the PHI boils down to a single effective argument, look at it.\n     if (single_arg)\n       {\n-\t// Symbolic arguments are equivalences.\n+\t// Symbolic arguments can be equivalences.\n \tif (gimple_range_ssa_p (single_arg))\n-\t  src.register_relation (phi, VREL_EQ, phi_def, single_arg);\n+\t  {\n+\t    // Only allow the equivalence if the PHI definition does not\n+\t    // dominate any incoming edge for SINGLE_ARG.\n+\t    // See PR 108139 and 109462.\n+\t    basic_block bb = gimple_bb (phi);\n+\t    if (!dom_info_available_p (CDI_DOMINATORS))\n+\t      single_arg = NULL;\n+\t    else\n+\t      for (x = 0; x < gimple_phi_num_args (phi); x++)\n+\t\tif (gimple_phi_arg_def (phi, x) == single_arg\n+\t\t    && dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t\tgimple_phi_arg_edge (phi, x)->src,\n+\t\t\t\t\tbb))\n+\t\t  {\n+\t\t    single_arg = NULL;\n+\t\t    break;\n+\t\t  }\n+\t    if (single_arg)\n+\t      src.register_relation (phi, VREL_EQ, phi_def, single_arg);\n+\t  }\n \telse if (src.get_operand (arg_range, single_arg)\n \t\t && arg_range.singleton_p ())\n \t  {"}, {"sha": "d77e1f51ac20a5347e70b92b632fa1847b2cc483", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1314,7 +1314,9 @@ gori_compute::may_recompute_p (tree name, basic_block bb, int depth)\n   tree dep2 = depend2 (name);\n \n   // If the first dependency is not set, there is no recomputation.\n-  if (!dep1)\n+  // Dependencies reflect original IL, not current state.   Check if the\n+  // SSA_NAME is still valid as well.\n+  if (!dep1 || SSA_NAME_IN_FREE_LIST (dep1))\n     return false;\n \n   // Don't recalculate PHIs or statements with side_effects."}, {"sha": "d0d2148c87208845ac63c76da266e3dddbfe9085", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -4528,39 +4528,34 @@ pass_waccess::check_dangling_stores (basic_block bb,\n       if (!m_ptr_qry.get_ref (lhs, stmt, &lhs_ref, 0))\n \tcontinue;\n \n-      if (auto_var_p (lhs_ref.ref))\n-\tcontinue;\n-\n-      if (DECL_P (lhs_ref.ref))\n+      if (TREE_CODE (lhs_ref.ref) == MEM_REF)\n \t{\n-\t  if (!POINTER_TYPE_P (TREE_TYPE (lhs_ref.ref))\n-\t      || lhs_ref.deref > 0)\n-\t    continue;\n+\t  lhs_ref.ref = TREE_OPERAND (lhs_ref.ref, 0);\n+\t  ++lhs_ref.deref;\n \t}\n-      else if (TREE_CODE (lhs_ref.ref) == SSA_NAME)\n+      if (TREE_CODE (lhs_ref.ref) == ADDR_EXPR)\n+\t{\n+\t  lhs_ref.ref = TREE_OPERAND (lhs_ref.ref, 0);\n+\t  --lhs_ref.deref;\n+\t}\n+      if (TREE_CODE (lhs_ref.ref) == SSA_NAME)\n \t{\n \t  gimple *def_stmt = SSA_NAME_DEF_STMT (lhs_ref.ref);\n \t  if (!gimple_nop_p (def_stmt))\n \t    /* Avoid looking at or before stores into unknown objects.  */\n \t    return;\n \n-\t  tree var = SSA_NAME_VAR (lhs_ref.ref);\n-\t  if (TREE_CODE (var) == PARM_DECL && DECL_BY_REFERENCE (var))\n-\t    /* Avoid by-value arguments transformed into by-reference.  */\n-\t    continue;\n-\n-\t}\n-      else if (TREE_CODE (lhs_ref.ref) == MEM_REF)\n-\t{\n-\t  tree arg = TREE_OPERAND (lhs_ref.ref, 0);\n-\t  if (TREE_CODE (arg) == SSA_NAME)\n-\t    {\n-\t      gimple *def_stmt = SSA_NAME_DEF_STMT (arg);\n-\t      if (!gimple_nop_p (def_stmt))\n-\t\treturn;\n-\t    }\n+\t  lhs_ref.ref = SSA_NAME_VAR (lhs_ref.ref);\n \t}\n+\n+      if (TREE_CODE (lhs_ref.ref) == PARM_DECL\n+\t  && (lhs_ref.deref - DECL_BY_REFERENCE (lhs_ref.ref)) > 0)\n+\t/* Assignment through a (real) pointer/reference parameter.  */;\n+      else if (TREE_CODE (lhs_ref.ref) == VAR_DECL\n+\t       && !auto_var_p (lhs_ref.ref))\n+\t/* Assignment to/through a non-local variable.  */;\n       else\n+\t/* Something else, don't warn.  */\n \tcontinue;\n \n       if (stores.add (lhs_ref.ref))\n@@ -4587,13 +4582,8 @@ pass_waccess::check_dangling_stores (basic_block bb,\n \t  location_t loc = DECL_SOURCE_LOCATION (rhs_ref.ref);\n \t  inform (loc, \"%qD declared here\", rhs_ref.ref);\n \n-\t  if (DECL_P (lhs_ref.ref))\n-\t    loc = DECL_SOURCE_LOCATION (lhs_ref.ref);\n-\t  else if (EXPR_HAS_LOCATION (lhs_ref.ref))\n-\t    loc = EXPR_LOCATION (lhs_ref.ref);\n-\n-\t  if (loc != UNKNOWN_LOCATION)\n-\t    inform (loc, \"%qE declared here\", lhs_ref.ref);\n+\t  loc = DECL_SOURCE_LOCATION (lhs_ref.ref);\n+\t  inform (loc, \"%qD declared here\", lhs_ref.ref);\n \t}\n     }\n "}, {"sha": "e133650ad915176d71df790b6a0af6314c8eda09", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-63ba7dd52f2cc49dab4b70ac81309296a920d4dc\n+0411a2733fd468e69f1998edd91e8fe3ba40ff9e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b3e0f62e400359ff901997b73fcee32982d85a47", "filename": "gcc/ipa-cp.cc", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fipa-cp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fipa-cp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -4348,7 +4348,8 @@ ipcp_discover_new_direct_edges (struct cgraph_node *node,\n \t\t    fprintf (dump_file, \"     controlled uses count of param \"\n \t\t\t     \"%i bumped down to %i\\n\", param_index, c);\n \t\t  if (c == 0\n-\t\t      && (to_del = node->find_reference (cs->callee, NULL, 0)))\n+\t\t      && (to_del = node->find_reference (cs->callee, NULL, 0,\n+\t\t\t\t\t\t\t IPA_REF_ADDR)))\n \t\t    {\n \t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t\tfprintf (dump_file, \"       and even removing its \"\n@@ -5180,18 +5181,21 @@ adjust_references_in_caller (cgraph_edge *cs, symtab_node *symbol, int index)\n   if (jfunc->type == IPA_JF_CONST)\n     {\n       ipa_ref *to_del = cs->caller->find_reference (symbol, cs->call_stmt,\n-\t\t\t\t\t\t    cs->lto_stmt_uid);\n+\t\t\t\t\t\t    cs->lto_stmt_uid,\n+\t\t\t\t\t\t    IPA_REF_ADDR);\n       if (!to_del)\n \treturn;\n       to_del->remove_reference ();\n+      ipa_zap_jf_refdesc (jfunc);\n       if (dump_file)\n \tfprintf (dump_file, \"    Removed a reference from %s to %s.\\n\",\n \t\t cs->caller->dump_name (), symbol->dump_name ());\n       return;\n     }\n \n   if (jfunc->type != IPA_JF_PASS_THROUGH\n-      || ipa_get_jf_pass_through_operation (jfunc) != NOP_EXPR)\n+      || ipa_get_jf_pass_through_operation (jfunc) != NOP_EXPR\n+      || ipa_get_jf_pass_through_refdesc_decremented (jfunc))\n     return;\n \n   int fidx = ipa_get_jf_pass_through_formal_id (jfunc);\n@@ -5218,15 +5222,19 @@ adjust_references_in_caller (cgraph_edge *cs, symtab_node *symbol, int index)\n   gcc_assert (cuses > 0);\n   cuses--;\n   ipa_set_controlled_uses (caller_info, fidx, cuses);\n+  ipa_set_jf_pass_through_refdesc_decremented (jfunc, true);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file, \"    Controlled uses of parameter %i of %s dropped \"\n+\t     \"to %i.\\n\", fidx, caller->dump_name (), cuses);\n   if (cuses)\n     return;\n \n   if (caller_info->ipcp_orig_node)\n     {\n       /* Cloning machinery has created a reference here, we need to either\n \t remove it or change it to a read one.  */\n-      ipa_ref *to_del = caller->find_reference (symbol, NULL, 0);\n-      if (to_del && to_del->use == IPA_REF_ADDR)\n+      ipa_ref *to_del = caller->find_reference (symbol, NULL, 0, IPA_REF_ADDR);\n+      if (to_del)\n \t{\n \t  to_del->remove_reference ();\n \t  if (dump_file)"}, {"sha": "0d8167495341f7c8416e24e209588f7b6e9d1135", "filename": "gcc/ipa-prop.cc", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fipa-prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fipa-prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -347,6 +347,8 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \t    }\n \t  if (jump_func->value.pass_through.agg_preserved)\n \t    fprintf (f, \", agg_preserved\");\n+\t  if (jump_func->value.pass_through.refdesc_decremented)\n+\t    fprintf (f, \", refdesc_decremented\");\n \t  fprintf (f, \"\\n\");\n \t}\n       else if (type == IPA_JF_ANCESTOR)\n@@ -572,6 +574,7 @@ ipa_set_jf_simple_pass_through (struct ipa_jump_func *jfunc, int formal_id,\n   jfunc->value.pass_through.formal_id = formal_id;\n   jfunc->value.pass_through.operation = NOP_EXPR;\n   jfunc->value.pass_through.agg_preserved = agg_preserved;\n+  jfunc->value.pass_through.refdesc_decremented = false;\n }\n \n /* Set JFUNC to be an unary pass through jump function.  */\n@@ -585,6 +588,7 @@ ipa_set_jf_unary_pass_through (struct ipa_jump_func *jfunc, int formal_id,\n   jfunc->value.pass_through.formal_id = formal_id;\n   jfunc->value.pass_through.operation = operation;\n   jfunc->value.pass_through.agg_preserved = false;\n+  jfunc->value.pass_through.refdesc_decremented = false;\n }\n /* Set JFUNC to be an arithmetic pass through jump function.  */\n \n@@ -597,6 +601,7 @@ ipa_set_jf_arith_pass_through (struct ipa_jump_func *jfunc, int formal_id,\n   jfunc->value.pass_through.formal_id = formal_id;\n   jfunc->value.pass_through.operation = operation;\n   jfunc->value.pass_through.agg_preserved = false;\n+  jfunc->value.pass_through.refdesc_decremented = false;\n }\n \n /* Set JFUNC to be an ancestor jump function.  */\n@@ -3314,7 +3319,13 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n \t\t  ipa_set_jf_unknown (dst);\n \t\t  break;\n \t\tcase IPA_JF_CONST:\n-\t\t  ipa_set_jf_cst_copy (dst, src);\n+\t\t  {\n+\t\t    bool rd = ipa_get_jf_pass_through_refdesc_decremented (dst);\n+\t\t    ipa_set_jf_cst_copy (dst, src);\n+\t\t    if (rd)\n+\t\t      ipa_zap_jf_refdesc (dst);\n+\t\t  }\n+\n \t\t  break;\n \n \t\tcase IPA_JF_PASS_THROUGH:\n@@ -3671,7 +3682,7 @@ remove_described_reference (symtab_node *symbol, struct ipa_cst_ref_desc *rdesc)\n   if (!origin)\n     return false;\n   to_del = origin->caller->find_reference (symbol, origin->call_stmt,\n-\t\t\t\t\t   origin->lto_stmt_uid);\n+\t\t\t\t\t   origin->lto_stmt_uid, IPA_REF_ADDR);\n   if (!to_del)\n     return false;\n \n@@ -4130,7 +4141,8 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n       struct ipa_jump_func *jf = ipa_get_ith_jump_func (args, i);\n       struct ipa_cst_ref_desc *rdesc;\n \n-      if (jf->type == IPA_JF_PASS_THROUGH)\n+      if (jf->type == IPA_JF_PASS_THROUGH\n+\t  && !ipa_get_jf_pass_through_refdesc_decremented (jf))\n \t{\n \t  int src_idx, c, d;\n \t  src_idx = ipa_get_jf_pass_through_formal_id (jf);\n@@ -4158,7 +4170,8 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t      if (t && TREE_CODE (t) == ADDR_EXPR\n \t\t  && TREE_CODE (TREE_OPERAND (t, 0)) == FUNCTION_DECL\n \t\t  && (n = cgraph_node::get (TREE_OPERAND (t, 0)))\n-\t\t  && (ref = new_root->find_reference (n, NULL, 0)))\n+\t\t  && (ref = new_root->find_reference (n, NULL, 0,\n+\t\t\t\t\t\t      IPA_REF_ADDR)))\n \t\t{\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file, \"ipa-prop: Removing cloning-created \"\n@@ -4206,7 +4219,7 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t\t\t && clone != rdesc->cs->caller)\n \t\t    {\n \t\t      struct ipa_ref *ref;\n-\t\t      ref = clone->find_reference (n, NULL, 0);\n+\t\t      ref = clone->find_reference (n, NULL, 0, IPA_REF_ADDR);\n \t\t      if (ref)\n \t\t\t{\n \t\t\t  if (dump_file)\n@@ -4432,7 +4445,8 @@ ipa_edge_args_sum_t::duplicate (cgraph_edge *src, cgraph_edge *dst,\n \t\t   gcc_checking_assert (n);\n \t\t   ipa_ref *ref\n \t\t     = src->caller->find_reference (n, src->call_stmt,\n-\t\t\t\t\t\t    src->lto_stmt_uid);\n+\t\t\t\t\t\t    src->lto_stmt_uid,\n+\t\t\t\t\t\t    IPA_REF_ADDR);\n \t\t   gcc_checking_assert (ref);\n \t\t   dst->caller->clone_reference (ref, ref->stmt);\n \n@@ -4692,6 +4706,7 @@ ipa_write_jump_function (struct output_block *ob,\n \t  streamer_write_uhwi (ob, jump_func->value.pass_through.formal_id);\n \t  bp = bitpack_create (ob->main_stream);\n \t  bp_pack_value (&bp, jump_func->value.pass_through.agg_preserved, 1);\n+\t  gcc_assert (!jump_func->value.pass_through.refdesc_decremented);\n \t  streamer_write_bitpack (&bp);\n \t}\n       else if (TREE_CODE_CLASS (jump_func->value.pass_through.operation)"}, {"sha": "7eb5c8f44ea5b6926edd00df9b229843ad8cd47f", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -115,6 +115,9 @@ struct GTY(()) ipa_pass_through_data\n      ipa_agg_jump_function).  The flag is used only when the operation is\n      NOP_EXPR.  */\n   unsigned agg_preserved : 1;\n+  /* Set when the edge has already been used to decrement an appropriate\n+     reference description counter and should not be decremented again.  */\n+  unsigned refdesc_decremented : 1;\n };\n \n /* Structure holding data required to describe a load-value-from-aggregate\n@@ -362,6 +365,15 @@ ipa_get_jf_constant_rdesc (struct ipa_jump_func *jfunc)\n   return jfunc->value.constant.rdesc;\n }\n \n+/* Make JFUNC not participate in any further reference counting.  */\n+\n+inline void\n+ipa_zap_jf_refdesc (ipa_jump_func *jfunc)\n+{\n+  gcc_checking_assert (jfunc->type == IPA_JF_CONST);\n+  jfunc->value.constant.rdesc = NULL;\n+}\n+\n /* Return the operand of a pass through jmp function JFUNC.  */\n \n inline tree\n@@ -399,6 +411,26 @@ ipa_get_jf_pass_through_agg_preserved (struct ipa_jump_func *jfunc)\n   return jfunc->value.pass_through.agg_preserved;\n }\n \n+/* Return the refdesc_decremented flag of a pass through jump function\n+   JFUNC.  */\n+\n+inline bool\n+ipa_get_jf_pass_through_refdesc_decremented (struct ipa_jump_func *jfunc)\n+{\n+  gcc_checking_assert (jfunc->type == IPA_JF_PASS_THROUGH);\n+  return jfunc->value.pass_through.refdesc_decremented;\n+}\n+\n+/* Set the refdesc_decremented flag of a pass through jump function JFUNC to\n+   VALUE.  */\n+\n+inline void\n+ipa_set_jf_pass_through_refdesc_decremented (ipa_jump_func *jfunc, bool value)\n+{\n+  gcc_checking_assert (jfunc->type == IPA_JF_PASS_THROUGH);\n+  jfunc->value.pass_through.refdesc_decremented = value;\n+}\n+\n /* Return true if pass through jump function JFUNC preserves type\n    information.  */\n "}, {"sha": "6c40db947f7f549303f8bb4d4f38aa98b6561bcc", "filename": "gcc/loop-iv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Floop-iv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Floop-iv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2617,7 +2617,7 @@ iv_number_of_iterations (class loop *loop, rtx_insn *insn, rtx condition,\n \t  d *= 2;\n \t  size--;\n \t}\n-      bound = GEN_INT (((uint64_t) 1 << (size - 1 ) << 1) - 1);\n+      bound = gen_int_mode (((uint64_t) 1 << (size - 1) << 1) - 1, mode);\n \n       tmp1 = lowpart_subreg (mode, iv1.base, comp_mode);\n       tmp = simplify_gen_binary (UMOD, mode, tmp1, gen_int_mode (d, mode));"}, {"sha": "795d37844241763b9351060726bbfbb10f048ad1", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,23 @@\n+2023-04-13  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109488\n+\t* lang.opt: Fix typo \"maybe\" to \"may be\".\n+\n+2023-04-13  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2-compiler/M2ALU.def (PopChar): New procedure function.\n+\t* gm2-compiler/M2ALU.mod (PopChar): New procedure function.\n+\t* gm2-compiler/M2GCCDeclare.mod (PromoteToString): Detect\n+\ta single constant char and build a C string.\n+\t* gm2-compiler/M2GenGCC.mod (IsConstStr): New procedure\n+\tfunction.\n+\t(GetStr): New procedure function.\n+\t(FoldAdd): Use IsConstStr.\n+\t* gm2-compiler/M2Quads.mod: Formatting changes.\n+\t* gm2-gcc/m2expr.cc (m2expr_GetCstInteger): New function.\n+\t* gm2-gcc/m2expr.def (GetCstInteger): New procedure function.\n+\t* gm2-gcc/m2expr.h (m2expr_GetCstInteger): New prototype.\n+\n 2023-04-05  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \tPR modula2/109423"}, {"sha": "91e4c2404f01f2172a706ae59e39962d02e1e39e", "filename": "gcc/m2/gm2-compiler/M2ALU.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -51,6 +51,7 @@ EXPORT QUALIFIED PtrToValue,\n                  PushRealTree, PopRealTree,\n                  PushComplexTree, PopComplexTree,\n                  PopConstructorTree,\n+                 PopChar,\n                  PushCard,\n                  PushInt,\n                  PushChar,\n@@ -260,6 +261,13 @@ PROCEDURE PushInt (i: INTEGER) ;\n PROCEDURE PushChar (c: CHAR) ;\n \n \n+(*\n+   PopChar - returns the value from the stack in a character.\n+*)\n+\n+PROCEDURE PopChar (tokenno: CARDINAL) : CHAR ;\n+\n+\n (*\n    PushString - pushes the numerical value of the string onto the stack.\n *)"}, {"sha": "caa66fc42cc00b37a9271e7722b1a9f7c0a1d134", "filename": "gcc/m2/gm2-compiler/M2ALU.mod", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -67,7 +67,8 @@ FROM m2expr IMPORT BuildAdd, BuildSub, BuildMult,\n                    BuildDivTrunc, BuildModTrunc, BuildDivFloor, BuildModFloor,\n                    BuildLSL, BuildLSR,\n                    BuildLogicalOr, BuildLogicalAnd, BuildSymmetricDifference,\n-                   GetWordOne, GetCardinalZero, TreeOverflow, RemoveOverflow ;\n+                   GetWordOne, GetCardinalZero, TreeOverflow, RemoveOverflow,\n+                   GetCstInteger ;\n \n FROM m2decl IMPORT GetBitsPerBitset, BuildIntegerConstant, BuildConstLiteralNumber ;\n FROM m2misc IMPORT DebugTree ;\n@@ -1157,6 +1158,30 @@ BEGIN\n END PushChar ;\n \n \n+(*\n+   PopChar - pops a char from the stack.\n+*)\n+\n+PROCEDURE PopChar (tokenno: CARDINAL) : CHAR ;\n+VAR\n+   v : PtrToValue ;\n+   ch: CHAR ;\n+BEGIN\n+   v := Pop () ;\n+   ch := 0C ;\n+   WITH v^ DO\n+      IF type = integer\n+      THEN\n+         ch := VAL (CHAR, GetCstInteger (numberValue))\n+      ELSE\n+         MetaErrorT0 (tokenno, '{%E}cannot convert constant to a CHAR')\n+      END\n+   END ;\n+   Push (v) ;\n+   RETURN ch\n+END PopChar ;\n+\n+\n (*\n    IsReal - returns TRUE if a is a REAL number.\n *)"}, {"sha": "5c171f728ac2d07c0045bc023ab19eaebb0ce2fd", "filename": "gcc/m2/gm2-compiler/M2GCCDeclare.mod", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -47,7 +47,7 @@ FROM M2AsmUtil IMPORT GetFullSymName, GetFullScopeAsmName ;\n FROM M2Batch IMPORT MakeDefinitionSource ;\n FROM NameKey IMPORT Name, MakeKey, NulName, KeyToCharStar, makekey ;\n FROM M2FileName IMPORT CalculateFileName ;\n-FROM DynamicStrings IMPORT String, string, InitString, KillString, InitStringCharStar, Mark ;\n+FROM DynamicStrings IMPORT String, string, InitString, KillString, InitStringCharStar, InitStringChar, Mark ;\n FROM FormatStrings IMPORT Sprintf1 ;\n FROM M2LexBuf IMPORT TokenToLineNo, FindFileNameFromToken, TokenToLocation, UnknownTokenNo, BuiltinTokenNo ;\n FROM M2MetaError IMPORT MetaError1, MetaError3 ;\n@@ -143,6 +143,7 @@ FROM M2Scope IMPORT ScopeBlock, InitScopeBlock, KillScopeBlock, ForeachScopeBloc\n \n FROM M2ALU IMPORT Addn, Sub, Equ, GreEqu, Gre, Less, PushInt, PushCard, ConvertToType,\n                   PushIntegerTree, PopIntegerTree, PopRealTree, ConvertToInt, PopSetTree,\n+                  PopChar,\n                   IsConstructorDependants, WalkConstructorDependants,\n                   PopConstructorTree, PopComplexTree, PutConstructorSolved,\n                   ChangeToConstructor, EvaluateValue, TryEvaluateValue ;\n@@ -1562,16 +1563,24 @@ END DeclareStringConstant ;\n PROCEDURE PromoteToString (tokenno: CARDINAL; sym: CARDINAL) : Tree ;\n VAR\n    size: CARDINAL ;\n+   ch  : CHAR ;\n BEGIN\n    DeclareConstant (tokenno, sym) ;\n-   size := GetStringLength (sym) ;\n-   IF size > 1\n+   IF IsConst (sym) AND (GetSType (sym) = Char)\n    THEN\n-      (* will be a string anyway *)\n-      RETURN Tree (Mod2Gcc (sym))\n+      PushValue (sym) ;\n+      ch := PopChar (tokenno) ;\n+      RETURN BuildCStringConstant (string (InitStringChar (ch)), 1)\n    ELSE\n-      RETURN BuildStringConstant (KeyToCharStar (GetString (sym)),\n-                                  GetStringLength (sym))\n+      size := GetStringLength (sym) ;\n+      IF size > 1\n+      THEN\n+         (* will be a string anyway *)\n+         RETURN Tree (Mod2Gcc (sym))\n+      ELSE\n+         RETURN BuildStringConstant (KeyToCharStar (GetString (sym)),\n+                                     GetStringLength (sym))\n+      END\n    END\n END PromoteToString ;\n "}, {"sha": "1f593cf6939b40a5682f49398908e5e730bb9975", "filename": "gcc/m2/gm2-compiler/M2GenGCC.mod", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2GenGCC.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2GenGCC.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2GenGCC.mod?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -109,7 +109,8 @@ FROM M2Bitset IMPORT Bitset ;\n FROM NameKey IMPORT Name, MakeKey, KeyToCharStar, LengthKey, makekey, NulName ;\n \n FROM DynamicStrings IMPORT string, InitString, KillString, String,\n-                           InitStringCharStar, Mark, Slice, ConCat, ConCatChar ;\n+                           InitStringCharStar, Mark, Slice, ConCat, ConCatChar,\n+                           InitStringChar, Dup ;\n \n FROM FormatStrings IMPORT Sprintf0, Sprintf1, Sprintf2, Sprintf3, Sprintf4 ;\n FROM M2System IMPORT Address, Word, System, TBitSize, MakeAdr, IsSystemType, IsGenericSystemType, IsRealN, IsComplexN, IsSetN, IsWordN, Loc, Byte ;\n@@ -132,7 +133,7 @@ FROM M2ALU IMPORT PtrToValue,\n                   PushSetTree, PopSetTree,\n                   PopRealTree, PushCard,\n                   PushRealTree,\n-                  PopComplexTree,\n+                  PopComplexTree, PopChar,\n                   Gre, Sub, Equ, NotEqu, LessEqu,\n                   BuildRange, SetOr, SetAnd, SetNegate,\n                   SetSymmetricDifference, SetDifference,\n@@ -3589,6 +3590,38 @@ BEGIN\n END BinaryOperands ;\n \n \n+(*\n+   IsConstStr - returns TRUE if sym is a constant string or a char constant.\n+*)\n+\n+PROCEDURE IsConstStr (sym: CARDINAL) : BOOLEAN ;\n+BEGIN\n+   RETURN IsConstString (sym) OR (IsConst (sym) AND (GetSType (sym) = Char))\n+END IsConstStr ;\n+\n+\n+(*\n+   GetStr - return a string containing a constant string value associated with sym.\n+            A nul char constant will return an empty string.\n+*)\n+\n+PROCEDURE GetStr (tokenno: CARDINAL; sym: CARDINAL) : String ;\n+VAR\n+   ch: CHAR ;\n+BEGIN\n+   Assert (IsConst (sym)) ;\n+   IF IsConstString (sym)\n+   THEN\n+      RETURN InitStringCharStar (KeyToCharStar (GetString (sym)))\n+   ELSE\n+      Assert (GetSType (sym) = Char) ;\n+      PushValue (sym) ;\n+      ch := PopChar (tokenno) ;\n+      RETURN InitStringChar (ch)\n+   END\n+END GetStr ;\n+\n+\n (*\n    FoldAdd - check addition for constant folding.\n *)\n@@ -3598,18 +3631,17 @@ PROCEDURE FoldAdd (tokenno: CARDINAL; p: WalkAction;\n VAR\n    s: String ;\n BEGIN\n-   IF IsConst(op2) AND IsConst(op3) AND IsConst(op3) AND\n-      IsConstString(op2) AND IsConstString(op3)\n+   IF IsConstStr (op2) AND IsConstStr (op3)\n    THEN\n-      (* handle special addition for constant strings *)\n-      s := InitStringCharStar(KeyToCharStar(GetString(op2))) ;\n-      s := ConCat(s, Mark(InitStringCharStar(KeyToCharStar(GetString(op3))))) ;\n-      PutConstString(tokenno, op1, makekey(string(s))) ;\n-      TryDeclareConstant(tokenno, op1) ;\n-      p(op1) ;\n+      (* Handle special addition for constant strings.  *)\n+      s := Dup (GetStr (tokenno, op2)) ;\n+      s := ConCat (s, GetStr (tokenno, op3)) ;\n+      PutConstString (tokenno, op1, makekey (string (s))) ;\n+      TryDeclareConstant (tokenno, op1) ;\n+      p (op1) ;\n       NoChange := FALSE ;\n-      SubQuad(quad) ;\n-      s := KillString(s)\n+      SubQuad (quad) ;\n+      s := KillString (s)\n    ELSE\n       IF BinaryOperands (quad, op2, op3)\n       THEN\n@@ -5675,11 +5707,11 @@ VAR\n BEGIN\n    location := TokenToLocation (CurrentQuadToken) ;\n \n-   DeclareConstant(CurrentQuadToken, array) ;\n-   IF IsConstString(array)\n+   DeclareConstant (CurrentQuadToken, array) ;\n+   IF IsConstString (array) OR (IsConst (array) AND (GetSType (array) = Char))\n    THEN\n       BuildAssignmentStatement (location, Mod2Gcc (result), BuildAddr (location, PromoteToString (CurrentQuadToken, array), FALSE))\n-   ELSIF IsConstructor(array)\n+   ELSIF IsConstructor (array)\n    THEN\n       BuildAssignmentStatement (location, Mod2Gcc (result), BuildAddr (location, Mod2Gcc (array), TRUE))\n    ELSIF IsUnbounded (GetType (array))"}, {"sha": "2380efb70417bc7ed39ccce901ee24817202ddfb", "filename": "gcc/m2/gm2-compiler/M2Quads.mod", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2Quads.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-compiler%2FM2Quads.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Quads.mod?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -585,7 +585,7 @@ BEGIN\n                        END\n \n       END ;\n-      i := GetNextQuad(i)\n+      i := GetNextQuad (i)\n    END ;\n    InternalError ('fix this for the sake of efficiency..')\n END IsBackReference ;\n@@ -686,7 +686,7 @@ BEGIN\n                        END\n \n       END ;\n-      i := GetNextQuad(i)\n+      i := GetNextQuad (i)\n    END ;\n    InternalError ('fix this for the sake of efficiency..')\n END IsBackReferenceConditional ;"}, {"sha": "a319960aa3372b743f2b7d2a2878326d8f48b2c0", "filename": "gcc/m2/gm2-gcc/m2expr.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -4283,6 +4283,16 @@ build_set_full_complement (location_t location)\n   return value;\n }\n \n+\n+/* GetCstInteger return the integer value of the cst tree.  */\n+\n+int\n+m2expr_GetCstInteger (tree cst)\n+{\n+  return TREE_INT_CST_LOW (cst);\n+}\n+\n+\n /* init initialise this module.  */\n \n void"}, {"sha": "cc80ded15475599d77c491d85ec6ae5205a7deb5", "filename": "gcc/m2/gm2-gcc/m2expr.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.def?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -583,6 +583,13 @@ PROCEDURE IsTrue (t: Tree) : BOOLEAN ;\n PROCEDURE IsFalse (t: Tree) : BOOLEAN ;\n \n \n+(*\n+    GetCstInteger - return the integer value of the cst tree.\n+*)\n+\n+PROCEDURE GetCstInteger (cst: Tree) : INTEGER ;\n+\n+\n (*\n     AreConstantsEqual - maps onto tree.c (tree_int_cst_equal). It returns\n                         TRUE if the value of e1 is the same as e2."}, {"sha": "86e3bab1cded9bf49179d52e1ec88250e045bf4b", "filename": "gcc/m2/gm2-gcc/m2expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -234,6 +234,7 @@ EXTERN void m2expr_ConstantExpressionWarning (tree value);\n EXTERN tree m2expr_BuildAddAddress (location_t location, tree op1, tree op2);\n EXTERN tree m2expr_BuildRDiv (location_t location, tree op1, tree op2,\n                               bool needconvert);\n+EXTERN int m2expr_GetCstInteger (tree cst);\n \n EXTERN void m2expr_init (location_t location);\n "}, {"sha": "7a0edb71c5053a4cc87263857360c7f6347c6d6f", "filename": "gcc/m2/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fm2%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Flang.opt?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -120,7 +120,7 @@ use ISO dialect of Modula-2\n \n flibs=\n Modula-2 Joined\n-specify the library order, the libraries maybe specified by a comma separated abbreviation: log,min,pim,iso or by directory names: m2log,m2min,m2pim,m2iso.\n+specify the library order, the libraries may be specified by a comma separated abbreviation: log,min,pim,iso or by directory names: m2log,m2min,m2pim,m2iso.\n \n flocation=\n Modula-2 Joined"}, {"sha": "fb2e5388ab190975759e9ce1795938a0d67153b0", "filename": "gcc/opts.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1384,6 +1384,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t}\n       opts->x_flag_var_tracking = 0;\n       opts->x_flag_var_tracking_uninit = 0;\n+      opts->x_flag_var_tracking_assignments = 0;\n     }\n \n   /* One could use EnabledBy, but it would lead to a circular dependency.  */"}, {"sha": "57a804a0de308d80813d3e56a470be238935acb3", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,17 @@\n+2023-04-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* de.po: Update.\n+\n+2023-04-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,\n+\tzh_TW.po: Update.\n+\n+2023-04-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* sv.po: Update.\n+\n 2023-04-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "fad46be32f13846d5e4c20688d04bee9d6c0c28a", "filename": "gcc/po/be.po", "status": "modified", "additions": 7758, "deletions": 7638, "changes": 15396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fbe.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fbe.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fbe.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "517717097808cb4bfb3ebdbcbea6bd789023720a", "filename": "gcc/po/da.po", "status": "modified", "additions": 7788, "deletions": 7660, "changes": 15448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fda.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fda.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fda.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "66fd5710f010027c6ced564e1f8cf3d82e5a02f7", "filename": "gcc/po/de.po", "status": "modified", "additions": 7772, "deletions": 7650, "changes": 15422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fde.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fde.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fde.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "bf5487fa7dfff7e810837415273f8173f51abe2e", "filename": "gcc/po/el.po", "status": "modified", "additions": 7754, "deletions": 7641, "changes": 15395, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fel.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fel.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fel.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "a91ed39fe73cee756149afb645a9703f35ba75d1", "filename": "gcc/po/es.po", "status": "modified", "additions": 7798, "deletions": 7661, "changes": 15459, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fes.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fes.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fes.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "ea21d8c83ead860449ea513cd94baf9d4920d6b6", "filename": "gcc/po/fi.po", "status": "modified", "additions": 7768, "deletions": 7649, "changes": 15417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Ffi.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Ffi.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Ffi.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "fd999309f285cd40630f6d1b868fbbded33d56d5", "filename": "gcc/po/fr.po", "status": "modified", "additions": 7775, "deletions": 7653, "changes": 15428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Ffr.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Ffr.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Ffr.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "cc079aa18543bb0516262c4b7f7b2c9ffa848420", "filename": "gcc/po/hr.po", "status": "modified", "additions": 7757, "deletions": 7634, "changes": 15391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fhr.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fhr.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fhr.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "9068b6b3396197761c257ad54318fec2e914f233", "filename": "gcc/po/id.po", "status": "modified", "additions": 7778, "deletions": 7650, "changes": 15428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fid.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fid.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fid.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "464a05d50692cb7949b10f252303574ae5e4d5ff", "filename": "gcc/po/ja.po", "status": "modified", "additions": 7771, "deletions": 7653, "changes": 15424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fja.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fja.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fja.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "0cfe6983f1e8d978e47cb45f51060709cc537b2f", "filename": "gcc/po/nl.po", "status": "modified", "additions": 7758, "deletions": 7646, "changes": 15404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fnl.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fnl.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fnl.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "598499d803b61a9153aadacab020e7d9e619c279", "filename": "gcc/po/ru.po", "status": "modified", "additions": 7797, "deletions": 7663, "changes": 15460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fru.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fru.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fru.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "4b4c5ada2fc71a92bd9e8435f96bd3842a671883", "filename": "gcc/po/sr.po", "status": "modified", "additions": 7775, "deletions": 7649, "changes": 15424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fsr.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fsr.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fsr.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "7c2f96f1130e2e4d9293c325bb83b6b09aa2f032", "filename": "gcc/po/sv.po", "status": "modified", "additions": 7931, "deletions": 7832, "changes": 15763, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fsv.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fsv.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fsv.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "c78fdbcad1a6ba8eda31b0b5c7f7e7dbb71f0234", "filename": "gcc/po/tr.po", "status": "modified", "additions": 7777, "deletions": 7651, "changes": 15428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Ftr.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Ftr.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Ftr.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "464dcff7ec81da1f6e73a02b490e5273e3780fbf", "filename": "gcc/po/uk.po", "status": "modified", "additions": 7770, "deletions": 7647, "changes": 15417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fuk.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fuk.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fuk.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "eda1a1174258a5a86ea98bbc08426100d5cbd6fc", "filename": "gcc/po/vi.po", "status": "modified", "additions": 7785, "deletions": 7656, "changes": 15441, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fvi.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fvi.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fvi.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "dfbdb0743f0930bbcb71e6a6be6fc6b3d129e749", "filename": "gcc/po/zh_CN.po", "status": "modified", "additions": 7788, "deletions": 7660, "changes": 15448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fzh_CN.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fzh_CN.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fzh_CN.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "e99b66d5a99e4817780a96131bdede176778733d", "filename": "gcc/po/zh_TW.po", "status": "modified", "additions": 7776, "deletions": 7653, "changes": 15429, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fzh_TW.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fpo%2Fzh_TW.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fzh_TW.po?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c"}, {"sha": "25b8ddff9e84caa3f1810bfdb308eef5ffa4d659", "filename": "gcc/rust/ChangeLog", "status": "modified", "additions": 950, "deletions": 0, "changes": 950, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Frust%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Frust%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,953 @@\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* parse/rust-parse-impl.h\n+\t(Parser::parse_stmt): Handle unsafe expression statements.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* parse/rust-parse-impl.h\n+\t(Parser::parse_expr_stmt): Remove hypothetical unsafe + expr_stmt_without_block handling.\n+\n+2023-04-06  M V V S Manoj Kumar  <mvvsmanojkumar@gmail.com>\n+\n+\t* ast/rust-ast-full-decls.h (class InlineAsm):Added class declaration.\n+\t* ast/rust-expr.h (class InlineAsm):Added class definition.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust-diagnostics.h (struct Error): Add new Kind enum and various new\n+\tstatic constructors to allow for hints as well.\n+\t* rust-diagnostics.cc (Error::Error): Use new `kind` field properly.\n+\t* checks/errors/privacy/rust-visibility-resolver.cc\n+\t(VisibilityResolver::resolve_module_path): Use new Error API.\n+\t* expand/rust-macro-builtins.cc (MacroBuiltin::include_handler): Likewise.\n+\t* expand/rust-macro-expand.cc (parse_many): Likewise.\n+\t(transcribe_type): Likewise.\n+\t* parse/rust-parse-impl.h (Parser::parse_crate): Likewise.\n+\t* rust-session-manager.cc (Session::handle_crate_name): Likewise.\n+\t* ast/rust-ast.cc (Module::load_items): Likewise.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-ast.h: Keep location in TraitItem base class\n+\t* ast/rust-item.h (class TraitItemFunc): Use base class location instead.\n+\t(class TraitItemMethod): Likewise.\n+\t(class TraitItemConst): Likewise.\n+\t(class TraitItemType): Likewise.\n+\t* ast/rust-macro.h: Likewise.\n+\n+2023-04-06  SainiAditya1  <Adityasaini10012001@outlook.com>\n+\n+\t* hir/tree/rust-hir-full-test.cc: Moved to...\n+\t* hir/tree/rust-hir.cc: ...here.\n+\t* Make-lang.in: Rename rust-hir-full-test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* ast/rust-ast-dump.cc\n+\t(Dump::visit): Add AltPattern visitor.\n+\t* ast/rust-ast-dump.h:\n+\t(Dump::visit): Add AltPattern visitor.\n+\t* ast/rust-ast-full-decls.h\n+\t(class AltPattern): Add declaration.\n+\t* ast/rust-ast-visitor.h:\n+\t(ASTVisitor::visit): Add AltPattern visitor.\n+\t* ast/rust-ast.cc\n+\t(AltPattern::as_string): Add definition.\n+\t(AltPattern::accept_vis): Add definition.\n+\t* ast/rust-pattern.h\n+\t(class AltPattern): Add declaration.\n+\t* checks/errors/rust-feature-gate.h:\n+\t(FeatureGate::visit) Add AltPattern visitor\n+\t* expand/rust-attribute-visitor.cc\n+\t(AttrVisitor::visit): Add AltPattern visitor.\n+\t* expand/rust-attribute-visitor.h:\n+\t(AttrVisitor::visit): Add AltPattern visitor.\n+\t* hir/rust-ast-lower-base.cc\n+\t(ASTLoweringBase::visit): Add AltPattern visitor.\n+\t* hir/rust-ast-lower-base.h:\n+\t(ASTLoweringBase::visit): Add AltPattern visitor.\n+\t* resolve/rust-ast-resolve-base.cc\n+\t(ResolverBase::visit): Add AltPattern visitor.\n+\t* resolve/rust-ast-resolve-base.h:\n+\t(ResolverBase::visit): Add AltPattern visitor.\n+\t* resolve/rust-early-name-resolver.cc\n+\t(EarlyNameResolver::visit): Add AltPattern visitor.\n+\t* resolve/rust-early-name-resolver.h:\n+\t(EarlyNameResolver::visit): Add AltPattern visitor.\n+\t* util/rust-attributes.cc\n+\t(AttributeChecker::visit): Add AltPattern visitor.\n+\t* util/rust-attributes.h:\n+\t(AttributeChecker::visit): Add AltPattern visitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* ast/rust-pattern.h: Fix formatting.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-builtins.cc (MacroBuiltin::include_handler): Do not\n+\treturn nullptr token in expansion of `include!()`\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* checks/errors/rust-feature-gate.h: Add trailing newline before EOF.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-reference.cc (TraitReference::clear_associated_types): make const\n+\t(TraitReference::clear_associated_type_projections): new interface\n+\t* typecheck/rust-hir-trait-reference.h:\n+\t* typecheck/rust-hir-trait-resolve.cc (TraitResolver::resolve_trait): refactor\n+\t(TraitItemReference::associated_type_reset): reset projections\n+\t* typecheck/rust-hir-type-bounds.h:\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): fix bounds\n+\t* typecheck/rust-tyty-bounds.cc (TypeBoundsProbe::TypeBoundsProbe): refactor into cc file\n+\t(TypeBoundsProbe::Probe): refactor\n+\t(TypeBoundsProbe::is_bound_satisfied_for_type): likewise\n+\t(TypeBoundsProbe::assemble_sized_builtin): add builtin for Sized\n+\t(TypeCheckBase::get_predicate_from_bound): refactor\n+\t(TypeBoundPredicate::lookup_associated_type): refactor\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionRef::lookup_associated_impl)\n+\t(SubstitutionRef::prepare_higher_ranked_bounds): new interface to clear hanging bounds\n+\t(SubstitutionRef::monomorphize): refactor\n+\t* typecheck/rust-tyty-subst.h:\n+\t* typecheck/rust-tyty.cc (BaseType::get_locus): helper\n+\t(BaseType::satisfies_bound): ensure bounds are satisfied and assoicated types\n+\t(ParamType::ParamType): new field in constructor\n+\t(ParamType::clone): update clone\n+\t(ParamType::set_implicit_self_trait): new interface\n+\t(ParamType::is_implicit_self_trait): likewise\n+\t* typecheck/rust-tyty.h: cleanup\n+\t* util/rust-hir-map.cc (Mappings::Mappings): builtin marker\n+\t(Mappings::~Mappings): delete marker\n+\t(Mappings::lookup_builtin_marker): lookup\n+\t* util/rust-hir-map.h: update header\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* hir/tree/rust-hir-item.h: implement virtual function\n+\t* hir/tree/rust-hir.h: add virtual function\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: add new dependancy\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::query_type): refactor\n+\t* typecheck/rust-hir-type-check-base.h: refactor\n+\t* typecheck/rust-hir-type-check.h (RUST_HIR_TYPE_CHECK): refactor\n+\t* typecheck/rust-type-util.cc: New file.\n+\t* typecheck/rust-type-util.h: New file.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* expand/rust-macro-builtins.cc\n+\t(MacroBuiltin::include_str_handler): Add check for valid UTF-8.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* parse/rust-parse-impl.h\n+\t(Parser::parse_grouped_or_tuple_pattern): Add support for empty tuple patterns.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* lex/rust-lex.h: Add file type check.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-pattern.cc\n+\t(CompilePatternLet::visit): Simplify WildcardPattern compilation for let statements.\n+\t* backend/rust-compile-var-decl.h:\n+\t(CompileVarDecl::visit): Remove variable declaration for WildcardPattern.\n+\t* resolve/rust-ast-resolve-pattern.h:\n+\t(PatternDeclaration::visit): Remove name resolution for WildcardPattern.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* typecheck/rust-tyty-call.cc\n+\t(TypeCheckCallExpr::visit): Add variadic argument type checking.\n+\t(TypeCheckCallExpr::visit): Fix comment spelling (\"varadic\").\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* checks/errors/rust-feature-gate.cc: Add implementation for\n+\t`void FeatureGate::visit (AST::ExternBlock &block)`. Add `valid_feature`\n+\tconstruction process in `FeatureGate::check`.\n+\t* checks/errors/rust-feature-gate.h: Add declaration for\n+\t`void FeatureGate::visit (AST::ExternBlock &block)`. Add private\n+\tvariable `valid_feature`.\n+\t* checks/errors/rust-feature.h: Change `issue` to `m_issue`.\n+\n+2023-04-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* ast/rust-ast-fragment.cc: Update copyright years.\n+\t* ast/rust-ast-fragment.h: Likewise.\n+\t* ast/rust-macro.cc: Likewise.\n+\t* checks/errors/rust-feature-gate.cc: Likewise.\n+\t* checks/errors/rust-feature-gate.h: Likewise.\n+\t* checks/errors/rust-feature.cc: Likewise.\n+\t* checks/errors/rust-feature.h: Likewise.\n+\t* hir/rust-ast-lower-expr.cc: Likewise.\n+\t* hir/rust-ast-lower-type.cc: Likewise.\n+\t* resolve/rust-early-name-resolver.cc: Likewise.\n+\t* resolve/rust-early-name-resolver.h: Likewise.\n+\t* rust-gcc.h: Likewise.\n+\t* typecheck/rust-hir-path-probe.cc: Likewise.\n+\t* typecheck/rust-hir-trait-reference.cc: Likewise.\n+\t* typecheck/rust-tyty-bounds.h: Likewise.\n+\t* typecheck/rust-tyty-subst.cc: Likewise.\n+\t* typecheck/rust-tyty-subst.h: Likewise.\n+\t* typecheck/rust-tyty-util.cc: Likewise.\n+\t* typecheck/rust-tyty-util.h: Likewise.\n+\t* typecheck/rust-unify.cc: Likewise.\n+\t* typecheck/rust-unify.h: Likewise.\n+\t* util/rust-inline-visitor.h: Likewise.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* rust-session-manager.cc (Session::compile_crate): Update the\n+\tenvironment variable name.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* Make-lang.in: Add `rust-hir-trait-reference.o`.\n+\t* typecheck/rust-hir-trait-reference.h: Remove multiple function body.\n+\t* typecheck/rust-hir-trait-reference.cc: Add multiple function body.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-expand.cc (MacroExpander::expand_eager_invocations):\n+\tAdd documentation explaining the algorithm.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-macro.cc: New file.\n+\t* Make-lang.in: Add `rust-macro.o` object\n+\t* ast/rust-ast-fragment.cc (Fragment::Fragment): Change API around\n+\tthe construction of AST fragments.\n+\t(Fragment::operator=): Correct `Fragment::operator=` to take into\n+\taccount the fragment tokens.\n+\t(Fragment::create_error): Use new constructor.\n+\t(Fragment::complete): Remove in favor of new constructor.\n+\t(Fragment::unexpanded): Remove as that Fragment type is no longer used\n+\tor possible.\n+\t(Fragment::get_tokens): Add helper to access a fragment's tokens.\n+\t* ast/rust-ast-fragment.h (enum class): Remove `FragmentKind::Unused`\n+\t* ast/rust-ast.cc (MacroInvocation::as_string): Display\n+\tbuiltin macro invocations properly.\n+\t* ast/rust-ast.h: Fix `DelimTokenTree` class copy constructors and\n+\thandling of its token vector.\n+\t* ast/rust-macro.h (class MacroMatcher): Format.\n+\t(class MetaItemSeq): Likewise.\n+\t(builtin_macro_from_string): Get a `BuiltinMacroKind` from a given\n+\tstring, i.e the name of the macro (`assert!`, `cfg!` and so on).\n+\t* expand/rust-attribute-visitor.cc (AttrVisitor::visit): Do not expand\n+\tmacros recursively anymore.\n+\t(AttrVisitor::maybe_expand_expr): Likewise.\n+\t(AttrVisitor::maybe_expand_type): Likewise.\n+\t* expand/rust-attribute-visitor.h: Likewise, and remove\n+\t`expand_macro_fragment_recursively` function.\n+\t* expand/rust-macro-builtins.cc (make_token): Add shorthand for\n+\treturning `std::unique_ptr<AST::Token>`s.\n+\t(make_macro_invocation): Add shorthand for returning fragments\n+\tcontaining builtin macro invocations.\n+\t(try_expand_macro_expression): Do not expand macros recursively.\n+\t(try_expand_single_string_literal): Likewise.\n+\t(try_expand_many_expr): Likewise.\n+\t(parse_single_string_literal): Error out more appropriately.\n+\t(MacroBuiltin::compile_error_handler): Add explanation for eager\n+\tinvocation\n+\t(MacroBuiltin::file_handler): Return the proper tokens associated with\n+\tmacro invocation, and builtin macros in the case of necessary eager\n+\texpansion.\n+\t(MacroBuiltin::column_handler): Likewise.\n+\t(MacroBuiltin::include_bytes_handler): Likewise.\n+\t(MacroBuiltin::include_str_handler): Likewise.\n+\t(MacroBuiltin::concat_handler): Likewise.\n+\t(MacroBuiltin::env_handler): Likewise.\n+\t(MacroBuiltin::cfg_handler): Likewise.\n+\t(MacroBuiltin::include_handler): Likewise.\n+\t(MacroBuiltin::line_handler): Likewise.\n+\t* expand/rust-macro-expand.cc (MacroExpander::expand_eager_invocations):\n+\tAdd function to expand eager invocations *once* in the fixed point\n+\tpipeline.\n+\t(MacroExpander::expand_invoc): Call into `expand_eager_invocations` for\n+\tbuiltin macro invocations.\n+\t(MacroExpander::expand_crate): Use new `AttrVisitor` API.\n+\t(parse_many): Return tokens in `AST::Fragment`.\n+\t(transcribe_expression): Likewise.\n+\t(transcribe_type): Likewise.\n+\t* expand/rust-macro-expand.h (struct MacroExpander): Add `has_changed`\n+\tflag for fixed point checking.\n+\t* resolve/rust-early-name-resolver.cc (EarlyNameResolver::EarlyNameResolver):\n+\tKeep track of the current macro scope.\n+\t(EarlyNameResolver::go): Use `scoped` API.\n+\t(EarlyNameResolver::visit): Likewise.\n+\t* resolve/rust-early-name-resolver.h: Add `scoped` API.\n+\t* rust-session-manager.cc (Session::expansion): Perform macro expansion\n+\tin a fixed-point fashion.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* expand/rust-macro-invoc-lexer.cc (MacroInvocLexer::get_token_slice):\n+\tAdd API to retrieve token slices when lexing macro expansions.\n+\t* expand/rust-macro-invoc-lexer.h: Declare `get_token_slice`.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse.h: Move `parse_macro_invocation` to public API.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-item.h (class BlockExpr): Remove forward declaration of\n+\tclass `BlockExpr`.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/tree/rust-hir-pattern.h\n+\t(TuplePatternItemsRanged::get_lower_patterns): Add method.\n+\t(TuplePatternItemsRanged::get_upper_patterns): Add method.\n+\t* backend/rust-compile-pattern.cc\n+\t(CompilePatternLet::visit): Implement TuplePattern visitor.\n+\t* backend/rust-compile-pattern.h\n+\t(CompilePatternLet::visit): Move TuplePattern visitor out of header file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-unify.cc (UnifyRules::go): ensure the bounds are checked\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): remove error message\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-reference.h: add const infterface\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionParamMapping::get_generic_param): make const\n+\t(SubstitutionRef::monomorphize): fix issue\n+\t* typecheck/rust-tyty-subst.h: constify interface\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* util/rust-lang-item.h:\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionArg::is_conrete): fix check\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update names\n+\t* backend/rust-compile-expr.cc (CompileExpr::resolve_method_address):\n+\tupdate to use new interface\n+\t* typecheck/rust-coercion.cc (TypeCoercionRules::coerce_borrowed_pointer): likewise\n+\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::unify_site): likewise\n+\t* typecheck/rust-tyty.cc (BaseType::destructure): likewise\n+\t(InferType::unify): removed old unify interface\n+\t(ErrorType::unify): likewise\n+\t(ADTType::unify): likewise\n+\t(TupleType::unify): likewise\n+\t(FnType::unify): likewise\n+\t(FnPtr::unify): likewise\n+\t(ClosureType::unify): likewise\n+\t(ArrayType::unify): likewise\n+\t(SliceType::unify): likewise\n+\t(BoolType::unify): likewise\n+\t(IntType::unify): likewise\n+\t(UintType::unify): likewise\n+\t(FloatType::unify): likewise\n+\t(USizeType::unify): likewise\n+\t(ISizeType::unify): likewise\n+\t(CharType::unify): likewise\n+\t(ReferenceType::unify): likewise\n+\t(PointerType::unify): likewise\n+\t(ParamType::unify): likewise\n+\t(StrType::unify): likewise\n+\t(NeverType::unify): likewise\n+\t(PlaceholderType::unify): likewise\n+\t(ProjectionType::unify): likewise\n+\t(DynamicObjectType::unify): likewise\n+\t* typecheck/rust-tyty.h: update destructure interface\n+\t* typecheck/rust-tyty-rules.h: Removed.\n+\t* typecheck/rust-unify.cc: New file.\n+\t* typecheck/rust-unify.h: New file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-reference.h: change interface to return self\n+\t* typecheck/rust-hir-trait-resolve.cc: likewise\n+\t* typecheck/rust-hir-type-check-path.cc (TypeCheckExpr::resolve_segments): likewise\n+\t* typecheck/rust-tyty-call.cc (TypeCheckCallExpr::visit): remove monomorphization hack\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-subst.cc: add missing callback\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-subst.cc: update copy constructors\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-bounds.cc: refactor to take a reference\n+\t* typecheck/rust-tyty-subst.cc: likewise\n+\t(SubstitutionRef::get_substitution_arguments): likewise\n+\t(SubstitutionRef::infer_substitions): likewise\n+\t* typecheck/rust-tyty-subst.h: likewise\n+\t* typecheck/rust-tyty.cc (ADTType::handle_substitions): likewise\n+\t(TupleType::handle_substitions): likewise\n+\t(FnType::handle_substitions): likewise\n+\t(ClosureType::handle_substitions): likewise\n+\t(ArrayType::handle_substitions): likewise\n+\t(SliceType::handle_substitions): likewise\n+\t(ReferenceType::handle_substitions): likewise\n+\t(PointerType::handle_substitions): likewise\n+\t(ParamType::handle_substitions): likewise\n+\t(ProjectionType::handle_substitions): likewise\n+\t* typecheck/rust-tyty.h: likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-trait-ref.h: Moved to...\n+\t* typecheck/rust-hir-trait-reference.h: ...here.\n+\t* typecheck/rust-hir-trait-resolve.cc: refactor\n+\t* typecheck/rust-hir-trait-resolve.h (RUST_HIR_TRAIT_RESOLVE_H): likewise\n+\t* typecheck/rust-hir-type-check.h: likewise\n+\t* typecheck/rust-tyty.cc: likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update name\n+\t* typecheck/rust-tyctx.cc: Moved to...\n+\t* typecheck/rust-typecheck-context.cc: ...here.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-type-check.h: refactor\n+\t* typecheck/rust-tyctx.cc (TypeCheckContext::iterate): refactor\n+\t(TypeCheckContext::have_loop_context): likewise\n+\t(TypeCheckContext::push_new_loop_context): likewise\n+\t(TypeCheckContext::push_new_while_loop_context): likewise\n+\t(TypeCheckContext::peek_loop_context): likewise\n+\t(TypeCheckContext::pop_loop_context): likewise\n+\t(TypeCheckContext::swap_head_loop_context): likewise\n+\t(TypeCheckContext::insert_trait_reference): likewise\n+\t(TypeCheckContext::lookup_trait_reference): likewise\n+\t(TypeCheckContext::insert_receiver): likewise\n+\t(TypeCheckContext::lookup_receiver): likewise\n+\t(TypeCheckContext::insert_associated_type_mapping): likewise\n+\t(TypeCheckContext::clear_associated_type_mapping): likewise\n+\t(TypeCheckContext::lookup_associated_type_mapping): likewise\n+\t(TypeCheckContext::insert_variant_definition): likewise\n+\t(TypeCheckContext::lookup_variant_definition): likewise\n+\t(TypeCheckContext::insert_operator_overload): likewise\n+\t(TypeCheckContext::lookup_operator_overload): likewise\n+\t(TypeCheckContext::insert_unconstrained_check_marker): likewise\n+\t(TypeCheckContext::have_checked_for_unconstrained): likewise\n+\t(TypeCheckContext::insert_resolved_predicate): likewise\n+\t(TypeCheckContext::lookup_predicate): likewise\n+\t(TypeCheckContext::insert_query): likewise\n+\t(TypeCheckContext::query_completed): likewise\n+\t(TypeCheckContext::query_in_progress): likewise\n+\t(TypeCheckContext::insert_trait_query): likewise\n+\t(TypeCheckContext::trait_query_completed): likewise\n+\t(TypeCheckContext::trait_query_in_progress): likewise\n+\t(TypeCheckContextItem::Item::Item): likewise\n+\t(TypeCheckContextItem::TypeCheckContextItem): likewise\n+\t(TypeCheckContextItem::get_item): likewise\n+\t(TypeCheckContextItem::get_impl_item): likewise\n+\t(TypeCheckContextItem::get_trait_item): likewise\n+\t(TypeCheckContextItem::get_type): likewise\n+\t* typecheck/rust-tyty.cc (StructFieldType::StructFieldType): likewise\n+\t(StructFieldType::get_ref): likewise\n+\t(StructFieldType::get_name): likewise\n+\t(StructFieldType::get_field_type): likewise\n+\t(StructFieldType::set_field_type): likewise\n+\t(StructFieldType::is_concrete): likewise\n+\t(StructFieldType::debug): likewise\n+\t(StructFieldType::get_locus): likewise\n+\t(VariantDef::variant_type_string): likewise\n+\t(VariantDef::VariantDef): likewise\n+\t(VariantDef::operator=): likewise\n+\t(VariantDef::get_error_node): likewise\n+\t(VariantDef::is_error): likewise\n+\t(VariantDef::get_id): likewise\n+\t(VariantDef::get_defid): likewise\n+\t(VariantDef::get_variant_type): likewise\n+\t(VariantDef::is_data_variant): likewise\n+\t(VariantDef::is_dataless_variant): likewise\n+\t(VariantDef::get_identifier): likewise\n+\t(VariantDef::num_fields): likewise\n+\t(VariantDef::get_field_at_index): likewise\n+\t(VariantDef::get_fields): likewise\n+\t(VariantDef::lookup_field): likewise\n+\t(VariantDef::get_discriminant): likewise\n+\t(VariantDef::as_string): likewise\n+\t(VariantDef::is_equal): likewise\n+\t(VariantDef::clone): likewise\n+\t(VariantDef::monomorphized_clone): likewise\n+\t(VariantDef::get_ident): likewise\n+\t(TupleType::TupleType): likewise\n+\t(TupleType::get_unit_type): likewise\n+\t(TupleType::is_unit): likewise\n+\t(TupleType::num_fields): likewise\n+\t(TupleType::is_concrete): likewise\n+\t(TupleType::get_fields): likewise\n+\t(BoolType::BoolType): likewise\n+\t(BoolType::get_name): likewise\n+\t(BoolType::is_concrete): likewise\n+\t(IntType::IntType): likewise\n+\t(IntType::get_name): likewise\n+\t(IntType::get_int_kind): likewise\n+\t(IntType::is_concrete): likewise\n+\t(UintType::UintType): likewise\n+\t(UintType::get_name): likewise\n+\t(UintType::get_uint_kind): likewise\n+\t(UintType::is_concrete): likewise\n+\t(FloatType::FloatType): likewise\n+\t(FloatType::get_name): likewise\n+\t(FloatType::get_float_kind): likewise\n+\t(FloatType::is_concrete): likewise\n+\t(USizeType::USizeType): likewise\n+\t(USizeType::get_name): likewise\n+\t(USizeType::is_concrete): likewise\n+\t(ISizeType::ISizeType): likewise\n+\t(ISizeType::get_name): likewise\n+\t(ISizeType::is_concrete): likewise\n+\t(CharType::CharType): likewise\n+\t(CharType::is_concrete): likewise\n+\t(CharType::get_name): likewise\n+\t(ReferenceType::ReferenceType): likewise\n+\t(ReferenceType::is_concrete): likewise\n+\t(ReferenceType::mutability): likewise\n+\t(ReferenceType::is_mutable): likewise\n+\t(ReferenceType::is_dyn_object): likewise\n+\t(ReferenceType::is_dyn_slice_type): likewise\n+\t(ReferenceType::is_dyn_str_type): likewise\n+\t(PointerType::PointerType): likewise\n+\t(PointerType::is_concrete): likewise\n+\t(PointerType::mutability): likewise\n+\t(PointerType::is_mutable): likewise\n+\t(PointerType::is_const): likewise\n+\t(PointerType::is_dyn_object): likewise\n+\t(PointerType::is_dyn_slice_type): likewise\n+\t(PointerType::is_dyn_str_type): likewise\n+\t(ParamType::ParamType): likewise\n+\t(ParamType::get_generic_param): likewise\n+\t(ParamType::can_resolve): likewise\n+\t(ParamType::is_concrete): likewise\n+\t(StrType::StrType): likewise\n+\t(StrType::get_name): likewise\n+\t(StrType::is_concrete): likewise\n+\t(NeverType::NeverType): likewise\n+\t(NeverType::get_name): likewise\n+\t(NeverType::is_unit): likewise\n+\t(NeverType::is_concrete): likewise\n+\t(PlaceholderType::PlaceholderType): likewise\n+\t(PlaceholderType::get_name): likewise\n+\t(PlaceholderType::is_unit): likewise\n+\t(PlaceholderType::get_symbol): likewise\n+\t(PlaceholderType::is_concrete): likewise\n+\t(ProjectionType::is_unit): likewise\n+\t(ProjectionType::get_name): likewise\n+\t(ProjectionType::needs_generic_substitutions): likewise\n+\t(ProjectionType::supports_substitutions): likewise\n+\t(ProjectionType::has_subsititions_defined): likewise\n+\t(ProjectionType::get): likewise\n+\t(ProjectionType::is_concrete): likewise\n+\t(DynamicObjectType::is_concrete): likewise\n+\t* typecheck/rust-tyty.h: likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-path-probe.cc (PathProbeCandidate::Candidate::Candidate): refactor\n+\t(PathProbeCandidate::PathProbeCandidate): likewise\n+\t(PathProbeCandidate::as_string): likewise\n+\t(PathProbeCandidate::is_enum_candidate): likewise\n+\t(PathProbeCandidate::is_impl_candidate): likewise\n+\t(PathProbeCandidate::is_trait_candidate): likewise\n+\t(PathProbeCandidate::is_full_trait_item_candidate): likewise\n+\t(PathProbeCandidate::get_error): likewise\n+\t(PathProbeCandidate::is_error): likewise\n+\t(PathProbeCandidate::get_defid): likewise\n+\t(PathProbeCandidate::operator<): likewise\n+\t* typecheck/rust-hir-path-probe.h (struct PathProbeCandidate): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-hir-path-probe.cc (PathProbeType::PathProbeType): refactor\n+\t(PathProbeType::Probe): likewise\n+\t(PathProbeType::visit): likewise\n+\t(PathProbeType::process_enum_item_for_candiates): likewise\n+\t(PathProbeType::process_impl_items_for_candidates): likewise\n+\t(PathProbeType::is_reciever_generic): likewise\n+\t(PathProbeImplTrait::PathProbeImplTrait): likewise\n+\t(PathProbeImplTrait::Probe): likewise\n+\t(PathProbeImplTrait::process_trait_impl_items_for_candidates): likewise\n+\t* typecheck/rust-hir-path-probe.h (struct PathProbeCandidate): likewise\n+\t* typecheck/rust-hir-trait-resolve.cc\n+\t(PathProbeImplTrait::process_trait_impl_items_for_candidates): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty.cc (BaseType::BaseType): refactor\n+\t(BaseType::~BaseType): likewise\n+\t(BaseType::get_ref): likewise\n+\t(BaseType::set_ref): likewise\n+\t(BaseType::get_ty_ref): likewise\n+\t(BaseType::set_ty_ref): likewise\n+\t(BaseType::is_equal): likewise\n+\t(BaseType::is_unit): likewise\n+\t(BaseType::get_kind): likewise\n+\t(BaseType::get_combined_refs): likewise\n+\t(BaseType::append_reference): likewise\n+\t(BaseType::supports_substitutions): likewise\n+\t(BaseType::has_subsititions_defined): likewise\n+\t(BaseType::can_substitute): likewise\n+\t(BaseType::needs_generic_substitutions): likewise\n+\t(BaseType::contains_type_parameters): likewise\n+\t(BaseType::get_ident): likewise\n+\t(BaseType::get_locus): likewise\n+\t(InferType::InferType): likewise\n+\t(InferType::get_infer_kind): likewise\n+\t(InferType::get_name): likewise\n+\t(InferType::is_concrete): likewise\n+\t(ErrorType::ErrorType): likewise\n+\t(ErrorType::is_unit): likewise\n+\t(ErrorType::is_concrete): likewise\n+\t(ErrorType::get_name): likewise\n+\t(ErrorType::monomorphized_clone): likewise\n+\t* typecheck/rust-tyty.h (class SubstitutionArgumentMappings): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-substitution-mapper.cc (SubstMapper::SubstMapper): refactor\n+\t(SubstMapper::Resolve): likewise\n+\t(SubstMapper::InferSubst): likewise\n+\t(SubstMapper::have_generic_args): likewise\n+\t(SubstMapper::visit): likewise\n+\t(SubstMapperInternal::visit): likewise\n+\t(SubstMapperFromExisting::SubstMapperFromExisting): likewise\n+\t(SubstMapperFromExisting::Resolve): likewise\n+\t(SubstMapperFromExisting::visit): likewise\n+\t(GetUsedSubstArgs::GetUsedSubstArgs): likewise\n+\t(GetUsedSubstArgs::From): likewise\n+\t(GetUsedSubstArgs::visit): likewise\n+\t* typecheck/rust-substitution-mapper.h: refactor\n+\t* typecheck/rust-tyty-subst.cc (SubstitutionParamMapping::get_generic_param): likewise\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update the makefile\n+\t* typecheck/rust-tyty.cc (SubstitutionParamMapping::need_substitution): likewise\n+\t(SubstitutionParamMapping::override_context): likewise\n+\t(SubstitutionRef::get_mappings_from_generic_args): likewise\n+\t(SubstitutionRef::infer_substitions): likewise\n+\t(SubstitutionRef::are_mappings_bound): likewise\n+\t(SubstitutionRef::solve_missing_mappings_from_this): likewise\n+\t(SubstitutionRef::monomorphize): likewise\n+\t* typecheck/rust-tyty.h (class SubstitutionParamMapping): likewise\n+\t(class SubstitutionArg): likewise\n+\t(std::function<void): likewise\n+\t(class SubstitutionArgumentMappings): likewise\n+\t(class SubstitutionRef): likewise\n+\t* typecheck/rust-tyty-subst.cc: New file.\n+\t* typecheck/rust-tyty-subst.h: New file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* Make-lang.in: update makefile\n+\t* typecheck/rust-tyty.cc (TyVar::TyVar): move to new file\n+\t(TyVar::get_tyty): likewise\n+\t(TyVar::get_implicit_infer_var): likewise\n+\t(TyVar::subst_covariant_var): likewise\n+\t(TyVar::clone): likewise\n+\t(TyVar::monomorphized_clone): likewise\n+\t(TyWithLocation::TyWithLocation): likewise\n+\t* typecheck/rust-tyty.h (class BaseType): cleanup\n+\t(class TypeBoundPredicate): move to its own file\n+\t(class TypeBoundPredicateItem): likewise\n+\t(class TypeBoundsMappings): likewise\n+\t(class TyVar): likewise\n+\t(class TyWithLocation): likewise\n+\t* typecheck/rust-tyty-bounds.h: New file.\n+\t* typecheck/rust-tyty-util.cc: New file.\n+\t* typecheck/rust-tyty-util.h: New file.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* typecheck/rust-tyty-bounds.cc (TypeBoundPredicateItem::error): refactor\n+\t(TypeBoundPredicateItem::is_error): likewise\n+\t(TypeBoundPredicateItem::get_parent): likewise\n+\t* typecheck/rust-tyty.h: Move the implementation for the above\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-expr.cc (CompileExpr::visit): Removed copy-pasted comment.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* Make-lang.in: Add object files: `rust-feature.o` and `rust-feature-gate.o`\n+\t* checks/errors/rust-feature-gate.cc: New file.\n+\t* checks/errors/rust-feature-gate.h: New file.\n+\t* checks/errors/rust-feature.cc: New file.\n+\t* checks/errors/rust-feature.h: New file.\n+\t* rust-session-manager.cc: Add FeatureGate check.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_closure_expr): Advance tokens\n+\tproperly when parsing closure param list.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_generic_arg): Handle type\n+\tpaths and nested generics properly.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* ast/rust-pattern.h:\n+\t(ReferencePattern::is_double_reference): Add method.\n+\t(ReferencePattern::get_is_mut): Add method.\n+\t* hir/rust-ast-lower-pattern.cc\n+\t(ASTLoweringPattern::visit): Add ReferencePattern visitor.\n+\t* hir/rust-ast-lower-pattern.h:\n+\t(ASTLoweringPattern::visit): Add ReferencePattern visitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/tree/rust-hir-pattern.h\n+\t(class ReferencePattern): Remove has_two_amps field.\n+\t* hir/tree/rust-hir-full-test.cc\n+\t(ReferencePattern::as_string): Remove usage of ReferencePattern::has_two_amps.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-fnparam.h\n+\t(CompileFnParam::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-pattern.cc\n+\t(CompilePatternCaseLabelExpr::visit): Remove HIR::GroupedPattern visitor.\n+\t(CompilePatternBindings::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-pattern.h\n+\t(CompilePatternCaseLabelExpr::visit): Remove HIR::GroupedPattern visitor.\n+\t(CompilePatternBindings::visit): Remove HIR::GroupedPattern visitor.\n+\t(CompilePatternLet::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-resolve-path.h\n+\t(ResolvePathRef::visit): Remove HIR::GroupedPattern visitor.\n+\t* backend/rust-compile-var-decl.h\n+\t(CompileVarDecl::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-const-checker.cc\n+\t(ConstChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-const-checker.h\n+\t(ConstChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-unsafe-checker.cc\n+\t(UnsafeChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* checks/errors/rust-unsafe-checker.h\n+\t(UnsafeChecker::visit): Remove HIR::GroupedPattern visitor.\n+\t* hir/rust-hir-dump.cc (Dump::visit): Remove HIR::GroupedPattern visitor.\n+\t* hir/rust-hir-dump.h (Dump::visit): Remove HIR::GroupedPattern visitor.\n+\t* hir/tree/rust-hir-full-decls.h (class GroupedPattern): Remove class.\n+\t* hir/tree/rust-hir-full-test.cc (GroupedPattern::accept_vis): Remove method.\n+\t* hir/tree/rust-hir-pattern.h (class GroupedPattern): Remove class.\n+\t* hir/tree/rust-hir-visitor.h\n+\t(HIRFullVisitor::visit): Remove HIR::GroupedPattern visitor.\n+\t(HIRFullVisitorBase::visit): Remove HIR::GroupedPattern visitor.\n+\t(HIRPatternVisitor::visit): Remove HIR::GroupedPattern visitor.\n+\t* typecheck/rust-hir-type-check-pattern.cc\n+\t(TypeCheckPattern::visit): Remove HIR::GroupedPattern visitor.\n+\t* typecheck/rust-hir-type-check-pattern.h\n+\t(TypeCheckPattern::visit): Remove HIR::GroupedPattern visitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/rust-ast-lower-pattern.cc\n+\t(ASTLoweringPattern::visit): Lower AST::GroupedPattern to its inner pattern.\n+\n+2023-04-06  MAHAD  <mahadtxt@gmail.com>\n+\n+\t* rust-buffered-queue.h: Moved to...\n+\t* util/rust-buffered-queue.h: ...here.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_type): Handle double ampersan\n+\tproperly\n+\t(Parser::parse_reference_type): Call into `parse_reference_type_inner`\n+\tand wrap double reference types in another `AST::ReferenceType` node\n+\t(Parser::parse_reference_type_inner): Add parsing implementation\n+\twhich does not care about the leading token (& or  &&)\n+\t(Parser::parse_type_no_bounds): Handle double ampersand properly\n+\t* parse/rust-parse.h: Declare `parse_reference_type_inner`\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-pattern.cc (CompilePatternLet::visit): New function.\n+\t* backend/rust-compile-stmt.cc (CompileStmt::visit): Likewise.\n+\t* backend/rust-compile-pattern.h (class CompilePatternLet): New visitor.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* ast/rust-macro.h (enum class): Add `BuiltinMacro` enum class.\n+\t* expand/rust-attribute-visitor.cc (AttrVisitor::visit): Mention\n+\tswitching on `macro.kind` once builtin macro invocations are properly\n+\thandled.\n+\t* parse/rust-parse-impl.h (Parser::parse_macro_invocation): Switch to new MacroInvocation\n+\tAPI.\n+\t(Parser::parse_type): Likewise.\n+\t(Parser::parse_type_no_bounds): Likewise.\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* ast/rust-ast-dump.cc (Dump::visit): removed extra indentations in trait ast dump\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::null_denotation): Add proper error\n+\twhen seeing wildcard var on right side of assignment.\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* ast/rust-ast.cc: Fix include list.\n+\t* ast/rust-expr.h: Likewise.\n+\t* hir/tree/rust-hir-expr.h: Likewise.\n+\t* rust-backend.h: Likewise.\n+\t* util/rust-lang-item.h: Likewise.\n+\t* operator.h: Moved to...\n+\t* util/rust-operators.h: ...here.\n+\n+2023-04-06  Parthib  <parthibdutta02@gmail.com>\n+\n+\t* Make-lang.in: Rename object file.\n+\t* ast/rust-ast-full-test.cc: Moved to...\n+\t* ast/rust-ast.cc: ...here.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-pattern.cc (CompilePatternCaseLabelExpr::visit): Add proper\n+\tvisitor.\n+\t(CompilePatternBindings::visit): Likewise.\n+\t* backend/rust-compile-pattern.h: Declare them.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* typecheck/rust-hir-type-check-pattern.cc (TypeCheckPattern::visit): Add proper\n+\tvisitor.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/tree/rust-hir-pattern.h: Add get_item method.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* hir/rust-ast-lower-pattern.cc (ASTLoweringPattern::visit): Add proper visitor.\n+\t* hir/rust-ast-lower-pattern.h: Declare it.\n+\n+2023-04-06  Lyra  <teromene@teromene.fr>\n+\n+\t* expand/rust-macro-expand.cc (transcribe_expression): Fix ICE when expanding\n+\tempty macros.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* resolve/rust-ast-resolve-pattern.h: Support GroupedPattern properly.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* backend/rust-compile-base.cc (HIRCompileBase::compile_locals_for_block):\n+\tAllow patterns to declare zero or multiple variables.\n+\t* backend/rust-compile-var-decl.h: Change function declaration.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* lex/rust-lex.cc (Lexer::build_token): Make location enclose entire token.\n+\t(Lexer::parse_byte_char): Likewise.\n+\t(Lexer::parse_byte_string): Likewise.\n+\t(Lexer::parse_raw_byte_string): Likewise.\n+\t(Lexer::parse_raw_identifier): Likewise.\n+\t(Lexer::parse_string): Likewise.\n+\t(Lexer::parse_identifier_or_keyword): Likewise.\n+\t(Lexer::parse_raw_string): Likewise.\n+\t(Lexer::parse_non_decimal_int_literal): Likewise.\n+\t(Lexer::parse_decimal_int_or_float): Likewise.\n+\t(Lexer::parse_char_or_lifetime): Likewise.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* ast/rust-ast.h: Add get_locus method.\n+\t* ast/rust-expr.h: Likewise.\n+\t* ast/rust-macro.h: Likewise.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* typecheck/rust-hir-type-check-stmt.cc (TypeCheckStmt::visit): Cleanup LetStmt\n+\ttype checking.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* hir/tree/rust-hir-path.h: Add const get_identifier and get_type method.\n+\t* typecheck/rust-hir-path-probe.h: Use new SubstitutionArgumentMappings constructor.\n+\t* typecheck/rust-hir-trait-resolve.cc: Likewise.\n+\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): Likewise.\n+\t* typecheck/rust-tyty-bounds.cc (TypeCheckBase::get_predicate_from_bound):\n+\tDo not assert failure on size mismatch anymore.\n+\t(TypeBoundPredicate::TypeBoundPredicate): Use new SubstitutionArgumentMappings constructor.\n+\t(TypeBoundPredicate::operator=): Likewise.\n+\t(TypeBoundPredicate::apply_generic_arguments): Likewise.\n+\t(TypeBoundPredicateItem::get_tyty_for_receiver): Likewise.\n+\t(TypeBoundPredicate::get_num_associated_bindings): Likewise.\n+\t(TypeBoundPredicate::lookup_associated_type): Fix implementation for new system.\n+\t(TypeBoundPredicate::get_associated_type_items): Likewise.\n+\t* typecheck/rust-tyty.cc (SubstitutionRef::get_mappings_from_generic_args): Add new\n+\tbehavior.\n+\t(SubstitutionRef::infer_substitions): Use new constructor and add comment.\n+\t(SubstitutionRef::solve_missing_mappings_from_this): Use new constructor.\n+\t* typecheck/rust-tyty.h: Define new constructors.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* resolve/rust-ast-resolve-type.cc (ResolveGenericArgs::go): Add name resolution to\n+\tTrait items.\n+\n+2023-04-06  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* ast/rust-ast-full-decls.h (class MacroItem): Remove forward declaration.\n+\t* ast/rust-ast-full-test.cc (MacroRulesDefinition):\n+\tRework MacroRulesDefinition class\n+\t* ast/rust-ast.h (class MacroItem): Remove abstract class.\n+\t* ast/rust-item.h (class MacroItem): Remove forward declaration.\n+\t* ast/rust-macro.h (class MacroItem): Likewise.\n+\t(class MacroRulesDefinition): Add MacroKind enum.\n+\t(class MacroInvocation): Fix inheritance.\n+\t* lex/rust-token.h: Token \"macro\" is now used.\n+\t* parse/rust-parse-impl.h (Parser::parse_item): Add handling for MACRO.\n+\t(Parser::parse_vis_item): Call into parse_decl_macro_def.\n+\t(Parser::parse_macro_item): Delete function.\n+\t(Parser::parse_macro_rules_def): Return MBE macros only.\n+\t(Parser::parse_decl_macro_def): New function.\n+\t(Parser::parse_stmt): Handle MACRO token.\n+\t(Parser::parse_stmt_or_expr_without_block): Call into parse_macro_rules_def.\n+\t* parse/rust-parse.h: Declare new function.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* parse/rust-parse-impl.h (Parser::parse_generic_arg): Add proper bound parsing.\n+\n+2023-04-06  Dave  <dme2223@gmail.com>\n+\n+\t* checks/errors/rust-const-checker.cc (ConstChecker::visit): Use StackedContext\n+\tclass.\n+\n+2023-04-06  Prajwal S N  <prajwalnadig21@gmail.com>\n+\n+\t* checks/errors/rust-unsafe-checker.cc (check_target_attr): New function.\n+\t(UnsafeChecker::check_function_attr): Call into `check_target_attr`.\n+\t(UnsafeChecker::visit): Check for target_feature attributes.\n+\t* checks/errors/rust-unsafe-checker.h: Add declarations.\n+\t* util/rust-attributes.cc: Add attribute.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust-session-manager.cc (Session::compile_crate): Fix typo.\n+\n 2023-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* rust-lang.cc (grs_langhook_type_for_mode): Also consider all"}, {"sha": "ee75079917f8359dbb8bfa378a8a634894105b30", "filename": "gcc/simplify-rtx.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fsimplify-rtx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fsimplify-rtx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -3752,7 +3752,13 @@ simplify_context::simplify_binary_operation_1 (rtx_code code,\n \treturn op0;\n       if (HWI_COMPUTABLE_MODE_P (mode))\n \t{\n-\t  HOST_WIDE_INT nzop0 = nonzero_bits (trueop0, mode);\n+\t  /* When WORD_REGISTER_OPERATIONS is true, we need to know the\n+\t     nonzero bits in WORD_MODE rather than MODE.  */\n+\t  scalar_int_mode tmode = as_a <scalar_int_mode> (mode);\n+\t  if (WORD_REGISTER_OPERATIONS\n+\t      && GET_MODE_BITSIZE (tmode) < BITS_PER_WORD)\n+\t    tmode = word_mode;\n+\t  HOST_WIDE_INT nzop0 = nonzero_bits (trueop0, tmode);\n \t  HOST_WIDE_INT nzop1;\n \t  if (CONST_INT_P (trueop1))\n \t    {"}, {"sha": "0470509a98d2a4a9463444b248efafa0ff49906f", "filename": "gcc/symtab.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fsymtab.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Fsymtab.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -748,19 +748,21 @@ symtab_node::clone_reference (ipa_ref *ref, gimple *stmt)\n   return ref2;\n }\n \n-/* Find the structure describing a reference to REFERRED_NODE\n-   and associated with statement STMT.  */\n+/* Find the structure describing a reference to REFERRED_NODE of USE_TYPE and\n+   associated with statement STMT or LTO_STMT_UID.  */\n \n ipa_ref *\n symtab_node::find_reference (symtab_node *referred_node,\n-\t\t\t     gimple *stmt, unsigned int lto_stmt_uid)\n+\t\t\t     gimple *stmt, unsigned int lto_stmt_uid,\n+\t\t\t     enum ipa_ref_use use_type)\n {\n   ipa_ref *r = NULL;\n   int i;\n \n   for (i = 0; iterate_reference (i, r); i++)\n     if (r->referred == referred_node\n \t&& !r->speculative\n+\t&& r->use == use_type\n \t&& ((stmt && r->stmt == stmt)\n \t    || (lto_stmt_uid && r->lto_stmt_uid == lto_stmt_uid)\n \t    || (!stmt && !lto_stmt_uid && !r->stmt && !r->lto_stmt_uid)))"}, {"sha": "2cda0bfd4e4bbea0634485070f5296d68d0f6eaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 587, "deletions": 0, "changes": 587, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,590 @@\n+2023-04-16  Jeff Law  <jlaw@ventanamicro>\n+\n+\tPR target/109508\n+\t* gcc.target/riscv/pr109508.c: New test.\n+\n+2023-04-16  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/54816\n+\t* gcc.target/avr/pr54816.c: New test case.\n+\n+2023-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109357\n+\t* g++.dg/cpp2a/constexpr-dtor15.C: New test.\n+\n+2023-04-15  Alexandre Oliva  <oliva@adacore.com>\n+\t    Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/99708\n+\t* gcc.target/powerpc/pr99708.c: Accept lack of\n+\t__SIZEOF_IBM128__ when long double is 64-bit wide.\n+\n+2023-04-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109514\n+\t* g++.dg/warn/Wdangling-pointer-6.C: New test.\n+\n+2023-04-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/109511\n+\t* gfortran.dg/set_exponent_1.f90: New test.\n+\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-simd-clone-16e.c: Revert back to\n+\tchecking avx_runtime in dump scanning.\n+\t* gcc.dg/vect/vect-simd-clone-17e.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-18e.c: Likewise.\n+\n+2023-04-14  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/104272\n+\t* gfortran.dg/class_result_8.f90 : Number of builtin_frees down\n+\tfrom 6 to 5 without memory leaks.\n+\t* gfortran.dg/finalize_52.f90: New test\n+\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109502\n+\t* gcc.dg/vect/pr109502.c: New testcase.\n+\n+2023-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-simd-clone-16e.c: Fix x86 lp64 checking\n+\tand add missing avx guard.\n+\t* gcc.dg/vect/vect-simd-clone-17e.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-18e.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-16f.c: Fix x86 lp64 checking.\n+\t* gcc.dg/vect/vect-simd-clone-17f.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-18f.c: Likewise.\n+\n+2023-04-14  Jeff Law  <jlaw@ventanamicro.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108947\n+\tPR target/109040\n+\t* gcc.dg/pr108947.c: New test.\n+\t* gcc.c-torture/execute/pr109040.c: New test.\n+\n+2023-04-14  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR analyzer/108722\n+\t* gcc.dg/analyzer/file-CWE-1341-example.c: Update.\n+\n+2023-04-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/109420\n+\t* g++.dg/template/typename27.C: New test.\n+\n+2023-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/109277\n+\t* g++.dg/ext/is_convertible5.C: New test.\n+\n+2023-04-13  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109497\n+\tPR modula2/109496\n+\t* gm2/pim/run/pass/addcharconst.mod: New test.\n+\t* gm2/pim/run/pass/singlechar.mod: New test.\n+\n+2023-04-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/108910\n+\t* gcc.dg/torture/pr108910.c: New test.\n+\n+2023-04-12  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR target/109479\n+\t* gcc.target/riscv/rvv/base/pr109479-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/pr109479-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/pr109479-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/pr109479-4.c: New test.\n+\t* gcc.target/riscv/rvv/base/pr109479-5.c: New test.\n+\t* gcc.target/riscv/rvv/base/pr109479-6.c: New test.\n+\n+2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109410\n+\t* gcc.dg/pr109410.c: New test.\n+\n+2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/109458\n+\t* gcc.target/i386/pr109458.c: New test.\n+\n+2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109462\n+\t* g++.dg/opt/pr109462.C: New test.\n+\n+2023-04-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109462\n+\t* gcc.dg/uninit-pr101912.c: XFAIL the warning.\n+\n+2023-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109473\n+\t* gcc.dg/vect/pr109473.c: New testcase.\n+\n+2023-04-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104312\n+\t* gfortran.dg/entry_26.f90: New test.\n+\t* gfortran.dg/entry_27.f90: New test.\n+\n+2023-04-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/61615\n+\tPR fortran/99982\n+\t* gfortran.dg/interface_49.f90: New test.\n+\n+2023-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109469\n+\t* gcc.dg/torture/pr109469.c: New testcase.\n+\n+2023-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109434\n+\t* g++.dg/opt/pr109434.C: New testcase.\n+\n+2023-04-12  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/108815\n+\t* gcc.target/powerpc/pr83677.c (v_expand_u8, v_expand_u16,\n+\tv_load_deinterleave_f32, v_store_interleave_f32): Adjust some code by\n+\tconsidering BE.\n+\n+2023-04-11  Lin Sinan  <mynameisxiaou@gmail.com>\n+\n+\t* gcc.target/riscv/zbs-extra-bit-or-twobits.c: New test.\n+\n+2023-04-11  Yanzhang Wang  <yanzhang.wang@intel.com>\n+\t    Pan Li  <pan2.li@intel.com>\n+\t    Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/109104\n+\t* gcc.target/riscv/zero-scratch-regs-1.c: New test.\n+\t* gcc.target/riscv/zero-scratch-regs-2.c: New test.\n+\t* gcc.target/riscv/zero-scratch-regs-3.c: New test.\n+\n+2023-04-11  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/affinity-clause-1.f90: Update scan-tree pattern\n+\tfor -m32.\n+\n+2023-04-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/108241\n+\t* gcc.dg/pr108241.c: New test.\n+\t* gcc.dg/pr79570.c: Add also -g option.\n+\n+2023-04-11  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.dg/vect/vect-simd-clone-16.c: Make simd clone inbranch only.\n+\t* gcc.dg/vect/vect-simd-clone-17.c: Likewise.\n+\t* gcc.dg/vect/vect-simd-clone-18.c: Likewise.\n+\n+2023-04-11  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/108812\n+\t* gcc.target/powerpc/p9-sign_extend-runnable.c: Set corresponding\n+\texpected vectors for Big Endian.\n+\t* gcc.target/powerpc/int_128bit-runnable.c: Likewise.\n+\n+2023-04-10   Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/70243\n+\t* gcc.target/powerpc/pr70243.c: New test.\n+\n+2023-04-10  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mamx-complex.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/amx-check.h: Add cpu check for AMX-COMPLEX.\n+\t* gcc.target/i386/amx-helper.h: Add amx-complex support.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/sse-12.c: Add -mamx-complex.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Add amx-complex.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* lib/target-supports.exp (check_effective_target_amx_complex): New.\n+\t* gcc.target/i386/amxcomplex-asmatt-1.c: New test.\n+\t* gcc.target/i386/amxcomplex-asmintel-1.c: Ditto.\n+\t* gcc.target/i386/amxcomplex-cmmimfp16ps-2.c: Ditto.\n+\t* gcc.target/i386/amxcomplex-cmmrlfp16ps-2.c: Ditto.\n+\n+2023-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109392\n+\t* gcc.dg/pr109392.c: New test.\n+\n+2023-04-08  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* gcc.dg/pr84877.c: xfail on hppa*-*-*.\n+\n+2023-04-08  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* gcc.dg/long_branch.c: Use timeout factor 2.0 on hppa*-*-*.\n+\n+2023-04-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87477\n+\tPR fortran/85686\n+\tPR fortran/88247\n+\tPR fortran/91941\n+\tPR fortran/92779\n+\tPR fortran/93339\n+\tPR fortran/93813\n+\tPR fortran/100948\n+\tPR fortran/102106\n+\tPR fortran/98408\n+\tPR fortran/105205\n+\tPR fortran/106918\n+\t* gfortran.dg/associate_47.f90 : Enable substring test.\n+\t* gfortran.dg/associate_51.f90 : Update an error message.\n+\t* gfortran.dg/goacc/array-with-dt-2.f90 : Add span to\n+\tuninitialzed dg-warnings.\n+\t* gfortran.dg/associate_60.f90 : New test\n+\t* gfortran.dg/pr98408.f90 : New test\n+\t* gfortran.dg/pr105205.f90 : New test\n+\t* gfortran.dg/pr106918.f90 : New test\n+\n+2023-04-08   Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* gfortran.dg/c-interop/allocatable-optional-pointer.f90 : Fix\n+\tdg directive and remove trailing whitespace.\n+\t* gfortran.dg/c-interop/c407a-1.f90 : ditto\n+\t* gfortran.dg/c-interop/c407b-1.f90 : ditto\n+\t* gfortran.dg/c-interop/c407b-2.f90 : ditto\n+\t* gfortran.dg/c-interop/c407c-1.f90 : ditto\n+\t* gfortran.dg/c-interop/c535a-1.f90 : ditto\n+\t* gfortran.dg/c-interop/c535a-2.f90 : ditto\n+\t* gfortran.dg/c-interop/c535b-1.f90 : ditto\n+\t* gfortran.dg/c-interop/c535b-2.f90 : ditto\n+\t* gfortran.dg/c-interop/c535b-3.f90 : ditto\n+\t* gfortran.dg/c-interop/c535c-1.f90 : ditto\n+\t* gfortran.dg/c-interop/c535c-2.f90 : ditto\n+\t* gfortran.dg/c-interop/deferred-character-1.f90 : ditto\n+\t* gfortran.dg/c-interop/removed-restrictions-1.f90 : ditto\n+\t* gfortran.dg/c-interop/removed-restrictions-2.f90 : ditto\n+\t* gfortran.dg/c-interop/removed-restrictions-4.f90 : ditto\n+\t* gfortran.dg/c-interop/tkr.f90 : ditto\n+\t* gfortran.dg/class_result_10.f90 : ditto\n+\t* gfortran.dg/dtio_35.f90 : ditto\n+\t* gfortran.dg/gomp/affinity-clause-1.f90 : ditto\n+\t* gfortran.dg/pr103258.f90 : ditto\n+\t* gfortran.dg/pr59107.f90 : ditto\n+\t* gfortran.dg/pr93835.f08 : ditto\n+\n+2023-04-07  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.target/powerpc/ppc-fortran/ppc-fortran.exp: Test for\n+\tfortran compiler, skip if missing.\n+\n+2023-04-06  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c: Remove unused variables.\n+\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c: Remove unused variables.\n+\n+2023-04-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109417\n+\t* gcc.dg/pr109417.c: New.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/issue-1422.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1361.rs: New test.\n+\n+2023-04-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* rust/compile/issue-1830_bytes.rs: Fix up DejaGnu directives.\n+\t* rust/compile/issue-1830_str.rs: Likewise.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/empty.in: New test.\n+\t* rust/compile/include_empty.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/torture/traits10.rs: Fix test-case\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1725-1.rs: New test.\n+\t* rust/compile/issue-1725-2.rs: New test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/builtin_macro_include_str.rs:\n+\tInclude test of invalid UTF-8.\n+\t* rust/compile/invalid_utf8: File with invalid UTF-8.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/parse_empty_tuple_pattern.rs: New test.\n+\n+2023-04-06  Pierre-Emmanuel Patry  <pierre-emmanuel.patry@embecosm.com>\n+\n+\t* rust/compile/issue-1830_bytes.rs: New test.\n+\t* rust/compile/issue-1830_str.rs: New test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/compile/variadic.rs: New test.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/execute/torture/overflow1.rs: Fix test.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/const-issue1440.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/feature_intrinsics.rs: New file.\n+\t* rust/compile/issue-1031.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1130.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1131.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1237.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/issue-1289.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/rust-const-blog-issue.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-3.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-4.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-5.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-6.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/intrinsics-7.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/issue-1024.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/issue-1075.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/torture/issue-1432.rs: Add crate feature: `intrinsics`.\n+\t* rust/compile/unsafe10.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/atomic_load.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/atomic_store.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/copy_nonoverlapping1.rs: Add crate feature:\n+\t`intrinsics`.\n+\t* rust/execute/torture/issue-1120.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/issue-1133.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/issue-1232.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/slice-magic.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/slice-magic2.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/str-layout1.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/transmute1.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/wrapping_op1.rs: Add crate feature: `intrinsics`.\n+\t* rust/execute/torture/wrapping_op2.rs: Add crate feature: `intrinsics`.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/macro17.rs: Fix testsuite for new recursion errors.\n+\t* rust/compile/macro44.rs: Fix invalid testcase assertions.\n+\t* rust/compile/builtin_macro_recurse.rs: Fix invalid test.\n+\t* rust/compile/builtin_macro_recurse2.rs: New test.\n+\t* rust/compile/macro46.rs: New test.\n+\t* rust/compile/builtin_macro_eager1.rs: New file.\n+\t* rust/compile/builtin_macro_eager2.rs: New file.\n+\n+2023-04-06  Owen Avery  <powerboat9.gamer@gmail.com>\n+\n+\t* rust/execute/torture/let-pattern-1.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/torture/intrinsics-4.rs: implement Copy trait\n+\t* rust/compile/torture/intrinsics-5.rs: likewise\n+\t* rust/execute/torture/atomic_load.rs: likewise\n+\t* rust/execute/torture/atomic_store.rs: likewise\n+\t* rust/bounds1.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/func3.rs: update test case\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1786.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/never_type_err1.rs: Moved to...\n+\t* rust/compile/never_type1.rs: ...here. It now works\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/issue-1773.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/execute/torture/issue-1720-2.rs: New test.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/feature.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/closure_move_expr.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/parse_complex_generic_application.rs: New test.\n+\t* rust/compile/parse_complex_generic_application2.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/compile/multi_reference_type.rs: New test.\n+\n+2023-04-06  Abdul Rafey  <abdulrafeyq@gmail.com>\n+\n+\t* rust/compile/issue-867.rs: New test.\n+\n+2023-04-06  Lyra  <teromene@teromene.fr>\n+\n+\t* rust/compile/macro45.rs: New test.\n+\n+2023-04-06  Arthur Cohen  <arthur.cohen@embecosm.com>\n+\n+\t* rust/execute/torture/builtin_macro_cfg.rs: Handle carriage returns\n+\t\tproperly.\n+\t* rust/execute/torture/builtin_macro_concat.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_env.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_include_bytes.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_include_str.rs: Likewise.\n+\t* rust/execute/torture/builtin_macro_line.rs: Likewise.\n+\t* rust/execute/torture/builtin_macros1.rs: Likewise.\n+\t* rust/execute/torture/builtin_macros3.rs: Likewise.\n+\t* rust/execute/torture/cfg1.rs: Likewise.\n+\t* rust/execute/torture/cfg2.rs: Likewise.\n+\t* rust/execute/torture/cfg3.rs: Likewise.\n+\t* rust/execute/torture/cfg4.rs: Likewise.\n+\t* rust/execute/torture/coercion1.rs: Likewise.\n+\t* rust/execute/torture/coercion2.rs: Likewise.\n+\t* rust/execute/torture/extern_mod4.rs: Likewise.\n+\t* rust/execute/torture/helloworld1.rs: Likewise.\n+\t* rust/execute/torture/helloworld2.rs: Likewise.\n+\t* rust/execute/torture/issue-1198.rs: Likewise.\n+\t* rust/execute/torture/issue-1231.rs: Likewise.\n+\t* rust/execute/torture/issue-1232.rs: Likewise.\n+\t* rust/execute/torture/issue-1249.rs: Likewise.\n+\t* rust/execute/torture/issue-1436.rs: Likewise.\n+\t* rust/execute/torture/issue-1496.rs: Likewise.\n+\t* rust/execute/torture/issue-647.rs: Likewise.\n+\t* rust/execute/torture/issue-845.rs: Likewise.\n+\t* rust/execute/torture/issue-851.rs: Likewise.\n+\t* rust/execute/torture/issue-858.rs: Likewise.\n+\t* rust/execute/torture/issue-976.rs: Likewise.\n+\t* rust/execute/torture/macros10.rs: Likewise.\n+\t* rust/execute/torture/macros11.rs: Likewise.\n+\t* rust/execute/torture/macros12.rs: Likewise.\n+\t* rust/execute/torture/macros13.rs: Likewise.\n+\t* rust/execute/torture/macros14.rs: Likewise.\n+\t* rust/execute/torture/macros2.rs: Likewise.\n+\t* rust/execute/torture/macros22.rs: Likewise.\n+\t* rust/execute/torture/macros29.rs: Likewise.\n+\t* rust/execute/torture/macros3.rs: Likewise.\n+\t* rust/execute/torture/macros30.rs: Likewise.\n+\t* rust/execute/torture/macros31.rs: Likewise.\n+\t* rust/execute/torture/macros7.rs: Likewise.\n+\t* rust/execute/torture/macros8.rs: Likewise.\n+\t* rust/execute/torture/macros9.rs: Likewise.\n+\t* rust/execute/torture/match1.rs: Likewise.\n+\t* rust/execute/torture/match2.rs: Likewise.\n+\t* rust/execute/torture/match3.rs: Likewise.\n+\t* rust/execute/torture/match_bool1.rs: Likewise.\n+\t* rust/execute/torture/match_byte1.rs: Likewise.\n+\t* rust/execute/torture/match_char1.rs: Likewise.\n+\t* rust/execute/torture/match_int1.rs: Likewise.\n+\t* rust/execute/torture/match_loop1.rs: Likewise.\n+\t* rust/execute/torture/match_range1.rs: Likewise.\n+\t* rust/execute/torture/match_range2.rs: Likewise.\n+\t* rust/execute/torture/match_tuple1.rs: Likewise.\n+\t* rust/execute/torture/method1.rs: Likewise.\n+\t* rust/execute/torture/method2.rs: Likewise.\n+\t* rust/execute/torture/method3.rs: Likewise.\n+\t* rust/execute/torture/method4.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_1.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_10.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_11.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_12.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_2.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_4.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_5.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_6.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_7.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_8.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_9.rs: Likewise.\n+\t* rust/execute/torture/str-layout1.rs: Likewise.\n+\t* rust/execute/torture/str-zero.rs: Likewise.\n+\t* rust/execute/torture/trait1.rs: Likewise.\n+\t* rust/execute/torture/trait10.rs: Likewise.\n+\t* rust/execute/torture/trait11.rs: Likewise.\n+\t* rust/execute/torture/trait12.rs: Likewise.\n+\t* rust/execute/torture/trait13.rs: Likewise.\n+\t* rust/execute/torture/trait2.rs: Likewise.\n+\t* rust/execute/torture/trait3.rs: Likewise.\n+\t* rust/execute/torture/trait4.rs: Likewise.\n+\t* rust/execute/torture/trait5.rs: Likewise.\n+\t* rust/execute/torture/trait6.rs: Likewise.\n+\t* rust/execute/torture/trait7.rs: Likewise.\n+\t* rust/execute/torture/trait8.rs: Likewise.\n+\t* rust/execute/torture/trait9.rs: Likewise.\n+\t* rust/execute/torture/closure2.rs: Likewise.\n+\t* rust/execute/torture/closure3.rs: Likewise.\n+\t* rust/execute/torture/loop-condition-eval.rs: Likewise.\n+\t* rust/execute/torture/operator_overload_3.rs: Likewise.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/diagnostic_underline.rs: New test.\n+\n+2023-04-06  Philip Herron  <herron.philip@googlemail.com>\n+\n+\t* rust/compile/bounds.rs: change to use -fsyntax-only\n+\t* rust/execute/torture/issue-1720.rs: New test.\n+\n+2023-04-06  Raiki Tamura  <tamaron1203@gmail.com>\n+\n+\t* rust/compile/decl_macro1.rs: New test.\n+\t* rust/compile/decl_macro2.rs: New test.\n+\t* rust/compile/decl_macro3.rs: New test.\n+\t* rust/compile/decl_macro4.rs: New test.\n+\t* rust/compile/decl_macro5.rs: New test.\n+\t* rust/compile/decl_macro6.rs: New test.\n+\t* rust/compile/decl_macro7.rs: New test.\n+\t* rust/execute/torture/decl_macro1.rs: New test.\n+\t* rust/execute/torture/decl_macro2.rs: New test.\n+\t* rust/execute/torture/decl_macro3.rs: New test.\n+\t* rust/execute/torture/decl_macro4.rs: New test.\n+\n+2023-04-06  mxlol233  <mxlol233@outlook.com>\n+\n+\t* rust/compile/bounds.rs: New test.\n+\n+2023-04-06  Dave  <dme2223@gmail.com>\n+\n+\t* rust/compile/const10.rs: New test.\n+\n+2023-04-06  Prajwal S N  <prajwalnadig21@gmail.com>\n+\n+\t* rust/compile/unsafe11.rs: New test.\n+\n+2023-04-06  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/signbit-2.c: Add -maltivec if supported.\n+\n+2023-04-06  Alexandre Oliva  <oliva@adacore.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR testsuite/108899\n+\t* g++.dg/modules/modules.exp (unsupported): Drop renaming.\n+\tFix quoting.\n+\n 2023-04-05  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \tPR modula2/109423"}, {"sha": "d34c27eee45e7848e90c9c61821525ce4cb463a4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor15.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor15.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/109357\n+// { dg-do compile { target c++20 } }\n+// { dg-prune-output \"used but never defined\" }\n+\n+struct basic_string {\n+  char _M_local_buf;\n+  basic_string();\n+  constexpr basic_string(const char *) {}\n+  constexpr ~basic_string();\n+  constexpr basic_string& operator=(basic_string);\n+};\n+struct S1 {\n+  basic_string x;\n+  basic_string y;\n+} s1;\n+struct s2 {\n+  ~s2();\n+};\n+s2::~s2() { s1 = {\"\", \"\"}; }"}, {"sha": "ab9be05afea95dd74ad04035258f275aa0b04318", "filename": "gcc/testsuite/g++.dg/ext/is_convertible5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible5.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/109277\n+// { dg-do compile { target c++11 } }\n+// { dg-options -fpermissive }\n+\n+struct a;\n+struct b{};\n+static_assert (!__is_convertible (a, b), \"\"); // { dg-warning \"incomplete\" }"}, {"sha": "cffa327fd9b54856655e0fb55e2b4cd82dea7dd5", "filename": "gcc/testsuite/g++.dg/opt/pr109434.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109434.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109434.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109434.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++17 }\n+// { dg-options \"-O2 -Wall\" }\n+\n+#include <optional>\n+#include <stdexcept>\n+\n+std::optional<int> foo()\n+{\n+  volatile int x = 1;\n+  if (x)\n+    throw std::runtime_error(\"haha\");\n+  return 42;\n+}\n+\n+int main()\n+{\n+  std::optional<int> optInt;\n+  try {\n+      // We falsely DSEd the LHS of the call even though foo throws\n+      // which results in an uninitialized diagnostic\n+      optInt = foo();\n+  } catch (...) {\n+      return optInt.has_value();\n+  }\n+  std::optional<double> optDbl{optInt};\n+  return optDbl ? optDbl.value () : 2.0;\n+}"}, {"sha": "07ac7c5d4fb2d1834c7e06359c2ad8084874c2b9", "filename": "gcc/testsuite/g++.dg/opt/pr109462.C", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109462.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109462.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr109462.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,94 @@\n+// PR tree-optimization/109462\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O2\" }\n+\n+struct A {\n+  A (const char *);\n+  A (const char *, int);\n+  bool empty ();\n+  int size ();\n+  bool equals (A);\n+  A trim (char);\n+  A trim ();\n+};\n+[[gnu::noipa]] A::A (const char *) {}\n+[[gnu::noipa]] A::A (const char *, int) { __builtin_abort (); }\n+[[gnu::noipa]] bool A::empty () { __builtin_abort (); }\n+[[gnu::noipa]] int A::size () { __builtin_abort (); }\n+[[gnu::noipa]] bool A::equals (A) { return true; }\n+[[gnu::noipa]] A A::trim (char) { __builtin_abort (); }\n+[[gnu::noipa]] A A::trim () { __builtin_abort (); }\n+\n+enum B { raw_identifier = 6, l_paren = 21, r_paren = 22 };\n+[[gnu::noipa]] bool isAnyIdentifier (B) { return true; }\n+[[gnu::noipa]] bool isStringLiteral (B) { __builtin_abort (); }\n+\n+struct C {\n+  B c;\n+  B getKind () { return c; }\n+  bool is (B x) { return c == x; }\n+  unsigned getLength () { __builtin_abort (); }\n+  A getRawIdentifier () {\n+    A x (\"\");\n+    c == raw_identifier ? void () : __builtin_abort ();\n+    return x;\n+  }\n+  const char *getLiteralData ();\n+};\n+[[gnu::noipa]] const char *C::getLiteralData () { __builtin_abort (); }\n+\n+struct D {\n+  D ();\n+  bool LexFromRawLexer (C &);\n+};\n+[[gnu::noipa]] D::D () {}\n+[[gnu::noipa]] bool D::LexFromRawLexer (C &t) {\n+  static int cnt;\n+  C tok[] = { { raw_identifier }, { l_paren }, { raw_identifier }, { r_paren } };\n+  t = tok[cnt++];\n+  return false;\n+}\n+\n+bool ok = false;\n+[[gnu::noipa]] void reportEmptyContextError ()\n+{\n+  ok = true;\n+}\n+\n+[[gnu::noipa]] void\n+VisitObjCMessageExpr ()\n+{\n+  D TheLexer;\n+  C I;\n+  C Result;\n+  int p_count = 0;\n+  while (!TheLexer.LexFromRawLexer (I)) {\n+    if (I.getKind () == l_paren)\n+      ++p_count;\n+    if (I.getKind () == r_paren) {\n+      if (p_count == 1)\n+        break;\n+      --p_count;\n+    }\n+    Result = I;\n+  }\n+  if (isAnyIdentifier (Result.getKind ())) {\n+    if (Result.getRawIdentifier ().equals (\"nil\")) {\n+      reportEmptyContextError ();\n+      return;\n+    }\n+  }\n+  if (!isStringLiteral (Result.getKind ()))\n+    return;\n+  A Comment = A (Result.getLiteralData (), Result.getLength ()).trim ('\"');\n+  if ((Comment.trim ().size () == 0 && Comment.size () > 0) || Comment.empty ())\n+    reportEmptyContextError ();\n+}\n+\n+int\n+main ()\n+{\n+  VisitObjCMessageExpr ();\n+  if (!ok)\n+    __builtin_abort ();\n+}"}, {"sha": "6fe07e18fc6b9ce8f49c4a085f76d3ca733a2af4", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint -mamx-complex\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "55c8167730012fe2684cf2e0b447ab75a6d14a14", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint -mamx-complex\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "a560839cd5ba9c60315e70d7a20aec410815bc41", "filename": "gcc/testsuite/g++.dg/pr109524.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr109524.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr109524.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr109524.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O3 -fno-tree-forwprop -fnon-call-exceptions -fno-tree-ccp -fno-tree-fre\" }\n+\n+struct nn;\n+void f();\n+int *m;\n+struct _Guard {\n+        ~_Guard() {\n+          if (_M_guarded)\n+                  __builtin_unreachable();\n+        }\n+        nn *_M_guarded;\n+};\n+struct nn {\n+  int * _M_dataplus;\n+  nn(nn &)\n+        {\n+                f();\n+                _Guard   __guard;\n+                m = _M_dataplus;\n+        }\n+  nn(){}\n+};\n+  void hnn(nn *a)\n+        {\n+                f();\n+                _Guard   __guard;\n+                m = a->_M_dataplus;\n+        }\n+bool gg();\n+static inline nn\n+hh(nn str) {\n+  if (gg())\n+    return str;\n+  __builtin_unreachable();\n+}\n+void h() {\n+\n+  hh({});\n+}"}, {"sha": "61b3efd998eadcbe83d6027976aa157956e64f02", "filename": "gcc/testsuite/g++.dg/template/typename27.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename27.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/109420\n+\n+struct A {\n+  struct X { };\n+  int X;\n+};\n+\n+struct B {\n+  enum E { };\n+  enum F { E };\n+};\n+\n+template<class T, class U>\n+void f() {\n+  struct T::X x; // OK, lookup ignores the data member 'int A::X'\n+  enum U::E e;   // OK, lookup ignores the enumerator 'B::F::E'\n+}\n+\n+template void f<A, B>();"}, {"sha": "20d47edecc5f9b75f190ec88d04ca00673335a29", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-pointer-6.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-6.C?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/109514\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-O2 -Werror=dangling-pointer\" }\n+\n+struct _Rb_tree_node_base {\n+  _Rb_tree_node_base *_M_parent;\n+};\n+struct _Rb_tree_header {\n+  _Rb_tree_node_base _M_header;\n+  void _M_move_data() { _M_header._M_parent->_M_parent = &_M_header; }\n+};\n+struct _Rb_tree {\n+  _Rb_tree_header _M_impl;\n+  _Rb_tree_node_base *&_M_root() { return _M_impl._M_header._M_parent; }\n+  _Rb_tree();\n+  _Rb_tree &operator=(_Rb_tree &&);\n+};\n+_Rb_tree &_Rb_tree::operator=(_Rb_tree &&) {\n+  if (_M_root())\n+    _M_impl._M_move_data();\n+  return *this;\n+}\n+struct set {\n+  _Rb_tree _M_t;\n+};\n+set FilterRs();\n+void f() {\n+  set rs;\n+  rs = FilterRs();\n+};"}, {"sha": "b0dedd50e790dca0cb911210c45648451a9bd95c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr109040.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr109040.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr109040.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr109040.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/109040 */\n+\n+typedef unsigned short __attribute__((__vector_size__ (32))) V;\n+\n+unsigned short a, b, c, d;\n+\n+void\n+foo (V m, unsigned short *ret)\n+{\n+  V v = 6 > ((V) { 2124, 8 } & m);\n+  unsigned short uc = v[0] + a + b + c + d;\n+  *ret = uc;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned short x;\n+  foo ((V) { 0, 15 }, &x);\n+  if (x != (unsigned short) ~0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "9d125dfefe5f74943ab7660e219cfddd7a1f3c29", "filename": "gcc/testsuite/gcc.dg/analyzer/file-CWE-1341-example.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-CWE-1341-example.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-CWE-1341-example.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-CWE-1341-example.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -19,6 +19,9 @@\n \n    IN NO EVENT SHALL THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE MITRE CORPORATION, ITS BOARD OF TRUSTEES, OFFICERS, AGENTS, AND EMPLOYEES BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE INFORMATION OR THE USE OR OTHER DEALINGS IN THE CWE.  */\n \n+/* Checks double-fclose only, suppress CWE-415. (PR analyzer/108722).  */\n+/* { dg-additional-options -Wno-analyzer-double-free } */\n+\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>"}, {"sha": "c5d9e3d12c7b1c637a37d1f5f8e709495e9a7426", "filename": "gcc/testsuite/gcc.dg/ipa/pr109318.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr109318.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr109318.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr109318.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-early-inlining\" } */\n+\n+#pragma pack(1)\n+struct S {\n+  signed : 31;\n+  unsigned f4 : 20;\n+};\n+\n+static struct S global;\n+\n+static struct S func_16(struct S *ptr) { return *ptr; }\n+\n+int\n+main()\n+{\n+  struct S *local = &global;\n+  *local = func_16(local);\n+  return 0;\n+}"}, {"sha": "c1ac24f511662a8e91234d55f90a34973541d742", "filename": "gcc/testsuite/gcc.dg/long_branch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Flong_branch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Flong_branch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flong_branch.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -fno-reorder-blocks\" } */\n /* { dg-skip-if \"limited code space\" { pdp11-*-* } } */\n+/* { dg-timeout-factor 2.0 { target hppa*-*-* } } */\n \n void abort ();\n "}, {"sha": "7a49ea625232d2d86f45bd531d1646510b696a8b", "filename": "gcc/testsuite/gcc.dg/lto/pr107769_0.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr107769_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr107769_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr107769_0.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-lto-do run } */\n+/* { dg-lto-options { { -flto -O2 -finline-limit=150 } } } */\n+\n+[[gnu::noipa]]\n+void hjj (unsigned int lk)\n+{\n+    (void)lk;\n+}\n+void nn(int i, int n);\n+[[gnu::noinline]]\n+int ll(void) {\n+    return 1;\n+}\n+void hh(int* dest, int src)\n+{\n+    if (!ll() && !src)\n+        hjj(100);\n+    (*dest) = 1;\n+}\n+void gg(int* result, int x)\n+{\n+    if (x >= 0)\n+        return;\n+\n+    int xx;\n+    xx = *result;\n+    hh(result, ll());\n+    if (xx >= *result)\n+        nn(xx, *result);\n+}\n+void nn(int i, int n) {\n+    int T8_;\n+    if (n < 0)\n+        __builtin_exit(0);\n+    T8_ = 0;\n+    gg(&T8_, i);\n+    __builtin_exit(0);\n+}\n+void kk(int* x, int i) {\n+    hh(x, ll());\n+    if (i < 0 || i >= *x)\n+        nn(i,*x);\n+}\n+int g__r_1 = 0;\n+int main() {\n+    kk(&g__r_1, 0);\n+    return 0;\n+}"}, {"sha": "06d210fae681aac756a1a6a8a6ff27f6ca68e0e0", "filename": "gcc/testsuite/gcc.dg/pr108241.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108241.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108241.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108241.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,63 @@\n+/* PR driver/108241 */\n+/* { dg-options \"-Os -frounding-math -fvar-tracking-assignments -fno-dce -fno-trapping-math -fno-tree-dce -fno-tree-dse\" } */\n+\n+long int n1;\n+int n2, n3, n4;\n+char n5;\n+\n+void\n+foo (long int x1, long int x2, int x3, int x4, int x5, char x6, char x7)\n+{\n+  char a01 = n2, a02 = x4, a03 = 0;\n+  short int a04;\n+  unsigned short int a05 = x5;\n+  int a06, a07, a08 = a05, a09 = x3, a10 = 0;\n+  long int a11, a12 = x4;\n+\n+  if (x1)\n+    {\n+      a07 = x6 + (float)0x1000001;\n+      a03 = a12 = a01 = a06 = ~0;\n+\n+      if (x5)\n+\ta11 = n5;\n+    }\n+  else\n+    {\n+      a10 = x3 = n3;\n+      if (n3)\n+\ta06 = a05 = x7;\n+    }\n+\n+  if (n3 < n5)\n+    {\n+      n4 = (x2 == x4) + !n1;\n+      if (n4 % (n1 % x3))\n+\t{\n+\t  a04 = n4;\n+\t  a02 = n2;\n+\t}\n+\n+      if (x3)\n+\t{\n+\t  a05 = !n1 % n2;\n+\t  a08 = n1;\n+\t  a04 = x5 + a06;\n+\t}\n+\n+      if (a12)\n+\ta09 = n3 + n4;\n+\n+      a12 = a07;\n+      n3 = a11 % x1;\n+      n5 += x6;\n+      n1 = a04;\n+    }\n+\n+  n4 = x2 % x5 % a11;\n+  a06 = a10 + a08 % a02 == n4;\n+  a09 = a09 == a01 * x7;\n+  n4 = x4;\n+  a12 += x4 / 0xc000000000000000 + !a03;\n+  a03 = !a05;\n+}"}, {"sha": "2fe2f5c6e5762e8d26a497cee6c3148837223e40", "filename": "gcc/testsuite/gcc.dg/pr108947.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108947.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108947.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108947.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/108947 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-forward-propagate -Wno-psabi\" } */\n+\n+typedef unsigned short __attribute__((__vector_size__ (2 * sizeof (short)))) V;\n+\n+__attribute__((__noipa__)) V\n+foo (V v)\n+{\n+  V w = 3 > (v & 3992);\n+  return w;\n+}\n+\n+int\n+main ()\n+{\n+  V w = foo ((V) { 0, 9 });\n+  if (w[0] != 0xffff || w[1] != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e5bd9d440fa03e937467d640a6245430ed69039c", "filename": "gcc/testsuite/gcc.dg/pr109392.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109392.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109392.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109392.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/109392 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-psabi\" } */\n+\n+typedef short __attribute__ ((__vector_size__ (64))) V;\n+V v, w;\n+void bar (void) __attribute__((returns_twice));\n+\n+V\n+foo (V a, V b)\n+{\n+  bar ();\n+  b &= v < b;\n+  return (V) { foo (b, w)[3], (V) {}[3] };\n+}"}, {"sha": "a6401fc100cad8f4f19d7f4481982a1ff9d4760b", "filename": "gcc/testsuite/gcc.dg/pr109410.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109410.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109410.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109410.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/109410 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+__attribute__((returns_twice)) int baz (int, int);\n+\n+int\n+bar (int x)\n+{\n+  return x;\n+}\n+\n+int\n+foo (int x, int y)\n+{\n+  baz (x, y);\n+  int a = bar (x);\n+  return y || a == 42 || a > 42;\n+}"}, {"sha": "15711dbbafe82d61b0c5c10989613358fe26db97", "filename": "gcc/testsuite/gcc.dg/pr109417.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109417.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int printf(const char *, ...);\n+int c, d, *e, f[1][2], g;\n+int main() {\n+  int h = 0, *a = &h, **b[1] = {&a};\n+  while (e)\n+    while (g) {\n+    L:\n+      for (h = 0; h < 2; h++) {\n+        while (d)\n+          for (*e = 0; *e < 1;)\n+            printf(\"0\");\n+        while (c)\n+          ;\n+        f[g][h] = 0;\n+      }\n+    }\n+  if (h)\n+    goto L;\n+  return 0;\n+}\n+"}, {"sha": "a15be9f201d3494c5f3db037df9413d8601fa762", "filename": "gcc/testsuite/gcc.dg/pr79570.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79570.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,6 +1,6 @@\n /* PR target/79570 */\n /* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -fselective-scheduling2 -fvar-tracking-assignments\" } */\n+/* { dg-options \"-O2 -fselective-scheduling2 -fvar-tracking-assignments -g\" } */\n /* { dg-warning \"changes selective scheduling\" \"\" { target *-*-* } 0 } */\n \n #include \"pr69956.c\""}, {"sha": "d1fb84763c86e5c49d36dc5a5ff22dfd01d0da5c", "filename": "gcc/testsuite/gcc.dg/pr84877.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84877.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84877.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84877.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { xfail { cris-*-* sparc*-*-* } } } */\n+/* { dg-do run { xfail { cris-*-* hppa*-*-* sparc*-*-* } } } */\n /* { dg-options \"-O2\" } */\n \n #include <inttypes.h>"}, {"sha": "59735488c2eceb3456cf70f2d42ed326d211e28e", "filename": "gcc/testsuite/gcc.dg/torture/pr108910.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108910.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108910.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108910.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,8 @@\n+extern void foo (float, float *, float *);\n+\n+void\n+bar (void *p)\n+{\n+  float *__attribute__((aligned (64))) q = __builtin_assume_aligned (p, 64);\n+  foo (0.0f, q, q);\n+}"}, {"sha": "d05a93b67833b9802c90e16a9670c530b0ec1620", "filename": "gcc/testsuite/gcc.dg/torture/pr109469.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109469.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109469.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109469.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+__attribute__((returns_twice)) int foo();\n+\n+struct xio myproc;\n+struct xio {\n+  void (*read_proc)();\n+  void (*write_proc)();\n+};\n+\n+void dummy_write_proc() {\n+  switch (foo())\n+  default:\n+    myproc.read_proc = myproc.write_proc = dummy_write_proc;\n+}"}, {"sha": "62cd2a0c73e1fc42aea59e773d877e52204ad917", "filename": "gcc/testsuite/gcc.dg/uninit-pr101912.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101912.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101912.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101912.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -11,7 +11,7 @@ tzloadbody (void)\n   for (int i = 0; i < n; i++)\n     {\n       int corr = getint ();\n-      if (corr < 1 || (corr == 1 && !(leapcnt == 0 || (prevcorr < corr ? corr == prevcorr + 1 : (corr == prevcorr || corr == prevcorr - 1))))) /* { dg-bogus \"uninitialized\" } */\n+      if (corr < 1 || (corr == 1 && !(leapcnt == 0 || (prevcorr < corr ? corr == prevcorr + 1 : (corr == prevcorr || corr == prevcorr - 1))))) /* { dg-bogus \"uninitialized\" \"pr101912\" { xfail *-*-* } } */\n \treturn -1;\n \n       prevcorr = corr;"}, {"sha": "9dee5515dc665e2d32baec8c503178216ab15cbd", "filename": "gcc/testsuite/gcc.dg/vect/pr109473.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr109473.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr109473.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr109473.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O\" } */\n+\n+struct spa_buffer {\n+  __UINT32_TYPE__ *metas;\n+};\n+void do_port_use_buffers(struct spa_buffer **buffers, void *endptr, void *mem)\n+{\n+  for (int i = 0; i < 128; i++)\n+    {\n+      for (int j = 0; j < 128; j++)\n+\tendptr = (void *)((__UINTPTR_TYPE__)endptr + buffers[i]->metas[j]);\n+      if (endptr > mem)\n+\treturn;\n+    }\n+}"}, {"sha": "970c63e931b64e654cac3aa4a0f18c842d17b5a8", "filename": "gcc/testsuite/gcc.dg/vect/pr109502.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr109502.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr109502.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr109502.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O\" } */\n+\n+unsigned g;\n+\n+unsigned\n+foo (void)\n+{\n+  unsigned a = !g;\n+  a += !(a % 6);\n+  return a;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned x = foo ();\n+  if (x != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "125ff4f6c8d7df5e289187e523d32e0d12db9769", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -9,7 +9,7 @@\n #endif\n \n /* A simple function that will be cloned.  */\n-#pragma omp declare simd\n+#pragma omp declare simd inbranch\n TYPE __attribute__((noinline))\n foo (TYPE a)\n {"}, {"sha": "f80b0e0581e3506945e1aed41fee3340a8666df0", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16e.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16e.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -8,9 +8,9 @@\n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use another call for the epilogue loops.\n    Some targets use pairs of vectors and do twice the calls.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { { ! avx_runtime } && { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "574698d3e133ecb8700e698fa42a6b05dd6b8a18", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-16f.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-16f.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,14 +1,15 @@\n /* { dg-require-effective-target vect_simd_clones } */\n /* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+/* { dg-additional-options \"-mno-avx512f\" { target { { i?86*-*-* x86_64-*-* } && { ! lp64 } } } } */\n \n #define TYPE __INT64_TYPE__\n #include \"vect-simd-clone-16.c\"\n \n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use pairs of vectors and do twice the calls.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { i686*-*-* && { ! lp64 } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { { i?86*-*-* x86_64-*-* } && { ! lp64 } } } } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "3430d6f5aa4f3ae3ed8bdfda80ef99d5517f15c6", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -9,7 +9,7 @@\n #endif\n \n /* A simple function that will be cloned.  */\n-#pragma omp declare simd uniform(b)\n+#pragma omp declare simd inbranch uniform(b)\n TYPE __attribute__((noinline))\n foo (TYPE a, TYPE b)\n {"}, {"sha": "c7c510b8a6abdaef9c7488aedd2cecf0f84c33ee", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17e.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17e.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -8,9 +8,9 @@\n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use another call for the epilogue loops.\n    Some targets use pairs of vectors and do twice the calls.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { { ! avx_runtime } && { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "8bb6d19301a67a3eebce522daaf7d54d88f708d7", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-17f.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-17f.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,14 +1,15 @@\n /* { dg-require-effective-target vect_simd_clones } */\n /* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+/* { dg-additional-options \"-mno-avx512f\" { target { { i?86*-*-* x86_64-*-* } && { ! lp64 } } } } */\n \n #define TYPE __INT64_TYPE__\n #include \"vect-simd-clone-17.c\"\n \n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use pairs of vectors and do twice the calls.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { i686*-*-* && { ! lp64 } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { { i?86*-*-* x86_64-*-* } && { ! lp64 } } } } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "5324aee29c3173826057288d1604b5fe6de83c1e", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -9,7 +9,7 @@\n #endif\n \n /* A simple function that will be cloned.  */\n-#pragma omp declare simd uniform(b)\n+#pragma omp declare simd inbranch uniform(b)\n TYPE __attribute__((noinline))\n foo (TYPE b, TYPE a)\n {"}, {"sha": "e00c3d78038bf26b92520432c1f1cdf09fd95dee", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18e.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18e.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -8,9 +8,9 @@\n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use another call for the epilogue loops.\n    Some targets use pairs of vectors and do twice the calls.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { i686*-*-* && { ! lp64 } } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { { ! avx_runtime } && { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 3 \"vect\" { target { avx_runtime && { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { { ! avx_runtime } && { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "d34f23f4db8e9c237558cc22fe66b7e02b9e6c20", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-clone-18f.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-clone-18f.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,14 +1,15 @@\n /* { dg-require-effective-target vect_simd_clones } */\n /* { dg-additional-options \"-fopenmp-simd --param vect-epilogues-nomask=0\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+/* { dg-additional-options \"-mno-avx512f\" { target { { i?86*-*-* x86_64-*-* } && { ! lp64 } } } } */\n \n #define TYPE __INT64_TYPE__\n #include \"vect-simd-clone-18.c\"\n \n /* Ensure the the in-branch simd clones are used on targets that support them.\n    Some targets use pairs of vectors and do twice the calls.  */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { i686*-*-* && { ! lp64 } } } } } } */\n-/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { i686*-*-* && { ! lp64 } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 2 \"vect\" { target { ! { { i?86-*-* x86_64-*-* } && { ! lp64 } } } } } } */\n+/* { dg-final { scan-tree-dump-times {[\\n\\r] [^\\n]* = foo\\.simdclone} 4 \"vect\" { target { { i?86*-*-* x86_64-*-* } && { ! lp64 } } } } } */\n \n /* The LTO test produces two dump files and we scan the wrong one.  */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */"}, {"sha": "bc871f4481d1706fb2fe852602adf56b41499a98", "filename": "gcc/testsuite/gcc.target/aarch64/ampere1-no_ldp_combine.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fampere1-no_ldp_combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fampere1-no_ldp_combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fampere1-no_ldp_combine.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-O3 -mtune=ampere1\" } */\n+\n+long\n+foo (long a[])\n+{\n+  return a[0] + a[1];\n+}\n+\n+/* We should see two ldrs instead of one ldp. */\n+/* { dg-final { scan-assembler {\\tldr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tldp\\t} } } */"}, {"sha": "a2787a47859a8bc6ca9df5a367b7c1bd8fa6bea6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-fp.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -19,15 +19,6 @@ int16_t i6;\n int32_t i7;\n int64_t i8;\n \n-const int ci1;\n-const short ci2;\n-const long ci3;\n-const long long ci4;\n-const int8_t ci5;\n-const int16_t ci6;\n-const int32_t ci7;\n-const int64_t ci8;\n-\n float16x8_t floatvec;\n int16x8_t intvec;\n "}, {"sha": "7b88f462e17ea9b2d45179a39f86307a72ab642a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-int.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -13,15 +13,6 @@ int16_t i6;\n int32_t i7;\n int64_t i8;\n \n-const int ci1;\n-const short ci2;\n-const long ci3;\n-const long long ci4;\n-const int8_t ci5;\n-const int16_t ci6;\n-const int32_t ci7;\n-const int64_t ci8;\n-\n int16x8_t intvec;\n \n void test(void)"}, {"sha": "56be78040ce1c4f2798c7a19456d61b05e448d67", "filename": "gcc/testsuite/gcc.target/avr/pr54816.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr54816.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr54816.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr54816.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mmcu=atmega8\" } */\n+int wmul (char a, char b)\n+{\n+    return a * (char) (b << 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"lsl\" 3 } } */\n+/* { dg-final { scan-assembler-times \"muls\" 1 } } */"}, {"sha": "f1a04cf1f3c64964db59b26b1db4320bde93235b", "filename": "gcc/testsuite/gcc.target/i386/amx-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -216,6 +216,9 @@ main ()\n #ifdef AMX_FP16\n       && __builtin_cpu_supports (\"amx-fp16\")\n #endif\n+#ifdef AMX_COMPLEX\n+      && __builtin_cpu_supports (\"amx-complex\")\n+#endif\n #ifdef __linux__\n       && request_perm_xtile_data ()\n #endif"}, {"sha": "6ed9f5eb30e3164c6e3c85f3d9ba1288e51adaa7", "filename": "gcc/testsuite/gcc.target/i386/amx-helper.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,6 +1,6 @@\n #ifndef AMX_HELPER_H_INCLUDED\n #define AMX_HELPER_H_INCLUDED\n-#if defined(AMX_FP16)\n+#if defined(AMX_FP16) || defined(AMX_COMPLEX)\n #include <immintrin.h>\n #include <xmmintrin.h>\n #endif\n@@ -12,7 +12,7 @@ typedef union\n   uint16_t u;\n } union16f_uw;\n \n-#if defined(AMX_FP16)\n+#if defined(AMX_FP16) || defined(AMX_COMPLEX)\n /* Transformation functions between fp16/float */\n static uint16_t make_f32_fp16 (float f)\n {"}, {"sha": "b6745e34b8b8c95144d012af03d278df7eafc486", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-asmatt-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmatt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmatt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmatt-1.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-complex\" } */\n+/* { dg-final { scan-assembler \"tcmmimfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+/* { dg-final { scan-assembler \"tcmmrlfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+#include <immintrin.h>\n+\n+#define TMM1 1\n+#define TMM2 2\n+#define TMM3 3\n+\n+void TEST()\n+{\n+  _tile_cmmimfp16ps (TMM1, TMM2, TMM3);\n+  _tile_cmmrlfp16ps (TMM1, TMM2, TMM3);\n+}"}, {"sha": "305465e88607a731967e99aae532e10a00144505", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-asmintel-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmintel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmintel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmintel-1.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-O2 -mamx-complex -masm=intel\" } */\n+/* { dg-final { scan-assembler \"tcmmimfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+/* { dg-final { scan-assembler \"tcmmrlfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+#include <immintrin.h>\n+\n+void TEST()\n+{\n+  _tile_cmmimfp16ps (1, 2, 3);\n+  _tile_cmmrlfp16ps (1, 2, 3);\n+}"}, {"sha": "6e3762c9f6f4059479e82fb00a88fc47a5eb8414", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-cmmimfp16ps-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmimfp16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmimfp16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmimfp16ps-2.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target amx_complex } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-O2 -mamx-complex -mavx512fp16\" } */\n+#define AMX_COMPLEX\n+#define DO_TEST test_amx_complex_cmmimfp16ps\n+void test_amx_complex_cmmimfp16ps ();\n+#include \"amx-helper.h\"\n+\n+void calc_matrix_cmmimfp16ps (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint16_t *src1_buf = (uint16_t *) src1->buf;\n+  uint16_t *src2_buf = (uint16_t *) src2->buf;\n+  float *dst_buf = (float *) dst->buf;\n+  \n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 2; t+=2)\n+\t  dst_buf[i * N + k] +=\n+\t  (make_fp16_f32(src1_buf[i * 2 * N + 2 * j + t]) *\n+\t    make_fp16_f32(src2_buf[j * 2 * K + 2 * k + t + 1])) +\n+\t  (make_fp16_f32(src1_buf[i * 2 * N + 2 * j + t + 1]) *\n+\t    make_fp16_f32(src2_buf[j * 2 * K + 2 * k + t]));\n+}\n+\n+void test_amx_complex_cmmimfp16ps ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024], tmp_dst_zero_buf[1024];\n+\n+  init_fp16_max_tile_buffer (tmp_dst_buf);\n+  init_fp16_max_tile_zero_buffer (tmp_dst_zero_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_zero_buf);\n+  init_tile_reg_and_src_with_buffer (2, src1, tmp_dst_buf);\n+  init_tile_reg_and_src_with_buffer (3, src2, tmp_dst_buf);\n+\n+  calc_matrix_cmmimfp16ps (&dst, &src1, &src2);\n+  \n+  _tile_cmmimfp16ps (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+\n+  if (!check_tile_register (&dst_ref, &dst))\n+        abort ();\n+}"}, {"sha": "15940708a0288f086b81ac337bc9ea9e8a12cf69", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-cmmrlfp16ps-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmrlfp16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmrlfp16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmrlfp16ps-2.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target amx_complex } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-O2 -mamx-complex -mavx512fp16\" } */\n+#define AMX_COMPLEX\n+#define DO_TEST test_amx_complex_cmmrlfp16ps\n+void test_amx_complex_cmmrlfp16ps();\n+#include \"amx-helper.h\"\n+\n+void calc_matrix_cmmrlfp16ps (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint16_t *src1_buf = (uint16_t *) src1->buf;\n+  uint16_t *src2_buf = (uint16_t *) src2->buf;\n+  float *dst_buf = (float *) dst->buf;\n+  \n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 2; t+=2)\n+\t  dst_buf[i * N + k] += \n+\t    (make_fp16_f32 (src1_buf[i * 2 * N + 2 * j + t]) *\n+\t      make_fp16_f32 (src2_buf[j * 2 * K + 2 * k + t])) -\n+\t    (make_fp16_f32 (src1_buf[i * 2 * N + 2 * j + t + 1]) *\n+\t      make_fp16_f32 (src2_buf[j * 2 * K + 2 * k + t + 1]));\n+}\n+\n+void test_amx_complex_cmmrlfp16ps ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024], tmp_dst_zero_buf[1024];\n+\n+  init_fp16_max_tile_buffer (tmp_dst_buf);\n+  init_fp16_max_tile_zero_buffer (tmp_dst_zero_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_zero_buf);\n+  init_tile_reg_and_src_with_buffer (2, src1, tmp_dst_buf);\n+  init_tile_reg_and_src_with_buffer (3, src2, tmp_dst_buf);\n+\n+  calc_matrix_cmmrlfp16ps (&dst, &src1, &src2);\n+  \n+  _tile_cmmrlfp16ps (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+\n+  if (!check_tile_register (&dst_ref, &dst))\n+        abort ();\n+}"}, {"sha": "cf2899f9c32c02d3481ce5aad05d4216acaaa35a", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -87,6 +87,7 @@ extern void test_cmpccxadd (void)\t\t__attribute__((__target__(\"cmpccxadd\")));\n extern void test_amx_fp16 (void)\t\t__attribute__((__target__(\"amx-fp16\")));\n extern void test_prefetchi (void)               __attribute__((__target__(\"prefetchi\")));\n extern void test_raoint (void)                  __attribute__((__target__(\"raoint\")));\n+extern void test_amx_complex (void)\t\t__attribute__((__target__(\"amx-complex\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -175,6 +176,7 @@ extern void test_no_cmpccxadd (void)            __attribute__((__target__(\"no-cm\n extern void test_no_amx_fp16 (void)\t\t__attribute__((__target__(\"no-amx-fp16\")));\n extern void test_no_prefetchi (void)            __attribute__((__target__(\"no-prefetchi\")));\n extern void test_no_raoint (void)               __attribute__((__target__(\"no-raoint\")));\n+extern void test_no_amx_complex (void)\t\t__attribute__((__target__(\"no-amx-complex\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "abd0ed222112cba18b7c64b85e92842c1194a49a", "filename": "gcc/testsuite/gcc.target/i386/pr109458.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109458.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109458.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109458.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/109458 */\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2\" } */\n+\n+void\n+foo (_Float16 x)\n+{\n+  asm volatile (\"# %z0\" : : \"i\" (42));\t/* { dg-error \"invalid 'asm': invalid operand type used with operand code 'z'\" } */\n+  asm volatile (\"# %Z0\" : : \"i\" (42));\t/* { dg-error \"invalid 'asm': invalid operand type used with operand code 'Z'\" } */\n+  asm volatile (\"# %z0\" : : \"x\" (x));\t/* { dg-error \"invalid 'asm': invalid operand size for operand code 'z'\" } */\n+\t\t\t\t\t/* { dg-warning \"non-integer operand used with operand code 'z'\" \"\" { target *-*-* } .-1 } */\n+  asm volatile (\"# %Z0\" : : \"x\" (x));\t/* { dg-error \"invalid 'asm': invalid operand size for operand code 'Z'\" } */\n+}"}, {"sha": "ae4ffd1975f88013bc7d473e0bed4983eee07f28", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint -mamx-complex\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "f046a68ddbb57a92d1bceb634e2fd458f7207af8", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint -mamx-complex\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "05322f7e9146ed1eb2d42bbfc9f12fbc299aa1e2", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint -mamx-complex\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "53c38b702416e922e547769909cfb01e8dd36a35", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint,amx-complex\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint,amx-complex\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "50bf85a33921db16132cd2f8950da3739594d362", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -847,6 +847,6 @@\n #define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n #define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16,prefetchi,raoint\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16,prefetchi,raoint,amx-complex\")\n \n #include <x86intrin.h>"}, {"sha": "1a5f1d6383abb0dac8f484680fd8d2fcfd54a634", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-5-p9-runnable.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -78,8 +78,13 @@ int main() {\n    size = 8;\n    vec_uc_result1 = vec_xl_len_r(data_uc, size);\n \n+#ifdef __LITTLE_ENDIAN__\n    vec_uc_expected1 = (vector unsigned char){8, 7, 6, 5, 4, 3, 2, 1,\n \t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,};\n+#else\n+   vec_uc_expected1 = (vector unsigned char){0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     1, 2, 3, 4, 5, 6, 7, 8,};\n+#endif\n    \n    if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n@@ -107,8 +112,13 @@ int main() {\n    size = 4;\n    vec_uc_result1 = vec_xl_len_r(data_uc, size);\n \n+#ifdef __LITTLE_ENDIAN__\n    vec_uc_expected1 = (vector unsigned char){ 4, 3, 2, 1, 0, 0, 0, 0,\n                                               0, 0, 0, 0, 0, 0, 0, 0 };\n+#else\n+   vec_uc_expected1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0,\n+                                              0, 0, 0, 0, 1, 2, 3, 4 };\n+#endif\n    \n    if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n@@ -135,8 +145,13 @@ int main() {\n    size = 2;\n    vec_uc_result1 = vec_xl_len_r(data_uc, size);\n \n+#ifdef __LITTLE_ENDIAN__\n    vec_uc_expected1 = (vector unsigned char){ 2, 1, 0, 0, 0, 0, 0, 0,\n                                               0, 0, 0, 0, 0, 0, 0, 0 };\n+#else\n+   vec_uc_expected1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0,\n+                                              0, 0, 0, 0, 0, 0, 1, 2 };\n+#endif\n    \n    if (result_wrong (vec_uc_expected1, vec_uc_result1))\n      {\n@@ -231,8 +246,13 @@ int main() {\n      }\n \n    /* VEC_XST_LEN_R */\n+#ifdef __LITTLE_ENDIAN__\n    vec_uc_expected1 = (vector unsigned char){ 16, 15, 14, 13, 12, 11, 10, 9,\n \t\t\t\t\t      8, 7, 6, 5, 4, 3, 2, 1 };\n+#else\n+   vec_uc_expected1 = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t      9, 10, 11, 12, 13, 14, 15, 16 };\n+#endif\n    store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n    vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -265,8 +285,13 @@ int main() {\n #endif\n      }\n \n+#ifdef __LITTLE_ENDIAN__\n    vec_uc_expected1 = (vector unsigned char){ 2, 1, 0, 0, 0, 0, 0, 0,\n                                               0, 0, 0, 0, 0, 0, 0, 0 };\n+#else\n+   vec_uc_expected1 = (vector unsigned char){ 15, 16, 0, 0, 0, 0, 0, 0,\n+                                              0, 0, 0, 0, 0, 0, 0, 0 };\n+#endif\n    store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n    vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0, \n@@ -299,8 +324,13 @@ int main() {\n #endif\n      }\n \n+#ifdef __LITTLE_ENDIAN__\n    vec_uc_expected1 = (vector unsigned char){ 16, 15, 14, 13, 12, 11, 10, 9,\n                                               8, 7, 6, 5, 4, 3, 2, 1 };\n+#else\n+   vec_uc_expected1 = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t      9, 10, 11, 12, 13, 14, 15, 16 };\n+#endif\n    store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n    vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0, \n@@ -333,8 +363,13 @@ int main() {\n #endif\n      }\n \n+#ifdef __LITTLE_ENDIAN__\n    vec_uc_expected1 = (vector unsigned char){ 14, 13, 12, 11, 10, 9, 8, 7,\n                                               6, 5, 4, 3, 2, 1, 0, 0 };\n+#else\n+   vec_uc_expected1 = (vector unsigned char){ 3, 4, 5, 6, 7, 8, 9, 10,\n+                                              11, 12, 13, 14, 15, 16, 0, 0 };\n+#endif\n    store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n    vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0, "}, {"sha": "68217c62325089d1a0d23882e59eb52a9fca7aa8", "filename": "gcc/testsuite/gcc.target/powerpc/int_128bit-runnable.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -90,7 +90,11 @@ int main ()\n   vec_arg1_di[0] = 1000;\n   vec_arg1_di[1] = -123456;\n \n+#ifdef __BIG_ENDIAN__\n+  expected_result = -123456;\n+#else\n   expected_result = 1000;\n+#endif\n \n   vec_result = vec_signextq (vec_arg1_di);\n \n@@ -109,7 +113,11 @@ int main ()\n   vec_arg1_di[0] = -123456;\n   vec_arg1_di[1] = 1000;\n \n+#ifdef __BIG_ENDIAN__\n+  expected_result = 1000;\n+#else\n   expected_result = -123456;\n+#endif\n \n   vec_result = vec_signextq (vec_arg1_di);\n "}, {"sha": "03c0f1201e43e3dc22d37291d346a038f0f5dbaf", "filename": "gcc/testsuite/gcc.target/powerpc/p9-sign_extend-runnable.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -34,7 +34,12 @@ int main ()\n   /* test sign extend byte to word */\n   vec_arg_qi = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t     -1, -2, -3, -4, -5, -6, -7, -8};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_wi = (vector signed int) {4, 8, -4, -8};\n+#else\n   vec_expected_wi = (vector signed int) {1, 5, -1, -5};\n+#endif\n \n   vec_result_wi = vec_signexti (vec_arg_qi);\n \n@@ -54,7 +59,12 @@ int main ()\n   /* test sign extend byte to double */\n   vec_arg_qi = (vector signed char){1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t    -1, -2, -3, -4, -5, -6, -7, -8};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_di = (vector signed long long int){8, -8};\n+#else\n   vec_expected_di = (vector signed long long int){1, -1};\n+#endif\n \n   vec_result_di = vec_signextll(vec_arg_qi);\n \n@@ -72,7 +82,12 @@ int main ()\n \n   /* test sign extend short to word */\n   vec_arg_hi = (vector signed short int){1, 2, 3, 4, -1, -2, -3, -4};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_wi = (vector signed int){2, 4, -2, -4};\n+#else\n   vec_expected_wi = (vector signed int){1, 3, -1, -3};\n+#endif\n \n   vec_result_wi = vec_signexti(vec_arg_hi);\n \n@@ -90,7 +105,12 @@ int main ()\n \n   /* test sign extend short to double word */\n   vec_arg_hi = (vector signed short int ){1, 3, 5, 7,  -1, -3, -5, -7};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_di = (vector signed long long int){7, -7};\n+#else\n   vec_expected_di = (vector signed long long int){1, -1};\n+#endif\n \n   vec_result_di = vec_signextll(vec_arg_hi);\n \n@@ -108,7 +128,12 @@ int main ()\n \n   /* test sign extend word to double word */\n   vec_arg_wi = (vector signed int ){1, 3, -1, -3};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_di = (vector signed long long int){3, -3};\n+#else\n   vec_expected_di = (vector signed long long int){1, -1};\n+#endif\n \n   vec_result_di = vec_signextll(vec_arg_wi);\n "}, {"sha": "f7b7c05487cda3da8148a1f7d48b680fdff9b7b0", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fortran/ppc-fortran.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fppc-fortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fppc-fortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fppc-fortran.exp?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -21,6 +21,16 @@ if { ![istarget powerpc*-*-*] && ![istarget rs6000-*-*] } then {\n   return\n }\n \n+# Make sure there is a fortran compiler to test.\n+if { ![check_no_compiler_messages fortran_available assembly {\n+! Fortran\n+program P\n+  stop\n+end program P\n+} \"\"] } {\n+    return\n+}\n+\n # Load support procs.\n load_lib gfortran-dg.exp\n "}, {"sha": "18a5ce7879218edbc078b61124f091e840c31667", "filename": "gcc/testsuite/gcc.target/powerpc/pr70243.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70243.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70243.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70243.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+/* PR 70423, Make sure we don't generate vmaddfp or vnmsubfp.  These\n+   instructions have different rounding modes than the VSX instructions\n+   xvmaddsp and xvnmsubsp.  These tests are written where the 3 inputs and\n+   target are all separate registers.  Because vmaddfp and vnmsubfp are no\n+   longer generated the compiler will have to generate an xsmaddsp or xsnmsubsp\n+   instruction followed by a move operation.  */\n+\n+#include <altivec.h>\n+\n+vector float\n+do_add1 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return (a * b) + c;\n+}\n+\n+vector float\n+do_nsub1 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return -((a * b) - c);\n+}\n+\n+vector float\n+do_add2 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return vec_madd (a, b, c);\n+}\n+\n+vector float\n+do_nsub2 (vector float dummy, vector float a, vector float b, vector float c)\n+{\n+  return vec_nmsub (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler     {\\mxvmadd[am]sp\\M}  } } */\n+/* { dg-final { scan-assembler     {\\mxvnmsub[am]sp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mvmaddfp\\M}       } } */\n+/* { dg-final { scan-assembler-not {\\mvnmsubfp\\M}      } } */"}, {"sha": "8b1caff3f98c5424c7898eb63a31c3620e305e47", "filename": "gcc/testsuite/gcc.target/powerpc/pr83677.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83677.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83677.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83677.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -9,14 +9,24 @@\n \n void v_expand_u8(vector unsigned char* a, vector unsigned short* b0, vector unsigned short* b1)\n {\n+#if __LITTLE_ENDIAN__\n   *b0 = (vector unsigned short)vec_mergeh(*a, vec_splats((unsigned char)0));\n   *b1 = (vector unsigned short)vec_mergel(*a, vec_splats((unsigned char)0));\n+#else\n+  *b0 = (vector unsigned short)vec_mergeh(vec_splats((unsigned char)0), *a);\n+  *b1 = (vector unsigned short)vec_mergel(vec_splats((unsigned char)0), *a);\n+#endif\n }\n \n void v_expand_u16(vector unsigned short* a, vector unsigned int* b0, vector unsigned int* b1)\n {\n+#if __LITTLE_ENDIAN__\n     *b0 = (vector unsigned int)vec_mergeh(*a, vec_splats((unsigned short)0));\n     *b1 = (vector unsigned int)vec_mergel(*a, vec_splats((unsigned short)0));\n+#else\n+    *b0 = (vector unsigned int)vec_mergeh(vec_splats((unsigned short)0), *a);\n+    *b1 = (vector unsigned int)vec_mergel(vec_splats((unsigned short)0), *a);\n+#endif\n }\n \n void v_load_deinterleave_u8(unsigned char *ptr, vector unsigned char* a, vector unsigned char* b, vector unsigned char* c)\n@@ -44,13 +54,23 @@ void v_load_deinterleave_f32(float *ptr, vector float* a, vector float* b, vecto\n     vector float v2 = vec_xl(16, ptr);\n     vector float v3 = vec_xl(32, ptr);\n \n+#if __LITTLE_ENDIAN__\n+    vector float t1 = vec_sld(v3, v2, 8);\n+    vector float t2 = vec_sld(v1, v3, 8);\n+    vector float t3 = vec_sld(v2, v1, 8);\n+#else\n+    vector float t1 = vec_sld(v2, v3, 8);\n+    vector float t2 = vec_sld(v3, v1, 8);\n+    vector float t3 = vec_sld(v1, v2, 8);\n+#endif\n+\n     static const vector unsigned char flp = {0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31};\n-    *a = vec_perm(v1, vec_sld(v3, v2, 8), flp);\n+    *a = vec_perm(v1, t1, flp);\n \n     static const vector unsigned char flp2 = {28, 29, 30, 31, 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19};\n-    *b = vec_perm(v2, vec_sld(v1, v3, 8), flp2);\n+    *b = vec_perm(v2, t2, flp2);\n \n-    *c = vec_perm(vec_sld(v2, v1, 8), v3, flp);\n+    *c = vec_perm(t3, v3, flp);\n }\n \n void v_store_interleave_f32(float *ptr, vector float a, vector float b, vector float c)\n@@ -61,7 +81,11 @@ void v_store_interleave_f32(float *ptr, vector float a, vector float b, vector f\n     vec_xst(vec_perm(a, hbc, ahbc),  0, ptr);\n \n     vector float lab = vec_mergel(a, b);\n+#if __LITTLE_ENDIAN__\n     vec_xst(vec_sld(lab, hbc, 8), 16, ptr);\n+#else\n+    vec_xst(vec_sld(hbc, lab, 8), 16, ptr);\n+#endif\n \n     static const vector unsigned char clab = {8, 9, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 12, 13, 14, 15};\n     vec_xst(vec_perm(c, lab, clab), 32, ptr);"}, {"sha": "c6aa0511b89259dc288bc416b53b48f294622a5b", "filename": "gcc/testsuite/gcc.target/powerpc/pr99708.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99708.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99708.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99708.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -14,9 +14,17 @@\n int main (void)\n {\n   if (__SIZEOF_FLOAT128__ != sizeof (__float128)\n-      || __SIZEOF_IBM128__ != sizeof (__ibm128))\n+  /* FIXME: Once type __ibm128 gets supported with long-double-64,\n+     we shouldn't need this conditional #ifdef and xfail.  */\n+#ifdef __SIZEOF_IBM128__\n+      || __SIZEOF_IBM128__ != sizeof (__ibm128)\n+#else\n+      || 1\n+#endif\n+     )\n     abort ();\n \n   return 0;\n }\n \n+/* { dg-xfail-run-if \"unsupported type __ibm128 with long-double-64\" { longdouble64 } } */"}, {"sha": "65f291e17ed830048dd4dec3b74a312022c8f8eb", "filename": "gcc/testsuite/gcc.target/riscv/pr109508.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr109508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr109508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr109508.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=sifive-s76\" } */\n+\n+typedef char __attribute__((__vector_size__ (1))) V;\n+\n+V v;\n+\n+void\n+foo (void)\n+{\n+  (char) __builtin_shuffle (0 % v, (V){6}, v);\n+}"}, {"sha": "83cc4a1b5a5b1eda96b542c0c8dff150e4b2e78e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/mask_insn_shortcut.c", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmask_insn_shortcut.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmask_insn_shortcut.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmask_insn_shortcut.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,241 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool1_t test_shortcut_for_riscv_vmand_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmand_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmand_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmand_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmand_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmand_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmand_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmand_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmnand_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmnand_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmnand_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmnand_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmnand_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmnand_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmnand_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmnand_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmandn_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmandn_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmandn_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmandn_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmandn_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmandn_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmandn_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmandn_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmxor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmxor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmxor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmxor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmxor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmxor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmxor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmxor_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmor_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmnor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmnor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmnor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmnor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmnor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmnor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmnor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmnor_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmorn_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmorn_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmorn_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmorn_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmorn_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmorn_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmorn_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmorn_mm_b64(v1, v1, vl);\n+}\n+\n+vbool1_t test_shortcut_for_riscv_vmxnor_case_0(vbool1_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b1(v1, v1, vl);\n+}\n+\n+vbool2_t test_shortcut_for_riscv_vmxnor_case_1(vbool2_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b2(v1, v1, vl);\n+}\n+\n+vbool4_t test_shortcut_for_riscv_vmxnor_case_2(vbool4_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b4(v1, v1, vl);\n+}\n+\n+vbool8_t test_shortcut_for_riscv_vmxnor_case_3(vbool8_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b8(v1, v1, vl);\n+}\n+\n+vbool16_t test_shortcut_for_riscv_vmxnor_case_4(vbool16_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b16(v1, v1, vl);\n+}\n+\n+vbool32_t test_shortcut_for_riscv_vmxnor_case_5(vbool32_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b32(v1, v1, vl);\n+}\n+\n+vbool64_t test_shortcut_for_riscv_vmxnor_case_6(vbool64_t v1, size_t vl) {\n+  return __riscv_vmxnor_mm_b64(v1, v1, vl);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmand\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmnand\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmnandn\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-not {vmnor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-times {vmorn\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 7 } } */\n+/* { dg-final { scan-assembler-not {vmxnor\\.mm\\s+v[0-9]+,\\s*v[0-9]+} } } */\n+/* { dg-final { scan-assembler-times {vmclr\\.m\\s+v[0-9]+} 14 } } */\n+/* { dg-final { scan-assembler-times {vmset\\.m\\s+v[0-9]+} 7 } } */\n+/* { dg-final { scan-assembler-times {vmmv\\.m\\s+v[0-9]+,\\s*v[0-9]+} 14 } } */\n+/* { dg-final { scan-assembler-times {vmnot\\.m\\s+v[0-9]+,\\s*v[0-9]+} 14 } } */"}, {"sha": "a13cc12c5435714bd698d913c662e292a219a2a7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-1.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo1 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo2 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo3 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo4 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo5 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo6 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo7 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */"}, {"sha": "dd6bcb0f54851567bd6147ff151cf847f48c0a08", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-2.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo1 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo2 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo3 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo4 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo5 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo6 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo7 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */"}, {"sha": "01e86223da9f6c56e0b1ac801369621108598b49", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-3.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {__rvv_bool64_t t;} /* { dg-error {unknown type name '__rvv_bool64_t'} } */\n+void foo1 () {__rvv_int8mf8_t t;} /* { dg-error {unknown type name '__rvv_int8mf8_t'} } */\n+void foo2 () {__rvv_uint8mf8_t t;} /* { dg-error {unknown type name '__rvv_uint8mf8_t'} } */\n+void foo3 () {__rvv_int16mf4_t t;} /* { dg-error {unknown type name '__rvv_int16mf4_t'} } */\n+void foo4 () {__rvv_uint16mf4_t t;} /* { dg-error {unknown type name '__rvv_uint16mf4_t'} } */\n+void foo5 () {__rvv_int32mf2_t t;} /* { dg-error {unknown type name '__rvv_int32mf2_t'} } */\n+void foo6 () {__rvv_uint32mf2_t t;} /* { dg-error {unknown type name '__rvv_uint32mf2_t'} } */\n+void foo7 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo8 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo9 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo10 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo11 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo12 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo13 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo14 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */"}, {"sha": "62385b8dcd1b8b945be0d5fb7c3dc551a6e4c022", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-4.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;} /* { dg-error {unknown type name 'vbool64_t'} } */\n+void foo1 () {vint8mf8_t t;} /* { dg-error {unknown type name 'vint8mf8_t'} } */\n+void foo2 () {vuint8mf8_t t;} /* { dg-error {unknown type name 'vuint8mf8_t'} } */\n+void foo3 () {vint16mf4_t t;} /* { dg-error {unknown type name 'vint16mf4_t'} } */\n+void foo4 () {vuint16mf4_t t;} /* { dg-error {unknown type name 'vuint16mf4_t'} } */\n+void foo5 () {vint32mf2_t t;} /* { dg-error {unknown type name 'vint32mf2_t'} } */\n+void foo6 () {vuint32mf2_t t;} /* { dg-error {unknown type name 'vuint32mf2_t'} } */\n+void foo7 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo8 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo9 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo10 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo11 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo12 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo13 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo14 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */"}, {"sha": "26a0a742965f2ddbc0feb6b6aa61ba720eec9354", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-5.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {__rvv_bool64_t t;}\n+void foo1 () {__rvv_int8mf8_t t;}\n+void foo2 () {__rvv_uint8mf8_t t;}\n+void foo3 () {__rvv_int16mf4_t t;}\n+void foo4 () {__rvv_uint16mf4_t t;}\n+void foo5 () {__rvv_int32mf2_t t;}\n+void foo6 () {__rvv_uint32mf2_t t;}\n+void foo7 () {__rvv_int64m1_t t;} /* { dg-error {unknown type name '__rvv_int64m1_t'} } */\n+void foo8 () {__rvv_uint64m1_t t;} /* { dg-error {unknown type name '__rvv_uint64m1_t'} } */\n+void foo9 () {__rvv_int64m2_t t;} /* { dg-error {unknown type name '__rvv_int64m2_t'} } */\n+void foo10 () {__rvv_uint64m2_t t;} /* { dg-error {unknown type name '__rvv_uint64m2_t'} } */\n+void foo11 () {__rvv_int64m4_t t;} /* { dg-error {unknown type name '__rvv_int64m4_t'} } */\n+void foo12 () {__rvv_uint64m4_t t;} /* { dg-error {unknown type name '__rvv_uint64m4_t'} } */\n+void foo13 () {__rvv_int64m8_t t;} /* { dg-error {unknown type name '__rvv_int64m8_t'} } */\n+void foo14 () {__rvv_uint64m8_t t;} /* { dg-error {unknown type name '__rvv_uint64m8_t'} } */"}, {"sha": "eb66f3ea2bd4d7967e34777c792c1fd4eaba3649", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr109479-6.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr109479-6.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=rv32gc_zve32x_zvl64b -mabi=ilp32d\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo0 () {vbool64_t t;}\n+void foo1 () {vint8mf8_t t;}\n+void foo2 () {vuint8mf8_t t;}\n+void foo3 () {vint16mf4_t t;}\n+void foo4 () {vuint16mf4_t t;}\n+void foo5 () {vint32mf2_t t;}\n+void foo6 () {vuint32mf2_t t;}\n+void foo7 () {vint64m1_t t;} /* { dg-error {unknown type name 'vint64m1_t'} } */\n+void foo8 () {vuint64m1_t t;} /* { dg-error {unknown type name 'vuint64m1_t'} } */\n+void foo9 () {vint64m2_t t;} /* { dg-error {unknown type name 'vint64m2_t'} } */\n+void foo10 () {vuint64m2_t t;} /* { dg-error {unknown type name 'vuint64m2_t'} } */\n+void foo11 () {vint64m4_t t;} /* { dg-error {unknown type name 'vint64m4_t'} } */\n+void foo12 () {vuint64m4_t t;} /* { dg-error {unknown type name 'vuint64m4_t'} } */\n+void foo13 () {vint64m8_t t;} /* { dg-error {unknown type name 'vint64m8_t'} } */\n+void foo14 () {vuint64m8_t t;} /* { dg-error {unknown type name 'vuint64m8_t'} } */"}, {"sha": "5b538ba6aabfe56ebc94a7088e1fcd8c7dff7dc2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-2.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n \n-#include <riscv_vector.h>\n+#include \"riscv_vector.h\"\n \n /*\n ** foo1:"}, {"sha": "a6598a5ca8842886311af5770a0f2503f03aa9e6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/spill-sp-adjust.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-sp-adjust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-sp-adjust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fspill-sp-adjust.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=rv64gcv\" } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d\" } */\n \n #include \"spill-1.c\"\n "}, {"sha": "ef7ed60461a05be2570f413e7c594a320c24de13", "filename": "gcc/testsuite/gcc.target/riscv/zbs-extra-bit-or-twobits.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-extra-bit-or-twobits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-extra-bit-or-twobits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-extra-bit-or-twobits.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+int or_two_bit(int idx) {\n+    return idx|3;\n+}\n+\n+int xor_two_bit(int idx) {\n+    return idx^3;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tori\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\txori\\t\" 1 } } */"}, {"sha": "41d94ab921a9e986f4187123d8c6d87f68d4f516", "filename": "gcc/testsuite/gcc.target/riscv/zero-scratch-regs-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-1.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2 -fzero-call-used-regs=used -fno-stack-protector -fno-PIC\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \"li\\t\" } } */"}, {"sha": "9161dd3d4ec8b0c235bfa3014b2c7a689405a9d9", "filename": "gcc/testsuite/gcc.target/riscv/zero-scratch-regs-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-2.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2 -fzero-call-used-regs=all-gpr\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \"vsetvli\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a6,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a7,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t6,0\" } } */"}, {"sha": "824fe9e548ff9a108b19aff103c7f7a96b5f4f4d", "filename": "gcc/testsuite/gcc.target/riscv/zero-scratch-regs-3.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-scratch-regs-3.c?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64 -O2 -fzero-call-used-regs=all\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"vsetvli\\[ \\t\\]*t0,zero,e32,m1,tu,mu\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v0,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v1,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v2,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v3,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v4,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v5,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v6,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v7,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v8,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v9,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v10,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v11,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v12,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v13,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v14,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v15,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v16,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v17,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v18,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v19,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v20,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v21,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v22,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v23,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v24,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v25,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v26,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v27,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v28,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v29,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v30,0\" } } */\n+/* { dg-final { scan-assembler \"vmv.v.i\\[ \\t\\]*v31,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a0,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a1,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a2,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a6,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*a7,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t3,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t4,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t5,0\" } } */\n+/* { dg-final { scan-assembler \"li\\[ \\t\\]*t6,0\" } } */\n+/* { dg-final { scan-assembler \"fmv.d.x\\[ \\t\\]*ft0,zero\" } } */"}, {"sha": "d8a50c6091c154c7294475169e540373c023d5ab", "filename": "gcc/testsuite/gfortran.dg/associate_47.f90", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_47.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -39,10 +39,9 @@ program p\n    end associate\n    if (x%d(1) .ne. 'zqrtyd') stop 5\n \n-! Substrings of arrays still do not work correctly.\n    call foo ('lmnopqrst','ghijklmno')\n    associate (y => x%d(:)(2:4))\n-!      if (any (y .ne. ['mno','hij'])) stop 6\n+      if (any (y .ne. ['mno','hij'])) stop 6\n    end associate\n \n    call foo ('abcdef','ghijkl')"}, {"sha": "2e5218c78cf16c53fd17b1da4246c3dc94e6e9ba", "filename": "gcc/testsuite/gfortran.dg/associate_51.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_51.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_51.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_51.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -51,7 +51,7 @@ recursive subroutine s\n end\n \n recursive subroutine s2\n-   associate (y => (s2)) ! { dg-error \"Associating selector-expression at .1. yields a procedure\" }\n+   associate (y => (s2)) ! { dg-error \"is a procedure name\" }\n    end associate\n end\n "}, {"sha": "d804d62f400c300b6ced248c023a6fbb4d30fac7", "filename": "gcc/testsuite/gfortran.dg/associate_60.f90", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_60.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_60.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_60.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,138 @@\n+! { dg-do run }\n+!\n+! Tests fixes for various pr87477 dependencies\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de> except for pr102106:\n+! which was contributed by Brad Richardson  <everythingfunctional@protonmail.com>\n+!\n+program associate_60\n+  implicit none\n+  character(20) :: buffer\n+\n+  call pr102106\n+  call pr100948\n+  call pr85686\n+  call pr88247\n+  call pr91941\n+  call pr92779\n+  call pr93339\n+  call pr93813\n+\n+contains\n+\n+  subroutine pr102106\n+    type :: sub_class_t\n+        integer :: i\n+    end type\n+    type :: with_polymorphic_component_t\n+        class(sub_class_t), allocatable :: sub_obj_\n+    end type\n+    associate(obj => with_polymorphic_component_t(sub_class_t(42)))\n+        if (obj%sub_obj_%i .ne. 42) stop 1\n+    end associate\n+  end\n+\n+  subroutine pr100948\n+    type t\n+      character(:), allocatable :: c(:)\n+    end type\n+    type(t), allocatable :: x\n+!\n+! Valid test in comment 1\n+!\n+    x = t(['ab','cd'])\n+    associate (y => x%c(:))\n+      if (any (y .ne. x%c)) stop 2\n+      if (any (y .ne. ['ab','cd'])) stop 3\n+    end associate\n+    deallocate (x)\n+!\n+! Allocation with source was found to only copy over one of the array elements\n+!\n+    allocate (x, source = t(['ef','gh']))\n+    associate (y => x%c(:))\n+      if (any (y .ne. x%c)) stop 4\n+      if (any (y .ne. ['ef','gh'])) stop 5\n+    end associate\n+    deallocate (x)\n+  end\n+\n+  subroutine pr85686\n+    call s85686([\" g'day \",\" bye!! \"])\n+    if (trim (buffer) .ne. \" a g'day a bye!!\") stop 6\n+  end\n+\n+  subroutine s85686(x)\n+    character(*) :: x(:)\n+    associate (y => 'a'//x)\n+      write (buffer, *) y ! Used to segfault at the write statement.\n+    end associate\n+  end\n+\n+  subroutine pr88247\n+      type t\n+         character(:), dimension(:), allocatable :: d\n+      end type t\n+      type(t), allocatable :: x\n+      character(5) :: buffer(3)\n+      allocate (x, source = t (['ab','cd'])) ! Didn't work\n+      write(buffer(1), *) x%d(2:1:-1)        ! Was found to be broken\n+      write(buffer(2), *) [x%d(2:1:-1)]      ! Was OK\n+      associate (y => [x%d(2:1:-1)])\n+        write(buffer(3), *) y                ! Bug in comment 7\n+      end associate\n+      if (any (buffer .ne. \" cdab\")) stop 7\n+  end\n+\n+  subroutine pr91941\n+    character(:), allocatable :: x(:), z(:)\n+    x = [' abc', ' xyz']\n+    z = adjustl(x)\n+    associate (y => adjustl(x))              ! Wrong character length was passed\n+      if (any(y .ne. ['abc ', 'xyz '])) stop 8\n+    end associate\n+  end\n+\n+  subroutine pr92779\n+    character(3) :: a = 'abc'\n+    associate (y => spread(trim(a),1,2) // 'd')\n+      if (any (y .ne. ['abcd','abcd'])) stop 9\n+    end associate\n+  end\n+\n+  subroutine pr93339\n+    type t\n+      character(:), allocatable :: a(:)\n+    end type\n+    type(t) :: x\n+    x = t([\"abc \"])                    ! Didn't assign anything\n+!   allocate (x%a(1), source = 'abc') ! Worked OK\n+    associate (y => x%a)\n+       if (any (y .ne. 'abc ')) stop 10\n+          associate (z => x%a)\n+            if (any (y .ne. z)) stop 11\n+          end associate\n+    end associate\n+  end\n+\n+  subroutine pr93813\n+    type t\n+    end type\n+    type, extends(t) :: t2\n+    end type\n+    class(t), allocatable :: x\n+    integer :: i = 0\n+    allocate (t :: x)\n+    associate (y => (x))  ! The parentheses triggered an ICE in select type\n+      select type (y)\n+      type is (t2)\n+          stop 12\n+      type is (t)\n+          i = 42\n+      class default\n+          stop 13\n+      end select\n+    end associate\n+    if (i .ne. 42) stop 14\n+  end\n+end"}, {"sha": "7d22eb3ac8432c50655895e62035b5beb119006e", "filename": "gcc/testsuite/gfortran.dg/c-interop/allocatable-optional-pointer.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fallocatable-optional-pointer.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fallocatable-optional-pointer.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fallocatable-optional-pointer.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,9 +1,9 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 5.3 ALLOCATABLE, OPTIONAL, and POINTER attributes\n-! The ALLOCATABLE, OPTIONAL, and POINTER attributes may be specified \n-! for a dummy argument in a procedure interface that has the BIND \n+! The ALLOCATABLE, OPTIONAL, and POINTER attributes may be specified\n+! for a dummy argument in a procedure interface that has the BIND\n ! attribute.\n \n subroutine test (a, b, c)"}, {"sha": "86a201275110973175ee748f142b184105c7731c", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407a-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407a-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407a-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407a-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n-! C407a An assumed-type entity shall be a dummy variable that does not \n-! have the ALLOCATABLE, CODIMENSION, INTENT(OUT), POINTER, or VALUE \n+! C407a An assumed-type entity shall be a dummy variable that does not\n+! have the ALLOCATABLE, CODIMENSION, INTENT(OUT), POINTER, or VALUE\n ! attribute and is not an explicit-shape array.\n !\n ! This test file contains tests that are expected to all pass."}, {"sha": "a148afc5273cad43156356343bb49bab541a3ef9", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407b-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,15 +1,15 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C407b  An assumed-type variable name shall not appear in a designator\n ! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-type, or as the first argument to any of\n-! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND, \n+! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND,\n ! PRESENT, RANK, SHAPE, SIZE, UBOUND, and C_LOC.\n !\n ! This test file contains tests that are expected to all pass.\n \n-! Check that passing an assumed-type variable as an actual argument \n+! Check that passing an assumed-type variable as an actual argument\n ! corresponding to an assumed-type dummy works.\n \n module m"}, {"sha": "90ae68fa7dfceb8e4338131e5df23f093cdb4a49", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407b-2.f90", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407b-2.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,16 +1,16 @@\n ! PR 101337\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C407b  An assumed-type variable name shall not appear in a designator\n ! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-type, or as the first argument to any of\n-! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND, \n+! the intrinsic and intrinsic module functions IS_CONTIGUOUS, LBOUND,\n ! PRESENT, RANK, SHAPE, SIZE, UBOUND, and C_LOC.\n !\n ! This file contains tests that are expected to give diagnostics.\n \n-! Check that passing an assumed-type variable as an actual argument \n+! Check that passing an assumed-type variable as an actual argument\n ! corresponding to a non-assumed-type dummy gives a diagnostic.\n \n module m\n@@ -72,35 +72,35 @@ subroutine s2 (x, y)\n     type is (integer)\n       i = 0\n     type is (real)\n-      i = 1 \n+      i = 1\n     class default\n       i = -1\n   end select\n \n   ! relational operations\n   if (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n-      .eq. y) then  ! { dg-error \"Assumed.type\" } \n+      .eq. y) then  ! { dg-error \"Assumed.type\" }\n     return\n   end if\n   if (.not. (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n-             .ne. y)) then  ! { dg-error \"Assumed.type\" } \n+             .ne. y)) then  ! { dg-error \"Assumed.type\" }\n     return\n   end if\n-  if (.not. x) then  ! { dg-error \"Assumed.type\" } \n+  if (.not. x) then  ! { dg-error \"Assumed.type\" }\n     return\n   end if\n \n   ! assignment\n-  x &  ! { dg-error \"Assumed.type\" } \n-    = y  ! { dg-error \"Assumed.type\" } \n-  i = x  ! { dg-error \"Assumed.type\" } \n-  y = i  ! { dg-error \"Assumed.type\" } \n+  x &  ! { dg-error \"Assumed.type\" }\n+    = y  ! { dg-error \"Assumed.type\" }\n+  i = x  ! { dg-error \"Assumed.type\" }\n+  y = i  ! { dg-error \"Assumed.type\" }\n \n   ! arithmetic\n-  i = x + 1  ! { dg-error \"Assumed.type\" } \n-  i = -y  ! { dg-error \"Assumed.type\" } \n+  i = x + 1  ! { dg-error \"Assumed.type\" }\n+  i = -y  ! { dg-error \"Assumed.type\" }\n   i = (x & ! { dg-error \"Assumed.type\" \"pr101337\" }\n-       + y)  ! { dg-error \"Assumed.type\" } \n+       + y)  ! { dg-error \"Assumed.type\" }\n \n   ! computed go to\n   goto (10, 20, 30), x  ! { dg-error \"Assumed.type|must be a scalar integer\" }\n@@ -116,7 +116,7 @@ subroutine s2 (x, y)\n     continue\n   end do\n \n-end subroutine  \n+end subroutine\n \n ! Check that calls to disallowed intrinsic functions produce a diagnostic.\n ! Again, this isn't exhaustive, there are just too many intrinsics and\n@@ -147,4 +147,4 @@ subroutine s3 (x, y)\n \n   i = kind (x)  ! { dg-error \"Assumed.type\" }\n \n-end subroutine  \n+end subroutine"}, {"sha": "7abe33827407cfaf702825d9878c24947f6399df", "filename": "gcc/testsuite/gfortran.dg/c-interop/c407c-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407c-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407c-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc407c-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,5 @@\n ! PR101333\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C407c An assumed-type actual argument that corresponds to an"}, {"sha": "f933808ff895b516dae22b9de66010cd6d696a7e", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535a-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C535a  An assumed-rank entity shall be a dummy variable that does not"}, {"sha": "816e69124cee75eeecf6fd6cbfd6245858964c61", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535a-2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535a-2.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n@@ -43,7 +43,7 @@ subroutine s0 (a)\n     integer, dimension(..) :: badblocklocal2  ! { dg-error \"Assumed.rank\" }\n     integer :: badblocklocal3  ! { dg-error \"Assumed.rank\" }\n     dimension badblocklocal3(..)\n-  end block    \n+  end block\n \n end subroutine\n \n@@ -62,7 +62,7 @@ module m\n     integer, dimension(..) :: badcomponent2  ! { dg-error \"must have an explicit shape\" }\n   end type\n end module\n-  \n+\n ! Check that diagnostics are issued when dimension(..) is used in combination\n ! with the forbidden attributes.\n "}, {"sha": "f8ecabe9a027c41d7e64b207700e4785a35d0362", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,9 +1,9 @@\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n ! C535b An assumed-rank variable name shall not appear in a designator\n-! or expression except as an actual argument corresponding to a dummy \n+! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-rank, the argument of the C_LOC function\n ! in the ISO_C_BINDING intrinsic module, or the first argument in a\n ! reference to an intrinsic inquiry function.\n@@ -13,7 +13,7 @@\n !\n ! This test file contains tests that are expected to all pass.\n \n-! Check that passing an assumed-rank variable as an actual argument \n+! Check that passing an assumed-rank variable as an actual argument\n ! corresponding to an assumed-rank dummy works.\n \n module m"}, {"sha": "caf61fe8270298338144bae17a25df0acd1a7bd1", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-2.f90", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-2.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,11 +1,11 @@\n ! PR 101334\n ! PR 101337\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n ! C535b An assumed-rank variable name shall not appear in a designator\n-! or expression except as an actual argument corresponding to a dummy \n+! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-rank, the argument of the C_LOC function\n ! in the ISO_C_BINDING intrinsic module, or the first argument in a\n ! reference to an intrinsic inquiry function.\n@@ -16,7 +16,7 @@\n ! This test file contains tests that are expected to issue diagnostics\n ! for invalid code.\n \n-! Check that passing an assumed-rank variable as an actual argument \n+! Check that passing an assumed-rank variable as an actual argument\n ! corresponding to a non-assumed-rank dummy gives a diagnostic.\n \n module m\n@@ -57,7 +57,7 @@ subroutine test_calls (x, y)\n   ! Make sure each invalid argument produces a diagnostic.\n   ! scalar dummies\n   call f (x, &  ! { dg-error \"(A|a)ssumed.rank\" }\n-          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" } \n+          y)  ! { dg-error \"(A|a)ssumed.rank\" \"pr101337\" }\n   ! assumed-rank dummies\n   call g (x, y)  ! OK\n   ! assumed-size dummies\n@@ -295,15 +295,15 @@ subroutine test_expressions (a, b, c, l, m, n, x, y, z, p, q, r, s, i, j)\n   n &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = j .neqv. m  ! { dg-error \"(A|a)ssumed.rank\" }\n \n-end subroutine  \n+end subroutine\n \n ! Check that calls to disallowed intrinsic functions produce a diagnostic.\n ! There are 100+ \"elemental\" intrinsics defined in the standard, and\n ! 25+ \"transformational\" intrinsics that accept array operands, and that\n ! doesn't include intrinsics in the standard modules.  To keep the length of\n-! this test to something sane, check only a handful of these functions on \n-! the theory that related functions are probably implemented similarly and \n-! probably share the same argument-processing code.  \n+! this test to something sane, check only a handful of these functions on\n+! the theory that related functions are probably implemented similarly and\n+! probably share the same argument-processing code.\n \n subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n   implicit none\n@@ -331,7 +331,7 @@ subroutine test_intrinsics (i1, i2, r1, r2, c1, c2, l1, l2, s1, s2)\n     = exp (r2)  ! { dg-error \"(A|a)ssumed.rank\" }\n   r1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = sinh (r2)  ! { dg-error \"(A|a)ssumed.rank\" }\n-  \n+\n   ! bit operations\n   l1 &  ! { dg-error \"(A|a)ssumed.rank\" }\n     = blt (i1, &  ! { dg-error \"(A|a)ssumed.rank\" }"}, {"sha": "e882fbcfd2f441c5f6fa8dc01a9bef2b0d31cc3a", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535b-3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535b-3.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,10 +1,10 @@\n ! PR 101334\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-fcoarray=single\" }\n !\n ! TS 29113\n ! C535b An assumed-rank variable name shall not appear in a designator\n-! or expression except as an actual argument corresponding to a dummy \n+! or expression except as an actual argument corresponding to a dummy\n ! argument that is assumed-rank, the argument of the C_LOC function\n ! in the ISO_C_BINDING intrinsic module, or the first argument in a\n ! reference to an intrinsic inquiry function."}, {"sha": "8f0cff111db57a43bd31167470c9684cb16ef499", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535c-1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,9 +1,9 @@\n ! PR 54753\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C535c If an assumed-size or nonallocatable nonpointer assumed-rank\n-! array is an actual argument corresponding to a dummy argument that \n+! array is an actual argument corresponding to a dummy argument that\n ! is an INTENT(OUT) assumed-rank array, it shall not be polymorphic, [...].\n !\n ! This constraint is numbered C839 in the Fortran 2018 standard.\n@@ -16,7 +16,7 @@ module t\n     integer :: id\n     real :: xyz(3)\n   end type\n-end module  \n+end module\n \n module m\n   use t\n@@ -74,7 +74,7 @@ subroutine test_scalar_unlimited_polymorphic (a1, a2)\n     class(*) :: a1, a2\n     call upoly (a1, a2)\n   end subroutine\n-  \n+\n   ! The polymorphic cases for assumed-size are bad.\n   subroutine test_assumed_size_nonpolymorphic (a1, a2)\n     type(t1) :: a1(*), a2(*)"}, {"sha": "5e89f57640c2df05729d31e77a647a31ec50d1a8", "filename": "gcc/testsuite/gfortran.dg/c-interop/c535c-2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc535c-2.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,10 +1,10 @@\n ! PR 54753\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! C535c If an assumed-size or nonallocatable nonpointer assumed-rank\n-! array is an actual argument corresponding to a dummy argument that \n-! is an INTENT(OUT) assumed-rank array, it shall not be [...] \n+! array is an actual argument corresponding to a dummy argument that\n+! is an INTENT(OUT) assumed-rank array, it shall not be [...]\n ! finalizable [...].\n !\n ! This constraint is numbered C839 in the Fortran 2018 standard.\n@@ -44,7 +44,7 @@ subroutine test_known_size (a1, a2, n)\n   ! Calls with an assumed-size array argument should be rejected.\n   subroutine test_assumed_size (a1, a2)\n     type(t1) :: a1(*), a2(*)\n-    \n+\n     call s1 (a1, a2)  !  { dg-error \"(A|a)ssumed.rank\" }\n   end subroutine\n \n@@ -61,7 +61,7 @@ subroutine test_assumed_rank_allocatable (a1, a2)\n \n     call s1 (a1, a2)\n   end subroutine\n-  \n+\n   ! The call should be rejected with a nonallocatable nonpointer\n   ! assumed-rank actual argument.\n   subroutine test_assumed_rank_plain (a1, a2)"}, {"sha": "6a26fd0eea3c4de7a387c496ab2713f16fc239a1", "filename": "gcc/testsuite/gfortran.dg/c-interop/deferred-character-1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fdeferred-character-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fdeferred-character-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fdeferred-character-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,9 +1,9 @@\n ! PR92482\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.7 Interoperability of procedures and procedure interfaces\n-! \n+!\n ! If a dummy argument in an interoperable interface is of type\n ! CHARACTER and is allocatable or a pointer, its character length shall\n ! be deferred."}, {"sha": "250c3970b0e65155ecc8e1048953f43ea9e2b43d", "filename": "gcc/testsuite/gfortran.dg/c-interop/removed-restrictions-1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.1 Removed restrictions on ISO_C_BINDING module procedures\n-! \n+!\n ! The subroutine C_F_POINTER from the intrinsic module ISO_C_BINDING has\n ! the restriction in ISO/IEC 1539- 1:2010 that if FPTR is an array, it\n ! shall be of interoperable type."}, {"sha": "eb0c970eb53f2d41f8dd79c5ddf3cdc5204236f6", "filename": "gcc/testsuite/gfortran.dg/c-interop/removed-restrictions-2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-2.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.1 Removed restrictions on ISO_C_BINDING module procedures\n-! \n+!\n ! The function C_F_PROCPOINTER from the intrinsic module ISO_C_BINDING\n ! has the restriction in ISO/IEC 1539-1:2010 that CPTR and FPTR shall\n ! not be the C address and interface of a noninteroperable Fortran"}, {"sha": "a582723534175d007b939aa319628af1ee9c3f48", "filename": "gcc/testsuite/gfortran.dg/c-interop/removed-restrictions-4.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fremoved-restrictions-4.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,8 +1,8 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n ! 8.1 Removed restrictions on ISO_C_BINDING module procedures\n-! \n+!\n ! [...]\n !\n ! The function C_FUNLOC from the intrinsic module ISO_C_BINDING has"}, {"sha": "9ba7f95937a7a2f1c9a8d4f837f26eecb82150f9", "filename": "gcc/testsuite/gfortran.dg/c-interop/tkr.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftkr.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftkr.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Ftkr.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,12 +1,12 @@\n-! { dg-do compile}\n+! { dg-do compile }\n !\n ! TS 29113\n-! The definition of TKR compatible in paragraph 2 of subclause 12.4.3.4.5 \n+! The definition of TKR compatible in paragraph 2 of subclause 12.4.3.4.5\n ! of ISO/IEC 1539-1:2010 is changed to:\n !\n-! A dummy argument is type, kind, and rank compatible, or TKR compatible, \n-! with another dummy argument if the first is type compatible with the \n-! second, the kind type parameters of the first have the same values as \n+! A dummy argument is type, kind, and rank compatible, or TKR compatible,\n+! with another dummy argument if the first is type compatible with the\n+! second, the kind type parameters of the first have the same values as\n ! the corresponding kind type parameters of the second, and both have the\n ! same rank or either is assumed-rank.\n !"}, {"sha": "acfb7c35cfb23ca557c020e9828b31c76dc96248", "filename": "gcc/testsuite/gfortran.dg/class_result_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_10.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do run}\n+! { dg-do run }\n \n \n ! PR fortran/99585"}, {"sha": "9a1fb2ba50f61d770376d65705cbf1c47831c47e", "filename": "gcc/testsuite/gfortran.dg/class_result_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_result_8.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -37,5 +37,5 @@ program polymorphic_operators_memory_leaks\n    call assign_a_type (a, add_a_type(a,b))\n    print *, a%x\n end\n-! { dg-final { scan-tree-dump-times \"builtin_free\" 6 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"builtin_free\" 5 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"builtin_malloc\" 7 \"original\" } }"}, {"sha": "c56fa01165509b7c483537f24088d585a3b1808c", "filename": "gcc/testsuite/gfortran.dg/dtio_35.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_35.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-! { dg-compile }\n+! { dg-do compile }\n !\n ! Reported by Vladimir Nikishkin\n ! at https://stackoverflow.com/questions/60972134/whats-wrong-with-the-following-fortran-code-gfortran-dtio-dummy-argument-at#"}, {"sha": "018aedc7854bc7fad8b07b72afcf2fe16b6cf188", "filename": "gcc/testsuite/gfortran.dg/entry_26.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_26.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fno-f2c\" }\n+!\n+! PR fortran/104312 - ICE in fold_convert_loc with entry, -ff2c: control\n+! Contributed by G.Steinmetz\n+\n+module m\n+  implicit none\n+contains\n+  function f()\n+    real, pointer :: f, e\n+    real, target  :: a(2) = [1,2]\n+    f => a(1)\n+    return\n+    entry e()\n+    e => a(2)\n+  end\n+  function g()\n+    complex, pointer :: g,h\n+    complex, target  :: a(2) = [3,4]\n+    g => a(1)\n+    return\n+    entry h()\n+    h => a(2)\n+  end\n+  function f3()\n+    real, allocatable :: f3, e3\n+    allocate (f3, source=1.0)\n+    return\n+    entry e3()\n+    allocate (e3, source=2.0)\n+  end\n+  function g3()\n+    complex, allocatable :: g3, h3\n+    allocate (g3, source=(3.0,0.0))\n+    return\n+    entry h3()\n+    allocate (h3, source=(4.0,0.0))\n+  end\n+end\n+\n+program p\n+  use m\n+  real,    pointer :: x\n+  complex, pointer :: c\n+  real    :: y\n+  complex :: d\n+  x => f()\n+  if (x /= 1.0) stop 1\n+  x => e()\n+  if (x /= 2.0) stop 2\n+  c => g()\n+  if (c /= (3.0,0.0)) stop 3\n+  c => h()\n+  if (c /= (4.0,0.0)) stop 4\n+  y = f3()\n+  if (y /= 1.0) stop 5\n+  y = e3()\n+  if (y /= 2.0) stop 6\n+  d = g3()\n+  if (d /= (3.0,0.0)) stop 7\n+  d = h3()\n+  if (d /= (4.0,0.0)) stop 8\n+end"}, {"sha": "f1e28fda93570f8d7b819dd38c90396fe3ae14cd", "filename": "gcc/testsuite/gfortran.dg/entry_27.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_27.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+! { dg-additional-options \"-ff2c\" }\n+!\n+! PR fortran/104312 - ICE in fold_convert_loc with entry, -ff2c: test\n+! Contributed by G.Steinmetz\n+\n+module m\n+  implicit none\n+contains\n+  function f()\n+    real, pointer :: f, e\n+    real, target  :: a(2) = [1,2]\n+    f => a(1)\n+    return\n+    entry e()\n+    e => a(2)\n+  end\n+  function g()\n+    complex, pointer :: g,h\n+    complex, target  :: a(2) = [3,4]\n+    g => a(1)\n+    return\n+    entry h()\n+    h => a(2)\n+  end\n+  function f3()\n+    real, allocatable :: f3, e3\n+    allocate (f3, source=1.0)\n+    return\n+    entry e3()\n+    allocate (e3, source=2.0)\n+  end\n+  function g3()\n+    complex, allocatable :: g3, h3\n+    allocate (g3, source=(3.0,0.0))\n+    return\n+    entry h3()\n+    allocate (h3, source=(4.0,0.0))\n+  end\n+end\n+\n+program p\n+  use m\n+  real,    pointer :: x\n+  complex, pointer :: c\n+  real    :: y\n+  complex :: d\n+  x => f()\n+  if (x /= 1.0) stop 1\n+  x => e()\n+  if (x /= 2.0) stop 2\n+  c => g()\n+  if (c /= (3.0,0.0)) stop 3\n+  c => h()\n+  if (c /= (4.0,0.0)) stop 4\n+  y = f3()\n+  if (y /= 1.0) stop 5\n+  y = e3()\n+  if (y /= 2.0) stop 6\n+  d = g3()\n+  if (d /= (3.0,0.0)) stop 7\n+  d = h3()\n+  if (d /= (4.0,0.0)) stop 8\n+end"}, {"sha": "be2ca1715f9724211d45dbc152a3544dceb08285", "filename": "gcc/testsuite/gfortran.dg/finalize_52.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_52.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_52.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_52.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR104272 in which allocate caused an unwanted finalization\n+!\n+! Contributed by Kai Germaschewski  <kai.germaschewski@gmail.com>\n+!\n+module solver_m\n+    implicit none\n+\n+    type, abstract, public :: solver_base_t\n+    end type solver_base_t\n+\n+    type, public, extends(solver_base_t) :: solver_gpu_t\n+       complex, dimension(:), allocatable :: x\n+    contains\n+       final :: solver_gpu_final\n+    end type solver_gpu_t\n+\n+    type, public, extends(solver_gpu_t) :: solver_sparse_gpu_t\n+    contains\n+       final :: solver_sparse_gpu_final\n+    end type solver_sparse_gpu_t\n+\n+    integer :: final_counts = 0\n+\n+ contains\n+\n+    impure elemental subroutine solver_gpu_final(this)\n+       type(solver_gpu_t), intent(INOUT) :: this\n+       final_counts = final_counts + 1\n+    end subroutine solver_gpu_final\n+\n+    impure elemental subroutine solver_sparse_gpu_final(this)\n+       type(solver_sparse_gpu_t), intent(INOUT) :: this\n+       final_counts = final_counts + 10\n+    end subroutine solver_sparse_gpu_final\n+\n+ end module solver_m\n+\n+ subroutine test\n+    use solver_m\n+    implicit none\n+\n+    class(solver_base_t), dimension(:), allocatable :: solver\n+\n+    allocate(solver_sparse_gpu_t :: solver(2))\n+\n+    if (final_counts .ne. 0) stop 1\n+ end subroutine\n+\n+program main\n+    use solver_m\n+    implicit none\n+\n+    call test\n+    if (final_counts .ne. 22) stop 2 ! Scalar finalizers for rank 1/size 2\n+end program"}, {"sha": "560e5351323be251764a899ef0de4ddc7b063383", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-2.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-2.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -8,8 +8,9 @@\n ! { dg-note {'b' declared here} {} { target *-*-* } .-1 }\n \n !$acc update host(b(::2))\n-! { dg-warning {'b\\.dim\\[0\\]\\.ubound' is used uninitialized} {} { target *-*-* } .-1 }\n-! { dg-warning {'b\\.dim\\[0\\]\\.lbound' is used uninitialized} {} { target *-*-* } .-2 }\n+! { dg-warning {'b\\.span' is used uninitialized} {} { target *-*-* } .-1 }\n+! { dg-warning {'b\\.dim\\[0\\]\\.ubound' is used uninitialized} {} { target *-*-* } .-2 }\n+! { dg-warning {'b\\.dim\\[0\\]\\.lbound' is used uninitialized} {} { target *-*-* } .-3 }\n !$acc update host(b(1)%A(::3,::4))\n end\n "}, {"sha": "32c9acef070edd60e7595d22c4c2975ed5cf1b1f", "filename": "gcc/testsuite/gfortran.dg/gomp/affinity-clause-1.f90", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -24,8 +24,7 @@ subroutine foo(x)\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(.*jj \\\\* 5 \\\\+ .* <?i>?\\\\) \\\\+ -6\\\\\\]\\\\)\" 1 \"original\" } }\n \n-! { dg final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[\\\\(.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(\\\\(integer\\\\(kind=8\\\\)\\\\) i \\\\+ -1\\\\) \\\\* 6\\\\\\]\\\\)\"  1 \"original\" } }\n-\n+! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(.*i \\\\+ -1\\\\) \\\\* 6\\\\\\]\\\\)\"  1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:5:1\\\\):a\\\\)\\[^ \\]\" 1 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:5:1\\\\):a\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:5:1\\\\):\\\\*x\\\\)\"  1 \"original\" } }"}, {"sha": "aef5e0c66097180796e6375b9d7770024ec57423", "filename": "gcc/testsuite/gfortran.dg/interface_49.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_49.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_49.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_49.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do run }\n+! PR fortran/61615 - resolve correct generic with TYPE(C_PTR) arguments\n+! PR fortran/99982 - dto. with C_PTR and C_FUNPTR\n+! Contributed by Jacob Abel and Scot Breitenfeld\n+\n+MODULE foo\n+  USE iso_c_binding, only : c_ptr, c_funptr\n+  IMPLICIT NONE\n+  integer      :: rank = -99\n+  character(8) :: ctyp = \"\"\n+  INTERFACE bar\n+    MODULE PROCEDURE bar_s\n+    MODULE PROCEDURE bar_a1d\n+    MODULE PROCEDURE bar_a2d\n+    MODULE PROCEDURE bar_fp\n+    MODULE PROCEDURE bar_fp1\n+    MODULE PROCEDURE bar_fpx\n+  END INTERFACE bar\n+CONTAINS\n+  SUBROUTINE bar_s(a)\n+    TYPE(c_ptr) :: a\n+    WRITE (0, *) 'in bar_s'\n+    rank = 0\n+    ctyp = \"c_ptr\"\n+  END SUBROUTINE bar_s\n+\n+  SUBROUTINE bar_a1d(a)\n+    TYPE(c_ptr) :: a(:)\n+    WRITE (0, *) 'in bar_a1d'\n+    rank = 1\n+    ctyp = \"c_ptr\"\n+  END SUBROUTINE bar_a1d\n+\n+  SUBROUTINE bar_a2d(a)\n+    TYPE(c_ptr) :: a(:,:)\n+    WRITE (0, *) 'in bar_a2d'\n+    rank = 2\n+    ctyp = \"c_ptr\"\n+  END SUBROUTINE bar_a2d\n+\n+  SUBROUTINE bar_fp(a)\n+    TYPE(c_funptr) :: a\n+    WRITE (0, *) 'in bar_fp'\n+    rank = 0\n+    ctyp = \"c_funptr\"\n+  END SUBROUTINE bar_fp\n+\n+  SUBROUTINE bar_fp1(a)\n+    TYPE(c_funptr) :: a(:)\n+    WRITE (0, *) 'in bar_fp1'\n+    rank = 1\n+    ctyp = \"c_funptr\"\n+  END SUBROUTINE bar_fp1\n+\n+  SUBROUTINE bar_fpx(a, b)\n+    TYPE(c_funptr) :: a(..)\n+    TYPE(c_ptr)    :: b\n+    WRITE (0, *) 'in bar_fpx'\n+    rank = -1\n+    ctyp = \"c_funptr\"\n+  END SUBROUTINE bar_fpx\n+END MODULE foo\n+\n+PROGRAM cptr_array_vs_scalar_arg\n+  USE foo\n+  USE iso_c_binding, only : c_ptr, c_loc, c_funptr\n+  IMPLICIT NONE\n+  INTEGER, TARGET :: i\n+  TYPE(c_ptr)     :: a, b(1), c(1,1)\n+  type(c_funptr)  :: fp, fp1(1), fp2(1,1)\n+  a    = C_LOC(i)\n+  b(1) = C_LOC(i)\n+  CALL bar(a)\n+  if (rank /= 0 .or. ctyp /= \"c_ptr\") stop 1\n+  CALL bar(b)\n+  if (rank /= 1 .or. ctyp /= \"c_ptr\") stop 2\n+  CALL bar(c)\n+  if (rank /= 2 .or. ctyp /= \"c_ptr\") stop 3\n+  rank = -99\n+  ctyp = \"\"\n+  CALL bar((a))\n+  if (rank /= 0 .or. ctyp /= \"c_ptr\") stop 4\n+  CALL bar((b))\n+  if (rank /= 1 .or. ctyp /= \"c_ptr\") stop 5\n+  rank = -99\n+  ctyp = \"\"\n+  CALL bar(fp)\n+  if (rank /= 0 .or. ctyp /= \"c_funptr\") stop 6\n+  CALL bar(fp1)\n+  if (rank /= 1 .or. ctyp /= \"c_funptr\") stop 7\n+  rank = -99\n+  ctyp = \"\"\n+  CALL bar(fp2, a)\n+  if (rank /= -1 .or. ctyp /= \"c_funptr\") stop 8\n+END PROGRAM cptr_array_vs_scalar_arg"}, {"sha": "4a3bb6fc2e7ecc635ca55646c9e3eda13870f018", "filename": "gcc/testsuite/gfortran.dg/pr103258.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103258.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do compile}\n+! { dg-do compile }\n ! { dg-additional-options \"-Wno-pedantic\" }\n !\n ! Test from PR103258.  This used to ICE due to incorrectly marking the"}, {"sha": "0b6ada6e50fecbf0e3e44047852b53da94845d39", "filename": "gcc/testsuite/gfortran.dg/pr105205.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr105205.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr105205.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr105205.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+!\n+! Contributed by Rich Townsend  <townsend@astro.wisc.edu>\n+!\n+program alloc_char_type\n+   implicit none\n+   integer, parameter :: start = 1, finish = 4\n+   character(3) :: check(4)\n+   type mytype\n+      character(:), allocatable :: c(:)\n+   end type mytype\n+   type(mytype) :: a\n+   type(mytype) :: b\n+   integer :: i\n+   a%c = ['foo','bar','biz','buz']\n+   check = ['foo','bar','biz','buz']\n+   b = a\n+   do i = 1, size(b%c)\n+      if (b%c(i) .ne. check(i)) stop 1\n+   end do\n+   if (any (a%c .ne. check)) stop 2\n+   if (any (a%c(start:finish) .ne. check)) stop 3\n+   deallocate (a%c)\n+   deallocate (b%c)\n+end"}, {"sha": "25f72b360796f6f16023856c417bdaa7671c4274", "filename": "gcc/testsuite/gfortran.dg/pr106918.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106918.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106918.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr106918.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do run }\n+!\n+! Contributed by Lionel Guez  <guez@lmd.ens.fr>\n+!\n+  character(len = :), allocatable:: attr_name(:)\n+  character(6) :: buffer\n+  type coord_def\n+     character(len = :), allocatable:: attr_name(:)\n+  end type coord_def\n+  type(coord_def) coordinates\n+  attr_name = [\"units\"]\n+  write (buffer, *) attr_name\n+  if (buffer .ne. \" units\") stop 1\n+  coordinates = coord_def(attr_name)\n+  write (buffer, *) coordinates%attr_name\n+  if (buffer .ne. \" units\") stop 2\n+  deallocate (attr_name)\n+  deallocate (coordinates%attr_name)\n+end"}, {"sha": "969154a1537c45ee550942218da03e0baeee61b1", "filename": "gcc/testsuite/gfortran.dg/pr59107.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr59107.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-! { dg-compile }\n+! { dg-do compile }\n ! { dg-options \"-Wsurprising\" }\n \n ! There should be no surprising warnings"}, {"sha": "2fa1585604b9173263d91cb07d687961da279194", "filename": "gcc/testsuite/gfortran.dg/pr93835.f08", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93835.f08?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-! {dg-do run }\n+! { dg-do run }\n !\n ! PR fortran/93835 - the following code resulted in an ICE\n !"}, {"sha": "4ec1a08fe02c2d240b48a9dfbd3c30a179415960", "filename": "gcc/testsuite/gfortran.dg/pr98408.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98408.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98408.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98408.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do run }\n+!\n+! Contributed by Thomas Koenig  <tkoenig@gcc.gnu.org>\n+!\n+program main\n+  character (len=:), allocatable :: a(:)\n+  allocate (character(len=10) :: a(5))\n+  if (sizeof(a) .ne. 50) stop 1\n+  deallocate (a)\n+end program main"}, {"sha": "4c063e8330bdebe34f1c59386324db797a6c97e3", "filename": "gcc/testsuite/gfortran.dg/set_exponent_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fset_exponent_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgfortran.dg%2Fset_exponent_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fset_exponent_1.f90?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! PR fortran/109511\n+! Check compile-time simplification of SET_EXPONENT against runtime\n+\n+program exponent\n+  implicit none\n+  integer :: i\n+  i = 0\n+  print *, i, set_exponent(1., 0), set_exponent(1., i)\n+  if (set_exponent(1., 0) /= set_exponent(1., i)) stop 1\n+  i = 1\n+  print *, i, set_exponent(1., 1), set_exponent(1., i)\n+  if (set_exponent(1., 1) /= set_exponent(1., i)) stop 2\n+  i = 2\n+  print *, i, set_exponent(-1.75, 2), set_exponent(-1.75, i)\n+  if (set_exponent(-1.75, 2) /= set_exponent(-1.75, i)) stop 3\n+  print *, i, set_exponent(0.1875, 2), set_exponent(0.1875, i)\n+  if (set_exponent(0.1875, 2) /= set_exponent(0.1875, i)) stop 4\n+  i = 3\n+  print *, i, set_exponent(0.75, 3), set_exponent(0.75, i)\n+  if (set_exponent(0.75, 3) /= set_exponent(0.75, i)) stop 5\n+  i = 4\n+  print *, i, set_exponent(-2.5, 4), set_exponent(-2.5, i)\n+  if (set_exponent(-2.5, 4) /= set_exponent(-2.5, i)) stop 6\n+  i = -1\n+  print *, i, set_exponent(1., -1), set_exponent(1., i)\n+  if (set_exponent(1., -1) /= set_exponent(1., i)) stop 7\n+  i = -2\n+  print *, i, set_exponent(1.125, -2), set_exponent(1.125, i)\n+  if (set_exponent(1.125, -2) /= set_exponent(1.125, i)) stop 8\n+  print *, i, set_exponent(-0.25, -2), set_exponent(-0.25, i)\n+  if (set_exponent(-0.25, -2) /= set_exponent(-0.25, i)) stop 9\n+  i = -3\n+  print *, i, set_exponent(0.75, -3), set_exponent(0.75, i)\n+  if (set_exponent(0.75, -3) /= set_exponent(0.75, i)) stop 10\n+end program exponent"}, {"sha": "527a3048c4868d5d510cc91c913110c41c15f1ce", "filename": "gcc/testsuite/gm2/pim/run/pass/addcharconst.mod", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Faddcharconst.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Faddcharconst.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Faddcharconst.mod?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,20 @@\n+MODULE addcharconst ;\n+\n+FROM libc IMPORT printf, exit ;\n+FROM StrLib IMPORT StrLen ;\n+\n+\n+PROCEDURE input (a: ARRAY OF CHAR) ;\n+BEGIN\n+   IF StrLen (a) # 2\n+   THEN\n+      printf (\"string length is not 2, but %d\\n\", StrLen (a)) ;\n+      exit (1)\n+   END\n+END input ;\n+\n+\n+BEGIN\n+   input (015C + 012C) ;\n+   printf (\"successful test, finishing\\n\")\n+END addcharconst."}, {"sha": "992049d76e2e4cfdf6d14b3e6bcfcb2a6715451e", "filename": "gcc/testsuite/gm2/pim/run/pass/singlechar.mod", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Fsinglechar.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Fsinglechar.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Fsinglechar.mod?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,20 @@\n+MODULE singlechar ;\n+\n+FROM libc IMPORT printf, exit ;\n+FROM StrLib IMPORT StrLen ;\n+\n+\n+PROCEDURE input (a: ARRAY OF CHAR) ;\n+BEGIN\n+   IF StrLen (a) # 1\n+   THEN\n+      printf (\"string length is not 1, but %d\\n\", StrLen (a)) ;\n+      exit (1)\n+   END\n+END input ;\n+\n+\n+BEGIN\n+   input (015C) ;\n+   printf (\"successful test, finishing\\n\")\n+END singlechar."}, {"sha": "ad68af51f915a381092d2cabb3b13e796ad29c27", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -9750,6 +9750,17 @@ proc check_effective_target_raoint { } {\n     } \"-mraoint\" ]\n }\n \n+# Return 1 if amx-complex instructions can be compiled.\n+proc check_effective_target_amx_complex { } {\n+    return [check_no_compiler_messages amx_complex object {\n+\tvoid\n+\tfoo ()\n+\t{\n+\t  __asm__ volatile (\"tcmmimfp16ps\\t%%tmm1, %%tmm2, %%tmm3\" ::);\n+\t}\n+    } \"-mamx-complex\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}, {"sha": "a19450f533dab0c6c5f7ff628ba1937d791b66a8", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2071,7 +2071,7 @@ predicate_scalar_phi (gphi *phi, gimple_stmt_iterator *gsi)\n     }\n \n   /* Put element with max number of occurences to the end of ARGS.  */\n-  if (max_ind != -1 && max_ind +1 != (int) args_len)\n+  if (max_ind != -1 && max_ind + 1 != (int) args_len)\n     std::swap (args[args_len - 1], args[max_ind]);\n \n   /* Handle one special case when number of arguments with different values\n@@ -2116,12 +2116,12 @@ predicate_scalar_phi (gphi *phi, gimple_stmt_iterator *gsi)\n       vec<int> *indexes;\n       tree type = TREE_TYPE (gimple_phi_result (phi));\n       tree lhs;\n-      arg1 = args[1];\n-      for (i = 0; i < args_len; i++)\n+      arg1 = args[args_len - 1];\n+      for (i = args_len - 1; i > 0; i--)\n \t{\n-\t  arg0 = args[i];\n-\t  indexes = phi_arg_map.get (args[i]);\n-\t  if (i != args_len - 1)\n+\t  arg0 = args[i - 1];\n+\t  indexes = phi_arg_map.get (args[i - 1]);\n+\t  if (i != 1)\n \t    lhs = make_temp_ssa_name (type, NULL, \"_ifc_\");\n \t  else\n \t    lhs = res;\n@@ -2641,8 +2641,9 @@ predicate_statements (loop_p loop)\n \t      gimple_assign_set_rhs1 (stmt, ifc_temp_var (type, rhs, &gsi));\n \t      update_stmt (stmt);\n \t    }\n-\t  else if (gimple_plf (stmt, GF_PLF_2)\n-\t\t   && is_gimple_call (stmt))\n+\n+\t  if (gimple_plf (gsi_stmt (gsi), GF_PLF_2)\n+\t      && is_gimple_call (gsi_stmt (gsi)))\n \t    {\n \t      /* Convert functions that have a SIMD clone to IFN_MASK_CALL.\n \t\t This will cause the vectorizer to match the \"in branch\""}, {"sha": "eabe8ba452299bc65f82bb3a320e00158dbadaa0", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -179,7 +179,8 @@ initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write, bool may_def_ok = false)\n     }\n   if (tree lhs = gimple_get_lhs (stmt))\n     {\n-      if (TREE_CODE (lhs) != SSA_NAME)\n+      if (TREE_CODE (lhs) != SSA_NAME\n+\t  && (may_def_ok || !stmt_could_throw_p (cfun, stmt)))\n \t{\n \t  ao_ref_init (write, lhs);\n \t  return true;"}, {"sha": "067a3f07f7efddb8eef48253fe0f65a8d085e30e", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1564,6 +1564,15 @@ build_and_add_sum (tree type, tree op1, tree op2, enum tree_code opcode)\n       && (!op2def || gimple_nop_p (op2def)))\n     {\n       gsi = gsi_after_labels (single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n+      if (!gsi_end_p (gsi)\n+\t  && is_gimple_call (gsi_stmt (gsi))\n+\t  && (gimple_call_flags (gsi_stmt (gsi)) & ECF_RETURNS_TWICE))\n+\t{\n+\t  /* Don't add statements before a returns_twice call at the start\n+\t     of a function.  */\n+\t  split_edge (single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n+\t  gsi = gsi_after_labels (single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n+\t}\n       if (gsi_end_p (gsi))\n \t{\n \t  gimple_stmt_iterator gsi2"}, {"sha": "9692911e31b2567f112aa97f5a7e2e94112f5b4b", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -6407,6 +6407,13 @@ expressions_equal_p (tree e1, tree e2, bool match_vn_top_optimistically)\n       && (e1 == VN_TOP || e2 == VN_TOP))\n     return true;\n \n+  /* If only one of them is null, they cannot be equal.  While in general\n+     this should not happen for operations like TARGET_MEM_REF some\n+     operands are optional and an identity value we could substitute\n+     has differing semantics.  */\n+  if (!e1 || !e2)\n+    return false;\n+\n   /* SSA_NAME compare pointer equal.  */\n   if (TREE_CODE (e1) == SSA_NAME || TREE_CODE (e2) == SSA_NAME)\n     return false;"}, {"sha": "445da53292e9d1d2db62ca962fc017bb0e6c9bbe", "filename": "gcc/tree-vect-generic.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -174,7 +174,16 @@ tree_vec_extract (gimple_stmt_iterator *gsi, tree type,\n   opr.resimplify (NULL, follow_all_ssa_edges);\n   gimple_seq stmts = NULL;\n   tree res = maybe_push_res_to_seq (&opr, &stmts);\n-  gcc_assert (res);\n+  if (!res)\n+    {\n+      /* This can happen if SSA_NAME_OCCURS_IN_ABNORMAL_PHI are\n+\t used.  Build BIT_FIELD_REF manually otherwise.  */\n+      t = build3 (BIT_FIELD_REF, type, t, bitsize, bitpos);\n+      res = make_ssa_name (type);\n+      gimple *g = gimple_build_assign (res, t);\n+      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      return res;\n+    }\n   gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   return res;\n }"}, {"sha": "ba28214f09afe80844cce36d37b3fe769d133ec3", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -6297,9 +6297,12 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n \t{\n           new_temp = scalar_results[0];\n \t  gcc_assert (TREE_CODE (TREE_TYPE (adjustment_def)) != VECTOR_TYPE);\n-\t  adjustment_def = gimple_convert (&stmts, scalar_type, adjustment_def);\n-\t  new_temp = gimple_build (&stmts, code, scalar_type,\n+\t  adjustment_def = gimple_convert (&stmts, TREE_TYPE (vectype),\n+\t\t\t\t\t   adjustment_def);\n+\t  new_temp = gimple_convert (&stmts, TREE_TYPE (vectype), new_temp);\n+\t  new_temp = gimple_build (&stmts, code, TREE_TYPE (vectype),\n \t\t\t\t   new_temp, adjustment_def);\n+\t  new_temp = gimple_convert (&stmts, scalar_type, new_temp);\n \t}\n \n       epilog_stmt = gimple_seq_last_stmt (stmts);"}, {"sha": "d73deaecce0cef78eda5fff9909da5b5406902ee", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -7671,10 +7671,23 @@ vect_slp_function (function *fun)\n \t{\n \t  r |= vect_slp_bbs (bbs, NULL);\n \t  bbs.truncate (0);\n-\t  bbs.quick_push (bb);\n \t}\n-      else\n-\tbbs.safe_push (bb);\n+\n+      /* We need to be able to insert at the head of the region which\n+\t we cannot for region starting with a returns-twice call.  */\n+      if (bbs.is_empty ())\n+\tif (gcall *first = safe_dyn_cast <gcall *> (first_stmt (bb)))\n+\t  if (gimple_call_flags (first) & ECF_RETURNS_TWICE)\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"skipping bb%d as start of region as it \"\n+\t\t\t\t \"starts with returns-twice call\\n\",\n+\t\t\t\t bb->index);\n+\t      continue;\n+\t    }\n+\n+      bbs.safe_push (bb);\n \n       /* When we have a stmt ending this block and defining a\n \t value we have to insert on edges when inserting after it for"}, {"sha": "6b7dbfd4a231baec24e740ffe0ce0b0bf7a1de6b", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -5595,8 +5595,7 @@ vectorizable_assignment (vec_info *vinfo,\n \t\t       GET_MODE_SIZE (TYPE_MODE (vectype_in)))))\n     return false;\n \n-  if (VECTOR_BOOLEAN_TYPE_P (vectype)\n-      && !VECTOR_BOOLEAN_TYPE_P (vectype_in))\n+  if (VECTOR_BOOLEAN_TYPE_P (vectype) != VECTOR_BOOLEAN_TYPE_P (vectype_in))\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}, {"sha": "f4d484526c77453faeaab85daabf31204c5ee9a0", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -75,7 +75,7 @@ class remove_unreachable {\n   ~remove_unreachable () { m_list.release (); }\n   void maybe_register_block (basic_block bb);\n   bool remove_and_update_globals (bool final_p);\n-  vec<edge> m_list;\n+  vec<std::pair<int, int> > m_list;\n   gimple_ranger &m_ranger;\n };\n \n@@ -103,9 +103,9 @@ remove_unreachable::maybe_register_block (basic_block bb)\n     return;\n \n   if (un0)\n-    m_list.safe_push (e1);\n+    m_list.safe_push (std::make_pair (e1->src->index, e1->dest->index));\n   else\n-    m_list.safe_push (e0);\n+    m_list.safe_push (std::make_pair (e0->src->index, e0->dest->index));\n }\n \n // Process the edges in the list, change the conditions and removing any\n@@ -132,7 +132,12 @@ remove_unreachable::remove_and_update_globals (bool final_p)\n   auto_bitmap all_exports;\n   for (i = 0; i < m_list.length (); i++)\n     {\n-      edge e = m_list[i];\n+      auto eb = m_list[i];\n+      basic_block src = BASIC_BLOCK_FOR_FN (cfun, eb.first);\n+      basic_block dest = BASIC_BLOCK_FOR_FN (cfun, eb.second);\n+      if (!src || !dest)\n+\tcontinue;\n+      edge e = find_edge (src, dest);\n       gimple *s = gimple_outgoing_range_stmt_p (e->src);\n       gcc_checking_assert (gimple_code (s) == GIMPLE_COND);\n       bool lhs_p = TREE_CODE (gimple_cond_lhs (s)) == SSA_NAME;"}, {"sha": "40de969d18c9e4c3f20d8e94e805521cef05c02f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,9 @@\n+2023-04-08  Tetsuma Hoshino  <t-hoshino@pony-e.jp>\n+\n+\tPR target/109402\n+\t* config/v850/lib1funcs.S (___muldi3): Remove unnecessary\n+\tstack manipulations.\n+\n 2023-04-05  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/109374"}, {"sha": "35b5ab5f339efc78c16c562f5f8f5052e414c720", "filename": "libgcc/config/v850/lib1funcs.S", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgcc%2Fconfig%2Fv850%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgcc%2Fconfig%2Fv850%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fv850%2Flib1funcs.S?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -2211,7 +2211,6 @@ ___ucmpdi2:\n ___muldi3:\n #ifdef __v850__\n         jarl  __save_r26_r31, r10\n-        addi  16,  sp, sp\n         mov   r6,  r28\n         shr   15,  r28\n         movea lo(32767), r0, r14\n@@ -2256,7 +2255,6 @@ ___muldi3:\n         mulh  r12, r6\n         mov   r28,  r17\n         mulh  r10, r17\n-        add   -16, sp\n         mov   r28,  r12\n         mulh  r8,  r12\n         add   r17, r18"}, {"sha": "5769c6a55de294d6405c767785049ae604109d28", "filename": "libgo/go/mime/type_test.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgo%2Fgo%2Fmime%2Ftype_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgo%2Fgo%2Fmime%2Ftype_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Ftype_test.go?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -14,7 +14,10 @@ import (\n func setMimeInit(fn func()) (cleanup func()) {\n \tonce = sync.Once{}\n \ttestInitMime = fn\n-\treturn func() { testInitMime = nil }\n+\treturn func() {\n+\t\ttestInitMime = nil\n+\t\tonce = sync.Once{}\n+\t}\n }\n \n func clearMimeTypes() {"}, {"sha": "43db44b7aa137bd2effcc5e15aede7b413650b64", "filename": "libgo/go/mime/type_unix_test.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgo%2Fgo%2Fmime%2Ftype_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libgo%2Fgo%2Fmime%2Ftype_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmime%2Ftype_unix_test.go?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -11,6 +11,7 @@ import (\n )\n \n func initMimeUnixTest(t *testing.T) {\n+\tonce.Do(initMime)\n \terr := loadMimeGlobsFile(\"testdata/test.types.globs2\")\n \tif err != nil {\n \t\tt.Fatal(err)"}, {"sha": "72fcf35baaa97f6bafffce81a341ebf57faf06c7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,3 +1,168 @@\n+2023-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_base.h (const_iterator_t): Define for C++23.\n+\t(const_sentinel_t): Likewise.\n+\t(range_const_reference_t): Likewise.\n+\t(constant_range): Likewise.\n+\t(__cust_access::__possibly_const_range): Likewise, replacing ...\n+\t(__cust_access::__as_const): ... this.\n+\t(__cust_access::_CBegin::operator()): Redefine for C++23 as per P2278R4.\n+\t(__cust_access::_CEnd::operator()): Likewise.\n+\t(__cust_access::_CRBegin::operator()): Likewise.\n+\t(__cust_access::_CREnd::operator()): Likewise.\n+\t(__cust_access::_CData::operator()): Likewise.\n+\t* include/bits/ranges_util.h (ranges::__detail::__different_from):\n+\tMake it an alias of std::__detail::__different_from.\n+\t(view_interface::cbegin): Define for C++23.\n+\t(view_interface::cend): Likewise.\n+\t* include/bits/stl_iterator.h (__detail::__different_from): Define.\n+\t(iter_const_reference_t): Define for C++23.\n+\t(__detail::__constant_iterator): Likewise.\n+\t(__detail::__is_const_iterator): Likewise.\n+\t(__detail::__not_a_const_iterator): Likewise.\n+\t(__detail::__iter_const_rvalue_reference_t): Likewise.\n+\t(__detail::__basic_const_iter_cat):: Likewise.\n+\t(const_iterator): Likewise.\n+\t(__detail::__const_sentinel): Likewise.\n+\t(const_sentinel): Likewise.\n+\t(basic_const_iterator): Likewise.\n+\t(common_type<basic_const_iterator<_Tp>, _Up>): Likewise.\n+\t(common_type<_Up, basic_const_iterator<_Tp>>): Likewise.\n+\t(common_type<basic_const_iterator<_Tp>, basic_const_iterator<Up>>):\n+\tLikewise.\n+\t(make_const_iterator): Define for C++23.\n+\t(make_const_sentinel): Likewise.\n+\t* include/std/ranges (__cpp_lib_ranges_as_const): Likewise.\n+\t(as_const_view): Likewise.\n+\t(enable_borrowed_range<as_const_view>): Likewise.\n+\t(views::__detail::__is_ref_view): Likewise.\n+\t(views::__detail::__can_is_const_view): Likewise.\n+\t(views::_AsConst, views::as_const): Likewise.\n+\t* include/std/span (span::const_iterator): Likewise.\n+\t(span::const_reverse_iterator): Likewise.\n+\t(span::cbegin): Likewise.\n+\t(span::cend): Likewise.\n+\t(span::crbegin): Likewise.\n+\t(span::crend): Likewise.\n+\t* include/std/version (__cpp_lib_ranges_as_const): Likewise.\n+\t* testsuite/std/ranges/adaptors/join.cc (test06): Adjust to\n+\tbehave independently of C++20 vs C++23.\n+\t* testsuite/std/ranges/version_c++23.cc: Verify value of\n+\t__cpp_lib_ranges_as_const macro.\n+\t* testsuite/24_iterators/const_iterator/1.cc: New test.\n+\t* testsuite/std/ranges/adaptors/as_const/1.cc: New test.\n+\n+2023-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_base.h (__cust_access::__as_const)\n+\t(__cust_access::_CBegin, __cust::cbegin)\n+\t(__cust_access::_CEnd, __cust::cend)\n+\t(__cust_access::_CRBegin, __cust::crbegin)\n+\t(__cust_access::_CREnd, __cust::crend)\n+\t(__cust_access::_CData, __cust::cdata): Move down definitions to\n+\tshortly after the definition of input_range.\n+\n+2023-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h: Include <optional> for C++23.\n+\t(__cpp_lib_fold): Define for C++23.\n+\t(in_value_result): Likewise.\n+\t(__detail::__flipped): Likewise.\n+\t(__detail::__indirectly_binary_left_foldable_impl): Likewise.\n+\t(__detail::__indirectly_binary_left_foldable): Likewise.\n+\t(___detail:__indirectly_binary_right_foldable): Likewise.\n+\t(fold_left_with_iter_result): Likewise.\n+\t(__fold_left_with_iter_fn, fold_left_with_iter): Likewise.\n+\t(__fold_left_fn, fold_left): Likewise.\n+\t(__fold_left_first_with_iter_fn, fold_left_first_with_iter):\n+\tLikewise.\n+\t(__fold_left_first_fn, fold_left_first): Likewise.\n+\t(__fold_right_fn, fold_right): Likewise.\n+\t(__fold_right_last_fn, fold_right_last): Likewise.\n+\t* include/std/version (__cpp_lib_fold): Likewise.\n+\t* testsuite/25_algorithms/fold_left/1.cc: New test.\n+\t* testsuite/25_algorithms/fold_right/1.cc: New test.\n+\n+2023-04-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format (formatter): Add comment to deleted default\n+\tconstructor of primary template.\n+\t(_Checking_scanner): Add static_assert.\n+\n+2023-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/using.xml: Document libstdc++exp.a library.\n+\t* doc/html/*: Regenerate.\n+\n+2023-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names.cc [_AIX]: Do not define policy.\n+\t* testsuite/19_diagnostics/error_code/cons/lwg3629.cc: Rename\n+\tnamespace to avoid clashing with libc struct.\n+\t* testsuite/19_diagnostics/error_condition/cons/lwg3629.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/96088.cc: Skip on AIX.\n+\t* testsuite/23_containers/unordered_multimap/96088.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/96088.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/96088.cc: Likewise.\n+\t* testsuite/experimental/synchronized_value.cc: Require gthreads\n+\tand add missing option for pthreads targets.\n+\n+2023-04-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__cpp_lib_ranges_enumerate): Define\n+\tfor C++23.\n+\t(__detail::__range_with_movable_reference): Likewise.\n+\t(enumerate_view): Likewise.\n+\t(enumerate_view::_Iterator): Likewise.\n+\t(enumerate_view::_Sentinel): Likewise.\n+\t(views::__detail::__can_enumerate_view): Likewise.\n+\t(views::_Enumerate, views::enumerate): Likewise.\n+\t* include/std/version (__cpp_lib_ranges_enumerate): Likewise.\n+\t* testsuite/std/ranges/version_c++23.cc: Verify value of\n+\t__cpp_lib_ranges_enumerate.\n+\t* testsuite/std/ranges/adaptors/enumerate/1.cc: New test.\n+\n+2023-04-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (lazy_split_view::_OuterIter::_OuterIter):\n+\tPropagate _M_trailing_empty in the const-converting constructor\n+\tas per LWG 3904.\n+\t* testsuite/std/ranges/adaptors/adjacent/1.cc (test04): Correct\n+\tassertion.\n+\t* testsuite/std/ranges/adaptors/lazy_split.cc (test12): New test.\n+\n+2023-04-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* src/c++17/floating_from_chars.cc: Include <algorithm>,\n+\t<iterator>, <limits> and <cstdint>.\n+\n+2023-04-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/108291\n+\t* include/std/ranges (chunk_by_view::_M_find_next): Generalize\n+\tparameter types of the lambda wrapper passed to adjacent_find.\n+\t(chunk_by_view::_M_find_prev): Likewise.\n+\t* testsuite/std/ranges/adaptors/chunk_by/1.cc (test04, test05):\n+\tNew tests.\n+\n+2023-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/109482\n+\t* include/experimental/internet (basic_endpoint::basic_endpoint()):\n+\tEnsure that the required union members are active. Only define\n+\tas constexpr for C++20 and later.\n+\t(basic_endpoint::basic_endpoint(const protocol_type&, port_type)):\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/endpoint/cons.cc: Only\n+\tcheck constexpr default constructor for C++20 and later.\n+\t* testsuite/experimental/net/internet/endpoint/extensible.cc:\n+\tLikewise.\n+\n+2023-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdata.zi: Import new file from 2023c release.\n+\n 2023-04-05  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n \n \t* include/precompiled/stdc++.h (C++17): Don't double-include"}, {"sha": "eebb35da279fc2c3bc0b8aa32571313518e88237", "filename": "libstdc++-v3/doc/html/manual/using.html", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -31,6 +31,9 @@\n       </td></tr><tr><td align=\"left\"><code class=\"literal\">-lstdc++fs</code></td><td align=\"left\">Linking to <code class=\"filename\">libstdc++fs</code>\n         is required for use of the Filesystem library extensions in\n         <code class=\"filename\">&lt;experimental/filesystem&gt;</code>.\n+      </td></tr><tr><td align=\"left\"><code class=\"literal\">-lstdc++exp</code></td><td align=\"left\">Linking to <code class=\"filename\">libstdc++exp</code>\n+        is required for use of the C++ Contracts extensions enabled by\n+        <code class=\"literal\">-fcontracts</code>.\n       </td></tr><tr><td align=\"left\"><code class=\"literal\">-lstdc++_libbacktrace</code></td><td align=\"left\">Until C++23 support is non-experimental, linking to\n \t<code class=\"filename\">libstdc++_libbacktrace.a</code>\n \tis required for use of the C++23 type"}, {"sha": "46ccbc55c3388f232eb2cb3e71fb9c051651f6c0", "filename": "libstdc++-v3/doc/html/manual/using_dynamic_or_shared.html", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_dynamic_or_shared.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_dynamic_or_shared.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_dynamic_or_shared.html?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -136,12 +136,21 @@\n       no shared library for it. To use the library you should include\n       <code class=\"filename\">&lt;experimental/filesystem&gt;</code>\n       and link with <code class=\"option\">-lstdc++fs</code>. The library implementation\n-      is incomplete on non-POSIX platforms, specifically Windows support is\n-      rudimentary.\n+      is incomplete on non-POSIX platforms, specifically Windows is only\n+      partially supported.\n     </p><p>\n-      Due to the experimental nature of the Filesystem library the usual\n+      GCC 13 includes an implementation of the C++ Contracts library defined by\n+      <a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1429r3.pdf\" target=\"_top\">P1429R3</a>.\n+      Because this is an experimental extension, not part of the C++ standard,\n+      it is implemented in a separate library,\n+      <code class=\"filename\">libstdc++exp.a</code>, and there is\n+      no shared library for it. To use the library you should include\n+      <code class=\"filename\">&lt;experimental/contract&gt;</code>\n+      and link with <code class=\"option\">-lstdc++exp</code>.\n+    </p><p>\n+      Due to the experimental nature of these libraries the usual\n       guarantees about ABI stability and backwards compatibility do not apply\n-      to it. There is no guarantee that the components in any\n+      to them. There is no guarantee that the components in any\n       <code class=\"filename\">&lt;experimental/xxx&gt;</code>\n       header will remain compatible between different GCC releases.\n     </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"using_namespaces.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"using_concurrency.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Namespaces\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Concurrency</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "3a507fc1671b6ac548a4dc625791b88512132b97", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -108,6 +108,14 @@\n       </entry>\n     </row>\n \n+    <row>\n+      <entry><literal>-lstdc++exp</literal></entry>\n+      <entry>Linking to <filename class=\"libraryfile\">libstdc++exp</filename>\n+        is required for use of the C++ Contracts extensions enabled by\n+        <literal>-fcontracts</literal>.\n+      </entry>\n+    </row>\n+\n     <row>\n       <entry><literal>-lstdc++_libbacktrace</literal></entry>\n       <entry>Until C++23 support is non-experimental, linking to\n@@ -1700,14 +1708,25 @@ A quick read of the relevant part of the GCC\n       no shared library for it. To use the library you should include\n       <filename class=\"headerfile\">&lt;experimental/filesystem&gt;</filename>\n       and link with <option>-lstdc++fs</option>. The library implementation\n-      is incomplete on non-POSIX platforms, specifically Windows support is\n-      rudimentary.\n+      is incomplete on non-POSIX platforms, specifically Windows is only\n+      partially supported.\n+    </para>\n+\n+    <para>\n+      GCC 13 includes an implementation of the C++ Contracts library defined by\n+      <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1429r3.pdf\">P1429R3</link>.\n+      Because this is an experimental extension, not part of the C++ standard,\n+      it is implemented in a separate library,\n+      <filename class=\"libraryfile\">libstdc++exp.a</filename>, and there is\n+      no shared library for it. To use the library you should include\n+      <filename class=\"headerfile\">&lt;experimental/contract&gt;</filename>\n+      and link with <option>-lstdc++exp</option>.\n     </para>\n \n     <para>\n-      Due to the experimental nature of the Filesystem library the usual\n+      Due to the experimental nature of these libraries the usual\n       guarantees about ABI stability and backwards compatibility do not apply\n-      to it. There is no guarantee that the components in any\n+      to them. There is no guarantee that the components in any\n       <filename class=\"headerfile\">&lt;experimental/xxx&gt;</filename>\n       header will remain compatible between different GCC releases.\n     </para>"}, {"sha": "f041ff16b0e4aec364b7dd7dd79ea0127fa6f876", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -32,6 +32,9 @@\n \n #if __cplusplus > 201703L\n \n+#if __cplusplus > 202002L\n+#include <optional>\n+#endif\n #include <bits/ranges_algobase.h>\n #include <bits/ranges_util.h>\n #include <bits/uniform_int_dist.h> // concept uniform_random_bit_generator\n@@ -3691,6 +3694,254 @@ namespace ranges\n   };\n \n   inline constexpr __find_last_if_not_fn find_last_if_not{};\n+\n+#define __cpp_lib_fold 202207L\n+\n+  template<typename _Iter, typename _Tp>\n+    struct in_value_result\n+    {\n+      [[no_unique_address]] _Iter in;\n+      [[no_unique_address]] _Tp value;\n+\n+      template<typename _Iter2, typename _Tp2>\n+\trequires convertible_to<const _Iter&, _Iter2>\n+\t  && convertible_to<const _Tp&, _Tp2>\n+      constexpr\n+      operator in_value_result<_Iter2, _Tp2>() const &\n+      { return {in, value}; }\n+\n+      template<typename _Iter2, typename _Tp2>\n+\trequires convertible_to<_Iter, _Iter2>\n+\t  && convertible_to<_Tp, _Tp2>\n+      constexpr\n+      operator in_value_result<_Iter2, _Tp2>() &&\n+      { return {std::move(in), std::move(value)}; }\n+    };\n+\n+  namespace __detail\n+  {\n+    template<typename _Fp>\n+      class __flipped\n+      {\n+\t_Fp _M_f;\n+\n+      public:\n+\ttemplate<typename _Tp, typename _Up>\n+\t  requires invocable<_Fp&, _Up, _Tp>\n+\tinvoke_result_t<_Fp&, _Up, _Tp>\n+\toperator()(_Tp&&, _Up&&); // not defined\n+      };\n+\n+      template<typename _Fp, typename _Tp, typename _Iter, typename _Up>\n+      concept __indirectly_binary_left_foldable_impl = movable<_Tp> && movable<_Up>\n+\t&& convertible_to<_Tp, _Up>\n+\t&& invocable<_Fp&, _Up, iter_reference_t<_Iter>>\n+\t&& assignable_from<_Up&, invoke_result_t<_Fp&, _Up, iter_reference_t<_Iter>>>;\n+\n+      template<typename _Fp, typename _Tp, typename _Iter>\n+      concept __indirectly_binary_left_foldable = copy_constructible<_Fp>\n+\t&& indirectly_readable<_Iter>\n+\t&& invocable<_Fp&, _Tp, iter_reference_t<_Iter>>\n+\t&& convertible_to<invoke_result_t<_Fp&, _Tp, iter_reference_t<_Iter>>,\n+\t\t\t  decay_t<invoke_result_t<_Fp&, _Tp, iter_reference_t<_Iter>>>>\n+\t&& __indirectly_binary_left_foldable_impl\n+\t    <_Fp, _Tp, _Iter, decay_t<invoke_result_t<_Fp&, _Tp, iter_reference_t<_Iter>>>>;\n+\n+      template <typename _Fp, typename _Tp, typename _Iter>\n+      concept __indirectly_binary_right_foldable\n+\t= __indirectly_binary_left_foldable<__flipped<_Fp>, _Tp, _Iter>;\n+  } // namespace __detail\n+\n+  template<typename _Iter, typename _Tp>\n+    using fold_left_with_iter_result = in_value_result<_Iter, _Tp>;\n+\n+  struct __fold_left_with_iter_fn\n+  {\n+    template<typename _Ret_iter,\n+\t     typename _Iter, typename _Sent, typename _Tp, typename _Fp>\n+      static constexpr auto\n+      _S_impl(_Iter __first, _Sent __last, _Tp __init, _Fp __f)\n+      {\n+\tusing _Up = decay_t<invoke_result_t<_Fp&, _Tp, iter_reference_t<_Iter>>>;\n+\tusing _Ret = fold_left_with_iter_result<_Ret_iter, _Up>;\n+\n+\tif (__first == __last)\n+\t  return _Ret{std::move(__first), _Up(std::move(__init))};\n+\n+\t_Up __accum = std::__invoke(__f, std::move(__init), *__first);\n+\tfor (++__first; __first != __last; ++__first)\n+\t  __accum = std::__invoke(__f, std::move(__accum), *__first);\n+\treturn _Ret{std::move(__first), std::move(__accum)};\n+      }\n+\n+    template<input_iterator _Iter, sentinel_for<_Iter> _Sent, typename _Tp,\n+\t     __detail::__indirectly_binary_left_foldable<_Tp, _Iter> _Fp>\n+      constexpr auto\n+      operator()(_Iter __first, _Sent __last, _Tp __init, _Fp __f) const\n+      {\n+\tusing _Ret_iter = _Iter;\n+\treturn _S_impl<_Ret_iter>(std::move(__first), __last,\n+\t\t\t\t  std::move(__init), std::move(__f));\n+      }\n+\n+    template<input_range _Range, typename _Tp,\n+\t     __detail::__indirectly_binary_left_foldable<_Tp, iterator_t<_Range>> _Fp>\n+      constexpr auto\n+      operator()(_Range&& __r, _Tp __init, _Fp __f) const\n+      {\n+\tusing _Ret_iter = borrowed_iterator_t<_Range>;\n+\treturn _S_impl<_Ret_iter>(ranges::begin(__r), ranges::end(__r),\n+\t\t\t\t  std::move(__init), std::move(__f));\n+      }\n+  };\n+\n+  inline constexpr __fold_left_with_iter_fn fold_left_with_iter{};\n+\n+  struct __fold_left_fn\n+  {\n+    template<input_iterator _Iter, sentinel_for<_Iter> _Sent, typename _Tp,\n+\t     __detail::__indirectly_binary_left_foldable<_Tp, _Iter> _Fp>\n+      constexpr auto\n+      operator()(_Iter __first, _Sent __last, _Tp __init, _Fp __f) const\n+      {\n+\treturn ranges::fold_left_with_iter(std::move(__first), __last,\n+\t\t\t\t\t   std::move(__init), std::move(__f)).value;\n+      }\n+\n+    template<input_range _Range, typename _Tp,\n+\t     __detail::__indirectly_binary_left_foldable<_Tp, iterator_t<_Range>> _Fp>\n+      constexpr auto\n+      operator()(_Range&& __r, _Tp __init, _Fp __f) const\n+      { return (*this)(ranges::begin(__r), ranges::end(__r), std::move(__init), std::move(__f)); }\n+  };\n+\n+  inline constexpr __fold_left_fn fold_left{};\n+\n+  template<typename _Iter, typename _Tp>\n+    using fold_left_first_with_iter_result = in_value_result<_Iter, _Tp>;\n+\n+  struct __fold_left_first_with_iter_fn\n+  {\n+    template<typename _Ret_iter, typename _Iter, typename _Sent, typename _Fp>\n+      static constexpr auto\n+      _S_impl(_Iter __first, _Sent __last, _Fp __f)\n+      {\n+\tusing _Up = decltype(ranges::fold_left(std::move(__first), __last,\n+\t\t\t\t\t       iter_value_t<_Iter>(*__first), __f));\n+\tusing _Ret = fold_left_first_with_iter_result<_Ret_iter, optional<_Up>>;\n+\n+\tif (__first == __last)\n+\t  return _Ret{std::move(__first), optional<_Up>()};\n+\n+\toptional<_Up> __init(in_place, *__first);\n+\tfor (++__first; __first != __last; ++__first)\n+\t  *__init = std::__invoke(__f, std::move(*__init), *__first);\n+\treturn _Ret{std::move(__first), std::move(__init)};\n+      }\n+\n+    template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n+\t     __detail::__indirectly_binary_left_foldable<iter_value_t<_Iter>, _Iter> _Fp>\n+      requires constructible_from<iter_value_t<_Iter>, iter_reference_t<_Iter>>\n+      constexpr auto\n+      operator()(_Iter __first, _Sent __last, _Fp __f) const\n+      {\n+\tusing _Ret_iter = _Iter;\n+\treturn _S_impl<_Ret_iter>(std::move(__first), __last, std::move(__f));\n+      }\n+\n+    template<input_range _Range,\n+\t     __detail::__indirectly_binary_left_foldable<range_value_t<_Range>, iterator_t<_Range>> _Fp>\n+      requires constructible_from<range_value_t<_Range>, range_reference_t<_Range>>\n+      constexpr auto\n+      operator()(_Range&& __r, _Fp __f) const\n+      {\n+\tusing _Ret_iter = borrowed_iterator_t<_Range>;\n+\treturn _S_impl<_Ret_iter>(ranges::begin(__r), ranges::end(__r), std::move(__f));\n+      }\n+  };\n+\n+  inline constexpr __fold_left_first_with_iter_fn fold_left_first_with_iter{};\n+\n+  struct __fold_left_first_fn\n+  {\n+    template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n+\t     __detail::__indirectly_binary_left_foldable<iter_value_t<_Iter>, _Iter> _Fp>\n+      requires constructible_from<iter_value_t<_Iter>, iter_reference_t<_Iter>>\n+      constexpr auto\n+      operator()(_Iter __first, _Sent __last, _Fp __f) const\n+      {\n+\treturn ranges::fold_left_first_with_iter(std::move(__first), __last,\n+\t\t\t\t\t\t std::move(__f)).value;\n+      }\n+\n+    template<input_range _Range,\n+\t     __detail::__indirectly_binary_left_foldable<range_value_t<_Range>, iterator_t<_Range>> _Fp>\n+      requires constructible_from<range_value_t<_Range>, range_reference_t<_Range>>\n+      constexpr auto\n+      operator()(_Range&& __r, _Fp __f) const\n+      { return (*this)(ranges::begin(__r), ranges::end(__r), std::move(__f)); }\n+  };\n+\n+  inline constexpr __fold_left_first_fn fold_left_first{};\n+\n+  struct __fold_right_fn\n+  {\n+    template<bidirectional_iterator _Iter, sentinel_for<_Iter> _Sent, typename _Tp,\n+\t     __detail::__indirectly_binary_right_foldable<_Tp, _Iter> _Fp>\n+      constexpr auto\n+      operator()(_Iter __first, _Sent __last, _Tp __init, _Fp __f) const\n+      {\n+\tusing _Up = decay_t<invoke_result_t<_Fp&, iter_reference_t<_Iter>, _Tp>>;\n+\n+\tif (__first == __last)\n+\t  return _Up(std::move(__init));\n+\n+\t_Iter __tail = ranges::next(__first, __last);\n+\t_Up __accum = std::__invoke(__f, *--__tail, std::move(__init));\n+\twhile (__first != __tail)\n+\t  __accum = std::__invoke(__f, *--__tail, std::move(__accum));\n+\treturn __accum;\n+      }\n+\n+    template<bidirectional_range _Range, typename _Tp,\n+\t     __detail::__indirectly_binary_right_foldable<_Tp, iterator_t<_Range>> _Fp>\n+      constexpr auto\n+      operator()(_Range&& __r, _Tp __init, _Fp __f) const\n+      { return (*this)(ranges::begin(__r), ranges::end(__r), std::move(__init), std::move(__f)); }\n+  };\n+\n+  inline constexpr __fold_right_fn fold_right{};\n+\n+  struct __fold_right_last_fn\n+  {\n+    template<bidirectional_iterator _Iter, sentinel_for<_Iter> _Sent,\n+\t     __detail::__indirectly_binary_right_foldable<iter_value_t<_Iter>, _Iter> _Fp>\n+      requires constructible_from<iter_value_t<_Iter>, iter_reference_t<_Iter>>\n+      constexpr auto\n+      operator()(_Iter __first, _Sent __last, _Fp __f) const\n+      {\n+\tusing _Up = decltype(ranges::fold_right(__first, __last,\n+\t\t\t\t\t\titer_value_t<_Iter>(*__first), __f));\n+\n+\tif (__first == __last)\n+\t  return optional<_Up>();\n+\n+\t_Iter __tail = ranges::prev(ranges::next(__first, std::move(__last)));\n+\treturn optional<_Up>(in_place,\n+\t\t\t     ranges::fold_right(std::move(__first), __tail,\n+\t\t\t\t\t\titer_value_t<_Iter>(*__tail),\n+\t\t\t\t\t\tstd::move(__f)));\n+      }\n+\n+    template<bidirectional_range _Range,\n+\t     __detail::__indirectly_binary_right_foldable<range_value_t<_Range>, iterator_t<_Range>> _Fp>\n+      requires constructible_from<range_value_t<_Range>, range_reference_t<_Range>>\n+      constexpr auto\n+      operator()(_Range&& __r, _Fp __f) const\n+      { return (*this)(ranges::begin(__r), ranges::end(__r), std::move(__f)); }\n+  };\n+\n+  inline constexpr __fold_right_last_fn fold_right_last{};\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "698dac7b7c1ff64ba085d54c00d6e5ae64f7171f", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 190, "deletions": 83, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -177,45 +177,6 @@ namespace ranges\n \t}\n     };\n \n-    // If _To is an lvalue-reference, return const _Tp&, otherwise const _Tp&&.\n-    template<typename _To, typename _Tp>\n-      constexpr decltype(auto)\n-      __as_const(_Tp& __t) noexcept\n-      {\n-\tstatic_assert(std::is_same_v<_To&, _Tp&>);\n-\n-\tif constexpr (is_lvalue_reference_v<_To>)\n-\t  return const_cast<const _Tp&>(__t);\n-\telse\n-\t  return static_cast<const _Tp&&>(__t);\n-      }\n-\n-    struct _CBegin\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_Begin{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _Begin{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _Begin{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n-    struct _CEnd final\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_End{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _End{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _End{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n     template<typename _Tp>\n       concept __member_rbegin = requires(_Tp& __t)\n \t{\n@@ -337,32 +298,6 @@ namespace ranges\n \t}\n     };\n \n-    struct _CRBegin\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_RBegin{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _RBegin{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _RBegin{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n-    struct _CREnd\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_REnd{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _REnd{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _REnd{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n     template<typename _Tp>\n       concept __member_size = !disable_sized_range<remove_cvref_t<_Tp>>\n \t&& requires(_Tp& __t)\n@@ -547,36 +482,18 @@ namespace ranges\n \t}\n     };\n \n-    struct _CData\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_Data{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _Data{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _Data{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n   } // namespace __cust_access\n \n   inline namespace __cust\n   {\n     inline constexpr __cust_access::_Begin begin{};\n     inline constexpr __cust_access::_End end{};\n-    inline constexpr __cust_access::_CBegin cbegin{};\n-    inline constexpr __cust_access::_CEnd cend{};\n     inline constexpr __cust_access::_RBegin rbegin{};\n     inline constexpr __cust_access::_REnd rend{};\n-    inline constexpr __cust_access::_CRBegin crbegin{};\n-    inline constexpr __cust_access::_CREnd crend{};\n     inline constexpr __cust_access::_Size size{};\n     inline constexpr __cust_access::_SSize ssize{};\n     inline constexpr __cust_access::_Empty empty{};\n     inline constexpr __cust_access::_Data data{};\n-    inline constexpr __cust_access::_CData cdata{};\n   }\n \n   /// [range.range] The range concept.\n@@ -598,6 +515,17 @@ namespace ranges\n   template<range _Range>\n     using sentinel_t = decltype(ranges::end(std::declval<_Range&>()));\n \n+#if __cplusplus > 202002L\n+  template<range _Range>\n+    using const_iterator_t = const_iterator<iterator_t<_Range>>;\n+\n+  template<range _Range>\n+    using const_sentinel_t = const_sentinel<sentinel_t<_Range>>;\n+\n+  template<range _Range>\n+    using range_const_reference_t = iter_const_reference_t<iterator_t<_Range>>;\n+#endif\n+\n   template<range _Range>\n     using range_difference_t = iter_difference_t<iterator_t<_Range>>;\n \n@@ -690,6 +618,185 @@ namespace ranges\n     concept common_range\n       = range<_Tp> && same_as<iterator_t<_Tp>, sentinel_t<_Tp>>;\n \n+#if __cplusplus > 202002L\n+  template<typename _Tp>\n+    concept constant_range\n+      = input_range<_Tp> && std::__detail::__constant_iterator<iterator_t<_Tp>>;\n+#endif\n+\n+  namespace __cust_access\n+  {\n+#if __cplusplus > 202020L\n+    template<typename _Range>\n+      constexpr auto&\n+      __possibly_const_range(_Range& __r) noexcept\n+      {\n+\tif constexpr (constant_range<const _Range> && !constant_range<_Range>)\n+\t  return const_cast<const _Range&>(__r);\n+\telse\n+\t  return __r;\n+      }\n+#else\n+    // If _To is an lvalue-reference, return const _Tp&, otherwise const _Tp&&.\n+    template<typename _To, typename _Tp>\n+      constexpr decltype(auto)\n+      __as_const(_Tp& __t) noexcept\n+      {\n+\tstatic_assert(std::is_same_v<_To&, _Tp&>);\n+\n+\tif constexpr (is_lvalue_reference_v<_To>)\n+\t  return const_cast<const _Tp&>(__t);\n+\telse\n+\t  return static_cast<const _Tp&&>(__t);\n+      }\n+#endif\n+\n+    struct _CBegin\n+    {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_iterator\n+\t\t\t  (ranges::begin(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_iterator\n+\t\t\t    (ranges::begin(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_iterator_t<decltype(__r)>(ranges::begin(__r));\n+\t}\n+#else\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_Begin{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _Begin{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _Begin{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+#endif\n+    };\n+\n+    struct _CEnd final\n+    {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_sentinel\n+\t\t\t  (ranges::end(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_sentinel\n+\t\t\t    (ranges::end(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_sentinel_t<decltype(__r)>(ranges::end(__r));\n+\t}\n+#else\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_End{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _End{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _End{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+#endif\n+    };\n+\n+    struct _CRBegin\n+    {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_iterator\n+\t\t\t  (ranges::rbegin(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_iterator\n+\t\t\t    (ranges::rbegin(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_iterator<decltype(ranges::rbegin(__r))>(ranges::rbegin(__r));\n+\t}\n+#else\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_RBegin{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _RBegin{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _RBegin{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+#endif\n+    };\n+\n+    struct _CREnd\n+    {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(std::make_const_sentinel\n+\t\t\t  (ranges::rend(__cust_access::__possibly_const_range(__t)))))\n+\trequires requires { std::make_const_sentinel\n+\t\t\t    (ranges::rend(__cust_access::__possibly_const_range(__t))); }\n+\t{\n+\t  auto& __r = __cust_access::__possibly_const_range(__t);\n+\t  return const_sentinel<decltype(ranges::rend(__r))>(ranges::rend(__r));\n+\t}\n+#else\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_REnd{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _REnd{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _REnd{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+#endif\n+    };\n+\n+    struct _CData\n+    {\n+#if __cplusplus > 202002L\n+      template<__maybe_borrowed_range _Tp>\n+\t[[nodiscard]]\n+\tconstexpr const auto*\n+\toperator()(_Tp&& __t) const\n+\tnoexcept(noexcept(ranges::data(__cust_access::__possibly_const_range(__t))))\n+\trequires requires { ranges::data(__cust_access::__possibly_const_range(__t)); }\n+\t{ return ranges::data(__cust_access::__possibly_const_range(__t)); }\n+#else\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_Data{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _Data{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _Data{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+#endif\n+    };\n+\n+  } // namespace __cust_access\n+\n+  inline namespace __cust\n+  {\n+    inline constexpr __cust_access::_CBegin cbegin{};\n+    inline constexpr __cust_access::_CEnd cend{};\n+    inline constexpr __cust_access::_CRBegin crbegin{};\n+    inline constexpr __cust_access::_CREnd crend{};\n+    inline constexpr __cust_access::_CData cdata{};\n+  }\n+\n   namespace __detail\n   {\n     template<typename _Tp>"}, {"sha": "f7e3538af97f6d0d783fdc3e06d50ce6a861e3fb", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -53,9 +53,7 @@ namespace ranges\n       concept __has_arrow = input_iterator<_It>\n \t&& (is_pointer_v<_It> || requires(_It __it) { __it.operator->(); });\n \n-    template<typename _Tp, typename _Up>\n-      concept __different_from\n-\t= !same_as<remove_cvref_t<_Tp>, remove_cvref_t<_Up>>;\n+    using std::__detail::__different_from;\n   } // namespace __detail\n \n   /// The ranges::view_interface class template\n@@ -192,6 +190,24 @@ namespace ranges\n \tconstexpr decltype(auto)\n \toperator[](range_difference_t<_Range> __n) const\n \t{ return ranges::begin(_M_derived())[__n]; }\n+\n+#if __cplusplus > 202002L\n+      constexpr auto\n+      cbegin() requires input_range<_Derived>\n+      { return ranges::cbegin(_M_derived()); }\n+\n+      constexpr auto\n+      cbegin() const requires input_range<const _Derived>\n+      { return ranges::cbegin(_M_derived()); }\n+\n+      constexpr auto\n+      cend() requires input_range<_Derived>\n+      { return ranges::cend(_M_derived()); }\n+\n+      constexpr auto\n+      cend() const requires input_range<const _Derived>\n+      { return ranges::cend(_M_derived()); }\n+#endif\n     };\n \n   namespace __detail"}, {"sha": "b22d9a4fdb3a0090fcf790c0851d8110ce846a1c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -102,6 +102,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>\n       using __clamp_iter_cat\n \t= __conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;\n+\n+    template<typename _Tp, typename _Up>\n+      concept __different_from\n+\t= !same_as<remove_cvref_t<_Tp>, remove_cvref_t<_Up>>;\n   }\n #endif\n \n@@ -2578,6 +2582,369 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      add_pointer_t<iter_reference_t<_It>>,\n \t\t\t\t      void>;\n     };\n+\n+#if __cplusplus > 202020L\n+  template<indirectly_readable _It>\n+    using iter_const_reference_t\n+      = common_reference_t<const iter_value_t<_It>&&, iter_reference_t<_It>>;\n+\n+  template<input_iterator _It> class basic_const_iterator;\n+\n+  namespace __detail\n+  {\n+    template<typename _It>\n+      concept __constant_iterator = input_iterator<_It>\n+\t&& same_as<iter_const_reference_t<_It>, iter_reference_t<_It>>;\n+\n+    template<typename _Tp>\n+      inline constexpr bool __is_const_iterator = false;\n+\n+    template<typename _It>\n+      inline constexpr bool __is_const_iterator<basic_const_iterator<_It>> = true;\n+\n+    template<typename _Tp>\n+      concept __not_a_const_iterator = !__is_const_iterator<_Tp>;\n+\n+    template<indirectly_readable _It>\n+      using __iter_const_rvalue_reference_t\n+\t= common_reference_t<const iter_value_t<_It>&&, iter_rvalue_reference_t<_It>>;\n+\n+    template<typename _It>\n+      struct __basic_const_iterator_iter_cat\n+      { };\n+\n+    template<forward_iterator _It>\n+      struct __basic_const_iterator_iter_cat<_It>\n+      { using iterator_category = iterator_traits<_It>::iterator_category; };\n+  } // namespace detail\n+\n+  template<input_iterator _It>\n+    using const_iterator\n+      = __conditional_t<__detail::__constant_iterator<_It>, _It, basic_const_iterator<_It>>;\n+\n+  namespace __detail\n+  {\n+    template<typename _Sent>\n+      struct __const_sentinel\n+      { using type = _Sent; };\n+\n+    template<input_iterator _Sent>\n+      struct __const_sentinel<_Sent>\n+      { using type = const_iterator<_Sent>; };\n+  } // namespace __detail\n+\n+  template<semiregular _Sent>\n+    using const_sentinel = typename __detail::__const_sentinel<_Sent>::type;\n+\n+  template<input_iterator _It>\n+  class basic_const_iterator\n+  : public __detail::__basic_const_iterator_iter_cat<_It>\n+  {\n+    _It _M_current = _It();\n+    using __reference = iter_const_reference_t<_It>;\n+    using __rvalue_reference = __detail::__iter_const_rvalue_reference_t<_It>;\n+\n+    static auto\n+    _S_iter_concept()\n+    {\n+      if constexpr (contiguous_iterator<_It>)\n+\treturn contiguous_iterator_tag{};\n+      else if constexpr (random_access_iterator<_It>)\n+\treturn random_access_iterator_tag{};\n+      else if constexpr (bidirectional_iterator<_It>)\n+\treturn bidirectional_iterator_tag{};\n+      else if constexpr (forward_iterator<_It>)\n+\treturn forward_iterator_tag{};\n+      else\n+\treturn input_iterator_tag{};\n+    }\n+\n+    template<input_iterator _It2> friend class basic_const_iterator;\n+\n+  public:\n+    using iterator_concept = decltype(_S_iter_concept());\n+    using value_type = iter_value_t<_It>;\n+    using difference_type = iter_difference_t<_It>;\n+\n+    basic_const_iterator() requires default_initializable<_It> = default;\n+\n+    constexpr\n+    basic_const_iterator(_It __current)\n+    noexcept(is_nothrow_move_constructible_v<_It>)\n+    : _M_current(std::move(__current))\n+    { }\n+\n+    template<convertible_to<_It> _It2>\n+      constexpr\n+      basic_const_iterator(basic_const_iterator<_It2> __current)\n+      noexcept(is_nothrow_constructible_v<_It, _It2>)\n+      : _M_current(std::move(__current._M_current))\n+      { }\n+\n+    template<__detail::__different_from<basic_const_iterator> _Tp>\n+      requires convertible_to<_Tp, _It>\n+      constexpr\n+      basic_const_iterator(_Tp&& __current)\n+      noexcept(is_nothrow_constructible_v<_It, _Tp>)\n+      : _M_current(std::forward<_Tp>(__current))\n+      { }\n+\n+    constexpr const _It&\n+    base() const & noexcept\n+    { return _M_current; }\n+\n+    constexpr _It\n+    base() &&\n+    noexcept(is_nothrow_move_constructible_v<_It>)\n+    { return std::move(_M_current); }\n+\n+    constexpr __reference\n+    operator*() const\n+    noexcept(noexcept(static_cast<__reference>(*_M_current)))\n+    { return static_cast<__reference>(*_M_current); }\n+\n+    constexpr const auto*\n+    operator->() const\n+    noexcept(contiguous_iterator<_It> || noexcept(*_M_current))\n+    requires is_lvalue_reference_v<iter_reference_t<_It>>\n+      && same_as<remove_cvref_t<iter_reference_t<_It>>, value_type>\n+    {\n+      if constexpr (contiguous_iterator<_It>)\n+\treturn std::to_address(_M_current);\n+      else\n+\treturn std::__addressof(*_M_current);\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator++()\n+    noexcept(noexcept(++_M_current))\n+    {\n+      ++_M_current;\n+      return *this;\n+    }\n+\n+    constexpr void\n+    operator++(int)\n+    noexcept(noexcept(++_M_current))\n+    { ++_M_current; }\n+\n+    constexpr basic_const_iterator\n+    operator++(int)\n+    noexcept(noexcept(++*this) && is_nothrow_copy_constructible_v<basic_const_iterator>)\n+    requires forward_iterator<_It>\n+    {\n+      auto __tmp = *this;\n+      ++*this;\n+      return __tmp;\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator--()\n+    noexcept(noexcept(--_M_current))\n+    requires bidirectional_iterator<_It>\n+    {\n+      --_M_current;\n+      return *this;\n+    }\n+\n+    constexpr basic_const_iterator\n+    operator--(int)\n+    noexcept(noexcept(--*this) && is_nothrow_copy_constructible_v<basic_const_iterator>)\n+    requires bidirectional_iterator<_It>\n+    {\n+      auto __tmp = *this;\n+      --*this;\n+      return __tmp;\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator+=(difference_type __n)\n+    noexcept(noexcept(_M_current += __n))\n+    requires random_access_iterator<_It>\n+    {\n+      _M_current += __n;\n+      return *this;\n+    }\n+\n+    constexpr basic_const_iterator&\n+    operator-=(difference_type __n)\n+    noexcept(noexcept(_M_current -= __n))\n+    requires random_access_iterator<_It>\n+    {\n+      _M_current -= __n;\n+      return *this;\n+    }\n+\n+    constexpr __reference\n+    operator[](difference_type __n) const\n+    noexcept(noexcept(static_cast<__reference>(_M_current[__n])))\n+    requires random_access_iterator<_It>\n+    { return static_cast<__reference>(_M_current[__n]); }\n+\n+    template<sentinel_for<_It> _Sent>\n+      constexpr bool\n+      operator==(const _Sent& __s) const\n+      noexcept(noexcept(_M_current == __s))\n+      { return _M_current == __s; }\n+\n+    constexpr bool\n+    operator<(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current < __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current < __y._M_current; }\n+\n+    constexpr bool\n+    operator>(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current > __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current > __y._M_current; }\n+\n+    constexpr bool\n+    operator<=(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current <= __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current <= __y._M_current; }\n+\n+    constexpr bool\n+    operator>=(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current >= __y._M_current))\n+    requires random_access_iterator<_It>\n+    { return _M_current >= __y._M_current; }\n+\n+    constexpr auto\n+    operator<=>(const basic_const_iterator& __y) const\n+    noexcept(noexcept(_M_current <=> __y._M_current))\n+    requires random_access_iterator<_It> && three_way_comparable<_It>\n+    { return _M_current <=> __y._M_current; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator<(const _It2& __y) const\n+      noexcept(noexcept(_M_current < __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current < __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator>(const _It2& __y) const\n+      noexcept(noexcept(_M_current > __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current > __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator<=(const _It2& __y) const\n+      noexcept(noexcept(_M_current <= __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current <= __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr bool\n+      operator>=(const _It2& __y) const\n+      noexcept(noexcept(_M_current >= __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return _M_current >= __y; }\n+\n+    template<__detail::__different_from<basic_const_iterator> _It2>\n+      constexpr auto\n+      operator<=>(const _It2& __y) const\n+      noexcept(noexcept(_M_current <=> __y))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+\t&& three_way_comparable_with<_It, _It2>\n+      { return _M_current <=> __y; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator<(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x < __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x < __y._M_current; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator>(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x > __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x > __y._M_current; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator<=(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x <= __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x <= __y._M_current; }\n+\n+    template<__detail::__not_a_const_iterator _It2>\n+      friend constexpr bool\n+      operator>=(const _It2& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x >= __y._M_current))\n+      requires random_access_iterator<_It> && totally_ordered_with<_It, _It2>\n+      { return __x >= __y._M_current; }\n+\n+    friend constexpr basic_const_iterator\n+    operator+(const basic_const_iterator& __i, difference_type __n)\n+    noexcept(noexcept(basic_const_iterator(__i._M_current + __n)))\n+    requires random_access_iterator<_It>\n+    { return basic_const_iterator(__i._M_current + __n); }\n+\n+    friend constexpr basic_const_iterator\n+    operator+(difference_type __n, const basic_const_iterator& __i)\n+    noexcept(noexcept(basic_const_iterator(__i._M_current + __n)))\n+    requires random_access_iterator<_It>\n+    { return basic_const_iterator(__i._M_current + __n); }\n+\n+    friend constexpr basic_const_iterator\n+    operator-(const basic_const_iterator& __i, difference_type __n)\n+    noexcept(noexcept(basic_const_iterator(__i._M_current - __n)))\n+    requires random_access_iterator<_It>\n+    { return basic_const_iterator(__i._M_current - __n); }\n+\n+    template<sized_sentinel_for<_It> _Sent>\n+      constexpr difference_type\n+      operator-(const _Sent& __y) const\n+      noexcept(noexcept(_M_current - __y))\n+      { return _M_current - __y; }\n+\n+    template<__detail::__not_a_const_iterator _Sent>\n+      requires sized_sentinel_for<_Sent, _It>\n+      friend constexpr difference_type\n+      operator-(const _Sent& __x, const basic_const_iterator& __y)\n+      noexcept(noexcept(__x - __y._M_current))\n+      { return __x - __y._M_current; }\n+\n+    friend constexpr __rvalue_reference\n+    iter_move(const basic_const_iterator& __i)\n+    noexcept(noexcept(static_cast<__rvalue_reference>(ranges::iter_move(__i._M_current))))\n+    { return static_cast<__rvalue_reference>(ranges::iter_move(__i._M_current)); }\n+  };\n+\n+  template<typename _Tp, common_with<_Tp> _Up>\n+    requires input_iterator<common_type_t<_Tp, _Up>>\n+    struct common_type<basic_const_iterator<_Tp>, _Up>\n+    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };\n+\n+  template<typename _Tp, common_with<_Tp> _Up>\n+    requires input_iterator<common_type_t<_Tp, _Up>>\n+    struct common_type<_Up, basic_const_iterator<_Tp>>\n+    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };\n+\n+  template<typename _Tp, common_with<_Tp> _Up>\n+    requires input_iterator<common_type_t<_Tp, _Up>>\n+    struct common_type<basic_const_iterator<_Tp>, basic_const_iterator<_Up>>\n+    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };\n+\n+  template<input_iterator _It>\n+    constexpr const_iterator<_It>\n+    make_const_iterator(_It __it)\n+    noexcept(is_nothrow_convertible_v<_It, const_iterator<_It>>)\n+    { return __it; }\n+\n+  template<semiregular _Sent>\n+    constexpr const_sentinel<_Sent>\n+    make_const_sentinel(_Sent __s)\n+    noexcept(is_nothrow_convertible_v<_Sent, const_sentinel<_Sent>>)\n+    { return __s; }\n+#endif // C++23\n #endif // C++20\n \n   /// @} group iterators"}, {"sha": "1f63c61ce85a891522ec8703e8921b23867deeac", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1512,9 +1512,14 @@ namespace ip\n \n       // constructors:\n \n-      constexpr\n+      _GLIBCXX20_CONSTEXPR\n       basic_endpoint() noexcept : _M_data()\n-      { _M_data._M_v4.sin_family = protocol_type::v4().family(); }\n+      {\n+\t_M_data._M_v4.sin_family = protocol_type::v4().family();\n+\t// If in_addr contains a union, make the correct member active:\n+\tif (std::__is_constant_evaluated())\n+\t  std::_Construct(&_M_data._M_v4.sin_addr.s_addr);\n+      }\n \n       _GLIBCXX20_CONSTEXPR\n       basic_endpoint(const protocol_type& __proto,\n@@ -1523,19 +1528,25 @@ namespace ip\n       {\n \tif (__proto == protocol_type::v4())\n \t  {\n-\t    _M_data._M_v4.sin_family = __proto.family();\n+\t    _M_data._M_v4.sin_family = protocol_type::v4().family();\n \t    _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n+\t    if (std::__is_constant_evaluated())\n+\t      std::_Construct(&_M_data._M_v4.sin_addr.s_addr);\n \t  }\n \telse if (__proto == protocol_type::v6())\n \t  {\n \t    std::_Construct(&_M_data._M_v6);\n \t    _M_data._M_v6.sin6_family = __proto.family();\n \t    _M_data._M_v6.sin6_port = address_v4::_S_hton_16(__port_num);\n+\t    _M_data._M_v6.sin6_scope_id = 0;\n+\t    if (std::__is_constant_evaluated())\n+\t      std::_Construct(&_M_data._M_v6.sin6_addr.s6_addr);\n \t  }\n \telse\n \t  {\n \t    __glibcxx_assert(__proto == protocol_type::v4()\n \t\t\t       || __proto == protocol_type::v6());\n+\n \t  }\n       }\n \n@@ -1548,13 +1559,16 @@ namespace ip\n \t  {\n \t    _M_data._M_v4.sin_family = protocol_type::v4().family();\n \t    _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n-\t    _M_data._M_v4.sin_addr.s_addr = __addr._M_v4._M_addr;\n+\t    std::_Construct(&_M_data._M_v4.sin_addr.s_addr,\n+\t\t\t    __addr._M_v4._M_addr);\n \t  }\n \telse\n \t  {\n \t    std::_Construct(&_M_data._M_v6);\n \t    _M_data._M_v6.sin6_family = protocol_type::v6().family();\n \t    _M_data._M_v6.sin6_port = address_v4::_S_hton_16(__port_num);\n+\t    if (std::__is_constant_evaluated())\n+\t      std::_Construct(&_M_data._M_v6.sin6_addr.s6_addr);\n \t    uint8_t* __s6a = _M_data._M_v6.sin6_addr.s6_addr;\n \t    for (int __i = 0; __i < 16; ++__i)\n \t      __s6a[__i] = __addr._M_v6._M_bytes[__i];"}, {"sha": "e4ef4f9b6d93535ebcdef6e6c3a2f852ee410d49", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -137,7 +137,7 @@ namespace __format\n   template<typename _Tp, typename _CharT = char>\n     struct formatter\n     {\n-      formatter() = delete;\n+      formatter() = delete; // No std::formatter specialization for this type.\n       formatter(const formatter&) = delete;\n       formatter& operator=(const formatter&) = delete;\n     };\n@@ -3560,6 +3560,10 @@ namespace __format\n   template<typename _CharT, typename... _Args>\n     class _Checking_scanner : public _Scanner<_CharT>\n     {\n+      static_assert(\n+\t(is_default_constructible_v<formatter<_Args, _CharT>> && ...),\n+\t\"std::formatter must be specialized for each type being formatted\");\n+\n     public:\n       constexpr\n       _Checking_scanner(basic_string_view<_CharT> __str)\n@@ -3581,17 +3585,17 @@ namespace __format\n \t__builtin_unreachable();\n       }\n \n-      template<typename _Head, typename... _Tail>\n+      template<typename _Tp, typename... _OtherArgs>\n \tconstexpr void\n \t_M_parse_format_spec(size_t __id)\n \t{\n \t  if (__id == 0)\n \t    {\n-\t      formatter<_Head, _CharT> __f;\n+\t      formatter<_Tp, _CharT> __f;\n \t      this->_M_pc.advance_to(__f.parse(this->_M_pc));\n \t    }\n-\t  else if constexpr (sizeof...(_Tail) != 0)\n-\t    _M_parse_format_spec<_Tail...>(__id - 1);\n+\t  else if constexpr (sizeof...(_OtherArgs) != 0)\n+\t    _M_parse_format_spec<_OtherArgs...>(__id - 1);\n \t  else\n \t    __builtin_unreachable();\n \t}"}, {"sha": "283d757faa44ef5bc1b6774de8ef287278eea944", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 415, "deletions": 5, "changes": 420, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -3209,7 +3209,8 @@ namespace views::__adaptor\n \t  _OuterIter(_OuterIter<!_Const> __i)\n \t    requires _Const\n \t      && convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n-\t    : _M_parent(__i._M_parent), _M_current(std::move(__i._M_current))\n+\t    : _M_parent(__i._M_parent), _M_current(std::move(__i._M_current)),\n+\t      _M_trailing_empty(__i._M_trailing_empty)\n \t  { }\n \n \t  constexpr value_type\n@@ -6742,8 +6743,8 @@ namespace views::__adaptor\n     _M_find_next(iterator_t<_Vp> __current)\n     {\n       __glibcxx_assert(_M_pred.has_value());\n-      auto __pred = [this]<typename _Tp>(_Tp&& __x, _Tp&& __y) {\n-\treturn !bool((*_M_pred)(std::forward<_Tp>(__x), std::forward<_Tp>(__y)));\n+      auto __pred = [this]<typename _Tp, typename _Up>(_Tp&& __x, _Up&& __y) {\n+\treturn !bool((*_M_pred)(std::forward<_Tp>(__x), std::forward<_Up>(__y)));\n       };\n       auto __it = ranges::adjacent_find(__current, ranges::end(_M_base), __pred);\n       return ranges::next(__it, 1, ranges::end(_M_base));\n@@ -6753,8 +6754,8 @@ namespace views::__adaptor\n     _M_find_prev(iterator_t<_Vp> __current) requires bidirectional_range<_Vp>\n     {\n       __glibcxx_assert(_M_pred.has_value());\n-      auto __pred = [this]<typename _Tp>(_Tp&& __x, _Tp&& __y) {\n-\treturn !bool((*_M_pred)(std::forward<_Tp>(__y), std::forward<_Tp>(__x)));\n+      auto __pred = [this]<typename _Tp, typename _Up>(_Tp&& __x, _Up&& __y) {\n+\treturn !bool((*_M_pred)(std::forward<_Up>(__y), std::forward<_Tp>(__x)));\n       };\n       auto __rbegin = std::make_reverse_iterator(__current);\n       auto __rend = std::make_reverse_iterator(ranges::begin(_M_base));\n@@ -8625,6 +8626,415 @@ namespace views::__adaptor\n \n     inline constexpr _AsRvalue as_rvalue;\n   }\n+\n+#define __cpp_lib_ranges_enumerate 202302L\n+\n+  namespace __detail\n+  {\n+    template<typename _Range>\n+      concept __range_with_movable_reference = input_range<_Range>\n+\t&& move_constructible<range_reference_t<_Range>>\n+\t&& move_constructible<range_rvalue_reference_t<_Range>>;\n+  }\n+\n+  template<view _Vp>\n+    requires __detail::__range_with_movable_reference<_Vp>\n+  class enumerate_view : public view_interface<enumerate_view<_Vp>>\n+  {\n+    _Vp _M_base = _Vp();\n+\n+    template<bool _Const> class _Iterator;\n+    template<bool _Const> class _Sentinel;\n+\n+  public:\n+    enumerate_view() requires default_initializable<_Vp> = default;\n+\n+    constexpr explicit\n+    enumerate_view(_Vp __base)\n+    : _M_base(std::move(__base))\n+    { }\n+\n+    constexpr auto\n+    begin() requires (!__detail::__simple_view<_Vp>)\n+    { return _Iterator<false>(ranges::begin(_M_base), 0); }\n+\n+    constexpr auto\n+    begin() const requires __detail::__range_with_movable_reference<const _Vp>\n+    { return _Iterator<true>(ranges::begin(_M_base), 0); }\n+\n+    constexpr auto\n+    end() requires (!__detail::__simple_view<_Vp>)\n+    {\n+      if constexpr (common_range<_Vp> && sized_range<_Vp>)\n+\treturn _Iterator<false>(ranges::end(_M_base), ranges::distance(_M_base));\n+      else\n+\treturn _Sentinel<false>(ranges::end(_M_base));\n+    }\n+\n+    constexpr auto\n+    end() const requires __detail::__range_with_movable_reference<const _Vp>\n+    {\n+      if constexpr (common_range<const _Vp> && sized_range<const _Vp>)\n+\treturn _Iterator<true>(ranges::end(_M_base), ranges::distance(_M_base));\n+      else\n+\treturn _Sentinel<true>(ranges::end(_M_base));\n+    }\n+\n+    constexpr auto\n+    size() requires sized_range<_Vp>\n+    { return ranges::size(_M_base); }\n+\n+    constexpr auto\n+    size() const requires sized_range<const _Vp>\n+    { return ranges::size(_M_base); }\n+\n+    constexpr _Vp\n+    base() const & requires copy_constructible<_Vp>\n+    { return _M_base; }\n+\n+    constexpr _Vp\n+    base() &&\n+    { return std::move(_M_base); }\n+  };\n+\n+  template<typename _Range>\n+    enumerate_view(_Range&&) -> enumerate_view<views::all_t<_Range>>;\n+\n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<enumerate_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n+  template<view _Vp>\n+  requires __detail::__range_with_movable_reference<_Vp>\n+  template<bool _Const>\n+  class enumerate_view<_Vp>::_Iterator\n+  {\n+    using _Base = __maybe_const_t<_Const, _Vp>;\n+\n+    static auto\n+    _S_iter_concept()\n+    {\n+      if constexpr (random_access_range<_Base>)\n+\treturn random_access_iterator_tag{};\n+      else if constexpr (bidirectional_range<_Base>)\n+\treturn bidirectional_iterator_tag{};\n+      else if constexpr (forward_range<_Base>)\n+\treturn forward_iterator_tag{};\n+      else\n+\treturn input_iterator_tag{};\n+    }\n+\n+    friend enumerate_view;\n+\n+  public:\n+    using iterator_category = input_iterator_tag;\n+    using iterator_concept = decltype(_S_iter_concept());\n+    using difference_type = range_difference_t<_Base>;\n+    using value_type = tuple<difference_type, range_value_t<_Base>>;\n+\n+  private:\n+    using __reference_type = tuple<difference_type, range_reference_t<_Base>>;\n+\n+    iterator_t<_Base> _M_current = iterator_t<_Base>();\n+    difference_type _M_pos = 0;\n+\n+    constexpr explicit\n+    _Iterator(iterator_t<_Base> __current, difference_type __pos)\n+    : _M_current(std::move(__current)), _M_pos(__pos)\n+    { }\n+\n+  public:\n+    _Iterator() requires default_initializable<iterator_t<_Base>> = default;\n+\n+    constexpr\n+    _Iterator(_Iterator<!_Const> __i)\n+    requires _Const && convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n+    : _M_current(std::move(__i._M_current)), _M_pos(__i._M_pos)\n+    { }\n+\n+    constexpr const iterator_t<_Base> &\n+    base() const & noexcept\n+    { return _M_current; }\n+\n+    constexpr iterator_t<_Base>\n+    base() &&\n+    { return std::move(_M_current); }\n+\n+    constexpr difference_type\n+    index() const noexcept\n+    { return _M_pos; }\n+\n+    constexpr auto\n+    operator*() const\n+    { return __reference_type(_M_pos, *_M_current); }\n+\n+    constexpr _Iterator&\n+    operator++()\n+    {\n+      ++_M_current;\n+      ++_M_pos;\n+      return *this;\n+    }\n+\n+    constexpr void\n+    operator++(int)\n+    { ++*this; }\n+\n+    constexpr _Iterator\n+    operator++(int) requires forward_range<_Base>\n+    {\n+      auto __tmp = *this;\n+      ++*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator--() requires bidirectional_range<_Base>\n+    {\n+      --_M_current;\n+      --_M_pos;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator\n+    operator--(int) requires bidirectional_range<_Base>\n+    {\n+      auto __tmp = *this;\n+      --*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator+=(difference_type __n) requires random_access_range<_Base>\n+    {\n+      _M_current += __n;\n+      _M_pos += __n;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator&\n+    operator-=(difference_type __n) requires random_access_range<_Base>\n+    {\n+      _M_current -= __n;\n+      _M_pos -= __n;\n+      return *this;\n+    }\n+\n+    constexpr auto\n+    operator[](difference_type __n) const requires random_access_range<_Base>\n+    { return __reference_type(_M_pos + __n, _M_current[__n]); }\n+\n+    friend constexpr bool\n+    operator==(const _Iterator& __x, const _Iterator& __y) noexcept\n+    { return __x._M_pos == __y._M_pos; }\n+\n+    friend constexpr strong_ordering\n+    operator<=>(const _Iterator& __x, const _Iterator& __y) noexcept\n+    { return __x._M_pos <=> __y._M_pos; }\n+\n+    friend constexpr _Iterator\n+    operator+(const _Iterator& __x, difference_type __y)\n+    requires random_access_range<_Base>\n+    { return (auto(__x) += __y); }\n+\n+    friend constexpr _Iterator\n+    operator+(difference_type __x, const _Iterator& __y)\n+    requires random_access_range<_Base>\n+    { return auto(__y) += __x; }\n+\n+    friend constexpr _Iterator\n+    operator-(const _Iterator& __x, difference_type __y)\n+    requires random_access_range<_Base>\n+    { return auto(__x) -= __y; }\n+\n+    friend constexpr difference_type\n+    operator-(const _Iterator& __x, const _Iterator& __y)\n+    { return __x._M_pos - __y._M_pos; }\n+\n+    friend constexpr auto\n+    iter_move(const _Iterator& __i)\n+    noexcept(noexcept(ranges::iter_move(__i._M_current))\n+\t     && is_nothrow_move_constructible_v<range_rvalue_reference_t<_Base>>)\n+    {\n+      return tuple<difference_type, range_rvalue_reference_t<_Base>>\n+\t(__i._M_pos, ranges::iter_move(__i._M_current));\n+    }\n+  };\n+\n+  template<view _Vp>\n+  requires __detail::__range_with_movable_reference<_Vp>\n+  template<bool _Const>\n+  class enumerate_view<_Vp>::_Sentinel\n+  {\n+    using _Base = __maybe_const_t<_Const, _Vp>;\n+\n+    sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n+\n+    constexpr explicit\n+    _Sentinel(sentinel_t<_Base> __end)\n+    : _M_end(std::move(__end))\n+    { }\n+\n+    friend enumerate_view;\n+\n+  public:\n+    _Sentinel() = default;\n+\n+    constexpr\n+    _Sentinel(_Sentinel<!_Const> __other)\n+    requires _Const && convertible_to<sentinel_t<_Vp>, sentinel_t<_Base>>\n+    : _M_end(std::move(__other._M_end))\n+    { }\n+\n+    constexpr sentinel_t<_Base>\n+    base() const\n+    { return _M_end; }\n+\n+    template<bool _OtherConst>\n+    requires sentinel_for<sentinel_t<_Base>, iterator_t<__maybe_const_t<_OtherConst, _Vp>>>\n+    friend constexpr bool\n+    operator==(const _Iterator<_OtherConst>& __x, const _Sentinel& __y)\n+    { return __x._M_current == __y._M_end; }\n+\n+    template<bool _OtherConst>\n+    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<__maybe_const_t<_OtherConst, _Vp>>>\n+    friend constexpr range_difference_t<__maybe_const_t<_OtherConst, _Vp>>\n+    operator-(const _Iterator<_OtherConst>& __x, const _Sentinel& __y)\n+    { return __x._M_current - __y._M_end; }\n+\n+    template<bool _OtherConst>\n+    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<__maybe_const_t<_OtherConst, _Vp>>>\n+    friend constexpr range_difference_t<__maybe_const_t<_OtherConst, _Vp>>\n+    operator-(const _Sentinel& __x, const _Iterator<_OtherConst>& __y)\n+    { return __x._M_end - __y._M_current; }\n+  };\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Tp>\n+\tconcept __can_enumerate_view\n+\t  = requires { enumerate_view<all_t<_Tp>>(std::declval<_Tp>()); };\n+    }\n+\n+    struct _Enumerate : __adaptor::_RangeAdaptorClosure\n+    {\n+      template<viewable_range _Range>\n+\trequires __detail::__can_enumerate_view<_Range>\n+\tconstexpr auto\n+\toperator() [[nodiscard]] (_Range&& __r) const\n+\t{ return enumerate_view<all_t<_Range>>(std::forward<_Range>(__r)); }\n+    };\n+\n+    inline constexpr _Enumerate enumerate;\n+  }\n+\n+#define __cpp_lib_ranges_as_const 202207L\n+\n+  template<view _Vp>\n+    requires input_range<_Vp>\n+  class as_const_view : public view_interface<as_const_view<_Vp>>\n+  {\n+    _Vp _M_base = _Vp();\n+\n+  public:\n+    as_const_view() requires default_initializable<_Vp> = default;\n+\n+    constexpr explicit\n+    as_const_view(_Vp __base)\n+    noexcept(is_nothrow_move_constructible_v<_Vp>)\n+    : _M_base(std::move(__base))\n+    { }\n+\n+    constexpr _Vp\n+    base() const &\n+    noexcept(is_nothrow_copy_constructible_v<_Vp>)\n+    requires copy_constructible<_Vp>\n+    { return _M_base; }\n+\n+    constexpr _Vp\n+    base() &&\n+    noexcept(is_nothrow_move_constructible_v<_Vp>)\n+    { return std::move(_M_base); }\n+\n+    constexpr auto\n+    begin() requires (!__detail::__simple_view<_Vp>)\n+    { return ranges::cbegin(_M_base); }\n+\n+    constexpr auto\n+    begin() const requires range<const _Vp>\n+    { return ranges::cbegin(_M_base); }\n+\n+    constexpr auto\n+    end() requires (!__detail::__simple_view<_Vp>)\n+    { return ranges::cend(_M_base); }\n+\n+    constexpr auto\n+    end() const requires range<const _Vp>\n+    { return ranges::cend(_M_base); }\n+\n+    constexpr auto\n+    size() requires sized_range<_Vp>\n+    { return ranges::size(_M_base); }\n+\n+    constexpr auto\n+    size() const requires sized_range<const _Vp>\n+    { return ranges::size(_M_base); }\n+  };\n+\n+  template<typename _Range>\n+    as_const_view(_Range&&) -> as_const_view<views::all_t<_Range>>;\n+\n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<as_const_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Tp>\n+\tinline constexpr bool __is_ref_view = false;\n+\n+      template<typename _Range>\n+\tinline constexpr bool __is_ref_view<ref_view<_Range>> = true;\n+\n+      template<typename _Range>\n+\tconcept __can_as_const_view = requires { as_const_view(std::declval<_Range>()); };\n+    }\n+\n+    struct _AsConst : __adaptor::_RangeAdaptorClosure\n+    {\n+      template<viewable_range _Range>\n+      constexpr auto\n+      operator()(_Range&& __r) const\n+      noexcept(noexcept(as_const_view(std::declval<_Range>())))\n+      requires __detail::__can_as_const_view<_Range>\n+      {\n+\tusing _Tp = remove_cvref_t<_Range>;\n+\tusing element_type = remove_reference_t<range_reference_t<_Range>>;\n+\tif constexpr (constant_range<views::all_t<_Range>>)\n+\t  return views::all(std::forward<_Range>(__r));\n+\telse if constexpr (__detail::__is_empty_view<_Tp>)\n+\t  return views::empty<const element_type>;\n+\telse if constexpr (std::__detail::__is_span<_Tp>)\n+\t  return span<const element_type, _Tp::extent>(std::forward<_Range>(__r));\n+\telse if constexpr (__detail::__is_ref_view<_Tp>\n+\t\t\t   && constant_range<const element_type>)\n+\t  return ref_view(static_cast<const element_type&>\n+\t\t\t  (std::forward<_Range>(__r).base()));\n+\telse if constexpr (is_lvalue_reference_v<_Range>\n+\t\t\t   && constant_range<_Tp>\n+\t\t\t   && !view<_Tp>)\n+\t  return ref_view(static_cast<const _Tp&>(__r));\n+\telse\n+\t  return as_const_view(std::forward<_Range>(__r));\n+      }\n+    };\n+\n+    inline constexpr _AsConst as_const;\n+  }\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "6763389966503113f41fb9bcc545f34a9d474b17", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -137,6 +137,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using const_reference        = const element_type&;\n       using iterator = __gnu_cxx::__normal_iterator<pointer, span>;\n       using reverse_iterator       = std::reverse_iterator<iterator>;\n+#if __cplusplus > 202002L\n+      using const_iterator         = std::const_iterator<iterator>;\n+      using const_reverse_iterator = std::const_iterator<reverse_iterator>;\n+#endif\n \n       // member constants\n       static constexpr size_t extent = _Extent;\n@@ -301,6 +305,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       rend() const noexcept\n       { return reverse_iterator(this->begin()); }\n \n+#if __cplusplus > 202002L\n+      constexpr const_iterator\n+      cbegin() const noexcept\n+      { return begin(); }\n+\n+      constexpr const_iterator\n+      cend() const noexcept\n+      { return end(); }\n+\n+      constexpr const_reverse_iterator\n+      crbegin() const noexcept\n+      { return rbegin(); }\n+\n+      constexpr const_reverse_iterator\n+      crend() const noexcept\n+      { return rend(); }\n+#endif\n+\n       // subviews\n \n       template<size_t _Count>"}, {"sha": "9f31f25f1e9c62d597e6e2a0f1f9eb03ed573178", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -339,6 +339,9 @@\n #define __cpp_lib_ranges_stride 202207L\n #define __cpp_lib_ranges_cartesian_product 202207L\n #define __cpp_lib_ranges_as_rvalue 202207L\n+#define __cpp_lib_ranges_as_const 202207L\n+#define __cpp_lib_ranges_enumerate 202302L\n+#define __cpp_lib_fold 202207L\n #if __cpp_constexpr_dynamic_alloc\n # if _GLIBCXX_HOSTED\n #  define __cpp_lib_constexpr_bitset 202202L"}, {"sha": "3a411cf546a2f496c2675c05f9eb701378cf9e5c", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -30,14 +30,18 @@\n // Prefer to use std::pmr::string if possible, which requires the cxx11 ABI.\n #define _GLIBCXX_USE_CXX11_ABI 1\n \n+#include <algorithm>\n #include <array>\n #include <charconv>\n #include <bit>\n+#include <iterator>\n+#include <limits>\n #include <string>\n #include <memory_resource>\n #include <cfenv>\n #include <cfloat>\n #include <cmath>\n+#include <cstdint>\n #include <cstdlib>\n #include <cstring>\n #include <locale.h>"}, {"sha": "b522e39532677a507e599d2c2edcd171f0b314f5", "filename": "libstdc++-v3/src/c++20/tzdata.zi", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdata.zi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdata.zi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdata.zi?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,4 @@\n-# version 2023b\n+# version 2023c\n # This zic input file is in the public domain.\n R d 1916 o - Jun 14 23s 1 S\n R d 1916 1919 - O Su>=1 23s 0 -\n@@ -920,11 +920,9 @@ R l 1988 o - Jun 1 0 1 S\n R l 1989 o - May 10 0 1 S\n R l 1990 1992 - May 1 0 1 S\n R l 1992 o - O 4 0 0 -\n-R l 1993 2022 - Mar lastSu 0 1 S\n+R l 1993 ma - Mar lastSu 0 1 S\n R l 1993 1998 - S lastSu 0 0 -\n R l 1999 ma - O lastSu 0 0 -\n-R l 2023 o - Ap 21 0 1 S\n-R l 2024 ma - Mar lastSu 0 1 S\n Z Asia/Beirut 2:22 - LMT 1880\n 2 l EE%sT\n R NB 1935 1941 - S 14 0 0:20 -"}, {"sha": "eb4d064177c8b5bda6a05e7b032486efa7c24dc9", "filename": "libstdc++-v3/testsuite/17_intro/names.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -243,6 +243,8 @@\n #undef v\n // <sys/timer.h> defines trb::func and cputime_tmr::func\n #undef func\n+// <sys/thread.h> defines tstate::policy\n+#undef policy\n #endif\n \n #ifdef __APPLE__"}, {"sha": "bd7c6ce3d9e35eb581ce181412991c72f3faa731", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/lwg3629.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -3,18 +3,18 @@\n // 3629. make_error_code and make_error_condition are customization points\n // Verify that make_error_code is looked up using ADL only.\n \n-namespace user\n+namespace User\n {\n   struct E1;\n }\n \n // N.B. not in associated namespace of E1, and declared before <system_error>.\n-user::E1 make_error_code(user::E1);\n+User::E1 make_error_code(User::E1);\n \n #include <future> // declares std::make_error_code(future_errc)\n #include <system_error>\n \n-namespace user\n+namespace User\n {\n   struct E1\n   {\n@@ -32,17 +32,17 @@ namespace user\n   };\n }\n \n-template<> struct std::is_error_code_enum<user::E1> : std::true_type { };\n-template<> struct std::is_error_code_enum<user::E2> : std::true_type { };\n-template<> struct std::is_error_code_enum<user::E3> : std::true_type { };\n+template<> struct std::is_error_code_enum<User::E1> : std::true_type { };\n+template<> struct std::is_error_code_enum<User::E2> : std::true_type { };\n+template<> struct std::is_error_code_enum<User::E3> : std::true_type { };\n \n // ::make_error_code(E1) should not be found by name lookup.\n-std::error_code e1( user::E1{} ); // { dg-error \"here\" }\n+std::error_code e1( User::E1{} ); // { dg-error \"here\" }\n \n // std::make_error_code(future_errc) should not be found by name lookup.\n-std::error_code e2( user::E2{} ); // { dg-error \"here\" }\n+std::error_code e2( User::E2{} ); // { dg-error \"here\" }\n \n // std::make_error_code(errc) should not be found by name lookup.\n-std::error_code e3( user::E3{} ); // { dg-error \"here\" }\n+std::error_code e3( User::E3{} ); // { dg-error \"here\" }\n \n // { dg-error \"use of deleted function\" \"\" { target *-*-* } 0 }"}, {"sha": "d72163b1a073f5362a4c65f0c78a31463977a62b", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/lwg3629.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -3,18 +3,18 @@\n // 3629. make_error_code and make_error_condition are customization points\n // Verify that make_error_condition is looked up using ADL only.\n \n-namespace user\n+namespace User\n {\n   struct E1;\n }\n \n // N.B. not in associated namespace of E1, and declared before <system_error>.\n-user::E1 make_error_condition(user::E1);\n+User::E1 make_error_condition(User::E1);\n \n #include <future> // declares std::make_error_condition(future_errc)\n #include <system_error>\n \n-namespace user\n+namespace User\n {\n   struct E1\n   {\n@@ -32,17 +32,17 @@ namespace user\n   };\n }\n \n-template<> struct std::is_error_condition_enum<user::E1> : std::true_type { };\n-template<> struct std::is_error_condition_enum<user::E2> : std::true_type { };\n-template<> struct std::is_error_condition_enum<user::E3> : std::true_type { };\n+template<> struct std::is_error_condition_enum<User::E1> : std::true_type { };\n+template<> struct std::is_error_condition_enum<User::E2> : std::true_type { };\n+template<> struct std::is_error_condition_enum<User::E3> : std::true_type { };\n \n // ::make_error_condition(E1) should not be found by name lookup.\n-std::error_condition e1( user::E1{} ); // { dg-error \"here\" }\n+std::error_condition e1( User::E1{} ); // { dg-error \"here\" }\n \n // std::make_error_condition(future_errc) should not be found by name lookup.\n-std::error_condition e2( user::E2{} ); // { dg-error \"here\" }\n+std::error_condition e2( User::E2{} ); // { dg-error \"here\" }\n \n // std::make_error_condition(errc) should not be found by name lookup.\n-std::error_condition e3( user::E3{} ); // { dg-error \"here\" }\n+std::error_condition e3( User::E3{} ); // { dg-error \"here\" }\n \n // { dg-error \"use of deleted function\" \"\" { target *-*-* } 0 }"}, {"sha": "c6d50c20fbf6593a340e7e818eac9533e5295fcb", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F96088.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "214bc91a559a0c5995d8a494c2bb212b18c8a349", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F96088.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "838ce8d5bc531767b1c1533d068b13f41540c897", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F96088.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "0f7dce2b38c52f52cc6edb96d0b8dec75e191bba", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/96088.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F96088.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++17 } }\n // { dg-require-effective-target std_allocator_new }\n+// { dg-xfail-run-if \"AIX operator new\" { powerpc-ibm-aix* } }\n \n // Copyright (C) 2021-2023 Free Software Foundation, Inc.\n //"}, {"sha": "51befd29541023d08118bc3a7c17fca933c03a4c", "filename": "libstdc++-v3/testsuite/24_iterators/const_iterator/1.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fconst_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fconst_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fconst_iterator%2F1.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,140 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <iterator>\n+#include <array>\n+#include <concepts>\n+#include <string_view>\n+#include <vector>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_input_range;\n+using __gnu_test::test_forward_range;\n+using __gnu_test::test_bidirectional_range;\n+using __gnu_test::test_random_access_range;\n+\n+namespace ranges = std::ranges;\n+\n+template<class Iter, bool Const>\n+void\n+test01()\n+{\n+  if constexpr (Const)\n+    {\n+      static_assert( std::same_as<std::const_iterator<Iter>, Iter> );\n+      static_assert( std::same_as<std::const_sentinel<Iter>, Iter> );\n+      static_assert( std::same_as<std::iter_const_reference_t<Iter>,\n+\t\t\t\t std::iter_reference_t<Iter>> );\n+    }\n+  else\n+    {\n+      using Wrapped = std::basic_const_iterator<Iter>;\n+\n+      static_assert( std::same_as<std::const_iterator<Iter>, Wrapped> );\n+      static_assert( std::same_as<std::const_sentinel<Iter>, Wrapped> );\n+      static_assert( std::same_as<std::iter_const_reference_t<Iter>,\n+\t\t\t\t std::iter_reference_t<Wrapped>> );\n+\n+      static_assert( std::input_iterator<Iter> == std::input_iterator<Wrapped> );\n+      static_assert( std::forward_iterator<Iter> == std::forward_iterator<Wrapped> );\n+      static_assert( std::bidirectional_iterator<Iter> == std::bidirectional_iterator<Wrapped> );\n+      static_assert( std::random_access_iterator<Iter> == std::random_access_iterator<Wrapped> );\n+    }\n+}\n+\n+template<class Range, bool Const>\n+void\n+test02()\n+{\n+  if constexpr (Const)\n+    {\n+      static_assert( ranges::constant_range<Range> );\n+      static_assert( std::same_as<ranges::const_iterator_t<Range>, ranges::iterator_t<Range>> );\n+      static_assert( std::same_as<ranges::const_sentinel_t<Range>, ranges::sentinel_t<Range>> );\n+      static_assert( std::same_as<ranges::range_const_reference_t<Range>,\n+\t\t\t\t ranges::range_reference_t<Range>> );\n+\n+      static_assert( std::same_as<decltype(ranges::cbegin(std::declval<Range&>())),\n+\t\t\t\t decltype(ranges::begin(std::declval<Range&>()))> );\n+      static_assert( std::same_as<decltype(ranges::cend(std::declval<Range&>())),\n+\t\t\t\t decltype(ranges::end(std::declval<Range&>()))> );\n+    }\n+  else\n+    {\n+      static_assert( !ranges::constant_range<Range> );\n+      using Wrapped = std::basic_const_iterator<ranges::iterator_t<Range>>;\n+\n+      static_assert( std::same_as<ranges::const_iterator_t<Range>, Wrapped> );\n+      if constexpr (ranges::common_range<Range>)\n+\tstatic_assert( std::same_as<ranges::const_sentinel_t<Range>, Wrapped> );\n+      static_assert( std::same_as<ranges::range_const_reference_t<Range>,\n+\t\t\t\t std::iter_reference_t<Wrapped>> );\n+\n+      static_assert( ranges::input_range<Range> == std::input_iterator<Wrapped> );\n+      static_assert( ranges::forward_range<Range> == std::forward_iterator<Wrapped> );\n+      static_assert( ranges::bidirectional_range<Range> == std::bidirectional_iterator<Wrapped> );\n+      static_assert( ranges::random_access_range<Range> == std::random_access_iterator<Wrapped> );\n+\n+      if constexpr (ranges::constant_range<const Range&>)\n+\t{\n+\t  static_assert( std::same_as<decltype(ranges::cbegin(std::declval<Range&>())),\n+\t\t\t\t     decltype(ranges::begin(std::declval<const Range&>()))> );\n+\t  static_assert( std::same_as<decltype(ranges::cend(std::declval<Range&>())),\n+\t\t\t\t     decltype(ranges::end(std::declval<const Range&>()))> );\n+\t}\n+      else\n+\t{\n+\t  static_assert( std::same_as<decltype(ranges::cbegin(std::declval<Range&>())), Wrapped> );\n+\t  if constexpr (ranges::common_range<Range>)\n+\t    static_assert( std::same_as<decltype(ranges::cend(std::declval<Range&>())), Wrapped> );\n+\t}\n+    }\n+}\n+\n+void\n+test03()\n+{\n+  static_assert( std::same_as<std::const_sentinel<std::unreachable_sentinel_t>,\n+\t\t\t     std::unreachable_sentinel_t> );\n+}\n+\n+int\n+main()\n+{\n+  test01<int*, false>();\n+  test01<ranges::iterator_t<test_input_range<int>>, false>();\n+  test01<ranges::iterator_t<test_forward_range<int>>, false>();\n+  test01<ranges::iterator_t<test_bidirectional_range<int>>, false>();\n+  test01<ranges::iterator_t<test_random_access_range<int>>, false>();\n+  test01<std::array<int, 3>::iterator, false>();\n+  test01<std::vector<bool>::iterator, false>();\n+\n+  test01<const int*, true>();\n+  test01<ranges::iterator_t<test_input_range<const int>>, true>();\n+  test01<ranges::iterator_t<test_forward_range<const int>>, true>();\n+  test01<ranges::iterator_t<test_bidirectional_range<const int>>, true>();\n+  test01<ranges::iterator_t<test_random_access_range<const int>>, true>();\n+  test01<std::array<const int, 3>::iterator, true>();\n+  test01<std::string_view::iterator, true>();\n+  test01<std::vector<bool>::const_iterator, true>();\n+\n+  test02<int[42], false>();\n+  test02<test_input_range<int>, false>();\n+  test02<test_forward_range<int>, false>();\n+  test02<test_bidirectional_range<int>, false>();\n+  test02<test_random_access_range<int>, false>();\n+  test02<std::array<int, 3>, false>();\n+  test02<std::vector<bool>, false>();\n+\n+  test02<const int[42], true>();\n+  test02<test_input_range<const int>, true>();\n+  test02<test_forward_range<const int>, true>();\n+  test02<test_bidirectional_range<const int>, true>();\n+  test02<test_random_access_range<const int>, true>();\n+  test02<std::array<const int, 3>, true>();\n+  test02<const std::array<int, 3>, true>();\n+  test02<std::string_view, true>();\n+  test02<const std::vector<bool>, true>();\n+\n+  test03();\n+}"}, {"sha": "5cc91b67d27dbb523692d9a9bc861b7551ebe0f6", "filename": "libstdc++-v3/testsuite/25_algorithms/fold_left/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffold_left%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffold_left%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffold_left%2F1.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <algorithm>\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+\n+#if __cpp_lib_fold != 202207L\n+# error \"Feature-test macro __cpp_lib_fold has wrong value in <algorithm>\"\n+#endif\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+  int x[] = {1, 2, 3, 4, 5};\n+  auto f = [](int&& acc, int& x) {\n+    return 2 * acc + x;\n+  };\n+  VERIFY( ranges::fold_left(x, 0, f) == 57 );\n+  VERIFY( ranges::fold_left(x, 1, f) == 89 );\n+  VERIFY( ranges::fold_left(x+0, x+0, 1, f) == 1 );\n+\n+  VERIFY( ranges::fold_left_first(x, f).value() == 57 );\n+  VERIFY( !ranges::fold_left_first(x+0, x+0, f).has_value() );\n+\n+  return true;\n+}\n+\n+void\n+test02()\n+{\n+  int x[] = {1, 2, 3, 4, 5};\n+  auto f = [](int&& acc, int& x) {\n+    return 2 * acc + x;\n+  };\n+\n+  __gnu_test::test_input_range<int> rx(x);\n+  ranges::in_value_result ivr = ranges::fold_left_with_iter(rx, 0, f);\n+  VERIFY( ivr.in == rx.end() );\n+  VERIFY( ivr.value == 57 );\n+\n+  rx.bounds.first = x;\n+  ranges::in_value_result ivr2 = ranges::fold_left_first_with_iter(rx, f);\n+  VERIFY( ivr2.in == rx.end() );\n+  VERIFY( ivr2.value.value() == 57 );\n+\n+  rx.bounds.first = x;\n+  auto v = rx | views::take(0);\n+  ranges::in_value_result ivr3 = ranges::fold_left_first_with_iter(v, f);\n+  VERIFY( ivr3.in == v.end() );\n+  VERIFY( !ivr3.value.has_value() );\n+}\n+\n+constexpr bool\n+test03()\n+{\n+  double x[] = {0.5, 0.25, 0.125, 0.125};\n+  VERIFY( ranges::fold_left(x, 0, std::plus{}) == 1.0 );\n+  VERIFY( ranges::fold_left_with_iter(x, 0, std::plus{}).value == 1.0 );\n+\n+  return true;\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  test02();\n+  static_assert(test03());\n+}"}, {"sha": "b08b57c6364a0f7d96fa8911659d57091f0c3235", "filename": "libstdc++-v3/testsuite/25_algorithms/fold_right/1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffold_right%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffold_right%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffold_right%2F1.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <algorithm>\n+#include <ranges>\n+#include <testsuite_iterators.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+  int x[] = {1, 2, 3, 4, 5};\n+  auto v = x | views::filter([](int) { return true; });\n+  static_assert( ranges::bidirectional_range<decltype(v)>\n+\t\t && !ranges::random_access_range<decltype(v)> );\n+  auto f = [](int& x, int&& acc) {\n+    return 2 * acc + x;\n+  };\n+  VERIFY( ranges::fold_right(v, 0, f) == 129 );\n+  VERIFY( ranges::fold_right(v, 1, f) == 161 );\n+  VERIFY( ranges::fold_right(v.begin(), v.begin(), 1, f) == 1 );\n+\n+  VERIFY( ranges::fold_right_last(v, f).value() == 129 );\n+  VERIFY( !ranges::fold_right_last(v.begin(), v.begin(), f).has_value() );\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  double x[] = {0.5, 0.25, 0.125, 0.125};\n+  VERIFY( ranges::fold_right(x, 0, std::plus{}) == 1.0 );\n+\n+  return true;\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  static_assert(test02());\n+}"}, {"sha": "d54b0c9550b5c4cd6601c2b7cbd2f00e6e6f0778", "filename": "libstdc++-v3/testsuite/experimental/net/internet/endpoint/cons.cc", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fcons.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -7,7 +7,10 @@\n \n using namespace std::experimental::net;\n \n-constexpr void\n+#if __cplusplus >= 202002\n+constexpr\n+#endif\n+void\n test_default()\n {\n   ip::tcp::endpoint t1;\n@@ -57,23 +60,19 @@ test_addr()\n   VERIFY( t2.port() == 80 );\n }\n \n-constexpr bool\n-test_constexpr()\n-{\n-  test_default();\n-#if __cplusplus >= 202002\n-  // Non-default basic_endpoint constructors are only constexpr in C++20.\n-  test_proto();\n-  test_addr();\n-#endif\n-  return true;\n-}\n-\n int main()\n {\n   test_default();\n   test_proto();\n   test_addr();\n \n-  static_assert( test_constexpr(), \"valid in constant expressions\" );\n+#if __cplusplus >= 202002\n+  // basic_endpoint constructors are only constexpr in C++20.\n+  constexpr bool b = []{\n+    test_default();\n+    test_proto();\n+    test_addr();\n+    return true;\n+  }();\n+#endif\n }"}, {"sha": "ffc43cf17b6ab07288ff6cdbb159dc278905e870", "filename": "libstdc++-v3/testsuite/experimental/net/internet/endpoint/extensible.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fendpoint%2Fextensible.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -11,8 +11,12 @@ using namespace std::experimental::net;\n void\n test_extensible()\n {\n+#if __cplusplus >= 202002L\n   static_assert(ip::tcp::endpoint().capacity() == sizeof(sockaddr_in6),\n \t\t\"ip::tcp::endpoint::capacity() can store a sockaddr_in6\");\n+#else\n+  VERIFY( ip::tcp::endpoint().capacity() == sizeof(sockaddr_in6) );\n+#endif\n \n   ip::tcp::endpoint t1(ip::tcp::v4(), 22);\n   VERIFY(t1.size() == sizeof(sockaddr_in));"}, {"sha": "a7e556c14ead21ede5d92f1a90a9d801ffa0b016", "filename": "libstdc++-v3/testsuite/experimental/synchronized_value.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsynchronized_value.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -1,4 +1,6 @@\n // { dg-do run { target c++17 } }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-require-gthreads \"\" }\n \n #include <experimental/synchronized_value>\n #include <testsuite_hooks.h>"}, {"sha": "19640abfe93b0b91ed3f0573ca2b474026512912", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/adjacent/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fadjacent%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fadjacent%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fadjacent%2F1.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -107,7 +107,7 @@ test04()\n   // PR libstdc++/106798\n   auto r = views::single(0) | views::lazy_split(0) | views::pairwise;\n   decltype(ranges::cend(r)) s = r.end();\n-  VERIFY( r.begin() == s );\n+  VERIFY( r.begin() != s );\n \n   return true;\n }"}, {"sha": "d04645f047ec0ebc517d566158a04ea2a2cf6dfa", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/as_const/1.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_const%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_const%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_const%2F1.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <span>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+#if __cpp_lib_ranges_as_const != 202207L\n+# error \"Feature-test macro __cpp_lib_ranges_as_const has wrong value in <ranges>\"\n+#endif\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+  int x[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+  auto v = x | views::filter([](int x) { return (x % 2) == 0; }) | views::as_const;\n+\n+  using ty = decltype(v);\n+  static_assert(ranges::constant_range<ty>);\n+  static_assert(!ranges::constant_range<decltype(v.base())>);\n+  static_assert(std::same_as<ranges::range_reference_t<ty>, const int&>);\n+  static_assert(std::same_as<ranges::range_reference_t<decltype(v.base())>, int&>);\n+\n+  VERIFY( ranges::equal(v, (int[]){2, 4, 6, 8, 10}) );\n+  VERIFY( ranges::equal(v | views::reverse, (int[]){10, 8, 6, 4, 2}) );\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  std::same_as<ranges::empty_view<const int>> auto v1\n+    = views::empty<int> | views::as_const;\n+\n+  int x[] = {1, 2, 3};\n+  std::same_as<ranges::as_const_view<ranges::ref_view<int[3]>>> auto v2\n+    = x | views::as_const;\n+  std::same_as<ranges::ref_view<const int[3]>> auto v3\n+    = std::as_const(x) | views::as_const;\n+  std::same_as<ranges::ref_view<const int[3]>> auto v4\n+    = std::as_const(x) | views::all | views::as_const;\n+  std::same_as<std::span<const int>> auto v5\n+    = std::span{x, x+3} | views::as_const;\n+\n+  std::same_as<ranges::as_const_view<ranges::chunk_view<ranges::ref_view<int[3]>>>> auto v6\n+     = x | views::chunk(2) | views::as_const;\n+  VERIFY( v6.size() == 2 );\n+\n+  return true;\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  static_assert(test02());\n+}"}, {"sha": "a8fceb105e025529549a4b2e0f3954e62bd58472", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/chunk_by/1.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fchunk_by%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fchunk_by%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fchunk_by%2F1.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -61,10 +61,45 @@ test03()\n   ranges::chunk_by_view<ranges::empty_view<int>, ranges::equal_to> r;\n }\n \n+constexpr bool\n+test04()\n+{\n+  // PR libstdc++/108291\n+  using namespace std::literals;\n+  std::string_view s = \"hello\";\n+  auto r = s | views::chunk_by(std::less{});\n+  VERIFY( ranges::equal(r,\n+\t\t\t(std::string_view[]){\"h\"sv, \"el\"sv, \"lo\"sv},\n+\t\t\tranges::equal) );\n+  VERIFY( ranges::equal(r | views::reverse,\n+\t\t\t(std::string_view[]){\"lo\"sv, \"el\"sv, \"h\"sv},\n+\t\t\tranges::equal) );\n+\n+  return true;\n+}\n+\n+void\n+test05()\n+{\n+  // PR libstdc++/109474\n+  std::vector<bool> v = {true, false, true, true, false, false};\n+  auto r = v | views::chunk_by(std::equal_to{});\n+  VERIFY( ranges::equal(r,\n+\t\t\t(std::initializer_list<bool>[])\n+\t\t\t  {{true}, {false}, {true, true}, {false, false}},\n+\t\t\tranges::equal) );\n+  VERIFY( ranges::equal(r | views::reverse,\n+\t\t\t(std::initializer_list<bool>[])\n+\t\t\t  {{false, false}, {true, true}, {false}, {true}},\n+\t\t\tranges::equal) );\n+}\n+\n int\n main()\n {\n   static_assert(test01());\n   test02();\n   test03();\n+  static_assert(test04());\n+  test05();\n }"}, {"sha": "445d9854c8cbdfe88d74c1f17e99dde5fa65928a", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/enumerate/1.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fenumerate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fenumerate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fenumerate%2F1.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -0,0 +1,102 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+#if __cpp_lib_ranges_enumerate != 202302L\n+# error \"Feature-test macro __cpp_lib_ranges_enumerate has wrong value in <ranges>\"\n+#endif\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+using __gnu_test::test_input_range;\n+using __gnu_test::test_forward_range;\n+using __gnu_test::test_bidirectional_range;\n+using __gnu_test::test_random_access_range;\n+\n+constexpr bool\n+test01()\n+{\n+  int x[] = {1, 2, 3};\n+  auto v = x | views::enumerate;\n+\n+  VERIFY( ranges::equal(v | views::keys, (int[]){0, 1, 2}) );\n+  VERIFY( ranges::equal(v | views::values, (int[]){1, 2, 3}) );\n+\n+  auto it = v.begin();\n+  VERIFY( it == it );\n+  VERIFY( it != it + 1 );\n+  VERIFY( it != v.end() );\n+\n+  VERIFY( it.index() == 0 );\n+  VERIFY( (++it).index() == 1 );\n+  VERIFY( (++it).index() == 2 );\n+\n+  return true;\n+}\n+\n+template<template<class> class Container>\n+void\n+test02()\n+{\n+  int x[] = {1, 2, 3};\n+  Container<int> rx (x);\n+  auto v = rx | views::enumerate;\n+\n+  int j = 0;\n+  for (auto [i, y] : v)\n+    {\n+      VERIFY (&y == &x[j]);\n+      VERIFY (j == i);\n+      ++j;\n+    }\n+  VERIFY (j == ranges::size(x));\n+\n+  if constexpr (ranges::bidirectional_range<decltype(rx)>)\n+    {\n+      static_assert(ranges::bidirectional_range<decltype(v)>);\n+      for (auto [i, y] : v | views::reverse)\n+\t{\n+\t  --j;\n+\t  VERIFY (&y == &x[j]);\n+\t  VERIFY (j == i);\n+\t}\n+      VERIFY (j == 0);\n+    }\n+\n+  if constexpr (ranges::random_access_range<decltype(rx)>)\n+    {\n+      static_assert(ranges::random_access_range<decltype(v)>);\n+      for (j = 0; j < ranges::ssize(x); ++j)\n+\t{\n+\t  VERIFY (std::get<0>(v[j]) == j);\n+\t  VERIFY (&std::get<1>(v[j]) == &x[j]);\n+\t  VERIFY (*(v.begin() + j) == v[j]);\n+\t  VERIFY (*(v.begin() + (ranges::size(x) - 1) - j) == v[ranges::size(x) - 1 - j]);\n+\t  VERIFY (v.begin() + j + 1 > v.begin() + j );\n+\t  VERIFY (v.begin() + j < v.begin() + j + 1 );\n+\t  VERIFY (v.begin() + j >= v.begin() );\n+\t  VERIFY (v.begin() <= v.begin() + j );\n+\t  VERIFY( v.begin() + j != v.end() );\n+\t  VERIFY( v.begin() + j - v.begin() == j );\n+\t  VERIFY( v.end() - (v.begin() + j) == ranges::ssize(x) - j );\n+\t}\n+      VERIFY( v.begin() + j == v.end() );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+\n+  test02<test_input_range>();\n+  test02<test_forward_range>();\n+  test02<test_bidirectional_range>();\n+  test02<test_random_access_range>();\n+}"}, {"sha": "7401d69b30d71b59ca180f2f058d31e70999aa06", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -24,6 +24,7 @@\n #include <sstream>\n #include <string>\n #include <string_view>\n+#include <utility>\n #include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n@@ -113,15 +114,15 @@ test06()\n \n   // Verify that _Iterator<false> is implicitly convertible to _Iterator<true>.\n   static_assert(!std::same_as<decltype(ranges::begin(v)),\n-\t\t\t      decltype(ranges::cbegin(v))>);\n-  auto a = ranges::cbegin(v);\n+\t\t\t      decltype(std::as_const(v).begin())>);\n+  auto a = std::as_const(v).begin();\n   a = ranges::begin(v);\n \n   // Verify that _Sentinel<false> is implicitly convertible to _Sentinel<true>.\n   static_assert(!ranges::common_range<decltype(v)>);\n   static_assert(!std::same_as<decltype(ranges::end(v)),\n-\t\t\t      decltype(ranges::cend(v))>);\n-  auto b = ranges::cend(v);\n+\t\t\t      decltype(std::as_const(v).end())>);\n+  auto b = std::as_const(v).end();\n   b = ranges::end(v);\n }\n "}, {"sha": "4e5c0dc3ed5b22f3779e021f863e617b9cecec80", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/lazy_split.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -22,6 +22,7 @@\n #include <ranges>\n #include <string>\n #include <string_view>\n+#include <utility>\n #include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n@@ -218,6 +219,20 @@ test11()\n   static_assert(ranges::distance(views::lazy_split(\"text\"sv, \"\"sv)) == 4);\n }\n \n+constexpr bool\n+test12()\n+{\n+  // LWG 3904\n+  auto r = views::single(0) | views::lazy_split(0);\n+  auto i = r.begin();\n+  ++i;\n+  VERIFY( i != r.end() );\n+  decltype(std::as_const(r).begin()) j = i;\n+  VERIFY( j != r.end() );\n+\n+  return true;\n+}\n+\n int\n main()\n {\n@@ -232,4 +247,5 @@ main()\n   test09();\n   test10();\n   test11();\n+  static_assert(test12());\n }"}, {"sha": "e2c14edc8ef316a4d9f3d86f0d0fcd12de12ec8d", "filename": "libstdc++-v3/testsuite/std/ranges/version_c++23.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fversion_c%2B%2B23.cc?ref=ddde0cfaaae736de28e2c3a7074b8ee877d3cb5c", "patch": "@@ -44,3 +44,11 @@\n #if __cpp_lib_ranges_as_rvalue != 202207L\n # error \"Feature-test macro __cpp_lib_ranges_as_rvalue has wrong value in <version>\"\n #endif\n+\n+#if __cpp_lib_ranges_as_const != 202207L\n+# error \"Feature-test macro __cpp_lib_ranges_as_const has wrong value in <version>\"\n+#endif\n+\n+#if __cpp_lib_ranges_enumerate != 202302L\n+# error \"Feature-test macro __cpp_lib_ranges_enumerate has wrong value in <version>\"\n+#endif"}]}