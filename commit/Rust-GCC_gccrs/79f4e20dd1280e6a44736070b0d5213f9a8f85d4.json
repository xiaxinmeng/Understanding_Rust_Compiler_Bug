{"sha": "79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmNGUyMGRkMTI4MGU2YTQ0NzM2MDcwYjBkNTIxM2Y5YThmODVkNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-09-02T12:30:16Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-09-21T08:09:26Z"}, "message": "Use SIZE_AMOUNT macro for GGC memory allocation numbers.\n\ngcc/ChangeLog:\n\n\t* ggc-common.c (ggc_prune_overhead_list): Use SIZE_AMOUNT.\n\t* ggc-page.c (release_pages): Likewise.\n\t(ggc_collect): Likewise.\n\t(ggc_trim): Likewise.\n\t(ggc_grow): Likewise.\n\t* timevar.c (timer::print): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/timevar1.C: Prune more possible number values.\n\t* g++.dg/ext/timevar2.C: Likewise.", "tree": {"sha": "4cd45738168a0f369744fc4a704dea910f87e8d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cd45738168a0f369744fc4a704dea910f87e8d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432c551b17d655823a4825855b4b966441c8cfb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432c551b17d655823a4825855b4b966441c8cfb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432c551b17d655823a4825855b4b966441c8cfb3"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "007a028f5080e72742acb23e872975fced4409ff", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "patch": "@@ -1008,7 +1008,7 @@ ggc_prune_overhead_list (void)\n       }\n }\n \n-/* Print memory used by heap in kb if this info is available.  */\n+/* Print memory used by heap if this info is available.  */\n \n void\n report_heap_memory_use ()\n@@ -1020,7 +1020,7 @@ report_heap_memory_use ()\n   #define MALLINFO_FN mallinfo\n #endif\n   if (!quiet_flag)\n-    fprintf (stderr,\" {heap %luk}\",\n-\t     (unsigned long) MALLINFO_FN ().arena / ONE_K);\n+    fprintf (stderr, \" {heap \" PRsa (0) \"}\",\n+\t     SIZE_AMOUNT (MALLINFO_FN ().arena));\n #endif\n }"}, {"sha": "9405f033a7c13180f91d36849d671a6335e6a521", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "patch": "@@ -1164,9 +1164,9 @@ release_pages (void)\n     {\n       fprintf (stderr, \" {GC\");\n       if (n1)\n-\tfprintf (stderr, \" released %luk\", (unsigned long)(n1 / 1024));\n+\tfprintf (stderr, \" released \" PRsa (0), SIZE_AMOUNT (n1));\n       if (n2)\n-\tfprintf (stderr, \" madv_dontneed %luk\", (unsigned long)(n2 / 1024));\n+\tfprintf (stderr, \" madv_dontneed \" PRsa (0), SIZE_AMOUNT (n2));\n       fprintf (stderr, \"}\");\n     }\n }\n@@ -2208,7 +2208,7 @@ ggc_collect (void)\n \n   /* Output this later so we do not interfere with release_pages.  */\n   if (!quiet_flag)\n-    fprintf (stderr, \" {GC %luk -> \", (unsigned long) allocated / 1024);\n+    fprintf (stderr, \" {GC \" PRsa (0) \" -> \", SIZE_AMOUNT (allocated));\n \n   /* Indicate that we've seen collections at this context depth.  */\n   G.context_depth_collections = ((unsigned long)1 << (G.context_depth + 1)) - 1;\n@@ -2235,7 +2235,7 @@ ggc_collect (void)\n   timevar_pop (TV_GC);\n \n   if (!quiet_flag)\n-    fprintf (stderr, \"%luk}\", (unsigned long) G.allocated / 1024);\n+    fprintf (stderr, PRsa (0) \"}\", SIZE_AMOUNT (G.allocated));\n   if (GGC_DEBUG_LEVEL >= 2)\n     fprintf (G.debug_file, \"END COLLECTING\\n\");\n }\n@@ -2250,9 +2250,8 @@ ggc_trim ()\n   sweep_pages ();\n   release_pages ();\n   if (!quiet_flag)\n-    fprintf (stderr, \" {GC trimmed to %luk, %luk mapped}\",\n-\t     (unsigned long) G.allocated / 1024,\n-\t     (unsigned long) G.bytes_mapped / 1024);\n+    fprintf (stderr, \" {GC trimmed to \" PRsa (0) \", \" PRsa (0) \" mapped}\",\n+\t     SIZE_AMOUNT (G.allocated), SIZE_AMOUNT (G.bytes_mapped));\n   timevar_pop (TV_GC);\n }\n \n@@ -2269,7 +2268,7 @@ ggc_grow (void)\n   else\n     ggc_collect ();\n   if (!quiet_flag)\n-    fprintf (stderr, \" {GC %luk} \", (unsigned long) G.allocated / 1024);\n+    fprintf (stderr, \" {GC \" PRsa (0) \"} \", SIZE_AMOUNT (G.allocated));\n }\n \n void"}, {"sha": "988a6f8543d2073a4ddd87eb612777e3f278c7e5", "filename": "gcc/testsuite/g++.dg/ext/timevar1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar1.C?ref=79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "patch": "@@ -2,7 +2,8 @@\n // { dg-options \"-ftime-report\" }\n // { dg-allow-blank-lines-in-output 1 }\n // { dg-prune-output \"Time variable\" }\n-// { dg-prune-output \" kB\" }\n+// { dg-prune-output \"k\" }\n+// { dg-prune-output \" 0 \" }\n // { dg-prune-output \"checks\" }\n \n void"}, {"sha": "46c3e1b4794bb8d27a4f6a2e45a8ddb539d9642a", "filename": "gcc/testsuite/g++.dg/ext/timevar2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar2.C?ref=79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "patch": "@@ -1,7 +1,8 @@\n // PR c++/57524\n // { dg-options \"-ftime-report\" }\n // { dg-prune-output \"Time variable\" }\n-// { dg-prune-output \" kB\" }\n+// { dg-prune-output \"k\" }\n+// { dg-prune-output \" 0 \" }\n // { dg-prune-output \"checks\" }\n \n namespace detail {"}, {"sha": "8fbf5faa4e3f07af832504d2655574ee9dd4c730", "filename": "gcc/timevar.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79f4e20dd1280e6a44736070b0d5213f9a8f85d4/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=79f4e20dd1280e6a44736070b0d5213f9a8f85d4", "patch": "@@ -661,8 +661,8 @@ timer::print_row (FILE *fp,\n #endif /* HAVE_WALL_TIME */\n \n   /* Print the amount of ggc memory allocated.  */\n-  fprintf (fp, \"%8u kB (%3.0f%%)\",\n-\t   (unsigned) (elapsed.ggc_mem >> 10),\n+  fprintf (fp, PRsa (6) \" (%3.0f%%)\",\n+\t   SIZE_AMOUNT (elapsed.ggc_mem),\n \t   (total->ggc_mem == 0\n \t    ? 0\n \t    : (float) elapsed.ggc_mem / total->ggc_mem) * 100);\n@@ -712,7 +712,7 @@ timer::print (FILE *fp)\n      TIMEVAR.  */\n   m_start_time = now;\n \n-  fprintf (fp, \"\\n%-35s%16s%14s%14s%18s\\n\", \"Time variable\", \"usr\", \"sys\",\n+  fprintf (fp, \"\\n%-35s%16s%14s%14s%14s\\n\", \"Time variable\", \"usr\", \"sys\",\n \t   \"wall\", \"GGC\");\n   if (m_jit_client_items)\n     fputs (\"GCC items:\\n\", fp);\n@@ -776,7 +776,7 @@ timer::print (FILE *fp)\n #ifdef HAVE_WALL_TIME\n   fprintf (fp, \"%8.2f      \", total->wall);\n #endif\n-  fprintf (fp, \"%9u kB\\n\", (unsigned) (total->ggc_mem >> 10));\n+  fprintf (fp, PRsa (7) \"\\n\", SIZE_AMOUNT (total->ggc_mem));\n \n   if (CHECKING_P || flag_checking)\n     fprintf (fp, \"Extra diagnostic checks enabled; compiler may run slowly.\\n\");"}]}