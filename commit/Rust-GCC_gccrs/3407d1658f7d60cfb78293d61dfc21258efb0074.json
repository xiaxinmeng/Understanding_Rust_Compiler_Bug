{"sha": "3407d1658f7d60cfb78293d61dfc21258efb0074", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQwN2QxNjU4ZjdkNjBjZmI3ODI5M2Q2MWRmYzIxMjU4ZWZiMDA3NA==", "commit": {"author": {"name": "Cherry Zhang", "email": "cherryyz@google.com", "date": "2019-05-08T23:06:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-08T23:06:52Z"}, "message": "compiler: avoid copy for string([]byte) conversion used in string comparison\n    \n    If a string([]byte) conversion is used immediately in a string\n    comparison, we don't need to copy the backing store of the byte\n    slice, as the string comparison doesn't hold any reference to\n    it. Instead, just create a string header from the byte slice and\n    pass it for comparison.\n    \n    A new type of expression, String_value_expression, is introduced,\n    for constructing string headers.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/170894\n\n\t* go.dg/cmpstring.go: New test.\n\nFrom-SVN: r271021", "tree": {"sha": "8aab6b19727ef793d37cb592a45bd808a3419700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aab6b19727ef793d37cb592a45bd808a3419700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3407d1658f7d60cfb78293d61dfc21258efb0074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3407d1658f7d60cfb78293d61dfc21258efb0074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3407d1658f7d60cfb78293d61dfc21258efb0074", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3407d1658f7d60cfb78293d61dfc21258efb0074/comments", "author": {"login": "cherrymui", "id": 14119929, "node_id": "MDQ6VXNlcjE0MTE5OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/14119929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherrymui", "html_url": "https://github.com/cherrymui", "followers_url": "https://api.github.com/users/cherrymui/followers", "following_url": "https://api.github.com/users/cherrymui/following{/other_user}", "gists_url": "https://api.github.com/users/cherrymui/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherrymui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherrymui/subscriptions", "organizations_url": "https://api.github.com/users/cherrymui/orgs", "repos_url": "https://api.github.com/users/cherrymui/repos", "events_url": "https://api.github.com/users/cherrymui/events{/privacy}", "received_events_url": "https://api.github.com/users/cherrymui/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8238b660fb6204b3e6968e9a6ed550b16c86b25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8238b660fb6204b3e6968e9a6ed550b16c86b25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8238b660fb6204b3e6968e9a6ed550b16c86b25e"}], "stats": {"total": 154, "additions": 148, "deletions": 6}, "files": [{"sha": "f6f28a39ee3b144c2dcc63c1dbb7c60bc1cf9d55", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3407d1658f7d60cfb78293d61dfc21258efb0074", "patch": "@@ -1,4 +1,4 @@\n-f813c670deb8e0454c3f64de74bedb5dcedd10b4\n+9c8581187b1c1a30036263728370f31cb846a274\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "2c1286cbdb046c96a4c8d5e50b3b407f0f41c94f", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 114, "deletions": 4, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3407d1658f7d60cfb78293d61dfc21258efb0074", "patch": "@@ -2031,6 +2031,90 @@ Expression::make_string_info(Expression* string, String_info string_info,\n   return new String_info_expression(string, string_info, location);\n }\n \n+// An expression that represents an string value: a struct with value pointer\n+// and length fields.\n+\n+class String_value_expression : public Expression\n+{\n+ public:\n+  String_value_expression(Expression* valptr, Expression* len, Location location)\n+      : Expression(EXPRESSION_STRING_VALUE, location),\n+        valptr_(valptr), len_(len)\n+  { }\n+\n+ protected:\n+  int\n+  do_traverse(Traverse*);\n+\n+  Type*\n+  do_type()\n+  { return Type::make_string_type(); }\n+\n+  void\n+  do_determine_type(const Type_context*)\n+  { go_unreachable(); }\n+\n+  Expression*\n+  do_copy()\n+  {\n+    return new String_value_expression(this->valptr_->copy(),\n+                                       this->len_->copy(),\n+                                       this->location());\n+  }\n+\n+  Bexpression*\n+  do_get_backend(Translate_context* context);\n+\n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n+ private:\n+  // The value pointer.\n+  Expression* valptr_;\n+  // The length.\n+  Expression* len_;\n+};\n+\n+int\n+String_value_expression::do_traverse(Traverse* traverse)\n+{\n+  if (Expression::traverse(&this->valptr_, traverse) == TRAVERSE_EXIT\n+      || Expression::traverse(&this->len_, traverse) == TRAVERSE_EXIT)\n+    return TRAVERSE_EXIT;\n+  return TRAVERSE_CONTINUE;\n+}\n+\n+Bexpression*\n+String_value_expression::do_get_backend(Translate_context* context)\n+{\n+  std::vector<Bexpression*> vals(2);\n+  vals[0] = this->valptr_->get_backend(context);\n+  vals[1] = this->len_->get_backend(context);\n+\n+  Gogo* gogo = context->gogo();\n+  Btype* btype = Type::make_string_type()->get_backend(gogo);\n+  return gogo->backend()->constructor_expression(btype, vals, this->location());\n+}\n+\n+void\n+String_value_expression::do_dump_expression(\n+    Ast_dump_context* ast_dump_context) const\n+{\n+  ast_dump_context->ostream() << \"stringvalue(\";\n+  ast_dump_context->ostream() << \"value: \";\n+  this->valptr_->dump_expression(ast_dump_context);\n+  ast_dump_context->ostream() << \", length: \";\n+  this->len_->dump_expression(ast_dump_context);\n+  ast_dump_context->ostream() << \")\";\n+}\n+\n+Expression*\n+Expression::make_string_value(Expression* valptr, Expression* len,\n+                              Location location)\n+{\n+  return new String_value_expression(valptr, len, location);\n+}\n+\n // Make an integer expression.\n \n class Integer_expression : public Expression\n@@ -3702,9 +3786,11 @@ Type_conversion_expression::do_check_types(Gogo*)\n Expression*\n Type_conversion_expression::do_copy()\n {\n-  return new Type_conversion_expression(this->type_->copy_expressions(),\n-\t\t\t\t\tthis->expr_->copy(),\n-\t\t\t\t\tthis->location());\n+  Expression* ret = new Type_conversion_expression(this->type_->copy_expressions(),\n+                                                   this->expr_->copy(),\n+                                                   this->location());\n+  ret->conversion_expression()->set_no_copy(this->no_copy_);\n+  return ret;\n }\n \n // Get the backend representation for a type conversion.\n@@ -3764,7 +3850,22 @@ Type_conversion_expression::do_get_backend(Translate_context* context)\n \n       Runtime::Function code;\n       if (e->integer_type()->is_byte())\n-        code = Runtime::SLICEBYTETOSTRING;\n+        {\n+          if (this->no_copy_)\n+            {\n+              if (gogo->debug_optimization())\n+                go_inform(loc, \"no copy string([]byte)\");\n+              Expression* ptr = Expression::make_slice_info(this->expr_,\n+                                                            SLICE_INFO_VALUE_POINTER,\n+                                                            loc);\n+              Expression* len = Expression::make_slice_info(this->expr_,\n+                                                            SLICE_INFO_LENGTH,\n+                                                            loc);\n+              Expression* str = Expression::make_string_value(ptr, len, loc);\n+              return str->get_backend(context);\n+            }\n+          code = Runtime::SLICEBYTETOSTRING;\n+        }\n       else\n         {\n           go_assert(e->integer_type()->is_rune());\n@@ -6805,6 +6906,15 @@ Expression::comparison(Translate_context* context, Type* result_type,\n \n   if (left_type->is_string_type() && right_type->is_string_type())\n     {\n+      // Mark string([]byte) operands to reuse the backing store.\n+      // String comparison does not keep the reference, so it is safe.\n+      Type_conversion_expression* lce = left->conversion_expression();\n+      if (lce != NULL && lce->expr()->type()->is_slice_type())\n+        lce->set_no_copy(true);\n+      Type_conversion_expression* rce = right->conversion_expression();\n+      if (rce != NULL && rce->expr()->type()->is_slice_type())\n+        rce->set_no_copy(true);\n+\n       if (op == OPERATOR_EQEQ || op == OPERATOR_NOTEQ)\n \t{\n \t  left = Runtime::make_call(Runtime::EQSTRING, location, 2,"}, {"sha": "2cca8240fcd084fa7ecf5dbd5131add45596483d", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=3407d1658f7d60cfb78293d61dfc21258efb0074", "patch": "@@ -102,6 +102,7 @@ class Expression\n     EXPRESSION_BOOLEAN,\n     EXPRESSION_STRING,\n     EXPRESSION_STRING_INFO,\n+    EXPRESSION_STRING_VALUE,\n     EXPRESSION_INTEGER,\n     EXPRESSION_FLOAT,\n     EXPRESSION_COMPLEX,\n@@ -248,6 +249,10 @@ class Expression\n   static Expression*\n   make_string_info(Expression* string, String_info, Location);\n \n+  // Make an expression for a string value.\n+  static Expression*\n+  make_string_value(Expression* valptr, Expression* len, Location);\n+\n   // Make a character constant expression.  TYPE should be NULL for an\n   // abstract type.\n   static Expression*\n@@ -1668,7 +1673,8 @@ class Type_conversion_expression : public Expression\n   Type_conversion_expression(Type* type, Expression* expr,\n \t\t\t     Location location)\n     : Expression(EXPRESSION_CONVERSION, location),\n-      type_(type), expr_(expr), may_convert_function_types_(false)\n+      type_(type), expr_(expr), may_convert_function_types_(false),\n+      no_copy_(false)\n   { }\n \n   // Return the type to which we are converting.\n@@ -1689,6 +1695,12 @@ class Type_conversion_expression : public Expression\n     this->may_convert_function_types_ = true;\n   }\n \n+  // Mark string([]byte) conversion to reuse the backing store\n+  // without copying.\n+  void\n+  set_no_copy(bool b)\n+  { this->no_copy_ = b; };\n+\n   // Import a type conversion expression.\n   static Expression*\n   do_import(Import_expression*, Location);\n@@ -1751,6 +1763,9 @@ class Type_conversion_expression : public Expression\n   // True if this is permitted to convert function types.  This is\n   // used internally for method expressions.\n   bool may_convert_function_types_;\n+  // True if a string([]byte) conversion can reuse the backing store\n+  // without copying.  Only used in string([]byte) conversion.\n+  bool no_copy_;\n };\n \n // An unsafe type conversion, used to pass values to builtin functions."}, {"sha": "270453f247d6399cecb9a726a74386b055dd85c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3407d1658f7d60cfb78293d61dfc21258efb0074", "patch": "@@ -1,3 +1,7 @@\n+2019-05-08  Cherry Zhang  <cherryyz@google.com>\n+\n+\t* go.dg/cmpstring.go: New test.\n+\n 2019-05-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/59813"}, {"sha": "81d8aee379d8f5693612fc02e351d9dd3365a4a8", "filename": "gcc/testsuite/go.dg/cmpstring.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Ftestsuite%2Fgo.dg%2Fcmpstring.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3407d1658f7d60cfb78293d61dfc21258efb0074/gcc%2Ftestsuite%2Fgo.dg%2Fcmpstring.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.dg%2Fcmpstring.go?ref=3407d1658f7d60cfb78293d61dfc21258efb0074", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-fgo-debug-optimization\" }\n+\n+package p\n+\n+func F(x []byte, y string) bool {\n+\treturn string(x) == y // { dg-error \"no copy string\\\\(\\\\\\[\\\\\\]byte\\\\)\" }\n+}\n+\n+func BytesEqual(x, y []byte) bool {\n+\treturn string(x) == // { dg-error \"no copy string\\\\(\\\\\\[\\\\\\]byte\\\\)\" }\n+\t\tstring(y)   // { dg-error \"no copy string\\\\(\\\\\\[\\\\\\]byte\\\\)\" }\n+}"}]}