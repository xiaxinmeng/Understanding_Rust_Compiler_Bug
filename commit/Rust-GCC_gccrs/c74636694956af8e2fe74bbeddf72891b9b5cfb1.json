{"sha": "c74636694956af8e2fe74bbeddf72891b9b5cfb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0NjM2Njk0OTU2YWY4ZTJmZTc0YmJlZGRmNzI4OTFiOWI1Y2ZiMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-02-24T09:24:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-02-24T09:24:17Z"}, "message": "re PR middle-end/18902 (Naive (default) complex division algorithm)\n\n        PR middle-end/18902\n        * c-opts.c (c_common_post_options): Set flag_complex_method to 2\n        for c99.\n        * common.opt (fcx-limited-range): New.\n        * opts.c (set_fast_math_flags): Set flag_cx_limited_range.\n        * toplev.c (flag_complex_method): Initialize to 1.\n        (process_options): Set flag_complex_method to 0 if\n        flag_cx_limited_range.\n        * doc/invoke.texi (-fcx-limited-range): New.\n\nFrom-SVN: r95493", "tree": {"sha": "42cf31816d33415d61bb35885b0514d50dcdc5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42cf31816d33415d61bb35885b0514d50dcdc5b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c74636694956af8e2fe74bbeddf72891b9b5cfb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74636694956af8e2fe74bbeddf72891b9b5cfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74636694956af8e2fe74bbeddf72891b9b5cfb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74636694956af8e2fe74bbeddf72891b9b5cfb1/comments", "author": null, "committer": null, "parents": [{"sha": "d962e37d43ae054bc723d1940f77118eeb168ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d962e37d43ae054bc723d1940f77118eeb168ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d962e37d43ae054bc723d1940f77118eeb168ac3"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "d154fe04c0c9694f7bec77d31c43fc88d974dd06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c74636694956af8e2fe74bbeddf72891b9b5cfb1", "patch": "@@ -1,3 +1,15 @@\n+2005-02-24  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/18902\n+\t* c-opts.c (c_common_post_options): Set flag_complex_method to 2\n+\tfor c99.\n+\t* common.opt (fcx-limited-range): New.\n+\t* opts.c (set_fast_math_flags): Set flag_cx_limited_range.\n+\t* toplev.c (flag_complex_method): Initialize to 1.\n+\t(process_options): Set flag_complex_method to 0 if\n+\tflag_cx_limited_range.\n+\t* doc/invoke.texi (-fcx-limited-range): New.\n+\n 2005-02-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cse.c (delete_trivially_dead_insns): Speed up by using"}, {"sha": "575ff4d485b72cc0754097f1be94ff36309f0510", "filename": "gcc/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c74636694956af8e2fe74bbeddf72891b9b5cfb1", "patch": "@@ -978,6 +978,11 @@ c_common_post_options (const char **pfilename)\n   if (warn_missing_format_attribute && !warn_format)\n     warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n \n+  /* C99 requires special handling of complex multiplication and division;\n+     -ffast-math and -fcx-limited-range are handled in process_options.  */\n+  if (flag_isoc99)\n+    flag_complex_method = 2;\n+\n   if (flag_preprocess_only)\n     {\n       /* Open the output now.  We must do so even if flag_no_output is"}, {"sha": "f94643d509edeb87036923ecafb22e6dd60d7024", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c74636694956af8e2fe74bbeddf72891b9b5cfb1", "patch": "@@ -310,6 +310,10 @@ fcse-skip-blocks\n Common Report Var(flag_cse_skip_blocks)\n When running CSE, follow conditional jumps\n \n+fcx-limited-range\n+Common Report Var(flag_cx_limited_range)\n+Omit range reduction step when performing complex division\n+\n fdata-sections\n Common Report Var(flag_data_sections)\n Place data items into their own section"}, {"sha": "8cf5ed9493f609929f0031aa48d20942d2ad9cd8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c74636694956af8e2fe74bbeddf72891b9b5cfb1", "patch": "@@ -285,8 +285,8 @@ Objective-C and Objective-C++ Dialects}.\n -fbounds-check -fmudflap -fmudflapth -fmudflapir @gol\n -fbranch-probabilities -fprofile-values -fvpt -fbranch-target-load-optimize @gol\n -fbranch-target-load-optimize2 -fbtr-bb-exclusive @gol\n--fcaller-saves  -fcprop-registers @gol\n--fcse-follow-jumps  -fcse-skip-blocks  -fdata-sections @gol\n+-fcaller-saves  -fcprop-registers  -fcse-follow-jumps @gol\n+-fcse-follow-jumps  -fcse-skip-blocks  -fcx-limited-range  -fdata-sections @gol\n -fdelayed-branch  -fdelete-null-pointer-checks @gol\n -fexpensive-optimizations  -ffast-math  -ffloat-store @gol\n -fforce-addr  -fforce-mem  -ffunction-sections @gol\n@@ -5072,7 +5072,8 @@ them to store all pertinent intermediate computations into variables.\n @opindex ffast-math\n Sets @option{-fno-math-errno}, @option{-funsafe-math-optimizations}, @*\n @option{-fno-trapping-math}, @option{-ffinite-math-only},\n-@option{-fno-rounding-math} and @option{-fno-signaling-nans}.\n+@option{-fno-rounding-math}, @option{-fno-signaling-nans}\n+and @option{fcx-limited-range}.\n \n This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n \n@@ -5176,6 +5177,17 @@ disable all GCC optimizations that affect signaling NaN behavior.\n Treat floating point constant as single precision constant instead of\n implicitly converting it to double precision constant.\n \n+@item -fcx-limited-range\n+@itemx -fno-cx-limited-range\n+@opindex fcx-limited-range\n+@opindex fno-cx-limited-range\n+When enabled, this option states that a range reduction step is not\n+needed when performing complex division.  The default is\n+@option{-fno-cx-limited-range}, but is enabled by @option{-ffast-math}.\n+\n+This option controls the default setting of the ISO C99 \n+@code{CX_LIMITED_RANGE} pragma.  Nevertheless, the option applies to\n+all languages.\n \n @end table\n "}, {"sha": "fcb8f6d5c1a674b5959e826d5a0f88fd31d07b7c", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c74636694956af8e2fe74bbeddf72891b9b5cfb1", "patch": "@@ -1097,6 +1097,7 @@ set_fast_math_flags (int set)\n     {\n       flag_signaling_nans = 0;\n       flag_rounding_math = 0;\n+      flag_cx_limited_range = 1;\n     }\n }\n "}, {"sha": "e7947eba2ebc33cfdeac1926352d41561d5853ba", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74636694956af8e2fe74bbeddf72891b9b5cfb1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c74636694956af8e2fe74bbeddf72891b9b5cfb1", "patch": "@@ -269,7 +269,7 @@ int flag_pcc_struct_return = DEFAULT_PCC_STRUCT_RETURN;\n    1 means wide ranges of inputs must work for complex divide.\n    2 means C99-like requirements for complex multiply and divide.  */\n \n-int flag_complex_method = 0;\n+int flag_complex_method = 1;\n \n /* Nonzero means that we don't want inlining by virtue of -fno-inline,\n    not just because the tree inliner turned us off.  */\n@@ -1948,6 +1948,10 @@ process_options (void)\n   /* The presence of IEEE signaling NaNs, implies all math can trap.  */\n   if (flag_signaling_nans)\n     flag_trapping_math = 1;\n+\n+  /* With -fcx-limited-range, we do cheap and quick complex arithmetic.  */\n+  if (flag_cx_limited_range)\n+    flag_complex_method = 0;\n }\n \n /* Initialize the compiler back end.  */"}]}