{"sha": "c08472eaf611a76fa2545b5a45f32d274ac0d25d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA4NDcyZWFmNjExYTc2ZmEyNTQ1YjVhNDVmMzJkMjc0YWMwZDI1ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-30T22:19:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-30T22:19:02Z"}, "message": "predict.c (expr_expected_value_1): Assume compare-and-swap builtin boolean return is true.\n\n        * predict.c (expr_expected_value_1): Assume compare-and-swap builtin\n        boolean return is true.\n\nFrom-SVN: r181862", "tree": {"sha": "12dcee32e763cdc77a0ac7766025f3973125533d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12dcee32e763cdc77a0ac7766025f3973125533d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c08472eaf611a76fa2545b5a45f32d274ac0d25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08472eaf611a76fa2545b5a45f32d274ac0d25d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08472eaf611a76fa2545b5a45f32d274ac0d25d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08472eaf611a76fa2545b5a45f32d274ac0d25d/comments", "author": null, "committer": null, "parents": [{"sha": "ed079c4be707a95d7b935f1bf0f66bf47df93d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed079c4be707a95d7b935f1bf0f66bf47df93d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed079c4be707a95d7b935f1bf0f66bf47df93d30"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "dceaefcf3ccd7914c9f9f73cdee542547ca3bba0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08472eaf611a76fa2545b5a45f32d274ac0d25d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08472eaf611a76fa2545b5a45f32d274ac0d25d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c08472eaf611a76fa2545b5a45f32d274ac0d25d", "patch": "@@ -1,3 +1,8 @@\n+2011-11-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* predict.c (expr_expected_value_1): Assume compare-and-swap builtin\n+\tboolean return is true.\n+\n 2011-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/51044"}, {"sha": "923653179052a65ba9ed75d6107722a5265291d0", "filename": "gcc/predict.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08472eaf611a76fa2545b5a45f32d274ac0d25d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08472eaf611a76fa2545b5a45f32d274ac0d25d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=c08472eaf611a76fa2545b5a45f32d274ac0d25d", "patch": "@@ -1190,7 +1190,8 @@ static tree expr_expected_value (tree, bitmap);\n /* Helper function for expr_expected_value.  */\n \n static tree\n-expr_expected_value_1 (tree type, tree op0, enum tree_code code, tree op1, bitmap visited)\n+expr_expected_value_1 (tree type, tree op0, enum tree_code code,\n+\t\t       tree op1, bitmap visited)\n {\n   gimple def;\n \n@@ -1255,17 +1256,36 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code, tree op1, bitma\n \t  tree decl = gimple_call_fndecl (def);\n \t  if (!decl)\n \t    return NULL;\n-\t  if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n-\t      && DECL_FUNCTION_CODE (decl) == BUILT_IN_EXPECT)\n-\t    {\n-\t      tree val;\n+\t  if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+\t    switch (DECL_FUNCTION_CODE (decl))\n+\t      {\n+\t      case BUILT_IN_EXPECT:\n+\t\t{\n+\t\t  tree val;\n+\t\t  if (gimple_call_num_args (def) != 2)\n+\t\t    return NULL;\n+\t\t  val = gimple_call_arg (def, 0);\n+\t\t  if (TREE_CONSTANT (val))\n+\t\t    return val;\n+\t\t  return gimple_call_arg (def, 1);\n+\t\t}\n \n-\t      if (gimple_call_num_args (def) != 2)\n-\t\treturn NULL;\n-\t      val = gimple_call_arg (def, 0);\n-\t      if (TREE_CONSTANT (val))\n-\t\treturn val;\n-\t      return gimple_call_arg (def, 1);\n+\t      case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N:\n+\t      case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1:\n+\t      case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2:\n+\t      case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4:\n+\t      case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8:\n+\t      case BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16:\n+\t      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE:\n+\t      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N:\n+\t      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1:\n+\t      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2:\n+\t      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4:\n+\t      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8:\n+\t      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16:\n+\t\t/* Assume that any given atomic operation has low contention,\n+\t\t   and thus the compare-and-swap operation succeeds.  */\n+\t\treturn boolean_true_node;\n \t    }\n \t}\n "}]}