{"sha": "834f9425327768a02383109ce9aa3b1c8a67a822", "node_id": "C_kwDOANBUbNoAKDgzNGY5NDI1MzI3NzY4YTAyMzgzMTA5Y2U5YWEzYjFjOGE2N2E4MjI", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-20T16:32:08Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:32Z"}, "message": "libproc_macro: Add ffi safe i128 & u128\n\nAdd ffi safe representation for i128 and u128 types in Literal rust\ninterface type.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge/literal.rs: Add i128 and u128.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "06ff299ec1552babf53b87a93076510f4ff361c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ff299ec1552babf53b87a93076510f4ff361c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/834f9425327768a02383109ce9aa3b1c8a67a822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/834f9425327768a02383109ce9aa3b1c8a67a822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/834f9425327768a02383109ce9aa3b1c8a67a822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/834f9425327768a02383109ce9aa3b1c8a67a822/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eaf139ee7bb743422ed9c32d153185e125194f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eaf139ee7bb743422ed9c32d153185e125194f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eaf139ee7bb743422ed9c32d153185e125194f9"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "b5be7996783500604eb79adb8d5200de93a8d6ef", "filename": "librust/proc_macro/rust/bridge/literal.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834f9425327768a02383109ce9aa3b1c8a67a822/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834f9425327768a02383109ce9aa3b1c8a67a822/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs?ref=834f9425327768a02383109ce9aa3b1c8a67a822", "patch": "@@ -16,10 +16,9 @@ pub enum Unsigned {\n     Unsigned16(u16),\n     Unsigned32(u32),\n     Unsigned64(u64),\n-    // FIXME: 128 bits ffi is not safe for now\n+    // u128 is not ffi safe, hence this representation\n     // https://github.com/rust-lang/rust/issues/54341\n-    //\n-    // Unsigned128(u128),\n+    Unsigned128(u64, u64),\n }\n \n #[repr(C)]\n@@ -29,10 +28,9 @@ pub enum Signed {\n     Signed16(i16),\n     Signed32(i32),\n     Signed64(i64),\n-    // FIXME: 128 bits ffi is not safe for now\n+    // i128 is not ffi safe, hence this representation\n     // https://github.com/rust-lang/rust/issues/54341\n-    //\n-    // Signed128(i128),\n+    Signed128(u64, u64),\n }\n \n #[repr(C)]\n@@ -82,8 +80,14 @@ impl Literal {\n         Literal::Unsigned(Unsigned::Unsigned64(n), true)\n     }\n \n-    pub fn u128_suffixed(_n: u128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u128_suffixed(n: u128) -> Self {\n+        Literal::Unsigned(\n+            Unsigned::Unsigned128(\n+                (n >> 64).try_into().unwrap(),\n+                (n & 0xFFFFFFFFFFFFFFFF).try_into().unwrap(),\n+            ),\n+            true,\n+        )\n     }\n \n     pub fn usize_suffixed(n: usize) -> Self {\n@@ -106,8 +110,14 @@ impl Literal {\n         Literal::Signed(Signed::Signed64(n), true)\n     }\n \n-    pub fn i128_suffixed(_n: i128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i128_suffixed(n: i128) -> Self {\n+        Literal::Signed(\n+            Signed::Signed128(\n+                (n >> 64).try_into().unwrap(),\n+                (n & 0xFFFFFFFFFFFFFFFF).try_into().unwrap(),\n+            ),\n+            true,\n+        )\n     }\n \n     pub fn isize_suffixed(n: isize) -> Self {\n@@ -132,8 +142,14 @@ impl Literal {\n         Literal::Unsigned(Unsigned::Unsigned64(n), false)\n     }\n \n-    pub fn u128_unsuffixed(_n: u128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u128_unsuffixed(n: u128) -> Self {\n+        Literal::Unsigned(\n+            Unsigned::Unsigned128(\n+                (n >> 64).try_into().unwrap(),\n+                (n & 0xFFFFFFFFFFFFFFFF).try_into().unwrap(),\n+            ),\n+            false,\n+        )\n     }\n \n     pub fn usize_unsuffixed(n: usize) -> Self {\n@@ -156,8 +172,14 @@ impl Literal {\n         Literal::Signed(Signed::Signed64(n), false)\n     }\n \n-    pub fn i128_unsuffixed(_n: i128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i128_unsuffixed(n: i128) -> Self {\n+        Literal::Signed(\n+            Signed::Signed128(\n+                (n >> 64).try_into().unwrap(),\n+                (n & 0xFFFFFFFFFFFFFFFF).try_into().unwrap(),\n+            ),\n+            false,\n+        )\n     }\n \n     pub fn isize_unsuffixed(n: isize) -> Self {\n@@ -270,6 +292,12 @@ impl fmt::Display for Literal {\n                         f.write_str(\"u64\")?;\n                     }\n                 }\n+                Unsigned::Unsigned128(h, l) => {\n+                    ((u128::from(*h) << 64) & u128::from(*l)).fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"u128\")?;\n+                    }\n+                }\n             },\n             Literal::Signed(val, suffixed) => match val {\n                 Signed::Signed8(val) => {\n@@ -296,6 +324,12 @@ impl fmt::Display for Literal {\n                         f.write_str(\"i64\")?;\n                     }\n                 }\n+                Signed::Signed128(h, l) => {\n+                    ((i128::from(*h) << 64) & i128::from(*l)).fmt(f)?;\n+                    if *suffixed {\n+                        f.write_str(\"i128\")?;\n+                    }\n+                }\n             },\n             Literal::Usize(val, suffixed) => {\n                 val.fmt(f)?;"}]}