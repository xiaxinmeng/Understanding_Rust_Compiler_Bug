{"sha": "11f48903b00851c8edc5cf24a3497b8cf9957173", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmNDg5MDNiMDA4NTFjOGVkYzVjZjI0YTM0OTdiOGNmOTk1NzE3Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-06T12:01:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-06T12:01:23Z"}, "message": "reg-stack.c (reg_to_stack): Generate +QNaN using real_nan.\n\n\t* reg-stack.c (reg_to_stack): Generate +QNaN using real_nan.\n\nFrom-SVN: r141640", "tree": {"sha": "4d0042906314a961d0a3980e433ba13bcb8b0780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d0042906314a961d0a3980e433ba13bcb8b0780"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f48903b00851c8edc5cf24a3497b8cf9957173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f48903b00851c8edc5cf24a3497b8cf9957173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f48903b00851c8edc5cf24a3497b8cf9957173", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f48903b00851c8edc5cf24a3497b8cf9957173/comments", "author": null, "committer": null, "parents": [{"sha": "8d3323ded5f5707cf7faffa50925e9b22334eeec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3323ded5f5707cf7faffa50925e9b22334eeec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3323ded5f5707cf7faffa50925e9b22334eeec"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "e0f76e8456a335439b7988764fe94c7cd24d62a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f48903b00851c8edc5cf24a3497b8cf9957173/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f48903b00851c8edc5cf24a3497b8cf9957173/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11f48903b00851c8edc5cf24a3497b8cf9957173", "patch": "@@ -1,3 +1,7 @@\n+2008-11-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* reg-stack.c (reg_to_stack): Generate +QNaN using real_nan.\n+\n 2008-11-06  Ben Elliston  <bje@au.ibm.com>\n \n \t* gcc.c: Remove ancient comment about a bug in Sun cc.\n@@ -35,7 +39,8 @@\n \tqualified pointer conversion before stripping qualifiers.\n \t* gimplify.c (create_tmp_from_val): Use correctly qualified type.\n \t* tree-flow.h (may_propagate_address_into_dereference): Declare.\n-\t* tree-ssa-ccp.c (may_propagate_address_into_dereference): New function.\n+\t* tree-ssa-ccp.c (may_propagate_address_into_dereference): New\n+\tfunction.\n \t(ccp_fold): Use it.\n \t* tree-ssa-forwprop.c (rhs_to_tree): Remove useless conversions,\n \tproperly canonicalize binary ops.\n@@ -718,8 +723,7 @@\n 2008-10-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/30260\n-\t* c-decl.c (finish_enum): Convert non-integer enumerators to enum\n-\ttype.\n+\t* c-decl.c (finish_enum): Convert non-integer enumerators to enum type.\n \t(build_enumerator): Convert enumerators that fit in integer to\n \tinteger type.\n "}, {"sha": "7511d18139ee301364e883142d46bdce15c517e6", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f48903b00851c8edc5cf24a3497b8cf9957173/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f48903b00851c8edc5cf24a3497b8cf9957173/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=11f48903b00851c8edc5cf24a3497b8cf9957173", "patch": "@@ -3180,14 +3180,17 @@ reg_to_stack (void)\n      ??? We can't load from constant memory in PIC mode, because\n      we're inserting these instructions before the prologue and\n      the PIC register hasn't been set up.  In that case, fall back\n-     on zero, which we can get from `ldz'.  */\n+     on zero, which we can get from `fldz'.  */\n \n   if ((flag_pic && !TARGET_64BIT)\n       || ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC)\n     not_a_num = CONST0_RTX (SFmode);\n   else\n     {\n-      not_a_num = gen_lowpart (SFmode, GEN_INT (0x7fc00000));\n+      REAL_VALUE_TYPE r;\n+\n+      real_nan (&r, \"\", 1, SFmode);\n+      not_a_num = CONST_DOUBLE_FROM_REAL_VALUE (r, SFmode);\n       not_a_num = force_const_mem (SFmode, not_a_num);\n     }\n "}]}