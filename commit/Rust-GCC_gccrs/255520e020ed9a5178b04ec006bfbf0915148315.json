{"sha": "255520e020ed9a5178b04ec006bfbf0915148315", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1NTIwZTAyMGVkOWE1MTc4YjA0ZWMwMDZiZmJmMDkxNTE0ODMxNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-08-19T14:22:26Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-08-19T14:22:26Z"}, "message": "re PR middle-end/67133 (ICE at -Os and above on x86_64-linux-gnu in gimple_op, at gimple.h:2274)\n\n\tPR middle-end/67133\n\t* gimple-ssa-isolate-paths.c\n\t(insert_trap_and_remove_trailing_statements): Rename to ...\n\t(insert_trap): ... this.  Don't remove trailing statements; split\n\tblock instead.\n\t(find_explicit_erroneous_behaviour): Don't remove all outgoing edges.\n\n\t* g++.dg/torture/pr67133.C: New test.\n\nFrom-SVN: r227009", "tree": {"sha": "fbf0d5259d8773a3cdb4750d1791d48fa4868075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbf0d5259d8773a3cdb4750d1791d48fa4868075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/255520e020ed9a5178b04ec006bfbf0915148315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255520e020ed9a5178b04ec006bfbf0915148315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255520e020ed9a5178b04ec006bfbf0915148315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255520e020ed9a5178b04ec006bfbf0915148315/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d63c864834782e37f78834d168e7e383d2c080b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63c864834782e37f78834d168e7e383d2c080b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63c864834782e37f78834d168e7e383d2c080b3"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "450e169abfc8681f48317d702b9dec0defd7814d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=255520e020ed9a5178b04ec006bfbf0915148315", "patch": "@@ -1,3 +1,12 @@\n+2015-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/67133\n+\t* gimple-ssa-isolate-paths.c\n+\t(insert_trap_and_remove_trailing_statements): Rename to ...\n+\t(insert_trap): ... this.  Don't remove trailing statements; split\n+\tblock instead.\n+\t(find_explicit_erroneous_behaviour): Don't remove all outgoing edges.\n+\n 2015-08-19  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR other/67042"}, {"sha": "ca2322d1346d63aaf082e96f7a512115e7677e97", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=255520e020ed9a5178b04ec006bfbf0915148315", "patch": "@@ -66,10 +66,10 @@ check_loadstore (gimple stmt, tree op, tree, void *data)\n   return false;\n }\n \n-/* Insert a trap after SI and remove SI and all statements after the trap.  */\n+/* Insert a trap after SI and split the block after the trap.  */\n \n static void\n-insert_trap_and_remove_trailing_statements (gimple_stmt_iterator *si_p, tree op)\n+insert_trap (gimple_stmt_iterator *si_p, tree op)\n {\n   /* We want the NULL pointer dereference to actually occur so that\n      code that wishes to catch the signal can do so.\n@@ -115,18 +115,8 @@ insert_trap_and_remove_trailing_statements (gimple_stmt_iterator *si_p, tree op)\n   else\n     gsi_insert_before (si_p, seq, GSI_NEW_STMT);\n \n-  /* We must remove statements from the end of the block so that we\n-     never reference a released SSA_NAME.  */\n-  basic_block bb = gimple_bb (gsi_stmt (*si_p));\n-  for (gimple_stmt_iterator si = gsi_last_bb (bb);\n-       gsi_stmt (si) != gsi_stmt (*si_p);\n-       si = gsi_last_bb (bb))\n-    {\n-      stmt = gsi_stmt (si);\n-      unlink_stmt_vdef (stmt);\n-      gsi_remove (&si, true);\n-      release_defs (stmt);\n-    }\n+  split_block (gimple_bb (new_stmt), new_stmt);\n+  *si_p = gsi_for_stmt (stmt);\n }\n \n /* BB when reached via incoming edge E will exhibit undefined behaviour\n@@ -215,7 +205,7 @@ isolate_path (basic_block bb, basic_block duplicate,\n \t  update_stmt (ret);\n \t}\n       else\n-\tinsert_trap_and_remove_trailing_statements (&si2, op);\n+\tinsert_trap (&si2, op);\n     }\n \n   return duplicate;\n@@ -422,14 +412,8 @@ find_explicit_erroneous_behaviour (void)\n \t\t    continue;\n \t\t}\n \n-\t      insert_trap_and_remove_trailing_statements (&si,\n-\t\t\t\t\t\t\t  null_pointer_node);\n-\n-\t      /* And finally, remove all outgoing edges from BB.  */\n-\t      edge e;\n-\t      for (edge_iterator ei = ei_start (bb->succs);\n-\t\t   (e = ei_safe_edge (ei)); )\n-\t\tremove_edge (e);\n+\t      insert_trap (&si, null_pointer_node);\n+\t      bb = gimple_bb (gsi_stmt (si));\n \n \t      /* Ignore any more operands on this statement and\n \t\t continue the statement iterator (which should"}, {"sha": "e04bb1bc62d47d5a4e5fdf4b3481c28a00de54c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=255520e020ed9a5178b04ec006bfbf0915148315", "patch": "@@ -1,3 +1,8 @@\n+2015-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/67133\n+\t* g++.dg/torture/pr67133.C: New test.\n+\n 2015-08-18  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n \n \t* gcc.target/powerpc/altivec-35.c: New test."}, {"sha": "0f235728bc8d16e36fd971a92de5513e030d7158", "filename": "gcc/testsuite/g++.dg/torture/pr67133.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr67133.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255520e020ed9a5178b04ec006bfbf0915148315/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr67133.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr67133.C?ref=255520e020ed9a5178b04ec006bfbf0915148315", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fisolate-erroneous-paths-attribute\" }\n+\n+class A;\n+struct B {\n+  typedef A type;\n+};\n+template <typename> struct I : B {};\n+class C {\n+public:\n+  C(char *);\n+  int size();\n+};\n+template <typename> struct D;\n+template <typename _Tp, typename = D<_Tp>> class F {\n+  class G {\n+    template <typename> static _Tp *__test();\n+    typedef int _Del;\n+\n+  public:\n+    typedef decltype(__test<_Del>()) type;\n+  };\n+\n+public:\n+  typename I<_Tp>::type operator*() {\n+    typename G::type a = 0;\n+    return *a;\n+  }\n+};\n+class H {\n+  F<A> Out;\n+  H();\n+};\n+void fn1(void *, void *, int) __attribute__((__nonnull__));\n+class A {\n+  int OutBufEnd, OutBufCur;\n+\n+public:\n+  void operator<<(C p1) {\n+    int b, c = p1.size();\n+    if (OutBufEnd)\n+      fn1(&OutBufCur, &b, c);\n+  }\n+};\n+char* a;\n+H::H() { *Out << a; }"}]}