{"sha": "42d3f74323800d2ce5853dfb9180a5be1ff28d04", "node_id": "C_kwDOANBUbNoAKDQyZDNmNzQzMjM4MDBkMmNlNTg1M2RmYjkxODBhNWJlMWZmMjhkMDQ", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2023-01-10T10:03:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-13T13:34:21Z"}, "message": "libstdc++: Enable string_view in freestanding\n\nThis enables the default contract handler in freestanding environments,\nand, of course, provides freestanding users with string_view.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am: Install bits/char_traits.h,\n\tstd/string_view\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/char_traits.h: Gate hosted-only, wchar-only and\n\tmbstate-only bits behind appropriate #ifs.\n\t* include/std/string_view: Gate <iostream> functionality behind\n\tHOSTED.\n\t* include/std/version: Enable __cpp_lib_constexpr_string_view\n\tand __cpp_lib_starts_ends_with in !HOSTED.\n\t* include/std/ranges: Re-enable __is_basic_string_view on\n\tfreestanding, include <string_view> directly.\n\t* include/precompiled/stdc++.h: Include <string_view> when\n\t!HOSTED too.\n\t* testsuite/20_util/function_objects/searchers.cc: Skip testing\n\tboyer_moore searchers on freestanding\n\t* testsuite/21_strings/basic_string_view/capacity/1.cc: Guard\n\t<string>-related tests behind __STDC_HOSTED__.\n\t* testsuite/21_strings/basic_string_view/cons/char/1.cc: Ditto.\n\t* testsuite/21_strings/basic_string_view/cons/char/2.cc: Remove\n\tunused <stdexcept> include.\n\t* testsuite/21_strings/basic_string_view/cons/char/3.cc: Remove\n\tunused <vector> include.\n\t* testsuite/21_strings/basic_string_view/cons/char/range.cc:\n\tGuard <string> related testing behind __STDC_HOSTED__.\n\t* testsuite/21_strings/basic_string_view/cons/wchar_t/1.cc:\n\tGuard <stdexcept> related tests behind __STDC_HOSTED__.\n\t* testsuite/21_strings/basic_string_view/element_access/char/1.cc:\n\tDitto.\n\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc:\n\tGuard <stdexcept> tests behind __STDC_HOSTED__.\n\t* testsuite/21_strings/basic_string_view/operations/contains/char/2.cc:\n\tEnable test on freestanding, guard <stdexcept> bits behind\n\t__STDC_HOSTED__.\n\t* testsuite/21_strings/basic_string_view/operations/substr/char.cc:\n\tGuard <stdexcept> bits behind __STDC_HOSTED__.\n\t* testsuite/21_strings/basic_string_view/operations/substr/wchar_t.cc:\n\tDitto.", "tree": {"sha": "1d6fa90d2cb8205f17fff263dbf08f785ddeb969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d6fa90d2cb8205f17fff263dbf08f785ddeb969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42d3f74323800d2ce5853dfb9180a5be1ff28d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d3f74323800d2ce5853dfb9180a5be1ff28d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d3f74323800d2ce5853dfb9180a5be1ff28d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d3f74323800d2ce5853dfb9180a5be1ff28d04/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02dab998665dda0f6df31740e8897c42de3d740f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02dab998665dda0f6df31740e8897c42de3d740f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02dab998665dda0f6df31740e8897c42de3d740f"}], "stats": {"total": 170, "additions": 133, "deletions": 37}, "files": [{"sha": "bf566082a8c0682c45828fab788bbde9a8553add", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -46,6 +46,7 @@ std_freestanding = \\\n \t${std_srcdir}/scoped_allocator \\\n \t${std_srcdir}/source_location \\\n \t${std_srcdir}/span \\\n+\t${std_srcdir}/string_view \\\n \t${std_srcdir}/tuple \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/typeindex \\\n@@ -100,7 +101,6 @@ std_headers = \\\n \t${std_srcdir}/stop_token \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n-\t${std_srcdir}/string_view \\\n \t${std_srcdir}/system_error \\\n \t${std_srcdir}/thread \\\n \t${std_srcdir}/unordered_map \\\n@@ -120,6 +120,7 @@ bits_freestanding = \\\n \t${bits_srcdir}/c++0x_warning.h \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/concept_check.h \\\n+\t${bits_srcdir}/char_traits.h \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n \t${bits_srcdir}/enable_special_members.h \\\n \t${bits_srcdir}/functexcept.h \\\n@@ -153,6 +154,7 @@ bits_freestanding = \\\n \t${bits_srcdir}/stl_raw_storage_iter.h \\\n \t${bits_srcdir}/stl_relops.h \\\n \t${bits_srcdir}/stl_uninitialized.h \\\n+\t${bits_srcdir}/string_view.tcc \\\n \t${bits_srcdir}/uniform_int_dist.h \\\n \t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/uses_allocator.h \\\n@@ -172,7 +174,6 @@ bits_headers = \\\n \t${bits_srcdir}/basic_ios.tcc \\\n \t${bits_srcdir}/basic_string.h \\\n \t${bits_srcdir}/basic_string.tcc \\\n-\t${bits_srcdir}/char_traits.h \\\n \t${bits_srcdir}/charconv.h \\\n \t${bits_srcdir}/chrono.h \\\n \t${bits_srcdir}/chrono_io.h \\\n@@ -256,7 +257,6 @@ bits_headers = \\\n \t${bits_srcdir}/streambuf_iterator.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n-\t${bits_srcdir}/string_view.tcc \\\n \t${bits_srcdir}/this_thread_sleep.h \\\n \t${bits_srcdir}/unique_lock.h \\\n \t${bits_srcdir}/unordered_map.h \\"}, {"sha": "36e35e1380637408e1f264c0a9559c9bf715ce4d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -404,6 +404,7 @@ std_freestanding = \\\n \t${std_srcdir}/scoped_allocator \\\n \t${std_srcdir}/source_location \\\n \t${std_srcdir}/span \\\n+\t${std_srcdir}/string_view \\\n \t${std_srcdir}/tuple \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/typeindex \\\n@@ -456,7 +457,6 @@ std_freestanding = \\\n @GLIBCXX_HOSTED_TRUE@\t${std_srcdir}/stop_token \\\n @GLIBCXX_HOSTED_TRUE@\t${std_srcdir}/streambuf \\\n @GLIBCXX_HOSTED_TRUE@\t${std_srcdir}/string \\\n-@GLIBCXX_HOSTED_TRUE@\t${std_srcdir}/string_view \\\n @GLIBCXX_HOSTED_TRUE@\t${std_srcdir}/system_error \\\n @GLIBCXX_HOSTED_TRUE@\t${std_srcdir}/thread \\\n @GLIBCXX_HOSTED_TRUE@\t${std_srcdir}/unordered_map \\\n@@ -475,6 +475,7 @@ bits_freestanding = \\\n \t${bits_srcdir}/c++0x_warning.h \\\n \t${bits_srcdir}/boost_concept_check.h \\\n \t${bits_srcdir}/concept_check.h \\\n+\t${bits_srcdir}/char_traits.h \\\n \t${bits_srcdir}/cpp_type_traits.h \\\n \t${bits_srcdir}/enable_special_members.h \\\n \t${bits_srcdir}/functexcept.h \\\n@@ -508,6 +509,7 @@ bits_freestanding = \\\n \t${bits_srcdir}/stl_raw_storage_iter.h \\\n \t${bits_srcdir}/stl_relops.h \\\n \t${bits_srcdir}/stl_uninitialized.h \\\n+\t${bits_srcdir}/string_view.tcc \\\n \t${bits_srcdir}/uniform_int_dist.h \\\n \t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/uses_allocator.h \\\n@@ -525,7 +527,6 @@ bits_freestanding = \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/basic_ios.tcc \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/basic_string.h \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/basic_string.tcc \\\n-@GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/char_traits.h \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/charconv.h \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/chrono.h \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/chrono_io.h \\\n@@ -609,7 +610,6 @@ bits_freestanding = \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/streambuf_iterator.h \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/streambuf.tcc \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/stringfwd.h \\\n-@GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/string_view.tcc \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/this_thread_sleep.h \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/unique_lock.h \\\n @GLIBCXX_HOSTED_TRUE@\t${bits_srcdir}/unordered_map.h \\"}, {"sha": "6b54f0dde208f62baa0cb29f7b18867997ba476c", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -36,8 +36,16 @@\n \n #pragma GCC system_header\n \n-#include <bits/postypes.h>      // For streampos\n-#include <cwchar>               // For WEOF, wmemmove, wmemset, etc.\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_HOSTED\n+# include <bits/postypes.h>     // For streampos\n+#endif // HOSTED\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+# include <cwchar>              // For WEOF, wmemmove, wmemset, etc.\n+#endif // USE_WCHAR_T\n+\n #if __cplusplus >= 201103L\n # include <type_traits>\n #if !defined __UINT_LEAST16_TYPE__ || !defined __UINT_LEAST32_TYPE__\n@@ -76,9 +84,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Char_types\n     {\n       typedef unsigned long   int_type;\n+#if _GLIBCXX_HOSTED\n       typedef std::streampos  pos_type;\n       typedef std::streamoff  off_type;\n       typedef std::mbstate_t  state_type;\n+#endif // HOSTED\n     };\n \n \n@@ -102,9 +112,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef _CharT                                    char_type;\n       typedef typename _Char_types<_CharT>::int_type    int_type;\n+#if _GLIBCXX_HOSTED\n       typedef typename _Char_types<_CharT>::pos_type    pos_type;\n       typedef typename _Char_types<_CharT>::off_type    off_type;\n       typedef typename _Char_types<_CharT>::state_type  state_type;\n+#endif // HOSTED\n #if __cpp_lib_three_way_comparison\n       using comparison_category = std::strong_ordering;\n #endif\n@@ -158,13 +170,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       eq_int_type(const int_type& __c1, const int_type& __c2)\n       { return __c1 == __c2; }\n \n+#ifdef _GLIBCXX_STDIO_EOF\n       static _GLIBCXX_CONSTEXPR int_type\n       eof()\n       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }\n \n       static _GLIBCXX_CONSTEXPR int_type\n       not_eof(const int_type& __c)\n       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }\n+#endif // defined(_GLIBCXX_STDIO_EOF)\n     };\n \n   template<typename _CharT>\n@@ -330,9 +344,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef char              char_type;\n       typedef int               int_type;\n+#if _GLIBCXX_HOSTED\n       typedef streampos         pos_type;\n       typedef streamoff         off_type;\n       typedef mbstate_t         state_type;\n+#endif // HOSTED\n #if __cpp_lib_three_way_comparison\n       using comparison_category = strong_ordering;\n #endif\n@@ -451,13 +467,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 == __c2; }\n \n+#ifdef _GLIBCXX_STDIO_EOF\n       static _GLIBCXX_CONSTEXPR int_type\n       eof() _GLIBCXX_NOEXCEPT\n       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }\n \n       static _GLIBCXX_CONSTEXPR int_type\n       not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return (__c == eof()) ? 0 : __c; }\n+#endif // defined(_GLIBCXX_STDIO_EOF)\n   };\n \n \n@@ -468,9 +486,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef wchar_t           char_type;\n       typedef wint_t            int_type;\n+#if _GLIBCXX_HOSTED\n       typedef streamoff         off_type;\n       typedef wstreampos        pos_type;\n       typedef mbstate_t         state_type;\n+#endif // HOSTED\n #if __cpp_lib_three_way_comparison\n       using comparison_category = strong_ordering;\n #endif\n@@ -576,13 +596,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 == __c2; }\n \n+#if _GLIBCXX_HOSTED\n       static _GLIBCXX_CONSTEXPR int_type\n       eof() _GLIBCXX_NOEXCEPT\n       { return static_cast<int_type>(WEOF); }\n \n       static _GLIBCXX_CONSTEXPR int_type\n       not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n+#endif // HOSTED\n   };\n #else // _GLIBCXX_USE_WCHAR_T\n   template<>\n@@ -596,9 +618,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef char8_t           char_type;\n       typedef unsigned int      int_type;\n+#if _GLIBCXX_HOSTED\n       typedef u8streampos       pos_type;\n       typedef streamoff         off_type;\n       typedef mbstate_t         state_type;\n+#endif // HOSTED\n #if __cpp_lib_three_way_comparison\n       using comparison_category = strong_ordering;\n #endif\n@@ -707,13 +731,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 == __c2; }\n \n+#if _GLIBCXX_HOSTED\n       static _GLIBCXX_CONSTEXPR int_type\n       eof() _GLIBCXX_NOEXCEPT\n       { return static_cast<int_type>(-1); }\n \n       static _GLIBCXX_CONSTEXPR int_type\n       not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n+#endif // HOSTED\n     };\n #endif //_GLIBCXX_USE_CHAR8_T\n \n@@ -737,9 +763,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n       typedef make_unsigned<char16_t>::type int_type;\n #endif\n+#if _GLIBCXX_HOSTED\n       typedef streamoff         off_type;\n       typedef u16streampos      pos_type;\n       typedef mbstate_t         state_type;\n+#endif // HOSTED\n #if __cpp_lib_three_way_comparison\n       using comparison_category = strong_ordering;\n #endif\n@@ -830,21 +858,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       to_char_type(const int_type& __c) noexcept\n       { return char_type(__c); }\n \n-      static constexpr int_type\n-      to_int_type(const char_type& __c) noexcept\n-      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }\n-\n       static constexpr bool\n       eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\n       { return __c1 == __c2; }\n \n+#if _GLIBCXX_HOSTED\n+      static constexpr int_type\n+      to_int_type(const char_type& __c) noexcept\n+      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }\n+\n       static constexpr int_type\n       eof() noexcept\n       { return static_cast<int_type>(-1); }\n \n       static constexpr int_type\n       not_eof(const int_type& __c) noexcept\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n+#else // !HOSTED\n+      static constexpr int_type\n+      to_int_type(const char_type& __c) noexcept\n+      { return int_type(__c); }\n+#endif // !HOSTED\n     };\n \n   template<>\n@@ -858,9 +892,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n       typedef make_unsigned<char32_t>::type int_type;\n #endif\n+#if _GLIBCXX_HOSTED\n       typedef streamoff         off_type;\n       typedef u32streampos      pos_type;\n       typedef mbstate_t         state_type;\n+#endif // HOSTED\n #if __cpp_lib_three_way_comparison\n       using comparison_category = strong_ordering;\n #endif\n@@ -959,13 +995,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\n       { return __c1 == __c2; }\n \n+#if _GLIBCXX_HOSTED\n       static constexpr int_type\n       eof() noexcept\n       { return static_cast<int_type>(-1); }\n \n       static constexpr int_type\n       not_eof(const int_type& __c) noexcept\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n+#endif // HOSTED\n     };\n \n #if __cpp_lib_three_way_comparison"}, {"sha": "7d21bc256b6474bb1cc8ec090e593d9f890fe7a2", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -79,6 +79,7 @@\n // #include <execution>\n #include <optional>\n #include <variant>\n+#include <string_view>\n #endif\n \n #if __cplusplus >= 202002L\n@@ -100,7 +101,6 @@\n #endif\n #endif\n \n-\n #if _GLIBCXX_HOSTED\n // C\n #ifndef _GLIBCXX_NO_ASSERT\n@@ -201,7 +201,6 @@\n #include <filesystem>\n #include <optional>\n #include <memory_resource>\n-#include <string_view>\n #include <variant>\n #endif\n "}, {"sha": "dc015ac735637f52c4454a0c946bfdc6d43cfd2d", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -43,6 +43,7 @@\n #include <iterator>\n #include <optional>\n #include <span>\n+#include <string_view>\n #include <tuple>\n #if __cplusplus > 202002L\n #include <variant>\n@@ -2242,11 +2243,9 @@ namespace views::__adaptor\n       template<typename _Range>\n \tinline constexpr bool __is_basic_string_view = false;\n \n-#if _GLIBCXX_HOSTED\n       template<typename _CharT, typename _Traits>\n \tinline constexpr bool __is_basic_string_view<basic_string_view<_CharT, _Traits>>\n \t  = true;\n-#endif\n \n       template<typename _Range>\n \tinline constexpr bool __is_subrange = false;"}, {"sha": "60a4c260e80ea57647057907a19ee921935352ad", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -37,24 +37,30 @@\n \n #if __cplusplus >= 201703L\n \n-#include <iosfwd>\n #include <bits/char_traits.h>\n #include <bits/functexcept.h>\n #include <bits/functional_hash.h>\n #include <bits/range_access.h>\n-#include <bits/ostream_insert.h>\n #include <bits/stl_algobase.h>\n #include <ext/numeric_traits.h>\n \n #if __cplusplus >= 202002L\n # include <bits/ranges_base.h>\n #endif\n \n+#if _GLIBCXX_HOSTED\n+# include <iosfwd>\n+# include <bits/ostream_insert.h>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if _GLIBCXX_HOSTED\n # define __cpp_lib_string_view 201803L\n+#endif\n+\n #if __cplusplus > 201703L\n # define __cpp_lib_constexpr_string_view 201811L\n #endif\n@@ -413,7 +419,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++20\n \n #if __cplusplus > 202002L\n-#define __cpp_lib_string_contains 202011L\n+#if _GLIBCXX_HOSTED\n+      // This FTM is not freestanding as it also implies matching <string>\n+      // support, and <string> is omitted from the freestanding subset.\n+# define __cpp_lib_string_contains 202011L\n+#endif // HOSTED\n       [[nodiscard]]\n       constexpr bool\n       contains(basic_string_view __x) const noexcept\n@@ -743,13 +753,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __x.compare(__y) >= 0; }\n #endif // three-way comparison\n \n+#if _GLIBCXX_HOSTED\n   // [string.view.io], Inserters and extractors\n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os,\n \t       basic_string_view<_CharT,_Traits> __str)\n     { return __ostream_insert(__os, __str.data(), __str.size()); }\n-\n+#endif // HOSTED\n \n   // basic_string_view typedef names\n "}, {"sha": "9e1a14e4dad9262bbfb772932f145385ec305fd6", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -191,6 +191,7 @@\n #define __cpp_lib_atomic_ref 201806L\n #define __cpp_lib_atomic_value_initialization 201911L\n #define __cpp_lib_bind_front 201907L\n+#define __cpp_lib_starts_ends_with 201711L\n #if __has_builtin(__builtin_bit_cast)\n # define __cpp_lib_bit_cast 201806L\n #endif\n@@ -203,6 +204,7 @@\n #if __cpp_impl_destroying_delete\n # define __cpp_lib_destroying_delete 201806L\n #endif\n+#define __cpp_lib_constexpr_string_view 201811L\n #define __cpp_lib_endian 201907L\n #define __cpp_lib_int_pow2 202002L\n #define __cpp_lib_integer_comparison_functions 202002L\n@@ -271,7 +273,6 @@\n #  define __cpp_lib_constexpr_string 201811L\n # endif\n #endif\n-#define __cpp_lib_constexpr_string_view 201811L\n #define __cpp_lib_constexpr_tuple 201811L\n #define __cpp_lib_constexpr_utility 201811L\n #define __cpp_lib_constexpr_vector 201907L\n@@ -295,7 +296,6 @@\n #define __cpp_lib_shared_ptr_arrays 201707L\n #define __cpp_lib_shift 201806L\n #define __cpp_lib_smart_ptr_for_overwrite 202002L\n-#define __cpp_lib_starts_ends_with 201711L\n # if _GLIBCXX_USE_CXX11_ABI\n // Only supported with cxx11-abi\n #  define __cpp_lib_syncbuf 201803L"}, {"sha": "2e77a6314b7ac2d1351cd77cf98cc5abde8090e1", "filename": "libstdc++-v3/testsuite/20_util/function_objects/searchers.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -24,15 +24,19 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-#ifndef __cpp_lib_boyer_moore_searcher\n-# error \"Feature-test macro for searchers missing\"\n-#elif __cpp_lib_boyer_moore_searcher < 201603\n-# error \"Feature-test macro for searchers has wrong value\"\n-#endif\n+#if __STDC_HOSTED__\n+# ifndef __cpp_lib_boyer_moore_searcher\n+#  error \"Feature-test macro for searchers missing\"\n+# elif __cpp_lib_boyer_moore_searcher < 201603\n+#  error \"Feature-test macro for searchers has wrong value\"\n+# endif\n+#endif // HOSTED\n \n using std::default_searcher;\n+#if __STDC_HOSTED__\n using std::boyer_moore_searcher;\n using std::boyer_moore_horspool_searcher;\n+#endif // HOSTED\n \n void\n test01()\n@@ -51,8 +55,10 @@ test01()\n     auto nlen = std::strlen(n);\n     auto ne = n + nlen;\n     default_searcher d(n, ne);\n+#if __STDC_HOSTED__\n     boyer_moore_searcher bm(n, ne);\n     boyer_moore_horspool_searcher bmh(n, ne);\n+#endif // HOSTED\n     for (auto h : haystacks)\n     {\n       auto he = h + std::strlen(h);\n@@ -63,6 +69,8 @@ test01()\n \tVERIFY( d_res.second == d_res.first );\n       else\n \tVERIFY( d_res.second == (d_res.first + nlen) );\n+\n+#if __STDC_HOSTED__\n       auto bm_res = bm(h, he);\n       VERIFY( bm_res.first == res );\n       if (res == he)\n@@ -75,6 +83,7 @@ test01()\n \tVERIFY( bmh_res.second == bmh_res.first );\n       else\n \tVERIFY( bmh_res.second == (bmh_res.first + nlen) );\n+#endif\n     }\n   }\n }\n@@ -96,8 +105,10 @@ test02()\n     auto nlen = std::char_traits<wchar_t>::length(n);\n     auto ne = n + nlen;\n     default_searcher d(n, ne);\n+#if __STDC_HOSTED__\n     boyer_moore_searcher bm(n, ne);\n     boyer_moore_horspool_searcher bmh(n, ne);\n+#endif // HOSTED\n     for (auto h : haystacks)\n     {\n       auto he = h + std::char_traits<wchar_t>::length(h);\n@@ -108,6 +119,7 @@ test02()\n \tVERIFY( d_res.second == d_res.first );\n       else\n \tVERIFY( d_res.second == (d_res.first + nlen) );\n+#if __STDC_HOSTED__\n       auto bm_res = bm(h, he);\n       VERIFY( bm_res.first == res );\n       if (res == he)\n@@ -120,6 +132,7 @@ test02()\n \tVERIFY( bmh_res.second == bmh_res.first );\n       else\n \tVERIFY( bmh_res.second == (bmh_res.first + nlen) );\n+#endif // HOSTED\n     }\n   }\n }\n@@ -147,8 +160,10 @@ test03()\n   const char* he = haystack + std::strlen(haystack);\n \n   default_searcher d(needle, ne, eq);\n+#if __STDC_HOSTED__\n   boyer_moore_searcher bm(needle, ne, eq, eq);\n   boyer_moore_horspool_searcher bmh(needle, ne, eq, eq);\n+#endif\n \n   auto res = std::search(haystack, he, needle, ne, eq);\n   auto d_res = d(haystack, he);\n@@ -157,6 +172,7 @@ test03()\n     VERIFY( d_res.second == d_res.first );\n   else\n     VERIFY( d_res.second == (d_res.first + nlen) );\n+#if __STDC_HOSTED__\n   auto bm_res = bm(haystack, he);\n   VERIFY( bm_res.first == res );\n   if (res == he)\n@@ -169,6 +185,7 @@ test03()\n     VERIFY( bmh_res.second == bmh_res.first );\n   else\n     VERIFY( bmh_res.second == (bmh_res.first + nlen) );\n+#endif // HOSTED\n }\n \n int"}, {"sha": "eb39a5ffdc2e423a09ae882cb340b2db4f5e4438", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/capacity/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcapacity%2F1.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -45,9 +45,11 @@ namespace std\n       typedef A<B> \t\tchar_type;\n       // Unsigned as wint_t in unsigned.\n       typedef unsigned long  \tint_type;\n+#if __STDC_HOSTED__\n       typedef streampos \tpos_type;\n       typedef streamoff \toff_type;\n       typedef mbstate_t \tstate_type;\n+#endif // HOSTED\n       \n       static void \n       assign(char_type& __c1, const char_type& __c2)"}, {"sha": "014d6335efaf5849dabc0f156b138688c1206596", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/1.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F1.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -20,10 +20,13 @@\n // basic_string_view constructors.\n \n #include <string_view>\n-#include <string>\n #include <cstring>\n #include <testsuite_hooks.h>\n \n+#if __STDC_HOSTED__\n+# include <string>\n+#endif // HOSTED\n+\n void\n test01()\n {\n@@ -53,10 +56,12 @@ test01()\n   VERIFY( str05.length() == len_lit01 );\n   VERIFY( str05.data() == str_lit01 );\n \n+#if __STDC_HOSTED__\n   // basic_string_view(basic_string& s)\n   std::string istr07(10, 'z');\n   std::string_view str07{istr07};\n   VERIFY( str07.length() == 10 );\n+#endif // HOSTED\n }\n \n int"}, {"sha": "48dff0e3de7c0fd6f48c543e5d9d7fa494433b69", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F2.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -21,7 +21,6 @@\n \n #include <new>\n #include <string_view>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n void"}, {"sha": "2aac45a90c0ce2029193b7717a45c12f853326bb", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2F3.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -20,7 +20,6 @@\n // basic_string_view constructors.\n \n #include <string_view>\n-#include <vector>\n #include <testsuite_hooks.h>\n \n void"}, {"sha": "5b61b901e60444800bc69bc46bb097ae7fd91731", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/range.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -19,10 +19,13 @@\n // { dg-do run { target c++20 } }\n \n #include <string_view>\n-#include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+#if __STDC_HOSTED__\n+# include <vector>\n+#endif // HOSTED\n+\n constexpr char str[] = \"abcdefg\";\n constexpr std::basic_string_view<char> s(std::begin(str), std::cend(str) - 1);\n static_assert( s == str );\n@@ -38,11 +41,13 @@ static_assert( ! noexcept(std::basic_string_view<char>(I{}, I{})) );\n void\n test01()\n {\n+#if __STDC_HOSTED__\n   std::vector<char> v{'a', 'b', 'c'};\n   std::basic_string_view<char> s(v.begin(), v.end());\n   VERIFY( s.data() == v.data() );\n   std::basic_string_view ctad(v.begin(), v.end());\n   VERIFY( ctad == s );\n+#endif // HOSTED\n }\n \n int"}, {"sha": "ef6825a7c4ee30ec78db78304192c2717e398fdf", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/wchar_t/1.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2F1.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -20,7 +20,9 @@\n // basic_string_view constructors.\n \n #include <string_view>\n-#include <string>\n+#if __STDC_HOSTED__\n+# include <string>\n+#endif // HOSTED\n #include <cwchar>\n #include <testsuite_hooks.h>\n \n@@ -53,10 +55,12 @@ test01()\n   VERIFY( str05.length() == len_lit01 );\n   VERIFY( str05.data() == str_lit01 );\n \n+#if __STDC_HOSTED__\n   // basic_string_view(basic_string& s)\n   std::wstring istr07(10, L'z');\n   std::wstring_view str07{istr07};\n   VERIFY( str07.length() == 10 );\n+#endif // HOSTED\n }\n \n int"}, {"sha": "baba9843c9c7ee664073ad62847df2889ea49845", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/char/1.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fchar%2F1.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -20,9 +20,12 @@\n // basic_string element access\n \n #include <string_view>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n+#if __STDC_HOSTED__\n+# include <stdexcept>\n+#endif // HOSTED\n+\n void\n test01()\n {\n@@ -43,6 +46,7 @@ test01()\n   //cref cref2 = str01[csz01];\n   //VERIFY( cref2 == char() );\n \n+#if __STDC_HOSTED__\n   // const_reference at(size_type pos) const;\n   csz01 = str01.size();\n   cref cref3 = str01.at(csz01 - 1);\n@@ -60,6 +64,7 @@ test01()\n   {\n     VERIFY( false );\n   }\n+#endif // HOSTED\n }\n \n int"}, {"sha": "3d3b513d069b65cc2228d9e1e93cb61018bc7e8e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Felement_access%2Fwchar_t%2F1.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -20,7 +20,9 @@\n // basic_string_view element access\n \n #include <string_view>\n-#include <stdexcept>\n+#if __STDC_HOSTED__\n+# include <stdexcept>\n+#endif // HOSTED\n #include <testsuite_hooks.h>\n \n void\n@@ -43,6 +45,7 @@ test01()\n   //cref cref2 = str01[csz01];\n   //VERIFY( cref2 == wchar_t() );\n \n+#if __STDC_HOSTED__\n   // const_reference at(size_type pos) const;\n   csz01 = str01.size();\n   cref cref3 = str01.at(csz01 - 1);\n@@ -60,6 +63,7 @@ test01()\n   {\n     VERIFY( false );\n   }\n+#endif // HOSTED\n }\n \n int"}, {"sha": "c106a553f4004b3e89d8595d1bc928908c79b542", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/contains/char/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcontains%2Fchar%2F2.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -1,6 +1,5 @@\n // { dg-options \"-std=gnu++23\" }\n // { dg-do compile { target c++23 } }\n-// { dg-require-effective-target hosted }\n \n // Copyright (C) 2021-2022 Free Software Foundation, Inc.\n //"}, {"sha": "a652e643f6711b6f901996f56f41443c398254f3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/substr/char.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fchar.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -20,9 +20,12 @@\n // basic_string_view::substr\n \n #include <string_view>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n+#if __STDC_HOSTED__\n+# include <stdexcept>\n+#endif\n+\n void\n test01()\n {\n@@ -43,6 +46,7 @@ test01()\n   str02 = str01.substr(10);\n   VERIFY( str02 == \"pacifica\" );\n \n+#if __STDC_HOSTED__\n   try\n   {\n     str02 = str01.substr(csz01 + 1);\n@@ -68,6 +72,7 @@ test01()\n   {\n     VERIFY( false );\n   }\n+#endif // HOSTED\n }\n \n int"}, {"sha": "a02a61c9b4ce446def702b1078f9760820fd3749", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/substr/wchar_t.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fwchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d3f74323800d2ce5853dfb9180a5be1ff28d04/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fwchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fsubstr%2Fwchar_t.cc?ref=42d3f74323800d2ce5853dfb9180a5be1ff28d04", "patch": "@@ -20,9 +20,12 @@\n // basic_string_view::substr\n \n #include <string_view>\n-#include <stdexcept>\n #include <testsuite_hooks.h>\n \n+#if __STDC_HOSTED__\n+# include <stdexcept>\n+#endif\n+\n void\n test01()\n {\n@@ -43,6 +46,7 @@ test01()\n   str02 = str01.substr(10);\n   VERIFY( str02 == L\"pacifica\" );\n \n+#if __STDC_HOSTED__\n   try\n   {\n     str02 = str01.substr(csz01 + 1);\n@@ -68,6 +72,7 @@ test01()\n   {\n     VERIFY( false );\n   }\n+#endif // HOSTED\n }\n \n int"}]}