{"sha": "b73aec4fa5506d3f657aede2e44f989a894cf7aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczYWVjNGZhNTUwNmQzZjY1N2FlZGUyZTQ0Zjk4OWE4OTRjZjdhYQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-09-02T07:26:21Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-09-02T07:26:21Z"}, "message": "Revert this change:\n\n\t2006-03-17  Alexandre Oliva  <aoliva@redhat.com>\n\t* dwarf2out.c (dwarf2out_stack_adjust): Always track the stack\n\tpointer, instead of assuming it is possible to derive the\n\tcorrect args size from a call insn.\n\nFrom-SVN: r116659", "tree": {"sha": "85448e962dab7223ed3cb23b1a0952c2871eb69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85448e962dab7223ed3cb23b1a0952c2871eb69d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b73aec4fa5506d3f657aede2e44f989a894cf7aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73aec4fa5506d3f657aede2e44f989a894cf7aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73aec4fa5506d3f657aede2e44f989a894cf7aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73aec4fa5506d3f657aede2e44f989a894cf7aa/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc038ad518596730e2962addeaa732b7696d458a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc038ad518596730e2962addeaa732b7696d458a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc038ad518596730e2962addeaa732b7696d458a"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "d16697ee748c8772e4b3d34ac2e2aebf632d6516", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73aec4fa5506d3f657aede2e44f989a894cf7aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73aec4fa5506d3f657aede2e44f989a894cf7aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b73aec4fa5506d3f657aede2e44f989a894cf7aa", "patch": "@@ -1,3 +1,11 @@\n+2006-09-02  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tRevert this change:\n+\t2006-03-17  Alexandre Oliva  <aoliva@redhat.com>\n+\t* dwarf2out.c (dwarf2out_stack_adjust): Always track the stack\n+\tpointer, instead of assuming it is possible to derive the\n+\tcorrect args size from a call insn.\n+\n 2006-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/27567"}, {"sha": "20dd06be5f63c2545b6d08dba4bbf35bc4412b01", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73aec4fa5506d3f657aede2e44f989a894cf7aa/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73aec4fa5506d3f657aede2e44f989a894cf7aa/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b73aec4fa5506d3f657aede2e44f989a894cf7aa", "patch": "@@ -1086,7 +1086,7 @@ stack_adjust_offset (rtx pattern)\n    much extra space it needs to pop off the stack.  */\n \n static void\n-dwarf2out_stack_adjust (rtx insn, bool after_p ATTRIBUTE_UNUSED)\n+dwarf2out_stack_adjust (rtx insn, bool after_p)\n {\n   HOST_WIDE_INT offset;\n   const char *label;\n@@ -1099,7 +1099,31 @@ dwarf2out_stack_adjust (rtx insn, bool after_p ATTRIBUTE_UNUSED)\n   if (prologue_epilogue_contains (insn) || sibcall_epilogue_contains (insn))\n     return;\n \n-  if (BARRIER_P (insn))\n+  /* If only calls can throw, and we have a frame pointer,\n+     save up adjustments until we see the CALL_INSN.  */\n+  if (!flag_asynchronous_unwind_tables && cfa.reg != STACK_POINTER_REGNUM)\n+    {\n+      if (CALL_P (insn) && !after_p)\n+\t{\n+\t  /* Extract the size of the args from the CALL rtx itself.  */\n+\t  insn = PATTERN (insn);\n+\t  if (GET_CODE (insn) == PARALLEL)\n+\t    insn = XVECEXP (insn, 0, 0);\n+\t  if (GET_CODE (insn) == SET)\n+\t    insn = SET_SRC (insn);\n+\t  gcc_assert (GET_CODE (insn) == CALL);\n+\t  dwarf2out_args_size (\"\", INTVAL (XEXP (insn, 1)));\n+\t}\n+      return;\n+    }\n+\n+  if (CALL_P (insn) && !after_p)\n+    {\n+      if (!flag_asynchronous_unwind_tables)\n+\tdwarf2out_args_size (\"\", args_size);\n+      return;\n+    }\n+  else if (BARRIER_P (insn))\n     {\n       /* When we see a BARRIER, we know to reset args_size to 0.  Usually\n \t the compiler will have already emitted a stack adjustment, but\n@@ -1121,20 +1145,9 @@ dwarf2out_stack_adjust (rtx insn, bool after_p ATTRIBUTE_UNUSED)\n \tif (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == SET)\n \t  offset += stack_adjust_offset (XVECEXP (PATTERN (insn), 0, i));\n     }\n-  else if (GET_CODE (insn) == CALL_INSN)\n-    offset = 0;\n   else\n     return;\n \n-  /* We handle this separately because we want stack adjustments in a\n-     CALL_INSN to be handled.  */;\n-  if (GET_CODE (insn) == CALL_INSN)\n-    {\n-      /* If only calls can throw, adjust args_size only at call sites.  */\n-      if (!flag_asynchronous_unwind_tables)\n-\tdwarf2out_args_size (\"\", args_size);\n-    }\n-\n   if (offset == 0)\n     return;\n \n@@ -1149,16 +1162,6 @@ dwarf2out_stack_adjust (rtx insn, bool after_p ATTRIBUTE_UNUSED)\n   if (args_size < 0)\n     args_size = 0;\n \n-  /* If only calls can throw and we have a frame pointer, we'll save\n-     up adjustments until we see the CALL_INSN.  We used to return\n-     early and derive args_size from NARGS in the CALL_INSN itself,\n-     but that doesn't compute the right value if we have nested call\n-     expansions, e.g., stack adjustments for a call have already been\n-     emitted, and then we issue another call to compute an argument\n-     for the enclosing call (i.e., bar (foo ())).  */\n-  if (!flag_asynchronous_unwind_tables && cfa.reg != STACK_POINTER_REGNUM)\n-    return;\n-\n   label = dwarf2out_cfi_label ();\n   def_cfa_1 (label, &cfa);\n   if (flag_asynchronous_unwind_tables)"}]}