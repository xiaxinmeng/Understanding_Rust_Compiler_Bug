{"sha": "4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE2MzMwYWMwNmE1YzE3NTZiZjQ0YWEwNDNmZDhlMGQ1MTliZWFjYw==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-01-26T02:33:29Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-01-26T02:33:29Z"}, "message": "c4x.h (COUNTER_REGS): New register class.\n\nTue Jan 26 23:21:49 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n\t* config/c4x/c4x.h (COUNTER_REGS): New register class.\n\t* config/c4x/c4x.md (*rptb_init): Change constraints.\n\t(rptb_end): Emit alternate looping instructions if\n\tRC register not allocated for loop counter.\n\t(decrement_and_branch_on_count): Allow other registers\n\tfor loop counter.\n\nFrom-SVN: r24868", "tree": {"sha": "26b970f2bf4e614c87cce9c00f41529608de4ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26b970f2bf4e614c87cce9c00f41529608de4ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6330ac06a5c1756bf44aa043fd8e0d519beacc/comments", "author": null, "committer": null, "parents": [{"sha": "a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "07102f976c8e7230a893f911205a2e103f867e7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a6330ac06a5c1756bf44aa043fd8e0d519beacc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a6330ac06a5c1756bf44aa043fd8e0d519beacc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "patch": "@@ -1,3 +1,12 @@\n+Tue Jan 26 23:21:49 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.h (COUNTER_REGS): New register class.\n+\t* config/c4x/c4x.md (*rptb_init): Change constraints.\n+\t(rptb_end): Emit alternate looping instructions if \n+\tRC register not allocated for loop counter.\n+\t(decrement_and_branch_on_count): Allow other registers\n+\tfor loop counter.\n+\n 1999-01-25 14:26 -0500  Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* cppexp.c: "}, {"sha": "d8884181d5dac00e469b67e3a188e898618d5443", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a6330ac06a5c1756bf44aa043fd8e0d519beacc/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a6330ac06a5c1756bf44aa043fd8e0d519beacc/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "patch": "@@ -643,6 +643,7 @@ enum reg_class\n     BK_REG,\t\t\t/* 'k' */\n     SP_REG,\t\t\t/* 'b' */\n     RC_REG,\t\t\t/* 'v' */\n+    COUNTER_REGS,\t\t/*  */\n     INT_REGS,\t\t\t/* 'c' */\n     GENERAL_REGS,\t\t/* 'r' */\n     DP_REG,\t\t\t/* 'z' */\n@@ -665,6 +666,7 @@ enum reg_class\n    \"BK_REG\",\t\t\\\n    \"SP_REG\",\t\t\\\n    \"RC_REG\",\t\t\\\n+   \"COUNTER_REGS\",\t\\\n    \"INT_REGS\",\t\t\\\n    \"GENERAL_REGS\",\t\\\n    \"DP_REG\",\t\t\\\n@@ -690,6 +692,7 @@ enum reg_class\n  {0x00080000}, /* 'k' BK */\t\t\t\\\n  {0x00100000}, /* 'b' SP */\t\t\t\\\n  {0x08000000}, /* 'v' RC */\t\t\t\\\n+ {0x0800ff00}, /*     RC,AR0-AR7 */\t\t\\\n  {0x0e1eff00}, /* 'c' AR0-AR7, IR0-IR1, BK, SP, RS, RE, RC */\t\\\n  {0xfe1effff}, /* 'r' R0-R11, AR0-AR7, IR0-IR1, BK, SP, RS, RE, RC */\\\n  {0x00010000}, /* 'z' DP */\t\t\t\\"}, {"sha": "8e406cc28a0e2ce5394b4c0fc728014b26a950f4", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a6330ac06a5c1756bf44aa043fd8e0d519beacc/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a6330ac06a5c1756bf44aa043fd8e0d519beacc/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "patch": "@@ -4582,23 +4582,24 @@\n \n ; This pattern needs to be emitted at the start of the loop to\n ; say that RS and RE are loaded.\n-(define_insn \"init_branch_on_count\"\n-  [(unspec[(match_operand:QI 0 \"rc_reg_operand\" \"v\")] 22)\n+(define_insn \"*rptb_init\"\n+  [(unspec[(match_operand:QI 0 \"register_operand\" \"va\")] 22)\n    (clobber (reg:QI 25))\n    (clobber (reg:QI 26))]\n   \"\"\n   \"\"\n   [(set_attr \"type\" \"repeat\")])\n \n+\n ; The RS (25) and RE (26) registers must be unviolate from the top of the loop\n ; to here.\n (define_insn \"rptb_end\"\n   [(set (pc)\n-        (if_then_else (ge (match_operand:QI 2 \"rc_reg_operand\" \"0,0,0,0,0\")\n+        (if_then_else (ge (match_operand:QI 0 \"register_operand\" \"+v,?a,!*d,!*x*k,!m\")\n                           (const_int 0))\n                       (label_ref (match_operand 1 \"\" \"\"))\n                       (pc)))\n-   (set (match_operand:QI 0 \"rc_reg_operand\" \"+v,*a,*d,*x*k,*m\")\n+   (set (match_dup 0)\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n    (use (reg:QI 25))\n@@ -4608,11 +4609,11 @@\n   \"*\n    if (which_alternative == 0)\n      return c4x_rptb_nop_p (insn) ? \\\"nop\\\" : \\\"\\\";\n-   else if (which_alternative == 1)\n+   else if (which_alternative == 1 && TARGET_DB)\n      return \\\"dbu%#\\\\t%0,%l1\\\";\n    else if (which_alternative == 2)\n      return c4x_output_cbranch (\\\"subi\\\\t1,%0\\\\n\\\\tbge\\\", insn);\n-   else if (which_alternative == 3)\n+   else if (which_alternative == 3 || (which_alternative == 1 && ! TARGET_DB))\n      return c4x_output_cbranch (\\\"subi\\\\t1,%0\\\\n\\\\tcmpi\\\\t0,%0\\\\n\\\\tbge\\\", insn);\n    else\n      return c4x_output_cbranch (\\\"push\\\\tr0\\\\n\\\\tldi\\\\t%0,r0\\\\n\\\\tsubi\\\\t1,r0\\\\n\\\\tsti\\\\tr0,%0\\\\n\\\\tpop\\\\tr0\\\\n\\\\tbhs\\\", insn);\n@@ -4622,7 +4623,7 @@\n \n (define_expand \"decrement_and_branch_on_count\"\n   [(parallel [(set (pc)\n-                   (if_then_else (ge (match_operand:QI 0 \"rc_reg_operand\" \"\")\n+                   (if_then_else (ge (match_operand:QI 0 \"register_operand\" \"\")\n                                      (const_int 0))\n                                  (label_ref (match_operand 1 \"\" \"\"))\n                                  (pc)))\n@@ -4633,8 +4634,15 @@\n               (use (reg:QI 26))\n               (clobber (reg:CC_NOOV 21))])]\n   \"\"\n-  \"\")\n-\n+  \"if (1)\n+     {\n+        /* The C30 maximum iteration count for DB is 2^24.  */\n+\tif (!TARGET_DB)\n+            FAIL;\n+        emit_insn (gen_decrement_and_branch_until_zero (operands[0],\n+                                                        operands[1]));\n+\tDONE;\n+     }\")\n \n (define_expand \"movstrqi_small2\"\n   [(parallel [(set (mem:BLK (match_operand:BLK 0 \"src_operand\" \"\"))"}]}