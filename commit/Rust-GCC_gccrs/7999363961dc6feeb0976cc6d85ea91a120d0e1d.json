{"sha": "7999363961dc6feeb0976cc6d85ea91a120d0e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5OTM2Mzk2MWRjNmZlZWIwOTc2Y2M2ZDg1ZWE5MWExMjBkMGUxZA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-06-08T15:39:25Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-06-10T11:29:52Z"}, "message": "Extract 'goacc_enter_exit_data_internal' from 'libgomp/oacc-mem.c:GOACC_enter_exit_data'\n\n\tlibgomp/\n\t* oacc-mem.c (goacc_enter_exit_data_internal): New function,\n\textracted from...\n\t(GOACC_enter_exit_data): ... here.\n\t(GOACC_declare): Use it.\n\nCo-Authored-By: Andrew Stubbs <ams@codesourcery.com>", "tree": {"sha": "c293b6d4e54e1ca5905d9440bfe0d2663c78a106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c293b6d4e54e1ca5905d9440bfe0d2663c78a106"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7999363961dc6feeb0976cc6d85ea91a120d0e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7999363961dc6feeb0976cc6d85ea91a120d0e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7999363961dc6feeb0976cc6d85ea91a120d0e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7999363961dc6feeb0976cc6d85ea91a120d0e1d/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a77c7033ae4ed05a2f7e78600522610a8d82225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a77c7033ae4ed05a2f7e78600522610a8d82225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a77c7033ae4ed05a2f7e78600522610a8d82225"}], "stats": {"total": 130, "additions": 65, "deletions": 65}, "files": [{"sha": "f6173b91fddaa3396bfe3781edd6acf2f7860855", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7999363961dc6feeb0976cc6d85ea91a120d0e1d/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7999363961dc6feeb0976cc6d85ea91a120d0e1d/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=7999363961dc6feeb0976cc6d85ea91a120d0e1d", "patch": "@@ -1320,56 +1320,22 @@ goacc_exit_data_internal (struct gomp_device_descr *acc_dev, size_t mapnum,\n   gomp_mutex_unlock (&acc_dev->lock);\n }\n \n-void\n-GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n-\t\t       size_t *sizes, unsigned short *kinds, int async,\n-\t\t       int num_waits, ...)\n+static void\n+goacc_enter_exit_data_internal (int flags_m, size_t mapnum, void **hostaddrs,\n+\t\t\t\tsize_t *sizes, unsigned short *kinds,\n+\t\t\t\tbool data_enter, int async, int num_waits,\n+\t\t\t\tva_list *ap)\n {\n   int flags = GOACC_FLAGS_UNMARSHAL (flags_m);\n \n   struct goacc_thread *thr;\n   struct gomp_device_descr *acc_dev;\n-  bool data_enter = false;\n-  size_t i;\n \n   goacc_lazy_initialize ();\n \n   thr = goacc_thread ();\n   acc_dev = thr->dev;\n \n-  /* Determine if this is an \"acc enter data\".  */\n-  for (i = 0; i < mapnum; ++i)\n-    {\n-      unsigned char kind = kinds[i] & 0xff;\n-\n-      if (kind == GOMP_MAP_POINTER\n-\t  || kind == GOMP_MAP_TO_PSET\n-\t  || kind == GOMP_MAP_STRUCT)\n-\tcontinue;\n-\n-      if (kind == GOMP_MAP_FORCE_ALLOC\n-\t  || kind == GOMP_MAP_FORCE_PRESENT\n-\t  || kind == GOMP_MAP_ATTACH\n-\t  || kind == GOMP_MAP_FORCE_TO\n-\t  || kind == GOMP_MAP_TO\n-\t  || kind == GOMP_MAP_ALLOC)\n-\t{\n-\t  data_enter = true;\n-\t  break;\n-\t}\n-\n-      if (kind == GOMP_MAP_RELEASE\n-\t  || kind == GOMP_MAP_DELETE\n-\t  || kind == GOMP_MAP_DETACH\n-\t  || kind == GOMP_MAP_FORCE_DETACH\n-\t  || kind == GOMP_MAP_FROM\n-\t  || kind == GOMP_MAP_FORCE_FROM)\n-\tbreak;\n-\n-      gomp_fatal (\">>>> GOACC_enter_exit_data UNHANDLED kind 0x%.2x\",\n-\t\t      kind);\n-    }\n-\n   bool profiling_p = GOACC_PROFILING_DISPATCH_P (true);\n \n   acc_prof_info prof_info;\n@@ -1433,13 +1399,7 @@ GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n     }\n \n   if (num_waits)\n-    {\n-      va_list ap;\n-\n-      va_start (ap, num_waits);\n-      goacc_wait (async, num_waits, &ap);\n-      va_end (ap);\n-    }\n+    goacc_wait (async, num_waits, ap);\n \n   goacc_aq aq = get_goacc_asyncqueue (async);\n \n@@ -1462,6 +1422,52 @@ GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n     }\n }\n \n+void\n+GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n+\t\t       size_t *sizes, unsigned short *kinds, int async,\n+\t\t       int num_waits, ...)\n+{\n+  /* Determine if this is an OpenACC \"enter data\".  */\n+  bool data_enter = false;\n+  for (size_t i = 0; i < mapnum; ++i)\n+    {\n+      unsigned char kind = kinds[i] & 0xff;\n+\n+      if (kind == GOMP_MAP_POINTER\n+\t  || kind == GOMP_MAP_TO_PSET\n+\t  || kind == GOMP_MAP_STRUCT)\n+\tcontinue;\n+\n+      if (kind == GOMP_MAP_FORCE_ALLOC\n+\t  || kind == GOMP_MAP_FORCE_PRESENT\n+\t  || kind == GOMP_MAP_ATTACH\n+\t  || kind == GOMP_MAP_FORCE_TO\n+\t  || kind == GOMP_MAP_TO\n+\t  || kind == GOMP_MAP_ALLOC)\n+\t{\n+\t  data_enter = true;\n+\t  break;\n+\t}\n+\n+      if (kind == GOMP_MAP_RELEASE\n+\t  || kind == GOMP_MAP_DELETE\n+\t  || kind == GOMP_MAP_DETACH\n+\t  || kind == GOMP_MAP_FORCE_DETACH\n+\t  || kind == GOMP_MAP_FROM\n+\t  || kind == GOMP_MAP_FORCE_FROM)\n+\tbreak;\n+\n+      gomp_fatal (\">>>> GOACC_enter_exit_data UNHANDLED kind 0x%.2x\",\n+\t\t      kind);\n+    }\n+\n+  va_list ap;\n+  va_start (ap, num_waits);\n+  goacc_enter_exit_data_internal (flags_m, mapnum, hostaddrs, sizes, kinds,\n+\t\t\t\t  data_enter, async, num_waits, &ap);\n+  va_end (ap);\n+}\n+\n void\n GOACC_declare (int flags_m, size_t mapnum,\n \t       void **hostaddrs, size_t *sizes, unsigned short *kinds)\n@@ -1475,34 +1481,28 @@ GOACC_declare (int flags_m, size_t mapnum,\n \n       switch (kind)\n \t{\n+\tcase GOMP_MAP_ALLOC:\n+\t  if (acc_is_present (hostaddrs[i], sizes[i]))\n+\t    continue;\n+\t  /* FALLTHRU */\n \tcase GOMP_MAP_FORCE_ALLOC:\n-\tcase GOMP_MAP_FORCE_FROM:\n+\tcase GOMP_MAP_TO:\n \tcase GOMP_MAP_FORCE_TO:\n+\t  goacc_enter_exit_data_internal (flags_m, 1, &hostaddrs[i], &sizes[i],\n+\t\t\t\t\t  &kinds[i], true, GOMP_ASYNC_SYNC, 0, NULL);\n+\t  break;\n+\n+\tcase GOMP_MAP_FROM:\n+\tcase GOMP_MAP_FORCE_FROM:\n \tcase GOMP_MAP_RELEASE:\n \tcase GOMP_MAP_DELETE:\n-\t  GOACC_enter_exit_data (flags_m, 1, &hostaddrs[i], &sizes[i],\n-\t\t\t\t &kinds[i], GOMP_ASYNC_SYNC, 0);\n+\t  goacc_enter_exit_data_internal (flags_m, 1, &hostaddrs[i], &sizes[i],\n+\t\t\t\t\t  &kinds[i], false, GOMP_ASYNC_SYNC, 0, NULL);\n \t  break;\n \n \tcase GOMP_MAP_FORCE_DEVICEPTR:\n \t  break;\n \n-\tcase GOMP_MAP_ALLOC:\n-\t  if (!acc_is_present (hostaddrs[i], sizes[i]))\n-\t    GOACC_enter_exit_data (flags_m, 1, &hostaddrs[i], &sizes[i],\n-\t\t\t\t   &kinds[i], GOMP_ASYNC_SYNC, 0);\n-\t  break;\n-\n-\tcase GOMP_MAP_TO:\n-\t  GOACC_enter_exit_data (flags_m, 1, &hostaddrs[i], &sizes[i],\n-\t\t\t\t &kinds[i], GOMP_ASYNC_SYNC, 0);\n-\t  break;\n-\n-\tcase GOMP_MAP_FROM:\n-\t  GOACC_enter_exit_data (flags_m, 1, &hostaddrs[i], &sizes[i],\n-\t\t\t\t &kinds[i], GOMP_ASYNC_SYNC, 0);\n-\t  break;\n-\n \tcase GOMP_MAP_FORCE_PRESENT:\n \t  if (!acc_is_present (hostaddrs[i], sizes[i]))\n \t    gomp_fatal (\"[%p,%ld] is not mapped\", hostaddrs[i],"}]}