{"sha": "89762a83cdc24a5a9471acdc4676d150d3c71a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3NjJhODNjZGMyNGE1YTk0NzFhY2RjNDY3NmQxNTBkM2M3MWExMQ==", "commit": {"author": {"name": "Daniel Santos", "email": "daniel.santos@pobox.com", "date": "2017-09-23T11:02:54Z"}, "committer": {"name": "Daniel Santos", "email": "dansan@gcc.gnu.org", "date": "2017-09-23T11:02:54Z"}, "message": "PR target/82196 addendum: Fix Darwin build breakage and test FAILS on Solaris\n\ngcc/testsuite:\n\t* gcc.target/i386/pr82196-1.c: (b): Remove volatile asm.\n\t* gcc.target/i386/pr82196-2.c: (b): Likewise.\n\nlibgcc:\n\t* configure.ac: Add Check for HAVE_AS_AVX.\n\t* config.in: Regenerate.\n\t* configure: Likewise.\n\t* config/i386/i386-asm.h: Include auto-target.h from libgcc.\n\t(SSE_SAVE, SSE_RESTORE): Emit .byte sequence for !HAVE_AS_AVX.\n\tCorrect out-of-date comments.\n\nFrom-SVN: r253116", "tree": {"sha": "972910d2ae215207d55ad79f76530d5903fe914b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972910d2ae215207d55ad79f76530d5903fe914b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89762a83cdc24a5a9471acdc4676d150d3c71a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89762a83cdc24a5a9471acdc4676d150d3c71a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89762a83cdc24a5a9471acdc4676d150d3c71a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89762a83cdc24a5a9471acdc4676d150d3c71a11/comments", "author": {"login": "daniel-santos", "id": 980562, "node_id": "MDQ6VXNlcjk4MDU2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/980562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-santos", "html_url": "https://github.com/daniel-santos", "followers_url": "https://api.github.com/users/daniel-santos/followers", "following_url": "https://api.github.com/users/daniel-santos/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-santos/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-santos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-santos/subscriptions", "organizations_url": "https://api.github.com/users/daniel-santos/orgs", "repos_url": "https://api.github.com/users/daniel-santos/repos", "events_url": "https://api.github.com/users/daniel-santos/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-santos/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "099666b3fff6c1f81bc1e70bd17fba83c3f9c149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099666b3fff6c1f81bc1e70bd17fba83c3f9c149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/099666b3fff6c1f81bc1e70bd17fba83c3f9c149"}], "stats": {"total": 128, "additions": 114, "deletions": 14}, "files": [{"sha": "b1a0471986c29a9228d42abdd9334e04340bc775", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -1,3 +1,8 @@\n+2017-09-23  Daniel Santos  <daniel.santos@pobox.com>\n+\n+\t* gcc.target/i386/pr82196-1.c: (b): Remove volatile asm.\n+\t* gcc.target/i386/pr82196-2.c: (b): Likewise.\n+\n 2017-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/35691"}, {"sha": "541d975480d02f77dddfa68732eb710d98707182", "filename": "gcc/testsuite/gcc.target/i386/pr82196-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82196-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82196-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82196-1.c?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -1,14 +1,13 @@\n /* { dg-do compile { target lp64 } } */\n /* { dg-options \"-msse -mcall-ms2sysv-xlogues -O2\" } */\n-/* { dg-final { scan-assembler \"call.*__sse_savms64_18\" } } */\n-/* { dg-final { scan-assembler \"jmp.*__sse_resms64x_18\" } } */\n+/* { dg-final { scan-assembler \"call.*__sse_savms64f?_12\" } } */\n+/* { dg-final { scan-assembler \"jmp.*__sse_resms64f?x_12\" } } */\n \n void __attribute__((sysv_abi)) a() {\n }\n \n static void __attribute__((sysv_abi)) (*volatile a_noinfo)() = a;\n \n void __attribute__((ms_abi)) b() {\n-  __asm__ __volatile__ (\"\" :::\"rbx\", \"rbp\", \"r12\", \"r13\", \"r14\", \"r15\");\n   a_noinfo ();\n }"}, {"sha": "7166d068bc1fd2699f4d93ec01a2083bfebcd3da", "filename": "gcc/testsuite/gcc.target/i386/pr82196-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82196-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82196-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82196-2.c?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -1,14 +1,13 @@\n /* { dg-do compile { target lp64 } } */\n /* { dg-options \"-mavx -mcall-ms2sysv-xlogues -O2\" } */\n-/* { dg-final { scan-assembler \"call.*__avx_savms64_18\" } } */\n-/* { dg-final { scan-assembler \"jmp.*__avx_resms64x_18\" } } */\n+/* { dg-final { scan-assembler \"call.*__avx_savms64f?_12\" } } */\n+/* { dg-final { scan-assembler \"jmp.*__avx_resms64f?x_12\" } } */\n \n void __attribute__((sysv_abi)) a() {\n }\n \n static void __attribute__((sysv_abi)) (*volatile a_noinfo)() = a;\n \n void __attribute__((ms_abi)) b() {\n-  __asm__ __volatile__ (\"\" :::\"rbx\", \"rbp\", \"r12\", \"r13\", \"r14\", \"r15\");\n   a_noinfo ();\n }"}, {"sha": "90c07fe57f7e023bf731a2494529adf6d81ed47f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -1,3 +1,12 @@\n+2017-09-23  Daniel Santos  <daniel.santos@pobox.com>\n+\n+\t* configure.ac: Add Check for HAVE_AS_AVX.\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\t* config/i386/i386-asm.h: Include auto-target.h from libgcc.\n+\t(SSE_SAVE, SSE_RESTORE): Emit .byte sequence for !HAVE_AS_AVX.\n+\tCorrect out-of-date comments.\n+\n 2017-09-20  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* config/i386/cpuinfo.h (processor_types): Add INTEL_KNM."}, {"sha": "f9fb253874f9d726c07bd8667f465fa7a2f6b895", "filename": "libgcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -1,5 +1,8 @@\n /* config.in.  Generated from configure.ac by autoheader.  */\n \n+/* Define to 1 if the assembler supports AVX. */\n+#undef HAVE_AS_AVX\n+\n /* Define to 1 if the target assembler supports thread-local storage. */\n #undef HAVE_CC_TLS\n "}, {"sha": "aad1a752106068abe793a25cd2861b1d7cb785da", "filename": "libgcc/config/i386/i386-asm.h", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfig%2Fi386%2Fi386-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfig%2Fi386%2Fi386-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fi386-asm.h?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -26,6 +26,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef I386_ASM_H\n #define I386_ASM_H\n \n+#include \"auto-target.h\"\n #include \"auto-host.h\"\n \n #define PASTE2(a, b) PASTE2a(a, b)\n@@ -69,22 +70,26 @@ ASMNAME(fn):\n \n #ifdef MS2SYSV_STUB_AVX\n # define MS2SYSV_STUB_PREFIX __avx_\n-# define MOVAPS vmovaps\n+# ifdef HAVE_AS_AVX\n+#  define MOVAPS vmovaps\n+# endif\n #elif defined(MS2SYSV_STUB_SSE)\n # define MS2SYSV_STUB_PREFIX __sse_\n # define MOVAPS movaps\n #endif\n \n-#if defined (MS2SYSV_STUB_PREFIX) && defined (MOVAPS)\n+#ifdef MS2SYSV_STUB_PREFIX\n \n # define MS2SYSV_STUB_BEGIN(base_name) \\\n \tHIDDEN_FUNC(PASTE2(MS2SYSV_STUB_PREFIX, base_name))\n \n # define MS2SYSV_STUB_END(base_name) \\\n \tFUNC_END(PASTE2(MS2SYSV_STUB_PREFIX, base_name))\n \n-/* Save SSE registers 6-15. off is the offset of rax to get to xmm6.  */\n-# define SSE_SAVE\t\t   \\\n+/* If expanding for sse or avx and we have assembler support.  */\n+# ifdef MOVAPS\n+/* Save SSE registers 6-15 using rax as the base address.  */\n+#  define SSE_SAVE\t\t   \\\n \tMOVAPS %xmm15,-0x30(%rax); \\\n \tMOVAPS %xmm14,-0x20(%rax); \\\n \tMOVAPS %xmm13,-0x10(%rax); \\\n@@ -96,8 +101,8 @@ ASMNAME(fn):\n \tMOVAPS %xmm7,  0x50(%rax); \\\n \tMOVAPS %xmm6,  0x60(%rax)\n \n-/* Restore SSE registers 6-15. off is the offset of rsi to get to xmm6.  */\n-# define SSE_RESTORE\t\t    \\\n+/* Restore SSE registers 6-15 using rsi as the base address.  */\n+#  define SSE_RESTORE\t\t    \\\n \tMOVAPS -0x30(%rsi), %xmm15; \\\n \tMOVAPS -0x20(%rsi), %xmm14; \\\n \tMOVAPS -0x10(%rsi), %xmm13; \\\n@@ -108,6 +113,31 @@ ASMNAME(fn):\n \tMOVAPS  0x40(%rsi), %xmm8 ; \\\n \tMOVAPS  0x50(%rsi), %xmm7 ; \\\n \tMOVAPS  0x60(%rsi), %xmm6\n-\n-#endif /* defined (MS2SYSV_STUB_ISA) && defined (MOVAPS) */\n+# else /* MOVAPS */\n+/* If the assembler doesn't support AVX then directly emit machine code\n+   for the instructions above.  */\n+#  define SSE_SAVE\t\t\t\t\t\t\t     \\\n+\t.byte 0xc5, 0x78, 0x29, 0x78, 0xd0; /* vmovaps %xmm15,-0x30(%rax) */ \\\n+\t.byte 0xc5, 0x78, 0x29, 0x70, 0xe0; /* vmovaps %xmm14,-0x20(%rax) */ \\\n+\t.byte 0xc5, 0x78, 0x29, 0x68, 0xf0; /* vmovaps %xmm13,-0x10(%rax) */ \\\n+\t.byte 0xc5, 0x78, 0x29, 0x20;       /* vmovaps %xmm12,     (%rax) */ \\\n+\t.byte 0xc5, 0x78, 0x29, 0x58, 0x10; /* vmovaps %xmm11, 0x10(%rax) */ \\\n+\t.byte 0xc5, 0x78, 0x29, 0x50, 0x20; /* vmovaps %xmm10, 0x20(%rax) */ \\\n+\t.byte 0xc5, 0x78, 0x29, 0x48, 0x30; /* vmovaps %xmm9,  0x30(%rax) */ \\\n+\t.byte 0xc5, 0x78, 0x29, 0x40, 0x40; /* vmovaps %xmm8,  0x40(%rax) */ \\\n+\t.byte 0xc5, 0xf8, 0x29, 0x78, 0x50; /* vmovaps %xmm7,  0x50(%rax) */ \\\n+\t.byte 0xc5, 0xf8, 0x29, 0x70, 0x60; /* vmovaps %xmm6,  0x60(%rax) */\n+#  define SSE_RESTORE\t\t\t\t\t\t\t     \\\n+\t.byte 0xc5, 0x78, 0x28, 0x7e, 0xd0; /* vmovaps -0x30(%rsi),%xmm15 */ \\\n+\t.byte 0xc5, 0x78, 0x28, 0x76, 0xe0; /* vmovaps -0x20(%rsi),%xmm14 */ \\\n+\t.byte 0xc5, 0x78, 0x28, 0x6e, 0xf0; /* vmovaps -0x10(%rsi),%xmm13 */ \\\n+\t.byte 0xc5, 0x78, 0x28, 0x26;       /* vmovaps      (%rsi),%xmm12 */ \\\n+\t.byte 0xc5, 0x78, 0x28, 0x5e, 0x10; /* vmovaps  0x10(%rsi),%xmm11 */ \\\n+\t.byte 0xc5, 0x78, 0x28, 0x56, 0x20; /* vmovaps  0x20(%rsi),%xmm10 */ \\\n+\t.byte 0xc5, 0x78, 0x28, 0x4e, 0x30; /* vmovaps  0x30(%rsi),%xmm9  */ \\\n+\t.byte 0xc5, 0x78, 0x28, 0x46, 0x40; /* vmovaps  0x40(%rsi),%xmm8  */ \\\n+\t.byte 0xc5, 0xf8, 0x28, 0x7e, 0x50; /* vmovaps  0x50(%rsi),%xmm7  */ \\\n+\t.byte 0xc5, 0xf8, 0x28, 0x76, 0x60; /* vmovaps  0x60(%rsi),%xmm6  */\n+# endif /* MOVAPS */\n+#endif /* MS2SYSV_STUB_PREFIX */\n #endif /* I386_ASM_H */"}, {"sha": "63c50c0c7e24ee8ca81a3e43305cae5438e96224", "filename": "libgcc/configure", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -5212,6 +5212,45 @@ if test \"$enable_tls $gcc_cv_use_emutls\" = \"yes yes\"; then\n fi\n \n \n+\n+\n+case \"${target}\" in\n+i[34567]86-*-* | x86_64-*-*)\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the assembler supports AVX\" >&5\n+$as_echo_n \"checking if the assembler supports AVX... \" >&6; }\n+if test \"${libgcc_cv_as_avx+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm(\"vzeroupper\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libgcc_cv_as_avx=yes\n+else\n+  libgcc_cv_as_avx=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_as_avx\" >&5\n+$as_echo \"$libgcc_cv_as_avx\" >&6; }\n+  if test x$libgcc_cv_as_avx = xyes; then\n+\n+$as_echo \"#define HAVE_AS_AVX 1\" >>confdefs.h\n+\n+  fi\n+  ;;\n+esac\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for init priority support\" >&5\n $as_echo_n \"checking for init priority support... \" >&6; }\n if test \"${libgcc_cv_init_priority+set}\" = set; then :"}, {"sha": "dd60b01d2f861925cfda222d69fed6c8195f6fd6", "filename": "libgcc/configure.ac", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89762a83cdc24a5a9471acdc4676d150d3c71a11/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=89762a83cdc24a5a9471acdc4676d150d3c71a11", "patch": "@@ -506,6 +506,22 @@ if test \"$enable_tls $gcc_cv_use_emutls\" = \"yes yes\"; then\n fi\n AC_SUBST(set_use_emutls)\n \n+dnl Check if as supports AVX instructions.\n+AC_DEFUN([LIBGCC_CHECK_AS_AVX], [\n+case \"${target}\" in\n+i[[34567]]86-*-* | x86_64-*-*)\n+  AC_CACHE_CHECK([if the assembler supports AVX], libgcc_cv_as_avx, [\n+    AC_TRY_COMPILE([], [asm(\"vzeroupper\");],\n+\t\t   [libgcc_cv_as_avx=yes], [libgcc_cv_as_avx=no])\n+  ])\n+  if test x$libgcc_cv_as_avx = xyes; then\n+    AC_DEFINE(HAVE_AS_AVX, 1, [Define to 1 if the assembler supports AVX.])\n+  fi\n+  ;;\n+esac])\n+LIBGCC_CHECK_AS_AVX\n+\n+dnl Check if as supports RTM instructions.\n AC_CACHE_CHECK(for init priority support, libgcc_cv_init_priority, [\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,\n   [[void ip (void) __attribute__ ((constructor (1)));]])],"}]}