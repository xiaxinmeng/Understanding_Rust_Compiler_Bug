{"sha": "efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlNDlkYTBiYTc0YzJmYTFlZmUyMTJkOWM5MWNiZGIxNjgwYzA2ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-02-01T19:32:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-01T19:32:51Z"}, "message": "re PR c++/4872 (missed warning (no return) -- regression from 2.95)\n\n        PR c++/4872\n        * decl.c (finish_function): Warn about a non-void function with\n        no return statement and no abnormal exit.\n        * cp-tree.h (struct cp_language_function): Add returns_abnormally.\n        (current_function_returns_abnormally): New macro.\n        * call.c (build_call): Set it.\n\nFrom-SVN: r49407", "tree": {"sha": "ad77fd5a8517b02ca6dc9e00f1c365c442c92888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad77fd5a8517b02ca6dc9e00f1c365c442c92888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd"}], "stats": {"total": 90, "additions": 64, "deletions": 26}, "files": [{"sha": "0bd68be065134f68b0c68f84770a708a745a5195", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -1,5 +1,12 @@\n 2002-02-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/4872\n+\t* decl.c (finish_function): Warn about a non-void function with \n+\tno return statement and no abnormal exit.\n+\t* cp-tree.h (struct cp_language_function): Add returns_abnormally.\n+\t(current_function_returns_abnormally): New macro.\n+\t* call.c (build_call): Set it.\n+\n \t* typeck.c (build_component_ref): Always complain about offsetof\n \tconstructs on non-PODs.  Only make it an error for members of\n \tvirtual bases."}, {"sha": "925bd0671876d44b7339301fb6545468549e5bab", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -408,6 +408,9 @@ build_call (function, parms)\n   nothrow = ((decl && TREE_NOTHROW (decl))\n \t     || TYPE_NOTHROW_P (TREE_TYPE (TREE_TYPE (function))));\n \n+  if (decl && TREE_THIS_VOLATILE (decl))\n+    current_function_returns_abnormally = 1;\n+\n   if (decl && TREE_DEPRECATED (decl))\n     warn_deprecated_use (decl);\n "}, {"sha": "703720e9962aaaa52e81750280a0379741fd60fd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -821,6 +821,7 @@ struct cp_language_function\n \n   int returns_value;\n   int returns_null;\n+  int returns_abnormally;\n   int in_function_try_handler;\n   int x_expanding_p;\n \n@@ -883,6 +884,12 @@ struct cp_language_function\n \n #define current_function_returns_null cp_function_chain->returns_null\n \n+/* Set to 0 at beginning of a function definition, set to 1 if\n+   a call to a noreturn function is seen.  */\n+\n+#define current_function_returns_abnormally \\\n+  cp_function_chain->returns_abnormally\n+\n /* Non-zero if we should generate RTL for functions that we process.\n    When this is zero, we just accumulate tree structure, without\n    interacting with the back end.  */"}, {"sha": "097b562281ddcc8b5c56d2f68ac1114ca4c470ed", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -14247,6 +14247,18 @@ finish_function (flags)\n   if (!processing_template_decl && calls_setjmp_p (fndecl))\n     DECL_UNINLINABLE (fndecl) = 1;\n \n+  /* Complain if there's just no return statement.  */\n+  if (!processing_template_decl\n+      && TREE_CODE (TREE_TYPE (fntype)) != VOID_TYPE\n+      && !current_function_returns_value\n+      && !DECL_NAME (DECL_RESULT (fndecl))\n+      /* Don't complain if we abort or throw.  */\n+      && !current_function_returns_abnormally\n+      /* If we have -Wreturn-type, let flow complain.  Unless we're an\n+\t inline function, as we might never be compiled separately.  */\n+      && (!warn_return_type || DECL_INLINE (fndecl))\n+    warning (\"no return statement in function returning non-void\");\n+    \n   /* Clear out memory we no longer need.  */\n   free_after_parsing (cfun);\n   /* Since we never call rest_of_compilation, we never clear"}, {"sha": "d20a55cf7fcaa4c72156c251973d43c49d922a8f", "filename": "gcc/testsuite/g++.dg/abi/empty4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty4.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -18,7 +18,7 @@ struct NonPod\n \n   NonPod () {m = 0x12345678;}\n   NonPod (long m_) {m = m_;}\n-  NonPod &operator= (NonPod const &src) {now = m; m = src.m;}\n+  NonPod &operator= (NonPod const &src) {now = m; m = src.m; return *this;}\n   NonPod (NonPod const &src) {m = src.m;}\n };\n "}, {"sha": "86dde1e4559c10d367a7691b4f7a9db9a685fcf8", "filename": "gcc/testsuite/g++.dg/other/const2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst2.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -10,7 +10,7 @@ struct foo\n \n   static const bar bars[];\n \n-  int bad ()\n+  void bad ()\n   {\n     this->*(bars[0].b) = 42; // { dg-bogus \"read-only\" \"\" }\n   }"}, {"sha": "105607050312a67f4096171d6104e3425b110ef5", "filename": "gcc/testsuite/g++.dg/other/deprecated.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdeprecated.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdeprecated.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdeprecated.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -13,10 +13,10 @@ INT1 should_be_unavailable; \t\t/* { dg-warning \"`INT1' is deprecated\" \"\" } */\n INT1a should_not_be_deprecated;\n \n INT1 f1(void) __attribute__ ((deprecated)); \n-INT1 f2(void) {}\t\t\t/* { dg-warning \"`INT1' is deprecated\" \"\" } */\n+INT1 f2(void) { return 0; }\t\t/* { dg-warning \"`INT1' is deprecated\" \"\" } */\n \n INT2 f3(void) __attribute__ ((__deprecated__)); \n-INT2 f4(void) {}\t\t\t/* { dg-warning \"`INT2' is deprecated\" \"\" } */\n+INT2 f4(void) { return 0; }\t\t/* { dg-warning \"`INT2' is deprecated\" \"\" } */\n int f5(INT2 x);\t\t\t\t/* { dg-warning \"`INT2' is deprecated\" \"\" } */\n int f6(INT2 x) __attribute__ ((__deprecated__));\n "}, {"sha": "a7aa4fe0adf2b663f788222e65ffc025cd3941ce", "filename": "gcc/testsuite/g++.old-deja/g++.bob/inherit2.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Finherit2.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -1,11 +1,13 @@\n // Build don't link:\n+#include <stdlib.h>\n+\n class A {\n public:\n   void z();\n   A(void) {}\n private:\n   A(const A &) { abort(); } // ERROR - \n-  const A& operator =(const A &) { abort(); } // WARNING - no return stmt XFAIL *-*-*\n+  const A& operator =(const A &) { abort(); }\n };\n \n class B : public A {"}, {"sha": "4c352c87ae43b37b07a4412c788cc795fcbb97e3", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900205_03.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_03.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -25,10 +25,10 @@ struct00 global_function_1 () {\n struct struct0 {\n \n   int struct0_member_function_0 () {\n-  }\t\t\t\t\t// ERROR - XFAIL\n+  }\t\t\t\t\t// ERROR - \n \n   struct0 struct0_member_function_1 () {\n-  }\t\t\t\t\t// ERROR - XFAIL\n+  }\t\t\t\t\t// ERROR - \n };\n \n struct struct1 {"}, {"sha": "62025813b3285526fbcffad176a4e5d94ada4b7a", "filename": "gcc/testsuite/g++.old-deja/g++.jason/byval2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbyval2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbyval2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fbyval2.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -13,8 +13,8 @@ public:\n   void  operator -= (const Char   );\n };\n \n-inline  Char  operator -  (const Char    a, const Char    b) {}\n-inline  char  operator == (const Char    a, const char b) {}\n+inline  Char  operator -  (const Char    a, const Char    b) { return Char(0); }\n+inline  char  operator == (const Char    a, const char b) { return 0; }\n \n char mystrcmp(Char s[31], Char t[31])\n {"}, {"sha": "7674233e688db44718e35fbf25afe1474138ee85", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators17.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators17.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -7,6 +7,6 @@\n // Subject:  4 bugs in g++ 2.3.3\n // Message-ID: <9304291053.AA00090@mencon>\n \n-        struct A {\n-                A& operator = (const A& a) {}// ERROR - XFAIL\n-        };\n+struct A {\n+        A& operator = (const A& a) {}// WARNING - \n+};"}, {"sha": "702bbda7eac7364112c42b7e4d328b86bc19c7e8", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh50.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh50.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -7,7 +7,7 @@ void my_unexpected() {\n   throw 42;\n }\n \n-template <class T> int foo(T) throw (int) { throw \"Hi\"; }\n+template <class T> void foo(T) throw (int) { throw \"Hi\"; }\n \n main() {\n   std::set_unexpected (my_unexpected);"}, {"sha": "f1b90b422009c3935b3272f8237664f86bb1bfd7", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh51.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh51.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -7,7 +7,7 @@ void my_unexpected() {\n   throw 42;\n }\n \n-template <class T> int foo(T) throw (T) { throw \"Hi\"; }\n+template <class T> void foo(T) throw (T) { throw \"Hi\"; }\n \n main() {\n   std::set_unexpected (my_unexpected);"}, {"sha": "731f6c149cc769ca59b75309f7753b53ad97c207", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net20.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet20.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -8,4 +8,5 @@ struct X\n void (X::* fee ())()\n {\n  lab: goto lab;\n+ return 0;\n }"}, {"sha": "db0df8a867855db54215fcb378e2151347d0268e", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net40.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet40.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -1,5 +1,5 @@\n #include <stddef.h>\n-extern \"C\" void abort();\n+#include <stdlib.h>\n \n class toto {\n public:"}, {"sha": "fca48e9c295089b79ca5cb40da5dcc710b52aec4", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net45.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet45.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -12,8 +12,7 @@ struct myint {\n   }\n   myint(const myint& mi) {\n   }\n-  myint& operator=(const myint& mi) {\n-  }\n+  myint& operator=(const myint& mi) { return *this; }\n };\n \n extern pair<const myint, myint> a;"}, {"sha": "abe12e40d88fb9e0d61d9e4ab49995ab180be5b9", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p10511.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10511.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10511.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp10511.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -8,7 +8,7 @@ public:\n \n class C {\n public:\n-  bool f (S::E()) { }\n+  bool f (S::E()) { return true; }\n   virtual void foo();\n };\n "}, {"sha": "407c83a8fcb9f70f1b9490f1067c8065816987ce", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p11012.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11012.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11012.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11012.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -4,7 +4,7 @@\n \n class Foo {\n public:\n-  int f(){}\n+  int f(){ return 0; }\n };\n \n void foo() {"}, {"sha": "e481ccde0a64c447e3b5e4d828b8e96d7aee1e75", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p7325.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7325.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7325.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7325.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -23,6 +23,7 @@ struct A {\n       if (match_arg != &o)\n \tfail = 1;\n     match_arg = &o;\n+    return *this;\n   }\n };\n "}, {"sha": "0c39be8b0bd7567366fcc1a1a1bc1d1e9408887f", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -9,7 +9,7 @@ public:\n \n X::x()\n {\t\t\t\t// ERROR - \n-}\n+} // WARNING - no return\n \n X::~x()\n {\t\t\t\t// ERROR - "}, {"sha": "e737a41fa2a14187427419a47b4794c0bb2a65c9", "filename": "gcc/testsuite/g++.old-deja/g++.other/for1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffor1.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -7,6 +7,7 @@ struct S {\n   int operator()(int)\n     {\n       i = 1;\n+      return i;\n     }\n \n   typedef int I;\n@@ -24,6 +25,7 @@ struct T {\n   int operator()(int)\n     {\n       j = 1;\n+      return j;\n     }\n \n   void f() {"}, {"sha": "9e4a436015776c8b6ab8fee2341597e4b3942e34", "filename": "gcc/testsuite/g++.old-deja/g++.other/init12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit12.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -11,7 +11,7 @@ struct S\n \n struct T\n {\n-  static int f() {}\n+  static int f() { return 0; }\n };\n \n static const S s = { &T::f };"}, {"sha": "45187629a5704e61fc6e9d3eda668bce0caee23d", "filename": "gcc/testsuite/g++.old-deja/g++.other/new.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -1,13 +1,16 @@\n // Build don't link:\n \n-typedef __SIZE_TYPE__ size_t;\n+#include <new>\n+\n inline void *\n operator new(size_t alloc_sz, const char *fname, unsigned lineno)\n {\n+  return ::operator new (alloc_sz);\n }\n inline void *\n operator new[](size_t alloc_sz, const char *fname, unsigned lineno) \n {\n+  return ::operator new[] (alloc_sz);\n }\n inline void\n operator delete(void *ptr, const char *fname, unsigned lineno) "}, {"sha": "2eb0954e741c6ac04ce71be05b146b7f18d6d939", "filename": "gcc/testsuite/g++.old-deja/g++.other/new4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnew4.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -6,5 +6,6 @@ struct S {\n \n   virtual int f() {\n     new S[+f()];\n+    return 0;\n   }\n };"}, {"sha": "603c7d2311b4c8256d5519acc0bfa1feff279592", "filename": "gcc/testsuite/g++.old-deja/g++.other/rtti1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Frtti1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Frtti1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Frtti1.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -39,15 +39,15 @@ class XX {\n public:\n   int xxi;\n   float xxf;\n-  int xxf1 () {};\n-  int xxf2 (int k) {};\n+  int xxf1 () { return 0; };\n+  int xxf2 (int k) { return 0; };\n };\n \n class YY {\n public:\n   int yyi;\n   double yyd;\n-  int yyf1 (float f) {};\n+  int yyf1 (float f) { return 0; };\n   double yyf2 () {return yyd;};\n };\n "}, {"sha": "ab18ff81c81a01d6291f05bd661b6f3b3ab7daad", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe49da0ba74c2fa1efe212d9c91cbdb1680c06d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec1.C?ref=efe49da0ba74c2fa1efe212d9c91cbdb1680c06d", "patch": "@@ -13,7 +13,7 @@ public:\n };\n \n struct Operation {\n-  double eval(double) {}\n+  double eval(double) { return 0; }\n };\n \n int main() {"}]}