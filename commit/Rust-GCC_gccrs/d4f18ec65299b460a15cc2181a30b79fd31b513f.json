{"sha": "d4f18ec65299b460a15cc2181a30b79fd31b513f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmMThlYzY1Mjk5YjQ2MGExNWNjMjE4MWEzMGI3OWZkMzFiNTEzZg==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-04-10T17:59:52Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-04-10T17:59:52Z"}, "message": "rs6000-c.c (altivec_overloaded_builtins): Remove erroneous entries for \"vector int vec_ldl (int...\n\ngcc/ChangeLog:\n\n2018-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Remove\n\terroneous entries for\n\t\"vector int vec_ldl (int, long int *)\", and\n\t\"vector unsigned int vec_ldl (int, unsigned long int *)\".\n\tAdd comments and entries for\n\t\"vector bool char vec_ldl (int, bool char *)\",\n\t\"vector bool short vec_ldl (int, bool short *)\",\n\t\"vector bool int vec_ldl (int, bool int *)\",\n\t\"vector bool long long vec_ldl (int, bool long long *)\",\n\t\"vector pixel vec_ldl (int, pixel *)\",\n\t\"vector long long vec_ldl (int, long long *)\",\n\t\"vector unsigned long long vec_ldl (int, unsigned long long *)\".\n\t* config/rs6000/rs6000.c (rs6000_init_builtins): Initialize new\n\ttype tree bool_long_long_type_node and correct definition of\n\tbool_V2DI_type_node to make reference to this new type tree.\n\t(rs6000_mangle_type): Replace erroneous reference to\n\tbool_long_type_node with bool_long_long_type_node.\n\t* config/rs6000/rs6000.h (enum rs6000_builtin_type_index): Add\n\tcomments to emphasize sign distinctions for char and int types and\n\treplace RS6000_BTI_bool_long constant with\n\tRS6000_BTI_bool_long_long constant.  Also add comment to restrict\n\tuse of RS6000_BTI_pixel.\n\t(bool_long_type_node): Remove this macro definition.\n\t(bool_long_long_type_node): New macro definition\n\ngcc/testsuite/ChangeLog:\n\n2018-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-ldl-1.c: New test.\n\t* gcc.dg/vmx/ops-long-1.c: Correct test programs to reflect\n\tcorrections to ABI implementation.\n\nFrom-SVN: r259294", "tree": {"sha": "2bc8eaaf5dbb1d6e33d530952b30923094f4ebf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc8eaaf5dbb1d6e33d530952b30923094f4ebf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f18ec65299b460a15cc2181a30b79fd31b513f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f18ec65299b460a15cc2181a30b79fd31b513f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f18ec65299b460a15cc2181a30b79fd31b513f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f18ec65299b460a15cc2181a30b79fd31b513f/comments", "author": null, "committer": null, "parents": [{"sha": "45d144619c4c660a182a4d1e426648bb13f77b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d144619c4c660a182a4d1e426648bb13f77b90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d144619c4c660a182a4d1e426648bb13f77b90"}], "stats": {"total": 341, "additions": 322, "deletions": 19}, "files": [{"sha": "cb2646be860ed0d7289002ef187b4f51e589360c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4f18ec65299b460a15cc2181a30b79fd31b513f", "patch": "@@ -1,3 +1,30 @@\n+2018-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Remove\n+\terroneous entries for\n+\t\"vector int vec_ldl (int, long int *)\", and\n+\t\"vector unsigned int vec_ldl (int, unsigned long int *)\".\n+\tAdd comments and entries for\n+\t\"vector bool char vec_ldl (int, bool char *)\",\n+\t\"vector bool short vec_ldl (int, bool short *)\",\n+\t\"vector bool int vec_ldl (int, bool int *)\",\n+\t\"vector bool long long vec_ldl (int, bool long long *)\",\n+\t\"vector pixel vec_ldl (int, pixel *)\",\n+\t\"vector long long vec_ldl (int, long long *)\",\n+\t\"vector unsigned long long vec_ldl (int, unsigned long long *)\".\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Initialize new\n+\ttype tree bool_long_long_type_node and correct definition of\n+\tbool_V2DI_type_node to make reference to this new type tree.\n+\t(rs6000_mangle_type): Replace erroneous reference to\n+\tbool_long_type_node with bool_long_long_type_node.\n+\t* config/rs6000/rs6000.h (enum rs6000_builtin_type_index): Add\n+\tcomments to emphasize sign distinctions for char and int types and\n+\treplace RS6000_BTI_bool_long constant with\n+\tRS6000_BTI_bool_long_long constant.  Also add comment to restrict\n+\tuse of RS6000_BTI_pixel.\n+\t(bool_long_type_node): Remove this macro definition.\n+\t(bool_long_long_type_node): New macro definition\n+\n 2018-04-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/85300"}, {"sha": "b9b4671026a97f25ef81baec2e20f56ce75d7034", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=d4f18ec65299b460a15cc2181a30b79fd31b513f", "patch": "@@ -1655,26 +1655,44 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LVEBX, ALTIVEC_BUILTIN_LVEBX,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n+\n+  /*     vector float vec_ldl (int, vector float *);\n+         vector float vec_ldl (int, float *); */\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+\n+  /*     vector bool int vec_ldl (int, vector bool int *);\n+         vector bool int vec_ldl (int, bool int *);\n+              vector int vec_ldl (int, vector int *);\n+              vector int vec_ldl (int, int *);\n+     vector unsigned int vec_ldl (int, vector unsigned int *);\n+     vector unsigned int vec_ldl (int, unsigned int *); */\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_int, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n-    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_long, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V4SI,\n-    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_long, 0 },\n+\n+  /*     vector bool short vec_ldl (int, vector bool short *);\n+         vector bool short vec_ldl (int, bool short *);\n+              vector pixel vec_ldl (int, vector pixel *);\n+              vector short vec_ldl (int, vector short *);\n+              vector short vec_ldl (int, short *);\n+     vector unsigned short vec_ldl (int, vector unsigned short *);\n+     vector unsigned short vec_ldl (int, unsigned short *); */\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_short, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n@@ -1685,8 +1703,17 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+\n+  /*     vector bool char vec_ldl (int, vector bool char *);\n+         vector bool char vec_ldl (int, bool char *);\n+              vector char vec_ldl (int, vector char *);\n+              vector char vec_ldl (int, char *);\n+     vector unsigned char vec_ldl (int, vector unsigned char *);\n+     vector unsigned char vec_ldl (int, unsigned char *); */\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_char, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n@@ -1696,15 +1723,35 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     ~RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n+\n+  /*     vector double vec_ldl (int, vector double *);\n+         vector double vec_ldl (int, double *); */\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n+\n+  /*          vector long long vec_ldl (int, vector long long *);\n+              vector long long vec_ldl (int, long long *);\n+     vector unsigned long long vec_ldl (int, vector unsigned long long *);\n+     vector unsigned long long vec_ldl (int, unsigned long long *);\n+         vector bool long long vec_ldl (int, vector bool long long *);\n+         vector bool long long vec_ldl (int, bool long long *); */\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_long_long, 0 },\n   { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V2DI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LDL, ALTIVEC_BUILTIN_LVXL_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_long_long, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_LVSL, ALTIVEC_BUILTIN_LVSL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n   { ALTIVEC_BUILTIN_VEC_LVSL, ALTIVEC_BUILTIN_LVSL,"}, {"sha": "a0c9b5c2736bcfc775c6d606bb0085590a074ab2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d4f18ec65299b460a15cc2181a30b79fd31b513f", "patch": "@@ -16953,7 +16953,7 @@ rs6000_init_builtins (void)\n   bool_char_type_node = build_distinct_type_copy (unsigned_intQI_type_node);\n   bool_short_type_node = build_distinct_type_copy (unsigned_intHI_type_node);\n   bool_int_type_node = build_distinct_type_copy (unsigned_intSI_type_node);\n-  bool_long_type_node = build_distinct_type_copy (unsigned_intDI_type_node);\n+  bool_long_long_type_node = build_distinct_type_copy (unsigned_intDI_type_node);\n   pixel_type_node = build_distinct_type_copy (unsigned_intHI_type_node);\n \n   long_integer_type_internal_node = long_integer_type_node;\n@@ -17070,7 +17070,7 @@ rs6000_init_builtins (void)\n   bool_V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64\n \t\t\t\t\t    ? \"__vector __bool long\"\n \t\t\t\t\t    : \"__vector __bool long long\",\n-\t\t\t\t\t    bool_long_type_node, 2);\n+\t\t\t\t\t    bool_long_long_type_node, 2);\n   pixel_V8HI_type_node = rs6000_vector_type (\"__vector __pixel\",\n \t\t\t\t\t     pixel_type_node, 8);\n \n@@ -32900,7 +32900,7 @@ rs6000_mangle_type (const_tree type)\n   if (type == bool_short_type_node) return \"U6__bools\";\n   if (type == pixel_type_node) return \"u7__pixel\";\n   if (type == bool_int_type_node) return \"U6__booli\";\n-  if (type == bool_long_type_node) return \"U6__booll\";\n+  if (type == bool_long_long_type_node) return \"U6__boolx\";\n \n   /* Use a unique name for __float128 rather than trying to use \"e\" or \"g\". Use\n      \"g\" for IBM extended double, no matter whether it is long double (using"}, {"sha": "b9b58a83fb3b866574a0e2ac9fc53a07d0844f22", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d4f18ec65299b460a15cc2181a30b79fd31b513f", "patch": "@@ -2580,7 +2580,7 @@ enum rs6000_builtin_type_index\n   RS6000_BTI_opaque_V2SF,\n   RS6000_BTI_opaque_p_V2SI,\n   RS6000_BTI_opaque_V4SI,\n-  RS6000_BTI_V16QI,\n+  RS6000_BTI_V16QI,              /* __vector signed char */\n   RS6000_BTI_V1TI,\n   RS6000_BTI_V2SI,\n   RS6000_BTI_V2SF,\n@@ -2590,16 +2590,22 @@ enum rs6000_builtin_type_index\n   RS6000_BTI_V4SI,\n   RS6000_BTI_V4SF,\n   RS6000_BTI_V8HI,\n-  RS6000_BTI_unsigned_V16QI,\n+  RS6000_BTI_unsigned_V16QI,     /* __vector unsigned char */\n   RS6000_BTI_unsigned_V1TI,\n   RS6000_BTI_unsigned_V8HI,\n   RS6000_BTI_unsigned_V4SI,\n   RS6000_BTI_unsigned_V2DI,\n   RS6000_BTI_bool_char,          /* __bool char */\n   RS6000_BTI_bool_short,         /* __bool short */\n   RS6000_BTI_bool_int,           /* __bool int */\n-  RS6000_BTI_bool_long,\t\t /* __bool long */\n-  RS6000_BTI_pixel,              /* __pixel */\n+  RS6000_BTI_bool_long_long,     /* __bool long long */\n+  RS6000_BTI_pixel,              /* __pixel (16 bits arranged as 4\n+\t\t\t\t    channels of 1, 5, 5, and 5 bits\n+\t\t\t\t    respectively as packed with the\n+\t\t\t\t    vpkpx insn.  __pixel is only\n+\t\t\t\t    meaningful as a vector type.\n+\t\t\t\t    There is no corresponding scalar\n+\t\t\t\t    __pixel data type.)  */\n   RS6000_BTI_bool_V16QI,         /* __vector __bool char */\n   RS6000_BTI_bool_V8HI,          /* __vector __bool short */\n   RS6000_BTI_bool_V4SI,          /* __vector __bool int */\n@@ -2609,11 +2615,11 @@ enum rs6000_builtin_type_index\n   RS6000_BTI_unsigned_long,      /* long_unsigned_type_node */\n   RS6000_BTI_long_long,\t         /* long_long_integer_type_node */\n   RS6000_BTI_unsigned_long_long, /* long_long_unsigned_type_node */\n-  RS6000_BTI_INTQI,\t         /* intQI_type_node */\n+  RS6000_BTI_INTQI,\t         /* (signed) intQI_type_node */\n   RS6000_BTI_UINTQI,\t\t /* unsigned_intQI_type_node */\n   RS6000_BTI_INTHI,\t         /* intHI_type_node */\n   RS6000_BTI_UINTHI,\t\t /* unsigned_intHI_type_node */\n-  RS6000_BTI_INTSI,\t\t /* intSI_type_node */\n+  RS6000_BTI_INTSI,\t\t /* intSI_type_node (signed) */\n   RS6000_BTI_UINTSI,\t\t /* unsigned_intSI_type_node */\n   RS6000_BTI_INTDI,\t\t /* intDI_type_node */\n   RS6000_BTI_UINTDI,\t\t /* unsigned_intDI_type_node */\n@@ -2654,7 +2660,7 @@ enum rs6000_builtin_type_index\n #define bool_char_type_node           (rs6000_builtin_types[RS6000_BTI_bool_char])\n #define bool_short_type_node          (rs6000_builtin_types[RS6000_BTI_bool_short])\n #define bool_int_type_node            (rs6000_builtin_types[RS6000_BTI_bool_int])\n-#define bool_long_type_node           (rs6000_builtin_types[RS6000_BTI_bool_long])\n+#define bool_long_long_type_node      (rs6000_builtin_types[RS6000_BTI_bool_long_long])\n #define pixel_type_node               (rs6000_builtin_types[RS6000_BTI_pixel])\n #define bool_V16QI_type_node\t      (rs6000_builtin_types[RS6000_BTI_bool_V16QI])\n #define bool_V8HI_type_node\t      (rs6000_builtin_types[RS6000_BTI_bool_V8HI])"}, {"sha": "de5332e5f9cead576501772bfc4c61f164944f23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4f18ec65299b460a15cc2181a30b79fd31b513f", "patch": "@@ -1,3 +1,9 @@\n+2018-04-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-ldl-1.c: New test.\n+\t* gcc.dg/vmx/ops-long-1.c: Correct test programs to reflect\n+\tcorrections to ABI implementation.\n+\n 2018-04-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR target/85056"}, {"sha": "5a88f933ff039e90dc3cf73d4596bc1f7ea6f355", "filename": "gcc/testsuite/gcc.dg/vmx/ops-long-1.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops-long-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops-long-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops-long-1.c?ref=d4f18ec65299b460a15cc2181a30b79fd31b513f", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mno-vsx -Wno-deprecated\" } */\n+/* { dg-require-effective-target vmx_hw } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx -Wno-deprecated\" } */\n \n /* Checks from the original ops.c that pass pointers to long or\n    unsigned long for operations that support that in released versions\n@@ -10,28 +11,33 @@\n extern int *var_int;\n extern long * *var_long_ptr;\n extern unsigned long * *var_unsigned_long_ptr;\n+extern long long int * *var_long_long_ptr;\n+extern unsigned long long int * *var_unsigned_long_long_ptr;\n extern vector signed int * *var_vec_s32_ptr;\n extern vector signed int *var_vec_s32;\n extern vector unsigned char * *var_vec_u8_ptr;\n extern vector unsigned char *var_vec_u8;\n extern vector unsigned int * *var_vec_u32_ptr;\n extern vector unsigned int *var_vec_u32;\n+/* Use of long long int types requires -mvsx command-line option. */\n+extern vector long long int *var_vec_s64;\n+extern vector unsigned long long int *var_vec_u64;\n \n void f13() {\n   *var_vec_s32++ = vec_ld(var_int[0], var_long_ptr[1]);\n   *var_vec_s32++ = vec_lde(var_int[0], var_long_ptr[1]);\n-  *var_vec_s32++ = vec_ldl(var_int[0], var_long_ptr[1]);\n+  *var_vec_s64++ = vec_ldl(var_int[0], var_long_long_ptr[1]);\n   *var_vec_s32++ = vec_lvewx(var_int[0], var_long_ptr[1]);\n   *var_vec_s32++ = vec_lvx(var_int[0], var_long_ptr[1]);\n-  *var_vec_s32++ = vec_lvxl(var_int[0], var_long_ptr[1]);\n+  *var_vec_s64++ = vec_lvxl(var_int[0], var_long_long_ptr[1]);\n }\n void f22() {\n   *var_vec_u32++ = vec_ld(var_int[0], var_unsigned_long_ptr[1]);\n   *var_vec_u32++ = vec_lde(var_int[0], var_unsigned_long_ptr[1]);\n-  *var_vec_u32++ = vec_ldl(var_int[0], var_unsigned_long_ptr[1]);\n+  *var_vec_u64++ = vec_ldl(var_int[0], var_unsigned_long_long_ptr[1]);\n   *var_vec_u32++ = vec_lvewx(var_int[0], var_unsigned_long_ptr[1]);\n   *var_vec_u32++ = vec_lvx(var_int[0], var_unsigned_long_ptr[1]);\n-  *var_vec_u32++ = vec_lvxl(var_int[0], var_unsigned_long_ptr[1]);\n+  *var_vec_u64++ = vec_lvxl(var_int[0], var_unsigned_long_long_ptr[1]);\n }\n void f25() {\n   *var_vec_u8++ = vec_lvsl(var_int[0], var_long_ptr[1]);"}, {"sha": "6240eec9364d75ba24870563644fcd0ff4175911", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ldl-1.c", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ldl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f18ec65299b460a15cc2181a30b79fd31b513f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ldl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ldl-1.c?ref=d4f18ec65299b460a15cc2181a30b79fd31b513f", "patch": "@@ -0,0 +1,211 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-require-effective-target vmx_hw } */\n+/* { dg-options \"-maltivec -O0 -Wall\" } */\n+\n+#include <altivec.h>\n+#include <stdlib.h>\n+\n+/* vec_ldl and vec_lvxl (an alias for vec_ldl) do an aligned vector\n+ * load from memory, marking the fetched memory as least recently used\n+ * (hinting that we do not anticipate a need to fetch this vector\n+ * again within the near future.)\n+ *\n+ * vector <TYPE> result = vec_ldl (int offset, <TYPE> *address)\n+ * vector <TYPE> result = vec_ldl (int offset, vector <TYPE> *address)\n+ *\n+ * The effect of these instructions is to perform the following:\n+ *\n+ *  resuilt = *((vector <TTYPE> *)((((char *) address) + offset) & ~0x0f))\n+ *\n+ * This test exercises the following new prototypes of the vec_ldl\n+ * service which were added in late March 2018:\n+ *\n+ *  vector bool int vec_ldl (int, bool int *)\n+ *  vector bool short vec_ldl (int, bool short *)\n+ *  vector bool char vec_ldl (int, bool char *)\n+ *  vector double vec_ldl (int, double *)\n+ *  vector long long int vec_ldl (int, long long int *)\n+ *  vector unsigned long long int vec_ldl (int, unsigned long long int *)\n+ *  vector bool long long vec_ldl (int, bool long long *)\n+ */\n+\n+static signed char ca[64] __attribute__((aligned(16)));\n+static unsigned char uca[64] __attribute__((aligned(16)));\n+\n+static vector signed char *vcp = (vector signed char *) ca;\n+static unsigned vector char *vucp = (vector unsigned char *) uca;\n+\n+static short sa[32] __attribute__((aligned(16)));\n+static unsigned short usa[32] __attribute__((aligned(16)));\n+\n+static vector short *vsp = (vector short *) sa;\n+static unsigned vector short *vusp = (vector unsigned short *) usa;\n+\n+static int ia[16] __attribute__((aligned(16)));\n+static unsigned int uia[16] __attribute__((aligned(16)));\n+\n+static vector int *vip = (vector int *) ia;\n+static unsigned vector int *vuip = (vector unsigned int *) uia;\n+\n+static long long la[8] __attribute__((aligned(16)));\n+static unsigned long long ula[8] __attribute__((aligned(16)));\n+\n+static vector long long *vlp = (vector long long *) la;\n+static unsigned vector long long *vulp = (vector unsigned long long *) ula;\n+\n+static double da[8] __attribute__((aligned(16)));\n+static vector double *vdp = (vector double *) da;\n+\n+\n+void\n+doInitialization ()\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < 64; i++)\n+    ca[i] = uca[i] = i;\n+\n+  for (i = 0; i < 32; i++)\n+    sa[i] = usa[i] = i;\n+\n+  for (i = 0; i < 16; i++)\n+    ia[i] = uia[i] = i;\n+\n+  for (i = 0; i < 8; i++)\n+    la[i] = ula[i] = i;\n+\n+  for (i = 0; i < 8; i++)\n+    da[i] = 0.125 * i;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  vector long long int lv;\n+  vector unsigned long long int ulv;\n+  vector int iv;\n+  vector unsigned int uiv;\n+  vector short sv;\n+  vector unsigned short usv;\n+  vector signed char cv;\n+  vector unsigned char ucv;\n+  vector double dv;\n+\n+  doInitialization ();\n+\n+  /* Do vector of char.  */\n+  for (int i = 0; i < 16; i++) {\n+    /* Focus on ca[16] ... ca[31].  */\n+    cv = vec_ldl (i+16, ca);\t/* compiler: invalid parameter combination */\n+    if (cv[4] != ca[20])\n+      abort ();\n+    /* Focus on uca[32] ... uca[47].  */\n+    ucv = vec_ldl (i+32, uca);\n+    if (ucv[7] != uca[39])\n+      abort ();\n+    /* Focus on ca[0] ... ca[15].  */\n+    cv = vec_ldl (i, vcp);\n+    if (cv[3] != ca[3])\n+      abort ();\n+    /* Focus on ca[0] ... ca[15] while i <= 8.\n+       Focus on ca[16] ... ca[31] while i > 8.  */\n+    ucv = vec_ldl (i+7, vucp);\n+    if ((i+7 > 15) && (ucv[13] != uca[29]))\n+      abort ();\n+    if ((i + 7 <= 15) && (ucv[13] != uca[13]))\n+      abort ();\n+  }\n+\n+  /* Do vector of short.  */\n+  for (int i = 0; i < 16; i++) {\n+    /* Focus on sa[8] ... sa[15].  */\n+    sv = vec_ldl (i+16, sa);\n+    if (sv[4] != sa[12])\n+      abort ();\n+    /* Focus on usa[24] ... usa[31].  */\n+    usv = vec_ldl (i+48, usa);\n+    if (usv[7] != usa[31])\n+      abort ();\n+    /* Focus on sa[0] ... sa[7].  */\n+    sv = vec_ldl (i, vsp);\n+    if (sv[3] != sa[3])\n+      abort ();\n+    /* Focus on usa[0] ... usa[7] while i <= 8.\n+       Focus on usa[8] ... usa[15] while i > 8.  */\n+    usv = vec_ldl (i+7, vusp);\n+    if ((i+7 > 15) && (usv[5] != usa[13]))\n+      abort ();\n+    if ((i + 7 <= 15) && (usv[5] != usa[5]))\n+      abort ();\n+  }\n+\n+  /* Do vector of int.  */\n+  for (int i = 0; i < 16; i++) {\n+    /* Focus on ia[8] ... ia[11].  */\n+    iv = vec_ldl (i+32, ia);\n+    if (iv[3] != ia[11])\n+      abort ();\n+    /* Focus on uia[12] ... uia[15].  */\n+    uiv = vec_ldl (i+48, uia);\n+    if (uiv[2] != uia[14])\n+      abort ();\n+    /* Focus on ia[0] ... ia[3].  */\n+    iv = vec_ldl (i, vip);\n+    if (iv[3] != ia[3])\n+      abort ();\n+    /* Focus on uia[0] ... uia[3] while i <= 8.\n+       Focus on uia[4] ... uia[7] while i > 8.  */\n+    uiv = vec_ldl (i+7, vuip);\n+    if ((i+7 > 15) && (uiv[1] != uia[5]))\n+      abort ();\n+    if ((i + 7 <= 15) && (uiv[1] != uia[1]))\n+      abort ();\n+  }\n+\n+  /* Do vector of long long int.  */\n+  for (int i = 0; i < 16; i++) {\n+    /* Focus on la[4] ... la[5].  */\n+    lv = vec_ldl (i+32, la);\n+    if (lv[1] != la[5])\n+      abort ();\n+    /* Focus on ula[6] ... ula[7].  */\n+    ulv = vec_ldl (i+48, ula);\n+    if (ulv[0] != uia[6])\n+      abort ();\n+    /* Focus on la[0] ... la[1].  */\n+    lv = vec_ldl (i, vlp);\n+    if (iv[1] != la[1])\n+      abort ();\n+    /* Focus on ula[0] ... uia[1] while i <= 8.\n+       Focus on uia[2] ... uia[3] while i > 8.  */\n+    ulv = vec_ldl (i+7, vulp);\n+    if ((i+7 > 15) && (ulv[1] != ula[3]))\n+      abort ();\n+    if ((i + 7 <= 15) && (ulv[1] != ula[1]))\n+      abort ();\n+  }\n+\n+  /* Do vector of double.  */\n+  for (int i = 0; i < 16; i++) {\n+    /* Focus on da[2] ... da[3].  */\n+    dv = vec_ldl (i+16, da);\n+    if (dv[1] != da[3])\n+      abort ();\n+    /* Focus on da[6] ... da[7].  */\n+    dv = vec_ldl (i+48, vdp);\n+    if (dv[0] != da[6])\n+      abort ();\n+    /* Focus on da[0] ... da[1].  */\n+    dv = vec_ldl (i, da);\n+    if (dv[1] != da[1])\n+      abort ();\n+    /* Focus on da[0] ... da[1] while i <= 8.\n+       Focus on da[2] ... da[3] while i > 8.  */\n+    dv = vec_ldl (i+7, vdp);\n+    if ((i+7 <= 15) && (dv[1] != da[1]))\n+      abort ();\n+    if ((i + 7 > 15) && (dv[1] != da[3]))\n+      abort ();\n+  }\n+  return 0;\n+}"}]}