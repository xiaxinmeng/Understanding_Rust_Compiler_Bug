{"sha": "632a2f50b8be2fe998aba28d22c30a67a0566e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyYTJmNTBiOGJlMmZlOTk4YWJhMjhkMjJjMzBhNjdhMDU2NmU3Yg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-05T09:36:02Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-29T08:42:47Z"}, "message": "Enable GCC to support Intel Key Locker ISA\n\ngcc/ChangeLog\n\n2018-12-15  Xuepeng Guo  <xuepeng.guo@intel.com>\n\t    Hongyu Wang  <hongyu.wang@intel.com>\n\t    Hongtao Liu  <hongtao.liu@intel.com>\n\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect KL, AESKLE and WIDEKL features.\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_KL_SET): New.\n\t(OPTION_MASK_ISA_WIDEKL_SET): Likewise.\n\t(OPTION_MASK_ISA_KL_UNSET): Likewise.\n\t(OPTION_MASK_ISA_WIDEKL_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_AVX2_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_AVX_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_SSE4_2_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_SSE4_1_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_SSE4_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_SSSE3_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_SSE3_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_SSE2_UNSET): Likewise.\n\t(OPTION_MASK_ISA2_SSE_UNSET): Likewise.\n\t(ix86_handle_option): Handle kl and widekl, add dependency chain\n\tfor KL and SSE2.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\t(FEATURE_KL, FEATURE_AESKLE, FEATURE_WIDEKL): New.\n\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n\tfor KL, AESKLE and WIDEKL.\n\t* config.gcc: Add keylockerintrin.h.\n\t* doc/invoke.texi: Document new option -mkl and -mwidekl.\n\t* doc/extend.texi: Document kl and widekl.\n\t* config/i386/cpuid.h (bit_KL, bit_AESKLE, bit_WIDEKL): New.\n\t* config/i386/i386-builtin-types.def ((UINT, UINT, V2DI, V2DI, PVOID),\n\t(UINT, UINT, V2DI, PVOID), (VOID, V2DI, V2DI, V2DI, UINT),\n\t(UINT8, PV2DI, V2DI, PCVOID), (UINT8, PV2DI, PCV2DI, PCVOID)): New\n\tfunction types.\n\t* config/i386/i386-builtin.def: Add\n\t__builtin_ia32_loadiwkey,\n\t__builtin_ia32_aesdec128kl_u8,\n\t__builtin_ia32_aesdec256kl_u8,\n\t__builtin_ia32_aesenc128kl_u8,\n\t__builtin_ia32_aesenc256kl_u8,\n\t__builtin_ia32_aesdecwide128kl_u8,\n\t__builtin_ia32_aesdecwide256kl_u8,\n\t__builtin_ia32_aesencwide128kl_u8,\n\t__builtin_ia32_aesencwide256kl_u8,\n\t__builtin_ia32_encodekey128_u32,\n\t__builtin_ia32_encodekey256_u32.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n\tkl and widekl.\n\t* config/i386/i386-options.c (isa2_opts): Add -mkl and -mwidekl.\n\t(ix86_option_override_internal): Handle KL and WIDEKL.\n\t(ix86_valid_target_attribute_inner_p): Add attribute for kl and widekl.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_builtin): Expand Keylocker Builtins.\n\t* config/i386/i386.h (TARGET_KL): New.\n\t(TARGET_KL_P): Likewise.\n\t(TARGET_WIDEKL): Likewise.\n\t(TARGET_WIDEKL_P): Likewise.\n\t(PTA_KL): Likewise.\n\t(PTA_WIDEKL): Likewise.\n\t(PTA_TIGERLAKE): Add PTA_KL, PTA_WIDEKL.\n\t(PTA_ALDERLAKE): Likewise.\n\t* config/i386/i386.opt: Add new option mkl and mwidekl.\n\t* config/i386/keylockerintrin.h: New header file for Keylocker.\n\t* config/i386/immintrin.h: Include keylockerintrin.h.\n\t* config/i386/predicates.md (encodekey128_operation): New\n\tpredicate.\n\t(encodekey256_operation): Likewise.\n\t(aeswidekl_operation): Likewise.\n\t* config/i386/sse.md (UNSPECV_LOADIWKEY): New.\n\t(UNSPECV_AESDEC128KLU8): Likewise.\n\t(UNSPECV_AESENC128KLU8): Likewise.\n\t(UNSPECV_AESDEC256KLU8): Likewise.\n\t(UNSPECV_AESENC256KLU8): Likewise.\n\t(UNSPECV_AESDECWIDE128KLU8): Likewise.\n\t(UNSPECV_AESENCWIDE128KLU8): Likewise.\n\t(UNSPECV_AESDECWIDE256KLU8): Likewise.\n\t(UNSPECV_AESENCWIDE256KLU8): Likewise.\n\t(UNSPECV_ENCODEKEY128U32): Likewise.\n\t(UNSPECV_ENCODEKEY256U32): Likewise.\n\t(encodekey128u32): New expander.\n\t(encodekey256u32): Likewise.\n\t(aes<aeswideklvariant>u8): Likewise.\n\t(loadiwkey): New insn pattern.\n\t(*encodekey128u32): Likewise.\n\t(*encodekey256u32): Likewise.\n\t(aes<aesklvariant>u8): Likewise.\n\t(*aes<aeswideklvariant>u8): Likewise.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/keylocker-aesdec128kl.c: New test.\n\t* gcc.target/i386/keylocker-aesdec256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesdecwide128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesdecwide256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesenc128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesencwide128kl.c: Likewise.\n\t* gcc.target/i386/keylocker-aesencwide256kl.c: Likewise.\n\t* gcc.target/i386/keylocker-encodekey128.c: Likewise.\n\t* gcc.target/i386/keylocker-encodekey256.c: Likewise.\n\t* gcc.target/i386/keylocker-loadiwkey.c: Likewise.\n\t* g++.dg/other/i386-2.C: Add -mkl and -mwidekl.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/sse-12.c: Likewise.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-22.c: Add kl and widekl.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute test.", "tree": {"sha": "08ebadaa83a94baea6bf124e9535b1fc16fc837d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ebadaa83a94baea6bf124e9535b1fc16fc837d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/632a2f50b8be2fe998aba28d22c30a67a0566e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632a2f50b8be2fe998aba28d22c30a67a0566e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632a2f50b8be2fe998aba28d22c30a67a0566e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632a2f50b8be2fe998aba28d22c30a67a0566e7b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d"}], "stats": {"total": 1162, "additions": 1129, "deletions": 33}, "files": [{"sha": "7a93e1706089cdfc2934fa0e3f20aa2dbefb4bfd", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -523,6 +523,8 @@ get_available_features (struct __processor_model *cpu_model,\n   int avx_usable = 0;\n   int avx512_usable = 0;\n   int amx_usable = 0;\n+  /* Check if KL is usable.  */\n+  int has_kl = 0;\n   if ((ecx & bit_OSXSAVE))\n     {\n       /* Check if XMM, YMM, OPMASK, upper 256 bits of ZMM0-ZMM15 and\n@@ -667,6 +669,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t  if (edx & bit_AMX_BF16)\n \t    set_feature (FEATURE_AMX_BF16);\n \t}\n+      if (ecx & bit_KL)\n+\thas_kl = 1;\n       if (avx512_usable)\n \t{\n \t  if (ebx & bit_AVX512F)\n@@ -733,6 +737,21 @@ get_available_features (struct __processor_model *cpu_model,\n \tset_feature (FEATURE_PTWRITE);\n     }\n \n+  /* Get Advanced Features at level 0x19 (eax = 0x19).  */\n+  if (max_cpuid_level >= 0x19)\n+    {\n+      set_feature (FEATURE_AESKLE);\n+      __cpuid (19, eax, ebx, ecx, edx);\n+      /* Check if OS support keylocker.  */\n+      if (ebx & bit_AESKLE)\n+\t{\n+\t  if (ebx & bit_WIDEKL)\n+\t    set_feature (FEATURE_WIDEKL);\n+\t  if (has_kl)\n+\t    set_feature (FEATURE_KL);\n+\t}\n+    }\n+\n   /* Check cpuid level of extended features.  */\n   __cpuid (0x80000000, ext_level, ebx, ecx, edx);\n "}, {"sha": "e29320d68cc8b536c56dd7a00a555225445bc43a", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 68, "deletions": 18, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -165,6 +165,9 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_TSXLDTRK_SET OPTION_MASK_ISA2_TSXLDTRK\n #define OPTION_MASK_ISA2_UINTR_SET OPTION_MASK_ISA2_UINTR\n #define OPTION_MASK_ISA2_HRESET_SET OPTION_MASK_ISA2_HRESET\n+#define OPTION_MASK_ISA2_KL_SET OPTION_MASK_ISA2_KL\n+#define OPTION_MASK_ISA2_WIDEKL_SET \\\n+  (OPTION_MASK_ISA2_WIDEKL | OPTION_MASK_ISA2_KL_SET)\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -258,6 +261,9 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_BF16_UNSET OPTION_MASK_ISA2_AMX_BF16\n #define OPTION_MASK_ISA2_UINTR_UNSET OPTION_MASK_ISA2_UINTR\n #define OPTION_MASK_ISA2_HRESET_UNSET OPTION_MASK_ISA2_HRESET\n+#define OPTION_MASK_ISA2_KL_UNSET \\\n+  (OPTION_MASK_ISA2_KL | OPTION_MASK_ISA2_WIDEKL_UNSET)\n+#define OPTION_MASK_ISA2_WIDEKL_UNSET OPTION_MASK_ISA2_WIDEKL\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -304,6 +310,16 @@ along with GCC; see the file COPYING3.  If not see\n    | OPTION_MASK_ISA2_AVX512VP2INTERSECT_UNSET)\n #define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n   (OPTION_MASK_ISA2_AVX512F_UNSET)\n+#define OPTION_MASK_ISA2_AVX2_UNSET OPTION_MASK_ISA2_AVX512F_UNSET\n+#define OPTION_MASK_ISA2_AVX_UNSET OPTION_MASK_ISA2_AVX2_UNSET\n+#define OPTION_MASK_ISA2_SSE4_2_UNSET OPTION_MASK_ISA2_AVX_UNSET\n+#define OPTION_MASK_ISA2_SSE4_1_UNSET OPTION_MASK_ISA2_SSE4_2_UNSET\n+#define OPTION_MASK_ISA2_SSE4_UNSET OPTION_MASK_ISA2_SSE4_1_UNSET\n+#define OPTION_MASK_ISA2_SSSE3_UNSET OPTION_MASK_ISA2_SSE4_1_UNSET\n+#define OPTION_MASK_ISA2_SSE3_UNSET OPTION_MASK_ISA2_SSSE3_UNSET\n+#define OPTION_MASK_ISA2_SSE2_UNSET \\\n+  (OPTION_MASK_ISA2_SSE3_UNSET | OPTION_MASK_ISA2_KL_UNSET)\n+#define OPTION_MASK_ISA2_SSE_UNSET OPTION_MASK_ISA2_SSE2_UNSET\n \n #define OPTION_MASK_ISA2_AVX512BW_UNSET OPTION_MASK_ISA2_AVX512BF16_UNSET\n \n@@ -399,8 +415,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SSE_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SSE_UNSET;\n \t}\n       return true;\n \n@@ -414,8 +430,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE2_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SSE2_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SSE2_UNSET;\n \t}\n       return true;\n \n@@ -429,8 +445,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE3_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE3_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SSE3_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SSE3_UNSET;\n \t}\n       return true;\n \n@@ -444,8 +460,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSSE3_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSSE3_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SSSE3_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SSSE3_UNSET;\n \t}\n       return true;\n \n@@ -459,8 +475,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_1_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_1_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SSE4_1_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SSE4_1_UNSET;\n \t}\n       return true;\n \n@@ -474,8 +490,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_2_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_2_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SSE4_2_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SSE4_2_UNSET;\n \t}\n       return true;\n \n@@ -489,8 +505,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX_UNSET;\n \t}\n       return true;\n \n@@ -504,8 +520,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t{\n \t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_AVX2_UNSET;\n \t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_UNSET;\n-\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX2_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX2_UNSET;\n \t}\n       return true;\n \n@@ -691,6 +707,40 @@ ix86_handle_option (struct gcc_options *opts,\n \t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_ENQCMD_UNSET;\n \t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_ENQCMD_UNSET;\n \t}\n+\treturn true;\n+\n+    case OPT_mkl:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_KL_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_KL_SET;\n+\n+\t  /* The Keylocker instructions need XMM registers from SSE2.  */\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_KL_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_KL_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mwidekl:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_WIDEKL_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_WIDEKL_SET;\n+\n+\t  /* The Widekl instructions need XMM registers from SSE2.  */\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SSE2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_WIDEKL_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_WIDEKL_UNSET;\n+\t}\n       return true;\n \n     case OPT_mserialize:\n@@ -1043,8 +1093,8 @@ ix86_handle_option (struct gcc_options *opts,\n     case OPT_mno_sse4:\n       opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SSE4_UNSET;\n       opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SSE4_UNSET;\n-      opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512F_UNSET;\n-      opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512F_UNSET;\n+      opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_SSE4_UNSET;\n+      opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_SSE4_UNSET;\n       return true;\n \n     case OPT_msse4a:"}, {"sha": "2138220aba241d10213b5f70fa7b1b3ca8e2ca78", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -221,6 +221,9 @@ enum processor_features\n   FEATURE_AMX_BF16,\n   FEATURE_UINTR,\n   FEATURE_HRESET,\n+  FEATURE_KL,\n+  FEATURE_AESKLE,\n+  FEATURE_WIDEKL,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "921db0664714a2c4da6882352855e85ce74a1a57", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -165,4 +165,7 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"amx-bf16\", FEATURE_AMX_BF16, P_NONE, \"-mamx-bf16\")\n   ISA_NAMES_TABLE_ENTRY(\"uintr\", FEATURE_UINTR, P_NONE, \"-muintr\")\n   ISA_NAMES_TABLE_ENTRY(\"hreset\", FEATURE_HRESET, P_NONE, \"-mhreset\")\n+  ISA_NAMES_TABLE_ENTRY(\"kl\", FEATURE_KL, P_NONE, \"-mkl\")\n+  ISA_NAMES_TABLE_ENTRY(\"aeskle\", FEATURE_AESKLE, P_NONE, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"widekl\", FEATURE_WIDEKL, P_NONE, \"-mwidekl\")\n ISA_NAMES_TABLE_END"}, {"sha": "d14a1a3e8124e733064fdbadfb0a43de3245e5c6", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -414,7 +414,7 @@ i[34567]86-*-*)\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n-\t\t       hresetintrin.h\"\n+\t\t       hresetintrin.h keylockerintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -451,7 +451,7 @@ x86_64-*-*)\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n-\t\t       hresetintrin.h\"\n+\t\t       hresetintrin.h keylockerintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "595b4238ba5acc60dee4dd561701ae900d831ad5", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -119,6 +119,7 @@\n #define bit_MOVDIR64B\t(1 << 28)\n #define bit_ENQCMD\t(1 << 29)\n #define bit_CLDEMOTE\t(1 << 25)\n+#define bit_KL\t\t(1 << 23)\n \n /* %edx */\n #define bit_AVX5124VNNIW (1 << 2)\n@@ -146,6 +147,12 @@\n /* %ebx */\n #define bit_PTWRITE\t(1 << 4)\n \n+/* Keylocker leaf (%eax == 0x19) */\n+/* %ebx */\n+#define bit_AESKLE\t( 1<<0 )\n+#define bit_WIDEKL\t( 1<<2 )\n+\n+\n /* Signatures for different CPU implementations as returned in uses\n    of cpuid with level 0.  */\n #define signature_AMD_ebx\t0x68747541"}, {"sha": "3ca313c19ec276fef3e5ac20352ee181d26fdb55", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1290,3 +1290,10 @@ DEF_FUNCTION_TYPE (V8SF, V8SF, V16HI, V16HI)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V16HI, V16HI, UQI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V8HI, V8HI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V8HI, V8HI, UQI)\n+\n+# KEYLOCKER builtins\n+DEF_FUNCTION_TYPE (UINT, UINT, V2DI, V2DI, PVOID)\n+DEF_FUNCTION_TYPE (UINT, UINT, V2DI, PVOID)\n+DEF_FUNCTION_TYPE (VOID, V2DI, V2DI, V2DI, UINT)\n+DEF_FUNCTION_TYPE (UINT8, PV2DI, V2DI, PCVOID)\n+DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n\\ No newline at end of file"}, {"sha": "4d38ceab087e8ff05625462af9c6641a703f90ec", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -460,6 +460,19 @@ BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR, CODE_FOR_senduipi, \"__buil\n /* HRESET */\n BDESC (0, OPTION_MASK_ISA2_HRESET, CODE_FOR_hreset, \"__builtin_ia32_hreset\", IX86_BUILTIN_HRESET, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n \n+/* KEYLOCKER */\n+BDESC (0, OPTION_MASK_ISA2_KL, CODE_FOR_nothing, \"__builtin_ia32_loadiwkey\", IX86_BUILTIN_LOADIWKEY, UNKNOWN, (int) VOID_FTYPE_V2DI_V2DI_V2DI_UINT)\n+BDESC (0, OPTION_MASK_ISA2_KL, CODE_FOR_nothing, \"__builtin_ia32_aesdec128kl_u8\", IX86_BUILTIN_AESDEC128KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_V2DI_PCVOID)\n+BDESC (0, OPTION_MASK_ISA2_KL, CODE_FOR_nothing, \"__builtin_ia32_aesdec256kl_u8\", IX86_BUILTIN_AESDEC256KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_V2DI_PCVOID)\n+BDESC (0, OPTION_MASK_ISA2_KL, CODE_FOR_nothing, \"__builtin_ia32_aesenc128kl_u8\", IX86_BUILTIN_AESENC128KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_V2DI_PCVOID)\n+BDESC (0, OPTION_MASK_ISA2_KL, CODE_FOR_nothing, \"__builtin_ia32_aesenc256kl_u8\", IX86_BUILTIN_AESENC256KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_V2DI_PCVOID)\n+BDESC (0, OPTION_MASK_ISA2_KL, CODE_FOR_nothing, \"__builtin_ia32_encodekey128_u32\", IX86_BUILTIN_ENCODEKEY128U32, UNKNOWN, (int) UINT_FTYPE_UINT_V2DI_PVOID)\n+BDESC (0, OPTION_MASK_ISA2_KL, CODE_FOR_nothing, \"__builtin_ia32_encodekey256_u32\", IX86_BUILTIN_ENCODEKEY256U32, UNKNOWN, (int) UINT_FTYPE_UINT_V2DI_V2DI_PVOID)\n+BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesdecwide128kl_u8\", IX86_BUILTIN_AESDECWIDE128KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_PCV2DI_PCVOID)\n+BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesdecwide256kl_u8\", IX86_BUILTIN_AESDECWIDE256KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_PCV2DI_PCVOID)\n+BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesencwide128kl_u8\", IX86_BUILTIN_AESENCWIDE128KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_PCV2DI_PCVOID)\n+BDESC (0, OPTION_MASK_ISA2_WIDEKL, CODE_FOR_nothing, \"__builtin_ia32_aesencwide256kl_u8\", IX86_BUILTIN_AESENCWIDE256KLU8, UNKNOWN, (int) UINT8_FTYPE_PV2DI_PCV2DI_PCVOID)\n+\n BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */"}, {"sha": "3299a56674614e8f3172f0a515c259ca62106973", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -602,6 +602,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__UINTR__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_HRESET)\n     def_or_undef (parse_in, \"__HRESET__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_KL)\n+    def_or_undef (parse_in, \"__KL__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_WIDEKL)\n+    def_or_undef (parse_in, \"__WIDEKL__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "9d2eb7f030831be03b7a54f8ff3ea4aec5eb4c0a", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -11326,6 +11326,226 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_cldemote (op0));\n       return 0;\n \n+    case IX86_BUILTIN_LOADIWKEY:\n+      {\n+\targ0 = CALL_EXPR_ARG (exp, 0);\n+\targ1 = CALL_EXPR_ARG (exp, 1);\n+\targ2 = CALL_EXPR_ARG (exp, 2);\n+\targ3 = CALL_EXPR_ARG (exp, 3);\n+\n+\top0 = expand_normal (arg0);\n+\top1 = expand_normal (arg1);\n+\top2 = expand_normal (arg2);\n+\top3 = expand_normal (arg3);\n+\n+\tif (!REG_P (op0))\n+\t  op0 = copy_to_mode_reg (V2DImode, op0);\n+\tif (!REG_P (op1))\n+\t  op1 = copy_to_mode_reg (V2DImode, op1);\n+\tif (!REG_P (op2))\n+\t  op2 = copy_to_mode_reg (V2DImode, op2);\n+\tif (!REG_P (op3))\n+\t  op3 = copy_to_mode_reg (SImode, op3);\n+\n+\temit_insn (gen_loadiwkey (op0, op1, op2, op3));\n+\n+\treturn 0;\n+      }\n+\n+    case IX86_BUILTIN_AESDEC128KLU8:\n+      icode = CODE_FOR_aesdec128klu8;\n+      goto aesdecenc_expand;\n+\n+    case IX86_BUILTIN_AESDEC256KLU8:\n+      icode = CODE_FOR_aesdec256klu8;\n+      goto aesdecenc_expand;\n+\n+    case IX86_BUILTIN_AESENC128KLU8:\n+      icode = CODE_FOR_aesenc128klu8;\n+      goto aesdecenc_expand;\n+\n+    case IX86_BUILTIN_AESENC256KLU8:\n+      icode = CODE_FOR_aesenc256klu8;\n+\n+    aesdecenc_expand:\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0); // __m128i *odata\n+      arg1 = CALL_EXPR_ARG (exp, 1); // __m128i idata\n+      arg2 = CALL_EXPR_ARG (exp, 2); // const void *p\n+\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n+\n+      if (!address_operand (op0, V2DImode))\n+\t{\n+\t  op0 = convert_memory_address (Pmode, op0);\n+\t  op0 = copy_addr_to_reg (op0);\n+\t}\n+      op0 = gen_rtx_MEM (V2DImode, op0);\n+\n+      if (!REG_P (op1))\n+\top1 = copy_to_mode_reg (V2DImode, op1);\n+\n+      if (!address_operand (op2, VOIDmode))\n+\t{\n+\t  op2 = convert_memory_address (Pmode, op2);\n+\t  op2 = copy_addr_to_reg (op2);\n+\t}\n+      op2 = gen_rtx_MEM (BLKmode, op2);\n+\n+      emit_insn (GEN_FCN (icode) (op1, op1, op2));\n+\n+      if (target == 0)\n+\ttarget = gen_reg_rtx (QImode);\n+\n+      pat = gen_rtx_EQ (QImode, gen_rtx_REG (CCZmode, FLAGS_REG),\n+\t\t\tconst0_rtx);\n+      emit_insn (gen_rtx_SET (target, pat));\n+\n+      emit_insn (gen_rtx_SET (op0, op1));\n+\n+      return target;\n+\n+    case IX86_BUILTIN_AESDECWIDE128KLU8:\n+      icode = CODE_FOR_aesdecwide128klu8;\n+      goto wideaesdecenc_expand;\n+\n+    case IX86_BUILTIN_AESDECWIDE256KLU8:\n+      icode = CODE_FOR_aesdecwide256klu8;\n+      goto wideaesdecenc_expand;\n+\n+    case IX86_BUILTIN_AESENCWIDE128KLU8:\n+      icode = CODE_FOR_aesencwide128klu8;\n+      goto wideaesdecenc_expand;\n+\n+    case IX86_BUILTIN_AESENCWIDE256KLU8:\n+      icode = CODE_FOR_aesencwide256klu8;\n+\n+    wideaesdecenc_expand:\n+\n+      rtx xmm_regs[8];\n+      rtx op;\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0); // __m128i * odata\n+      arg1 = CALL_EXPR_ARG (exp, 1); // const __m128i * idata\n+      arg2 = CALL_EXPR_ARG (exp, 2); // const void *p\n+\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n+\n+      if (!address_operand (op2, VOIDmode))\n+\t{\n+\t  op2 = convert_memory_address (Pmode, op2);\n+\t  op2 = copy_addr_to_reg (op2);\n+\t}\n+      op2 = gen_rtx_MEM (BLKmode, op2);\n+\n+      for (i = 0; i < 8; i++)\n+\t{\n+\t  xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n+\n+\t  op = gen_rtx_MEM (V2DImode,\n+\t\t\t    plus_constant (Pmode, op1, (i * 16)));\n+\n+\t  emit_move_insn (xmm_regs[i], op);\n+\t}\n+\n+      emit_insn (GEN_FCN (icode) (op2));\n+\n+      if (target == 0)\n+\ttarget = gen_reg_rtx (QImode);\n+\n+      pat = gen_rtx_EQ (QImode, gen_rtx_REG (CCZmode, FLAGS_REG),\n+\t\t\tconst0_rtx);\n+      emit_insn (gen_rtx_SET (target, pat));\n+\n+      for (i = 0; i < 8; i++)\n+\t{\n+\t  op = gen_rtx_MEM (V2DImode,\n+\t\t\t    plus_constant (Pmode, op0, (i * 16)));\n+\t  emit_move_insn (op, xmm_regs[i]);\n+\t}\n+\n+      return target;\n+\n+    case IX86_BUILTIN_ENCODEKEY128U32:\n+      {\n+\trtx op, xmm_regs[7];\n+\n+\targ0 = CALL_EXPR_ARG (exp, 0); // unsigned int htype\n+\targ1 = CALL_EXPR_ARG (exp, 1); // __m128i key\n+\targ2 = CALL_EXPR_ARG (exp, 2); // void *h\n+\n+\top0 = expand_normal (arg0);\n+\top1 = expand_normal (arg1);\n+\top2 = expand_normal (arg2);\n+\n+\tif (!REG_P (op0))\n+\t  op0 = copy_to_mode_reg (SImode, op0);\n+\n+\top = gen_rtx_REG (V2DImode, GET_SSE_REGNO (0));\n+\temit_move_insn (op, op1);\n+\n+\tfor (i = 0; i < 3; i++)\n+\t  xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n+\n+\tif (target == 0)\n+\t  target = gen_reg_rtx (SImode);\n+\n+\temit_insn (gen_encodekey128u32 (target, op0));\n+\n+\tfor (i = 0; i < 3; i++)\n+\t  {\n+\t    op = gen_rtx_MEM (V2DImode,\n+\t\t\t      plus_constant (Pmode, op2, (i * 16)));\n+\t    emit_move_insn (op, xmm_regs[i]);\n+\t  }\n+\n+\treturn target;\n+      }\n+    case IX86_BUILTIN_ENCODEKEY256U32:\n+      {\n+\trtx op, xmm_regs[7];\n+\n+\targ0 = CALL_EXPR_ARG (exp, 0); // unsigned int htype\n+\targ1 = CALL_EXPR_ARG (exp, 1); // __m128i keylow\n+\targ2 = CALL_EXPR_ARG (exp, 2); // __m128i keyhi\n+\targ3 = CALL_EXPR_ARG (exp, 3); // void *h\n+\n+\top0 = expand_normal (arg0);\n+\top1 = expand_normal (arg1);\n+\top2 = expand_normal (arg2);\n+\top3 = expand_normal (arg3);\n+\n+\tif (!REG_P (op0))\n+\t  op0 = copy_to_mode_reg (SImode, op0);\n+\n+\t/* Force to use xmm0, xmm1 for keylow, keyhi*/\n+\top = gen_rtx_REG (V2DImode, GET_SSE_REGNO (0));\n+\temit_move_insn (op, op1);\n+\top = gen_rtx_REG (V2DImode, GET_SSE_REGNO (1));\n+\temit_move_insn (op, op2);\n+\n+\tfor (i = 0; i < 4; i++)\n+\t  xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n+\n+\tif (target == 0)\n+\t  target = gen_reg_rtx (SImode);\n+\n+\temit_insn (gen_encodekey256u32 (target, op0));\n+\n+\tfor (i = 0; i < 4; i++)\n+\t  {\n+\t    op = gen_rtx_MEM (V2DImode,\n+\t\t\t      plus_constant (Pmode, op3, (i * 16)));\n+\t    emit_move_insn (op, xmm_regs[i]);\n+\t  }\n+\n+\treturn target;\n+      }\n+\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:"}, {"sha": "4e1dd7ccc936b638362e314bfdca8eaa9d2b897b", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -214,7 +214,9 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mamx-int8\",\tOPTION_MASK_ISA2_AMX_INT8 },\n   { \"-mamx-bf16\",\tOPTION_MASK_ISA2_AMX_BF16 },\n   { \"-muintr\",\t\tOPTION_MASK_ISA2_UINTR },\n-  { \"-mhreset\",\t\tOPTION_MASK_ISA2_HRESET }\n+  { \"-mhreset\",\t\tOPTION_MASK_ISA2_HRESET },\n+  { \"-mkl\",\t\tOPTION_MASK_ISA2_KL },\n+  { \"-mwidekl\", \tOPTION_MASK_ISA2_WIDEKL }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1035,6 +1037,8 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"cldemote\", OPT_mcldemote),\n     IX86_ATTR_ISA (\"uintr\", OPT_muintr),\n     IX86_ATTR_ISA (\"ptwrite\",   OPT_mptwrite),\n+    IX86_ATTR_ISA (\"kl\", OPT_mkl),\n+    IX86_ATTR_ISA (\"widekl\",\tOPT_mwidekl),\n     IX86_ATTR_ISA (\"avx512bf16\",   OPT_mavx512bf16),\n     IX86_ATTR_ISA (\"enqcmd\", OPT_menqcmd),\n     IX86_ATTR_ISA (\"serialize\", OPT_mserialize),\n@@ -2339,6 +2343,12 @@ ix86_option_override_internal (bool main_args_p,\n \tif (((processor_alias_table[i].flags & PTA_TSXLDTRK) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA2_TSXLDTRK))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_TSXLDTRK;\n+\tif (((processor_alias_table[i].flags & PTA_KL) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA2_KL))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_KL;\n+\tif (((processor_alias_table[i].flags & PTA_WIDEKL) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA2_WIDEKL))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_WIDEKL;\n \n \tif ((processor_alias_table[i].flags\n \t   & (PTA_PREFETCH_SSE | PTA_SSE)) != 0)"}, {"sha": "760c60fb54f39d24bce4be9c5a8ce32f4cb8d09a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -213,6 +213,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_UINTR_P(x) TARGET_ISA2_UINTR_P(x)\n #define TARGET_HRESET\t    TARGET_ISA2_HRESET\n #define TARGET_HRESET_P(x)  TARGET_ISA2_HRESET_P(x)\n+#define TARGET_KL\tTARGET_ISA2_KL\n+#define TARGET_KL_P(x) TARGET_ISA2_KL_P(x)\n+#define TARGET_WIDEKL\tTARGET_ISA2_WIDEKL\n+#define TARGET_WIDEKL_P(x) TARGET_ISA2_WIDEKL_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n@@ -2485,6 +2489,8 @@ const wide_int_bitmask PTA_AMX_INT8(0, HOST_WIDE_INT_1U << 20);\n const wide_int_bitmask PTA_AMX_BF16(0, HOST_WIDE_INT_1U << 21);\n const wide_int_bitmask PTA_UINTR (0, HOST_WIDE_INT_1U << 22);\n const wide_int_bitmask PTA_HRESET(0, HOST_WIDE_INT_1U << 23);\n+const wide_int_bitmask PTA_KL (0, HOST_WIDE_INT_1U << 24);\n+const wide_int_bitmask PTA_WIDEKL (0, HOST_WIDE_INT_1U << 25);\n \n const wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n   | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR;\n@@ -2525,13 +2531,13 @@ const wide_int_bitmask PTA_ICELAKE_CLIENT = PTA_CANNONLAKE | PTA_AVX512VNNI\n const wide_int_bitmask PTA_ICELAKE_SERVER = PTA_ICELAKE_CLIENT | PTA_PCONFIG\n   | PTA_WBNOINVD | PTA_CLWB;\n const wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI\n-  | PTA_MOVDIR64B | PTA_CLWB | PTA_AVX512VP2INTERSECT;\n+  | PTA_MOVDIR64B | PTA_CLWB | PTA_AVX512VP2INTERSECT | PTA_KL | PTA_WIDEKL;\n const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE\n   | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK | PTA_AMX_TILE\n   | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR;\n const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE\n-  | PTA_WAITPKG | PTA_SERIALIZE | PTA_HRESET;\n+  | PTA_WAITPKG | PTA_SERIALIZE | PTA_HRESET | PTA_KL | PTA_WIDEKL;\n const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER\n   | PTA_AVX512F | PTA_AVX512CD;\n const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;"}, {"sha": "029cacb38e07d9b759a1dc0cbc3f05b0a750fbd8", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1135,3 +1135,11 @@ Support AMX-BF16 built-in functions and code generation.\n mhreset\n Target Report Mask(ISA2_HRESET) Var(ix86_isa_flags2) Save\n Support HRESET built-in functions and code generation.\n+\n+mkl\n+Target Report Mask(ISA2_KL) Var(ix86_isa_flags2) Save\n+Support KL built-in functions and code generation.\n+\n+mwidekl\n+Target Report Mask(ISA2_WIDEKL) Var(ix86_isa_flags2) Save\n+Support WIDEKL built-in functions and code generation."}, {"sha": "0ce08e5b34123b9b469b2a94ddbee40e1c0d9e8c", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -118,4 +118,6 @@\n \n #include <prfchwintrin.h>\n \n+#include <keylockerintrin.h>\n+\n #endif /* _IMMINTRIN_H_INCLUDED */"}, {"sha": "a5f29fdcba9a1eacd10b24a279da21b33626ac9d", "filename": "gcc/config/i386/keylockerintrin.h", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fkeylockerintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fkeylockerintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fkeylockerintrin.h?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,129 @@\n+/* Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <keylockerintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _KEYLOCKERINTRIN_H_INCLUDED\n+#define _KEYLOCKERINTRIN_H_INCLUDED\n+\n+#ifndef __KL__\n+#pragma GCC push_options\n+#pragma GCC target(\"kl\")\n+#define __DISABLE_KL__\n+#endif /* __KL__ */\n+\n+\n+extern __inline\n+void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_loadiwkey (unsigned int __I, __m128i __A, __m128i __B, __m128i __C)\n+{\n+  __builtin_ia32_loadiwkey ((__v2di) __B, (__v2di) __C, (__v2di) __A, __I);\n+}\n+\n+extern __inline\n+unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_encodekey128_u32 (unsigned int __I, __m128i __A, void * __P)\n+{\n+  return __builtin_ia32_encodekey128_u32 (__I, (__v2di)__A, __P);\n+}\n+\n+extern __inline\n+unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_encodekey256_u32 (unsigned int __I, __m128i __A, __m128i __B, void * __P)\n+{\n+  return __builtin_ia32_encodekey256_u32 (__I, (__v2di)__A, (__v2di)__B, __P);\n+}\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesdec128kl_u8 (__m128i * __A, __m128i __B, const void * __P)\n+{\n+  return __builtin_ia32_aesdec128kl_u8 ((__v2di *) __A, (__v2di) __B, __P);\n+}\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesdec256kl_u8 (__m128i * __A, __m128i __B, const void * __P)\n+{\n+  return __builtin_ia32_aesdec256kl_u8 ((__v2di *) __A, (__v2di) __B, __P);\n+}\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesenc128kl_u8 (__m128i * __A, __m128i __B, const void * __P)\n+{\n+  return __builtin_ia32_aesenc128kl_u8 ((__v2di *) __A, (__v2di) __B, __P);\n+}\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesenc256kl_u8 (__m128i * __A, __m128i __B, const void * __P)\n+{\n+  return __builtin_ia32_aesenc256kl_u8 ((__v2di *) __A, (__v2di) __B, __P);\n+}\n+\n+#ifdef __DISABLE_KL__\n+#undef __DISABLE_KL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_KL__ */\n+\n+#ifndef __WIDEKL__\n+#pragma GCC push_options\n+#pragma GCC target(\"widekl\")\n+#define __DISABLE_WIDEKL__\n+#endif /* __WIDEKL__ */\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesdecwide128kl_u8(__m128i __A[8], const __m128i __B[8], const void * __P)\n+{\n+  return __builtin_ia32_aesdecwide128kl_u8 ((__v2di *) __A, (__v2di *) __B, __P);\n+}\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesdecwide256kl_u8(__m128i __A[8], const __m128i __B[8], const void * __P)\n+{\n+  return __builtin_ia32_aesdecwide256kl_u8 ((__v2di *) __A, (__v2di *) __B, __P);\n+}\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesencwide128kl_u8(__m128i __A[8], const __m128i __B[8], const void * __P)\n+{\n+  return __builtin_ia32_aesencwide128kl_u8 ((__v2di *) __A, (__v2di *) __B, __P);\n+}\n+\n+extern __inline\n+unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_aesencwide256kl_u8(__m128i __A[8], const __m128i __B[8], const void * __P)\n+{\n+  return __builtin_ia32_aesencwide256kl_u8 ((__v2di *) __A, (__v2di *) __B, __P);\n+}\n+#ifdef __DISABLE_WIDEKL__\n+#undef __DISABLE_WIDEKL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_WIDEKL__ */\n+#endif /* _KEYLOCKERINTRIN_H_INCLUDED */"}, {"sha": "36f9dfcc586985d57c28fd8ac16c59433800b8c5", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1726,3 +1726,121 @@\n     }\n   return (i >= 12 && i <= 18);\n })\n+\n+;; Keylocker specific predicates\n+(define_predicate \"encodekey128_operation\"\n+  (match_code \"parallel\")\n+{\n+  unsigned i;\n+  rtx elt;\n+\n+  if (XVECLEN (op, 0) != 8)\n+    return false;\n+\n+  for(i = 0; i < 3; i++)\n+    {\n+      elt = XVECEXP (op, 0, i + 1);\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != V2DImode\n+\t  || REGNO (SET_DEST (elt)) != GET_SSE_REGNO (i)\n+\t  || GET_CODE (SET_SRC (elt)) != UNSPEC_VOLATILE\n+\t  || GET_MODE (SET_SRC (elt)) != V2DImode\n+\t  || XVECLEN(SET_SRC (elt), 0) != 1\n+\t  || XVECEXP(SET_SRC (elt), 0, 0) != const0_rtx)\n+\treturn false;\n+    }\n+\n+  for(i = 4; i < 7; i++)\n+    {\n+      elt = XVECEXP (op, 0, i);\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != V2DImode\n+\t  || REGNO (SET_DEST (elt)) != GET_SSE_REGNO (i)\n+\t  || SET_SRC (elt) != CONST0_RTX (V2DImode))\n+\treturn false;\n+    }\n+\n+  elt = XVECEXP (op, 0, 7);\n+  if (GET_CODE (elt) != CLOBBER\n+      || GET_MODE (elt) != VOIDmode\n+      || GET_CODE (XEXP (elt, 0)) != REG\n+      || GET_MODE (XEXP (elt, 0)) != CCmode\n+      || REGNO (XEXP (elt, 0)) != FLAGS_REG)\n+    return false;\n+  return true;\n+})\n+\n+(define_predicate \"encodekey256_operation\"\n+  (match_code \"parallel\")\n+{\n+  unsigned i;\n+  rtx elt;\n+\n+  if (XVECLEN (op, 0) != 9)\n+    return false;\n+\n+  elt = SET_SRC (XVECEXP (op, 0, 0));\n+  elt = XVECEXP (elt, 0, 2);\n+  if (!REG_P (elt)\n+      || REGNO(elt) != GET_SSE_REGNO (1))\n+    return false;\n+\n+  for(i = 0; i < 4; i++)\n+    {\n+      elt = XVECEXP (op, 0, i + 1);\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != V2DImode\n+\t  || REGNO (SET_DEST (elt)) != GET_SSE_REGNO (i)\n+\t  || GET_CODE (SET_SRC (elt)) != UNSPEC_VOLATILE\n+\t  || GET_MODE (SET_SRC (elt)) != V2DImode\n+\t  || XVECLEN(SET_SRC (elt), 0) != 1\n+\t  || XVECEXP(SET_SRC (elt), 0, 0) != const0_rtx)\n+\treturn false;\n+    }\n+\n+  for(i = 4; i < 7; i++)\n+    {\n+      elt = XVECEXP (op, 0, i + 1);\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != V2DImode\n+\t  || REGNO (SET_DEST (elt)) != GET_SSE_REGNO (i)\n+\t  || SET_SRC (elt) != CONST0_RTX (V2DImode))\n+\treturn false;\n+    }\n+\n+  elt = XVECEXP (op, 0, 8);\n+  if (GET_CODE (elt) != CLOBBER\n+      || GET_MODE (elt) != VOIDmode\n+      || GET_CODE (XEXP (elt, 0)) != REG\n+      || GET_MODE (XEXP (elt, 0)) != CCmode\n+      || REGNO (XEXP (elt, 0)) != FLAGS_REG)\n+    return false;\n+  return true;\n+})\n+\n+\n+(define_predicate \"aeswidekl_operation\"\n+  (match_code \"parallel\")\n+{\n+  unsigned i;\n+  rtx elt;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      elt = XVECEXP (op, 0, i + 1);\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != V2DImode\n+\t  || REGNO (SET_DEST (elt)) != GET_SSE_REGNO (i)\n+\t  || GET_CODE (SET_SRC (elt)) != UNSPEC_VOLATILE\n+\t  || GET_MODE (SET_SRC (elt)) != V2DImode\n+\t  || XVECLEN (SET_SRC (elt), 0) != 1\n+\t  || REGNO (XVECEXP (SET_SRC (elt), 0, 0)) != GET_SSE_REGNO (i))\n+\treturn false;\n+    }\n+  return true;\n+})"}, {"sha": "12e83df3010b57cd6575e75cd43886d514d09faa", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -205,6 +205,19 @@\n   UNSPECV_MWAIT\n   UNSPECV_VZEROALL\n   UNSPECV_VZEROUPPER\n+\n+  ;; For KEYLOCKER\n+  UNSPECV_LOADIWKEY\n+  UNSPECV_AESDEC128KLU8\n+  UNSPECV_AESENC128KLU8\n+  UNSPECV_AESDEC256KLU8\n+  UNSPECV_AESENC256KLU8\n+  UNSPECV_AESDECWIDE128KLU8\n+  UNSPECV_AESENCWIDE128KLU8\n+  UNSPECV_AESDECWIDE256KLU8\n+  UNSPECV_AESENCWIDE256KLU8\n+  UNSPECV_ENCODEKEY128U32\n+  UNSPECV_ENCODEKEY256U32\n ])\n \n ;; All vector modes including V?TImode, used in move patterns.\n@@ -23316,3 +23329,208 @@\n           (match_operand:<avx512fmaskhalfmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512BF16\"\n   \"vdpbf16ps\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3}\")\n+\n+;; KEYLOCKER\n+(define_insn \"loadiwkey\"\n+  [(unspec_volatile:V2DI [(match_operand:V2DI 0 \"register_operand\" \"v\")\n+                          (match_operand:V2DI 1 \"register_operand\" \"v\")\n+                          (match_operand:V2DI 2 \"register_operand\" \"Yz\")\n+                          (match_operand:SI   3 \"register_operand\" \"a\")]\n+                         UNSPECV_LOADIWKEY)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_KL\"\n+  \"loadiwkey\\t{%0, %1|%1, %0}\"\n+  [(set_attr \"type\" \"other\")])\n+\n+(define_expand \"encodekey128u32\"\n+  [(match_par_dup 2\n+    [(set (match_operand:SI 0 \"register_operand\")\n+\t  (unspec_volatile:SI\n+\t    [(match_operand:SI   1 \"register_operand\")\n+\t     (reg:V2DI XMM0_REG)]\n+            UNSPECV_ENCODEKEY128U32))])]\n+  \"TARGET_KL\"\n+{\n+  rtx xmm_regs[7];\n+  rtx tmp_unspec;\n+  unsigned i;\n+\n+  /* parallel rtx for encodekey128 predicate */\n+  operands[2] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (8));\n+\n+  for (i = 0; i < 7; i++)\n+    xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n+\n+  tmp_unspec\n+    = gen_rtx_UNSPEC_VOLATILE (SImode,\n+\t\t\t       gen_rtvec (2, operands[1], xmm_regs[0]),\n+\t\t\t       UNSPECV_ENCODEKEY128U32);\n+\n+  XVECEXP (operands[2], 0, 0)\n+    = gen_rtx_SET (operands[0], tmp_unspec);\n+\n+  tmp_unspec\n+    = gen_rtx_UNSPEC_VOLATILE (V2DImode,\n+\t\t\t       gen_rtvec (1, const0_rtx),\n+\t\t\t       UNSPECV_ENCODEKEY128U32);\n+\n+  for (i = 0; i < 3; i++)\n+    XVECEXP (operands[2], 0, i + 1)\n+      = gen_rtx_SET (xmm_regs[i], tmp_unspec);\n+\n+  for (i = 4; i < 7; i++)\n+    XVECEXP (operands[2], 0, i)\n+      = gen_rtx_SET (xmm_regs[i], CONST0_RTX (V2DImode));\n+\n+  XVECEXP (operands[2], 0, 7)\n+    = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n+})\n+\n+(define_insn \"*encodekey128u32\"\n+  [(match_parallel 2 \"encodekey128_operation\"\n+    [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t  (unspec_volatile:SI\n+\t    [(match_operand:SI   1 \"register_operand\" \"r\")\n+\t     (reg:V2DI XMM0_REG)]\n+            UNSPECV_ENCODEKEY128U32))])]\n+  \"TARGET_KL\"\n+  \"encodekey128\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"other\")])\n+\n+(define_expand \"encodekey256u32\"\n+  [(match_par_dup 2\n+    [(set (match_operand:SI 0 \"register_operand\")\n+\t  (unspec_volatile:SI\n+\t    [(match_operand:SI   1 \"register_operand\")\n+\t     (reg:V2DI XMM0_REG)\n+\t     (reg:V2DI XMM1_REG)]\n+\t    UNSPECV_ENCODEKEY256U32))])]\n+  \"TARGET_KL\"\n+{\n+  rtx xmm_regs[7];\n+  rtx tmp_unspec;\n+  unsigned i;\n+\n+  /* parallel rtx for encodekey256 predicate */\n+  operands[2] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (9));\n+\n+  for (i = 0; i < 7; i++)\n+    xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n+\n+  tmp_unspec\n+    = gen_rtx_UNSPEC_VOLATILE (SImode,\n+\t\t\t       gen_rtvec (3, operands[1],\n+\t\t\t\t\t  xmm_regs[0], xmm_regs[1]),\n+\t\t\t       UNSPECV_ENCODEKEY256U32);\n+\n+  XVECEXP (operands[2], 0, 0)\n+    = gen_rtx_SET (operands[0], tmp_unspec);\n+\n+  tmp_unspec\n+    = gen_rtx_UNSPEC_VOLATILE (V2DImode,\n+\t\t\t       gen_rtvec (1, const0_rtx),\n+\t\t\t       UNSPECV_ENCODEKEY256U32);\n+\n+  for (i = 0; i < 4; i++)\n+    XVECEXP (operands[2], 0, i + 1)\n+      = gen_rtx_SET (xmm_regs[i], tmp_unspec);\n+\n+  for (i = 4; i < 7; i++)\n+    XVECEXP (operands[2], 0, i + 1)\n+      = gen_rtx_SET (xmm_regs[i], CONST0_RTX (V2DImode));\n+\n+  XVECEXP (operands[2], 0, 8)\n+    = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n+})\n+\n+(define_insn \"*encodekey256u32\"\n+  [(match_parallel 2 \"encodekey256_operation\"\n+    [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t  (unspec_volatile:SI\n+\t    [(match_operand:SI   1 \"register_operand\" \"r\")\n+\t     (reg:V2DI XMM0_REG)\n+\t     (reg:V2DI XMM1_REG)]\n+\t    UNSPECV_ENCODEKEY256U32))])]\n+  \"TARGET_KL\"\n+  \"encodekey256\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"other\")])\n+\n+(define_int_iterator AESDECENCKL [UNSPECV_AESDEC128KLU8  UNSPECV_AESDEC256KLU8\n+                                  UNSPECV_AESENC128KLU8  UNSPECV_AESENC256KLU8])\n+\n+(define_int_attr aesklvariant [(UNSPECV_AESDEC128KLU8 \"dec128kl\")\n+                               (UNSPECV_AESDEC256KLU8 \"dec256kl\")\n+                               (UNSPECV_AESENC128KLU8 \"enc128kl\")\n+                               (UNSPECV_AESENC256KLU8 \"enc256kl\")])\n+\n+(define_insn \"aes<aesklvariant>u8\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+        (unspec_volatile:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+                               (match_operand:BLK   2 \"memory_operand\" \"m\")]\n+                              AESDECENCKL))\n+   (set (reg:CCZ FLAGS_REG)\n+        (unspec_volatile:CCZ [(match_dup 1) (match_dup 2)] AESDECENCKL))]\n+  \"TARGET_KL\"\n+  \"aes<aesklvariant>\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"other\")])\n+\n+(define_int_iterator AESDECENCWIDEKL [UNSPECV_AESDECWIDE128KLU8  UNSPECV_AESDECWIDE256KLU8\n+                                      UNSPECV_AESENCWIDE128KLU8  UNSPECV_AESENCWIDE256KLU8])\n+\n+(define_int_attr aeswideklvariant [(UNSPECV_AESDECWIDE128KLU8 \"decwide128kl\")\n+                                   (UNSPECV_AESDECWIDE256KLU8 \"decwide256kl\")\n+                                   (UNSPECV_AESENCWIDE128KLU8 \"encwide128kl\")\n+                                   (UNSPECV_AESENCWIDE256KLU8 \"encwide256kl\")])\n+\n+(define_int_attr AESWIDEKLVARIANT [(UNSPECV_AESDECWIDE128KLU8 \"AESDECWIDE128KLU8\")\n+                                   (UNSPECV_AESDECWIDE256KLU8 \"AESDECWIDE256KLU8\")\n+                                   (UNSPECV_AESENCWIDE128KLU8 \"AESENCWIDE128KLU8\")\n+                                   (UNSPECV_AESENCWIDE256KLU8 \"AESENCWIDE256KLU8\")])\n+\n+(define_expand \"aes<aeswideklvariant>u8\"\n+  [(match_par_dup 1\n+    [(set (reg:CCZ FLAGS_REG)\n+\t  (unspec_volatile:CCZ\n+\t    [(match_operand:BLK 0 \"memory_operand\")]\n+\t    AESDECENCWIDEKL))])]\n+  \"TARGET_WIDEKL\"\n+{\n+  rtx xmm_regs[8];\n+  rtx tmp_unspec;\n+  unsigned i;\n+\n+  /* parallel rtx for widekl predicate */\n+  operands[1] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (9));\n+\n+  for (i = 0; i < 8; i++)\n+    xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n+\n+  tmp_unspec\n+    = gen_rtx_UNSPEC_VOLATILE (CCZmode,\n+\t\t\t       gen_rtvec (1, operands[0]),\n+\t\t\t       UNSPECV_<AESWIDEKLVARIANT>);\n+\n+  XVECEXP (operands[1], 0, 0)\n+     = gen_rtx_SET (gen_rtx_REG (CCZmode, FLAGS_REG),\n+\t\t    tmp_unspec);\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp_unspec\n+\t= gen_rtx_UNSPEC_VOLATILE (V2DImode,\n+\t\t\t\t   gen_rtvec (1, xmm_regs[i]),\n+\t\t\t\t   UNSPECV_<AESWIDEKLVARIANT>);\n+      XVECEXP (operands[1], 0, i + 1)\n+\t= gen_rtx_SET (xmm_regs[i], tmp_unspec);\n+    }\n+})\n+\n+(define_insn \"*aes<aeswideklvariant>u8\"\n+  [(match_parallel 1 \"aeswidekl_operation\"\n+    [(set (reg:CCZ FLAGS_REG)\n+\t  (unspec_volatile:CCZ\n+\t    [(match_operand:BLK 0 \"memory_operand\" \"m\")]\n+\t    AESDECENCWIDEKL))])]\n+  \"TARGET_WIDEKL\"\n+  \"aes<aeswideklvariant>\\t{%0}\"\n+  [(set_attr \"type\" \"other\")])"}, {"sha": "661cdbc1921f2d9416afc295d742468a30ac3f1b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -6652,6 +6652,16 @@ Enable/disable the generation of the UINTR instructions.\n @cindex @code{target(\"hreset\")} function attribute, x86\n Enable/disable the generation of the HRESET instruction.\n \n+@item kl\n+@itemx no-kl\n+@cindex @code{target(\"kl\")} function attribute, x86\n+Enable/disable the generation of the KEYLOCKER instructions.\n+\n+@item widekl\n+@itemx no-widekl\n+@cindex @code{target(\"widekl\")} function attribute, x86\n+Enable/disable the generation of the WIDEKL instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "79d479c72b757a0b96108a3592f9bebf26d2f3b5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1369,6 +1369,7 @@ See RS/6000 and PowerPC Options.\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n+-mkl -mwidekl @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mlong-double-64  -mlong-double-80  -mlong-double-128 @gol\n@@ -30365,6 +30366,11 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mhreset\n @opindex mhreset\n+@itemx -mkl\n+@opindex mkl\n+@need 200\n+@itemx -mwidekl\n+@opindex mwidekl\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -30374,8 +30380,9 @@ WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n-UINTR, HRESET or CLDEMOTE extended instruction sets.  Each has a corresponding\n-@option{-mno-} option to disable use of these instructions.\n+UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL or CLDEMOTE extended\n+instruction sets. Each has a corresponding @option{-mno-} option to disable\n+use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "b964248fc0d4c1a35ece96b6f0968d7ded276207", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "2f73de27c11494a0f53b653722d3ecf96c6d4527", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "b8e3b1f7dee97e59d1d96bf4fea2cd08aab489b9", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -76,6 +76,8 @@ extern void test_amx_int8 (void)\t\t__attribute__((__target__(\"amx-int8\")));\n extern void test_amx_bf16 (void)\t\t__attribute__((__target__(\"amx-bf16\")));\n extern void test_uintr (void)\t\t\t__attribute__((__target__(\"uintr\")));\n extern void test_hreset (void)\t\t\t__attribute__((__target__(\"hreset\")));\n+extern void test_keylocker (void)\t\t__attribute__((__target__(\"kl\")));\n+extern void test_widekl (void)\t\t\t__attribute__((__target__(\"widekl\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -153,6 +155,8 @@ extern void test_no_amx_int8 (void)\t\t__attribute__((__target__(\"no-amx-int8\")));\n extern void test_no_amx_bf16 (void)\t\t__attribute__((__target__(\"no-amx-bf16\")));\n extern void test_no_uintr (void)\t\t__attribute__((__target__(\"no-uintr\")));\n extern void test_no_hreset (void)\t\t__attribute__((__target__(\"no-hreset\")));\n+extern void test_no_keylocker (void)\t\t__attribute__((__target__(\"no-kl\")));\n+extern void test_no_widekl (void)\t\t__attribute__((__target__(\"no-widekl\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "3cdda8ed7b0dba398d3c57778c714f9efcc68fed", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdec128kl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec128kl.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mkl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"aesdec128kl\\[ \\\\t\\]+\\[^\\n\\]*h1\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*k1\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i k1, k2;\n+const char h1[48];\n+\n+unsigned char\n+test_keylocker_1 (void)\n+{\n+  return _mm_aesdec128kl_u8 (&k1, k2, h1);\n+}"}, {"sha": "70b2c6357fa402b5c238814ff27c260b57c7434e", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdec256kl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdec256kl.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mkl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"aesdec256kl\\[ \\\\t\\]+\\[^\\n\\]*h1\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*k1\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i k1, k2;\n+const char h1[48];\n+\n+unsigned char\n+test_keylocker_3 (void)\n+{\n+  return _mm_aesdec256kl_u8 (&k1, k2, h1);\n+}"}, {"sha": "f2806891bffc691fb75e9444bab32f95d371a604", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdecwide128kl.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide128kl.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mwidekl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesdecwide128kl\\[ \\\\t\\]+\\[^\\n\\]*h1\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+\n+#include <immintrin.h>\n+\n+const char h1[48];\n+const __m128i idata[8];\n+__m128i odata[8];\n+\n+unsigned char\n+test_keylocker_5 (void)\n+{\n+  return _mm_aesdecwide128kl_u8 (odata, idata, h1);\n+}"}, {"sha": "9c60c84826fdaf3208fcba7374f8770817ffed8b", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesdecwide256kl.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesdecwide256kl.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mwidekl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesdecwide256kl\\[ \\\\t\\]+\\[^\\n\\]*h1\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+\n+#include <immintrin.h>\n+\n+const char h1[48];\n+const __m128i idata[8];\n+__m128i odata[8];\n+\n+unsigned char\n+test_keylocker_6 (void)\n+{\n+  return _mm_aesdecwide256kl_u8 (odata, idata, h1);\n+}"}, {"sha": "c7bf743015e4f726ce0258d71d1a92c74ff98533", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesenc128kl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesenc128kl.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mkl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"aesenc128kl\\[ \\\\t\\]+\\[^\\n\\]*h1\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*k1\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128i k1, k2;\n+const char h1[48];\n+\n+unsigned char\n+test_keylocker_2 (void)\n+{\n+  return _mm_aesenc128kl_u8 (&k1, k2, h1);\n+}"}, {"sha": "d01598c58978c90e70d72f3543c163c23b1f13c7", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesencwide128kl.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide128kl.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mwidekl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesencwide128kl\\[ \\\\t\\]+\\[^\\n\\]*h1(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+\n+#include <immintrin.h>\n+\n+const char h1[48];\n+const __m128i idata[8];\n+__m128i odata[8];\n+\n+unsigned char\n+test_keylocker_7 (void)\n+{\n+  return _mm_aesencwide128kl_u8 (odata, idata, h1);\n+}"}, {"sha": "f94b05e28686e31c8c441bb301823cfa3311a94c", "filename": "gcc/testsuite/gcc.target/i386/keylocker-aesencwide256kl.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-aesencwide256kl.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mwidekl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+16(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+32(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+48(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm3\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+64(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm4\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+80(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm5\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+96(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm6\" } } */\n+/* { dg-final { scan-assembler \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*idata\\\\+112(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm7\" } } */\n+/* { dg-final { scan-assembler \"aesencwide256kl\\[ \\\\t\\]+\\[^\\n\\]*h1(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"sete\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*odata(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*odata\\\\+16(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*odata\\\\+32(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*odata\\\\+48(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm4\\[^\\n\\r]*odata\\\\+64(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm5\\[^\\n\\r]*odata\\\\+80(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm6\\[^\\n\\r]*odata\\\\+96(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm7\\[^\\n\\r]*odata\\\\+112(\\\\(%rip\\\\))?\" } } */\n+\n+#include <immintrin.h>\n+\n+const char h1[48];\n+const __m128i idata[8];\n+__m128i odata[8];\n+\n+unsigned char\n+test_keylocker_8 (void)\n+{\n+  return _mm_aesencwide256kl_u8 (odata, idata, h1);\n+}\n+"}, {"sha": "8dd1bc634ac6777a99e2ec208d3e67fe8a1910e5", "filename": "gcc/testsuite/gcc.target/i386/keylocker-encodekey128.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey128.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mkl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k1(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+\\[^\\n\\]*ctrl(\\\\(%rip\\\\))?\\[^\\n\\r]*%eax\" } } */\n+/* { dg-final { scan-assembler \"encodekey128\\[ \\\\t\\]+\\[^\\n\\]*%eax\\[^\\n\\r]*%eax\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*h2(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*h2\\\\+16(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*h2\\\\+32(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqa|movaps)\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[4-6\\]\\[^\\n\\r]*k2(\\\\(%rip\\\\))?\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int ctrl;\n+char h2[48];\n+__m128i k1, k2;\n+\n+unsigned int\n+test_keylocker_9 (void)\n+{\n+  unsigned int ret;\n+\n+  ret = _mm_encodekey128_u32 (ctrl, k1, h2);\n+\n+  if (ret)\n+    k2 = (__m128i){0};\n+\n+  return ret;\n+}\n+"}, {"sha": "a9e19c6457b1077fa0c62ef6aac3eb9601c28a69", "filename": "gcc/testsuite/gcc.target/i386/keylocker-encodekey256.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-encodekey256.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mkl -O2\" } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k1(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+\\[^\\n\\]*ctrl(\\\\(%rip\\\\))?\\[^\\n\\r]*%eax\" } } */\n+/* { dg-final { scan-assembler \"encodekey256\\[ \\\\t\\]+\\[^\\n\\]*%eax\\[^\\n\\r]*%eax\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\r]*h2(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*h2\\\\+16(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm2\\[^\\n\\r]*h2\\\\+32(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqu|movups)\\[ \\\\t\\]+\\[^\\n\\]*%xmm3\\[^\\n\\r]*h2\\\\+48(\\\\(%rip\\\\))?\" } } */\n+/* { dg-final { scan-assembler \"(?:movdqa|movaps)\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[4-6\\]\\[^\\n\\r]*k3(\\\\(%rip\\\\))?\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int ctrl;\n+char h2[48];\n+__m128i k1, k2, k3;\n+\n+unsigned int\n+test_keylocker_10 (void)\n+{\n+  unsigned int ret;\n+  ret = _mm_encodekey256_u32 (ctrl, k1, k2, h2);\n+\n+  if (ret)\n+    k3 = (__m128i){0};\n+\n+  return ret;\n+}\n+"}, {"sha": "cc0f2e02150be7861db37fa7dd7de7d460e6e096", "filename": "gcc/testsuite/gcc.target/i386/keylocker-loadiwkey.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-loadiwkey.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-loadiwkey.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fkeylocker-loadiwkey.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mkl -O2\" } */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+\\[^\\n\\]*ctrl(\\\\(%rip\\\\))?\\[^\\n\\r]*%eax\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k2(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm1\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k3(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm2\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*k1(\\\\(%rip\\\\))?\\[^\\n\\r]*%xmm0\" } } */\n+/* { dg-final { scan-assembler \"loadiwkey\\[ \\\\t\\]+\\[^\\n\\]*%xmm1\\[^\\n\\r]*%xmm2\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int ctrl;\n+__m128i k1, k2, k3;\n+\n+void\n+test_keylocker_11 (void)\n+{\n+  _mm_loadiwkey (ctrl, k1, k2, k3);\n+}\n+"}, {"sha": "f1e05e62d8a8ebe4d8f14e40925013613aabb3ff", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "7f96331ffe944a66498a1c0080c6f96f8d593c36", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "27704c3e23ba27f98aba7b7d6c88db257c4222b8", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "789c8bebbab984ac82f4174219f1fd7282a66715", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "3e5e3e98f24ea14e9a5a09a60137f05d9db1da21", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632a2f50b8be2fe998aba28d22c30a67a0566e7b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=632a2f50b8be2fe998aba28d22c30a67a0566e7b", "patch": "@@ -708,6 +708,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl\")\n \n #include <x86intrin.h>"}]}