{"sha": "b906f4ca813779c4df4a9449700e8f52022f757f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwNmY0Y2E4MTM3NzljNGRmNGE5NDQ5NzAwZThmNTIwMjJmNzU3Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-11-03T17:59:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-11-03T17:59:31Z"}, "message": "Implement -fsanitize=vla-bound.\n\n\t* opts.c (common_handle_option): Handle vla-bound.\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE):\n\tDefine.\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_VLA.\n\t* asan.c (initialize_sanitizer_builtins): Build BT_FN_VOID_PTR_PTR.\nc-family/\n\t* c-ubsan.c: Don't include hash-table.h.\n\t(ubsan_instrument_vla): New function.\n\t* c-ubsan.h: Declare it.\ncp/\n\t* decl.c (cp_finish_decl): Move C++1y bounds checking...\n\t(compute_array_index_type): ...here.  Add VLA instrumentation.\n\tCall stabilize_vla_size.\n\t(grokdeclarator): Don't call stabilize_vla_size here.\nc/\n\t* c-decl.c (grokdeclarator): Add VLA instrumentation.\ntestsuite/\n\t* g++.dg/ubsan/cxx1y-vla.C: New test.\n\t* c-c++-common/ubsan/vla-3.c: New test.\n\t* c-c++-common/ubsan/vla-2.c: New test.\n\t* c-c++-common/ubsan/vla-4.c: New test.\n\t* c-c++-common/ubsan/vla-1.c: New test.\n\nFrom-SVN: r204334", "tree": {"sha": "47ea0e1220f5468397f6fdb89cae25257bd9e763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47ea0e1220f5468397f6fdb89cae25257bd9e763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b906f4ca813779c4df4a9449700e8f52022f757f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b906f4ca813779c4df4a9449700e8f52022f757f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b906f4ca813779c4df4a9449700e8f52022f757f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b906f4ca813779c4df4a9449700e8f52022f757f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "612211412cdcd9112fb2538f2a2bbc5a18c2d16d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612211412cdcd9112fb2538f2a2bbc5a18c2d16d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612211412cdcd9112fb2538f2a2bbc5a18c2d16d"}], "stats": {"total": 239, "additions": 211, "deletions": 28}, "files": [{"sha": "cc163f1cb83e0ac47df1ac0312f63b312d6375d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -1,3 +1,12 @@\n+2013-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement -fsanitize=vla-bound.\n+\t* opts.c (common_handle_option): Handle vla-bound.\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE):\n+\tDefine.\n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_VLA.\n+\t* asan.c (initialize_sanitizer_builtins): Build BT_FN_VOID_PTR_PTR.\n+\n 2013-11-02  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Adjust for"}, {"sha": "763c59aaed423d584ed6f8d3c4b61a07f5d768af", "filename": "gcc/asan.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -2021,6 +2021,9 @@ initialize_sanitizer_builtins (void)\n   tree BT_FN_VOID = build_function_type_list (void_type_node, NULL_TREE);\n   tree BT_FN_VOID_PTR\n     = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n+  tree BT_FN_VOID_PTR_PTR\n+    = build_function_type_list (void_type_node, ptr_type_node,\n+\t\t\t\tptr_type_node, NULL_TREE);\n   tree BT_FN_VOID_PTR_PTR_PTR\n     = build_function_type_list (void_type_node, ptr_type_node,\n \t\t\t\tptr_type_node, ptr_type_node, NULL_TREE);"}, {"sha": "569f4c203d70997b9221d85f76867e9a18c5303c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -1,3 +1,9 @@\n+2013-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-ubsan.c: Don't include hash-table.h.\n+\t(ubsan_instrument_vla): New function.\n+\t* c-ubsan.h: Declare it.\n+\n 2013-10-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tAutomated part of renaming of symtab_node_base to symtab_node."}, {"sha": "c9896381db2671a8e02f5521763324cdfeed21b3", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"cgraph.h\"\n #include \"gimple.h\"\n-#include \"hash-table.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"ubsan.h\"\n@@ -86,8 +85,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n   return t;\n }\n \n-/* Instrument left and right shifts.  If not instrumenting, return\n-   NULL_TREE.  */\n+/* Instrument left and right shifts.  */\n \n tree\n ubsan_instrument_shift (location_t loc, enum tree_code code,\n@@ -158,3 +156,22 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n \n   return t;\n }\n+\n+/* Instrument variable length array bound.  */\n+\n+tree\n+ubsan_instrument_vla (location_t loc, tree size)\n+{\n+  tree type = TREE_TYPE (size);\n+  tree t, tt;\n+\n+  t = fold_build2 (LE_EXPR, boolean_type_node, size, build_int_cst (type, 0));\n+  tree data = ubsan_create_data (\"__ubsan_vla_data\",\n+\t\t\t\t loc, ubsan_type_descriptor (type), NULL_TREE);\n+  data = build_fold_addr_expr_loc (loc, data);\n+  tt = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE);\n+  tt = build_call_expr_loc (loc, tt, 2, data, ubsan_encode_value (size));\n+  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_zero_node);\n+\n+  return t;\n+}"}, {"sha": "fdf27d9e21e9e5abf7feeec34333c2712d711394", "filename": "gcc/c-family/c-ubsan.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc-family%2Fc-ubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc-family%2Fc-ubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.h?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -23,5 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n \n extern tree ubsan_instrument_division (location_t, tree, tree);\n extern tree ubsan_instrument_shift (location_t, enum tree_code, tree, tree);\n+extern tree ubsan_instrument_vla (location_t, tree);\n \n #endif  /* GCC_C_UBSAN_H  */"}, {"sha": "efb4ba88c383d406b2ca0bdb40c5e9771b63ce16", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -1,3 +1,7 @@\n+2013-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (grokdeclarator): Add VLA instrumentation.\n+\n 2013-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.c (c_finish_omp_clauses) <case OMP_CLAUSE_UNIFORM>: Go to"}, {"sha": "2833fdba48675ba1d6896d2412e05b6ef07f9f4d", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-common.h\"\n #include \"c-family/c-objc.h\"\n #include \"c-family/c-pragma.h\"\n+#include \"c-family/c-ubsan.h\"\n #include \"c-lang.h\"\n #include \"langhooks.h\"\n #include \"tree-iterator.h\"\n@@ -5411,6 +5412,16 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t       with known value.  */\n \t\t    this_size_varies = size_varies = true;\n \t\t    warn_variable_length_array (name, size);\n+\t\t    if (flag_sanitize & SANITIZE_VLA\n+\t\t        && decl_context == NORMAL)\n+\t\t      {\n+\t\t\t/* Evaluate the array size only once.  */\n+\t\t\tsize = c_save_expr (size);\n+\t\t\tsize = c_fully_fold (size, false, NULL);\n+\t\t        size = fold_build2 (COMPOUND_EXPR, TREE_TYPE (size),\n+\t\t\t\t\t    ubsan_instrument_vla (loc, size),\n+\t\t\t\t\t    size);\n+\t\t      }\n \t\t  }\n \n \t\tif (integer_zerop (size) && !this_size_varies)"}, {"sha": "cadf6749e6cb20aebd22faa2193c323b024d2cd5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -1,3 +1,10 @@\n+2013-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* decl.c (cp_finish_decl): Move C++1y bounds checking...\n+\t(compute_array_index_type): ...here.  Add VLA instrumentation.\n+\tCall stabilize_vla_size.\n+\t(grokdeclarator): Don't call stabilize_vla_size here.\n+\n 2013-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/29234"}, {"sha": "e662764da8598a671aa89527a3a074531128d124", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-objc.h\"\n #include \"c-family/c-pragma.h\"\n #include \"c-family/c-target.h\"\n+#include \"c-family/c-ubsan.h\"\n #include \"diagnostic.h\"\n #include \"intl.h\"\n #include \"debug.h\"\n@@ -6399,17 +6400,6 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t   && TYPE_FOR_JAVA (type) && MAYBE_CLASS_TYPE_P (type))\n     error (\"non-static data member %qD has Java class type\", decl);\n \n-  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n-    {\n-      /* If the VLA bound is larger than half the address space, or less\n-\t than zero, throw std::bad_array_length.  */\n-      tree max = convert (ssizetype, TYPE_MAX_VALUE (TYPE_DOMAIN (type)));\n-      tree comp = build2 (LT_EXPR, boolean_type_node, max, ssize_int (-1));\n-      comp = build3 (COND_EXPR, void_type_node, comp,\n-\t\t     throw_bad_array_length (), void_zero_node);\n-      finish_expr_stmt (comp);\n-    }\n-\n   /* Add this declaration to the statement-tree.  This needs to happen\n      after the call to check_initializer so that the DECL_EXPR for a\n      reference temp is added before the DECL_EXPR for the reference itself.  */\n@@ -8379,6 +8369,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t{\n \t  /* A variable sized array.  */\n \t  itype = variable_size (itype);\n+\n \t  if (TREE_CODE (itype) != SAVE_EXPR)\n \t    {\n \t      /* Look for SIZEOF_EXPRs in itype and fold them, otherwise\n@@ -8390,6 +8381,32 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t      if (found)\n \t\titype = variable_size (fold (newitype));\n \t    }\n+\n+\t  stabilize_vla_size (itype);\n+\n+\t  if (cxx_dialect >= cxx1y)\n+\t    {\n+\t      /* If the VLA bound is larger than half the address space,\n+\t         or less than zero, throw std::bad_array_length.  */\n+\t      tree comp = build2 (LT_EXPR, boolean_type_node, itype,\n+\t\t\t\t  ssize_int (-1));\n+\t      comp = build3 (COND_EXPR, void_type_node, comp,\n+\t\t\t     throw_bad_array_length (), void_zero_node);\n+\t      finish_expr_stmt (comp);\n+\t    }\n+\t  else if (flag_sanitize & SANITIZE_VLA)\n+\t    {\n+\t      /* From C++1y onwards, we throw an exception on a negative\n+\t\t length size of an array; see above.  */\n+\n+\t      /* We have to add 1 -- in the ubsan routine we generate\n+\t\t LE_EXPR rather than LT_EXPR.  */\n+\t      tree t = fold_build2 (PLUS_EXPR, TREE_TYPE (itype), itype,\n+\t\t\t\t    build_one_cst (TREE_TYPE (itype)));\n+\t      t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t),\n+\t\t\t       ubsan_instrument_vla (input_location, t), t);\n+\t      finish_expr_stmt (t);\n+\t    }\n \t}\n       /* Make sure that there was no overflow when creating to a signed\n \t index type.  (For example, on a 32-bit machine, an array with\n@@ -9790,12 +9807,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t      && (decl_context == NORMAL || decl_context == FIELD)\n \t      && at_function_scope_p ()\n \t      && variably_modified_type_p (type, NULL_TREE))\n-\t    {\n-\t      /* First break out any side-effects.  */\n-\t      stabilize_vla_size (TYPE_SIZE (type));\n-\t      /* And then force evaluation of the SAVE_EXPR.  */\n-\t      finish_expr_stmt (TYPE_SIZE (type));\n-\t    }\n+\t    /* Force evaluation of the SAVE_EXPR.  */\n+\t    finish_expr_stmt (TYPE_SIZE (type));\n \n \t  if (declarator->kind == cdk_reference)\n \t    {\n@@ -9886,14 +9899,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n     }\n \n-  /* We need to stabilize side-effects in VLA sizes for regular array\n-     declarations too, not just pointers to arrays.  */\n-  if (type != error_mark_node && !TYPE_NAME (type)\n-      && (decl_context == NORMAL || decl_context == FIELD)\n-      && at_function_scope_p ()\n-      && variably_modified_type_p (type, NULL_TREE))\n-    stabilize_vla_size (TYPE_SIZE (type));\n-\n   /* A `constexpr' specifier used in an object declaration declares\n      the object as `const'.  */\n   if (constexpr_p && innermost_code != cdk_function)"}, {"sha": "7d0ac3582e4820d56a2e968df3e63f75ad99bf2d", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -210,7 +210,9 @@ enum sanitize_code {\n   SANITIZE_SHIFT = 1 << 2,\n   SANITIZE_DIVIDE = 1 << 3,\n   SANITIZE_UNREACHABLE = 1 << 4,\n+  SANITIZE_VLA = 1 << 5,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n+\t\t       | SANITIZE_VLA\n };\n \n /* flag_vtable_verify initialization levels. */"}, {"sha": "4db20f038d94a1398950b161c2275e3af073183f", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -1444,6 +1444,7 @@ common_handle_option (struct gcc_options *opts,\n \t      { \"undefined\", SANITIZE_UNDEFINED, sizeof \"undefined\" - 1 },\n \t      { \"unreachable\", SANITIZE_UNREACHABLE,\n \t\tsizeof \"unreachable\" - 1 },\n+\t      { \"vla-bound\", SANITIZE_VLA, sizeof \"vla-bound\" - 1 },\n \t      { NULL, 0, 0 }\n \t    };\n \t    const char *comma;"}, {"sha": "c7c780929b81cdf7833cc6e2801e5eb07f3933fb", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -297,3 +297,7 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE,\n \t\t      \"__ubsan_handle_builtin_unreachable\",\n \t\t      BT_FN_VOID_PTR,\n \t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE,\n+\t\t      \"__ubsan_handle_vla_bound_not_positive\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NOTHROW_LEAF_LIST)"}, {"sha": "bf66f303452a93a6ac3c83caa035e9c3a975ffa9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -1,3 +1,11 @@\n+2013-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/ubsan/cxx1y-vla.C: New test.\n+\t* c-c++-common/ubsan/vla-3.c: New test.\n+\t* c-c++-common/ubsan/vla-2.c: New test.\n+\t* c-c++-common/ubsan/vla-4.c: New test.\n+\t* c-c++-common/ubsan/vla-1.c: New test.\n+\n 2013-11-02  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n \n \t* gcc.dg/vmx/vec-set.c: New."}, {"sha": "6c1d81e9d22022041afe1099fcd6880e28f73ebd", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-1.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=vla-bound -w\" } */\n+\n+static int\n+bar (void)\n+{\n+  return -42;\n+}\n+\n+typedef long int V;\n+int\n+main (void)\n+{\n+  int x = -1;\n+  double di = -3.2;\n+  V v = -666;\n+\n+  int a[x];\n+  int aa[x][x];\n+  int aaa[x][x][x];\n+  int b[x - 4];\n+  int c[(int) di];\n+  int d[1 + x];\n+  int e[1 ? x : -1];\n+  int f[++x];\n+  int g[(signed char) --x];\n+  int h[(++x, --x, x)];\n+  int i[v];\n+  int j[bar ()];\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -5(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -3(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value 0(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value 0(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -1(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -666(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*variable length array bound evaluates to non-positive value -42(\\n|\\r\\n|\\r)\" } */"}, {"sha": "2fbeb7113b8ff22f876eb68d1a6cb0d657851d5c", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=vla-bound -w\" } */\n+\n+int\n+main (void)\n+{\n+  const int t = 0;\n+  struct s {\n+    int x;\n+    /* Don't instrument this one.  */\n+    int g[t];\n+  };\n+\n+  return 0;\n+}"}, {"sha": "20dd38b79a7701d918051308656ffc0782d6f54e", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=vla-bound -w\" } */\n+\n+/* Don't instrument the arrays here.  */\n+int\n+foo (int n, int a[])\n+{\n+  return a[n - 1];\n+}\n+\n+int\n+main (void)\n+{\n+  int a[6] = { };\n+  return foo (3, a);\n+}"}, {"sha": "3f7dd1de50ccebf66944cd89a6f50bfc42de36a6", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=vla-bound\" } */\n+\n+int\n+main (void)\n+{\n+  int x = 1;\n+  /* Check that the size of an array is evaluated only once.  */\n+  int a[++x];\n+  if (x != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "350db3f34731f0679f7fa57108305c0f1db00955", "filename": "gcc/testsuite/g++.dg/ubsan/cxx1y-vla.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b906f4ca813779c4df4a9449700e8f52022f757f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C?ref=b906f4ca813779c4df4a9449700e8f52022f757f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=vla-bound -w -std=c++1y\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+int\n+main (void)\n+{\n+  int y = -18;\n+  int a[y];\n+  return 0;\n+}\n+\n+/* { dg-output \"terminate called after throwing an instance\" } */"}]}