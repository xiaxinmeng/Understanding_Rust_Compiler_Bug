{"sha": "784de5292c34e287c848b382b431599b818ea76e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0ZGU1MjkyYzM0ZTI4N2M4NDhiMzgyYjQzMTU5OWI4MThlYTc2ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T07:34:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T07:34:26Z"}, "message": "c++: Fix up C++23 [] <...> requires primary -> type {} parsing [PR99850]\n\nThe requires clause parsing has code to suggest users wrapping\nnon-primary expressions in (), so if it e.g. parses a primary expression\nand sees it is followed by ++, --, ., ( or -> among other things it\nwill try to reparse it as assignment expression or what and if that works\nsuggests wrapping it inside of parens.\nWhen it is requires-clause that is after <typename T> etc. it already\nhas an exception from that as ( can occur in valid C++20 expression there\n- starting the parameters of the lambda.\nIn C++23 another case can occur, as the parameters with the ()s can be\nomitted, requires C can be followed immediately by -> which starts a\ntrailing return type.  Even in that case, we don't want to parse that\nas C->...\n\n2021-04-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99850\n\t* parser.c (cp_parser_constraint_requires_parens) <case CPP_DEREF>:\n\tIf lambda_p, return pce_ok instead of pce_maybe_postfix.\n\n\t* g++.dg/cpp23/lambda-specifiers2.C: New test.", "tree": {"sha": "3dc8b374403f140ce4b8a6155a98876e0d6c7cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc8b374403f140ce4b8a6155a98876e0d6c7cc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/784de5292c34e287c848b382b431599b818ea76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784de5292c34e287c848b382b431599b818ea76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784de5292c34e287c848b382b431599b818ea76e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784de5292c34e287c848b382b431599b818ea76e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20eb7a1891cfd7fa85295a236cebe0322d041edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20eb7a1891cfd7fa85295a236cebe0322d041edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20eb7a1891cfd7fa85295a236cebe0322d041edd"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "dfc9b8251a7e0b3ae36b957dba597ca7fd6327fd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784de5292c34e287c848b382b431599b818ea76e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784de5292c34e287c848b382b431599b818ea76e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=784de5292c34e287c848b382b431599b818ea76e", "patch": "@@ -28530,7 +28530,20 @@ cp_parser_constraint_requires_parens (cp_parser *parser, bool lambda_p)\n       case CPP_PLUS_PLUS:\n       case CPP_MINUS_MINUS:\n       case CPP_DOT:\n+\t/* Unenclosed postfix operator.  */\n+\treturn pce_maybe_postfix;\n+\n       case CPP_DEREF:\n+\t/* A primary constraint that precedes the lambda-declarator of a\n+\t   lambda expression is followed by trailing return type.\n+\n+\t      []<typename T> requires C -> void {}\n+\n+\t   Don't try to re-parse this as a postfix expression in\n+\t   C++23 and later.  In C++20 ( needs to come in between but we\n+\t   allow it to be omitted with pedwarn.  */\n+\tif (lambda_p)\n+\t  return pce_ok;\n \t/* Unenclosed postfix operator.  */\n \treturn pce_maybe_postfix;\n    }"}, {"sha": "0cc69bebc64f742ed0fcd177be07463ee8edca7c", "filename": "gcc/testsuite/g++.dg/cpp23/lambda-specifiers2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784de5292c34e287c848b382b431599b818ea76e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-specifiers2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784de5292c34e287c848b382b431599b818ea76e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-specifiers2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-specifiers2.C?ref=784de5292c34e287c848b382b431599b818ea76e", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/99850\n+// P1102R2 - Down with ()!\n+// { dg-do compile { target c++23 } }\n+\n+auto l = []<auto> requires true -> void {};\n+template <typename...> concept C = true;\n+auto m = []<typename... Ts> requires (C<Ts> && ...) -> void {};"}]}