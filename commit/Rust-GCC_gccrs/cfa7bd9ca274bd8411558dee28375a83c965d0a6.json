{"sha": "cfa7bd9ca274bd8411558dee28375a83c965d0a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhN2JkOWNhMjc0YmQ4NDExNTU4ZGVlMjgzNzVhODNjOTY1ZDBhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-21T07:22:22Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-21T07:22:22Z"}, "message": "libgcc2.h (LIBGCC2_HAS_SF_MODE): New macro.\n\n\t* libgcc2.h (LIBGCC2_HAS_SF_MODE): New macro.\n\t(LIBGCC2_HAS_DF_MODE, LIBGCC2_HAS_TF_MODE, LIBGCC2_HAS_XF_MODE): Make\n\tthe defaults false if BITS_PER_UNIT != 8.\n\t(SFtype, SCtype, __fixsfdi, __floatdisf, __fixunssfSI, __fixunssfDI)\n\t(__powisf2, __divsc3, __mulsc3): Guard with LIBGCC2_HAS_SF_MODE rather\n\tthan BITS_PER_UNIT != 8.\n\t(L_fixdfdi, L_fixsfdi, L_fixtfdi, L_fixunsdfdi, L_fixunsdfsi)\n\t(L_fixunssfdi, L_fixunssfsi, L_fixunstfdi, L_fixunsxfdi, L_fixunsxfsi)\n\t(L_fixxfdi, L_floatdidf, L_floatdisf, L_floatditf, L_floatdixf): Remove\n\t#undefs.\n\t* libgcc2.c (__fixunssfDI, __fixsfdi, __floatdisf, __fixunssfSI)\n\t(__powisf2, __divsc3, __mulsc3): Guard with LIBGCC2_HAS_SF_MODE.\n\nFrom-SVN: r96778", "tree": {"sha": "a192465141831679fb95155b61b480017146fa1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a192465141831679fb95155b61b480017146fa1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfa7bd9ca274bd8411558dee28375a83c965d0a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa7bd9ca274bd8411558dee28375a83c965d0a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa7bd9ca274bd8411558dee28375a83c965d0a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa7bd9ca274bd8411558dee28375a83c965d0a6/comments", "author": null, "committer": null, "parents": [{"sha": "90ec750dbf67872ce3076fceaf3b8df570c75c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ec750dbf67872ce3076fceaf3b8df570c75c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ec750dbf67872ce3076fceaf3b8df570c75c45"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "ec5f53a84f80c268701f66cf251cd40305497966", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa7bd9ca274bd8411558dee28375a83c965d0a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa7bd9ca274bd8411558dee28375a83c965d0a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfa7bd9ca274bd8411558dee28375a83c965d0a6", "patch": "@@ -1,3 +1,18 @@\n+2005-03-21  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* libgcc2.h (LIBGCC2_HAS_SF_MODE): New macro.\n+\t(LIBGCC2_HAS_DF_MODE, LIBGCC2_HAS_TF_MODE, LIBGCC2_HAS_XF_MODE): Make\n+\tthe defaults false if BITS_PER_UNIT != 8.\n+\t(SFtype, SCtype, __fixsfdi, __floatdisf, __fixunssfSI, __fixunssfDI)\n+\t(__powisf2, __divsc3, __mulsc3): Guard with LIBGCC2_HAS_SF_MODE rather\n+\tthan BITS_PER_UNIT != 8.\n+\t(L_fixdfdi, L_fixsfdi, L_fixtfdi, L_fixunsdfdi, L_fixunsdfsi)\n+\t(L_fixunssfdi, L_fixunssfsi, L_fixunstfdi, L_fixunsxfdi, L_fixunsxfsi)\n+\t(L_fixxfdi, L_floatdidf, L_floatdisf, L_floatditf, L_floatdixf): Remove\n+\t#undefs.\n+\t* libgcc2.c (__fixunssfDI, __fixsfdi, __floatdisf, __fixunssfSI)\n+\t(__powisf2, __divsc3, __mulsc3): Guard with LIBGCC2_HAS_SF_MODE.\n+\n 2005-03-20  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/20539"}, {"sha": "c8f6e51b043e67118d4f92b148eed5c5a06332f0", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa7bd9ca274bd8411558dee28375a83c965d0a6/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa7bd9ca274bd8411558dee28375a83c965d0a6/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=cfa7bd9ca274bd8411558dee28375a83c965d0a6", "patch": "@@ -1256,7 +1256,7 @@ __fixdfdi (DFtype a)\n }\n #endif\n \n-#ifdef L_fixunssfdi\n+#if defined(L_fixunssfdi) && LIBGCC2_HAS_SF_MODE\n DWtype\n __fixunssfDI (SFtype a)\n {\n@@ -1320,7 +1320,7 @@ __fixunssfDI (SFtype a)\n }\n #endif\n \n-#ifdef L_fixsfdi\n+#if defined(L_fixsfdi) && LIBGCC2_HAS_SF_MODE\n DWtype\n __fixsfdi (SFtype a)\n {\n@@ -1363,7 +1363,7 @@ __floatdidf (DWtype u)\n }\n #endif\n \n-#ifdef L_floatdisf\n+#if defined(L_floatdisf) && LIBGCC2_HAS_SF_MODE\n #define DI_SIZE (W_TYPE_SIZE * 2)\n #define SF_SIZE FLT_MANT_DIG\n \n@@ -1495,7 +1495,7 @@ __fixunsdfSI (DFtype a)\n }\n #endif\n \n-#ifdef L_fixunssfsi\n+#if defined(L_fixunssfsi) && LIBGCC2_HAS_SF_MODE\n /* Reenable the normal types, in case limits.h needs them.  */\n #undef char\n #undef short\n@@ -1520,7 +1520,7 @@ __fixunssfSI (SFtype a)\n /* Integer power helper used from __builtin_powi for non-constant\n    exponents.  */\n \n-#if defined(L_powisf2) \\\n+#if (defined(L_powisf2) && LIBGCC2_HAS_SF_MODE) \\\n     || (defined(L_powidf2) && LIBGCC2_HAS_DF_MODE) \\\n     || (defined(L_powixf2) && LIBGCC2_HAS_XF_MODE) \\\n     || (defined(L_powitf2) && LIBGCC2_HAS_TF_MODE)\n@@ -1554,7 +1554,7 @@ NAME (TYPE x, Wtype m)\n \n #endif\n \f\n-#if defined(L_mulsc3) || defined(L_divsc3) \\\n+#if ((defined(L_mulsc3) || defined(L_divsc3)) && LIBGCC2_HAS_SF_MODE) \\\n     || ((defined(L_muldc3) || defined(L_divdc3)) && LIBGCC2_HAS_DF_MODE) \\\n     || ((defined(L_mulxc3) || defined(L_divxc3)) && LIBGCC2_HAS_XF_MODE) \\\n     || ((defined(L_multc3) || defined(L_divtc3)) && LIBGCC2_HAS_TF_MODE)"}, {"sha": "11444ed9e4538a70a0ea0963f8ff953cefe385c1", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfa7bd9ca274bd8411558dee28375a83c965d0a6/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfa7bd9ca274bd8411558dee28375a83c965d0a6/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=cfa7bd9ca274bd8411558dee28375a83c965d0a6", "patch": "@@ -58,17 +58,25 @@ extern short int __get_eh_table_version (struct exception_descriptor *);\n #define LIBGCC2_LONG_DOUBLE_TYPE_SIZE LONG_DOUBLE_TYPE_SIZE\n #endif\n \n+#ifndef LIBGCC2_HAS_SF_MODE\n+#define LIBGCC2_HAS_SF_MODE (BITS_PER_UNIT == 8)\n+#endif\n+\n #ifndef LIBGCC2_HAS_DF_MODE\n #define LIBGCC2_HAS_DF_MODE \\\n-  (LIBGCC2_DOUBLE_TYPE_SIZE == 64 || LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64)\n+  (BITS_PER_UNIT == 8 \\\n+   && (LIBGCC2_DOUBLE_TYPE_SIZE == 64 \\\n+       || LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64))\n #endif\n \n #ifndef LIBGCC2_HAS_XF_MODE\n-#define LIBGCC2_HAS_XF_MODE (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n+#define LIBGCC2_HAS_XF_MODE \\\n+  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 80)\n #endif\n \n #ifndef LIBGCC2_HAS_TF_MODE\n-#define LIBGCC2_HAS_TF_MODE (LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n+#define LIBGCC2_HAS_TF_MODE \\\n+  (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n #endif\n \n #ifndef MIN_UNITS_PER_WORD\n@@ -104,11 +112,10 @@ typedef unsigned int UTItype\t__attribute__ ((mode (TI)));\n #endif\n #endif\n \n-#if BITS_PER_UNIT == 8\n-\n+#if LIBGCC2_HAS_SF_MODE\n typedef \tfloat SFtype\t__attribute__ ((mode (SF)));\n typedef _Complex float SCtype\t__attribute__ ((mode (SC)));\n-\n+#endif\n #if LIBGCC2_HAS_DF_MODE\n typedef\t\tfloat DFtype\t__attribute__ ((mode (DF)));\n typedef _Complex float DCtype\t__attribute__ ((mode (DC)));\n@@ -122,29 +129,6 @@ typedef\t\tfloat TFtype\t__attribute__ ((mode (TF)));\n typedef _Complex float TCtype\t__attribute__ ((mode (TC)));\n #endif\n \n-#else /* BITS_PER_UNIT != 8 */\n-\n-/* On dsp's there are usually qf/hf/tqf modes used instead of the above.\n-   For now we don't support them in libgcc2.c.  */\n-\n-#undef L_fixdfdi\n-#undef L_fixsfdi\n-#undef L_fixtfdi\n-#undef L_fixunsdfdi\n-#undef L_fixunsdfsi\n-#undef L_fixunssfdi\n-#undef L_fixunssfsi\n-#undef L_fixunstfdi\n-#undef L_fixunsxfdi\n-#undef L_fixunsxfsi\n-#undef L_fixxfdi\n-#undef L_floatdidf\n-#undef L_floatdisf\n-#undef L_floatditf\n-#undef L_floatdixf\n-\n-#endif /* BITS_PER_UNIT != 8 */\n-\n typedef int word_type __attribute__ ((mode (__word__)));\n \n /* Make sure that we don't accidentally use any normal C language built-in\n@@ -330,15 +314,15 @@ extern SItype __mulvsi3 (SItype, SItype);\n extern SItype __negvsi2 (SItype);\n #endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n \n-#if BITS_PER_UNIT == 8\n+#if LIBGCC2_HAS_SF_MODE\n extern DWtype __fixsfdi (SFtype);\n extern SFtype __floatdisf (DWtype);\n extern UWtype __fixunssfSI (SFtype);\n extern DWtype __fixunssfDI (SFtype);\n extern SFtype __powisf2 (SFtype, Wtype);\n extern SCtype __divsc3 (SFtype, SFtype, SFtype, SFtype);\n extern SCtype __mulsc3 (SFtype, SFtype, SFtype, SFtype);\n-\n+#endif\n #if LIBGCC2_HAS_DF_MODE\n extern DWtype __fixdfdi (DFtype);\n extern DFtype __floatdidf (DWtype);\n@@ -367,7 +351,6 @@ extern TFtype __powitf2 (TFtype, Wtype);\n extern TCtype __divtc3 (TFtype, TFtype, TFtype, TFtype);\n extern TCtype __multc3 (TFtype, TFtype, TFtype, TFtype);\n #endif\n-#endif /* BITS_PER_UNIT == 8 */\n \n /* DWstructs are pairs of Wtype values in the order determined by\n    LIBGCC2_WORDS_BIG_ENDIAN.  */"}]}