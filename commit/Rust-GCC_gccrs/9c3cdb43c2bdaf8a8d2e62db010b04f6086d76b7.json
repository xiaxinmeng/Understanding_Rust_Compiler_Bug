{"sha": "9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzY2RiNDNjMmJkYWY4YThkMmU2MmRiMDEwYjA0ZjYwODZkNzZiNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-15T00:27:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-15T00:27:40Z"}, "message": "tree-nested: Fix handling of *reduction clauses with C array sections [PR93566]\n\ntree-nested.c didn't handle C array sections in {,task_,in_}reduction clauses.\n\n2020-03-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/93566\n\t* tree-nested.c (convert_nonlocal_omp_clauses,\n\tconvert_local_omp_clauses): Handle {,in_,task_}reduction clauses\n\twith C/C++ array sections.\n\n\t* testsuite/libgomp.c/pr93566.c: New test.", "tree": {"sha": "59bbb8a6a2892d56de4577ba28435490ab0b4479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59bbb8a6a2892d56de4577ba28435490ab0b4479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89769d70af2362bbae1f93800ffc8b74f553acfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89769d70af2362bbae1f93800ffc8b74f553acfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89769d70af2362bbae1f93800ffc8b74f553acfd"}], "stats": {"total": 162, "additions": 155, "deletions": 7}, "files": [{"sha": "883e13fa7d77d1466a7f6e0580ccd8ffcd9b9355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "patch": "@@ -1,3 +1,10 @@\n+2020-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/93566\n+\t* tree-nested.c (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Handle {,in_,task_}reduction clauses\n+\twith C/C++ array sections.\n+\n 2020-03-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89229"}, {"sha": "6f696da5332bb531b05c50f9e60f88ded89c907a", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "patch": "@@ -1188,7 +1188,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n {\n   struct nesting_info *const info = (struct nesting_info *) wi->info;\n   bool need_chain = false, need_stmts = false;\n-  tree clause, decl;\n+  tree clause, decl, *pdecl;\n   int dummy;\n   bitmap new_suppress;\n \n@@ -1197,13 +1197,23 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \n   for (clause = *pclauses; clause ; clause = OMP_CLAUSE_CHAIN (clause))\n     {\n+      pdecl = NULL;\n       switch (OMP_CLAUSE_CODE (clause))\n \t{\n \tcase OMP_CLAUSE_REDUCTION:\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n \t  if (OMP_CLAUSE_REDUCTION_PLACEHOLDER (clause))\n \t    need_stmts = true;\n+\t  if (TREE_CODE (OMP_CLAUSE_DECL (clause)) == MEM_REF)\n+\t    {\n+\t      pdecl = &TREE_OPERAND (OMP_CLAUSE_DECL (clause), 0);\n+\t      if (TREE_CODE (*pdecl) == POINTER_PLUS_EXPR)\n+\t\tpdecl = &TREE_OPERAND (*pdecl, 0);\n+\t      if (TREE_CODE (*pdecl) == INDIRECT_REF\n+\t\t  || TREE_CODE (*pdecl) == ADDR_EXPR)\n+\t\tpdecl = &TREE_OPERAND (*pdecl, 0);\n+\t    }\n \t  goto do_decl_clause;\n \n \tcase OMP_CLAUSE_LASTPRIVATE:\n@@ -1230,7 +1240,9 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tdo_decl_clause:\n-\t  decl = OMP_CLAUSE_DECL (clause);\n+\t  if (pdecl == NULL)\n+\t    pdecl = &OMP_CLAUSE_DECL (clause);\n+\t  decl = *pdecl;\n \t  if (VAR_P (decl)\n \t      && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n \t    break;\n@@ -1239,7 +1251,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \t      if (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_SHARED)\n \t\tOMP_CLAUSE_SHARED_READONLY (clause) = 0;\n \t      bitmap_set_bit (new_suppress, DECL_UID (decl));\n-\t      OMP_CLAUSE_DECL (clause) = get_nonlocal_debug_decl (info, decl);\n+\t      *pdecl = get_nonlocal_debug_decl (info, decl);\n \t      if (OMP_CLAUSE_CODE (clause) != OMP_CLAUSE_PRIVATE)\n \t\tneed_chain = true;\n \t    }\n@@ -1909,7 +1921,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n {\n   struct nesting_info *const info = (struct nesting_info *) wi->info;\n   bool need_frame = false, need_stmts = false;\n-  tree clause, decl;\n+  tree clause, decl, *pdecl;\n   int dummy;\n   bitmap new_suppress;\n \n@@ -1918,13 +1930,23 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \n   for (clause = *pclauses; clause ; clause = OMP_CLAUSE_CHAIN (clause))\n     {\n+      pdecl = NULL;\n       switch (OMP_CLAUSE_CODE (clause))\n \t{\n \tcase OMP_CLAUSE_REDUCTION:\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \tcase OMP_CLAUSE_TASK_REDUCTION:\n \t  if (OMP_CLAUSE_REDUCTION_PLACEHOLDER (clause))\n \t    need_stmts = true;\n+\t  if (TREE_CODE (OMP_CLAUSE_DECL (clause)) == MEM_REF)\n+\t    {\n+\t      pdecl = &TREE_OPERAND (OMP_CLAUSE_DECL (clause), 0);\n+\t      if (TREE_CODE (*pdecl) == POINTER_PLUS_EXPR)\n+\t\tpdecl = &TREE_OPERAND (*pdecl, 0);\n+\t      if (TREE_CODE (*pdecl) == INDIRECT_REF\n+\t\t  || TREE_CODE (*pdecl) == ADDR_EXPR)\n+\t\tpdecl = &TREE_OPERAND (*pdecl, 0);\n+\t    }\n \t  goto do_decl_clause;\n \n \tcase OMP_CLAUSE_LASTPRIVATE:\n@@ -1951,7 +1973,9 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n \tcase OMP_CLAUSE_IS_DEVICE_PTR:\n \tdo_decl_clause:\n-\t  decl = OMP_CLAUSE_DECL (clause);\n+\t  if (pdecl == NULL)\n+\t    pdecl = &OMP_CLAUSE_DECL (clause);\n+\t  decl = *pdecl;\n \t  if (VAR_P (decl)\n \t      && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n \t    break;\n@@ -1964,8 +1988,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \t\t  if (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_SHARED)\n \t\t    OMP_CLAUSE_SHARED_READONLY (clause) = 0;\n \t\t  bitmap_set_bit (new_suppress, DECL_UID (decl));\n-\t\t  OMP_CLAUSE_DECL (clause)\n-\t\t    = get_local_debug_decl (info, decl, field);\n+\t\t  *pdecl = get_local_debug_decl (info, decl, field);\n \t\t  need_frame = true;\n \t\t}\n \t    }"}, {"sha": "5882c8a13f3fef5b59f203b8b74a43da1167c50c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "patch": "@@ -1,3 +1,8 @@\n+2020-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/93566\n+\t* testsuite/libgomp.c/pr93566.c: New test.\n+\n 2020-02-21  Frederik Harwath  <frederik@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-fortran/acc_get_property.f90: Adapt to"}, {"sha": "3334bd571f674dabe7e14a601654f2d8098db3c1", "filename": "libgomp/testsuite/libgomp.c/pr93566.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr93566.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr93566.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr93566.c?ref=9c3cdb43c2bdaf8a8d2e62db010b04f6086d76b7", "patch": "@@ -0,0 +1,113 @@\n+/* PR middle-end/93566 */\n+/* { dg-additional-options \"-std=c99\" } */\n+\n+extern void abort (void);\n+\n+void\n+foo (int *x)\n+{\n+  void nest (void) {\n+    #pragma omp parallel for reduction(+:x[:10])\n+    for (int i = 0; i < 1024; i++)\n+      for (int j = 0; j < 10; j++)\n+\tx[j] += j * i;\n+  }\n+  nest ();\n+  for (int i = 0; i < 10; i++)\n+    if (x[i] != 1023 * 1024 / 2 * i)\n+      abort ();\n+}\n+\n+void\n+bar (void)\n+{\n+  int x[10] = {};\n+  void nest (void) {\n+    #pragma omp parallel for reduction(+:x[:10])\n+    for (int i = 0; i < 1024; i++)\n+      for (int j = 0; j < 10; j++)\n+\tx[j] += j * i;\n+  }\n+  nest ();\n+  for (int i = 0; i < 10; i++)\n+    if (x[i] != 1023 * 1024 / 2 * i)\n+      abort ();\n+}\n+\n+void\n+baz (void)\n+{\n+  int x[10] = {};\n+  void nest (void) {\n+    #pragma omp parallel for reduction(+:x[2:5])\n+    for (int i = 0; i < 1024; i++)\n+      for (int j = 2; j < 7; j++)\n+\tx[j] += j * i;\n+  }\n+  nest ();\n+  for (int i = 2; i < 7; i++)\n+    if (x[i] != 1023 * 1024 / 2 * i)\n+      abort ();\n+}\n+\n+void\n+qux (int *x)\n+{\n+  void nest (void) { x++; }\n+  nest ();\n+  #pragma omp parallel for reduction(+:x[:9])\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 0; j < 9; j++)\n+      x[j] += j * i;\n+  nest ();\n+  for (int i = 0; i < 9; i++)\n+    if (x[i - 1] != 1023 * 1024 / 2 * i)\n+      abort ();\n+}\n+\n+void\n+quux (void)\n+{\n+  int x[10];\n+  void nest (void) { for (int i = 0; i < 10; i++) x[i] = 0; }\n+  int nest2 (int i) { return x[i]; }\n+  nest ();\n+  #pragma omp parallel for reduction(+:x[:7])\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 0; j < 7; j++)\n+      x[j] += j * i;\n+  for (int i = 0; i < 7; i++)\n+    if (nest2 (i) != 1023 * 1024 / 2 * i)\n+      abort ();\n+}\n+\n+void\n+corge (void)\n+{\n+  int x[10];\n+  void nest (void) { for (int i = 0; i < 10; i++) x[i] = 0; }\n+  int nest2 (int i) { return x[i]; }\n+  nest ();\n+  #pragma omp parallel for reduction(+:x[2:4])\n+  for (int i = 0; i < 1024; i++)\n+    for (int j = 2; j < 6; j++)\n+      x[j] += j * i;\n+  for (int i = 2; i < 6; i++)\n+    if (nest2 (i) != 1023 * 1024 / 2 * i)\n+      abort ();\n+}\n+\n+int\n+main ()\n+{\n+  int a[10] = {};\n+  foo (a);\n+  bar ();\n+  baz ();\n+  for (int i = 0; i < 10; i++)\n+    a[i] = 0;\n+  qux (a);\n+  quux ();\n+  corge ();\n+  return 0;\n+}"}]}