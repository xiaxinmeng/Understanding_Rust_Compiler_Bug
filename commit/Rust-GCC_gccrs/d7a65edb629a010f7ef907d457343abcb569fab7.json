{"sha": "d7a65edb629a010f7ef907d457343abcb569fab7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhNjVlZGI2MjlhMDEwZjdlZjkwN2Q0NTczNDNhYmNiNTY5ZmFiNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-04-16T13:39:22Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-04-16T13:39:22Z"}, "message": "List valid pairs for new and delete operators.\n\n\tPR c++/94314\n\t* cgraphclones.c (set_new_clone_decl_and_node_flags): Drop\n\tDECL_IS_REPLACEABLE_OPERATOR during cloning.\n\t* tree-ssa-dce.c (valid_new_delete_pair_p): New function.\n\t(propagate_necessity): Check operator names.\n\n\tPR c++/94314\n\t* g++.dg/pr94314.C: Do not use dg-additional-options\n\tand remove not needed stdio.h include.\n\t* g++.dg/pr94314-2.C: Likewise.\n\t* g++.dg/pr94314-3.C: Likewise.\n\t* g++.dg/pr94314-4.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>", "tree": {"sha": "f426b5eb8312ac0458ecf0ae256f7d8b65f71af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f426b5eb8312ac0458ecf0ae256f7d8b65f71af0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7a65edb629a010f7ef907d457343abcb569fab7", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl6YYAoACgkQTcGC3A+n\nN4WZiAgAlJ98hSF+lpkve0SPngpuDpldksYVvJNOJBJvh07WkKRt0CSTFAvxsmBt\nN+yvlunD//wSiBP0cp/aPg4YnenFB2C9mb2k9S3834axjBYQExwb3J+iR4xriXY8\n7T93SYs2EYlagEQ1RxPykhkVIVF4jPKMTi+FqhsxFrWpIpMwqnI9JlnPN9sVb8m+\nPCwMS4hbk6P/WvOQeTbCfi9otar8Ki9c3BV7BpoVGDeDrC7776mvT/tdcedMSB2e\n91q5D+GvfQfRnJHHoRzjk81qF2COEUfiLB4zhGhVeSlNlInLQIWYRWThbOBA1iDO\nrNEXq83YOEKB9/QS0Z+/GkLYvkjWxg==\n=QWMM\n-----END PGP SIGNATURE-----", "payload": "tree f426b5eb8312ac0458ecf0ae256f7d8b65f71af0\nparent effcb4181e143bc390286a489ff849768a49f6af\nauthor Martin Liska <mliska@suse.cz> 1587044362 +0200\ncommitter Martin Liska <mliska@suse.cz> 1587044362 +0200\n\nList valid pairs for new and delete operators.\n\n\tPR c++/94314\n\t* cgraphclones.c (set_new_clone_decl_and_node_flags): Drop\n\tDECL_IS_REPLACEABLE_OPERATOR during cloning.\n\t* tree-ssa-dce.c (valid_new_delete_pair_p): New function.\n\t(propagate_necessity): Check operator names.\n\n\tPR c++/94314\n\t* g++.dg/pr94314.C: Do not use dg-additional-options\n\tand remove not needed stdio.h include.\n\t* g++.dg/pr94314-2.C: Likewise.\n\t* g++.dg/pr94314-3.C: Likewise.\n\t* g++.dg/pr94314-4.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a65edb629a010f7ef907d457343abcb569fab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a65edb629a010f7ef907d457343abcb569fab7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a65edb629a010f7ef907d457343abcb569fab7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effcb4181e143bc390286a489ff849768a49f6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/effcb4181e143bc390286a489ff849768a49f6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/effcb4181e143bc390286a489ff849768a49f6af"}], "stats": {"total": 164, "additions": 142, "deletions": 22}, "files": [{"sha": "9e499ec9c86c800f506b0327ce4e6cb3e4bfc357", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -1,3 +1,12 @@\n+2020-04-16  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94314\n+\t* cgraphclones.c (set_new_clone_decl_and_node_flags): Drop\n+\tDECL_IS_REPLACEABLE_OPERATOR during cloning.\n+\t* tree-ssa-dce.c (valid_new_delete_pair_p): New function.\n+\t(propagate_necessity): Check operator names.\n+\n 2020-04-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/94605"}, {"sha": "8f541a28b6ec5ca922dbbc26d0e3de9ffb87b88f", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -165,6 +165,7 @@ set_new_clone_decl_and_node_flags (cgraph_node *new_node)\n   DECL_STATIC_DESTRUCTOR (new_node->decl) = 0;\n   DECL_SET_IS_OPERATOR_NEW (new_node->decl, 0);\n   DECL_SET_IS_OPERATOR_DELETE (new_node->decl, 0);\n+  DECL_IS_REPLACEABLE_OPERATOR (new_node->decl) = 0;\n \n   new_node->externally_visible = 0;\n   new_node->local = 1;\n@@ -1030,6 +1031,7 @@ cgraph_node::create_version_clone_with_body\n   DECL_STATIC_DESTRUCTOR (new_decl) = 0;\n   DECL_SET_IS_OPERATOR_NEW (new_decl, 0);\n   DECL_SET_IS_OPERATOR_DELETE (new_decl, 0);\n+  DECL_IS_REPLACEABLE_OPERATOR (new_decl) = 0;\n \n   /* Create the new version's call-graph node.\n      and update the edges of the new node. */"}, {"sha": "94d2312022de30db844246c5e3b28d6727a46f93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -1,3 +1,13 @@\n+2020-04-16  Martin Liska  <mliska@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/94314\n+\t* g++.dg/pr94314.C: Do not use dg-additional-options\n+\tand remove not needed stdio.h include.\n+\t* g++.dg/pr94314-2.C: Likewise.\n+\t* g++.dg/pr94314-3.C: Likewise.\n+\t* g++.dg/pr94314-4.C: New test.\n+\n 2020-04-16  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94475"}, {"sha": "998ce6017673a3b2ce0ca4f6cd67b2cdac65b7b9", "filename": "gcc/testsuite/g++.dg/pr94314-2.C", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-2.C?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -1,9 +1,6 @@\n /* PR c++/94314.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-cddce-details\" } */\n-/* { dg-additional-options \"-fdelete-null-pointer-checks\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-O2 -fdump-tree-cddce-details -fdelete-null-pointer-checks\" } */\n \n struct A\n {"}, {"sha": "846a5d6a3d81e87846e838160d2d559e78d1ddd4", "filename": "gcc/testsuite/g++.dg/pr94314-3.C", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-3.C?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -1,9 +1,6 @@\n /* PR c++/94314.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 --param early-inlining-insns=100 -fdump-tree-cddce-details\" } */\n-/* { dg-additional-options \"-fdelete-null-pointer-checks\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-O2 --param early-inlining-insns=100 -fdump-tree-cddce-details -fdelete-null-pointer-checks\" } */\n \n volatile int idx;\n "}, {"sha": "d097f29d4ad33e879fd8aed05ec9af8d259555ff", "filename": "gcc/testsuite/g++.dg/pr94314-4.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314-4.C?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -0,0 +1,30 @@\n+/* PR c++/94314.  */\n+/* { dg-do run { target c++11 } } */\n+/* { dg-options \"-O2 -fdump-tree-cddce-details -fdelete-null-pointer-checks\" } */\n+\n+int count = 0;\n+\n+__attribute__((malloc, noinline)) void* operator new[](__SIZE_TYPE__ sz) {\n+  ++count;\n+  return ::operator new(sz);\n+}\n+\n+void operator delete[](void* ptr) noexcept {\n+  --count;\n+  ::operator delete(ptr);\n+}\n+\n+void operator delete[](void* ptr, __SIZE_TYPE__ sz) noexcept {\n+  --count;\n+  ::operator delete(ptr, sz);\n+}\n+\n+int main() {\n+  delete[] new int[1];\n+  if (count != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Deleting : operator delete\" \"cddce1\"} } */"}, {"sha": "4e5ae122e9fe1b870359b9021a5450532c11f0c1", "filename": "gcc/testsuite/g++.dg/pr94314.C", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr94314.C?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -1,9 +1,6 @@\n /* PR c++/94314.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-cddce-details\" } */\n-/* { dg-additional-options \"-fdelete-null-pointer-checks\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-O2 -fdump-tree-cddce-details -fdelete-null-pointer-checks\" } */\n \n struct A\n {"}, {"sha": "757cfad5b5e18da3c4b6ca75a19235c0a648bb40", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 88, "deletions": 10, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a65edb629a010f7ef907d457343abcb569fab7/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=d7a65edb629a010f7ef907d457343abcb569fab7", "patch": "@@ -646,6 +646,77 @@ degenerate_phi_p (gimple *phi)\n   return true;\n }\n \n+/* Return that NEW_CALL and DELETE_CALL are a valid pair of new\n+   and delete  operators.  */\n+\n+static bool\n+valid_new_delete_pair_p (gimple *new_call, gimple *delete_call)\n+{\n+  tree new_asm = DECL_ASSEMBLER_NAME (gimple_call_fndecl (new_call));\n+  tree delete_asm = DECL_ASSEMBLER_NAME (gimple_call_fndecl (delete_call));\n+  const char *new_name = IDENTIFIER_POINTER (new_asm);\n+  const char *delete_name = IDENTIFIER_POINTER (delete_asm);\n+  unsigned int new_len = IDENTIFIER_LENGTH (new_asm);\n+  unsigned int delete_len = IDENTIFIER_LENGTH (delete_asm);\n+\n+  if (new_len < 5 || delete_len < 6)\n+    return false;\n+  if (new_name[0] == '_')\n+    ++new_name, --new_len;\n+  if (new_name[0] == '_')\n+    ++new_name, --new_len;\n+  if (delete_name[0] == '_')\n+    ++delete_name, --delete_len;\n+  if (delete_name[0] == '_')\n+    ++delete_name, --delete_len;\n+  if (new_len < 4 || delete_len < 5)\n+    return false;\n+  /* *_len is now just the length after initial underscores.  */\n+  if (new_name[0] != 'Z' || new_name[1] != 'n')\n+    return false;\n+  if (delete_name[0] != 'Z' || delete_name[1] != 'd')\n+    return false;\n+  /* _Znw must match _Zdl, _Zna must match _Zda.  */\n+  if ((new_name[2] != 'w' || delete_name[2] != 'l')\n+      && (new_name[2] != 'a' || delete_name[2] != 'a'))\n+    return false;\n+  /* 'j', 'm' and 'y' correspond to size_t.  */\n+  if (new_name[3] != 'j' && new_name[3] != 'm' && new_name[3] != 'y')\n+    return false;\n+  if (delete_name[3] != 'P' || delete_name[4] != 'v')\n+    return false;\n+  if (new_len == 4\n+      || (new_len == 18 && !memcmp (new_name + 4, \"RKSt9nothrow_t\", 14)))\n+    {\n+      /* _ZnXY or _ZnXYRKSt9nothrow_t matches\n+\t _ZdXPv, _ZdXPvY and _ZdXPvRKSt9nothrow_t.  */\n+      if (delete_len == 5)\n+\treturn true;\n+      if (delete_len == 6 && delete_name[5] == new_name[3])\n+\treturn true;\n+      if (delete_len == 19 && !memcmp (delete_name + 5, \"RKSt9nothrow_t\", 14))\n+\treturn true;\n+    }\n+  else if ((new_len == 19 && !memcmp (new_name + 4, \"St11align_val_t\", 15))\n+\t   || (new_len == 33\n+\t       && !memcmp (new_name + 4, \"St11align_val_tRKSt9nothrow_t\", 29)))\n+    {\n+      /* _ZnXYSt11align_val_t or _ZnXYSt11align_val_tRKSt9nothrow_t matches\n+\t _ZdXPvSt11align_val_t or _ZdXPvYSt11align_val_t or  or\n+\t _ZdXPvSt11align_val_tRKSt9nothrow_t.  */\n+      if (delete_len == 20 && !memcmp (delete_name + 5, \"St11align_val_t\", 15))\n+\treturn true;\n+      if (delete_len == 21\n+\t  && delete_name[5] == new_name[3]\n+\t  && !memcmp (delete_name + 6, \"St11align_val_t\", 15))\n+\treturn true;\n+      if (delete_len == 34\n+\t  && !memcmp (delete_name + 5, \"St11align_val_tRKSt9nothrow_t\", 29))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* Propagate necessity using the operands of necessary statements.\n    Process the uses on each statement in the worklist, and add all\n    feeding statements which contribute to the calculation of this\n@@ -824,16 +895,23 @@ propagate_necessity (bool aggressive)\n \t\t\t   || DECL_FUNCTION_CODE (def_callee) == BUILT_IN_CALLOC))\n \t\t      || DECL_IS_REPLACEABLE_OPERATOR_NEW_P (def_callee)))\n \t\t{\n-\t\t  /* Delete operators can have alignment and (or) size as next\n-\t\t     arguments.  When being a SSA_NAME, they must be marked\n-\t\t     as necessary.  */\n-\t\t  if (is_delete_operator && gimple_call_num_args (stmt) >= 2)\n-\t\t    for (unsigned i = 1; i < gimple_call_num_args (stmt); i++)\n-\t\t      {\n-\t\t\ttree arg = gimple_call_arg (stmt, i);\n-\t\t\tif (TREE_CODE (arg) == SSA_NAME)\n-\t\t\t  mark_operand_necessary (arg);\n-\t\t      }\n+\t\t  if (is_delete_operator)\n+\t\t    {\n+\t\t      if (!valid_new_delete_pair_p (def_stmt, stmt))\n+\t\t\tmark_operand_necessary (gimple_call_arg (stmt, 0));\n+\n+\t\t      /* Delete operators can have alignment and (or) size\n+\t\t\t as next arguments.  When being a SSA_NAME, they\n+\t\t\t must be marked as necessary.  */\n+\t\t      if (gimple_call_num_args (stmt) >= 2)\n+\t\t\tfor (unsigned i = 1; i < gimple_call_num_args (stmt);\n+\t\t\t     i++)\n+\t\t\t  {\n+\t\t\t    tree arg = gimple_call_arg (stmt, i);\n+\t\t\t    if (TREE_CODE (arg) == SSA_NAME)\n+\t\t\t      mark_operand_necessary (arg);\n+\t\t\t  }\n+\t\t    }\n \n \t\t  continue;\n \t\t}"}]}