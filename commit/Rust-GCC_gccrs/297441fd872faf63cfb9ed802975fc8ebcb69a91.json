{"sha": "297441fd872faf63cfb9ed802975fc8ebcb69a91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk3NDQxZmQ4NzJmYWY2M2NmYjllZDgwMjk3NWZjOGViY2I2OWE5MQ==", "commit": {"author": {"name": "Dave Brolley", "email": "brolley@cygnus.com", "date": "1998-06-10T10:16:45Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1998-06-10T10:16:45Z"}, "message": "Integrate cpplib into the C++ front end.\n\n1998-06-10  Dave Brolley  <brolley@cygnus.com>\n\t* decl2.c (lang_decode_option): New argc/argv interface.\n\t* cp-tree.h (lang_decode_option): New argc/argv interface.\n\t* lang-specs.h (default_compilers): Only call cpp if -E, -M or -MM is\n\tspecified for cpplib-enabled compilers.\n\t* lex.c (lang_init): Don't check_newline for cpplib.\n\t(init_parse): Don't initialize cpplib here.\n\nFrom-SVN: r20408", "tree": {"sha": "1479e8d4df9e9fbfc920dc58163b8ba6e5e63673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1479e8d4df9e9fbfc920dc58163b8ba6e5e63673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/297441fd872faf63cfb9ed802975fc8ebcb69a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297441fd872faf63cfb9ed802975fc8ebcb69a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297441fd872faf63cfb9ed802975fc8ebcb69a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297441fd872faf63cfb9ed802975fc8ebcb69a91/comments", "author": null, "committer": null, "parents": [{"sha": "a0d85b7572a80c023a0eef537a8c94e6af280c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d85b7572a80c023a0eef537a8c94e6af280c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d85b7572a80c023a0eef537a8c94e6af280c51"}], "stats": {"total": 95, "additions": 82, "deletions": 13}, "files": [{"sha": "fc4dca71fbd318b6720e070b331508b4deb4cad8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=297441fd872faf63cfb9ed802975fc8ebcb69a91", "patch": "@@ -1,3 +1,12 @@\n+1998-06-10  Dave Brolley  <brolley@cygnus.com>\n+\n+\t* decl2.c (lang_decode_option): New argc/argv interface.\n+\t* cp-tree.h (lang_decode_option): New argc/argv interface.\n+\t* lang-specs.h (default_compilers): Only call cpp if -E, -M or -MM is\n+\tspecified for cpplib-enabled compilers.\n+\t* lex.c (lang_init): Don't check_newline for cpplib.\n+\t(init_parse): Don't initialize cpplib here.\n+\n 1998-06-10  Brendan Kehoe  <brendan@cygnus.com>\n \n \t* typeck.c (build_component_ref): Make sure FIELD has a lang_specific"}, {"sha": "3e118d91a5a5e33a4cb99a9e341e824860162259", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=297441fd872faf63cfb9ed802975fc8ebcb69a91", "patch": "@@ -2417,7 +2417,7 @@ extern void cat_namespace_levels                PROTO((void));\n \n /* in decl2.c */\n extern int flag_assume_nonnull_objects;\n-extern int lang_decode_option\t\t\tPROTO((char *));\n+extern int lang_decode_option\t\t\tPROTO((int, char **));\n extern tree grok_method_quals\t\t\tPROTO((tree, tree, tree));\n extern void warn_if_unknown_interface\t\tPROTO((tree));\n extern tree grok_x_components\t\t\tPROTO((tree, tree));"}, {"sha": "b4b78fc69ade03eadc9501061d36f7bc41d43f1e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=297441fd872faf63cfb9ed802975fc8ebcb69a91", "patch": "@@ -43,6 +43,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"dwarf2out.h\"\n #include \"dwarfout.h\"\n \n+#if USE_CPPLIB\n+#include \"cpplib.h\"\n+extern cpp_reader  parse_in;\n+extern cpp_options parse_options;\n+static int cpp_initialized;\n+#endif\n+\n static tree get_sentry PROTO((tree));\n static void mark_vtable_entries PROTO((tree));\n static void import_export_template PROTO((tree));\n@@ -492,13 +499,30 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n };\n \n /* Decode the string P as a language-specific option.\n-   Return 1 if it is recognized (and handle it);\n-   return 0 if not recognized.  */\n+   Return the number of strings consumed for a valid option.\n+   Otherwise return 0.  */\n \n int   \n-lang_decode_option (p)\n-     char *p;\n+lang_decode_option (argc, argv)\n+     int argc;\n+     char **argv;\n+\n {\n+  int strings_processed;\n+  char *p = argv[0];\n+#if USE_CPPLIB\n+  if (! cpp_initialized)\n+    {\n+      cpp_reader_init (&parse_in);\n+      parse_in.data = &parse_options;\n+      cpp_options_init (&parse_options);\n+      cpp_initialized = 1;\n+    }\n+  strings_processed = cpp_handle_option (&parse_in, argc, argv);\n+#else\n+  strings_processed = 0;\n+#endif /* ! USE_CPPLIB */\n+\n   if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n     flag_writable_strings = 1,\n     flag_this_is_variable = 1, flag_new_for_scope = 0;\n@@ -739,7 +763,7 @@ lang_decode_option (p)\n \n       else if (!strcmp (p, \"overloaded-virtual\"))\n \twarn_overloaded_virtual = setting;\n-      else return 0;\n+      else return strings_processed;\n     }\n   else if (!strcmp (p, \"-ansi\"))\n     flag_no_nonansi_builtin = 1, flag_ansi = 1,\n@@ -752,7 +776,7 @@ lang_decode_option (p)\n     spew_debug = 1;\n #endif\n   else\n-    return 0;\n+    return strings_processed;\n \n   return 1;\n }"}, {"sha": "88ac4d8873ec4e307d1d71a100b8ad8f921944d4", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=297441fd872faf63cfb9ed802975fc8ebcb69a91", "patch": "@@ -28,6 +28,43 @@ Boston, MA 02111-1307, USA.  */\n   {\".c++\", {\"@c++\"}},\n   {\".C\", {\"@c++\"}},\n   {\"@c++\",\n+#if USE_CPPLIB\n+   {\n+#define CPP_FOR_CXX \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n+\t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n+\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n+\t-undef -D__GNUC__=%v1 -D__GNUG__=%v1 -D__cplusplus -D__GNUC_MINOR__=%v2\\\n+\t%{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n+\t%{!fno-exceptions:-D__EXCEPTIONS}\\\n+        %{fhonor-std:-D__HONOR_STD} %{fnew-abi:-D__HONOR_STD}\\\n+        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}} %{trigraphs}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n+        %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\"\n+\n+     \"%{E:\"CPP_FOR_CXX\"}\"\n+     \"%{!E:%{M:\"CPP_FOR_CXX\"}\"\n+          \"%{!M:%{MM:\"CPP_FOR_CXX\"}\"\n+               \"%{!MM:cc1plus %i %1 %2\\\n+                            -lang-c++ %{nostdinc*} %{C} %{A*} %{I*} %{P} %I\\\n+                            -undef -D__GNUC__=%v1 -D__GNUG__=%v1 -D__cplusplus\\\n+                            -D__GNUC_MINOR__=%v2\\\n+                            %{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n+                            %{!fno-exceptions:-D__EXCEPTIONS}\\\n+                            %{fhonor-std:-D__HONOR_STD} %{fnew-abi:-D__HONOR_STD}\\\n+                            %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+                            %{trigraphs}\\\n+\t\t\t    %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n+\t\t\t    %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi}\\\n+                            %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n+\t\t\t    %{v:-version} %{pg:-p} %{p}\\\n+\t\t\t    %{f*} %{+e*} %{aux-info*}\\\n+\t\t\t    %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n+\t\t\t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}}|\\n\\\n+              %{!S:as %a %Y\\\n+\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n+                      %{!pipe:%g.s} %A\\n }}}}\"}},\n+#undef CPP_FOR_CXX\n+#else /* ! USE_CPPLIB */\n    {\"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n@@ -48,6 +85,7 @@ Boston, MA 02111-1307, USA.  */\n               %{!S:as %a %Y\\\n \t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n                       %{!pipe:%g.s} %A\\n }}}}\"}},\n+#endif /* ! USE_CPPLIB */\n   {\".ii\", {\"@c++-cpp-output\"}},\n   {\"@c++-cpp-output\",\n    {\"%{!M:%{!MM:%{!E:cc1plus %i %1 %2 %{!Q:-quiet} %{d*} %{m*} %{a}\\"}, {"sha": "41a52fb77d029737612640ec620b3aa08c5374b9", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297441fd872faf63cfb9ed802975fc8ebcb69a91/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=297441fd872faf63cfb9ed802975fc8ebcb69a91", "patch": "@@ -401,10 +401,12 @@ lang_init_options ()\n void\n lang_init ()\n {\n+#if ! USE_CPPLIB\n   /* the beginning of the file is a new line; check for # */\n   /* With luck, we discover the real source file's name from that\n      and put it in input_filename.  */\n   put_back (check_newline ());\n+#endif\n   if (flag_gnu_xref) GNU_xref_begin (input_filename);\n   init_repo (input_filename);\n }\n@@ -473,13 +475,9 @@ init_parse (filename)\n   int i;\n \n #if USE_CPPLIB\n-  yy_cur = \"\";\n-  yy_lim = yy_cur;\n+  yy_cur = \"\\n\";\n+  yy_lim = yy_cur + 1;\n \n-  cpp_reader_init (&parse_in);\n-  parse_in.data = &parse_options;\n-  cpp_options_init (&parse_options);\n-  cpp_handle_options (&parse_in, 0, NULL); /* FIXME */\n   parse_in.show_column = 1;\n   if (! cpp_start_read (&parse_in, filename))\n     abort ();"}]}