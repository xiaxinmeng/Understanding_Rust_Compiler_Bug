{"sha": "a2fd4f0efe04ccf7052b367b407de4c92acfa795", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmZDRmMGVmZTA0Y2NmNzA1MmIzNjdiNDA3ZGU0YzkyYWNmYTc5NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-01-11T08:54:17Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:54:17Z"}, "message": "[Ada] Spurious error on referene to subcoponrnt in dynamic predicate\n\nThis patch fixes a visibility error in the expression for a dynamic predicate\nof a record type, when the expression contains a reference to a subcomponent\nof the record given by a selected component whose prefix is the name of the\nenclosing component.\n\nExecuting\n\n   gnatmake -q -gnata main\n   ./main\n\nmust yield:\n\n   TGV OK\n   Amtrak broken, as usual\n\n----\nwith Text_IO; use Text_IO;\nwith Recpred; use Recpred;\nprocedure Main is\n   TGV : Train_Data;\n   Amtrak : Train_Data;\nbegin\n  TGV  := (20, (10,10));\n  Put_Line (\"TGV OK\");\n\n  begin\n     Amtrak := (30, (40, 40));\n  exception\n     when Others =>\n        Put_Line (\"Amtrak broken, as usual\");\n  end;\nend;\n----\npackage Recpred is\n\n   type Train_Position is record\n      TTD : Integer;\n      VSS : Integer;\n   end record;\n\n   type Train_Data is record\n      MA             : Integer;\n      Front_Position : Train_Position;\n   end record\n     with Dynamic_Predicate => MA >= Front_Position.TTD;\n\nend Recpred;\n\n2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Replace_Type_Ref): Handle properly reference to a\n\tsubcomponent of the current entity when building the body for a dynamic\n\tpredicate function for a record with composite subcomponents.\n\nFrom-SVN: r256514", "tree": {"sha": "96695641879293e94fc9892d6c86eba0019cef4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96695641879293e94fc9892d6c86eba0019cef4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2fd4f0efe04ccf7052b367b407de4c92acfa795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2fd4f0efe04ccf7052b367b407de4c92acfa795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2fd4f0efe04ccf7052b367b407de4c92acfa795", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2fd4f0efe04ccf7052b367b407de4c92acfa795/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6560f85165c084768a77dda7086269604781ce5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6560f85165c084768a77dda7086269604781ce5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6560f85165c084768a77dda7086269604781ce5e"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "e81b9bf1ee6f2523360248bba5c85afda083cc57", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2fd4f0efe04ccf7052b367b407de4c92acfa795/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2fd4f0efe04ccf7052b367b407de4c92acfa795/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a2fd4f0efe04ccf7052b367b407de4c92acfa795", "patch": "@@ -1,3 +1,9 @@\n+2018-01-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Replace_Type_Ref): Handle properly reference to a\n+\tsubcomponent of the current entity when building the body for a dynamic\n+\tpredicate function for a record with composite subcomponents.\n+\n 2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_aggr.adb (Convert_Aggr_In_Object_Decl): Update the call to"}, {"sha": "a9e8855e9a66535c292a9347634bdf1b713000f8", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2fd4f0efe04ccf7052b367b407de4c92acfa795/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2fd4f0efe04ccf7052b367b407de4c92acfa795/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a2fd4f0efe04ccf7052b367b407de4c92acfa795", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2018, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -12684,17 +12684,26 @@ package body Sem_Ch13 is\n                return Skip;\n             end if;\n \n-         --  Case of selected component (which is what a qualification looks\n-         --  like in the unanalyzed tree, which is what we have.\n+         --  Case of selected component, which may be a subcomponent of the\n+         --  current instance, or an expanded name which is still unanalyzed.\n \n          elsif Nkind (N) = N_Selected_Component then\n \n             --  If selector name is not our type, keep going (we might still\n             --  have an occurrence of the type in the prefix).\n+            --  If it is a subcomponent of the current entity, add prefix.\n \n             if Nkind (Selector_Name (N)) /= N_Identifier\n               or else Chars (Selector_Name (N)) /= TName\n             then\n+               if Nkind (Prefix (N)) = N_Identifier then\n+                  Comp := Visible_Component (Chars (Prefix (N)));\n+\n+                  if Present (Comp) then\n+                     Add_Prefix (Prefix (N), Comp);\n+                  end if;\n+               end if;\n+\n                return OK;\n \n             --  Selector name is our type, check qualification"}]}