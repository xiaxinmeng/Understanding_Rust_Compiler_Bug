{"sha": "18af8d16cf71b75081f20184d34206ff4ebce025", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThhZjhkMTZjZjcxYjc1MDgxZjIwMTg0ZDM0MjA2ZmY0ZWJjZTAyNQ==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2015-04-17T07:51:02Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2015-04-17T07:51:02Z"}, "message": "asan.c (set_sanitized_sections): New function.\n\n2015-04-17  Yury Gribov  <y.gribov@samsung.com>\n\ngcc/\n\t* asan.c (set_sanitized_sections): New function.\n\t(section_sanitized_p): Ditto.\n\t(asan_protect_global): Optionally sanitize user-defined\n\tsections.\n\t* asan.h (set_sanitized_sections): Declare new function.\n\t* common.opt (fsanitize-sections): New option.\n\t* doc/invoke.texi (-fsanitize-sections): Document new option.\n\t* opts-global.c (handle_common_deferred_options): Handle new\n\toption.\n\ngcc/testsuite/\n\t* c-c++-common/asan/user-section-1.c: New test.\n\nFrom-SVN: r222168", "tree": {"sha": "09b053c21952ec3a007be7fb313cc8b3d5295944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09b053c21952ec3a007be7fb313cc8b3d5295944"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18af8d16cf71b75081f20184d34206ff4ebce025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18af8d16cf71b75081f20184d34206ff4ebce025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18af8d16cf71b75081f20184d34206ff4ebce025", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18af8d16cf71b75081f20184d34206ff4ebce025/comments", "author": null, "committer": null, "parents": [{"sha": "d7cb230a931ffc5e4356bbffdb05998162df900c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cb230a931ffc5e4356bbffdb05998162df900c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7cb230a931ffc5e4356bbffdb05998162df900c"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "523ad74c98d9111e3f97612a694fd4edc42e7f0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18af8d16cf71b75081f20184d34206ff4ebce025", "patch": "@@ -1,3 +1,15 @@\n+2015-04-17  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* asan.c (set_sanitized_sections): New function.\n+\t(section_sanitized_p): Ditto.\n+\t(asan_protect_global): Optionally sanitize user-defined\n+\tsections.\n+\t* asan.h (set_sanitized_sections): Declare new function.\n+\t* common.opt (fsanitize-sections): New option.\n+\t* doc/invoke.texi (-fsanitize-sections): Document new option.\n+\t* opts-global.c (handle_common_deferred_options): Handle new\n+\toption.\n+\n 2015-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/65771"}, {"sha": "6706af7008c55ae12b354fbd289804dfa0e82dc7", "filename": "gcc/asan.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=18af8d16cf71b75081f20184d34206ff4ebce025", "patch": "@@ -272,6 +272,7 @@ along with GCC; see the file COPYING3.  If not see\n \n static unsigned HOST_WIDE_INT asan_shadow_offset_value;\n static bool asan_shadow_offset_computed;\n+static const char *sanitized_sections;\n \n /* Sets shadow offset to value in string VAL.  */\n \n@@ -294,6 +295,33 @@ set_asan_shadow_offset (const char *val)\n   return true;\n }\n \n+/* Set list of user-defined sections that need to be sanitized.  */\n+\n+void\n+set_sanitized_sections (const char *secs)\n+{\n+  sanitized_sections = secs;\n+}\n+\n+/* Checks whether section SEC should be sanitized.  */\n+\n+static bool\n+section_sanitized_p (const char *sec)\n+{\n+  if (!sanitized_sections)\n+    return false;\n+  size_t len = strlen (sec);\n+  const char *p = sanitized_sections;\n+  while ((p = strstr (p, sec)))\n+    {\n+      if ((p == sanitized_sections || p[-1] == ',')\n+\t  && (p[len] == 0 || p[len] == ','))\n+\treturn true;\n+      ++p;\n+    }\n+  return false;\n+}\n+\n /* Returns Asan shadow offset.  */\n \n static unsigned HOST_WIDE_INT\n@@ -1374,7 +1402,8 @@ asan_protect_global (tree decl)\n \t to be an array of such vars, putting padding in there\n \t breaks this assumption.  */\n       || (DECL_SECTION_NAME (decl) != NULL\n-\t  && !symtab_node::get (decl)->implicit_section)\n+\t  && !symtab_node::get (decl)->implicit_section\n+\t  && !section_sanitized_p (DECL_SECTION_NAME (decl)))\n       || DECL_SIZE (decl) == 0\n       || ASAN_RED_ZONE_SIZE * BITS_PER_UNIT > MAX_OFILE_ALIGNMENT\n       || !valid_constant_size_p (DECL_SIZE_UNIT (decl))"}, {"sha": "10ffaca3b86c213a7541c6fee4a12d413fe16ace", "filename": "gcc/asan.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=18af8d16cf71b75081f20184d34206ff4ebce025", "patch": "@@ -79,6 +79,8 @@ asan_red_zone_size (unsigned int size)\n \n extern bool set_asan_shadow_offset (const char *);\n \n+extern void set_sanitized_sections (const char *);\n+\n /* Return TRUE if builtin with given FCODE will be intercepted by\n    libasan.  */\n "}, {"sha": "380848c7087d406bd3764fceb410f4964169f335", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=18af8d16cf71b75081f20184d34206ff4ebce025", "patch": "@@ -897,6 +897,11 @@ fasan-shadow-offset=\n Common Joined RejectNegative Var(common_deferred_options) Defer\n -fasan-shadow-offset=<number>\tUse custom shadow memory offset.\n \n+fsanitize-sections=\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n+-fsanitize-sections=<sec1,sec2,...>\tSanitize global variables\n+in user-defined sections.\n+\n fsanitize-recover=\n Common Report Joined\n After diagnosing undefined behavior attempt to continue execution"}, {"sha": "f5f79b8102851fad5ff2ce05a3402ff9e9cd383c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=18af8d16cf71b75081f20184d34206ff4ebce025", "patch": "@@ -301,7 +301,8 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n -fsanitize=@var{style} -fsanitize-recover -fsanitize-recover=@var{style} @gol\n--fasan-shadow-offset=@var{number} -fsanitize-undefined-trap-on-error @gol\n+-fasan-shadow-offset=@var{number} -fsanitize-sections=@var{s1,s2,...} @gol\n+-fsanitize-undefined-trap-on-error @gol\n -fcheck-pointer-bounds -fchkp-check-incomplete-type @gol\n -fchkp-first-field-has-own-bounds -fchkp-narrow-bounds @gol\n -fchkp-narrow-to-innermost-array -fchkp-optimize @gol\n@@ -5803,6 +5804,10 @@ This option forces GCC to use custom shadow offset in AddressSanitizer checks.\n It is useful for experimenting with different shadow memory layouts in\n Kernel AddressSanitizer.\n \n+@item -fsanitize-sections=@var{s1,s2,...}\n+@opindex fsanitize-sections\n+Sanitize global variables in selected user-defined sections.\n+\n @item -fsanitize-recover@r{[}=@var{opts}@r{]}\n @opindex fsanitize-recover\n @opindex fno-sanitize-recover"}, {"sha": "1035b8d14c699af2b7c996b3929fd8f5ef7173f1", "filename": "gcc/opts-global.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=18af8d16cf71b75081f20184d34206ff4ebce025", "patch": "@@ -458,6 +458,10 @@ handle_common_deferred_options (void)\n \t     error (\"unrecognized shadow offset %qs\", opt->arg);\n \t  break;\n \n+\tcase OPT_fsanitize_sections_:\n+\t  set_sanitized_sections (opt->arg);\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "b406be4797ff85eafa4c1ca0e645f468a157c597", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18af8d16cf71b75081f20184d34206ff4ebce025/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18af8d16cf71b75081f20184d34206ff4ebce025", "patch": "@@ -1,3 +1,7 @@\n+2015-04-17  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* c-c++-common/asan/user-section-1.c: New test.\n+\n 2015-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/65771"}]}