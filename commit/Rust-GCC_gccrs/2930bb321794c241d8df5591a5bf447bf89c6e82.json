{"sha": "2930bb321794c241d8df5591a5bf447bf89c6e82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzMGJiMzIxNzk0YzI0MWQ4ZGY1NTkxYTViZjQ0N2JmODljNmU4Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-04-20T17:36:33Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-04-20T17:37:39Z"}, "message": "PR94613: Fix vec_sel builtin for IBM Z\n\nThe vsel instruction is a bit-wise select instruction.  Using an\nIF_THEN_ELSE to express it in RTL is wrong and leads to wrong code being\ngenerated in the combine pass.\n\nWith the patch the pattern is written using bit operations.  However,\nI've just noticed that the manual still demands a fixed point mode for\nAND/IOR and friends although several targets emit bit ops on floating\npoint vectors (including i386, Power, and s390). So I assume this is a\nsafe thing to do?!\n\ngcc/ChangeLog:\n\n2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\tPR target/94613\n\t* config/s390/s390-builtin-types.def: Add 3 new function modes.\n\t* config/s390/s390-builtins.def: Add mode dependent low-level\n\tbuiltin and map the overloaded builtins to these.\n\t* config/s390/vx-builtins.md (\"vec_selV_HW\"): Rename to ...\n\t(\"vsel<V_HW\"): ... this and rewrite the pattern with bitops.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\tPR target/94613\n\t* gcc.target/s390/zvector/pr94613.c: New test.\n\t* gcc.target/s390/zvector/vec_sel-1.c: New test.", "tree": {"sha": "cfa602f31ed3dfd6dff5d23df25107fa69f84502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa602f31ed3dfd6dff5d23df25107fa69f84502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2930bb321794c241d8df5591a5bf447bf89c6e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2930bb321794c241d8df5591a5bf447bf89c6e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2930bb321794c241d8df5591a5bf447bf89c6e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2930bb321794c241d8df5591a5bf447bf89c6e82/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fe12b0234a06e286df38d7b594abc23d1c371bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe12b0234a06e286df38d7b594abc23d1c371bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe12b0234a06e286df38d7b594abc23d1c371bc"}], "stats": {"total": 359, "additions": 315, "deletions": 44}, "files": [{"sha": "ed3541d1264c26150e9049050015ee1538f1c2fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2930bb321794c241d8df5591a5bf447bf89c6e82", "patch": "@@ -1,3 +1,12 @@\n+2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/94613\n+\t* config/s390/s390-builtin-types.def: Add 3 new function modes.\n+\t* config/s390/s390-builtins.def: Add mode dependent low-level\n+\tbuiltin and map the overloaded builtins to these.\n+\t* config/s390/vx-builtins.md (\"vec_selV_HW\"): Rename to ...\n+\t(\"vsel<V_HW\"): ... this and rewrite the pattern with bitops.\n+\n 2020-04-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-loop.c (vect_better_loop_vinfo_p): If old_loop_vinfo"}, {"sha": "76ae8fed1aebecc15195f5f482b5fc7e133515ac", "filename": "gcc/config/s390/s390-builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def?ref=2930bb321794c241d8df5591a5bf447bf89c6e82", "patch": "@@ -301,6 +301,7 @@ DEF_FN_TYPE_3 (BT_FN_UV16QI_UV2DI_UV2DI_UV16QI, BT_UV16QI, BT_UV2DI, BT_UV2DI, B\n DEF_FN_TYPE_3 (BT_FN_UV16QI_UV8HI_UV8HI_INTPTR, BT_UV16QI, BT_UV8HI, BT_UV8HI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_UV2DI_UV2DI_ULONGLONG_INT, BT_UV2DI, BT_UV2DI, BT_ULONGLONG, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_UV2DI_UV2DI_UV2DI_INT, BT_UV2DI, BT_UV2DI, BT_UV2DI, BT_INT)\n+DEF_FN_TYPE_3 (BT_FN_UV2DI_UV2DI_UV2DI_UV2DI, BT_UV2DI, BT_UV2DI, BT_UV2DI, BT_UV2DI)\n DEF_FN_TYPE_3 (BT_FN_UV2DI_UV4SI_UV4SI_UV2DI, BT_UV2DI, BT_UV4SI, BT_UV4SI, BT_UV2DI)\n DEF_FN_TYPE_3 (BT_FN_UV4SI_UV2DI_UV2DI_INTPTR, BT_UV4SI, BT_UV2DI, BT_UV2DI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_UV4SI_UV4SI_UINT_INT, BT_UV4SI, BT_UV4SI, BT_UINT, BT_INT)\n@@ -322,6 +323,7 @@ DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_DBL_INT, BT_V2DF, BT_V2DF, BT_DBL, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_UCHAR_UCHAR, BT_V2DF, BT_V2DF, BT_UCHAR, BT_UCHAR)\n DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_UINT_UINT, BT_V2DF, BT_V2DF, BT_UINT, BT_UINT)\n DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_V2DF_INT, BT_V2DF, BT_V2DF, BT_V2DF, BT_INT)\n+DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_V2DF_UV2DI, BT_V2DF, BT_V2DF, BT_V2DF, BT_UV2DI)\n DEF_FN_TYPE_3 (BT_FN_V2DF_V2DF_V2DF_V2DF, BT_V2DF, BT_V2DF, BT_V2DF, BT_V2DF)\n DEF_FN_TYPE_3 (BT_FN_V2DI_UV2DI_UV2DI_INTPTR, BT_V2DI, BT_UV2DI, BT_UV2DI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V2DI_V2DF_INT_INTPTR, BT_V2DI, BT_V2DF, BT_INT, BT_INTPTR)\n@@ -332,6 +334,7 @@ DEF_FN_TYPE_3 (BT_FN_V4SF_V2DF_INT_INT, BT_V4SF, BT_V2DF, BT_INT, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_FLT_INT, BT_V4SF, BT_V4SF, BT_FLT, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_UCHAR_UCHAR, BT_V4SF, BT_V4SF, BT_UCHAR, BT_UCHAR)\n DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_V4SF_INT, BT_V4SF, BT_V4SF, BT_V4SF, BT_INT)\n+DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_V4SF_UV4SI, BT_V4SF, BT_V4SF, BT_V4SF, BT_UV4SI)\n DEF_FN_TYPE_3 (BT_FN_V4SF_V4SF_V4SF_V4SF, BT_V4SF, BT_V4SF, BT_V4SF, BT_V4SF)\n DEF_FN_TYPE_3 (BT_FN_V4SI_UV4SI_UV4SI_INTPTR, BT_V4SI, BT_UV4SI, BT_UV4SI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_V4SI_V2DI_V2DI_INTPTR, BT_V4SI, BT_V2DI, BT_V2DI, BT_INTPTR)"}, {"sha": "c69573df695bffd06779e1aa2b46d4fa929f9833", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=2930bb321794c241d8df5591a5bf447bf89c6e82", "patch": "@@ -687,36 +687,41 @@ B_DEF      (s390_vsceg,                 vec_scatter_elementv2di,0,\n \n /* First two operands are swapped in s390-c.c */\n OB_DEF     (s390_vec_sel,               s390_vec_sel_b8_a,  s390_vec_sel_dbl_b, B_VX,               BT_FN_OV4SI_OV4SI_OV4SI_OV4SI)\n-OB_DEF_VAR (s390_vec_sel_b8_a,          s390_vsel,          0,                  0,                  BT_OV_BV16QI_BV16QI_BV16QI_UV16QI)\n-OB_DEF_VAR (s390_vec_sel_b8_b,          s390_vsel,          0,                  0,                  BT_OV_BV16QI_BV16QI_BV16QI_BV16QI)\n-OB_DEF_VAR (s390_vec_sel_s8_a,          s390_vsel,          0,                  0,                  BT_OV_V16QI_V16QI_V16QI_UV16QI)\n-OB_DEF_VAR (s390_vec_sel_s8_b,          s390_vsel,          0,                  0,                  BT_OV_V16QI_V16QI_V16QI_BV16QI)\n-OB_DEF_VAR (s390_vec_sel_u8_a,          s390_vsel,          0,                  0,                  BT_OV_UV16QI_UV16QI_UV16QI_UV16QI)\n-OB_DEF_VAR (s390_vec_sel_u8_b,          s390_vsel,          0,                  0,                  BT_OV_UV16QI_UV16QI_UV16QI_BV16QI)\n-OB_DEF_VAR (s390_vec_sel_b16_a,         s390_vsel,          0,                  0,                  BT_OV_BV8HI_BV8HI_BV8HI_UV8HI)\n-OB_DEF_VAR (s390_vec_sel_b16_b,         s390_vsel,          0,                  0,                  BT_OV_BV8HI_BV8HI_BV8HI_BV8HI)\n-OB_DEF_VAR (s390_vec_sel_s16_a,         s390_vsel,          0,                  0,                  BT_OV_V8HI_V8HI_V8HI_UV8HI)\n-OB_DEF_VAR (s390_vec_sel_s16_b,         s390_vsel,          0,                  0,                  BT_OV_V8HI_V8HI_V8HI_BV8HI)\n-OB_DEF_VAR (s390_vec_sel_u16_a,         s390_vsel,          0,                  0,                  BT_OV_UV8HI_UV8HI_UV8HI_UV8HI)\n-OB_DEF_VAR (s390_vec_sel_u16_b,         s390_vsel,          0,                  0,                  BT_OV_UV8HI_UV8HI_UV8HI_BV8HI)\n-OB_DEF_VAR (s390_vec_sel_b32_a,         s390_vsel,          0,                  0,                  BT_OV_BV4SI_BV4SI_BV4SI_UV4SI)\n-OB_DEF_VAR (s390_vec_sel_b32_b,         s390_vsel,          0,                  0,                  BT_OV_BV4SI_BV4SI_BV4SI_BV4SI)\n-OB_DEF_VAR (s390_vec_sel_s32_a,         s390_vsel,          0,                  0,                  BT_OV_V4SI_V4SI_V4SI_UV4SI)\n-OB_DEF_VAR (s390_vec_sel_s32_b,         s390_vsel,          0,                  0,                  BT_OV_V4SI_V4SI_V4SI_BV4SI)\n-OB_DEF_VAR (s390_vec_sel_u32_a,         s390_vsel,          0,                  0,                  BT_OV_UV4SI_UV4SI_UV4SI_UV4SI)\n-OB_DEF_VAR (s390_vec_sel_u32_b,         s390_vsel,          0,                  0,                  BT_OV_UV4SI_UV4SI_UV4SI_BV4SI)\n-OB_DEF_VAR (s390_vec_sel_b64_a,         s390_vsel,          0,                  0,                  BT_OV_BV2DI_BV2DI_BV2DI_UV2DI)\n-OB_DEF_VAR (s390_vec_sel_b64_b,         s390_vsel,          0,                  0,                  BT_OV_BV2DI_BV2DI_BV2DI_BV2DI)\n-OB_DEF_VAR (s390_vec_sel_s64_a,         s390_vsel,          0,                  0,                  BT_OV_V2DI_V2DI_V2DI_UV2DI)\n-OB_DEF_VAR (s390_vec_sel_s64_b,         s390_vsel,          0,                  0,                  BT_OV_V2DI_V2DI_V2DI_BV2DI)\n-OB_DEF_VAR (s390_vec_sel_u64_a,         s390_vsel,          0,                  0,                  BT_OV_UV2DI_UV2DI_UV2DI_UV2DI)\n-OB_DEF_VAR (s390_vec_sel_u64_b,         s390_vsel,          0,                  0,                  BT_OV_UV2DI_UV2DI_UV2DI_BV2DI)\n-OB_DEF_VAR (s390_vec_sel_flt_a,         s390_vsel,          B_VXE,              0,                  BT_OV_V4SF_V4SF_V4SF_UV4SI)\n-OB_DEF_VAR (s390_vec_sel_flt_b,         s390_vsel,          B_VXE,              0,                  BT_OV_V4SF_V4SF_V4SF_BV4SI)\n-OB_DEF_VAR (s390_vec_sel_dbl_a,         s390_vsel,          0,                  0,                  BT_OV_V2DF_V2DF_V2DF_UV2DI)\n-OB_DEF_VAR (s390_vec_sel_dbl_b,         s390_vsel,          0,                  0,                  BT_OV_V2DF_V2DF_V2DF_BV2DI)\n-\n-B_DEF      (s390_vsel,                  vec_selv16qi,       0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+OB_DEF_VAR (s390_vec_sel_b8_a,          s390_vselb,         0,                  0,                  BT_OV_BV16QI_BV16QI_BV16QI_UV16QI)\n+OB_DEF_VAR (s390_vec_sel_b8_b,          s390_vselb,         0,                  0,                  BT_OV_BV16QI_BV16QI_BV16QI_BV16QI)\n+OB_DEF_VAR (s390_vec_sel_s8_a,          s390_vselb,         0,                  0,                  BT_OV_V16QI_V16QI_V16QI_UV16QI)\n+OB_DEF_VAR (s390_vec_sel_s8_b,          s390_vselb,         0,                  0,                  BT_OV_V16QI_V16QI_V16QI_BV16QI)\n+OB_DEF_VAR (s390_vec_sel_u8_a,          s390_vselb,         0,                  0,                  BT_OV_UV16QI_UV16QI_UV16QI_UV16QI)\n+OB_DEF_VAR (s390_vec_sel_u8_b,          s390_vselb,         0,                  0,                  BT_OV_UV16QI_UV16QI_UV16QI_BV16QI)\n+OB_DEF_VAR (s390_vec_sel_b16_a,         s390_vselh,         0,                  0,                  BT_OV_BV8HI_BV8HI_BV8HI_UV8HI)\n+OB_DEF_VAR (s390_vec_sel_b16_b,         s390_vselh,         0,                  0,                  BT_OV_BV8HI_BV8HI_BV8HI_BV8HI)\n+OB_DEF_VAR (s390_vec_sel_s16_a,         s390_vselh,         0,                  0,                  BT_OV_V8HI_V8HI_V8HI_UV8HI)\n+OB_DEF_VAR (s390_vec_sel_s16_b,         s390_vselh,         0,                  0,                  BT_OV_V8HI_V8HI_V8HI_BV8HI)\n+OB_DEF_VAR (s390_vec_sel_u16_a,         s390_vselh,         0,                  0,                  BT_OV_UV8HI_UV8HI_UV8HI_UV8HI)\n+OB_DEF_VAR (s390_vec_sel_u16_b,         s390_vselh,         0,                  0,                  BT_OV_UV8HI_UV8HI_UV8HI_BV8HI)\n+OB_DEF_VAR (s390_vec_sel_b32_a,         s390_vself,         0,                  0,                  BT_OV_BV4SI_BV4SI_BV4SI_UV4SI)\n+OB_DEF_VAR (s390_vec_sel_b32_b,         s390_vself,         0,                  0,                  BT_OV_BV4SI_BV4SI_BV4SI_BV4SI)\n+OB_DEF_VAR (s390_vec_sel_s32_a,         s390_vself,         0,                  0,                  BT_OV_V4SI_V4SI_V4SI_UV4SI)\n+OB_DEF_VAR (s390_vec_sel_s32_b,         s390_vself,         0,                  0,                  BT_OV_V4SI_V4SI_V4SI_BV4SI)\n+OB_DEF_VAR (s390_vec_sel_u32_a,         s390_vself,         0,                  0,                  BT_OV_UV4SI_UV4SI_UV4SI_UV4SI)\n+OB_DEF_VAR (s390_vec_sel_u32_b,         s390_vself,         0,                  0,                  BT_OV_UV4SI_UV4SI_UV4SI_BV4SI)\n+OB_DEF_VAR (s390_vec_sel_b64_a,         s390_vselg,         0,                  0,                  BT_OV_BV2DI_BV2DI_BV2DI_UV2DI)\n+OB_DEF_VAR (s390_vec_sel_b64_b,         s390_vselg,         0,                  0,                  BT_OV_BV2DI_BV2DI_BV2DI_BV2DI)\n+OB_DEF_VAR (s390_vec_sel_s64_a,         s390_vselg,         0,                  0,                  BT_OV_V2DI_V2DI_V2DI_UV2DI)\n+OB_DEF_VAR (s390_vec_sel_s64_b,         s390_vselg,         0,                  0,                  BT_OV_V2DI_V2DI_V2DI_BV2DI)\n+OB_DEF_VAR (s390_vec_sel_u64_a,         s390_vselg,         0,                  0,                  BT_OV_UV2DI_UV2DI_UV2DI_UV2DI)\n+OB_DEF_VAR (s390_vec_sel_u64_b,         s390_vselg,         0,                  0,                  BT_OV_UV2DI_UV2DI_UV2DI_BV2DI)\n+OB_DEF_VAR (s390_vec_sel_flt_a,         s390_vself_flt,     B_VXE,              0,                  BT_OV_V4SF_V4SF_V4SF_UV4SI)\n+OB_DEF_VAR (s390_vec_sel_flt_b,         s390_vself_flt,     B_VXE,              0,                  BT_OV_V4SF_V4SF_V4SF_BV4SI)\n+OB_DEF_VAR (s390_vec_sel_dbl_a,         s390_vselg_dbl,     0,                  0,                  BT_OV_V2DF_V2DF_V2DF_UV2DI)\n+OB_DEF_VAR (s390_vec_sel_dbl_b,         s390_vselg_dbl,     0,                  0,                  BT_OV_V2DF_V2DF_V2DF_BV2DI)\n+\n+B_DEF      (s390_vselb,                 vselv16qi,          0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vselh,                 vselv8hi,           0,                  B_VX,               0,                  BT_FN_UV8HI_UV8HI_UV8HI_UV8HI)\n+B_DEF      (s390_vself,                 vselv4si,           0,                  B_VX,               0,                  BT_FN_UV4SI_UV4SI_UV4SI_UV4SI)\n+B_DEF      (s390_vselg,                 vselv2di,           0,                  B_VX,               0,                  BT_FN_UV2DI_UV2DI_UV2DI_UV2DI)\n+B_DEF      (s390_vself_flt,             vselv4sf,           0,                  B_VXE,              0,                  BT_FN_V4SF_V4SF_V4SF_UV4SI)\n+B_DEF      (s390_vselg_dbl,             vselv2df,           0,                  B_VX,               0,                  BT_FN_V2DF_V2DF_V2DF_UV2DI)\n \n OB_DEF     (s390_vec_extend_s64,        s390_vec_extend_s64_s8,s390_vec_extend_s64_s32,B_VX,        BT_FN_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_extend_s64_s8,     s390_vsegb,         0,                  0,                  BT_OV_V2DI_V16QI)"}, {"sha": "0eed31923c55ea2609c056e07a302cdf439e16af", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=2930bb321794c241d8df5591a5bf447bf89c6e82", "patch": "@@ -499,23 +499,22 @@\n \n ; Vector select\n \n-; Operand 3 selects bits from either OP1 (0) or OP2 (1)\n+; for all b in bits op0[b] = op3[b] == 0 ? op2[b] : op1[b]\n+; implemented as: op0 = (op1 & op3) | (op2 & ~op3)\n \n-; Comparison operator should not matter as long as we always use the same ?!\n+; Used to expand the vec_sel builtin. Operands op1 and op2 already got\n+; swapped in s390-c.c when we get here.\n \n-; Operands 1 and 2 are swapped in order to match the altivec builtin.\n-; If operand 3 is a const_int bitmask this would be vec_merge\n-(define_expand \"vec_sel<mode>\"\n-  [(set (match_operand:V_HW 0 \"register_operand\" \"\")\n-\t(if_then_else:V_HW\n-\t (eq (match_operand:<tointvec> 3 \"register_operand\"  \"\")\n-\t     (match_dup 4))\n-\t (match_operand:V_HW 2 \"register_operand\"  \"\")\n-\t (match_operand:V_HW 1 \"register_operand\"  \"\")))]\n+(define_insn \"vsel<mode>\"\n+  [(set (match_operand:V_HW                      0 \"register_operand\" \"=v\")\n+\t(ior:V_HW\n+\t (and:V_HW (match_operand:V_HW           1 \"register_operand\"  \"v\")\n+\t\t   (match_operand:V_HW           3 \"register_operand\"  \"v\"))\n+\t (and:V_HW (not:V_HW (match_dup 3))\n+\t\t   (match_operand:V_HW           2 \"register_operand\"  \"v\"))))]\n   \"TARGET_VX\"\n-{\n-  operands[4] = CONST0_RTX (<tointvec>mode);\n-})\n+  \"vsel\\t%v0,%1,%2,%3\"\n+  [(set_attr \"op_type\" \"VRR\")])\n \n \n ; Vector sign extend to doubleword"}, {"sha": "117eed9e35b9f215944561487f8145f42dea68a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2930bb321794c241d8df5591a5bf447bf89c6e82", "patch": "@@ -1,3 +1,9 @@\n+2020-04-20  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/94613\n+\t* gcc.target/s390/zvector/pr94613.c: New test.\n+\t* gcc.target/s390/zvector/vec_sel-1.c: New test.\n+\n 2020-04-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/cost_model_8.c: New test."}, {"sha": "0d71042f881fa680adda4553b2812790c71a100c", "filename": "gcc/testsuite/gcc.target/s390/zvector/pr94613.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fpr94613.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fpr94613.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fpr94613.c?ref=2930bb321794c241d8df5591a5bf447bf89c6e82", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target s390_vx } */\n+/* { dg-options \"-O3 -mzarch -march=arch13 -mzvector -std=gnu99 --save-temps\" } */\n+\n+#include <vecintrin.h>\n+\n+/* The initial implementation of vec_sel used an IF_THEN_ELSE rtx.\n+   This did NOT match what the vsel instruction does.  vsel is a\n+   bit-wise operation.  Using IF_THEN_ELSE made the + operation to be\n+   simplified away in combine.  A plus operation affects other bits in\n+   the same element. Hence per-element simplifications are wrong for\n+   vsel.  */\n+vector unsigned char __attribute__((noinline))\n+foo (vector unsigned char a, vector unsigned char b, vector unsigned char c)\n+{\n+  return vec_sel (a + b, c, a);\n+}\n+\n+/* FIXME: The OR operation still should be optimized away in that case.  */\n+vector unsigned char __attribute__((noinline))\n+bar (vector unsigned char a, vector unsigned char b, vector unsigned char c)\n+{\n+  return vec_sel (a | b, c, a);\n+}\n+\n+int\n+main ()\n+{\n+  vector unsigned char v = (vector unsigned char){ 1 };\n+\n+  if (foo (v, v, v)[0] != 3)\n+      __builtin_abort ();\n+\n+  if (bar (v, v, v)[0] != 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "d310f70d3a571745b095140858f6cdff72526994", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec_sel-1.c", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_sel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2930bb321794c241d8df5591a5bf447bf89c6e82/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_sel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_sel-1.c?ref=2930bb321794c241d8df5591a5bf447bf89c6e82", "patch": "@@ -0,0 +1,211 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target s390_vxe } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector --save-temps -Wno-attributes\" } */\n+\n+#include <string.h>\n+#include <vecintrin.h>\n+\n+typedef vector signed char v16qi;\n+typedef vector unsigned char uv16qi;\n+typedef vector bool char bv16qi;\n+\n+typedef vector signed short int v8hi;\n+typedef vector unsigned short int uv8hi;\n+typedef vector bool short int bv8hi;\n+\n+typedef vector signed int v4si;\n+typedef vector unsigned int uv4si;\n+typedef vector bool int bv4si;\n+\n+typedef vector signed long long v2di;\n+typedef vector unsigned long long uv2di;\n+typedef vector bool long long bv2di;\n+\n+typedef vector float v4sf;\n+typedef vector double v2df;\n+\n+#define NUM_CONSTS 8\n+\n+const v16qi v16qi_vals[NUM_CONSTS] =\n+  { (v16qi){ 1 },\n+    (v16qi){ 2 },\n+    (v16qi){ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },\n+    (v16qi){ 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2 },\n+    (v16qi){ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 },\n+    (v16qi){ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },\n+    (v16qi){ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 },\n+    (v16qi){ 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1 }\n+  };\n+\n+const v8hi v8hi_vals[NUM_CONSTS] =\n+  { (v8hi){ 1 },\n+    (v8hi){ 2 },\n+    (v8hi){ 1,1,1,1,1,1,1,1 },\n+    (v8hi){ 2,2,2,2,2,2,2,2 },\n+    (v8hi){ -1,-1,-1,-1,-1,-1,-1,-1 },\n+    (v8hi){ 0,0,0,0,0,0,0,0 },\n+    (v8hi){ 1,2,3,4,5,6,7,8 },\n+    (v8hi){ 8,7,6,5,4,3,2,1 }\n+  };\n+\n+const v4si v4si_vals[NUM_CONSTS] =\n+  { (v4si){ 1 },\n+    (v4si){ 2 },\n+    (v4si){ 1,1,1,1 },\n+    (v4si){ 2,2,2,2 },\n+    (v4si){ -1,-1,-1,-1 },\n+    (v4si){ 0,0,0,0 },\n+    (v4si){ 1,2,3,4 },\n+    (v4si){ 4,3,2,1 }\n+  };\n+\n+const v2di v2di_vals[NUM_CONSTS] =\n+  { (v2di){ 1 },\n+    (v2di){ 2 },\n+    (v2di){ 1,1 },\n+    (v2di){ 2,2 },\n+    (v2di){ -1,-1 },\n+    (v2di){ 0,0 },\n+    (v2di){ 1,2 },\n+    (v2di){ 2,1 }\n+  };\n+\n+const v4sf v4sf_vals[NUM_CONSTS] =\n+  { (v4sf){ 1.0f },\n+    (v4sf){ 2.0f },\n+    (v4sf){ 1.0f,1.0f,1.0f,1.0f },\n+    (v4sf){ 2.0f,2.0f,2.0f,2.0f },\n+    (v4sf){ -1.0f,-1.0f,-1.0f,-1.0f },\n+    (v4sf){ 0.0f,0.0f,0.0f,0.0f },\n+    (v4sf){ 1.1f,2.1f,3.1f,4.1f },\n+    (v4sf){ 4.1f,3.1f,2.1f,1.1f }\n+  };\n+\n+const v2df v2df_vals[NUM_CONSTS] =\n+  { (v2df){ 1.0 },\n+    (v2df){ 2.0 },\n+    (v2df){ 1.0,1.0 },\n+    (v2df){ 2.0,2.0 },\n+    (v2df){ -1.0,-1.0 },\n+    (v2df){ 0.0,0.0 },\n+    (v2df){ 1.1,2.1 },\n+    (v2df){ 2.1,1.1 }\n+  };\n+\n+/* Each bit of the result vector has the value of the corresponding\n+   bit of A if the corresponding bit of C is 0, or the value of the\n+   corresponding bit of B otherwise.  */\n+void __attribute__((noinline, noclone, target (\"arch=zEC12\")))\n+emul (unsigned char *result, unsigned char *a,\n+      unsigned char *b, unsigned char *c)\n+{\n+  for (int i = 0; i < 16; i++)\n+    result[i] = (a[i] & ~c[i]) | (b[i] & c[i]);\n+}\n+\n+#define GENFUNC(NAME, T1, T2)\t\t\t\t\t\t\\\n+  T1 __attribute__((noinline, noclone))\t\t\t\t\t\\\n+  NAME##_reg (T1 a, T1 b, T2 c) { return vec_sel (a, b, c); }\t\t\\\n+  void __attribute__((noinline, noclone))\t\t\t\t\\\n+  NAME##_mem (T1 *a, T1 *b, T2 *c, T1 *out) { *out = vec_sel (*a, *b, *c); } \\\n+  T1 __attribute__((always_inline))\t\t\t\t\t\\\n+  NAME##_const (T1 a, T1 b, T2 c) { return vec_sel (a, b, c); }\n+\n+GENFUNC (vec_sel_b8_a, bv16qi, uv16qi)\n+GENFUNC (vec_sel_b8_b, bv16qi, bv16qi)\n+GENFUNC (vec_sel_s8_a,  v16qi, uv16qi)\n+GENFUNC (vec_sel_s8_b,  v16qi, bv16qi)\n+GENFUNC (vec_sel_u8_a, uv16qi, uv16qi)\n+GENFUNC (vec_sel_u8_b, uv16qi, bv16qi)\n+\n+GENFUNC (vec_sel_b16_a, bv8hi, uv8hi)\n+GENFUNC (vec_sel_b16_b, bv8hi, bv8hi)\n+GENFUNC (vec_sel_s16_a,  v8hi, uv8hi)\n+GENFUNC (vec_sel_s16_b,  v8hi, bv8hi)\n+GENFUNC (vec_sel_u16_a, uv8hi, uv8hi)\n+GENFUNC (vec_sel_u16_b, uv8hi, bv8hi)\n+\n+GENFUNC (vec_sel_b32_a, bv4si, uv4si)\n+GENFUNC (vec_sel_b32_b, bv4si, bv4si)\n+GENFUNC (vec_sel_s32_a,  v4si, uv4si)\n+GENFUNC (vec_sel_s32_b,  v4si, bv4si)\n+GENFUNC (vec_sel_u32_a, uv4si, uv4si)\n+GENFUNC (vec_sel_u32_b, uv4si, bv4si)\n+\n+GENFUNC (vec_sel_b64_a, bv2di, uv2di)\n+GENFUNC (vec_sel_b64_b, bv2di, bv2di)\n+GENFUNC (vec_sel_s64_a,  v2di, uv2di)\n+GENFUNC (vec_sel_s64_b,  v2di, bv2di)\n+GENFUNC (vec_sel_u64_a, uv2di, uv2di)\n+GENFUNC (vec_sel_u64_b, uv2di, bv2di)\n+\n+GENFUNC (vec_sel_flt_a,  v4sf, uv4si)\n+GENFUNC (vec_sel_flt_b,  v4sf, bv4si)\n+\n+GENFUNC (vec_sel_dbl_a,  v2df, uv2di)\n+GENFUNC (vec_sel_dbl_b,  v2df, bv2di)\n+\n+#define TESTFUNC(NAME, T1, T2, VAL_TYPE)\t\t\t\t\\\n+  for (int i = 0; i < NUM_CONSTS; i++)\t\t\t\t\t\\\n+    for (int j = 0; j < NUM_CONSTS; j++)\t\t\t\t\\\n+      for (int k = 0; k < NUM_CONSTS; k++)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  unsigned char result[16];\t\t\t\t\t\\\n+\t  T1 in1 = (T1)VAL_TYPE##_vals[i];\t\t\t\t\\\n+\t  T1 in2 = (T1)VAL_TYPE##_vals[j];\t\t\t\t\\\n+\t  T2 in3 = (T2)VAL_TYPE##_vals[k];\t\t\t\t\\\n+\t  emul (result, (char*)&in1, (char*)&in2, (char*)&in3);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  T1 reg = NAME##_reg (in1, in2, in3);\t\t\t\t\\\n+\t  if (memcmp ((char*)&reg, result, 16) != 0)\t\t\t\\\n+\t    __builtin_abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  T1 mem;\t\t\t\t\t\t\t\\\n+\t  NAME##_mem (&in1, &in2, &in3, &mem);\t\t\t\t\\\n+\t  if (memcmp ((char*)&mem, result, 16) != 0)\t\t\t\\\n+\t    __builtin_abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  T1 cons = NAME##_const (in1, in2, in3);\t\t\t\\\n+\t  if (memcmp ((char*)&cons, result, 16) != 0)\t\t\t\\\n+\t    __builtin_abort ();\t\t\t\t\t\t\\\n+\t}\n+\n+int\n+main ()\n+{\n+  TESTFUNC (vec_sel_b8_a, bv16qi, uv16qi, v16qi);\n+  TESTFUNC (vec_sel_b8_b, bv16qi, bv16qi, v16qi);\n+  TESTFUNC (vec_sel_s8_a,  v16qi, uv16qi, v16qi);\n+  TESTFUNC (vec_sel_s8_b,  v16qi, bv16qi, v16qi);\n+  TESTFUNC (vec_sel_u8_a, uv16qi, uv16qi, v16qi);\n+  TESTFUNC (vec_sel_u8_b, uv16qi, bv16qi, v16qi);\n+\n+  TESTFUNC (vec_sel_b16_a, bv8hi, uv8hi, v8hi);\n+  TESTFUNC (vec_sel_b16_b, bv8hi, bv8hi, v8hi);\n+  TESTFUNC (vec_sel_s16_a,  v8hi, uv8hi, v8hi);\n+  TESTFUNC (vec_sel_s16_b,  v8hi, bv8hi, v8hi);\n+  TESTFUNC (vec_sel_u16_a, uv8hi, uv8hi, v8hi);\n+  TESTFUNC (vec_sel_u16_b, uv8hi, bv8hi, v8hi);\n+\n+  TESTFUNC (vec_sel_b32_a, bv4si, uv4si, v4si);\n+  TESTFUNC (vec_sel_b32_b, bv4si, bv4si, v4si);\n+  TESTFUNC (vec_sel_s32_a,  v4si, uv4si, v4si);\n+  TESTFUNC (vec_sel_s32_b,  v4si, bv4si, v4si);\n+  TESTFUNC (vec_sel_u32_a, uv4si, uv4si, v4si);\n+  TESTFUNC (vec_sel_u32_b, uv4si, bv4si, v4si);\n+\n+  TESTFUNC (vec_sel_b64_a, bv2di, uv2di, v2di);\n+  TESTFUNC (vec_sel_b64_b, bv2di, bv2di, v2di);\n+  TESTFUNC (vec_sel_s64_a,  v2di, uv2di, v2di);\n+  TESTFUNC (vec_sel_s64_b,  v2di, bv2di, v2di);\n+  TESTFUNC (vec_sel_u64_a, uv2di, uv2di, v2di);\n+  TESTFUNC (vec_sel_u64_b, uv2di, bv2di, v2di);\n+\n+  TESTFUNC (vec_sel_flt_a,  v4sf, uv4si, v4sf);\n+  TESTFUNC (vec_sel_flt_b,  v4sf, bv4si, v4sf);\n+\n+  TESTFUNC (vec_sel_dbl_a,  v2df, uv2di, v2df);\n+  TESTFUNC (vec_sel_dbl_b,  v2df, bv2di, v2df);\n+}\n+\n+/* { dg-final { scan-assembler {\\n\\tvsel\\t} } } */"}]}