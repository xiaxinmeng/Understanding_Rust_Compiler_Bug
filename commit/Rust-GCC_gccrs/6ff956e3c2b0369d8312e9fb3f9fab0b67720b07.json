{"sha": "6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmOTU2ZTNjMmIwMzY5ZDgzMTJlOWZiM2Y5ZmFiMGI2NzcyMGIwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-01-21T19:38:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-01-21T19:38:35Z"}, "message": "re PR libstdc++/56267 (unordered containers require Assignable hash function)\n\n\tPR libstdc++/56267\n\t* include/bits/hashtable.h (__cache_default): Do not depend on\n\twhether the hash function is DefaultConstructible or CopyAssignable.\n\t(_Hashtable): Adjust static assertions.\n\t* doc/xml/manual/containers.xml (containers.unordered.cache): Update.\n\t* testsuite/23_containers/unordered_set/instantiation_neg.cc: Adjust\n\tdg-error line number.\n\t* testsuite/23_containers/unordered_set/\n\tnot_default_constructible_hash_neg.cc: Remove.\n\nFrom-SVN: r206904", "tree": {"sha": "1c31336cdfeff923f53c1b30eceec959e8b95b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c31336cdfeff923f53c1b30eceec959e8b95b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc36b1593a7c767da5fbd45c9d64163301412b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc36b1593a7c767da5fbd45c9d64163301412b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc36b1593a7c767da5fbd45c9d64163301412b5"}], "stats": {"total": 106, "additions": 16, "deletions": 90}, "files": [{"sha": "879efe887a15bb6bb853146fcbf4c25af7129905", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "patch": "@@ -1,3 +1,15 @@\n+2014-01-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/56267\n+\t* include/bits/hashtable.h (__cache_default): Do not depend on\n+\twhether the hash function is DefaultConstructible or CopyAssignable.\n+\t(_Hashtable): Adjust static assertions.\n+\t* doc/xml/manual/containers.xml (containers.unordered.cache): Update.\n+\t* testsuite/23_containers/unordered_set/instantiation_neg.cc: Adjust\n+\tdg-error line number.\n+\t* testsuite/23_containers/unordered_set/\n+\tnot_default_constructible_hash_neg.cc: Remove.\n+\n 2014-01-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* scripts/create_testsuite_files: Add testsuite/experimental in"}, {"sha": "653033da4d55ae9308b6b830bf9a1fd441e48018", "filename": "libstdc++-v3/doc/xml/manual/containers.xml", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fcontainers.xml?ref=6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "patch": "@@ -420,7 +420,7 @@\n       the hash code every time it's needed can improve performance, but the\n       additional memory overhead can also reduce performance, so whether an\n       unordered associative container caches the hash code or not depends on\n-      a number of factors. The caching policy for GCC 4.8 is described below.\n+      the properties described below.\n     </para>\n     <para>\n       The C++ standard requires that <code>erase</code> and <code>swap</code>\n@@ -432,23 +432,8 @@\n       or <code>throw()</code>.\n     </para>\n     <para>\n-      Secondly, libstdc++ also needs the hash code in the implementation of\n-      <code>local_iterator</code> and <code>const_local_iterator</code> in\n-      order to know when the iterator has reached the end of the bucket.\n-      This means that the local iterator types will embed a copy of the hash\n-      function when possible.\n-      Because the local iterator types must be DefaultConstructible and\n-      CopyAssignable, if the hash function type does not model those concepts\n-      then it cannot be embedded and so the hash code must be cached.\n-      Note that a hash function might not be safe to use when\n-      default-constructed (e.g if it a function pointer) so a hash\n-      function that is contained in a local iterator won't be used until\n-      the iterator is valid, so the hash function has been copied from a\n-      correctly-initialized object.\n-    </para>\n-    <para>\n-      If the hash function is non-throwing, DefaultConstructible and\n-      CopyAssignable then libstdc++ doesn't need to cache the hash code for\n+      If the hash function is non-throwing then libstdc++ doesn't need to\n+      cache the hash code for\n       correctness, but might still do so for performance if computing a\n       hash code is an expensive operation, as it may be for arbitrarily\n       long strings."}, {"sha": "4297c5fc750db8c7b30528486265100cb135fba1", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "patch": "@@ -42,10 +42,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __cache_default\n       =  __not_<__and_<// Do not cache for fast hasher.\n \t\t       __is_fast_hash<_Hash>,\n-\t\t       // Mandatory to make local_iterator default\n-\t\t       // constructible and assignable.\n-\t\t       is_default_constructible<_Hash>,\n-\t\t       is_copy_assignable<_Hash>,\n \t\t       // Mandatory to have erase not throwing.\n \t\t       __detail::__is_noexcept_hash<_Tp, _Hash>>>;\n \n@@ -282,22 +278,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    \"Functor used to map hash code to bucket index\"\n \t\t    \" must be default constructible\");\n \n-      // When hash codes are not cached local iterator inherits from\n-      // __hash_code_base above to compute node bucket index so it has to be\n-      // default constructible.\n-      static_assert(__if_hash_not_cached<\n-\t\t    is_default_constructible<__hash_code_base_access>>::value,\n-\t\t    \"Cache the hash code or make functors involved in hash code\"\n-\t\t    \" and bucket index computation default constructible\");\n-\n-      // When hash codes are not cached local iterator inherits from\n-      // __hash_code_base above to compute node bucket index so it has to be\n-      // assignable.\n-      static_assert(__if_hash_not_cached<\n-\t\t      is_copy_assignable<__hash_code_base>>::value,\n-\t\t    \"Cache the hash code or make functors involved in hash code\"\n-\t\t    \" and bucket index computation copy assignable\");\n-\n       template<typename _Keya, typename _Valuea, typename _Alloca,\n \t       typename _ExtractKeya, typename _Equala,\n \t       typename _H1a, typename _H2a, typename _Hasha,"}, {"sha": "30784f85fc495eaf6530c7ae620a2889f30e2404", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/instantiation_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff956e3c2b0369d8312e9fb3f9fab0b67720b07/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Finstantiation_neg.cc?ref=6ff956e3c2b0369d8312e9fb3f9fab0b67720b07", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"with noexcept\" \"\" { target *-*-* } 270 }\n+// { dg-error \"with noexcept\" \"\" { target *-*-* } 266 }\n \n #include <unordered_set>\n "}, {"sha": "2365556767c25db0ce9fa6426a34074e46a3de6f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/not_default_constructible_hash_neg.cc", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc36b1593a7c767da5fbd45c9d64163301412b5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc36b1593a7c767da5fbd45c9d64163301412b5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fnot_default_constructible_hash_neg.cc?ref=8fc36b1593a7c767da5fbd45c9d64163301412b5", "patch": "@@ -1,51 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-std=c++11\" }\n-// { dg-require-normal-mode \"\" }\n-\n-// Copyright (C) 2013-2014 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-error \"default constructible\" \"\" { target *-*-* } 288 }\n-\n-#include <unordered_set>\n-\n-namespace\n-{\n-  struct hash\n-  {\n-    hash(std::size_t seed)\n-      : _M_seed(seed)\n-    { }\n-\n-    std::size_t operator() (int val) const noexcept\n-    { return val ^ _M_seed; }\n-\n-  private:\n-    std::size_t _M_seed;\n-  };\n-}\n-\n-void\n-test01()\n-{\n-  using traits = std::__detail::_Hashtable_traits<false, true, true>;\n-  using hashtable = std::__uset_hashtable<int, hash,\n-\t\t\t\t\t  std::equal_to<int>,\n-\t\t\t\t\t  std::allocator<int>, traits>;\n-\n-  hashtable ht(10, hash(1));\n-}"}]}