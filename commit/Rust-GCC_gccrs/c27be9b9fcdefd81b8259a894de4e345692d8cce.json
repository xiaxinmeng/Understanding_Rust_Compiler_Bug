{"sha": "c27be9b9fcdefd81b8259a894de4e345692d8cce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI3YmU5YjlmY2RlZmQ4MWI4MjU5YTg5NGRlNGUzNDU2OTJkOGNjZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-05T22:10:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-05T22:10:23Z"}, "message": "pt.c (instantiate_decl): Do save and restore file position.\n\n\t* pt.c (instantiate_decl): Do save and restore file position.\n\t* method.c (build_decl_overload_real): Clear\n\tnumeric_output_need_bar after __.\n\t* call.c (build_new_method_call): Issue 'incomplete type' error,\n\tif class is not defined.\n\nFrom-SVN: r22856", "tree": {"sha": "69bdf981d82476dc6068212b923d5fe55ae43124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69bdf981d82476dc6068212b923d5fe55ae43124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c27be9b9fcdefd81b8259a894de4e345692d8cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27be9b9fcdefd81b8259a894de4e345692d8cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27be9b9fcdefd81b8259a894de4e345692d8cce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27be9b9fcdefd81b8259a894de4e345692d8cce/comments", "author": null, "committer": null, "parents": [{"sha": "cac8ce95a1e4c7b10f5847d35b3650e6fba8d38c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac8ce95a1e4c7b10f5847d35b3650e6fba8d38c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac8ce95a1e4c7b10f5847d35b3650e6fba8d38c"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "7bf7f57bd3af0708a7376c482f597e364ac938cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c27be9b9fcdefd81b8259a894de4e345692d8cce", "patch": "@@ -1,4 +1,18 @@\n-Tue Oct  6 00:07:14 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+1998-10-05  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_decl): Do save and restore file position.\n+\n+1998-10-05  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* method.c (build_decl_overload_real): Clear\n+\tnumeric_output_need_bar after __.\n+\n+1998-10-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* call.c (build_new_method_call): Issue 'incomplete type' error,\n+\tif class is not defined.\n+\n+1998-10-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* call.c (build_object_call): Move declaration of variable\n \t`fn' into the scope where it is used.  Don't access variable"}, {"sha": "07ed1aebdccb675e465b9d4361778c4eddebfe86", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c27be9b9fcdefd81b8259a894de4e345692d8cce", "patch": "@@ -3689,8 +3689,12 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       /* XXX will LOOKUP_SPECULATIVELY be needed when this is done?  */\n       if (flags & LOOKUP_SPECULATIVELY)\n \treturn NULL_TREE;\n-      cp_error (\"no matching function for call to `%T::%D (%A)%V'\", basetype,\n-\t\tpretty_name, user_args, TREE_TYPE (TREE_TYPE (instance_ptr)));\n+      if (TYPE_SIZE (basetype) == 0)\n+\tincomplete_type_error (instance_ptr, basetype);\n+      else\n+\tcp_error (\"no matching function for call to `%T::%D (%A)%V'\",\n+\t\t  basetype, pretty_name, user_args,\n+\t\t  TREE_TYPE (TREE_TYPE (instance_ptr)));\n       print_z_candidates (candidates);\n       return error_mark_node;\n     }"}, {"sha": "819fb51b821aad64ee984a0bfebcae2098cb1621", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c27be9b9fcdefd81b8259a894de4e345692d8cce", "patch": "@@ -1527,6 +1527,7 @@ build_decl_overload_real (dname, parms, ret_type, tparms, targs,\n      and figure out its name without any extra encoding.  */\n \n   OB_PUTC2 ('_', '_');\n+  numeric_output_need_bar = 0;\n \n   if (tparms)\n     {"}, {"sha": "83dfde549b85b0e42841d73c00947b6f1e8632ad", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27be9b9fcdefd81b8259a894de4e345692d8cce/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c27be9b9fcdefd81b8259a894de4e345692d8cce", "patch": "@@ -8005,6 +8005,8 @@ instantiate_decl (d)\n   tree gen_tmpl;\n   int nested = in_function_p ();\n   int pattern_defined;\n+  int line = lineno;\n+  char *file = input_filename;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n@@ -8140,7 +8142,11 @@ instantiate_decl (d)\n \t       && ! at_eof))\n     {\n       /* Defer all templates except inline functions used in another\n-         function.  */\n+         function.  We restore the source position here because it's used\n+         by add_pending_template.  */\n+      lineno = line;\n+      input_filename = file;\n+\n       if (at_eof && !pattern_defined \n \t  && DECL_EXPLICIT_INSTANTIATION (d))\n \t/* [temp.explicit]\n@@ -8213,6 +8219,9 @@ instantiate_decl (d)\n     }\n \n out:\n+  lineno = line;\n+  input_filename = file;\n+\n   pop_from_top_level ();\n   pop_tinst_level ();\n "}]}