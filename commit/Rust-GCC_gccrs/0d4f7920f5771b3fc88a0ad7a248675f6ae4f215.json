{"sha": "0d4f7920f5771b3fc88a0ad7a248675f6ae4f215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0Zjc5MjBmNTc3MWIzZmM4OGEwYWQ3YTI0ODY3NWY2YWU0ZjIxNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-31T08:30:53Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-31T08:30:53Z"}, "message": "warn_summary (longLineFilter): New shell function to encapsulate this functionality.\n\n        * warn_summary (longLineFilter): New shell function to encapsulate\n        this functionality.  It is off by default, only active if -llf\n        flag is specified.\n        (subdirectoryFilter): Fix bug in filtering which made some\n        subdirectory warnings erroneously appear in the toplevel set.\n        (stageNfilter): Renamed from `stageNwarns'.  Updated to collect\n        warnings from stage1 as well as stage0, which means warnings from\n        outside the bootstrap directory.  Eg, the libraries, etc.\n        (warningFilter): New shell function to encapsulate this\n        functionality.\n        (keywordFilter): New shell function to encapsulate this\n        functionality.\n        Store data in a temp file rather than calculating it 3x.  Arrange\n        to remove it on exit and signals.\n        Add -pass/-wpass flags to do \"pass through\" (i.e. manual\n        inspection) of bootstrap output from a particular stageN as well\n        as language subdirs.\n        Add better comments/documentation.\n\nFrom-SVN: r23473", "tree": {"sha": "aa82eb6a7b851658dd48e17bac5e07380d435374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa82eb6a7b851658dd48e17bac5e07380d435374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215/comments", "author": null, "committer": null, "parents": [{"sha": "bf39dde3b1c57d107b03f3bd5734e398c0269c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf39dde3b1c57d107b03f3bd5734e398c0269c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf39dde3b1c57d107b03f3bd5734e398c0269c62"}], "stats": {"total": 182, "additions": 148, "deletions": 34}, "files": [{"sha": "a2b2401869513fd95cfc2169f88a9579b4741efe", "filename": "contrib/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=0d4f7920f5771b3fc88a0ad7a248675f6ae4f215", "patch": "@@ -1,3 +1,27 @@\n+Sat Oct 31 10:53:40 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* warn_summary (longLineFilter): New shell function to encapsulate\n+ \tthis functionality.  It is off by default, only active if -llf\n+ \tflag is specified.\n+  \t(subdirectoryFilter): Fix bug in filtering which made some\n+ \tsubdirectory warnings erroneously appear in the toplevel set.\n+  \t(stageNfilter): Renamed from `stageNwarns'.  Updated to collect\n+ \twarnings from stage1 as well as stage0, which means warnings from\n+ \toutside the bootstrap directory.  Eg, the libraries, etc.\n+  \t(warningFilter): New shell function to encapsulate this\n+ \tfunctionality.\n+\t(keywordFilter): New shell function to encapsulate this\n+ \tfunctionality.\n+\n+\tStore data in a temp file rather than calculating it 3x.  Arrange\n+\tto remove it on exit and signals.\n+\n+\tAdd -pass/-wpass flags to do \"pass through\" (i.e. manual\n+ \tinspection) of bootstrap output from a particular stageN as well\n+ \tas language subdirs.\n+\n+\tAdd better comments/documentation.\t\n+\n Sat Oct 31 16:39:31 1998  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* egcs_update: Add comment about keeping the FAQ synchronized."}, {"sha": "21dfe99fa77d6705e19de315a2dc18a7fa8a1fff", "filename": "contrib/warn_summary", "status": "modified", "additions": 124, "deletions": 34, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215/contrib%2Fwarn_summary", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4f7920f5771b3fc88a0ad7a248675f6ae4f215/contrib%2Fwarn_summary", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fwarn_summary?ref=0d4f7920f5771b3fc88a0ad7a248675f6ae4f215", "patch": "@@ -1,39 +1,129 @@\n #!/bin/sh\n+#\n # This script parses the output of a gcc bootstrap when using warning\n # flags and determines various statistics.\n+# \n+# usage: warn_summary [-llf] [-s stage] [-nosub|-ch|-cp|-f|-java]\n+# \t[-pass|-wpass] [file(s)]\n+#\n+# -llf\n+# Filter out long lines from the bootstap output before any other\n+# action.  This is useful for systems with broken awks/greps which choke\n+# on long lines.  It is not done by default as it sometimes slows things\n+# down.\n+#\n+# -s number\n+# Take warnings from stage \"Number\".  Stage 0 means show warnings from\n+# before and after the gcc bootstrap directory.  E.g. libraries, etc.\n+# This presupposes using \"gcc -W*\" for the stage1 compiler.\n+#\n+# -nosub\n+# Only show warnings from the gcc top level directory.\n+# -ch|-cp|-f|-java\n+# Only show warnings from the specified language subdirectory.\n+# These flags assume the output contains \"Entering/Leaving\" messages from\n+# gnu make.  They override each other so only the last one takes effect.\n+#\n+# -pass\n+# Pass through the bootstrap output after filtering stage and subdir\n+# (useful for manual inspection.)  This is all lines, not just warnings.\n+# -wpass\n+# Pass through only warnings from the bootstrap output after filtering\n+# stage and subdir.\n #\n # By Kaveh Ghazi  (ghazi@caip.rutgers.edu)  12/13/97.\n \n+\n+# Some awks choke on long lines, sed seems to do a better job.\n+# Truncate lines > 255 characters.  RE '.\\{255,\\}' doesn't seem to work. :-(\n+# Only do this if -llf was specified, because it can really slow things down.\n+longLineFilter()\n+{\n+  if test -z \"$llf\" ; then\n+    cat $1\n+  else\n+    sed 's/^\\(...............................................................................................................................................................................................................................................................\\).*/\\1/' $1\n+  fi\n+}\n+\n # This function does one of three things.  It either passes through\n # all warning data, or passes through gcc toplevel warnings, or passes\n # through a particular subdirectory set of warnings.\n subdirectoryFilter()\n {\n-  if test \"$filter\" = '' ; then\n+  longLineFilter $1 | (\n+  if test -z \"$filter\" ; then\n     # Pass through all lines.\n-    cat $1\n+    cat\n   else\n     if test \"$filter\" = nosub ; then\n       # Omit all subdirectories.\n-      $AWK 'BEGIN{t=1} ; /^cd [a-z]*; make/{if(t==1)t=0} ; /Leaving directory/{if(t==0)t=1} ; {if(t==1)print}' $1\n+      $AWK 'BEGIN{t=1} ; /Entering directory.*\\/gcc\\/[a-z]/{t--} ; /Leaving directory.*\\/gcc\\/[a-z]/{t++} ; {if(t==1)print}'\n     else\n       # Pass through only subdir $filter.\n-      $AWK \"/^cd $filter\"'; make/{if(t==0)t=1} ; /Leaving directory/{if(t==1)t=0} ; {if(t==1)print}' $1\n+      $AWK \"BEGIN {t=-1} ; /^cd $filter; make/{t=0} ; /Entering directory .*\\/gcc\\/$filter/{t++} ; /Leaving directory .*\\/gcc\\/$filter/{t--} ; {if(t==1)print}\"\n     fi\n-  fi      \n+  fi )\n }\n \n-# This function displays all warnings from stageN of the bootstrap.\n-stageNwarns()\n+# This function displays all lines from stageN of the bootstrap.  If\n+# stage==0, then show lines prior to stage1 and lines from after the last\n+# stage.  I.e. utilities, libraries, etc.\n+stageNfilter()\n {\n-  stageNminus1=`expr $stageN - 1`\n-# Some awks choke on long lines so grep them out.\n-  grep -v libf2c.a $1 | \\\n-\t$AWK \"/ warning: /{if(t==1)print} ; /stage$stageNminus1/{if(t==0)t=1} ; /stage$stageN/{if(t==1)t=0}\"\n+  if test \"$stageN\" -lt 1 ; then\n+    # stage \"0\" means check everything *but* gcc.\n+    $AWK \"BEGIN{t=1} ; /^Bootstrapping the compiler/{t=0} ; /^Building runtime libraries/{t=1} ; {if(t==1)print}\"\n+  else\n+    if test \"$stageN\" -eq 1 ; then\n+      $AWK \"/^Bootstrapping the compiler|^Building the C and C\\+\\+ compiler/{t=1} ; /stage$stageN/{t=0} ; {if(t==1)print}\"\n+    else\n+      stageNminus1=`expr $stageN - 1`\n+      $AWK \"/stage$stageNminus1/{t=1} ; /stage$stageN/{t=0} ; {if(t==1)print}\"\n+    fi\n+  fi\n+}\n+\n+# This function displays lines containing warnings.\n+warningFilter()\n+{\n+  grep ' warning: ' $1\n }\n \n-usage=\"usage: `basename $0` [-s stage] [-nosub|-ch|-cp|-f|-java] [file(s)]\"\n+# This function replaces `xxx' with `???', where xxx is usually some\n+# variable or function name.  This allows similar warnings to be\n+# counted together when summarizing.  However it avoids replacing\n+# certain C keywords which are known appear in various messages.\n+\n+keywordFilter() {\n+  sed 's/.*warning: //; \n+\ts/`\\(int\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(long\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(char\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(inline\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(else\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(return\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(static\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(extern\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(const\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(noreturn\\)'\"'\"'/\"\\1\"/g;\n+\ts/`\\(longjmp\\)'\"'\"' or `\\(vfork\\)'\"'\"'/\"\\1\" or \"\\2\"/g;\n+\ts/`'\"[^']*'/\"'`???'\"'/g;\"'\n+\ts/.*format, .* arg (arg [0-9][0-9]*)/??? format, ??? arg (arg ???)/;\n+\ts/\\([( ]\\)arg [0-9][0-9]*\\([) ]\\)/\\1arg ???\\2/;\n+\ts/\"\\([^\"]*\\)\"/`\\1'\"'\"'/g'\n+}\n+\n+\n+# Start the main section.\n+\n+usage=\"usage: `basename $0` [-llf] [-s stage] [-nosub|-ch|-cp|-f|-java] [-pass|-wpass] [file(s)]\"\n stageN=3\n+tmpfile=/tmp/tmp-warn.$$\n+\n+# Remove $tmpfile on exit and various signals.\n+trap \"rm -f $tmpfile\" 0\n+trap \"rm -f $tmpfile ; exit 1\" 1 2 3 5 9 13 15\n \n # Find a good awk.\n if test -z \"$AWK\" ; then\n@@ -46,25 +136,41 @@ if test -z \"$AWK\" ; then\n   done\n fi\n \n+# Parse command line arguments.\n while test -n \"$1\" ; do\n  case \"$1\" in\n+   -llf) llf=1 ; shift ;;\n    -s)  if test -z \"$2\"; then echo $usage; exit 1; fi; stageN=\"$2\"; shift 2 ;;\n    -s*) stageN=\"`expr $1 : '-s\\(.*\\)'`\" ; shift ;;\n    -nosub|-ch|-cp|-f|-java) filter=\"`expr $1 : '-\\(.*\\)'`\" ; shift ;;\n+   -pass) pass=1 ; shift ;;\n+   -wpass) pass=w ; shift ;;\n    -*)  echo $usage ; exit 1 ;;\n    *)   break ;;\n  esac\n done\n \n # Check for a valid value of $stageN.\n case \"$stageN\" in\n-  [1-9]) ;;\n-  *) echo \"Stage <$stageN> must be in the range [1..9].\" ; exit 1 ;;\n+  [0-9]) ;;\n+  *) echo \"Stage <$stageN> must be in the range [0..9].\" ; exit 1 ;;\n esac\n \n for file in \"$@\" ; do\n \n-  if test \"$filter\" = '' ; then\n+  subdirectoryFilter $file | stageNfilter > $tmpfile\n+\n+  # (Just) show me the warnings.\n+  if test \"$pass\" != '' ; then\n+    if test \"$pass\" = w ; then\n+      warningFilter $tmpfile\n+    else\n+      cat $tmpfile\n+    fi\n+    continue\n+  fi\n+\n+  if test -z \"$filter\" ; then\n     echo \"Counting all warnings,\"\n   else\n     if test \"$filter\" = nosub ; then\n@@ -73,31 +179,15 @@ for file in \"$@\" ; do\n       echo \"Counting warnings in the gcc/$filter subdirectory,\"\n     fi\n   fi\n-  count=`subdirectoryFilter $file | stageNwarns | wc -l`\n+  count=`warningFilter $tmpfile | wc -l`\n   echo there are $count warnings in stage$stageN of this bootstrap.\n \n   echo\n   echo Number of warnings per file:\n-  subdirectoryFilter $file | stageNwarns | $AWK -F: '{print$1}' | \\\n-\tsort | uniq -c | sort -nr\n+  warningFilter $tmpfile | $AWK -F: '{print$1}' | sort | uniq -c | sort -nr\n \n   echo\n   echo Number of warning types:\n-  subdirectoryFilter $file | stageNwarns | sed 's/.*warning: //; \n-\t\ts/`\\(int\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(long\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(char\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(inline\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(else\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(return\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(static\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(extern\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(const\\)'\"'\"'/\"\\1\"/g;\n-\t\ts/`\\(longjmp\\)'\"'\"' or `\\(vfork\\)'\"'\"'/\"\\1\" or \"\\2\"/g;\n-\t\ts/`'\"[^']*'/\"'`???'\"'/g;\"'\n-\t\ts/.*format, .* arg (arg [0-9][0-9]*)/??? format, ??? arg (arg ???)/;\n-\t\ts/\\([( ]\\)arg [0-9][0-9]*\\([) ]\\)/\\1arg ???\\2/;\n-\t\ts/\"\\([^\"]*\\)\"/`\\1'\"'\"'/g' | \\\n-\tsort | uniq -c | sort -nr\n+  warningFilter $tmpfile | keywordFilter | sort | uniq -c | sort -nr\n \n done"}]}