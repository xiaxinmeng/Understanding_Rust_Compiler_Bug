{"sha": "0103c2e4082c5a342a6834d31ea52bc7e5498016", "node_id": "C_kwDOANBUbNoAKDAxMDNjMmU0MDgyYzVhMzQyYTY4MzRkMzFlYTUyYmM3ZTU0OTgwMTY", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-01-24T10:17:47Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-02-08T04:39:31Z"}, "message": "Don't propagate for a more expensive reg-reg move.\n\nFor i386, it enables optimization like:\n\n        vmovd   %xmm0, %edx\n-       vmovd   %xmm0, %eax\n+       movl    %edx, %eax\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/104059\n\t* regcprop.cc (copyprop_hardreg_forward_1): Don't propagate\n\tfor a more expensive reg-reg move.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr104059.c: New test.", "tree": {"sha": "36b29e21841b7dc2285079e3b35b5b50f4329871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36b29e21841b7dc2285079e3b35b5b50f4329871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0103c2e4082c5a342a6834d31ea52bc7e5498016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0103c2e4082c5a342a6834d31ea52bc7e5498016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0103c2e4082c5a342a6834d31ea52bc7e5498016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0103c2e4082c5a342a6834d31ea52bc7e5498016/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2430c122a49130b2b0a8a67455db30bbb8fd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2430c122a49130b2b0a8a67455db30bbb8fd00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2430c122a49130b2b0a8a67455db30bbb8fd00"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "1fdc36713cd1abf6ec4fac2f6d1e060303e8e593", "filename": "gcc/regcprop.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0103c2e4082c5a342a6834d31ea52bc7e5498016/gcc%2Fregcprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0103c2e4082c5a342a6834d31ea52bc7e5498016/gcc%2Fregcprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.cc?ref=0103c2e4082c5a342a6834d31ea52bc7e5498016", "patch": "@@ -892,6 +892,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n       if (set && REG_P (SET_SRC (set)))\n \t{\n \t  rtx src = SET_SRC (set);\n+\t  rtx dest = SET_DEST (set);\n \t  unsigned int regno = REGNO (src);\n \t  machine_mode mode = GET_MODE (src);\n \t  unsigned int i;\n@@ -915,7 +916,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \n \t  /* If the destination is also a register, try to find a source\n \t     register in the same class.  */\n-\t  if (REG_P (SET_DEST (set)))\n+\t  if (REG_P (dest))\n \t    {\n \t      new_rtx = find_oldest_value_reg (REGNO_REG_CLASS (regno),\n \t\t\t\t\t       src, vd);\n@@ -943,6 +944,20 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t\t\t\t       mode, i, regno);\n \t      if (new_rtx != NULL_RTX)\n \t\t{\n+\t\t  /* Don't propagate for a more expensive reg-reg move.  */\n+\t\t  if (REG_P (dest))\n+\t\t    {\n+\t\t      enum reg_class from = REGNO_REG_CLASS (regno);\n+\t\t      enum reg_class to = REGNO_REG_CLASS (REGNO (dest));\n+\t\t      enum reg_class new_from = REGNO_REG_CLASS (i);\n+\t\t      unsigned int original_cost\n+\t\t\t= targetm.register_move_cost (mode, from, to);\n+\t\t      unsigned int after_cost\n+\t\t\t= targetm.register_move_cost (mode, new_from, to);\n+\t\t      if (after_cost > original_cost)\n+\t\t\tcontinue;\n+\t\t    }\n+\n \t\t  if (validate_change (insn, &SET_SRC (set), new_rtx, 0))\n \t\t    {\n \t\t      ORIGINAL_REGNO (new_rtx) = ORIGINAL_REGNO (src);"}, {"sha": "4815fa38d217725558b88850beb810b7ae6db529", "filename": "gcc/testsuite/gcc.target/i386/pr104059.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0103c2e4082c5a342a6834d31ea52bc7e5498016/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104059.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0103c2e4082c5a342a6834d31ea52bc7e5498016/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104059.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104059.c?ref=0103c2e4082c5a342a6834d31ea52bc7e5498016", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2 -fdump-rtl-cprop_hardreg-details\" } */\n+/* { dg-final { scan-rtl-dump-not {replaced reg [0-9]* with [0-9]*} \"cprop_hardreg\" } } */\n+\n+#include<stdint.h>\n+int test (uint8_t *p, uint32_t t[1][1], int n) {\n+\n+  int sum = 0;\n+  uint32_t a0;\n+  for (int i = 0; i < 4; i++, p++)\n+    t[i][0] = p[0];\n+\n+  for (int i = 0; i < 4; i++) {\n+    {\n+      int t0 = t[0][i] + t[0][i];\n+      a0 = t0;\n+    };\n+    sum += a0;\n+  }\n+  return (((uint16_t)sum) + ((uint32_t)sum >> 16)) >> 1;\n+}\n+"}]}