{"sha": "5bd60ce6de2d4e0b0e7975c04772393b76b97909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJkNjBjZTZkZTJkNGUwYjBlNzk3NWMwNDc3MjM5M2I3NmI5NzkwOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-09-18T18:24:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-09-18T18:24:32Z"}, "message": "combine.c (combine_simplify_rtx): Use gen_unary to distribute the NOT for De Morgan's rule.\n\n        * combine.c (combine_simplify_rtx): Use gen_unary to distribute\n        the NOT for De Morgan's rule.\n        * simplify-rtx.c (simplify_unary_operation): Simplify a BImode NOT\n        of a comparison to the reverse comparison.\n\nFrom-SVN: r36506", "tree": {"sha": "ddee6e9c6a5df5d1308e04b8d34274665f561576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddee6e9c6a5df5d1308e04b8d34274665f561576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bd60ce6de2d4e0b0e7975c04772393b76b97909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd60ce6de2d4e0b0e7975c04772393b76b97909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd60ce6de2d4e0b0e7975c04772393b76b97909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd60ce6de2d4e0b0e7975c04772393b76b97909/comments", "author": null, "committer": null, "parents": [{"sha": "b4927ead98f192ffb7f0893ccf64a1afec298465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4927ead98f192ffb7f0893ccf64a1afec298465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4927ead98f192ffb7f0893ccf64a1afec298465"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "2e1a280d33b9318667e286ed186da1e1e9906afd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd60ce6de2d4e0b0e7975c04772393b76b97909/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd60ce6de2d4e0b0e7975c04772393b76b97909/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bd60ce6de2d4e0b0e7975c04772393b76b97909", "patch": "@@ -1,5 +1,10 @@\n 2000-09-18  Richard Henderson  <rth@cygnus.com>\n \n+\t* combine.c (combine_simplify_rtx): Use gen_unary to distribute\n+\tthe NOT for De Morgan's rule.\n+\t* simplify-rtx.c (simplify_unary_operation): Simplify a BImode NOT\n+\tof a comparison to the reverse comparison.\n+\n \t* combine.c (try_combine): Allow split to create a single insn.\n \n \t* machmode.def: Add BImode.  Add a column for bitsize."}, {"sha": "033bfac8d640f04743c4e68554193a1013b42459", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd60ce6de2d4e0b0e7975c04772393b76b97909/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd60ce6de2d4e0b0e7975c04772393b76b97909/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5bd60ce6de2d4e0b0e7975c04772393b76b97909", "patch": "@@ -3933,21 +3933,17 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n       if (GET_CODE (XEXP (x, 0)) == IOR || GET_CODE (XEXP (x, 0)) == AND)\n  \t{\n \t  rtx in1 = XEXP (XEXP (x, 0), 0), in2 = XEXP (XEXP (x, 0), 1);\n+\t  enum machine_mode op_mode;\n \n-\t  if (GET_CODE (in1) == NOT)\n-\t    in1 = XEXP (in1, 0);\n-\t  else\n-\t    in1 = gen_rtx_combine (NOT, GET_MODE (in1), in1);\n+\t  op_mode = GET_MODE (in1);\n+\t  in1 = gen_unary (NOT, op_mode, op_mode, in1);\n \n-\t  if (GET_CODE (in2) == NOT)\n-\t    in2 = XEXP (in2, 0);\n-\t  else if (GET_CODE (in2) == CONST_INT\n-\t\t   && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n-\t    in2 = GEN_INT (GET_MODE_MASK (mode) & ~INTVAL (in2));\n-\t  else\n-\t    in2 = gen_rtx_combine (NOT, GET_MODE (in2), in2);\n+\t  op_mode = GET_MODE (in2);\n+\t  if (op_mode == VOIDmode)\n+\t    op_mode = mode;\n+\t  in2 = gen_unary (NOT, op_mode, op_mode, in2);\n \n-\t  if (GET_CODE (in2) == NOT)\n+\t  if (GET_CODE (in2) == NOT && GET_CODE (in1) != NOT)\n \t    {\n \t      rtx tem = in2;\n \t      in2 = in1; in1 = tem;"}, {"sha": "eb1ac584dbb8b1c587a38192b4cf9981fabc2603", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd60ce6de2d4e0b0e7975c04772393b76b97909/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd60ce6de2d4e0b0e7975c04772393b76b97909/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5bd60ce6de2d4e0b0e7975c04772393b76b97909", "patch": "@@ -583,10 +583,21 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t aren't constant.  */\n       switch (code)\n \t{\n-\tcase NEG:\n \tcase NOT:\n-\t  /* (not (not X)) == X, similarly for NEG.  */\n-\t  if (GET_CODE (op) == code)\n+\t  /* (not (not X)) == X.  */\n+\t  if (GET_CODE (op) == NOT)\n+\t    return XEXP (op, 0);\n+\n+\t  /* (not (eq X Y)) == (ne X Y), etc.  */\n+\t  if (mode == BImode && GET_RTX_CLASS (GET_CODE (op)) == '<'\n+\t      && can_reverse_comparison_p (op, NULL_RTX))\n+\t    return gen_rtx_fmt_ee (reverse_condition (GET_CODE (op)),\n+\t\t\t\t   op_mode, XEXP (op, 0), XEXP (op, 1));\n+\t  break;\n+\n+\tcase NEG:\n+\t  /* (neg (neg X)) == X.  */\n+\t  if (GET_CODE (op) == NEG)\n \t    return XEXP (op, 0);\n \t  break;\n "}]}