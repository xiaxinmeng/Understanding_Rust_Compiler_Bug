{"sha": "76d7d5334991a5646026e5aa8c3e7d23629f383a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkN2Q1MzM0OTkxYTU2NDYwMjZlNWFhOGMzZTdkMjM2MjlmMzgzYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:02:19Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:02:19Z"}, "message": "[arm] Add architectural options\n\n\nThis patch adds the currently supported architecture options to the\nindividual architectures.  For floating point and SIMD we only permit\nvariants that the relevant versions of the architecture permit.  We also\nadd short-hand versions (+fp, +simd, etc) that allows the user to\ndescribe using floating point without having to know the precise version\nof the floating point sub-architecture that that architecture requires.\n\nIn a small number of cases we need to provide more precise versions of the\nfloating point architecture.  In those cases we permit traditional -mfpu\nstyle names in the architecture description.\n\n\t* arm-cpus.in (armv5e): Add options fp, vfpv2 and nofp.\n\t(armv5te, armv5tej): Likewise.\n\t(armv6, armv6j, armv6k, armv6z, armv6kz, armv6zk, armv6t2): Likewise.\n\t(armv7): Add options fp and vfpv3-d16.\n\t(armv7-a): Add options fp, simd, vfpv3, vfpv3-d16, vfpv3-d16-fp16,\n\tvfpv3-fp16, vfpv4, vfpv4-d16, neon, neon-vfpv3, neon-fp16, neon-vfpv4,\n\tnofp and nosimd.\n\t(armv7ve): Likewise.\n\t(armv7-r): Add options fp, fp.sp, idiv, nofp and noidiv.\n\t(armv7e-m): Add options fp, fpv5, fp.dp and nofp.\n\t(armv8-a): Add nocrypto option.\n\t(armv8.1-a, armv8.2-a): Likewise.\n\t(armv8-m.main): add options fp, fp.dp and nofp.\n\nFrom-SVN: r249283", "tree": {"sha": "a2cfb9f67fd2e20b344b3022d0394614f6c36f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2cfb9f67fd2e20b344b3022d0394614f6c36f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d7d5334991a5646026e5aa8c3e7d23629f383a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d7d5334991a5646026e5aa8c3e7d23629f383a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d7d5334991a5646026e5aa8c3e7d23629f383a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d7d5334991a5646026e5aa8c3e7d23629f383a/comments", "author": null, "committer": null, "parents": [{"sha": "250e088bc454927486f988aecbb0ec381ca7e76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250e088bc454927486f988aecbb0ec381ca7e76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/250e088bc454927486f988aecbb0ec381ca7e76e"}], "stats": {"total": 489, "additions": 474, "deletions": 15}, "files": [{"sha": "287828905135051a1ef46ced0c51d5c6ce8554c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d7d5334991a5646026e5aa8c3e7d23629f383a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d7d5334991a5646026e5aa8c3e7d23629f383a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76d7d5334991a5646026e5aa8c3e7d23629f383a", "patch": "@@ -1,3 +1,19 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-cpus.in (armv5e): Add options fp, vfpv2 and nofp.\n+\t(armv5te, armv5tej): Likewise.\n+\t(armv6, armv6j, armv6k, armv6z, armv6kz, armv6zk, armv6t2): Likewise.\n+\t(armv7): Add options fp and vfpv3-d16.\n+\t(armv7-a): Add options fp, simd, vfpv3, vfpv3-d16, vfpv3-d16-fp16,\n+\tvfpv3-fp16, vfpv4, vfpv4-d16, neon, neon-vfpv3, neon-fp16, neon-vfpv4,\n+\tnofp and nosimd.\n+\t(armv7ve): Likewise.\n+\t(armv7-r): Add options fp, fp.sp, idiv, nofp and noidiv.\n+\t(armv7e-m): Add options fp, fpv5, fp.dp and nofp.\n+\t(armv8-a): Add nocrypto option.\n+\t(armv8.1-a, armv8.2-a): Likewise.\n+\t(armv8-m.main): add options fp, fp.dp and nofp.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-cpus.in (armv8-a): Add options crc, simd crypto and"}, {"sha": "2a65ec6f119f5864bc141ccf4399bd2cd5979456", "filename": "gcc/config/arm/arm-cpu-data.h", "status": "modified", "additions": 375, "deletions": 15, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d7d5334991a5646026e5aa8c3e7d23629f383a/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d7d5334991a5646026e5aa8c3e7d23629f383a/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-data.h?ref=76d7d5334991a5646026e5aa8c3e7d23629f383a", "patch": "@@ -1365,6 +1365,342 @@ static const struct processors all_cores[] =\n   {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL, NULL}\n };\n \n+static const struct cpu_option arch_opttab_armv5e[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv5te[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv5tej[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv6[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv6j[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv6k[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv6z[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv6kz[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv6zk[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv6t2[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv2\", false,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv7[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv7_a[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"simd\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"vfpv3\", false,\n+    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv4\", false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"neon\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv3\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-fp16\", false,\n+    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv4\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_NEON, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv7ve[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"simd\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"vfpv3\", false,\n+    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv4\", false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"neon\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv3\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-fp16\", false,\n+    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv4\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_NEON, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv7_r[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"fp.sp\", false,\n+    { ISA_VFPv3, isa_nobit }\n+  },\n+  {\n+    \"idiv\", false,\n+    { isa_bit_adiv, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"noidiv\", true,\n+    { isa_bit_adiv, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option arch_opttab_armv7e_m[] = {\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv4, isa_nobit }\n+  },\n+  {\n+    \"fpv5\", false,\n+    { ISA_FPv5, isa_nobit }\n+  },\n+  {\n+    \"fp.dp\", false,\n+    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n static const struct cpu_option arch_opttab_armv8_a[] = {\n   {\n     \"crc\", false,\n@@ -1382,6 +1718,10 @@ static const struct cpu_option arch_opttab_armv8_a[] = {\n     \"nofp\", true,\n     { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n   },\n+  {\n+    \"nocrypto\", true,\n+    { ISA_CRYPTO, isa_nobit }\n+  },\n   { NULL, false, {isa_nobit}}\n };\n \n@@ -1398,6 +1738,10 @@ static const struct cpu_option arch_opttab_armv8_1_a[] = {\n     \"nofp\", true,\n     { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n   },\n+  {\n+    \"nocrypto\", true,\n+    { ISA_CRYPTO, isa_nobit }\n+  },\n   { NULL, false, {isa_nobit}}\n };\n \n@@ -1418,6 +1762,10 @@ static const struct cpu_option arch_opttab_armv8_2_a[] = {\n     \"nofp\", true,\n     { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n   },\n+  {\n+    \"nocrypto\", true,\n+    { ISA_CRYPTO, isa_nobit }\n+  },\n   { NULL, false, {isa_nobit}}\n };\n \n@@ -1426,6 +1774,18 @@ static const struct cpu_option arch_opttab_armv8_m_main[] = {\n     \"dsp\", false,\n     { isa_bit_ARMv7em, isa_nobit }\n   },\n+  {\n+    \"fp\", false,\n+    { ISA_FPv5, isa_nobit }\n+  },\n+  {\n+    \"fp.dp\", false,\n+    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_FPv5, isa_nobit }\n+  },\n   { NULL, false, {isa_nobit}}\n };\n \n@@ -1527,7 +1887,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5e,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv5e,\n     NULL\n   },\n   {\n@@ -1538,7 +1898,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5te,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv5te,\n     NULL\n   },\n   {\n@@ -1549,7 +1909,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv5tej,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv5tej,\n     NULL\n   },\n   {\n@@ -1560,7 +1920,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv6,\n     NULL\n   },\n   {\n@@ -1571,7 +1931,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6j,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv6j,\n     NULL\n   },\n   {\n@@ -1582,7 +1942,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6k,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv6k,\n     NULL\n   },\n   {\n@@ -1593,7 +1953,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6z,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv6z,\n     NULL\n   },\n   {\n@@ -1604,7 +1964,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6kz,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv6zk,\n     NULL\n   },\n   {\n@@ -1615,7 +1975,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6kz,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv6kz,\n     NULL\n   },\n   {\n@@ -1626,7 +1986,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6t2,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv6t2,\n     NULL\n   },\n   {\n@@ -1659,7 +2019,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv7,\n     NULL\n   },\n   {\n@@ -1670,7 +2030,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7a,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv7_a,\n     NULL\n   },\n   {\n@@ -1681,7 +2041,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7ve,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv7ve,\n     NULL\n   },\n   {\n@@ -1692,7 +2052,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7r,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv7_r,\n     NULL\n   },\n   {\n@@ -1714,7 +2074,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv7em,\n       isa_nobit\n     },\n-    NULL,\n+    arch_opttab_armv7e_m,\n     NULL\n   },\n   {"}, {"sha": "7a1fede15f3b61a19c85fdd49254dacd45aa69c4", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d7d5334991a5646026e5aa8c3e7d23629f383a/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d7d5334991a5646026e5aa8c3e7d23629f383a/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=76d7d5334991a5646026e5aa8c3e7d23629f383a", "patch": "@@ -113,69 +113,99 @@ begin arch armv5e\n  tune flags CO_PROC\n  base 5E\n  isa ARMv5e\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv5e\n \n begin arch armv5te\n  tune for arm1026ej-s\n  tune flags CO_PROC\n  base 5TE\n  isa ARMv5te\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv5te\n \n begin arch armv5tej\n  tune for arm1026ej-s\n  tune flags CO_PROC\n  base 5TEJ\n  isa ARMv5tej\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv5tej\n \n begin arch armv6\n  tune for arm1136j-s\n  tune flags CO_PROC\n  base 6\n  isa ARMv6\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv6\n \n begin arch armv6j\n  tune for arm1136j-s\n  tune flags CO_PROC\n  base 6J\n  isa ARMv6j\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv6j\n \n begin arch armv6k\n  tune for mpcore\n  tune flags CO_PROC\n  base 6K\n  isa ARMv6k\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv6k\n \n begin arch armv6z\n  tune for arm1176jz-s\n  tune flags CO_PROC\n  base 6Z\n  isa ARMv6z\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv6z\n \n begin arch armv6kz\n  tune for arm1176jz-s\n  tune flags CO_PROC\n  base 6KZ\n  isa ARMv6kz\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv6kz\n \n begin arch armv6zk\n  tune for arm1176jz-s\n  tune flags CO_PROC\n  base 6KZ\n  isa ARMv6kz\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv6zk\n \n begin arch armv6t2\n  tune for arm1156t2-s\n  tune flags CO_PROC\n  base 6T2\n  isa ARMv6t2\n+ option fp add VFPv2 FP_DBL\n+ option vfpv2 add VFPv2 FP_DBL\n+ option nofp remove VFPv2 FP_DBL\n end arch armv6t2\n \n begin arch armv6-m\n@@ -195,41 +225,87 @@ begin arch armv7\n  tune flags CO_PROC\n  base 7\n  isa ARMv7\n+# fp => VFPv3-d16 (only useful for the A+R profile subset).\n+ option fp add VFPv3 FP_DBL\n+ option vfpv3-d16 add VFPv3 FP_DBL\n end arch armv7\n \n begin arch armv7-a\n  tune for cortex-a8\n  tune flags CO_PROC\n  base 7A\n  isa ARMv7a\n+# fp => VFPv3-d16, simd => neon-vfpv3\n+ option fp add VFPv3 FP_DBL\n+ option simd add VFPv3 NEON\n+ option vfpv3 add VFPv3 FP_D32\n+ option vfpv3-d16 add VFPv3 FP_DBL\n+ option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n+ option vfpv3-fp16 add VFPv3 FP_DBL FP_D32 bit_fp16conv\n+ option vfpv4 add VFPv4 FP_D32\n+ option vfpv4-d16 add VFPv4 FP_DBL\n+ option neon add VFPv3 NEON\n+ option neon-vfpv3 add VFPv3 NEON\n+ option neon-fp16 add VFPv3 NEON bit_fp16conv\n+ option neon-vfpv4 add VFPv4 NEON\n+ option nofp remove VFPv4 NEON\n+ option nosimd remove NEON\n end arch armv7-a\n \n begin arch armv7ve\n  tune for cortex-a8\n  tune flags CO_PROC\n  base 7A\n  isa ARMv7ve\n+# fp => VFPv4-d16, simd => neon-vfpv4\n+ option fp add VFPv4 FP_DBL\n+ option simd add VFPv4 NEON\n+ option vfpv3 add VFPv3 FP_D32\n+ option vfpv3-d16 add VFPv3 FP_DBL\n+ option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n+ option vfpv3-fp16 add VFPv3 FP_DBL FP_D32 bit_fp16conv\n+ option vfpv4 add VFPv4 FP_D32\n+ option vfpv4-d16 add VFPv4 FP_DBL\n+ option neon add VFPv3 NEON\n+ option neon-vfpv3 add VFPv3 NEON\n+ option neon-fp16 add VFPv3 NEON bit_fp16conv\n+ option neon-vfpv4 add VFPv4 NEON\n+ option nofp remove VFPv4 NEON\n+ option nosimd remove NEON\n end arch armv7ve\n \n begin arch armv7-r\n  tune for cortex-r4\n  tune flags CO_PROC\n  base 7R\n  isa ARMv7r\n+# ARMv7-r uses VFPv3-d16\n+ option fp add VFPv3 FP_DBL\n+ option fp.sp add VFPv3\n+ option idiv add bit_adiv\n+ option nofp remove VFPv3 FP_DBL\n+ option noidiv remove bit_adiv\n end arch armv7-r\n \n begin arch armv7-m\n  tune for cortex-m3\n  tune flags CO_PROC\n  base 7M\n  isa ARMv7m\n+# In theory FP is permitted in v7-m, but in practice no implementations exist.\n+# leave it out for now.\n end arch armv7-m\n \n begin arch armv7e-m\n  tune for cortex-m4\n  tune flags CO_PROC\n  base 7EM\n  isa ARMv7em\n+# fp => VFPv4-sp-d16; fpv5 => FPv5-sp-d16; fp.dp => FPv5-d16\n+ option fp add VFPv4\n+ option fpv5 add FPv5\n+ option fp.dp add FPv5 FP_DBL\n+ option nofp remove FPv5 FP_DBL\n end arch armv7e-m\n \n begin arch armv8-a\n@@ -241,6 +317,7 @@ begin arch armv8-a\n  option simd add FP_ARMv8 NEON\n  option crypto add FP_ARMv8 NEON CRYPTO\n  option nofp remove FP_ARMv8 NEON CRYPTO\n+ option nocrypto remove CRYPTO\n end arch armv8-a\n \n begin arch armv8.1-a\n@@ -251,6 +328,7 @@ begin arch armv8.1-a\n  option simd add FP_ARMv8 NEON\n  option crypto add FP_ARMv8 NEON CRYPTO\n  option nofp remove FP_ARMv8 NEON CRYPTO\n+ option nocrypto remove CRYPTO\n end arch armv8.1-a\n \n begin arch armv8.2-a\n@@ -262,6 +340,7 @@ begin arch armv8.2-a\n  option simd add FP_ARMv8 NEON\n  option crypto add FP_ARMv8 NEON CRYPTO\n  option nofp remove bit_fp16 FP_ARMv8 NEON CRYPTO\n+ option nocrypto remove CRYPTO\n end arch armv8.2-a\n \n begin arch armv8-m.base\n@@ -276,6 +355,10 @@ begin arch armv8-m.main\n  base 8M_MAIN\n  isa ARMv8m_main\n  option dsp add bit_ARMv7em\n+# fp => FPv5-sp-d16; fp.dp => FPv5-d16\n+ option fp add FPv5\n+ option fp.dp add FPv5 FP_DBL\n+ option nofp remove FPv5\n end arch armv8-m.main\n \n begin arch iwmmxt"}]}