{"sha": "0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0ZTllOGY1NDAxNWFmZDQzNWY3NTRkMmFlNTQ2NGU0YTllYWRlMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-10-09T23:33:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-09T23:33:57Z"}, "message": "bcmp.c, setenv.c: Use \"nonzero\" instead of \"non-zero\".\n\n\t* bcmp.c, setenv.c: Use \"nonzero\" instead of \"non-zero\".\n\t* strtod.c: Use \"ISO C\" instead of \"ANSI C\".\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r46136", "tree": {"sha": "38e4c72a3ba358c92386ffa59a7bc470a62b3142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38e4c72a3ba358c92386ffa59a7bc470a62b3142"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df2a54e9458547dfc9158100d4207c6559bac9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a54e9458547dfc9158100d4207c6559bac9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2a54e9458547dfc9158100d4207c6559bac9b4"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "dc5a833fb8387b946f62c185159f53ae4114d0c0", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "patch": "@@ -1,3 +1,9 @@\n+2001-10-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* bcmp.c, setenv.c: Use \"nonzero\" instead of \"non-zero\".\n+\t* strtod.c: Use \"ISO C\" instead of \"ANSI C\".\n+\t* functions.texi: Regenerate.\n+\n 2001-10-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* alloca.c, clock.c, getcwd.c, getpagesize.c, getpwd.c, index.c,"}, {"sha": "1895773d52d488762635d834b703c958b64afb85", "filename": "libiberty/bcmp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Fbcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Fbcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbcmp.c?ref=0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "patch": "@@ -6,8 +6,8 @@\n @deftypefn Supplemental int bcmp (char *@var{x}, char *@var{y}, int @var{count})\n \n Compares the first @var{count} bytes of two areas of memory.  Returns\n-zero if they are the same, non-zero otherwise.  Returns zero if\n-@var{count} is zero.  A non-zero result only indicates a difference,\n+zero if they are the same, nonzero otherwise.  Returns zero if\n+@var{count} is zero.  A nonzero result only indicates a difference,\n it does not indicate any sorting order (say, by having a positive\n result mean @var{x} sorts before @var{y}).\n "}, {"sha": "59df233947b654a2405066d52f1cd5e988eecdeb", "filename": "libiberty/functions.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "patch": "@@ -40,8 +40,8 @@ Behavior is undefined if the pathname ends in a directory separator.\n @deftypefn Supplemental int bcmp (char *@var{x}, char *@var{y}, int @var{count})\n \n Compares the first @var{count} bytes of two areas of memory.  Returns\n-zero if they are the same, non-zero otherwise.  Returns zero if\n-@var{count} is zero.  A non-zero result only indicates a difference,\n+zero if they are the same, nonzero otherwise.  Returns zero if\n+@var{count} is zero.  A nonzero result only indicates a difference,\n it does not indicate any sorting order (say, by having a positive\n result mean @var{x} sorts before @var{y}).\n \n@@ -234,7 +234,7 @@ deprecated in new programs in favor of @code{strrchr}.\n \n @code{setenv} adds @var{name} to the environment with value\n @var{value}.  If the name was already present in the environment,\n-the new value will be stored only if @var{overwrite} is non-zero.\n+the new value will be stored only if @var{overwrite} is nonzero.\n The companion @code{unsetenv} function removes @var{name} from the\n environment.  This implementation is not safe for multithreaded code.\n \n@@ -352,7 +352,7 @@ length, the function returns @var{string}.\n @c strtod.c:27\n @deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n \n-This ANSI C function converts the initial portion of @var{string} to a\n+This ISO C function converts the initial portion of @var{string} to a\n @code{double}.  If @var{endptr} is not @code{NULL}, a pointer to the\n character after the last character used in the conversion is stored in\n the location referenced by @var{endptr}.  If no conversion is"}, {"sha": "79e38ed56b0026902d7186f7e767023004d512e6", "filename": "libiberty/setenv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Fsetenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Fsetenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsetenv.c?ref=0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "patch": "@@ -24,7 +24,7 @@\n \n @code{setenv} adds @var{name} to the environment with value\n @var{value}.  If the name was already present in the environment,\n-the new value will be stored only if @var{overwrite} is non-zero.\n+the new value will be stored only if @var{overwrite} is nonzero.\n The companion @code{unsetenv} function removes @var{name} from the\n environment.  This implementation is not safe for multithreaded code.\n "}, {"sha": "6b69ccfa8d206c6594c7b668362a85fbf7b120a6", "filename": "libiberty/strtod.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Fstrtod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4e9e8f54015afd435f754d2ae5464e4a9eade3/libiberty%2Fstrtod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtod.c?ref=0e4e9e8f54015afd435f754d2ae5464e4a9eade3", "patch": "@@ -26,7 +26,7 @@ the executable file might be covered by the GNU General Public License. */\n \n @deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n \n-This ANSI C function converts the initial portion of @var{string} to a\n+This ISO C function converts the initial portion of @var{string} to a\n @code{double}.  If @var{endptr} is not @code{NULL}, a pointer to the\n character after the last character used in the conversion is stored in\n the location referenced by @var{endptr}.  If no conversion is"}]}