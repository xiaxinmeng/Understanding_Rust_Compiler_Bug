{"sha": "171ea4e2b3e202067c50f9c206974fbe1da691c0", "node_id": "C_kwDOANBUbNoAKDE3MWVhNGUyYjNlMjAyMDY3YzUwZjljMjA2OTc0ZmJlMWRhNjkxYzA", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-03T16:43:10Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-06-05T13:19:52Z"}, "message": "fixup: Fix bootstrap build\n\nThe bootstrap was failing due to a missing target which was not\navailable during the bootstrap.\n\nChangeLog:\n\n\t* Makefile.def: Add libgrust target to bootstrap.\n\t* Makefile.in: Regenerate.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "3e0913607442dbcebb2e82f1963c11b1214c6e29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e0913607442dbcebb2e82f1963c11b1214c6e29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/171ea4e2b3e202067c50f9c206974fbe1da691c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171ea4e2b3e202067c50f9c206974fbe1da691c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171ea4e2b3e202067c50f9c206974fbe1da691c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171ea4e2b3e202067c50f9c206974fbe1da691c0/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c676cbfc3e5f2566b4d55fa52b00919ee338ca"}], "stats": {"total": 818, "additions": 799, "deletions": 19}, "files": [{"sha": "79e2288a1aafb6b1418abfc72ae8e923b93a053d", "filename": "Makefile.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171ea4e2b3e202067c50f9c206974fbe1da691c0/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171ea4e2b3e202067c50f9c206974fbe1da691c0/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=171ea4e2b3e202067c50f9c206974fbe1da691c0", "patch": "@@ -147,7 +147,7 @@ host_modules= { module= libcc1; extra_configure_flags=--enable-shared; };\n host_modules= { module= gotools; };\n host_modules= { module= libctf; bootstrap=true; };\n host_modules= { module= libsframe; bootstrap=true; };\n-host_modules= { module= libgrust; };\n+host_modules= { module= libgrust; bootstrap=true; };\n \n target_modules = { module= libstdc++-v3;\n \t\t   bootstrap=true;"}, {"sha": "cbba665eb329203373fc2478a4a19bfbfb558626", "filename": "Makefile.in", "status": "modified", "additions": 798, "deletions": 18, "changes": 816, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/171ea4e2b3e202067c50f9c206974fbe1da691c0/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/171ea4e2b3e202067c50f9c206974fbe1da691c0/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=171ea4e2b3e202067c50f9c206974fbe1da691c0", "patch": "@@ -1299,7 +1299,9 @@ all-host: maybe-all-libctf\n @if libsframe-no-bootstrap\n all-host: maybe-all-libsframe\n @endif libsframe-no-bootstrap\n+@if libgrust-no-bootstrap\n all-host: maybe-all-libgrust\n+@endif libgrust-no-bootstrap\n \n .PHONY: all-target\n \n@@ -43623,7 +43625,6 @@ configure-libgrust: stage_current\n @if libgrust\n maybe-configure-libgrust: configure-libgrust\n configure-libgrust: \n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n@@ -43647,6 +43648,304 @@ configure-libgrust:\n \n \n \n+.PHONY: configure-stage1-libgrust maybe-configure-stage1-libgrust\n+maybe-configure-stage1-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stage1-libgrust: configure-stage1-libgrust\n+configure-stage1-libgrust:\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGE1_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGE1_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 1 in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t   \\\n+\t  $(STAGE1_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stage2-libgrust maybe-configure-stage2-libgrust\n+maybe-configure-stage2-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stage2-libgrust: configure-stage2-libgrust\n+configure-stage2-libgrust:\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGE2_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGE2_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGE2_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 2 in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE2_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stage3-libgrust maybe-configure-stage3-libgrust\n+maybe-configure-stage3-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stage3-libgrust: configure-stage3-libgrust\n+configure-stage3-libgrust:\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGE3_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGE3_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGE3_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 3 in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE3_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stage4-libgrust maybe-configure-stage4-libgrust\n+maybe-configure-stage4-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stage4-libgrust: configure-stage4-libgrust\n+configure-stage4-libgrust:\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGE4_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGE4_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGE4_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 4 in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE4_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stageprofile-libgrust maybe-configure-stageprofile-libgrust\n+maybe-configure-stageprofile-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stageprofile-libgrust: configure-stageprofile-libgrust\n+configure-stageprofile-libgrust:\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGEprofile_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGEprofile_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGEprofile_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage profile in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEprofile_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stagetrain-libgrust maybe-configure-stagetrain-libgrust\n+maybe-configure-stagetrain-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stagetrain-libgrust: configure-stagetrain-libgrust\n+configure-stagetrain-libgrust:\n+\t@[ $(current_stage) = stagetrain ] || $(MAKE) stagetrain-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEtrain_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGEtrain_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGEtrain_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGEtrain_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage train in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEtrain_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stagefeedback-libgrust maybe-configure-stagefeedback-libgrust\n+maybe-configure-stagefeedback-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stagefeedback-libgrust: configure-stagefeedback-libgrust\n+configure-stagefeedback-libgrust:\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGEfeedback_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGEfeedback_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGEfeedback_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage feedback in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEfeedback_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stageautoprofile-libgrust maybe-configure-stageautoprofile-libgrust\n+maybe-configure-stageautoprofile-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stageautoprofile-libgrust: configure-stageautoprofile-libgrust\n+configure-stageautoprofile-libgrust:\n+\t@[ $(current_stage) = stageautoprofile ] || $(MAKE) stageautoprofile-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEautoprofile_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGEautoprofile_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGEautoprofile_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGEautoprofile_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage autoprofile in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEautoprofile_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+.PHONY: configure-stageautofeedback-libgrust maybe-configure-stageautofeedback-libgrust\n+maybe-configure-stageautofeedback-libgrust:\n+@if libgrust-bootstrap\n+maybe-configure-stageautofeedback-libgrust: configure-stageautofeedback-libgrust\n+configure-stageautofeedback-libgrust:\n+\t@[ $(current_stage) = stageautofeedback ] || $(MAKE) stageautofeedback-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEautofeedback_TFLAGS)\"; \\\n+\ttest ! -f $(HOST_SUBDIR)/libgrust/Makefile || exit 0; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS) \\\n+\tCFLAGS=\"$(STAGEautofeedback_CFLAGS)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(STAGEautofeedback_CXXFLAGS)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(STAGEautofeedback_CFLAGS)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage autofeedback in $(HOST_SUBDIR)/libgrust; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/libgrust; \\\n+\tcd $(HOST_SUBDIR)/libgrust || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(HOST_SUBDIR)/libgrust/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tmodule_srcdir=libgrust; \\\n+\t$(SHELL) $$s/$$module_srcdir/configure \\\n+\t  --srcdir=$${topdir}/$$module_srcdir \\\n+\t  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \\\n+\t  --target=${target_alias} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEautofeedback_CONFIGURE_FLAGS)\n+@endif libgrust-bootstrap\n+\n+\n+\n \n \n .PHONY: all-libgrust maybe-all-libgrust\n@@ -43658,7 +43957,6 @@ all-libgrust: stage_current\n TARGET-libgrust=all\n maybe-all-libgrust: all-libgrust\n all-libgrust: configure-libgrust\n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(HOST_EXPORTS)  \\\n@@ -43669,6 +43967,396 @@ all-libgrust: configure-libgrust\n \n \n \n+.PHONY: all-stage1-libgrust maybe-all-stage1-libgrust\n+.PHONY: clean-stage1-libgrust maybe-clean-stage1-libgrust\n+maybe-all-stage1-libgrust:\n+maybe-clean-stage1-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stage1-libgrust: all-stage1-libgrust\n+all-stage1: all-stage1-libgrust\n+TARGET-stage1-libgrust = $(TARGET-libgrust)\n+all-stage1-libgrust: configure-stage1-libgrust\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGE1_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGE1_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGE1_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS)  \\\n+\t\t$(STAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGE1_TFLAGS)\"  \\\n+\t\t$(TARGET-stage1-libgrust)\n+\n+maybe-clean-stage1-libgrust: clean-stage1-libgrust\n+clean-stage1: clean-stage1-libgrust\n+clean-stage1-libgrust:\n+\t@if [ $(current_stage) = stage1 ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stage1-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage1-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS)  \\\n+\t$(STAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stage2-libgrust maybe-all-stage2-libgrust\n+.PHONY: clean-stage2-libgrust maybe-clean-stage2-libgrust\n+maybe-all-stage2-libgrust:\n+maybe-clean-stage2-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stage2-libgrust: all-stage2-libgrust\n+all-stage2: all-stage2-libgrust\n+TARGET-stage2-libgrust = $(TARGET-libgrust)\n+all-stage2-libgrust: configure-stage2-libgrust\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGE2_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGE2_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGE2_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGE2_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGE2_TFLAGS)\"  \\\n+\t\t$(TARGET-stage2-libgrust)\n+\n+maybe-clean-stage2-libgrust: clean-stage2-libgrust\n+clean-stage2: clean-stage2-libgrust\n+clean-stage2-libgrust:\n+\t@if [ $(current_stage) = stage2 ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stage2-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage2-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stage3-libgrust maybe-all-stage3-libgrust\n+.PHONY: clean-stage3-libgrust maybe-clean-stage3-libgrust\n+maybe-all-stage3-libgrust:\n+maybe-clean-stage3-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stage3-libgrust: all-stage3-libgrust\n+all-stage3: all-stage3-libgrust\n+TARGET-stage3-libgrust = $(TARGET-libgrust)\n+all-stage3-libgrust: configure-stage3-libgrust\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGE3_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGE3_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGE3_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGE3_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGE3_TFLAGS)\"  \\\n+\t\t$(TARGET-stage3-libgrust)\n+\n+maybe-clean-stage3-libgrust: clean-stage3-libgrust\n+clean-stage3: clean-stage3-libgrust\n+clean-stage3-libgrust:\n+\t@if [ $(current_stage) = stage3 ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stage3-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage3-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stage4-libgrust maybe-all-stage4-libgrust\n+.PHONY: clean-stage4-libgrust maybe-clean-stage4-libgrust\n+maybe-all-stage4-libgrust:\n+maybe-clean-stage4-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stage4-libgrust: all-stage4-libgrust\n+all-stage4: all-stage4-libgrust\n+TARGET-stage4-libgrust = $(TARGET-libgrust)\n+all-stage4-libgrust: configure-stage4-libgrust\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGE4_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGE4_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGE4_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGE4_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGE4_TFLAGS)\"  \\\n+\t\t$(TARGET-stage4-libgrust)\n+\n+maybe-clean-stage4-libgrust: clean-stage4-libgrust\n+clean-stage4: clean-stage4-libgrust\n+clean-stage4-libgrust:\n+\t@if [ $(current_stage) = stage4 ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stage4-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage4-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stageprofile-libgrust maybe-all-stageprofile-libgrust\n+.PHONY: clean-stageprofile-libgrust maybe-clean-stageprofile-libgrust\n+maybe-all-stageprofile-libgrust:\n+maybe-clean-stageprofile-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stageprofile-libgrust: all-stageprofile-libgrust\n+all-stageprofile: all-stageprofile-libgrust\n+TARGET-stageprofile-libgrust = $(TARGET-libgrust)\n+all-stageprofile-libgrust: configure-stageprofile-libgrust\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGEprofile_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGEprofile_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGEprofile_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGEprofile_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"  \\\n+\t\t$(TARGET-stageprofile-libgrust)\n+\n+maybe-clean-stageprofile-libgrust: clean-stageprofile-libgrust\n+clean-stageprofile: clean-stageprofile-libgrust\n+clean-stageprofile-libgrust:\n+\t@if [ $(current_stage) = stageprofile ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stageprofile-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stageprofile-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stagetrain-libgrust maybe-all-stagetrain-libgrust\n+.PHONY: clean-stagetrain-libgrust maybe-clean-stagetrain-libgrust\n+maybe-all-stagetrain-libgrust:\n+maybe-clean-stagetrain-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stagetrain-libgrust: all-stagetrain-libgrust\n+all-stagetrain: all-stagetrain-libgrust\n+TARGET-stagetrain-libgrust = $(TARGET-libgrust)\n+all-stagetrain-libgrust: configure-stagetrain-libgrust\n+\t@[ $(current_stage) = stagetrain ] || $(MAKE) stagetrain-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEtrain_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGEtrain_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGEtrain_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGEtrain_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGEtrain_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGEtrain_TFLAGS)\"  \\\n+\t\t$(TARGET-stagetrain-libgrust)\n+\n+maybe-clean-stagetrain-libgrust: clean-stagetrain-libgrust\n+clean-stagetrain: clean-stagetrain-libgrust\n+clean-stagetrain-libgrust:\n+\t@if [ $(current_stage) = stagetrain ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stagetrain-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stagetrain-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stagefeedback-libgrust maybe-all-stagefeedback-libgrust\n+.PHONY: clean-stagefeedback-libgrust maybe-clean-stagefeedback-libgrust\n+maybe-all-stagefeedback-libgrust:\n+maybe-clean-stagefeedback-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stagefeedback-libgrust: all-stagefeedback-libgrust\n+all-stagefeedback: all-stagefeedback-libgrust\n+TARGET-stagefeedback-libgrust = $(TARGET-libgrust)\n+all-stagefeedback-libgrust: configure-stagefeedback-libgrust\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGEfeedback_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGEfeedback_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGEfeedback_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGEfeedback_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"  \\\n+\t\t$(TARGET-stagefeedback-libgrust)\n+\n+maybe-clean-stagefeedback-libgrust: clean-stagefeedback-libgrust\n+clean-stagefeedback: clean-stagefeedback-libgrust\n+clean-stagefeedback-libgrust:\n+\t@if [ $(current_stage) = stagefeedback ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stagefeedback-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stagefeedback-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stageautoprofile-libgrust maybe-all-stageautoprofile-libgrust\n+.PHONY: clean-stageautoprofile-libgrust maybe-clean-stageautoprofile-libgrust\n+maybe-all-stageautoprofile-libgrust:\n+maybe-clean-stageautoprofile-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stageautoprofile-libgrust: all-stageautoprofile-libgrust\n+all-stageautoprofile: all-stageautoprofile-libgrust\n+TARGET-stageautoprofile-libgrust = $(TARGET-libgrust)\n+all-stageautoprofile-libgrust: configure-stageautoprofile-libgrust\n+\t@[ $(current_stage) = stageautoprofile ] || $(MAKE) stageautoprofile-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEautoprofile_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$$s/gcc/config/i386/$(AUTO_PROFILE) \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGEautoprofile_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGEautoprofile_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGEautoprofile_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGEautoprofile_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGEautoprofile_TFLAGS)\"  \\\n+\t\t$(TARGET-stageautoprofile-libgrust)\n+\n+maybe-clean-stageautoprofile-libgrust: clean-stageautoprofile-libgrust\n+clean-stageautoprofile: clean-stageautoprofile-libgrust\n+clean-stageautoprofile-libgrust:\n+\t@if [ $(current_stage) = stageautoprofile ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stageautoprofile-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stageautoprofile-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+.PHONY: all-stageautofeedback-libgrust maybe-all-stageautofeedback-libgrust\n+.PHONY: clean-stageautofeedback-libgrust maybe-clean-stageautofeedback-libgrust\n+maybe-all-stageautofeedback-libgrust:\n+maybe-clean-stageautofeedback-libgrust:\n+@if libgrust-bootstrap\n+maybe-all-stageautofeedback-libgrust: all-stageautofeedback-libgrust\n+all-stageautofeedback: all-stageautofeedback-libgrust\n+TARGET-stageautofeedback-libgrust = $(TARGET-libgrust)\n+all-stageautofeedback-libgrust: configure-stageautofeedback-libgrust\n+\t@[ $(current_stage) = stageautofeedback ] || $(MAKE) stageautofeedback-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEautofeedback_TFLAGS)\"; \\\n+\t$(HOST_EXPORTS) \\\n+\t$(POSTSTAGE1_HOST_EXPORTS)  \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(STAGEautofeedback_CFLAGS)\" \\\n+\t\tGENERATOR_CFLAGS=\"$(STAGEautofeedback_GENERATOR_CFLAGS)\" \\\n+\t\tCXXFLAGS=\"$(STAGEautofeedback_CXXFLAGS)\" \\\n+\t\tLIBCFLAGS=\"$(STAGEautofeedback_CFLAGS)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  \\\n+\t\tTFLAGS=\"$(STAGEautofeedback_TFLAGS)\" PERF_DATA=perf.data \\\n+\t\t$(TARGET-stageautofeedback-libgrust)\n+\n+maybe-clean-stageautofeedback-libgrust: clean-stageautofeedback-libgrust\n+clean-stageautofeedback: clean-stageautofeedback-libgrust\n+clean-stageautofeedback-libgrust:\n+\t@if [ $(current_stage) = stageautofeedback ]; then \\\n+\t  [ -f $(HOST_SUBDIR)/libgrust/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(HOST_SUBDIR)/stageautofeedback-libgrust/Makefile ] || exit 0; \\\n+\t  $(MAKE) stageautofeedback-start; \\\n+\tfi; \\\n+\tcd $(HOST_SUBDIR)/libgrust && \\\n+\t$(MAKE) $(EXTRA_HOST_FLAGS) $(POSTSTAGE1_FLAGS_TO_PASS)  clean\n+@endif libgrust-bootstrap\n+\n+\n+\n+\n \n .PHONY: check-libgrust maybe-check-libgrust\n maybe-check-libgrust:\n@@ -43679,9 +44367,9 @@ check-libgrust:\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(HOST_EXPORTS)  \\\n+\t$(HOST_EXPORTS) $(EXTRA_HOST_EXPORTS) \\\n \t(cd $(HOST_SUBDIR)/libgrust && \\\n-\t  $(MAKE) $(FLAGS_TO_PASS)  check)\n+\t  $(MAKE) $(FLAGS_TO_PASS)  $(EXTRA_BOOTSTRAP_FLAGS) check)\n \n @endif libgrust\n \n@@ -43724,7 +44412,6 @@ maybe-info-libgrust: info-libgrust\n \n info-libgrust: \\\n     configure-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43750,7 +44437,6 @@ maybe-dvi-libgrust: dvi-libgrust\n \n dvi-libgrust: \\\n     configure-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43776,7 +44462,6 @@ maybe-pdf-libgrust: pdf-libgrust\n \n pdf-libgrust: \\\n     configure-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43802,7 +44487,6 @@ maybe-html-libgrust: html-libgrust\n \n html-libgrust: \\\n     configure-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43828,7 +44512,6 @@ maybe-TAGS-libgrust: TAGS-libgrust\n \n TAGS-libgrust: \\\n     configure-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43855,7 +44538,6 @@ maybe-install-info-libgrust: install-info-libgrust\n install-info-libgrust: \\\n     configure-libgrust \\\n     info-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43882,7 +44564,6 @@ maybe-install-dvi-libgrust: install-dvi-libgrust\n install-dvi-libgrust: \\\n     configure-libgrust \\\n     dvi-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43909,7 +44590,6 @@ maybe-install-pdf-libgrust: install-pdf-libgrust\n install-pdf-libgrust: \\\n     configure-libgrust \\\n     pdf-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43936,7 +44616,6 @@ maybe-install-html-libgrust: install-html-libgrust\n install-html-libgrust: \\\n     configure-libgrust \\\n     html-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43962,7 +44641,6 @@ maybe-installcheck-libgrust: installcheck-libgrust\n \n installcheck-libgrust: \\\n     configure-libgrust \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -43987,7 +44665,6 @@ maybe-mostlyclean-libgrust:\n maybe-mostlyclean-libgrust: mostlyclean-libgrust\n \n mostlyclean-libgrust: \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -44012,7 +44689,6 @@ maybe-clean-libgrust:\n maybe-clean-libgrust: clean-libgrust\n \n clean-libgrust: \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -44037,7 +44713,6 @@ maybe-distclean-libgrust:\n maybe-distclean-libgrust: distclean-libgrust\n \n distclean-libgrust: \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -44062,7 +44737,6 @@ maybe-maintainer-clean-libgrust:\n maybe-maintainer-clean-libgrust: maintainer-clean-libgrust\n \n maintainer-clean-libgrust: \n-\t@: $(MAKE); $(unstage)\n \t@[ -f ./libgrust/Makefile ] || exit 0; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n@@ -62960,6 +63634,11 @@ stage1-start::\n \t  mkdir stage1-libsframe; \\\n \tmv stage1-libsframe libsframe\n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stage1-libgrust ] || \\\n+\t  mkdir stage1-libgrust; \\\n+\tmv stage1-libgrust libgrust\n+@endif libgrust\n \t@[ -d stage1-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stage1-$(TARGET_SUBDIR); \\\n \tmv stage1-$(TARGET_SUBDIR) $(TARGET_SUBDIR)\n@@ -63085,6 +63764,11 @@ stage1-end::\n \t  cd $(HOST_SUBDIR); mv libsframe stage1-libsframe; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stage1-libgrust; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stage1-$(TARGET_SUBDIR); \\\n \tfi\n@@ -63277,6 +63961,12 @@ stage2-start::\n \tmv stage2-libsframe libsframe; \\\n \tmv stage1-libsframe prev-libsframe || test -f stage1-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stage2-libgrust ] || \\\n+\t  mkdir stage2-libgrust; \\\n+\tmv stage2-libgrust libgrust; \\\n+\tmv stage1-libgrust prev-libgrust || test -f stage1-lean \n+@endif libgrust\n \t@[ -d stage2-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stage2-$(TARGET_SUBDIR); \\\n \tmv stage2-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -63427,6 +64117,12 @@ stage2-end::\n \t  mv prev-libsframe stage1-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stage2-libgrust; \\\n+\t  mv prev-libgrust stage1-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stage2-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stage1-$(TARGET_SUBDIR); : ; \\\n@@ -63643,6 +64339,12 @@ stage3-start::\n \tmv stage3-libsframe libsframe; \\\n \tmv stage2-libsframe prev-libsframe || test -f stage2-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stage3-libgrust ] || \\\n+\t  mkdir stage3-libgrust; \\\n+\tmv stage3-libgrust libgrust; \\\n+\tmv stage2-libgrust prev-libgrust || test -f stage2-lean \n+@endif libgrust\n \t@[ -d stage3-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stage3-$(TARGET_SUBDIR); \\\n \tmv stage3-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -63793,6 +64495,12 @@ stage3-end::\n \t  mv prev-libsframe stage2-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stage3-libgrust; \\\n+\t  mv prev-libgrust stage2-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stage3-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stage2-$(TARGET_SUBDIR); : ; \\\n@@ -64065,6 +64773,12 @@ stage4-start::\n \tmv stage4-libsframe libsframe; \\\n \tmv stage3-libsframe prev-libsframe || test -f stage3-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stage4-libgrust ] || \\\n+\t  mkdir stage4-libgrust; \\\n+\tmv stage4-libgrust libgrust; \\\n+\tmv stage3-libgrust prev-libgrust || test -f stage3-lean \n+@endif libgrust\n \t@[ -d stage4-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stage4-$(TARGET_SUBDIR); \\\n \tmv stage4-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -64215,6 +64929,12 @@ stage4-end::\n \t  mv prev-libsframe stage3-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stage4-libgrust; \\\n+\t  mv prev-libgrust stage3-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stage4-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stage3-$(TARGET_SUBDIR); : ; \\\n@@ -64475,6 +65195,12 @@ stageprofile-start::\n \tmv stageprofile-libsframe libsframe; \\\n \tmv stage1-libsframe prev-libsframe || test -f stage1-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stageprofile-libgrust ] || \\\n+\t  mkdir stageprofile-libgrust; \\\n+\tmv stageprofile-libgrust libgrust; \\\n+\tmv stage1-libgrust prev-libgrust || test -f stage1-lean \n+@endif libgrust\n \t@[ -d stageprofile-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stageprofile-$(TARGET_SUBDIR); \\\n \tmv stageprofile-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -64625,6 +65351,12 @@ stageprofile-end::\n \t  mv prev-libsframe stage1-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stageprofile-libgrust; \\\n+\t  mv prev-libgrust stage1-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stageprofile-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stage1-$(TARGET_SUBDIR); : ; \\\n@@ -64818,6 +65550,12 @@ stagetrain-start::\n \tmv stagetrain-libsframe libsframe; \\\n \tmv stageprofile-libsframe prev-libsframe || test -f stageprofile-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stagetrain-libgrust ] || \\\n+\t  mkdir stagetrain-libgrust; \\\n+\tmv stagetrain-libgrust libgrust; \\\n+\tmv stageprofile-libgrust prev-libgrust || test -f stageprofile-lean \n+@endif libgrust\n \t@[ -d stagetrain-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stagetrain-$(TARGET_SUBDIR); \\\n \tmv stagetrain-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -64968,6 +65706,12 @@ stagetrain-end::\n \t  mv prev-libsframe stageprofile-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stagetrain-libgrust; \\\n+\t  mv prev-libgrust stageprofile-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stagetrain-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stageprofile-$(TARGET_SUBDIR); : ; \\\n@@ -65161,6 +65905,12 @@ stagefeedback-start::\n \tmv stagefeedback-libsframe libsframe; \\\n \tmv stagetrain-libsframe prev-libsframe || test -f stagetrain-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stagefeedback-libgrust ] || \\\n+\t  mkdir stagefeedback-libgrust; \\\n+\tmv stagefeedback-libgrust libgrust; \\\n+\tmv stagetrain-libgrust prev-libgrust || test -f stagetrain-lean \n+@endif libgrust\n \t@[ -d stagefeedback-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stagefeedback-$(TARGET_SUBDIR); \\\n \tmv stagefeedback-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -65311,6 +66061,12 @@ stagefeedback-end::\n \t  mv prev-libsframe stagetrain-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stagefeedback-libgrust; \\\n+\t  mv prev-libgrust stagetrain-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stagefeedback-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stagetrain-$(TARGET_SUBDIR); : ; \\\n@@ -65527,6 +66283,12 @@ stageautoprofile-start::\n \tmv stageautoprofile-libsframe libsframe; \\\n \tmv stage1-libsframe prev-libsframe || test -f stage1-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stageautoprofile-libgrust ] || \\\n+\t  mkdir stageautoprofile-libgrust; \\\n+\tmv stageautoprofile-libgrust libgrust; \\\n+\tmv stage1-libgrust prev-libgrust || test -f stage1-lean \n+@endif libgrust\n \t@[ -d stageautoprofile-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stageautoprofile-$(TARGET_SUBDIR); \\\n \tmv stageautoprofile-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -65677,6 +66439,12 @@ stageautoprofile-end::\n \t  mv prev-libsframe stage1-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stageautoprofile-libgrust; \\\n+\t  mv prev-libgrust stage1-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stageautoprofile-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stage1-$(TARGET_SUBDIR); : ; \\\n@@ -65870,6 +66638,12 @@ stageautofeedback-start::\n \tmv stageautofeedback-libsframe libsframe; \\\n \tmv stageautoprofile-libsframe prev-libsframe || test -f stageautoprofile-lean \n @endif libsframe\n+@if libgrust\n+\t@cd $(HOST_SUBDIR); [ -d stageautofeedback-libgrust ] || \\\n+\t  mkdir stageautofeedback-libgrust; \\\n+\tmv stageautofeedback-libgrust libgrust; \\\n+\tmv stageautoprofile-libgrust prev-libgrust || test -f stageautoprofile-lean \n+@endif libgrust\n \t@[ -d stageautofeedback-$(TARGET_SUBDIR) ] || \\\n \t  mkdir stageautofeedback-$(TARGET_SUBDIR); \\\n \tmv stageautofeedback-$(TARGET_SUBDIR) $(TARGET_SUBDIR); \\\n@@ -66020,6 +66794,12 @@ stageautofeedback-end::\n \t  mv prev-libsframe stageautoprofile-libsframe; : ; \\\n \tfi\n @endif libsframe\n+@if libgrust\n+\t@if test -d $(HOST_SUBDIR)/libgrust; then \\\n+\t  cd $(HOST_SUBDIR); mv libgrust stageautofeedback-libgrust; \\\n+\t  mv prev-libgrust stageautoprofile-libgrust; : ; \\\n+\tfi\n+@endif libgrust\n \t@if test -d $(TARGET_SUBDIR); then \\\n \t  mv $(TARGET_SUBDIR) stageautofeedback-$(TARGET_SUBDIR); \\\n \t  mv prev-$(TARGET_SUBDIR) stageautoprofile-$(TARGET_SUBDIR); : ; \\"}]}