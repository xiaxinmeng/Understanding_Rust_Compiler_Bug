{"sha": "27132e64895c61efe07fbaaca0f69d7a41a35af7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxMzJlNjQ4OTVjNjFlZmUwN2ZiYWFjYTBmNjlkN2E0MWEzNWFmNw==", "commit": {"author": {"name": "Nicola Pero", "email": "n.pero@mi.flashnet.it", "date": "2001-06-08T22:42:59Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-06-08T22:42:59Z"}, "message": "THREADS: Explain that when we compile libobjc inside GCC...\n\n2001-06-08  Nicola Pero  <n.pero@mi.flashnet.it>\n\n        * THREADS: Explain that when we compile libobjc inside GCC, we\n        always use thr-objc.c as a backend, which uses GCC's thread code.\n\nFrom-SVN: r43058", "tree": {"sha": "653964a203789891204b40505e5db0225cf996cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/653964a203789891204b40505e5db0225cf996cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27132e64895c61efe07fbaaca0f69d7a41a35af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27132e64895c61efe07fbaaca0f69d7a41a35af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27132e64895c61efe07fbaaca0f69d7a41a35af7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27132e64895c61efe07fbaaca0f69d7a41a35af7/comments", "author": null, "committer": null, "parents": [{"sha": "0f38b8114265421f93d37b835f1eb509c0f46247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f38b8114265421f93d37b835f1eb509c0f46247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f38b8114265421f93d37b835f1eb509c0f46247"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "4439271de4d9a68a1246aab75ea7d9686fe7431d", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27132e64895c61efe07fbaaca0f69d7a41a35af7/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27132e64895c61efe07fbaaca0f69d7a41a35af7/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=27132e64895c61efe07fbaaca0f69d7a41a35af7", "patch": "@@ -1,3 +1,8 @@\n+2001-06-08  Nicola Pero  <n.pero@mi.flashnet.it>\n+\n+\t* THREADS: Explain that when we compile libobjc inside GCC, we\n+\talways use thr-objc.c as a backend, which uses GCC's thread code.\n+\n 2001-06-06  Richard Frith-Macdonald  <rrfm@gnu.org>\n \n \t* init.c (__objc_send_message_in_list): When setting a new entry"}, {"sha": "8a436832f6cbece059a1d3b9885a965e271141b3", "filename": "libobjc/THREADS", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27132e64895c61efe07fbaaca0f69d7a41a35af7/libobjc%2FTHREADS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27132e64895c61efe07fbaaca0f69d7a41a35af7/libobjc%2FTHREADS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FTHREADS?ref=27132e64895c61efe07fbaaca0f69d7a41a35af7", "patch": "@@ -102,30 +102,33 @@ high degree of portability across platforms.\n \n The backend is composed of a file with the necessary code to map the ObjC\n thread and mutex to a platform specific implementation.  For example, the\n-file thr-solaris.c contains the implementation for Solaris.  When you \n-configure GCC, it attempts to pick an appropriate backend file for the\n-target platform; however, you can override this choice by assign the\n-OBJC_THREAD_FILE make variable to the basename of the backend file.  This\n-is especially useful on platforms which have multiple thread libraries.\n-For example:\n-\n-\tmake OBJC_THREAD_FILE=thr-posix\n-\n-would indicate that the generic posix backend file, thr-posix.c, should be\n-compiled with the ObjC runtime library.  If your platform does not support\n-threads then you should specify the OBJC_THREAD_FILE=thr-single backend file\n-to compile the ObjC runtime library without thread or mutex support; note\n-that programs which rely upon the ObjC thread and mutex functions will\n-compile and link correctly but attempting to create a thread or mutex will\n-result in an error.\n-\n+file thr-solaris.c contains the implementation for Solaris.\n+\n+If you are compiling libobjc as part of GCC, the thr-objc.c backend is\n+always used; this backend uses GCC's gthread code.  The thread system\n+is automatically configured when GCC is configured.  Important: make\n+sure you configure GCC using `--enable-threads' if you want threads !\n+  \n+If you want to compile libobjc standalone, then you would need to\n+modify the configure.in and makefiles for it; and you need to pick an\n+appropriate backend file for the target platform; you make this choice\n+by assigning the OBJC_THREAD_FILE make variable to the basename of the\n+backend file.  For example, OBJC_THREAD_FILE=thr-posix would indicate\n+that the generic posix backend file, thr-posix.c, should be compiled\n+with the ObjC runtime library.  If your platform does not support\n+threads then you should specify the OBJC_THREAD_FILE=thr-single\n+backend file to compile the ObjC runtime library without thread or\n+mutex support; note that programs which rely upon the ObjC thread and\n+mutex functions will compile and link correctly but attempting to\n+create a thread or mutex will result in an error.\n+  \n It is questionable whether it is really necessary to have both a\n frontend and backend function for all available functionality.  On the\n one hand, it provides a clear, consistent differentiation between what\n is public and what is private with the downside of having the overhead\n-of multiple functions calls.  For example, the function to have a thread\n-yield the processor is objc_thread_yield; in the current implementation\n-this produces a function call set:\n+of multiple functions calls.  For example, the function to have a\n+thread yield the processor is objc_thread_yield; in the current\n+implementation this produces a function call set:\n \n objc_thread_yield()  ->  __objc_thread_yield()  ->  system yield function\n "}]}