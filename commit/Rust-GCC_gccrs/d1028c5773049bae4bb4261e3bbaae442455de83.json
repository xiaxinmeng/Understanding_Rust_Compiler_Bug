{"sha": "d1028c5773049bae4bb4261e3bbaae442455de83", "node_id": "C_kwDOANBUbNoAKGQxMDI4YzU3NzMwNDliYWU0YmI0MjYxZTNiYmFhZTQ0MjQ1NWRlODM", "commit": {"author": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-08-20T07:19:51Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-08-24T06:55:34Z"}, "message": "LoongArch: Add new code model 'medium'.\n\nThe function jump instruction in normal mode is 'bl',\nso the scope of the function jump is +-128MB.\n\nNow we've added support for 'medium' mode, this mode is\nto complete the function jump through two instructions:\n\tpcalau12i + jirl\nSo in this mode the function jump range is increased to +-2GB.\n\nCompared with 'normal' mode, 'medium' mode only affects the\njump range of functions.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/genopts/loongarch-strings: Support code model medium.\n\t* config/loongarch/genopts/loongarch.opt.in: Likewise.\n\t* config/loongarch/loongarch-def.c: Likewise.\n\t* config/loongarch/loongarch-def.h (CMODEL_LARGE): Likewise.\n\t(CMODEL_EXTREME): Likewise.\n\t(N_CMODEL_TYPES): Likewise.\n\t(CMODEL_MEDIUM): Likewise.\n\t* config/loongarch/loongarch-opts.cc: Likewise.\n\t* config/loongarch/loongarch-opts.h (TARGET_CMODEL_MEDIUM): Likewise.\n\t* config/loongarch/loongarch-str.h (STR_CMODEL_MEDIUM): Likewise.\n\t* config/loongarch/loongarch.cc (loongarch_call_tls_get_addr):\n\tTls symbol Loading support medium mode.\n\t(loongarch_legitimize_call_address): When medium mode, make a symbolic\n\tjump with two instructions.\n\t(loongarch_option_override_internal): Support medium.\n\t* config/loongarch/loongarch.md (@pcalau12i<mode>): New template.\n\t(@sibcall_internal_1<mode>): New function call templates added to support\n\tmedium mode.\n\t(@sibcall_value_internal_1<mode>): Likewise.\n\t(@sibcall_value_multiple_internal_1<mode>): Likewise.\n\t(@call_internal_1<mode>): Likewise.\n\t(@call_value_internal_1<mode>): Likewise.\n\t(@call_value_multiple_internal_1<mode>): Likewise.\n\t* config/loongarch/loongarch.opt: Support medium.\n\t* config/loongarch/predicates.md: Add processing about medium mode.\n\t* doc/invoke.texi: Document for '-mcmodel=medium'.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/func-call-medium-1.c: New test.\n\t* gcc.target/loongarch/func-call-medium-2.c: New test.\n\t* gcc.target/loongarch/func-call-medium-3.c: New test.\n\t* gcc.target/loongarch/func-call-medium-4.c: New test.\n\t* gcc.target/loongarch/func-call-medium-5.c: New test.\n\t* gcc.target/loongarch/func-call-medium-6.c: New test.\n\t* gcc.target/loongarch/func-call-medium-7.c: New test.\n\t* gcc.target/loongarch/func-call-medium-8.c: New test.\n\t* gcc.target/loongarch/tls-gd-noplt.c: Add compile parameter '-mexplicit-relocs'.", "tree": {"sha": "390c68a04268c24ddc6b6fe6a3167d30ad2f7d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390c68a04268c24ddc6b6fe6a3167d30ad2f7d9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1028c5773049bae4bb4261e3bbaae442455de83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1028c5773049bae4bb4261e3bbaae442455de83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1028c5773049bae4bb4261e3bbaae442455de83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1028c5773049bae4bb4261e3bbaae442455de83/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6864f4ee87fb56299fc82e1e0ced127b747d87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6864f4ee87fb56299fc82e1e0ced127b747d87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6864f4ee87fb56299fc82e1e0ced127b747d87a"}], "stats": {"total": 635, "additions": 595, "deletions": 40}, "files": [{"sha": "44ebb7ab10bdbe2c92244ae30c2ea985311ee5e2", "filename": "gcc/config/loongarch/genopts/loongarch-strings", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch-strings", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch-strings", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch-strings?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -54,5 +54,6 @@ OPTSTR_CMODEL\t      cmodel\n STR_CMODEL_NORMAL     normal\n STR_CMODEL_TINY\t      tiny\n STR_CMODEL_TS\t      tiny-static\n+STR_CMODEL_MEDIUM     medium\n STR_CMODEL_LARGE      large\n STR_CMODEL_EXTREME    extreme"}, {"sha": "ebdd9538d48dd85e17acac98ebd2dce9b875afa1", "filename": "gcc/config/loongarch/genopts/loongarch.opt.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fgenopts%2Floongarch.opt.in?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -172,6 +172,9 @@ Enum(cmodel) String(@@STR_CMODEL_TINY@@) Value(CMODEL_TINY)\n EnumValue\n Enum(cmodel) String(@@STR_CMODEL_TS@@) Value(CMODEL_TINY_STATIC)\n \n+EnumValue\n+Enum(cmodel) String(@@STR_CMODEL_MEDIUM@@) Value(CMODEL_MEDIUM)\n+\n EnumValue\n Enum(cmodel) String(@@STR_CMODEL_LARGE@@) Value(CMODEL_LARGE)\n "}, {"sha": "cbf995d81b5aea8c1a1cf45a68bfe6f0cc724796", "filename": "gcc/config/loongarch/loongarch-def.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-def.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-def.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-def.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -152,6 +152,7 @@ loongarch_cmodel_strings[] = {\n   [CMODEL_NORMAL]\t  = STR_CMODEL_NORMAL,\n   [CMODEL_TINY]\t\t  = STR_CMODEL_TINY,\n   [CMODEL_TINY_STATIC]\t  = STR_CMODEL_TS,\n+  [CMODEL_MEDIUM]\t  = STR_CMODEL_MEDIUM,\n   [CMODEL_LARGE]\t  = STR_CMODEL_LARGE,\n   [CMODEL_EXTREME]\t  = STR_CMODEL_EXTREME,\n };"}, {"sha": "b5985f070521743b72a95cb302f6e8f36faa316a", "filename": "gcc/config/loongarch/loongarch-def.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-def.h?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -82,9 +82,10 @@ extern const char* loongarch_cmodel_strings[];\n #define CMODEL_NORMAL\t      0\n #define CMODEL_TINY\t      1\n #define CMODEL_TINY_STATIC    2\n-#define CMODEL_LARGE\t      3\n-#define CMODEL_EXTREME\t      4\n-#define N_CMODEL_TYPES\t      5\n+#define CMODEL_MEDIUM\t      3\n+#define CMODEL_LARGE\t      4\n+#define CMODEL_EXTREME\t      5\n+#define N_CMODEL_TYPES\t      6\n \n /* enum switches */\n /* The \"SW_\" codes represent command-line switches (options that"}, {"sha": "e13eafb588254b309e5e37e25c5e8ef8d36bbc49", "filename": "gcc/config/loongarch/loongarch-opts.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-opts.cc?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -376,11 +376,24 @@ loongarch_config_target (struct loongarch_target *target,\n \n   /* 5.  Target code model */\n   t.cmodel = constrained.cmodel ? opt_cmodel : CMODEL_NORMAL;\n-  if (t.cmodel != CMODEL_NORMAL && t.cmodel != CMODEL_EXTREME)\n+\n+  switch (t.cmodel)\n     {\n+    case CMODEL_TINY:\n+    case CMODEL_TINY_STATIC:\n+    case CMODEL_LARGE:\n       warning (0, \"%qs is not supported, now cmodel is set to %qs\",\n \t       loongarch_cmodel_strings[t.cmodel], \"normal\");\n       t.cmodel = CMODEL_NORMAL;\n+      break;\n+\n+    case CMODEL_NORMAL:\n+    case CMODEL_MEDIUM:\n+    case CMODEL_EXTREME:\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n     }\n \n   /* Cleanup and return.  */"}, {"sha": "3523a4cf78d4e66e86efd9d1f0e95e4194c25b1d", "filename": "gcc/config/loongarch/loongarch-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-opts.h?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -46,6 +46,7 @@ loongarch_config_target (struct loongarch_target *target,\n #define TARGET_CMODEL_NORMAL\t    (la_target.cmodel == CMODEL_NORMAL)\n #define TARGET_CMODEL_TINY\t    (la_target.cmodel == CMODEL_TINY)\n #define TARGET_CMODEL_TINY_STATIC   (la_target.cmodel == CMODEL_TINY_STATIC)\n+#define TARGET_CMODEL_MEDIUM\t    (la_target.cmodel == CMODEL_MEDIUM)\n #define TARGET_CMODEL_LARGE\t    (la_target.cmodel == CMODEL_LARGE)\n #define TARGET_CMODEL_EXTREME\t    (la_target.cmodel == CMODEL_EXTREME)\n "}, {"sha": "9f1b0989c82d92ff0b3780f4adc4d03ba1145c61", "filename": "gcc/config/loongarch/loongarch-str.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-str.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch-str.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-str.h?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #define STR_CMODEL_NORMAL \"normal\"\n #define STR_CMODEL_TINY \"tiny\"\n #define STR_CMODEL_TS \"tiny-static\"\n+#define STR_CMODEL_MEDIUM \"medium\"\n #define STR_CMODEL_LARGE \"large\"\n #define STR_CMODEL_EXTREME \"extreme\"\n "}, {"sha": "16fd4acc97008af1144e165b545eb368bcc4acb7", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 97, "deletions": 26, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -2461,44 +2461,96 @@ loongarch_call_tls_get_addr (rtx sym, enum loongarch_symbol_type type, rtx v0)\n     }\n \n   if (flag_plt)\n-    insn = emit_call_insn (gen_call_value_internal (v0,\n-\t\t\t\t\t\t    loongarch_tls_symbol,\n-\t\t\t\t\t\t    const0_rtx));\n-  else\n     {\n-      rtx dest = gen_reg_rtx (Pmode);\n-\n-      if (TARGET_CMODEL_EXTREME)\n+      switch (la_opt_cmodel)\n \t{\n-\t  gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\tcase CMODEL_NORMAL:\n+\t  insn = emit_call_insn (gen_call_value_internal (v0,\n+\t\t\t\t\t\t\t  loongarch_tls_symbol,\n+\t\t\t\t\t\t\t  const0_rtx));\n+\t  break;\n \n-\t  rtx tmp1 = gen_reg_rtx (Pmode);\n-\t  rtx high = gen_reg_rtx (Pmode);\n+\tcase CMODEL_MEDIUM:\n+\t    {\n+\t      rtx reg = gen_reg_rtx (Pmode);\n+\t      if (TARGET_EXPLICIT_RELOCS)\n+\t\t{\n+\t\t  emit_insn (gen_pcalau12i (Pmode, reg, loongarch_tls_symbol));\n+\t\t  rtx call = gen_call_value_internal_1 (Pmode, v0, reg,\n+\t\t\t\t\t\t\tloongarch_tls_symbol,\n+\t\t\t\t\t\t\tconst0_rtx);\n+\t\t  insn = emit_call_insn (call);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  emit_move_insn (reg, loongarch_tls_symbol);\n+\t\t  insn = emit_call_insn (gen_call_value_internal (v0,\n+\t\t\t\t\t\t\t\t  reg,\n+\t\t\t\t\t\t\t\t  const0_rtx));\n+\t\t}\n+\t      break;\n+\t    }\n \n-\t  loongarch_emit_move (high,\n-\t\t\t       gen_rtx_HIGH (Pmode, loongarch_tls_symbol));\n-\t  loongarch_emit_move (tmp1, gen_rtx_LO_SUM (Pmode,\n-\t\t\t\t\t\t     gen_rtx_REG (Pmode, 0),\n-\t\t\t\t\t\t     loongarch_tls_symbol));\n-\t  emit_insn (gen_lui_h_lo20 (tmp1, tmp1, loongarch_tls_symbol));\n-\t  emit_insn (gen_lui_h_hi12 (tmp1, tmp1, loongarch_tls_symbol));\n-\t  loongarch_emit_move (dest,\n-\t\t\t       gen_rtx_MEM (Pmode,\n-\t\t\t\t\t    gen_rtx_PLUS (Pmode, high, tmp1)));\n+\t/* code model extreme not support plt.  */\n+\tcase CMODEL_EXTREME:\n+\tcase CMODEL_LARGE:\n+\tcase CMODEL_TINY:\n+\tcase CMODEL_TINY_STATIC:\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n-      else\n+    }\n+  else\n+    {\n+      rtx dest = gen_reg_rtx (Pmode);\n+\n+      switch (la_opt_cmodel)\n \t{\n-\t  if (TARGET_EXPLICIT_RELOCS)\n+\tcase CMODEL_NORMAL:\n+\tcase CMODEL_MEDIUM:\n+\t    {\n+\t      if (TARGET_EXPLICIT_RELOCS)\n+\t\t{\n+\t\t  rtx high = gen_reg_rtx (Pmode);\n+\t\t  loongarch_emit_move (high,\n+\t\t\t\t       gen_rtx_HIGH (Pmode,\n+\t\t\t\t\t\t     loongarch_tls_symbol));\n+\t\t  emit_insn (gen_ld_from_got (Pmode, dest, high,\n+\t\t\t\t\t      loongarch_tls_symbol));\n+\t\t}\n+\t      else\n+\t\tloongarch_emit_move (dest, loongarch_tls_symbol);\n+\t      break;\n+\t    }\n+\n+\tcase CMODEL_EXTREME:\n \t    {\n+\t      gcc_assert (TARGET_EXPLICIT_RELOCS);\n+\n+\t      rtx tmp1 = gen_reg_rtx (Pmode);\n \t      rtx high = gen_reg_rtx (Pmode);\n+\n \t      loongarch_emit_move (high,\n \t\t\t\t   gen_rtx_HIGH (Pmode, loongarch_tls_symbol));\n-\t      emit_insn (gen_ld_from_got (Pmode, dest, high,\n-\t\t\t\t\t  loongarch_tls_symbol));\n+\t      loongarch_emit_move (tmp1, gen_rtx_LO_SUM (Pmode,\n+\t\t\t\t\t\t\t gen_rtx_REG (Pmode, 0),\n+\t\t\t\t\t\t\t loongarch_tls_symbol));\n+\t      emit_insn (gen_lui_h_lo20 (tmp1, tmp1, loongarch_tls_symbol));\n+\t      emit_insn (gen_lui_h_hi12 (tmp1, tmp1, loongarch_tls_symbol));\n+\t      loongarch_emit_move (dest,\n+\t\t\t\t   gen_rtx_MEM (Pmode,\n+\t\t\t\t\t\tgen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t      high, tmp1)));\n \t    }\n-\t  else\n-\t    loongarch_emit_move (dest, loongarch_tls_symbol);\n+\t  break;\n+\n+\tcase CMODEL_LARGE:\n+\tcase CMODEL_TINY:\n+\tcase CMODEL_TINY_STATIC:\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n+\n       insn = emit_call_insn (gen_call_value_internal (v0, dest, const0_rtx));\n     }\n \n@@ -2618,6 +2670,24 @@ loongarch_legitimize_call_address (rtx addr)\n       loongarch_emit_move (reg, addr);\n       return reg;\n     }\n+\n+  enum loongarch_symbol_type symbol_type = loongarch_classify_symbol (addr);\n+\n+  /* Split function call insn 'bl sym' or 'bl %plt(sym)' to :\n+     pcalau12i $rd, %pc_hi20(sym)\n+     jr $rd, %pc_lo12(sym).  */\n+\n+  if (TARGET_CMODEL_MEDIUM\n+      && TARGET_EXPLICIT_RELOCS\n+      && (SYMBOL_REF_P (addr) || LABEL_REF_P (addr))\n+      && (symbol_type == SYMBOL_PCREL\n+\t  || (symbol_type == SYMBOL_GOT_DISP && flag_plt)))\n+    {\n+      rtx reg = gen_reg_rtx (Pmode);\n+      emit_insn (gen_pcalau12i (Pmode, reg, addr));\n+      return gen_rtx_LO_SUM (Pmode, reg, addr);\n+    }\n+\n   return addr;\n }\n \n@@ -5996,6 +6066,7 @@ loongarch_option_override_internal (struct gcc_options *opts)\n \tbreak;\n \n       case CMODEL_TINY_STATIC:\n+      case CMODEL_MEDIUM:\n       case CMODEL_NORMAL:\n       case CMODEL_TINY:\n       case CMODEL_LARGE:"}, {"sha": "3787fd8230f4e6d7def8b12d94c3e6e42137912d", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 119, "deletions": 6, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -59,11 +59,15 @@\n   UNSPEC_CRCC\n \n   UNSPEC_LOAD_FROM_GOT\n+  UNSPEC_PCALAU12I\n   UNSPEC_ORI_L_LO12\n   UNSPEC_LUI_L_HI20\n   UNSPEC_LUI_H_LO20\n   UNSPEC_LUI_H_HI12\n   UNSPEC_TLS_LOW\n+\n+  UNSPEC_SIBCALL_VALUE_MULTIPLE_INTERNAL_1\n+  UNSPEC_CALL_VALUE_MULTIPLE_INTERNAL_1\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -1946,6 +1950,14 @@\n   [(set_attr \"type\" \"move\")]\n )\n \n+(define_insn \"@pcalau12i<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=j\")\n+\t(unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")]\n+\tUNSPEC_PCALAU12I))]\n+  \"\"\n+  \"pcalau12i\\t%0,%%pc_hi20(%1)\"\n+  [(set_attr \"type\" \"move\")])\n+\n (define_insn \"@ori_l_lo12<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n@@ -2877,7 +2889,12 @@\n {\n   rtx target = loongarch_legitimize_call_address (XEXP (operands[0], 0));\n \n-  emit_call_insn (gen_sibcall_internal (target, operands[1]));\n+  if (GET_CODE (target) == LO_SUM)\n+    emit_call_insn (gen_sibcall_internal_1 (Pmode, XEXP (target, 0),\n+\t\t\t\t\t    XEXP (target, 1),\n+\t\t\t\t\t    operands[1]));\n+  else\n+    emit_call_insn (gen_sibcall_internal (target, operands[1]));\n   DONE;\n })\n \n@@ -2891,6 +2908,14 @@\n    b\\t%%plt(%0)\"\n   [(set_attr \"jirl\" \"indirect,direct,direct\")])\n \n+(define_insn \"@sibcall_internal_1<mode>\"\n+  [(call (mem:P (lo_sum:P (match_operand:P 0 \"register_operand\" \"j\")\n+\t\t\t  (match_operand:P 1 \"symbolic_operand\" \"\")))\n+\t (match_operand 2 \"\" \"\"))]\n+  \"SIBLING_CALL_P (insn) && TARGET_CMODEL_MEDIUM\"\n+  \"jirl\\t$r0,%0,%%pc_lo12(%1)\"\n+  [(set_attr \"jirl\" \"indirect\")])\n+\n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"\")\n \t\t   (call (match_operand 1 \"\")\n@@ -2906,7 +2931,14 @@\n       rtx arg1 = XEXP (XVECEXP (operands[0],0, 0), 0);\n       rtx arg2 = XEXP (XVECEXP (operands[0],0, 1), 0);\n \n-      emit_call_insn (gen_sibcall_value_multiple_internal (arg1, target,\n+      if (GET_CODE (target) == LO_SUM)\n+\temit_call_insn (gen_sibcall_value_multiple_internal_1 (Pmode, arg1,\n+\t\t\t\t\t\t\t   XEXP (target, 0),\n+\t\t\t\t\t\t\t   XEXP (target, 1),\n+\t\t\t\t\t\t\t   operands[2],\n+\t\t\t\t\t\t\t   arg2));\n+      else\n+\temit_call_insn (gen_sibcall_value_multiple_internal (arg1, target,\n \t\t\t\t\t\t\t   operands[2],\n \t\t\t\t\t\t\t   arg2));\n     }\n@@ -2916,7 +2948,13 @@\n       if (GET_CODE (operands[0]) == PARALLEL && XVECLEN (operands[0], 0) == 1)\n \toperands[0] = XEXP (XVECEXP (operands[0], 0, 0), 0);\n \n-      emit_call_insn (gen_sibcall_value_internal (operands[0], target,\n+      if (GET_CODE (target) == LO_SUM)\n+\temit_call_insn (gen_sibcall_value_internal_1 (Pmode, operands[0],\n+\t\t\t\t\t\t  XEXP (target, 0),\n+\t\t\t\t\t\t  XEXP (target, 1),\n+\t\t\t\t\t\t  operands[2]));\n+      else\n+\temit_call_insn (gen_sibcall_value_internal (operands[0], target,\n \t\t\t\t\t\t  operands[2]));\n     }\n   DONE;\n@@ -2933,6 +2971,15 @@\n    b\\t%%plt(%1)\"\n   [(set_attr \"jirl\" \"indirect,direct,direct\")])\n \n+(define_insn \"@sibcall_value_internal_1<mode>\"\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(call (mem:P (lo_sum:P (match_operand:P 1 \"register_operand\" \"j\")\n+\t\t\t       (match_operand:P 2 \"symbolic_operand\" \"\")))\n+\t      (match_operand 3 \"\" \"\")))]\n+  \"SIBLING_CALL_P (insn) && TARGET_CMODEL_MEDIUM\"\n+  \"jirl\\t$r0,%1,%%pc_lo12(%2)\"\n+  [(set_attr \"jirl\" \"indirect\")])\n+\n (define_insn \"sibcall_value_multiple_internal\"\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(call (mem:SI (match_operand 1 \"call_insn_operand\" \"j,c,b\"))\n@@ -2947,6 +2994,21 @@\n    b\\t%%plt(%1)\"\n   [(set_attr \"jirl\" \"indirect,direct,direct\")])\n \n+(define_insn \"@sibcall_value_multiple_internal_1<mode>\"\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(call (mem:P (unspec:P [(match_operand:P 1 \"register_operand\" \"j\")\n+\t\t\t        (match_operand:P 2 \"symbolic_operand\" \"\")]\n+\t\t      UNSPEC_SIBCALL_VALUE_MULTIPLE_INTERNAL_1))\n+\t      (match_operand 3 \"\" \"\")))\n+   (set (match_operand 4 \"register_operand\" \"\")\n+\t(call (mem:P (unspec:P [(match_dup 1)\n+\t\t\t        (match_dup 2)]\n+\t\t      UNSPEC_SIBCALL_VALUE_MULTIPLE_INTERNAL_1))\n+\t      (match_dup 3)))]\n+  \"SIBLING_CALL_P (insn) && TARGET_CMODEL_MEDIUM\"\n+  \"jirl\\t$r0,%1,%%pc_lo12(%2)\"\n+  [(set_attr \"jirl\" \"indirect\")])\n+\n (define_expand \"call\"\n   [(parallel [(call (match_operand 0 \"\")\n \t\t    (match_operand 1 \"\"))\n@@ -2956,7 +3018,11 @@\n {\n   rtx target = loongarch_legitimize_call_address (XEXP (operands[0], 0));\n \n-  emit_call_insn (gen_call_internal (target, operands[1]));\n+  if (GET_CODE (target) == LO_SUM)\n+    emit_call_insn (gen_call_internal_1 (Pmode, XEXP (target, 0),\n+\t\t\t\t\t XEXP (target, 1), operands[1]));\n+  else\n+    emit_call_insn (gen_call_internal (target, operands[1]));\n   DONE;\n })\n \n@@ -2971,6 +3037,15 @@\n    bl\\t%%plt(%0)\"\n   [(set_attr \"jirl\" \"indirect,direct,direct\")])\n \n+(define_insn \"@call_internal_1<mode>\"\n+  [(call (mem:P (lo_sum:P (match_operand:P 0 \"register_operand\" \"j\")\n+\t\t\t  (match_operand:P 1 \"symbolic_operand\" \"\")))\n+\t (match_operand 2 \"\" \"\"))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n+  \"TARGET_CMODEL_MEDIUM\"\n+  \"jirl\\t$r1,%0,%%pc_lo12(%1)\"\n+  [(set_attr \"jirl\" \"indirect\")])\n+\n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"\")\n \t\t   (call (match_operand 1 \"\")\n@@ -2985,7 +3060,13 @@\n       rtx arg1 = XEXP (XVECEXP (operands[0], 0, 0), 0);\n       rtx arg2 = XEXP (XVECEXP (operands[0], 0, 1), 0);\n \n-      emit_call_insn (gen_call_value_multiple_internal (arg1, target,\n+      if (GET_CODE (target) == LO_SUM)\n+\temit_call_insn (gen_call_value_multiple_internal_1 (Pmode, arg1,\n+\t\t\t\t\t\t\t    XEXP (target, 0),\n+\t\t\t\t\t\t\t    XEXP (target, 1),\n+\t\t\t\t\t\t\t    operands[2], arg2));\n+      else\n+\temit_call_insn (gen_call_value_multiple_internal (arg1, target,\n \t\t\t\t\t\t\toperands[2], arg2));\n     }\n    else\n@@ -2994,7 +3075,13 @@\n       if (GET_CODE (operands[0]) == PARALLEL && XVECLEN (operands[0], 0) == 1)\n \t    operands[0] = XEXP (XVECEXP (operands[0], 0, 0), 0);\n \n-      emit_call_insn (gen_call_value_internal (operands[0], target,\n+      if (GET_CODE (target) == LO_SUM)\n+\temit_call_insn (gen_call_value_internal_1 (Pmode, operands[0],\n+\t\t\t\t\t\t   XEXP (target, 0),\n+\t\t\t\t\t\t   XEXP (target, 1),\n+\t\t\t\t\t\t   operands[2]));\n+      else\n+\temit_call_insn (gen_call_value_internal (operands[0], target,\n \t\t\t\t\t       operands[2]));\n     }\n   DONE;\n@@ -3012,6 +3099,16 @@\n    bl\\t%%plt(%1)\"\n   [(set_attr \"jirl\" \"indirect,direct,direct\")])\n \n+(define_insn \"@call_value_internal_1<mode>\"\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(call (mem:P (lo_sum:P (match_operand:P 1 \"register_operand\" \"j\")\n+\t\t\t       (match_operand:P 2 \"symbolic_operand\" \"\")))\n+\t      (match_operand 3 \"\" \"\")))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n+  \"TARGET_CMODEL_MEDIUM\"\n+  \"jirl\\t$r1,%1,%%pc_lo12(%2)\"\n+  [(set_attr \"jirl\" \"indirect\")])\n+\n (define_insn \"call_value_multiple_internal\"\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(call (mem:SI (match_operand 1 \"call_insn_operand\" \"e,c,b\"))\n@@ -3027,6 +3124,22 @@\n    bl\\t%%plt(%1)\"\n   [(set_attr \"jirl\" \"indirect,direct,direct\")])\n \n+(define_insn \"@call_value_multiple_internal_1<mode>\"\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(call (mem:P (unspec:P [(match_operand:P 1 \"register_operand\" \"j\")\n+\t\t\t        (match_operand:P 2 \"symbolic_operand\" \"\")]\n+\t\t      UNSPEC_CALL_VALUE_MULTIPLE_INTERNAL_1))\n+\t      (match_operand 3 \"\" \"\")))\n+   (set (match_operand 4 \"register_operand\" \"\")\n+\t(call (mem:P (unspec:P [(match_dup 1)\n+\t\t\t        (match_dup 2)]\n+\t\t      UNSPEC_CALL_VALUE_MULTIPLE_INTERNAL_1))\n+\t      (match_dup 3)))\n+   (clobber (reg:SI RETURN_ADDR_REGNUM))]\n+  \"TARGET_CMODEL_MEDIUM\"\n+  \"jirl\\t$r1,%1,%%pc_lo12(%2)\"\n+  [(set_attr \"jirl\" \"indirect\")])\n+\n \n ;; Call subroutine returning any type.\n (define_expand \"untyped_call\""}, {"sha": "6395234218b460504bf226f7f908c0f8cac4b8bb", "filename": "gcc/config/loongarch/loongarch.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Floongarch.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.opt?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -179,6 +179,9 @@ Enum(cmodel) String(tiny) Value(CMODEL_TINY)\n EnumValue\n Enum(cmodel) String(tiny-static) Value(CMODEL_TINY_STATIC)\n \n+EnumValue\n+Enum(cmodel) String(medium) Value(CMODEL_MEDIUM)\n+\n EnumValue\n Enum(cmodel) String(large) Value(CMODEL_LARGE)\n "}, {"sha": "8bd0c1376c94b11e998820ee8824f427778c84d2", "filename": "gcc/config/loongarch/predicates.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fconfig%2Floongarch%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Fpredicates.md?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -123,16 +123,27 @@\n   if (offset != const0_rtx)\n     return false;\n \n+  /* When compiling with '-mcmodel=medium -mexplicit-relocs'\n+     symbols are splited in loongarch_legitimize_call_address.\n+\n+     When compiling with '-mcmodel=medium -mno-explicit-relocs',\n+     first obtain the symbolic address or the address of the\n+     plt entry, and then perform an indirect jump, so return false.  */\n+\n   switch (symbol_type)\n     {\n     case SYMBOL_PCREL:\n-      if (TARGET_CMODEL_EXTREME)\n+      if (TARGET_CMODEL_EXTREME\n+\t  || (TARGET_CMODEL_MEDIUM && !TARGET_EXPLICIT_RELOCS))\n \treturn false;\n       else\n \treturn 1;\n \n     case SYMBOL_GOT_DISP:\n-      if (TARGET_CMODEL_EXTREME || !flag_plt)\n+      if (TARGET_CMODEL_EXTREME\n+\t  || !flag_plt\n+\t  || (flag_plt && TARGET_CMODEL_MEDIUM\n+\t      && !TARGET_EXPLICIT_RELOCS))\n \treturn false;\n       else\n \treturn 1;"}, {"sha": "3359313d9c5d4f9d2c11eb8a403aeafc977b7bd0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -25098,6 +25098,9 @@ Set the code model to one of:\n The text segment must be within 128MB addressing space.  The data segment must\n be within 2GB addressing space.\n \n+@item medium\n+The text segment and data segment must be within 2GB addressing space.\n+\n @item large (Not implemented yet)\n \n @item extreme"}, {"sha": "276d73e5ee88c8ccd2101039f815e17283aac0eb", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-1.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fplt -mno-explicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*la\\.global\\t.*g\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test1:.*la\\.global\\t.*f\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test2:.*la\\.local\\t.*l\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test3:.*la\\.global\\t.*\\_\\_tls\\_get\\_addr\" } } */\n+\n+extern void g (void);\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "237821c066ba7baca8646548b26b4aa5c317f92a", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-2.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fplt -mno-explicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*la\\.global\\t.*g\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test1:.*la\\.local\\t.*f\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test2:.*la\\.local\\t.*l\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test3:.*la\\.global\\t.*\\_\\_tls\\_get\\_addr\" } } */\n+\n+extern void g (void);\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "9a6e16103bcba9c1414e6197d7a83103d06517f0", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-3.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fno-plt -mno-explicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*la\\.global\\t.*g\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test1:.*la\\.global\\t.*f\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test2:.*la\\.local\\t.*l\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test3:.*la\\.global\\t.*\\_\\_tls\\_get\\_addr\" } } */\n+\n+extern void g (void);\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "2577e34523915440a0d52b005a44da85759e2c17", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-4.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fno-plt -mno-explicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*la\\.global\\t.*g\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test1:.*la\\.local\\t.*f\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test2:.*la\\.local\\t.*l\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test3:.*la\\.global\\t.*\\_\\_tls\\_get\\_addr\" } } */\n+\n+extern void g (void);\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "d70b6ea46636011347d0a8812fd5d6f6998e99d0", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-5.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-5.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fplt -mexplicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*pcalau12i.*%pc_hi20\\\\(g\\\\)\\n\\tjirl.*pc_lo12\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test1:.*pcalau12i.*%pc_hi20\\\\(f\\\\)\\n\\tjirl.*%pc_lo12\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test2:.*pcalau12i.*%pc_hi20\\\\(l\\\\)\\n\\tjirl.*%pc_lo12\\\\(l\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test3:.*pcalau12i.*%pc_hi20\\\\(__tls_get_addr\\\\)\\n\\t.*\\n\\tjirl.*%pc_lo12\\\\(__tls_get_addr\\\\)\" } } */\n+\n+extern void g (void);\n+\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "f963a99441a9aef90367592f8c4e1191ea4ee214", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-6.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-6.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fplt -mexplicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*pcalau12i.*%pc_hi20\\\\(g\\\\)\\n\\tjirl.*pc_lo12\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test1:.*pcalau12i.*%pc_hi20\\\\(f\\\\)\\n\\tjirl.*%pc_lo12\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test2:.*pcalau12i.*%pc_hi20\\\\(l\\\\)\\n\\tjirl.*%pc_lo12\\\\(l\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test3:.*pcalau12i.*%pc_hi20\\\\(__tls_get_addr\\\\)\\n\\t.*\\n\\tjirl.*%pc_lo12\\\\(__tls_get_addr\\\\)\" } } */\n+\n+extern void g (void);\n+\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "f2818b2da7655bdbf54f0da72247760e27f052af", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-7.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fpic -fno-plt -mexplicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*pcalau12i\\t.*%got_pc_hi20\\\\(g\\\\)\\n\\tld\\.d\\t.*%got_pc_lo12\\\\(g\\\\)\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test1:.*pcalau12i\\t.*%got_pc_hi20\\\\(f\\\\)\\n\\tld\\.d\\t.*%got_pc_lo12\\\\(f\\\\)\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test2:.*pcalau12i\\t.*%pc_hi20\\\\(l\\\\)\\n\\tjirl.*%pc_lo12\\\\(l\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test3:.*pcalau12i.*%got_pc_hi20\\\\(__tls_get_addr\\\\)\\n\\tld\\.d.*%got_pc_lo12\\\\(__tls_get_addr\\\\)\" } } */\n+\n+\n+extern void g (void);\n+\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "7fa873d84bb25cabf0c1993367a4a14b483253fd", "filename": "gcc/testsuite/gcc.target/loongarch/func-call-medium-8.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffunc-call-medium-8.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -O0 -fno-pic -fno-plt -mexplicit-relocs -mcmodel=medium\" } */\n+/* { dg-final { scan-assembler \"test:.*pcalau12i\\t.*%got_pc_hi20\\\\(g\\\\)\\n\\tld\\.d\\t.*%got_pc_lo12\\\\(g\\\\)\\n\\tjirl\" } } */\n+/* { dg-final { scan-assembler \"test1:.*pcalau12i\\t.*%pc_hi20\\\\(f\\\\)\\n\\tjirl.*%pc_lo12\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test2:.*pcalau12i\\t.*%pc_hi20\\\\(l\\\\)\\n\\tjirl.*%pc_lo12\\\\(l\\\\)\" } } */\n+/* { dg-final { scan-assembler \"test3:.*pcalau12i.*%got_pc_hi20\\\\(__tls_get_addr\\\\)\\n\\tld\\.d.*%got_pc_lo12\\\\(__tls_get_addr\\\\)\" } } */\n+\n+extern void g (void);\n+\n+void\n+f (void)\n+{}\n+\n+static void\n+l (void)\n+{}\n+\n+void\n+test (void)\n+{\n+  g ();\n+}\n+\n+void\n+test1 (void)\n+{\n+  f ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  l ();\n+}\n+\n+__attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n+\n+void\n+test3 (void)\n+{\n+  a = 10;\n+}"}, {"sha": "375663286f09f906f17c69bd0eac1c6a030464c4", "filename": "gcc/testsuite/gcc.target/loongarch/tls-gd-noplt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ftls-gd-noplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1028c5773049bae4bb4261e3bbaae442455de83/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ftls-gd-noplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ftls-gd-noplt.c?ref=d1028c5773049bae4bb4261e3bbaae442455de83", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-plt -mcmodel=normal\" } */\n-/* { dg-final { scan-assembler \"pcalau12i\\t.*%got_pc_hi20\\\\(__tls_get_addr\\\\)\" } } */\n+/* { dg-options \"-O0 -fno-plt -mcmodel=normal -mexplicit-relocs\" } */\n+/* { dg-final { scan-assembler \"pcalau12i\\t.*%got_pc_hi20\\\\(__tls_get_addr\\\\)\\n\\tld\\.d.*%got_pc_lo12\\\\(__tls_get_addr\\\\)\" } } */\n \n __attribute__ ((tls_model (\"global-dynamic\"))) __thread int a;\n "}]}