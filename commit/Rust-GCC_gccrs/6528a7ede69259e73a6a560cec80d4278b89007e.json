{"sha": "6528a7ede69259e73a6a560cec80d4278b89007e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUyOGE3ZWRlNjkyNTllNzNhNmE1NjBjZWM4MGQ0Mjc4Yjg5MDA3ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-30T13:58:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-10-30T13:58:19Z"}, "message": "[multiple changes]\n\n2009-10-30  Emmanuel Briot  <briot@adacore.com>\n\n\t* make.adb (Start_Compile_If_Possible): Compute location of resulting\n\tALI file in this procedure instead of after the compilation itself,\n\tsince the current directory might have changed in between when using\n\t-j<n>.\n\n\t* osint.ads: Addded missing alignment clause.\n\n\t* adaint.c, adaint.h, osint.adb (__gnat_reset_attributes,\n\t__gnat_size_of_file_attributes): Rename reset_attributes and\n\tsize_of_file_attributes.\n\n2009-10-30  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_scil.adb (Adjust_SCIL_Node): Add missing management of sequences\n\tof statements when searching for SCIL nodes.\n\n2009-10-30  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnatlink.adb, link.c: By default use shared libgcc on darwin.\n\nFrom-SVN: r153749", "tree": {"sha": "c558e86b253a79fb4eef0c8ec6e7c54be0810742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c558e86b253a79fb4eef0c8ec6e7c54be0810742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6528a7ede69259e73a6a560cec80d4278b89007e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6528a7ede69259e73a6a560cec80d4278b89007e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6528a7ede69259e73a6a560cec80d4278b89007e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6528a7ede69259e73a6a560cec80d4278b89007e/comments", "author": null, "committer": null, "parents": [{"sha": "cafdbd2e9d68402e124f8c345d2524f2b0bb0051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafdbd2e9d68402e124f8c345d2524f2b0bb0051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cafdbd2e9d68402e124f8c345d2524f2b0bb0051"}], "stats": {"total": 200, "additions": 133, "deletions": 67}, "files": [{"sha": "8c1d75d2bd7a8868d1fe4d975f1cf2f7c2ee6c92", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -1,3 +1,25 @@\n+2009-10-30  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* make.adb (Start_Compile_If_Possible): Compute location of resulting\n+\tALI file in this procedure instead of after the compilation itself,\n+\tsince the current directory might have changed in between when using\n+\t-j<n>.\n+\n+\t* osint.ads: Addded missing alignment clause.\n+\n+\t* adaint.c, adaint.h, osint.adb (__gnat_reset_attributes,\n+\t__gnat_size_of_file_attributes): Rename reset_attributes and\n+\tsize_of_file_attributes.\n+\n+2009-10-30  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_scil.adb (Adjust_SCIL_Node): Add missing management of sequences\n+\tof statements when searching for SCIL nodes.\n+\n+2009-10-30  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnatlink.adb, link.c: By default use shared libgcc on darwin.\n+\n 2009-10-30  Emmanuel Briot  <briot@adacore.com>\n \n \t* make.adb, osint.adb (Add_Lib_Search_Dir): Do not add if dir is"}, {"sha": "5bce387d2bb08c51192e21f1172224b9fb3668ed", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -325,7 +325,7 @@ const int __gnat_vmsp = 0;\n #endif\n \n /* Used for Ada bindings */\n-const int size_of_file_attributes = sizeof (struct file_attributes);\n+const int __gnat_size_of_file_attributes = sizeof (struct file_attributes);\n \n /* Reset the file attributes as if no system call had been performed */\n void __gnat_stat_to_attr (int fd, char* name, struct file_attributes* attr);\n@@ -378,7 +378,7 @@ to_ptr32 (char **ptr64)\n #endif\n \n void\n-reset_attributes\n+__gnat_reset_attributes\n   (struct file_attributes* attr)\n {\n   attr->exists     = -1;\n@@ -1133,15 +1133,15 @@ long\n __gnat_file_length (int fd)\n {\n   struct file_attributes attr;\n-  reset_attributes (&attr);\n+  __gnat_reset_attributes (&attr);\n   return __gnat_file_length_attr (fd, NULL, &attr);\n }\n \n long\n __gnat_named_file_length (char *name)\n {\n   struct file_attributes attr;\n-  reset_attributes (&attr);\n+  __gnat_reset_attributes (&attr);\n   return __gnat_file_length_attr (-1, name, &attr);\n }\n \n@@ -1371,7 +1371,7 @@ OS_Time\n __gnat_file_time_name (char *name)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_file_time_name_attr (name, &attr);\n }\n \n@@ -1465,7 +1465,7 @@ OS_Time\n __gnat_file_time_fd (int fd)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_file_time_fd_attr (fd, &attr);\n }\n \n@@ -1819,7 +1819,7 @@ int\n __gnat_file_exists (char *name)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_file_exists_attr (name, &attr);\n }\n \n@@ -1876,7 +1876,7 @@ int\n __gnat_is_regular_file (char *name)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_is_regular_file_attr (name, &attr);\n }\n \n@@ -1894,7 +1894,7 @@ int\n __gnat_is_directory (char *name)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_is_directory_attr (name, &attr);\n }\n \n@@ -2118,7 +2118,7 @@ int\n __gnat_is_readable_file (char *name)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_is_readable_file_attr (name, &attr);\n }\n \n@@ -2156,7 +2156,7 @@ int\n __gnat_is_writable_file (char *name)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_is_writable_file_attr (name, &attr);\n }\n \n@@ -2192,7 +2192,7 @@ int\n __gnat_is_executable_file (char *name)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_is_executable_file_attr (name, &attr);\n }\n \n@@ -2334,7 +2334,7 @@ int\n __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n {\n    struct file_attributes attr;\n-   reset_attributes (&attr);\n+   __gnat_reset_attributes (&attr);\n    return __gnat_is_symbolic_link_attr (name, &attr);\n \n }"}, {"sha": "76a181a001cb5e79d13acb8a559cc08248fd6e95", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -155,7 +155,7 @@ extern int    __gnat_is_writable_file\t\t   (char *);\n extern int    __gnat_is_readable_file\t\t   (char *name);\n extern int    __gnat_is_executable_file      (char *name);\n \n-extern void reset_attributes (struct file_attributes* attr);\n+extern void __gnat_reset_attributes (struct file_attributes* attr);\n extern long   __gnat_file_length_attr        (int, char *, struct file_attributes *);\n extern OS_Time __gnat_file_time_name_attr    (char *, struct file_attributes *);\n extern OS_Time __gnat_file_time_fd_attr      (int,    struct file_attributes *);"}, {"sha": "5347269be001b66011381f1f3a2ab9c0dd034f67", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -189,6 +189,13 @@ procedure Gnatlink is\n    Object_List_File_Required : Boolean := False;\n    --  Set to True to force generation of a response file\n \n+   Shared_Libgcc_Default : Character;\n+   for Shared_Libgcc_Default'Size use Character'Size;\n+   pragma Import\n+     (C, Shared_Libgcc_Default, \"__gnat_shared_libgcc_default\");\n+   --  Indicates wether libgcc should be statically linked (use 'T') or\n+   --  dynamically linked (use 'H') by default.\n+\n    function Base_Name (File_Name : String) return String;\n    --  Return just the file name part without the extension (if present)\n \n@@ -2141,11 +2148,15 @@ begin\n \n             if Linker_Path = Gcc_Path and then VM_Target = No_VM then\n \n-               --  If gcc is not called with -shared-libgcc, call it with\n-               --  -static-libgcc, as there are some platforms where one of\n-               --  these two switches is compulsory to link.\n+               --  For systems where the default is to link statically\n+               --  with libgcc, if gcc is not called with\n+               --  -shared-libgcc, call it with -static-libgcc, as\n+               --  there are some platforms where one of these two\n+               --  switches is compulsory to link.\n \n-               if not Shared_Libgcc_Seen then\n+               if Shared_Libgcc_Default = 'T'\n+                 and then not Shared_Libgcc_Seen\n+               then\n                   Linker_Options.Increment_Last;\n                   Linker_Options.Table (Linker_Options.Last) := Static_Libgcc;\n                   Num_Args := Num_Args + 1;"}, {"sha": "6ebd329612ff1b25ade4e4347955550c0392868e", "filename": "gcc/ada/link.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -62,6 +62,9 @@\n /*  shared_libgnat_default gives the system dependent link method that      */\n /*  be used by default for linking libgnat (shared or static)               */\n \n+/*  shared_libgcc_default gives the system dependent link method that       */\n+/*  be used by default for linking libgcc (shared or statis)                */\n+\n /*  using_gnu_linker is set to 1 when the GNU linker is used under this     */\n /*  target.                                                                 */\n \n@@ -89,6 +92,7 @@ const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n int __gnat_link_max = 10000;\n unsigned char __gnat_objlist_file_supported = 1;\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n@@ -99,6 +103,7 @@ const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n int __gnat_link_max = 5000;\n unsigned char __gnat_objlist_file_supported = 1;\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n@@ -109,6 +114,7 @@ const char *__gnat_run_path_option = \"\";\n int __gnat_link_max = 30000;\n unsigned char __gnat_objlist_file_supported = 1;\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n unsigned char __gnat_using_gnu_linker = 1;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n@@ -119,6 +125,7 @@ const char *__gnat_run_path_option = \"-Wl,+b,\";\n int __gnat_link_max = 5000;\n unsigned char __gnat_objlist_file_supported = 1;\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n@@ -129,6 +136,7 @@ const char *__gnat_run_path_option = \"\";\n int __gnat_link_max = 15000;\n const unsigned char __gnat_objlist_file_supported = 1;\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n@@ -137,6 +145,7 @@ unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"\";\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n unsigned char __gnat_using_gnu_linker = 0;\n@@ -147,6 +156,7 @@ unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"-Wl,-R\";\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n unsigned char __gnat_using_gnu_linker = 0;\n@@ -157,6 +167,7 @@ unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 8192;\n unsigned char __gnat_objlist_file_supported = 1;\n unsigned char __gnat_using_gnu_linker = 1;\n@@ -167,6 +178,7 @@ unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_object_file_option = \"-Wl,-filelist,\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = SHARED;\n int __gnat_link_max = 262144;\n unsigned char __gnat_objlist_file_supported = 1;\n unsigned char __gnat_using_gnu_linker = 0;\n@@ -177,6 +189,7 @@ unsigned char __gnat_separate_run_path_options = 1;\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 8192;\n unsigned char __gnat_objlist_file_supported = 1;\n unsigned char __gnat_using_gnu_linker = 1;\n@@ -187,6 +200,7 @@ unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_object_file_option = \"\";\n const char *__gnat_run_path_option = \"\";\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n unsigned char __gnat_using_gnu_linker = 0;\n@@ -200,6 +214,7 @@ unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_run_path_option = \"\";\n const char *__gnat_object_file_option = \"\";\n char __gnat_shared_libgnat_default = STATIC;\n+char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n unsigned char __gnat_using_gnu_linker = 0;"}, {"sha": "12e6386d0459566decbfae7672f37c955bd0d6bd", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 56, "deletions": 46, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -1866,7 +1866,8 @@ package body Make is\n                                   Normalize_Pathname\n                                     (Dir_Name\n                                       (Get_Name_String (Full_Lib_File)),\n-                                     Resolve_Links  => True,\n+                                     Resolve_Links  =>\n+                                       Opt.Follow_Links_For_Dirs,\n                                      Case_Sensitive => False);\n \n                begin\n@@ -2561,7 +2562,7 @@ package body Make is\n          pragma Assert (Pid /= Invalid_Pid);\n \n          Running_Compile (OC1) :=\n-           (Pid => Pid,\n+           (Pid              => Pid,\n             Full_Source_File => Sfile,\n             Lib_File         => Afile,\n             Full_Lib_File    => Full_Lib_File,\n@@ -2606,11 +2607,11 @@ package body Make is\n \n             for J in Running_Compile'First .. Outstanding_Compiles loop\n                if Pid = Running_Compile (J).Pid then\n-                  Data  := Running_Compile (J);\n+                  Data    := Running_Compile (J);\n                   Project := Running_Compile (J).Project;\n \n-                  --  If a mapping file was used by this compilation,\n-                  --  get its file name for reuse by a subsequent compilation\n+                  --  If a mapping file was used by this compilation, get its\n+                  --  file name for reuse by a subsequent compilation.\n \n                   if Running_Compile (J).Mapping_File /= No_Mapping_File then\n                      Comp_Data := Project_Compilation_Htable.Get\n@@ -3401,6 +3402,10 @@ package body Make is\n                         end if;\n                      end if;\n \n+                     --  Compute where the ALI file must be generated in\n+                     --  In_Place_Mode (this does not require to know the\n+                     --  location of the object directory)\n+\n                      if In_Place_Mode then\n                         if Full_Lib_File = No_File then\n                            --  If the library file was not found, then save\n@@ -3416,20 +3421,11 @@ package body Make is\n \n                            Lib_File := Full_Lib_File;\n                         end if;\n-\n-                        Lib_File_Attr := Unknown_Attributes;\n-\n-                     else\n-                        --  We will recompile, so we'll have to guess the\n-                        --  location of the object file based on the command\n-                        --  line switches and Object_Dir.\n-\n-                        Full_Lib_File := No_File;\n-                        Lib_File_Attr := Unknown_Attributes;\n                      end if;\n \n-                     --  Start the compilation and record it. We can do this\n-                     --  because there is at least one free process.\n+                     --  Start the compilation and record it. We can do\n+                     --  this because there is at least one free process.\n+                     --  This might change the current directory\n \n                      Collect_Arguments_And_Compile\n                        (Full_Source_File => Full_Source_File,\n@@ -3438,7 +3434,49 @@ package body Make is\n                         Pid              => Pid,\n                         Process_Created  => Process_Created);\n \n-                     --  Make sure we could successfully start the compilation\n+                     --  Compute where the ALI file will be generated (for\n+                     --  cases that might require to know the current\n+                     --  directory). The current directory might be changed\n+                     --  when compiling other files so we cannot rely on it\n+                     --  being the same to find the resulting ALI file.\n+\n+                     if not In_Place_Mode then\n+                        --  Compute the expected location of the ALI file. This\n+                        --  can be from several places:\n+                        --    -i => in place mode. In such a case,\n+                        --          Full_Lib_File has already been set above\n+                        --    -D => if specified\n+                        --    or defaults in current dir\n+                        --  We could simply use a call similar to\n+                        --     Osint.Full_Lib_File_Name (Lib_File)\n+                        --  but that involves system calls and is thus slower\n+\n+                        if Object_Directory_Path /= null then\n+                           Name_Len := 0;\n+                           Add_Str_To_Name_Buffer (Object_Directory_Path.all);\n+                           Add_Str_To_Name_Buffer (Get_Name_String (Lib_File));\n+                           Full_Lib_File := Name_Find;\n+                        else\n+                           if Project_Of_Current_Object_Directory /=\n+                             No_Project\n+                           then\n+                              Get_Name_String\n+                                (Project_Of_Current_Object_Directory\n+                                 .Object_Directory.Name);\n+                              Add_Str_To_Name_Buffer\n+                                (Get_Name_String (Lib_File));\n+                              Full_Lib_File := Name_Find;\n+                           else\n+                              Full_Lib_File := Lib_File;\n+                           end if;\n+                        end if;\n+\n+                     end if;\n+\n+                     Lib_File_Attr := Unknown_Attributes;\n+\n+                     --  Make sure we could successfully start\n+                     --  the Compilation.\n \n                      if Process_Created then\n                         if Pid = Invalid_Pid then\n@@ -3501,34 +3539,6 @@ package body Make is\n                     and Compilation_OK\n                     and (Output_Is_Object or Do_Bind_Step);\n \n-                  if Data.Full_Lib_File = No_File then\n-                     --  Compute the expected location of the ALI file. This\n-                     --  can be from several places:\n-                     --    -i => in place mode. In such a case, Full_Lib_File\n-                     --          has already been set above\n-                     --    -D => if specified\n-                     --  or defaults in current dir.\n-                     --\n-                     --  We could simply use a call similar to\n-                     --     Osint.Full_Lib_File_Name (Lib_File)\n-                     --  but that involves system calls and is thus slower.\n-\n-                     if Object_Directory_Path /= null then\n-                        Name_Len := 0;\n-                        Add_Str_To_Name_Buffer (Object_Directory_Path.all);\n-                        Add_Str_To_Name_Buffer\n-                          (Get_Name_String (Data.Lib_File));\n-                        Data.Full_Lib_File := Name_Find;\n-                     else\n-                        Data.Full_Lib_File := Data.Lib_File;\n-                     end if;\n-\n-                     --  Invalidate the cache for the attributes, since the\n-                     --  file was just created.\n-\n-                     Data.Lib_File_Attr := Unknown_Attributes;\n-                  end if;\n-\n                   Text := Read_Library_Info_From_Full\n                     (Data.Full_Lib_File, Data.Lib_File_Attr'Access);\n "}, {"sha": "1b1f50859840389d0d41c50bbce64c6de5445bc4", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -3197,7 +3197,7 @@ package body Osint is\n ----------------------------\n \n    procedure Reset_File_Attributes (Attr : System.Address);\n-   pragma Import (C, Reset_File_Attributes, \"reset_attributes\");\n+   pragma Import (C, Reset_File_Attributes, \"__gnat_reset_attributes\");\n \n begin\n    Initialization : declare\n@@ -3216,7 +3216,7 @@ begin\n \n       Sizeof_File_Attributes : Integer;\n       pragma Import (C, Sizeof_File_Attributes,\n-                     \"size_of_file_attributes\");\n+                     \"__gnat_size_of_file_attributes\");\n \n    begin\n       pragma Assert (Sizeof_File_Attributes <= File_Attributes_Size);"}, {"sha": "34b3f642fee9acd260da9892009f35a6b3f326f7", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -727,6 +727,7 @@ private\n    type File_Attributes is\n      array (1 .. File_Attributes_Size)\n      of System.Storage_Elements.Storage_Element;\n+   for File_Attributes'Alignment use Standard'Maximum_Alignment;\n \n    Unknown_Attributes : constant File_Attributes := (others => 0);\n    --  Will be initialized properly at elaboration (for efficiency later on,"}, {"sha": "cd4e66be554cfc2f2d65312ac84a4af9c2fe7fa9", "filename": "gcc/ada/sem_scil.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fsem_scil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6528a7ede69259e73a6a560cec80d4278b89007e/gcc%2Fada%2Fsem_scil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_scil.adb?ref=6528a7ede69259e73a6a560cec80d4278b89007e", "patch": "@@ -285,6 +285,14 @@ package body Sem_SCIL is\n                   return Found_Node;\n                end if;\n \n+            --  Actions in handled sequence of statements\n+\n+            when\n+               N_Handled_Sequence_Of_Statements =>\n+                  if Find_SCIL_Node (Statements (P)) then\n+                     return Found_Node;\n+                  end if;\n+\n             --  Conditions of while expression or elsif.\n \n             when N_Iteration_Scheme |\n@@ -505,7 +513,6 @@ package body Sem_SCIL is\n                N_Function_Call                          |\n                N_Function_Specification                 |\n                N_Generic_Association                    |\n-               N_Handled_Sequence_Of_Statements         |\n                N_Identifier                             |\n                N_In                                     |\n                N_Index_Or_Discriminant_Constraint       |"}]}