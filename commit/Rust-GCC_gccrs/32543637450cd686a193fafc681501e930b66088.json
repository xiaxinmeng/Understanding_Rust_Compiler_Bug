{"sha": "32543637450cd686a193fafc681501e930b66088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1NDM2Mzc0NTBjZDY4NmExOTNmYWZjNjgxNTAxZTkzMGI2NjA4OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-18T20:42:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-14T15:51:50Z"}, "message": "[Ada] Fix couple of bugs in the implementation of Round attribute\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Round>:\n\tAdjust commentary and set the Rounded_Result flag on the type\n\tconversion node when the node is needed.\n\t* exp_ch4.adb (Expand_N_Type_Conversion): Minor tweak.\n\t(Fixup_Universal_Fixed_Operation): Look through the type conversion\n\tonly when it is to Universal_Real.\n\t* exp_fixd.adb: Remove with and use clauses for Snames.\n\t(Build_Divide): Remove redundant test.\n\t(Expand_Convert_Float_To_Fixed): Use Rounded_Result flag on the\n\tnode to set the truncation parameter.", "tree": {"sha": "f94651e3cd22a1334a315956b69e50b6e51a94f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f94651e3cd22a1334a315956b69e50b6e51a94f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32543637450cd686a193fafc681501e930b66088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32543637450cd686a193fafc681501e930b66088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32543637450cd686a193fafc681501e930b66088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32543637450cd686a193fafc681501e930b66088/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2dc9fb66147830f1ca83206543bbef7f3966a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2dc9fb66147830f1ca83206543bbef7f3966a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2dc9fb66147830f1ca83206543bbef7f3966a40"}], "stats": {"total": 66, "additions": 27, "deletions": 39}, "files": [{"sha": "ff3d54f7880181a0ed3f8ae69d5175915d7eaaf3", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32543637450cd686a193fafc681501e930b66088/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32543637450cd686a193fafc681501e930b66088/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=32543637450cd686a193fafc681501e930b66088", "patch": "@@ -6196,44 +6196,46 @@ package body Exp_Attr is\n       -- Round --\n       -----------\n \n-      --  The handling of the Round attribute is quite delicate. The processing\n-      --  in Sem_Attr introduced a conversion to universal real, reflecting the\n-      --  semantics of Round, but we do not want anything to do with universal\n-      --  real at runtime, since this corresponds to using floating-point\n-      --  arithmetic.\n+      --  The handling of the Round attribute is delicate when the operand is\n+      --  universal fixed. In this case, the processing in Sem_Attr introduced\n+      --  a conversion to universal real, reflecting the semantics of Round,\n+      --  but we do not want anything to do with universal real at run time,\n+      --  since this corresponds to using floating-point arithmetic.\n \n       --  What we have now is that the Etype of the Round attribute correctly\n       --  indicates the final result type. The operand of the Round is the\n       --  conversion to universal real, described above, and the operand of\n       --  this conversion is the actual operand of Round, which may be the\n-      --  special case of a fixed point multiplication or division (Etype =\n-      --  universal fixed)\n+      --  special case of a fixed point multiplication or division.\n \n-      --  The exapander will expand first the operand of the conversion, then\n+      --  The expander will expand first the operand of the conversion, then\n       --  the conversion, and finally the round attribute itself, since we\n       --  always work inside out. But we cannot simply process naively in this\n       --  order. In the semantic world where universal fixed and real really\n       --  exist and have infinite precision, there is no problem, but in the\n       --  implementation world, where universal real is a floating-point type,\n       --  we would get the wrong result.\n \n-      --  So the approach is as follows. First, when expanding a multiply or\n-      --  divide whose type is universal fixed, we do nothing at all, instead\n-      --  deferring the operation till later.\n-\n-      --  The actual processing is done in Expand_N_Type_Conversion which\n-      --  handles the special case of Round by looking at its parent to see if\n-      --  it is a Round attribute, and if it is, handling the conversion (or\n-      --  its fixed multiply/divide child) in an appropriate manner.\n+      --  So the approach is as follows. When expanding a multiply or divide\n+      --  whose type is universal fixed, Fixup_Universal_Fixed_Operation will\n+      --  look up and skip the conversion to universal real if its parent is\n+      --  a Round attribute, taking information from this attribute node. In\n+      --  the other cases, Expand_N_Type_Conversion does the same by looking\n+      --  at its parent to see if it is a Round attribute, before calling the\n+      --  fixed-point expansion routine.\n \n       --  This means that by the time we get to expanding the Round attribute\n       --  itself, the Round is nothing more than a type conversion (and will\n       --  often be a null type conversion), so we just replace it with the\n       --  appropriate conversion operation.\n \n       when Attribute_Round =>\n-         Rewrite (N,\n-           Convert_To (Etype (N), Relocate_Node (First (Exprs))));\n+         if Etype (First (Exprs)) = Etype (N) then\n+            Rewrite (N, Relocate_Node (First (Exprs)));\n+         else\n+            Rewrite (N, Convert_To (Etype (N), First (Exprs)));\n+            Set_Rounded_Result (N);\n+         end if;\n          Analyze_And_Resolve (N);\n \n       --------------"}, {"sha": "91ae71efd211c1e2e866d5b39da1a0742f3fad1f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32543637450cd686a193fafc681501e930b66088/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32543637450cd686a193fafc681501e930b66088/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=32543637450cd686a193fafc681501e930b66088", "patch": "@@ -12556,9 +12556,9 @@ package body Exp_Ch4 is\n            and then Nkind (Parent (N)) = N_Attribute_Reference\n            and then Attribute_Name (Parent (N)) = Name_Round\n          then\n-            Set_Rounded_Result (N);\n             Set_Etype (N, Etype (Parent (N)));\n             Target_Type := Etype (N);\n+            Set_Rounded_Result (N);\n          end if;\n \n          if Is_Fixed_Point_Type (Target_Type) then\n@@ -13375,7 +13375,8 @@ package body Exp_Ch4 is\n       --  will be to universal real, and our real type comes from the Round\n       --  attribute (as well as an indication that we must round the result)\n \n-      if Nkind (Parent (Conv)) = N_Attribute_Reference\n+      if Etype (Conv) = Universal_Real\n+        and then Nkind (Parent (Conv)) = N_Attribute_Reference\n         and then Attribute_Name (Parent (Conv)) = Name_Round\n       then\n          Set_Etype (N, Base_Type (Etype (Parent (Conv))));"}, {"sha": "8edca447173e1ae2771628fcb0bdbe6d9b945790", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32543637450cd686a193fafc681501e930b66088/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32543637450cd686a193fafc681501e930b66088/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=32543637450cd686a193fafc681501e930b66088", "patch": "@@ -37,7 +37,6 @@ with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n-with Snames;   use Snames;\n with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n@@ -417,13 +416,9 @@ package body Exp_Fixd is\n \n       --  The result is rounded if the target of the operation is decimal\n       --  and Rounded_Result is set, or if the target of the operation\n-      --  is an integer type.\n+      --  is an integer type, as determined by Rounded_Result_Set.\n \n-      if Is_Integer_Type (Etype (N))\n-        or else Rounded_Result_Set (N)\n-      then\n-         Set_Rounded_Result (Rnode);\n-      end if;\n+      Set_Rounded_Result (Rnode, Rounded_Result_Set (N));\n \n       --  One more check. We did the divide operation using the longer of\n       --  the two sizes, which is reasonable. However, in the case where the\n@@ -1792,11 +1787,9 @@ package body Exp_Fixd is\n \n    procedure Expand_Convert_Float_To_Fixed (N : Node_Id) is\n       Expr        : constant Node_Id   := Expression (N);\n-      Orig_N      : constant Node_Id   := Original_Node (N);\n       Result_Type : constant Entity_Id := Etype (N);\n       Rng_Check   : constant Boolean   := Do_Range_Check (N);\n       Small       : constant Ureal     := Small_Value (Result_Type);\n-      Truncate    : Boolean;\n \n    begin\n       --  Optimize small = 1, where we can avoid the multiply completely\n@@ -1811,15 +1804,6 @@ package body Exp_Fixd is\n       --  round.\n \n       else\n-         if Is_Decimal_Fixed_Point_Type (Result_Type) then\n-            Truncate :=\n-              Nkind (Orig_N) /= N_Attribute_Reference\n-                or else Get_Attribute_Id\n-                          (Attribute_Name (Orig_N)) /= Attribute_Round;\n-         else\n-            Truncate := False;\n-         end if;\n-\n          Set_Result\n            (N     => N,\n             Expr  =>\n@@ -1828,7 +1812,8 @@ package body Exp_Fixd is\n                  L => Fpt_Value (Expr),\n                  R => Real_Literal (N, Ureal_1 / Small)),\n             Rchk  => Rng_Check,\n-            Trunc => Truncate);\n+            Trunc => Is_Decimal_Fixed_Point_Type (Result_Type)\n+                       and not Rounded_Result (N));\n       end if;\n    end Expand_Convert_Float_To_Fixed;\n "}]}