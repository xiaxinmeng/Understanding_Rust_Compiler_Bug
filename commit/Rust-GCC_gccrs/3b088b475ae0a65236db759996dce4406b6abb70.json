{"sha": "3b088b475ae0a65236db759996dce4406b6abb70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwODhiNDc1YWUwYTY1MjM2ZGI3NTk5OTZkY2U0NDA2YjZhYmI3MA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-04-08T12:22:41Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-04-08T12:22:41Z"}, "message": "epiphany.h (struct GTY (()) machine_function): Add member lr_slot_known.\n\n        * config/epiphany/epiphany.h (struct GTY (()) machine_function):\n        Add member lr_slot_known.\n        * config/epiphany/epiphany.md (reload_insi_ra): Compute lr_slot_offs\n        if necessary.\n        * config/epiphany/epiphany.c (epiphany_compute_frame_size):\n        Remove code that sets lr_slot_offset according to what a previous\n        version of epiphany_emit_save_restore used to do.\n        (epiphany_emit_save_restore): When doing an lr save or restore,\n        set/verify lr_slot_known and lr_slot_offset.\n\nFrom-SVN: r197577", "tree": {"sha": "9bf68a745c02f6be1adfd6e016b1d38fe3f5151d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf68a745c02f6be1adfd6e016b1d38fe3f5151d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b088b475ae0a65236db759996dce4406b6abb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b088b475ae0a65236db759996dce4406b6abb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b088b475ae0a65236db759996dce4406b6abb70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b088b475ae0a65236db759996dce4406b6abb70/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8484d41e41682c4a0a21b6e8ab8270a6db226a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8484d41e41682c4a0a21b6e8ab8270a6db226a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8484d41e41682c4a0a21b6e8ab8270a6db226a6"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "c16ea079414394ea6b3892c8d0689a9455374754", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b088b475ae0a65236db759996dce4406b6abb70", "patch": "@@ -1,3 +1,15 @@\n+2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/epiphany/epiphany.h (struct GTY (()) machine_function):\n+\tAdd member lr_slot_known.\n+\t* config/epiphany/epiphany.md (reload_insi_ra): Compute lr_slot_offs\n+\tif necessary.\n+\t* config/epiphany/epiphany.c (epiphany_compute_frame_size):\n+\tRemove code that sets lr_slot_offset according to what a previous\n+\tversion of epiphany_emit_save_restore used to do.\n+\t(epiphany_emit_save_restore): When doing an lr save or restore,\n+\tset/verify lr_slot_known and lr_slot_offset.\n+\n 2013-04-08  Xinyu Qi  <xyqi@marvell.com>\n \n  \tPR target/54338"}, {"sha": "9fec1991b246dbcfe114cd2c56c765a03c96d2c8", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=3b088b475ae0a65236db759996dce4406b6abb70", "patch": "@@ -964,7 +964,6 @@ epiphany_compute_frame_size (int size /* # of var. bytes allocated.  */)\n   int first_slot, last_slot, first_slot_offset, last_slot_offset;\n   int first_slot_size;\n   int small_slots = 0;\n-  long lr_slot_offset;\n \n   var_size\t= size;\n   args_size\t= crtl->outgoing_args_size;\n@@ -1116,28 +1115,6 @@ epiphany_compute_frame_size (int size /* # of var. bytes allocated.  */)\n     }\n   total_size = first_slot_offset + last_slot_offset;\n \n-  lr_slot_offset\n-    = (frame_pointer_needed ? first_slot_offset : (long) total_size);\n-  if (first_slot != GPR_LR)\n-    {\n-      int stack_offset = epiphany_stack_offset - UNITS_PER_WORD;\n-\n-      for (regno = 0; ; regno++)\n-\t{\n-\t  if (stack_offset + UNITS_PER_WORD - first_slot_size == 0\n-\t      && first_slot >= 0)\n-\t    {\n-\t      stack_offset -= first_slot_size;\n-\t      regno--;\n-\t    }\n-\t  else if (regno == GPR_LR)\n-\t    break;\n-\t  else if TEST_HARD_REG_BIT (gmask, regno)\n-\t    stack_offset -= UNITS_PER_WORD;\n-\t}\n-      lr_slot_offset += stack_offset;\n-    }\n-\n   /* Save computed information.  */\n   current_frame_info.total_size   = total_size;\n   current_frame_info.pretend_size = pretend_size;\n@@ -1150,7 +1127,6 @@ epiphany_compute_frame_size (int size /* # of var. bytes allocated.  */)\n   current_frame_info.first_slot_offset\t= first_slot_offset;\n   current_frame_info.first_slot_size\t= first_slot_size;\n   current_frame_info.last_slot_offset\t= last_slot_offset;\n-  MACHINE_FUNCTION (cfun)->lr_slot_offset = lr_slot_offset;\n \n   current_frame_info.initialized  = reload_completed;\n \n@@ -1622,6 +1598,28 @@ epiphany_emit_save_restore (int min, int limit, rtx addr, int epilogue_p)\n \tmem = skipped_mem;\n       else\n \tmem = gen_mem (mode, addr);\n+\n+      /* If we are loading / storing LR, note the offset that\n+\t gen_reload_insi_ra requires.  Since GPR_LR is even,\n+\t we only need to test n, even if mode is DImode.  */\n+      gcc_assert ((GPR_LR & 1) == 0);\n+      if (n == GPR_LR)\n+\t{\n+\t  long lr_slot_offset = 0;\n+\t  rtx m_addr = XEXP (mem, 0);\n+\n+\t  if (GET_CODE (m_addr) == PLUS)\n+\t    lr_slot_offset = INTVAL (XEXP (m_addr, 1));\n+\t  if (frame_pointer_needed)\n+\t    lr_slot_offset += (current_frame_info.first_slot_offset\n+\t\t\t       - current_frame_info.total_size);\n+\t  if (MACHINE_FUNCTION (cfun)->lr_slot_known)\n+\t    gcc_assert (MACHINE_FUNCTION (cfun)->lr_slot_offset\n+\t\t\t== lr_slot_offset);\n+\t  MACHINE_FUNCTION (cfun)->lr_slot_offset = lr_slot_offset;\n+\t  MACHINE_FUNCTION (cfun)->lr_slot_known = 1;\n+\t}\n+\n       if (!epilogue_p)\n \tframe_move_insn (mem, reg);\n       else if (n >= MAX_EPIPHANY_PARM_REGS || !crtl->args.pretend_args_size)"}, {"sha": "1e5c3056629abf5114e924ce199dbfd563203bfd", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=3b088b475ae0a65236db759996dce4406b6abb70", "patch": "@@ -450,6 +450,7 @@ typedef struct GTY (()) machine_function\n   unsigned pretend_args_odd : 1;\n   unsigned lr_clobbered : 1;\n   unsigned control_use_inserted : 1;\n+  unsigned lr_slot_known : 1;\n   unsigned sw_entities_processed : 6;\n   long lr_slot_offset;\n   rtx and_mask;"}, {"sha": "80372771d31d0ac60f59b07d2e448442e36affe8", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b088b475ae0a65236db759996dce4406b6abb70/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=3b088b475ae0a65236db759996dce4406b6abb70", "patch": "@@ -264,6 +264,15 @@\n   rtx addr\n     = (frame_pointer_needed ? hard_frame_pointer_rtx : stack_pointer_rtx);\n \n+  if (!MACHINE_FUNCTION (cfun)->lr_slot_known)\n+    {\n+      start_sequence ();\n+      epiphany_expand_prologue ();\n+      if (!MACHINE_FUNCTION (cfun)->lr_slot_known)\n+        epiphany_expand_epilogue (0);\n+      end_sequence ();\n+      gcc_assert (MACHINE_FUNCTION (cfun)->lr_slot_known);\n+    }\n   addr = plus_constant (Pmode, addr, MACHINE_FUNCTION (cfun)->lr_slot_offset);\n   operands[1] = gen_frame_mem (SImode, addr);\n })"}]}