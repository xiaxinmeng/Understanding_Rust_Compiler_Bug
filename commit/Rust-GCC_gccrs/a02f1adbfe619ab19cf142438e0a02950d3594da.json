{"sha": "a02f1adbfe619ab19cf142438e0a02950d3594da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyZjFhZGJmZTYxOWFiMTljZjE0MjQzOGUwYTAyOTUwZDM1OTRkYQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-04T14:01:07Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-04T17:29:08Z"}, "message": "[OpenACC 'exit data'] Evaluate 'finalize' individually for 'GOMP_MAP_STRUCT' entries\n\nCurrently, we don't at all evaluate 'finalize' for 'GOMP_MAP_STRUCT' entries.\nFix this by copying/adapting the corresponding non-'GOMP_MAP_STRUCT' code.\n\n\tlibgomp/\n\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>:\n\tEvaluate 'finalize' individually for each entry.\n\t* testsuite/libgomp.oacc-c-c++-common/struct-1.c: New file.\n\t* testsuite/libgomp.oacc-c-c++-common/struct-refcount-1.c: Remove\n\tfile.", "tree": {"sha": "32b6afd7de532f2defe76e9cd7f476750b8cbf85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b6afd7de532f2defe76e9cd7f476750b8cbf85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a02f1adbfe619ab19cf142438e0a02950d3594da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02f1adbfe619ab19cf142438e0a02950d3594da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02f1adbfe619ab19cf142438e0a02950d3594da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02f1adbfe619ab19cf142438e0a02950d3594da/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7179ec74dda8c92db18399e5041a96ece8d56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7179ec74dda8c92db18399e5041a96ece8d56d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7179ec74dda8c92db18399e5041a96ece8d56d"}], "stats": {"total": 203, "additions": 156, "deletions": 47}, "files": [{"sha": "a34f4cf0e91860cadeb4255e9d48d266ea355078", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f1adbfe619ab19cf142438e0a02950d3594da/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f1adbfe619ab19cf142438e0a02950d3594da/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=a02f1adbfe619ab19cf142438e0a02950d3594da", "patch": "@@ -1184,6 +1184,16 @@ goacc_exit_data_internal (struct gomp_device_descr *acc_dev, size_t mapnum,\n \t    int elems = sizes[i];\n \t    for (int j = 1; j <= elems; j++)\n \t      {\n+\t\tassert (i + j < mapnum);\n+\n+\t\tkind = kinds[i + j] & 0xff;\n+\n+\t\tfinalize = false;\n+\t\tif (kind == GOMP_MAP_FORCE_FROM\n+\t\t    || kind == GOMP_MAP_DELETE\n+\t\t    || kind == GOMP_MAP_FORCE_DETACH)\n+\t\t  finalize = true;\n+\n \t\tstruct splay_tree_key_s k;\n \t\tk.host_start = (uintptr_t) hostaddrs[i + j];\n \t\tk.host_end = k.host_start + sizes[i + j];"}, {"sha": "285be84f244b1925aee29459153b714f01d9cb87", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/struct-1.c", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02f1adbfe619ab19cf142438e0a02950d3594da/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02f1adbfe619ab19cf142438e0a02950d3594da/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-1.c?ref=a02f1adbfe619ab19cf142438e0a02950d3594da", "patch": "@@ -0,0 +1,146 @@\n+/* Test dynamic refcount of separate structure members.  */\n+\n+#include <assert.h>\n+#include <stdbool.h>\n+#include <openacc.h>\n+\n+struct s\n+{\n+  signed char a;\n+  float b;\n+};\n+\n+static void test(unsigned variant)\n+{\n+  struct s s;\n+\n+#pragma acc enter data create(s.a, s.b)\n+  assert(acc_is_present(&s.a, sizeof s.a));\n+  assert(acc_is_present(&s.b, sizeof s.b));\n+\n+  if (variant & 4)\n+    {\n+      if (variant & 8)\n+\t{\n+#pragma acc enter data create(s.b)\n+\t}\n+      else\n+\tacc_create(&s.b, sizeof s.b);\n+      assert(acc_is_present(&s.a, sizeof s.a));\n+      assert(acc_is_present(&s.b, sizeof s.b));\n+\n+      if (variant & 16)\n+\t{\n+#pragma acc enter data create(s.a)\n+\t}\n+      else\n+\tacc_create(&s.a, sizeof s.a);\n+      assert(acc_is_present(&s.a, sizeof s.a));\n+      assert(acc_is_present(&s.b, sizeof s.b));\n+\n+      if (variant & 32)\n+\t{\n+#pragma acc enter data create(s.a)\n+\t  acc_create(&s.b, sizeof s.b);\n+#pragma acc enter data create(s.b)\n+#pragma acc enter data create(s.b)\n+\t  acc_create(&s.a, sizeof s.a);\n+\t  acc_create(&s.a, sizeof s.a);\n+\t  acc_create(&s.a, sizeof s.a);\n+\t}\n+      assert(acc_is_present(&s.a, sizeof s.a));\n+      assert(acc_is_present(&s.b, sizeof s.b));\n+    }\n+\n+#pragma acc parallel \\\n+  copy(s.a, s.b)\n+  {\n+  }\n+\n+  if (variant & 32)\n+    {\n+      if (variant & 1)\n+\t{\n+#pragma acc exit data delete(s.a) finalize\n+\t}\n+      else\n+\tacc_delete_finalize(&s.a, sizeof s.a);\n+    }\n+  else\n+    {\n+      if (variant & 1)\n+\t{\n+#pragma acc exit data delete(s.a)\n+\t}\n+      else\n+\tacc_delete(&s.a, sizeof s.a);\n+      if (variant & 4)\n+\t{\n+\t  assert(acc_is_present(&s.a, sizeof s.a));\n+\t  assert(acc_is_present(&s.b, sizeof s.b));\n+\t  if (variant & 1)\n+\t    {\n+#pragma acc exit data delete(s.a)\n+\t    }\n+\t  else\n+\t    acc_delete(&s.a, sizeof s.a);\n+\t}\n+    }\n+#if ACC_MEM_SHARED\n+  assert(acc_is_present(&s.a, sizeof s.a));\n+  assert(acc_is_present(&s.b, sizeof s.b));\n+#else\n+  assert(!acc_is_present(&s.a, sizeof s.a));\n+  assert(acc_is_present(&s.b, sizeof s.b));\n+#endif\n+\n+  if (variant & 32)\n+    {\n+      if (variant & 2)\n+\t{\n+#pragma acc exit data delete(s.b) finalize\n+\t}\n+      else\n+\tacc_delete_finalize(&s.b, sizeof s.b);\n+    }\n+  else\n+    {\n+      if (variant & 2)\n+\t{\n+#pragma acc exit data delete(s.b)\n+\t}\n+      else\n+\tacc_delete(&s.b, sizeof s.b);\n+      if (variant & 4)\n+\t{\n+#if ACC_MEM_SHARED\n+\t  assert(acc_is_present(&s.a, sizeof s.a));\n+\t  assert(acc_is_present(&s.b, sizeof s.b));\n+#else\n+\t  assert(!acc_is_present(&s.a, sizeof s.a));\n+\t  assert(acc_is_present(&s.b, sizeof s.b));\n+#endif\n+\t  if (variant & 2)\n+\t    {\n+#pragma acc exit data delete(s.b)\n+\t    }\n+\t  else\n+\t    acc_delete(&s.b, sizeof s.b);\n+\t}\n+    }\n+#if ACC_MEM_SHARED\n+  assert(acc_is_present(&s.a, sizeof s.a));\n+  assert(acc_is_present(&s.b, sizeof s.b));\n+#else\n+  assert(!acc_is_present(&s.a, sizeof s.a));\n+  assert(!acc_is_present(&s.b, sizeof s.b));\n+#endif\n+}\n+\n+int main()\n+{\n+  for (unsigned variant = 0; variant < 64; ++variant)\n+    test(variant);\n+\n+  return 0;\n+}"}, {"sha": "bde5890d6676bdbeb4b0cc8962fecb7986385e5c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/struct-refcount-1.c", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7179ec74dda8c92db18399e5041a96ece8d56d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-refcount-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7179ec74dda8c92db18399e5041a96ece8d56d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-refcount-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-refcount-1.c?ref=db7179ec74dda8c92db18399e5041a96ece8d56d", "patch": "@@ -1,47 +0,0 @@\n-/* Test dynamic unmapping of separate structure members.  */\n-\n-/* { dg-skip-if \"\" { *-*-* } { \"-DACC_MEM_SHARED=1\" } } */\n-\n-#include <assert.h>\n-#include <stdbool.h>\n-#include <openacc.h>\n-\n-struct s\n-{\n-  char a;\n-  float b;\n-};\n-\n-void test (bool use_directives)\n-{\n-  struct s s;\n-\n-#pragma acc enter data create(s.a, s.b)\n-  assert (acc_is_present (&s.a, sizeof s.a));\n-  assert (acc_is_present (&s.b, sizeof s.b));\n-\n-  if (use_directives)\n-    {\n-#pragma acc exit data delete(s.a)\n-    }\n-  else\n-    acc_delete (&s.a, sizeof s.a);\n-  assert (!acc_is_present (&s.a, sizeof s.a));\n-  assert (acc_is_present (&s.b, sizeof s.b));\n-  if (use_directives)\n-    {\n-#pragma acc exit data delete(s.b)\n-    }\n-  else\n-    acc_delete (&s.b, sizeof s.b);\n-  assert (!acc_is_present (&s.a, sizeof s.a));\n-  assert (!acc_is_present (&s.b, sizeof s.b));\n-}\n-\n-int main ()\n-{\n-  test (true);\n-  test (false);\n-\n-  return 0;\n-}"}]}