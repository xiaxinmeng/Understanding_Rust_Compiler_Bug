{"sha": "729ff76e2b7931d1106667e7f27001c5c0f624b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5ZmY3NmUyYjc5MzFkMTEwNjY2N2U3ZjI3MDAxYzVjMGY2MjRiOA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-14T10:48:34Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-14T10:48:34Z"}, "message": "[Vectorizer]Make reductions-via-shifts and vec_shr_optab endianness-neutral\n\n        * optabs.c (shift_amt_for_vec_perm_mask): Remove code conditional on\n        BYTES_BIG_ENDIAN.\n        * tree-vect-loop.c (calc_vec_perm_mask_for_shift,\n        vect_create_epilog_for_reduction): Likewise.\n        * doc/md.texi (vec_shr_m): Clarify direction of shifting.\n\nFrom-SVN: r217550", "tree": {"sha": "11269bbc5bc8d4449b8484d7fccf11158c77490f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11269bbc5bc8d4449b8484d7fccf11158c77490f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/729ff76e2b7931d1106667e7f27001c5c0f624b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729ff76e2b7931d1106667e7f27001c5c0f624b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729ff76e2b7931d1106667e7f27001c5c0f624b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729ff76e2b7931d1106667e7f27001c5c0f624b8/comments", "author": null, "committer": null, "parents": [{"sha": "8261494856f9478e0393d5bd9be26961d16f266f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8261494856f9478e0393d5bd9be26961d16f266f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8261494856f9478e0393d5bd9be26961d16f266f"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "0a272ba92bfcb3c50f66499a7661a9edf7428750", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=729ff76e2b7931d1106667e7f27001c5c0f624b8", "patch": "@@ -1,3 +1,11 @@\n+2014-11-13  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* optabs.c (shift_amt_for_vec_perm_mask): Remove code conditional on\n+\tBYTES_BIG_ENDIAN.\n+\t* tree-vect-loop.c (calc_vec_perm_mask_for_shift,\n+\tvect_create_epilog_for_reduction): Likewise.\n+\t* doc/md.texi (vec_shr_m): Clarify direction of shifting.\n+\n 2014-11-14  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/63724"}, {"sha": "b8e5ac522b700e1e2af407bb8b696ea4f7696977", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=729ff76e2b7931d1106667e7f27001c5c0f624b8", "patch": "@@ -4798,7 +4798,7 @@ of a wider mode.)\n \n @cindex @code{vec_shr_@var{m}} instruction pattern\n @item @samp{vec_shr_@var{m}}\n-Whole vector right shift in bits.\n+Whole vector right shift in bits, i.e. towards element 0.\n Operand 1 is a vector to be shifted.\n Operand 2 is an integer shift amount in bits.\n Operand 0 is where the resulting shifted vector is stored."}, {"sha": "0acedb9350ea7b513fe4c7b1faadac9e28a67941", "filename": "gcc/optabs.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=729ff76e2b7931d1106667e7f27001c5c0f624b8", "patch": "@@ -6618,8 +6618,6 @@ shift_amt_for_vec_perm_mask (rtx sel)\n \treturn NULL_RTX;\n     }\n \n-  if (BYTES_BIG_ENDIAN)\n-    first = (2 * nelt) - first;\n   return GEN_INT (first * bitsize);\n }\n "}, {"sha": "5e66dcf53548ff4d22a9b4c5ec143c4c74c268b3", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729ff76e2b7931d1106667e7f27001c5c0f624b8/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=729ff76e2b7931d1106667e7f27001c5c0f624b8", "patch": "@@ -3092,7 +3092,7 @@ calc_vec_perm_mask_for_shift (enum machine_mode mode, unsigned int offset,\n   unsigned int i, nelt = GET_MODE_NUNITS (mode);\n \n   for (i = 0; i < nelt; i++)\n-    sel[i] = (BYTES_BIG_ENDIAN ? i - offset : i + offset) & (2*nelt - 1);\n+    sel[i] = (i + offset) & (2*nelt - 1);\n }\n \n /* Checks whether the target supports whole-vector shifts for vectors of mode\n@@ -3907,7 +3907,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n   gimple epilog_stmt = NULL;\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n   gimple exit_phi;\n-  tree bitsize, bitpos;\n+  tree bitsize;\n   tree adjustment_def = NULL;\n   tree vec_initial_def = NULL;\n   tree reduction_op, expr, def;\n@@ -4417,14 +4417,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n         dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t \"extract scalar result\\n\");\n \n-      if (BYTES_BIG_ENDIAN)\n-        bitpos = size_binop (MULT_EXPR,\n-                             bitsize_int (TYPE_VECTOR_SUBPARTS (vectype) - 1),\n-                             TYPE_SIZE (scalar_type));\n-      else\n-        bitpos = bitsize_zero_node;\n-\n-      rhs = build3 (BIT_FIELD_REF, scalar_type, new_temp, bitsize, bitpos);\n+      rhs = build3 (BIT_FIELD_REF, scalar_type,\n+\t\t    new_temp, bitsize, bitsize_zero_node);\n       epilog_stmt = gimple_build_assign (new_scalar_dest, rhs);\n       new_temp = make_ssa_name (new_scalar_dest, epilog_stmt);\n       gimple_assign_set_lhs (epilog_stmt, new_temp);"}]}