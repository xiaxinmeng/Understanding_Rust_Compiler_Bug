{"sha": "d686d89233250d2637ef415a40e8872d7588a06b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY4NmQ4OTIzMzI1MGQyNjM3ZWY0MTVhNDBlODg3MmQ3NTg4YTA2Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-08-08T08:32:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-08-08T08:32:24Z"}, "message": "combine.c (gen_lowpart_or_truncate): Exclude CONST_INTs from mode check.\n\ngcc/\n\t* combine.c (gen_lowpart_or_truncate): Exclude CONST_INTs from\n\tmode check.  Do truncations in an integer mode.\n\t(force_to_mode): Handle subregs for all mode types.  Only do\n\tarithmetic simplifications on integer modes.\n\nFrom-SVN: r150578", "tree": {"sha": "748209c722d516febae45c294a24cf4c971dc4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/748209c722d516febae45c294a24cf4c971dc4e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d686d89233250d2637ef415a40e8872d7588a06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d686d89233250d2637ef415a40e8872d7588a06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d686d89233250d2637ef415a40e8872d7588a06b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d686d89233250d2637ef415a40e8872d7588a06b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fc00cc90a158a1e00a69c6035750c0bc209bc1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc00cc90a158a1e00a69c6035750c0bc209bc1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc00cc90a158a1e00a69c6035750c0bc209bc1c"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "f2e11bc9bedca77f352987910f03905608e5a510", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d686d89233250d2637ef415a40e8872d7588a06b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d686d89233250d2637ef415a40e8872d7588a06b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d686d89233250d2637ef415a40e8872d7588a06b", "patch": "@@ -1,3 +1,10 @@\n+2009-08-08  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* combine.c (gen_lowpart_or_truncate): Exclude CONST_INTs from\n+\tmode check.  Do truncations in an integer mode.\n+\t(force_to_mode): Handle subregs for all mode types.  Only do\n+\tarithmetic simplifications on integer modes.\n+\n 2009-08-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/40999"}, {"sha": "3a2c41205e5aa3276faa6a5070a5ceca1c59afc9", "filename": "gcc/combine.c", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d686d89233250d2637ef415a40e8872d7588a06b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d686d89233250d2637ef415a40e8872d7588a06b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d686d89233250d2637ef415a40e8872d7588a06b", "patch": "@@ -7243,13 +7243,20 @@ canon_reg_for_combine (rtx x, rtx reg)\n static rtx\n gen_lowpart_or_truncate (enum machine_mode mode, rtx x)\n {\n-  if (GET_MODE_SIZE (GET_MODE (x)) <= GET_MODE_SIZE (mode)\n-      || TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n-\t\t\t\tGET_MODE_BITSIZE (GET_MODE (x)))\n-      || (REG_P (x) && reg_truncated_to_mode (mode, x)))\n-    return gen_lowpart (mode, x);\n-  else\n-    return simplify_gen_unary (TRUNCATE, mode, x, GET_MODE (x));\n+  if (!CONST_INT_P (x)\n+      && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (x))\n+      && !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (mode),\n+\t\t\t\t GET_MODE_BITSIZE (GET_MODE (x)))\n+      && !(REG_P (x) && reg_truncated_to_mode (mode, x)))\n+    {\n+      /* Bit-cast X into an integer mode.  */\n+      if (!SCALAR_INT_MODE_P (GET_MODE (x)))\n+\tx = gen_lowpart (int_mode_for_mode (GET_MODE (x)), x);\n+      x = simplify_gen_unary (TRUNCATE, int_mode_for_mode (mode),\n+\t\t\t      x, GET_MODE (x));\n+    }\n+\n+  return gen_lowpart (mode, x);\n }\n \n /* See if X can be simplified knowing that we will only refer to it in\n@@ -7336,9 +7343,20 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n       && (GET_MODE_MASK (GET_MODE (x)) & ~mask) == 0)\n     return gen_lowpart (mode, x);\n \n-  /* The arithmetic simplifications here do the wrong thing on vector modes.  */\n-  if (VECTOR_MODE_P (mode) || VECTOR_MODE_P (GET_MODE (x)))\n-      return gen_lowpart (mode, x);\n+  /* We can ignore the effect of a SUBREG if it narrows the mode or\n+     if the constant masks to zero all the bits the mode doesn't have.  */\n+  if (GET_CODE (x) == SUBREG\n+      && subreg_lowpart_p (x)\n+      && ((GET_MODE_SIZE (GET_MODE (x))\n+\t   < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n+\t  || (0 == (mask\n+\t\t    & GET_MODE_MASK (GET_MODE (x))\n+\t\t    & ~GET_MODE_MASK (GET_MODE (SUBREG_REG (x)))))))\n+    return force_to_mode (SUBREG_REG (x), mode, mask, next_select);\n+\n+  /* The arithmetic simplifications here only work for scalar integer modes.  */\n+  if (!SCALAR_INT_MODE_P (mode) || !SCALAR_INT_MODE_P (GET_MODE (x)))\n+    return gen_lowpart_or_truncate (mode, x);\n \n   switch (code)\n     {\n@@ -7356,19 +7374,6 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \treturn force_to_mode (x, mode, mask, next_select);\n       break;\n \n-    case SUBREG:\n-      if (subreg_lowpart_p (x)\n-\t  /* We can ignore the effect of this SUBREG if it narrows the mode or\n-\t     if the constant masks to zero all the bits the mode doesn't\n-\t     have.  */\n-\t  && ((GET_MODE_SIZE (GET_MODE (x))\n-\t       < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n-\t      || (0 == (mask\n-\t\t\t& GET_MODE_MASK (GET_MODE (x))\n-\t\t\t& ~GET_MODE_MASK (GET_MODE (SUBREG_REG (x)))))))\n-\treturn force_to_mode (SUBREG_REG (x), mode, mask, next_select);\n-      break;\n-\n     case TRUNCATE:\n       /* Similarly for a truncate.  */\n       return force_to_mode (XEXP (x, 0), mode, mask, next_select);"}]}