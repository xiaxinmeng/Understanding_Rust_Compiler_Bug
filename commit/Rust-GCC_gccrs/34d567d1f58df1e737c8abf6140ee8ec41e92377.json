{"sha": "34d567d1f58df1e737c8abf6140ee8ec41e92377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkNTY3ZDFmNThkZjFlNzM3YzhhYmY2MTQwZWU4ZWM0MWU5MjM3Nw==", "commit": {"author": {"name": "Fritz Reese", "email": "fritzoreese@gmail.com", "date": "2016-09-23T21:06:18Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2016-09-23T21:06:18Z"}, "message": "lang.opt, [...]: New flag -fdec-static.\n\n2016-09-23  Fritz Reese  <fritzoreese@gmail.com>\n\n\tgcc/fortran/\n\t* lang.opt, invoke.texi, gfortran.texi: New flag -fdec-static.\n\t* options.c (set_dec_flags): Set -fdec-static with -fdec.\n\t* gfortran.h (symbol_attribute): New attribute automatic.\n\t* gfortran.h (gfc_add_automatic): New prototype.\n\t* match.h (gfc_match_automatic, gfc_match_static): New functions.\n\t* decl.c (gfc_match_automatic, gfc_match_static): Ditto.\n\t* symbol.c (gfc_add_automatic): Ditto.\n\t* decl.c (match_attr_spec): Match AUTOMATIC and STATIC decls.\n\t* parse.c (decode_specification_statement, decode_statement): Ditto.\n\t* resolve.c (apply_default_init_local, resolve_fl_variable_derived,\n\tresolve_symbol): Support for automatic attribute.\n\t* symbol.c (check_conflict, gfc_copy_attr, gfc_is_var_automatic):\n\tDitto.\n\t* trans-decl.c (gfc_finish_var_decl): Ditto.\n\n\tgcc/testsuite/gfortran.dg/\n\t* dec_static_1.f90, dec_static_2.f90, dec_static_3.f90,\n\tdec_static_4.f90: New testcases.\n\nFrom-SVN: r240458", "tree": {"sha": "04238123ac677477e1192cb9ed0128ea5ec57ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04238123ac677477e1192cb9ed0128ea5ec57ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34d567d1f58df1e737c8abf6140ee8ec41e92377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d567d1f58df1e737c8abf6140ee8ec41e92377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d567d1f58df1e737c8abf6140ee8ec41e92377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d567d1f58df1e737c8abf6140ee8ec41e92377/comments", "author": {"login": "fritzr", "id": 2230564, "node_id": "MDQ6VXNlcjIyMzA1NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2230564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzr", "html_url": "https://github.com/fritzr", "followers_url": "https://api.github.com/users/fritzr/followers", "following_url": "https://api.github.com/users/fritzr/following{/other_user}", "gists_url": "https://api.github.com/users/fritzr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzr/subscriptions", "organizations_url": "https://api.github.com/users/fritzr/orgs", "repos_url": "https://api.github.com/users/fritzr/repos", "events_url": "https://api.github.com/users/fritzr/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6465652c8768dae2567f693eed04fb6a1b8ce517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6465652c8768dae2567f693eed04fb6a1b8ce517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6465652c8768dae2567f693eed04fb6a1b8ce517"}], "stats": {"total": 468, "additions": 452, "deletions": 16}, "files": [{"sha": "fbab438a959cf069812248df76759e326ad3b9f4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -1,3 +1,20 @@\n+2016-09-23  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\t* lang.opt, invoke.texi, gfortran.texi: New flag -fdec-static.\n+\t* options.c (set_dec_flags): Set -fdec-static with -fdec.\n+\t* gfortran.h (symbol_attribute): New attribute automatic.\n+\t* gfortran.h (gfc_add_automatic): New prototype.\n+\t* match.h (gfc_match_automatic, gfc_match_static): New functions.\n+\t* decl.c (gfc_match_automatic, gfc_match_static): Ditto.\n+\t* symbol.c (gfc_add_automatic): Ditto.\n+\t* decl.c (match_attr_spec): Match AUTOMATIC and STATIC decls.\n+\t* parse.c (decode_specification_statement, decode_statement): Ditto.\n+\t* resolve.c (apply_default_init_local, resolve_fl_variable_derived,\n+\tresolve_symbol): Support for automatic attribute.\n+\t* symbol.c (check_conflict, gfc_copy_attr, gfc_is_var_automatic):\n+\tDitto.\n+\t* trans-decl.c (gfc_finish_var_decl): Ditto.\n+\n 2016-09-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/48298"}, {"sha": "bc27f664512636a5a29c88422ea73d1f156e3925", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 159, "deletions": 2, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -3811,6 +3811,7 @@ match_attr_spec (void)\n     DECL_ALLOCATABLE = GFC_DECL_BEGIN, DECL_DIMENSION, DECL_EXTERNAL,\n     DECL_IN, DECL_OUT, DECL_INOUT, DECL_INTRINSIC, DECL_OPTIONAL,\n     DECL_PARAMETER, DECL_POINTER, DECL_PROTECTED, DECL_PRIVATE,\n+    DECL_STATIC, DECL_AUTOMATIC,\n     DECL_PUBLIC, DECL_SAVE, DECL_TARGET, DECL_VALUE, DECL_VOLATILE,\n     DECL_IS_BIND_C, DECL_CODIMENSION, DECL_ASYNCHRONOUS, DECL_CONTIGUOUS,\n     DECL_NONE, GFC_DECL_END /* Sentinel */\n@@ -3874,6 +3875,14 @@ match_attr_spec (void)\n \t\t      d = DECL_ASYNCHRONOUS;\n \t\t    }\n \t\t  break;\n+\n+\t\tcase 'u':\n+\t\t  if (match_string_p (\"tomatic\"))\n+\t\t    {\n+\t\t      /* Matched \"automatic\".  */\n+\t\t      d = DECL_AUTOMATIC;\n+\t\t    }\n+\t\t  break;\n \t\t}\n \t      break;\n \n@@ -4003,8 +4012,25 @@ match_attr_spec (void)\n \t      break;\n \n \t    case 's':\n-\t      if (match_string_p (\"save\"))\n-\t\td = DECL_SAVE;\n+\t      gfc_next_ascii_char ();\n+\t      switch (gfc_next_ascii_char ())\n+\t\t{\n+\t\t  case 'a':\n+\t\t    if (match_string_p (\"ve\"))\n+\t\t      {\n+\t\t\t/* Matched \"save\".  */\n+\t\t\td = DECL_SAVE;\n+\t\t      }\n+\t\t    break;\n+\n+\t\t  case 't':\n+\t\t    if (match_string_p (\"atic\"))\n+\t\t      {\n+\t\t\t/* Matched \"static\".  */\n+\t\t\td = DECL_STATIC;\n+\t\t      }\n+\t\t    break;\n+\t\t}\n \t      break;\n \n \t    case 't':\n@@ -4141,6 +4167,12 @@ match_attr_spec (void)\n \t  case DECL_SAVE:\n \t    attr = \"SAVE\";\n \t    break;\n+\t  case DECL_STATIC:\n+\t    attr = \"STATIC\";\n+\t    break;\n+\t  case DECL_AUTOMATIC:\n+\t    attr = \"AUTOMATIC\";\n+\t    break;\n \t  case DECL_TARGET:\n \t    attr = \"TARGET\";\n \t    break;\n@@ -4169,6 +4201,18 @@ match_attr_spec (void)\n       if (seen[d] == 0)\n \tcontinue;\n \n+      if ((d == DECL_STATIC || d == DECL_AUTOMATIC)\n+\t  && !flag_dec_static)\n+\t{\n+\t  gfc_error (\"%s at %L is a DEC extension, enable with -fdec-static\",\n+\t\t     d == DECL_STATIC ? \"STATIC\" : \"AUTOMATIC\", &seen_at[d]);\n+\t  m = MATCH_ERROR;\n+\t  goto cleanup;\n+\t}\n+      /* Allow SAVE with STATIC, but don't complain.  */\n+      if (d == DECL_STATIC && seen[DECL_SAVE])\n+\tcontinue;\n+\n       if (gfc_current_state () == COMP_DERIVED\n \t  && d != DECL_DIMENSION && d != DECL_CODIMENSION\n \t  && d != DECL_POINTER   && d != DECL_PRIVATE\n@@ -4307,10 +4351,15 @@ match_attr_spec (void)\n \t\t\t      &seen_at[d]);\n \t  break;\n \n+\tcase DECL_STATIC:\n \tcase DECL_SAVE:\n \t  t = gfc_add_save (&current_attr, SAVE_EXPLICIT, NULL, &seen_at[d]);\n \t  break;\n \n+\tcase DECL_AUTOMATIC:\n+\t  t = gfc_add_automatic (&current_attr, NULL, &seen_at[d]);\n+\t  break;\n+\n \tcase DECL_TARGET:\n \t  t = gfc_add_target (&current_attr, &seen_at[d]);\n \t  break;\n@@ -7785,6 +7834,114 @@ gfc_match_parameter (void)\n }\n \n \n+match\n+gfc_match_automatic (void)\n+{\n+  gfc_symbol *sym;\n+  match m;\n+  bool seen_symbol = false;\n+\n+  if (!flag_dec_static)\n+    {\n+      gfc_error (\"AUTOMATIC at %C is a DEC extension, enable with \"\n+\t\t \"-fdec-static\");\n+      return MATCH_ERROR;\n+    }\n+\n+  gfc_match (\" ::\");\n+\n+  for (;;)\n+    {\n+      m = gfc_match_symbol (&sym, 0);\n+      switch (m)\n+      {\n+      case MATCH_NO:\n+        break;\n+\n+      case MATCH_ERROR:\n+\treturn MATCH_ERROR;\n+\n+      case MATCH_YES:\n+\tif (!gfc_add_automatic (&sym->attr, sym->name, &gfc_current_locus))\n+\t  return MATCH_ERROR;\n+\tseen_symbol = true;\n+\tbreak;\n+      }\n+\n+      if (gfc_match_eos () == MATCH_YES)\n+\tbreak;\n+      if (gfc_match_char (',') != MATCH_YES)\n+\tgoto syntax;\n+    }\n+\n+  if (!seen_symbol)\n+    {\n+      gfc_error (\"Expected entity-list in AUTOMATIC statement at %C\");\n+      return MATCH_ERROR;\n+    }\n+\n+  return MATCH_YES;\n+\n+syntax:\n+  gfc_error (\"Syntax error in AUTOMATIC statement at %C\");\n+  return MATCH_ERROR;\n+}\n+\n+\n+match\n+gfc_match_static (void)\n+{\n+  gfc_symbol *sym;\n+  match m;\n+  bool seen_symbol = false;\n+\n+  if (!flag_dec_static)\n+    {\n+      gfc_error (\"STATIC at %C is a DEC extension, enable with -fdec-static\");\n+      return MATCH_ERROR;\n+    }\n+\n+  gfc_match (\" ::\");\n+\n+  for (;;)\n+    {\n+      m = gfc_match_symbol (&sym, 0);\n+      switch (m)\n+      {\n+      case MATCH_NO:\n+        break;\n+\n+      case MATCH_ERROR:\n+\treturn MATCH_ERROR;\n+\n+      case MATCH_YES:\n+\tif (!gfc_add_save (&sym->attr, SAVE_EXPLICIT, sym->name,\n+\t\t\t  &gfc_current_locus))\n+\t  return MATCH_ERROR;\n+\tseen_symbol = true;\n+\tbreak;\n+      }\n+\n+      if (gfc_match_eos () == MATCH_YES)\n+\tbreak;\n+      if (gfc_match_char (',') != MATCH_YES)\n+\tgoto syntax;\n+    }\n+\n+  if (!seen_symbol)\n+    {\n+      gfc_error (\"Expected entity-list in STATIC statement at %C\");\n+      return MATCH_ERROR;\n+    }\n+\n+  return MATCH_YES;\n+\n+syntax:\n+  gfc_error (\"Syntax error in STATIC statement at %C\");\n+  return MATCH_ERROR;\n+}\n+\n+\n /* Save statements have a special syntax.  */\n \n match"}, {"sha": "2cac42bad007ff72f8b360cf5ad75b2e766e7e43", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -736,7 +736,7 @@ typedef struct\n     optional:1, pointer:1, target:1, value:1, volatile_:1, temporary:1,\n     dummy:1, result:1, assign:1, threadprivate:1, not_always_present:1,\n     implied_index:1, subref_array_pointer:1, proc_pointer:1, asynchronous:1,\n-    contiguous:1, fe_temp: 1;\n+    contiguous:1, fe_temp: 1, automatic: 1;\n \n   /* For CLASS containers, the pointer attribute is sometimes set internally\n      even though it was not directly specified.  In this case, keep the\n@@ -2816,6 +2816,7 @@ bool gfc_add_cray_pointee (symbol_attribute *, locus *);\n match gfc_mod_pointee_as (gfc_array_spec *);\n bool gfc_add_protected (symbol_attribute *, const char *, locus *);\n bool gfc_add_result (symbol_attribute *, const char *, locus *);\n+bool gfc_add_automatic (symbol_attribute *, const char *, locus *);\n bool gfc_add_save (symbol_attribute *, save_state, const char *, locus *);\n bool gfc_add_threadprivate (symbol_attribute *, const char *, locus *);\n bool gfc_add_omp_declare_target (symbol_attribute *, const char *, locus *);"}, {"sha": "797730c7a7a95469c04b23a05ec6c0fc3f3bb324", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -1462,6 +1462,7 @@ without warning.\n * STRUCTURE and RECORD::\n * UNION and MAP::\n * Type variants for integer intrinsics::\n+* AUTOMATIC and STATIC attributes::\n @end menu\n \n @node Old-style kind specifications\n@@ -2421,6 +2422,56 @@ here:\n   @tab @code{--} @tab @code{FLOATI} @tab @code{FLOATJ} @tab @code{FLOATK}\n @end multitable\n \n+@node AUTOMATIC and STATIC attributes\n+@subsection @code{AUTOMATIC} and @code{STATIC} attributes\n+@cindex variable attributes\n+@cindex @code{AUTOMATIC}\n+@cindex @code{STATIC}\n+\n+With @option{-fdec-static} GNU Fortran supports the DEC extended attributes\n+@code{STATIC} and @code{AUTOMATIC} to provide explicit specification of entity\n+storage.  These follow the syntax of the Fortran standard @code{SAVE} attribute.\n+\n+@code{STATIC} is exactly equivalent to @code{SAVE}, and specifies that\n+an entity should be allocated in static memory.  As an example, @code{STATIC}\n+local variables will retain their values across multiple calls to a function.\n+\n+Entities marked @code{AUTOMATIC} will be stack automatic whenever possible.\n+@code{AUTOMATIC} is the default for local variables smaller than\n+@option{-fmax-stack-var-size}, unless @option{-fno-automatic} is given.  This\n+attribute overrides @option{-fno-automatic}, @option{-fmax-stack-var-size}, and\n+blanket @code{SAVE} statements.\n+\n+\n+Examples:\n+\n+@example\n+subroutine f\n+  integer, automatic :: i  ! automatic variable\n+  integer x, y             ! static variables\n+  save\n+  ...\n+endsubroutine\n+@end example\n+@example\n+subroutine f\n+  integer a, b, c, x, y, z\n+  static :: x\n+  save y\n+  automatic z, c\n+  ! a, b, c, and z are automatic\n+  ! x and y are static\n+endsubroutine\n+@end example\n+@example\n+! Compiled with -fno-automatic\n+subroutine f\n+  integer a, b, c, d\n+  automatic :: a\n+  ! a is automatic; b, c, and d are static\n+endsubroutine\n+@end example\n+\n \n @node Extensions not implemented in GNU Fortran\n @section Extensions not implemented in GNU Fortran\n@@ -2444,7 +2495,6 @@ code that uses them running with the GNU Fortran compiler.\n * ENCODE and DECODE statements::\n * Variable FORMAT expressions::\n @c * Q edit descriptor::\n-@c * AUTOMATIC statement::\n @c * TYPE and ACCEPT I/O Statements::\n @c * .XOR. operator::\n @c * CARRIAGECONTROL, DEFAULTFILE, DISPOSE and RECORDTYPE I/O specifiers::"}, {"sha": "268d155a7967673caa090c3422fe69f19371f633", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -116,7 +116,7 @@ by type.  Explanations are in the following sections.\n @xref{Fortran Dialect Options,,Options controlling Fortran dialect}.\n @gccoptlist{-fall-intrinsics -fbackslash -fcray-pointer -fd-lines-as-code @gol\n -fd-lines-as-comments @gol\n--fdec -fdec-structure -fdec-intrinsic-ints @gol\n+-fdec -fdec-structure -fdec-intrinsic-ints -fdec-static @gol\n -fdefault-double-8 -fdefault-integer-8 @gol\n -fdefault-real-8 -fdollar-ok -ffixed-line-length-@var{n} @gol\n -ffixed-line-length-none -ffree-form -ffree-line-length-@var{n} @gol\n@@ -241,7 +241,7 @@ full documentation.\n \n Other flags enabled by this switch are:\n @option{-fdollar-ok} @option{-fcray-pointer} @option{-fdec-structure}\n-@option{-fdec-intrinsic-ints}\n+@option{-fdec-intrinsic-ints} @option{-fdec-static}\n \n @item -fdec-structure\n @opindex @code{fdec-structure}\n@@ -255,6 +255,11 @@ instead where possible.\n Enable B/I/J/K kind variants of existing integer functions (e.g. BIAND, IIAND,\n JIAND, etc...). For a complete list of intrinsics see the full documentation.\n \n+@item -fdec-static\n+@opindex @code{fdec-static}\n+Enable DEC-style STATIC and AUTOMATIC attributes to explicitly specify\n+the storage of variables and other objects.\n+\n @item -fdollar-ok\n @opindex @code{fdollar-ok}\n @cindex @code{$}"}, {"sha": "ef421d3b345c54acb74a8f56abd5404670fed872", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -432,6 +432,10 @@ fdec-structure\n Fortran\n Enable support for DEC STRUCTURE/RECORD.\n \n+fdec-static\n+Fortran Var(flag_dec_static)\n+Enable DEC-style STATIC and AUTOMATIC attributes.\n+\n fdefault-double-8\n Fortran Var(flag_default_double)\n Set the default double precision kind to an 8 byte wide type."}, {"sha": "24131635713d9e580c7af7e9e4c781ffedb9aea6", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -223,6 +223,7 @@ void gfc_set_constant_character_len (int, gfc_expr *, int);\n /* Matchers for attribute declarations.  */\n match gfc_match_allocatable (void);\n match gfc_match_asynchronous (void);\n+match gfc_match_automatic (void);\n match gfc_match_codimension (void);\n match gfc_match_contiguous (void);\n match gfc_match_dimension (void);\n@@ -238,6 +239,7 @@ match gfc_match_protected (void);\n match gfc_match_private (gfc_statement *);\n match gfc_match_public (gfc_statement *);\n match gfc_match_save (void);\n+match gfc_match_static (void);\n match gfc_match_modproc (void);\n match gfc_match_target (void);\n match gfc_match_value (void);"}, {"sha": "13dfa88c7c7190c343c4d1460fb3aca9105d4f38", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -54,6 +54,7 @@ set_dec_flags (int value)\n {\n     gfc_option.flag_dec_structure  = value;\n     flag_dec_intrinsic_ints = value;\n+    flag_dec_static = value;\n }\n \n "}, {"sha": "a89e834b7be44fe492d5b90433f5be7de68c96d8", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -191,6 +191,7 @@ decode_specification_statement (void)\n \t     ST_INTERFACE);\n       match (\"allocatable\", gfc_match_allocatable, ST_ATTR_DECL);\n       match (\"asynchronous\", gfc_match_asynchronous, ST_ATTR_DECL);\n+      match (\"automatic\", gfc_match_automatic, ST_ATTR_DECL);\n       break;\n \n     case 'b':\n@@ -256,6 +257,7 @@ decode_specification_statement (void)\n \n     case 's':\n       match (\"save\", gfc_match_save, ST_ATTR_DECL);\n+      match (\"static\", gfc_match_static, ST_ATTR_DECL);\n       match (\"structure\", gfc_match_structure_decl, ST_STRUCTURE_DECL);\n       break;\n \n@@ -436,6 +438,7 @@ decode_statement (void)\n       match (\"allocatable\", gfc_match_allocatable, ST_ATTR_DECL);\n       match (\"assign\", gfc_match_assign, ST_LABEL_ASSIGNMENT);\n       match (\"asynchronous\", gfc_match_asynchronous, ST_ATTR_DECL);\n+      match (\"automatic\", gfc_match_automatic, ST_ATTR_DECL);\n       break;\n \n     case 'b':\n@@ -548,6 +551,7 @@ decode_statement (void)\n       match (\"sequence\", gfc_match_eos, ST_SEQUENCE);\n       match (\"stop\", gfc_match_stop, ST_STOP);\n       match (\"save\", gfc_match_save, ST_ATTR_DECL);\n+      match (\"static\", gfc_match_static, ST_ATTR_DECL);\n       match (\"submodule\", gfc_match_submodule, ST_SUBMODULE);\n       match (\"sync all\", gfc_match_sync_all, ST_SYNC_ALL);\n       match (\"sync images\", gfc_match_sync_images, ST_SYNC_IMAGES);"}, {"sha": "7b068f91f2c1f5b7f87c3a6f9db2f8ebd5d582f6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -11348,10 +11348,11 @@ apply_default_init_local (gfc_symbol *sym)\n      entry, so we just add a static initializer. Note that automatic variables\n      are stack allocated even with -fno-automatic; we have also to exclude\n      result variable, which are also nonstatic.  */\n-  if (sym->attr.save || sym->ns->save_all\n-      || (flag_max_stack_var_size == 0 && !sym->attr.result\n-\t  && (sym->ns->proc_name && !sym->ns->proc_name->attr.recursive)\n-\t  && (!sym->attr.dimension || !is_non_constant_shape_array (sym))))\n+  if (!sym->attr.automatic\n+      && (sym->attr.save || sym->ns->save_all\n+\t  || (flag_max_stack_var_size == 0 && !sym->attr.result\n+\t      && (sym->ns->proc_name && !sym->ns->proc_name->attr.recursive)\n+\t      && (!sym->attr.dimension || !is_non_constant_shape_array (sym)))))\n     {\n       /* Don't clobber an existing initializer!  */\n       gcc_assert (sym->value == NULL);\n@@ -11496,7 +11497,7 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n      a hidden default for allocatable components.  */\n   if (!(sym->value || no_init_flag) && sym->ns->proc_name\n       && sym->ns->proc_name->attr.flavor == FL_MODULE\n-      && !sym->ns->save_all && !sym->attr.save\n+      && !(sym->ns->save_all && !sym->attr.automatic) && !sym->attr.save\n       && !sym->attr.pointer && !sym->attr.allocatable\n       && gfc_has_default_initializer (sym->ts.u.derived)\n       && !gfc_notify_std (GFC_STD_F2008, \"Implied SAVE for module variable \"\n@@ -14319,7 +14320,7 @@ resolve_symbol (gfc_symbol *sym)\n   if (class_attr.codimension\n       && !(class_attr.allocatable || sym->attr.dummy || sym->attr.save\n \t   || sym->attr.select_type_temporary\n-\t   || sym->ns->save_all\n+\t   || (sym->ns->save_all && !sym->attr.automatic)\n \t   || sym->ns->proc_name->attr.flavor == FL_MODULE\n \t   || sym->ns->proc_name->attr.is_main_program\n \t   || sym->attr.function || sym->attr.result || sym->attr.use_assoc))\n@@ -14471,7 +14472,8 @@ resolve_symbol (gfc_symbol *sym)\n     }\n \n   /* Check threadprivate restrictions.  */\n-  if (sym->attr.threadprivate && !sym->attr.save && !sym->ns->save_all\n+  if (sym->attr.threadprivate && !sym->attr.save\n+      && !(sym->ns->save_all && !sym->attr.automatic)\n       && (!sym->attr.in_common\n \t  && sym->module == NULL\n \t  && (sym->ns->proc_name == NULL\n@@ -14482,7 +14484,7 @@ resolve_symbol (gfc_symbol *sym)\n   if (sym->attr.omp_declare_target\n       && sym->attr.flavor == FL_VARIABLE\n       && !sym->attr.save\n-      && !sym->ns->save_all\n+      && !(sym->ns->save_all && !sym->attr.automatic)\n       && (!sym->attr.in_common\n \t  && sym->module == NULL\n \t  && (sym->ns->proc_name == NULL"}, {"sha": "3026356d111fc8bbf2a3120e21fde040ad33b1d2", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -382,7 +382,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n     *is_bind_c = \"BIND(C)\", *procedure = \"PROCEDURE\",\n     *proc_pointer = \"PROCEDURE POINTER\", *abstract = \"ABSTRACT\",\n     *asynchronous = \"ASYNCHRONOUS\", *codimension = \"CODIMENSION\",\n-    *contiguous = \"CONTIGUOUS\", *generic = \"GENERIC\";\n+    *contiguous = \"CONTIGUOUS\", *generic = \"GENERIC\", *automatic = \"AUTOMATIC\";\n   static const char *threadprivate = \"THREADPRIVATE\";\n   static const char *omp_declare_target = \"OMP DECLARE TARGET\";\n   static const char *oacc_declare_copyin = \"OACC DECLARE COPYIN\";\n@@ -447,6 +447,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf (dummy, save);\n       conf (in_common, save);\n       conf (result, save);\n+      conf (automatic, save);\n \n       switch (attr->flavor)\n \t{\n@@ -488,6 +489,12 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (pointer, codimension);\n   conf (allocatable, elemental);\n \n+  conf (in_common, automatic);\n+  conf (in_equivalence, automatic);\n+  conf (result, automatic);\n+  conf (use_assoc, automatic);\n+  conf (dummy, automatic);\n+\n   conf (target, external);\n   conf (target, intrinsic);\n \n@@ -941,6 +948,21 @@ gfc_add_allocatable (symbol_attribute *attr, locus *where)\n }\n \n \n+bool\n+gfc_add_automatic (symbol_attribute *attr, const char *name, locus *where)\n+{\n+  if (check_used (attr, name, where))\n+    return false;\n+\n+  if (attr->automatic && !gfc_notify_std (GFC_STD_LEGACY,\n+\t\"Duplicate AUTOMATIC attribute specified at %L\", where))\n+    return false;\n+\n+  attr->automatic = 1;\n+  return check_conflict (attr, name, where);\n+}\n+\n+\n bool\n gfc_add_codimension (symbol_attribute *attr, const char *name, locus *where)\n {\n@@ -1889,6 +1911,8 @@ gfc_copy_attr (symbol_attribute *dest, symbol_attribute *src, locus *where)\n   if (src->allocatable && !gfc_add_allocatable (dest, where))\n     goto fail;\n \n+  if (src->automatic && !gfc_add_automatic (dest, NULL, where))\n+    goto fail;\n   if (src->dimension && !gfc_add_dimension (dest, NULL, where))\n     goto fail;\n   if (src->codimension && !gfc_add_codimension (dest, NULL, where))\n@@ -4000,6 +4024,10 @@ gfc_is_var_automatic (gfc_symbol *sym)\n       && sym->ts.u.cl\n       && !gfc_is_constant_expr (sym->ts.u.cl->length))\n     return true;\n+  /* Variables with explicit AUTOMATIC attribute.  */\n+  if (sym->attr.automatic)\n+      return true;\n+\n   return false;\n }\n "}, {"sha": "407c4a1fdbc85202b56f6047332d31646865260e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -660,7 +660,7 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n     }\n \n   /* Keep variables larger than max-stack-var-size off stack.  */\n-  if (!sym->ns->proc_name->attr.recursive\n+  if (!sym->ns->proc_name->attr.recursive && !sym->attr.automatic\n       && INTEGER_CST_P (DECL_SIZE_UNIT (decl))\n       && !gfc_can_put_var_on_stack (DECL_SIZE_UNIT (decl))\n \t /* Put variable length auto array pointers always into stack.  */"}, {"sha": "f387022069b86e5656d3dc27778459576bebfe99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -1,3 +1,10 @@\n+2016-09-23  Fritz Reese  <fritzoreese@gmail.com>\n+\n+\t* gfortran.dg/dec_static_1.f90: New.\n+\t* gfortran.dg/dec_static_2.f90: New.\n+\t* gfortran.dg/dec_static_3.f90: New.\n+\t* gfortran.dg/dec_static_4.f90: New.\n+\n 2016-09-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/48298"}, {"sha": "7f319ec0a5ca2080ebda2b27fd888d8891a5efa6", "filename": "gcc/testsuite/gfortran.dg/dec_static_1.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_1.f90?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+! { dg-options \"-fdec-static -finit-local-zero\" }\n+!\n+! Test AUTOMATIC and STATIC attributes.\n+!\n+subroutine assert(s, i1, i2)\n+  implicit none\n+  integer, intent(in)      :: i1, i2\n+  character(*), intent(in) :: s\n+  if (i1 .ne. i2) then\n+    print *, s, \": expected \", i2, \" but was \", i1\n+    call abort\n+  endif\n+endsubroutine assert\n+\n+function f (x, y)\n+  implicit none\n+  integer f\n+  integer, intent(in)  :: x, y\n+  integer              :: a    ! only a can actually be saved\n+  integer, automatic   :: c    ! should actually be automatic\n+  save\n+\n+  ! a should be incremented by x every time and saved\n+  a = a + x\n+  f = a\n+\n+  ! c should be zeroed every time, therefore equal y\n+  c = c + y\n+  call assert (\"f%c\", c, y)\n+  return\n+endfunction\n+\n+implicit none\n+integer :: f\n+\n+! Should return static value of a; accumulates x\n+call assert (\"f()\", f(1,3), 1)\n+call assert (\"f()\", f(1,4), 2)\n+call assert (\"f()\", f(1,2), 3)\n+\n+end"}, {"sha": "392f3427c148fcc4d2cbc5f38d3783dd5842b7aa", "filename": "gcc/testsuite/gfortran.dg/dec_static_2.f90", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_2.f90?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -0,0 +1,58 @@\n+! { dg-do run }\n+! { dg-options \"-fdec-static -fno-automatic -finit-local-zero\" }\n+!\n+! Test STATIC and AUTOMATIC with -fno-automatic and recursive subroutines.\n+!\n+subroutine assert(s, i1, i2)\n+  implicit none\n+  integer, intent(in)      :: i1, i2\n+  character(*), intent(in) :: s\n+  if (i1 .ne. i2) then\n+    print *, s, \": expected \", i2, \" but was \", i1\n+    call abort\n+  endif\n+endsubroutine\n+\n+function f (x)\n+implicit none\n+  integer f\n+  integer, intent(in) :: x\n+  integer, static     :: a ! should be SAVEd\n+  a = a + x ! should increment by x every time\n+  f = a\n+  return\n+endfunction\n+\n+recursive subroutine g (x)\n+implicit none\n+  integer, intent(in) :: x\n+  integer, automatic  :: a ! should be automatic (in recursive)\n+  a = a + x ! should be set to x every time\n+  call assert (\"g%a\", a, x)\n+endsubroutine\n+\n+subroutine h (x)\n+implicit none\n+  integer, intent(in) :: x\n+  integer, automatic  :: a ! should be automatic (outside recursive)\n+  a = a + x ! should be set to x every time\n+  call assert (\"h%a\", a, x)\n+endsubroutine\n+\n+implicit none\n+integer :: f\n+\n+! Should return static value of c; accumulates x\n+call assert (\"f()\", f(3), 3)\n+call assert (\"f()\", f(4), 7)\n+call assert (\"f()\", f(2), 9)\n+\n+call g(3)\n+call g(4)\n+call g(2)\n+\n+call h(3)\n+call h(4)\n+call h(2)\n+\n+end"}, {"sha": "48b62206bb8c2a6cc8f6fe57cccc5767862516fb", "filename": "gcc/testsuite/gfortran.dg/dec_static_3.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_3.f90?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"\" }\n+!\n+! Check errors for use of STATIC/AUTOMATIC without -fdec-static.\n+!\n+\n+subroutine s()\n+  implicit none\n+  integer, automatic :: a ! { dg-error \"is a DEC extension\" }\n+  integer, static :: b ! { dg-error \"is a DEC extension\" }\n+  integer, save :: c\n+\n+  integer :: auto1, auto2, static1, static2, save1, save2\n+  automatic auto1 ! { dg-error \"is a DEC extension\" }\n+  automatic :: auto2 ! { dg-error \"is a DEC extension\" }\n+  static static1 ! { dg-error \"is a DEC extension\" }\n+  static :: static2 ! { dg-error \"is a DEC extension\" }\n+  save save1\n+  save :: save2\n+end subroutine"}, {"sha": "91bed19fc4173ea27893f3417037e25026eb0b0e", "filename": "gcc/testsuite/gfortran.dg/dec_static_4.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d567d1f58df1e737c8abf6140ee8ec41e92377/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_static_4.f90?ref=34d567d1f58df1e737c8abf6140ee8ec41e92377", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec-static\" }\n+!\n+! Check for conflicts between STATIC/AUTOMATIC and other attributes.\n+!\n+\n+function s(a, b, x, y) result(z)\n+  implicit none\n+  integer, automatic, intent(IN) :: a ! { dg-error \"DUMMY attribute conflicts\" }\n+  integer, static, intent(IN) :: b ! { dg-error \"DUMMY attribute conflicts\" }\n+  integer, intent(OUT) :: x, y\n+  automatic :: x ! { dg-error \"DUMMY attribute conflicts\" }\n+  static :: y ! { dg-error \"DUMMY attribute conflicts\" }\n+\n+  automatic ! { dg-error \"Expected entity-list in AUTOMATIC statement\" }\n+  automatic :: ! { dg-error \"Expected entity-list in AUTOMATIC statement\" }\n+  static ! { dg-error \"Expected entity-list in STATIC statement\" }\n+  static :: ! { dg-error \"Expected entity-list in STATIC statement\" }\n+\n+  integer, automatic :: auto1, auto2\n+  integer, static :: static1, static2\n+  integer :: auto3, static3\n+  automatic :: auto3\n+  static :: static3\n+\n+  common /c1/ auto1, auto2 ! { dg-error \"COMMON attribute conflicts\" }\n+  common /c2/ static1, static2 ! { dg-error \"COMMON attribute conflicts\" }\n+  common /c3/ auto3, static3 ! { dg-error \"COMMON attribute conflicts\" }\n+\n+  integer, static :: z ! { dg-error \"RESULT attribute conflicts\" }\n+  integer, automatic :: z ! { dg-error \"RESULT attribute conflicts\" }\n+  static :: z ! { dg-error \"RESULT attribute conflicts\" }\n+  automatic :: z ! { dg-error \"RESULT attribute conflicts\" }\n+\n+  integer, static, automatic :: o ! { dg-error \"AUTOMATIC attribute conflicts\" }\n+\n+  integer :: a, b, z ! fall-back decls so we don't get \"no implicit type\"\n+end"}]}