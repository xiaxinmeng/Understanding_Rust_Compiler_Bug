{"sha": "43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhZDY2YWE0YTNjOWVhZWM0NjM1NGRjZGRhYWRlYmQzZGY3MWY2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-27T08:50:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-27T08:50:15Z"}, "message": "re PR tree-optimization/59288 (ICE in get_initial_def_for_induction)\n\n2013-11-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/59288\n\t* tree-vect-loop.c (get_initial_def_for_induction): Do not\n\tre-analyze the PHI but use STMT_VINFO_LOOP_PHI_EVOLUTION_PART.\n\n\t* gcc.dg/torture/pr59288.c: New testcase.\n\nFrom-SVN: r205434", "tree": {"sha": "ff81de6be32fc6460422dd34d41098afb88436d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff81de6be32fc6460422dd34d41098afb88436d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14a981b922e03f200af99b1db09f599842d8eb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a981b922e03f200af99b1db09f599842d8eb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a981b922e03f200af99b1db09f599842d8eb7d"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "43383ffa098f3b8c4e9b841925ebfd22405381ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "patch": "@@ -1,3 +1,9 @@\n+2013-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59288\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Do not\n+\tre-analyze the PHI but use STMT_VINFO_LOOP_PHI_EVOLUTION_PART.\n+\n 2013-11-27  Marek Polacek  <polacek@redhat.com>\n \n \t* ubsan.c (ubsan_type_descriptor): If varpool_get_node returns NULL"}, {"sha": "2edd80b94d75162f35922c0490cb1e1dafebfd90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "patch": "@@ -1,3 +1,8 @@\n+2013-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59288\n+\t* gcc.dg/torture/pr59288.c: New testcase.\n+\n 2013-11-27  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/ubsan/undefined-1.c: New test."}, {"sha": "8331e73289cf67f65656adec1f30a036d1ff0749", "filename": "gcc/testsuite/gcc.dg/torture/pr59288.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59288.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59288.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59288.c?ref=43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+void\n+baz (int *d)\n+{\n+  long int i, j, k;\n+  for (i = 0, j = 0, k = 0; i < 512; i = (int) i + 1, j = (int) j + 1, k = (int) k + 3)\n+    d[i] = j ^ (i * 3) ^ (2 * k + 2);\n+}"}, {"sha": "50c9d9caa34287ef4cc9924676baba9bad307f55", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ad66aa4a3c9eaec46354dcddaadebd3df71f69/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=43ad66aa4a3c9eaec46354dcddaadebd3df71f69", "patch": "@@ -3199,15 +3199,13 @@ get_initial_def_for_induction (gimple iv_phi)\n   struct loop *iv_loop;\n   basic_block new_bb;\n   tree new_vec, vec_init, vec_step, t;\n-  tree access_fn;\n   tree new_var;\n   tree new_name;\n   gimple init_stmt, induction_phi, new_stmt;\n   tree induc_def, vec_def, vec_dest;\n   tree init_expr, step_expr;\n   int vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n   int i;\n-  bool ok;\n   int ncopies;\n   tree expr;\n   stmt_vec_info phi_info = vinfo_for_stmt (iv_phi);\n@@ -3236,13 +3234,12 @@ get_initial_def_for_induction (gimple iv_phi)\n   latch_e = loop_latch_edge (iv_loop);\n   loop_arg = PHI_ARG_DEF_FROM_EDGE (iv_phi, latch_e);\n \n-  access_fn = analyze_scalar_evolution (iv_loop, PHI_RESULT (iv_phi));\n-  gcc_assert (access_fn);\n-  STRIP_NOPS (access_fn);\n-  ok = vect_is_simple_iv_evolution (iv_loop->num, access_fn,\n-                                    &init_expr, &step_expr);\n-  gcc_assert (ok);\n+  step_expr = STMT_VINFO_LOOP_PHI_EVOLUTION_PART (phi_info);\n+  gcc_assert (step_expr != NULL_TREE);\n+\n   pe = loop_preheader_edge (iv_loop);\n+  init_expr = PHI_ARG_DEF_FROM_EDGE (iv_phi,\n+\t\t\t\t     loop_preheader_edge (iv_loop));\n \n   vectype = get_vectype_for_scalar_type (TREE_TYPE (init_expr));\n   resvectype = get_vectype_for_scalar_type (TREE_TYPE (PHI_RESULT (iv_phi)));\n@@ -3253,6 +3250,16 @@ get_initial_def_for_induction (gimple iv_phi)\n   gcc_assert (phi_info);\n   gcc_assert (ncopies >= 1);\n \n+  /* Convert the step to the desired type.  */\n+  step_expr = force_gimple_operand (fold_convert (TREE_TYPE (vectype),\n+\t\t\t\t\t\t  step_expr),\n+\t\t\t\t    &stmts, true, NULL_TREE);\n+  if (stmts)\n+    {\n+      new_bb = gsi_insert_seq_on_edge_immediate (pe, stmts);\n+      gcc_assert (!new_bb);\n+    }\n+\n   /* Find the first insertion point in the BB.  */\n   si = gsi_after_labels (bb);\n \n@@ -3262,9 +3269,7 @@ get_initial_def_for_induction (gimple iv_phi)\n       /* iv_loop is nested in the loop to be vectorized.  init_expr had already\n \t been created during vectorization of previous stmts.  We obtain it\n \t from the STMT_VINFO_VEC_STMT of the defining stmt.  */\n-      tree iv_def = PHI_ARG_DEF_FROM_EDGE (iv_phi,\n-                                           loop_preheader_edge (iv_loop));\n-      vec_init = vect_get_vec_def_for_operand (iv_def, iv_phi, NULL);\n+      vec_init = vect_get_vec_def_for_operand (init_expr, iv_phi, NULL);\n       /* If the initial value is not of proper type, convert it.  */\n       if (!useless_type_conversion_p (vectype, TREE_TYPE (vec_init)))\n \t{"}]}