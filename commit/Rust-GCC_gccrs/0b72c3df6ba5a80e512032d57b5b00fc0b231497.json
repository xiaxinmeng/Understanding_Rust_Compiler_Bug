{"sha": "0b72c3df6ba5a80e512032d57b5b00fc0b231497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI3MmMzZGY2YmE1YTgwZTUxMjAzMmQ1N2I1YjAwZmMwYjIzMTQ5Nw==", "commit": {"author": {"name": "Andrew Cagney", "email": "cagney@b1.cygnus.com", "date": "2000-05-31T11:00:54Z"}, "committer": {"name": "Andrew Cagney", "email": "cagney@gcc.gnu.org", "date": "2000-05-31T11:00:54Z"}, "message": "Add field ``name'' to floatformat.\n\nFrom-SVN: r34292", "tree": {"sha": "5527ffba0c889f66123a041cb15a288d014cc42c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5527ffba0c889f66123a041cb15a288d014cc42c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b72c3df6ba5a80e512032d57b5b00fc0b231497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b72c3df6ba5a80e512032d57b5b00fc0b231497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b72c3df6ba5a80e512032d57b5b00fc0b231497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b72c3df6ba5a80e512032d57b5b00fc0b231497/comments", "author": null, "committer": null, "parents": [{"sha": "ecc9dd932a3a296e3fccee2a61af4ec57ba8bbee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc9dd932a3a296e3fccee2a61af4ec57ba8bbee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc9dd932a3a296e3fccee2a61af4ec57ba8bbee"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "2bd3e6574a2e2ffb49454cf4f8708ff6a2508d52", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b72c3df6ba5a80e512032d57b5b00fc0b231497/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b72c3df6ba5a80e512032d57b5b00fc0b231497/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=0b72c3df6ba5a80e512032d57b5b00fc0b231497", "patch": "@@ -1,3 +1,7 @@\n+Tue May 30 16:53:34 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* floatformat.h (struct floatformat): Add field name.\n+\n 2000-05-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* getopt.h (getopt): Also check HAVE_DECL_* when prototyping."}, {"sha": "e4d1d150f26f13a80b3dfebc6ee7d1c4d5c7a1f0", "filename": "include/floatformat.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b72c3df6ba5a80e512032d57b5b00fc0b231497/include%2Ffloatformat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b72c3df6ba5a80e512032d57b5b00fc0b231497/include%2Ffloatformat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffloatformat.h?ref=0b72c3df6ba5a80e512032d57b5b00fc0b231497", "patch": "@@ -1,5 +1,5 @@\n /* IEEE floating point support declarations, for GDB, the GNU Debugger.\n-   Copyright (C) 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 2000 Free Software Foundation, Inc.\n \n This file is part of GDB.\n \n@@ -73,6 +73,9 @@ struct floatformat\n \n   /* Is the integer bit explicit or implicit?  */\n   enum floatformat_intbit intbit;\n+\n+  /* Internal name for debugging. */\n+  const char *name;\n };\n \n /* floatformats for IEEE single and double, big and little endian.  */"}, {"sha": "d1c1115d9b1896d941deef38d93309d15020a9a7", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b72c3df6ba5a80e512032d57b5b00fc0b231497/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b72c3df6ba5a80e512032d57b5b00fc0b231497/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0b72c3df6ba5a80e512032d57b5b00fc0b231497", "patch": "@@ -1,3 +1,7 @@\n+Tue May 30 16:45:25 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* floatformat.c: Add name to each floatformat field.\n+\n Tue May 30 15:07:52 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (objalloc.o): Depend on config.h"}, {"sha": "3cb78f51dde4c5df4e3f3336e66668373627f348", "filename": "libiberty/floatformat.c", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b72c3df6ba5a80e512032d57b5b00fc0b231497/libiberty%2Ffloatformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b72c3df6ba5a80e512032d57b5b00fc0b231497/libiberty%2Ffloatformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffloatformat.c?ref=0b72c3df6ba5a80e512032d57b5b00fc0b231497", "patch": "@@ -1,5 +1,5 @@\n /* IEEE floating point support routines, for GDB, the GNU Debugger.\n-   Copyright (C) 1991, 1994, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GDB.\n \n@@ -36,62 +36,79 @@ extern char *memset ();\n /* floatformats for IEEE single and double, big and little endian.  */\n const struct floatformat floatformat_ieee_single_big =\n {\n-  floatformat_big, 32, 0, 1, 8, 127, 255, 9, 23, floatformat_intbit_no\n+  floatformat_big, 32, 0, 1, 8, 127, 255, 9, 23,\n+  floatformat_intbit_no,\n+  \"floatformat_ieee_single_big\"\n };\n const struct floatformat floatformat_ieee_single_little =\n {\n-  floatformat_little, 32, 0, 1, 8, 127, 255, 9, 23, floatformat_intbit_no\n+  floatformat_little, 32, 0, 1, 8, 127, 255, 9, 23,\n+  floatformat_intbit_no,\n+  \"floatformat_ieee_single_little\"\n };\n const struct floatformat floatformat_ieee_double_big =\n {\n-  floatformat_big, 64, 0, 1, 11, 1023, 2047, 12, 52, floatformat_intbit_no\n+  floatformat_big, 64, 0, 1, 11, 1023, 2047, 12, 52,\n+  floatformat_intbit_no,\n+  \"floatformat_ieee_double_big\"\n };\n const struct floatformat floatformat_ieee_double_little =\n {\n-  floatformat_little, 64, 0, 1, 11, 1023, 2047, 12, 52, floatformat_intbit_no\n+  floatformat_little, 64, 0, 1, 11, 1023, 2047, 12, 52,\n+  floatformat_intbit_no,\n+  \"floatformat_ieee_double_little\"\n };\n \n /* floatformat for IEEE double, little endian byte order, with big endian word\n    ordering, as on the ARM.  */\n \n const struct floatformat floatformat_ieee_double_littlebyte_bigword =\n {\n-  floatformat_littlebyte_bigword, 64, 0, 1, 11, 1023, 2047, 12, 52, floatformat_intbit_no\n+  floatformat_littlebyte_bigword, 64, 0, 1, 11, 1023, 2047, 12, 52,\n+  floatformat_intbit_no,\n+  \"floatformat_ieee_double_little\"\n };\n \n const struct floatformat floatformat_i387_ext =\n {\n   floatformat_little, 80, 0, 1, 15, 0x3fff, 0x7fff, 16, 64,\n-  floatformat_intbit_yes\n+  floatformat_intbit_yes,\n+  \"floatformat_i387_ext\"\n };\n const struct floatformat floatformat_m68881_ext =\n {\n   /* Note that the bits from 16 to 31 are unused.  */\n-  floatformat_big, 96, 0, 1, 15, 0x3fff, 0x7fff, 32, 64, floatformat_intbit_yes\n+  floatformat_big, 96, 0, 1, 15, 0x3fff, 0x7fff, 32, 64,\n+  floatformat_intbit_yes,\n+  \"floatformat_m68881_ext\"\n };\n const struct floatformat floatformat_i960_ext =\n {\n   /* Note that the bits from 0 to 15 are unused.  */\n   floatformat_little, 96, 16, 17, 15, 0x3fff, 0x7fff, 32, 64,\n-  floatformat_intbit_yes\n+  floatformat_intbit_yes,\n+  \"floatformat_i960_ext\"\n };\n const struct floatformat floatformat_m88110_ext =\n {\n #ifdef HARRIS_FLOAT_FORMAT\n   /* Harris uses raw format 128 bytes long, but the number is just an ieee\n      double, and the last 64 bits are wasted. */\n   floatformat_big,128, 0, 1, 11,  0x3ff,  0x7ff, 12, 52,\n-  floatformat_intbit_no\n+  floatformat_intbit_no,\n+  \"floatformat_m88110_ext(harris)\"\n #else\n   floatformat_big, 80, 0, 1, 15, 0x3fff, 0x7fff, 16, 64,\n-  floatformat_intbit_yes\n+  floatformat_intbit_yes,\n+  \"floatformat_m88110_ext\"\n #endif /* HARRIS_FLOAT_FORMAT */\n };\n const struct floatformat floatformat_arm_ext =\n {\n   /* Bits 1 to 16 are unused.  */\n   floatformat_big, 96, 0, 17, 15, 0x3fff, 0x7fff, 32, 64,\n-  floatformat_intbit_yes\n+  floatformat_intbit_yes,\n+  \"floatformat_arm_ext\"\n };\n \f\n static unsigned long get_field PARAMS ((unsigned char *,"}]}