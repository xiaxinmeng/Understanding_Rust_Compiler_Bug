{"sha": "8930883ee93cb4701259e8738f51530d609812f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkzMDg4M2VlOTNjYjQ3MDEyNTllODczOGY1MTUzMGQ2MDk4MTJmNw==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2012-06-20T01:05:25Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2012-06-20T01:05:25Z"}, "message": "emit-rtl.c (need_atomic_barrier_p): New function.\n\n\t* emit-rtl.c (need_atomic_barrier_p): New function.\n\t* emit-rtl.h (need_atomic_barrier_p): Declare it.\n\t* config/alpha/alpha.c (alpha_{pre,post}_atomic_barrier): Use it.\n\t* config/arm/arm.c (arm_{pre,post}_atomic_barrier): Use it.\n\t* config/tilegx/tilegx.c (tile_{pre,post}_atomic_barrier): Use it.\n\t* config/mips/mips.c (mips_{pre,post}_atomic_barrier_p): Remove.\n\t(mips_process_sync_loop): Use generic version instead.\n\nFrom-SVN: r188806", "tree": {"sha": "417412c5d20847fc0d23a560bad46ac7075e732f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/417412c5d20847fc0d23a560bad46ac7075e732f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8930883ee93cb4701259e8738f51530d609812f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8930883ee93cb4701259e8738f51530d609812f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8930883ee93cb4701259e8738f51530d609812f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8930883ee93cb4701259e8738f51530d609812f7/comments", "author": null, "committer": null, "parents": [{"sha": "ff6191481c577c62e481a2f4df3de182d8b63110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff6191481c577c62e481a2f4df3de182d8b63110", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff6191481c577c62e481a2f4df3de182d8b63110"}], "stats": {"total": 176, "additions": 51, "deletions": 125}, "files": [{"sha": "6df2e6cb2a29dc60d96358442a4732bd08d63fcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8930883ee93cb4701259e8738f51530d609812f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8930883ee93cb4701259e8738f51530d609812f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8930883ee93cb4701259e8738f51530d609812f7", "patch": "@@ -1,3 +1,13 @@\n+2012-06-19  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* emit-rtl.c (need_atomic_barrier_p): New function.\n+\t* emit-rtl.h (need_atomic_barrier_p): Declare it.\n+\t* config/alpha/alpha.c (alpha_{pre,post}_atomic_barrier): Use it.\n+\t* config/arm/arm.c (arm_{pre,post}_atomic_barrier): Use it.\n+\t* config/tilegx/tilegx.c (tile_{pre,post}_atomic_barrier): Use it.\n+\t* config/mips/mips.c (mips_{pre,post}_atomic_barrier_p): Remove.\n+\t(mips_process_sync_loop): Use generic version instead.\n+\n 2012-06-19  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/mips/mips.c (mips_process_sync_loop): Emit cmp result only if"}, {"sha": "a881a9ed675a8605c27534494479c929ce7e10da", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=8930883ee93cb4701259e8738f51530d609812f7", "patch": "@@ -4262,39 +4262,15 @@ emit_store_conditional (enum machine_mode mode, rtx res, rtx mem, rtx val)\n static void\n alpha_pre_atomic_barrier (enum memmodel model)\n {\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_ACQUIRE:\n-      break;\n-    case MEMMODEL_RELEASE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      emit_insn (gen_memory_barrier ());\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  if (need_atomic_barrier_p (model, true))\n+    emit_insn (gen_memory_barrier ());\n }\n \n static void\n alpha_post_atomic_barrier (enum memmodel model)\n {\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_RELEASE:\n-      break;\n-    case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      emit_insn (gen_memory_barrier ());\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  if (need_atomic_barrier_p (model, false))\n+    emit_insn (gen_memory_barrier ());\n }\n \n /* A subroutine of the atomic operation splitters.  Emit an insxl"}, {"sha": "73fc0cb35a761cbd0500a7d122d47389092b1464", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8930883ee93cb4701259e8738f51530d609812f7", "patch": "@@ -25572,39 +25572,15 @@ vfp3_const_double_for_fract_bits (rtx operand)\n static void\n arm_pre_atomic_barrier (enum memmodel model)\n {\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_ACQUIRE:\n-      break;\n-    case MEMMODEL_RELEASE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      emit_insn (gen_memory_barrier ());\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  if (need_atomic_barrier_p (model, true))\n+    emit_insn (gen_memory_barrier ());\n }\n \n static void\n arm_post_atomic_barrier (enum memmodel model)\n {\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_RELEASE:\n-      break;\n-    case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      emit_insn (gen_memory_barrier ());\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  if (need_atomic_barrier_p (model, false))\n+    emit_insn (gen_memory_barrier ());\n }\n \n /* Emit the load-exclusive and store-exclusive instructions.  */"}, {"sha": "2914d530c5a59bad0a5b78754650047e8a119e83", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8930883ee93cb4701259e8738f51530d609812f7", "patch": "@@ -11982,45 +11982,6 @@ mips_sync_insn2_template (enum attr_sync_insn2 type)\n   gcc_unreachable ();\n }\n \n-/* Subroutines of the mips_process_sync_loop.\n-   Emit barriers as needed for the memory MODEL.  */\n-\n-static bool\n-mips_emit_pre_atomic_barrier_p (enum memmodel model)\n-{\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_ACQUIRE:\n-      return false;\n-    case MEMMODEL_RELEASE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      return true;\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n-static bool\n-mips_emit_post_atomic_barrier_p (enum memmodel model)\n-{\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_RELEASE:\n-      return false;\n-    case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      return true;\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n /* OPERANDS are the operands to a sync loop instruction and INDEX is\n    the value of the one of the sync_* attributes.  Return the operand\n    referred to by the attribute, or DEFAULT_VALUE if the insn doesn't\n@@ -12093,7 +12054,7 @@ mips_process_sync_loop (rtx insn, rtx *operands)\n   mips_multi_start ();\n \n   /* Output the release side of the memory barrier.  */\n-  if (mips_emit_pre_atomic_barrier_p (model))\n+  if (need_atomic_barrier_p (model, true))\n     {\n       if (required_oldval == 0 && TARGET_OCTEON)\n \t{\n@@ -12206,7 +12167,7 @@ mips_process_sync_loop (rtx insn, rtx *operands)\n     mips_multi_add_insn (\"li\\t%0,1\", cmp, NULL);\n \n   /* Output the acquire side of the memory barrier.  */\n-  if (TARGET_SYNC_AFTER_SC && mips_emit_post_atomic_barrier_p (model))\n+  if (TARGET_SYNC_AFTER_SC && need_atomic_barrier_p (model, false))\n     mips_multi_add_insn (\"sync\", NULL);\n \n   /* Output the exit label, if needed.  */"}, {"sha": "a5f48a24b221991a42239424ce034ae3f59bfe8c", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=8930883ee93cb4701259e8738f51530d609812f7", "patch": "@@ -2593,41 +2593,17 @@ tilegx_expand_tablejump (rtx op0, rtx op1)\n void\n tilegx_pre_atomic_barrier (enum memmodel model)\n {\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_ACQUIRE:\n-      break;\n-    case MEMMODEL_RELEASE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      emit_insn (gen_memory_barrier ());\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  if (need_atomic_barrier_p (model, true))\n+    emit_insn (gen_memory_barrier ());\n }\n \n \n /* Emit barrier after an atomic, as needed for the memory MODEL.  */\n void\n tilegx_post_atomic_barrier (enum memmodel model)\n {\n-  switch (model)\n-    {\n-    case MEMMODEL_RELAXED:\n-    case MEMMODEL_CONSUME:\n-    case MEMMODEL_RELEASE:\n-      break;\n-    case MEMMODEL_ACQUIRE:\n-    case MEMMODEL_ACQ_REL:\n-    case MEMMODEL_SEQ_CST:\n-      emit_insn (gen_memory_barrier ());\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  if (need_atomic_barrier_p (model, false))\n+    emit_insn (gen_memory_barrier ());\n }\n \n "}, {"sha": "9565c618b815529d2f38f2fead651d14261b604b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=8930883ee93cb4701259e8738f51530d609812f7", "patch": "@@ -6161,4 +6161,29 @@ locator_eq (int loc1, int loc2)\n   return locator_scope (loc1) == locator_scope (loc2);\n }\n \f\n+\n+/* Return true if memory model MODEL requires a pre-operation (release-style)\n+   barrier or a post-operation (acquire-style) barrier.  While not universal,\n+   this function matches behavior of several targets.  */\n+\n+bool\n+need_atomic_barrier_p (enum memmodel model, bool pre)\n+{\n+  switch (model)\n+    {\n+    case MEMMODEL_RELAXED:\n+    case MEMMODEL_CONSUME:\n+      return false;\n+    case MEMMODEL_RELEASE:\n+      return pre;\n+    case MEMMODEL_ACQUIRE:\n+      return !pre;\n+    case MEMMODEL_ACQ_REL:\n+    case MEMMODEL_SEQ_CST:\n+      return true;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\f\n #include \"gt-emit-rtl.h\""}, {"sha": "715d4dd69840729ac428416ddb8c2f7c632048cf", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8930883ee93cb4701259e8738f51530d609812f7/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=8930883ee93cb4701259e8738f51530d609812f7", "patch": "@@ -69,6 +69,8 @@ extern void set_reg_attrs_for_decl_rtl (tree t, rtx x);\n extern void adjust_reg_mode (rtx, enum machine_mode);\n extern int mem_expr_equal_p (const_tree, const_tree);\n \n+extern bool need_atomic_barrier_p (enum memmodel, bool);\n+\n /* Return the first insn of the current sequence or current function.  */\n \n static inline rtx"}]}