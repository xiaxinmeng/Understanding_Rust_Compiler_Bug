{"sha": "00b40d0da26a32c18f696c8f301b51f55960d155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiNDBkMGRhMjZhMzJjMThmNjk2YzhmMzAxYjUxZjU1OTYwZDE1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-07-20T21:43:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-20T21:43:38Z"}, "message": "i386.c (ix86_decompose_address): Allow only subregs of DImode hard registers in index.\n\n\t* config/i386/i386.c (ix86_decompose_address): Allow only subregs\n\tof DImode hard registers in index.\n\t(ix86_legitimate_address_p): Allow subregs of base and index to span\n\tmore than a word.  Assert that subregs of base and index satisfy\n\tregister_no_elim_operand predicates.  Reject addresses where\n\tbase and index have different modes.\n\nFrom-SVN: r176536", "tree": {"sha": "60a4c9cc32d02505deb16553b1575c7a5eba5f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60a4c9cc32d02505deb16553b1575c7a5eba5f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b40d0da26a32c18f696c8f301b51f55960d155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b40d0da26a32c18f696c8f301b51f55960d155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b40d0da26a32c18f696c8f301b51f55960d155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b40d0da26a32c18f696c8f301b51f55960d155/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87f5355496a23915469b71b0292ab04377cf0ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f5355496a23915469b71b0292ab04377cf0ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f5355496a23915469b71b0292ab04377cf0ebd"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "0451e1bd73956b25018076fa245fc1751521472a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b40d0da26a32c18f696c8f301b51f55960d155/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b40d0da26a32c18f696c8f301b51f55960d155/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00b40d0da26a32c18f696c8f301b51f55960d155", "patch": "@@ -1,3 +1,12 @@\n+2011-07-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_decompose_address): Allow only subregs\n+\tof DImode hard registers in index.\n+\t(ix86_legitimate_address_p): Allow subregs of base and index to span\n+\tmore than a word.  Assert that subregs of base and index satisfy\n+\tregister_no_elim_operand predicates.  Reject addresses where\n+\tbase and index have different modes.\n+\n 2011-07-20  Robert Millan  <rmh@gnu.org>\n \n \t* config.gcc (mips*-*-linux*): Remove redundant tm_file entry.\n@@ -13,12 +22,11 @@\n \tmemory address space to the type's address space.\n \n 2011-07-20  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \tPR target/36467\n \tPR target/49687\n-\t* config/avr/avr.md (mulhi3): Use register_or_s9_operand for\n-\toperand2 and expand appropriately if there is a CONST_INT in\n-\toperand2.\n+\t* config/avr/avr.md (mulhi3): Use register_or_s9_operand for operand2\n+\tand expand appropriately if there is a CONST_INT in operand2.\n \t(usmulqihi3): New insn.\n \t(*sumulqihi3): New insn.\n \t(*osmulqihi3): New insn."}, {"sha": "fbebd4c48cba4b2ea28576cffbd08f2c63c83259", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b40d0da26a32c18f696c8f301b51f55960d155/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b40d0da26a32c18f696c8f301b51f55960d155/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00b40d0da26a32c18f696c8f301b51f55960d155", "patch": "@@ -11197,6 +11197,16 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n   else\n     disp = addr;\t\t\t/* displacement */\n \n+  if (index)\n+    {\n+      if (REG_P (index))\n+\t;\n+      /* Allow only subregs of DImode hard regs.  */\n+      else if (GET_CODE (index) == SUBREG\n+\t       && !register_no_elim_operand (SUBREG_REG (index), DImode))\n+\treturn 0;\n+    }\n+\n   /* Extract the integral value of scale.  */\n   if (scale_rtx)\n     {\n@@ -11630,23 +11640,18 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n   disp = parts.disp;\n   scale = parts.scale;\n \n-  /* Validate base register.\n-\n-     Don't allow SUBREG's that span more than a word here.  It can lead to spill\n-     failures when the base is one word out of a two word structure, which is\n-     represented internally as a DImode int.  */\n-\n+  /* Validate base register.  */\n   if (base)\n     {\n       rtx reg;\n \n       if (REG_P (base))\n   \treg = base;\n-      else if (GET_CODE (base) == SUBREG\n-\t       && REG_P (SUBREG_REG (base))\n-\t       && GET_MODE_SIZE (GET_MODE (SUBREG_REG (base)))\n-\t\t  <= UNITS_PER_WORD)\n-  \treg = SUBREG_REG (base);\n+      else if (GET_CODE (base) == SUBREG && REG_P (SUBREG_REG (base)))\n+\t{\n+\t  reg = SUBREG_REG (base);\n+\t  gcc_assert (register_no_elim_operand (reg, DImode));\n+\t}\n       else\n \t/* Base is not a register.  */\n \treturn false;\n@@ -11660,21 +11665,18 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \treturn false;\n     }\n \n-  /* Validate index register.\n-\n-     Don't allow SUBREG's that span more than a word here -- same as above.  */\n-\n+  /* Validate index register.  */\n   if (index)\n     {\n       rtx reg;\n \n       if (REG_P (index))\n   \treg = index;\n-      else if (GET_CODE (index) == SUBREG\n-\t       && REG_P (SUBREG_REG (index))\n-\t       && GET_MODE_SIZE (GET_MODE (SUBREG_REG (index)))\n-\t\t  <= UNITS_PER_WORD)\n-  \treg = SUBREG_REG (index);\n+      else if (GET_CODE (index) == SUBREG && REG_P (SUBREG_REG (index)))\n+\t{\n+\t  reg = SUBREG_REG (index);\n+\t  gcc_assert (register_no_elim_operand (reg, DImode));\n+\t}\n       else\n \t/* Index is not a register.  */\n \treturn false;\n@@ -11688,6 +11690,11 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \treturn false;\n     }\n \n+  /* Index and base should have the same mode.  */\n+  if (base && index\n+      && GET_MODE (base) != GET_MODE (index))\n+    return false;\n+\n   /* Validate scale factor.  */\n   if (scale != 1)\n     {"}]}