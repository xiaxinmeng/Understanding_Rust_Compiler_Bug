{"sha": "59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllMzZiNzIyMTk0ZTFmNDlmZTExZjliYzY3MGViN2NkMjI0N2Y2ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-04-06T05:25:46Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-04-06T05:25:46Z"}, "message": "re PR fortran/36091 (false positive in bounds checking with forall)\n\n2009-04-06  Paul Thomas  <pault@gcc.gnu.org>\n\n        PR fortran/36091\n        * trans-array.c (gfc_conv_array_ref): If the symbol has the\n\ttemporary attribute use the array_spec for the bounds.\n\t* gfortran.h : Add the temporary field to the structure\n\t'symbol_attribute'.\n\t* trans-stmt.c (forall_make_variable_temp): Set the symbol's\n\ttemporary attribute.\n\n2009-04-06  Paul Thomas  <pault@gcc.gnu.org\n\n        PR fortran/36091\n        * gfortran.dg/forall_13.f90: Add -fbounds-check option.\n\nFrom-SVN: r145581", "tree": {"sha": "5c4149762b06b86b82f6a93c8de2a1ff3013eb9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c4149762b06b86b82f6a93c8de2a1ff3013eb9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/comments", "author": null, "committer": null, "parents": [{"sha": "ecef6119cef58bc532fd4e326eb8c0afbd671dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecef6119cef58bc532fd4e326eb8c0afbd671dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecef6119cef58bc532fd4e326eb8c0afbd671dfc"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "1e5ebc621d7c06a12c6d278919247d93c17aefe7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "patch": "@@ -1,3 +1,13 @@\n+2009-04-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+        PR fortran/36091\n+        * trans-array.c (gfc_conv_array_ref): If the symbol has the\n+\ttemporary attribute use the array_spec for the bounds.\n+\t* gfortran.h : Add the temporary field to the structure\n+\t'symbol_attribute'.\n+\t* trans-stmt.c (forall_make_variable_temp): Set the symbol's\n+\ttemporary attribute.\n+\n 2009-04-05  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/29458"}, {"sha": "4d04fda94a5f0aaac84fee0a8159c389d25ed24c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "patch": "@@ -621,7 +621,7 @@ typedef struct\n {\n   /* Variable attributes.  */\n   unsigned allocatable:1, dimension:1, external:1, intrinsic:1,\n-    optional:1, pointer:1, target:1, value:1, volatile_:1,\n+    optional:1, pointer:1, target:1, value:1, volatile_:1, temporary:1,\n     dummy:1, result:1, assign:1, threadprivate:1, not_always_present:1,\n     implied_index:1, subref_array_pointer:1, proc_pointer:1;\n "}, {"sha": "151f2cab40de1514f2aa39a64447cd98ebc624ed", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "patch": "@@ -2452,6 +2452,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n   tree tmp;\n   tree stride;\n   gfc_se indexse;\n+  gfc_se tmpse;\n \n   /* Handle scalarized references separately.  */\n   if (ar->type != AR_ELEMENT)\n@@ -2482,6 +2483,15 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \n \t  /* Lower bound.  */\n \t  tmp = gfc_conv_array_lbound (se->expr, n);\n+\t  if (sym->attr.temporary)\n+\t    {\n+\t      gfc_init_se (&tmpse, se);\n+\t      gfc_conv_expr_type (&tmpse, ar->as->lower[n],\n+\t\t\t\t  gfc_array_index_type);\n+\t      gfc_add_block_to_block (&se->pre, &tmpse.pre);\n+\t      tmp = tmpse.expr;\n+\t    }\n+\n \t  cond = fold_build2 (LT_EXPR, boolean_type_node, \n \t\t\t      indexse.expr, tmp);\n \t  asprintf (&msg, \"%s for array '%s', \"\n@@ -2499,6 +2509,15 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \t      || (ar->as->type != AS_ASSUMED_SIZE && !ar->as->cp_was_assumed))\n \t    {\n \t      tmp = gfc_conv_array_ubound (se->expr, n);\n+\t      if (sym->attr.temporary)\n+\t\t{\n+\t\t  gfc_init_se (&tmpse, se);\n+\t\t  gfc_conv_expr_type (&tmpse, ar->as->upper[n],\n+\t\t\t\t      gfc_array_index_type);\n+\t\t  gfc_add_block_to_block (&se->pre, &tmpse.pre);\n+\t\t  tmp = tmpse.expr;\n+\t\t}\n+\n \t      cond = fold_build2 (GT_EXPR, boolean_type_node, \n \t\t\t\t  indexse.expr, tmp);\n \t      asprintf (&msg, \"%s for array '%s', \""}, {"sha": "dd473ef73b04dd396ced46e966613bf503a16f0e", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "patch": "@@ -1754,6 +1754,7 @@ forall_make_variable_temp (gfc_code *c, stmtblock_t *pre, stmtblock_t *post)\n   new_sym = gfc_new_symbol (old_sym->name, NULL);\n   new_sym->ts = old_sym->ts;\n   new_sym->attr.referenced = 1;\n+  new_sym->attr.temporary = 1;\n   new_sym->attr.dimension = old_sym->attr.dimension;\n   new_sym->attr.flavor = old_sym->attr.flavor;\n "}, {"sha": "d93f198b12d1f122a9fbcacd4e1c77d53d859362", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "patch": "@@ -1,3 +1,8 @@\n+2009-04-06  Paul Thomas  <pault@gcc.gnu.org\n+\n+        PR fortran/36091\n+        * gfortran.dg/forall_13.f90: Add -fbounds-check option.\n+\n 2009-04-06  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gfortran.dg/namelist_51.f90, gfortran.dg/utf8_2.f03,"}, {"sha": "c7819f101838e0045175b790ee32690a2eaac891", "filename": "gcc/testsuite/gfortran.dg/forall_13.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36b722194e1f49fe11f9bc670eb7cd2247f6d/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_13.f90?ref=59e36b722194e1f49fe11f9bc670eb7cd2247f6d", "patch": "@@ -4,6 +4,9 @@\n !\n ! Contributed by Dick Hendrickson on comp.lang.fortran,\n ! \" Most elegant syntax for inverting a permutation?\" 20071006\n+!\n+! Test the fix for PR36091 as well...\n+! { dg-options \"-fbounds-check\" }\n !\n   integer :: p(4) = (/2,4,1,3/)\n   forall (i = 1:4) p(p(i)) = i                ! This was the original"}]}