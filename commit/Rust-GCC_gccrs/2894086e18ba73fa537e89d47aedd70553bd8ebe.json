{"sha": "2894086e18ba73fa537e89d47aedd70553bd8ebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5NDA4NmUxOGJhNzNmYTUzN2U4OWQ0N2FlZGQ3MDU1M2JkOGViZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-21T11:55:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-21T11:55:45Z"}, "message": "re PR target/48708 (Invalid V2DI vector set insn generated)\n\n\tPR target/48708\n\t* config/i386/i386.c (ix86_expand_vector_set) <V2DImode>: Generate\n\tvec_extract and vec_concat for non-SSE4_1 targets.\n\ntestsuite/ChangeLog:\n\n\tPR target/48708\n\t* gcc.target/i386/pr48708.c: New test.\n\nFrom-SVN: r172821", "tree": {"sha": "35828a1596136da476800176aa9414041dcd5ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35828a1596136da476800176aa9414041dcd5ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2894086e18ba73fa537e89d47aedd70553bd8ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2894086e18ba73fa537e89d47aedd70553bd8ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2894086e18ba73fa537e89d47aedd70553bd8ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2894086e18ba73fa537e89d47aedd70553bd8ebe/comments", "author": null, "committer": null, "parents": [{"sha": "53f94a5c18aa035ceb4f9ada2afb9ec8aa07ce57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f94a5c18aa035ceb4f9ada2afb9ec8aa07ce57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f94a5c18aa035ceb4f9ada2afb9ec8aa07ce57"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "2f4316cc0bc224ab62ace48ceab55ee5d92c96e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2894086e18ba73fa537e89d47aedd70553bd8ebe", "patch": "@@ -1,3 +1,9 @@\n+2011-04-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/48708\n+\t* config/i386/i386.c (ix86_expand_vector_set) <V2DImode>: Generate\n+\tvec_extract and vec_concat for non-SSE4_1 targets.\n+\n 2011-04-21  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (ref_maybe_used_by_stmt_p): Handle\n@@ -16,8 +22,7 @@\n \t* config/bfin/bfin.h (bfin_cc_rtx, bfin_rets_rtx): Use rtx, not\n \tstruct rtx_def *.\n \t* config/cris/cris-protos.h (STDIO_INCLUDED): Don't define.\n-\t* config/h8300/h8300.h (struct cum_arg): Use rtx, not struct\n-\trtx_def *.\n+\t* config/h8300/h8300.h (struct cum_arg): Use rtx, not struct rtx_def *.\n \t* config/iq2000/iq2000.h (struct iq2000_args): Use rtx, not struct\n \trtx_def *.\n \t* config/m32c/m32c-protos.h (MM, UINT): Don't define.  Expand\n@@ -26,18 +31,15 @@\n \trtx, not struct rtx_def *.\n \t* config/pa/pa-protos.h (return_addr_rtx): Use rtx, not struct\n \trtx_def *.\n-\t* config/pa/pa.h (hppa_pic_save_rtx): Use rtx, not struct rtx_def\n-\t*.\n-\t* config/pdp11/pdp11.h (cc0_reg_rtx): Use rtx, not struct rtx_def\n-\t*.\n+\t* config/pa/pa.h (hppa_pic_save_rtx): Use rtx, not struct rtx_def *.\n+\t* config/pdp11/pdp11.h (cc0_reg_rtx): Use rtx, not struct rtx_def *.\n \t* config/sh/sh-protos.h (sfunc_uses_reg, get_fpscr_rtx): Use rtx,\n \tnot struct rtx_def *.\n \t* config/sh/sh.h (sh_compare_op0, sh_compare_op1): Use rtx, not\n \tstruct rtx_def *.\n \t* config/spu/spu-protos.h (spu_float_const): Use rtx, not struct\n \trtx_def *.\n-\t* config/spu/spu.c (spu_float_const): Use rtx, not struct rtx_def\n-\t*.\n+\t* config/spu/spu.c (spu_float_const): Use rtx, not struct rtx_def *.\n \n 2011-04-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \n@@ -183,8 +185,8 @@\n \t* config/mn10300/mn10300-protos.h (mn10300_legitimate_constant_p):\n \tDelete.\n \t* config/mn10300/mn10300.h (LEGITIMATE_CONSTANT_P): Likewise.\n-\t* config/mn10300/mn10300.c (mn10300_legitimate_constant_p):\n-\tMake static.  Add a mode argument.\n+\t* config/mn10300/mn10300.c (mn10300_legitimate_constant_p): Make\n+\tstatic.  Add a mode argument.\n \t(TARGET_LEGITIMATE_CONSTANT_P): Define.\n \n \t* config/moxie/moxie.h (LEGITIMATE_CONSTANT_P): Delete.\n@@ -284,8 +286,7 @@\n \t(mips_secondary_reload_class): Likewise.\n \t* config/pa/pa.c (TARGET_CANNOT_FORCE_CONST_MEM): Redefine to...\n \t(pa_cannot_force_const_mem): ...this new function.\n-\t* config/rs6000/rs6000.c (TARGET_CANNOT_FORCE_CONST_MEM): Reefine\n-\tto...\n+\t* config/rs6000/rs6000.c (TARGET_CANNOT_FORCE_CONST_MEM): Reefine to...\n \t(rs6000_cannot_force_const_mem): ...this new function.\n \t* config/s390/s390.c (s390_cannot_force_const_mem): Add a mode\n \targument.\n@@ -386,8 +387,7 @@\n 2011-04-20  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config/arm/arm.c (arm_legitimize_reload_address): For NEON\n-\tquad-word modes, reduce to 9-bit index range when above 1016\n-\tlimit.\n+\tquad-word modes, reduce to 9-bit index range when above 1016 limit.\n \n 2011-04-20  Andrew Stubbs  <ams@codesourcery.com>\n \n@@ -396,8 +396,8 @@\n \n 2011-04-20  Kai Tietz  <ktietz@redhat.com>\n \n-\t* fold-const.c (fold_binary_loc): Add handling for\n-\t(X & ~Y) | (~X & Y) and (X && !Y) | (!X && Y) optimization to (X ^ Y).\n+\t* fold-const.c (fold_binary_loc): Add handling for (X & ~Y) | (~X & Y)\n+\tand (X && !Y) | (!X && Y) optimization to (X ^ Y).\n \n 2011-04-20  Andrew Stubbs  <ams@codesourcery.com>\n \n@@ -445,8 +445,7 @@\n \n \tPR middle-end/48695\n \t* tree-ssa-alias.c (aliasing_component_refs_p): Compute base\n-\tobjects and types here.  Adjust for their offset before\n-\tcomparing.\n+\tobjects and types here.  Adjust for their offset before comparing.\n \n 2011-04-20  Richard Sandiford  <richard.sandiford@linaro.org>\n "}, {"sha": "558eff119367211f1ce21671d26214e7be478bfb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2894086e18ba73fa537e89d47aedd70553bd8ebe", "patch": "@@ -31484,10 +31484,19 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       break;\n \n     case V2DImode:\n-      use_vec_merge = TARGET_SSE4_1;\n+      use_vec_merge = TARGET_SSE4_1 && TARGET_64BIT;\n       if (use_vec_merge)\n \tbreak;\n \n+      tmp = gen_reg_rtx (GET_MODE_INNER (mode));\n+      ix86_expand_vector_extract (false, tmp, target, 1 - elt);\n+      if (elt == 0)\n+\ttmp = gen_rtx_VEC_CONCAT (mode, tmp, val);\n+      else\n+\ttmp = gen_rtx_VEC_CONCAT (mode, val, tmp);\n+      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+      return;\n+\n     case V2DFmode:\n       {\n \trtx op0, op1;"}, {"sha": "531984693452d17d6599dd0d4ffe9c1bd365ab1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2894086e18ba73fa537e89d47aedd70553bd8ebe", "patch": "@@ -1,3 +1,8 @@\n+2011-04-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/48708\n+\t* gcc.target/i386/pr48708.c: New test.\n+\n 2011-04-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.dg/vect/vect-119.c: New test."}, {"sha": "355c2b2691f6769e968729570796b68256927525", "filename": "gcc/testsuite/gcc.target/i386/pr48708.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48708.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2894086e18ba73fa537e89d47aedd70553bd8ebe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48708.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr48708.c?ref=2894086e18ba73fa537e89d47aedd70553bd8ebe", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+typedef long long T __attribute__((may_alias));\n+struct S { __m128i d; };\n+\n+__m128i\n+foo (long long *x, struct S *y, __m128i *z)\n+{\n+  struct S s = *y;\n+  ((T *) &s.d)[0] = *x;\n+  return _mm_cmpeq_epi16 (s.d, *z);\n+}"}]}