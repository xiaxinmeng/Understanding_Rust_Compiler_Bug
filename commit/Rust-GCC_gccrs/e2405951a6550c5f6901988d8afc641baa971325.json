{"sha": "e2405951a6550c5f6901988d8afc641baa971325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0MDU5NTFhNjU1MGM1ZjY5MDE5ODhkOGFmYzY0MWJhYTk3MTMyNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2002-06-01T21:09:52Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2002-06-01T21:09:52Z"}, "message": "tree-inline.c (expand_call_inline): Make the statement expression we generate have a COMPOUND_STMT.\n\n2002-06-01  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-inline.c (expand_call_inline): Make the statement\n\texpression we generate have a COMPOUND_STMT.\n\nFrom-SVN: r54153", "tree": {"sha": "d4f7ca4931537b8be923e5340dd653bd48d1d9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f7ca4931537b8be923e5340dd653bd48d1d9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2405951a6550c5f6901988d8afc641baa971325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2405951a6550c5f6901988d8afc641baa971325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2405951a6550c5f6901988d8afc641baa971325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2405951a6550c5f6901988d8afc641baa971325/comments", "author": null, "committer": null, "parents": [{"sha": "0e3f022139a75b2dc2fc537909ac7622f4fdbfcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3f022139a75b2dc2fc537909ac7622f4fdbfcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3f022139a75b2dc2fc537909ac7622f4fdbfcb"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "e0f3d486384b986099971193481d230b2c60b0ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2405951a6550c5f6901988d8afc641baa971325/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2405951a6550c5f6901988d8afc641baa971325/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2405951a6550c5f6901988d8afc641baa971325", "patch": "@@ -1,3 +1,8 @@\n+2002-06-01  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-inline.c (expand_call_inline): Make the statement\n+\texpression we generate have a COMPOUND_STMT.\t\n+\n 2002-06-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcse.c (cprop_cc0_jump): Function deleted.\n@@ -3264,6 +3269,7 @@ config/alpha:\n \t(CPP_SPEC): Remove ieee defines.\n \t* freebsd.h, netbsd.h: Remove ieee defines and cpp_cpu.\n \n+>>>>>>> 1.14095\n 2002-05-14  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_save_reg): Make regno unsigned."}, {"sha": "94852430d03f532735999b293530a2a69dbdf98d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2405951a6550c5f6901988d8afc641baa971325/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2405951a6550c5f6901988d8afc641baa971325/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e2405951a6550c5f6901988d8afc641baa971325", "patch": "@@ -782,6 +782,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   inline_data *id;\n   tree t;\n   tree expr;\n+  tree stmt;\n   tree chain;\n   tree fn;\n   tree scope_stmt;\n@@ -873,10 +874,10 @@ expand_call_inline (tp, walk_subtrees, data)\n      for the return statements within the function to jump to.  The\n      type of the statement expression is the return type of the\n      function call.  */\n-  expr = build1 (STMT_EXPR, TREE_TYPE (TREE_TYPE (fn)), NULL_TREE);\n+  expr = build1 (STMT_EXPR, TREE_TYPE (TREE_TYPE (fn)), make_node (COMPOUND_STMT));\n   /* There is no scope associated with the statement-expression.  */\n   STMT_EXPR_NO_SCOPE (expr) = 1;\n-\n+  stmt = STMT_EXPR_STMT (expr);\n   /* Local declarations will be replaced by their equivalents in this\n      map.  */\n   st = id->decl_map;\n@@ -891,7 +892,7 @@ expand_call_inline (tp, walk_subtrees, data)\n      parameters.  */\n   expand_calls_inline (&arg_inits, id);\n   /* And add them to the tree.  */\n-  STMT_EXPR_STMT (expr) = chainon (STMT_EXPR_STMT (expr), arg_inits);\n+  COMPOUND_BODY (stmt) = chainon (COMPOUND_BODY (stmt), arg_inits);\n \n   /* Record the function we are about to inline so that we can avoid\n      recursing into it.  */\n@@ -926,43 +927,43 @@ expand_call_inline (tp, walk_subtrees, data)\n   SCOPE_BEGIN_P (scope_stmt) = 1;\n   SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n   remap_block (scope_stmt, DECL_ARGUMENTS (fn), id);\n-  TREE_CHAIN (scope_stmt) = STMT_EXPR_STMT (expr);\n-  STMT_EXPR_STMT (expr) = scope_stmt;\n+  TREE_CHAIN (scope_stmt) = COMPOUND_BODY (stmt);\n+  COMPOUND_BODY (stmt) = scope_stmt;\n \n   /* Tell the debugging backends that this block represents the\n      outermost scope of the inlined function.  */\n   if (SCOPE_STMT_BLOCK (scope_stmt))\n     BLOCK_ABSTRACT_ORIGIN (SCOPE_STMT_BLOCK (scope_stmt)) = DECL_ORIGIN (fn);\n \n   /* Declare the return variable for the function.  */\n-  STMT_EXPR_STMT (expr)\n-    = chainon (STMT_EXPR_STMT (expr),\n+  COMPOUND_BODY (stmt)\n+    = chainon (COMPOUND_BODY (stmt),\n \t       declare_return_variable (id, &use_stmt));\n \n   /* After we've initialized the parameters, we insert the body of the\n      function itself.  */\n-  inlined_body = &STMT_EXPR_STMT (expr);\n+  inlined_body = &COMPOUND_BODY (stmt);\n   while (*inlined_body)\n     inlined_body = &TREE_CHAIN (*inlined_body);\n   *inlined_body = copy_body (id);\n \n-  /* Close the block for the parameters.  */\n-  scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));\n-  SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n-  remap_block (scope_stmt, NULL_TREE, id);\n-  STMT_EXPR_STMT (expr)\n-    = chainon (STMT_EXPR_STMT (expr), scope_stmt);\n-\n   /* After the body of the function comes the RET_LABEL.  This must come\n      before we evaluate the returned value below, because that evalulation\n      may cause RTL to be generated.  */\n-  STMT_EXPR_STMT (expr)\n-    = chainon (STMT_EXPR_STMT (expr),\n+  COMPOUND_BODY (stmt)\n+    = chainon (COMPOUND_BODY (stmt),\n \t       build_stmt (LABEL_STMT, id->ret_label));\n \n   /* Finally, mention the returned value so that the value of the\n      statement-expression is the returned value of the function.  */\n-  STMT_EXPR_STMT (expr) = chainon (STMT_EXPR_STMT (expr), use_stmt);\n+  COMPOUND_BODY (stmt) = chainon (COMPOUND_BODY (stmt), use_stmt);\n+  \n+  /* Close the block for the parameters.  */\n+  scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));\n+  SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n+  remap_block (scope_stmt, NULL_TREE, id);\n+  COMPOUND_BODY (stmt)\n+    = chainon (COMPOUND_BODY (stmt), scope_stmt);\n \n   /* Clean up.  */\n   splay_tree_delete (id->decl_map);"}]}