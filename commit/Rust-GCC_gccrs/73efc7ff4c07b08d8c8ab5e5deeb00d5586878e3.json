{"sha": "73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlZmM3ZmY0YzA3YjA4ZDhjOGFiNWU1ZGVlYjAwZDU1ODY4NzhlMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-10-09T15:05:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-10-09T15:05:29Z"}, "message": "[Ada] Unnesting: avoid unnecessary loads of System\n\n2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_unst.adb (Unnest_Subprogram): Do not load System to obtain\n\tthe Address entity unless an activation record is being built.\n\tRemoves useless with_clauses for System when nested subprograms\n\tdo not have uplevel references, and therefore do not need\n\tactivation records.\n\nFrom-SVN: r264967", "tree": {"sha": "3d49d245b0a425b412cf9bcec11d0e8041a3e26c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d49d245b0a425b412cf9bcec11d0e8041a3e26c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7e72f9b7a03cc9756ee5bff4c1b39a226228222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e72f9b7a03cc9756ee5bff4c1b39a226228222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e72f9b7a03cc9756ee5bff4c1b39a226228222"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "aee5a62c0f41294609ae1ce32cbf441a615ffdf9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3", "patch": "@@ -1,3 +1,11 @@\n+2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.adb (Unnest_Subprogram): Do not load System to obtain\n+\tthe Address entity unless an activation record is being built.\n+\tRemoves useless with_clauses for System when nested subprograms\n+\tdo not have uplevel references, and therefore do not need\n+\tactivation records.\n+\n 2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Fully_Conformant_Expressions): Handle properly"}, {"sha": "0b63aa66fc59de535e130ab096f74d18f8d01b91", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=73efc7ff4c07b08d8c8ab5e5deeb00d5586878e3", "patch": "@@ -746,6 +746,10 @@ package body Exp_Unst is\n             procedure Register_Subprogram (E : Entity_Id; Bod : Node_Id) is\n                L : constant Nat := Get_Level (Subp, E);\n \n+            --  Subprograms declared in tasks and protected types cannot\n+            --  be eliminated because calls to them may be in other units,\n+            --  so they must be treated as reachable.\n+\n             begin\n                --  Subprograms declared in tasks and protected types cannot\n                --  be eliminated because calls to them may be in other units,\n@@ -756,10 +760,6 @@ package body Exp_Unst is\n                    Bod           => Bod,\n                    Lev           => L,\n                    Reachable     => In_Synchronized_Unit (E),\n-\n-                   --  Subprograms declared in tasks and protected types are\n-                   --  reachable and cannot be eliminated.\n-\n                    Uplevel_Ref   => L,\n                    Declares_AREC => False,\n                    Uents         => No_Elist,\n@@ -1148,7 +1148,7 @@ package body Exp_Unst is\n                      return Skip;\n                   end if;\n \n-               --  Pragmas and component declarations can be ignored\n+               --  Pragmas and component declarations can be ignored.\n                --  Quantified expressions are expanded into explicit loops\n                --  and the original epression must be ignored.\n \n@@ -1383,10 +1383,10 @@ package body Exp_Unst is\n \n                         --  If this entity was marked reachable because it is\n                         --  in a task or protected type, there may not appear\n-                        --  to be any calls to it, which would normally adjust\n-                        --  the levels of the parent subprograms. So we need to\n-                        --  be sure that the uplevel reference of that entity\n-                        --  takes into account possible calls.\n+                        --  to be any calls to it, which would normally\n+                        --  adjust the levels of the parent subprograms.\n+                        --  So we need to be sure that the uplevel reference\n+                        --  of that entity takes into account possible calls.\n \n                         if In_Synchronized_Unit (SUBF.Ent)\n                           and then SUBT.Lev < SUBI.Uplevel_Ref\n@@ -1627,7 +1627,7 @@ package body Exp_Unst is\n       --  Loop through subprograms\n \n       Subp_Loop : declare\n-         Addr : constant Entity_Id := RTE (RE_Address);\n+         Addr : Entity_Id := Empty;\n \n       begin\n          for J in Subps_First .. Subps.Last loop\n@@ -1745,9 +1745,14 @@ package body Exp_Unst is\n \n                   begin\n                      --  Build list of component declarations for ARECnT\n+                     --  and load System.Address.\n \n                      Clist := Empty_List;\n \n+                     if No (Addr) then\n+                        Addr := RTE (RE_Address);\n+                     end if;\n+\n                      --  If we are in a subprogram that has a static link that\n                      --  is passed in (as indicated by ARECnF being defined),\n                      --  then include ARECnU : ARECmPT where ARECmPT comes from"}]}