{"sha": "bee39274cb9ffb5415ab50fa102673b0394d4f39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlMzkyNzRjYjlmZmI1NDE1YWI1MGZhMTAyNjczYjAzOTRkNGYzOQ==", "commit": {"author": {"name": "Michele Pezzutti", "email": "mpezz@tiscali.it", "date": "2018-11-18T18:32:26Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2018-11-18T18:32:26Z"}, "message": "PR libstdc++/83566 - cyl_bessel_j returns wrong result for x>1000\n\n2018-11-16  Michele Pezzutti <mpezz@tiscali.it>\n\t    Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR libstdc++/83566 - cyl_bessel_j returns wrong result for x>1000\n\tfor high orders.\n\t* include/tr1/bessel_function.tcc: Perform no fewer than nu/2 iterations\n\tof the asymptotic series (nu is the Bessel order).\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t09_cyl_bessel_j/check_value.cc: Add tests at nu=100, 1000<=x<=2000.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\t\n\t11_cyl_neumann/check_value.cc: Ditto.\n\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: Ditto.\n\t* testsuite/special_functions/10_cyl_neumann/check_value.cc: Ditto.\n\n\nCo-Authored-By: Edward Smith-Rowland <3dw4rd@verizon.net>\n\nFrom-SVN: r266252", "tree": {"sha": "3a8f7894243809aefb24e4e78105559254d4f539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a8f7894243809aefb24e4e78105559254d4f539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bee39274cb9ffb5415ab50fa102673b0394d4f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee39274cb9ffb5415ab50fa102673b0394d4f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee39274cb9ffb5415ab50fa102673b0394d4f39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee39274cb9ffb5415ab50fa102673b0394d4f39/comments", "author": {"login": "micpez", "id": 45465437, "node_id": "MDQ6VXNlcjQ1NDY1NDM3", "avatar_url": "https://avatars.githubusercontent.com/u/45465437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micpez", "html_url": "https://github.com/micpez", "followers_url": "https://api.github.com/users/micpez/followers", "following_url": "https://api.github.com/users/micpez/following{/other_user}", "gists_url": "https://api.github.com/users/micpez/gists{/gist_id}", "starred_url": "https://api.github.com/users/micpez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micpez/subscriptions", "organizations_url": "https://api.github.com/users/micpez/orgs", "repos_url": "https://api.github.com/users/micpez/repos", "events_url": "https://api.github.com/users/micpez/events{/privacy}", "received_events_url": "https://api.github.com/users/micpez/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb40e8071e0fa1a86183f6b97ebeb3355e5e1722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb40e8071e0fa1a86183f6b97ebeb3355e5e1722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb40e8071e0fa1a86183f6b97ebeb3355e5e1722"}], "stats": {"total": 203, "additions": 192, "deletions": 11}, "files": [{"sha": "56c1199f381121124a72f7c0d12af51b32daa0ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bee39274cb9ffb5415ab50fa102673b0394d4f39", "patch": "@@ -1,3 +1,17 @@\n+2018-11-18  Michele Pezzutti <mpezz@tiscali.it>\n+\t    Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR libstdc++/83566 - cyl_bessel_j returns wrong result for x>1000\n+\tfor high orders.\n+\t* include/tr1/bessel_function.tcc: Perform no fewer than nu/2 iterations\n+\tof the asymptotic series (nu is the Bessel order).\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t09_cyl_bessel_j/check_value.cc: Add tests at nu=100, 1000<=x<=2000.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\t\n+\t11_cyl_neumann/check_value.cc: Ditto.\n+\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: Ditto.\n+\t* testsuite/special_functions/10_cyl_neumann/check_value.cc: Ditto.\n+\n 2018-11-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tImplement std::pmr::synchronized_pool_resource"}, {"sha": "7b94b84a6ea9c8a09aae65e436771fe601756639", "filename": "libstdc++-v3/include/tr1/bessel_function.tcc", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fbessel_function.tcc?ref=bee39274cb9ffb5415ab50fa102673b0394d4f39", "patch": "@@ -27,6 +27,10 @@\n  *  Do not attempt to use it directly. @headername{tr1/cmath}\n  */\n \n+/* __cyl_bessel_jn_asymp adapted from GNU GSL version 2.4 specfunc/bessel_j.c\n+ * Copyright (C) 1996-2003 Gerard Jungman\n+ */\n+\n //\n // ISO C++ 14882 TR1: 5.2  Special functions\n //\n@@ -358,24 +362,51 @@ namespace tr1\n     void\n     __cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp & __Jnu, _Tp & __Nnu)\n     {\n-      const _Tp __mu   = _Tp(4) * __nu * __nu;\n-      const _Tp __mum1 = __mu - _Tp(1);\n-      const _Tp __mum9 = __mu - _Tp(9);\n-      const _Tp __mum25 = __mu - _Tp(25);\n-      const _Tp __mum49 = __mu - _Tp(49);\n-      const _Tp __xx = _Tp(64) * __x * __x;\n-      const _Tp __P = _Tp(1) - __mum1 * __mum9 / (_Tp(2) * __xx)\n-                    * (_Tp(1) - __mum25 * __mum49 / (_Tp(12) * __xx));\n-      const _Tp __Q = __mum1 / (_Tp(8) * __x)\n-                    * (_Tp(1) - __mum9 * __mum25 / (_Tp(6) * __xx));\n+      const _Tp __mu = _Tp(4) * __nu * __nu;\n+      const _Tp __8x = _Tp(8) * __x;\n+\n+      _Tp __P = _Tp(0);\n+      _Tp __Q = _Tp(0);\n+\n+      _Tp __k = _Tp(0);\n+      _Tp __term = _Tp(1);\n+\n+      int __epsP = 0;\n+      int __epsQ = 0;\n+\n+      _Tp __eps = std::numeric_limits<_Tp>::epsilon();\n+\n+      do\n+        {\n+          __term *= (__k == 0\n+                     ? _Tp(1)\n+                     : -(__mu - (2 * __k - 1) * (2 * __k - 1)) / (__k * __8x));\n+\n+          __epsP = std::abs(__term) < __eps * std::abs(__P);\n+          __P += __term;\n+\n+          __k++;\n+\n+          __term *= (__mu - (2 * __k - 1) * (2 * __k - 1)) / (__k * __8x);\n+          __epsQ = std::abs(__term) < __eps * std::abs(__Q);\n+          __Q += __term;\n+\n+          if (__epsP && __epsQ && __k > (__nu / 2.))\n+            break;\n+\n+          __k++;\n+        }\n+      while (__k < 1000);\n \n       const _Tp __chi = __x - (__nu + _Tp(0.5L))\n-                            * __numeric_constants<_Tp>::__pi_2();\n+                             * __numeric_constants<_Tp>::__pi_2();\n+\n       const _Tp __c = std::cos(__chi);\n       const _Tp __s = std::sin(__chi);\n \n       const _Tp __coef = std::sqrt(_Tp(2)\n                              / (__numeric_constants<_Tp>::__pi() * __x));\n+\n       __Jnu = __coef * (__c * __P - __s * __Q);\n       __Nnu = __coef * (__s * __P + __c * __Q);\n "}, {"sha": "7900af3c959547703da3112c1293b246aba80d06", "filename": "libstdc++-v3/testsuite/special_functions/08_cyl_bessel_j/check_value.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc?ref=bee39274cb9ffb5415ab50fa102673b0394d4f39", "patch": "@@ -698,6 +698,39 @@ data026[21] =\n };\n const double toler026 = 1.0000000000000006e-11;\n \n+// Test data for nu=100.0000000000000000\n+// max(|f - f_GSL|): 3.9438938226332709e-14 at index 19\n+// max(|f - f_GSL| / |f_GSL|): 2.0193411077170867e-11\n+// mean(f - f_GSL): 1.6682360684660055e-15\n+// variance(f - f_GSL): 5.3274331668346898e-28\n+// stddev(f - f_GSL): 2.3081232997469372e-14\n+const testcase_cyl_bessel_j<double>\n+data027[21] =\n+{\n+  {  1.1676135007789573e-02, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n+  { -1.1699854778025796e-02, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n+  { -2.2801483405083697e-02, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n+  { -1.6973500787373915e-02, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n+  { -1.4154528803481308e-03, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n+  {  1.3333726584495232e-02, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n+  {  1.9802562020148559e-02, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n+  {  1.6129771279838816e-02, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n+  {  5.3753369281536031e-03, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n+  { -6.9238868725645785e-03, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n+  { -1.5487871720069789e-02, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n+  { -1.7275186717671070e-02, 100.0000000000000000, 2100.0000000000000000, 0.0 },\n+  { -1.2233030525173150e-02, 100.0000000000000000, 2200.0000000000000000, 0.0 },\n+  { -2.8518508672241900e-03, 100.0000000000000000, 2300.0000000000000000, 0.0 },\n+  {  7.0784372270289329e-03, 100.0000000000000000, 2400.0000000000000000, 0.0 },\n+  {  1.3955367586928166e-02, 100.0000000000000000, 2500.0000000000000000, 0.0 },\n+  {  1.5574059842493392e-02, 100.0000000000000000, 2600.0000000000000000, 0.0 },\n+  {  1.1718043044647556e-02, 100.0000000000000000, 2700.0000000000000000, 0.0 },\n+  {  4.0320953231285607e-03, 100.0000000000000000, 2800.0000000000000000, 0.0 },\n+  { -4.6895111783053977e-03, 100.0000000000000000, 2900.0000000000000000, 0.0 },\n+  { -1.1507715400035966e-02, 100.0000000000000000, 3000.0000000000000000, 0.0 },\n+};\n+const double toler027 = 1.0000000000000006e-10;\n+\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_bessel_j<Ret> (&data)[Num], Ret toler)\n@@ -748,5 +781,6 @@ main()\n   test(data024, toler024);\n   test(data025, toler025);\n   test(data026, toler026);\n+  test(data027, toler027);\n   return 0;\n }"}, {"sha": "835ce8cd676ad2fd1523e77fc0de6666cbf9e498", "filename": "libstdc++-v3/testsuite/special_functions/10_cyl_neumann/check_value.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc?ref=bee39274cb9ffb5415ab50fa102673b0394d4f39", "patch": "@@ -742,6 +742,39 @@ data028[20] =\n };\n const double toler028 = 1.0000000000000006e-11;\n \n+// Test data for nu=100.0000000000000000\n+// max(|f - f_GSL|): 3.9022387751663778e-14 at index 16\n+// max(|f - f_GSL| / |f_GSL|): 2.4760677072012703e-11\n+// mean(f - f_GSL): 3.6878362466971231e-16\n+// variance(f - f_GSL): 5.0707962306468580e-28\n+// stddev(f - f_GSL): 2.2518428521206487e-14\n+const testcase_cyl_neumann<double>\n+data029[21] =\n+{\n+  { -2.2438688257729954e-02, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n+  { -2.1077595159819992e-02, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n+  { -3.5299439206692585e-03, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n+  {  1.4250019326536615e-02, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n+  {  2.1304679089735663e-02, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n+  {  1.5734395077905267e-02, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n+  {  2.5544633636137774e-03, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n+  { -1.0722045524849367e-02, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n+  { -1.8036919243226864e-02, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n+  { -1.6958415593079763e-02, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n+  { -8.8788704566276667e-03, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n+  {  2.2504407108413179e-03, 100.0000000000000000, 2100.0000000000000000, 0.0 },\n+  {  1.1833215246712251e-02, 100.0000000000000000, 2200.0000000000000000, 0.0 },\n+  {  1.6398784536343945e-02, 100.0000000000000000, 2300.0000000000000000, 0.0 },\n+  {  1.4675984403642338e-02, 100.0000000000000000, 2400.0000000000000000, 0.0 },\n+  {  7.7523920451654229e-03, 100.0000000000000000, 2500.0000000000000000, 0.0 },\n+  { -1.5759822576003489e-03, 100.0000000000000000, 2600.0000000000000000, 0.0 },\n+  { -9.9314877404787089e-03, 100.0000000000000000, 2700.0000000000000000, 0.0 },\n+  { -1.4534495161704743e-02, 100.0000000000000000, 2800.0000000000000000, 0.0 },\n+  { -1.4059273497237509e-02, 100.0000000000000000, 2900.0000000000000000, 0.0 },\n+  { -8.9385158149605185e-03, 100.0000000000000000, 3000.0000000000000000, 0.0 },\n+};\n+const double toler029 = 1.0000000000000006e-10;\n+\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_neumann<Ret> (&data)[Num], Ret toler)\n@@ -794,5 +827,6 @@ main()\n   test(data026, toler026);\n   test(data027, toler027);\n   test(data028, toler028);\n+  test(data029, toler029);\n   return 0;\n }"}, {"sha": "ee587cbad86b087db275e2cce49f2ef7854fd0e9", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/09_cyl_bessel_j/check_value.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc?ref=bee39274cb9ffb5415ab50fa102673b0394d4f39", "patch": "@@ -698,6 +698,39 @@ data026[21] =\n };\n const double toler026 = 1.0000000000000006e-11;\n \n+// Test data for nu=100.0000000000000000\n+// max(|f - f_GSL|): 3.9438938226332709e-14 at index 19\n+// max(|f - f_GSL| / |f_GSL|): 2.0193411077170867e-11\n+// mean(f - f_GSL): 1.6682360684660055e-15\n+// variance(f - f_GSL): 5.3274331668346898e-28\n+// stddev(f - f_GSL): 2.3081232997469372e-14\n+const testcase_cyl_bessel_j<double>\n+data027[21] =\n+{\n+  {  1.1676135007789573e-02, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n+  { -1.1699854778025796e-02, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n+  { -2.2801483405083697e-02, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n+  { -1.6973500787373915e-02, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n+  { -1.4154528803481308e-03, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n+  {  1.3333726584495232e-02, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n+  {  1.9802562020148559e-02, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n+  {  1.6129771279838816e-02, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n+  {  5.3753369281536031e-03, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n+  { -6.9238868725645785e-03, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n+  { -1.5487871720069789e-02, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n+  { -1.7275186717671070e-02, 100.0000000000000000, 2100.0000000000000000, 0.0 },\n+  { -1.2233030525173150e-02, 100.0000000000000000, 2200.0000000000000000, 0.0 },\n+  { -2.8518508672241900e-03, 100.0000000000000000, 2300.0000000000000000, 0.0 },\n+  {  7.0784372270289329e-03, 100.0000000000000000, 2400.0000000000000000, 0.0 },\n+  {  1.3955367586928166e-02, 100.0000000000000000, 2500.0000000000000000, 0.0 },\n+  {  1.5574059842493392e-02, 100.0000000000000000, 2600.0000000000000000, 0.0 },\n+  {  1.1718043044647556e-02, 100.0000000000000000, 2700.0000000000000000, 0.0 },\n+  {  4.0320953231285607e-03, 100.0000000000000000, 2800.0000000000000000, 0.0 },\n+  { -4.6895111783053977e-03, 100.0000000000000000, 2900.0000000000000000, 0.0 },\n+  { -1.1507715400035966e-02, 100.0000000000000000, 3000.0000000000000000, 0.0 },\n+};\n+const double toler027 = 1.0000000000000006e-10;\n+\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_bessel_j<Ret> (&data)[Num], Ret toler)\n@@ -748,5 +781,6 @@ main()\n   test(data024, toler024);\n   test(data025, toler025);\n   test(data026, toler026);\n+  test(data027, toler027);\n   return 0;\n }"}, {"sha": "d73f6a604fe11af46a5e3d5299186ca6b6c4e9d6", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/11_cyl_neumann/check_value.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee39274cb9ffb5415ab50fa102673b0394d4f39/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc?ref=bee39274cb9ffb5415ab50fa102673b0394d4f39", "patch": "@@ -742,6 +742,39 @@ data028[20] =\n };\n const double toler028 = 1.0000000000000006e-11;\n \n+// Test data for nu=100.0000000000000000\n+// max(|f - f_GSL|): 3.9022387751663778e-14 at index 16\n+// max(|f - f_GSL| / |f_GSL|): 2.4760677072012703e-11\n+// mean(f - f_GSL): 3.6878362466971231e-16\n+// variance(f - f_GSL): 5.0707962306468580e-28\n+// stddev(f - f_GSL): 2.2518428521206487e-14\n+const testcase_cyl_neumann<double>\n+data029[21] =\n+{\n+  { -2.2438688257729954e-02, 100.0000000000000000, 1000.0000000000000000, 0.0 },\n+  { -2.1077595159819992e-02, 100.0000000000000000, 1100.0000000000000000, 0.0 },\n+  { -3.5299439206692585e-03, 100.0000000000000000, 1200.0000000000000000, 0.0 },\n+  {  1.4250019326536615e-02, 100.0000000000000000, 1300.0000000000000000, 0.0 },\n+  {  2.1304679089735663e-02, 100.0000000000000000, 1400.0000000000000000, 0.0 },\n+  {  1.5734395077905267e-02, 100.0000000000000000, 1500.0000000000000000, 0.0 },\n+  {  2.5544633636137774e-03, 100.0000000000000000, 1600.0000000000000000, 0.0 },\n+  { -1.0722045524849367e-02, 100.0000000000000000, 1700.0000000000000000, 0.0 },\n+  { -1.8036919243226864e-02, 100.0000000000000000, 1800.0000000000000000, 0.0 },\n+  { -1.6958415593079763e-02, 100.0000000000000000, 1900.0000000000000000, 0.0 },\n+  { -8.8788704566276667e-03, 100.0000000000000000, 2000.0000000000000000, 0.0 },\n+  {  2.2504407108413179e-03, 100.0000000000000000, 2100.0000000000000000, 0.0 },\n+  {  1.1833215246712251e-02, 100.0000000000000000, 2200.0000000000000000, 0.0 },\n+  {  1.6398784536343945e-02, 100.0000000000000000, 2300.0000000000000000, 0.0 },\n+  {  1.4675984403642338e-02, 100.0000000000000000, 2400.0000000000000000, 0.0 },\n+  {  7.7523920451654229e-03, 100.0000000000000000, 2500.0000000000000000, 0.0 },\n+  { -1.5759822576003489e-03, 100.0000000000000000, 2600.0000000000000000, 0.0 },\n+  { -9.9314877404787089e-03, 100.0000000000000000, 2700.0000000000000000, 0.0 },\n+  { -1.4534495161704743e-02, 100.0000000000000000, 2800.0000000000000000, 0.0 },\n+  { -1.4059273497237509e-02, 100.0000000000000000, 2900.0000000000000000, 0.0 },\n+  { -8.9385158149605185e-03, 100.0000000000000000, 3000.0000000000000000, 0.0 },\n+};\n+const double toler029 = 1.0000000000000006e-10;\n+\n template<typename Ret, unsigned int Num>\n   void\n   test(const testcase_cyl_neumann<Ret> (&data)[Num], Ret toler)\n@@ -794,5 +827,6 @@ main()\n   test(data026, toler026);\n   test(data027, toler027);\n   test(data028, toler028);\n+  test(data029, toler029);\n   return 0;\n }"}]}