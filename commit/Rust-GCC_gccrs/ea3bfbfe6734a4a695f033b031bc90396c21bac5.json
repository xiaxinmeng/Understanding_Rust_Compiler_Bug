{"sha": "ea3bfbfe6734a4a695f033b031bc90396c21bac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzYmZiZmU2NzM0YTRhNjk1ZjAzM2IwMzFiYzkwMzk2YzIxYmFjNQ==", "commit": {"author": {"name": "Jerry Quinn", "email": "jquinn@nortelnetworks.com", "date": "1999-04-26T00:54:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-26T00:54:50Z"}, "message": "pa.h (architecture_type): New enum.\n\n        * pa.h (architecture_type): New enum.\n        (pa_arch_string, pa_arch): Declare.\n        (MASK_PA_10, MASK_PA_20): New flags.\n        (TARGET_SWITCHES): Add pa-risc-2-0.  Update docs for PA1.0 codegen.\n        (TARGET_OPTIONS): Add -march= option.\n        * pa.c (pa_arch, pa_arch_string):  Define.\n        (override_options):  Set them.\n        * pa/pa-hpux10.h (ASM_FILE_START):  Output LEVEL 2.0 asm directive for\n        2.0 architecture.\n        * invoke.texi (Option Summary, HPPA Options):  Document new\n        architecture flags.\n\nFrom-SVN: r26637", "tree": {"sha": "175437abc42291e0d1dd27e42d9031e6658220e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/175437abc42291e0d1dd27e42d9031e6658220e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea3bfbfe6734a4a695f033b031bc90396c21bac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3bfbfe6734a4a695f033b031bc90396c21bac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3bfbfe6734a4a695f033b031bc90396c21bac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3bfbfe6734a4a695f033b031bc90396c21bac5/comments", "author": null, "committer": null, "parents": [{"sha": "d9464cb0ebd436b29172aaa81047b54702ff260f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9464cb0ebd436b29172aaa81047b54702ff260f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9464cb0ebd436b29172aaa81047b54702ff260f"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "8891d2a9e6fd93ebc6aa1da0bd49ce80e1d397f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea3bfbfe6734a4a695f033b031bc90396c21bac5", "patch": "@@ -23,6 +23,18 @@ Mon Apr 26 01:02:34 1999  Nathan Sidwell  <nathan@acm.org>\n \n Mon Apr 26 00:58:54 1999  Jerry Quinn <jquinn@nortelnetworks.com>\n \n+\t* pa.h (architecture_type): New enum.\n+\t(pa_arch_string, pa_arch): Declare.\n+\t(MASK_PA_10, MASK_PA_20): New flags.\n+\t(TARGET_SWITCHES): Add pa-risc-2-0.  Update docs for PA1.0 codegen.\n+\t(TARGET_OPTIONS): Add -march= option.\n+\t* pa.c (pa_arch, pa_arch_string):  Define.\n+\t(override_options):  Set them.\n+\t* pa/pa-hpux10.h (ASM_FILE_START):  Output LEVEL 2.0 asm directive for\n+\t2.0 architecture. \n+\t* invoke.texi (Option Summary, HPPA Options):  Document new\n+\tarchitecture flags.\n+\n \t* pa/pa-hpux.h, pa/pa-hpux10.h, pa/pa-hpux9.h, pa/pa-osf.h, pa.h,\n \tpa.c, pa.md, configure.in, configure: Replace TARGET_SNAKE by\n \tTARGET_PA_11 and MASK_SNAKE by MASK_PA_11."}, {"sha": "183020c2a513f9237a882f8146ef1a3aa09da7c5", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=ea3bfbfe6734a4a695f033b031bc90396c21bac5", "patch": "@@ -46,7 +46,9 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE) \\\n do {  \\\n-     if (TARGET_PA_11) \\\n+     if (TARGET_PA_20) \\\n+       fputs(\"\\t.LEVEL 2.0\\n\", FILE); \\\n+     else if (TARGET_PA_11) \\\n        fputs(\"\\t.LEVEL 1.1\\n\", FILE); \\\n      else \\\n        fputs(\"\\t.LEVEL 1.0\\n\", FILE); \\"}, {"sha": "fa1287e55e5f4faa30321f1ab7b256e1fea1e565", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ea3bfbfe6734a4a695f033b031bc90396c21bac5", "patch": "@@ -58,6 +58,12 @@ enum processor_type pa_cpu;\n /* String to hold which cpu we are scheduling for.  */\n char *pa_cpu_string;\n \n+/* Which architecture we are generating code for.  */\n+enum architecture_type pa_arch;\n+\n+/* String to hold which architecture we are generating code for.  */\n+char *pa_arch_string;\n+\n /* Set by the FUNCTION_PROFILER macro. */\n int hp_profile_labelno;\n \n@@ -128,6 +134,31 @@ override_options ()\n       warning (\"Unknown -mschedule= option (%s).\\nValid options are 700, 7100, 7100LC, 7200, and 8000\\n\", pa_cpu_string);\n     }\n \n+  /* Set the instruction set architecture.  */\n+  if (pa_arch_string && ! strcmp (pa_arch_string, \"1.0\"))\n+    {\n+      pa_arch_string = \"1.0\";\n+      pa_arch = ARCHITECTURE_10;\n+      target_flags &= ~(MASK_PA_11 | MASK_PA_20);\n+    }\n+  else if (pa_arch_string && ! strcmp (pa_arch_string, \"1.1\"))\n+    {\n+      pa_arch_string = \"1.1\";\n+      pa_arch = ARCHITECTURE_11;\n+      target_flags &= ~MASK_PA_20;\n+      target_flags |= MASK_PA_11;\n+    }\n+  else if (pa_arch_string && ! strcmp (pa_arch_string, \"2.0\"))\n+    {\n+      pa_arch_string = \"2.0\";\n+      pa_arch = ARCHITECTURE_20;\n+      target_flags |= MASK_PA_11 | MASK_PA_20;\n+    }\n+  else if (pa_arch_string)\n+    {\n+      warning (\"Unknown -march= option (%s).\\nValid options are 1.0, 1.1, and 2.0\\n\", pa_arch_string);\n+    }\n+\n   if (flag_pic && TARGET_PORTABLE_RUNTIME)\n     {\n       warning (\"PIC code generation is not supported in the portable runtime model\\n\");"}, {"sha": "ca744c8e795fa5fb9c4581314771968335cf90a0", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=ea3bfbfe6734a4a695f033b031bc90396c21bac5", "patch": "@@ -60,6 +60,19 @@ extern enum processor_type pa_cpu;\n    : pa_cpu == PROCESSOR_8000 ? 4 \\\n    : 2)\n \n+/* Which architecture to generate code for.  */\n+\n+enum architecture_type\n+{\n+  ARCHITECTURE_10,\n+  ARCHITECTURE_11,\n+  ARCHITECTURE_20\n+};\n+\n+/* For -march= option.  */\n+extern char *pa_arch_string;\n+extern enum architecture_type pa_arch;\n+\n /* Print subsidiary information on the compiler version in use.  */\n \n #define TARGET_VERSION fputs (\" (hppa)\", stderr);\n@@ -137,6 +150,12 @@ extern int target_flags;\n #define MASK_BIG_SWITCH 2048\n #define TARGET_BIG_SWITCH (target_flags & MASK_BIG_SWITCH)\n \n+\n+/* Generate code for the HPPA 2.0 architecture.  TARGET_PA_11 should also be\n+   true when this is true.  */\n+#define MASK_PA_20 4096\n+#define TARGET_PA_20 (target_flags & MASK_PA_20)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -145,9 +164,10 @@ extern int target_flags;\n \n #define TARGET_SWITCHES \\\n   {{\"snake\", MASK_PA_11, \"Generate PA1.1 code\"},\t\t\t\\\n-   {\"nosnake\", -MASK_PA_11, \"Do not generate PA1.1 code\"},\t\t\\\n-   {\"pa-risc-1-0\", -MASK_PA_11, \"Do not generate PA1.1 code\"},\t\t\\\n+   {\"nosnake\", -(MASK_PA_11 | MASK_PA_20), \"Generate PA1.0 code\"},\t\t\\\n+   {\"pa-risc-1-0\", -(MASK_PA_11 | MASK_PA_20), \"Generate PA1.0 code\"},\t\t\\\n    {\"pa-risc-1-1\", MASK_PA_11, \"Generate PA1.1 code\"},\t\t\t\\\n+   {\"pa-risc-2-0\", MASK_PA_20, \"Generate PA2.0 code.  This option requires gas snapshot 19990413 or later\"},\t\t\t\\\n    {\"disable-fpregs\", MASK_DISABLE_FPREGS, \"Disable FP regs\"},\t\t\\\n    {\"no-disable-fpregs\", -MASK_DISABLE_FPREGS, \"Do not disable FP regs\"},\\\n    {\"no-space-regs\", MASK_NO_SPACE_REGS, \"Disable space regs\"},\t\t\\\n@@ -183,7 +203,8 @@ extern int target_flags;\n \n #define TARGET_OPTIONS\t\t\t\\\n {\t\t\t\t\t\\\n-  { \"schedule=\",\t&pa_cpu_string, \"Specify CPU for scheduling purposes\" }\\\n+  { \"schedule=\",\t&pa_cpu_string, \"Specify CPU for scheduling purposes\" },\\\n+  { \"arch=\",\t\t&pa_arch_string, \"Specify architecture for code generation.  Values are 1.0, 1.1, and 2.0.  2.0 requires gas snapshot 19990413 or later.\" }\\\n }\n \n #define OVERRIDE_OPTIONS override_options ()"}, {"sha": "201ae222a30fb3b86ba08b7f229080c0f7dbbe11", "filename": "gcc/invoke.texi", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3bfbfe6734a4a695f033b031bc90396c21bac5/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=ea3bfbfe6734a4a695f033b031bc90396c21bac5", "patch": "@@ -345,15 +345,16 @@ in the following sections.\n -malign-functions=@var{num} -mpreferred_stack_boundary=@var{num}\n \n @emph{HPPA Options}\n+-march=@var{architecture type}\n -mbig-switch  -mdisable-fpregs  -mdisable-indexing  \n -mfast-indirect-calls -mgas  -mjump-in-delay  \n -mlong-load-store  -mno-big-switch  -mno-disable-fpregs\n -mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas\n -mno-jump-in-delay  -mno-long-load-store  \n -mno-portable-runtime  -mno-soft-float  -mno-space  \n -mno-space-regs  -msoft-float  -mpa-risc-1-0  \n--mpa-risc-1-1  -mportable-runtime\n--mschedule=@var{list}  -mspace  -mspace-regs\n+-mpa-risc-1-1  -mpa-risc-2-0 -mportable-runtime\n+-mschedule=@var{cpu type}  -mspace  -mspace-regs\n \n @emph{Intel 960 Options}\n -m@var{cpu type}  -masm-compat  -mclean-linkage\n@@ -5221,11 +5222,23 @@ may want to reduce the preferred alignment to\n These @samp{-m} options are defined for the HPPA family of computers:\n \n @table @code\n-@item -mpa-risc-1-0\n-Generate code for a PA 1.0 processor.\n+@item -march=@var{architecture type}\n+Generate code for the specified architecture.  The choices for\n+@var{architecture type} are @samp{1.0} for PA 1.0, @samp{1.1} for PA\n+1.1, and @samp{2.0} for PA 2.0 processors.  Refer to\n+@file{/usr/lib/sched.models} on an HP-UX system to determine the proper\n+architecture option for your machine.  Code compiled for lower numbered\n+architectures will run on higher numbered architectures, but not the\n+other way around.\n+\n+PA 2.0 support currently requires gas snapshot 19990413 or later.  The\n+next release of binutils (current is 2.9.1) will probably contain PA 2.0\n+support.  \n \n+@item -mpa-risc-1-0\n @item -mpa-risc-1-1\n-Generate code for a PA 1.1 processor.\n+@item -mpa-risc-2-0\n+Synonyms for -march=1.0, -march=1.1, and -march=2.0 respectively.\n \n @item -mbig-switch\n Generate code suitable for big switch tables.  Use this option only if"}]}