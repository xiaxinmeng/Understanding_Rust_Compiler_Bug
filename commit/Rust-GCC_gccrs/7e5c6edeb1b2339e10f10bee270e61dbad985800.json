{"sha": "7e5c6edeb1b2339e10f10bee270e61dbad985800", "node_id": "C_kwDOANBUbNoAKDdlNWM2ZWRlYjFiMjMzOWUxMGYxMGJlZTI3MGU2MWRiYWQ5ODU4MDA", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-28T22:26:43Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-28T22:26:43Z"}, "message": "PR middle-end/80270: ICE in extract_bit_field_1\n\nThis patch fixes PR middle-end/80270, an ICE-on-valid regression, where\nperforming a bitfield extraction on a variable explicitly stored in a\nhard register by the user causes a segmentation fault during RTL\nexpansion.  Nearly identical source code without the \"asm\" qualifier\ncompiles fine.  The point of divergence is in simplify_gen_subreg\nwhich tries to avoid creating non-trivial SUBREGs of hard registers,\nto avoid problems during register allocation.  This suggests the\nsimple solution proposed here, to copy hard registers to a new pseudo\nin extract_integral_bit_field, just before calling simplify_gen_subreg.\n\n2022-02-28  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ChangeLog\n\tPR middle-end/80270\n\t* expmed.cc (extract_integral_bit_field): If OP0 is a hard\n\tregister, copy it to a pseudo before calling simplify_gen_subreg.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/pr80270.c: New test case.", "tree": {"sha": "911a7daf527e95a1ee9e866ff1f3c5afd8840562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/911a7daf527e95a1ee9e866ff1f3c5afd8840562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e5c6edeb1b2339e10f10bee270e61dbad985800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5c6edeb1b2339e10f10bee270e61dbad985800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5c6edeb1b2339e10f10bee270e61dbad985800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5c6edeb1b2339e10f10bee270e61dbad985800/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec1b9ba2d7913fe5e9deacc8e55e7539262f5124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1b9ba2d7913fe5e9deacc8e55e7539262f5124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1b9ba2d7913fe5e9deacc8e55e7539262f5124"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "ed39c88bd044279113f46661608c53b8a69d81a1", "filename": "gcc/expmed.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c6edeb1b2339e10f10bee270e61dbad985800/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c6edeb1b2339e10f10bee270e61dbad985800/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=7e5c6edeb1b2339e10f10bee270e61dbad985800", "patch": "@@ -1975,6 +1975,10 @@ extract_integral_bit_field (rtx op0, opt_scalar_int_mode op0_mode,\n \t\t\t\t\t    unsignedp, reverse);\n \t  return convert_extracted_bit_field (target, mode, tmode, unsignedp);\n \t}\n+      /* If OP0 is a hard register, copy it to a pseudo before calling\n+\t simplify_gen_subreg.  */\n+      if (REG_P (op0) && HARD_REGISTER_P (op0))\n+\top0 = copy_to_reg (op0);\n       op0 = simplify_gen_subreg (word_mode, op0, op0_mode.require (),\n \t\t\t\t bitnum / BITS_PER_WORD * UNITS_PER_WORD);\n       op0_mode = word_mode;"}, {"sha": "89e9c33d090a7fad1ee01ddb14768c32bf9cf304", "filename": "gcc/testsuite/gcc.target/i386/pr80270.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5c6edeb1b2339e10f10bee270e61dbad985800/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80270.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5c6edeb1b2339e10f10bee270e61dbad985800/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80270.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80270.c?ref=7e5c6edeb1b2339e10f10bee270e61dbad985800", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+typedef int v8 __attribute__((vector_size(8)));\n+struct S1 {\n+  v8 s1f;\n+};\n+struct S2 {\n+  struct S1 s2f1;\n+  v8 s2f2;\n+};\n+\n+extern void foo(int);\n+\n+void bar() {\n+  int tmp, i = 3;\n+  register struct S2 b asm(\"xmm0\");\n+  tmp = b.s2f1.s1f[i];\n+  foo(tmp);\n+}\n+"}]}