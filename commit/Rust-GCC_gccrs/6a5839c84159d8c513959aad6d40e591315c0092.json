{"sha": "6a5839c84159d8c513959aad6d40e591315c0092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE1ODM5Yzg0MTU5ZDhjNTEzOTU5YWFkNmQ0MGU1OTEzMTVjMDA5Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-01-23T17:17:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-01-23T17:17:04Z"}, "message": "re PR libstdc++/59872 (Cannot move std::map with move-only mapped_type)\n\n\tPR libstdc++/59872\n\t* include/bits/stl_map.h (map::operator=(map&&)): Fix comment.\n\t* include/bits/stl_multimap.h (multimap::operator=(multimap&&)):\n\tLikewise.\n\t* include/bits/stl_multiset.h (multiset::operator=(multiset&&)):\n\tLikewise.\n\t* include/bits/stl_set.h (set::operator=(set&&)): Likewise.\n\t* include/bits/stl_tree.h (_Rb_tree::_M_move_data): New overloaded\n\tfunctions to perform moving or copying of elements from rvalue tree.\n\t(_Rb_tree::_Rb_tree(_Rb_tree&&)): Use _M_move_data.\n\t(_Rb_tree::_Rb_tree(_Rb_tree&&, _Node_allocator&&)): Likewise.\n\t* testsuite/23_containers/map/59872.cc: New.\n\t* testsuite/23_containers/map/56613.cc: Remove duplicate include.\n\nFrom-SVN: r206994", "tree": {"sha": "47cf2c8686043d9391364d3de8bf7968d7a53e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47cf2c8686043d9391364d3de8bf7968d7a53e60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a5839c84159d8c513959aad6d40e591315c0092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a5839c84159d8c513959aad6d40e591315c0092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a5839c84159d8c513959aad6d40e591315c0092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a5839c84159d8c513959aad6d40e591315c0092/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0f1fc8e4414c655d03febbb63536ab9225e250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0f1fc8e4414c655d03febbb63536ab9225e250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0f1fc8e4414c655d03febbb63536ab9225e250"}], "stats": {"total": 159, "additions": 113, "deletions": 46}, "files": [{"sha": "f5cfe018a924b91f8d79a0e6e9213c725725ace3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -3,6 +3,20 @@\n \t* doc/xml/faq.xml (a-how_to_set_paths): Expand FAQ answer.\n \t* doc/xml/manual/abi.xml (abi.versioning.history): Correct symver.\n \n+\tPR libstdc++/59872\n+\t* include/bits/stl_map.h (map::operator=(map&&)): Fix comment.\n+\t* include/bits/stl_multimap.h (multimap::operator=(multimap&&)):\n+\tLikewise.\n+\t* include/bits/stl_multiset.h (multiset::operator=(multiset&&)):\n+\tLikewise.\n+\t* include/bits/stl_set.h (set::operator=(set&&)): Likewise.\n+\t* include/bits/stl_tree.h (_Rb_tree::_M_move_data): New overloaded\n+\tfunctions to perform moving or copying of elements from rvalue tree.\n+\t(_Rb_tree::_Rb_tree(_Rb_tree&&)): Use _M_move_data.\n+\t(_Rb_tree::_Rb_tree(_Rb_tree&&, _Node_allocator&&)): Likewise.\n+\t* testsuite/23_containers/map/59872.cc: New.\n+\t* testsuite/23_containers/map/56613.cc: Remove duplicate include.\n+\n 2014-01-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_deque.h (_Deque_impl): Move comment."}, {"sha": "fa121e2d9a37231e492753e743c459ef2c57bcf2", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -301,8 +301,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Map move assignment operator.\n        *  @param  __x  A %map of identical element and allocator types.\n        *\n-       *  The contents of @a __x are moved into this map (without copying).\n-       *  @a __x is a valid, but unspecified %map.\n+       *  The contents of @a __x are moved into this map (without copying\n+       *  if the allocators compare equal or get moved on assignment).\n+       *  Afterwards @a __x is in a valid, but unspecified state.\n        */\n       map&\n       operator=(map&& __x) noexcept(_Alloc_traits::_S_nothrow_move())"}, {"sha": "e4575c15da9ced6a9cddf780b8a469792aa69e42", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -295,8 +295,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Multimap move assignment operator.\n        *  @param  __x  A %multimap of identical element and allocator types.\n        *\n-       *  The contents of @a __x are moved into this multimap (without copying).\n-       *  @a __x is a valid, but unspecified multimap.\n+       *  The contents of @a __x are moved into this multimap (without copying\n+       *  if the allocators compare equal or get moved on assignment).\n+       *  Afterwards @a __x is in a valid, but unspecified state.\n        */\n       multimap&\n       operator=(multimap&& __x) noexcept(_Alloc_traits::_S_nothrow_move())"}, {"sha": "6d71c1b862133fc81f30a8c0a3771c97437c2d3f", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -267,9 +267,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Multiset move assignment operator.\n        *  @param  __x  A %multiset of identical element and allocator types.\n        *\n-       *  The contents of @a __x are moved into this %multiset\n-       *  (without copying).  @a __x is a valid, but unspecified\n-       *  %multiset.\n+       *  The contents of @a __x are moved into this %multiset (without\n+       *  copying if the allocators compare equal or get moved on assignment).\n+       *  Afterwards @a __x is in a valid, but unspecified state.\n        */\n       multiset&\n       operator=(multiset&& __x) noexcept(_Alloc_traits::_S_nothrow_move())"}, {"sha": "3a391545ec80b18e32f105bbc4c7700c17e22d76", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -271,8 +271,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief %Set move assignment operator.\n        *  @param __x  A %set of identical element and allocator types.\n        *\n-       *  The contents of @a __x are moved into this %set (without copying).\n-       *  @a __x is a valid, but unspecified %set.\n+       *  The contents of @a __x are moved into this %set (without copying\n+       *  if the allocators compare equal or get moved on assignment).\n+       *  Afterwards @a __x is in a valid, but unspecified state.\n        */\n       set&\n       operator=(set&& __x) noexcept(_Alloc_traits::_S_nothrow_move())"}, {"sha": "d24b1f750bc39510077a47ebd0defb5f944dcaf3", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -698,8 +698,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       _Rb_tree(_Rb_tree&& __x)\n-      : _Rb_tree(std::move(__x), std::move(__x._M_get_Node_allocator()))\n-      { }\n+      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())\n+      {\n+\tif (__x._M_root() != 0)\n+\t  _M_move_data(__x, std::true_type());\n+      }\n \n       _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)\n       : _Rb_tree(std::move(__x), _Node_allocator(__a))\n@@ -948,6 +951,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       bool\n       _M_move_assign(_Rb_tree&);\n+\n+    private:\n+      // Move elements from container with equal allocator.\n+      void\n+      _M_move_data(_Rb_tree&, std::true_type);\n+\n+      // Move elements from container with possibly non-equal allocator,\n+      // which might result in a copy not a move.\n+      void\n+      _M_move_data(_Rb_tree&, std::false_type);\n #endif\n     };\n \n@@ -1013,30 +1026,44 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)\n     : _M_impl(__x._M_impl._M_key_compare, std::move(__a))\n     {\n+      using __eq = integral_constant<bool, _Alloc_traits::_S_always_equal()>;\n       if (__x._M_root() != 0)\n-\t{\n-\t  if (!_Alloc_traits::_S_always_equal()\n-\t      && __x._M_get_Node_allocator() != __a)\n-\t    {\n-\t      _M_root() = _M_copy(__x._M_begin(), _M_end());\n-\t      _M_leftmost() = _S_minimum(_M_root());\n-\t      _M_rightmost() = _S_maximum(_M_root());\n-\t      _M_impl._M_node_count = __x._M_impl._M_node_count;\n-\t    }\n-\t  else\n-\t    {\n-\t      _M_root() = __x._M_root();\n-\t      _M_leftmost() = __x._M_leftmost();\n-\t      _M_rightmost() = __x._M_rightmost();\n-\t      _M_root()->_M_parent = _M_end();\n+\t_M_move_data(__x, __eq());\n+    }\n \n-\t      __x._M_root() = 0;\n-\t      __x._M_leftmost() = __x._M_end();\n-\t      __x._M_rightmost() = __x._M_end();\n+  template<typename _Key, typename _Val, typename _KeyOfValue,\n+           typename _Compare, typename _Alloc>\n+    void\n+    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n+    _M_move_data(_Rb_tree& __x, std::true_type)\n+    {\n+      _M_root() = __x._M_root();\n+      _M_leftmost() = __x._M_leftmost();\n+      _M_rightmost() = __x._M_rightmost();\n+      _M_root()->_M_parent = _M_end();\n \n-\t      this->_M_impl._M_node_count = __x._M_impl._M_node_count;\n-\t      __x._M_impl._M_node_count = 0;\n-\t    }\n+      __x._M_root() = 0;\n+      __x._M_leftmost() = __x._M_end();\n+      __x._M_rightmost() = __x._M_end();\n+\n+      this->_M_impl._M_node_count = __x._M_impl._M_node_count;\n+      __x._M_impl._M_node_count = 0;\n+    }\n+\n+  template<typename _Key, typename _Val, typename _KeyOfValue,\n+           typename _Compare, typename _Alloc>\n+    void\n+    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n+    _M_move_data(_Rb_tree& __x, std::false_type)\n+    {\n+      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())\n+\t  _M_move_data(__x, std::true_type());\n+      else\n+\t{\n+\t  _M_root() = _M_copy(__x._M_begin(), _M_end());\n+\t  _M_leftmost() = _S_minimum(_M_root());\n+\t  _M_rightmost() = _S_maximum(_M_root());\n+\t  _M_impl._M_node_count = __x._M_impl._M_node_count;\n \t}\n     }\n \n@@ -1052,19 +1079,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  clear();\n \t  if (__x._M_root() != 0)\n-\t    {\n-\t      _M_root() = __x._M_root();\n-\t      _M_leftmost() = __x._M_leftmost();\n-\t      _M_rightmost() = __x._M_rightmost();\n-\t      _M_root()->_M_parent = _M_end();\n-\n-\t      __x._M_root() = 0;\n-\t      __x._M_leftmost() = __x._M_end();\n-\t      __x._M_rightmost() = __x._M_end();\n-\n-\t      this->_M_impl._M_node_count = __x._M_impl._M_node_count;\n-\t      __x._M_impl._M_node_count = 0;\n-\t    }\n+\t    _M_move_data(__x, std::true_type());\n \t  if (_Alloc_traits::_S_propagate_on_move_assign())\n \t    std::__alloc_on_move(_M_get_Node_allocator(),\n \t\t\t\t __x._M_get_Node_allocator());"}, {"sha": "6ef249082357ab691a82632ea5821c0e9098a558", "filename": "libstdc++-v3/testsuite/23_containers/map/56613.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F56613.cc?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -24,7 +24,6 @@\n // { dg-options \"-std=gnu++11\" }\n \n // libstdc++/56613\n-#include <map>\n \n // A conforming C++03 allocator, should still work in C++11 mode.\n template<typename T>"}, {"sha": "be8413bfd387a9d71fe3b4ed47587f4b88839d73", "filename": "libstdc++-v3/testsuite/23_containers/map/59872.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F59872.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a5839c84159d8c513959aad6d40e591315c0092/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F59872.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F59872.cc?ref=6a5839c84159d8c513959aad6d40e591315c0092", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// libstdc++/59872\n+\n+#include <map>\n+\n+struct MoveOnly\n+{\n+    MoveOnly() = default;\n+    MoveOnly(MoveOnly&&) = default;\n+    MoveOnly(const MoveOnly&) = delete;\n+};\n+\n+using test_type = std::map<int, MoveOnly>;\n+\n+test_type p;\n+test_type q(std::move(p));\n+test_type r(std::move(p), test_type::allocator_type());"}]}