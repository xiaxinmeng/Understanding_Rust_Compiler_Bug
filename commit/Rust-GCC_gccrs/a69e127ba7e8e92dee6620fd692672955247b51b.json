{"sha": "a69e127ba7e8e92dee6620fd692672955247b51b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5ZTEyN2JhN2U4ZTkyZGVlNjYyMGZkNjkyNjcyOTU1MjQ3YjUxYg==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2003-05-17T20:04:09Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2003-05-17T20:04:09Z"}, "message": "m68k.c (m68k_output_function_prologue): Use HOST_WIDE_INT_PRINT_DEC for fprintf and %wd for asm_fprintf when...\n\n\t* config/m68k/m68k.c (m68k_output_function_prologue): Use\n\tHOST_WIDE_INT_PRINT_DEC for fprintf and %wd for asm_fprintf when\n\tformatting a HOST_WIDE_INT.\n\t(m68k_output_function_epilogue): Likewise.\n\nFrom-SVN: r66910", "tree": {"sha": "5754e139892f161b04b7a3ae48bc793d39026a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5754e139892f161b04b7a3ae48bc793d39026a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a69e127ba7e8e92dee6620fd692672955247b51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69e127ba7e8e92dee6620fd692672955247b51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a69e127ba7e8e92dee6620fd692672955247b51b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69e127ba7e8e92dee6620fd692672955247b51b/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2aea0b53c96af86fbc8a1c2473c2fccec5386ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aea0b53c96af86fbc8a1c2473c2fccec5386ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aea0b53c96af86fbc8a1c2473c2fccec5386ccc"}], "stats": {"total": 141, "additions": 80, "deletions": 61}, "files": [{"sha": "85bea2534930db06ab67093d3a13be208aa9b011", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69e127ba7e8e92dee6620fd692672955247b51b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69e127ba7e8e92dee6620fd692672955247b51b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a69e127ba7e8e92dee6620fd692672955247b51b", "patch": "@@ -1,3 +1,10 @@\n+2003-05-17  Andreas Schwab  <schwab@suse.de>\n+\n+\t* config/m68k/m68k.c (m68k_output_function_prologue): Use\n+\tHOST_WIDE_INT_PRINT_DEC for fprintf and %wd for asm_fprintf when\n+\tformatting a HOST_WIDE_INT.\n+\t(m68k_output_function_epilogue): Likewise.\n+\n 2003-05-17  Zack Weinberg  <zack@codesourcery.com>\n \n \t* doc/install.texi: Remove information about desupported targets."}, {"sha": "b49f317f2fb9014f39ec62ced4cf994422aa7dca", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 73, "deletions": 61, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69e127ba7e8e92dee6620fd692672955247b51b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69e127ba7e8e92dee6620fd692672955247b51b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a69e127ba7e8e92dee6620fd692672955247b51b", "patch": "@@ -267,26 +267,32 @@ m68k_output_function_prologue (stream, size)\n   if (fsize > 30000)\n     {\n       fprintf (stream, \"\\tmovel sp,a0\\n\");\n-      fprintf (stream, \"\\taddl $-%d,a0\\n\", 2048 + fsize);\n+      fprintf (stream, \"\\taddl $-\" HOST_WIDE_INT_PRINT_DEC \",a0\\n\",\n+\t       2048 + fsize);\n       fprintf (stream, \"\\ttstb (a0)\\n\");\n     }\n   else\n-    fprintf (stream, \"\\ttstb -%d(sp)\\n\", 2048 + fsize);\n+    fprintf (stream, \"\\ttstb -\" HOST_WIDE_INT_PRINT_DEC \"(sp)\\n\",\n+\t     2048 + fsize);\n \n   if (frame_pointer_needed)\n     {\n       if (TARGET_68020 || fsize < 0x8000)\n-\tfprintf (stream, \"\\tlink a6,$%d\\n\", -fsize);\n+\tfprintf (stream, \"\\tlink a6,$\" HOST_WIDE_INT_PRINT_DEC \"\\n\", -fsize);\n       else\n-\tfprintf (stream, \"\\tlink a6,$0\\n\\tsubl $%d,sp\\n\", fsize);\n+\tfprintf (stream,\n+\t\t \"\\tlink a6,$0\\n\\tsubl $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n+\t\t fsize);\n     }\n   else if (fsize)\n     {\n       /* Adding negative number is faster on the 68040.  */\n       if (fsize + 4 < 0x8000)\n-\tfprintf (stream, \"\\tadd.w $%d,sp\\n\", - (fsize + 4));\n+\tfprintf (stream, \"\\tadd.w $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n+\t\t - (fsize + 4));\n       else\n-\tfprintf (stream, \"\\tadd.l $%d,sp\\n\", - (fsize + 4));\n+\tfprintf (stream, \"\\tadd.l $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n+\t\t - (fsize + 4));\n     }\n \n   for (regno = 16; regno < 24; regno++)\n@@ -327,10 +333,10 @@ m68k_output_function_prologue (stream, size)\n       && GET_CODE (stack_limit_rtx) == SYMBOL_REF)\n     {\n #if defined (MOTOROLA)\n-      asm_fprintf (stream, \"\\tcmp.l %0I%s+%d,%Rsp\\n\\ttrapcs\\n\",\n+      asm_fprintf (stream, \"\\tcmp.l %0I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n \t\t   XSTR (stack_limit_rtx, 0), fsize + 4);\n #else\n-      asm_fprintf (stream, \"\\tcmpl %0I%s+%d,%Rsp\\n\\ttrapcs\\n\",\n+      asm_fprintf (stream, \"\\tcmpl %0I%s+%wd,%Rsp\\n\\ttrapcs\\n\",\n \t\t   XSTR (stack_limit_rtx, 0), fsize + 4);\n #endif\n     }\n@@ -355,31 +361,31 @@ m68k_output_function_prologue (stream, size)\n       else if (fsize < 0x8000)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.w %s,%0I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.w %s,%0I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%0I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%0I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n       else if (TARGET_68020)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.l %s,%0I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.l %s,%0I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%0I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%0I%wd\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n       else\n \t{\n       /* Adding negative number is faster on the 68040.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.w %s,%0I0\\n\\tadd.l %0I%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.w %s,%0I0\\n\\tadd.l %0I%wd,%Rsp\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%0I0\\n\\taddl %0I%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%0I0\\n\\taddl %0I%wd,%Rsp\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n@@ -405,18 +411,18 @@ m68k_output_function_prologue (stream, size)\n \t\t{\n \t\t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.w %0I%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubq.w %0I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t\t  asm_fprintf (stream, \"\\tsubqw %0I%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubqw %0I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t\t}\n \t      else\n \t\t{\n \t\t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t\t  asm_fprintf (stream, \"\\tsubq.l %0I%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubq.l %0I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t\t  asm_fprintf (stream, \"\\tsubql %0I%d,%Rsp\\n\", fsize + 4);\n+\t\t  asm_fprintf (stream, \"\\tsubql %0I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t\t}\n \t    }\n@@ -426,10 +432,11 @@ m68k_output_function_prologue (stream, size)\n \t\t subtract a small integer (8 < N <= 16) to a register.  */\n \t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tsubq.w %0I8,%Rsp\\n\\tsubq.w %0I%d,%Rsp\\n\",\n+\t      asm_fprintf (stream,\n+\t\t\t   \"\\tsubq.w %0I8,%Rsp\\n\\tsubq.w %0I%wd,%Rsp\\n\",\n \t\t\t   fsize + 4 - 8);\n #else\n-\t      asm_fprintf (stream, \"\\tsubqw %0I8,%Rsp\\n\\tsubqw %0I%d,%Rsp\\n\",\n+\t      asm_fprintf (stream, \"\\tsubqw %0I8,%Rsp\\n\\tsubqw %0I%wd,%Rsp\\n\",\n \t\t\t   fsize + 4 - 8);\n #endif\n \t    }\n@@ -440,27 +447,27 @@ m68k_output_function_prologue (stream, size)\n \t      /* Adding negative number is faster on the 68040.  */\n \t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", - (fsize + 4));\n+\t      asm_fprintf (stream, \"\\tadd.w %0I%wd,%Rsp\\n\", - (fsize + 4));\n #else\n-\t      asm_fprintf (stream, \"\\taddw %0I%d,%Rsp\\n\", - (fsize + 4));\n+\t      asm_fprintf (stream, \"\\taddw %0I%wd,%Rsp\\n\", - (fsize + 4));\n #endif\n \t    }\n \t  else\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tlea (%d,%Rsp),%Rsp\\n\", - (fsize + 4));\n+\t      asm_fprintf (stream, \"\\tlea (%wd,%Rsp),%Rsp\\n\", - (fsize + 4));\n #else\n-\t      asm_fprintf (stream, \"\\tlea %Rsp@(%d),%Rsp\\n\", - (fsize + 4));\n+\t      asm_fprintf (stream, \"\\tlea %Rsp@(%wd),%Rsp\\n\", - (fsize + 4));\n #endif\n \t    }\n \t}\n       else\n \t{\n \t/* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\tadd.l %0I%wd,%Rsp\\n\", - (fsize + 4));\n #else\n-\t  asm_fprintf (stream, \"\\taddl %0I%d,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\taddl %0I%wd,%Rsp\\n\", - (fsize + 4));\n #endif\n \t}\n       if (dwarf2out_do_frame ())\n@@ -704,43 +711,45 @@ m68k_output_function_epilogue (stream, size)\n       && frame_pointer_needed\n       && (mask || fmask))\n     {\n-      fprintf (stream, \"\\tmovel $%d,a0\\n\", -fsize);\n+      fprintf (stream, \"\\tmovel $\" HOST_WIDE_INT_PRINT_DEC \",a0\\n\", -fsize);\n       fsize = 0, big = 1;\n     }\n \n   if (exact_log2 (mask) >= 0)\n     {\n       if (big)\n-\tfprintf (stream, \"\\tmovel -%d(a6,a0.l),%s\\n\",\n+\tfprintf (stream, \"\\tmovel -\" HOST_WIDE_INT_PRINT_DEC \"(a6,a0.l),%s\\n\",\n \t\t offset + fsize, reg_names[exact_log2 (mask)]);\n       else if (! frame_pointer_needed)\n \tfprintf (stream, \"\\tmovel (sp)+,%s\\n\",\n \t\t reg_names[exact_log2 (mask)]);\n       else\n-\tfprintf (stream, \"\\tmovel -%d(a6),%s\\n\",\n+\tfprintf (stream, \"\\tmovel -\" HOST_WIDE_INT_PRINT_DEC \"(a6),%s\\n\",\n \t\t offset + fsize, reg_names[exact_log2 (mask)]);\n     }\n   else if (mask)\n     {\n       if (big)\n-\tfprintf (stream, \"\\tmovem -%d(a6,a0.l),$0x%x\\n\",\n+\tfprintf (stream,\n+\t\t \"\\tmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6,a0.l),$0x%x\\n\",\n \t\t offset + fsize, mask);\n       else if (! frame_pointer_needed)\n \tfprintf (stream, \"\\tmovem (sp)+,$0x%x\\n\", mask);\n       else\n-\tfprintf (stream, \"\\tmovem -%d(a6),$0x%x\\n\",\n+\tfprintf (stream, \"\\tmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6),$0x%x\\n\",\n \t\t offset + fsize, mask);\n     }\n \n   if (fmask)\n     {\n       if (big)\n-\tfprintf (stream, \"\\tfmovem -%d(a6,a0.l),$0x%x\\n\",\n+\tfprintf (stream,\n+\t\t \"\\tfmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6,a0.l),$0x%x\\n\",\n \t\t foffset + fsize, fmask);\n       else if (! frame_pointer_needed)\n \tfprintf (stream, \"\\tfmovem (sp)+,$0x%x\\n\", fmask);\n       else\n-\tfprintf (stream, \"\\tfmovem -%d(a6),$0x%x\\n\",\n+\tfprintf (stream, \"\\tfmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6),$0x%x\\n\",\n \t\t foffset + fsize, fmask);\n     }\n \n@@ -749,9 +758,11 @@ m68k_output_function_epilogue (stream, size)\n   else if (fsize)\n     {\n       if (fsize + 4 < 0x8000)\n-\tfprintf (stream, \"\\tadd.w $%d,sp\\n\", fsize + 4);\n+\tfprintf (stream, \"\\tadd.w $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n+\t\t fsize + 4);\n       else\n-\tfprintf (stream, \"\\tadd.l $%d,sp\\n\", fsize + 4);\n+\tfprintf (stream, \"\\tadd.l $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n+\t\t fsize + 4);\n     }\n \n   if (current_function_calls_eh_return)\n@@ -822,9 +833,9 @@ m68k_output_function_epilogue (stream, size)\n       && (mask || fmask))\n     {\n #ifdef MOTOROLA\n-      asm_fprintf (stream, \"\\t%Omove.l %0I%d,%Ra1\\n\", -fsize);\n+      asm_fprintf (stream, \"\\t%Omove.l %0I%wd,%Ra1\\n\", -fsize);\n #else\n-      asm_fprintf (stream, \"\\tmovel %0I%d,%Ra1\\n\", -fsize);\n+      asm_fprintf (stream, \"\\tmovel %0I%wd,%Ra1\\n\", -fsize);\n #endif\n       fsize = 0, big = 1;\n     }\n@@ -844,12 +855,12 @@ m68k_output_function_epilogue (stream, size)\n             if (big)\n \t      {\n #ifdef MOTOROLA\n-\t\tasm_fprintf (stream, \"\\t%Omove.l -%d(%s,%Ra1.l),%s\\n\",\n+\t\tasm_fprintf (stream, \"\\t%Omove.l -%wd(%s,%Ra1.l),%s\\n\",\n \t\t\t     offset + fsize,\n \t\t\t     reg_names[FRAME_POINTER_REGNUM],\n \t\t\t     reg_names[i]);\n #else\n-\t\tasm_fprintf (stream, \"\\tmovel %s@(-%d,%Ra1:l),%s\\n\",\n+\t\tasm_fprintf (stream, \"\\tmovel %s@(-%wd,%Ra1:l),%s\\n\",\n \t\t\t     reg_names[FRAME_POINTER_REGNUM],\n \t\t\t     offset + fsize, reg_names[i]);\n #endif\n@@ -867,12 +878,13 @@ m68k_output_function_epilogue (stream, size)\n             else\n \t      {\n #ifdef MOTOROLA\n-\t\tasm_fprintf (stream, \"\\t%Omove.l -%d(%s),%s\\n\",\n+\t\tasm_fprintf (stream, \"\\t%Omove.l -%wd(%s),%s\\n\",\n \t\t\t     offset + fsize,\n \t\t\t     reg_names[FRAME_POINTER_REGNUM],\n \t\t\t     reg_names[i]);\n #else\n-\t\tfprintf (stream, \"\\tmovel %s@(-%d),%s\\n\",\n+\t\tfprintf (stream,\n+\t\t\t \"\\tmovel %s@(-\" HOST_WIDE_INT_PRINT_DEC \"),%s\\n\",\n \t\t\t reg_names[FRAME_POINTER_REGNUM],\n \t\t\t offset + fsize, reg_names[i]);\n #endif\n@@ -885,12 +897,12 @@ m68k_output_function_epilogue (stream, size)\n       if (big)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l -%d(%s,%Ra1.l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmovm.l -%wd(%s,%Ra1.l),%0I0x%x\\n\",\n \t\t       offset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       mask);\n #else\n-\t  asm_fprintf (stream, \"\\tmoveml %s@(-%d,%Ra1:l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmoveml %s@(-%wd,%Ra1:l),%0I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       offset + fsize, mask);\n #endif\n@@ -906,12 +918,12 @@ m68k_output_function_epilogue (stream, size)\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tmovm.l -%d(%s),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmovm.l -%wd(%s),%0I0x%x\\n\",\n \t\t       offset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       mask);\n #else\n-\t  asm_fprintf (stream, \"\\tmoveml %s@(-%d),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tmoveml %s@(-%wd),%0I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       offset + fsize, mask);\n #endif\n@@ -922,12 +934,12 @@ m68k_output_function_epilogue (stream, size)\n       if (big)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm -%d(%s,%Ra1.l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s,%Ra1.l),%0I0x%x\\n\",\n \t\t       foffset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       fmask);\n #else\n-\t  asm_fprintf (stream, \"\\tfmovem %s@(-%d,%Ra1:l),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd,%Ra1:l),%0I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       foffset + fsize, fmask);\n #endif\n@@ -943,12 +955,12 @@ m68k_output_function_epilogue (stream, size)\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tfmovm -%d(%s),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovm -%wd(%s),%0I0x%x\\n\",\n \t\t       foffset + fsize,\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       fmask);\n #else\n-\t  asm_fprintf (stream, \"\\tfmovem %s@(-%d),%0I0x%x\\n\",\n+\t  asm_fprintf (stream, \"\\tfmovem %s@(-%wd),%0I0x%x\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM],\n \t\t       foffset + fsize, fmask);\n #endif\n@@ -965,17 +977,17 @@ m68k_output_function_epilogue (stream, size)\n \t  if (!TARGET_5200)\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.w %0I%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddq.w %0I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddqw %0I%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddqw %0I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t  else\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\taddq.l %0I%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddq.l %0I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddql %0I%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddql %0I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t}\n@@ -985,10 +997,10 @@ m68k_output_function_epilogue (stream, size)\n \t     add a small integer (8 < N <= 16) to a register.  */\n \t  /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\taddq.w %0I8,%Rsp\\n\\taddq.w %0I%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\taddq.w %0I8,%Rsp\\n\\taddq.w %0I%wd,%Rsp\\n\",\n \t\t       fsize + 4 - 8);\n #else\n-\t  asm_fprintf (stream, \"\\taddqw %0I8,%Rsp\\n\\taddqw %0I%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\taddqw %0I8,%Rsp\\n\\taddqw %0I%wd,%Rsp\\n\",\n \t\t       fsize + 4 - 8);\n #endif\n \t}\n@@ -1000,27 +1012,27 @@ m68k_output_function_epilogue (stream, size)\n \t    { \n \t      /* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\tadd.w %0I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\taddw %0I%d,%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\taddw %0I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t  else\n \t    {\n #ifdef MOTOROLA\n-\t      asm_fprintf (stream, \"\\tlea (%d,%Rsp),%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\tlea (%wd,%Rsp),%Rsp\\n\", fsize + 4);\n #else\n-\t      asm_fprintf (stream, \"\\tlea %Rsp@(%d),%Rsp\\n\", fsize + 4);\n+\t      asm_fprintf (stream, \"\\tlea %Rsp@(%wd),%Rsp\\n\", fsize + 4);\n #endif\n \t    }\n \t}\n       else\n \t{\n \t/* asm_fprintf() cannot handle %.  */\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\tadd.l %0I%wd,%Rsp\\n\", fsize + 4);\n #else\n-\t  asm_fprintf (stream, \"\\taddl %0I%d,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\taddl %0I%wd,%Rsp\\n\", fsize + 4);\n #endif\n \t}\n     }"}]}