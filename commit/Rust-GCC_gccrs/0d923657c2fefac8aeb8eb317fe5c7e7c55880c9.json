{"sha": "0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5MjM2NTdjMmZlZmFjOGFlYjhlYjMxN2ZlNWM3ZTdjNTU4ODBjOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-24T08:35:16Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-24T08:35:16Z"}, "message": "Add dg-final option-based target selectors\n\nThis patch adds target selectors of the form:\n\n  { any-opts \"opt1\" ... \"optn\" }\n  { no-opts \"opt1\" ... \"optn\" }\n\nfor skipping or xfailing tests based on compiler options.  It only\nworks for dg-final selectors.\n\nThe patch then uses no-opts to exclude -O0 and (sometimes) -Og from\nsome guality.exp xfails.  AFAICT (based on gcc-testresults) these\ntests pass for those options for all targets.\n\ngcc/\n\t* doc/sourcebuild.texi: Document no-opts and any-opts target\n\tselectors.\n\ngcc/testsuite/\n\t* lib/target-supports-dg.exp (selector_expression): Handle any-opts\n\tand no-opts.\n\t* gcc.dg/guality/pr41353-1.c: Exclude -O0 from xfail.\n\t* gcc.dg/guality/pr59776.c: Likewise.\n\t* gcc.dg/guality/pr54970.c: Likewise -O0 and -Og.", "tree": {"sha": "f279b9ce648d7e5671873368ef89f7f3ce50fa87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f279b9ce648d7e5671873368ef89f7f3ce50fa87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364"}], "stats": {"total": 122, "additions": 107, "deletions": 15}, "files": [{"sha": "d3200a42e44170e96ef0b8854e7d3352ec29cf18", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 87, "deletions": 3, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "patch": "@@ -1301,6 +1301,8 @@ A selector is:\n @item one or more target triplets, possibly including wildcard characters;\n use @samp{*-*-*} to match any target\n @item a single effective-target keyword (@pxref{Effective-Target Keywords})\n+@item a list of compiler options that should be included or excluded\n+(as described in more detail below)\n @item a logical expression\n @end itemize\n \n@@ -1313,14 +1315,96 @@ test to fail for targets that match @var{selector2}.\n \n A selector expression appears within curly braces and uses a single\n logical operator: one of @samp{!}, @samp{&&}, or @samp{||}.  An\n-operand is another selector expression, an effective-target keyword,\n-a single target triplet, or a list of target triplets within quotes or\n-curly braces.  For example:\n+operand is one of the following:\n+\n+@itemize @bullet\n+@item\n+another selector expression, in curly braces\n+\n+@item\n+an effective-target keyword, such as @code{lp64}\n+\n+@item\n+a single target triplet\n+\n+@item\n+a list of target triplets within quotes or curly braces\n+\n+@item\n+one of the following:\n+\n+@table @samp\n+@item @{ any-opts @var{opt1} @dots{} @var{optn} @}\n+Each of @var{opt1} to @var{optn} is a space-separated list of option globs.\n+The selector expression evaluates to true if, for one of these strings,\n+every glob in the string matches an option that was passed to the compiler.\n+For example:\n+\n+@smallexample\n+@{ any-opts \"-O3 -flto\" \"-O[2g]\" @}\n+@end smallexample\n+\n+is true if any of the following are true:\n+\n+@itemize @bullet\n+@item\n+@option{-O2} was passed to the compiler\n+\n+@item\n+@option{-Og} was passed to the compiler\n+\n+@item\n+both @option{-O3} and @option{-flto} were passed to the compiler\n+@end itemize\n+\n+This kind of selector can only be used within @code{dg-final} directives.\n+Use @code{dg-skip-if}, @code{dg-xfail-if} or @code{dg-xfail-run-if} to\n+skip whole tests based on options, or to mark them as expected to fail\n+with certain options.\n+\n+@item @{ no-opts @var{opt1} @dots{} @var{optn} @}\n+As for @code{any-opts} above, each of @var{opt1} to @var{optn} is a\n+space-separated list of option globs.  The selector expression\n+evaluates to true if, for all of these strings, there is at least\n+one glob that does not match an option that was passed to the compiler.\n+It is shorthand for:\n+\n+@smallexample\n+@{ ! @{ any-opts @var{opt1} @dots{} @var{optn} @} @}\n+@end smallexample\n+\n+For example:\n+\n+@smallexample\n+@{ no-opts \"-O3 -flto\" \"-O[2g]\" @}\n+@end smallexample\n+\n+is true if all of the following are true:\n+\n+@itemize @bullet\n+@item\n+@option{-O2} was not passed to the compiler\n+\n+@item\n+@option{-Og} was not passed to the compiler\n+\n+@item\n+at least one of @option{-O3} or @option{-flto} was not passed to the compiler\n+@end itemize\n+\n+Like @code{any-opts}, this kind of selector can only be used within\n+@code{dg-final} directives.\n+\n+@end table\n+@end itemize\n+\n+Here are some examples of full target selectors:\n \n @smallexample\n @{ target @{ ! \"hppa*-*-* ia64*-*-*\" @} @}\n @{ target @{ powerpc*-*-* && lp64 @} @}\n @{ xfail @{ lp64 || vect_no_align @} @}\n+@{ xfail @{ aarch64*-*-* && @{ any-opts \"-O2\" @} @} @}\n @end smallexample\n \n @node Effective-Target Keywords"}, {"sha": "6639a524f0f2839f3cd71f7f23dd58f8eca06cc7", "filename": "gcc/testsuite/gcc.dg/guality/pr41353-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr41353-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr41353-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr41353-1.c?ref=0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "patch": "@@ -22,7 +22,7 @@ f2 (int i, int j)\n {\n   j += i;\n   /* { dg-final { gdb-test .+4 \"i\" \"37\" } } */\n-  /* { dg-final { gdb-test .+3 \"j\" \"28 + 37\" { xfail *-*-* } } } */\n+  /* { dg-final { gdb-test .+3 \"j\" \"28 + 37\" { xfail { no-opts \"-O0\" } } } } */\n   int i1 = 2 * i; /* { dg-final { gdb-test .+2 \"i1\" \"2 * 37\" } } */\n   int i2 = 3 * i; /* { dg-final { gdb-test .+1 \"i2\" \"3 * 37\" } } */\n   return j;"}, {"sha": "e60cc043fc9131e633f43ad62f4afe4b71101971", "filename": "gcc/testsuite/gcc.dg/guality/pr54970.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c?ref=0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "patch": "@@ -8,39 +8,39 @@\n int\n main ()\n {\n-  int a[] = { 1, 2, 3 };\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"1\" { xfail { *-*-* } } } } */\n+  int a[] = { 1, 2, 3 };\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"1\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n   int *p = a + 2;\t\t/* { dg-final { gdb-test .+3 \"a\\[1\\]\" \"2\" } } */\n   int *q = a + 1;\t\t/* { dg-final { gdb-test .+2 \"a\\[2\\]\" \"3\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+1 \"*p\" \"3\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test . \"*q\" \"2\" } } */\n-  *p += 10;\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"1\" { xfail { *-*-* } } } } */\n+  *p += 10;\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"1\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n \t\t\t\t/* { dg-final { gdb-test .+3 \"a\\[1\\]\" \"2\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+2 \"a\\[2\\]\" \"13\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+1 \"*p\" \"13\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test . \"*q\" \"2\" } } */\n-  *q += 10;\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"1\" { xfail { *-*-* } } } } */\n+  *q += 10;\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"1\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n \t\t\t\t/* { dg-final { gdb-test .+3 \"a\\[1\\]\" \"12\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+2 \"a\\[2\\]\" \"13\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+1 \"*p\" \"13\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test . \"*q\" \"12\" } } */\n   __builtin_memcpy (&a, (int [3]) { 4, 5, 6 }, sizeof (a));\n-\t\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"4\" { xfail { *-*-* } } } } */\n+\t\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"4\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n \t\t\t\t/* { dg-final { gdb-test .+3 \"a\\[1\\]\" \"5\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+2 \"a\\[2\\]\" \"6\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+1 \"*p\" \"6\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test . \"*q\" \"5\" } } */\n-  *p += 20;\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"4\" { xfail { *-*-* } } } } */\n+  *p += 20;\t\t\t/* { dg-final { gdb-test .+4 \"a\\[0\\]\" \"4\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n \t\t\t\t/* { dg-final { gdb-test .+3 \"a\\[1\\]\" \"5\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+2 \"a\\[2\\]\" \"26\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+1 \"*p\" \"26\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test . \"*q\" \"5\" } } */\n-  *q += 20;\t\t\t/* { dg-final { gdb-test .+8 \"a\\[0\\]\" \"4\" { xfail { *-*-* } } } } */\n+  *q += 20;\t\t\t/* { dg-final { gdb-test .+8 \"a\\[0\\]\" \"4\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n \t\t\t\t/* { dg-final { gdb-test .+7 \"a\\[1\\]\" \"25\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+6 \"a\\[2\\]\" \"26\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+5 \"*p\" \"26\" } } */\n \t\t\t\t/* { dg-final { gdb-test .+4 \"p\\[-1\\]\" \"25\" } } */\n-\t\t\t\t/* { dg-final { gdb-test .+3 \"p\\[-2\\]\" \"4\" { xfail { *-*-* } } } } */\n-\t\t\t\t/* { dg-final { gdb-test .+2 \"q\\[-1\\]\" \"4\" { xfail { *-*-* } } } } */\n+\t\t\t\t/* { dg-final { gdb-test .+3 \"p\\[-2\\]\" \"4\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n+\t\t\t\t/* { dg-final { gdb-test .+2 \"q\\[-1\\]\" \"4\" { xfail { no-opts \"-O0\" \"-Og\" } } } } */\n \t\t\t\t/* { dg-final { gdb-test .+1 \"q\\[1\\]\" \"26\" } } */\n   asm volatile (NOP);\t\t/* { dg-final { gdb-test . \"*q\" \"25\" } } */\n   return 0;"}, {"sha": "9777f6229de70f172e583a070bad072a4179108c", "filename": "gcc/testsuite/gcc.dg/guality/pr59776.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr59776.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr59776.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr59776.c?ref=0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "patch": "@@ -12,11 +12,11 @@ foo (struct S *p)\n   struct S s1, s2;\t\t\t/* { dg-final { gdb-test pr59776.c:17 \"s1.f\" \"5.0\" } } */\n   s1 = *p;\t\t\t\t/* { dg-final { gdb-test pr59776.c:17 \"s1.g\" \"6.0\" } } */\n   s2 = s1;\t\t\t\t/* { dg-final { gdb-test pr59776.c:17 \"s2.f\" \"0.0\" } } */\n-  *(int *) &s2.f = 0;\t\t\t/* { dg-final { gdb-test pr59776.c:17 \"s2.g\" \"6.0\" { xfail *-*-* } } } */\n+  *(int *) &s2.f = 0;\t\t\t/* { dg-final { gdb-test pr59776.c:17 \"s2.g\" \"6.0\" { xfail { no-opts \"-O0\" } } } } */\n   asm volatile (NOP : : : \"memory\");\t/* { dg-final { gdb-test pr59776.c:20 \"s1.f\" \"5.0\" } } */\n   asm volatile (NOP : : : \"memory\");\t/* { dg-final { gdb-test pr59776.c:20 \"s1.g\" \"6.0\" } } */\n   s2 = s1;\t\t\t\t/* { dg-final { gdb-test pr59776.c:20 \"s2.f\" \"5.0\" } } */\n-  asm volatile (NOP : : : \"memory\");\t/* { dg-final { gdb-test pr59776.c:20 \"s2.g\" \"6.0\" { xfail *-*-* } } } */\n+  asm volatile (NOP : : : \"memory\");\t/* { dg-final { gdb-test pr59776.c:20 \"s2.g\" \"6.0\" { xfail { no-opts \"-O0\" } } } } */\n   asm volatile (NOP : : : \"memory\");\n }\n "}, {"sha": "94ba79eb4aef5b3c5abac276bb41ba6763a66032", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d923657c2fefac8aeb8eb317fe5c7e7c55880c9/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=0d923657c2fefac8aeb8eb317fe5c7e7c55880c9", "patch": "@@ -570,7 +570,15 @@ if { [info procs saved-dg-process-target] == [list] } {\n \n     # Evaluate a selector expression.\n     proc selector_expression { exp } {\n-\tif { [llength $exp] == 2 } {\n+\tif { [llength $exp] >= 2\n+\t     && [string match \"any-opts\" [lindex $exp 0]] } {\n+\t    set args [list \"\" { *-*-* } [lrange $exp 1 end] \"\"]\n+\t    set answer [check_conditional_xfail $args]\n+\t} elseif { [llength $exp] >= 2\n+\t\t   && [string match \"no-opts\" [lindex $exp 0]] } {\n+\t    set args [list \"\" { *-*-* } \"*\" [lrange $exp 1 end]]\n+\t    set answer [check_conditional_xfail $args]\n+\t} elseif { [llength $exp] == 2 } {\n \t    if [string match \"!\" [lindex $exp 0]] {\n \t\tset op1 [lindex $exp 1]\n \t\tset answer [expr { ! [selector_opd $op1] }]"}]}