{"sha": "c624298a19aa42cc335c33b980a17da2bbd7fb94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyNDI5OGExOWFhNDJjYzMzNWMzM2I5ODBhMTdkYTJiYmQ3ZmI5NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T10:09:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T10:09:31Z"}, "message": "[multiple changes]\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb (Check_Expression_Against_Static_Predicate):\n\tMark expression as non-static if it fails static predicate check,\n\tand issue additional warning.\n\n2014-07-18  Pascal Obry  <obry@adacore.com>\n\n\t* a-witeio.adb (Put): Control translation based on\n\twide_text_translation_required.\n\t* adaint.c (CurrentCCSEncoding): New variable.\n\t* initialize.c (__gnat_initialize): On Windows initialize\n\tCurrentCCSEncoding based on values in GNAT_CCS_ENCODING\n\tenvironment variable.\n\t* mingw32.h (CurrentCCSEncoding): New external.\n\t(__gnat_wide_text_translation_required): Likewise.\n\t* sysdep.c (wide_text_translation_required): New variable.\n\t(__gnat_set_wide_text_mode): Set mode based on CurrentCCSEncoding.\n\n2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Refined_Depends_In_Decl_Part): Remove global\n\tvariable Refined_States.  Add global variable Matched_Items.\n\t(Check_Dependency_Clause): Account for dependency\n\tclauses utilizing states with visible null refinements.\n\t(Is_Null_Refined_State): New routine.\n\t(Match_Items): Record each successfully matched item of pragma Depends.\n\t(Record_Item): New routine.\n\n2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case 'Update): Set\n\tDo_Range_Check flag on a dynamic index expression used in a\n\tcomponent association in the argument of Update.\n\n2014-07-18  Gary Dismukes  <dismukes@adacore.com>\n\n\t* einfo.ads, sem_eval.ads, sem_ch13.adb: Minor reformatting.\n\n2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Redo the marking\n\tof enclosing blocks, loops and the enclosing function using a\n\tparent-based traversal.\n\t* exp_util.adb (Wrap_Statements_In_Block): Suppress the secondary\n\tstack reclamation if the iterator loop contains a return statement\n\tthat uses the stack.\n\t* sem_ch5.adb (Analyze_Loop_Statement): There is no need to\n\tpatch up the scope stack as the secondary stack management now\n\ttakes into account the enclosing function of the iterator loop.\n\nFrom-SVN: r212805", "tree": {"sha": "b83ac632629cc15587afed18c4b1d444db66972f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83ac632629cc15587afed18c4b1d444db66972f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c624298a19aa42cc335c33b980a17da2bbd7fb94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c624298a19aa42cc335c33b980a17da2bbd7fb94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c624298a19aa42cc335c33b980a17da2bbd7fb94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c624298a19aa42cc335c33b980a17da2bbd7fb94/comments", "author": null, "committer": null, "parents": [{"sha": "ee4eee0a542378923db1978ac6cee9fe1dfd693e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4eee0a542378923db1978ac6cee9fe1dfd693e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4eee0a542378923db1978ac6cee9fe1dfd693e"}], "stats": {"total": 332, "additions": 272, "deletions": 60}, "files": [{"sha": "99cdb1e45288f84180e36a67fa8d07249afae1bd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -1,3 +1,54 @@\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb (Check_Expression_Against_Static_Predicate):\n+\tMark expression as non-static if it fails static predicate check,\n+\tand issue additional warning.\n+\n+2014-07-18  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-witeio.adb (Put): Control translation based on\n+\twide_text_translation_required.\n+\t* adaint.c (CurrentCCSEncoding): New variable.\n+\t* initialize.c (__gnat_initialize): On Windows initialize\n+\tCurrentCCSEncoding based on values in GNAT_CCS_ENCODING\n+\tenvironment variable.\n+\t* mingw32.h (CurrentCCSEncoding): New external.\n+\t(__gnat_wide_text_translation_required): Likewise.\n+\t* sysdep.c (wide_text_translation_required): New variable.\n+\t(__gnat_set_wide_text_mode): Set mode based on CurrentCCSEncoding.\n+\n+2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Refined_Depends_In_Decl_Part): Remove global\n+\tvariable Refined_States.  Add global variable Matched_Items.\n+\t(Check_Dependency_Clause): Account for dependency\n+\tclauses utilizing states with visible null refinements.\n+\t(Is_Null_Refined_State): New routine.\n+\t(Match_Items): Record each successfully matched item of pragma Depends.\n+\t(Record_Item): New routine.\n+\n+2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case 'Update): Set\n+\tDo_Range_Check flag on a dynamic index expression used in a\n+\tcomponent association in the argument of Update.\n+\n+2014-07-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* einfo.ads, sem_eval.ads, sem_ch13.adb: Minor reformatting.\n+\n+2014-07-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Redo the marking\n+\tof enclosing blocks, loops and the enclosing function using a\n+\tparent-based traversal.\n+\t* exp_util.adb (Wrap_Statements_In_Block): Suppress the secondary\n+\tstack reclamation if the iterator loop contains a return statement\n+\tthat uses the stack.\n+\t* sem_ch5.adb (Analyze_Loop_Statement): There is no need to\n+\tpatch up the scope stack as the secondary stack management now\n+\ttakes into account the enclosing function of the iterator loop.\n+\n 2014-07-18  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, g-memdum.ads, i-cstrea.ads: Minor reformatting."}, {"sha": "92c2dfa747761e4fe5364dc5826d18df7c025656", "filename": "gcc/ada/a-witeio.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fa-witeio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fa-witeio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -1227,10 +1227,10 @@ package body Ada.Wide_Text_IO is\n      (File : File_Type;\n       Item : Wide_Character)\n    is\n-      text_translation_required : Boolean;\n-      for text_translation_required'Size use Character'Size;\n-      pragma Import (C, text_translation_required,\n-                       \"__gnat_text_translation_required\");\n+      wide_text_translation_required : Boolean;\n+      for wide_text_translation_required'Size use Character'Size;\n+      pragma Import (C, wide_text_translation_required,\n+                       \"__gnat_wide_text_translation_required\");\n       --  Text translation is required on Windows only. This means that the\n       --  console is doing translation and we do not want to do any encoding\n       --  here. If this boolean is set we just output the character as-is.\n@@ -1256,7 +1256,7 @@ package body Ada.Wide_Text_IO is\n    begin\n       FIO.Check_Write_Status (AP (File));\n \n-      if text_translation_required then\n+      if wide_text_translation_required then\n          set_wide_text_mode (fileno (File.Stream));\n          Discard := fputwc (Wide_Character'Pos (Item), File.Stream);\n       else"}, {"sha": "4d99c68ca0b24346c98a82759d3e87851165824e", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -123,8 +123,9 @@ extern \"C\" {\n #else\n #include \"mingw32.h\"\n \n-/* Current code page to use, set in initialize.c.  */\n+/* Current code page and CCS encoding to use, set in initialize.c.  */\n UINT CurrentCodePage;\n+UINT CurrentCCSEncoding;\n #endif\n \n #include <sys/utime.h>"}, {"sha": "eb1f7b7d916337bbf8054379075736769348ad8a", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -1881,7 +1881,7 @@ package Einfo is\n --       Defined in all types and subtypes. Set if the type (which must be\n --       a discrete, real, or string subtype) has a static predicate, i.e. a\n --       predicate whose expression is predicate-static. This can result from\n---       use of a Predicate, Static_Predicate or Dynamic_Predicate aspect. We\n+--       use of a Predicate, Static_Predicate, or Dynamic_Predicate aspect. We\n --       can distinguish these cases by testing Has_Static_Predicate_Aspect\n --       and Has_Dynamic_Predicate_Aspect. See description of the latter flag\n --       for further information on dynamic predicates which are also static.\n@@ -1893,7 +1893,7 @@ package Einfo is\n --       from a Predicate aspect or pragma or even from a Dynamic_Predicate\n --       aspect. When we need to know the difference (e.g. to know what set of\n --       check policies apply, use this flag and Has_Dynamic_Predicate_Aspect\n---       to determine which case we have.\n+--       to determine which case we have).\n \n --    Has_Storage_Size_Clause (Flag23) [implementation base type only]\n --       Defined in task types and access types. It is set if a Storage_Size"}, {"sha": "51c49fd689a076bd7799340811c1391c5beed52d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -7471,27 +7471,44 @@ package body Exp_Ch6 is\n       --  Here if secondary stack is used\n \n       else\n-         --  Make sure that no surrounding block will reclaim the secondary\n-         --  stack on which we are going to put the result. Not only may this\n-         --  introduce secondary stack leaks but worse, if the reclamation is\n-         --  done too early, then the result we are returning may get\n-         --  clobbered.\n+         --  Prevent the reclamation of the secondary stack by all enclosing\n+         --  blocks and loops as well as the related function, otherwise the\n+         --  result will be reclaimed too early or even clobbered. Due to a\n+         --  possible mix of internally generated blocks, source blocks and\n+         --  loops, the scope stack may not be contiguous as all labels are\n+         --  inserted at the top level within the related function. Instead,\n+         --  perform a parent-based traversal and mark all appropriate\n+         --  constructs.\n \n          declare\n-            S : Entity_Id;\n+            P : Node_Id;\n+\n          begin\n-            S := Current_Scope;\n-            while Ekind (S) = E_Block or else Ekind (S) = E_Loop loop\n-               Set_Sec_Stack_Needed_For_Return (S, True);\n-               S := Enclosing_Dynamic_Scope (S);\n-            end loop;\n+            P := N;\n+            while Present (P) loop\n \n-            --  The enclosing function itself must be marked as well, to\n-            --  prevent premature secondary stack cleanup.\n+               --  Mark the label of a source or internally generated block or\n+               --  loop.\n \n-            if Ekind (S) = E_Function then\n-               Set_Sec_Stack_Needed_For_Return (Scope_Id);\n-            end if;\n+               if Nkind_In (P, N_Block_Statement, N_Loop_Statement) then\n+                  Set_Sec_Stack_Needed_For_Return (Entity (Identifier (P)));\n+\n+               --  Mark the enclosing function\n+\n+               elsif Nkind (P) = N_Subprogram_Body then\n+                  if Present (Corresponding_Spec (P)) then\n+                     Set_Sec_Stack_Needed_For_Return (Corresponding_Spec (P));\n+                  else\n+                     Set_Sec_Stack_Needed_For_Return (Defining_Entity (P));\n+                  end if;\n+\n+                  --  Do not go beyond the enclosing function\n+\n+                  exit;\n+               end if;\n+\n+               P := Parent (P);\n+            end loop;\n          end;\n \n          --  Optimize the case where the result is a function call. In this"}, {"sha": "d4b9604ae2ce68dba02a4c0e1ecc591ca971b446", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -6668,17 +6668,18 @@ package body Exp_Util is\n          --  When wrapping the statements of an iterator loop, check whether\n          --  the loop requires secondary stack management and if so, propagate\n          --  the appropriate flags to the block. This ensures that the cursor\n-         --  is properly cleaned up at each iteration of the loop. Management\n-         --  is not performed when the loop contains a return statement which\n-         --  also uses the secondary stack as this will destroy the result\n-         --  prematurely.\n+         --  is properly cleaned up at each iteration of the loop.\n \n          Iter_Loop := Find_Enclosing_Iterator_Loop (Scop);\n \n          if Present (Iter_Loop) then\n+            Set_Uses_Sec_Stack (Block_Id, Uses_Sec_Stack (Iter_Loop));\n+\n+            --  Secondary stack reclamation is suppressed when the associated\n+            --  iterator loop contains a return statement which uses the stack.\n+\n             Set_Sec_Stack_Needed_For_Return\n               (Block_Id, Sec_Stack_Needed_For_Return (Iter_Loop));\n-            Set_Uses_Sec_Stack (Block_Id, Uses_Sec_Stack (Iter_Loop));\n          end if;\n \n          return Block_Nod;"}, {"sha": "8c39be02723a215ea5d565ab322e3dc1b424b4d6", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -18196,6 +18196,29 @@ This encoding form parameter is only supported on the Windows\n platform. On the other Operating Systems the run-time is supporting\n UTF-8 natively.\n \n+@node File content encoding\n+@section File content encoding\n+\n+@noindent\n+For text files it is possible to specify the encoding to use. This is\n+controlled by the by the @samp{GNAT_CCS_ENCODING} environment\n+variable. And if not set @samp{TEXT} is assumed.\n+\n+The possible values are those supported on Windows:\n+\n+@table @samp\n+@item TEXT\n+Translated text mode\n+@item WTEXT\n+Translated unicode encoding\n+@item U16TEXT\n+Unicode 16-bit encoding\n+@item U8TEXT\n+Unicode 8-bit encoding\n+@end table\n+\n+This encoding is only supported on the Windows platform.\n+\n @node Open Modes\n @section Open Modes\n "}, {"sha": "1aba5fdc82b672629c8f72d45dcebf160dd1f030", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -52,6 +52,7 @@\n #endif\n \n #include \"raise.h\"\n+#include <fcntl.h>\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -151,6 +152,39 @@ __gnat_initialize (void *eh ATTRIBUTE_UNUSED)\n        }\n    }\n \n+   /* Set current encoding for the IO.  */\n+   {\n+     char *ccsencoding = getenv (\"GNAT_CCS_ENCODING\");\n+\n+     /* Default CCS Encoding.  */\n+     CurrentCCSEncoding = _O_TEXT;\n+     __gnat_wide_text_translation_required = 0;\n+\n+     if (ccsencoding != NULL)\n+       {\n+\t if (strcmp (ccsencoding, \"U16TEXT\") == 0)\n+           {\n+             CurrentCCSEncoding = _O_U16TEXT;\n+             __gnat_wide_text_translation_required = 1;\n+           }\n+\t else if (strcmp (ccsencoding, \"TEXT\") == 0)\n+           {\n+             CurrentCCSEncoding = _O_TEXT;\n+             __gnat_wide_text_translation_required = 0;\n+           }\n+\t else if (strcmp (ccsencoding, \"WTEXT\") == 0)\n+           {\n+             CurrentCCSEncoding = _O_WTEXT;\n+             __gnat_wide_text_translation_required = 1;\n+           }\n+\t else if (strcmp (ccsencoding, \"U8TEXT\") == 0)\n+           {\n+             CurrentCCSEncoding = _O_U8TEXT;\n+             __gnat_wide_text_translation_required = 1;\n+           }\n+       }\n+   }\n+\n    /* Adjust gnat_argv to support Unicode characters. */\n    {\n      LPWSTR *wargv;"}, {"sha": "e466ee8d179963008ba77c03f5b3c259268dd360", "filename": "gcc/ada/mingw32.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmingw32.h?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 2002-2011, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 2002-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -62,6 +62,8 @@\n #ifdef GNAT_UNICODE_SUPPORT\n \n extern UINT CurrentCodePage;\n+extern UINT CurrentCCSEncoding;\n+extern char __gnat_wide_text_translation_required;\n \n /*  Macros to convert to/from the code page specified in CurrentCodePage.  */\n #define S2WSC(wstr,str,len) \\"}, {"sha": "5a48f0e815c840e5de8d9cd713933ea82f36e681", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -6349,6 +6349,9 @@ package body Sem_Attr is\n \n                            else\n                               Analyze_And_Resolve (Index, Etype (Index_Type));\n+                              if not Is_OK_Static_Expression (Index) then\n+                                 Set_Do_Range_Check (Index);\n+                              end if;\n                            end if;\n \n                            Next (Index);"}, {"sha": "d8cfad9ceecc82ac58993d6fd355b39a21f6a0af", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -7987,14 +7987,14 @@ package body Sem_Ch13 is\n             EN : Node_Id;\n \n          begin\n-            --  Case where we have a predicate static aspect\n+            --  Case where we have a predicate-static aspect\n \n             if PS then\n \n                --  We don't set Has_Static_Predicate_Aspect, since we can have\n                --  any of the three cases (Predicate, Dynamic_Predicate, or\n                --  Static_Predicate) generating a predicate with an expression\n-               --  that is predicate static. We just indicate that we have a\n+               --  that is predicate-static. We just indicate that we have a\n                --  predicate that can be treated as static.\n \n                Set_Has_Static_Predicate (Typ);\n@@ -8030,7 +8030,7 @@ package body Sem_Ch13 is\n                --  First a little fiddling to get a nice location for the\n                --  message. If the expression is of the form (A and then B),\n                --  then use the left operand for the Sloc. This avoids getting\n-               --  confused by a call to a higher level predicate with a less\n+               --  confused by a call to a higher-level predicate with a less\n                --  convenient source location.\n \n                EN := Expr;\n@@ -10348,26 +10348,26 @@ package body Sem_Ch13 is\n    is\n       function All_Static_Case_Alternatives (L : List_Id) return Boolean;\n       --  Given a list of case expression alternatives, returns True if\n-      --  all the alternative are static (have all static choices, and a\n+      --  all the alternatives are static (have all static choices, and a\n       --  static expression).\n \n       function All_Static_Choices (L : List_Id) return Boolean;\n-      --  Returns true if all elements of the list are ok static choices\n+      --  Returns true if all elements of the list are OK static choices\n       --  as defined below for Is_Static_Choice. Used for case expression\n       --  alternatives and for the right operand of a membership test.\n \n       function Is_Static_Choice (N : Node_Id) return Boolean;\n       --  Returns True if N represents a static choice (static subtype, or\n-      --  static subtype indication, or static expression or static range).\n+      --  static subtype indication, or static expression, or static range).\n       --\n       --  Note that this is a bit more inclusive than we actually need\n       --  (in particular membership tests do not allow the use of subtype\n-      --  indications. But that doesn't matter, we have already checked\n+      --  indications). But that doesn't matter, we have already checked\n       --  that the construct is legal to get this far.\n \n       function Is_Type_Ref (N : Node_Id) return Boolean;\n       pragma Inline (Is_Type_Ref);\n-      --  Returns if True if N is a reference to the type for the predicate in\n+      --  Returns True if N is a reference to the type for the predicate in\n       --  the expression (i.e. if it is an identifier whose Chars field matches\n       --  the Nam given in the call). N must not be parenthesized, if the type\n       --  name appears in parens, this routine will return False.\n@@ -10442,7 +10442,7 @@ package body Sem_Ch13 is\n    --  Start of processing for Is_Predicate_Static\n \n    begin\n-      --  Only scalar types can be predicate static\n+      --  Only scalar types can be predicate-static\n \n       if not Is_Scalar_Type (Etype (Expr)) then\n          return False;\n@@ -10519,7 +10519,7 @@ package body Sem_Ch13 is\n       --  One more test that is an implementation artifact caused by the fact\n       --  that we are analyzing not the original expresesion, but the generated\n       --  expression in the body of the predicate function. This can include\n-      --  refereces to inherited predicates, so that the expression we are\n+      --  references to inherited predicates, so that the expression we are\n       --  processing looks like:\n \n       --    expression and then xxPredicate (typ (Inns))\n@@ -10535,7 +10535,7 @@ package body Sem_Ch13 is\n          return True;\n \n       --  That's an exhaustive list of tests, all other cases are not\n-      --  predicate static, so we return False.\n+      --  predicate-static, so we return False.\n \n       else\n          return False;"}, {"sha": "d90a7e534cb2077ec6cbb9aa1b34a9c5dc06ad95", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -2885,12 +2885,6 @@ package body Sem_Ch5 is\n \n             Add_Block_Identifier (Block_Nod, Block_Id);\n \n-            --  Fix the loop scope once the loop statement is relocated inside\n-            --  the block, otherwise the loop and the block end up sharing the\n-            --  same parent scope.\n-\n-            Set_Scope (Ent, Block_Id);\n-\n             --  The expansion of iterator loops generates an iterator in order\n             --  to traverse the elements of a container:\n "}, {"sha": "7ade48345b5bcc6f3c33fed7017f7d6ff14acfd5", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -367,8 +367,8 @@ package Sem_Eval is\n    function Eval_Static_Predicate_Check\n      (N   : Node_Id;\n       Typ : Entity_Id) return Boolean;\n-   --  Evaluate a static predicate check applied to a known at compile time\n-   --  value N, which can be of a discrete, real or string type. The caller\n+   --  Evaluate a static predicate check applied to a known-at-compile-time\n+   --  value N, which can be of a discrete, real, or string type. The caller\n    --  has checked that a static predicate does apply to Typ.\n \n    procedure Fold_Str (N : Node_Id; Val : String_Id; Static : Boolean);"}, {"sha": "a1f6f9fc80c3444accd3aa94e746a197549cd4ae", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 82, "deletions": 9, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -21829,8 +21829,9 @@ package body Sem_Prag is\n       Depends      : Node_Id;\n       --  The corresponding Depends pragma along with its clauses\n \n-      Refined_States : Elist_Id := No_Elist;\n-      --  A list containing all successfully refined states\n+      Matched_Items : Elist_Id := No_Elist;\n+      --  A list containing the entities of all successfully matched items\n+      --  found in pragma Depends.\n \n       Refinements : List_Id := No_List;\n       --  The clauses of pragma Refined_Depends\n@@ -21863,6 +21864,10 @@ package body Sem_Prag is\n          --  Determine whether dependence clause Dep_Clause denotes an abstract\n          --  state that depends on itself (State => State).\n \n+         function Is_Null_Refined_State (Item : Node_Id) return Boolean;\n+         --  Determine whether item Item denotes an abstract state with visible\n+         --  null refinement.\n+\n          procedure Match_Items\n            (Dep_Item : Node_Id;\n             Ref_Item : Node_Id;\n@@ -21887,6 +21892,9 @@ package body Sem_Prag is\n          --  When scenario 8 is in effect, the entity of the abstract state\n          --  denoted by Dep_Item is added to list Refined_States.\n \n+         procedure Record_Item (Item_Id : Entity_Id);\n+         --  Store the entity of an item denoted by Item_Id in Matched_Items\n+\n          ----------------------------\n          -- Is_In_Out_State_Clause --\n          ----------------------------\n@@ -21915,6 +21923,28 @@ package body Sem_Prag is\n             end if;\n          end Is_In_Out_State_Clause;\n \n+         ---------------------------\n+         -- Is_Null_Refined_State --\n+         ---------------------------\n+\n+         function Is_Null_Refined_State (Item : Node_Id) return Boolean is\n+            Item_Id : Entity_Id;\n+\n+         begin\n+            if Is_Entity_Name (Item) then\n+\n+               --  Handle abstract views generated for limited with clauses\n+\n+               Item_Id := Available_View (Entity_Of (Item));\n+\n+               return\n+                 Ekind (Item_Id) = E_Abstract_State\n+                   and then Has_Null_Refinement (Item_Id);\n+            else\n+               return False;\n+            end if;\n+         end Is_Null_Refined_State;\n+\n          -----------------\n          -- Match_Items --\n          -----------------\n@@ -21962,6 +21992,7 @@ package body Sem_Prag is\n                   if Has_Null_Refinement (Dep_Item_Id)\n                     and then (No (Ref_Item) or else Nkind (Ref_Item) = N_Null)\n                   then\n+                     Record_Item (Dep_Item_Id);\n                      Matched := True;\n \n                   --  An abstract state with visible non-null refinement\n@@ -21976,12 +22007,7 @@ package body Sem_Prag is\n                           and then Encapsulating_State (Ref_Item_Id) =\n                                      Dep_Item_Id\n                         then\n-                           --  Record the successfully refined state\n-\n-                           if not Contains (Refined_States, Dep_Item_Id) then\n-                              Add_Item (Dep_Item_Id, Refined_States);\n-                           end if;\n-\n+                           Record_Item (Dep_Item_Id);\n                            Matched := True;\n                         end if;\n                      end if;\n@@ -21992,6 +22018,7 @@ package body Sem_Prag is\n                   elsif Is_Entity_Name (Ref_Item)\n                     and then Entity_Of (Ref_Item) = Dep_Item_Id\n                   then\n+                     Record_Item (Dep_Item_Id);\n                      Matched := True;\n                   end if;\n \n@@ -22000,11 +22027,23 @@ package body Sem_Prag is\n                elsif Is_Entity_Name (Ref_Item)\n                  and then Entity_Of (Ref_Item) = Dep_Item_Id\n                then\n+                  Record_Item (Dep_Item_Id);\n                   Matched := True;\n                end if;\n             end if;\n          end Match_Items;\n \n+         -----------------\n+         -- Record_Item --\n+         -----------------\n+\n+         procedure Record_Item (Item_Id : Entity_Id) is\n+         begin\n+            if not Contains (Matched_Items, Item_Id) then\n+               Add_Item (Item_Id, Matched_Items);\n+            end if;\n+         end Record_Item;\n+\n          --  Local variables\n \n          Clause_Matched  : Boolean := False;\n@@ -22108,7 +22147,41 @@ package body Sem_Prag is\n          if not Clause_Matched\n            and then Is_In_Out_State_Clause\n            and then Contains\n-                      (Refined_States, Available_View (Entity_Of (Dep_Input)))\n+                      (Matched_Items, Available_View (Entity_Of (Dep_Input)))\n+         then\n+            Clause_Matched := True;\n+         end if;\n+\n+         --  A clause where the input is an abstract state with visible null\n+         --  refinement is implicitly matched when the output has already been\n+         --  matched in a previous clause.\n+\n+         --    Depends         => (Output => State)  --  implicitly OK\n+         --    Refined_State   => (State => null)\n+         --    Refined_Depends => (Output => ...)\n+\n+         if not Clause_Matched\n+           and then Is_Null_Refined_State (Dep_Input)\n+           and then Is_Entity_Name (Dep_Output)\n+           and then Contains\n+                      (Matched_Items, Available_View (Entity_Of (Dep_Output)))\n+         then\n+            Clause_Matched := True;\n+         end if;\n+\n+         --  A clause where the output is an abstract state with visible null\n+         --  refinement is implicitly matched when the input has already been\n+         --  matched in a previous clause.\n+\n+         --    Depends           => (State => Input)  --  implicitly OK\n+         --    Refined_State     => (State => null)\n+         --    Refined_Depends   => (... => Input)\n+\n+         if not Clause_Matched\n+           and then Is_Null_Refined_State (Dep_Output)\n+           and then Is_Entity_Name (Dep_Input)\n+           and then Contains\n+                      (Matched_Items, Available_View (Entity_Of (Dep_Input)))\n          then\n             Clause_Matched := True;\n          end if;"}, {"sha": "34f68fe63c9f012f5d67baadac57cca3f3bfe51e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -1718,6 +1718,17 @@ package body Sem_Util is\n          else\n             Error_Msg_NE\n               (\"??static expression fails predicate check on &\", Expr, Typ);\n+\n+            --  We now reset the static expression indication on the expression\n+            --  since it is no longer static if it fails a predicate test. We\n+            --  do not do this if the predicate was officially dynamic, since\n+            --  dynamic predicates don't affect legality in this manner.\n+\n+            if not Has_Dynamic_Predicate_Aspect (Typ) then\n+               Error_Msg_N\n+                 (\"\\??expression is no longer considered static\", Expr);\n+               Set_Is_Static_Expression (Expr, False);\n+            end if;\n          end if;\n       end if;\n    end Check_Expression_Against_Static_Predicate;"}, {"sha": "590a2ea5b984bf1d426a0f415aad2ec675e743c1", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c624298a19aa42cc335c33b980a17da2bbd7fb94/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=c624298a19aa42cc335c33b980a17da2bbd7fb94", "patch": "@@ -131,6 +131,7 @@ extern struct tm *localtime_r(const time_t *, struct tm *);\n #if defined (WINNT) || defined (__CYGWIN__)\n \n const char __gnat_text_translation_required = 1;\n+char __gnat_wide_text_translation_required = 0;\n \n #ifdef __CYGWIN__\n #define WIN_SETMODE setmode\n@@ -154,7 +155,7 @@ __gnat_set_text_mode (int handle)\n void\n __gnat_set_wide_text_mode (int handle)\n {\n-  WIN_SETMODE (handle, _O_U16TEXT);\n+  WIN_SETMODE (handle, CurrentCCSEncoding);\n }\n \n #ifdef __CYGWIN__\n@@ -240,6 +241,7 @@ __gnat_ttyname (int filedes)\n #else\n \n const char __gnat_text_translation_required = 0;\n+const char __gnat_wide_text_translation_required = 0;\n \n /* These functions do nothing in non-DOS systems. */\n "}]}