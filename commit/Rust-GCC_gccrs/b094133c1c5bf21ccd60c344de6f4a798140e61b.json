{"sha": "b094133c1c5bf21ccd60c344de6f4a798140e61b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5NDEzM2MxYzViZjIxY2NkNjBjMzQ0ZGU2ZjRhNzk4MTQwZTYxYg==", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T12:36:43Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:44:51Z"}, "message": "arm: MVE: Fix constant load pattern\n\nThis patch fixes the constant load pattern for MVE, this was not accounting\ncorrectly for label + offset cases.\n\nAdded test that ICE'd before and removed the scan assemblers for the mve_vector*\ntests as they were too fragile.\n\ngcc/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm.c (output_move_neon): Deal with label + offset cases.\n\t* config/arm/mve.md (*mve_mov<mode>): Handle const vectors.\n\ngcc/testsuite/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/mve_load_from_array.c: New test.\n\t* gcc.target/arm/mve/intrinsics/mve_vector_float.c: Remove\n\tscan-assembler.\n\t* gcc.target/arm/mve/intrinsics/mve_vector_float1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vector_int1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vector_int2.c: Likewise.", "tree": {"sha": "d594efba4e1d7067fac11bbd1c4394aed05cf6f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d594efba4e1d7067fac11bbd1c4394aed05cf6f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b094133c1c5bf21ccd60c344de6f4a798140e61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b094133c1c5bf21ccd60c344de6f4a798140e61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b094133c1c5bf21ccd60c344de6f4a798140e61b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b094133c1c5bf21ccd60c344de6f4a798140e61b/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce755a80d178e0e871b723d7b30939c754db175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce755a80d178e0e871b723d7b30939c754db175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce755a80d178e0e871b723d7b30939c754db175"}], "stats": {"total": 141, "additions": 59, "deletions": 82}, "files": [{"sha": "b76a51a37580f144feb7070fe003e71e01e3c06b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -1,3 +1,8 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.c (output_move_neon): Deal with label + offset cases.\n+\t* config/arm/mve.md (*mve_mov<mode>): Handle const vectors.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm_mve.h: Remove use of typeof for addr pointer parameters"}, {"sha": "1af9d5cf145f6d01e364a1afd7ceb3df5da86c9a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -20122,52 +20122,43 @@ output_move_neon (rtx *operands)\n \t  break;\n \t}\n       /* Fall through.  */\n-    case LABEL_REF:\n     case PLUS:\n+      addr = XEXP (addr, 0);\n+      /* Fall through.  */\n+    case LABEL_REF:\n       {\n \tint i;\n \tint overlap = -1;\n-\tif (TARGET_HAVE_MVE && !BYTES_BIG_ENDIAN\n-\t    && GET_CODE (addr) != LABEL_REF)\n+\tfor (i = 0; i < nregs; i++)\n \t  {\n-\t    sprintf (buff, \"v%srw.32\\t%%q0, %%1\", load ? \"ld\" : \"st\");\n-\t    ops[0] = reg;\n-\t    ops[1] = mem;\n-\t    output_asm_insn (buff, ops);\n-\t  }\n-\telse\n-\t  {\n-\t    for (i = 0; i < nregs; i++)\n+\t    /* We're only using DImode here because it's a convenient\n+\t       size.  */\n+\t    ops[0] = gen_rtx_REG (DImode, REGNO (reg) + 2 * i);\n+\t    ops[1] = adjust_address (mem, DImode, 8 * i);\n+\t    if (reg_overlap_mentioned_p (ops[0], mem))\n \t      {\n-\t\t/* We're only using DImode here because it's a convenient\n-\t\t   size.  */\n-\t\tops[0] = gen_rtx_REG (DImode, REGNO (reg) + 2 * i);\n-\t\tops[1] = adjust_address (mem, DImode, 8 * i);\n-\t\tif (reg_overlap_mentioned_p (ops[0], mem))\n-\t\t  {\n-\t\t    gcc_assert (overlap == -1);\n-\t\t    overlap = i;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    if (TARGET_HAVE_MVE && GET_CODE (addr) == LABEL_REF)\n-\t\t      sprintf (buff, \"v%sr.64\\t%%P0, %%1\", load ? \"ld\" : \"st\");\n-\t\t    else\n-\t\t      sprintf (buff, \"v%sr%%?\\t%%P0, %%1\", load ? \"ld\" : \"st\");\n-\t\t    output_asm_insn (buff, ops);\n-\t\t  }\n+\t\tgcc_assert (overlap == -1);\n+\t\toverlap = i;\n \t      }\n-\t    if (overlap != -1)\n+\t    else\n \t      {\n-\t\tops[0] = gen_rtx_REG (DImode, REGNO (reg) + 2 * overlap);\n-\t\tops[1] = adjust_address (mem, SImode, 8 * overlap);\n \t\tif (TARGET_HAVE_MVE && GET_CODE (addr) == LABEL_REF)\n-\t\t  sprintf (buff, \"v%sr.32\\t%%P0, %%1\", load ? \"ld\" : \"st\");\n+\t\t  sprintf (buff, \"v%sr.64\\t%%P0, %%1\", load ? \"ld\" : \"st\");\n \t\telse\n \t\t  sprintf (buff, \"v%sr%%?\\t%%P0, %%1\", load ? \"ld\" : \"st\");\n \t\toutput_asm_insn (buff, ops);\n \t      }\n \t  }\n+\tif (overlap != -1)\n+\t  {\n+\t    ops[0] = gen_rtx_REG (DImode, REGNO (reg) + 2 * overlap);\n+\t    ops[1] = adjust_address (mem, SImode, 8 * overlap);\n+\t    if (TARGET_HAVE_MVE && GET_CODE (addr) == LABEL_REF)\n+\t      sprintf (buff, \"v%sr.32\\t%%P0, %%1\", load ? \"ld\" : \"st\");\n+\t    else\n+\t      sprintf (buff, \"v%sr%%?\\t%%P0, %%1\", load ? \"ld\" : \"st\");\n+\t    output_asm_insn (buff, ops);\n+\t  }\n \n         return \"\";\n       }"}, {"sha": "10abc3fae3709891346b63213afb1fe3754af41a", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -695,9 +695,9 @@\n     case 2:\n       return \"vmov\\t%Q0, %R0, %e1  @ <mode>\\;vmov\\t%J0, %K0, %f1\";\n     case 4:\n-      if ((TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\n-\t  || (MEM_P (operands[1])\n-\t      && GET_CODE (XEXP (operands[1], 0)) == LABEL_REF))\n+      if (MEM_P (operands[1])\n+\t  && (GET_CODE (XEXP (operands[1], 0)) == LABEL_REF\n+\t      || GET_CODE (XEXP (operands[1], 0)) == CONST))\n \treturn output_move_neon (operands);\n       else\n \treturn \"vldrb.8 %q0, %E1\";"}, {"sha": "3f3cf24c8a97f34362a2903a064162e5e0f1bf33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -1,3 +1,12 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_load_from_array.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_float.c: Remove\n+\tscan-assembler.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_float1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_int1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_vector_int2.c: Likewise.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vmulq_n_f16.c: Fix test."}, {"sha": "dcf6225a98f3aa7cbfe554b8946b067711e78c23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_load_from_array.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_load_from_array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_load_from_array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_load_from_array.c?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (void)\n+{\n+  static uint16_t const a[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+  return vld1q (a);\n+}\n+\n+uint16_t b[] = {0, 1, 2, 3, 4, 5, 6, 7};\n+void\n+bar (uint16x8_t value)\n+{\n+  vst1q (b, value);\n+}"}, {"sha": "881157fc1be2e3ca33666eaf7544cd0d020d0d4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vector_float.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float.c?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -11,17 +11,9 @@ foo32 (float32x4_t value)\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldmia.*\" }  } */\n-\n float16x8_t\n foo16 (float16x8_t value)\n {\n   float16x8_t b = value;\n   return b;\n }\n-\n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldmia.*\" }  } */"}, {"sha": "9515ed622ace8e51cf87f05aab85d0e501f8dd44", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vector_float1.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float1.c?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -13,10 +13,6 @@ foo32 ()\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldmia.*\" }  } */\n-\n float16x8_t value1;\n \n float16x8_t\n@@ -25,7 +21,3 @@ foo16 ()\n   float16x8_t b = value1;\n   return b;\n }\n-\n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldmia.*\" }  } */"}, {"sha": "e54516b25309a64355d6584d2d9a5aed6ee9611e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vector_int1.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_int1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_int1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_int1.c?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -16,39 +16,24 @@ foo8 (void)\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldrb.8*\" }  } */\n-\n int16x8_t\n foo16 (void)\n {\n   int16x8_t b = value2;\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldrb.8*\" }  } */\n-\n int32x4_t\n foo32 (void)\n {\n   int32x4_t b = value3;\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldrb.8\" }  } */\n-\n int64x2_t\n foo64 (void)\n {\n   int64x2_t b = value4;\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldrb.8\" }  } */"}, {"sha": "2bd9bdfed92e7342b8f87551ed83b6a45cc577eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vector_int2.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_int2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b094133c1c5bf21ccd60c344de6f4a798140e61b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_int2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_int2.c?ref=b094133c1c5bf21ccd60c344de6f4a798140e61b", "patch": "@@ -11,39 +11,23 @@ foo8 ()\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldr.64.*\" }  } */\n-\n int16x8_t\n foo16 (int16x8_t value)\n {\n   int16x8_t b = {1, 2, 3};\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldr.64.*\" }  } */\n-\n int32x4_t\n foo32 (int32x4_t value)\n {\n   int32x4_t b = {1, 2};\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldr.64.*\" }  } */\n-\n int64x2_t\n foo64 (int64x2_t value)\n {\n   int64x2_t b = {1};\n   return b;\n }\n-\n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldr.64.*\" }  } */"}]}