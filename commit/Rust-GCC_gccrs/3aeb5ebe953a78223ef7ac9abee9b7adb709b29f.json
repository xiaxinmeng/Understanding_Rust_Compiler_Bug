{"sha": "3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlYjVlYmU5NTNhNzgyMjNlZjdhYzlhYmVlOWI3YWRiNzA5YjI5Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-06T10:33:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-10T13:34:59Z"}, "message": "[Ada] Remove more references to ASIS\n\n2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* atree.adb, contracts.adb, debug.adb, freeze.adb,\n\trepinfo-input.adb, repinfo.adb, sem_attr.adb, sem_ch10.adb,\n\tsem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_ch6.adb,\n\tsem_ch8.adb, sem_ch9.adb, sem_disp.adb, sem_eval.adb,\n\tsem_prag.adb: Remove more references to ASIS.", "tree": {"sha": "528417aa5a9fd8e69a7ce0d7ec10bb608a99c43a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/528417aa5a9fd8e69a7ce0d7ec10bb608a99c43a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53b03b5a7b2cdb00aed0618117f6b855eb3891a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53b03b5a7b2cdb00aed0618117f6b855eb3891a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53b03b5a7b2cdb00aed0618117f6b855eb3891a"}], "stats": {"total": 242, "additions": 60, "deletions": 182}, "files": [{"sha": "5c60a472b1986d758b496d70b82933839418054f", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -960,9 +960,9 @@ package body Atree is\n \n             --  The following code is a bit kludgy. It would be cleaner to\n             --  Add an entry Change_Expanded_Name_To_Selected_Component to\n-            --  Sinfo.CN, but that's an earthquake, because it has the wrong\n-            --  license, and Atree is used outside the compiler, e.g. in the\n-            --  binder and in ASIS, so we don't want to add that dependency.\n+            --  Sinfo.CN, but that's delicate because Atree is used in the\n+            --  binder, so we don't want to add that dependency.\n+            --  ??? Revisit now that ASIS is no longer using this unit.\n \n             --  Consequently we have no choice but to hold our noses and do\n             --  the change manually. At least we are Atree, so this odd use"}, {"sha": "79078df3aef65d4b855474dce4d3a89f4a2238af", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -575,7 +575,7 @@ package body Contracts is\n       elsif Present (Items) then\n \n          --  Do not analyze the pre/postconditions of an entry declaration\n-         --  unless annotating the original tree for ASIS or GNATprove. The\n+         --  unless annotating the original tree for GNATprove. The\n          --  real analysis occurs when the pre/postconditons are relocated to\n          --  the contract wrapper procedure (see Build_Contract_Wrapper).\n \n@@ -635,7 +635,7 @@ package body Contracts is\n             if Prag_Nam = Name_Contract_Cases then\n \n                --  Do not analyze the contract cases of an entry declaration\n-               --  unless annotating the original tree for ASIS or GNATprove.\n+               --  unless annotating the original tree for GNATprove.\n                --  The real analysis occurs when the contract cases are moved\n                --  to the contract wrapper procedure (Build_Contract_Wrapper).\n "}, {"sha": "1d614eb70c5bb3d0609cc377f75f72d8db5ac919", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -118,7 +118,7 @@ package body Debug is\n    --  d.y  Disable implicit pragma Elaborate_All on task bodies\n    --  d.z  Restore previous support for frontend handling of Inline_Always\n \n-   --  d.A  Read/write Aspect_Specifications hash table to tree\n+   --  d.A\n    --  d.B  Generate a bug box on abort_statement\n    --  d.C  Generate concatenation call, do not generate inline code\n    --  d.D  Disable errors on use of overriding keyword in Ada 95 mode\n@@ -847,11 +847,6 @@ package body Debug is\n    --       handling of Inline_Always by the front end on such targets. For the\n    --       targets that do not use the GCC back end, this switch is ignored.\n \n-   --  d.A  There seems to be a problem with ASIS if we activate the circuit\n-   --       for reading and writing the aspect specification hash table, so\n-   --       for now, this is controlled by the debug flag d.A. The hash table\n-   --       is only written and read if this flag is set.\n-\n    --  d.B  Generate a bug box when we see an abort_statement, even though\n    --       there is no bug. Useful for testing Comperr.Compiler_Abort: write\n    --       some code containing an abort_statement, and compile it with"}, {"sha": "760cf7c1d536586ab48a4b0c7460675f893429e6", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -4224,14 +4224,6 @@ package body Freeze is\n                      elsif CodePeer_Mode then\n                         null;\n \n-                     --  Omit check if component has a generic type. This can\n-                     --  happen in an instantiation within a generic in ASIS\n-                     --  mode, where we force freeze actions without full\n-                     --  expansion.\n-\n-                     elsif Is_Generic_Type (Etype (Comp)) then\n-                        null;\n-\n                      --  Do the check\n \n                      elsif not"}, {"sha": "ed25be238c75c7f5b39ecf8d7686df0e78032b8a", "filename": "gcc/ada/repinfo-input.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Frepinfo-input.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Frepinfo-input.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo-input.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -36,13 +36,12 @@ with Namet;    use Namet;\n with Output;   use Output;\n with Snames;   use Snames;\n with Table;\n+with Ttypes;\n \n package body Repinfo.Input is\n \n-   SSU : constant := 8;\n-   --  Value for Storage_Unit, we do not want to get this from TTypes, since\n-   --  this introduces problematic dependencies in ASIS, and in any case this\n-   --  value is assumed to be 8 for the implementation of the DDA.\n+   SSU : Pos renames Ttypes.System_Storage_Unit;\n+   --  Value for Storage_Unit\n \n    type JSON_Entity_Kind is (JE_Record_Type, JE_Array_Type, JE_Other);\n    --  Kind of an entiy"}, {"sha": "8a534867f9bb1f3fafb34438a05d54c03baf24bf", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 21, "deletions": 48, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -30,34 +30,34 @@\n ------------------------------------------------------------------------------\n \n with Alloc;\n-with Atree;   use Atree;\n-with Casing;  use Casing;\n-with Debug;   use Debug;\n-with Einfo;   use Einfo;\n-with Lib;     use Lib;\n-with Namet;   use Namet;\n-with Nlists;  use Nlists;\n-with Opt;     use Opt;\n-with Output;  use Output;\n-with Sem_Aux; use Sem_Aux;\n-with Sinfo;   use Sinfo;\n-with Sinput;  use Sinput;\n-with Snames;  use Snames;\n-with Stringt; use Stringt;\n+with Atree;    use Atree;\n+with Casing;   use Casing;\n+with Debug;    use Debug;\n+with Einfo;    use Einfo;\n+with Lib;      use Lib;\n+with Namet;    use Namet;\n+with Nlists;   use Nlists;\n+with Opt;      use Opt;\n+with Output;   use Output;\n+with Sem_Aux;  use Sem_Aux;\n+with Sem_Eval; use Sem_Eval;\n+with Sinfo;    use Sinfo;\n+with Sinput;   use Sinput;\n+with Snames;   use Snames;\n+with Stringt;  use Stringt;\n with Table;\n-with Uname;   use Uname;\n-with Urealp;  use Urealp;\n+with Ttypes;\n+with Uname;    use Uname;\n+with Urealp;   use Urealp;\n \n with Ada.Unchecked_Conversion;\n \n with GNAT.HTable;\n \n package body Repinfo is\n \n-   SSU : constant := 8;\n-   --  Value for Storage_Unit, we do not want to get this from TTypes, since\n-   --  this introduces problematic dependencies in ASIS, and in any case this\n-   --  value is assumed to be 8 for the implementation of the DDA.\n+   SSU : Pos renames Ttypes.System_Storage_Unit;\n+   --  Value for Storage_Unit\n \n    ---------------------------------------\n    -- Representation of GCC Expressions --\n@@ -147,7 +147,7 @@ package body Repinfo is\n    function Back_End_Layout return Boolean;\n    --  Test for layout mode, True = back end, False = front end. This function\n    --  is used rather than checking the configuration parameter because we do\n-   --  not want Repinfo to depend on Targparm (for ASIS)\n+   --  not want Repinfo to depend on Targparm.\n \n    procedure List_Entities\n      (Ent              : Entity_Id;\n@@ -830,36 +830,9 @@ package body Repinfo is\n    -------------------------\n \n    procedure List_Linker_Section (Ent : Entity_Id) is\n-      function Expr_Value_S (N : Node_Id) return Node_Id;\n-      --  Returns the folded value of the expression. This function is called\n-      --  in instances where it has already been determined that the expression\n-      --  is static or its value is known at compile time. This version is used\n-      --  for string types and returns the corresponding N_String_Literal node.\n-      --  NOTE: This is an exact copy of Sem_Eval.Expr_Value_S. Licensing stops\n-      --  Repinfo from within Sem_Eval. Once ASIS is removed, and the licenses\n-      --  are modified, Repinfo should be able to rely on Sem_Eval.\n-\n-      ------------------\n-      -- Expr_Value_S --\n-      ------------------\n-\n-      function Expr_Value_S (N : Node_Id) return Node_Id is\n-      begin\n-         if Nkind (N) = N_String_Literal then\n-            return N;\n-         else\n-            pragma Assert (Ekind (Entity (N)) = E_Constant);\n-            return Expr_Value_S (Constant_Value (Entity (N)));\n-         end if;\n-      end Expr_Value_S;\n-\n-      --  Local variables\n-\n       Args : List_Id;\n       Sect : Node_Id;\n \n-   --  Start of processing for List_Linker_Section\n-\n    begin\n       if Present (Linker_Section_Pragma (Ent)) then\n          Args := Pragma_Argument_Associations (Linker_Section_Pragma (Ent));"}, {"sha": "e802620e1541440112a2306aa8a0bc5fbe9e5eac", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -7659,9 +7659,7 @@ package body Sem_Attr is\n          --  We skip evaluation if the expander is not active. This is not just\n          --  an optimization. It is of key importance that we not rewrite the\n          --  attribute in a generic template, since we want to pick up the\n-         --  setting of the check in the instance, Testing Expander_Active\n-         --  might seem an easy way of doing this, but we need to account for\n-         --  ASIS needs, so check explicitly for a generic context.\n+         --  setting of the check in the instance.\n \n          if not Inside_A_Generic then\n             declare\n@@ -8420,8 +8418,8 @@ package body Sem_Attr is\n       when Attribute_Constrained =>\n \n          --  The expander might fold it and set the static flag accordingly,\n-         --  but with expansion disabled (as in ASIS), it remains as an\n-         --  attribute reference, and this reference is not static.\n+         --  but with expansion disabled, it remains as an attribute reference,\n+         --  and this reference is not static.\n \n          Set_Is_Static_Expression (N, False);\n "}, {"sha": "33ffbf9e6352d0bc5e28686b70e021d0410206ce", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -6854,8 +6854,7 @@ package body Sem_Ch10 is\n             --  as a small optimization to subsequent handling of private_with\n             --  clauses in other nested packages. We replace the clause with\n             --  a null statement, which is otherwise ignored by the rest of\n-            --  the compiler, so that ASIS tools can reconstruct the source.\n-            --  Is this still needed now that ASIS mode is removed???\n+            --  the compiler.\n \n             if In_Regular_With_Clause (Entity (Name (Item))) then\n                declare"}, {"sha": "cb33439f352a4046e76ecdbbb2cf920f4030c5fc", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -3624,7 +3624,6 @@ package body Sem_Ch13 is\n                   Args      : List_Id;\n                   Comp_Expr : Node_Id;\n                   Comp_Assn : Node_Id;\n-                  New_Expr  : Node_Id;\n \n                begin\n                   Args := New_List;\n@@ -3642,18 +3641,14 @@ package body Sem_Ch13 is\n                      goto Continue;\n                   end if;\n \n-                  --  Make pragma expressions refer to the original aspect\n-                  --  expressions through the Original_Node link. This is used\n-                  --  in semantic analysis for ASIS mode, so that the original\n-                  --  expression also gets analyzed.\n-                  --  Is this still needed???\n+                  --  Create the list of arguments for building the Test_Case\n+                  --  pragma.\n \n                   Comp_Expr := First (Expressions (Expr));\n                   while Present (Comp_Expr) loop\n-                     New_Expr := Relocate_Node (Comp_Expr);\n                      Append_To (Args,\n                        Make_Pragma_Argument_Association (Sloc (Comp_Expr),\n-                         Expression => New_Expr));\n+                         Expression => Relocate_Node (Comp_Expr)));\n                      Next (Comp_Expr);\n                   end loop;\n \n@@ -11481,12 +11476,9 @@ package body Sem_Ch13 is\n       --  the primitives of the interfaces with the primitives that cover them.\n       --  Note: These entities were originally generated only when generating\n       --  code because their main purpose was to provide support to initialize\n-      --  the secondary dispatch tables. They are now generated also when\n-      --  compiling with no code generation to provide ASIS the relationship\n-      --  between interface primitives and tagged type primitives. They are\n-      --  also used to locate primitives covering interfaces when processing\n-      --  generics (see Derive_Subprograms).\n-      --  ??? Revisit now that ASIS mode is gone.\n+      --  the secondary dispatch tables. They are also used to locate\n+      --  primitives covering interfaces when processing generics (see\n+      --  Derive_Subprograms).\n \n       --  This is not needed in the generic case\n \n@@ -11771,8 +11763,6 @@ package body Sem_Ch13 is\n                   --  the list since it would invalidate the tree.\n                   --  So we have to rewrite the variant part with a Rewrite\n                   --  call that replaces it with a copy and clobber the copy.\n-                  --  This is no longer needed for ASIS, but possibly for\n-                  --  GNATprove???\n \n                   if not Expander_Active then\n                      declare\n@@ -11842,8 +11832,6 @@ package body Sem_Ch13 is\n \n                --  We only want to do this if the expander is active, since\n                --  we do not want to clobber the tree.\n-               --  This is no longer needed for ASIS, is this needed for\n-               --  GNATprove_Mode???\n \n                if Expander_Active then\n                   declare"}, {"sha": "0c79faced9de05c56973965b70e1cf08d9aae1b3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -11287,29 +11287,6 @@ package body Sem_Ch3 is\n \n             if Present (Acc_Def) then\n                Create_Extra_Formals (Designated_Type (Anon_Access));\n-\n-            --  If an access to object, preserve entity of designated type,\n-            --  for ASIS use, before rewriting the component definition.\n-            --  Is this still needed???\n-\n-            else\n-               declare\n-                  Desig : Entity_Id;\n-\n-               begin\n-                  Desig := Entity (Subtype_Indication (Type_Def));\n-\n-                  --  If the access definition is to the current record,\n-                  --  the visible entity at this point is an incomplete\n-                  --  type. Retrieve the full view to simplify ASIS queries\n-\n-                  if Ekind (Desig) = E_Incomplete_Type then\n-                     Desig := Full_View (Desig);\n-                  end if;\n-\n-                  Set_Entity\n-                    (Subtype_Mark (Access_Definition (Comp_Def)), Desig);\n-               end;\n             end if;\n \n             Rewrite (Comp_Def,"}, {"sha": "35119fb686f7605226280bffc9d87b4e8325b32b", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -2226,10 +2226,10 @@ package body Sem_Ch5 is\n         and then (Nkind (Parent (N)) /= N_Quantified_Expression\n                    or else Operating_Mode = Check_Semantics)\n \n-        --  Do not perform this expansion for ASIS and when expansion is\n-        --  disabled, where the temporary may hide the transformation of a\n-        --  selected component into a prefixed function call, and references\n-        --  need to see the original expression.\n+        --  Do not perform this expansion when expansion is disabled, where the\n+        --  temporary may hide the transformation of a selected component into\n+        --  a prefixed function call, and references need to see the original\n+        --  expression.\n \n         and then Expander_Active\n       then\n@@ -4108,8 +4108,8 @@ package body Sem_Ch5 is\n                   --  This is the one case where we remove dead code in the\n                   --  semantics as opposed to the expander, and we do not want\n                   --  to remove code if we are not in code generation mode,\n-                  --  since this messes up the ASIS trees or loses useful\n-                  --  information in the CodePeer tree.\n+                  --  since this messes up the tree or loses useful information\n+                  --  for CodePeer.\n \n                   --  Note that one might react by moving the whole circuit to\n                   --  exp_ch5, but then we lose the warning in -gnatc mode."}, {"sha": "787ca9bf32dbb04db88bda76637f6b23ece1cb98", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -421,15 +421,6 @@ package body Sem_Ch6 is\n          Relocate_Pragmas_To_Body (N);\n          Analyze (N);\n \n-         --  Once the aspects of the generated body have been analyzed, create\n-         --  a copy for ASIS purposes and associate it with the original node.\n-         --  Is this still needed???\n-\n-         if Has_Aspects (N) then\n-            Set_Aspect_Specifications (Orig_N,\n-              New_Copy_List_Tree (Aspect_Specifications (N)));\n-         end if;\n-\n          --  Prev is the previous entity with the same name, but it is can\n          --  be an unrelated spec that is not completed by the expression\n          --  function. In that case the relevant entity is the one in the body.\n@@ -483,15 +474,6 @@ package body Sem_Ch6 is\n \n          Analyze (N);\n \n-         --  Once the aspects of the generated spec have been analyzed, create\n-         --  a copy for ASIS purposes and associate it with the original node.\n-         --  Is this still needed???\n-\n-         if Has_Aspects (N) then\n-            Set_Aspect_Specifications (Orig_N,\n-              New_Copy_List_Tree (Aspect_Specifications (N)));\n-         end if;\n-\n          --  If aspect SPARK_Mode was specified on the body, it needs to be\n          --  repeated both on the generated spec and the body.\n "}, {"sha": "555862b76f0125032d566c6a3b4e63f5ccc68be4", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -899,13 +899,6 @@ package body Sem_Ch8 is\n             T := Defining_Identifier (Dec);\n             Set_Etype (Nam, T);\n          end if;\n-\n-         --  Complete analysis of the subtype mark in any case, for ASIS use\n-\n-         if Present (Subtype_Mark (N)) then\n-            Find_Type (Subtype_Mark (N));\n-         end if;\n-\n       elsif Present (Subtype_Mark (N))\n         or else not Present (Access_Definition (N))\n       then\n@@ -7595,8 +7588,7 @@ package body Sem_Ch8 is\n                   --  routines, but this is too tricky for that.\n \n                   --  Note that using Rewrite would be wrong, because we would\n-                  --  have a tree where the original node is unanalyzed, and\n-                  --  this violates the required interface for ASIS.\n+                  --  have a tree where the original node is unanalyzed.\n \n                   Replace (P,\n                     Make_Function_Call (Sloc (P), Name => Nam));\n@@ -7646,9 +7638,9 @@ package body Sem_Ch8 is\n \n             --  It is not an error if the prefix is the current instance of\n             --  type name, e.g. the expression of a type aspect, when it is\n-            --  analyzed for ASIS use, or within a generic unit. We still\n-            --  have to verify that a component of that name exists, and\n-            --  decorate the node accordingly.\n+            --  analyzed within a generic unit. We still have to verify that a\n+            --  component of that name exists, and decorate the node\n+            --  accordingly.\n \n             elsif Is_Entity_Name (P) and then Is_Current_Instance (P) then\n                declare"}, {"sha": "f16a48dfb15812066db23e0a31475fa76175af0d", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -1297,7 +1297,7 @@ package body Sem_Ch9 is\n                         Set_Analyzed (Def, False);\n \n                         --  Keep the original subtree to ensure a properly\n-                        --  formed tree (e.g. for ASIS use).\n+                        --  formed tree.\n \n                         Rewrite\n                           (Discrete_Subtype_Definition (Index_Spec), Def);\n@@ -3478,7 +3478,7 @@ package body Sem_Ch9 is\n          --  The primitive operations of a tagged synchronized type are placed\n          --  on the Corresponding_Record for proper dispatching, but are\n          --  attached to the synchronized type itself when expansion is\n-         --  disabled, for ASIS use.\n+         --  disabled.\n \n          Set_Direct_Primitive_Operations (T, New_Elmt_List);\n "}, {"sha": "a2fbcfcff3956329a22e2aab8eefe4304b913475", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -1482,22 +1482,6 @@ package body Sem_Disp is\n             end if;\n          end if;\n \n-      --  If the tagged type is a concurrent type then we must be compiling\n-      --  with no code generation (we are either compiling a generic unit or\n-      --  compiling under -gnatc mode) because we have previously tested that\n-      --  no serious errors has been reported. In this case we do not add the\n-      --  primitive to the list of primitives of Tagged_Type but we leave the\n-      --  primitive decorated as a dispatching operation to be able to analyze\n-      --  and report errors associated with the Object.Operation notation.\n-\n-      elsif Is_Concurrent_Type (Tagged_Type) then\n-         pragma Assert (not Expander_Active);\n-\n-         --  Attach operation to list of primitives of the synchronized type\n-         --  itself, for ASIS use.\n-\n-         Add_Dispatching_Operation (Tagged_Type, Subp);\n-\n       --  If no old subprogram, then we add this as a dispatching operation,\n       --  but we avoid doing this if an error was posted, to prevent annoying\n       --  cascaded errors."}, {"sha": "f3c09f9181a0b4402560150d209f53d6dc5b98e3", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -4640,8 +4640,8 @@ package body Sem_Eval is\n          return;\n       end if;\n \n-      --  If we are folding a named number, retain the entity in the literal,\n-      --  for ASIS use.\n+      --  If we are folding a named number, retain the entity in the literal\n+      --  in the original tree.\n \n       if Is_Entity_Name (N) and then Ekind (Entity (N)) = E_Named_Integer then\n          Ent := Entity (N);\n@@ -4655,8 +4655,8 @@ package body Sem_Eval is\n \n       --  For a result of type integer, substitute an N_Integer_Literal node\n       --  for the result of the compile time evaluation of the expression.\n-      --  For ASIS use, set a link to the original named number when not in\n-      --  a generic context.\n+      --  Set a link to the original named number when not in a generic context\n+      --  for reference in the original tree.\n \n       if Is_Integer_Type (Typ) then\n          Rewrite (N, Make_Integer_Literal (Loc, Val));\n@@ -4702,8 +4702,8 @@ package body Sem_Eval is\n          return;\n       end if;\n \n-      --  If we are folding a named number, retain the entity in the literal,\n-      --  for ASIS use.\n+      --  If we are folding a named number, retain the entity in the literal\n+      --  in the original tree.\n \n       if Is_Entity_Name (N) and then Ekind (Entity (N)) = E_Named_Real then\n          Ent := Entity (N);\n@@ -4713,7 +4713,7 @@ package body Sem_Eval is\n \n       Rewrite (N, Make_Real_Literal (Loc, Realval => Val));\n \n-      --  Set link to original named number, for ASIS use\n+      --  Set link to original named number\n \n       Set_Original_Entity (N, Ent);\n "}, {"sha": "2dfe9e06aba78fba50d25632dc5384d0d0bbee83", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aeb5ebe953a78223ef7ac9abee9b7adb709b29f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3aeb5ebe953a78223ef7ac9abee9b7adb709b29f", "patch": "@@ -30510,8 +30510,7 @@ package body Sem_Prag is\n    begin\n       --  Use the expression of the original aspect when analyzing the template\n       --  of a generic unit. In both cases the aspect's tree must be decorated\n-      --  to allow for ASIS queries or to save the global references in the\n-      --  generic context.\n+      --  to save the global references in the generic context.\n \n       if From_Aspect_Specification (Prag)\n         and then (Present (Context_Id) and then Is_Generic_Unit (Context_Id))"}]}