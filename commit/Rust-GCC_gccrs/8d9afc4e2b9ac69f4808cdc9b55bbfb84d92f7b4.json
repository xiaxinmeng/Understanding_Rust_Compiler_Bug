{"sha": "8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ5YWZjNGUyYjlhYzY5ZjQ4MDhjZGM5YjU1YmJmYjg0ZDkyZjdiNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-16T11:42:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-16T11:42:00Z"}, "message": "ABOUT-NLS: Follow spelling conventions.\n\n\t* ABOUT-NLS: Follow spelling conventions.\n\t* ChangeLog: Likewise.\n\t* ChangeLog.1: Likewise.\n\t* ChangeLog.2: Likewise.\n\t* ChangeLog.3: Likewise.\n\t* ChangeLog.4: Likewise.\n\t* ChangeLog.5: Likewise.\n\t* ChangeLog.6: Likewise.\n\t* FSFChangeLog.10: Likewise.\n\t* FSFChangeLog.11: Likewise.\n\t* c-common.c: Likewise.\n\t* c-lex.c: Likewise.\n\t* c-objc-common.c: Likewise.\n\t* cppexp.c: Likewise.\n\t* cppinit.c: Likewise.\n\t* cpplex.c: Likewise.\n\t* doloop.c: Likewise.\n\t* flow.c: Likewise.\n\t* function.c: Likewise.\n\t* integrate.c: Likewise.\n\t* loop.c: Likewise.\n\t* reg-stack.c: Likewise.\n\t* reload.h: Likewise.\n\t* ssa.c: Likewise.\n\nFrom-SVN: r57188", "tree": {"sha": "2867ef8bbccdf81f693f2e0eefe7cd60cde8a243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2867ef8bbccdf81f693f2e0eefe7cd60cde8a243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/comments", "author": null, "committer": null, "parents": [{"sha": "cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0f53eb6e76976cd7a2211a331cac5732d4a9bf"}], "stats": {"total": 163, "additions": 95, "deletions": 68}, "files": [{"sha": "f76b5d7b0043ef659ade504ad8544b64fc868703", "filename": "gcc/ABOUT-NLS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FABOUT-NLS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FABOUT-NLS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FABOUT-NLS?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -60,7 +60,7 @@ library will be used.  This library is wholly contained within this\n package, usually in the `intl/' subdirectory, so prior installation of\n the GNU `gettext' package is _not_ required.  Installers may use\n special options at configuration time for changing the default\n-behaviour.  The commands:\n+behavior.  The commands:\n \n      ./configure --with-included-gettext\n      ./configure --disable-nls"}, {"sha": "ad15fdf933b0deea07e7867f5841cf4c9daab725", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -1,3 +1,30 @@\n+2002-09-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ABOUT-NLS: Follow spelling conventions.\n+\t* ChangeLog: Likewise.\n+\t* ChangeLog.1: Likewise.\n+\t* ChangeLog.2: Likewise.\n+\t* ChangeLog.3: Likewise.\n+\t* ChangeLog.4: Likewise.\n+\t* ChangeLog.5: Likewise.\n+\t* ChangeLog.6: Likewise.\n+\t* FSFChangeLog.10: Likewise.\n+\t* FSFChangeLog.11: Likewise.\n+\t* c-common.c: Likewise.\n+\t* c-lex.c: Likewise.\n+\t* c-objc-common.c: Likewise.\n+\t* cppexp.c: Likewise.\n+\t* cppinit.c: Likewise.\n+\t* cpplex.c: Likewise.\n+\t* doloop.c: Likewise.\n+\t* flow.c: Likewise.\n+\t* function.c: Likewise.\n+\t* integrate.c: Likewise.\n+\t* loop.c: Likewise.\n+\t* reg-stack.c: Likewise.\n+\t* reload.h: Likewise.\n+\t* ssa.c: Likewise.\n+\n 2002-09-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* ChangeLog: Follow spelling conventions.\n@@ -285,8 +312,8 @@\n 2002-09-13 Dhananjay Deshpande  <dhananjayd@kpit.com>\n \n \t* config/h8300/h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Add support\n-\tfor H8/300, H8/S aa:8 mode.\n-\t(TINY_CONSTANT_ADDRESS_P): Add support for H8/S aa:16 mode.\n+\tfor H8/300, H8S aa:8 mode.\n+\t(TINY_CONSTANT_ADDRESS_P): Add support for H8S aa:16 mode.\n \t* config/h8300/h8300.c (h8300_adjust_insn_length): Adjust length\n \tfor H8/300 aa:8 mode.\n \n@@ -3903,7 +3930,7 @@ Tue Jul 30 11:21:44 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t(Identifiers implementation): Document that there's normally no\n \tlimit on identifier names.\n \t(Integers implementation): Document two's complement.\n-\t(Hints implementation): Document that GCC honours 'inline', mostly.\n+\t(Hints implementation): Document that GCC honors 'inline', mostly.\n \t(Preprocessing directives implementation): Document that GCC\n \trequires the current time.\n \n@@ -8824,7 +8851,7 @@ Mon Jun 10 18:02:24 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* configure.in (remaining_languages_check):\n \tAdded check that all languages specified were found.\n-\tExit if not found. Previous behaviour was silent failure.\n+\tExit if not found. Previous behavior was silent failure.\n \t* configure: Regenerated.\n \n 2002-06-10  Tim Josling  <tej@melbpc.org.au>\n@@ -12782,7 +12809,7 @@ objc:\n 2002-05-21  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* bb-reorder.c (make_reorder_chain_1): Use prev_bb/next_bb to get to\n-\tneighbouring basic blocks.  Use ENTRY_BLOCK_PTR->next_bb instead of\n+\tneighboring basic blocks.  Use ENTRY_BLOCK_PTR->next_bb instead of\n \tBASIC_BLOCK (0).  Use EXIT_BLOCK_PTR->prev_bb instead of\n \tBASIC_BLOCK (n_basic_blocks - 1).\n \t* cfganal.c (can_fallthru, flow_call_edges_add,\n@@ -27119,7 +27146,7 @@ Thu Jan 10 11:19:18 CET 2002  Jan Hubicka  <jh@suse.cz>\n 2002-01-08  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (get_shift_alg): Fix 15-bit LSHIFTRT on\n-\tH8/300H and H8/S.\n+\tH8/300H and H8S.\n \n 2002-01-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n "}, {"sha": "1957b507e384456d75bbf3fa45e1c7ec86c756fd", "filename": "gcc/ChangeLog.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.1?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -4287,7 +4287,7 @@ Thu Feb 25 21:52:54 1999  J\"orn Rennecke  <amylaar@cygnus.co.uk>\n \tin registers.\n \n \t* expr.h (PRETEND_OUTGOING_VARARGS_NAMED): Provide default definition.\n-\t* function.c (assign_parms): Honour PRETEND_OUTGOING_VARARGS_NAMED.\n+\t* function.c (assign_parms): Honor PRETEND_OUTGOING_VARARGS_NAMED.\n \t* calls.c (expand_call): Likewise.\n \n \t* sh.c (sh_expand_prologue): For TARGET_HITACHI, don't push varargs /"}, {"sha": "10f7c23f90ee949537ad892af4a303e2dd1cefa0", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -262,7 +262,7 @@ Fri Dec 24 12:34:26 1999  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Thu Dec 23 23:15:22 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n-\t* reload1.c (emit_input_reload_insns): Restore old behaviour\n+\t* reload1.c (emit_input_reload_insns): Restore old behavior\n \twrt. 'special' reloads.\n \n 1999-12-23  Zack Weinberg  <zack@wolery.cumb.org>"}, {"sha": "58526d5a426f61f0dd18e1096469a0f04f0796dd", "filename": "gcc/ChangeLog.3", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.3?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -2161,7 +2161,7 @@ Sun May 28 23:26:59 2000  Philippe De Muyter <phdm@macqel.be>\n \n \t* reload.c (get_secondary_mem): Don't widen floating-point modes.\n \n-\t* combine.c (subst): Honour CLASS_CANNOT_CHANGE_SIZE when\n+\t* combine.c (subst): Honor CLASS_CANNOT_CHANGE_SIZE when\n \tsubstituting the REG in a (subreg:X (reg:Y ...)).\n \n 2000-05-28  Neil Booth  <NeilB@earthling.net>\n@@ -2340,7 +2340,7 @@ Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tboolean_operator for the boolean patterns without NOTs.\n \n \t* config/rs6000/rs6000.c (reg_or_logical_cint_operand): Rename\n-\tfrom reg_or_u_cint_operand.  Change comment and behaviour.\n+\tfrom reg_or_u_cint_operand.  Change comment and behavior.\n \t(logical_operand): Clean up, add assertion.\n \t(non_logical_cint_operand): Also check for\n \treg_or_logical_cint_operand.\n@@ -15281,7 +15281,7 @@ Wed Jan 19 19:12:36 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \t(expand_end_bindings): Likewise.\n \t(expand_decl): Likewise.  Consult optimize not obey_regdecls.\n \t* toplev.c (obey_regdecls): Remove.\n-\t(rest_of_compilation): Don't set it.  Kill stupid in favour of\n+\t(rest_of_compilation): Don't set it.  Kill stupid in favor of\n \tflow1, local-alloc, and reload.\n \t(main): Don't set obey_regdecls.\n \n@@ -16611,7 +16611,7 @@ Tue Jan  4 22:30:16 2000  Jeffrey A Law  (law@cygnus.com)\n \n 2000-01-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n-\t* config/c4x/c4x.h (IS_XXX_REG, IS_XXX_REGNO): Swap behaviour of\n+\t* config/c4x/c4x.h (IS_XXX_REG, IS_XXX_REGNO): Swap behavior of\n \tmacros so that they're consistent with their names.\n \t* config/c4x/c4x.c (IS_XXX_REG, IS_XXX_REGNO): Likewise.\n \t* config/c4x/c4x.md (IS_XXX_REG, IS_XXX_REGNO): Likewise."}, {"sha": "c767f1f55e57dc9e174ede7e92f71790d5873104", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -3811,7 +3811,7 @@ Tue Nov 14 12:34:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* reload1.c (emit_input_reload_insns): Honour forcing of constants\n+\t* reload1.c (emit_input_reload_insns): Honor forcing of constants\n \tinto memory by PREFERRED_RELOAD_CLASS NO_REGS.\n \n 2000-11-14  Michael Matz  <matzmich@cs.tu-berlin.de>\n@@ -8025,7 +8025,7 @@ Mon 18-Sep-2000 19:21:35 BST  Neil Booth  <NeilB@earthling.net>\n \t(struct cpp_buffer): read_ahead, pfile and col_adjust are\n \tnew members.\n \t(struct lexer_state): New structure that determines the state\n-\tand behaviour of the lexer.\n+\tand behavior of the lexer.\n \t(IN_DIRECTIVE, KNOWN_DIRECTIVE): New macros.\n \t(struct cpp_reader): New member \"state\". Rename\n \tmultiline_string_line and multiline_string_column. Delete\n@@ -8101,7 +8101,7 @@ Mon 18-Sep-2000 19:21:35 BST  Neil Booth  <NeilB@earthling.net>\n \n 2000-09-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n-\t* c-common.c (check_format_types): Reorganise and clean up,\n+\t* c-common.c (check_format_types): Reorganize and clean up,\n \tchecking earlier for ERROR_MARKs and making cur_type into its\n \tTYPE_MAIN_VARIANT where convenient.\n \n@@ -8547,9 +8547,9 @@ Fri 15-Sep-2000 06:49:07 BST  Neil Booth  <NeilB@earthling.net>\n \t* config/h8300.h (TARGET_MAC): New.\n \t(TARGET_SWITCHES): Add -ms2600 and -mno-s2600.\n \t(CONDITIONA_REGISTER_USAGE): Disable the mac register on any\n-\tmachine other than H8/S2600.\n-\t* config/h8300.md: Accept mac instructions on the H8/S2600 instead\n-\tof the H8/S2000.\n+\tmachine other than H8S/2600.\n+\t* config/h8300.md: Accept mac instructions on the H8S/2600 instead\n+\tof the H8S/2000.\n \n 2000-09-14  Alexandre Oliva  <aoliva@redhat.com>, Bernd Schmidt  <bernds@redhat.co.uk>\n \n@@ -11556,7 +11556,7 @@ Mon Aug 14 18:51:44 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \trather than DECL_OFFSET_ALIGN.\n \t(place_field): Likewise.\n \t* expmed.c (store_bit_field): Abort on align==0 to avoid\n-\tantisocial machine behaviour.\n+\tantisocial machine behavior.\n \n 2000-08-12  Richard Henderson  <rth@cygnus.com>\n \n@@ -12487,7 +12487,7 @@ Thu Aug  3 15:53:03 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n 2000-08-03  Kazu Hirata  <kazu@hxi.com>\n \n \t* h8300.c: Fix a comment typo.\n-\t* h8300.h (OK_FOR_U): Accept a 32-bit constant address on H8/S.\n+\t* h8300.h (OK_FOR_U): Accept a 32-bit constant address on H8S.\n \n \t* jump.c: Fix formatting.\n \n@@ -12911,7 +12911,7 @@ Mon Jul 31 20:35:50 2000  Denis Chertykov  <denisc@overta.ru>\n \n \t* h8300.h (MODES_TIEABLE_P): Accept a combination of QImode and\n \tHImode on all architectures and a combination of HImode and SImode\n-\ton H8/300H and H8/S.\n+\ton H8/300H and H8S.\n \n \t* h8300.c (split_adds_subs): Rearrange code for conciseness.\n \n@@ -14169,7 +14169,7 @@ Fri Jul 14 10:25:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \t* c-common.h (flag_digraphs): New.\n \t* c-decl.c (c_decode_option): Set flag_digraphs as appropriate.\n \t* c-lex.c (yylex): Use flag_digraphs to decide whether to\n-\thonour digraphs.\n+\thonor digraphs.\n \n 2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n \n@@ -14482,7 +14482,7 @@ Tue Jul 11 16:26:17 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \t(handle_option): Set digraphs according to standard.\n \tMerge OPT_lang_c89 handler with OPT_std_c89.\n \n-\t* cpplex.c: (lex_line, can_paste): Honour digraphs in\n+\t* cpplex.c: (lex_line, can_paste): Honor digraphs in\n \taccordance with\tthe digraphs flag.\n \n \t* cpplib.h: (struct cpp_options): New option digraphs."}, {"sha": "a2e284d8793a20478b4431df6d6dbf6d03bb4162", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -24,7 +24,7 @@\n \t* gcc.c (process_command): Append a DIR_SEPARATOR to a path\n \tspecified by the -B switch, if doing so would create a valid\n \tdirectory name.\n-\t* doc/invoke.texi: Document changed behaviour of -B.\n+\t* doc/invoke.texi: Document changed behavior of -B.\n \n 2001-06-29  DJ Delorie  <dj@redhat.com>\n \n@@ -77,7 +77,7 @@ Fri Jun 29 12:27:24 2001  Jeffrey A Law  (law@cygnus.com)\n \t* config/arc/arc-protos.h, config/arc/arc.c, config/arc/arc.h\n \t(arc_comp_type_attributes, arc_set_default_type_attributes,\n \tCOMP_TYPE_ATTRIBUTES, SET_DEFAULT_TYPE_ATTRIBUTES): Remove\n-\tfunctions and macros with default behaviour.\n+\tfunctions and macros with default behavior.\n \t* config/m32r/m32r-protos.h, config/m32r/m32r.c,\n \tconfig/m32r/m32r.h (m32r_comp_type_attributes,\n \tm32r_set_default_type_attributes, COMP_TYPE_ATTRIBUTES,\n@@ -1131,7 +1131,7 @@ Fri Jun 15 18:05:22 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Fri Jun 15 19:35:38 CEST 2001 Jan Hubicka  <jh@suse.cz>\n \n-\t* optabs.c (expand_twoval_binop): Avoid undefined behaviour.\n+\t* optabs.c (expand_twoval_binop): Avoid undefined behavior.\n \n 2001-06-15  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n@@ -2885,7 +2885,7 @@ Thu May 24 15:56:48 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-05-22  Richard Henderson  <rth@redhat.com>\n \n-\t* unwind-dw2-fde.c (__deregister_frame_info): Stubbify in favour of...\n+\t* unwind-dw2-fde.c (__deregister_frame_info): Stubbify in favor of...\n \t(__deregister_frame_info_bases): New.\n \t* unwind-dw2-fde.h: Declare it.\n \t* libgcc-std.ver: Export it.\n@@ -4498,7 +4498,7 @@ Fri May  4 13:10:03 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(ix86_align_loops): Delete.\n \t(ix86_align_jumps): Delete.\n \t(override_options): Mark -malign-* as obsolete.  Emulate their\n-\tbehaviour with the -falign-* options.  Default -falign-* from\n+\tbehavior with the -falign-* options.  Default -falign-* from\n \tthe processor table.\n \t* i386.h (FUNCTION_BOUNDARY): Define to 16; revert Richard Kenner's\n \tpatch of Wed May 2 13:09:36 2001.\n@@ -11700,7 +11700,7 @@ Wed Jan 24 23:51:55 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t* cppinit.c (cpp_start_read): Remove deps_add_dep call.\n \t* tradcpp.c (main): Add -imacros or -include'd dependencies\n \tfor -M*.\n-\t* cpp.texi (-M, -MM): Document -M -include behaviour.\n+\t* cpp.texi (-M, -MM): Document -M -include behavior.\n \n 2001-01-24  Roger Collins <roger@ProProject.com>\n \n@@ -13179,7 +13179,7 @@ Tue Jan  9 21:25:19 2001  Jeffrey A Law  (law@cygnus.com)\n \t(emit_a_shift): Adopt to the new calling prototype of\n \tget_shift_alg.\n \t(function_prologue): Fix code for a monitor\n-\tfunction.  Support H8/S.\n+\tfunction.  Support H8S.\n \t(function_epilogue): Do not output pop for a monitor function.\n \n 2001-01-09  Nick Clifton  <nickc@redhat.com>\n@@ -13876,7 +13876,7 @@ Fri Jan  5 16:29:49 MET 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-01-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-\t* cpp.texi: Update for -MP.  Clarify behaviour of -MT.\n+\t* cpp.texi: Update for -MP.  Clarify behavior of -MT.\n \t* cppinit.c (initialize_dependency_output):  Update.\n \t(cpp_finish): Output dummy targets for -MP.\n \t(OPT_MP): New."}, {"sha": "e7982618a266bb8874841d9887abe72d3b44b187", "filename": "gcc/ChangeLog.6", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FChangeLog.6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.6?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -5339,9 +5339,9 @@ Wed Nov 14 06:37:54 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-11-13  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (shift_alg_si): Use special code for\n-\t25-bit shifts on H8/S.\n+\t25-bit shifts on H8S.\n \t(get_shift_alg): Generate special code for 25-bit shifts on\n-\tH8/S.\n+\tH8S.\n \n 2001-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -5449,10 +5449,10 @@ Tue Nov 13 05:45:40 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-11-12  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (shift_alg_qi): Use rotations when\n-\tdoing 6-bit logical shifts on H8/S.\n-\t(shift_alg_qi): Use special code for 21-bit shifts on H8/S.\n+\tdoing 6-bit logical shifts on H8S.\n+\t(shift_alg_qi): Use special code for 21-bit shifts on H8S.\n \t(get_shift_alg): Generate special code for 21-bit shifts on\n-\tH8/S.\n+\tH8S.\n \n 2001-11-12  Kazu Hirata  <kazu@hxi.com>\n \n@@ -9881,7 +9881,7 @@ Fri Sep 28 14:59:34 CEST 2001  Jan Hubicka  <jh@suse.cz>\n 2001-09-27  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (dwarf2out_frame_finish): Never elide .debug_frame\n-\tin favour of .eh_frame.\n+\tin favor of .eh_frame.\n \n 2001-09-27  Aldy Hernandez  <aldyh@redhat.com>\n "}, {"sha": "6a1d50929e7a8b626356852b0dadc89de91ae703", "filename": "gcc/FSFChangeLog.10", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FFSFChangeLog.10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FFSFChangeLog.10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.10?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -8538,7 +8538,7 @@ Tue Apr 25 18:52:43 1995  Stephen R. van den Berg  (berg@pool.informatik.rwth-aa\n \t(mark_regs_pat, straighten_stack): New functions.\n \t(reg_to_stack): Amend initialisation of FP_mode_reg.\n \tMark FP registers mentioned in USE insns before NOTE_INSN_FUNCTION_BEG.\n-\t(get_true_reg): Eliminate FP subreg accesses in favour of the\n+\t(get_true_reg): Eliminate FP subreg accesses in favor of the\n \tactual FP register in use.\n \t(record_reg_life_pat): Make it work on SUBREGs as well.  Make use of\n \tthe new mark_regs_pat function.  Handle USE insns if called unnested."}, {"sha": "1326eb6fa97cae6959f82a7bb3fc0b11edd98fc3", "filename": "gcc/FSFChangeLog.11", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FFSFChangeLog.11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2FFSFChangeLog.11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FFSFChangeLog.11?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -11676,15 +11676,15 @@ Thu Jul 11 17:29:33 1996  Michael Meissner  <meissner@tiktok.cygnus.com>\n \n Thu Jul 11 10:12:50 1996  Jeffrey A Law  (law@cygnus.com)\n \n-\t* h8300.h (OK_FOR_U): If generating H8/S code, accept\n+\t* h8300.h (OK_FOR_U): If generating H8S code, accept\n \tSYMBOL_REF and SYMBOL_REF + CONST_INT.\n \n \t* h8300.c ({shift,rotate}_one): Emit tabs between opcode and\n \toperands to be consistent with the rest of the compiler.\n \t(shift_two, rotate_two): Define.\n \t(get_shift_alg): Accept new argument \"assembler2_p\" for\n \trotate/shift by two insns.  All callers changed.  Rework\n-\tto generate more efficient code on the H8/300, H8/300H, and H8/S.\n+\tto generate more efficient code on the H8/300, H8/300H, and H8S.\n \tTry to simplify somewhat.\n \t(emit_a_shift): Use shift-by-two insns when they're available.\n \tEmit tabs between opcode and operands to be consistent with\n@@ -11755,31 +11755,31 @@ Mon Jul  8 18:00:33 1996  Jim Wilson  <wilson@cygnus.com>\n \n Mon Jul  8 16:27:33 1996  Jeffrey A. Law  <law@cygnus.com>\n \n-\t* First cut at support for the H8/S.\n-\t* h8300.c (h8300_init_once): Handle the H8/S (treat it\n+\t* First cut at support for the H8S.\n+\t* h8300.c (h8300_init_once): Handle the H8S (treat it\n \tlike the H8/300H).\n \t(dosize, adds_subs_operand, one_insn_adds_subs_operand): Likewise.\n \t(output_adds_subs, const_costs, print_operand): Likewise.\n \t(output_simode_bld, h8300_adjust_insn_length): Likewise.\n \t(push_order, pop_order): Reverse.\n \t(function_prologue): Try to use ldm.l and stm.l insns\n-\ton the H8/S.  Minor cleanups.\n+\ton the H8S.  Minor cleanups.\n \t(function_epilogue): Likewise.\n-\t(asm_file_start): Emit \".h8300s\" when compiling for the H8/S.\n-\t* h8300/h8300.h (CPP_SPEC): Handle the H8/S.\n+\t(asm_file_start): Emit \".h8300s\" when compiling for the H8S.\n+\t* h8300/h8300.h (CPP_SPEC): Handle the H8S.\n \t(TARGET_H8300S): New target.\n \t(TARGET_SWITCHES): Add \"-ms\" and \"-mno-s\".\n-\t(BITS_PER_WORD): Handle the H8/S (treat it like the H8/300H).\n+\t(BITS_PER_WORD): Handle the H8S (treat it like the H8/300H).\n \t(UNITS_PER_WORD, POINTER_SIZE, PARM_BOUNDARY): Likewise.\n \t(BIGGEST_ALIGNMENT, BIGGEST_FIELD_ALIGNMENT): Likewise.\n \t(INITIALIZE_TRAMPOLINE, MOVE_MAX, Pmode): Likewise.\n-\t* h8300.md: Handle H8/S just like H8/300H\n+\t* h8300.md: Handle H8S just like H8/300H\n \tthroughout the entire file.\n \t* t-h8300 (MULTILIB_OPTIONS): Build \"-ms\" libraries too.\n-\t(MULTILIB_DIRNAMES): Put H8/S libraries in \"h8300s\" directory.\n+\t(MULTILIB_DIRNAMES): Put H8S libraries in \"h8300s\" directory.\n \t* h8300/lib1funcs.asm: Emit \".h8300s\" pseudo-op when generating\n-\th8300s object files.  Otherwise treat the H8/S just like the H8/300H.\n-\t* ginclude/stdarg.h: Handle the H8/S.\n+\th8300s object files.  Otherwise treat the H8S just like the H8/300H.\n+\t* ginclude/stdarg.h: Handle the H8S.\n \t* ginclude/varargs.h: Likewise.\n \n Mon Jul  8 14:50:58 1996  Doug Evans  <dje@cygnus.com>"}, {"sha": "7feabee95a279521e8024b77366605498d72cd84", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -1826,7 +1826,7 @@ verify_tree (x, pbefore_sp, pno_sp, writer)\n     }\n }\n \n-/* Try to warn for undefined behaviour in EXPR due to missing sequence\n+/* Try to warn for undefined behavior in EXPR due to missing sequence\n    points.  */\n \n static void"}, {"sha": "2d1ad3415a945cd27c9404992bb014ec30dbd44b", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -835,7 +835,7 @@ interpret_integer (token, flags)\n \t{\n \t  /* In C99, decimal constants are always signed.\n \t     In C89, decimal constants that don't fit in long have\n-\t     undefined behaviour; we try to make them unsigned long.\n+\t     undefined behavior; we try to make them unsigned long.\n \t     In GCC's extended C89, that last is true of decimal\n \t     constants that don't fit in long long, too.  */\n "}, {"sha": "e279911acc0b0b97ddfe817924179fb5c21a32fb", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -121,7 +121,7 @@ inline_forbidden_p (nodep, walk_subtrees, fn)\n       /* We will not inline a function which uses computed goto.  The\n \t addresses of its local labels, which may be tucked into\n \t global storage, are of course not constant across\n-\t instantiations, which causes unexpected behaviour.  */\n+\t instantiations, which causes unexpected behavior.  */\n       if (TREE_CODE (t) != LABEL_DECL)\n \treturn node;\n "}, {"sha": "547e4601eb6a1fa87c772582efd10cfa3511c282", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -383,7 +383,7 @@ cpp_interpret_integer (pfile, token, type)\n \t\t   \"integer constant is too large for its type\");\n       /* If too big to be signed, consider it unsigned.  Only warn for\n \t decimal numbers.  Traditional numbers were always signed (but\n-\t we still honour an explicit U suffix); but we only have\n+\t we still honor an explicit U suffix); but we only have\n \t traditional semantics in directives.  */\n       else if (!result.unsignedp\n \t       && !(CPP_OPTION (pfile, traditional)\n@@ -774,7 +774,7 @@ _cpp_parse_expr (pfile)\n \t}\n       else if (want_value)\n \t{\n-\t  /* Ordering here is subtle and intended to favour the\n+\t  /* Ordering here is subtle and intended to favor the\n \t     missing parenthesis diagnostics over alternatives.  */\n \t  if (op.op == CPP_CLOSE_PAREN)\n \t    {"}, {"sha": "2534ba455a33d2b44c8e19df9114aeed4337ff18", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -583,7 +583,7 @@ cpp_create_reader (lang)\n }\n \n /* Free resources used by PFILE.  Accessing PFILE after this function\n-   returns leads to undefined behaviour.  Returns the error count.  */\n+   returns leads to undefined behavior.  Returns the error count.  */\n void\n cpp_destroy (pfile)\n      cpp_reader *pfile;"}, {"sha": "01c17ccffb0f43d5b042e569c40290eaef80b65d", "filename": "gcc/cpplex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -112,7 +112,7 @@ handle_newline (pfile)\n   cpp_buffer *buffer = pfile->buffer;\n \n   /* Handle CR-LF and LF-CR.  Most other implementations (e.g. java)\n-     only accept CR-LF; maybe we should fall back to that behaviour?  */\n+     only accept CR-LF; maybe we should fall back to that behavior?  */\n   if (buffer->cur[-1] + buffer->cur[0] == '\\r' + '\\n')\n     buffer->cur++;\n \n@@ -126,7 +126,7 @@ handle_newline (pfile)\n    the second '?'.\n \n    Warn if necessary, and returns true if the sequence forms a\n-   trigraph and the trigraph should be honoured.  */\n+   trigraph and the trigraph should be honored.  */\n static bool\n trigraph_p (pfile)\n      cpp_reader *pfile;"}, {"sha": "f3b302907bc35eb24d18414c55d2ee27489eab53", "filename": "gcc/doloop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -367,15 +367,15 @@ doloop_valid_p (loop, jump_insn)\n \t If the absolute increment is not 1, the loop can be infinite\n \t even with LTU/GTU, e.g. for (i = 3; i > 0; i -= 2)\n \n-\t Note that with LE and GE, the loop behaviour is undefined\n+\t Note that with LE and GE, the loop behavior is undefined\n \t (C++ standard section 5 clause 5) if an overflow occurs, say\n \t between INT_MAX and INT_MAX + 1.  We thus don't have to worry\n \t about these two cases.\n \n \t ??? We could compute these conditions at run-time and have a\n \t additional jump around the loop to ensure an infinite loop.\n \t However, it is very unlikely that this is the intended\n-\t behaviour of the loop and checking for these rare boundary\n+\t behavior of the loop and checking for these rare boundary\n \t conditions would pessimize all other code.\n \n \t If the loop is executed only a few times an extra check to"}, {"sha": "0c6d614b3b7a8eeb96f1bdd5ba59101550c85896", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -1085,7 +1085,7 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n   int i;\n \n   /* Some passes used to forget clear aux field of basic block causing\n-     sick behaviour here.  */\n+     sick behavior here.  */\n #ifdef ENABLE_CHECKING\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n     if (bb->aux)"}, {"sha": "424f06c01baa7be790333b3c5334c705fb09dda2", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -7745,7 +7745,7 @@ thread_prologue_and_epilogue_insns (f)\n \t note before the end of the first basic block, if there isn't\n \t one already there.\n \n-\t ??? This behaviour is completely broken when dealing with\n+\t ??? This behavior is completely broken when dealing with\n \t multiple entry functions.  We simply place the note always\n \t into first basic block and let alternate entry points\n \t to be missed."}, {"sha": "3f2a11f15167c664fd7fe693578ce1bbb37e4943", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -245,7 +245,7 @@ function_cannot_inline_p (fndecl)\n \n   /* We will not inline a function which uses computed goto.  The addresses of\n      its local labels, which may be tucked into global storage, are of course\n-     not constant across instantiations, which causes unexpected behaviour.  */\n+     not constant across instantiations, which causes unexpected behavior.  */\n   if (current_function_has_computed_jump)\n     return N_(\"function with computed jump cannot inline\");\n "}, {"sha": "0c634e7eedaab9aeb944c8f95715b3e3bcea6d86", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -830,7 +830,7 @@ scan_loop (loop, flags)\n \t\t\t  the loop starts, or the value before the set is\n \t\t\t  needed before the set occurs...\n \n-\t\t\t  ??? Note we have quadratic behaviour here, mitigated\n+\t\t\t  ??? Note we have quadratic behavior here, mitigated\n \t\t\t  by the fact that the previous test will often fail for\n \t\t\t  large loops.  Rather than re-scanning the entire loop\n \t\t\t  each time for register usage, we should build tables"}, {"sha": "3f8df8d9eea7102d8b03e4bfb51fabb1fb4cf8bf", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -564,7 +564,7 @@ get_true_reg (pat)\n     switch (GET_CODE (*pat))\n       {\n       case SUBREG:\n-\t/* Eliminate FP subregister accesses in favour of the\n+\t/* Eliminate FP subregister accesses in favor of the\n \t   actual FP register in use.  */\n \t{\n \t  rtx subreg;"}, {"sha": "6fe814f1752db968ae1a7ae766715bd2a0215986", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -205,7 +205,7 @@ struct needs\n    must be examined for register elimination.  */\n struct insn_chain \n {\n-  /* Links to the neighbour instructions.  */\n+  /* Links to the neighbor instructions.  */\n   struct insn_chain *next, *prev;\n \n   /* Link through a chains set up by calculate_needs_all_insns, containing"}, {"sha": "406928b1fa52dd32f1b7151c3d2936077ed97882", "filename": "gcc/ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "patch": "@@ -704,7 +704,7 @@ insert_phi_nodes (idfs, evals, nregs)\n /* Rename the registers to conform to SSA.\n \n    This is essentially the algorithm presented in Figure 7.8 of Morgan,\n-   with a few changes to reduce pattern search time in favour of a bit\n+   with a few changes to reduce pattern search time in favor of a bit\n    more memory usage.  */\n \n /* One of these is created for each set.  It will live in a list local"}]}