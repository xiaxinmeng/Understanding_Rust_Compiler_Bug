{"sha": "e498b9f1a0460c20a42d6835470de35d858379da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5OGI5ZjFhMDQ2MGMyMGE0MmQ2ODM1NDcwZGUzNWQ4NTgzNzlkYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-20T14:39:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-20T14:39:01Z"}, "message": "builtins.c (fold_fixed_mathfn, [...]): Take decomposed arguments of CALL_EXPR.\n\n\t* builtins.c (fold_fixed_mathfn, fold_builtin_trunc,\n\tfold_builtin_floor, fold_builtin_ceil, fold_builtin_lround):\n\tTake decomposed arguments of CALL_EXPR.\n\t(fold_builtin_1): Update calls to the functions mentioned\n\tabove.\n\nFrom-SVN: r96759", "tree": {"sha": "b67a34f91df7b67ea943ef18de42fc9d8cc4c323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b67a34f91df7b67ea943ef18de42fc9d8cc4c323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e498b9f1a0460c20a42d6835470de35d858379da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e498b9f1a0460c20a42d6835470de35d858379da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e498b9f1a0460c20a42d6835470de35d858379da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e498b9f1a0460c20a42d6835470de35d858379da/comments", "author": null, "committer": null, "parents": [{"sha": "411ffa02ae4de4b478884f7e23b68475a3c1efa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411ffa02ae4de4b478884f7e23b68475a3c1efa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411ffa02ae4de4b478884f7e23b68475a3c1efa4"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "cc0a972c874d5f040d73a7582acf8f3d9c14cae0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e498b9f1a0460c20a42d6835470de35d858379da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e498b9f1a0460c20a42d6835470de35d858379da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e498b9f1a0460c20a42d6835470de35d858379da", "patch": "@@ -1,3 +1,11 @@\n+2005-03-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.c (fold_fixed_mathfn, fold_builtin_trunc,\n+\tfold_builtin_floor, fold_builtin_ceil, fold_builtin_lround):\n+\tTake decomposed arguments of CALL_EXPR.\n+\t(fold_builtin_1): Update calls to the functions mentioned\n+\tabove.\n+\n 2005-03-20  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (check_bitfield_type_and_width): Require bit-field"}, {"sha": "0f39ec36edbed0942fcf3bb517dd0b8ff4d9ddd9", "filename": "gcc/builtins.c", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e498b9f1a0460c20a42d6835470de35d858379da/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e498b9f1a0460c20a42d6835470de35d858379da/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e498b9f1a0460c20a42d6835470de35d858379da", "patch": "@@ -157,10 +157,10 @@ static tree fold_builtin_sin (tree);\n static tree fold_builtin_cos (tree, tree, tree);\n static tree fold_builtin_tan (tree);\n static tree fold_builtin_atan (tree, tree);\n-static tree fold_builtin_trunc (tree);\n-static tree fold_builtin_floor (tree);\n-static tree fold_builtin_ceil (tree);\n-static tree fold_builtin_round (tree);\n+static tree fold_builtin_trunc (tree, tree);\n+static tree fold_builtin_floor (tree, tree);\n+static tree fold_builtin_ceil (tree, tree);\n+static tree fold_builtin_round (tree, tree);\n static tree fold_builtin_bitop (tree, tree);\n static tree fold_builtin_memcpy (tree, tree);\n static tree fold_builtin_mempcpy (tree, tree, int);\n@@ -6110,10 +6110,8 @@ fold_trunc_transparent_mathfn (tree fndecl, tree arglist)\n    the argument, for instance lround((double)f) -> lroundf (f).  */\n \n static tree\n-fold_fixed_mathfn (tree exp)\n+fold_fixed_mathfn (tree fndecl, tree arglist)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   tree arg;\n \n@@ -6501,10 +6499,8 @@ fold_builtin_atan (tree arglist, tree type)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_trunc (tree exp)\n+fold_builtin_trunc (tree fndecl, tree arglist)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree arg;\n \n   if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n@@ -6529,10 +6525,8 @@ fold_builtin_trunc (tree exp)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_floor (tree exp)\n+fold_builtin_floor (tree fndecl, tree arglist)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree arg;\n \n   if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n@@ -6562,10 +6556,8 @@ fold_builtin_floor (tree exp)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_ceil (tree exp)\n+fold_builtin_ceil (tree fndecl, tree arglist)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree arg;\n \n   if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n@@ -6595,10 +6587,8 @@ fold_builtin_ceil (tree exp)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_round (tree exp)\n+fold_builtin_round (tree fndecl, tree arglist)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree arg;\n \n   if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n@@ -6629,10 +6619,8 @@ fold_builtin_round (tree exp)\n    simplification can be made.  */\n \n static tree\n-fold_builtin_lround (tree exp)\n+fold_builtin_lround (tree fndecl, tree arglist)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree arg;\n \n   if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n@@ -6659,7 +6647,7 @@ fold_builtin_lround (tree exp)\n \t}\n     }\n \n-  return fold_fixed_mathfn (exp);\n+  return fold_fixed_mathfn (fndecl, arglist);\n }\n \n /* Fold function call to builtin ffs, clz, ctz, popcount and parity\n@@ -8173,22 +8161,22 @@ fold_builtin_1 (tree exp, bool ignore)\n     case BUILT_IN_FLOOR:\n     case BUILT_IN_FLOORF:\n     case BUILT_IN_FLOORL:\n-      return fold_builtin_floor (exp);\n+      return fold_builtin_floor (fndecl, arglist);\n \n     case BUILT_IN_CEIL:\n     case BUILT_IN_CEILF:\n     case BUILT_IN_CEILL:\n-      return fold_builtin_ceil (exp);\n+      return fold_builtin_ceil (fndecl, arglist);\n \n     case BUILT_IN_TRUNC:\n     case BUILT_IN_TRUNCF:\n     case BUILT_IN_TRUNCL:\n-      return fold_builtin_trunc (exp);\n+      return fold_builtin_trunc (fndecl, arglist);\n \n     case BUILT_IN_ROUND:\n     case BUILT_IN_ROUNDF:\n     case BUILT_IN_ROUNDL:\n-      return fold_builtin_round (exp);\n+      return fold_builtin_round (fndecl, arglist);\n \n     case BUILT_IN_NEARBYINT:\n     case BUILT_IN_NEARBYINTF:\n@@ -8204,15 +8192,15 @@ fold_builtin_1 (tree exp, bool ignore)\n     case BUILT_IN_LLROUND:\n     case BUILT_IN_LLROUNDF:\n     case BUILT_IN_LLROUNDL:\n-      return fold_builtin_lround (exp);\n+      return fold_builtin_lround (fndecl, arglist);\n \n     case BUILT_IN_LRINT:\n     case BUILT_IN_LRINTF:\n     case BUILT_IN_LRINTL:\n     case BUILT_IN_LLRINT:\n     case BUILT_IN_LLRINTF:\n     case BUILT_IN_LLRINTL:\n-      return fold_fixed_mathfn (exp);\n+      return fold_fixed_mathfn (fndecl, arglist);\n \n     case BUILT_IN_FFS:\n     case BUILT_IN_FFSL:"}]}