{"sha": "9f3dcd14146c29ca01507051ae9729a0f5569173", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzZGNkMTQxNDZjMjljYTAxNTA3MDUxYWU5NzI5YTBmNTU2OTE3Mw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-31T13:23:20Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-31T13:23:20Z"}, "message": "PR 78534 Reinstate better string copy algorithm\n\nAs part of the change to larger character lengths, the string copy\nalgorithm was temporarily pessimized to get around some spurious\n-Wstringop-overflow warnings.  Having tried a number of variations of\nthis algorithm I have managed to get it down to one spurious warning,\nonly with -O1 optimization, in the testsuite.  This patch reinstates\nthe optimized variant and modifies this one testcase to ignore the\nwarning.\n\nRegtested on x86_64-pc-linux-gnu.\n\ngcc/fortran/ChangeLog:\n\n2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/78534\n\t* trans-expr.c (fill_with_spaces): Use memset instead of\n\tgenerating loop.\n\t(gfc_trans_string_copy): Improve opportunity to use builtins with\n\tconstant lengths.\n\ngcc/testsuite/ChangeLog:\n\n2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/78534\n\t* gfortran.dg/allocate_deferred_char_scalar_1.f03: Prune\n\t-Wstringop-overflow warnings due to spurious warning with -O1.\n\t* gfortran.dg/char_cast_1.f90: Update dump scan pattern.\n\t* gfortran.dg/transfer_intrinsic_1.f90: Likewise.\n\nFrom-SVN: r257233", "tree": {"sha": "739ec9feba8359bb7b7537197f70e7ec4aa29bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/739ec9feba8359bb7b7537197f70e7ec4aa29bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f3dcd14146c29ca01507051ae9729a0f5569173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3dcd14146c29ca01507051ae9729a0f5569173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3dcd14146c29ca01507051ae9729a0f5569173", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3dcd14146c29ca01507051ae9729a0f5569173/comments", "author": null, "committer": null, "parents": [{"sha": "957a25ab0c76a2beb268aad005804da41e136c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957a25ab0c76a2beb268aad005804da41e136c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957a25ab0c76a2beb268aad005804da41e136c37"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "8f9cafc96bb56ef5faaf3186a41f95ad7e3be5e1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9f3dcd14146c29ca01507051ae9729a0f5569173", "patch": "@@ -1,3 +1,11 @@\n+2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/78534\n+\t* trans-expr.c (fill_with_spaces): Use memset instead of\n+\tgenerating loop.\n+\t(gfc_trans_string_copy): Improve opportunity to use builtins with\n+\tconstant lengths.\n+\n 2018-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/84131"}, {"sha": "eb359768c69faeb2da83a96a27b8169dccb2a000", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=9f3dcd14146c29ca01507051ae9729a0f5569173", "patch": "@@ -6411,16 +6411,13 @@ fill_with_spaces (tree start, tree type, tree size)\n   tree i, el, exit_label, cond, tmp;\n \n   /* For a simple char type, we can call memset().  */\n-  /* TODO: This code does work and is potentially more efficient, but\n-     causes spurious -Wstringop-overflow warnings.\n   if (compare_tree_int (TYPE_SIZE_UNIT (type), 1) == 0)\n     return build_call_expr_loc (input_location,\n \t\t\t    builtin_decl_explicit (BUILT_IN_MEMSET),\n \t\t\t    3, start,\n \t\t\t    build_int_cst (gfc_get_int_type (gfc_c_int_kind),\n \t\t\t\t\t   lang_hooks.to_target_charset (' ')),\n \t\t\t\tfold_convert (size_type_node, size));\n-  */\n \n   /* Otherwise, we use a loop:\n \tfor (el = start, i = size; i > 0; el--, i+= TYPE_SIZE_UNIT (type))\n@@ -6526,11 +6523,20 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n \n   /* The string copy algorithm below generates code like\n \n-     if (dlen > 0) {\n-         memmove (dest, src, min(dlen, slen));\n-         if (slen < dlen)\n-             memset(&dest[slen], ' ', dlen - slen);\n-     }\n+     if (destlen > 0)\n+       {\n+         if (srclen < destlen)\n+           {\n+             memmove (dest, src, srclen);\n+             // Pad with spaces.\n+             memset (&dest[srclen], ' ', destlen - srclen);\n+           }\n+         else\n+           {\n+             // Truncate if too long.\n+             memmove (dest, src, destlen);\n+           }\n+       }\n   */\n \n   /* Do nothing if the destination length is zero.  */\n@@ -6559,21 +6565,16 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n   else\n     src = gfc_build_addr_expr (pvoid_type_node, src);\n \n-  /* First do the memmove. */\n-  tmp2 = fold_build2_loc (input_location, MIN_EXPR, TREE_TYPE (dlen), dlen,\n-\t\t\t  slen);\n-  tmp2 = build_call_expr_loc (input_location,\n-\t\t\t      builtin_decl_explicit (BUILT_IN_MEMMOVE),\n-\t\t\t      3, dest, src,\n-\t\t\t      fold_convert (size_type_node, tmp2));\n-  stmtblock_t tmpblock2;\n-  gfc_init_block (&tmpblock2);\n-  gfc_add_expr_to_block (&tmpblock2, tmp2);\n-\n-  /* If the destination is longer, fill the end with spaces.  */\n+  /* Truncate string if source is too long.  */\n   cond2 = fold_build2_loc (input_location, LT_EXPR, logical_type_node, slen,\n \t\t\t   dlen);\n \n+  /* Copy and pad with spaces.  */\n+  tmp3 = build_call_expr_loc (input_location,\n+\t\t\t      builtin_decl_explicit (BUILT_IN_MEMMOVE),\n+\t\t\t      3, dest, src,\n+\t\t\t      fold_convert (size_type_node, slen));\n+\n   /* Wstringop-overflow appears at -O3 even though this warning is not\n      explicitly available in fortran nor can it be switched off. If the\n      source length is a constant, its negative appears as a very large\n@@ -6588,14 +6589,19 @@ gfc_trans_string_copy (stmtblock_t * block, tree dlength, tree dest,\n   tmp4 = fill_with_spaces (tmp4, chartype, tmp);\n \n   gfc_init_block (&tempblock);\n+  gfc_add_expr_to_block (&tempblock, tmp3);\n   gfc_add_expr_to_block (&tempblock, tmp4);\n   tmp3 = gfc_finish_block (&tempblock);\n \n+  /* The truncated memmove if the slen >= dlen.  */\n+  tmp2 = build_call_expr_loc (input_location,\n+\t\t\t      builtin_decl_explicit (BUILT_IN_MEMMOVE),\n+\t\t\t      3, dest, src,\n+\t\t\t      fold_convert (size_type_node, dlen));\n+\n   /* The whole copy_string function is there.  */\n   tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond2,\n-\t\t\t tmp3, build_empty_stmt (input_location));\n-  gfc_add_expr_to_block (&tmpblock2, tmp);\n-  tmp = gfc_finish_block (&tmpblock2);\n+\t\t\t tmp3, tmp2);\n   tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond, tmp,\n \t\t\t build_empty_stmt (input_location));\n   gfc_add_expr_to_block (block, tmp);"}, {"sha": "a2ca981d3f537d849cac9b7102bd54c0f4b5068b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f3dcd14146c29ca01507051ae9729a0f5569173", "patch": "@@ -1,3 +1,11 @@\n+2018-01-31  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/78534\n+\t* gfortran.dg/allocate_deferred_char_scalar_1.f03: Prune\n+\t-Wstringop-overflow warnings due to spurious warning with -O1.\n+\t* gfortran.dg/char_cast_1.f90: Update dump scan pattern.\n+\t* gfortran.dg/transfer_intrinsic_1.f90: Likewise.\n+\n 2018-01-31  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84132"}, {"sha": "d5ca573cd9fa1a35a02fa468c1e972e12d4b901e", "filename": "gcc/testsuite/gfortran.dg/allocate_deferred_char_scalar_1.f03", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_1.f03?ref=9f3dcd14146c29ca01507051ae9729a0f5569173", "patch": "@@ -265,3 +265,5 @@ subroutine source3()\n      if(len(p4) /= 3) call abort()\n   end subroutine source3\n end program test\n+! Spurious -Wstringop-overflow warning with -O1\n+! { dg-prune-output \"\\\\\\[-Wstringop-overflow=]\" } "}, {"sha": "02e695d2d7b738996db6c756d90fc79ee64b9daf", "filename": "gcc/testsuite/gfortran.dg/char_cast_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_1.f90?ref=9f3dcd14146c29ca01507051ae9729a0f5569173", "patch": "@@ -25,6 +25,6 @@ Character (len=20) Function Upper (string)\n     return\n   end function Upper\n end\n-! The sign that all is well is that [S.10][1] appears twice.\n-! Platform dependent variations are [S$10][1], [__S_10][1], [S___10][1]\n-! { dg-final { scan-tree-dump-times \"10\\\\\\]\\\\\\[1\\\\\\]\" 2 \"original\" } }\n+! The sign that all is well is that [S.6][1] appears twice.\n+! Platform dependent variations are [S$6][1], [__S_6][1], [S___6][1]\n+! { dg-final { scan-tree-dump-times \"6\\\\\\]\\\\\\[1\\\\\\]\" 2 \"original\" } }"}, {"sha": "5f46cd0bccf3a4bf9a53b8c2908196d26dfe51d1", "filename": "gcc/testsuite/gfortran.dg/transfer_intrinsic_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_intrinsic_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3dcd14146c29ca01507051ae9729a0f5569173/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_intrinsic_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_intrinsic_1.f90?ref=9f3dcd14146c29ca01507051ae9729a0f5569173", "patch": "@@ -14,4 +14,4 @@ subroutine BytesToString(bytes, string)\n     character(len=*) :: string\n     string = transfer(bytes, string)\n   end subroutine\n-! { dg-final { scan-tree-dump-times \"MIN_EXPR\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"MIN_EXPR\" 1 \"original\" } }"}]}