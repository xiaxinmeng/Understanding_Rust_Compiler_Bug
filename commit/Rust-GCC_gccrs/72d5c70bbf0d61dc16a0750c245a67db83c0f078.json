{"sha": "72d5c70bbf0d61dc16a0750c245a67db83c0f078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkNWM3MGJiZjBkNjFkYzE2YTA3NTBjMjQ1YTY3ZGI4M2MwZjA3OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:31:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:31:53Z"}, "message": "[multiple changes]\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Assignment): Diagnose assignment where\n\tleft-hand side has a limited view of a class-wide type.\n\t* sem_ch6.adb (Detected_And_Exchange): Do not install a non-limited\n\tview if the scope of the type of the formal is visible through\n\ta limited_with_clause, even if the non-limited view is available.\n\n2015-11-18  Emmanuel Briot  <briot@adacore.com>\n\n\t* s-pooglo.ads: Make Global_Pool_Object aliased.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case 'Access): If the prefix\n\tis an expression function, do not analyze the generated body if\n\tthe current scope is not the scope of the expression function,\n\tas may happen if the attribute is an actual in an instantiation.\n\t* sem_ch10.adb, sem_ch12.adb, a-stzmap.adb, s-soflin.adb,\n\ta-stwima.adb: Fix typos.\n\n2015-11-18  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch11.adb (Expand_N_Exception_Declaration): No-op when\n\tgenerating C code.\n\n2015-11-18  Vincent Celier  <celier@adacore.com>\n\n\t* g-comlin.adb (Find_Longest_Matching_Switch): Do not take into\n\taccount a switch ending with '=' when the actual command line\n\tswitch is not followed with a space or '='.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Explicit_Dereference): Do not add an access\n\tcheck if the type of the prefix is known to exclude null.\n\t* a-coinve.adb (Get_Element_Access): The function returns an\n\taccess type that excludes null, so add an explicit check for\n\ta null element pointer, which is created when Insert_Spaces is\n\tcalled on an indefinite vector container.\n\nFrom-SVN: r230533", "tree": {"sha": "8ea1bc76961d91d23474274e64bf2d0805c59be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ea1bc76961d91d23474274e64bf2d0805c59be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72d5c70bbf0d61dc16a0750c245a67db83c0f078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d5c70bbf0d61dc16a0750c245a67db83c0f078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d5c70bbf0d61dc16a0750c245a67db83c0f078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d5c70bbf0d61dc16a0750c245a67db83c0f078/comments", "author": null, "committer": null, "parents": [{"sha": "7bf911b58345771e3be025a0b132912df4f566bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf911b58345771e3be025a0b132912df4f566bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf911b58345771e3be025a0b132912df4f566bd"}], "stats": {"total": 147, "additions": 132, "deletions": 15}, "files": [{"sha": "275d15792f0114cdc6163193b88562558573763f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -1,3 +1,71 @@\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Diagnose assignment where\n+\tleft-hand side has a limited view of a class-wide type.\n+\t* sem_ch6.adb (Detected_And_Exchange): Do not install a non-limited\n+\tview if the scope of the type of the formal is visible through\n+\ta limited_with_clause, even if the non-limited view is available.\n+\n+2015-11-18  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* s-pooglo.ads: Make Global_Pool_Object aliased.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case 'Access): If the prefix\n+\tis an expression function, do not analyze the generated body if\n+\tthe current scope is not the scope of the expression function,\n+\tas may happen if the attribute is an actual in an instantiation.\n+\t* sem_ch10.adb, sem_ch12.adb, a-stzmap.adb, s-soflin.adb,\n+\ta-stwima.adb: Fix typos.\n+\n+2015-11-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch11.adb (Expand_N_Exception_Declaration): No-op when\n+\tgenerating C code.\n+\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\tPR ada/66242\n+\n+\t* exp_ch3.adb (Default_Initialize_Object): Reimplemented. Abort\n+\tdefer / undefer pairs are now encapsulated in a block with\n+\tan AT END handler. Partial finalization now takes restriction\n+\tNo_Exception_Propagation into account when generating blocks.\n+\t* exp_ch7.adb Various reformattings.\n+\t(Create_Finalizer): Change\n+\tthe generation of abort defer / undefer pairs and explain the\n+\tlack of an AT END handler.\n+\t(Process_Transient_Objects): Add generation of abort defer/undefer\n+\tpairs.\n+\t* exp_ch9.adb Various reformattings.\n+\t(Build_Protected_Subprogram_Body): Use\n+\tBuild_Runtime_Call to construct a call to Abort_Defer.\n+\t(Build_Protected_Subprogram_Call_Cleanup): Use\n+\tBuild_Runtime_Call to construct a call to Abort_Undefer.\n+\t(Expand_N_Asynchronous_Select): Use Build_Runtime_Call to\n+\tconstruct a call to Abort_Defer.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Abort defer\n+\t/ undefer pairs are now encapsulated in a block with\n+\tan AT END handler. Finalization now takes restriction\n+\tNo_Exception_Propagation into account when generating blocks.\n+\t* exp_util.ads, exp_util.adb (Wrap_Cleanup_Procedure): Removed.\n+\n+2015-11-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* g-comlin.adb (Find_Longest_Matching_Switch): Do not take into\n+\taccount a switch ending with '=' when the actual command line\n+\tswitch is not followed with a space or '='.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Explicit_Dereference): Do not add an access\n+\tcheck if the type of the prefix is known to exclude null.\n+\t* a-coinve.adb (Get_Element_Access): The function returns an\n+\taccess type that excludes null, so add an explicit check for\n+\ta null element pointer, which is created when Insert_Spaces is\n+\tcalled on an indefinite vector container.\n+\n 2015-11-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* switch-c.adb (Scan_Front_End_Switches): Add a check requiring"}, {"sha": "ba0f6932471a4926636d2bc0f0d22e1a771b4b84", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -1076,9 +1076,22 @@ package body Ada.Containers.Indefinite_Vectors is\n    ------------------------\n \n    function Get_Element_Access\n-     (Position : Cursor) return not null Element_Access is\n+     (Position : Cursor) return not null Element_Access\n+   is\n+      Ptr : constant Element_Access :=\n+              Position.Container.Elements.EA (Position.Index);\n+\n    begin\n-      return Position.Container.Elements.EA (Position.Index);\n+      --  An indefinite vector may contain spaces that hold no elements.\n+      --  Any iteration over an indefinite vector with spaces will raise\n+      --  Constraint_Error.\n+\n+      if Ptr = null then\n+         raise Constraint_Error;\n+\n+      else\n+         return Ptr;\n+      end if;\n    end Get_Element_Access;\n \n    -----------------"}, {"sha": "ed6ef60f68365989c9025c418c1de818e074c90d", "filename": "gcc/ada/a-stwima.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fa-stwima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fa-stwima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwima.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -366,7 +366,7 @@ package body Ada.Strings.Wide_Maps is\n          Wide_Character_Mapping_Values_Access);\n \n    begin\n-      if Object.Map /=  Null_Map'Unrestricted_Access then\n+      if Object.Map /= Null_Map'Unrestricted_Access then\n          Free (Object.Map);\n       end if;\n    end Finalize;"}, {"sha": "b331a0f944bd9d43de6c5b3a9458fdef9dbca1a7", "filename": "gcc/ada/a-stzmap.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fa-stzmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fa-stzmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzmap.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -368,7 +368,7 @@ package body Ada.Strings.Wide_Wide_Maps is\n          Wide_Wide_Character_Mapping_Values_Access);\n \n    begin\n-      if Object.Map /=  Null_Map'Unrestricted_Access then\n+      if Object.Map /= Null_Map'Unrestricted_Access then\n          Free (Object.Map);\n       end if;\n    end Finalize;"}, {"sha": "cd33300341fb4dfb21a5e61c92def2d9cf648ddb", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -1250,6 +1250,12 @@ package body Exp_Ch11 is\n    --  Start of processing for Expand_N_Exception_Declaration\n \n    begin\n+      --  Nothing to do when generating C code\n+\n+      if Generate_C_Code then\n+         return;\n+      end if;\n+\n       --  Definition of the external name: nam : constant String := \"A.B.NAME\";\n \n       Ex_Id :="}, {"sha": "de2f3f9601d05cd7a2220f31121ffa2ab7e2df9d", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -556,6 +556,10 @@ package body GNAT.Command_Line is\n            and then Switches (Index .. Last) =\n                       Arg (Arg'First .. Arg'First + Last - Index)\n            and then Last - Index + 1 > Switch_Length\n+           and then\n+             (P /= Parameter_With_Space_Or_Equal\n+               or else Arg'Last = Arg'First + Last - Index\n+               or else Arg (Arg'First + Last - Index + 1) = '=')\n          then\n             Param             := P;\n             Index_In_Switches := Index;"}, {"sha": "99100f819fc8fafc14eb2c670815083f7e4836a2", "filename": "gcc/ada/s-pooglo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fs-pooglo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fs-pooglo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooglo.ads?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -74,6 +74,6 @@ package System.Pool_Global is\n    --     for T'Storage_Pool use Q'Storage_Pool;\n    --  and Q'Storage_Pool hasn't been defined explicitly.\n \n-   Global_Pool_Object : Unbounded_No_Reclaim_Pool;\n+   Global_Pool_Object : aliased Unbounded_No_Reclaim_Pool;\n \n end System.Pool_Global;"}, {"sha": "2d98f309e56ea327677a1151f4bdee7cdc6ab16e", "filename": "gcc/ada/s-soflin.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fs-soflin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fs-soflin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -98,7 +98,7 @@ package body System.Soft_Links is\n \n       --  Finalize all library-level controlled objects if needed\n \n-      if Finalize_Library_Objects /=  null then\n+      if Finalize_Library_Objects /= null then\n          Finalize_Library_Objects.all;\n       end if;\n    end Adafinal_NT;"}, {"sha": "f0bb4cf93224e7630187c6129d9f0c056b4f9288", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -10776,6 +10776,13 @@ package body Sem_Attr is\n                      elsif In_Open_Scopes (Subp_Id) then\n                         null;\n \n+                     --  If reference to the expression function appears in an\n+                     --  inner scope, for example as an actual in an instance,\n+                     --  this is not a freeze point either.\n+\n+                     elsif Scope (Subp_Id) /= Current_Scope then\n+                        null;\n+\n                       --  Analyze the body of the expression function to freeze\n                       --  the expression. This takes care of the case where the\n                       --  'Access is part of dispatch table initialization and"}, {"sha": "b6116afcf4f1b5fe1b8a5e65e17e8fc76ff55055", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -4429,7 +4429,7 @@ package body Sem_Ch10 is\n                   while Present (Subp_Id) loop\n                      if Chars (Node (Subp_Id)) = Chars (E) then\n                         if Nkind (Parent (Parent (Node (Subp_Id))))\n-                          /=  N_Subprogram_Renaming_Declaration\n+                          /= N_Subprogram_Renaming_Declaration\n                         then\n                            Prev_Id := Subp_Id;\n                            Next_Elmt (Subp_Id);"}, {"sha": "aa19cd5a5eb1e33a47fd99617598aebdad712faf", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -11587,7 +11587,7 @@ package body Sem_Ch12 is\n \n          --  Ada 2005: null-exclusion indicators of the two types must agree\n \n-         if Can_Never_Be_Null (A_Gen_T) /=  Can_Never_Be_Null (Act_T) then\n+         if Can_Never_Be_Null (A_Gen_T) /= Can_Never_Be_Null (Act_T) then\n             Error_Msg_NE\n               (\"non null exclusion of actual and formal & do not match\",\n                  Actual, Gen_T);"}, {"sha": "b4e82783b2b8cb808c96909cb588e2b20b695f29", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -506,6 +506,15 @@ package body Sem_Ch5 is\n          Ghost_Mode := Save_Ghost_Mode;\n          return;\n \n+      --  A class-wide type may be a limited view. This illegal case is not\n+      --  caught by previous checks.\n+\n+      elsif Ekind (T1) = E_Class_Wide_Type\n+        and then From_Limited_With (T1)\n+      then\n+         Error_Msg_NE (\"invalid use of limited view of&\", Lhs, T1);\n+         return;\n+\n       --  Enforce RM 3.9.3 (8): the target of an assignment operation cannot be\n       --  abstract. This is only checked when the assignment Comes_From_Source,\n       --  because in some cases the expander generates such assignments (such"}, {"sha": "254fca36394bdd5122ba7fa3db833b77f796be2b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -2786,7 +2786,10 @@ package body Sem_Ch6 is\n          procedure Detect_And_Exchange (Id : Entity_Id);\n          --  Determine whether Id's type denotes an incomplete type associated\n          --  with a limited with clause and exchange the limited view with the\n-         --  non-limited one when available.\n+         --  non-limited one when available. Note that the non-limited view\n+         --  may exist because of a with_clause in another unit in the context,\n+         --  but cannot be used because the current view of the enclosing unit\n+         --  is still a limited view.\n \n          -------------------------\n          -- Detect_And_Exchange --\n@@ -2795,7 +2798,10 @@ package body Sem_Ch6 is\n          procedure Detect_And_Exchange (Id : Entity_Id) is\n             Typ : constant Entity_Id := Etype (Id);\n          begin\n-            if From_Limited_With (Typ) and then Has_Non_Limited_View (Typ) then\n+            if From_Limited_With (Typ)\n+              and then Has_Non_Limited_View (Typ)\n+              and then not From_Limited_With (Scope (Typ))\n+            then\n                Set_Etype (Id, Non_Limited_View (Typ));\n             end if;\n          end Detect_And_Exchange;"}, {"sha": "ec7e01908c34b474e35cb20f737c14944e5700e6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d5c70bbf0d61dc16a0750c245a67db83c0f078/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=72d5c70bbf0d61dc16a0750c245a67db83c0f078", "patch": "@@ -8119,7 +8119,11 @@ package body Sem_Res is\n          Resolve (P);\n       end if;\n \n-      if Is_Access_Type (Etype (P)) then\n+      --  If the prefix might be null, add an access check\n+\n+      if Is_Access_Type (Etype (P))\n+        and then not Can_Never_Be_Null (Etype (P))\n+      then\n          Apply_Access_Check (N);\n       end if;\n "}]}