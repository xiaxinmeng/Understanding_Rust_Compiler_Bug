{"sha": "69ebd99de381091fbb2778eee9c7894c6e2696bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjllYmQ5OWRlMzgxMDkxZmJiMjc3OGVlZTljNzg5NGM2ZTI2OTZiZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-26T22:43:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-26T22:43:53Z"}, "message": "tree-ssa-loop-ivopts.c (ivopts_data, [...]): Use the VEC API instead of VARRAY.\n\n\t* tree-ssa-loop-ivopts.c (ivopts_data, decl_rtl_to_reset,\n\tn_iv_uses, iv_use, n_iv_cands, iv_cand,\n\ttree_ssa_iv_optimize_init, record_use, add_candidate_1,\n\tprepare_decl_rtl, free_loop_data,\n\ttree_ssa_iv_optimize_finalize): Use the VEC API instead of\n\tVARRAY.\n\nFrom-SVN: r98797", "tree": {"sha": "d816ab27e9aa8bcb0a76de201fc6809f11f3464c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d816ab27e9aa8bcb0a76de201fc6809f11f3464c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ebd99de381091fbb2778eee9c7894c6e2696bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ebd99de381091fbb2778eee9c7894c6e2696bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ebd99de381091fbb2778eee9c7894c6e2696bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ebd99de381091fbb2778eee9c7894c6e2696bd/comments", "author": null, "committer": null, "parents": [{"sha": "f5b092e3915fb97432badfd3f3b68f2e68851e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b092e3915fb97432badfd3f3b68f2e68851e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b092e3915fb97432badfd3f3b68f2e68851e92"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "7749832e3bdd713a23e4737632fd2db13d398252", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ebd99de381091fbb2778eee9c7894c6e2696bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ebd99de381091fbb2778eee9c7894c6e2696bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69ebd99de381091fbb2778eee9c7894c6e2696bd", "patch": "@@ -1,3 +1,12 @@\n+2005-04-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-loop-ivopts.c (ivopts_data, decl_rtl_to_reset,\n+\tn_iv_uses, iv_use, n_iv_cands, iv_cand,\n+\ttree_ssa_iv_optimize_init, record_use, add_candidate_1,\n+\tprepare_decl_rtl, free_loop_data,\n+\ttree_ssa_iv_optimize_finalize): Use the VEC API instead of\n+\tVARRAY.\n+\n 2005-04-26  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md (thumb_mulsi3): Use two-operand assembly form."}, {"sha": "a62c1cda8f49b6b016ce8e611c91c929ee88218a", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ebd99de381091fbb2778eee9c7894c6e2696bd/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ebd99de381091fbb2778eee9c7894c6e2696bd/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=69ebd99de381091fbb2778eee9c7894c6e2696bd", "patch": "@@ -195,6 +195,14 @@ struct iv_cand\n \n /* The data used by the induction variable optimizations.  */\n \n+typedef struct iv_use *iv_use_p;\n+DEF_VEC_P(iv_use_p);\n+DEF_VEC_ALLOC_P(iv_use_p,heap);\n+\n+typedef struct iv_cand *iv_cand_p;\n+DEF_VEC_P(iv_cand_p);\n+DEF_VEC_ALLOC_P(iv_cand_p,heap);\n+\n struct ivopts_data\n {\n   /* The currently optimized loop.  */\n@@ -216,10 +224,10 @@ struct ivopts_data\n   unsigned max_inv_id;\n \n   /* The uses of induction variables.  */\n-  varray_type iv_uses;\n+  VEC(iv_use_p,heap) *iv_uses;\n \n   /* The candidates.  */\n-  varray_type iv_candidates;\n+  VEC(iv_cand_p,heap) *iv_candidates;\n \n   /* A bitmap of important candidates.  */\n   bitmap important_candidates;\n@@ -304,38 +312,38 @@ struct iv_ca_delta\n /* The list of trees for that the decl_rtl field must be reset is stored\n    here.  */\n \n-static varray_type decl_rtl_to_reset;\n+static VEC(tree,heap) *decl_rtl_to_reset;\n \n /* Number of uses recorded in DATA.  */\n \n static inline unsigned\n n_iv_uses (struct ivopts_data *data)\n {\n-  return VARRAY_ACTIVE_SIZE (data->iv_uses);\n+  return VEC_length (iv_use_p, data->iv_uses);\n }\n \n /* Ith use recorded in DATA.  */\n \n static inline struct iv_use *\n iv_use (struct ivopts_data *data, unsigned i)\n {\n-  return VARRAY_GENERIC_PTR_NOGC (data->iv_uses, i);\n+  return VEC_index (iv_use_p, data->iv_uses, i);\n }\n \n /* Number of candidates recorded in DATA.  */\n \n static inline unsigned\n n_iv_cands (struct ivopts_data *data)\n {\n-  return VARRAY_ACTIVE_SIZE (data->iv_candidates);\n+  return VEC_length (iv_cand_p, data->iv_candidates);\n }\n \n /* Ith candidate recorded in DATA.  */\n \n static inline struct iv_cand *\n iv_cand (struct ivopts_data *data, unsigned i)\n {\n-  return VARRAY_GENERIC_PTR_NOGC (data->iv_candidates, i);\n+  return VEC_index (iv_cand_p, data->iv_candidates, i);\n }\n \n /* The data for LOOP.  */\n@@ -743,9 +751,9 @@ tree_ssa_iv_optimize_init (struct loops *loops, struct ivopts_data *data)\n     if (loops->parray[i])\n       loops->parray[i]->aux = xcalloc (1, sizeof (struct loop_data));\n \n-  VARRAY_GENERIC_PTR_NOGC_INIT (data->iv_uses, 20, \"iv_uses\");\n-  VARRAY_GENERIC_PTR_NOGC_INIT (data->iv_candidates, 20, \"iv_candidates\");\n-  VARRAY_GENERIC_PTR_NOGC_INIT (decl_rtl_to_reset, 20, \"decl_rtl_to_reset\");\n+  data->iv_uses = VEC_alloc (iv_use_p, heap, 20);\n+  data->iv_candidates = VEC_alloc (iv_cand_p, heap, 20);\n+  decl_rtl_to_reset = VEC_alloc (tree, heap, 20);\n }\n \n /* Returns a memory object to that EXPR points.  In case we are able to\n@@ -1165,7 +1173,7 @@ record_use (struct ivopts_data *data, tree *use_p, struct iv *iv,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_use (dump_file, use);\n \n-  VARRAY_PUSH_GENERIC_PTR_NOGC (data->iv_uses, use);\n+  VEC_safe_push (iv_use_p, heap, data->iv_uses, use);\n \n   return use;\n }\n@@ -1939,7 +1947,7 @@ add_candidate_1 (struct ivopts_data *data,\n \t}\n       cand->important = important;\n       cand->incremented_at = incremented_at;\n-      VARRAY_PUSH_GENERIC_PTR_NOGC (data->iv_candidates, cand);\n+      VEC_safe_push (iv_cand_p, heap, data->iv_candidates, cand);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tdump_cand (dump_file, cand);\n@@ -2439,7 +2447,7 @@ prepare_decl_rtl (tree *expr_p, int *ws, void *data)\n \n   if (x)\n     {\n-      VARRAY_PUSH_GENERIC_PTR_NOGC (decl_rtl_to_reset, obj);\n+      VEC_safe_push (tree, heap, decl_rtl_to_reset, obj);\n       SET_DECL_RTL (obj, x);\n     }\n \n@@ -5235,6 +5243,7 @@ free_loop_data (struct ivopts_data *data)\n {\n   unsigned i, j;\n   bitmap_iterator bi;\n+  tree obj;\n \n   htab_empty (data->niters);\n \n@@ -5265,7 +5274,7 @@ free_loop_data (struct ivopts_data *data)\n       free (use->cost_map);\n       free (use);\n     }\n-  VARRAY_POP_ALL (data->iv_uses);\n+  VEC_truncate (iv_use_p, data->iv_uses, 0);\n \n   for (i = 0; i < n_iv_cands (data); i++)\n     {\n@@ -5275,7 +5284,7 @@ free_loop_data (struct ivopts_data *data)\n \tfree (cand->iv);\n       free (cand);\n     }\n-  VARRAY_POP_ALL (data->iv_candidates);\n+  VEC_truncate (iv_cand_p, data->iv_candidates, 0);\n \n   if (data->version_info_size < num_ssa_names)\n     {\n@@ -5287,13 +5296,10 @@ free_loop_data (struct ivopts_data *data)\n \n   data->max_inv_id = 0;\n \n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (decl_rtl_to_reset); i++)\n-    {\n-      tree obj = VARRAY_GENERIC_PTR_NOGC (decl_rtl_to_reset, i);\n+  for (i = 0; VEC_iterate (tree, decl_rtl_to_reset, i, obj); i++)\n+    SET_DECL_RTL (obj, NULL_RTX);\n \n-      SET_DECL_RTL (obj, NULL_RTX);\n-    }\n-  VARRAY_POP_ALL (decl_rtl_to_reset);\n+  VEC_truncate (tree, decl_rtl_to_reset, 0);\n }\n \n /* Finalizes data structures used by the iv optimization pass.  LOOPS is the\n@@ -5317,9 +5323,9 @@ tree_ssa_iv_optimize_finalize (struct loops *loops, struct ivopts_data *data)\n   BITMAP_FREE (data->important_candidates);\n   htab_delete (data->niters);\n \n-  VARRAY_FREE (decl_rtl_to_reset);\n-  VARRAY_FREE (data->iv_uses);\n-  VARRAY_FREE (data->iv_candidates);\n+  VEC_free (tree, heap, decl_rtl_to_reset);\n+  VEC_free (iv_use_p, heap, data->iv_uses);\n+  VEC_free (iv_cand_p, heap, data->iv_candidates);\n }\n \n /* Optimizes the LOOP.  Returns true if anything changed.  */"}]}