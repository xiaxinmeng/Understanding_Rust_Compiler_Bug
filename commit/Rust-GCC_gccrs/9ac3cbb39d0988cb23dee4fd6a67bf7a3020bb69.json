{"sha": "9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjM2NiYjM5ZDA5ODhjYjIzZGVlNGZkNmE2N2JmN2EzMDIwYmI2OQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-08T16:45:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-08T16:45:55Z"}, "message": "lib-xref-spark_specific.adb (Add_SPARK_Xrefs): Remove special-case for constants (with variable input).\n\ngcc/ada/\n\n2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* lib-xref-spark_specific.adb (Add_SPARK_Xrefs): Remove special-case\n\tfor constants (with variable input).\n\t(Is_Constant_Object_Without_Variable_Input): Remove.\n\n2017-11-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb, sem_disp.adb, sem_util.adb: Minor reformatting.\n\n2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n\n\t* spark_xrefs.ads (Rtype): Remove special-casing of constants for SPARK\n\tcross-references.\n\t(dspark): Remove hardcoded table bound.\n\n2017-11-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Aggregate): For Ada2020 delta aggregates, use\n\tthe type of the base of the construct to determine the type (or\n\tcandidate interpretations) of the delta aggregate. This allows the\n\tconstruct to appear in a context that expects a private extension.\n\t* sem_res.adb (Resolve): Handle properly a delta aggregate with an\n\toverloaded base.\n\ngcc/testsuite/\n\n2017-11-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat.dg/delta_aggr.adb: New testcase.\n\nFrom-SVN: r254544", "tree": {"sha": "f57385bd466da7a53d0bb30642406dff40545952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57385bd466da7a53d0bb30642406dff40545952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/comments", "author": null, "committer": null, "parents": [{"sha": "2cf8eabd48500b8d2480301020bd2aa82cf6556d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf8eabd48500b8d2480301020bd2aa82cf6556d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf8eabd48500b8d2480301020bd2aa82cf6556d"}], "stats": {"total": 231, "additions": 140, "deletions": 91}, "files": [{"sha": "beff132b57e7d384ee45b845b5474666fa6882de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -1,3 +1,28 @@\n+2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref-spark_specific.adb (Add_SPARK_Xrefs): Remove special-case\n+\tfor constants (with variable input).\n+\t(Is_Constant_Object_Without_Variable_Input): Remove.\n+\n+2017-11-08  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb, sem_disp.adb, sem_util.adb: Minor reformatting.\n+\n+2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* spark_xrefs.ads (Rtype): Remove special-casing of constants for SPARK\n+\tcross-references.\n+\t(dspark): Remove hardcoded table bound.\n+\n+2017-11-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Aggregate): For Ada2020 delta aggregates, use\n+\tthe type of the base of the construct to determine the type (or\n+\tcandidate interpretations) of the delta aggregate. This allows the\n+\tconstruct to appear in a context that expects a private extension.\n+\t* sem_res.adb (Resolve): Handle properly a delta aggregate with an\n+\toverloaded base.\n+\n 2017-11-08  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* spark_xrefs.ads (SPARK_Xref_Record): Replace file and scope indices"}, {"sha": "b8f6d99390fb36ab4bf6b64d35eab9e91808d6db", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -12909,8 +12909,8 @@ package body Exp_Ch9 is\n       end if;\n \n       --  If the type of the dispatching object is an access type then return\n-      --  an explicit dereference  of a copy of the object, and note that\n-      --  this is the controlling actual of the call.\n+      --  an explicit dereference  of a copy of the object, and note that this\n+      --  is the controlling actual of the call.\n \n       if Is_Access_Type (Etype (Object)) then\n          Object :=\n@@ -14590,9 +14590,9 @@ package body Exp_Ch9 is\n \n             --    Jnn'unchecked_access\n \n-            --  and add it to aggegate for access to formals. Note that\n-            --  the actual may be by-copy but still be a controlling actual\n-            --  if it is an access to class-wide interface.\n+            --  and add it to aggegate for access to formals. Note that the\n+            --  actual may be by-copy but still be a controlling actual if it\n+            --  is an access to class-wide interface.\n \n             if not Is_Controlling_Actual (Actual) then\n                Append_To (Params,"}, {"sha": "37349faf2f0504f4b6bbb0b97cfd0fa194410f0d", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -252,11 +252,6 @@ package body SPARK_Specific is\n       function Get_Scope_Num (E : Entity_Id) return Nat;\n       --  Return the scope number associated with the entity E\n \n-      function Is_Constant_Object_Without_Variable_Input\n-        (E : Entity_Id) return Boolean;\n-      --  Return True if E is known to have no variable input, as defined in\n-      --  SPARK RM.\n-\n       function Is_Future_Scope_Entity\n         (E : Entity_Id;\n          S : Scope_Index) return Boolean;\n@@ -332,50 +327,6 @@ package body SPARK_Specific is\n \n       function Get_Scope_Num (E : Entity_Id) return Nat renames Scopes.Get;\n \n-      -----------------------------------------------\n-      -- Is_Constant_Object_Without_Variable_Input --\n-      -----------------------------------------------\n-\n-      function Is_Constant_Object_Without_Variable_Input\n-        (E : Entity_Id) return Boolean\n-      is\n-      begin\n-         case Ekind (E) is\n-\n-            --  A constant is known to have no variable input if its\n-            --  initializing expression is static (a value which is\n-            --  compile-time-known is not guaranteed to have no variable input\n-            --  as defined in the SPARK RM). Otherwise, the constant may or not\n-            --  have variable input.\n-\n-            when E_Constant =>\n-               declare\n-                  Decl : Node_Id;\n-               begin\n-                  if Present (Full_View (E)) then\n-                     Decl := Parent (Full_View (E));\n-                  else\n-                     Decl := Parent (E);\n-                  end if;\n-\n-                  if Is_Imported (E) then\n-                     return False;\n-                  else\n-                     pragma Assert (Present (Expression (Decl)));\n-                     return Is_Static_Expression (Expression (Decl));\n-                  end if;\n-               end;\n-\n-            when E_In_Parameter\n-               | E_Loop_Parameter\n-            =>\n-               return True;\n-\n-            when others =>\n-               return False;\n-         end case;\n-      end Is_Constant_Object_Without_Variable_Input;\n-\n       ----------------------------\n       -- Is_Future_Scope_Entity --\n       ----------------------------\n@@ -729,7 +680,6 @@ package body SPARK_Specific is\n          declare\n             Ref_Entry : Xref_Entry renames Xrefs.Table (Rnums (Refno));\n             Ref       : Xref_Key   renames Ref_Entry.Key;\n-            Typ       : Character;\n \n          begin\n             --  If this assertion fails, the scope which we are looking for is\n@@ -757,24 +707,10 @@ package body SPARK_Specific is\n                pragma Assert (Scope_Id <= SPARK_Scope_Table.Last);\n             end loop;\n \n-            --  References to constant objects without variable inputs (see\n-            --  SPARK RM 3.3.1) are considered specially in SPARK section,\n-            --  because these will be translated as constants in the\n-            --  intermediate language for formal verification, and should\n-            --  therefore never appear in frame conditions. Other constants may\n-            --  later be treated the same, up to GNATprove to decide based on\n-            --  its flow analysis.\n-\n-            if Is_Constant_Object_Without_Variable_Input (Ref.Ent) then\n-               Typ := 'c';\n-            else\n-               Typ := Ref.Typ;\n-            end if;\n-\n             SPARK_Xref_Table.Append (\n               (Entity    => Unique_Entity (Ref.Ent),\n                Ref_Scope => Ref.Ref_Scope,\n-               Rtype     => Typ));\n+               Rtype     => Ref.Typ));\n          end;\n       end loop;\n "}, {"sha": "cfc4db7c2b6d08d0d0ae0832de3aa17bdc859ba0", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -414,12 +414,44 @@ package body Sem_Ch4 is\n    -----------------------\n \n    --  Most of the analysis of Aggregates requires that the type be known,\n-   --  and is therefore put off until resolution.\n+   --  and is therefore put off until resolution of the context.\n+   --  Delta aggregates have a base component that determines the type of the\n+   --  enclosing aggregate so its type can be ascertained earlier. This also\n+   --  allows delta aggregates to appear in the context of a record type with\n+   --  a private extension, as per the latest update of AI2-0127.\n \n    procedure Analyze_Aggregate (N : Node_Id) is\n    begin\n       if No (Etype (N)) then\n-         Set_Etype (N, Any_Composite);\n+         if Nkind (N) = N_Delta_Aggregate then\n+            declare\n+               Base : constant Node_Id := Expression (N);\n+               I  : Interp_Index;\n+               It : Interp;\n+\n+            begin\n+               Analyze (Base);\n+\n+               --  If the base is overloaded, propagate interpretations\n+               --  to the enclosing aggregate.\n+\n+               if Is_Overloaded (Base) then\n+                  Get_First_Interp (Base, I, It);\n+                  Set_Etype (N, Any_Type);\n+\n+                  while Present (It.Nam) loop\n+                     Add_One_Interp (N, It.Typ, It.Typ);\n+                     Get_Next_Interp (I, It);\n+                  end loop;\n+\n+               else\n+                  Set_Etype (N, Etype (Base));\n+               end if;\n+            end;\n+\n+         else\n+            Set_Etype (N, Any_Composite);\n+         end if;\n       end if;\n    end Analyze_Aggregate;\n "}, {"sha": "e84fda2933126ce2a866a86adc7fd74cc6f1c41b", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -2371,9 +2371,9 @@ package body Sem_Disp is\n    -----------------------------------\n \n    function Is_Inherited_Public_Operation (Op : Entity_Id) return Boolean is\n+      Pack_Decl : Node_Id;\n       Prim      : Entity_Id := Op;\n       Scop      : Entity_Id := Prim;\n-      Pack_Decl : Node_Id;\n \n    begin\n       --  Locate the ultimate non-hidden alias entity\n@@ -2386,9 +2386,11 @@ package body Sem_Disp is\n \n       if Comes_From_Source (Prim) and then Ekind (Scop) = E_Package then\n          Pack_Decl := Unit_Declaration_Node (Scop);\n-         return Nkind (Pack_Decl) = N_Package_Declaration\n-           and then List_Containing (Unit_Declaration_Node (Prim)) =\n-                            Visible_Declarations (Specification (Pack_Decl));\n+\n+         return\n+           Nkind (Pack_Decl) = N_Package_Declaration\n+             and then List_Containing (Unit_Declaration_Node (Prim)) =\n+                        Visible_Declarations (Specification (Pack_Decl));\n \n       else\n          return False;"}, {"sha": "afa2e8e966c19989ca1772d607f8d7edf3889bae", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -2439,13 +2439,11 @@ package body Sem_Res is\n                   Set_Entity (N, Seen);\n                   Generate_Reference (Seen, N);\n \n-               elsif Nkind (N) = N_Case_Expression then\n-                  Set_Etype (N, Expr_Type);\n-\n-               elsif Nkind (N) = N_Character_Literal then\n-                  Set_Etype (N, Expr_Type);\n-\n-               elsif Nkind (N) = N_If_Expression then\n+               elsif Nkind_In (N, N_Case_Expression,\n+                                  N_Character_Literal,\n+                                  N_If_Expression,\n+                                  N_Delta_Aggregate)\n+               then\n                   Set_Etype (N, Expr_Type);\n \n                --  AI05-0139-2: Expression is overloaded because type has"}, {"sha": "175f5e7c9692c309e5541a901a4fd254002fa7a7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -597,6 +597,7 @@ package body Sem_Util is\n \n       procedure Inner (E : Entity_Id) is\n          Scop : Node_Id;\n+\n       begin\n          --  If entity has an internal name, skip by it, and print its scope.\n          --  Note that we strip a final R from the name before the test; this\n@@ -13198,14 +13199,14 @@ package body Sem_Util is\n       if Ekind (Proc_Nam) = E_Procedure\n         and then Present (Parameter_Specifications (Parent (Proc_Nam)))\n       then\n-         Param := Parameter_Type (First (\n-                    Parameter_Specifications (Parent (Proc_Nam))));\n+         Param :=\n+           Parameter_Type\n+             (First (Parameter_Specifications (Parent (Proc_Nam))));\n \n-         --  The formal may be an anonymous access type.\n+         --  The formal may be an anonymous access type\n \n          if Nkind (Param) = N_Access_Definition then\n             Param_Typ := Entity (Subtype_Mark (Param));\n-\n          else\n             Param_Typ := Etype (Param);\n          end if;\n@@ -23329,6 +23330,7 @@ package body Sem_Util is\n          declare\n             H  : Entity_Id := Homonym (N);\n             Nr : Nat := 1;\n+\n          begin\n             while Present (H) loop\n                if Scope (H) = Scope (N) then"}, {"sha": "552ed595ead24ffef1353ddab215645ddbfbfbe5", "filename": "gcc/ada/spark_xrefs.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fspark_xrefs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fspark_xrefs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -39,7 +39,7 @@ package body SPARK_Xrefs is\n       Write_Line (\"SPARK Xrefs File Table\");\n       Write_Line (\"----------------------\");\n \n-      for Index in 1 .. SPARK_File_Table.Last loop\n+      for Index in SPARK_File_Table.First .. SPARK_File_Table.Last loop\n          declare\n             AFR : SPARK_File_Record renames SPARK_File_Table.Table (Index);\n \n@@ -62,7 +62,7 @@ package body SPARK_Xrefs is\n       Write_Line (\"SPARK Xrefs Scope Table\");\n       Write_Line (\"-----------------------\");\n \n-      for Index in 1 .. SPARK_Scope_Table.Last loop\n+      for Index in SPARK_Scope_Table.First .. SPARK_Scope_Table.Last loop\n          declare\n             ASR : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Index);\n \n@@ -92,7 +92,7 @@ package body SPARK_Xrefs is\n       Write_Line (\"SPARK Xref Table\");\n       Write_Line (\"----------------\");\n \n-      for Index in 1 .. SPARK_Xref_Table.Last loop\n+      for Index in SPARK_Xref_Table.First .. SPARK_Xref_Table.Last loop\n          declare\n             AXR : SPARK_Xref_Record renames SPARK_Xref_Table.Table (Index);\n "}, {"sha": "422300381a8bd9bbe8043acd000a1611f8990fdb", "filename": "gcc/ada/spark_xrefs.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fspark_xrefs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Fada%2Fspark_xrefs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.ads?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -75,7 +75,6 @@ package SPARK_Xrefs is\n       Rtype : Character;\n       --  Indicates type of the reference, using code used in ALI file:\n       --    r = reference\n-      --    c = reference to constant object\n       --    m = modification\n       --    s = call\n    end record;"}, {"sha": "d4a0b0f3c26a96d2bdf4161a4829cdc78d0fa33f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -1,3 +1,7 @@\n+2017-11-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/delta_aggr.adb: New testcase.\n+\n 2017-11-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/pr57878.C (__sso_string_base::_M_get_allocator): Return"}, {"sha": "57e0a69693a4428db3cfbc34d7fe851353917641", "filename": "gcc/testsuite/gnat.dg/delta_aggr.adb", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Ftestsuite%2Fgnat.dg%2Fdelta_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69/gcc%2Ftestsuite%2Fgnat.dg%2Fdelta_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdelta_aggr.adb?ref=9ac3cbb39d0988cb23dee4fd6a67bf7a3020bb69", "patch": "@@ -0,0 +1,51 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnat2020\" }\n+\n+procedure Delta_Aggr is\n+   type T1 is tagged record\n+      F1, F2, F3 : Integer := 0;\n+   end record;\n+\n+   function Make (X : Integer)  return T1 is\n+   begin\n+      return (10, 20, 30);\n+   end Make;\n+\n+   package Pkg is\n+      type T2 is new T1 with private;\n+      X, Y : constant T2;\n+      function Make (X : Integer) return T2;\n+   private\n+      type T2 is new T1 with\n+         record\n+            F4 : Integer := 0;\n+         end record;\n+      X : constant T2 := (0, 0, 0, 0);\n+      Y : constant T2 := (1, 2, 0, 0);\n+   end Pkg;\n+\n+   package body Pkg is\n+      function Make (X : Integer) return T2 is\n+      begin\n+         return (X, X ** 2, X ** 3, X ** 4);\n+      end Make;\n+   end Pkg;\n+\n+   use Pkg;\n+\n+   Z : T2 := (Y with delta F1 => 111);\n+\n+   -- a legal delta aggregate whose type is a private extension\n+   pragma Assert (Y = (X with delta F1 => 1, F2 => 2));\n+   pragma assert (Y.F2 = X.F1);\n+\n+begin\n+   Z := (X with delta F1 => 1);\n+\n+   --  The base of the delta aggregate can be overloaded, in which case\n+   --  the candidate interpretations for the aggregate are those of the\n+   --  base, to be resolved from context.\n+\n+   Z := (Make (2) with delta F1 => 1);\n+   null;\n+end Delta_Aggr;"}]}