{"sha": "8ed3eeac20004dc354bab2a5a0eed027d441b05e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkM2VlYWMyMDAwNGRjMzU0YmFiMmE1YTBlZWQwMjdkNDQxYjA1ZQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-09-23T10:17:22Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-09-23T10:17:22Z"}, "message": "trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Use the old caf- interface where possible.\n\ngcc/fortran/ChangeLog:\n\n2016-09-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Use the old caf-\n\tinterface where possible.\n\ngcc/testsuite/ChangeLog:\n\n2016-09-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\t* gfortran.dg/coarray_lib_comm_1.f90: Using the old caf-interface\n\there now.\n\nFrom-SVN: r240419", "tree": {"sha": "65e58d0396cf9fa640c8c6c7af1f4103f231b7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65e58d0396cf9fa640c8c6c7af1f4103f231b7e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed3eeac20004dc354bab2a5a0eed027d441b05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed3eeac20004dc354bab2a5a0eed027d441b05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed3eeac20004dc354bab2a5a0eed027d441b05e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed3eeac20004dc354bab2a5a0eed027d441b05e/comments", "author": null, "committer": null, "parents": [{"sha": "23427d518be109020c09e5b81e7da7f67ca2e825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23427d518be109020c09e5b81e7da7f67ca2e825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23427d518be109020c09e5b81e7da7f67ca2e825"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "7a99c39986f2ad606d5d1fe534fa38fead97e38f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8ed3eeac20004dc354bab2a5a0eed027d441b05e", "patch": "@@ -1,3 +1,8 @@\n+2016-09-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Use the old caf-\n+\tinterface where possible.\n+\n 2016-09-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* interface.c (check_dtio_interface1): Introduce errors for"}, {"sha": "d3f684290bb39d8302d6b61889e68f08f4c86a2b", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8ed3eeac20004dc354bab2a5a0eed027d441b05e", "patch": "@@ -1607,10 +1607,9 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind,\n   else\n     stat = null_pointer_node;\n \n-  /* Always use the new get_by_ref ().  When no allocatable components are\n-     present and the lhs does not reallocation then the \"old\" get () might\n-     suffice.  */\n-  if (true) //caf_attr->alloc_comp && !may_realloc)\n+  /* Only use the new get_by_ref () where it is necessary.  I.e., when the lhs\n+     is reallocatable or the right-hand side has allocatable components.  */\n+  if (caf_attr->alloc_comp || may_realloc)\n     {\n       /* Get using caf_get_by_ref.  */\n       caf_reference = conv_expr_ref_to_caf_ref (&se->pre, array_expr);"}, {"sha": "488e5db5f50d26e65c5654102307bfd7d5d266f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ed3eeac20004dc354bab2a5a0eed027d441b05e", "patch": "@@ -1,3 +1,8 @@\n+2016-09-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\t* gfortran.dg/coarray_lib_comm_1.f90: Using the old caf-interface\n+\there now.\n+\n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/arm/armv8_2-fp16-arith-1.c: Use arm_v8_2a_fp16_neon"}, {"sha": "cfd1e642a41c22d725548b2696a54bf5aba98ba1", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_comm_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed3eeac20004dc354bab2a5a0eed027d441b05e/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90?ref=8ed3eeac20004dc354bab2a5a0eed027d441b05e", "patch": "@@ -40,7 +40,7 @@\n \n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_sendget \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, _gfortran_caf_this_image \\\\\\(0\\\\\\), &parm.\\[0-9\\]+, 0B, caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_sendget \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, _gfortran_caf_this_image \\\\\\(0\\\\\\), &parm.\\[0-9\\]+, 0B, caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, 4, 4, 1, 0B\\\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get_by_ref \\\\\\(caf_token.0, 1, &p, &caf_ref.\\[0-9\\]+, 4, 4, 1, 0, 0B\\\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get_by_ref \\\\\\(caf_token.1, 1, &p, &caf_ref.\\[0-9\\]+, 4, 4, 0, 0, 0B\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=8\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=8\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 1, 0B\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.1, \\\\\\(integer\\\\\\(kind=8\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=8\\\\\\)\\\\\\) b, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_sendget \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n "}]}