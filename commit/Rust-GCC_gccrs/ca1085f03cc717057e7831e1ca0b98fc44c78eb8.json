{"sha": "ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExMDg1ZjAzY2M3MTcwNTdlNzgzMWUxY2EwYjk4ZmM0NGM3OGViOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-30T21:10:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-30T21:10:03Z"}, "message": "re PR c++/48481 (C++ overloading memory hog)\n\n\tPR c++/48481\n\t* name-lookup.c (struct arg_lookup): Add fn_set.\n\t(add_function): Check it.\n\t(lookup_arg_dependent_1): Initialize it.\n\nFrom-SVN: r175732", "tree": {"sha": "2e6170e21d54849c3694e5891e0d109400bfbcbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6170e21d54849c3694e5891e0d109400bfbcbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4757b0716f16474798aa86c94fdd4df8fbfb25a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4757b0716f16474798aa86c94fdd4df8fbfb25a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4757b0716f16474798aa86c94fdd4df8fbfb25a1"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "42c21fe2150515b60fdf86e15c6e9d4e4883cc18", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "patch": "@@ -1,3 +1,10 @@\n+2011-06-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48481\n+\t* name-lookup.c (struct arg_lookup): Add fn_set.\n+\t(add_function): Check it.\n+\t(lookup_arg_dependent_1): Initialize it.\n+\n 2011-06-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49216"}, {"sha": "615e177e1f1b9e0abd467cf09036edc2e6efe4c7", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"c-family/c-pragma.h\"\n #include \"params.h\"\n+#include \"pointer-set.h\"\n \n /* The bindings for a particular name in a particular scope.  */\n \n@@ -4864,6 +4865,7 @@ struct arg_lookup\n   VEC(tree,gc) *namespaces;\n   VEC(tree,gc) *classes;\n   tree functions;\n+  struct pointer_set_t *fn_set;\n };\n \n static bool arg_assoc (struct arg_lookup*, tree);\n@@ -4883,16 +4885,11 @@ static bool arg_assoc_template_arg (struct arg_lookup*, tree);\n static bool\n add_function (struct arg_lookup *k, tree fn)\n {\n-  /* We used to check here to see if the function was already in the list,\n-     but that's O(n^2), which is just too expensive for function lookup.\n-     Now we deal with the occasional duplicate in joust.  In doing this, we\n-     assume that the number of duplicates will be small compared to the\n-     total number of functions being compared, which should usually be the\n-     case.  */\n-\n   if (!is_overloaded_fn (fn))\n     /* All names except those of (possibly overloaded) functions and\n        function templates are ignored.  */;\n+  else if (k->fn_set && pointer_set_insert (k->fn_set, fn))\n+    /* It's already in the list.  */;\n   else if (!k->functions)\n     k->functions = fn;\n   else if (fn == k->functions)\n@@ -5346,6 +5343,23 @@ lookup_arg_dependent_1 (tree name, tree fns, VEC(tree,gc) *args,\n      picking up later definitions) in the second stage. */\n   k.namespaces = make_tree_vector ();\n \n+  /* We used to allow duplicates and let joust discard them, but\n+     since the above change for DR 164 we end up with duplicates of\n+     all the functions found by unqualified lookup.  So keep track\n+     of which ones we've seen.  */\n+  if (fns)\n+    {\n+      tree ovl;\n+      /* We shouldn't be here if lookup found something other than\n+\t namespace-scope functions.  */\n+      gcc_assert (DECL_NAMESPACE_SCOPE_P (OVL_CURRENT (fns)));\n+      k.fn_set = pointer_set_create ();\n+      for (ovl = fns; ovl; ovl = OVL_NEXT (ovl))\n+\tpointer_set_insert (k.fn_set, OVL_CURRENT (ovl));\n+    }\n+  else\n+    k.fn_set = NULL;\n+\n   if (include_std)\n     arg_assoc_namespace (&k, std_node);\n   arg_assoc_args_vec (&k, args);\n@@ -5363,6 +5377,8 @@ lookup_arg_dependent_1 (tree name, tree fns, VEC(tree,gc) *args,\n \n   release_tree_vector (k.classes);\n   release_tree_vector (k.namespaces);\n+  if (k.fn_set)\n+    pointer_set_destroy (k.fn_set);\n     \n   return fns;\n }"}, {"sha": "d5167c8d2dc26ba878d24f729a3b2ee6353ba753", "filename": "gcc/testsuite/g++.dg/template/crash37.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash37.C?ref=ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "patch": "@@ -11,7 +11,7 @@ struct coperator_stack\n struct helper {};\n \n template<class F>\n-void bla(F f) // { dg-message \"bla|no known conversion\" }\n+void bla(F f)\n {\n }\n \n@@ -20,8 +20,7 @@ struct definition\n {\n  definition()\n  {\n-   bla(coperator_stack::push3<helper>); // { dg-error \"matching\" }\n-   // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 23 }\n+   bla(coperator_stack::push3<helper>); // { dg-error \"pointer to member\" }\n  }\n };\n "}, {"sha": "14f36d4e386f5111e7da718224242df913b20b2a", "filename": "gcc/testsuite/g++.dg/template/ptrmem4.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem4.C?ref=ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "patch": "@@ -16,6 +16,5 @@ struct SpyExample\n \n void SpyExample::ready()\n {\n-  queryAliases(inputs); // { dg-error \"matching\" }\n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 19 }\n+  queryAliases(inputs); // { dg-error \"matching|unresolved\" }\n }"}, {"sha": "448d7914571aa38f92b2f53ea200bb4242cfd52b", "filename": "gcc/testsuite/g++.old-deja/g++.other/pmf3.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1085f03cc717057e7831e1ca0b98fc44c78eb8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf3.C?ref=ca1085f03cc717057e7831e1ca0b98fc44c78eb8", "patch": "@@ -3,7 +3,7 @@\n // Bug: g++ was crashing after giving errors.\n \n template<class T>\n-  void connect_to_method( // { dg-message \"connect_to_method|no known conversion\" }\n+  void connect_to_method(\n     T *receiver,\n     void (T::*method)())\n   {}\n@@ -20,7 +20,6 @@ public:\n \n Gtk_Base::Gtk_Base()\n {\n-  connect_to_method(this,&show);   // { dg-error \"no match\" } invalid pmf expression\n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 23 }\n+  connect_to_method(this,&show);   // { dg-error \"pointer to member\" } invalid pmf expression\n   connect_to_method(this,&expose); // { dg-error \"pointer to member\" } invalid pmf expression\n }"}]}