{"sha": "27204060db51ed0637e394dff387c66c6b944726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyMDQwNjBkYjUxZWQwNjM3ZTM5NGRmZjM4N2M2NmM2Yjk0NDcyNg==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2019-11-14T16:11:30Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-11-14T16:11:30Z"}, "message": "Update the arm-*-vxworks* support\n\n2019-11-13  Jerome Lambourg  <lambourg@adacore.com>\n            Doug Rupp <rupp@adacore.com>\n            Olivier Hainque  <hainque@adacore.com>\n\n\tgcc/\n\t* config.gcc: Collapse the arm-vxworks entries into\n\ta single arm-wrs-vxworks7* one, bpabi based.  Update\n\tthe default cpu from arm8 to armv7-a\n\t* config/arm/vxworks.h (CC1_SPEC): Simplify, knowing that\n\twe always use ARM_UNWIND_INFO.\n\t(DWARF2_UNWIND_INFO): Remove redefinition.\n\t(ARM_TARGET2_DWARF_FORMAT): Likewise.\n\t(VXWORKS_PERSONALITY): Define, to \"llvm\".\n\t(VXWORKS_EXTRA_LIBS_RTP): Define, to \"-lllvm\".\n\n\tlibgcc/\n\t* config.host: Collapse the arm-vxworks entries into\n\ta single arm-wrs-vxworks7* one.\n\t* config/arm/unwind-arm-vxworks.c: Update comments.  Provide\n\t__gnu_Unwind_Find_exidx and a weak dummy __cxa_type_match for\n\tkernel modules, to be overriden by libstdc++ when we link with\n\tit.  Rely on externally provided __exidx_start/end.\n\nCo-Authored-By: Doug Rupp <rupp@adacore.com>\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r278253", "tree": {"sha": "ed26512bbc98d251f21922b5a76f51784fd65d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed26512bbc98d251f21922b5a76f51784fd65d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27204060db51ed0637e394dff387c66c6b944726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27204060db51ed0637e394dff387c66c6b944726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27204060db51ed0637e394dff387c66c6b944726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27204060db51ed0637e394dff387c66c6b944726/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "071ef254a8a9ad947e72b37cd4aa695b57e5b031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071ef254a8a9ad947e72b37cd4aa695b57e5b031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071ef254a8a9ad947e72b37cd4aa695b57e5b031"}], "stats": {"total": 165, "additions": 109, "deletions": 56}, "files": [{"sha": "7140f5acc1d98a9cd48fc9eaa7e61c7d7a7fb1de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27204060db51ed0637e394dff387c66c6b944726/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27204060db51ed0637e394dff387c66c6b944726/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27204060db51ed0637e394dff387c66c6b944726", "patch": "@@ -1,3 +1,17 @@\n+2019-11-14  Jerome Lambourg  <lambourg@adacore.com>\n+\t    Doug Rupp <rupp@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.gcc: Collapse the arm-vxworks entries into\n+\ta single arm-wrs-vxworks7* one, bpabi based.  Update\n+\tthe default cpu from arm8 to armv7-a\n+\t* config/arm/vxworks.h (CC1_SPEC): Simplify, knowing that\n+\twe always use ARM_UNWIND_INFO.\n+\t(DWARF2_UNWIND_INFO): Remove redefinition.\n+\t(ARM_TARGET2_DWARF_FORMAT): Likewise.\n+\t(VXWORKS_PERSONALITY): Define, to \"llvm\".\n+\t(VXWORKS_EXTRA_LIBS_RTP): Define, to \"-lllvm\".\n+\n 2019-11-14  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* config/arm/vxworks.h (TARGET_OS_CPP_BUILTINS): Use"}, {"sha": "5aa0130135fa3ce95df502b3f84e78832b368375", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27204060db51ed0637e394dff387c66c6b944726/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27204060db51ed0637e394dff387c66c6b944726/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=27204060db51ed0637e394dff387c66c6b944726", "patch": "@@ -1148,23 +1148,17 @@ arc*-*-linux*)\n \t# automatically detect that GAS supports it, yet we require it.\n \tgcc_cv_initfini_array=yes\n \t;;\n-arm-wrs-vxworks|arm-wrs-vxworks7)\n+arm-wrs-vxworks7*)\n+\t# We only support VxWorks 7 now on ARM, post SR600.  Pre SR600\n+\t# VxWorks 7 was transitory and major versions prior to 7 were based\n+\t# on long deprecated ABI, not supported at all any more regardless\n+\t# of VxWorks.\n \textra_options=\"${extra_options} arm/vxworks.opt\"\n-\ttmake_file=\"${tmake_file} arm/t-arm arm/t-vxworks\"\n-        case $target in\n-\t*-vxworks7)\n-            # VxWorks7 on ARM adheres to the ARM Base Platform ABI\n-\t    tmake_file=\"${tmake_file} arm/t-bpabi\"\n-\t    tm_file=\"arm/bpabi.h ${tm_file}\"\n-\t    # The BPABI long long divmod functions return a 128-bit value in\n-\t    # registers r0-r3.\n-\t    need_64bit_hwint=yes\n-\t    default_use_cxa_atexit=yes\n-\t    ;;\n-        *)  ;;\n-        esac\n-        tm_file=\"elfos.h arm/elf.h arm/aout.h ${tm_file} vx-common.h vxworks.h arm/vxworks.h\"\n-\ttarget_cpu_cname=\"arm8\"\n+\ttmake_file=\"${tmake_file} arm/t-arm arm/t-vxworks arm/t-bpabi\"\n+\ttm_file=\"elfos.h arm/elf.h arm/bpabi.h arm/aout.h ${tm_file}\"\n+\ttm_file=\"${tm_file} vx-common.h vxworks.h arm/vxworks.h\"\n+\ttarget_cpu_cname=\"armv7-a\"\n+\tneed_64bit_hwint=yes\n \t;;\n arm*-*-freebsd*)                # ARM FreeBSD EABI\n \ttm_file=\"dbxelf.h elfos.h ${fbsd_tm_file} arm/elf.h\""}, {"sha": "865eabcffe4f77c9c25a87b83722def773335489", "filename": "gcc/config/arm/t-vxworks", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27204060db51ed0637e394dff387c66c6b944726/gcc%2Fconfig%2Farm%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27204060db51ed0637e394dff387c66c6b944726/gcc%2Fconfig%2Farm%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-vxworks?ref=27204060db51ed0637e394dff387c66c6b944726", "patch": "@@ -16,7 +16,8 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-MULTILIB_OPTIONS = mrtp fPIC\n+# Multilibs for ARM VxWorks.  With the move to VxWorks 7, we only\n+# support -mrtp variation on top of the default settings at this\n+# stage, without PIC.\n \n-# -fPIC alone is not supported, only together with -mrtp\n-MULTILIB_EXCEPTIONS = fPIC\n+MULTILIB_OPTIONS = mrtp"}, {"sha": "8118e6ef6832e8e6cb22e6c7e75e53eb390ec0b3", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27204060db51ed0637e394dff387c66c6b944726/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27204060db51ed0637e394dff387c66c6b944726/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=27204060db51ed0637e394dff387c66c6b944726", "patch": "@@ -84,15 +84,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* .text.hot and .text.unlikely sections are badly handled by the\n    VxWorks kernel mode loader for ARM style exceptions.  */\n-\n-#if ARM_UNWIND_INFO\n-#define EXTRA_CC1_SPEC \"%{!mrtp:-fno-reorder-functions}\"\n-#else\n-#define EXTRA_CC1_SPEC\n-#endif\n-\n #undef  CC1_SPEC\n-#define CC1_SPEC \"\" EXTRA_CC1_SPEC\n+#define CC1_SPEC VXWORKS_CC1_SPEC \" %{!mrtp:-fno-reorder-functions}\"\n \n /* Translate an explicit -mbig-endian as an explicit -EB to assembler\n    and linker, and pass abi options matching the target expectations\n@@ -121,14 +114,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC VXWORKS_ENDFILE_SPEC\n \n-/* For exceptions, pre VX7 uses DWARF2 info, VX7 uses ARM unwinding.  */\n-#undef  DWARF2_UNWIND_INFO\n-#define DWARF2_UNWIND_INFO (!TARGET_VXWORKS7)\n-\n-#undef ARM_TARGET2_DWARF_FORMAT\n-#define ARM_TARGET2_DWARF_FORMAT \\\n-  (TARGET_VXWORKS_RTP ? (DW_EH_PE_pcrel | DW_EH_PE_indirect) : DW_EH_PE_absptr)\n-\n /* There is no default multilib.  */\n #undef MULTILIB_DEFAULTS\n \n@@ -160,3 +145,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Unless overridded by the target options, the default is little-endian.  */\n #define TARGET_ENDIAN_DEFAULT 0\n+\n+/* The VxWorks environment on ARM is llvm based and we need to link\n+   against libllvm.a to resolve __aeabi_memcpy4.  */\n+\n+#undef VXWORKS_PERSONALITY\n+#define VXWORKS_PERSONALITY \"llvm\"\n+\n+#undef VXWORKS_EXTRA_LIBS_RTP\n+#define VXWORKS_EXTRA_LIBS_RTP \"-lllvm\""}, {"sha": "dfc842d012562fe0afb22aabf31b3e1f6a24a5dd", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27204060db51ed0637e394dff387c66c6b944726/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27204060db51ed0637e394dff387c66c6b944726/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=27204060db51ed0637e394dff387c66c6b944726", "patch": "@@ -1,3 +1,14 @@\n+2019-11-14  Jerome Lambourg  <lambourg@adacore.com>\n+\t    Doug Rupp <rupp@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.host: Collapse the arm-vxworks entries into\n+\ta single arm-wrs-vxworks7* one.\n+\t* config/arm/unwind-arm-vxworks.c: Update comments.  Provide\n+\t__gnu_Unwind_Find_exidx and a weak dummy __cxa_type_match for\n+\tkernel modules, to be overriden by libstdc++ when we link with\n+\tit.  Rely on externally provided __exidx_start/end.\n+\n 2019-11-14  Doug Rupp  <rupp@adacore.com>\n \t    Olivier Hainque  <hainque@adacore.com>\n "}, {"sha": "303516879cd1257901d1086ee3543d55d334bc11", "filename": "libgcc/config.host", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27204060db51ed0637e394dff387c66c6b944726/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27204060db51ed0637e394dff387c66c6b944726/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=27204060db51ed0637e394dff387c66c6b944726", "patch": "@@ -438,18 +438,12 @@ arc*-*-linux*)\n \textra_parts=\"$extra_parts crttls.o\"\n \tmd_unwind_header=arc/linux-unwind.h\n \t;;\n-arm-wrs-vxworks|arm-wrs-vxworks7)\n-\ttmake_file=\"$tmake_file arm/t-arm arm/t-elf t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n+arm-wrs-vxworks7*)\n+\ttmake_file=\"$tmake_file arm/t-arm arm/t-elf arm/t-bpabi arm/t-vxworks7\"\n+        tmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n+\ttm_file=\"$tm_file arm/bpabi-lib.h\"\n+\tunwind_header=config/arm/unwind-arm.h\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n-\tcase ${host} in\n-\t*-*-vxworks7)\n-\t  # Note that arm/t-bpabi will reset the LIB2ADDEH macro.\n-\t  # This is intentional.\n-\t  tmake_file=\"$tmake_file arm/t-bpabi arm/t-vxworks7\"\n-\t  tm_file=\"$tm_file arm/bpabi-lib.h\"\n-\t  unwind_header=config/arm/unwind-arm.h\n-\t  ;;\n-\tesac\n \t;;\n arm*-*-freebsd*)                # ARM FreeBSD EABI\n \ttmake_file=\"${tmake_file} arm/t-arm t-fixedpoint-gnu-prefix arm/t-elf\""}, {"sha": "6fccf10b3c822b40665f994fb26db04d0b235ea9", "filename": "libgcc/config/arm/unwind-arm-vxworks.c", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27204060db51ed0637e394dff387c66c6b944726/libgcc%2Fconfig%2Farm%2Funwind-arm-vxworks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27204060db51ed0637e394dff387c66c6b944726/libgcc%2Fconfig%2Farm%2Funwind-arm-vxworks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Funwind-arm-vxworks.c?ref=27204060db51ed0637e394dff387c66c6b944726", "patch": "@@ -1,4 +1,4 @@\n-/* Support for ARM EABI unwinding in VxWorks Downloadable Kernel Modules.\n+/* Support for ARM EABI unwinding on VxWorks Downloadable Kernel Modules.\n    Copyright (C) 2017-2019 Free Software Foundation, Inc.\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -20,14 +20,59 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if defined(__vxworks) && !defined (__RTP__)\n-/* Vxworks for ARM uses __gnu_Unwind_Find_exidx to retrieve the exception\n-   table for downloadable kernel modules.  As those modules are only partially\n-   linked, the linker won't generate __exidx_start|end, but the two symbols\n-   are still used in alternate paths from unwind-arm-common.inc.\n+/* The common unwinding code refers to __gnu_Unwind_Find_exidx and\n+   __cxa_type_match symbols, which are not in VxWorks kernels on ARM,\n+   now llvm based.\n+\n+   While the common code works just fine for RTPs thanks to weak references\n+   and proper positioning of __exidx_start/end from linker scripts, we need\n+   symbol definitions for kernel modules.  */\n+\n+#ifndef __RTP__\n+\n+#include <private/moduleLibP.h>\n+\n+/* __gnu_Unwind_Find_exidx.  See if we can use _func_moduleExidxGet to\n+   refine whatever we have in __exidx_start and __exidx_end.  */\n+\n+typedef struct\n+{\n+  UINT32 fnoffset;\n+  UINT32 content;\n+} __EIT_entry;\n+\n+extern __EIT_entry __exidx_start;\n+extern __EIT_entry __exidx_end;\n+\n+__EIT_entry *\n+__gnu_Unwind_Find_exidx (void *pc, int *nrec)\n+{\n+  __EIT_entry *pstart = 0;\n+  __EIT_entry *pend = 0;\n+\n+  if (_func_moduleExidxGet != NULL)\n+    _func_moduleExidxGet (pc,\n+\t\t\t  (void *) &__exidx_start, (void *) &__exidx_end,\n+\t\t\t  (void **) &pstart, (void **) &pend);\n+\n+  if (!pstart)\n+    {\n+      pstart = &__exidx_start;\n+      pend = &__exidx_end;\n+    }\n+\n+  *nrec = pend - pstart;\n+\n+  return pstart;\n+}\n+\n+/* __cxa_type_match.  A dummy version to be overridden by the libstdc++ one\n+ when we link with it.  */\n+\n+void * __attribute__((weak))\n+__cxa_type_match ()\n+{\n+  return (void *) 0;\n+}\n \n-   As we don't rely on them, but still need the symbols, we define dummy\n-   values here.  */\n-void *__exidx_start __attribute__((__visibility__ (\"hidden\")));\n-void *__exidx_end __attribute__((__visibility__ (\"hidden\")));\n #endif"}]}