{"sha": "1cb1fa517f041e44898d1abe4293bb367c30ae95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiMWZhNTE3ZjA0MWU0NDg5OGQxYWJlNDI5M2JiMzY3YzMwYWU5NQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-29T11:35:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-29T11:35:34Z"}, "message": "Wnested-externs-1.c, [...]: New tests.\n\n\t* gcc.dg/Wnested-externs-1.c, gcc.dg/decl-7.c, gcc.dg/decl-8.c,\n\tgcc.dg/if-empty-1.c, gcc.dg/init-bad-1.c, gcc.dg/init-bad-2.c,\n\tgcc.dg/init-bad-3.c, gcc.dg/parm-mismatch-1.c: New tests.\n\nFrom-SVN: r91465", "tree": {"sha": "90e4515759bd82802db7b8d774b90f54139c454a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e4515759bd82802db7b8d774b90f54139c454a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cb1fa517f041e44898d1abe4293bb367c30ae95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb1fa517f041e44898d1abe4293bb367c30ae95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb1fa517f041e44898d1abe4293bb367c30ae95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb1fa517f041e44898d1abe4293bb367c30ae95/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e13971e036199cf5f581ca31b43567b9b5aeab34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13971e036199cf5f581ca31b43567b9b5aeab34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e13971e036199cf5f581ca31b43567b9b5aeab34"}], "stats": {"total": 196, "additions": 196, "deletions": 0}, "files": [{"sha": "bad76c7ce5e17a6785f7583a4b8f25fcc574a241", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -1,3 +1,9 @@\n+2004-11-29  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/Wnested-externs-1.c, gcc.dg/decl-7.c, gcc.dg/decl-8.c,\n+\tgcc.dg/if-empty-1.c, gcc.dg/init-bad-1.c, gcc.dg/init-bad-2.c,\n+\tgcc.dg/init-bad-3.c, gcc.dg/parm-mismatch-1.c: New tests.\n+\n 2004-11-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/pr18164.c: New test."}, {"sha": "2d854a8dec9a8f5f193b83d356f9f50233390426", "filename": "gcc/testsuite/gcc.dg/Wnested-externs-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2FWnested-externs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2FWnested-externs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWnested-externs-1.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,22 @@\n+/* Test -Wnested-externs.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wnested-externs\" } */\n+\n+int a;\n+static int b;\n+extern int c;\n+void f0(void);\n+static void f1(void);\n+\n+void\n+g(void)\n+{\n+  extern int a; /* { dg-warning \"warning: nested extern declaration of 'a'\" } */\n+  extern int b; /* { dg-warning \"warning: nested extern declaration of 'b'\" } */\n+  extern int c; /* { dg-warning \"warning: nested extern declaration of 'c'\" } */\n+  extern int d; /* { dg-warning \"warning: nested extern declaration of 'd'\" } */\n+  extern void f0(void); /* { dg-warning \"warning: nested extern declaration of 'f0'\" } */\n+  extern void f1(void); /* { dg-warning \"warning: nested extern declaration of 'f1'\" } */\n+  extern void f2(void); /* { dg-warning \"warning: nested extern declaration of 'f2'\" } */\n+}"}, {"sha": "689ee02f249a65a453499184f99af3e0cab09433", "filename": "gcc/testsuite/gcc.dg/decl-7.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-7.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,6 @@\n+/* Test diagnostic for array defaulting to one element.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int a[]; /* { dg-warning \"warning: array 'a' assumed to have one element\" } */"}, {"sha": "54a7c02b31fc2f8fffae00433dbb355f7449f006", "filename": "gcc/testsuite/gcc.dg/decl-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,10 @@\n+/* Test diagnostics for duplicate typedefs.  Basic diagnostics.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int I; /* { dg-error \"error: previous declaration of 'I' was here\" } */\n+typedef int I; /* { dg-error \"error: redefinition of typedef 'I'\" } */\n+\n+typedef int I1; /* { dg-error \"error: previous declaration of 'I1' was here\" } */\n+typedef long I1; /* { dg-error \"error: conflicting types for 'I1'\" } */"}, {"sha": "a3156c1a7f876336fb23be7244806cec0ccd5ff7", "filename": "gcc/testsuite/gcc.dg/if-empty-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fif-empty-1.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,23 @@\n+/* Test diagnostics for empty bodies in if / else.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra\" } */\n+\n+void\n+f (int x)\n+{\n+  if (x)\n+    ; /* { dg-warning \"warning: empty body in an if-statement\" } */\n+  if (x)\n+    ; /* By design we don't warn in this case.  */\n+  else\n+    (void)0;\n+  if (x)\n+    (void)0;\n+  else\n+    ; /* { dg-warning \"warning: empty body in an else-statement\" } */\n+  if (x)\n+    (void)0;\n+  else\n+    (void)0;\n+}"}, {"sha": "7f20b8cbb0a833e984cbce9f18f270426c24e021", "filename": "gcc/testsuite/gcc.dg/init-bad-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-1.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,45 @@\n+/* Test diagnostics for various bad initializers.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+void f(void);\n+void g(void) = f; /* { dg-error \"error: function 'g' is initialized like a variable\" } */\n+\n+void h(a)\n+     int a = 1; /* { dg-error \"error: parameter 'a' is initialized\" } */\n+{\n+  struct s x = { 0 }; /* { dg-error \"error: variable 'x' has initializer but incomplete type\" } */\n+  /* { dg-warning \"excess elements|near init\" \"\" { target *-*-* } 12 } */\n+  /* { dg-error \"storage size\" \"\" { target *-*-* } 12 } */\n+}\n+\n+char s[1] = \"x\";\n+char s1[1] = { \"x\" };\n+char t[1] = \"xy\"; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"error: excess elements in char array initializer\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 21 } */\n+\n+int i = { }; /* { dg-error \"error: empty scalar initializer\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 24 } */\n+\n+int j = { 1 };\n+\n+int k = { 1, 2 }; /* { dg-warning \"warning: excess elements in scalar initializer\" } */\n+/* { dg-warning \"near init\" \"\" { target *-*-* } 29 } */\n+\n+int a1[1] = { [1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 32 } */\n+int a2[1] = { [-1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 34 } */\n+int a3[1] = { [0 ... 1] = 0 }; /* { dg-error \"error: array index range in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 36 } */\n+int a4[2] = { [1 ... 0] = 0 }; /* { dg-error \"error: empty index range in initializer\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 38 } */\n+int a5[2] = { [0 ... 2] = 0 }; /* { dg-error \"error: array index range in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 40 } */\n+int a6[2] = { [-1 ... 1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 42 } */\n+int a7[] = { [-1 ... 1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 44 } */"}, {"sha": "794cc412db36d5ae64ce90d382e801bc533734e4", "filename": "gcc/testsuite/gcc.dg/init-bad-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-2.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,33 @@\n+/* Test diagnostics for various bad initializers.  Test cases with\n+   standard syntax with -pedantic.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic\" } */\n+\n+void f(void);\n+void g(void) = f; /* { dg-error \"error: function 'g' is initialized like a variable\" } */\n+\n+void h(a)\n+     int a = 1; /* { dg-error \"error: parameter 'a' is initialized\" } */\n+{\n+  struct s x = { 0 }; /* { dg-error \"error: variable 'x' has initializer but incomplete type\" } */\n+  /* { dg-warning \"excess elements|near init\" \"\" { target *-*-* } 13 } */\n+  /* { dg-error \"storage size\" \"\" { target *-*-* } 13 } */\n+}\n+\n+char s[1] = \"x\";\n+char s1[1] = { \"x\" };\n+char t[1] = \"xy\"; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-warning \"warning: initializer-string for array of chars is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"error: excess elements in char array initializer\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 22 } */\n+\n+int j = { 1 };\n+\n+int k = { 1, 2 }; /* { dg-warning \"warning: excess elements in scalar initializer\" } */\n+/* { dg-warning \"near init\" \"\" { target *-*-* } 27 } */\n+\n+int a1[1] = { [1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 30 } */\n+int a2[1] = { [-1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 32 } */"}, {"sha": "aed3d35a49f2c72d56b700afe1c1eb4db2b5b5b7", "filename": "gcc/testsuite/gcc.dg/init-bad-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-3.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,33 @@\n+/* Test diagnostics for various bad initializers.  Test cases with\n+   standard syntax with -pedantic-errors.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n+\n+void f(void);\n+void g(void) = f; /* { dg-error \"error: function 'g' is initialized like a variable\" } */\n+\n+void h(a)\n+     int a = 1; /* { dg-error \"error: parameter 'a' is initialized\" } */\n+{\n+  struct s x = { 0 }; /* { dg-error \"error: variable 'x' has initializer but incomplete type\" } */\n+  /* { dg-error \"excess elements|near init\" \"\" { target *-*-* } 13 } */\n+  /* { dg-error \"storage size\" \"\" { target *-*-* } 13 } */\n+}\n+\n+char s[1] = \"x\";\n+char s1[1] = { \"x\" };\n+char t[1] = \"xy\"; /* { dg-error \"error: initializer-string for array of chars is too long\" } */\n+char t1[1] = { \"xy\" }; /* { dg-error \"error: initializer-string for array of chars is too long\" } */\n+char u[1] = { \"x\", \"x\" }; /* { dg-error \"error: excess elements in char array initializer\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 22 } */\n+\n+int j = { 1 };\n+\n+int k = { 1, 2 }; /* { dg-error \"error: excess elements in scalar initializer\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 27 } */\n+\n+int a1[1] = { [1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 30 } */\n+int a2[1] = { [-1] = 0 }; /* { dg-error \"error: array index in initializer exceeds array bounds\" } */\n+/* { dg-error \"near init\" \"\" { target *-*-* } 32 } */"}, {"sha": "59d9447b2e097c8d75b529cc60214c369c0e83c6", "filename": "gcc/testsuite/gcc.dg/parm-mismatch-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb1fa517f041e44898d1abe4293bb367c30ae95/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c?ref=1cb1fa517f041e44898d1abe4293bb367c30ae95", "patch": "@@ -0,0 +1,18 @@\n+/* Test diagnostics for parameter mismatches.  Types that can't match\n+   ().  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void f0(); /* { dg-error \"error: previous declaration of 'f0' was here\" } */\n+void f0(int, ...); /* { dg-error \"error: conflicting types for 'f0'\" } */\n+/* { dg-error \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"\" { target *-*-* } 8 } */\n+void f1(int, ...); /* { dg-error \"error: previous declaration of 'f1' was here\" } */\n+void f1(); /* { dg-error \"error: conflicting types for 'f1'\" } */\n+/* { dg-error \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"\" { target *-*-* } 11 } */\n+void f2(); /* { dg-error \"error: previous declaration of 'f2' was here\" } */\n+void f2(char); /* { dg-error \"error: conflicting types for 'f2'\" } */\n+/* { dg-error \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"\" { target *-*-* } 14 } */\n+void f3(char); /* { dg-error \"error: previous declaration of 'f3' was here\" } */\n+void f3(); /* { dg-error \"error: conflicting types for 'f3'\" } */\n+/* { dg-error \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"\" { target *-*-* } 17 } */"}]}