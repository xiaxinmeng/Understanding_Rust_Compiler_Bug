{"sha": "dfbf62ec3d64ab32260e1393039239e52b504cdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiZjYyZWMzZDY0YWIzMjI2MGUxMzkzMDM5MjM5ZTUyYjUwNGNkYw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2000-12-17T14:46:34Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-17T14:46:34Z"}, "message": "cppmain.c (check_multiline_token): New function.\n\n        * cppmain.c (check_multiline_token): New function.\n        (scan_buffer): Use it.\n        (cb_change_file): Restructure to avoid warning.\n        * cpperror.c (print_location): Initialize col.\n\nFrom-SVN: r38332", "tree": {"sha": "603a86ad54e6ce0230d8b8d72b36f4ed2e0def07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603a86ad54e6ce0230d8b8d72b36f4ed2e0def07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfbf62ec3d64ab32260e1393039239e52b504cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbf62ec3d64ab32260e1393039239e52b504cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbf62ec3d64ab32260e1393039239e52b504cdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbf62ec3d64ab32260e1393039239e52b504cdc/comments", "author": null, "committer": null, "parents": [{"sha": "04650349dad5d0a41535b16dfd026bbd81a3f5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04650349dad5d0a41535b16dfd026bbd81a3f5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04650349dad5d0a41535b16dfd026bbd81a3f5bb"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "63a25edb029a2631d68debc35890ef77d0c12c7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbf62ec3d64ab32260e1393039239e52b504cdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbf62ec3d64ab32260e1393039239e52b504cdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfbf62ec3d64ab32260e1393039239e52b504cdc", "patch": "@@ -1,3 +1,10 @@\n+2000-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppmain.c (check_multiline_token): New function.\n+        (scan_buffer): Use it.\n+        (cb_change_file): Restructure to avoid warning.\n+        * cpperror.c (print_location): Initialize col.\n+\n 2000-12-14  Philipp Thomas  <pthomas@suse.de>\n \t* protoize.c (main): Correctly set locale categories.\n \t* gcc.c (main): Likewise."}, {"sha": "cfd4ce540f64064186d832dba5f26fbc93809178", "filename": "gcc/cpperror.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbf62ec3d64ab32260e1393039239e52b504cdc/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbf62ec3d64ab32260e1393039239e52b504cdc/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=dfbf62ec3d64ab32260e1393039239e52b504cdc", "patch": "@@ -86,7 +86,7 @@ print_location (pfile, filename, pos)\n     fprintf (stderr, \"%s: \", progname);\n   else\n     {\n-      unsigned int line, col;\n+      unsigned int line, col = 0;\n       enum cpp_buffer_type type = buffer->type;\n \n       /* For _Pragma buffers, we want to print the location as"}, {"sha": "706ff2f85cd89bdc6ba6e798ba23d4bede64254b", "filename": "gcc/cppmain.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbf62ec3d64ab32260e1393039239e52b504cdc/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbf62ec3d64ab32260e1393039239e52b504cdc/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=dfbf62ec3d64ab32260e1393039239e52b504cdc", "patch": "@@ -43,6 +43,7 @@ static void setup_callbacks PARAMS ((void));\n \n /* General output routines.  */\n static void scan_buffer\tPARAMS ((cpp_reader *));\n+static void check_multiline_token PARAMS ((cpp_string *));\n static int printer_init PARAMS ((cpp_reader *));\n static int dump_macro PARAMS ((cpp_reader *, cpp_hashnode *, void *));\n \n@@ -218,11 +219,26 @@ scan_buffer (pfile)\n \n \t  cpp_output_token (token, print.outf);\n \t  print.printed = 1;\n+\t  if (token->type == CPP_STRING || token->type == CPP_WSTRING\n+\t      || token->type == CPP_COMMENT)\n+\t    check_multiline_token (&token->val.str);\n \t}\n     }\n   while (cpp_pop_buffer (pfile) != 0);\n }\n \n+/* Adjust print.lineno for newlines embedded in tokens.  */\n+static void\n+check_multiline_token (str)\n+     cpp_string *str;\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < str->len; i++)\n+    if (str->text[i] == '\\n')\n+      print.lineno++;\n+}\n+\n /* Initialize a cpp_printer structure.  As a side effect, open the\n    output file.  */\n static int\n@@ -362,8 +378,6 @@ cb_change_file (pfile, fc)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n      const cpp_file_change *fc;\n {\n-  const char *flags;\n-\n   /* Bring current file to correct line (except first file).  */\n   if (fc->reason == FC_ENTER && fc->from.filename)\n     maybe_print_line (fc->from.lineno);\n@@ -378,14 +392,13 @@ cb_change_file (pfile, fc)\n \n   if (print.lineno)\n     {\n-      print.lineno = fc->to.lineno;\n-      switch (fc->reason)\n-\t{\n-\tcase FC_ENTER : flags = \" 1\"; break;\n-\tcase FC_LEAVE : flags = \" 2\"; break;\n-\tcase FC_RENAME: flags = \"\"; break;\n-\t}\n+      const char *flags = \"\";\n \n+      print.lineno = fc->to.lineno;\n+      if (fc->reason == FC_ENTER)\n+\tflags = \" 1\";\n+      else if (fc->reason == FC_LEAVE)\n+\tflags = \" 2\";\n       print_line (flags);\n     }\n }"}]}