{"sha": "f0ef740d54f47ff614eb02e13e8f4cb11dfbb140", "node_id": "C_kwDOANBUbNoAKGYwZWY3NDBkNTRmNDdmZjYxNGViMDJlMTNlOGY0Y2IxMWRmYmIxNDA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-02T08:02:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-02T08:06:58Z"}, "message": "openmp: Fix up error recovery for invalid structured bindings in OpenMP range for loops [PR105839]\n\nThe PR108503 temporary DECL_HAS_VALUE_EXPR_P clearing code can ICE\nduring recovery, because cp_finish_decomp when it detects errors and\nreports them clears DECL_HAS_VALUE_EXPR_P, clears DECL_VALUE_EXPR and\nsets TREE_TYPE of the structured binding vars to error_mark_node.\nThe PR108503 code had an assertion that DECL_HAS_VALUE_EXPR_P is set\nso that it can clear it and restore later.\n\nThe following patch allows DECL_HAS_VALUE_EXPR_P to be unset if\ntype is error_mark_node and doesn't set it again in that case.\n\n2023-03-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105839\n\t* parser.cc (cp_convert_omp_range_for): Allow in assert\n\tdecomp_first_name without DECL_HAS_VALUE_EXPR_P if it has\n\terror_mark_node type.\n\t(cp_finish_omp_range_for): Don't set DECL_HAS_VALUE_EXPR_P back\n\ton decls which have error_mark_node type.\n\n\t* g++.dg/gomp/pr105839-1.C: New test.\n\t* g++.dg/gomp/pr105839-2.C: New test.", "tree": {"sha": "910ce6a610ee4dea1bd8f024efcd06138941305e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910ce6a610ee4dea1bd8f024efcd06138941305e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2926653ebbc88e8bba335563fa86b44651598d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2926653ebbc88e8bba335563fa86b44651598d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2926653ebbc88e8bba335563fa86b44651598d6"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "3d6b8f252a356478fbe515e677f313add0163ffb", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=f0ef740d54f47ff614eb02e13e8f4cb11dfbb140", "patch": "@@ -43312,7 +43312,9 @@ cp_convert_omp_range_for (tree &this_pre_body, vec<tree, va_gc> *for_block,\n \t     name but the DECL_VALUE_EXPR will be dependent.  Hide those\n \t     from folding of other loop initializers e.g. for warning\n \t     purposes until cp_finish_omp_range_for.  */\n-\t  gcc_checking_assert (DECL_HAS_VALUE_EXPR_P (decomp_first_name));\n+\t  gcc_checking_assert (DECL_HAS_VALUE_EXPR_P (decomp_first_name)\n+\t\t\t       || (TREE_TYPE (decomp_first_name)\n+\t\t\t\t   == error_mark_node));\n \t  DECL_HAS_VALUE_EXPR_P (decomp_first_name) = 0;\n \t}\n       TREE_VEC_ELT (v, i + 3) = decomp_first_name;\n@@ -43345,7 +43347,8 @@ cp_finish_omp_range_for (tree orig, tree begin)\n \t  tree d = decomp_first_name;\n \t  for (unsigned i = 0; i < decomp_cnt; i++)\n \t    {\n-\t      DECL_HAS_VALUE_EXPR_P (d) = 1;\n+\t      if (TREE_TYPE (d) != error_mark_node)\n+\t\tDECL_HAS_VALUE_EXPR_P (d) = 1;\n \t      d = DECL_CHAIN (d);\n \t    }\n \t}"}, {"sha": "64fb6a39563a266ad780cfabc6482f207290aa45", "filename": "gcc/testsuite/g++.dg/gomp/pr105839-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105839-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105839-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105839-1.C?ref=f0ef740d54f47ff614eb02e13e8f4cb11dfbb140", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/105839\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fopenmp\" }\n+\n+template <typename T>\n+void\n+foo (const T &x)\n+{\n+  [&] (auto &&y)\t\t// { dg-error \"use of 'auto' in lambda parameter declaration only available with\" \"\" { target c++11_only } }\n+  {\n+    #pragma omp parallel for\n+    for (auto &&[v1, v2] : x)\t// { dg-error \"cannot decompose non-array non-class type 'const int'\" }\n+      ;\t\t\t\t// { dg-error \"invalid type for iteration variable\" \"\" { target c++14 } .-1 }\n+\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-2 }\n+  } ([]{});\t\t\t// { dg-error \"no match for call to\" \"\" { target c++11_only } }\n+\t\t\t\t// { dg-error \"invalid user-defined conversion from\" \"\" { target c++11_only } .-1 }\n+\t\t\t\t// { dg-error \"invalid conversion from\" \"\" { target c++11_only } .-2 }\n+}\n+\n+void\n+bar ()\n+{\n+  int a[10];\n+  foo (a);\n+}"}, {"sha": "fdb75958c5f9bdcd48ab10f1c74465c2e25a6398", "filename": "gcc/testsuite/g++.dg/gomp/pr105839-2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105839-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ef740d54f47ff614eb02e13e8f4cb11dfbb140/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105839-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr105839-2.C?ref=f0ef740d54f47ff614eb02e13e8f4cb11dfbb140", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/105839\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-fopenmp\" }\n+\n+template <typename T>\n+void\n+foo (const T &x)\n+{\n+  [&] (auto &&y)\n+  {\n+    #pragma omp parallel for\n+    for (auto &&[v1, v2] : x)\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+      ;\n+  } ([]{});\n+}\n+\n+struct A { int a, b; };\n+\n+void\n+bar ()\n+{\n+  A a[10];\n+  foo (a);\n+}"}]}