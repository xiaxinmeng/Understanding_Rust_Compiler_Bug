{"sha": "5f6705b7b57c0461766f784d6d495986163692bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2NzA1YjdiNTdjMDQ2MTc2NmY3ODRkNmQ0OTU5ODYxNjM2OTJiYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-06T08:08:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-06T08:08:39Z"}, "message": "re PR inline-asm/92352 (ICE in force_constant_size)\n\n\tPR inline-asm/92352\n\t* gimplify.c (gimplify_asm_expr): Reject VLA in output or input\n\toperands with non-memory constraints.\n\n\t* c-c++-common/pr92352.c: New test.\n\nFrom-SVN: r277873", "tree": {"sha": "8599cb1c9c49a0d79201ce71e4f7fdb570486bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8599cb1c9c49a0d79201ce71e4f7fdb570486bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f6705b7b57c0461766f784d6d495986163692bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6705b7b57c0461766f784d6d495986163692bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6705b7b57c0461766f784d6d495986163692bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6705b7b57c0461766f784d6d495986163692bb/comments", "author": null, "committer": null, "parents": [{"sha": "8adf3cc4c30c0bc62a94fe8f13d5e97ee086e387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8adf3cc4c30c0bc62a94fe8f13d5e97ee086e387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8adf3cc4c30c0bc62a94fe8f13d5e97ee086e387"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "7fee0f37e9bffecf65496a71feaaebf41a8e68c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f6705b7b57c0461766f784d6d495986163692bb", "patch": "@@ -1,3 +1,9 @@\n+2019-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/92352\n+\t* gimplify.c (gimplify_asm_expr): Reject VLA in output or input\n+\toperands with non-memory constraints.\n+\n 2019-11-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92373\n@@ -530,10 +536,7 @@\n \tPR middle-end/91647\n \tPR middle-end/91463\n \tPR middle-end/92312\n-\t* c-family/c-pretty-print.c (direct_abstract_declarator): Print\n-\tbound in zero-length arrays.\n-\t* gcc/c-family/c.opt (-Wzero-length-bounds): New option.\n-\t* gcc/doc/invoke.texi (-Wzero-length-bounds): Document.\n+\t* doc/invoke.texi (-Wzero-length-bounds): Document.\n \t* gimple-match-head.c (try_conditional_simplification): Use memcpy\n \tinstead of a hand-rolled loop to avoid PR 92323.\n \t* tree-vrp.c (vrp_prop::check_array_ref): Handle trailing arrays\n@@ -962,7 +965,7 @@\n \t* tree-ssa-loop-niter.h (simplify_replace_tree): Change declaration.\n \t* tree-ssa-loop-niter.c (simplify_replace_tree): Add context parameter\n \tand make the valueize function pointer also take a void pointer.\n-\t* gcc/tree-ssa-sccvn.c (vn_valueize_wrapper): New function to wrap\n+\t* tree-ssa-sccvn.c (vn_valueize_wrapper): New function to wrap\n \taround vn_valueize, to call it without a context.\n \t(process_bb): Use vn_valueize_wrapper instead of vn_valueize.\n \t* tree-vect-loop.c (_loop_vec_info): Initialize epilogue_vinfos.\n@@ -3607,7 +3610,7 @@\n \n 2019-10-12  John David Anglin  <danglin@gcc.gnu.org>\n \n-\t* gcc/config/pa/pa.c (pa_option_override): Remove trailing comma\n+\t* config/pa/pa.c (pa_option_override): Remove trailing comma\n \tfrom warning.\n \n 2019-10-12  Jakub Jelinek  <jakub@redhat.com>\n@@ -4009,7 +4012,7 @@\n 2019-10-08  Dmitrij Pochepko <dmitrij.pochepko@bell-sw.com>\n \n \tPR tree-optimization/90836\n-\t* gcc/match.pd (popcount): New pattern.\n+\t* match.pd (popcount): New pattern.\n \n 2019-10-08  Martin Sebor  <msebor@redhat.com>\n \n@@ -6878,7 +6881,7 @@\n 2019-09-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/91830\n-\t* gcc/gimple-ssa-warn-restrict.c (builtin_memref::set_base_and_offset):\n+\t* gimple-ssa-warn-restrict.c (builtin_memref::set_base_and_offset):\n \tSimplify computation of the offset of the referenced subobject.\n \n 2019-09-21  Iain Sandoe  <iain@sandoe.co.uk>\n@@ -9388,15 +9391,15 @@\n \n 2019-08-23  Wilco Dijkstra  <wdijkstr@arm.com>\n \n-\t* gcc/doc/invoke.texi (mneon-for-64bits): Deprecate option.\n-\t* gcc/config/arm/arm.opt (mneon-for-64bits): Deprecate option.\n-\t* gcc/config/arm/arm.h (TARGET_PREFER_NEON_64BITS): Remove.\n+\t* doc/invoke.texi (mneon-for-64bits): Deprecate option.\n+\t* config/arm/arm.opt (mneon-for-64bits): Deprecate option.\n+\t* config/arm/arm.h (TARGET_PREFER_NEON_64BITS): Remove.\n \t(prefer_neon_for_64bits): Remove.\n-\t* gcc/config/arm/arm.c (prefer_neon_for_64bits): Remove.\n+\t* config/arm/arm.c (prefer_neon_for_64bits): Remove.\n \t(tune_params): Remove PREF_NEON_64_FALSE uses.\n \t(arm_option_override): Remove prefer_neon selection code.\n \t(arm_print_tune_info): Remove prefer_neon_for_64bits.\n-\t* gcc/config/arm/arm-protos.h (tune_params): Remove\n+\t* config/arm/arm-protos.h (tune_params): Remove\n \tprefer_neon_for_64bits.\n \t(prefer_neon_for_64bits): Remove.\n \n@@ -11607,7 +11610,7 @@\n 2019-08-13  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/81800\n-\t* gcc/config/aarch64/aarch64.md (lrint): Disable lrint pattern if GPF\n+\t* config/aarch64/aarch64.md (lrint): Disable lrint pattern if GPF\n \toperand is larger than a long int.\n \n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>"}, {"sha": "1859fddb4bf18ec859d8451d8a2eddd18e4d59f8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5f6705b7b57c0461766f784d6d495986163692bb", "patch": "@@ -21,6 +21,16 @@\n \t* c-common.h (enum rid): Add RID_CONSTEVAL.\n \t* c-common.c (c_common_reswords): Add consteval.\n \n+2019-11-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/91679\n+\tPR middle-end/91647\n+\tPR middle-end/91463\n+\tPR middle-end/92312\n+\t* c-pretty-print.c (direct_abstract_declarator): Print\n+\tbound in zero-length arrays.\n+\t* c.opt (-Wzero-length-bounds): New option.\n+\n 2019-10-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Add 'L' suffix to feature"}, {"sha": "8feb2464b97daec28c0772d44be764e43717c3db", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5f6705b7b57c0461766f784d6d495986163692bb", "patch": "@@ -6235,8 +6235,13 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  is_inout = false;\n \t}\n \n-      /* If we can't make copies, we can only accept memory.  */\n-      if (TREE_ADDRESSABLE (TREE_TYPE (TREE_VALUE (link))))\n+      /* If we can't make copies, we can only accept memory.\n+\t Similarly for VLAs.  */\n+      tree outtype = TREE_TYPE (TREE_VALUE (link));\n+      if (outtype != error_mark_node\n+\t  && (TREE_ADDRESSABLE (outtype)\n+\t      || !COMPLETE_TYPE_P (outtype)\n+\t      || !tree_fits_poly_uint64_p (TYPE_SIZE_UNIT (outtype))))\n \t{\n \t  if (allows_mem)\n \t    allows_reg = 0;\n@@ -6392,7 +6397,11 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\t\t      oconstraints, &allows_mem, &allows_reg);\n \n       /* If we can't make copies, we can only accept memory.  */\n-      if (TREE_ADDRESSABLE (TREE_TYPE (TREE_VALUE (link))))\n+      tree intype = TREE_TYPE (TREE_VALUE (link));\n+      if (intype != error_mark_node\n+\t  && (TREE_ADDRESSABLE (intype)\n+\t      || !COMPLETE_TYPE_P (intype)\n+\t      || !tree_fits_poly_uint64_p (TYPE_SIZE_UNIT (intype))))\n \t{\n \t  if (allows_mem)\n \t    allows_reg = 0;"}, {"sha": "a0f52ec2c5cda4ee6a9437e8f79e26be83239b1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f6705b7b57c0461766f784d6d495986163692bb", "patch": "@@ -1,3 +1,8 @@\n+2019-11-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR inline-asm/92352\n+\t* c-c++-common/pr92352.c: New test.\n+\n 2019-11-06  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n \n \tPR92090"}, {"sha": "d714e9fa32ad386b21c9fbb496332f79283196fd", "filename": "gcc/testsuite/c-c++-common/pr92352.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr92352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f6705b7b57c0461766f784d6d495986163692bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr92352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr92352.c?ref=5f6705b7b57c0461766f784d6d495986163692bb", "patch": "@@ -0,0 +1,15 @@\n+/* PR inline-asm/92352 */\n+\n+void\n+foo (int x)\n+{\n+  int var[x];\n+  asm volatile (\"\" : \"+r\" (var));\t/* { dg-error \"impossible constraint in 'asm'\" } */\n+}\t\t\t\t\t/* { dg-error \"non-memory output 0 must stay in memory\" \"\" { target *-*-* } .-1 } */\n+\n+void\n+bar (int x)\n+{\n+  int var[x];\n+  asm volatile (\"\" : \"+m\" (var));\n+}"}]}