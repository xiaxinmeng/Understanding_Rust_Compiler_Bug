{"sha": "5af874fb6518ed3e21c1e0f750fac86788fdafa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmODc0ZmI2NTE4ZWQzZTIxYzFlMGY3NTBmYWM4Njc4OGZkYWZhMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-09T15:27:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-09T15:27:01Z"}, "message": "re PR c++/66387 (ICE in make_decl_rtl with lambda)\n\n\tPR c++/66387\n\t* semantics.c (process_outer_var_ref): Make sure the value is\n\tactually constant before returning it.\n\t* typeck.c (cp_build_array_ref): Allow subscripting non-lvalue\n\tarray.\n\nFrom-SVN: r224287", "tree": {"sha": "9daa2e07f2106d90a2a2ea5325b24c470fbb6ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9daa2e07f2106d90a2a2ea5325b24c470fbb6ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5af874fb6518ed3e21c1e0f750fac86788fdafa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af874fb6518ed3e21c1e0f750fac86788fdafa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af874fb6518ed3e21c1e0f750fac86788fdafa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af874fb6518ed3e21c1e0f750fac86788fdafa3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebcf592c841f47aa38ce0a9d95b4f04af975b0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcf592c841f47aa38ce0a9d95b4f04af975b0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcf592c841f47aa38ce0a9d95b4f04af975b0ac"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "089f693af80fa2e72e0c6022ca6b2d39b3b73f52", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5af874fb6518ed3e21c1e0f750fac86788fdafa3", "patch": "@@ -1,3 +1,11 @@\n+2015-06-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66387\n+\t* semantics.c (process_outer_var_ref): Make sure the value is\n+\tactually constant before returning it.\n+\t* typeck.c (cp_build_array_ref): Allow subscripting non-lvalue\n+\tarray.\n+\n 2015-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/65815"}, {"sha": "59ec9047c26cc9a141306a823dc5fba5f2dd2c84", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5af874fb6518ed3e21c1e0f750fac86788fdafa3", "patch": "@@ -3128,7 +3128,11 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain)\n \t   form, so wait until instantiation time.  */\n \treturn decl;\n       else if (decl_constant_var_p (decl))\n-\treturn scalar_constant_value (decl);\n+\t{\n+\t  tree t = maybe_constant_value (convert_from_reference (decl));\n+\t  if (TREE_CONSTANT (t))\n+\t    return t;\n+\t}\n     }\n \n   if (parsing_nsdmi ())"}, {"sha": "5b09b73bafa29120ce697cd22b64159f91005457", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5af874fb6518ed3e21c1e0f750fac86788fdafa3", "patch": "@@ -3141,15 +3141,6 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n \t    return error_mark_node;\n \t}\n \n-      if (!lvalue_p (array))\n-\t{\n-\t  if (complain & tf_error)\n-\t    pedwarn (loc, OPT_Wpedantic, \n-\t\t     \"ISO C++ forbids subscripting non-lvalue array\");\n-\t  else\n-\t    return error_mark_node;\n-\t}\n-\n       /* Note in C++ it is valid to subscript a `register' array, since\n \t it is valid to take the address of something with that\n \t storage specification.  */"}, {"sha": "cba0370f129b4652a2972c64fbc5166cb29e80b1", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-const5.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af874fb6518ed3e21c1e0f750fac86788fdafa3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const5.C?ref=5af874fb6518ed3e21c1e0f750fac86788fdafa3", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/66387\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+void\n+bar (T x)\n+{\n+  x ();\n+}\n+\n+void\n+foo ()\n+{\n+  constexpr int a[1] = { 1 };\n+  bar ([&]{ return a[0]; });\n+}"}]}