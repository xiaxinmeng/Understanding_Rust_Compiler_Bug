{"sha": "9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzZmZlNWY3YTdhZGI5ZDU0MWM5NzZlMzZlMWUwZGE5NDUwNjUwNg==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-02-12T13:14:52Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-02-12T13:14:52Z"}, "message": "re PR tree-optimization/29145 (unsafe use of restrict qualifier)\n\n        PR tree-optimization/29145\n        * tree-data-ref.c (base_addr_differ_p): Make us more conservative\n        in our handling of restrict qualified pointers.\n\nFrom-SVN: r121844", "tree": {"sha": "e603124bde74fd9d2dfcbd602643a9464d62b175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e603124bde74fd9d2dfcbd602643a9464d62b175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/comments", "author": null, "committer": null, "parents": [{"sha": "27f33b1531f5e59660355565e056a6630eafd762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f33b1531f5e59660355565e056a6630eafd762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f33b1531f5e59660355565e056a6630eafd762"}], "stats": {"total": 104, "additions": 92, "deletions": 12}, "files": [{"sha": "3e65ea41e64ee940a83eac403d8692aecbda6e0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "patch": "@@ -1,3 +1,9 @@\n+2007-02-12  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/29145\n+\t* tree-data-ref.c (base_addr_differ_p): Make us more conservative\n+\tin our handling of restrict qualified pointers.\n+\n 2007-02-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR middle-end/7651"}, {"sha": "822bcff203bd214fdd6ddb7bb70196178c188c25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "patch": "@@ -1,3 +1,12 @@\n+2007-02-12  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/29145\n+\t* gcc.dg/vect/vect-74.c: Xfail the test - cannot be vectorized until\n+\talias analysis is improved to take better advantage of restrict\n+\tqualified pointers.\n+\t* gcc.dg/vect/vect-80.c: Likewise.\n+\t* gcc.dg/vect/pr29145.c: New.\n+\n 2007-02-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/sse4a-extract.c: Add \"LL\" to 64bit constants."}, {"sha": "97d190ca2782a6f920d2740313f11112a6612f65", "filename": "gcc/testsuite/gcc.dg/vect/pr29145.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr29145.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr29145.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr29145.c?ref=9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+void with_restrict(int * __restrict p)\n+{\n+  int i;\n+  int *q = p - 2;\n+\n+  for (i = 0; i < 1000; ++i) {\n+    p[i] = q[i];\n+  }\n+}\n+\n+void without_restrict(int * p)\n+{\n+  int i;\n+  int *q = p - 2;\n+\n+  for (i = 0; i < 1000; ++i) {\n+    p[i] = q[i];\n+  }\n+}\n+\n+int main(void)\n+{\n+  int i;\n+  int a[1002];\n+  int b[1002];\n+\n+  for (i = 0; i < 1002; ++i) {\n+    a[i] = b[i] = i;\n+  }\n+\n+  with_restrict(a + 2);\n+  without_restrict(b + 2);\n+\n+  for (i = 0; i < 1002; ++i) {\n+    if (a[i] != b[i])\n+      abort();\n+  }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "08155128eef33225a11bf409e4c48171f8c3a6e9", "filename": "gcc/testsuite/gcc.dg/vect/vect-74.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c?ref=9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "patch": "@@ -42,8 +42,11 @@ int main (void)\n   return 0;\t\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } } } */\n+/* Xfail until handling restrict is refined.  See pr29145 */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* Uncomment when this testcase gets vectorized again:    \n+ dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 3 \"vect\" { target vect_no_align } } \n+ dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } \n+ dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } }  \n+*/\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "916935cbe50eb31b3b33cf85b3d3317411731045", "filename": "gcc/testsuite/gcc.dg/vect/vect-80.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c?ref=9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "patch": "@@ -47,8 +47,10 @@ int main (void)\n    all three accesses (peeling to align the store will not force the\n    two loads to be aligned).  */\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* Uncomment when this testcase gets vectorized again:\n+ dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail vect_no_align } } \n+ dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail vect_no_align } } \n+ dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target vect_no_align } } \n+*/\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d49d68220c07bba11138c98d9d14ba2bb1c27c5c", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3ffe5f7a7adb9d541c976e36e1e0da94506506/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=9b3ffe5f7a7adb9d541c976e36e1e0da94506506", "patch": "@@ -490,6 +490,7 @@ base_addr_differ_p (struct data_reference *dra,\n   tree addr_a = DR_BASE_ADDRESS (dra);\n   tree addr_b = DR_BASE_ADDRESS (drb);\n   tree type_a, type_b;\n+  tree decl_a, decl_b;\n   bool aliased;\n \n   if (!addr_a || !addr_b)\n@@ -547,14 +548,25 @@ base_addr_differ_p (struct data_reference *dra,\n     }\n   \n   /* An instruction writing through a restricted pointer is \"independent\" of any \n-     instruction reading or writing through a different pointer, in the same \n-     block/scope.  */\n-  else if ((TYPE_RESTRICT (type_a) && !DR_IS_READ (dra))\n-      || (TYPE_RESTRICT (type_b) && !DR_IS_READ (drb)))\n+     instruction reading or writing through a different restricted pointer, \n+     in the same block/scope.  */\n+  else if (TYPE_RESTRICT (type_a)\n+\t   &&  TYPE_RESTRICT (type_b) \n+\t   && (!DR_IS_READ (drb) || !DR_IS_READ (dra))\n+\t   && TREE_CODE (DR_BASE_ADDRESS (dra)) == SSA_NAME\n+\t   && (decl_a = SSA_NAME_VAR (DR_BASE_ADDRESS (dra)))\n+\t   && TREE_CODE (decl_a) == PARM_DECL\n+\t   && TREE_CODE (DECL_CONTEXT (decl_a)) == FUNCTION_DECL\n+\t   && TREE_CODE (DR_BASE_ADDRESS (drb)) == SSA_NAME\n+\t   && (decl_b = SSA_NAME_VAR (DR_BASE_ADDRESS (drb)))\n+\t   && TREE_CODE (decl_b) == PARM_DECL\n+\t   && TREE_CODE (DECL_CONTEXT (decl_b)) == FUNCTION_DECL\n+\t   && DECL_CONTEXT (decl_a) == DECL_CONTEXT (decl_b)) \n     {\n       *differ_p = true;\n       return true;\n     }\n+\n   return false;\n }\n "}]}