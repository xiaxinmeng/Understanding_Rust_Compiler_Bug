{"sha": "23f5bf99f023fdd49ef2f77d884833ce08136942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmNWJmOTlmMDIzZmRkNDllZjJmNzdkODg0ODMzY2UwODEzNjk0Mg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-27T21:39:46Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-27T21:39:46Z"}, "message": "Initial revision\n\nFrom-SVN: r2927", "tree": {"sha": "a9700c4bad44057ae7b2b667bd777d1bfeaf6596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9700c4bad44057ae7b2b667bd777d1bfeaf6596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23f5bf99f023fdd49ef2f77d884833ce08136942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f5bf99f023fdd49ef2f77d884833ce08136942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f5bf99f023fdd49ef2f77d884833ce08136942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f5bf99f023fdd49ef2f77d884833ce08136942/comments", "author": null, "committer": null, "parents": [{"sha": "cb1110b5f8aa6a1058cb8850e83ccccb70aaae76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1110b5f8aa6a1058cb8850e83ccccb70aaae76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1110b5f8aa6a1058cb8850e83ccccb70aaae76"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "93016d99d7b30f78c06a1346942ea6a0748e9fd3", "filename": "gcc/config/m88k/dgux.ld", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f5bf99f023fdd49ef2f77d884833ce08136942/gcc%2Fconfig%2Fm88k%2Fdgux.ld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f5bf99f023fdd49ef2f77d884833ce08136942/gcc%2Fconfig%2Fm88k%2Fdgux.ld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.ld?ref=23f5bf99f023fdd49ef2f77d884833ce08136942", "patch": "@@ -0,0 +1,47 @@\n+/* m88kdgux.ld - COFF linker directives for G++ on an AViiON\n+\n+   This file is part of GNU CC.\n+   \n+   GNU CC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+   \n+   GNU CC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with GNU CC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+   \n+   On The AViiON we start the output .text section somewhere after the\n+   first 64kb (0x10000) of logical address space so that the first\n+   64kb can be mapped out, thus catching references through null\n+   pointers.  We actually start at 0x10200 (for efficiency).  Ideally,\n+   we want the page offset of a given word of the .text (output)\n+   section to be the same as it's page offset in the actual (output)\n+   linked core file so that paging of the .text section is efficient.\n+   In order to do this we allow for up to 0x200 bytes of header stuff\n+   in the output (linked) object file.\n+   \n+   For .data, the OCS says that regions with different \"protections\"\n+   (i.e. read/write, read-only) should not share any 4 megabyte chunk\n+   of the logical address space, so we start the .data segment at the\n+   first (lowest) 4 MB boundary past the end of the .text segment.\n+   \n+   For some reason, you can't start right at the 4 MB boundary.  You\n+   have to start at some distance past that.  The distance must be\n+   equal to the distance from the start of the last 64 KB segment in\n+   the (output) .text segment to the actual end of the (output) .text\n+   segment.  */\n+\n+SECTIONS {\n+  .text 0x10200 BLOCK(0x200) :\n+    { *(.init) *(.initp) *(.finip) *(.text) *(.tdesc) }\n+\n+  GROUP BIND (((((ADDR(.text) + SIZEOF(.text) - 1) / 0x400000) + 1) * 0x400000) + ((ADDR(.text) + SIZEOF (.text)) % 0x10000)) :\n+    { .data : { *(.data) *(.ctors) *(.dtors) }\n+      .bss  : {} }\n+}"}, {"sha": "0c9b2c56be1f60b4fa69ea6404c73184b4678e96", "filename": "gcc/config/m88k/t-dgux", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f5bf99f023fdd49ef2f77d884833ce08136942/gcc%2Fconfig%2Fm88k%2Ft-dgux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f5bf99f023fdd49ef2f77d884833ce08136942/gcc%2Fconfig%2Fm88k%2Ft-dgux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-dgux?ref=23f5bf99f023fdd49ef2f77d884833ce08136942", "patch": "@@ -0,0 +1,20 @@\n+# Specify how to create the *.asm files\n+\n+MOVE_ASM = moveHI15x.asm moveQI16x.asm moveSI46x.asm moveSI64n.asm \\\n+\t   moveHI48x.asm moveSI45x.asm moveSI47x.asm moveSI96x.asm \\\n+\t   moveDI96x.asm\n+\n+$(MOVE_ASM): $(srcdir)/config/m88k-move.sh\n+\t$(srcdir)/config/m88k-move.sh\n+\n+LIB2FUNCS_EXTRA = $(MOVE_ASM)\n+LIBGCC1 = libgcc1.null\n+\n+# For DG/UX we build crtbegin.o and crtend.o which serve to add begin and\n+# end labels to the .ctors and .dtors section when we link using gcc.\n+# In a coff environment, a link script is required.\n+\n+EXTRA_PARTS=crtbegin.o crtend.o m88kdgux.ld\n+\n+m88kdgux.ld: $(srcdir)/config/m88kdgux.ld\n+\trm -f m88kdgux.ld; cp $(srcdir)/config/m88kdgux.ld ."}]}