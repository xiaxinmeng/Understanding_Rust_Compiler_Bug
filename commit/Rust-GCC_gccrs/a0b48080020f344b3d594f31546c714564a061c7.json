{"sha": "a0b48080020f344b3d594f31546c714564a061c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiNDgwODAwMjBmMzQ0YjNkNTk0ZjMxNTQ2YzcxNDU2NGEwNjFjNw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2018-11-16T13:39:18Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2018-11-16T13:39:18Z"}, "message": "Don't use %z printf length specifier\n\n\t* system.h (PRsa): New macro.\n\t(SIZE_AMOUNT): Cast number to uint64_t.\n\t* alloc-pool.h (pool_usage::dump): Don't use %zu but PRsa.\n\t(pool_usage::dump_footer): Likewise and also use PRIu64.\n\t* bitmap.h (bitmap_usage::dump): Likewise.\n\t* ggc-common.c (ggc_usage::dump): Likewise.\n\t* ggc-page.c (ggc_print_statistics): Likewise.\n\t* input.c (dump_line_table_statistics): Likewise.\n\t* mem-stats.h (mem_usage::dump): Likewise.\n\t(mem_usage::dump_footer): Likewise.\n\t* rtl.c (dump_rtx_statistics): Likewise.\n\t* tree-cfg.c (dump_cfg_stats): Likewise.\n\t* tree-dfa.c (dump_dfa_stats): Likewise.\n\t* tree-phinodes.c (phinodes_print_statistics): Likewise.\n\t* tree-ssanames (ssanames_print_statistics): Likewise.\n\t* vec.c (vec_usage::dump): Likewise.\n\t(vec_usage::dump_footer): Likewise.\n\nFrom-SVN: r266208", "tree": {"sha": "8162f07dcc25096c1086e79bcd23464be41cb879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8162f07dcc25096c1086e79bcd23464be41cb879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b48080020f344b3d594f31546c714564a061c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b48080020f344b3d594f31546c714564a061c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b48080020f344b3d594f31546c714564a061c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b48080020f344b3d594f31546c714564a061c7/comments", "author": null, "committer": null, "parents": [{"sha": "12eac2321bb613a447197e7a1308d4ce4a266dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12eac2321bb613a447197e7a1308d4ce4a266dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12eac2321bb613a447197e7a1308d4ce4a266dd5"}], "stats": {"total": 176, "additions": 101, "deletions": 75}, "files": [{"sha": "07cdcc75bd86cc68e8af91fb8ebdb6e83b489702", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -1,3 +1,23 @@\n+2018-11-16  Michael Matz  <matz@suse.de>\n+\n+\t* system.h (PRsa): New macro.\n+\t(SIZE_AMOUNT): Cast number to uint64_t.\n+\t* alloc-pool.h (pool_usage::dump): Don't use %zu but PRsa.\n+\t(pool_usage::dump_footer): Likewise and also use PRIu64.\n+\t* bitmap.h (bitmap_usage::dump): Likewise.\n+\t* ggc-common.c (ggc_usage::dump): Likewise.\n+\t* ggc-page.c (ggc_print_statistics): Likewise.\n+\t* input.c (dump_line_table_statistics): Likewise.\n+\t* mem-stats.h (mem_usage::dump): Likewise.\n+\t(mem_usage::dump_footer): Likewise.\n+\t* rtl.c (dump_rtx_statistics): Likewise.\n+\t* tree-cfg.c (dump_cfg_stats): Likewise.\n+\t* tree-dfa.c (dump_dfa_stats): Likewise.\n+\t* tree-phinodes.c (phinodes_print_statistics): Likewise.\n+\t* tree-ssanames (ssanames_print_statistics): Likewise.\n+\t* vec.c (vec_usage::dump): Likewise.\n+\t(vec_usage::dump_footer): Likewise.\n+\n 2018-11-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88011\n@@ -40,7 +60,7 @@\n \t(alloc_size, nonnull, sentinel): Same.\n \n 2018-11-15  Andrew Stubbs  <ams@codesourcery.com>\n-            Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* tree-vect-stmts.c (vectorizable_store): Don't ICE when\n \tint_mode_for_size fails.\n@@ -91,10 +111,10 @@\n \n 2018-11-15  Richard Biener  <rguenther@suse.de>\n \n-        PR middle-end/88029\n-        * gimple.c (gimple_call_flags): Union flags from decl, type\n-        and call fntype.\n-        * trans-mem.c (is_tm_pure_call): Simplify.\n+\tPR middle-end/88029\n+\t* gimple.c (gimple_call_flags): Union flags from decl, type\n+\tand call fntype.\n+\t* trans-mem.c (is_tm_pure_call): Simplify.\n \n 2018-11-15  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "81cb69e227abb593617fa53fc2f047fc1d979b3d", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -63,16 +63,16 @@ struct pool_usage: public mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-32s%-48s %5zu%c%9zu%c:%5.1f%%%9zu\"\n-\t     \"%c%9zu%c:%5.1f%%%12zu\\n\",\n+    fprintf (stderr, \"%-32s%-48s \" PRsa(5) PRsa(9) \":%5.1f%%\"\n+\t     PRsa(9) PRsa(9) \":%5.1f%%%12\" PRIu64 \"\\n\",\n \t     m_pool_name, location_string,\n \t     SIZE_AMOUNT (m_instances),\n \t     SIZE_AMOUNT (m_allocated),\n \t     get_percent (m_allocated, total.m_allocated),\n \t     SIZE_AMOUNT (m_peak),\n \t     SIZE_AMOUNT (m_times),\n \t     get_percent (m_times, total.m_times),\n-\t     m_element_size);\n+\t     (uint64_t)m_element_size);\n \n     free (location_string);\n   }\n@@ -91,7 +91,7 @@ struct pool_usage: public mem_usage\n   dump_footer ()\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%82zu%c%10zu%c\\n\", \"Total\",\n+    fprintf (stderr, \"%s\" PRsa(82) PRsa(10) \"\\n\", \"Total\",\n \t     SIZE_AMOUNT (m_instances), SIZE_AMOUNT (m_allocated));\n     print_dash_line ();\n   }"}, {"sha": "9a180daa7454722756d9acccc273eb2d22e45a63", "filename": "gcc/bitmap.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -239,9 +239,9 @@ struct bitmap_usage: public mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-48s %9zu%c:%5.1f%%\"\n-\t     \"%9zu%c%9zu%c:%5.1f%%\"\n-\t     \"%11\" PRIu64 \"%c%11\" PRIu64 \"%c%10s\\n\",\n+    fprintf (stderr, \"%-48s \" PRsa (9) \":%5.1f%%\"\n+\t     PRsa (9) PRsa (9) \":%5.1f%%\"\n+\t     PRsa (11) PRsa (11) \"%10s\\n\",\n \t     location_string, SIZE_AMOUNT (m_allocated),\n \t     get_percent (m_allocated, total.m_allocated),\n \t     SIZE_AMOUNT (m_peak), SIZE_AMOUNT (m_times),"}, {"sha": "c989fb01e669c1a8286da96d5a75f412ad56a249", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -884,8 +884,8 @@ struct ggc_usage: public mem_usage\n   {\n     size_t balance = get_balance ();\n     fprintf (stderr,\n-\t     \"%-48s %9zu%c:%5.1f%%%9zu%c:%5.1f%%\"\n-\t     \"%9zu%c:%5.1f%%%9zu%c:%5.1f%%%9zu%c\\n\",\n+\t     \"%-48s \" PRsa (9) \":%5.1f%%\" PRsa (9) \":%5.1f%%\"\n+\t     PRsa (9) \":%5.1f%%\" PRsa (9) \":%5.1f%%\" PRsa (9) \"\\n\",\n \t     prefix, SIZE_AMOUNT (m_collected),\n \t     get_percent (m_collected, total.m_collected),\n \t     SIZE_AMOUNT (m_freed), get_percent (m_freed, total.m_freed),"}, {"sha": "f04b22ca8cca59da95121508d4a8c132f96f6d56", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -2288,14 +2288,15 @@ ggc_print_statistics (void)\n \t  overhead += (sizeof (page_entry) - sizeof (long)\n \t\t       + BITMAP_SIZE (OBJECTS_IN_PAGE (p) + 1));\n \t}\n-      fprintf (stderr, \"%-8zu %10zu%c %10zu%c %10zu%c\\n\",\n-\t       OBJECT_SIZE (i),\n+      fprintf (stderr, \"%-8\" PRIu64 \" \" PRsa (10) \" \" PRsa (10) \" \"\n+\t       PRsa (10) \"\\n\",\n+\t       (uint64_t)OBJECT_SIZE (i),\n \t       SIZE_AMOUNT (allocated),\n \t       SIZE_AMOUNT (in_use),\n \t       SIZE_AMOUNT (overhead));\n       total_overhead += overhead;\n     }\n-  fprintf (stderr, \"%-8s %10zu%c %10zu%c %10zu%c\\n\",\n+  fprintf (stderr, \"%-8s \" PRsa (10) \" \" PRsa (10) \" \" PRsa (10) \"\\n\",\n \t   \"Total\",\n \t   SIZE_AMOUNT (G.bytes_mapped),\n \t   SIZE_AMOUNT (G.allocated),\n@@ -2306,42 +2307,42 @@ ggc_print_statistics (void)\n       fprintf (stderr, \"\\nTotal allocations and overheads during \"\n \t       \"the compilation process\\n\");\n \n-      fprintf (stderr, \"Total Overhead:                          %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Overhead:                          \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_overhead));\n-      fprintf (stderr, \"Total Allocated:                         %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Allocated:                         \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_allocated));\n \n-      fprintf (stderr, \"Total Overhead  under  32B:              %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Overhead  under  32B:              \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_overhead_under32));\n-      fprintf (stderr, \"Total Allocated under  32B:              %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Allocated under  32B:              \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_allocated_under32));\n-      fprintf (stderr, \"Total Overhead  under  64B:              %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Overhead  under  64B:              \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_overhead_under64));\n-      fprintf (stderr, \"Total Allocated under  64B:              %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Allocated under  64B:              \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_allocated_under64));\n-      fprintf (stderr, \"Total Overhead  under 128B:              %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Overhead  under 128B:              \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_overhead_under128));\n-      fprintf (stderr, \"Total Allocated under 128B:              %9\"\n-\t       HOST_LONG_LONG_FORMAT \"d%c\\n\",\n+      fprintf (stderr, \"Total Allocated under 128B:              \"\n+\t       PRsa (9) \"\\n\",\n \t       SIZE_AMOUNT (G.stats.total_allocated_under128));\n \n       for (i = 0; i < NUM_ORDERS; i++)\n \tif (G.stats.total_allocated_per_order[i])\n \t  {\n-\t    fprintf (stderr, \"Total Overhead  page size %9zu:     %9\"\n-\t\t     HOST_LONG_LONG_FORMAT \"d%c\\n\",\n-\t\t     OBJECT_SIZE (i),\n+\t    fprintf (stderr, \"Total Overhead  page size %9\" PRIu64 \":     \"\n+\t\t     PRsa (9) \"\\n\",\n+\t\t     (uint64_t)OBJECT_SIZE (i),\n \t\t     SIZE_AMOUNT (G.stats.total_overhead_per_order[i]));\n-\t    fprintf (stderr, \"Total Allocated page size %9zu:     %9\"\n-\t\t     HOST_LONG_LONG_FORMAT \"d%c\\n\",\n-\t\t     OBJECT_SIZE (i),\n+\t    fprintf (stderr, \"Total Allocated page size %9\" PRIu64 \":     \"\n+\t\t     PRsa (9) \"\\n\",\n+\t\t     (uint64_t)OBJECT_SIZE (i),\n \t\t     SIZE_AMOUNT (G.stats.total_allocated_per_order[i]));\n \t  }\n   }"}, {"sha": "237c0d58f07828b87d4e3ac6cffd0cf6e74beb4d", "filename": "gcc/input.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -940,35 +940,35 @@ dump_line_table_statistics (void)\n   fprintf (stderr,\n            \"\\nLine Table allocations during the \"\n \t   \"compilation process\\n\");\n-  fprintf (stderr, \"Number of ordinary maps used:        %5ld%c\\n\",\n+  fprintf (stderr, \"Number of ordinary maps used:        \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.num_ordinary_maps_used));\n-  fprintf (stderr, \"Ordinary map used size:              %5ld%c\\n\",\n+  fprintf (stderr, \"Ordinary map used size:              \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.ordinary_maps_used_size));\n-  fprintf (stderr, \"Number of ordinary maps allocated:   %5ld%c\\n\",\n+  fprintf (stderr, \"Number of ordinary maps allocated:   \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.num_ordinary_maps_allocated));\n-  fprintf (stderr, \"Ordinary maps allocated size:        %5ld%c\\n\",\n+  fprintf (stderr, \"Ordinary maps allocated size:        \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.ordinary_maps_allocated_size));\n-  fprintf (stderr, \"Number of macro maps used:           %5ld%c\\n\",\n+  fprintf (stderr, \"Number of macro maps used:           \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.num_macro_maps_used));\n-  fprintf (stderr, \"Macro maps used size:                %5ld%c\\n\",\n+  fprintf (stderr, \"Macro maps used size:                \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.macro_maps_used_size));\n-  fprintf (stderr, \"Macro maps locations size:           %5ld%c\\n\",\n+  fprintf (stderr, \"Macro maps locations size:           \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.macro_maps_locations_size));\n-  fprintf (stderr, \"Macro maps size:                     %5ld%c\\n\",\n+  fprintf (stderr, \"Macro maps size:                     \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (macro_maps_size));\n-  fprintf (stderr, \"Duplicated maps locations size:      %5ld%c\\n\",\n+  fprintf (stderr, \"Duplicated maps locations size:      \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.duplicated_macro_maps_locations_size));\n-  fprintf (stderr, \"Total allocated maps size:           %5ld%c\\n\",\n+  fprintf (stderr, \"Total allocated maps size:           \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (total_allocated_map_size));\n-  fprintf (stderr, \"Total used maps size:                %5ld%c\\n\",\n+  fprintf (stderr, \"Total used maps size:                \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (total_used_map_size));\n-  fprintf (stderr, \"Ad-hoc table size:                   %5ld%c\\n\",\n+  fprintf (stderr, \"Ad-hoc table size:                   \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.adhoc_table_size));\n-  fprintf (stderr, \"Ad-hoc table entries used:           %5ld%c\\n\",\n+  fprintf (stderr, \"Ad-hoc table entries used:           \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (s.adhoc_table_entries_used));\n-  fprintf (stderr, \"optimized_ranges:                    %5xu%c\\n\",\n+  fprintf (stderr, \"optimized_ranges:                    \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (line_table->num_optimized_ranges));\n-  fprintf (stderr, \"unoptimized_ranges:                  %5xu%c\\n\",\n+  fprintf (stderr, \"unoptimized_ranges:                  \" PRsa (5) \"\\n\",\n \t   SIZE_AMOUNT (line_table->num_unoptimized_ranges));\n \n   fprintf (stderr, \"\\n\");"}, {"sha": "219959faa9920af4bf5a01e557fcf2b6efecdeb0", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -205,8 +205,8 @@ struct mem_usage\n   {\n     char *location_string = loc->to_string ();\n \n-    fprintf (stderr, \"%-48s %9zu%c:%5.1f%%\"\n-\t     \"%9zu%c%9zu%c:%5.1f%%%10s\\n\",\n+    fprintf (stderr, \"%-48s \" PRsa (9) \":%5.1f%%\"\n+\t     PRsa (9) PRsa (9) \":%5.1f%%%10s\\n\",\n \t     location_string, SIZE_AMOUNT (m_allocated),\n \t     get_percent (m_allocated, total.m_allocated),\n \t     SIZE_AMOUNT (m_peak), SIZE_AMOUNT (m_times),\n@@ -220,7 +220,7 @@ struct mem_usage\n   dump_footer () const\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%53zu%c%26zu%c\\n\", \"Total\",\n+    fprintf (stderr, \"%s\" PRsa (53) PRsa (26) \"\\n\", \"Total\",\n \t     SIZE_AMOUNT (m_allocated), SIZE_AMOUNT (m_times));\n     print_dash_line ();\n   }"}, {"sha": "2ab349981d9ba7114a80b9fdfb15aaaaf56929c2", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -821,7 +821,7 @@ dump_rtx_statistics (void)\n       unsigned j = indices[i];\n       if (rtx_alloc_counts[j])\n \t{\n-\t  fprintf (stderr, \"%-24s %6zu%c %9zu%c\\n\",\n+\t  fprintf (stderr, \"%-24s \" PRsa (6) \" \" PRsa (9) \"\\n\",\n \t\t   GET_RTX_NAME (j),\n \t\t   SIZE_AMOUNT (rtx_alloc_counts[j]),\n \t\t   SIZE_AMOUNT (rtx_alloc_sizes[j]));\n@@ -832,14 +832,14 @@ dump_rtx_statistics (void)\n \n   if (rtvec_alloc_counts)\n     {\n-      fprintf (stderr, \"%-24s %6zu%c %9zu%c\\n\", \"rtvec\",\n+      fprintf (stderr, \"%-24s \" PRsa (6) \" \" PRsa (9) \"\\n\", \"rtvec\",\n \t       SIZE_AMOUNT (rtvec_alloc_counts),\n \t       SIZE_AMOUNT (rtvec_alloc_sizes));\n       total_counts += rtvec_alloc_counts;\n       total_sizes += rtvec_alloc_sizes;\n     }\n   fprintf (stderr, \"-----------------------------------------------\\n\");\n-  fprintf (stderr, \"%-24s %6d%c %9d%c\\n\",\n+  fprintf (stderr, \"%-24s \" PRsa (6) \" \" PRsa (9) \"\\n\",\n \t   \"Total\", SIZE_AMOUNT (total_counts),\n \t   SIZE_AMOUNT (total_sizes));\n   fprintf (stderr, \"-----------------------------------------------\\n\");"}, {"sha": "d23300f5e5db994576e62eb0a4a3692661091b1c", "filename": "gcc/system.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -1231,6 +1231,10 @@ void gcc_stablesort (void *, size_t, size_t,\n /* Display an integer amount as multiple of 1K or 1M (in base 2).\n    Display the correct unit (either k, M, or ' ') after the amount, as\n    well.  */\n-#define SIZE_AMOUNT(size) SIZE_SCALE (size), SIZE_LABEL (size)\n+#define SIZE_AMOUNT(size) (uint64_t)SIZE_SCALE (size), SIZE_LABEL (size)\n+\n+/* Format string particle for printing a SIZE_AMOUNT with N being the width\n+   of the number.  */\n+#define PRsa(n) \"%\" #n PRIu64 \"%c\"\n \n #endif /* ! GCC_SYSTEM_H */"}, {"sha": "be0ba870c0e5a5e6766da90c4cb9dee1c3bbedae", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -2569,9 +2569,9 @@ dump_cfg_stats (FILE *file)\n   long num_edges;\n   basic_block bb;\n   const char * const fmt_str   = \"%-30s%-13s%12s\\n\";\n-  const char * const fmt_str_1 = \"%-30s%13d%11lu%c\\n\";\n-  const char * const fmt_str_2 = \"%-30s%13ld%11lu%c\\n\";\n-  const char * const fmt_str_3 = \"%-43s%11lu%c\\n\";\n+  const char * const fmt_str_1 = \"%-30s%13d\" PRsa (11) \"\\n\";\n+  const char * const fmt_str_2 = \"%-30s%13ld\" PRsa (11) \"\\n\";\n+  const char * const fmt_str_3 = \"%-43s\" PRsa (11) \"\\n\";\n   const char *funcname = current_function_name ();\n \n   fprintf (file, \"\\nCFG Statistics for %s\\n\\n\", funcname);"}, {"sha": "798a315dbb74e64b701cb4c7049af5d7ad34b49d", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -184,8 +184,8 @@ dump_dfa_stats (FILE *file)\n \n   unsigned long size, total = 0;\n   const char * const fmt_str   = \"%-30s%-13s%12s\\n\";\n-  const char * const fmt_str_1 = \"%-30s%13lu%11lu%c\\n\";\n-  const char * const fmt_str_3 = \"%-43s%11lu%c\\n\";\n+  const char * const fmt_str_1 = \"%-30s%13lu\" PRsa (11) \"\\n\";\n+  const char * const fmt_str_3 = \"%-43s\" PRsa (11) \"\\n\";\n   const char *funcname\n     = lang_hooks.decl_printable_name (current_function_decl, 2);\n "}, {"sha": "8f42727526ad749084f8ed51102765fea6b6d4df", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -80,9 +80,10 @@ unsigned int phi_nodes_created;\n void\n phinodes_print_statistics (void)\n {\n-  fprintf (stderr, \"PHI nodes allocated: %u%c\\n\",\n+  fprintf (stderr, \"PHI nodes allocated: \" PRsa (11) \"\\n\",\n \t   SIZE_AMOUNT (phi_nodes_created));\n-  fprintf (stderr, \"PHI nodes reused: %u%c\\n\", SIZE_AMOUNT (phi_nodes_reused));\n+  fprintf (stderr, \"PHI nodes reused: \" PRsa (11) \"\\n\",\n+\t   SIZE_AMOUNT (phi_nodes_reused));\n }\n \n /* Allocate a PHI node with at least LEN arguments.  If the free list"}, {"sha": "24f647af8b98e1be905a59f37950883e7762a4b7", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -112,9 +112,9 @@ fini_ssanames (struct function *fn)\n void\n ssanames_print_statistics (void)\n {\n-  fprintf (stderr, \"SSA_NAME nodes allocated: %u%c\\n\",\n+  fprintf (stderr, \"SSA_NAME nodes allocated: \" PRsa (11) \"\\n\",\n \t   SIZE_AMOUNT (ssa_name_nodes_created));\n-  fprintf (stderr, \"SSA_NAME nodes reused: %u%c\\n\",\n+  fprintf (stderr, \"SSA_NAME nodes reused: \" PRsa (11) \"\\n\",\n \t   SIZE_AMOUNT (ssa_name_nodes_reused));\n }\n "}, {"sha": "c08ef0445af607beb79b00bd51f9deb7e3d5f0a4", "filename": "gcc/vec.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b48080020f344b3d594f31546c714564a061c7/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=a0b48080020f344b3d594f31546c714564a061c7", "patch": "@@ -83,13 +83,13 @@ struct vec_usage: public mem_usage\n     s[48] = '\\0';\n \n     fprintf (stderr,\n-\t     \"%-48s %10zu%10zu%c:%4.1f%%%9zu%c%10zu\"\n-\t     \":%4.1f%%%10zu%c%10zu%c\\n\",\n+\t     \"%-48s %10\" PRIu64 PRsa (10) \":%4.1f%%\" PRsa (9) \"%10\" PRIu64\n+\t     \":%4.1f%%\" PRsa (10) PRsa (10) \"\\n\",\n \t     s,\n-\t     m_element_size,\n+\t     (uint64_t)m_element_size,\n \t     SIZE_AMOUNT (m_allocated),\n \t     m_allocated * 100.0 / total.m_allocated,\n-\t     SIZE_AMOUNT (m_peak), m_times,\n+\t     SIZE_AMOUNT (m_peak), (uint64_t)m_times,\n \t     m_times * 100.0 / total.m_times,\n \t     SIZE_AMOUNT (m_items), SIZE_AMOUNT (m_items_peak));\n   }\n@@ -99,7 +99,7 @@ struct vec_usage: public mem_usage\n   dump_footer ()\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%64zu%c%25zu%c%16zu%c\\n\",\n+    fprintf (stderr, \"%s\" PRsa (64) PRsa (25) PRsa (16) \"\\n\",\n \t     \"Total\", SIZE_AMOUNT (m_allocated),\n \t     SIZE_AMOUNT (m_times), SIZE_AMOUNT (m_items));\n     print_dash_line ();"}]}