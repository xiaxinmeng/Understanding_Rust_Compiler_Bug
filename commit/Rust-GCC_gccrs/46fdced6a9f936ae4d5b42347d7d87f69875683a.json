{"sha": "46fdced6a9f936ae4d5b42347d7d87f69875683a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmZGNlZDZhOWY5MzZhZTRkNWI0MjM0N2Q3ZDg3ZjY5ODc1NjgzYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-22T11:33:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-22T11:33:58Z"}, "message": "c++: constexpr evaluation and bare EMPTY_CLASS_EXPR [PR96575]\n\nIn the testcase below, folding of the initializer for 'ret' inside the\ninstantiated f<lambda>::lambda ends up yielding an initializer for which\npotential_constant_expression returns false.  This causes finish_function\nto mark the lambda as non-constexpr, which ultimately causes us to reject\n'f(g)' as a call to a non-constexpr function.\n\nThe initializer for 'ret' inside f<lambda>::lambda, prior to folding, is\nthe CALL_EXPR\n\n  <lambda(S)>::operator() (&cb, ({}, <<< Unknown tree: empty_class_expr >>>;))\n\nwhere the second argument is a COMPOUND_EXPR whose second operand is an\nEMPTY_CLASS_EXPR that was formed by build_class_a.  cp_fully_fold_init\nis able to only partially fold this initializer: it gets rid of the\nside-effectless COMPOUND_EXPR to obtain\n\n  <lambda(S)>::operator() (&cb, <<< Unknown tree: empty_class_expr >>>)\n\nas the final initializer for 'ret'.  This initializer no longer satifies\npotential_constant_expression due to the bare EMPTY_CLASS_EXPR which is\nnot wrapped in a COMPOUND_EXPR.\n\n(cp_fully_fold_init first tries maybe_constant_value on the original\nCALL_EXPR, but constexpr evaluation punts upon seeing\n__builtin_is_constant_evaluated, since manifestly_const_eval is false.)\n\nTo fix this, it seems we could either make cp_fold preserve the\nCOMPOUND_EXPR trees produced by build_call_a, or we could improve\nthe constexpr machinery to treat EMPTY_CLASS_EXPR trees as first-class\ncitizens.  Assuming it's safe to continue folding away these\nCOMPOUND_EXPRs, the second approach seems cleaner, so this patch\nimplements the second approach.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96575\n\t* constexpr.c (cxx_eval_constant_expression)\n\t<case EMPTY_CLASS_EXPR>: Lower it to a CONSTRUCTOR.\n\t(potential_constant_expression_1) <case COMPOUND_EXPR>: Remove\n\tnow-redundant handling of COMPOUND_EXPR with EMPTY_CLASS_EXPR\n\tsecond operand.\n\t<case EMPTY_CLASS_EXPR>: Return true instead of false.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96575\n\t* g++.dg/cpp1z/constexpr-96575.C: New test.", "tree": {"sha": "48a00a7d0c7c39ebd3de4dd68bf15f1465dfbe4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a00a7d0c7c39ebd3de4dd68bf15f1465dfbe4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fdced6a9f936ae4d5b42347d7d87f69875683a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fdced6a9f936ae4d5b42347d7d87f69875683a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fdced6a9f936ae4d5b42347d7d87f69875683a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fdced6a9f936ae4d5b42347d7d87f69875683a/comments", "author": null, "committer": null, "parents": [{"sha": "b083a14dfe1f53446722f488885078e419238d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b083a14dfe1f53446722f488885078e419238d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b083a14dfe1f53446722f488885078e419238d24"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "c566376e4ee56abc0b4d83e8919ad181f9eb8225", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fdced6a9f936ae4d5b42347d7d87f69875683a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fdced6a9f936ae4d5b42347d7d87f69875683a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=46fdced6a9f936ae4d5b42347d7d87f69875683a", "patch": "@@ -6403,9 +6403,9 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case EMPTY_CLASS_EXPR:\n-      /* This is good enough for a function argument that might not get\n-\t used, and they can't do anything with it, so just return it.  */\n-      return t;\n+      /* Handle EMPTY_CLASS_EXPR produced by build_call_a by lowering\n+\t it to an appropriate CONSTRUCTOR.  */\n+      return build_constructor (TREE_TYPE (t), NULL);\n \n     case STATEMENT_LIST:\n       new_ctx = *ctx;\n@@ -8186,13 +8186,11 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case COMPOUND_EXPR:\n       {\n \t/* check_return_expr sometimes wraps a TARGET_EXPR in a\n-\t   COMPOUND_EXPR; don't get confused.  Also handle EMPTY_CLASS_EXPR\n-\t   introduced by build_call_a.  */\n+\t   COMPOUND_EXPR; don't get confused.  */\n \ttree op0 = TREE_OPERAND (t, 0);\n \ttree op1 = TREE_OPERAND (t, 1);\n \tSTRIP_NOPS (op1);\n-\tif ((TREE_CODE (op0) == TARGET_EXPR && op1 == TARGET_EXPR_SLOT (op0))\n-\t    || TREE_CODE (op1) == EMPTY_CLASS_EXPR)\n+\tif (TREE_CODE (op0) == TARGET_EXPR && op1 == TARGET_EXPR_SLOT (op0))\n \t  return RECUR (op0, want_rval);\n \telse\n \t  goto binary;\n@@ -8321,7 +8319,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       return true;\n \n     case EMPTY_CLASS_EXPR:\n-      return false;\n+      return true;\n \n     case GOTO_EXPR:\n       {"}, {"sha": "5820c18bec335385227ea1a770675eb4358c0ce2", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-96575.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fdced6a9f936ae4d5b42347d7d87f69875683a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-96575.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fdced6a9f936ae4d5b42347d7d87f69875683a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-96575.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-96575.C?ref=46fdced6a9f936ae4d5b42347d7d87f69875683a", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/96575\n+// { dg-do compile { target c++17 } }\n+\n+struct S { };\n+\n+constexpr auto g = [] (S s) {\n+  if (__builtin_is_constant_evaluated())\n+    return s;\n+};\n+\n+template <class T>\n+constexpr auto f (T cb) {\n+  return [=] {\n+    auto ret = cb({});\n+    return ret;\n+  }();\n+}\n+\n+constexpr auto x = f(g);"}]}