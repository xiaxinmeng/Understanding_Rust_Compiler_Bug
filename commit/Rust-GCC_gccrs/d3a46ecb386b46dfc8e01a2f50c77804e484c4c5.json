{"sha": "d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNhNDZlY2IzODZiNDZkZmM4ZTAxYTJmNTBjNzc4MDRlNDg0YzRjNQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-10-10T15:33:43Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-10-10T15:33:43Z"}, "message": "memchr-1.c: Avoid assuming 4-byte wchar_t.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/execute/memchr-1.c: Avoid assuming 4-byte wchar_t.\n\tAdd a test for 2-byte wchar_t.\n\t* gcc.dg/builtin-memchr.c: New test.\n\nFrom-SVN: r265020", "tree": {"sha": "7c5245ab3e64a7b9aab4ccf36624aa38a16e538d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c5245ab3e64a7b9aab4ccf36624aa38a16e538d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7be65e79f68d862f912de22f1c2c61f31ae8e722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be65e79f68d862f912de22f1c2c61f31ae8e722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be65e79f68d862f912de22f1c2c61f31ae8e722"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "2100938f4abbde9f8c1479599edad089387036cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "patch": "@@ -1,3 +1,9 @@\n+2018-10-10  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.c-torture/execute/memchr-1.c: Avoid assuming 4-byte wchar_t.\n+\tAdd a test for 2-byte wchar_t.\n+\t* gcc.dg/builtin-memchr.c: New test.\n+\n 2018-10-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/87573"}, {"sha": "f769fa159d6653ae01c1276ec85e5bb7490da90d", "filename": "gcc/testsuite/gcc.c-torture/execute/memchr-1.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemchr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemchr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemchr-1.c?ref=d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "patch": "@@ -106,6 +106,8 @@ void test_narrow (void)\n   A (memchr (&s5_3[1][i0], 0, sizeof s5_3[1] - i0) == &s5_3[1][4]);\n }\n \n+#if 4 == __WCHAR_WIDTH__\n+\n static const wchar_t wc = L'1';\n static const wchar_t ws1[] = L\"1\";\n static const wchar_t ws4[] = L\"\\x00123456\\x12005678\\x12340078\\x12345600\";\n@@ -145,6 +147,58 @@ void test_wide (void)\n #endif\n }\n \n+#elif 2 == __WCHAR_WIDTH__\n+\n+static const wchar_t wc = L'1';\n+static const wchar_t ws1[] = L\"1\";\n+static const wchar_t ws2[2] = L\"\\x1234\\x5678\";   /* no terminating nul */\n+static const wchar_t ws4[] = L\"\\x0012\\x1200\\x1234\";\n+\n+void test_wide (void)\n+{\n+  int i0 = 0;\n+  int i1 = i0 + 1;\n+  int i2 = i1 + 1;\n+\n+  A (sizeof (wchar_t) == 2);\n+\n+  A (memchr (L\"\" + 1, 0, 0) == 0);\n+  A (memchr (&wc + 1, 0, 0) == 0);\n+  A (memchr (L\"\\x1234\", 0, sizeof (wchar_t)) == 0);\n+\n+  A (memchr (L\"\" + i1, i0, i0) == 0);\n+  A (memchr (&wc + i1, i0, i0) == 0);\n+  A (memchr (L\"\\x1234\", i0, sizeof (wchar_t)) == 0);\n+\n+  A (memchr (ws2, 0, sizeof ws2) == 0);\n+  A (memchr (ws2, i0, sizeof ws2) == 0);\n+\n+  const size_t nb = sizeof ws4;\n+  const size_t nwb = sizeof (wchar_t);\n+\n+  const char *pws1 = (const char*)ws1;\n+  const char *pws4 = (const char*)ws4;\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  A (memchr (ws1, i0, sizeof ws1) == pws1 + 1);\n+\n+  A (memchr (&ws4[0], i0, nb) == pws4 + i1);\n+  A (memchr (&ws4[1], i0, nb - i1 * nwb) == pws4 + i1 * nwb);\n+  A (memchr (&ws4[2], i0, nb - i2 * nwb) == pws4 + i2 * nwb + i2);\n+#else\n+  A (memchr (ws1, i0, sizeof ws1) == pws1 + 0);\n+\n+  A (memchr (&ws4[0], i0, nb) == pws4 + 0);\n+  A (memchr (&ws4[1], i0, nb - i1 * nwb) == pws4 + i1 * nwb + i1);\n+  A (memchr (&ws4[2], i0, nb - i2 * nwb) == pws4 + i2 * nwb + i2);\n+#endif\n+}\n+\n+#else\n+\n+void test_wide (void) { }\n+\n+#endif\n \n int main ()\n {"}, {"sha": "845362ee31093e9044916f7862cf8fbc6e404eb9", "filename": "gcc/testsuite/gcc.dg/builtin-memchr.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-memchr.c?ref=d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "patch": "@@ -0,0 +1,68 @@\n+/* PR tree-optimization/86711 - wrong folding of memchr\n+\n+   Verify that memchr() of arrays initialized with 16-bit wide string\n+   literals finds the nul only when it is present in the wide string.\n+\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fshort-wchar -fdump-tree-optimized\" } */\n+\n+typedef __SIZE_TYPE__  size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+extern void* memchr (const void*, int, size_t);\n+extern int printf (const char*, ...);\n+extern void abort (void);\n+\n+#define A(expr)\t\t\t\t\t\t\t\\\n+  ((expr)\t\t\t\t\t\t\t\\\n+   ? (void)0\t\t\t\t\t\t\t\\\n+   : (printf (\"assertion failed on line %i: %s\\n\",\t\t\\\n+\t\t\t__LINE__, #expr),\t\t\t\\\n+      abort ()))\n+\n+static const wchar_t wc = L'1';\n+static const wchar_t ws1[] = L\"1\";\n+static const wchar_t ws2[2] = L\"\\x1234\\x5678\";   /* no terminating nul */\n+static const wchar_t ws4[] = L\"\\x0012\\x1200\\x1234\";\n+\n+void test_wide (void)\n+{\n+  int i0 = 0;\n+  int i1 = i0 + 1;\n+  int i2 = i1 + 1;\n+\n+  A (sizeof (wchar_t) == 2);\n+\n+  A (memchr (L\"\" + 1, 0, 0) == 0);\n+  A (memchr (&wc + 1, 0, 0) == 0);\n+  A (memchr (L\"\\x1234\", 0, sizeof (wchar_t)) == 0);\n+\n+  A (memchr (L\"\" + i1, i0, i0) == 0);\n+  A (memchr (&wc + i1, i0, i0) == 0);\n+  A (memchr (L\"\\x1234\", i0, sizeof (wchar_t)) == 0);\n+\n+  A (memchr (ws2, 0, sizeof ws2) == 0);\n+  A (memchr (ws2, i0, sizeof ws2) == 0);\n+\n+  const size_t nb = sizeof ws4;\n+  const size_t nwb = sizeof (wchar_t);\n+\n+  const char *pws1 = (const char*)ws1;\n+  const char *pws4 = (const char*)ws4;\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  A (memchr (ws1, i0, sizeof ws1) == pws1 + 1);\n+\n+  A (memchr (&ws4[0], i0, nb) == pws4 + i1);\n+  A (memchr (&ws4[1], i0, nb - i1 * nwb) == pws4 + i1 * nwb);\n+  A (memchr (&ws4[2], i0, nb - i2 * nwb) == pws4 + i2 * nwb + i2);\n+#else\n+  A (memchr (ws1, i0, sizeof ws1) == pws1 + 0);\n+\n+  A (memchr (&ws4[0], i0, nb) == pws4 + 0);\n+  A (memchr (&ws4[1], i0, nb - i1 * nwb) == pws4 + i1 * nwb + i1);\n+  A (memchr (&ws4[2], i0, nb - i2 * nwb) == pws4 + i2 * nwb + i2);\n+#endif\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}]}