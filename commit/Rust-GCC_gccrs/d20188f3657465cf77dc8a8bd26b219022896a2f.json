{"sha": "d20188f3657465cf77dc8a8bd26b219022896a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIwMTg4ZjM2NTc0NjVjZjc3ZGM4YThiZDI2YjIxOTAyMjg5NmEyZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-05-29T10:32:22Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-05-29T10:32:22Z"}, "message": "tree-cfg.c (verify_expr): Verify that BIT_FIELD_REF...\n\n2013-05-29  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-cfg.c (verify_expr): Verify that BIT_FIELD_REF, REALPART_EXPR\n\tand IMAGPART_EXPR do not occur within other handled_components.\n\nFrom-SVN: r199405", "tree": {"sha": "09112af00cb3f25913f0f70dbd5b42ceb26a8bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09112af00cb3f25913f0f70dbd5b42ceb26a8bb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d20188f3657465cf77dc8a8bd26b219022896a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20188f3657465cf77dc8a8bd26b219022896a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20188f3657465cf77dc8a8bd26b219022896a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20188f3657465cf77dc8a8bd26b219022896a2f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "292cba13912dae6eba49d4063e14d089e8705465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292cba13912dae6eba49d4063e14d089e8705465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292cba13912dae6eba49d4063e14d089e8705465"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "0e41fc2c15cee6c2e70c3f118594e7ab99efc827", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20188f3657465cf77dc8a8bd26b219022896a2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20188f3657465cf77dc8a8bd26b219022896a2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d20188f3657465cf77dc8a8bd26b219022896a2f", "patch": "@@ -1,3 +1,8 @@\n+2013-05-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-cfg.c (verify_expr): Verify that BIT_FIELD_REF, REALPART_EXPR\n+\tand IMAGPART_EXPR do not occur within other handled_components.\n+\n 2013-05-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Guard vinfo"}, {"sha": "4b91a35f17d46a3530b5c2549250d033429f7543", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d20188f3657465cf77dc8a8bd26b219022896a2f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d20188f3657465cf77dc8a8bd26b219022896a2f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d20188f3657465cf77dc8a8bd26b219022896a2f", "patch": "@@ -2675,6 +2675,34 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t  return t;\n \t}\n \n+      if (TREE_CODE (t) == BIT_FIELD_REF)\n+\t{\n+\t  if (!host_integerp (TREE_OPERAND (t, 1), 1)\n+\t      || !host_integerp (TREE_OPERAND (t, 2), 1))\n+\t    {\n+\t      error (\"invalid position or size operand to BIT_FIELD_REF\");\n+\t      return t;\n+\t    }\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n+\t      && (TYPE_PRECISION (TREE_TYPE (t))\n+\t\t  != TREE_INT_CST_LOW (TREE_OPERAND (t, 1))))\n+\t    {\n+\t      error (\"integral result type precision does not match \"\n+\t\t     \"field size of BIT_FIELD_REF\");\n+\t      return t;\n+\t    }\n+\t  else if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n+\t\t   && TYPE_MODE (TREE_TYPE (t)) != BLKmode\n+\t\t   && (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (t)))\n+\t\t       != TREE_INT_CST_LOW (TREE_OPERAND (t, 1))))\n+\t    {\n+\t      error (\"mode precision of non-integral result does not \"\n+\t\t     \"match field size of BIT_FIELD_REF\");\n+\t      return t;\n+\t    }\n+\t}\n+      t = TREE_OPERAND (t, 0);\n+\n       /* Fall-through.  */\n     case COMPONENT_REF:\n     case ARRAY_REF:\n@@ -2697,32 +2725,13 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t      if (TREE_OPERAND (t, 3))\n \t\tCHECK_OP (3, \"invalid array stride\");\n \t    }\n-\t  else if (TREE_CODE (t) == BIT_FIELD_REF)\n+\t  else if (TREE_CODE (t) == BIT_FIELD_REF\n+\t\t   || TREE_CODE (t) == REALPART_EXPR\n+\t\t   || TREE_CODE (t) == IMAGPART_EXPR)\n \t    {\n-\t      if (!host_integerp (TREE_OPERAND (t, 1), 1)\n-\t\t  || !host_integerp (TREE_OPERAND (t, 2), 1))\n-\t\t{\n-\t\t  error (\"invalid position or size operand to BIT_FIELD_REF\");\n-\t\t  return t;\n-\t\t}\n-\t      if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t\t  && (TYPE_PRECISION (TREE_TYPE (t))\n-\t\t      != TREE_INT_CST_LOW (TREE_OPERAND (t, 1))))\n-\t\t{\n-\t\t  error (\"integral result type precision does not match \"\n-\t\t\t \"field size of BIT_FIELD_REF\");\n-\t\t  return t;\n-\t\t}\n-\t      else if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t\t       && !AGGREGATE_TYPE_P (TREE_TYPE (t))\n-\t\t       && TYPE_MODE (TREE_TYPE (t)) != BLKmode\n-\t\t       && (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (t)))\n-\t\t\t   != TREE_INT_CST_LOW (TREE_OPERAND (t, 1))))\n-\t\t{\n-\t\t  error (\"mode precision of non-integral result does not \"\n-\t\t\t \"match field size of BIT_FIELD_REF\");\n-\t\t  return t;\n-\t\t}\n+\t      error (\"non-top-level BIT_FIELD_REF, IMAGPART_EXPR or \"\n+\t\t     \"REALPART_EXPR\");\n+\t      return t;\n \t    }\n \n \t  t = TREE_OPERAND (t, 0);"}]}