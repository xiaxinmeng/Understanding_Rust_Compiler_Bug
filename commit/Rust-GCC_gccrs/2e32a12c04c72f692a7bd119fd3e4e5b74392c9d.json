{"sha": "2e32a12c04c72f692a7bd119fd3e4e5b74392c9d", "node_id": "C_kwDOANBUbNoAKDJlMzJhMTJjMDRjNzJmNjkyYTdiZDExOWZkM2U0ZTViNzQzOTJjOWQ", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2023-01-29T20:57:24Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2023-01-29T20:57:24Z"}, "message": "fortran: Set name for *LOC default BACK argument [PR108450]\n\nThis change fixes an ICE caused by the double resolution of MINLOC,\nMAXLOC and FINDLOC expressions which get a default value for the BACK\nargument at resolution time.  That argument  is added without name,\nand argument reordering code is not prepared to handle unnamed arguments\ncoming after named ones, so the second resolution causes a NULL pointer\ndereference.\nThe problem is fixed by explicitly setting the argument name.\n\n\tPR fortran/108450\n\ngcc/fortran/ChangeLog:\n\n\t* check.cc (gfc_check_minloc_maxloc): Explicitly set argument name.\n\t(gfc_check_findloc): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/minmaxloc_1.f90: New test.", "tree": {"sha": "1c16182b3e9ed87673abdf1faf8cf9113a2d90dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c16182b3e9ed87673abdf1faf8cf9113a2d90dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d/comments", "author": null, "committer": null, "parents": [{"sha": "8011fbba7baa46947341ca8069b5a327163a68d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8011fbba7baa46947341ca8069b5a327163a68d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8011fbba7baa46947341ca8069b5a327163a68d5"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "8c1ae8c2f000fc79f381f6a1bf55dec1d0587388", "filename": "gcc/fortran/check.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d/gcc%2Ffortran%2Fcheck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d/gcc%2Ffortran%2Fcheck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.cc?ref=2e32a12c04c72f692a7bd119fd3e4e5b74392c9d", "patch": "@@ -3888,6 +3888,7 @@ gfc_check_minloc_maxloc (gfc_actual_arglist *ap)\n     {\n       b = gfc_get_logical_expr (gfc_logical_4_kind, NULL, 0);\n       ap->next->next->next->next->expr = b;\n+      ap->next->next->next->next->name = gfc_get_string (\"back\");\n     }\n \n   if (m == NULL && d != NULL && d->ts.type == BT_LOGICAL\n@@ -3969,6 +3970,7 @@ gfc_check_findloc (gfc_actual_arglist *ap)\n     {\n       b = gfc_get_logical_expr (gfc_logical_4_kind, NULL, 0);\n       ap->next->next->next->next->next->expr = b;\n+      ap->next->next->next->next->next->name = gfc_get_string (\"back\");\n     }\n \n   if (m == NULL && d != NULL && d->ts.type == BT_LOGICAL"}, {"sha": "b3691f774de38b65e04375c113e8ce4999df2855", "filename": "gcc/testsuite/gfortran.dg/gomp/minmaxloc_1.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fminmaxloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e32a12c04c72f692a7bd119fd3e4e5b74392c9d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fminmaxloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fminmaxloc_1.f90?ref=2e32a12c04c72f692a7bd119fd3e4e5b74392c9d", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+!\n+! PR fortran/108450\n+! This program used to cause an ICE because of the double resolution\n+! of the maxloc expression and the addition of a hidden unnamed argument\n+! during the first resolution.\n+!\n+! Original testcase from G. Steinmetz\n+\n+subroutine s1\n+   integer :: a(8) = 0\n+   integer :: l\n+   integer :: n\n+   !$omp atomic\n+   n = maxloc(a, mask=l) ! { dg-error \".mask. argument of .maxloc. intrinsic at .1. must be LOGICAL\" }\n+end\n+\n+subroutine s2\n+   integer :: a(8) = 0\n+   integer :: l\n+   integer :: n\n+   !$omp atomic\n+   n = minloc(a, mask=l) ! { dg-error \".mask. argument of .minloc. intrinsic at .1. must be LOGICAL\" }\n+end\n+\n+subroutine s3\n+   integer :: a(8) = 0\n+   integer :: l\n+   integer :: n\n+   !$omp atomic\n+   n = findloc(a, 3, mask=l) ! { dg-error \".mask. argument of .findloc. intrinsic at .1. must be LOGICAL\" }\n+end"}]}