{"sha": "da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4YzQ0NWQwN2YwMGRjNGYxMGYyNWQxY2M4OTFkNGYzZmYxNTIzZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-10-10T06:56:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-10T06:56:56Z"}, "message": "stdexcepti.cc (__out_of_range): New fn.\n\n\t* stdexcepti.cc (__out_of_range): New fn.\n\t(__length_error): New fn.\n\n\t* std/bastring.h (OUTOFRANGE): Fix logic.  Use throwing functions.\n\t(LENGTHERROR): Likewise.\n\tRevert Oct 2 changes.\n\t* string: Revert Oct 2 changes.\n\n\t* std/{f,d,ld}complex.h: Replace guiding fns if not -ansi.\n\nFrom-SVN: r15885", "tree": {"sha": "47392e51a8359ac6c8decb14f03764f851f5a4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47392e51a8359ac6c8decb14f03764f851f5a4aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/comments", "author": null, "committer": null, "parents": [{"sha": "5b76d03baac8a93708b2c8cb4ca30ea095fd8be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b76d03baac8a93708b2c8cb4ca30ea095fd8be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b76d03baac8a93708b2c8cb4ca30ea095fd8be0"}], "stats": {"total": 180, "additions": 142, "deletions": 38}, "files": [{"sha": "cb66cab1add3715a831b4804ea39dc7fda8e4b9c", "filename": "libstdc++/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2FChangeLog?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -1,3 +1,17 @@\n+Thu Oct  9 23:24:36 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* stdexcepti.cc (__out_of_range): New fn.\n+\t(__length_error): New fn.\n+\n+\t* std/bastring.h (OUTOFRANGE): Fix logic.  Use throwing functions.\n+\t(LENGTHERROR): Likewise.\n+\tRevert Oct 2 changes.\n+\t* string: Revert Oct 2 changes.\n+\n+Tue Oct  7 00:51:51 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* std/{f,d,ld}complex.h: Replace guiding fns if not -ansi.\n+\n Thu Oct  2 00:08:18 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* std/bastring.h: Move exception stuff after definition of string."}, {"sha": "9eae46fce49815ae2450310bcdb8ac4f9117c170", "filename": "libstdc++/std/bastring.h", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fbastring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fbastring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fbastring.h?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -40,6 +40,24 @@ class istream; class ostream;\n \n #include <iterator>\n \n+#ifdef __STL_USE_EXCEPTIONS\n+\n+extern void __out_of_range (const char *);\n+extern void __length_error (const char *);\n+\n+#define OUTOFRANGE(cond) \\\n+  do { if (cond) __out_of_range (#cond); } while (0)\n+#define LENGTHERROR(cond) \\\n+  do { if (cond) __length_error (#cond); } while (0)\n+\n+#else\n+\n+#include <cassert>\n+#define OUTOFRANGE(cond) assert (!(cond))\n+#define LENGTHERROR(cond) assert (!(cond))\n+\n+#endif\n+\n template <class charT, class traits = string_char_traits<charT> >\n class basic_string\n {\n@@ -262,8 +280,16 @@ class basic_string\n   reference operator[] (size_type pos)\n     { unique (); return (*rep ())[pos]; }\n \n-  inline reference at (size_type pos);\n-  inline const_reference at (size_type pos) const;\n+  reference at (size_type pos)\n+    {\n+      OUTOFRANGE (pos >= length ());\n+      return (*this)[pos];\n+    }\n+  const_reference at (size_type pos) const\n+    {\n+      OUTOFRANGE (pos >= length ());\n+      return data ()[pos];\n+    }\n \n private:\n   void terminate () const\n@@ -359,41 +385,6 @@ class basic_string\n   charT *dat;\n };\n \n-typedef basic_string <char> string;\n-// typedef basic_string <wchar_t> wstring;\n-\n-#ifdef __STL_USE_EXCEPTIONS\n-\n-#include <stdexcept>\n-#define OUTOFRANGE(cond) \\\n-  do { if (!(cond)) throw out_of_range (#cond); } while (0)\n-#define LENGTHERROR(cond) \\\n-  do { if (!(cond)) throw length_error (#cond); } while (0)\n-\n-#else\n-\n-#include <cassert>\n-#define OUTOFRANGE(cond) assert (!(cond))\n-#define LENGTHERROR(cond) assert (!(cond))\n-\n-#endif\n-\n-template <class charT, class traits>\n-inline basic_string <charT, traits>::reference\n-basic_string <charT, traits>::at (size_type pos)\n-{\n-  OUTOFRANGE (pos >= length ());\n-  return (*this)[pos];\n-}\n-\n-template <class charT, class traits>\n-inline basic_string <charT, traits>::const_reference\n-basic_string <charT, traits>::at (size_type pos) const\n-{\n-  OUTOFRANGE (pos >= length ());\n-  return data ()[pos];\n-}\n-\n #ifdef __STL_MEMBER_TEMPLATES\n template <class charT, class traits> template <class InputIterator>\n basic_string <charT, traits>& basic_string <charT, traits>::"}, {"sha": "d50bf0871f6111bb2d67b5df39ea1260686fba8d", "filename": "libstdc++/std/complext.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fcomplext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fcomplext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fcomplext.cc?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -236,7 +236,7 @@ pow (const complex<FLOAT>& xin, int y)\n   if (y < 0)\n     {\n       y = -y;\n-      x = FLOAT(1)/x;\n+      x = 1/x;\n     }\n   for (;;)\n     {"}, {"sha": "5812d9fa7dfd0f3daa01dee6669df143fab55262", "filename": "libstdc++/std/dcomplex.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fdcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fdcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fdcomplex.h?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -54,6 +54,33 @@ class complex<double>\n   friend complex& __doami<> (complex *, const complex&);\n   friend complex& __doaml<> (complex *, const complex&);\n   friend complex& __doadv<> (complex *, const complex&);\n+\n+#ifndef __STRICT_ANSI__\n+  friend inline complex operator + (const complex& x, double y)\n+    { return operator+<> (x, y); }\n+  friend inline complex operator + (double x, const complex& y)\n+    { return operator+<> (x, y); }\n+  friend inline complex operator - (const complex& x, double y)\n+    { return operator-<> (x, y); }\n+  friend inline complex operator - (double x, const complex& y)\n+    { return operator-<> (x, y); }\n+  friend inline complex operator * (const complex& x, double y)\n+    { return operator*<> (x, y); }\n+  friend inline complex operator * (double x, const complex& y)\n+    { return operator*<> (x, y); }\n+  friend inline complex operator / (const complex& x, double y)\n+    { return operator/<> (x, y); }\n+  friend inline complex operator / (double x, const complex& y)\n+    { return operator/<> (x, y); }\n+  friend inline bool operator == (const complex& x, double y)\n+    { return operator==<> (x, y); }\n+  friend inline bool operator == (double x, const complex& y)\n+    { return operator==<> (x, y); }\n+  friend inline bool operator != (const complex& x, double y)\n+    { return operator!=<> (x, y); }\n+  friend inline bool operator != (double x, const complex& y)\n+    { return operator!=<> (x, y); }\n+#endif /* __STRICT_ANSI__ */\n };\n \n inline complex<float>::complex (const complex<double>& r)"}, {"sha": "cd9af1a2e0ceb75d33c3c345951e0da1ecf8cd3b", "filename": "libstdc++/std/fcomplex.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Ffcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Ffcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Ffcomplex.h?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -54,6 +54,33 @@ class complex<float>\n   friend complex& __doami<> (complex *, const complex&);\n   friend complex& __doaml<> (complex *, const complex&);\n   friend complex& __doadv<> (complex *, const complex&);\n+\n+#ifndef __STRICT_ANSI__\n+  friend inline complex operator + (const complex& x, float y)\n+    { return operator+<> (x, y); }\n+  friend inline complex operator + (float x, const complex& y)\n+    { return operator+<> (x, y); }\n+  friend inline complex operator - (const complex& x, float y)\n+    { return operator-<> (x, y); }\n+  friend inline complex operator - (float x, const complex& y)\n+    { return operator-<> (x, y); }\n+  friend inline complex operator * (const complex& x, float y)\n+    { return operator*<> (x, y); }\n+  friend inline complex operator * (float x, const complex& y)\n+    { return operator*<> (x, y); }\n+  friend inline complex operator / (const complex& x, float y)\n+    { return operator/<> (x, y); }\n+  friend inline complex operator / (float x, const complex& y)\n+    { return operator/<> (x, y); }\n+  friend inline bool operator == (const complex& x, float y)\n+    { return operator==<> (x, y); }\n+  friend inline bool operator == (float x, const complex& y)\n+    { return operator==<> (x, y); }\n+  friend inline bool operator != (const complex& x, float y)\n+    { return operator!=<> (x, y); }\n+  friend inline bool operator != (float x, const complex& y)\n+    { return operator!=<> (x, y); }\n+#endif /* __STRICT_ANSI__ */\n };\n } // extern \"C++\"\n "}, {"sha": "bc91fa422bf7ee5a1d373346629af8b3c638df25", "filename": "libstdc++/std/ldcomplex.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fldcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstd%2Fldcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fldcomplex.h?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -54,6 +54,33 @@ class complex<long double>\n   friend complex& __doami<> (complex *, const complex&);\n   friend complex& __doaml<> (complex *, const complex&);\n   friend complex& __doadv<> (complex *, const complex&);\n+\n+#ifndef __STRICT_ANSI__\n+  friend inline complex operator + (const complex& x, long double y)\n+    { return operator+<> (x, y); }\n+  friend inline complex operator + (long double x, const complex& y)\n+    { return operator+<> (x, y); }\n+  friend inline complex operator - (const complex& x, long double y)\n+    { return operator-<> (x, y); }\n+  friend inline complex operator - (long double x, const complex& y)\n+    { return operator-<> (x, y); }\n+  friend inline complex operator * (const complex& x, long double y)\n+    { return operator*<> (x, y); }\n+  friend inline complex operator * (long double x, const complex& y)\n+    { return operator*<> (x, y); }\n+  friend inline complex operator / (const complex& x, long double y)\n+    { return operator/<> (x, y); }\n+  friend inline complex operator / (long double x, const complex& y)\n+    { return operator/<> (x, y); }\n+  friend inline bool operator == (const complex& x, long double y)\n+    { return operator==<> (x, y); }\n+  friend inline bool operator == (long double x, const complex& y)\n+    { return operator==<> (x, y); }\n+  friend inline bool operator != (const complex& x, long double y)\n+    { return operator!=<> (x, y); }\n+  friend inline bool operator != (long double x, const complex& y)\n+    { return operator!=<> (x, y); }\n+#endif /* __STRICT_ANSI__ */\n };\n \n inline complex<float>::complex (const complex<long double>& r)"}, {"sha": "3b03acd63f44c5a6b2e10129a4ca0444c4bbf92b", "filename": "libstdc++/stdexcepti.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstdexcepti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstdexcepti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstdexcepti.cc?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -6,3 +6,16 @@\n #endif\n \n #include <stdexcept>\n+\n+// Entry points for string.\n+\n+void\n+__out_of_range (const char *s)\n+{\n+  throw out_of_range (s);\n+}\n+\n+void __length_error (const char *s)\n+{\n+  throw length_error (s);\n+}"}, {"sha": "fa6f1abaa70c1dcb7f22f14250d9ae5a8a554c02", "filename": "libstdc++/string", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8c445d07f00dc4f10f25d1cc891d4f3ff1523f/libstdc%2B%2B%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstring?ref=da8c445d07f00dc4f10f25d1cc891d4f3ff1523f", "patch": "@@ -5,4 +5,9 @@\n \n #include <std/bastring.h>\n \n+extern \"C++\" {\n+typedef basic_string <char> string;\n+// typedef basic_string <wchar_t> wstring;\n+} // extern \"C++\"\n+\n #endif"}]}