{"sha": "9c0a9e1277571a16e711d5a60ed11713d9109b98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwYTllMTI3NzU3MWExNmU3MTFkNWE2MGVkMTE3MTNkOTEwOWI5OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:44:22Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:44:22Z"}, "message": "Use combined_fn in tree-vrp.c\n\nAnother patch to extend uses of built_in_function to combined_fn, this time\nin tree-vrp.c.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* tree-vrp.c: Include case-cfn-macros.h.\n\t(extract_range_basic): Switch on combined_fn rather than handling\n\tbuilt-in functions and internal functions separately.\n\nFrom-SVN: r230479", "tree": {"sha": "6c5c67fa68dcc5761a6262f0433d40f9a68daa8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c5c67fa68dcc5761a6262f0433d40f9a68daa8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0a9e1277571a16e711d5a60ed11713d9109b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0a9e1277571a16e711d5a60ed11713d9109b98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0a9e1277571a16e711d5a60ed11713d9109b98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0a9e1277571a16e711d5a60ed11713d9109b98/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "012a7f939a36d7ff1da7fa8d432364e4d22bf7fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0a9e1277571a16e711d5a60ed11713d9109b98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0a9e1277571a16e711d5a60ed11713d9109b98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c0a9e1277571a16e711d5a60ed11713d9109b98", "patch": "@@ -1,3 +1,9 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vrp.c: Include case-cfn-macros.h.\n+\t(extract_range_basic): Switch on combined_fn rather than handling\n+\tbuilt-in functions and internal functions separately.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* fold-const.h (negate_mathfn_p): Take a combined_fn rather"}, {"sha": "e67048e904599747aaaae1b07f95fb94f953f8a9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0a9e1277571a16e711d5a60ed11713d9109b98/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0a9e1277571a16e711d5a60ed11713d9109b98/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9c0a9e1277571a16e711d5a60ed11713d9109b98", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-threadedge.h\"\n #include \"omp-low.h\"\n #include \"target.h\"\n+#include \"case-cfn-macros.h\"\n \n /* Range of values that can be associated with an SSA_NAME after VRP\n    has executed.  */\n@@ -3791,14 +3792,16 @@ extract_range_basic (value_range *vr, gimple *stmt)\n   bool sop = false;\n   tree type = gimple_expr_type (stmt);\n \n-  if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n+  if (is_gimple_call (stmt))\n     {\n-      tree fndecl = gimple_call_fndecl (stmt), arg;\n+      tree arg;\n       int mini, maxi, zerov = 0, prec;\n+      enum tree_code subcode = ERROR_MARK;\n+      combined_fn cfn = gimple_call_combined_fn (stmt);\n \n-      switch (DECL_FUNCTION_CODE (fndecl))\n+      switch (cfn)\n \t{\n-\tcase BUILT_IN_CONSTANT_P:\n+\tcase CFN_BUILT_IN_CONSTANT_P:\n \t  /* If the call is __builtin_constant_p and the argument is a\n \t     function parameter resolve it to false.  This avoids bogus\n \t     array bound warnings.\n@@ -3814,8 +3817,8 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \t  break;\n \t  /* Both __builtin_ffs* and __builtin_popcount return\n \t     [0, prec].  */\n-\tCASE_INT_FN (BUILT_IN_FFS):\n-\tCASE_INT_FN (BUILT_IN_POPCOUNT):\n+\tCASE_CFN_FFS:\n+\tCASE_CFN_POPCOUNT:\n \t  arg = gimple_call_arg (stmt, 0);\n \t  prec = TYPE_PRECISION (TREE_TYPE (arg));\n \t  mini = 0;\n@@ -3843,7 +3846,7 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \t    }\n \t  goto bitop_builtin;\n \t  /* __builtin_parity* returns [0, 1].  */\n-\tCASE_INT_FN (BUILT_IN_PARITY):\n+\tCASE_CFN_PARITY:\n \t  mini = 0;\n \t  maxi = 1;\n \t  goto bitop_builtin;\n@@ -3852,7 +3855,7 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \t     On many targets where the CLZ RTL or optab value is defined\n \t     for 0 the value is prec, so include that in the range\n \t     by default.  */\n-\tCASE_INT_FN (BUILT_IN_CLZ):\n+\tCASE_CFN_CLZ:\n \t  arg = gimple_call_arg (stmt, 0);\n \t  prec = TYPE_PRECISION (TREE_TYPE (arg));\n \t  mini = 0;\n@@ -3907,7 +3910,7 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \t     If there is a ctz optab for this mode and\n \t     CTZ_DEFINED_VALUE_AT_ZERO, include that in the range,\n \t     otherwise just assume 0 won't be seen.  */\n-\tCASE_INT_FN (BUILT_IN_CTZ):\n+\tCASE_CFN_CTZ:\n \t  arg = gimple_call_arg (stmt, 0);\n \t  prec = TYPE_PRECISION (TREE_TYPE (arg));\n \t  mini = 0;\n@@ -3956,7 +3959,7 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \t    break;\n \t  goto bitop_builtin;\n \t  /* __builtin_clrsb* returns [0, prec-1].  */\n-\tCASE_INT_FN (BUILT_IN_CLRSB):\n+\tCASE_CFN_CLRSB:\n \t  arg = gimple_call_arg (stmt, 0);\n \t  prec = TYPE_PRECISION (TREE_TYPE (arg));\n \t  mini = 0;\n@@ -3966,33 +3969,22 @@ extract_range_basic (value_range *vr, gimple *stmt)\n \t  set_value_range (vr, VR_RANGE, build_int_cst (type, mini),\n \t\t\t   build_int_cst (type, maxi), NULL);\n \t  return;\n-\tdefault:\n-\t  break;\n-\t}\n-    }\n-  else if (is_gimple_call (stmt) && gimple_call_internal_p (stmt))\n-    {\n-      enum tree_code subcode = ERROR_MARK;\n-      unsigned ifn_code = gimple_call_internal_fn (stmt);\n-\n-      switch (ifn_code)\n-\t{\n-\tcase IFN_UBSAN_CHECK_ADD:\n+\tcase CFN_UBSAN_CHECK_ADD:\n \t  subcode = PLUS_EXPR;\n \t  break;\n-\tcase IFN_UBSAN_CHECK_SUB:\n+\tcase CFN_UBSAN_CHECK_SUB:\n \t  subcode = MINUS_EXPR;\n \t  break;\n-\tcase IFN_UBSAN_CHECK_MUL:\n+\tcase CFN_UBSAN_CHECK_MUL:\n \t  subcode = MULT_EXPR;\n \t  break;\n-\tcase IFN_GOACC_DIM_SIZE:\n-\tcase IFN_GOACC_DIM_POS:\n+\tcase CFN_GOACC_DIM_SIZE:\n+\tcase CFN_GOACC_DIM_POS:\n \t  /* Optimizing these two internal functions helps the loop\n \t     optimizer eliminate outer comparisons.  Size is [1,N]\n \t     and pos is [0,N-1].  */\n \t  {\n-\t    bool is_pos = ifn_code == IFN_GOACC_DIM_POS;\n+\t    bool is_pos = cfn == CFN_GOACC_DIM_POS;\n \t    int axis = get_oacc_ifn_dim_arg (stmt);\n \t    int size = get_oacc_fn_dim_size (current_function_decl, axis);\n "}]}