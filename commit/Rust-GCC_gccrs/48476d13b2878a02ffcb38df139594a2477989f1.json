{"sha": "48476d13b2878a02ffcb38df139594a2477989f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0NzZkMTNiMjg3OGEwMmZmY2IzOGRmMTM5NTk0YTI0Nzc5ODlmMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-14T10:22:43Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-14T10:22:43Z"}, "message": "params.c (params_finished): New.\n\n\t* params.c (params_finished): New.\n\t(add_params): Assert !params_finished.\n\t(finish_params): New.\n\t(set_param_value_internal): Take params and params_set\n\tparameters.  Assert params_finished.\n\t(set_param_value, maybe_set_param_value): Take params and\n\tparams_set parameters.  Update calls to set_param_value_internal.\n\t(set_default_param_value): Assert !params_finished.  Don't use\n\tset_param_value_internal.\n\t(default_param_value, init_param_values): New.\n\t* params.h (struct param_info): Change value to default_value.\n\tRemove set.\n\t(set_param_value, maybe_set_param_value): Add params and\n\tparams_set parameters.\n\t(PARAM_VALUE): Get parameters from global_options.\n\t(PARAM_SET_P): Remove.\n\t(finish_params, default_param_value, init_param_values): New.\n\t* common.opt (param_values): New Variable.\n\t* config/arm/arm.c (arm_option_override): Pass extra arguments to\n\tmaybe_set_param_value.\n\t* config/i386/i386.c (ix86_option_override_internal): Pass extra\n\targuments to maybe_set_param_value.\n\t* config/picochip/picochip.c (picochip_option_override): Pass\n\textra arguments to maybe_set_param_value.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Pass\n\textra arguments to maybe_set_param_value.\n\t* config/s390/s390.c (s390_option_override): Use\n\tmaybe_set_param_value instead of set_param_value.  Pass extra\n\targuments to maybe_set_param_value.\n\t* config/sparc/sparc.c (sparc_option_override): Pass extra\n\targuments to maybe_set_param_value.\n\t* config/spu/spu.c (spu_option_override): Pass extra arguments to\n\tmaybe_set_param_value.\n\t* opts.c (handle_param): Take opts and opts_set parameters.\n\tUpdate call to set_param_value.\n\t(initial_min_crossjump_insns,\n\tinitial_max_fields_for_field_sensitive,\n\tinitial_loop_invariant_max_bbs_in_loop): Remove.\n\t(init_options_once): Don't set them.\n\t(init_options_struct): Initialize parameters structures.\n\t(default_options_optimization): Use default_param_value when\n\trestoring defaults.  Update calls to maybe_set_param_value.\n\t(finish_options): Update calls to maybe_set_param_value.\n\t(common_handle_option): Update calls to handle_param and\n\tset_param_value.\n\t* toplev.c (DEFPARAM): Update definition for changes to\n\tparam_info.\n\t(general_init): Call finish_params.\n\nFrom-SVN: r165460", "tree": {"sha": "9b340b8d6c331d28e231ef93373d6e4219525626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b340b8d6c331d28e231ef93373d6e4219525626"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48476d13b2878a02ffcb38df139594a2477989f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48476d13b2878a02ffcb38df139594a2477989f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48476d13b2878a02ffcb38df139594a2477989f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48476d13b2878a02ffcb38df139594a2477989f1/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af476d7f2d3571c981b629995d3b3f1f8ffd3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af476d7f2d3571c981b629995d3b3f1f8ffd3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af476d7f2d3571c981b629995d3b3f1f8ffd3ab"}], "stats": {"total": 331, "additions": 248, "deletions": 83}, "files": [{"sha": "771de10936c4fc4f623475fad8e2d5f77bdaf81c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -1,3 +1,54 @@\n+2010-10-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* params.c (params_finished): New.\n+\t(add_params): Assert !params_finished.\n+\t(finish_params): New.\n+\t(set_param_value_internal): Take params and params_set\n+\tparameters.  Assert params_finished.\n+\t(set_param_value, maybe_set_param_value): Take params and\n+\tparams_set parameters.  Update calls to set_param_value_internal.\n+\t(set_default_param_value): Assert !params_finished.  Don't use\n+\tset_param_value_internal.\n+\t(default_param_value, init_param_values): New.\n+\t* params.h (struct param_info): Change value to default_value.\n+\tRemove set.\n+\t(set_param_value, maybe_set_param_value): Add params and\n+\tparams_set parameters.\n+\t(PARAM_VALUE): Get parameters from global_options.\n+\t(PARAM_SET_P): Remove.\n+\t(finish_params, default_param_value, init_param_values): New.\n+\t* common.opt (param_values): New Variable.\n+\t* config/arm/arm.c (arm_option_override): Pass extra arguments to\n+\tmaybe_set_param_value.\n+\t* config/i386/i386.c (ix86_option_override_internal): Pass extra\n+\targuments to maybe_set_param_value.\n+\t* config/picochip/picochip.c (picochip_option_override): Pass\n+\textra arguments to maybe_set_param_value.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Pass\n+\textra arguments to maybe_set_param_value.\n+\t* config/s390/s390.c (s390_option_override): Use\n+\tmaybe_set_param_value instead of set_param_value.  Pass extra\n+\targuments to maybe_set_param_value.\n+\t* config/sparc/sparc.c (sparc_option_override): Pass extra\n+\targuments to maybe_set_param_value.\n+\t* config/spu/spu.c (spu_option_override): Pass extra arguments to\n+\tmaybe_set_param_value.\n+\t* opts.c (handle_param): Take opts and opts_set parameters.\n+\tUpdate call to set_param_value.\n+\t(initial_min_crossjump_insns,\n+\tinitial_max_fields_for_field_sensitive,\n+\tinitial_loop_invariant_max_bbs_in_loop): Remove.\n+\t(init_options_once): Don't set them.\n+\t(init_options_struct): Initialize parameters structures.\n+\t(default_options_optimization): Use default_param_value when\n+\trestoring defaults.  Update calls to maybe_set_param_value.\n+\t(finish_options): Update calls to maybe_set_param_value.\n+\t(common_handle_option): Update calls to handle_param and\n+\tset_param_value.\n+\t* toplev.c (DEFPARAM): Update definition for changes to\n+\tparam_info.\n+\t(general_init): Call finish_params.\n+\n 2010-10-14  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300.h (CONSTANT_ALIGNMENT): Define."}, {"sha": "8fe796f802041eabf485431a47cd2b635d7331d7", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -55,6 +55,9 @@ enum ira_region flag_ira_region = IRA_REGION_MIXED\n Variable\n bool flag_warn_unused_result = false\n \n+Variable\n+int *param_values\n+\n ###\n Driver\n "}, {"sha": "5307948cc1d8c35eb8134850806b50450e360038", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -1958,7 +1958,9 @@ arm_option_override (void)\n        but measurable, size reduction for PIC code.  Therefore, we decrease\n        the bar for unrestricted expression hoisting to the cost of PIC address\n        calculation, which is 2 instructions.  */\n-    maybe_set_param_value (PARAM_GCSE_UNRESTRICTED_COST, 2);\n+    maybe_set_param_value (PARAM_GCSE_UNRESTRICTED_COST, 2,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n \n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();"}, {"sha": "91e383938901a55e85e3fa3e01990d24176e0d58", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -3633,10 +3633,18 @@ ix86_option_override_internal (bool main_args_p)\n     flag_schedule_insns_after_reload = flag_schedule_insns = 0;\n \n   maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n-\t\t\t ix86_cost->simultaneous_prefetches);\n-  maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE, ix86_cost->prefetch_block);\n-  maybe_set_param_value (PARAM_L1_CACHE_SIZE, ix86_cost->l1_cache_size);\n-  maybe_set_param_value (PARAM_L2_CACHE_SIZE, ix86_cost->l2_cache_size);\n+\t\t\t ix86_cost->simultaneous_prefetches,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE, ix86_cost->prefetch_block,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_L1_CACHE_SIZE, ix86_cost->l1_cache_size,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_L2_CACHE_SIZE, ix86_cost->l2_cache_size,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n \n   /* Enable sw prefetching at -O3 for CPUS that prefetching is helpful.  */\n   if (flag_prefetch_loop_arrays < 0"}, {"sha": "37771dbc6e69d572518731bf49dd9b2d4c24b0af", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -354,8 +354,12 @@ picochip_option_override (void)\n      that could potentially increase stack size.*/\n    if (flag_conserve_stack)\n      {\n-       maybe_set_param_value (PARAM_LARGE_STACK_FRAME, 0);\n-       maybe_set_param_value (PARAM_STACK_FRAME_GROWTH, 0);\n+       maybe_set_param_value (PARAM_LARGE_STACK_FRAME, 0,\n+\t\t\t      global_options.x_param_values,\n+\t\t\t      global_options_set.x_param_values);\n+       maybe_set_param_value (PARAM_STACK_FRAME_GROWTH, 0,\n+\t\t\t      global_options.x_param_values,\n+\t\t\t      global_options_set.x_param_values);\n      }\n \n   /* Turn off the elimination of unused types. The elaborator"}, {"sha": "f008c2dedfba58edac85981096a2304a99c1f655", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -3159,11 +3159,19 @@ rs6000_option_override_internal (const char *default_cpu)\n       }\n \n   maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n-\t\t\t rs6000_cost->simultaneous_prefetches);\n-  maybe_set_param_value (PARAM_L1_CACHE_SIZE, rs6000_cost->l1_cache_size);\n+\t\t\t rs6000_cost->simultaneous_prefetches,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_L1_CACHE_SIZE, rs6000_cost->l1_cache_size,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n   maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,\n-\t\t\t rs6000_cost->cache_line_size);\n-  maybe_set_param_value (PARAM_L2_CACHE_SIZE, rs6000_cost->l2_cache_size);\n+\t\t\t rs6000_cost->cache_line_size,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_L2_CACHE_SIZE, rs6000_cost->l2_cache_size,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n \n   /* If using typedef char *va_list, signal that __builtin_va_start (&ap, 0)\n      can be optimized to ap = __builtin_next_arg (0).  */"}, {"sha": "8aabe1175e8260aff5459c15c5a32954bdd46d00", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -1687,22 +1687,42 @@ s390_option_override (void)\n   if (s390_tune == PROCESSOR_2097_Z10\n       || s390_tune == PROCESSOR_2817_Z196)\n     {\n-      maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 100);\n-      maybe_set_param_value (PARAM_MAX_UNROLL_TIMES, 32);\n-      maybe_set_param_value (PARAM_MAX_COMPLETELY_PEELED_INSNS, 2000);\n-      maybe_set_param_value (PARAM_MAX_COMPLETELY_PEEL_TIMES, 64);\n-    }\n-\n-  set_param_value (\"max-pending-list-length\", 256);\n+      maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 100,\n+\t\t\t     global_options.x_param_values,\n+\t\t\t     global_options_set.x_param_values);\n+      maybe_set_param_value (PARAM_MAX_UNROLL_TIMES, 32,\n+\t\t\t     global_options.x_param_values,\n+\t\t\t     global_options_set.x_param_values);\n+      maybe_set_param_value (PARAM_MAX_COMPLETELY_PEELED_INSNS, 2000,\n+\t\t\t     global_options.x_param_values,\n+\t\t\t     global_options_set.x_param_values);\n+      maybe_set_param_value (PARAM_MAX_COMPLETELY_PEEL_TIMES, 64,\n+\t\t\t     global_options.x_param_values,\n+\t\t\t     global_options_set.x_param_values);\n+    }\n+\n+  maybe_set_param_value (PARAM_MAX_PENDING_LIST_LENGTH, 256,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n   /* values for loop prefetching */\n-  set_param_value (\"l1-cache-line-size\", 256);\n-  maybe_set_param_value (PARAM_L1_CACHE_SIZE, 128);\n+  maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE, 256,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_L1_CACHE_SIZE, 128,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n   /* s390 has more than 2 levels and the size is much larger.  Since\n      we are always running virtualized assume that we only get a small\n      part of the caches above l1.  */\n-  maybe_set_param_value (PARAM_L2_CACHE_SIZE, 1500);\n-  maybe_set_param_value (PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO, 2);\n-  maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 6);\n+  maybe_set_param_value (PARAM_L2_CACHE_SIZE, 1500,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO, 2,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n+  maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES, 6,\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n \n   /* This cannot reside in s390_option_optimization since HAVE_prefetch\n      requires the arch flags to be evaluated already.  Since prefetching"}, {"sha": "0cd3c8191e8778e5ad9e9cab076db6c37d8901d6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -922,13 +922,17 @@ sparc_option_override (void)\n \t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2)\n \t\t\t  ? 2\n \t\t\t  : (sparc_cpu == PROCESSOR_ULTRASPARC3\n-\t\t\t     ? 8 : 3)));\n+\t\t\t     ? 8 : 3)),\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n   maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,\n \t\t\t ((sparc_cpu == PROCESSOR_ULTRASPARC\n \t\t\t   || sparc_cpu == PROCESSOR_ULTRASPARC3\n \t\t\t   || sparc_cpu == PROCESSOR_NIAGARA\n \t\t\t   || sparc_cpu == PROCESSOR_NIAGARA2)\n-\t\t\t  ? 64 : 32));\n+\t\t\t  ? 64 : 32),\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n }\n \f\n /* Miscellaneous utilities.  */"}, {"sha": "f9e5c82ea7a9385ac76b116f0572f82ca3547b26", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -514,7 +514,9 @@ spu_option_override (void)\n   /* Small loops will be unpeeled at -O3.  For SPU it is more important\n      to keep code small by default.  */\n   if (!flag_unroll_loops && !flag_peel_loops)\n-    maybe_set_param_value (PARAM_MAX_COMPLETELY_PEEL_TIMES, 1);\n+    maybe_set_param_value (PARAM_MAX_COMPLETELY_PEEL_TIMES, 1,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n \n   flag_omit_frame_pointer = 1;\n "}, {"sha": "6807123062501299f53d0fe62d90d57815f25c2f", "filename": "gcc/opts.c", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -362,7 +362,8 @@ static bool common_handle_option (struct gcc_options *opts,\n \t\t\t\t  const struct cl_decoded_option *decoded,\n \t\t\t\t  unsigned int lang_mask, int kind,\n \t\t\t\t  const struct cl_option_handlers *handlers);\n-static void handle_param (const char *);\n+static void handle_param (struct gcc_options *opts,\n+\t\t\t  struct gcc_options *opts_set, const char *carg);\n static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const struct cl_decoded_option *,\n \t\t\t\t unsigned int lang_mask);\n@@ -652,11 +653,6 @@ read_cmdline_options (struct gcc_options *opts, struct gcc_options *opts_set,\n /* Language mask determined at initialization.  */\n static unsigned int initial_lang_mask;\n \n-/* Initial values of parameters we reset.  */\n-static int initial_min_crossjump_insns;\n-static int initial_max_fields_for_field_sensitive;\n-static int initial_loop_invariant_max_bbs_in_loop;\n-\n /* Initialize global options-related settings at start-up.  */\n \n void\n@@ -666,24 +662,22 @@ init_options_once (void)\n   initial_lang_mask = lang_hooks.option_lang_mask ();\n \n   lang_hooks.initialize_diagnostics (global_dc);\n-\n-  /* Save initial values of parameters we reset.  */\n-  initial_min_crossjump_insns\n-    = PARAM_VALUE (PARAM_MIN_CROSSJUMP_INSNS);\n-  initial_max_fields_for_field_sensitive\n-    = PARAM_VALUE (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE);\n-  initial_loop_invariant_max_bbs_in_loop\n-    = PARAM_VALUE (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP);\n }\n \n /* Initialize OPTS and OPTS_SET before using them in parsing options.  */\n \n void\n init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n {\n+  size_t num_params = get_num_compiler_params ();\n+\n   *opts = global_options_init;\n   memset (opts_set, 0, sizeof (*opts_set));\n \n+  opts->x_param_values = XNEWVEC (int, num_params);\n+  opts_set->x_param_values = XCNEWVEC (int, num_params);\n+  init_param_values (opts->x_param_values);\n+\n   /* Use priority coloring if cover classes is not defined for the\n      target.  */\n   if (targetm.ira_cover_classes == NULL)\n@@ -853,12 +847,16 @@ default_options_optimization (struct gcc_options *opts,\n   flag_ipa_sra = opt2;\n \n   /* Track fields in field-sensitive alias analysis.  */\n-  maybe_set_param_value (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE,\n-\t\t\t opt2 ? 100 : initial_max_fields_for_field_sensitive);\n+  maybe_set_param_value\n+    (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE,\n+     opt2 ? 100 : default_param_value (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE),\n+     opts->x_param_values, opts_set->x_param_values);\n \n   /* For -O1 only do loop invariant motion for very small loops.  */\n-  maybe_set_param_value (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP,\n-\t\t\t opt2 ? initial_loop_invariant_max_bbs_in_loop : 1000);\n+  maybe_set_param_value\n+    (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP,\n+     opt2 ? default_param_value (PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP) : 1000,\n+     opts->x_param_values, opts_set->x_param_values);\n \n   /* -O3 optimizations.  */\n   opt3 = (optimize >= 3);\n@@ -891,11 +889,13 @@ default_options_optimization (struct gcc_options *opts,\n \toptimize = 2;\n \n       /* We want to crossjump as much as possible.  */\n-      maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS, 1);\n+      maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS, 1,\n+\t\t\t     opts->x_param_values, opts_set->x_param_values);\n     }\n   else\n     maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS,\n-\t\t\t   initial_min_crossjump_insns);\n+\t\t\t   default_param_value (PARAM_MIN_CROSSJUMP_INSNS),\n+\t\t\t   opts->x_param_values, opts_set->x_param_values);\n \n   /* -Ofast adds optimizations to -O3.  */\n   if (ofast)\n@@ -1115,8 +1115,10 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n \n   if (flag_conserve_stack)\n     {\n-      maybe_set_param_value (PARAM_LARGE_STACK_FRAME, 100);\n-      maybe_set_param_value (PARAM_STACK_FRAME_GROWTH, 40);\n+      maybe_set_param_value (PARAM_LARGE_STACK_FRAME, 100,\n+\t\t\t     opts->x_param_values, opts_set->x_param_values);\n+      maybe_set_param_value (PARAM_STACK_FRAME_GROWTH, 40,\n+\t\t\t     opts->x_param_values, opts_set->x_param_values);\n     }\n   if (flag_wpa || flag_ltrans)\n     {\n@@ -1506,7 +1508,7 @@ common_handle_option (struct gcc_options *opts,\n   switch (code)\n     {\n     case OPT__param:\n-      handle_param (arg);\n+      handle_param (opts, opts_set, arg);\n       break;\n \n     case OPT_v:\n@@ -1826,8 +1828,10 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_finline_limit_:\n-      set_param_value (\"max-inline-insns-single\", value / 2);\n-      set_param_value (\"max-inline-insns-auto\", value / 2);\n+      set_param_value (\"max-inline-insns-single\", value / 2,\n+\t\t       opts->x_param_values, opts_set->x_param_values);\n+      set_param_value (\"max-inline-insns-auto\", value / 2,\n+\t\t       opts->x_param_values, opts_set->x_param_values);\n       break;\n \n     case OPT_finstrument_functions_exclude_function_list_:\n@@ -2122,7 +2126,8 @@ common_handle_option (struct gcc_options *opts,\n \n /* Handle --param NAME=VALUE.  */\n static void\n-handle_param (const char *carg)\n+handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n+\t      const char *carg)\n {\n   char *equal, *arg;\n   int value;\n@@ -2139,7 +2144,8 @@ handle_param (const char *carg)\n       else\n \t{\n \t  *equal = '\\0';\n-\t  set_param_value (arg, value);\n+\t  set_param_value (arg, value,\n+\t\t\t   opts->x_param_values, opts_set->x_param_values);\n \t}\n     }\n "}, {"sha": "07950b36536f3411e01b6ab33157eaa2c2dbf507", "filename": "gcc/params.c", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -35,11 +35,17 @@ param_info *compiler_params;\n /* The number of entries in the table.  */\n static size_t num_compiler_params;\n \n+/* Whether the parameters have all been initialized and had their\n+   default values determined.  */\n+static bool params_finished;\n+\n /* Add the N PARAMS to the current list of compiler parameters.  */\n \n void\n add_params (const param_info params[], size_t n)\n {\n+  gcc_assert (!params_finished);\n+\n   /* Allocate enough space for the new parameters.  */\n   compiler_params = XRESIZEVEC (param_info, compiler_params,\n \t\t\t\tnum_compiler_params + n);\n@@ -51,25 +57,39 @@ add_params (const param_info params[], size_t n)\n   num_compiler_params += n;\n }\n \n-/* Set the value of the parameter given by NUM to VALUE.  If\n-   EXPLICIT_P, this is being set by the user; otherwise it is being\n-   set implicitly by the compiler.  */\n+/* Note that all parameters have been added and all default values\n+   set.  */\n+\n+void\n+finish_params (void)\n+{\n+  params_finished = true;\n+}\n+\n+/* Set the value of the parameter given by NUM to VALUE in PARAMS and\n+   PARAMS_SET.  If EXPLICIT_P, this is being set by the user;\n+   otherwise it is being set implicitly by the compiler.  */\n \n static void\n set_param_value_internal (compiler_param num, int value,\n+\t\t\t  int *params, int *params_set,\n \t\t\t  bool explicit_p)\n {\n   size_t i = (size_t) num;\n \n-  compiler_params[i].value = value;\n+  gcc_assert (params_finished);\n+\n+  params[i] = value;\n   if (explicit_p)\n-    compiler_params[i].set = true;\n+    params_set[i] = true;\n }\n \n-/* Set the VALUE associated with the parameter given by NAME.  */\n+/* Set the VALUE associated with the parameter given by NAME in PARAMS\n+   and PARAMS_SET.  */\n \n void\n-set_param_value (const char *name, int value)\n+set_param_value (const char *name, int value,\n+\t\t int *params, int *params_set)\n {\n   size_t i;\n \n@@ -90,22 +110,25 @@ set_param_value (const char *name, int value)\n \t\t compiler_params[i].option,\n \t\t compiler_params[i].max_value);\n \telse\n-\t  set_param_value_internal ((compiler_param) i, value, true);\n+\t  set_param_value_internal ((compiler_param) i, value,\n+\t\t\t\t    params, params_set, true);\n \treturn;\n       }\n \n   /* If we didn't find this parameter, issue an error message.  */\n   error (\"invalid parameter %qs\", name);\n }\n \n-/* Set the value of the parameter given by NUM to VALUE, implicitly,\n-   if it has not been set explicitly by the user.  */\n+/* Set the value of the parameter given by NUM to VALUE in PARAMS and\n+   PARAMS_SET, implicitly, if it has not been set explicitly by the\n+   user.  */\n \n void\n-maybe_set_param_value (compiler_param num, int value)\n+maybe_set_param_value (compiler_param num, int value,\n+\t\t       int *params, int *params_set)\n {\n-  if (!PARAM_SET_P (num))\n-    set_param_value_internal (num, value, false);\n+  if (!params_set[(int) num])\n+    set_param_value_internal (num, value, params, params_set, false);\n }\n \n /* Set the default value of a parameter given by NUM to VALUE, before\n@@ -114,8 +137,31 @@ maybe_set_param_value (compiler_param num, int value)\n void\n set_default_param_value (compiler_param num, int value)\n {\n-  gcc_assert (!PARAM_SET_P (num));\n-  set_param_value_internal (num, value, false);\n+  gcc_assert (!params_finished);\n+\n+  compiler_params[(int) num].default_value = value;\n+}\n+\n+/* Return the default value of parameter NUM.  */\n+\n+int\n+default_param_value (compiler_param num)\n+{\n+  return compiler_params[(int) num].default_value;\n+}\n+\n+/* Initialize an array PARAMS with default values of the\n+   parameters.  */\n+\n+void\n+init_param_values (int *params)\n+{\n+  size_t i;\n+\n+  gcc_assert (params_finished);\n+\n+  for (i = 0; i < num_compiler_params; i++)\n+    params[i] = compiler_params[i].default_value;\n }\n \n /* Return the current value of num_compiler_params, for the benefit of"}, {"sha": "5aeb3ef47d75eb4fdcf87cc487d6ede5f138696b", "filename": "gcc/params.h", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -44,11 +44,9 @@ typedef struct param_info\n   /* The name used with the `--param <name>=<value>' switch to set this\n      value.  */\n   const char *const option;\n-  /* The associated value.  */\n-  int value;\n \n-  /* True if the parameter was explicitly set.  */\n-  bool set;\n+  /* The default value.  */\n+  int default_value;\n \n   /* Minimum acceptable value.  */\n   int min_value;\n@@ -72,9 +70,12 @@ extern size_t get_num_compiler_params (void);\n \n extern void add_params (const param_info params[], size_t n);\n \n-/* Set the VALUE associated with the parameter given by NAME.  */\n+/* Set the VALUE associated with the parameter given by NAME in the\n+   table PARAMS using PARAMS_SET to indicate which have been\n+   explicitly set.  */\n \n-extern void set_param_value (const char *name, int value);\n+extern void set_param_value (const char *name, int value,\n+\t\t\t     int *params, int *params_set);\n \n \f\n /* The parameters in use by language-independent code.  */\n@@ -90,22 +91,31 @@ typedef enum compiler_param\n \n /* The value of the parameter given by ENUM.  Not an lvalue.  */\n #define PARAM_VALUE(ENUM) \\\n-  ((int) compiler_params[(int) ENUM].value)\n+  ((int) global_options.x_param_values[(int) ENUM])\n \n /* Set the value of the parameter given by NUM to VALUE, implicitly,\n-   if it has not been set explicitly by the user.  */\n+   if it has not been set explicitly by the user, in the table PARAMS\n+   using PARAMS_SET to indicate which have been explicitly set.  */\n \n-extern void maybe_set_param_value (compiler_param num, int value);\n+extern void maybe_set_param_value (compiler_param num, int value,\n+\t\t\t\t   int *params, int *params_set);\n \n /* Set the default value of a parameter given by NUM to VALUE, before\n    option processing.  */\n \n extern void set_default_param_value (compiler_param num, int value);\n \n-/* True if the value of the parameter was explicitly changed.  Not an\n-   lvalue.  */\n-#define PARAM_SET_P(ENUM) \\\n-  ((bool) compiler_params[(int) ENUM].set)\n+/* Note that all parameters have been added and all default values\n+   set.  */\n+extern void finish_params (void);\n+\n+/* Return the default value of parameter NUM.  */\n+\n+extern int default_param_value (compiler_param num);\n+\n+/* Initialize an array PARAMS with default values of the\n+   parameters.  */\n+extern void init_param_values (int *params);\n \n /* Macros for the various parameters.  */\n #define STRUCT_REORG_COLD_STRUCT_RATIO \\"}, {"sha": "808248bd3d285e1b0fe69ab86e6cc853dfaedc9b", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48476d13b2878a02ffcb38df139594a2477989f1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=48476d13b2878a02ffcb38df139594a2477989f1", "patch": "@@ -286,10 +286,10 @@ const char *user_label_prefix;\n \n static const param_info lang_independent_params[] = {\n #define DEFPARAM(ENUM, OPTION, HELP, DEFAULT, MIN, MAX) \\\n-  { OPTION, DEFAULT, false, MIN, MAX, HELP },\n+  { OPTION, DEFAULT, MIN, MAX, HELP },\n #include \"params.def\"\n #undef DEFPARAM\n-  { NULL, 0, false, 0, 0, NULL }\n+  { NULL, 0, 0, 0, NULL }\n };\n \n /* Output files for assembler code (real compiler output)\n@@ -1698,6 +1698,7 @@ general_init (const char *argv0)\n   init_ggc_heuristics();\n   init_optimization_passes ();\n   statistics_early_init ();\n+  finish_params ();\n }\n \n /* Return true if the current target supports -fsection-anchors.  */"}]}