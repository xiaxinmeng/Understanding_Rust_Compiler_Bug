{"sha": "7a2289181e4c4c86c82ed0ce21b34bf985a46091", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyMjg5MTgxZTRjNGM4NmM4MmVkMGNlMjFiMzRiZjk4NWE0NjA5MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-04-18T17:54:11Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-04-18T17:54:11Z"}, "message": "c-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine.\n\n\t* c-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine.\n\t* c-tree.h (c_incomplete_type_error): New.\n\t* c-typeck.c (require_complete_type, build_component_ref): Update.\n\t(incomplete_type_error): Rename.\n\t* langhooks-def.h (lhd_incomplete_type_error): New.\n\t(LANG_HOOKS_INCOMPLETE_TYPE_ERROR): New.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Update.\n\t* langhooks.c (lhd_incomplete_type_error): New.\n\t* langhooks.h (struct lang_hooks_for_types): New hook.\n\t* tree.c (size_in_bytes): Use new hook.\n\t* tree.h (incomplete_type_error): Remove.\nada:\t* gigi.h (incomplete_type_error): Remove.\n\t* utils.c (incomplete_type_error): Remove.\ncp:\n\t* call.c (build_new_method_call): Update.\n\t* cp-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine.\n\t* cp-tree.h (cxx_incomplete_type_error): New.\n\t* decl.c (grokdeclarator, grokparms): Update.\n\t* decl2.c (check_classfn): Update.\n\t* pt.c (tsubst): Update.\n\t* typeck.c (complete_type_or_else, expr_sizeof,\n\tdecay_conversion): Update.\n\t* typeck2.c (incomplete_type_error): Rename.\n\t(add_exception_specifier): Update.\nf:\n\t* com.c (incomplete_type_error): Remove.\njava:\n\t* typeck.c (incomplete_type_error): Remove.\nobjc:\n\t* objc-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine.\n\nFrom-SVN: r52480", "tree": {"sha": "2c3060e80ce73a06bb75372ce3f7e774c0ad1716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c3060e80ce73a06bb75372ce3f7e774c0ad1716"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a2289181e4c4c86c82ed0ce21b34bf985a46091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2289181e4c4c86c82ed0ce21b34bf985a46091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2289181e4c4c86c82ed0ce21b34bf985a46091", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2289181e4c4c86c82ed0ce21b34bf985a46091/comments", "author": null, "committer": null, "parents": [{"sha": "f18664c1527ff43689bd98c594ce67a1a5d5840a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18664c1527ff43689bd98c594ce67a1a5d5840a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18664c1527ff43689bd98c594ce67a1a5d5840a"}], "stats": {"total": 146, "additions": 85, "deletions": 61}, "files": [{"sha": "eeed93e149a02dfaef087c58c2da197d55cc34ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -1,3 +1,19 @@\n+2002-04-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine.\n+\t* c-tree.h (c_incomplete_type_error): New.\n+\t* c-typeck.c (require_complete_type, build_component_ref): Update.\n+\t(incomplete_type_error): Rename.\n+\t* langhooks-def.h (lhd_incomplete_type_error): New.\n+\t(LANG_HOOKS_INCOMPLETE_TYPE_ERROR): New.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Update.\n+\t* langhooks.c (lhd_incomplete_type_error): New.\n+\t* langhooks.h (struct lang_hooks_for_types): New hook.\n+\t* tree.c (size_in_bytes): Use new hook.\n+\t* tree.h (incomplete_type_error): Remove.\n+objc:\n+\t* objc-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine.\n+\n 2002-04-18  Zack Weinberg  <zack@codesourcery.com>\n \n \t* config/arc/arc.md: Remove #if HOST_FLOAT_FORMAT !="}, {"sha": "fbcdc5391da2e20e22f37486f3d55db0d2f24818", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -1,3 +1,8 @@\n+2002-04-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gigi.h (incomplete_type_error): Remove.\n+\t* utils.c (incomplete_type_error): Remove.\n+\n 2002-04-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* trans.c (tree_transform): Add has_scope argument to"}, {"sha": "44b5937d7c17ed7a3a43751ba0135ac2ef0508fc", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -439,10 +439,6 @@ extern tree gnat_signed_type\t\tPARAMS ((tree));\n    UNSIGNEDP.  */\n extern tree gnat_signed_or_unsigned_type PARAMS ((int, tree));\n \n-/* This routine is called in tree.c to print an error message for invalid use\n-   of an incomplete type.  */\n-extern void incomplete_type_error\tPARAMS ((tree, tree));\n-\n /* This function is called indirectly from toplev.c to handle incomplete \n    declarations, i.e. VAR_DECL nodes whose DECL_SIZE is zero.  To be precise,\n    compile_file in toplev.c makes an indirect call through the function pointer"}, {"sha": "70e2dc7f7cb39f5d5f23035d6ab745a8a9f0a097", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -685,17 +685,6 @@ init_gigi_decls (long_long_float_type, exception_type)\n   ggc_add_tree_root (gnat_raise_decls, ARRAY_SIZE (gnat_raise_decls));\n }\n \f\n-/* This routine is called in tree.c to print an error message for invalid use\n-   of an incomplete type.  */\n-\n-void\n-incomplete_type_error (dont_care_1, dont_care_2)\n-     tree dont_care_1 ATTRIBUTE_UNUSED;\n-     tree dont_care_2 ATTRIBUTE_UNUSED;\n-{\n-  gigi_abort (404);\n-}\n-\n /* This function is called indirectly from toplev.c to handle incomplete \n    declarations, i.e. VAR_DECL nodes whose DECL_SIZE is zero.  To be precise,\n    compile_file in toplev.c makes an indirect call through the function pointer"}, {"sha": "741aa1d36705aa9bf86c2fc5d2e94e45d77a85d9", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -100,6 +100,8 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n+#undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n+#define LANG_HOOKS_INCOMPLETE_TYPE_ERROR c_incomplete_type_error\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n "}, {"sha": "3d152fb83204d55b332390522e38fd11b4539c4e", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -250,6 +250,7 @@ extern int comptypes\t\t\t\tPARAMS ((tree, tree));\n extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n extern tree c_size_in_bytes                     PARAMS ((tree));\n extern bool c_mark_addressable\t\t\tPARAMS ((tree));\n+extern void c_incomplete_type_error\t\tPARAMS ((tree, tree));\n extern tree build_component_ref                 PARAMS ((tree, tree));\n extern tree build_indirect_ref                  PARAMS ((tree, const char *));\n extern tree build_array_ref                     PARAMS ((tree, tree));"}, {"sha": "6b198f9310d32fef000a222f5c59b1cd5862d7a5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -99,7 +99,7 @@ require_complete_type (value)\n   if (COMPLETE_TYPE_P (type))\n     return value;\n \n-  incomplete_type_error (value, type);\n+  c_incomplete_type_error (value, type);\n   return error_mark_node;\n }\n \n@@ -108,7 +108,7 @@ require_complete_type (value)\n    and TYPE is the type that was invalid.  */\n \n void\n-incomplete_type_error (value, type)\n+c_incomplete_type_error (value, type)\n      tree value;\n      tree type;\n {\n@@ -1163,7 +1163,7 @@ build_component_ref (datum, component)\n     {\n       if (!COMPLETE_TYPE_P (type))\n \t{\n-\t  incomplete_type_error (NULL_TREE, type);\n+\t  c_incomplete_type_error (NULL_TREE, type);\n \t  return error_mark_node;\n \t}\n "}, {"sha": "a9b6023b1c5a7f9ab977b24b238e22d3f73e10aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -1,3 +1,16 @@\n+2002-04-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* call.c (build_new_method_call): Update.\n+\t* cp-lang.c (LANG_HOOKS_INCOMPLETE_TYPE_ERROR): Redefine.\n+\t* cp-tree.h (cxx_incomplete_type_error): New.\n+\t* decl.c (grokdeclarator, grokparms): Update.\n+\t* decl2.c (check_classfn): Update.\n+\t* pt.c (tsubst): Update.\n+\t* typeck.c (complete_type_or_else, expr_sizeof,\n+\tdecay_conversion): Update.\n+\t* typeck2.c (incomplete_type_error): Rename.\n+\t(add_exception_specifier): Update.\n+\n 2002-04-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/5658"}, {"sha": "f9ca9a08f5f2da4e405ca137c05adf2771f7e3c5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -4636,7 +4636,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n       if (flags & LOOKUP_SPECULATIVELY)\n \treturn NULL_TREE;\n       if (!COMPLETE_TYPE_P (basetype))\n-\tincomplete_type_error (instance_ptr, basetype);\n+\tcxx_incomplete_type_error (instance_ptr, basetype);\n       else\n \terror (\"no matching function for call to `%T::%D(%A)%#V'\",\n \t       basetype, pretty_name, user_args,"}, {"sha": "1ac312222bb22fb97a2dae77ae5bf585fb951da4", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -134,6 +134,8 @@ static bool cxx_warn_unused_global_decl PARAMS ((tree));\n #define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n+#undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n+#define LANG_HOOKS_INCOMPLETE_TYPE_ERROR cxx_incomplete_type_error\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "41bde3813f13fcadfc454c47e7880a3561fafa17", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -4373,6 +4373,7 @@ extern tree check_return_expr                   PARAMS ((tree));\n   build_binary_op(code, arg1, arg2, 1)\n \n /* in typeck2.c */\n+extern void cxx_incomplete_type_error\t\tPARAMS ((tree, tree));\n extern tree error_not_base_type\t\t\tPARAMS ((tree, tree));\n extern tree binfo_or_else\t\t\tPARAMS ((tree, tree));\n extern void readonly_error\t\t\tPARAMS ((tree, const char *, int));"}, {"sha": "51efa3574ec2f46f23c48bc12773fc2e5f76813d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -11115,7 +11115,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t  }\n \t\telse\n \t          {\n-\t            incomplete_type_error (NULL_TREE, ctype);\n+\t            cxx_incomplete_type_error (NULL_TREE, ctype);\n \t            return error_mark_node;\n \t\t  }\n \n@@ -12136,7 +12136,7 @@ grokparms (first_parm)\n               && !DECL_NAME (decl) && !result && !chain && !ellipsis)\n             /* this is a parmlist of `(void)', which is ok.  */\n             break;\n-          incomplete_type_error (decl, type);\n+          cxx_incomplete_type_error (decl, type);\n \t  /* It's not a good idea to actually create parameters of\n \t     type `void'; other parts of the compiler assume that a\n \t     void type terminates the parameter list.  */"}, {"sha": "a904c0dd4bb14bdbb9628fe79e886c4d0aa4df4a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -1353,7 +1353,7 @@ check_classfn (ctype, function)\n     {\n       methods = 0;\n       if (!COMPLETE_TYPE_P (ctype))\n-        incomplete_type_error (function, ctype);\n+        cxx_incomplete_type_error (function, ctype);\n       else\n         error (\"no `%#D' member function declared in class `%T'\",\n \t\t  function, ctype);"}, {"sha": "aa198a68fbe441bdde0a47c1d4dca49836d1946d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -6810,7 +6810,7 @@ tsubst (t, args, complain, in_decl)\n \t    if (!COMPLETE_TYPE_P (ctx))\n \t      {\n \t\tif (complain & tf_error)\n-\t\t  incomplete_type_error (NULL_TREE, ctx);\n+\t\t  cxx_incomplete_type_error (NULL_TREE, ctx);\n \t\treturn error_mark_node;\n \t      }\n \t  }"}, {"sha": "a92813528a3ad420d324cc005df213dee3e30a1a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -171,7 +171,7 @@ complete_type_or_else (type, value)\n     return NULL_TREE;\n   else if (!COMPLETE_TYPE_P (type))\n     {\n-      incomplete_type_error (value, type);\n+      cxx_incomplete_type_error (value, type);\n       return NULL_TREE;\n     }\n   else\n@@ -1566,7 +1566,7 @@ expr_sizeof (e)\n     }\n   else if (type_unknown_p (e))\n     {\n-      incomplete_type_error (e, TREE_TYPE (e));\n+      cxx_incomplete_type_error (e, TREE_TYPE (e));\n       return c_sizeof (char_type_node);\n     }\n   /* It's illegal to say `sizeof (X::i)' for `i' a non-static data\n@@ -1648,7 +1648,7 @@ decay_conversion (exp)\n \n   if (type_unknown_p (exp))\n     {\n-      incomplete_type_error (exp, TREE_TYPE (exp));\n+      cxx_incomplete_type_error (exp, TREE_TYPE (exp));\n       return error_mark_node;\n     }\n   "}, {"sha": "38daa087fa33a7a3681121b19c393e2e64687a8b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -185,7 +185,7 @@ abstract_virtuals_error (decl, type)\n    and TYPE is the type that was invalid.  */\n \n void\n-incomplete_type_error (value, type)\n+cxx_incomplete_type_error (value, type)\n      tree value;\n      tree type;\n {\n@@ -1326,7 +1326,7 @@ add_exception_specifier (list, spec, complain)\n         }\n     }\n   else if (complain)\n-    incomplete_type_error (NULL_TREE, core);\n+    cxx_incomplete_type_error (NULL_TREE, core);\n   return list;\n }\n "}, {"sha": "ead0a581b004a24d6b642db8890780b970439dcf", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -1,3 +1,7 @@\n+Thu Apr 18 19:10:44 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (incomplete_type_error): Remove.\n+\n Tue Apr 16 14:55:47 2002  Mark Mitchell  <mark@codesourcery.com>\n \n \t* com.c (ffecom_expr_power_integer): Add has_scope argument to"}, {"sha": "c100c2a12acc0e7af96fe067d4237842fd3dc02b", "filename": "gcc/f/com.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -14077,21 +14077,6 @@ global_bindings_p ()\n   return current_binding_level == global_binding_level;\n }\n \n-/* Print an error message for invalid use of an incomplete type.\n-   VALUE is the expression that was used (or 0 if that isn't known)\n-   and TYPE is the type that was invalid.  */\n-\n-void\n-incomplete_type_error (value, type)\n-     tree value UNUSED;\n-     tree type;\n-{\n-  if (TREE_CODE (type) == ERROR_MARK)\n-    return;\n-\n-  assert (\"incomplete type?!?\" == NULL);\n-}\n-\n /* Mark ARG for GC.  */\n static void\n mark_binding_level (void *arg)"}, {"sha": "48884bb56d2846964f1c4e4375d4b0fdd6aa2de6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -1,3 +1,7 @@\n+2002-04-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* typeck.c (incomplete_type_error): Remove.\n+\n 2002-04-18  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* class.c (make_class_data): Set DECL_ALIGN on static class data,"}, {"sha": "f4525436b82c4fa81b4cbc5537f1dfd485ef55d9", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -166,18 +166,6 @@ convert_to_boolean (type, expr)\n   return build1 (NOP_EXPR, type, expr);\n }\n \n-/* Print an error message for invalid use of an incomplete type.\n-   VALUE is the expression that was used (or 0 if that isn't known)\n-   and TYPE is the type that was invalid.  */\n-\n-void\n-incomplete_type_error (value, type)\n-  tree value ATTRIBUTE_UNUSED;\n-  tree type ATTRIBUTE_UNUSED;\n-{\n-  error (\"internal error - use of undefined type\");\n-}\n-\n /* Return a data type that has machine mode MODE.\n    If the mode is an integer,\n    then UNSIGNEDP selects between signed and unsigned types.  */"}, {"sha": "0f08524a048e4af64a4fdcc65b414a1cbb2d5704", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -57,6 +57,7 @@ extern void lhd_print_error_function PARAMS ((struct diagnostic_context *,\n \t\t\t\t\t      const char *));\n extern void lhd_set_decl_assembler_name PARAMS ((tree));\n extern bool lhd_warn_unused_global_decl PARAMS ((tree));\n+extern void lhd_incomplete_type_error PARAMS ((tree, tree));\n \n /* Declarations of default tree inlining hooks.  */\n tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n@@ -159,14 +160,16 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n /* Types hooks.  There are no reasonable defaults for most of them,\n    so we create a compile-time error instead.  */\n #define LANG_HOOKS_MAKE_TYPE make_node\n+#define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n   LANG_HOOKS_TYPE_FOR_MODE, \\\n   LANG_HOOKS_TYPE_FOR_SIZE, \\\n   LANG_HOOKS_UNSIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_TYPE, \\\n-  LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE \\\n+  LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE, \\\n+  LANG_HOOKS_INCOMPLETE_TYPE_ERROR \\\n }\n \n /* Declaration hooks.  */"}, {"sha": "c48ea2cba2b7ab60927a1ff540bfd5e8f339f2ea", "filename": "gcc/langhooks.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -178,6 +178,17 @@ lhd_clear_binding_stack ()\n     poplevel (0, 0, 0);\n }\n \n+/* Invalid use of an incomplete type.  */\n+void\n+lhd_incomplete_type_error (value, type)\n+     tree value ATTRIBUTE_UNUSED, type;\n+{\n+  if (TREE_CODE (type) == ERROR_MARK)\n+    return;\n+\n+  abort ();\n+}\n+\n /* Provide a default routine for alias sets that always returns -1.  This\n    is used by languages that don't need to do anything special.  */\n "}, {"sha": "a2069d62ed5373b0f72d40c7fd49f2db5f16eefd", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -96,6 +96,12 @@ struct lang_hooks_for_types\n   /* Return a type the same as TYPE except unsigned or signed\n      according to UNSIGNEDP.  */\n   tree (*signed_or_unsigned_type) PARAMS ((int, tree));\n+\n+  /* This routine is called in tree.c to print an error message for\n+     invalid use of an incomplete type.  VALUE is the expression that\n+     was used (or 0 if that isn't known) and TYPE is the type that was\n+     invalid.  */\n+  void (*incomplete_type_error) PARAMS ((tree value, tree type));\n };\n \n /* Language hooks related to decls and the symbol table.  */"}, {"sha": "247280318a7edbec5ff24962094cd22f8a258ac5", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -97,6 +97,8 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_UNSIGNED_TYPE c_common_unsigned_type\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n+#undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n+#define LANG_HOOKS_INCOMPLETE_TYPE_ERROR c_incomplete_type_error\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "69615e10b99d86eb8b2173e2949c9f487edd5e4d", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -1187,7 +1187,7 @@ size_in_bytes (type)\n \n   if (t == 0)\n     {\n-      incomplete_type_error (NULL_TREE, type);\n+      (*lang_hooks.types.incomplete_type_error) (NULL_TREE, type);\n       return size_zero_node;\n     }\n "}, {"sha": "58113ca9571b324fb2538f17bfe5255421b73c00", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2289181e4c4c86c82ed0ce21b34bf985a46091/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7a2289181e4c4c86c82ed0ce21b34bf985a46091", "patch": "@@ -2943,10 +2943,6 @@ extern const struct attribute_spec *lang_attribute_table;\n /* Flag saying whether common language attributes are to be supported.  */\n extern int lang_attribute_common;\n \n-/* In front end.  */\n-\n-extern void incomplete_type_error\tPARAMS ((tree, tree));\n-\n /* In integrate.c */\n extern void save_for_inline\t\tPARAMS ((tree));\n extern void set_decl_abstract_flags\tPARAMS ((tree, int));"}]}