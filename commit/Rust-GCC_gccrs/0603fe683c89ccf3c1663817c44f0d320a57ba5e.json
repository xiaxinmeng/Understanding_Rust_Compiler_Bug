{"sha": "0603fe683c89ccf3c1663817c44f0d320a57ba5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYwM2ZlNjgzYzg5Y2NmM2MxNjYzODE3YzQ0ZjBkMzIwYTU3YmE1ZQ==", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@google.com", "date": "2010-07-20T20:16:53Z"}, "committer": {"name": "Jeffrey Yasskin", "email": "jyasskin@gcc.gnu.org", "date": "2010-07-20T20:16:53Z"}, "message": "re PR c++/44641 (Generated constructors and destructors get wrong debug location when a typedef uses a forward declaration of the type before the definition)\n\nPR c++/44641\n        * gcc/cp/pt.c (instantiate_class_template): Propagate the\n        template's location to its instance.\n\n       \t* gcc/testsuite/lib/scanasm.exp (dg-function-on-line): Test\n        that a function is defined on the current line.\n        * gcc/testsuite/g++.dg/debug/dwarf2/lineno-simple1.C: New.\n        Line number sanity test.\n        * gcc/testsuite/g++.dg/debug/dwarf2/pr44641.C: New.\n\nFrom-SVN: r162349", "tree": {"sha": "d182d7caab0a17dadf100fabc2f21a970aaac53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d182d7caab0a17dadf100fabc2f21a970aaac53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0603fe683c89ccf3c1663817c44f0d320a57ba5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0603fe683c89ccf3c1663817c44f0d320a57ba5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0603fe683c89ccf3c1663817c44f0d320a57ba5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0603fe683c89ccf3c1663817c44f0d320a57ba5e/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b47fe3fe5a6ddc89896e73a8ec831750bcf69b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b47fe3fe5a6ddc89896e73a8ec831750bcf69b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b47fe3fe5a6ddc89896e73a8ec831750bcf69b0"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "04f9af72d8f274355aaa505d793a05dabfb55282", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0603fe683c89ccf3c1663817c44f0d320a57ba5e", "patch": "@@ -1,3 +1,9 @@\n+2010-07-20  Jeffrey Yasskin  <jyasskin@google.com>\n+\n+\tPR c++/44641\n+\t* pt.c (instantiate_class_template): Propagate the template's\n+\tlocation to its instance.\n+\n 2010-07-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44967"}, {"sha": "7a331479d8b515bbe7e2aaf474c27a55a12d0554", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0603fe683c89ccf3c1663817c44f0d320a57ba5e", "patch": "@@ -7832,7 +7832,8 @@ instantiate_class_template (tree type)\n   /* Set the input location to the most specialized template definition.\n      This is needed if tsubsting causes an error.  */\n   typedecl = TYPE_MAIN_DECL (pattern);\n-  input_location = DECL_SOURCE_LOCATION (typedecl);\n+  input_location = DECL_SOURCE_LOCATION (TYPE_NAME (type)) =\n+    DECL_SOURCE_LOCATION (typedecl);\n \n   TYPE_HAS_USER_CONSTRUCTOR (type) = TYPE_HAS_USER_CONSTRUCTOR (pattern);\n   TYPE_HAS_NEW_OPERATOR (type) = TYPE_HAS_NEW_OPERATOR (pattern);"}, {"sha": "d5e18023f437a32ad0cfdc41880204ce80250125", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0603fe683c89ccf3c1663817c44f0d320a57ba5e", "patch": "@@ -1,3 +1,10 @@\n+2010-07-20  Jeffrey Yasskin  <jyasskin@google.com>\n+\n+\t* lib/scanasm.exp (dg-function-on-line): Test that a function is\n+\tdefined on the current line.\n+\t* g++.dg/debug/dwarf2/lineno-simple1.C: New. Line number sanity test.\n+\t* g++.dg/debug/dwarf2/pr44641.C: New.\n+\n 2010-07-20  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc.target/powerpc/block-move-1.c: New test."}, {"sha": "e0ef7f71ca34188eea6271a2e2e669f4bd990a1c", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/lineno-simple1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flineno-simple1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flineno-simple1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flineno-simple1.C?ref=0603fe683c89ccf3c1663817c44f0d320a57ba5e", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-g -O0 -dA\" }\n+\n+struct C {  // { dg-function-on-line {_ZN1CC[12]Ev} }\n+  virtual void\n+  foo() {}  // { dg-function-on-line _ZN1C3fooEv }\n+};\n+static C dummy;\n+\n+int\n+main (void)\n+{  // { dg-function-on-line main }\n+}"}, {"sha": "2df002f6b007c05ee88952dfd8cd09ce5087549f", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr44641.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C?ref=0603fe683c89ccf3c1663817c44f0d320a57ba5e", "patch": "@@ -0,0 +1,41 @@\n+// Origin: PR 44641\n+// { dg-do compile }\n+// { dg-options \"-g -O0 -dA\" }\n+\n+template <class A> struct MisplacedDbg;\n+template<class T> struct MisplacedDbg<T*>;\n+struct Full;\n+template<> struct MisplacedDbg<Full>;\n+\n+struct Arg;\n+typedef MisplacedDbg<Arg> Typedef1;\n+typedef MisplacedDbg<Arg*> Typedef2;\n+typedef MisplacedDbg<Full> Typedef3;\n+\n+template<typename T> struct Base  {\n+  virtual ~Base() {\n+  }\n+};\n+\n+template <>\n+struct MisplacedDbg<Full>  // { dg-function-on-line {_ZN12MisplacedDbgI4FullEC[12]Ev} }\n+                           // { dg-function-on-line {_ZN12MisplacedDbgI4FullED0Ev} { target *-*-* } 21 }\n+\n+    : public Base<int> {\n+};\n+\n+template <class T>\n+struct MisplacedDbg<T*>  // { dg-function-on-line {_ZN12MisplacedDbgIP3ArgEC[12]Ev} }\n+                         // { dg-function-on-line {_ZN12MisplacedDbgIP3ArgED0Ev} { target *-*-* } 28 }\n+    : public Base<int> {\n+};\n+\n+template <class A>\n+struct MisplacedDbg  // { dg-function-on-line {_ZN12MisplacedDbgI3ArgEC[12]Ev} }\n+                     // { dg-function-on-line {_ZN12MisplacedDbgI3ArgED0Ev} { target *-*-* } 34 }\n+    : public Base<int> {\n+};\n+\n+static MisplacedDbg<Arg> static_var1;\n+static MisplacedDbg<Arg*> static_var2;\n+static MisplacedDbg<Full> static_var3;"}, {"sha": "aa8383d43a99bed456a6cdd1c45459fae90a35db", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603fe683c89ccf3c1663817c44f0d320a57ba5e/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=0603fe683c89ccf3c1663817c44f0d320a57ba5e", "patch": "@@ -291,3 +291,40 @@ proc scan-assembler-dem-not { args } {\n \tfail \"$testcase scan-assembler-dem-not $pp_pattern\"\n     }\n }\n+\n+# Utility for testing that a function is defined on the current line.\n+# Call pass if so, otherwise fail.  Invoked directly; the file must\n+# have been compiled with -g -dA.\n+#\n+# Argument 0 is the current line, passed implicitly by dejagnu\n+# Argument 1 is the function to check\n+# Argument 2 handles expected failures and the like\n+# Argument 3 is \".\" to match the current line, or an integer to match\n+# an explicit line.\n+proc dg-function-on-line { args } {\n+    # Upvar from dg-final:\n+    upvar dg-final-code final-code\n+\n+    set line [lindex $args 0]\n+    set symbol [lindex $args 1]\n+    set failures [lindex $args 2]\n+\n+    if { [llength $args] >= 4 } {\n+\tswitch [lindex $args 3] {\n+\t    \".\" { }\n+\t    \"default\" { set line [lindex $args 3] }\n+\t}\n+    }\n+\n+    set pattern [format {%s:[^\\t]*(\\t.file[^\\t]*)?\\t# \\S*:%d\\n} \\\n+                 $symbol $line]\n+\n+    # The lack of spaces around $pattern is important, since they'd\n+    # become part of the regex scan-assembler tries to match.\n+    set cmd \"scan-assembler {$pattern}\"\n+    if { [llength $args] >= 3 } {\n+        set cmd \"$cmd {$failures}\"\n+    }\n+\n+    append final-code \"$cmd\\n\"\n+}"}]}