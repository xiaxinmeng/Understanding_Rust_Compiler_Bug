{"sha": "43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1NzdlNmJkN2JiOTkyZTg3ZDIyYjZhYzVlMTM3ODdmOGE5NmFmMw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-21T18:39:29Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-21T18:39:29Z"}, "message": "Makefile.in (fold-const.o, [...]): Update.\n\n\t* Makefile.in (fold-const.o, stor-layout.o, stmt.o,\n\tsdbout.o, profile.o): Update.\n\t* c-common.c (c_common_nodes_and_builtins): Use pushdecl\n\tlanghook.\n\t* c-common.h (gettags): Move here from tree.h.\n\t* c-tree.h (pushdecl, pushlevel, poplevel, set_block,\n\tinsert_block, getdecls, kept_level_p, global_bindings_p): New.\n\t* dbxout.c (dbxout_init): Use getdecls langhook.\n\t* expr.c (expand_expr): Use insert_block langhook.\n\t* fold-const.c: Include langhooks.h.\n\t(fold_range_test, fold_binary_op_with_conditional_arg,\n\tfold): Use global_bindings_p langhook.\n\t* integrate.c (expand_inline_function): Use insert_block langhook.\n\t* langhooks-def.h (LANG_HOOKS_DECLS, LANG_HOOKS_PUSHLEVEL,\n\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_GLOBAL_BINDINGS_P,\n\tLANG_HOOKS_INSERT_BLOCK, LANG_HOOKS_SET_BLOCK, LANG_HOOKS_PUSHDECL,\n\tLANG_HOOKS_GETDECLS): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.c (lhd_clear_binding_stack): Use global_bindings_p\n\tlanghook.\n\t* langhooks.h (struct lang_hooks_for_decls): New.\n\t(struct lang_hooks): Update.\n\t* profile.c: Include langhooks.h.\n\t(output_func_start_profiler): Use new langhooks.\n\t* sdbout.c: Include langhooks.h.\n\t(sdbout_init, sdbout_finish): Use getdecls langhook.\n\t* stmt.c: Include langhooks.h.\n\t(expand_fixup, fixup_gotos): Use new langhooks.\n\t* stor-layout.c: Include langhooks.h.\n\t(variable_size): Use global_bindings_p langhook.\n\t* toplev.c (compile_file): Use getdecls langhook.\n\t* tree-inline.c (remap_block): Use insert_block langhook.\n\t* tree.h (pushdecl, pushlevel, poplevel, set_block, gettags,\n\tinsert_block, getdecls, kept_level_p, global_bindings_p): Remove.\ncp:\n\t* cp-tree.h (pushdecl, pushlevel, poplevel, set_block,\n\tinsert_block, getdecls, global_bindings_p): New.\njava:\n\t* cp-tree.h (pushdecl, pushlevel, poplevel, set_block,\n\tinsert_block, getdecls, kept_level_p, global_bindings_p): New.\nf:\n\t* cp-tree.h (pushdecl, pushlevel, poplevel, set_block,\n\tinsert_block, getdecls, global_bindings_p): New.\n\nFrom-SVN: r51136", "tree": {"sha": "b565716472649ba4ff8e84298f2475f0afd90105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b565716472649ba4ff8e84298f2475f0afd90105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/comments", "author": null, "committer": null, "parents": [{"sha": "5b19b10c6b457c9d02812a2a68a73fa5d39086db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b19b10c6b457c9d02812a2a68a73fa5d39086db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b19b10c6b457c9d02812a2a68a73fa5d39086db"}], "stats": {"total": 330, "additions": 236, "deletions": 94}, "files": [{"sha": "de97f031a942f4017e133ceb15f4a496cc4d127a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1,3 +1,40 @@\n+2002-03-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (fold-const.o, stor-layout.o, stmt.o,\n+\tsdbout.o, profile.o): Update.\n+\t* c-common.c (c_common_nodes_and_builtins): Use pushdecl\n+\tlanghook.\n+\t* c-common.h (gettags): Move here from tree.h.\n+\t* c-tree.h (pushdecl, pushlevel, poplevel, set_block,\n+\tinsert_block, getdecls, kept_level_p, global_bindings_p): New.\n+\t* dbxout.c (dbxout_init): Use getdecls langhook.\n+\t* expr.c (expand_expr): Use insert_block langhook.\n+\t* fold-const.c: Include langhooks.h.\n+\t(fold_range_test, fold_binary_op_with_conditional_arg,\n+\tfold): Use global_bindings_p langhook.\n+\t* integrate.c (expand_inline_function): Use insert_block langhook.\n+\t* langhooks-def.h (LANG_HOOKS_DECLS, LANG_HOOKS_PUSHLEVEL,\n+\tLANG_HOOKS_POPLEVEL, LANG_HOOKS_GLOBAL_BINDINGS_P,\n+\tLANG_HOOKS_INSERT_BLOCK, LANG_HOOKS_SET_BLOCK, LANG_HOOKS_PUSHDECL,\n+\tLANG_HOOKS_GETDECLS): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.c (lhd_clear_binding_stack): Use global_bindings_p\n+\tlanghook.\n+\t* langhooks.h (struct lang_hooks_for_decls): New.\n+\t(struct lang_hooks): Update.\n+\t* profile.c: Include langhooks.h.\n+\t(output_func_start_profiler): Use new langhooks.\n+\t* sdbout.c: Include langhooks.h.\n+\t(sdbout_init, sdbout_finish): Use getdecls langhook.\n+\t* stmt.c: Include langhooks.h.\n+\t(expand_fixup, fixup_gotos): Use new langhooks.\n+\t* stor-layout.c: Include langhooks.h.\n+\t(variable_size): Use global_bindings_p langhook.\n+\t* toplev.c (compile_file): Use getdecls langhook.\n+\t* tree-inline.c (remap_block): Use insert_block langhook.\n+\t* tree.h (pushdecl, pushlevel, poplevel, set_block, gettags,\n+\tinsert_block, getdecls, kept_level_p, global_bindings_p): Remove.\n+\n 2002-03-21  Richard Henderson  <rth@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_select_rtx_section): Put symbolic"}, {"sha": "2a9df4901faeca91cfc2e32b6d60124ac3ebae44", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1335,9 +1335,10 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) \\\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GGC_H) \\\n    langhooks.h\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n-   function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H) $(TARGET_H)\n+   function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H) $(TARGET_H) \\\n+   langhooks.h\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n-   toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) $(TM_P_H)\n+   toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) $(TM_P_H) langhooks.h\n diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n    input.h toplev.h intl.h langhooks.h\n@@ -1379,7 +1380,8 @@ function.o : function.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    $(TM_P_H) langhooks.h\n stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-config.h hard-reg-set.h $(EXPR_H) libfuncs.h except.h \\\n-   $(LOOP_H) $(RECOG_H) toplev.h output.h varray.h $(GGC_H) $(TM_P_H)\n+   $(LOOP_H) $(RECOG_H) toplev.h output.h varray.h $(GGC_H) $(TM_P_H) \\\n+   langhooks.h\n except.o : except.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    except.h function.h $(EXPR_H) libfuncs.h integrate.h \\\n    insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n@@ -1410,7 +1412,7 @@ debug.o : debug.c debug.h $(CONFIG_H) $(SYSTEM_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    function.h $(EXPR_H) output.h hard-reg-set.h $(REGS_H) real.h \\\n    insn-config.h $(OBSTACK_H) xcoffout.h c-pragma.h ggc.h \\\n-   sdbout.h toplev.h $(TM_P_H) except.h debug.h\n+   sdbout.h toplev.h $(TM_P_H) except.h debug.h langhooks.h\n dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n    flags.h insn-config.h reload.h output.h toplev.h $(TM_P_H) \\\n    debug.h langhooks.h\n@@ -1472,7 +1474,8 @@ conflict.o : conflict.c $(CONFIG_H) $(SYSTEM_H) $(OBSTACK_H) $(HASHTAB_H) \\\n    $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    insn-config.h output.h $(REGS_H) $(EXPR_H) function.h \\\n-   gcov-io.h toplev.h $(GGC_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TARGET_H)\n+   gcov-io.h toplev.h $(GGC_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TARGET_H) \\\n+   langhooks.h\n loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h $(LOOP_H) \\\n    insn-config.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) \\\n    real.h $(PREDICT_H) $(BASIC_BLOCK_H) function.h \\"}, {"sha": "cae7ca8240d450407ca4a301ee984cacfa339e6c", "filename": "gcc/c-common.c", "status": "modified", "additions": 47, "deletions": 28, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -2575,31 +2575,43 @@ c_common_nodes_and_builtins ()\n   record_builtin_type (RID_MAX, \"unsigned char\", unsigned_char_type_node);\n \n   /* These are types that type_for_size and type_for_mode use.  */\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, intQI_type_node));\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, intHI_type_node));\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, intSI_type_node));\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, intDI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    intQI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    intHI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    intSI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    intDI_type_node));\n #if HOST_BITS_PER_WIDE_INT >= 64\n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"__int128_t\"), intTI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__int128_t\"),\n+\t\t\t\t\t    intTI_type_node));\n #endif\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intQI_type_node));\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intHI_type_node));\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intSI_type_node));\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE, unsigned_intDI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    unsigned_intQI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    unsigned_intHI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    unsigned_intSI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    unsigned_intDI_type_node));\n #if HOST_BITS_PER_WIDE_INT >= 64\n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"__uint128_t\"), unsigned_intTI_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"__uint128_t\"),\n+\t\t\t\t\t    unsigned_intTI_type_node));\n #endif\n \n   /* Create the widest literal types.  */\n   widest_integer_literal_type_node\n     = make_signed_type (HOST_BITS_PER_WIDE_INT * 2);\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE,\n-\t\t\twidest_integer_literal_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    widest_integer_literal_type_node));\n \n   widest_unsigned_literal_type_node\n     = make_unsigned_type (HOST_BITS_PER_WIDE_INT * 2);\n-  pushdecl (build_decl (TYPE_DECL, NULL_TREE,\n-\t\t\twidest_unsigned_literal_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL, NULL_TREE,\n+\t\t\t\t\t    widest_unsigned_literal_type_node));\n \n   /* `unsigned long' is the standard type for sizeof.\n      Note that stddef.h uses `unsigned long',\n@@ -2615,14 +2627,18 @@ c_common_nodes_and_builtins ()\n   record_builtin_type (RID_DOUBLE, NULL, double_type_node);\n   record_builtin_type (RID_MAX, \"long double\", long_double_type_node);\n \n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex int\"),\n-\t\t\tcomplex_integer_type_node));\n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex float\"),\n-\t\t\tcomplex_float_type_node));\n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex double\"),\n-\t\t\tcomplex_double_type_node));\n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex long double\"),\n-\t\t\tcomplex_long_double_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"complex int\"),\n+\t\t\t\t\t    complex_integer_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"complex float\"),\n+\t\t\t\t\t    complex_float_type_node));\n+  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n+\t\t\t\t\t    get_identifier (\"complex double\"),\n+\t\t\t\t\t    complex_double_type_node));\n+  (*lang_hooks.decls.pushdecl)\n+    (build_decl (TYPE_DECL, get_identifier (\"complex long double\"),\n+\t\t complex_long_double_type_node));\n \n   record_builtin_type (RID_VOID, NULL, void_type_node);\n \n@@ -2692,14 +2708,17 @@ c_common_nodes_and_builtins ()\n     = TREE_TYPE (identifier_global_value (get_identifier (PTRDIFF_TYPE)));\n   unsigned_ptrdiff_type_node = unsigned_type (ptrdiff_type_node);\n \n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),\n-\t\t\tva_list_type_node));\n+  (*lang_hooks.decls.pushdecl)\n+    (build_decl (TYPE_DECL, get_identifier (\"__builtin_va_list\"),\n+\t\t va_list_type_node));\n \n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_ptrdiff_t\"),\n-\t\t\tptrdiff_type_node));\n+  (*lang_hooks.decls.pushdecl)\n+    (build_decl (TYPE_DECL, get_identifier (\"__builtin_ptrdiff_t\"),\n+\t\t ptrdiff_type_node));\n \n-  pushdecl (build_decl (TYPE_DECL, get_identifier (\"__builtin_size_t\"),\n-\t\t\tsizetype));\n+  (*lang_hooks.decls.pushdecl)\n+    (build_decl (TYPE_DECL, get_identifier (\"__builtin_size_t\"),\n+\t\t sizetype));\n \n   if (TREE_CODE (va_list_type_node) == ARRAY_TYPE)\n     {"}, {"sha": "0e8fa954acef52039133d4815facc9ac33ee664e", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -320,6 +320,7 @@ extern int (*lang_statement_code_p)             PARAMS ((enum tree_code));\n extern void (*lang_expand_stmt)                 PARAMS ((tree));\n extern void (*lang_expand_decl_stmt)            PARAMS ((tree));\n extern void (*lang_expand_function_end)         PARAMS ((void));\n+extern tree gettags\t\t\t\tPARAMS ((void));\n \n /* Callback that determines if it's ok for a function to have no\n    noreturn attribute.  */"}, {"sha": "8ce73aa48a5ac43dc426790b01cc6e1f0197f883", "filename": "gcc/c-tree.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -166,6 +166,15 @@ extern void c_set_yydebug\t\t\tPARAMS ((int));\n extern void gen_aux_info_record                 PARAMS ((tree, int, int, int));\n \n /* in c-decl.c */\n+extern int global_bindings_p\t\t\tPARAMS ((void));\n+extern int kept_level_p\t\t\t\tPARAMS ((void));\n+extern tree getdecls\t\t\t\tPARAMS ((void));\n+extern void pushlevel\t\t\t\tPARAMS ((int));\n+extern tree poplevel\t\t\t\tPARAMS ((int,int, int));\n+extern void insert_block\t\t\tPARAMS ((tree));\n+extern void set_block\t\t\t\tPARAMS ((tree));\n+extern tree pushdecl\t\t\t\tPARAMS ((tree));\n+\n extern void c_init_decl_processing\t\tPARAMS ((void));\n extern void c_dup_lang_specific_decl\t\tPARAMS ((tree));\n extern void c_print_identifier\t\t\tPARAMS ((FILE *, tree, int));\n@@ -191,7 +200,6 @@ extern tree implicitly_declare                  PARAMS ((tree));\n extern void implicit_decl_warning               PARAMS ((tree));\n extern int  in_parm_level_p                     PARAMS ((void));\n extern void keep_next_level                     PARAMS ((void));\n-extern int  kept_level_p                        PARAMS ((void));\n extern tree lookup_name                         PARAMS ((tree));\n extern tree lookup_name_current_level\t\tPARAMS ((tree));\n extern void parmlist_tags_warning               PARAMS ((void));"}, {"sha": "6cd614cc81e81fd5e7def533f8e72051958e62c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1,3 +1,8 @@\n+2002-03-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-tree.h (pushdecl, pushlevel, poplevel, set_block,\n+\tinsert_block, getdecls, global_bindings_p): New.\n+\n 2002-03-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/4361"}, {"sha": "f213f7bf2eab98c7071878c31ba9c2e51271b383", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -3659,12 +3659,18 @@ extern void clone_function_decl                 PARAMS ((tree, int));\n extern void adjust_clone_args\t\t\tPARAMS ((tree));\n \n /* decl.c */\n-/* resume_binding_level */\n+extern int global_bindings_p\t\t\tPARAMS ((void));\n+extern int kept_level_p\t\t\t\tPARAMS ((void));\n+extern tree getdecls\t\t\t\tPARAMS ((void));\n+extern void pushlevel\t\t\t\tPARAMS ((int));\n+extern tree poplevel\t\t\t\tPARAMS ((int,int, int));\n+extern void insert_block\t\t\tPARAMS ((tree));\n+extern void set_block\t\t\t\tPARAMS ((tree));\n+extern tree pushdecl\t\t\t\tPARAMS ((tree));\n extern void cxx_init_decl_processing\t\tPARAMS ((void));\n extern int toplevel_bindings_p\t\t\tPARAMS ((void));\n extern int namespace_bindings_p\t\t\tPARAMS ((void));\n extern void keep_next_level\t\t\tPARAMS ((int));\n-extern int kept_level_p\t\t\t\tPARAMS ((void));\n extern int template_parm_scope_p\t\tPARAMS ((void));\n extern void set_class_shadows\t\t\tPARAMS ((tree));\n extern void maybe_push_cleanup_level\t\tPARAMS ((tree));"}, {"sha": "da3c8421ee4f683c0c6414d3b3dc4fc304058b0a", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -412,7 +412,7 @@ dbxout_init (input_file_name)\n      const char *input_file_name;\n {\n   char ltext_label_name[100];\n-  tree syms = getdecls ();\n+  tree syms = (*lang_hooks.decls.getdecls) ();\n \n   asmfile = asm_out_file;\n "}, {"sha": "876dfb9e3abb827e392636da9947cd12e5e89acb", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -6526,7 +6526,7 @@ expand_expr (exp, target, tmode, modifier)\n \t/* Mark the corresponding BLOCK for output in its proper place.  */\n \tif (TREE_OPERAND (exp, 2) != 0\n \t    && ! TREE_USED (TREE_OPERAND (exp, 2)))\n-\t  insert_block (TREE_OPERAND (exp, 2));\n+\t  (*lang_hooks.decls.insert_block) (TREE_OPERAND (exp, 2));\n \n \t/* If VARS have not yet been expanded, expand them now.  */\n \twhile (vars)"}, {"sha": "48888e2b8cdd8c2db04e3ba132cc8b3324a0cdf6", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1,3 +1,8 @@\n+Thu Mar 21 18:55:41 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-tree.h (pushdecl, pushlevel, poplevel, set_block,\n+\tinsert_block, getdecls, global_bindings_p): New.\n+\n Wed Mar 20 08:03:42 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c (lang_printable_name): Rename."}, {"sha": "90d231cfeca401383d95f60c2df8f11140aed8a2", "filename": "gcc/f/com.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -157,8 +157,13 @@ struct _ffecom_symbol_\n #include \"storag.h\"\n #include \"symbol.h\"\n \n-/* Structure definitions. */\n-\n+extern int global_bindings_p\t\t\tPARAMS ((void));\n+extern tree getdecls\t\t\t\tPARAMS ((void));\n+extern void pushlevel\t\t\t\tPARAMS ((int));\n+extern tree poplevel\t\t\t\tPARAMS ((int,int, int));\n+extern void insert_block\t\t\tPARAMS ((tree));\n+extern void set_block\t\t\t\tPARAMS ((tree));\n+extern tree pushdecl\t\t\t\tPARAMS ((tree));\n \n /* Global objects accessed by users of this module. */\n "}, {"sha": "39d18bb30fa3b6851791c743b90d844cf9aff164", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -52,6 +52,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"hashtab.h\"\n+#include \"langhooks.h\"\n \n static void encode\t\tPARAMS ((HOST_WIDE_INT *,\n \t\t\t\t\t unsigned HOST_WIDE_INT,\n@@ -3336,7 +3337,7 @@ fold_range_test (exp)\n \t\t      TREE_TYPE (exp), TREE_OPERAND (exp, 0),\n \t\t      TREE_OPERAND (exp, 1));\n \n-      else if (global_bindings_p () == 0\n+      else if ((*lang_hooks.decls.global_bindings_p) () == 0\n \t       && ! contains_placeholder_p (lhs))\n \t{\n \t  tree common = save_expr (lhs);\n@@ -4341,7 +4342,7 @@ fold_binary_op_with_conditional_arg (code, type, cond, arg, cond_first_p)\n      in that case.  */\n   \n   if (TREE_CODE (arg) != SAVE_EXPR && ! TREE_CONSTANT (arg)\n-      && global_bindings_p () == 0\n+      && (*lang_hooks.decls.global_bindings_p) () == 0\n       && ((TREE_CODE (arg) != VAR_DECL\n \t   && TREE_CODE (arg) != PARM_DECL)\n \t  || TREE_SIDE_EFFECTS (arg)))\n@@ -4623,7 +4624,7 @@ fold (expr)\n \t       && (TREE_CODE (arg0) != COND_EXPR\n \t\t   || count_cond (arg0, 25) + count_cond (arg1, 25) <= 25)\n \t       && (! TREE_SIDE_EFFECTS (arg0)\n-\t\t   || (global_bindings_p () == 0\n+\t\t   || ((*lang_hooks.decls.global_bindings_p) () == 0\n \t\t       && ! contains_placeholder_p (arg0))))\n \treturn \n \t  fold_binary_op_with_conditional_arg (code, type, arg1, arg0,\n@@ -4637,7 +4638,7 @@ fold (expr)\n \t       && (TREE_CODE (arg1) != COND_EXPR\n \t\t   || count_cond (arg0, 25) + count_cond (arg1, 25) <= 25)\n \t       && (! TREE_SIDE_EFFECTS (arg1)\n-\t\t   || (global_bindings_p () == 0\n+\t\t   || ((*lang_hooks.decls.global_bindings_p) () == 0\n \t\t       && ! contains_placeholder_p (arg1))))\n \treturn \n \t  fold_binary_op_with_conditional_arg (code, type, arg0, arg1,\n@@ -5249,7 +5250,8 @@ fold (expr)\n \t  if (real_onep (arg1))\n \t    return non_lvalue (convert (type, arg0));\n \t  /* x*2 is x+x */\n-\t  if (! wins && real_twop (arg1) && global_bindings_p () == 0\n+\t  if (! wins && real_twop (arg1)\n+\t      && (*lang_hooks.decls.global_bindings_p) () == 0\n \t      && ! contains_placeholder_p (arg0))\n \t    {\n \t      tree arg = save_expr (arg0);"}, {"sha": "96366e35a12bf7f6da8128f5c44e2f546db92bd6", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1240,7 +1240,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n        this block to the list of blocks at this binding level.  We\n        can't do it the way it's done for function-at-a-time mode the\n        superblocks have not been created yet.  */\n-    insert_block (block);\n+    (*lang_hooks.decls.insert_block) (block);\n   else\n     {\n       BLOCK_CHAIN (block)"}, {"sha": "7afd69d28f1a3cd71cbfb74770ec3fc6de5fd775", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1,3 +1,8 @@\n+2002-03-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-tree.h (pushdecl, pushlevel, poplevel, set_block,\n+\tinsert_block, getdecls, kept_level_p, global_bindings_p): New.\n+\n 2002-03-20  Nic Ferrier  <nferrier@tapsellferrier.co.uk>\n \n        \t* gcj.texi: @code{gcj} becomes @command{gcj}. "}, {"sha": "5fde938b6636fb7f8dc67b20fc1e97592e26f3e9", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1072,6 +1072,14 @@ extern tree ident_subst PARAMS ((const char*, int,\n \t\t\t\tconst char*, int, int, const char*));\n extern tree identifier_subst PARAMS ((const tree,\n \t\t\t\t     const char *, int, int, const char *));\n+extern int global_bindings_p\t\t\tPARAMS ((void));\n+extern int kept_level_p\t\t\t\tPARAMS ((void));\n+extern tree getdecls\t\t\t\tPARAMS ((void));\n+extern void pushlevel\t\t\t\tPARAMS ((int));\n+extern tree poplevel\t\t\t\tPARAMS ((int,int, int));\n+extern void insert_block\t\t\tPARAMS ((tree));\n+extern void set_block\t\t\t\tPARAMS ((tree));\n+extern tree pushdecl\t\t\t\tPARAMS ((tree));\n extern void java_init_decl_processing PARAMS ((void));\n extern void java_dup_lang_specific_decl PARAMS ((tree));\n extern tree build_java_signature PARAMS ((tree));"}, {"sha": "f70963e9ebf6e6d91438e58cc40657c526df1b57", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1,5 +1,5 @@\n /* Default macros to initialize the lang_hooks data structure.\n-   Copyright 2001 Free Software Foundation, Inc.\n+   Copyright 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n This file is part of GNU CC.\n@@ -137,7 +137,26 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n #define LANG_HOOKS_TREE_DUMP_INITIALIZER { \\\n   LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN, \\\n   LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN \\\n-} \\\n+}\n+\n+/* Declaration hooks.  */\n+#define LANG_HOOKS_PUSHLEVEL\tpushlevel\n+#define LANG_HOOKS_POPLEVEL\tpoplevel\n+#define LANG_HOOKS_GLOBAL_BINDINGS_P global_bindings_p\n+#define LANG_HOOKS_INSERT_BLOCK\tinsert_block\n+#define LANG_HOOKS_SET_BLOCK\tset_block\n+#define LANG_HOOKS_PUSHDECL\tpushdecl\n+#define LANG_HOOKS_GETDECLS\tgetdecls\n+\n+#define LANG_HOOKS_DECLS { \\\n+  LANG_HOOKS_PUSHLEVEL, \\\n+  LANG_HOOKS_POPLEVEL, \\\n+  LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n+  LANG_HOOKS_INSERT_BLOCK, \\\n+  LANG_HOOKS_SET_BLOCK, \\\n+  LANG_HOOKS_PUSHDECL, \\\n+  LANG_HOOKS_GETDECLS \\\n+}\n \n /* The whole thing.  The structure is defined in langhooks.h.  */\n #define LANG_HOOKS_INITIALIZER { \\\n@@ -165,7 +184,8 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_DECL_PRINTABLE_NAME, \\\n   LANG_HOOKS_SET_YYDEBUG, \\\n   LANG_HOOKS_TREE_INLINING_INITIALIZER, \\\n-  LANG_HOOKS_TREE_DUMP_INITIALIZER \\\n+  LANG_HOOKS_TREE_DUMP_INITIALIZER, \\\n+  LANG_HOOKS_DECLS \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "4416ba937a5bdc1ba5b989e35202d91a4d839c82", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1,5 +1,5 @@\n /* Default language-specific hooks.\n-   Copyright 2001 Free Software Foundation, Inc.\n+   Copyright 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n This file is part of GNU CC.\n@@ -110,7 +110,7 @@ lhd_set_yydebug (value)\n void\n lhd_clear_binding_stack ()\n {\n-  while (! global_bindings_p ())\n+  while (! (*lang_hooks.decls.global_bindings_p) ())\n     poplevel (0, 0, 0);\n }\n "}, {"sha": "d2a3e482ad8a1caee2164416a40b550bf120eaec", "filename": "gcc/langhooks.h", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -1,5 +1,5 @@\n /* The lang_hooks data structure.\n-   Copyright 2001 Free Software Foundation, Inc.\n+   Copyright 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -65,6 +65,43 @@ struct lang_hooks_for_tree_dump\n   int (*type_quals) PARAMS ((tree));\n };\n \n+/* Language hooks related to decls and the symbol table.  */\n+\n+struct lang_hooks_for_decls\n+{\n+  /* Enter a new lexical scope.  Argument is always zero when called\n+     from outside the front end.  */\n+  void (*pushlevel) PARAMS ((int));\n+\n+  /* Exit a lexical scope and return a BINDING for that scope.\n+     Takes three arguments:\n+     KEEP -- nonzero if there were declarations in this scope.\n+     REVERSE -- reverse the order of decls before returning them.\n+     FUNCTIONBODY -- nonzero if this level is the body of a function.  */\n+  tree (*poplevel) PARAMS ((int, int, int));\n+\n+  /* Returns non-zero if we are in the global binding level.  Ada\n+     returns -1 for an undocumented reason used in stor-layout.c.  */\n+  int (*global_bindings_p) PARAMS ((void));\n+\n+  /* Insert BLOCK at the end of the list of subblocks of the\n+     current binding level.  This is used when a BIND_EXPR is expanded,\n+     to handle the BLOCK node inside the BIND_EXPR.  */\n+  void (*insert_block) PARAMS ((tree));\n+\n+  /* Set the BLOCK node for the current scope level.  */\n+  void (*set_block) PARAMS ((tree));\n+\n+  /* Function to add a decl to the current scope level.  Takes one\n+     argument, a decl to add.  Returns that decl, or, if the same\n+     symbol is already declared, may return a different decl for that\n+     name.  */\n+  tree (*pushdecl) PARAMS ((tree));\n+\n+  /* Returns the chain of decls so far in the current scope level.  */\n+  tree (*getdecls) PARAMS ((void));\n+};\n+\n /* Language-specific hooks.  See langhooks-def.h for defaults.  */\n \n struct lang_hooks\n@@ -177,6 +214,8 @@ struct lang_hooks\n   \n   struct lang_hooks_for_tree_dump tree_dump;\n \n+  struct lang_hooks_for_decls decls;\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "881604e1e27371bd0aefd5d12a46bf0eebaebfae", "filename": "gcc/profile.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -49,6 +49,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"basic-block.h\"\n #include \"gcov-io.h\"\n #include \"target.h\"\n+#include \"langhooks.h\"\n \n /* Additional information about the edges we need.  */\n struct edge_info\n@@ -1153,14 +1154,14 @@ output_func_start_profiler ()\n \n   DECL_RESULT (fndecl) = build_decl (RESULT_DECL, NULL_TREE, void_type_node);\n \n-  fndecl = pushdecl (fndecl);\n+  fndecl = (*lang_hooks.decls.pushdecl) (fndecl);\n   rest_of_decl_compilation (fndecl, 0, 1, 0);\n   announce_function (fndecl);\n   current_function_decl = fndecl;\n   DECL_INITIAL (fndecl) = error_mark_node;\n   make_decl_rtl (fndecl, NULL);\n   init_function_start (fndecl, input_filename, lineno);\n-  pushlevel (0);\n+  (*lang_hooks.decls.pushlevel) (0);\n   expand_function_start (fndecl, 0);\n \n   /* Actually generate the code to call __bb_init_func.  */\n@@ -1171,7 +1172,7 @@ output_func_start_profiler ()\n \t\t     mode, 1, table_address, Pmode);\n \n   expand_function_end (input_filename, lineno, 0);\n-  poplevel (1, 0, 1);\n+  (*lang_hooks.decls.poplevel) (1, 0, 1);\n \n   /* Since fndecl isn't in the list of globals, it would never be emitted\n      when it's considered to be 'safe' for inlining, so turn off"}, {"sha": "bb21ae7a3b38e9c6b8f8af6baedf153947f2ee5c", "filename": "gcc/sdbout.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -58,6 +58,7 @@ AT&T C compiler.  From the example below I would conclude the following:\n #include \"tm_p.h\"\n #include \"gsyms.h\"\n #include \"debug.h\"\n+#include \"langhooks.h\"\n \n /* 1 if PARM is passed to this function in memory.  */\n \n@@ -1516,7 +1517,7 @@ static void\n sdbout_finish (main_filename)\n      const char *main_filename ATTRIBUTE_UNUSED;\n {\n-  tree decl = getdecls ();\n+  tree decl = (*lang_hooks.decls.getdecls) ();\n   unsigned int len = list_length (decl);\n   tree *vec = (tree *) xmalloc (sizeof (tree) * len);\n   unsigned int i;\n@@ -1754,7 +1755,7 @@ sdbout_init (input_file_name)\n \n #ifdef RMS_QUICK_HACK_1\n   tree t;\n-  for (t = getdecls (); t; t = TREE_CHAIN (t))\n+  for (t = (*lang_hooks.decls.getdecls) (); t; t = TREE_CHAIN (t))\n     if (DECL_NAME (t) && IDENTIFIER_POINTER (DECL_NAME (t)) != 0\n \t&& !strcmp (IDENTIFIER_POINTER (DECL_NAME (t)), \"__vtbl_ptr_type\"))\n       sdbout_symbol (t, 0);"}, {"sha": "559795df09254b9e1b80bb2e01f0af50e53de29c", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -53,6 +53,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\"\n+#include \"langhooks.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -1054,7 +1055,7 @@ expand_fixup (tree_label, rtl_label, last_insn)\n \tTREE_USED (block) = 1;\n \n \tif (!cfun->x_whole_function_mode_p)\n-\t  insert_block (block);\n+\t  (*lang_hooks.decls.insert_block) (block);\n \telse\n \t  {\n \t    BLOCK_CHAIN (block)\n@@ -1175,8 +1176,8 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t     logically be inserting the fixup code.  We do this for the\n \t     sake of getting the debugging information right.  */\n \n-\t  pushlevel (0);\n-\t  set_block (f->context);\n+\t  (*lang_hooks.decls.pushlevel) (0);\n+\t  (*lang_hooks.decls.set_block) (f->context);\n \n \t  /* Expand the cleanups for blocks this jump exits.  */\n \t  if (f->cleanup_list_list)\n@@ -1215,7 +1216,7 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t     destructed are still \"in scope\".  */\n \n \t  cleanup_insns = get_insns ();\n-\t  poplevel (1, 0, 0);\n+\t  (*lang_hooks.decls.poplevel) (1, 0, 0);\n \n \t  end_sequence ();\n \t  emit_insns_after (cleanup_insns, f->before_jump);\n@@ -1249,12 +1250,12 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t  if (TREE_CHAIN (lists) == thisblock->data.block.outer_cleanups)\n \t    {\n \t      start_sequence ();\n-\t      pushlevel (0);\n-\t      set_block (f->context);\n+\t      (*lang_hooks.decls.pushlevel) (0);\n+\t      (*lang_hooks.decls.set_block) (f->context);\n \t      expand_cleanups (TREE_VALUE (lists), NULL_TREE, 1, 1);\n \t      do_pending_stack_adjust ();\n \t      cleanup_insns = get_insns ();\n-\t      poplevel (1, 0, 0);\n+\t      (*lang_hooks.decls.poplevel) (1, 0, 0);\n \t      end_sequence ();\n \t      if (cleanup_insns != 0)\n \t\tf->before_jump"}, {"sha": "829500007beb29ebf05af25ac878633dd80e962f", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"target.h\"\n+#include \"langhooks.h\"\n \n /* Set to one when set_sizetype has been called.  */\n static int sizetype_set;\n@@ -151,7 +152,8 @@ variable_size (size)\n      just return SIZE unchanged.  Likewise for self-referential sizes and\n      constant sizes.  */\n   if (TREE_CONSTANT (size)\n-      || global_bindings_p () < 0 || contains_placeholder_p (size))\n+      || (*lang_hooks.decls.global_bindings_p) () < 0\n+      || contains_placeholder_p (size))\n     return size;\n \n   size = save_expr (size);\n@@ -167,7 +169,7 @@ variable_size (size)\n   if (TREE_CODE (size) == SAVE_EXPR)\n     SAVE_EXPR_PERSISTENT_P (size) = 1;\n \n-  if (global_bindings_p ())\n+  if ((*lang_hooks.decls.global_bindings_p) ())\n     {\n       if (TREE_CONSTANT (size))\n \terror (\"type size can't be explicitly evaluated\");"}, {"sha": "0f70fe13dec314c5cdaa2580577bcc59678e1d9e", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -2098,7 +2098,7 @@ compile_file ()\n   if (flag_syntax_only)\n     return;\n \n-  globals = getdecls ();\n+  globals = (*lang_hooks.decls.getdecls) ();\n \n   /* Really define vars that have had only a tentative definition.\n      Really output inline functions that must actually be callable"}, {"sha": "46ea052fb820c09f546e2c8df1afcbbf74b0b735", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -257,7 +257,7 @@ remap_block (scope_stmt, decls, id)\n \t/* We're building a clone; DECL_INITIAL is still\n \t   error_mark_node, and current_binding_level is the parm\n \t   binding level.  */\n-\tinsert_block (new_block);\n+\t(*lang_hooks.decls.insert_block) (new_block);\n       else\n \t{\n \t  /* Attach this new block after the DECL_INITIAL block for the"}, {"sha": "04e12763efef1c7aad98fc3623763161f962eb22", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43577e6bd7bb992e87d22b6ac5e13787f8a96af3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=43577e6bd7bb992e87d22b6ac5e13787f8a96af3", "patch": "@@ -2847,30 +2847,6 @@ extern tree invert_truthvalue\tPARAMS ((tree));\n extern tree (*lang_type_promotes_to)\tPARAMS ((tree));\n extern tree fold_builtin\t\tPARAMS ((tree));\n \f\n-/* The language front-end must define these functions.  */\n-\n-/* Functions for processing symbol declarations.  */\n-/* Function to enter a new lexical scope.\n-   Takes one argument: always zero when called from outside the front end.  */\n-extern void pushlevel\t\t\t\tPARAMS ((int));\n-/* Function to exit a lexical scope.  It returns a BINDING for that scope.\n-   Takes three arguments:\n-     KEEP -- nonzero if there were declarations in this scope.\n-     REVERSE -- reverse the order of decls before returning them.\n-     FUNCTIONBODY -- nonzero if this level is the body of a function.  */\n-extern tree poplevel\t\t\t\tPARAMS ((int, int, int));\n-/* Set the BLOCK node for the current scope level.  */\n-extern void set_block\t\t\t\tPARAMS ((tree));\n-/* Function to add a decl to the current scope level.\n-   Takes one argument, a decl to add.\n-   Returns that decl, or, if the same symbol is already declared, may\n-   return a different decl for that name.  */\n-extern tree pushdecl\t\t\t\tPARAMS ((tree));\n-/* Function to return the chain of decls so far in the current scope level.  */\n-extern tree getdecls\t\t\t\tPARAMS ((void));\n-/* Function to return the chain of structure tags in the current scope level.  */\n-extern tree gettags\t\t\t\tPARAMS ((void));\n-\n extern tree build_range_type PARAMS ((tree, tree, tree));\n \n /* In alias.c */\n@@ -3024,8 +3000,6 @@ extern int lang_attribute_common;\n extern int mark_addressable\t\tPARAMS ((tree));\n extern void incomplete_type_error\tPARAMS ((tree, tree));\n extern tree truthvalue_conversion\tPARAMS ((tree));\n-extern int global_bindings_p\t\tPARAMS ((void));\n-extern void insert_block\t\tPARAMS ((tree));\n \n /* In integrate.c */\n extern void save_for_inline\t\tPARAMS ((tree));"}]}