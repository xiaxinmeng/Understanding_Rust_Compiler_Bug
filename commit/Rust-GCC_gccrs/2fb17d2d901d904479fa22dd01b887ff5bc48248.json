{"sha": "2fb17d2d901d904479fa22dd01b887ff5bc48248", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiMTdkMmQ5MDFkOTA0NDc5ZmEyMmRkMDFiODg3ZmY1YmM0ODI0OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-30T15:07:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-30T15:07:35Z"}, "message": "Avoid undefined shifts in ceil2 operations\n\nFor values where the result cannot be represented the shift width would\nbe equal to the width of the type, which is undefined. Perform two\nwell-defined shifts instead of one possible undefined shift.\n\n\t* include/bits/hashtable_policy.h (__clp2): Fix calculation for LLP64\n\ttargets where sizeof(size_t) > sizeof(long). Avoid undefined shifts\n\tof the number of bits in the type.\n\t* include/std/bit (__ceil2): Avoid undefined shifts.\n\t* testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Test values with\n\tthe most signifiant bit set.\n\nFrom-SVN: r263986", "tree": {"sha": "111035d748bf025dcc5d4a417edde0802112332d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/111035d748bf025dcc5d4a417edde0802112332d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fb17d2d901d904479fa22dd01b887ff5bc48248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb17d2d901d904479fa22dd01b887ff5bc48248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb17d2d901d904479fa22dd01b887ff5bc48248", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb17d2d901d904479fa22dd01b887ff5bc48248/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ebbdb6ca3f69cdac97aeba48a7f00ea40337cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ebbdb6ca3f69cdac97aeba48a7f00ea40337cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ebbdb6ca3f69cdac97aeba48a7f00ea40337cd5"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "98288521abd41eaa7b06af546bb058af039375ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2fb17d2d901d904479fa22dd01b887ff5bc48248", "patch": "@@ -1,5 +1,12 @@\n 2018-08-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/hashtable_policy.h (__clp2): Fix calculation for LLP64\n+\ttargets where sizeof(size_t) > sizeof(long). Avoid undefined shifts\n+\tof the number of bits in the type.\n+\t* include/std/bit (__ceil2): Avoid undefined shifts.\n+\t* testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Test values with\n+\tthe most signifiant bit set.\n+\n \t* config/abi/pre/gnu.ver: Add missing exports for mingw.\n \n \t* include/ext/pointer.h (_Pointer_adapter): Define operators for"}, {"sha": "66fbfbe5f21746566abd6f608976a1f9bfa8056e", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=2fb17d2d901d904479fa22dd01b887ff5bc48248", "patch": "@@ -511,8 +511,11 @@ namespace __detail\n     // Equivalent to return __n ? std::ceil2(__n) : 0;\n     if (__n < 2)\n       return __n;\n-    return 1ul << (numeric_limits<unsigned long>::digits\n-\t\t    - __builtin_clzl(__n - 1ul));\n+    const unsigned __lz = sizeof(size_t) > sizeof(long)\n+      ? __builtin_clzll(__n - 1ull)\n+      : __builtin_clzl(__n - 1ul);\n+    // Doing two shifts avoids undefined behaviour when __lz == 0.\n+    return (size_t(1) << (numeric_limits<size_t>::digits - __lz - 1)) << 1;\n   }\n \n   /// Rehash policy providing power of 2 bucket numbers. Avoids modulo"}, {"sha": "bc2ade75b3586dd819f2328806f93af5a1cee2bf", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=2fb17d2d901d904479fa22dd01b887ff5bc48248", "patch": "@@ -195,9 +195,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __ceil2(_Tp __x) noexcept\n     {\n       constexpr auto _Nd = numeric_limits<_Tp>::digits;\n-      if (__x == 0)\n+      if (__x == 0 || __x == 1)\n         return 1;\n-      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x - 1u)));\n+      const unsigned __n = _Nd - std::__countl_zero((_Tp)(__x - 1u));\n+      const _Tp __y_2 = (_Tp)1u << (__n - 1u);\n+      return __y_2 << 1u;\n     }\n \n   template<typename _Tp>"}, {"sha": "e41f82c8bb8314df816aa33ff9f0baa4085821a8", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/ceil2.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fb17d2d901d904479fa22dd01b887ff5bc48248/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc?ref=2fb17d2d901d904479fa22dd01b887ff5bc48248", "patch": "@@ -55,6 +55,14 @@ test(UInt x)\n     static_assert( std::ceil2(UInt(3) << 64) == (UInt(4) << 64) );\n   }\n \n+  constexpr UInt msb = UInt(1) << (std::numeric_limits<UInt>::digits - 1);\n+  static_assert( std::ceil2( msb ) == msb );\n+  // Larger values cannot be represented so the return value is unspecified,\n+  // but must still be valid in constant expressions, i.e. not undefined.\n+  static_assert( std::ceil2( UInt(msb + 1) ) != 77 );\n+  static_assert( std::ceil2( UInt(msb + 2) ) != 77 );\n+  static_assert( std::ceil2( UInt(msb + 77) ) != 77 );\n+\n   return true;\n }\n "}]}