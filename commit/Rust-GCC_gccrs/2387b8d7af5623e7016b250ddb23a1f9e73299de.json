{"sha": "2387b8d7af5623e7016b250ddb23a1f9e73299de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4N2I4ZDdhZjU2MjNlNzAxNmIyNTBkZGIyM2ExZjllNzMyOTlkZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-02-08T07:53:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-02-08T07:53:09Z"}, "message": "pa.md (call, call_value): Emit save of the PIC register with \"emit_insn\" before emitting the call insn itself.\n\n\t* pa.md (call, call_value): Emit save of the PIC register\n\twith \"emit_insn\" before emitting the call insn itself.\n\nFrom-SVN: r8892", "tree": {"sha": "0aeaa0f32b0fba87681ee440da974f3943474f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0aeaa0f32b0fba87681ee440da974f3943474f27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2387b8d7af5623e7016b250ddb23a1f9e73299de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2387b8d7af5623e7016b250ddb23a1f9e73299de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2387b8d7af5623e7016b250ddb23a1f9e73299de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2387b8d7af5623e7016b250ddb23a1f9e73299de/comments", "author": null, "committer": null, "parents": [{"sha": "e553bfb99a96003ab5e2ef7fff56087518302436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e553bfb99a96003ab5e2ef7fff56087518302436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e553bfb99a96003ab5e2ef7fff56087518302436"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "b7ae3ad40f1b7fb28e923164021f2433e1c8e08c", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2387b8d7af5623e7016b250ddb23a1f9e73299de/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2387b8d7af5623e7016b250ddb23a1f9e73299de/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=2387b8d7af5623e7016b250ddb23a1f9e73299de", "patch": "@@ -3480,6 +3480,24 @@\n   else\n     op = XEXP (operands[0], 0);\n \n+  if (flag_pic)\n+    {\n+      if (!hppa_save_pic_table_rtx)\n+\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n+\n+      /* We must save and restore the PIC register around every call\n+\t since we don't have flow information to determine if this save\n+\t is redundant with a previous save.  The old code assumed once\n+\t the register was saved it never needs to be saved again, but\n+\t the save could have been on a path which doesn't always\n+\t execute; a call site physically later in the program would\n+\t then attempt a restore from an uninitialized register!  */\n+      emit_insn (gen_rtx (SET, VOIDmode,\n+\t\t\t  hppa_save_pic_table_rtx,\n+\t\t\t  pic_offset_table_rtx));\n+\n+    }\n+\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -3495,21 +3513,6 @@\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n \n-      if (!hppa_save_pic_table_rtx)\n-\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n-\n-      /* We must save and restore the PIC register around every call\n-\t since we don't have flow information to determine if this save\n-\t is redundant with a previous save.  The old code assumed once\n-\t the register was saved it never needs to be saved again, but\n-\t the save could have been on a path which doesn't always\n-\t execute; a call site physically later in the program would\n-\t then attempt a restore from an uninitialized register!  */\n-      emit_insn_before (gen_rtx (SET, VOIDmode,\n-\t\t\t\t hppa_save_pic_table_rtx,\n-\t\t\t\t pic_offset_table_rtx),\n-\t\t\tcall_insn);\n-\n       emit_insn (gen_rtx (SET, VOIDmode, pic_offset_table_rtx,\n \t\t\t  hppa_save_pic_table_rtx));\n     }\n@@ -3579,6 +3582,24 @@\n   else\n     op = XEXP (operands[1], 0);\n \n+  if (flag_pic)\n+    {\n+      if (!hppa_save_pic_table_rtx)\n+\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n+\n+      /* We must save and restore the PIC register around every call\n+\t since we don't have flow information to determine if this save\n+\t is redundant with a previous save.  The old code assumed once\n+\t the register was saved it never needs to be saved again, but\n+\t the save could have been on a path which doesn't always\n+\t execute; a call site physically later in the program would\n+\t then attempt a restore from an uninitialized register!  */\n+      emit_insn (gen_rtx (SET, VOIDmode,\n+\t\t\t  hppa_save_pic_table_rtx,\n+\t\t\t  pic_offset_table_rtx));\n+\n+    }\n+\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -3597,21 +3618,6 @@\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n \n-      if (!hppa_save_pic_table_rtx)\n-\thppa_save_pic_table_rtx = gen_reg_rtx (Pmode);\n-\n-      /* We must save and restore the PIC register around every call\n-\t since we don't have flow information to determine if this save\n-\t is redundant with a previous save.  The old code assumed once\n-\t the register was saved it never needs to be saved again, but\n-\t the save could have been on a path which doesn't always\n-\t execute; a call site physically later in the program would\n-\t then attempt a restore from an uninitialized register!  */\n-      emit_insn_before (gen_rtx (SET, VOIDmode,\n-\t\t\t\t hppa_save_pic_table_rtx,\n-\t\t\t\t pic_offset_table_rtx),\n-\t\t\tcall_insn);\n-\n       emit_insn (gen_rtx (SET, VOIDmode, pic_offset_table_rtx,\n \t\t\t  hppa_save_pic_table_rtx));\n     }"}]}