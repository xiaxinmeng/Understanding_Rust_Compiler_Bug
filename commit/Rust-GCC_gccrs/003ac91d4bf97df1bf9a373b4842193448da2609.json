{"sha": "003ac91d4bf97df1bf9a373b4842193448da2609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzYWM5MWQ0YmY5N2RmMWJmOWEzNzNiNDg0MjE5MzQ0OGRhMjYwOQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-06-27T00:43:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-27T00:43:42Z"}, "message": "choose-temp.c (choose_temp_base): Remove MPW bits.\n\n        * choose-temp.c (choose_temp_base): Remove MPW bits.  Use mkstemp\n        instead of mktemp.\n        * gcc.c (MKTEMP_EACH_FILE): Define.\n        (main): No need to call choose_temp_base if we are going to\n        use choose_temp_base to create each file later.\n        * mkstemp.c: New file.  Adapted from glibc.\n        * Makefile.in (xgcc, colect2, protoize, unprotoize): Link in mkstemp.o\n        (mkstemp.o): Add dependencies.\n\nFrom-SVN: r20746", "tree": {"sha": "aecc61329158ea2ca9869040ffcb39c5244db6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aecc61329158ea2ca9869040ffcb39c5244db6cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/003ac91d4bf97df1bf9a373b4842193448da2609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003ac91d4bf97df1bf9a373b4842193448da2609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/003ac91d4bf97df1bf9a373b4842193448da2609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003ac91d4bf97df1bf9a373b4842193448da2609/comments", "author": null, "committer": null, "parents": [{"sha": "463b558b823b2894e37e274e21650b5947e736a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463b558b823b2894e37e274e21650b5947e736a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463b558b823b2894e37e274e21650b5947e736a3"}], "stats": {"total": 168, "additions": 148, "deletions": 20}, "files": [{"sha": "dc0dcb542e64eb6e17194a821137acf97957f950", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=003ac91d4bf97df1bf9a373b4842193448da2609", "patch": "@@ -1,3 +1,18 @@\n+Sat Jun 27 01:35:14 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* choose-temp.c (choose_temp_base): Remove MPW bits.  Use mkstemp\n+\tinstead of mktemp.\n+\t* gcc.c (MKTEMP_EACH_FILE): Define.\n+\t(main): No need to call choose_temp_base if we are going to\n+\tuse choose_temp_base to create each file later.\n+\t* mkstemp.c: New file.  Adapted from glibc.\n+\t* Makefile.in (xgcc, colect2, protoize, unprotoize): Link in mkstemp.o\n+\t(mkstemp.o): Add dependencies.\n+\n+        * configure.in (gettimeofday): Check for its existance.\n+        * config.in (HAVE_GETTIMEOFDAY): Define.\n+        * configure: Rebuilt.\n+\n 1998-06-26  Michael Meissner  <meissner@cygnus.com>\n \n \t* rs6000.md (ne 0, non power case): Add missing & constraint."}, {"sha": "c18ff8932efa3496de58fab07c0624ae53b6ea5c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=003ac91d4bf97df1bf9a373b4842193448da2609", "patch": "@@ -840,9 +840,9 @@ stamp-objlist: $(OBJS)\n # to avoid confusion if the current directory is in the path\n # and CC is `gcc'.  It is renamed to `gcc' when it is installed.\n xgcc$(exeext): gcc.o version.o choose-temp.o pexecute.o prefix.o version.o \\\n-   $(LIBDEPS) $(EXTRA_GCC_OBJS)\n+   mkstemp.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o prefix.o version.o \\\n-\t  choose-temp.o pexecute.o $(EXTRA_GCC_OBJS) $(LIBS)\n+\t  choose-temp.o pexecute.o mkstemp.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Dump a specs file to make -B./ read these specs over installed ones.\n specs: xgcc$(exeext)\n@@ -1282,11 +1282,11 @@ c-iterate.o: c-iterate.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-tree.h \\\n     flags.h toplev.h expr.h insn-codes.h\n \n collect2$(exeext): collect2.o tlink.o hash.o cplus-dem.o underscore.o \\\n-\tversion.o choose-temp.o $(LIBDEPS)\n+\tversion.o choose-temp.o mkstemp.o $(LIBDEPS)\n # Don't try modifying collect2 (aka ld) in place--it might be linking this.\n \t-rm -f collect2$(exeext)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ collect2.o tlink.o hash.o \\\n-\t  cplus-dem.o underscore.o version.o choose-temp.o $(LIBS)\n+\t  cplus-dem.o underscore.o version.o choose-temp.o mkstemp.o $(LIBS)\n \n collect2.o : collect2.c $(CONFIG_H) system.h gansidecl.h gstab.h obstack.h \\\n \t$(DEMANGLE_H)\n@@ -1350,6 +1350,7 @@ dumpvers: dumpvers.c\n version.o: version.c\n obstack.o: obstack.c $(CONFIG_H)\n choose-temp.o: choose-temp.c $(CONFIG_H) gansidecl.h system.h\n+mkstemp.o: mkstemp.c $(CONFIG_H) gansidecl.h system.h\n pexecute.o: pexecute.c $(CONFIG_H) system.h gansidecl.h\n prefix.o: prefix.c $(CONFIG_H) system.h gansidecl.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n@@ -1862,16 +1863,16 @@ cppalloc.o: cppalloc.c $(CONFIG_H) cpplib.h system.h gansidecl.h\n proto: config.status protoize$(exeext) unprotoize$(exeext) SYSCALLS.c.X\n \n protoize$(exeext): protoize.o getopt.o getopt1.o getpwd.o version.o \\\n-    pexecute.o choose-temp.o $(LIBDEPS)\n+    pexecute.o choose-temp.o mkstemp.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t  protoize.o getopt.o getopt1.o getpwd.o version.o \\\n-\t  pexecute.o choose-temp.o $(LIBS)\n+\t  pexecute.o choose-temp.o mkstemp.o $(LIBS)\n \n unprotoize$(exeext): unprotoize.o getopt.o getopt1.o getpwd.o version.o \\\n-    pexecute.o choose-temp.o $(LIBDEPS)\n+    pexecute.o choose-temp.o mkstemp.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t  unprotoize.o getopt.o getopt1.o getpwd.o version.o \\\n-\t  pexecute.o choose-temp.o $(LIBS)\n+\t  pexecute.o choose-temp.o mkstemp.o $(LIBS)\n \n protoize.o: protoize.c getopt.h $(CONFIG_H) system.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "1cc933c2574fb8347fdafc64466e936767317573", "filename": "gcc/choose-temp.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchoose-temp.c?ref=003ac91d4bf97df1bf9a373b4842193448da2609", "patch": "@@ -110,10 +110,10 @@ choose_temp_base ()\n   char *base = 0;\n   char *temp_filename;\n   int len;\n+  int fd;\n   static char tmp[] = { DIR_SEPARATOR, 't', 'm', 'p', 0 };\n   static char usrtmp[] = { DIR_SEPARATOR, 'u', 's', 'r', DIR_SEPARATOR, 't', 'm', 'p', 0 };\n \n-#ifndef MPW\n   base = try (getenv (\"TMPDIR\"), base);\n   base = try (getenv (\"TMP\"), base);\n   base = try (getenv (\"TEMP\"), base);\n@@ -130,28 +130,24 @@ choose_temp_base ()\n   if (base == 0)\n     base = \".\";\n \n-#else /* MPW */\n-  base = \":\";\n-#endif\n-\n   len = strlen (base);\n   temp_filename = xmalloc (len + 1 /*DIR_SEPARATOR*/\n \t\t\t   + strlen (TEMP_FILE) + 1);\n   strcpy (temp_filename, base);\n \n-#ifndef MPW\n   if (len != 0\n       && temp_filename[len-1] != '/'\n       && temp_filename[len-1] != DIR_SEPARATOR)\n     temp_filename[len++] = DIR_SEPARATOR;\n-#else /* MPW */\n-  if (temp_filename[len-1] != ':')\n-    temp_filename[len++] = ':';\n-#endif /* MPW */\n   strcpy (temp_filename + len, TEMP_FILE);\n \n-  mktemp (temp_filename);\n-  if (strlen (temp_filename) == 0)\n+  fd = mkstemp (temp_filename);\n+  /* If mkstemp failed, then something bad is happening.  Maybe we should\n+     issue a message about a possible security attack in progress?  */\n+  if (fd == -1)\n+    abort ();\n+  /* Similarly if we can not close the file.  */\n+  if (close (fd))\n     abort ();\n   return temp_filename;\n }"}, {"sha": "5a752a374762d6fcd9075fcc37a389107b35ff7c", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=003ac91d4bf97df1bf9a373b4842193448da2609", "patch": "@@ -1271,6 +1271,9 @@ static int argbuf_length;\n \n static int argbuf_index;\n \n+/* We want this on by default all the time now.  */\n+#define MKTEMP_EACH_FILE\n+\n #ifdef MKTEMP_EACH_FILE\n /* This is the list of suffixes and codes (%g/%u/%U) and the associated\n    temp file.  */\n@@ -4547,8 +4550,10 @@ main (argc, argv)\n \n   /* Choose directory for temp files.  */\n \n+#ifndef MKTEMP_EACH_FILE\n   temp_filename = choose_temp_base ();\n   temp_filename_length = strlen (temp_filename);\n+#endif\n \n   /* Make a table of what switches there are (switches, n_switches).\n      Make a table of specified input files (infiles, n_infiles)."}, {"sha": "1ef90a5c7084cda35ddfa8e05ff02c4866d6ef94", "filename": "gcc/mkstemp.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2Fmkstemp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/003ac91d4bf97df1bf9a373b4842193448da2609/gcc%2Fmkstemp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkstemp.c?ref=003ac91d4bf97df1bf9a373b4842193448da2609", "patch": "@@ -0,0 +1,111 @@\n+/* Copyright (C) 1991, 1992, 1996, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Library General Public License as\n+   published by the Free Software Foundation; either version 2 of the\n+   License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Library General Public\n+   License along with the GNU C Library; see the file COPYING.LIB.  If not,\n+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+#ifndef IN_GCC\n+#include <stdlib.h>\n+#include <string.h>\n+#include <errno.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#include <sys/time.h>\n+#else\n+#include \"config.h\"\n+#include \"system.h\"\n+\n+/* We need to provide a type for uint64_t.  */\n+#ifdef __GNUC__\n+typedef unsigned long long uint64_t;\n+#else\n+typedef unsigned long uint64_t;\n+#endif\n+\n+#ifndef TMP_MAX\n+#define TMP_MAX 16384\n+#endif\n+#endif\n+\n+/* Generate a unique temporary file name from TEMPLATE.\n+   The last six characters of TEMPLATE must be \"XXXXXX\";\n+   they are replaced with a string that makes the filename unique.\n+   Returns a file descriptor open on the file for reading and writing.  */\n+int\n+mkstemp (template)\n+     char *template;\n+{\n+  static const char letters[62]\n+    = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+  static uint64_t value;\n+#ifdef HAVE_GETTIMEOFDAY\n+  struct timeval tv;\n+#endif\n+  char *XXXXXX;\n+  size_t len;\n+  int count;\n+\n+  len = strlen (template);\n+  if (len < 6 || strcmp (&template[len - 6], \"XXXXXX\"))\n+    {\n+      return -1;\n+    }\n+\n+  /* This is where the Xs start.  */\n+  XXXXXX = &template[len - 6];\n+\n+#ifdef HAVE_GETTIMEOFDAY\n+  /* Get some more or less random data.  */\n+  __gettimeofday (&tv, NULL);\n+  value += ((uint64_t) tv.tv_usec << 16) ^ tv.tv_sec ^ getpid ();\n+#else\n+  value += getpid ();\n+#endif\n+\n+  for (count = 0; count < TMP_MAX; ++count)\n+    {\n+      uint64_t v = value;\n+      int fd;\n+\n+      /* Fill in the random bits.  */\n+      XXXXXX[0] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[1] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[2] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[3] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[4] = letters[v % 62];\n+      v /= 62;\n+      XXXXXX[5] = letters[v % 62];\n+\n+      fd = open (template, O_RDWR|O_CREAT|O_EXCL, 0600);\n+      if (fd >= 0)\n+\t/* The file does not exist.  */\n+\treturn fd;\n+\n+      /* This is a random value.  It is only necessary that the next\n+\t TMP_MAX values generated by adding 7777 to VALUE are different\n+\t with (module 2^32).  */\n+      value += 7777;\n+    }\n+\n+  /* We return the null string if we can't find a unique file name.  */\n+  template[0] = '\\0';\n+  return -1;\n+}"}]}