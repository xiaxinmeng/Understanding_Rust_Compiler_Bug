{"sha": "aff557c74c4bff664d8b65d68444a5e2b57bd048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmNTU3Yzc0YzRiZmY2NjRkOGI2NWQ2ODQ0NGE1ZTJiNTdiZDA0OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T13:25:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T13:25:40Z"}, "message": "[multiple changes]\n\n2015-11-12  Bob Duff  <duff@adacore.com>\n\n\t* impunit.adb, lib-xref.ads, restrict.ads, scos.ads, sem_attr.ads,\n\ttypes.ads: Get rid of some global variables.\n\t* output.adb, output.ads: Move some global variables to the body.\n\n2015-11-12  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-spark_specific.adb\n\t(Is_Constant_Object_Without_Variable_Input): Add special case\n\tfor imported constants.\n\n2015-11-12  Philippe Gil  <gil@adacore.com>\n\n\t* g-debpoo.adb (Allocate): Avoid having allocations not handled.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Apply_Scalar_Range_Check): If the expression is\n\ta real literal and the context type has static bounds, remove\n\trange check when possible.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Collect_Primitive_Operations): If the type is\n\tderived from a type declared elsewhere that has an incomplete\n\ttype declaration, the primitives are found in the scope of the\n\ttype nat that of its ancestor.\n\n2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* switch-c.adb, debug.adb, osint-c.adb, gnat1drv.adb: Remove -gnatd.V\n\tdebug switch.\n\t* exp_aggr.adb, exp_util.adb: Fix typos.\n\n2015-11-12  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* init.c: Properly adjust PC values in case of signals.\n\n2015-11-12  Bob Duff  <duff@adacore.com>\n\n\t* sem_prag.adb (Check_Arg_Is_Library_Level_Local_Name): A\n\tpragma that comes from an aspect does not \"come from source\",\n\tso we need to test whether it comes from an aspect.\n\nFrom-SVN: r230253", "tree": {"sha": "70ab6c0a750c1c31b4dbad5e8824d4b823c6b6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ab6c0a750c1c31b4dbad5e8824d4b823c6b6af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aff557c74c4bff664d8b65d68444a5e2b57bd048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff557c74c4bff664d8b65d68444a5e2b57bd048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff557c74c4bff664d8b65d68444a5e2b57bd048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff557c74c4bff664d8b65d68444a5e2b57bd048/comments", "author": null, "committer": null, "parents": [{"sha": "a989bcc3f56ee3b90a9c8d78c94d424d1629f2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a989bcc3f56ee3b90a9c8d78c94d424d1629f2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a989bcc3f56ee3b90a9c8d78c94d424d1629f2ec"}], "stats": {"total": 277, "additions": 193, "deletions": 84}, "files": [{"sha": "987642714892fff5e681a30565a8547b162fd42f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -1,3 +1,48 @@\n+2015-11-12  Bob Duff  <duff@adacore.com>\n+\n+\t* impunit.adb, lib-xref.ads, restrict.ads, scos.ads, sem_attr.ads,\n+\ttypes.ads: Get rid of some global variables.\n+\t* output.adb, output.ads: Move some global variables to the body.\n+\n+2015-11-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-spark_specific.adb\n+\t(Is_Constant_Object_Without_Variable_Input): Add special case\n+\tfor imported constants.\n+\n+2015-11-12  Philippe Gil  <gil@adacore.com>\n+\n+\t* g-debpoo.adb (Allocate): Avoid having allocations not handled.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Apply_Scalar_Range_Check): If the expression is\n+\ta real literal and the context type has static bounds, remove\n+\trange check when possible.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Collect_Primitive_Operations): If the type is\n+\tderived from a type declared elsewhere that has an incomplete\n+\ttype declaration, the primitives are found in the scope of the\n+\ttype nat that of its ancestor.\n+\n+2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* switch-c.adb, debug.adb, osint-c.adb, gnat1drv.adb: Remove -gnatd.V\n+\tdebug switch.\n+\t* exp_aggr.adb, exp_util.adb: Fix typos.\n+\n+2015-11-12  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* init.c: Properly adjust PC values in case of signals.\n+\n+2015-11-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Check_Arg_Is_Library_Level_Local_Name): A\n+\tpragma that comes from an aspect does not \"come from source\",\n+\tso we need to test whether it comes from an aspect.\n+\n 2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n \n \t* switch-c.adb, gnat1drv.adb, opt.ads: Reserve -gnateg for generation"}, {"sha": "b5086cc38d3d5568a0863ad5f80a71fc52d05adf", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -2878,11 +2878,35 @@ package body Checks is\n          --  Always do a range check if the source type includes infinities and\n          --  the target type does not include infinities. We do not do this if\n          --  range checks are killed.\n+         --  If the expression is a literal and the bounds of the type are\n+         --  static constants it may be possible to optimize the check.\n \n          if Has_Infinities (S_Typ)\n            and then not Has_Infinities (Target_Typ)\n          then\n-            Enable_Range_Check (Expr);\n+            --  If the expression is a literal and the bounds of the type are\n+            --  static constants it may be possible to optimize the check.\n+\n+            if Nkind (Expr) = N_Real_Literal then\n+               declare\n+                  Tlo : constant Node_Id := Type_Low_Bound  (Target_Typ);\n+                  Thi : constant Node_Id := Type_High_Bound (Target_Typ);\n+\n+               begin\n+                  if Compile_Time_Known_Value (Tlo)\n+                    and then Compile_Time_Known_Value (Thi)\n+                    and then Expr_Value_R (Expr) >= Expr_Value_R (Tlo)\n+                    and then Expr_Value_R (Expr) <= Expr_Value_R (Thi)\n+                  then\n+                     return;\n+                  else\n+                     Enable_Range_Check (Expr);\n+                  end if;\n+               end;\n+\n+            else\n+               Enable_Range_Check (Expr);\n+            end if;\n          end if;\n       end if;\n "}, {"sha": "ad23a661b64713c6cdef5f1a6489fa792b3fba24", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -1936,8 +1936,7 @@ package body Exp_Aggr is\n                --  constraint associated with the type entity (which is\n                --  preferable, but it's not always present ???)\n \n-               if Is_Empty_Elmt_List (\n-                 Discriminant_Constraint (Current_Typ))\n+               if Is_Empty_Elmt_List (Discriminant_Constraint (Current_Typ))\n                then\n                   Assoc := Get_Constraint_Association (Current_Typ);\n                   Assoc_Elmt := No_Elmt;"}, {"sha": "bd7b25ce54e08b044c9c3333cc77074a93c240af", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -1672,17 +1672,10 @@ package body Exp_Util is\n    function Containing_Package_With_Ext_Axioms\n      (E : Entity_Id) return Entity_Id\n    is\n+      First_Ax_Parent_Scope : Entity_Id;\n       Decl : Node_Id;\n \n    begin\n-      if Ekind (E) = E_Package then\n-         if Nkind (Parent (E)) = N_Defining_Program_Unit_Name then\n-            Decl := Parent (Parent (E));\n-         else\n-            Decl := Parent (E);\n-         end if;\n-      end if;\n-\n       --  E is the package or generic package which is externally axiomatized\n \n       if Ekind_In (E, E_Package, E_Generic_Package)\n@@ -1691,33 +1684,35 @@ package body Exp_Util is\n          return E;\n       end if;\n \n-      --  If E's scope is axiomatized, E is axiomatized.\n-\n-      declare\n-         First_Ax_Parent_Scope : Entity_Id := Empty;\n+      --  If E's scope is axiomatized, E is axiomatized\n \n-      begin\n-         if Present (Scope (E)) then\n-            First_Ax_Parent_Scope :=\n-              Containing_Package_With_Ext_Axioms (Scope (E));\n-         end if;\n+      if Present (Scope (E)) then\n+         First_Ax_Parent_Scope :=\n+           Containing_Package_With_Ext_Axioms (Scope (E));\n \n          if Present (First_Ax_Parent_Scope) then\n             return First_Ax_Parent_Scope;\n          end if;\n \n-         --  otherwise, if E is a package instance, it is axiomatized if the\n-         --  corresponding generic package is axiomatized.\n+      end if;\n+\n+      --  Otherwise, if E is a package instance, it is axiomatized if the\n+      --  corresponding generic package is axiomatized.\n \n-         if Ekind (E) = E_Package\n-           and then Present (Generic_Parent (Decl))\n-         then\n+      if Ekind (E) = E_Package then\n+         if Nkind (Parent (E)) = N_Defining_Program_Unit_Name then\n+            Decl := Parent (Parent (E));\n+         else\n+            Decl := Parent (E);\n+         end if;\n+\n+         if Present (Generic_Parent (Decl)) then\n             return\n               Containing_Package_With_Ext_Axioms (Generic_Parent (Decl));\n-         else\n-            return Empty;\n          end if;\n-      end;\n+      end if;\n+\n+      return Empty;\n    end Containing_Package_With_Ext_Axioms;\n \n    -------------------------------"}, {"sha": "d51ae903c2bcc4aee13c8be4149f3f0623509996", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -874,7 +874,7 @@ package body GNAT.Debug_Pools is\n       P       : Ptr;\n       Trace   : Traceback_Htable_Elem_Ptr;\n \n-      Disable_Exit_Value : constant Boolean := Disable;\n+      Reset_Disable_At_Exit : Boolean := False;\n \n    begin\n       <<Allocate_Label>>\n@@ -887,6 +887,7 @@ package body GNAT.Debug_Pools is\n          return;\n       end if;\n \n+      Reset_Disable_At_Exit := True;\n       Disable := True;\n \n       Pool.Alloc_Count := Pool.Alloc_Count + 1;\n@@ -1017,13 +1018,15 @@ package body GNAT.Debug_Pools is\n          Pool.High_Water := Current;\n       end if;\n \n-      Disable := Disable_Exit_Value;\n+      Disable := False;\n \n       Unlock_Task.all;\n \n    exception\n       when others =>\n-         Disable := Disable_Exit_Value;\n+         if Reset_Disable_At_Exit then\n+            Disable := False;\n+         end if;\n          Unlock_Task.all;\n          raise;\n    end Allocate;"}, {"sha": "17e7d9c5a5324d6d846cbc24aa781c4c722ba411", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -142,12 +142,6 @@ procedure Gnat1drv is\n          Modify_Tree_For_C := True;\n       end if;\n \n-      --  -gnatd.V enables C generation\n-\n-      if Debug_Flag_Dot_VV then\n-         Generate_C_Code := True;\n-      end if;\n-\n       --  Set all flags required when generating C code\n \n       if Generate_C_Code then\n@@ -222,7 +216,7 @@ procedure Gnat1drv is\n          --  do not expect this to happen in normal use, since both modes are\n          --  enabled by special tools, but it is useful to turn off these flags\n          --  this way when we are doing CodePeer tests on existing test suites\n-         --  that may have -gnatd.V set, to avoid the need for special casing.\n+         --  that may have -gnateg set, to avoid the need for special casing.\n \n          Modify_Tree_For_C := False;\n          Generate_C_Code := False;"}, {"sha": "e7d86d2faa5a75dabf770f698e13bd461bd253af", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -604,21 +604,21 @@ package body Impunit is\n \n    type Aunit_Record is record\n       Fname : String (1 .. 6);\n-      Aname : String_Ptr;\n+      Aname : String_Ptr_Const;\n    end record;\n \n    --  Array of alternative unit names\n \n-   Scasuti : aliased String := \"GNAT.Case_Util\";\n-   Scrc32  : aliased String := \"GNAT.CRC32\";\n-   Shtable : aliased String := \"GNAT.HTable\";\n-   Sos_lib : aliased String := \"GNAT.OS_Lib\";\n-   Sregexp : aliased String := \"GNAT.Regexp\";\n-   Sregpat : aliased String := \"GNAT.Regpat\";\n-   Sstring : aliased String := \"GNAT.Strings\";\n-   Sstusta : aliased String := \"GNAT.Task_Stack_Usage\";\n-   Stasloc : aliased String := \"GNAT.Task_Lock\";\n-   Sutf_32 : aliased String := \"GNAT.UTF_32\";\n+   Scasuti : aliased constant String := \"GNAT.Case_Util\";\n+   Scrc32  : aliased constant String := \"GNAT.CRC32\";\n+   Shtable : aliased constant String := \"GNAT.HTable\";\n+   Sos_lib : aliased constant String := \"GNAT.OS_Lib\";\n+   Sregexp : aliased constant String := \"GNAT.Regexp\";\n+   Sregpat : aliased constant String := \"GNAT.Regpat\";\n+   Sstring : aliased constant String := \"GNAT.Strings\";\n+   Sstusta : aliased constant String := \"GNAT.Task_Stack_Usage\";\n+   Stasloc : aliased constant String := \"GNAT.Task_Lock\";\n+   Sutf_32 : aliased constant String := \"GNAT.UTF_32\";\n \n    --  Array giving mapping\n "}, {"sha": "4acf1a290157aad9ea0b0fac7d6d03a2d814cee0", "filename": "gcc/ada/init.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -1911,6 +1911,41 @@ __gnat_vxsim_error_handler (int sig, siginfo_t *si, void *sc);\n static int is_vxsim = 0;\n #endif\n \n+#if defined (ARMEL) && (_WRS_VXWORKS_MAJOR >= 7)\n+\n+/* ARM-vx7 case with arm unwinding exceptions */\n+#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n+\n+#include <arch/../regs.h>\n+#ifndef __RTP__\n+#include <sigLib.h>\n+#else\n+#include <signal.h>\n+#include <regs.h>\n+#include <ucontext.h>\n+#endif /* __RTP__ */\n+\n+void\n+__gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED,\n+\t\t\t\t void *sc ATTRIBUTE_UNUSED)\n+{\n+  /* In case of ARM exceptions, the registers context have the PC pointing\n+     to the instruction that raised the signal. However the Unwinder expects\n+     the instruction to be in the range ]PC,PC+1].\n+      */\n+  uintptr_t *pc_addr; /* address of the pc value to restore */\n+#ifdef __RTP__\n+  mcontext_t *mcontext = &((ucontext_t *) sc)->uc_mcontext;\n+  pc_addr = (uintptr_t*)&mcontext->regs.pc;\n+#else\n+  struct sigcontext * sctx = (struct sigcontext *) sc;\n+  pc_addr = (uintptr_t*)&sctx->sc_pregs->pc;\n+#endif\n+  /* ARM Bump has to be an even number because of odd/even architecture.  */\n+  *pc_addr += 2;\n+}\n+#endif /* ARMEL && _WRS_VXWORKS_MAJOR >= 7 */\n+\n /* Tasking and Non-tasking signal handler.  Map SIGnal to Ada exception\n    propagation after the required low level adjustments.  */\n \n@@ -1958,6 +1993,10 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n     __gnat_vxsim_error_handler (sig, si, sc);\n #endif\n \n+#ifdef HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n+  __gnat_adjust_context_for_raise (sig, sc);\n+#endif\n+\n   #include \"sigtramp.h\"\n \n   __gnat_sigtramp (sig, (void *)si, (void *)sc,"}, {"sha": "43a023747e51929caa2084a7c0ee8d7d9c644aee", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -445,8 +445,12 @@ package body SPARK_Specific is\n                      Decl := Parent (E);\n                   end if;\n \n-                  pragma Assert (Present (Expression (Decl)));\n-                  Result := Is_Static_Expression (Expression (Decl));\n+                  if Is_Imported (E) then\n+                     Result := False;\n+                  else\n+                     pragma Assert (Present (Expression (Decl)));\n+                     Result := Is_Static_Expression (Expression (Decl));\n+                  end if;\n                end;\n \n             when E_Loop_Parameter | E_In_Parameter =>"}, {"sha": "33e20ee2ae21c5558b56a2a699dfcd7ed7ee9d53", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -433,7 +433,7 @@ package Lib.Xref is\n    --  indicating procedures and functions. If the operation is abstract,\n    --  these letters are replaced in the xref by 'x' and 'y' respectively.\n \n-   Xref_Entity_Letters : array (Entity_Kind) of Character :=\n+   Xref_Entity_Letters : constant array (Entity_Kind) of Character :=\n      (E_Abstract_State                             => '@',\n       E_Access_Attribute_Type                      => 'P',\n       E_Access_Protected_Subprogram_Type           => 'P',"}, {"sha": "a24a5a73894b90b54085fb7e02c4f2a34fc93c63", "filename": "gcc/ada/osint-c.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fosint-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fosint-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -446,7 +446,10 @@ package body Osint.C is\n       if NL <= EL\n          or else\n           (Name (NL - EL + Name'First .. Name'Last) /= Ext\n-             and then Name (NL - 2 + Name'First .. Name'Last) /= \".o\")\n+             and then Name (NL - 2 + Name'First .. Name'Last) /= \".o\"\n+             and then\n+               (not Generate_C_Code\n+                  or else Name (NL - 2 + Name'First .. Name'Last) /= \".c\"))\n       then\n          Fail (\"incorrect object file extension\");\n       end if;"}, {"sha": "fdfb7330a203025e7c2c0b3be8e566cb0a5a8ff4", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -31,6 +31,17 @@\n \n package body Output is\n \n+   Buffer : String (1 .. Buffer_Max + 1) := (others => '*');\n+   for Buffer'Alignment use 4;\n+   --  Buffer used to build output line. We do line buffering because it is\n+   --  needed for the support of the debug-generated-code option (-gnatD). Note\n+   --  any attempt to write more output to a line than can fit in the buffer\n+   --  will be silently ignored. The alignment clause improves the efficiency\n+   --  of the save/restore procedures.\n+\n+   Next_Col : Positive range 1 .. Buffer'Length + 1 := 1;\n+   --  Column about to be written\n+\n    Current_FD : File_Descriptor := Standout;\n    --  File descriptor for current output\n "}, {"sha": "5fe0d44a9c29978853da4ce7e6dd7893e1f7293e", "filename": "gcc/ada/output.ads", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Foutput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Foutput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.ads?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -203,20 +203,6 @@ package Output is\n    --  Dump contents of string followed by blank, Boolean, line return\n \n private\n-   --  Note: the following buffer and column position are maintained by the\n-   --  subprograms defined in this package, and cannot be directly modified or\n-   --  accessed by a client.\n-\n-   Buffer : String (1 .. Buffer_Max + 1) := (others => '*');\n-   for Buffer'Alignment use 4;\n-   --  Buffer used to build output line. We do line buffering because it is\n-   --  needed for the support of the debug-generated-code option (-gnatD). Note\n-   --  any attempt to write more output to a line than can fit in the buffer\n-   --  will be silently ignored. The alignment clause improves the efficiency\n-   --  of the save/restore procedures.\n-\n-   Next_Col : Positive range 1 .. Buffer'Length + 1 := 1;\n-   --  Column about to be written\n \n    type Saved_Output_Buffer is record\n       Buffer          : String (1 .. Buffer_Max + 1);"}, {"sha": "6ce790895d31ee2b91a8cd246253cce33891584f", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -107,7 +107,7 @@ package Restrict is\n    --  to implement pragma Restrictions (No_Implementation_Restrictions) (which\n    --  is why this restriction itself is excluded from the list).\n \n-   Implementation_Restriction : array (All_Restrictions) of Boolean :=\n+   Implementation_Restriction : constant array (All_Restrictions) of Boolean :=\n      (Simple_Barriers                    => True,\n       No_Calendar                        => True,\n       No_Default_Initialization          => True,"}, {"sha": "2acce02ea199fbe0a1933e2289aac50aba067cbb", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2009-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -360,7 +360,8 @@ package SCOs is\n       Col  : Column_Number;\n    end record;\n \n-   No_Source_Location : Source_Location := (No_Line_Number, No_Column_Number);\n+   No_Source_Location : constant Source_Location :=\n+     (No_Line_Number, No_Column_Number);\n \n    type SCO_Table_Entry is record\n       From : Source_Location := No_Source_Location;"}, {"sha": "a8fa47139ec6f660d59cae67a267d942b8d7d20e", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -46,7 +46,8 @@ package Sem_Attr is\n    --  in GNAT, as well as constructing an array of flags indicating which\n    --  attributes these are.\n \n-   Attribute_Impl_Def : Attribute_Class_Array := Attribute_Class_Array'(\n+   Attribute_Impl_Def : constant Attribute_Class_Array :=\n+     Attribute_Class_Array'(\n \n       ------------------\n       -- Abort_Signal --"}, {"sha": "9e873745e7043727402c3b9d7903fd0fb6b3c9b1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -4328,8 +4328,12 @@ package body Sem_Prag is\n       begin\n          Check_Arg_Is_Local_Name (Arg);\n \n+         --  If it came from an aspect, we want to give the error just as if it\n+         --  came from source.\n+\n          if not Is_Library_Level_Entity (Entity (Get_Pragma_Arg (Arg)))\n-           and then Comes_From_Source (N)\n+           and then (Comes_From_Source (N)\n+                       or else Present (Corresponding_Aspect (Parent (Arg))))\n          then\n             Error_Pragma_Arg\n               (\"argument for pragma% must be library level entity\", Arg);"}, {"sha": "59194cf2d26fd1af19d1b1b1b63be4e9b041cab0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -4223,6 +4223,14 @@ package body Sem_Util is\n          then\n             Id := Defining_Entity (Incomplete_View (Parent (B_Type)));\n \n+            --  If T is a derived from a type with an incomplete view declared\n+            --  elsewhere, that incomplete view is irrelevant, we want the\n+            --  operations in the scope of T.\n+\n+            if Scope (Id) /= Scope (B_Type) then\n+               Id := Next_Entity (B_Type);\n+            end if;\n+\n          else\n             Id := Next_Entity (B_Type);\n          end if;"}, {"sha": "977d00337f85f17582aa53816b3c4fbeea8b19cc", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -387,15 +387,6 @@ package body Switch.C is\n                            Osint.Fail\n                              (\"-gnatd.b must be first if combined \"\n                               & \"with other switches\");\n-\n-                        --  Special check, -gnatd.V must occur after -gnatc\n-\n-                        elsif C = 'V'\n-                          and then Operating_Mode /= Check_Semantics\n-                        then\n-                           Osint.Fail\n-                             (\"gnatd.V requires previous occurrence \"\n-                              & \"of -gnatc\");\n                         end if;\n \n                      --  Not a dotted flag"}, {"sha": "10756075bf3448be0153b8ce3b523fc2dd12b043", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff557c74c4bff664d8b65d68444a5e2b57bd048/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=aff557c74c4bff664d8b65d68444a5e2b57bd048", "patch": "@@ -109,8 +109,9 @@ package Types is\n      Character range Character'Val (16#80#) .. Character'Val (16#FF#);\n    --  8-bit Characters with the upper bit set\n \n-   type Character_Ptr is access all Character;\n-   type String_Ptr    is access all String;\n+   type Character_Ptr    is access all Character;\n+   type String_Ptr       is access all String;\n+   type String_Ptr_Const is access constant String;\n    --  Standard character and string pointers\n \n    procedure Free is new Unchecked_Deallocation (String, String_Ptr);\n@@ -896,7 +897,7 @@ package Types is\n    type Reason_Kind is (CE_Reason, PE_Reason, SE_Reason);\n    --  Categorization of reason codes by exception raised\n \n-   Rkind : array (RT_Exception_Code range <>) of Reason_Kind :=\n+   Rkind : constant array (RT_Exception_Code range <>) of Reason_Kind :=\n              (CE_Access_Check_Failed            => CE_Reason,\n               CE_Access_Parameter_Is_Null       => CE_Reason,\n               CE_Discriminant_Check_Failed      => CE_Reason,"}]}