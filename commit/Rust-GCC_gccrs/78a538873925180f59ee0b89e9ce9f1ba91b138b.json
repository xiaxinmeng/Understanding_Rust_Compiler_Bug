{"sha": "78a538873925180f59ee0b89e9ce9f1ba91b138b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhNTM4ODczOTI1MTgwZjU5ZWUwYjg5ZTljZTlmMWJhOTFiMTM4Yg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-11-29T20:59:22Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-11-29T20:59:22Z"}, "message": "throw_allocator.h: Consistent @file markup.\n\n2006-11-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/throw_allocator.h: Consistent @file markup.\n\t* include/ext/type_traits.h: Same.\n\t* include/debug/hash_map: Same.\n\t* include/debug/hash_multimap.h: Same.\n\t* include/debug/set.h: Same.\n\t* include/debug/hash_set.h: Same.\n\t* include/debug/formatter.h: Same.\n\t* include/debug/bitset: Same.\n\t* include/debug/set: Same.\n\t* include/debug/multiset.h: Same.\n\t* include/debug/safe_sequence.h: Same.\n\t* include/debug/hash_set: Same.\n\t* include/debug/functions.h: Same.\n\t* include/debug/safe_base.h: Same.\n\t* include/debug/hash_multiset.h: Same.\n\t* include/debug/safe_iterator.tcc: Same.\n\t* include/debug/vector: Same.\n\t* include/debug/map.h: Same.\n\t* include/debug/deque: Same.\n\t* include/debug/hash_map.h: Same.\n\t* include/debug/string: Same.\n\t* include/debug/macros.h: Same.\n\t* include/debug/list: Same.\n\t* include/debug/debug.h: Same.\n\t* include/debug/map: Same. \n\t* include/debug/safe_iterator.h: Same.\n\t* include/debug/multimap.h: Same.\n\t* config/cpu/generic/atomicity_mutex/atomicity.h: Same.\n\t* config/cpu/generic/atomicity_builtins/atomicity.h: Same.\n\t* config/cpu/generic/atomic_word.h: Same.\n\t* include/tr1/memory: Same.\n\t* include/tr1/random: Same.\t\n\t* include/std/std_queue.h: Same.\n\t* include/std/std_iterator.h: Same.\n\t* include/std/std_bitset.h: Same.\n\t* include/std/std_set.h: Same.\n\t* include/std/std_vector.h: Same.\n\t* include/std/std_deque.h: Same.\n\t* include/std/std_utility.h: Same.\n\t* include/std/std_stack.h: Same.\n\t* include/std/std_string.h: Same.\n\t* include/std/std_list.h: Same.\n\t* include/std/std_map.h: Same.\n\t* libsupc++/typeinfo: Same.\n\t* libsupc++/exception: Same.\n\t* libsupc++/exception_defines.h: Same.\n\t* libsupc++/new: Same.\n\t\n\t* include/ext/bitmap_allocator.h: Change namespace __balloc to\n\t__detail.\n\t* src/bitmap_allocator.cc: Same.\n\t\n\t* include/bits/cpp_type_traits.h: Change __true_type and\n\t__false_type from global to namespace std scope.\n\t* include/ext/slist: Same.\n\t* include/ext/vstring.h: Same.\n\t* include/ext/vstring.tcc: Same.\n\t* include/ext/rc_string_base.h: Same.\n\t* include/ext/sso_string_base.h: Same.\n\n\t* include/bits/codecvt.h: Adjust markup so that correct namespace\n\tscope information is in all files.\n\t* include/bits/locale_facets.h: Same. Include ctype_base directly.\n\t* config/os/windiss/ctype_base.h: Add in namespace markup.\n\t* config/os/newlib/ctype_base.h: Same.\n\t* config/os/aix/ctype_base.h: Same.\n\t* config/os/vxworks/ctype_base.h: Same.\n\t* config/os/hpux/ctype_base.h: Same.\n\t* config/os/mingw32/ctype_base.h: Same.\n\t* config/os/gnu-linux/ctype_base.h: Same.\n\t* config/os/tpf/ctype_base.h: Same.\n\t* config/os/uclibc/ctype_base.h: Same.\n\t* config/os/djgpp/ctype_base.h: Same.\n\t* config/os/qnx/qnx6.1/ctype_base.h: Same.\n\t* config/os/bsd/netbsd/ctype_base.h: Same.\n\t* config/os/bsd/darwin/ctype_base.h: Same.\n\t* config/os/bsd/freebsd/ctype_base.h: Same.\n\t* config/os/irix/irix5.2/ctype_base.h: Same.\n\t* config/os/irix/irix6.5/ctype_base.h: Same.\n\t* config/os/solaris/solaris2.5/ctype_base.h: Same.\n\t* config/os/solaris/solaris2.6/ctype_base.h: Same.\n\t* config/os/solaris/solaris2.7/ctype_base.h: Same.\n\t* config/os/generic/ctype_base.h: Same.\n\t* include/tr1/mu_iterate.h: Same.\n\t* include/tr1/tuple: Same.\n\t* include/tr1/tuple_iterate.h: Same.\n\t* include/tr1/tuple_defs.h: Same.\n\t* include/tr1/random.tcc: Same.\n\t* include/tr1/functional: Same.\n\t* include/tr1/functional_iterate.h: Same.\n\t\n\t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: Line\n\tnumber changes.\t\n\t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: Same.\n\t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: Same.\n\t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: Same.\n\n\t* docs/doxygen/user.cfg.in: Update to doxygen 1.5.1.\n\t* docs/html/17_intro/license.html: Updated info for generated docs.\n\t* docs/doxygen/guide.html: Adjust.\n\t* docs/doxygen/run_doxygen: Adjust.\n\t* docs/doxygen/mainpage.html: Same.\n\t* docs/doxygen/doxygroups.cc: Same.\n\t* docs/doxygen/Intro.3: Same.\n\t* docs/doxygen/tables.html: Same.\n\nFrom-SVN: r119334", "tree": {"sha": "a01ca369517bc5c84f3118fd07ba352999e5d0f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a01ca369517bc5c84f3118fd07ba352999e5d0f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78a538873925180f59ee0b89e9ce9f1ba91b138b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a538873925180f59ee0b89e9ce9f1ba91b138b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a538873925180f59ee0b89e9ce9f1ba91b138b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a538873925180f59ee0b89e9ce9f1ba91b138b/comments", "author": null, "committer": null, "parents": [{"sha": "3a7d5586cb7c516882365a6e4232fd84562bf138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7d5586cb7c516882365a6e4232fd84562bf138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7d5586cb7c516882365a6e4232fd84562bf138"}], "stats": {"total": 847, "additions": 662, "deletions": 185}, "files": [{"sha": "431845ba7fe7fcf0521b19ee08d60bb95a4191d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -1,3 +1,111 @@\n+2006-11-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/throw_allocator.h: Consistent @file markup.\n+\t* include/ext/type_traits.h: Same.\n+\t* include/debug/hash_map: Same.\n+\t* include/debug/hash_multimap.h: Same.\n+\t* include/debug/set.h: Same.\n+\t* include/debug/hash_set.h: Same.\n+\t* include/debug/formatter.h: Same.\n+\t* include/debug/bitset: Same.\n+\t* include/debug/set: Same.\n+\t* include/debug/multiset.h: Same.\n+\t* include/debug/safe_sequence.h: Same.\n+\t* include/debug/hash_set: Same.\n+\t* include/debug/functions.h: Same.\n+\t* include/debug/safe_base.h: Same.\n+\t* include/debug/hash_multiset.h: Same.\n+\t* include/debug/safe_iterator.tcc: Same.\n+\t* include/debug/vector: Same.\n+\t* include/debug/map.h: Same.\n+\t* include/debug/deque: Same.\n+\t* include/debug/hash_map.h: Same.\n+\t* include/debug/string: Same.\n+\t* include/debug/macros.h: Same.\n+\t* include/debug/list: Same.\n+\t* include/debug/debug.h: Same.\n+\t* include/debug/map: Same. \n+\t* include/debug/safe_iterator.h: Same.\n+\t* include/debug/multimap.h: Same.\n+\t* config/cpu/generic/atomicity_mutex/atomicity.h: Same.\n+\t* config/cpu/generic/atomicity_builtins/atomicity.h: Same.\n+\t* config/cpu/generic/atomic_word.h: Same.\n+\t* include/tr1/memory: Same.\n+\t* include/tr1/random: Same.\t\n+\t* include/std/std_queue.h: Same.\n+\t* include/std/std_iterator.h: Same.\n+\t* include/std/std_bitset.h: Same.\n+\t* include/std/std_set.h: Same.\n+\t* include/std/std_vector.h: Same.\n+\t* include/std/std_deque.h: Same.\n+\t* include/std/std_utility.h: Same.\n+\t* include/std/std_stack.h: Same.\n+\t* include/std/std_string.h: Same.\n+\t* include/std/std_list.h: Same.\n+\t* include/std/std_map.h: Same.\n+\t* libsupc++/typeinfo: Same.\n+\t* libsupc++/exception: Same.\n+\t* libsupc++/exception_defines.h: Same.\n+\t* libsupc++/new: Same.\n+\t\n+\t* include/ext/bitmap_allocator.h: Change namespace __balloc to\n+\t__detail.\n+\t* src/bitmap_allocator.cc: Same.\n+\t\n+\t* include/bits/cpp_type_traits.h: Change __true_type and\n+\t__false_type from global to namespace std scope.\n+\t* include/ext/slist: Same.\n+\t* include/ext/vstring.h: Same.\n+\t* include/ext/vstring.tcc: Same.\n+\t* include/ext/rc_string_base.h: Same.\n+\t* include/ext/sso_string_base.h: Same.\n+\n+\t* include/bits/codecvt.h: Adjust markup so that correct namespace\n+\tscope information is in all files.\n+\t* include/bits/locale_facets.h: Same. Include ctype_base directly.\n+\t* config/os/windiss/ctype_base.h: Add in namespace markup.\n+\t* config/os/newlib/ctype_base.h: Same.\n+\t* config/os/aix/ctype_base.h: Same.\n+\t* config/os/vxworks/ctype_base.h: Same.\n+\t* config/os/hpux/ctype_base.h: Same.\n+\t* config/os/mingw32/ctype_base.h: Same.\n+\t* config/os/gnu-linux/ctype_base.h: Same.\n+\t* config/os/tpf/ctype_base.h: Same.\n+\t* config/os/uclibc/ctype_base.h: Same.\n+\t* config/os/djgpp/ctype_base.h: Same.\n+\t* config/os/qnx/qnx6.1/ctype_base.h: Same.\n+\t* config/os/bsd/netbsd/ctype_base.h: Same.\n+\t* config/os/bsd/darwin/ctype_base.h: Same.\n+\t* config/os/bsd/freebsd/ctype_base.h: Same.\n+\t* config/os/irix/irix5.2/ctype_base.h: Same.\n+\t* config/os/irix/irix6.5/ctype_base.h: Same.\n+\t* config/os/solaris/solaris2.5/ctype_base.h: Same.\n+\t* config/os/solaris/solaris2.6/ctype_base.h: Same.\n+\t* config/os/solaris/solaris2.7/ctype_base.h: Same.\n+\t* config/os/generic/ctype_base.h: Same.\n+\t* include/tr1/mu_iterate.h: Same.\n+\t* include/tr1/tuple: Same.\n+\t* include/tr1/tuple_iterate.h: Same.\n+\t* include/tr1/tuple_defs.h: Same.\n+\t* include/tr1/random.tcc: Same.\n+\t* include/tr1/functional: Same.\n+\t* include/tr1/functional_iterate.h: Same.\n+\t\n+\t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: Line\n+\tnumber changes.\t\n+\t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: Same.\n+\t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: Same.\n+\t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: Same.\n+\n+\t* docs/doxygen/user.cfg.in: Update to doxygen 1.5.1.\n+\t* docs/html/17_intro/license.html: Updated info for generated docs.\n+\t* docs/doxygen/guide.html: Adjust.\n+\t* docs/doxygen/run_doxygen: Adjust.\n+\t* docs/doxygen/mainpage.html: Same.\n+\t* docs/doxygen/doxygroups.cc: Same.\n+\t* docs/doxygen/Intro.3: Same.\n+\t* docs/doxygen/tables.html: Same.\n+\n 2006-11-26  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/29385 (2nd part, based on an idea by Ion Gaztanaga)"}, {"sha": "08c9077733e198e4f01f830fca13882d57da6d6a", "filename": "libstdc++-v3/config/cpu/generic/atomic_word.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -27,6 +27,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file ext/atomic_word.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_ATOMIC_WORD_H\n #define _GLIBCXX_ATOMIC_WORD_H\t1\n "}, {"sha": "8128c099fe15b4280714440836b5bb08c26fa0ea", "filename": "libstdc++-v3/config/cpu/generic/atomicity_builtins/atomicity.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_builtins%2Fatomicity.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file ext/atomicity.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n #include <bits/c++config.h>\n #include <bits/atomic_word.h>\n "}, {"sha": "e9ee10c4b681e415c95f0fb505cc6b10327183fa", "filename": "libstdc++-v3/config/cpu/generic/atomicity_mutex/atomicity.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity_mutex%2Fatomicity.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file ext/atomicity.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n "}, {"sha": "bc29ff1ccf40f385c0f1ba978321fe974041ff9a", "filename": "libstdc++-v3/config/os/aix/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct \t= _ISPUNCT;\n     static const mask alnum \t= _ISALPHA | _ISDIGIT;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "6dbac958776fa68886b423e6fd9d5091f73b1516", "filename": "libstdc++-v3/config/os/bsd/darwin/ctype_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -35,6 +35,9 @@\n // 4.0 and all versions of the CVS managed file at:\n // :pserver:anoncvs@anoncvs.freebsd.org:/home/ncvs/src/include/ctype.h\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -70,5 +73,4 @@\n #endif\n   };\n \n-\n-\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "56411cafa2c50bd5e77be464150c17c2186e9a3a", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -35,6 +35,9 @@\n // 4.0 and all versions of the CVS managed file at:\n // :pserver:anoncvs@anoncvs.freebsd.org:/home/ncvs/src/include/ctype.h\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -72,5 +75,4 @@\n #endif\n   };\n \n-\n-\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "bee7daf0ccea9486dd45a7092fcce8d54553acc8", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -36,6 +36,9 @@\n //   anoncvs@anoncvs.netbsd.org:/cvsroot/basesrc/include/ctype.h\n // See www.netbsd.org for details of access.\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -56,3 +59,5 @@\n     static const mask punct \t= _P;\n     static const mask alnum \t= _U | _L | _N;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "0664634e4c63b74b88a52c41208fc1bdc23ecfb0", "filename": "libstdc++-v3/config/os/djgpp/ctype_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -31,6 +31,9 @@\n // ISO C++ 14882: 22.1  Locales\n //\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     typedef unsigned short \tmask;\n@@ -53,5 +56,4 @@\n     static const mask graph = __dj_ISALPHA | __dj_ISDIGIT | __dj_ISPUNCT;  // Graphical\n   };\n \n-\n-\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "1fd5f0a7d12077c7fc532d72eea5660c363ba9f4", "filename": "libstdc++-v3/config/os/generic/ctype_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Default information, may not be appropriate for specific host.\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -54,5 +57,4 @@\n     static const mask alnum \t= (1 << 2) | (1 << 3);  // alpha|digit\n   };\n \n-\n-\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "0cd724249ee17e297e1ca5ffa36e5444c2b5cbef", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -39,6 +39,8 @@\n \n // Information as gleaned from /usr/include/ctype.h\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n@@ -60,3 +62,5 @@\n     static const mask punct \t= _ISpunct;\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "0d6cb5f2369fb4388e152b276960c8f9233e6b56", "filename": "libstdc++-v3/config/os/hpux/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Default information, may not be appropriate for specific host.\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct     = _ISPUNCT;\n     static const mask alnum     = _ISALPHA | _ISDIGIT;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "1af3054d7e9cb79199e0e3970de53121073c9cd5", "filename": "libstdc++-v3/config/os/irix/irix5.2/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h on irix 5.2\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct \t= _P;\n     static const mask alnum \t= _U | _L | _N;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "12980554b66ec9840afa761fefbc8021d0d144e2", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h on irix 6.5\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct \t= _ISpunct;\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "a7efaf718c28a8dcce2e2be4186174ffec850bbf", "filename": "libstdc++-v3/config/os/mingw32/ctype_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information, as gleaned from /mingw32/include/ctype.h.\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -54,5 +57,4 @@\n     static const mask alnum \t= (_ALPHA | _DIGIT);\n   };\n \n-\n-\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "286287a4ebfc13834df2a08c35bffc057ac7e869", "filename": "libstdc++-v3/config/os/newlib/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -35,6 +35,9 @@\n \n // Support for Solaris 2.5.1\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -55,3 +58,5 @@\n     static const mask punct \t= _P;\n     static const mask alnum \t= _U | _L | _N;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "e5de97dd308b4a438d2989a13ce70e9d874069a1", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h.\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct \t= _PU;\n     static const mask alnum \t= _DI | _LO | _UP | _XA;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "89b11c021d713163f3f89837e8a039093399a94a", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h, for solaris2.5.1\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct \t= 020;\n     static const mask alnum \t= 01 | 02 | 04;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "78a5c8567deacd040444bba41e251caf3cd82380", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -34,6 +34,9 @@\n // Information as gleaned from /usr/include/ctype.h. Looks like this\n // only works with solaris2.6.\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -54,3 +57,5 @@\n     static const mask punct \t= _ISPUNCT;\n     static const mask alnum \t= _ISALPHA | _ISDIGIT;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "631617039cdc8f89241c16b194e91a419d998774", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -35,6 +35,9 @@\n // only works with solaris2.7 and solaris2.8. Thanks for not changing\n // things, sun engineers!\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -55,3 +58,5 @@\n     static const mask punct \t= _ISPUNCT;\n     static const mask alnum \t= _ISALPHA | _ISDIGIT;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "93415395fc7c9436fcfd25f3b8ff94727529a383", "filename": "libstdc++-v3/config/os/tpf/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct \t= _ISpunct;\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "d964f0f06f2ad1b3dc5bfd0c6fd9ed5509ee5d99", "filename": "libstdc++-v3/config/os/uclibc/ctype_base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fuclibc%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -39,6 +39,8 @@\n \n // Information as gleaned from /usr/include/ctype.h\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n@@ -62,3 +64,5 @@\n     static const mask punct \t= _ISpunct;\n     static const mask alnum \t= _ISalpha | _ISdigit;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "4e01966e3247691ed17cc997da0e4b6b5e313127", "filename": "libstdc++-v3/config/os/vxworks/ctype_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Information extracted from target/h/ctype.h.\n   \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -55,5 +58,4 @@\n     static const mask alnum \t= _C_UPPER | _C_LOWER | _C_NUMBER;\n   };\n \n-\n-\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "07885cafcebd3f59aa0dd96412cc6f4adf2b25c9", "filename": "libstdc++-v3/config/os/windiss/ctype_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,9 @@\n   \n // Default information, may not be appropriate for specific host.\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n     // Non-standard typedefs.\n@@ -53,3 +56,5 @@\n     static const mask punct \t= _P;\n     static const mask alnum \t= _U | _L | _N;\n   };\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "48cb31f87f117fc1e2cf951d997757cefab3e58c", "filename": "libstdc++-v3/docs/doxygen/Intro.3", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -1,13 +1,13 @@\n .\\\" t\n-.\\\" This man page is released under the FDL as part of libstdc++-v3.\n-.TH C++Intro 3 \"20 May 2004\" \"GNU libstdc++-v3\" \"Standard C++ Library\"\n+.\\\" This man page is released under the FDL as part of libstdc++.\n+.TH C++Intro 3 \"20 May 2004\" \"GNU libstdc++\" \"Standard C++ Library\"\n .SH NAME\n-C++Intro \\- Introduction to the GNU libstdc++-v3 man pages\n+C++Intro \\- Introduction to the GNU libstdc++ man pages\n .SH DESCRIPTION\n This man page serves as a brief introduction to the GNU implementation of\n the Standard C++ Library.  For a better introduction and more complete\n documentation, see the\n-.B libstdc++-v3\n+.B libstdc++\n homepage listed at the end.\n .P\n All standard library entities are declared within\n@@ -109,7 +109,7 @@ lB lB.\n .TP\n .I libstdc++.a\n The library implementation in static archive form.  If you did not configure\n-libstdc++-v3 to use shared libraries, this will always be used.  Otherwise\n+libstdc++ to use shared libraries, this will always be used.  Otherwise\n it will only be used if the user requests it.\n .TP\n .I libsupc++.a"}, {"sha": "9824754efc50beaa9700751db18323c1dfec0987", "filename": "libstdc++-v3/docs/doxygen/doxygroups.cc", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -17,26 +17,39 @@\n \n // // // // // // // // // // // // // // // // // // // // // // // //\n /** @namespace std\n- *  @brief Everything defined by the ISO C++ Standard is within namespace std.\n+ *  @brief Everything defined by the ISO C++ Standard is within\n+ *  namespace <a class=\"el\" href=\"namespacestd.html\">std</a>.\n+*/\n+/** @namespace std::__detail\n+ *  @brief Implementation details not part of the namespace <a class=\"el\"\n+ *  href=\"namespacestd.html\">std</a> interface.\n */\n /** @namespace std::tr1\n- *  @brief Everything defined by the TR1 is within namespace std::tr1.\n+ *  @brief Everything defined by the ISO C++ TR1 is within namespace std::tr1.\n+*/\n+/** @namespace std::tr1::__detail\n+ *  @brief Implementation details not part of the namespace std::tr1 interface.\n */\n /** @namespace __gnu_cxx\n  *  @brief GNU extensions for public use.\n */\n-/** @namespace __gnu_cxx::balloc\n- *  @brief Related to __gnu_cxx::bitmap_allocator.\n+/** @namespace __gnu_cxx::__detail\n+ *  @brief Implementation details not part of the namespace __gnu_cxx\n+ *  interface.\n+*/\n+/** @namespace __gnu_cxx::typelist\n+ *  @brief GNU typelist extensions for public compile-time use.\n */\n /** @namespace __gnu_internal\n- *  @brief GNU implemenation details, not for public use.\n+ *  @brief GNU implemenation details, not for public use or\n+ *  export. Used only when anonymous namespaces cannot be substituted.\n */\n /** @namespace __gnu_debug\n- *  @brief GNU debug mode implemenation details.\n+ *  @brief GNU debug mode classes for public use.\n */\n // // // // // // // // // // // // // // // // // // // // // // // //\n /** @addtogroup SGIextensions STL extensions from SGI\n-Because libstdc++-v3 based its implementation of the STL subsections of\n+Because libstdc++ based its implementation of the STL subsections of\n the library on the SGI 3.3 implementation, we inherited their extensions\n as well.\n \n@@ -118,9 +131,10 @@ All associative containers must meet certain requirements, summarized in\n \n // // // // // // // // // // // // // // // // // // // // // // // //\n /** @namespace abi\n- *  @brief The cross-vendor C++ Application Binary Interface.\n+ *  @brief The cross-vendor C++ Application Binary Interface. A\n+ *  namespace alias to __cxxabiv1.\n  *\n- *  A brief overview of an ABI is given in the libstdc++-v3 FAQ, question\n+ *  A brief overview of an ABI is given in the libstdc++ FAQ, question\n  *  5.8 (you may have a copy of the FAQ locally, or you can view the online\n  *  version at http://gcc.gnu.org/onlinedocs/libstdc++/faq/index.html#5_8).\n  *"}, {"sha": "30c8725e8e02c862a20b593496cf8710444b3e1e", "filename": "libstdc++-v3/docs/doxygen/guide.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fguide.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fguide.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fguide.html?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -4,15 +4,15 @@\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n <head>\n   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n-  <title>Build and Writing Guide for libstdc++-v3 Doxygen</title>\n+  <title>Build and Writing Guide for libstdc++ Doxygen</title>\n   <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\n </head>\n \n <body bgcolor=\"#ffffff\">\n \n-<h1>libstdc++-v3 Source Documentation</h1>\n+<h1>libstdc++ Source Documentation</h1>\n \n-<p>This file is docs/doxygen/guide.html in the libstdc++-v3 source tree.  It\n+<p>This file is docs/doxygen/guide.html in the libstdc++ source tree.  It\n    is not included in the generated pages (no real point to doing that).\n </p>\n \n@@ -26,7 +26,7 @@ <h1>libstdc++-v3 Source Documentation</h1>\n <a name=\"creating\"><h2>Creating the pages</h2></a>\n <p>The Makefile rules <code>'make doxygen'</code>,\n    <code>'make doxygen-maint'</code>, and <code>'make doxygen-man'</code>\n-   in the libstdc++-v3 build directory generate the user-level HTML docs, the\n+   in the libstdc++ build directory generate the user-level HTML docs, the\n    maintainer-level HTML docs, and the man pages, respectively.  Prerequisite\n    tools are Bash 2.x, \n    <a href=\"http://www.doxygen.org/\">\n@@ -57,7 +57,7 @@ <h1>libstdc++-v3 Source Documentation</h1>\n </p>\n \n <a name=\"writing\"><h2>Writing the markup</h2></a>\n-<p>In general, libstdc++-v3 files should be formatted according to the GNU\n+<p>In general, libstdc++ files should be formatted according to the GNU\n    C++ Coding Standard rules found in the file\n    <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/C++STYLE\">C++STYLE</a>.\n    Before any doxygen-specific formatting tweaks are made, please try to make"}, {"sha": "2f57764fae8d77a7c1d6dfa3077ef78b22bffb2a", "filename": "libstdc++-v3/docs/doxygen/mainpage.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.html?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -1,7 +1,7 @@\n <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n <head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">\n-<title>libstdc++-v3 Source: Main Index</title>\n+<title>libstdc++ Source: Main Index</title>\n <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\n </head>\n \n@@ -21,13 +21,13 @@\n      Tags actually work like they're supposed to in HTML.\n -->\n \n-<h1>libstdc++-v3 Source Documentation</h1>\n+<h1>libstdc++ Source Documentation</h1>\n \n <h2>Documentation Overview</h2>\n \n <p class=\"smallertext\">@LEVEL@-level docs, generated @DATE@.</p>\n \n-<p>There are two types of documentation for libstdc++-v3.  One is the\n+<p>There are two types of documentation for libstdc++.  One is the\n    distribution documentation, which can be read online at\n    <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/documentation.html\">http://gcc.gnu.org/onlinedocs/libstdc++/documentation.html</a>\n    or offline from docs/html/documentation.html in the library source\n@@ -45,11 +45,11 @@ <h2>Documentation Overview</h2>\n <p>Here are entry points to all the pages generated by Doxygen:\n    <ul>\n     <li><a href=\"modules.html\">Modules</a>\n+    <li><a href=\"namespaces.html\">Namespace List</a>\n     <li><a href=\"hierarchy.html\">Class List</a>\n     <li><a href=\"annotated.html\">Class Annotated List</a>\n     <li><a href=\"classes.html\">Class Alphabetical Index</a>\n     <li><a href=\"globals_func.html\">Function Alphabetical List</a>\n-    <li><a href=\"namespaces.html\">Namespace List</a>\n     <li><a href=\"files.html\">Source File List</a>\n     <li><a href=\"todo.html\">TODO List</a> (This is incomplete... how ironic.)\n    </ul>\n@@ -74,7 +74,7 @@ <h2>Generating the documentation</h2>\n    create (and write) the pages.\n \n <h2>License, Copyright, and Other Lawyerly Verbosity</h2>\n-<p>The libstdc++-v3 documentation is released under\n+<p>The libstdc++ documentation is released under\n    <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/license.html\">\n    these terms</a>.\n </p>"}, {"sha": "2aca793e14a98cecc8d4f8d852a8862073abceba", "filename": "libstdc++-v3/docs/doxygen/run_doxygen", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -155,6 +155,7 @@ fi\n   cd $builddir\n   sed -e \"s=@outdir@=${outdir}=g\" \\\n       -e \"s=@srcdir@=${srcdir}=g\" \\\n+      -e \"s=@builddir@=${builddir}=g\" \\\n       -e \"s=@host_alias@=${host_alias}=g\" \\\n       -e \"s=@html_output_dir@=html_${mode}=\" \\\n       -e \"s=@enabled_sections@=${enabled_sections}=\" \\"}, {"sha": "370c6ce6bb150f566aede9ffaefc091981f8fd2b", "filename": "libstdc++-v3/docs/doxygen/tables.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -635,7 +635,7 @@ <h1>Tables</h1>\n <hr />\n <p class=\"smallertext\"><em>\n See <a href=\"mainpage.html\">mainpage.html</a> for copying conditions.\n-See <a href=\"http://gcc.gnu.org/libstdc++/\">the libstdc++-v3 homepage</a>\n+See <a href=\"http://gcc.gnu.org/libstdc++/\">the libstdc++ homepage</a>\n for more information.\n </em></p>\n "}, {"sha": "3b679b511a850b4538e1dff5b14273fae90d2ce4", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 133, "deletions": 64, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -1,4 +1,4 @@\n-# Doxyfile 1.4.4\n+# Doxyfile 1.5.1\n \n # This file describes the settings to be used by the documentation system\n # doxygen (www.doxygen.org) for a project\n@@ -17,7 +17,7 @@\n # The PROJECT_NAME tag is a single word (or a sequence of words surrounded \n # by quotes) that should identify the project.\n \n-PROJECT_NAME           = \"libstdc++\"\n+PROJECT_NAME           = libstdc++\n \n # The PROJECT_NUMBER tag can be used to enter a project or revision number. \n # This could be handy for archiving the generated documentation or \n@@ -45,11 +45,11 @@ CREATE_SUBDIRS         = NO\n # documentation generated by doxygen is written. Doxygen will use this \n # information to generate all constant output in the proper language. \n # The default language is English, other supported languages are: \n-# Brazilian, Catalan, Chinese, Chinese-Traditional, Croatian, Czech, Danish, \n-# Dutch, Finnish, French, German, Greek, Hungarian, Italian, Japanese, \n-# Japanese-en (Japanese with English messages), Korean, Korean-en, Norwegian, \n-# Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Slovene, Spanish, \n-# Swedish, and Ukrainian.\n+# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, \n+# Croatian, Czech, Danish, Dutch, Finnish, French, German, Greek, Hungarian, \n+# Italian, Japanese, Japanese-en (Japanese with English messages), Korean, \n+# Korean-en, Lithuanian, Norwegian, Polish, Portuguese, Romanian, Russian, \n+# Serbian, Slovak, Slovene, Spanish, Swedish, and Ukrainian.\n \n OUTPUT_LANGUAGE        = English\n \n@@ -97,10 +97,11 @@ ABBREVIATE_BRIEF       =\n \n ALWAYS_DETAILED_SEC    = YES\n \n-# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all \n-# inherited members of a class in the documentation of that class as if those \n-# members were ordinary class members. Constructors, destructors and assignment \n-# operators of the base classes will not be shown.\n+# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show\n+# all inherited members of a class in the documentation of that class\n+# as if those members were ordinary class members. Constructors,\n+# destructors and assignment operators of the base classes will not be\n+# shown.\n \n INLINE_INHERITED_MEMB  = YES\n \n@@ -163,13 +164,6 @@ DETAILS_AT_TOP         = YES\n \n INHERIT_DOCS           = YES\n \n-# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC \n-# tag is set to YES, then doxygen will reuse the documentation of the first \n-# member in the group (if any) for the other members of the group. By default \n-# all members of a group must be documented explicitly.\n-\n-DISTRIBUTE_GROUP_DOC   = YES\n-\n # If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce \n # a new page for each member. If set to NO, the documentation of a member will \n # be part of the file/class/namespace that contains it.\n@@ -191,10 +185,10 @@ TAB_SIZE               = 4\n ALIASES                = \"doctodo=@todo\\nDoc me!  See docs/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more.\" \\\n                          \"isiosfwd=One of the @link s27_2_iosfwd I/O forward declarations @endlink\"\n \n-# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of\n-# C sources only. Doxygen will then generate output that is more\n-# tailored for C.  For instance, some of the names that are used will\n-# be different. The list of all members will be omitted, etc.\n+# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C \n+# sources only. Doxygen will then generate output that is more tailored for C. \n+# For instance, some of the names that are used will be different. The list \n+# of all members will be omitted, etc.\n \n OPTIMIZE_OUTPUT_FOR_C  = NO\n \n@@ -205,6 +199,23 @@ OPTIMIZE_OUTPUT_FOR_C  = NO\n \n OPTIMIZE_OUTPUT_JAVA   = NO\n \n+# If you use STL classes (i.e. std::string, std::vector, etc.) but do\n+# not want to include (a tag file for) the STL sources as input, then\n+# you should set this tag to YES in order to let doxygen match\n+# functions declarations and definitions whose arguments contain STL\n+# classes (e.g. func(std::string); v.s.  func(std::string) {}). This\n+# also make the inheritance and collaboration diagrams that involve\n+# STL classes more complete and accurate.\n+\n+BUILTIN_STL_SUPPORT    = NO\n+\n+# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC \n+# tag is set to YES, then doxygen will reuse the documentation of the first \n+# member in the group (if any) for the other members of the group. By default \n+# all members of a group must be documented explicitly.\n+\n+DISTRIBUTE_GROUP_DOC   = YES\n+\n # Set the SUBGROUPING tag to YES (the default) to allow class member groups of \n # the same type (for instance a group of public functions) to be put as a \n # subgroup of that type (e.g. under the Public Functions section). Set it to \n@@ -289,13 +300,14 @@ INTERNAL_DOCS          = NO\n # in case and if your file system supports case sensitive file names. Windows \n # and Mac users are advised to set this option to NO.\n \n-CASE_SENSE_NAMES       = NO\n+CASE_SENSE_NAMES       = NO#\n \n # If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen \n # will show members with their full class and namespace scopes in the \n # documentation. If set to YES the scope will be hidden.\n \n-HIDE_SCOPE_NAMES       = YES\n+HIDE_SCOPE_NAMES       = NO\n+#HIDE_SCOPE_NAMES       = YES\n \n # If the SHOW_INCLUDE_FILES tag is set to YES (the default) then\n # Doxygen will put a list of the files that are included by a file in\n@@ -330,6 +342,7 @@ SORT_BRIEF_DOCS        = YES\n # Note: This option applies only to the class list, not to the \n # alphabetical list.\n \n+#SORT_BY_SCOPE_NAME     = NO\n SORT_BY_SCOPE_NAME     = YES\n \n # The GENERATE_TODOLIST tag can be used to enable (YES) or \n@@ -379,7 +392,7 @@ SHOW_USED_FILES        = YES\n \n # If the sources in your project are distributed over multiple\n # directories then setting the SHOW_DIRECTORIES tag to YES will show\n-# the directory hierarchy in the documentation. The default is YES.\n+# the directory hierarchy in the documentation. The default is NO.\n \n SHOW_DIRECTORIES       = YES\n \n@@ -389,7 +402,7 @@ SHOW_DIRECTORIES       = YES\n # invoke the program by executing (via popen()) the command <command>\n # <input-file>, where <command> is the value of the\n # FILE_VERSION_FILTER tag, and <input-file> is the name of an input\n-# file provided by doxygen. Whatever the progam writes to standard\n+# file provided by doxygen. Whatever the program writes to standard\n # output is used as the file version. See the manual for examples.\n \n FILE_VERSION_FILTER    = \n@@ -455,14 +468,15 @@ WARN_LOGFILE           =\n # files or directories with spaces.\n \n INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n+                         @srcdir@/libsupc++ \\\n+                         @srcdir@/libsupc++/exception \\\n+                         @srcdir@/libsupc++/new \\\n+                         @srcdir@/libsupc++/typeinfo \\\n                          include/@host_alias@/bits \\\n                          include/bits \\\n+                         include/debug \\\n                          include/ext \\\n                          include/tr1 \\\n-                         @srcdir@/libsupc++/exception \\\n-                         @srcdir@/libsupc++/new \\\n-                         @srcdir@/libsupc++/typeinfo \\\n-                         @srcdir@/libsupc++/cxxabi.h \\\n                          include/algorithm \\\n                          include/bitset \\\n                          include/deque \\\n@@ -481,6 +495,7 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/memory \\\n                          include/numeric \\\n                          include/ostream \\\n+                         include/queue \\\n                          include/set \\\n                          include/sstream \\\n                          include/stack \\\n@@ -490,18 +505,48 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/utility \\\n                          include/valarray \\\n                          include/vector \\\n+                         include/debug/bitset \\\n+                         include/debug/deque \\\n+                         include/debug/hash_map \\\n+                         include/debug/hash_set \\\n+                         include/debug/list \\\n+                         include/debug/map \\\n+                         include/debug/set \\\n+                         include/debug/string \\\n+                         include/debug/vector \\\n                          include/ext/algorithm \\\n                          include/ext/functional \\\n                          include/ext/hash_map \\\n                          include/ext/hash_set \\\n+                         include/ext/iterator \\\n                          include/ext/memory \\\n                          include/ext/numeric \\\n+                         include/ext/rb_tree \\\n                          include/ext/rope \\\n                          include/ext/slist \\\n+                         include/ext/pb_ds \\\n+                         include/ext/pb_ds/detail \\\n                          include/tr1/array \\\n+                         include/tr1/cctype \\\n+                         include/tr1/cfenv \\\n+                         include/tr1/cfloat \\\n+                         include/tr1/cinttypes \\\n+                         include/tr1/climits \\\n+                         include/tr1/cmath \\\n+                         include/tr1/complex \\\n+                         include/tr1/cstdarg \\\n+                         include/tr1/cstdbool \\\n+                         include/tr1/cstdint \\\n+                         include/tr1/cstdio \\\n+                         include/tr1/cstdlib \\\n+                         include/tr1/ctgmath \\\n+                         include/tr1/ctime \\\n+                         include/tr1/cwchar \\\n+                         include/tr1/cwctype \\\n                          include/tr1/functional \\\n                          include/tr1/hashtable \\\n                          include/tr1/memory \\\n+                         include/tr1/random \\\n                          include/tr1/tuple \\\n                          include/tr1/type_traits \\\n                          include/tr1/unordered_map \\\n@@ -513,9 +558,10 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n # *.cpp and *.h) to filter out the source-files in the directories. If\n # left blank the following patterns are tested: *.c *.cc *.cxx *.cpp\n # *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx *.hpp *.h++\n-# *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm\n+# *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py\n \n FILE_PATTERNS          = *.h \\\n+                         *.hpp \\\n                          *.tcc\n \n # The RECURSIVE tag can be used to turn specify whether or not subdirectories \n@@ -529,14 +575,11 @@ RECURSIVE              = NO\n # exclude a subdirectory from a directory tree whose root is specified\n # with the INPUT tag.\n \n-EXCLUDE                = Makefile \\\n-                         CVS \\\n-                         include/bits/demangle.h \\\n-                         stdc++.h.gch\n+EXCLUDE                = Makefile\n \n-# The EXCLUDE_SYMLINKS tag can be used select whether or not files or\n-# directories that are symbolic links (a Unix filesystem feature) are\n-# excluded from the input.\n+# The EXCLUDE_SYMLINKS tag can be used select whether or not files or \n+# directories that are symbolic links (a Unix filesystem feature) are excluded \n+# from the input.\n \n EXCLUDE_SYMLINKS       = NO\n \n@@ -546,10 +589,10 @@ EXCLUDE_SYMLINKS       = NO\n # against the file with absolute path, so to exclude all test directories \n # for example use the pattern */test/*\n \n-EXCLUDE_PATTERNS       = CVS \\\n-                         stamp-* \\\n+EXCLUDE_PATTERNS       = stamp-* \\\n                          Makefile \\\n-                         *gch*\n+                         *gch* \\\n+                         */.svn/*\n \n # The EXAMPLE_PATH tag can be used to specify one or more files or \n # directories that contain example code fragments that are included (see \n@@ -577,13 +620,13 @@ EXAMPLE_RECURSIVE      = NO\n \n IMAGE_PATH             = \n \n-# The INPUT_FILTER tag can be used to specify a program that doxygen\n-# should invoke to filter for each input file. Doxygen will invoke the\n-# filter program by executing (via popen()) the command <filter>\n-# <input-file>, where <filter> is the value of the INPUT_FILTER tag,\n-# and <input-file> is the name of an input file. Doxygen will then use\n-# the output that the filter program writes to standard output.  If\n-# FILTER_PATTERNS is specified, this tag will be ignored.\n+# The INPUT_FILTER tag can be used to specify a program that doxygen should \n+# invoke to filter for each input file. Doxygen will invoke the filter program \n+# by executing (via popen()) the command <filter> <input-file>, where <filter> \n+# is the value of the INPUT_FILTER tag, and <input-file> is the name of an \n+# input file. Doxygen will then use the output that the filter program writes \n+# to standard output.  If FILTER_PATTERNS is specified, this tag will be \n+# ignored.\n \n INPUT_FILTER           = \n \n@@ -636,6 +679,13 @@ REFERENCED_BY_RELATION = YES\n \n REFERENCES_RELATION    = YES\n \n+# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)\n+# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from\n+# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will\n+# link to the source code.  Otherwise they will link to the documentstion.\n+\n+REFERENCES_LINK_SOURCE = YES\n+\n # If the USE_HTAGS tag is set to YES then the references to source code \n # will point to the HTML generated by the htags(1) tool instead of doxygen \n # built-in source browser. The htags tool is part of GNU's global source \n@@ -671,10 +721,11 @@ COLS_IN_ALPHA_INDEX    = 2\n # The IGNORE_PREFIX tag can be used to specify one or more prefixes that \n # should be ignored while generating the index headers.\n \n-IGNORE_PREFIX          = std \\\n-                         std::tr1 \\\n-                         __gnu_cxx \\\n-                         __gnu_debug\n+#IGNORE_PREFIX          = std \\\n+#                         std::tr1 \\\n+#                         __gnu_cxx \\\n+#                         __gnu_debug\n+IGNORE_PREFIX          = \n \n #---------------------------------------------------------------------------\n # configuration options related to the HTML output\n@@ -942,7 +993,7 @@ MAN_LINKS              = NO\n # generate an XML file that captures the structure of \n # the code including all documentation.\n \n-GENERATE_XML           = NO\n+GENERATE_XML           = YES\n \n # The XML_OUTPUT tag is used to specify where the XML pages will be put. \n # If a relative path is entered the value of OUTPUT_DIRECTORY will be \n@@ -1028,14 +1079,15 @@ ENABLE_PREPROCESSING   = YES\n # names in the source code. If set to NO (the default) only conditional \n # compilation will be performed. Macro expansion can be done in a controlled \n # way by setting EXPAND_ONLY_PREDEF to YES.\n+# GLIBCXX NOTE: Necessary for namespaces to be sorted correctly.\n \n MACRO_EXPANSION        = YES\n \n # If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES \n # then the macro expansion is limited to the macros specified with the \n-# PREDEFINED and EXPAND_AS_PREDEFINED tags.\n+# PREDEFINED and EXPAND_AS_DEFINED tags.\n \n-EXPAND_ONLY_PREDEF     = YES\n+EXPAND_ONLY_PREDEF     = NO\n \n # If the SEARCH_INCLUDES tag is set to YES (the default) the includes files \n # in the INCLUDE_PATH (see below) will be search if a #include is found.\n@@ -1055,19 +1107,25 @@ INCLUDE_PATH           =\n \n INCLUDE_FILE_PATTERNS  = \n \n-# The PREDEFINED tag can be used to specify one or more macro names that \n-# are defined before the preprocessor is started (similar to the -D option of \n-# gcc). The argument of the tag is a list of macros of the form: name \n-# or name=definition (no spaces). If the definition and the = are \n-# omitted =1 is assumed. To prevent a macro definition from being \n-# undefined via #undef or recursively expanded use the := operator \n-# instead of the = operator.\n+# The PREDEFINED tag can be used to specify one or more macro names\n+# that are defined before the preprocessor is started (similar to the\n+# -D option of gcc). The argument of the tag is a list of macros of\n+# the form: name or name=definition (no spaces). If the definition and\n+# the = are omitted =1 is assumed. To prevent a macro definition from\n+# being undefined via #undef or recursively expanded use the :=\n+# operator instead of the = operator.\n \n PREDEFINED             = __GTHREADS \\\n                          _GLIBCXX_STD=std \\\n+                         \"_GLIBCXX_BEGIN_NAMESPACE(name)=namespace name {\" \\\n+             \"_GLIBCXX_BEGIN_NESTED_NAMESPACE(name, unused)=namespace name {\" \\\n+                         _GLIBCXX_END_NAMESPACE=} \\\n+                         _GLIBCXX_END_NESTED_NAMESPACE=} \\\n+                         \"_GLIBCXX_TEMPLATE_ARGS=...\" \\\n                          _GLIBCXX_DEPRECATED \\\n                          _GLIBCXX_USE_WCHAR_T \\\n                          _GLIBCXX_USE_LONG_LONG \\\n+                         __glibcxx_function_requires=// \\\n                          __glibcxx_class_requires=// \\\n                          __glibcxx_class_requires2=// \\\n                          __glibcxx_class_requires3=// \\\n@@ -1187,7 +1245,8 @@ UML_LOOK               = NO\n # If set to YES, the inheritance and collaboration graphs will show the \n # relations between templates and their instances.\n \n-TEMPLATE_RELATIONS     = YES\n+#TEMPLATE_RELATIONS     = YES\n+TEMPLATE_RELATIONS     = NO\n \n # If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT \n # tags are set to YES then doxygen will generate a graph for each documented \n@@ -1212,6 +1271,15 @@ INCLUDED_BY_GRAPH      = NO\n \n CALL_GRAPH             = NO\n \n+# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then doxygen\n+# will generate a caller dependency graph for every global function or\n+# class method.  Note that enabling this option will significantly\n+# increase the time of a run.  So in most cases it will be better to\n+# enable caller graphs for selected functions only using the\n+# \\callergraph command.\n+\n+CALLER_GRAPH           = NO\n+\n # If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen \n # will graphical hierarchy of all classes instead of a textual one.\n \n@@ -1228,6 +1296,7 @@ DIRECTORY_GRAPH        = YES\n # generated by dot. Possible values are png, jpg, or gif\n # If left blank png will be used.\n \n+#DOT_IMAGE_FORMAT       = svg\n DOT_IMAGE_FORMAT       = png\n \n # The tag DOT_PATH can be used to specify the path where the dot tool can be \n@@ -1283,7 +1352,7 @@ DOT_TRANSPARENT        = NO\n # makes dot run faster, but since only newer versions of dot (>1.8.10) \n # support this, this feature is disabled by default.\n \n-DOT_MULTI_TARGETS      = NO\n+DOT_MULTI_TARGETS      = YES\n \n # If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will \n # generate a legend page explaining the meaning of the various boxes and "}, {"sha": "8dc0ebd711c2268f95789473e53638dfd4cf7c05", "filename": "libstdc++-v3/docs/html/17_intro/license.html", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Flicense.html?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -10,7 +10,7 @@\n    <meta name=\"KEYWORDS\" content=\"libstdc++, license, licence\" />\n    <meta name=\"DESCRIPTION\" content=\"Copying restrictions for libstdc++.\" />\n    <meta name=\"GENERATOR\" content=\"vi and eight fingers\" />\n-   <title>libstdc++-v3 copying</title>\n+   <title>libstdc++ copying</title>\n <link rel=\"StyleSheet\" href=\"../lib3styles.css\" type=\"text/css\" />\n <link rel=\"Start\" rev=\"Copyright\" href=\"../documentation.html\" type=\"text/html\"\n  title=\"GNU C++ Standard Library\" />\n@@ -19,7 +19,7 @@\n \n <h1 class=\"centered\"><a name=\"top\">Licenses for the Library</a></h1>\n \n-<p>There are two licenses affecting GNU libstdc++-v3:  one for the code, and\n+<p>There are two licenses affecting GNU libstdc++:  one for the code, and\n    one for the documentation.  Here we will describe both of them, and try\n    to answer some of the widespread questions.  If you have more questions,\n    ask the FSF or the\n@@ -31,7 +31,7 @@ <h1 class=\"centered\"><a name=\"top\">Licenses for the Library</a></h1>\n \n <h2>The Code:  Runtime GPL</h2>\n \n-<p>The source code of libstdc++-v3 is distributed under version 2 of the\n+<p>The source code of libstdc++ is distributed under version 2 of the\n    <a href=\"COPYING\">GNU General Public License</a>, with the so-called\n    &quot;runtime exception,&quot; as follows (or see any header or\n    implementation file):\n@@ -80,17 +80,23 @@ <h2>The Code:  Runtime GPL</h2>\n \n <hr />\n \n-<h2>The Docs:  FDL</h2>\n+<h2>The Docs:  GPL, FDL</h2>\n \n <p>The documentation shipped with the library and made available over the\n-   web, including the pages generated from source comments, are copyrighted\n+   web, excluding the pages generated from source comments, are copyrighted\n    by the Free Software Foundation, and placed under\n    the <a href=\"COPYING.DOC\">GNU Free Documentation License version 1.1</a>.\n    There are no Front-Cover Texts, no Back-Cover Texts, and\n    <!-- as far as I know -->\n    no Invariant Sections.\n </p>\n \n+<p> For documentation generated by doxygen or other automated tools\n+via processing source code comments and markup, the original source\n+code license applies to the generated files. Thus, the doxygen\n+documents are licensed GPL.\n+</p>\n+\n <p>If you plan on making copies of the documentation, please let us know.\n    We can probably offer suggestions.\n </p>"}, {"sha": "7778773a3b1716dceb88c075653e0dd7785fc908", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -44,6 +44,8 @@\n \n #pragma GCC system_header\n \n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   /// @brief  Empty base class for codecvt facet [22.2.1.5].\n   class codecvt_base\n   {\n@@ -467,4 +469,6 @@\n       ~codecvt_byname() { }\n     };\n \n+_GLIBCXX_END_NAMESPACE\n+\n #endif // _CODECVT_H"}, {"sha": "8e436dd682b08e96591a7d83faac556f0dad3063", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -78,9 +78,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n _GLIBCXX_END_NAMESPACE\n \n-struct __true_type { };\n-struct __false_type { };\n-\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n namespace __detail\n@@ -96,6 +93,10 @@ namespace __detail\n   __two& __test_type(...);\n } // namespace __detail\n \n+\n+  struct __true_type { };\n+  struct __false_type { };\n+\n   template<bool>\n     struct __truth_type\n     { typedef __false_type __type; };"}, {"sha": "aad0b70dd71f47315f2f36acfc935777dcc5f4a4", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -44,6 +44,7 @@\n \n #include <ctime>\t// For struct tm\n #include <cwctype>\t// For wctype_t\n+#include <bits/ctype_base.h>\t\n #include <iosfwd>\n #include <bits/ios_base.h>  // For ios_base, ios_base::iostate\n #include <streambuf>\n@@ -130,7 +131,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 22.2.1.1  Template class ctype\n   // Include host and configuration specific ctype enums for ctype_base.\n-  #include <bits/ctype_base.h>\n \n   // Common base for ctype<_CharT>.\n   /**\n@@ -1530,8 +1530,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);\n \n-  // 22.2.1.5  Template class codecvt\n-  #include <bits/codecvt.h>\n+_GLIBCXX_END_NAMESPACE\n+\n+// 22.2.1.5  Template class codecvt\n+#include <bits/codecvt.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 22.2.2  The numeric category.\n   class __num_base"}, {"sha": "58d4e6b82d91d40217f6c47c27c6bdb8bf370197", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/bitset\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_BITSET\n #define _GLIBCXX_DEBUG_BITSET\n "}, {"sha": "b914a2cca4de720189b01ac0959dfc9a400546ea", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/debug.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_MACRO_SWITCH_H\n #define _GLIBCXX_DEBUG_MACRO_SWITCH_H 1\n "}, {"sha": "79142d9ef2a4c7d5a31e83df292c191deb104fdc", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/deque\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_DEQUE\n #define _GLIBCXX_DEBUG_DEQUE 1\n "}, {"sha": "8975285b9d714c28442dc5fae71738be989d4152", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -27,6 +27,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/formatter.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_FORMATTER_H\n #define _GLIBCXX_DEBUG_FORMATTER_H 1\n "}, {"sha": "a61c0b9f4ee7858c6c7d7c6b21a7180b098587b9", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/functions.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_FUNCTIONS_H\n #define _GLIBCXX_DEBUG_FUNCTIONS_H 1\n \n@@ -109,7 +113,7 @@ namespace __gnu_debug\n   */\n   template<typename _Integral>\n     inline bool\n-    __valid_range_aux(const _Integral&, const _Integral&, __true_type)\n+    __valid_range_aux(const _Integral&, const _Integral&, std::__true_type)\n     { return true; }\n \n   /** We have iterators, so figure out what kind of iterators that are\n@@ -118,7 +122,7 @@ namespace __gnu_debug\n   template<typename _InputIterator>\n     inline bool\n     __valid_range_aux(const _InputIterator& __first,\n-\t\t      const _InputIterator& __last, __false_type)\n+\t\t      const _InputIterator& __last, std::__false_type)\n   {\n     typedef typename std::iterator_traits<_InputIterator>::iterator_category\n       _Category;"}, {"sha": "f44586b0ab6c5d02c6c24ee890f15243d815e746", "filename": "libstdc++-v3/include/debug/hash_map", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/hash_map\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_HASH_MAP\n #define _GLIBCXX_DEBUG_HASH_MAP 1\n "}, {"sha": "1eb6acb869c3077b460859b449b158e2d3e5ee45", "filename": "libstdc++-v3/include/debug/hash_map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/hash_map.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_HASH_MAP_H\n #define _GLIBCXX_DEBUG_HASH_MAP_H 1\n "}, {"sha": "e3c689ac7cd295c89e793abd15e84b80d70a2a8e", "filename": "libstdc++-v3/include/debug/hash_multimap.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/hash_multimap.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_HASH_MULTIMAP_H\n #define _GLIBCXX_DEBUG_HASH_MULTIMAP_H 1\n "}, {"sha": "93464969487140b0c73bb60417b94f0b207b3038", "filename": "libstdc++-v3/include/debug/hash_multiset.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/hash_multiset.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_HASH_MULTISET_H\n #define _GLIBCXX_DEBUG_HASH_MULTISET_H 1\n "}, {"sha": "4b98fefab1f6052b32c13820ed182e2b7093d80d", "filename": "libstdc++-v3/include/debug/hash_set", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/hash_set\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_HASH_SET\n #define _GLIBCXX_DEBUG_HASH_SET 1\n "}, {"sha": "2d3e0b303fb66c2600275df508040ba7b65f34be", "filename": "libstdc++-v3/include/debug/hash_set.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/hash_set.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_HASH_SET_H\n #define _GLIBCXX_DEBUG_HASH_SET_H 1\n "}, {"sha": "939fe4da48d32fda476394855ef74972609714a7", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,37 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file debug/list\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_LIST\n #define _GLIBCXX_DEBUG_LIST 1\n "}, {"sha": "ce4091924b1bcb48620d180745b7fedc8bde79ad", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/macros.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_MACROS_H\n #define _GLIBCXX_DEBUG_MACROS_H 1\n "}, {"sha": "2435154da2ea87fc86fcd0a963b483d2530f7af8", "filename": "libstdc++-v3/include/debug/map", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -1,6 +1,6 @@\n // Debugging map/multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/map\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_MAP\n #define _GLIBCXX_DEBUG_MAP 1\n "}, {"sha": "96591ca15c8a87bbf96b43d4fd5d6483ff4b17ed", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/map.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_MAP_H\n #define _GLIBCXX_DEBUG_MAP_H 1\n "}, {"sha": "cbd6704520f20369a1005295aba03edbe0ba9539", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/multimap.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_MULTIMAP_H\n #define _GLIBCXX_DEBUG_MULTIMAP_H 1\n "}, {"sha": "a37099e1ac808a55989945f80a5a9ec826570d44", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/multiset.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_MULTISET_H\n #define _GLIBCXX_DEBUG_MULTISET_H 1\n "}, {"sha": "2d26f57a396c8993336b9b946483e96fd6573ea3", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/safe_base.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_SAFE_BASE_H\n #define _GLIBCXX_DEBUG_SAFE_BASE_H 1\n "}, {"sha": "3d8ba59419b13b36465cc214f0e1d0a40cd3210b", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/safe_iterator.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_SAFE_ITERATOR_H\n #define _GLIBCXX_DEBUG_SAFE_ITERATOR_H 1\n "}, {"sha": "d23e90f048aa566ab115d23d7cf29aa446d0866c", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,9 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file safe_iterator.tcc\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+/** @file debug/safe_iterator.tcc\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n  */\n \n #ifndef _GLIBCXX_DEBUG_SAFE_ITERATOR_TCC"}, {"sha": "b5d6cce320dcb4b0602ae0eb784dbb5e521d34bb", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/safe_sequence.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_SAFE_SEQUENCE_H\n #define _GLIBCXX_DEBUG_SAFE_SEQUENCE_H 1\n "}, {"sha": "e5f4e37afb770f8f375f187e72939c35329515d6", "filename": "libstdc++-v3/include/debug/set", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/set\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_SET\n #define _GLIBCXX_DEBUG_SET 1\n "}, {"sha": "6c2ce9fd1fc68972eb4b4630f1da2cc2699e4784", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/set.h\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_SET_H\n #define _GLIBCXX_DEBUG_SET_H 1\n "}, {"sha": "070ca1fe58b7e0b7dd08388e9735983b52ca32c3", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/string\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_STRING\n #define _GLIBCXX_DEBUG_STRING 1\n "}, {"sha": "33b8b638a779d2b3200385b15eab434242489814", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file debug/vector\n+ *  This file is a GNU debug extension to the Standard C++ Library.\n+ */\n+\n #ifndef _GLIBCXX_DEBUG_VECTOR\n #define _GLIBCXX_DEBUG_VECTOR 1\n "}, {"sha": "93fa8e63ad538489246fecd9427814a06e04bcb1", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using std::size_t;\n   using std::ptrdiff_t;\n \n-  namespace __balloc\n+  namespace __detail\n   {\n     /** @class  __mini_vector bitmap_allocator.h bitmap_allocator.h\n      *\n@@ -361,7 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       : public std::unary_function<typename std::pair<_Tp, _Tp>, bool>\n       {\n \ttypedef typename std::pair<_Tp, _Tp> _Block_pair;\n-\ttypedef typename __balloc::__mini_vector<_Block_pair> _BPVector;\n+\ttypedef typename __detail::__mini_vector<_Block_pair> _BPVector;\n \ttypedef typename _BPVector::difference_type _Counter_type;\n \n \tsize_t* _M_pbitmap;\n@@ -385,11 +385,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  // store, then there is definitely no space for another single\n \t  // object, so just return false.\n \t  _Counter_type __diff = \n-\t    __gnu_cxx::__balloc::__num_bitmaps(__bp);\n+\t    __gnu_cxx::__detail::__num_bitmaps(__bp);\n \n \t  if (*(reinterpret_cast<size_t*>\n \t\t(__bp.first) - (__diff + 1))\n-\t      == __gnu_cxx::__balloc::__num_blocks(__bp))\n+\t      == __gnu_cxx::__detail::__num_blocks(__bp))\n \t    return false;\n \n \t  size_t* __rover = reinterpret_cast<size_t*>(__bp.first) - 1;\n@@ -428,7 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     template<typename _Tp>\n       class _Bitmap_counter\n       {\n-\ttypedef typename __balloc::__mini_vector<typename std::pair<_Tp, _Tp> >\n+\ttypedef typename __detail::__mini_vector<typename std::pair<_Tp, _Tp> >\n \t_BPVector;\n \ttypedef typename _BPVector::size_type _Index_type;\n \ttypedef _Tp pointer;\n@@ -534,7 +534,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       size_t __mask = 1 << __pos;\n       *__pbmap |= __mask;\n     }\n-  } // namespace __balloc\n+  } // namespace __detail\n \n   /** @brief  Generic Version of the bsf instruction.\n    */\n@@ -550,7 +550,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   class free_list\n   {\n     typedef size_t* \t\t\t\tvalue_type;\n-    typedef __balloc::__mini_vector<value_type> vector_type;\n+    typedef __detail::__mini_vector<value_type> vector_type;\n     typedef vector_type::iterator \t\titerator;\n     typedef __mutex\t\t\t\t__mutex_type;\n \n@@ -615,7 +615,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n \t  \n       // Just add the block to the list of free lists unconditionally.\n-      iterator __temp = __gnu_cxx::__balloc::__lower_bound\n+      iterator __temp = __gnu_cxx::__detail::__lower_bound\n \t(__free_list.begin(), __free_list.end(), \n \t *__addr, _LT_pointer_compare());\n \n@@ -746,7 +746,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef typename std::pair<_Alloc_block*, _Alloc_block*> _Block_pair;\n \n       typedef typename \n-      __balloc::__mini_vector<_Block_pair> _BPVector;\n+      __detail::__mini_vector<_Block_pair> _BPVector;\n \n #if defined _GLIBCXX_DEBUG\n       // Complexity: O(lg(N)). Where, N is the number of block of size\n@@ -755,13 +755,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _S_check_for_free_blocks() throw()\n       {\n \ttypedef typename \n-\t  __gnu_cxx::__balloc::_Ffit_finder<_Alloc_block*> _FFF;\n+\t  __gnu_cxx::__detail::_Ffit_finder<_Alloc_block*> _FFF;\n \t_FFF __fff;\n \ttypedef typename _BPVector::iterator _BPiter;\n \t_BPiter __bpi = \n-\t  __gnu_cxx::__balloc::__find_if\n+\t  __gnu_cxx::__detail::__find_if\n \t  (_S_mem_blocks.begin(), _S_mem_blocks.end(), \n-\t   __gnu_cxx::__balloc::_Functor_Ref<_FFF>(__fff));\n+\t   __gnu_cxx::__detail::_Functor_Ref<_FFF>(__fff));\n \n \t_GLIBCXX_DEBUG_ASSERT(__bpi == _S_mem_blocks.end());\n       }\n@@ -786,7 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n \n \tconst size_t __num_bitmaps = (_S_block_size\n-\t\t\t\t      / size_t(__balloc::bits_per_block));\n+\t\t\t\t      / size_t(__detail::bits_per_block));\n \tconst size_t __size_to_allocate = sizeof(size_t) \n \t  + _S_block_size * sizeof(_Alloc_block) \n \t  + __num_bitmaps * sizeof(size_t);\n@@ -820,7 +820,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       static _BPVector _S_mem_blocks;\n       static size_t _S_block_size;\n-      static __gnu_cxx::__balloc::\n+      static __gnu_cxx::__detail::\n       _Bitmap_counter<_Alloc_block*> _S_last_request;\n       static typename _BPVector::size_type _S_last_dealloc_index;\n #if defined __GTHREADS\n@@ -872,21 +872,21 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  {\n \t    // Fall Back to First Fit algorithm.\n \t    typedef typename \n-\t      __gnu_cxx::__balloc::_Ffit_finder<_Alloc_block*> _FFF;\n+\t      __gnu_cxx::__detail::_Ffit_finder<_Alloc_block*> _FFF;\n \t    _FFF __fff;\n \t    typedef typename _BPVector::iterator _BPiter;\n \t    _BPiter __bpi = \n-\t      __gnu_cxx::__balloc::__find_if\n+\t      __gnu_cxx::__detail::__find_if\n \t      (_S_mem_blocks.begin(), _S_mem_blocks.end(), \n-\t       __gnu_cxx::__balloc::_Functor_Ref<_FFF>(__fff));\n+\t       __gnu_cxx::__detail::_Functor_Ref<_FFF>(__fff));\n \n \t    if (__bpi != _S_mem_blocks.end())\n \t      {\n \t\t// Search was successful. Ok, now mark the first bit from\n \t\t// the right as 0, meaning Allocated. This bit is obtained\n \t\t// by calling _M_get() on __fff.\n \t\tsize_t __nz_bit = _Bit_scan_forward(*__fff._M_get());\n-\t\t__balloc::__bit_allocate(__fff._M_get(), __nz_bit);\n+\t\t__detail::__bit_allocate(__fff._M_get(), __nz_bit);\n \n \t\t_S_last_request._M_reset(__bpi - _S_mem_blocks.begin());\n \n@@ -896,7 +896,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\tsize_t* __puse_count = \n \t\t  reinterpret_cast<size_t*>\n \t\t  (__bpi->first) \n-\t\t  - (__gnu_cxx::__balloc::__num_bitmaps(*__bpi) + 1);\n+\t\t  - (__gnu_cxx::__detail::__num_bitmaps(*__bpi) + 1);\n \t\t\n \t\t++(*__puse_count);\n \t\treturn __ret;\n@@ -918,14 +918,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t// _S_last_request holds a pointer to a valid bit map, that\n \t// points to a free block in memory.\n \tsize_t __nz_bit = _Bit_scan_forward(*_S_last_request._M_get());\n-\t__balloc::__bit_allocate(_S_last_request._M_get(), __nz_bit);\n+\t__detail::__bit_allocate(_S_last_request._M_get(), __nz_bit);\n \n \tpointer __ret = reinterpret_cast<pointer>\n \t  (_S_last_request._M_base() + _S_last_request._M_offset() + __nz_bit);\n \n \tsize_t* __puse_count = reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[_S_last_request._M_where()].first)\n-\t  - (__gnu_cxx::__balloc::\n+\t  - (__gnu_cxx::__detail::\n \t     __num_bitmaps(_S_mem_blocks[_S_last_request._M_where()]) + 1);\n \n \t++(*__puse_count);\n@@ -957,7 +957,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t_GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index >= 0);\n \n \t\n-\tif (__gnu_cxx::__balloc::_Inclusive_between<_Alloc_block*>\n+\tif (__gnu_cxx::__detail::_Inclusive_between<_Alloc_block*>\n \t    (__real_p) (_S_mem_blocks[_S_last_dealloc_index]))\n \t  {\n \t    _GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index\n@@ -969,10 +969,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  }\n \telse\n \t  {\n-\t    _Iterator _iter = __gnu_cxx::__balloc::\n+\t    _Iterator _iter = __gnu_cxx::__detail::\n \t      __find_if(_S_mem_blocks.begin(), \n \t\t\t_S_mem_blocks.end(), \n-\t\t\t__gnu_cxx::__balloc::\n+\t\t\t__gnu_cxx::__detail::\n \t\t\t_Inclusive_between<_Alloc_block*>(__real_p));\n \n \t    _GLIBCXX_DEBUG_ASSERT(_iter != _S_mem_blocks.end());\n@@ -984,16 +984,16 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n \t// Get the position of the iterator that has been found.\n \tconst size_t __rotate = (__displacement\n-\t\t\t\t % size_t(__balloc::bits_per_block));\n+\t\t\t\t % size_t(__detail::bits_per_block));\n \tsize_t* __bitmapC = \n \t  reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[__diff].first) - 1;\n-\t__bitmapC -= (__displacement / size_t(__balloc::bits_per_block));\n+\t__bitmapC -= (__displacement / size_t(__detail::bits_per_block));\n       \n-\t__balloc::__bit_free(__bitmapC, __rotate);\n+\t__detail::__bit_free(__bitmapC, __rotate);\n \tsize_t* __puse_count = reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[__diff].first)\n-\t  - (__gnu_cxx::__balloc::__num_bitmaps(_S_mem_blocks[__diff]) + 1);\n+\t  - (__gnu_cxx::__detail::__num_bitmaps(_S_mem_blocks[__diff]) + 1);\n \t\n \t_GLIBCXX_DEBUG_ASSERT(*__puse_count != 0);\n \n@@ -1115,14 +1115,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   template<typename _Tp>\n     size_t bitmap_allocator<_Tp>::_S_block_size = \n-    2 * size_t(__balloc::bits_per_block);\n+    2 * size_t(__detail::bits_per_block);\n \n   template<typename _Tp>\n     typename __gnu_cxx::bitmap_allocator<_Tp>::_BPVector::size_type \n     bitmap_allocator<_Tp>::_S_last_dealloc_index = 0;\n \n   template<typename _Tp>\n-    __gnu_cxx::__balloc::_Bitmap_counter \n+    __gnu_cxx::__detail::_Bitmap_counter \n   <typename bitmap_allocator<_Tp>::_Alloc_block*>\n     bitmap_allocator<_Tp>::_S_last_request(_S_mem_blocks);\n "}, {"sha": "4eab4c69fb9b82cd136400c13c90fb6532783423", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -225,7 +225,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       template<typename _InIterator>\n         static _CharT*\n         _S_construct_aux(_InIterator __beg, _InIterator __end,\n-\t\t\t const _Alloc& __a, __false_type)\n+\t\t\t const _Alloc& __a, std::__false_type)\n \t{\n           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n           return _S_construct(__beg, __end, __a, _Tag());\n@@ -234,7 +234,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       template<typename _InIterator>\n         static _CharT*\n         _S_construct_aux(_InIterator __beg, _InIterator __end,\n-\t\t\t const _Alloc& __a, __true_type)\n+\t\t\t const _Alloc& __a, std::__true_type)\n \t{ return _S_construct(static_cast<size_type>(__beg),\n \t\t\t      static_cast<value_type>(__end), __a); }\n "}, {"sha": "328a52e012f3d11f88c78164f5e7400744b5775b", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -62,6 +62,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using std::_Construct;\n   using std::_Destroy;\n   using std::allocator;\n+  using std::__true_type;\n+  using std::__false_type;\n \n   struct _Slist_node_base\n   {"}, {"sha": "c95b48ecd8d0e53084a9d8c3c8b26e672173687a", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -99,15 +99,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       // requires special behaviour if _InIterator is an integral type\n       template<typename _InIterator>\n         void\n-        _M_construct_aux(_InIterator __beg, _InIterator __end, __false_type)\n+        _M_construct_aux(_InIterator __beg, _InIterator __end, \n+\t\t\t std::__false_type)\n \t{\n           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n           _M_construct(__beg, __end, _Tag());\n \t}\n \n       template<typename _InIterator>\n         void\n-        _M_construct_aux(_InIterator __beg, _InIterator __end, __true_type)\n+        _M_construct_aux(_InIterator __beg, _InIterator __end, \n+\t\t\t std::__true_type)\n \t{ _M_construct(static_cast<size_type>(__beg),\n \t\t       static_cast<value_type>(__end)); }\n "}, {"sha": "112fb739d705f232a794dd4944048b3439db5561", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -39,10 +39,16 @@\n // purpose. It is provided \"as is\" without express or implied\n // warranty.\n \n+/** @file ext/vstring.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ *\n+ *  Contains an exception-throwing allocator, useful for testing\n+ *  exception safety. In addition, allocation addresses are stored and\n+ *  sanity checked.\n+ */\n+\n /**\n- * @file throw_allocator.h Contains an exception-throwing allocator\n- * useful for testing exception safety. In addition, allocation\n- * addresses are stored and sanity checked.\n+ * @file throw_allocator.h \n  */\n \n #ifndef _THROW_ALLOCATOR_H"}, {"sha": "d54a53442542943c235ff6ed14ef7115e4a0a2c4", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -28,6 +28,10 @@\n // reasons why the executable file might be covered by the GNU General\n // Public License.\n \n+/** @file ext/type_traits.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n #ifndef _EXT_TYPE_TRAITS\n #define _EXT_TYPE_TRAITS 1\n "}, {"sha": "3f14822187eefb059323767447aa2573339e7201", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -1200,13 +1200,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       template<class _Integer>\n \t__versa_string&\n \t_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,\n-\t\t\t    _Integer __val, __true_type)\n+\t\t\t    _Integer __val, std::__true_type)\n         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }\n \n       template<class _InputIterator>\n \t__versa_string&\n \t_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n-\t\t\t    _InputIterator __k2, __false_type);\n+\t\t\t    _InputIterator __k2, std::__false_type);\n \n       __versa_string&\n       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,"}, {"sha": "f541772a6e41945406544c1f1b39876eaa5ecbfa", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __versa_string<_CharT, _Traits, _Alloc, _Base>&\n       __versa_string<_CharT, _Traits, _Alloc, _Base>::\n       _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n-\t\t\t  _InputIterator __k2, __false_type)\n+\t\t\t  _InputIterator __k2, std::__false_type)\n       {\n \tconst __versa_string __s(__k1, __k2);\n \tconst size_type __n1 = __i2 - __i1;"}, {"sha": "ae05db667c7122d296ff1a0451ed4598409df44f", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -41,7 +41,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file bitset\n+/** @file \n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "7fa0c31231b9b828971ac4db998b2e8ce1f91b19", "filename": "libstdc++-v3/include/std/std_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_deque.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file deque\n+/** @file\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "01bef2d06b67bcc5d6230f10a310478a7d86981e", "filename": "libstdc++-v3/include/std/std_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iterator.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file iterator\n+/** @file \n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "3a50b9e8aa72c6ee12d37c6bbac0021dd3f6b104", "filename": "libstdc++-v3/include/std/std_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_list.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file list\n+/** @file\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "d81628a6bdb8097d902e9a87b4377eecd019bf65", "filename": "libstdc++-v3/include/std/std_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_map.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file map\n+/** @file\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "d3398d36890c491ad6bf58aea5642435a4d7ae75", "filename": "libstdc++-v3/include/std/std_queue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_queue.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file queue\n+/** @file\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "6d5dd4345a9e04b7d8cd1fe3fcff6e03b7367818", "filename": "libstdc++-v3/include/std/std_set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_set.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file set\n+/** @file\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "0bd6dda00021cf6ae4c86f6d0274089ca44b04f0", "filename": "libstdc++-v3/include/std/std_stack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_stack.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file stack\n+/** @file \n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "28ff451f48ae424280aa7489e511663f8d9abd37", "filename": "libstdc++-v3/include/std/std_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_string.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -32,7 +32,7 @@\n // ISO C++ 14882: 21  Strings library\n //\n \n-/** @file string\n+/** @file\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "d88917b5900ce3a187198372cfaa11472e1b7588", "filename": "libstdc++-v3/include/std/std_utility.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_utility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_utility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_utility.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file utility\n+/** @file \n  *  This is a Standard C++ Library header. \n  */\n "}, {"sha": "ee259d5be8fcc518e20adc00e03465042e991273", "filename": "libstdc++-v3/include/std/std_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_vector.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -53,7 +53,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/** @file vector\n+/** @file\n  *  This is a Standard C++ Library header.\n  */\n "}, {"sha": "bafcb1f05043e1627ee00ec096c4ae52c6854665", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -1090,6 +1090,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __x.swap(__y);\n     }\n \n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+\n #define _GLIBCXX_JOIN(X,Y) _GLIBCXX_JOIN2( X , Y )\n #define _GLIBCXX_JOIN2(X,Y) _GLIBCXX_JOIN3(X,Y)\n #define _GLIBCXX_JOIN3(X,Y) X##Y\n@@ -1100,6 +1104,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n #undef _GLIBCXX_JOIN2\n #undef _GLIBCXX_JOIN\n \n+\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n   // Definition of default hash function std::tr1::hash<>.  The types for\n   // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR.\n   template<typename T>"}, {"sha": "3d6cc8c5c1a6d4c172673f8a9f0c85f61f09ce79", "filename": "libstdc++-v3/include/tr1/functional_iterate.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -33,6 +33,10 @@\n  *  You should not attempt to use it directly.\n  */\n \n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n template<typename _Res _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n   struct _Weak_result_type_impl<_Res(_GLIBCXX_TEMPLATE_ARGS)>\n   {\n@@ -914,3 +918,5 @@ template<typename _Functor>\n       }\n   }\n \n+_GLIBCXX_END_NAMESPACE\n+}"}, {"sha": "e819d8bd0ed604d2762a2a05175e5b91531d0867", "filename": "libstdc++-v3/include/tr1/memory", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -27,6 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/**\n+ * @file \n+ * This is a TR1 C++ Library header. \n+ */\n+\n #ifndef _TR1_MEMORY\n #define _TR1_MEMORY 1\n "}, {"sha": "31d4eff2fd4675062a42a292b3dd772dca91eeb4", "filename": "libstdc++-v3/include/tr1/mu_iterate.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmu_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmu_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmu_iterate.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -36,6 +36,8 @@\n // Determine the result type when we pass the arguments along. This\n // involves passing along the cv-qualifiers placed on _Mu and\n // unwrapping the argument bundle.\n+// @namespace std::tr1\n+// @class std::tr1::_Mu::result\n template<typename _CVMu, typename _CVArg\n          _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n class result<_CVMu(_CVArg, tuple<_GLIBCXX_TEMPLATE_ARGS>)>\n@@ -48,4 +50,3 @@ operator()(_CVArg& __arg, const tuple<_GLIBCXX_TEMPLATE_ARGS>& __tuple)\n {\n   return __arg(_GLIBCXX_MU_GET_TUPLE_ARGS);\n }\n-"}, {"sha": "0f10db52bec8ec7cc145e076cf0d663bb26368f5", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -27,14 +27,14 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _TR1_RANDOM\n-#define _TR1_RANDOM 1\n-\n /**\n  * @file \n  * This is a TR1 C++ Library header. \n  */\n \n+#ifndef _TR1_RANDOM\n+#define _TR1_RANDOM 1\n+\n #include <algorithm>\n #include <bits/concept_check.h>\n #include <cmath>"}, {"sha": "57c9258930894d76b76567c8f48c14bfcec6982f", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -27,6 +27,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE(tr1)"}, {"sha": "7b4b8f093ad9071af50a164a186d747cb1374c2a", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -145,6 +145,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    swallow_assign ignore;\n  }; // anonymous namespace\n \n+_GLIBCXX_END_NAMESPACE\n+}\n+\n #define _GLIBCXX_CAT(x,y) _GLIBCXX_CAT2(x,y)\n #define _GLIBCXX_CAT2(x,y) x##y\n #define _SHORT_REPEAT\n@@ -153,9 +156,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n #undef _GLIBCXX_REPEAT_HEADER\n #undef _SHORT_REPEAT\n \n-_GLIBCXX_END_NAMESPACE\n-}\n-\n #include <tr1/functional>\n \n #endif"}, {"sha": "8cab92724af711796caf1d3e1985f2b28fad20f6", "filename": "libstdc++-v3/include/tr1/tuple_defs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_defs.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -26,6 +26,12 @@\n // the GNU General Public License.  This exception does not however\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n+\n+/** @file tuple_defs.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _GLIBCXX_REPEAT_HEADER\n #  define _GLIBCXX_REPEAT_HEADER \"tuple_defs.h\"\n #  include \"repeat.h\""}, {"sha": "c1fcee6107a6d9d0ab2b24a9daab4c151920e77b", "filename": "libstdc++-v3/include/tr1/tuple_iterate.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -34,6 +34,10 @@\n \n // Chris Jefferson <chris@bubblescope.net>\n \n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n /// @brief class tuple_size\n template<_GLIBCXX_TEMPLATE_PARAMS>\n   struct tuple_size<tuple<_GLIBCXX_TEMPLATE_ARGS> >\n@@ -164,3 +168,5 @@ template<_GLIBCXX_TEMPLATE_PARAMS>\n   { return make_tuple(_GLIBCXX_REF_WRAP_PARAMS); }\n #endif\n \n+_GLIBCXX_END_NAMESPACE\n+}"}, {"sha": "cad6323e94683e45e59960cdf4f10dccc30d084c", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -30,8 +30,7 @@\n // the GNU General Public License.\n \n /** @file exception\n- *  This header defines several types and functions relating to the\n- *  handling of exceptions in a C++ program.\n+ *  This is a Standard C++ Library header.\n  */\n \n #ifndef __EXCEPTION__"}, {"sha": "446ed9466cb2f38e399870d72a547e276da16209", "filename": "libstdc++-v3/libsupc++/exception_defines.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_defines.h?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -31,6 +31,10 @@\n // ISO C++ 14882: 19.1  Exception classes\n //\n \n+/** @file exception_defines.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n #ifndef _EXCEPTION_DEFINES_H\n #define _EXCEPTION_DEFINES_H 1\n "}, {"sha": "eeed75309a99515496d95ace6c4928498a829c04", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -30,6 +30,8 @@\n // the GNU General Public License.\n \n /** @file new\n+ *  This is a Standard C++ Library header.\n+ *\n  *  The header @c new defines several functions to manage dynamic memory and\n  *  handling memory allocation errors; see\n  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more."}, {"sha": "d6adf8b8f9542c97656f9edb1344ad93d0fbf850", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -29,7 +29,7 @@\n // the GNU General Public License.\n \n /** @file typeinfo\n- *  This header provides RTTI support.\n+ *  This is a Standard C++ Library header.\n  */\n \n #ifndef _TYPEINFO"}, {"sha": "46b4d3c2babe5adc8007e591d3840e749c0da696", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -31,7 +31,7 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  namespace __balloc\n+  namespace __detail\n   {\n     template class __mini_vector<\n       std::pair<bitmap_allocator<char>::_Alloc_block*,\n@@ -55,7 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     __mutex_type& __bfl_mutex = _M_get_mutex();\n #endif\n     const vector_type& __free_list = _M_get_free_list();\n-    using __gnu_cxx::__balloc::__lower_bound;\n+    using __gnu_cxx::__detail::__lower_bound;\n     iterator __tmp = __lower_bound(__free_list.begin(), __free_list.end(), \n \t\t\t\t   __sz, _LT_pointer_compare());\n "}, {"sha": "992056cf9a2648603a161097d2e37b6a2316ec9c", "filename": "libstdc++-v3/testsuite/ext/type_traits/add_unsigned_floating_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -36,5 +36,5 @@ int main()\n }\n \n // { dg-error \"instantiated from\" \"\" { target *-*-* } 29 } \n-// { dg-error \"no type\" \"\" { target *-*-* } 72 } \n+// { dg-error \"no type\" \"\" { target *-*-* } 76 } \n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "311db92c99b8f6f5993b5f5a273feb0e71190e99", "filename": "libstdc++-v3/testsuite/ext/type_traits/add_unsigned_integer_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -37,4 +37,4 @@ int main()\n }\n \n // { dg-error \"invalid use of incomplete\" \"\" { target *-*-* } 29 } \n-// { dg-error \"declaration of\" \"\" { target *-*-* } 67 } \n+// { dg-error \"declaration of\" \"\" { target *-*-* } 71 } "}, {"sha": "b2dd0e3bc9f4ed40b0ba0b7985165f8210384bbf", "filename": "libstdc++-v3/testsuite/ext/type_traits/remove_unsigned_floating_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -36,5 +36,5 @@ int main()\n }\n \n // { dg-error \"instantiated from\" \"\" { target *-*-* } 29 }\n-// { dg-error \"no type\" \"\" { target *-*-* } 115 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 119 }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "752125ed25fa265ddb25e9607ed5ed9e65c4f352", "filename": "libstdc++-v3/testsuite/ext/type_traits/remove_unsigned_integer_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a538873925180f59ee0b89e9ce9f1ba91b138b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc?ref=78a538873925180f59ee0b89e9ce9f1ba91b138b", "patch": "@@ -37,4 +37,4 @@ int main()\n }\n \n // { dg-error \"invalid use of incomplete\" \"\" { target *-*-* } 29 } \n-// { dg-error \"declaration of\" \"\" { target *-*-* } 110 } \n+// { dg-error \"declaration of\" \"\" { target *-*-* } 114 } "}]}