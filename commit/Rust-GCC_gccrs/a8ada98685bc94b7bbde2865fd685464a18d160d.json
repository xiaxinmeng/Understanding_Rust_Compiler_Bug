{"sha": "a8ada98685bc94b7bbde2865fd685464a18d160d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhZGE5ODY4NWJjOTRiN2JiZGUyODY1ZmQ2ODU0NjRhMThkMTYwZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-04-19T21:17:50Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-04-19T21:17:50Z"}, "message": "Date.java, [...]: New versions from Classpath.\n\n\t* java/sql/Date.java, java/sql/DriverManager.java,\n\tjava/sql/Time.java, java/sql/Timestamp.java: New versions from\n\tClasspath.\n\nFrom-SVN: r65831", "tree": {"sha": "4fc13305f425cea754f23403e6595e5a31598e3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fc13305f425cea754f23403e6595e5a31598e3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8ada98685bc94b7bbde2865fd685464a18d160d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ada98685bc94b7bbde2865fd685464a18d160d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8ada98685bc94b7bbde2865fd685464a18d160d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ada98685bc94b7bbde2865fd685464a18d160d/comments", "author": null, "committer": null, "parents": [{"sha": "de0656cf30b171cf5a05d2233e4aab26edc56105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0656cf30b171cf5a05d2233e4aab26edc56105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0656cf30b171cf5a05d2233e4aab26edc56105"}], "stats": {"total": 198, "additions": 181, "deletions": 17}, "files": [{"sha": "04a8937a40df9ac67b9b3836f84db98a004278ae", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a8ada98685bc94b7bbde2865fd685464a18d160d", "patch": "@@ -1,5 +1,9 @@\n 2003-04-19  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/sql/Date.java, java/sql/DriverManager.java,\n+\tjava/sql/Time.java, java/sql/Timestamp.java: New versions from\n+\tClasspath.\n+\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (ordinary_java_source_files): Added new files.\n \t* java/security/AlgorithmParameterGenerator.java,"}, {"sha": "67d5eb7af013115552005487611ac286c65b0c25", "filename": "libjava/java/sql/Date.java", "status": "modified", "additions": 76, "deletions": 5, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FDate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FDate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDate.java?ref=a8ada98685bc94b7bbde2865fd685464a18d160d", "patch": "@@ -1,5 +1,5 @@\n /* Date.java -- Wrapper around java.util.Date\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,6 +37,7 @@\n \n package java.sql;\n \n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n \n /**\n@@ -81,6 +82,72 @@ public Date(long date)\n     super(date);\n   }\n \n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public int getHours() throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public int getMinutes() throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public int getSeconds() throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public void setHours(int newValue) throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public void setMinutes(int newValue) throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public void setSeconds(int newValue) throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n   /**\n    * This method returns a new instance of this class by parsing a\n    * date in JDBC format into a Java date.\n@@ -92,14 +159,18 @@ public Date(long date)\n    */\n   public static Date valueOf (String str)\n   {\n-    try\n+    try \n       {\n \tjava.util.Date d = (java.util.Date) sdf.parseObject(str);\n-\treturn(new Date(d.getTime()));\n+\n+\tif (d == null)\n+\t  throw new IllegalArgumentException(str);\n+\telse\n+\t  return new Date(d.getTime());\n       }\n-    catch(Exception e)\n+    catch (ParseException e)\n       {\n-\treturn(null);\n+\tthrow new IllegalArgumentException(str);\n       }\n   }\n "}, {"sha": "649c5ae7339f894fca4b19f3c4369b9266349d6a", "filename": "libjava/java/sql/DriverManager.java", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FDriverManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FDriverManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriverManager.java?ref=a8ada98685bc94b7bbde2865fd685464a18d160d", "patch": "@@ -1,5 +1,5 @@\n /* DriverManager.java -- Manage JDBC drivers\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -103,7 +103,10 @@ public class DriverManager\n               {\n         \tClass.forName(driver_classname); // The driver registers itself\n               }\n-            catch (Exception e) { ; } // Ignore not founds\n+            catch (Exception e)\n+\t      {\n+\t\t// Ignore not founds\n+\t      }\n           }\n       }\n \n@@ -209,9 +212,9 @@ public static Connection getConnection(String url) throws SQLException\n    * @param url The JDBC URL string to find a driver for.\n    *\n    * @return A <code>Driver</code> that can connect to the specified\n-   * URL, or <code>null</code> if a suitable driver cannot be found.\n+   * URL.\n    *\n-   * @exception SQLException If an error occurs.\n+   * @exception SQLException If an error occurs, or no suitable driver can be found.\n    */\n   public static Driver getDriver(String url) throws SQLException\n   {\n@@ -224,7 +227,7 @@ public static Driver getDriver(String url) throws SQLException\n           return d;\n       }\n \n-    return null;\n+    throw new SQLException(\"No driver found for \" + url);\n   }\n \n   /**"}, {"sha": "9200ee3cadf9b2df5374529d21d808c3a6827aea", "filename": "libjava/java/sql/Time.java", "status": "modified", "additions": 85, "deletions": 4, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FTime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FTime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTime.java?ref=a8ada98685bc94b7bbde2865fd685464a18d160d", "patch": "@@ -1,5 +1,5 @@\n /* Time.java -- Wrapper around java.util.Date\n-   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,6 +38,7 @@\n \n package java.sql;\n \n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n \n /**\n@@ -55,6 +56,82 @@ public class Time extends java.util.Date\n    */\n   private static SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss\");\n \n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public int getDate() throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public int getDay() throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public int getMonth() throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public int getYear() throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public void setDate(int newValue) throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public void setMonth(int newValue) throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n+\n+  /**\n+   * This method always throws an IllegalArgumentException.\n+   *\n+   * @throws IllegalArgumentException when it's called.\n+   * @deprecated\n+   */\n+  public void setYear(int newValue) throws IllegalArgumentException\n+  {\n+    throw new IllegalArgumentException();\n+  }\n \n   /**\n    * This method returns a new instance of this class by parsing a\n@@ -70,11 +147,15 @@ public static Time valueOf (String str)\n     try\n       {\n \tjava.util.Date d = (java.util.Date) sdf.parseObject(str);\n-\treturn new Time(d.getTime());\n+\n+\tif (d == null)\n+\t  throw new IllegalArgumentException(str);\n+\telse\n+\t  return new Time(d.getTime());\n       }\n-    catch (Exception e)\n+    catch (ParseException e)\n       {\n-\treturn null;\n+\tthrow new IllegalArgumentException(str);\n       }\n   }\n "}, {"sha": "b5f0523dfd931f72953242878be66be681740a24", "filename": "libjava/java/sql/Timestamp.java", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FTimestamp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ada98685bc94b7bbde2865fd685464a18d160d/libjava%2Fjava%2Fsql%2FTimestamp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTimestamp.java?ref=a8ada98685bc94b7bbde2865fd685464a18d160d", "patch": "@@ -38,6 +38,7 @@\n \n package java.sql;\n \n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n \n /**\n@@ -81,11 +82,15 @@ public static Timestamp valueOf(String str)\n     try\n       {\n \tDate d = (Date) parse_sdf.parseObject(str);\n-\treturn new Timestamp(d.getTime());\n+\n+\tif (d == null)\n+\t  throw new IllegalArgumentException(str);\n+\telse\n+\t  return new Timestamp(d.getTime());\n       }\n-    catch (Exception e)\n+    catch (ParseException e)\n       {\n-\treturn null;\n+\tthrow new IllegalArgumentException(str);\n       }\n   }\n "}]}