{"sha": "9cfc08c0491270417557f00998857722c405f0b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmYzA4YzA0OTEyNzA0MTc1NTdmMDA5OTg4NTc3MjJjNDA1ZjBiMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-07T09:16:14Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-07T09:16:14Z"}, "message": "Fix GNU coding style (V2).\n\n2018-11-07  Martin Liska  <mliska@suse.cz>\n\n\t* mem-stats.h: Fix GNU coding style.\n\nFrom-SVN: r265868", "tree": {"sha": "7412255fac84d24ae398a2637a3e5000c696071b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7412255fac84d24ae398a2637a3e5000c696071b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cfc08c0491270417557f00998857722c405f0b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfc08c0491270417557f00998857722c405f0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfc08c0491270417557f00998857722c405f0b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfc08c0491270417557f00998857722c405f0b3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fa1acc7caa5ef5786965234bdb83f8f7bc1c850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa1acc7caa5ef5786965234bdb83f8f7bc1c850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa1acc7caa5ef5786965234bdb83f8f7bc1c850"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "2588ce226dcc72d7fe06f7c72806fdb8f10c02b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfc08c0491270417557f00998857722c405f0b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfc08c0491270417557f00998857722c405f0b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cfc08c0491270417557f00998857722c405f0b3", "patch": "@@ -1,3 +1,7 @@\n+2018-11-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* mem-stats.h: Fix GNU coding style.\n+\n 2018-11-07  Chenghua Xu  <paul.hua.gm@gmail.com>\n \n \t* config/mips/gs264e.md: New."}, {"sha": "6ab92211cf470352c29ab09455bf718c41990ffa", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfc08c0491270417557f00998857722c405f0b3/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfc08c0491270417557f00998857722c405f0b3/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=9cfc08c0491270417557f00998857722c405f0b3", "patch": "@@ -316,23 +316,23 @@ class mem_alloc_description\n   bool contains_descriptor_for_instance (const void *ptr);\n \n   /* Return descriptor for instance PTR.  */\n-  T * get_descriptor_for_instance (const void *ptr);\n+  T *get_descriptor_for_instance (const void *ptr);\n \n   /* Register memory allocation descriptor for container PTR which is\n      described by a memory LOCATION.  */\n-  T * register_descriptor (const void *ptr, mem_location *location);\n+  T *register_descriptor (const void *ptr, mem_location *location);\n \n   /* Register memory allocation descriptor for container PTR.  ORIGIN identifies\n      type of container and GGC identifes if the allocation is handled in GGC\n      memory.  Each location is identified by file NAME, LINE in source code and\n      FUNCTION name.  */\n-  T * register_descriptor (const void *ptr, mem_alloc_origin origin,\n-\t\t\t   bool ggc, const char *name, int line,\n-\t\t\t   const char *function);\n+  T *register_descriptor (const void *ptr, mem_alloc_origin origin,\n+\t\t\t  bool ggc, const char *name, int line,\n+\t\t\t  const char *function);\n \n   /* Register instance overhead identified by PTR pointer. Allocation takes\n      SIZE bytes.  */\n-  T * register_instance_overhead (size_t size, const void *ptr);\n+  T *register_instance_overhead (size_t size, const void *ptr);\n \n   /* For containers (and GGC) where we want to track every instance object,\n      we register allocation of SIZE bytes, identified by PTR pointer, belonging\n@@ -342,8 +342,8 @@ class mem_alloc_description\n   /* Release PTR pointer of SIZE bytes. If REMOVE_FROM_MAP is set to true,\n      remove the instance from reverse map.  Return memory usage that belongs\n      to this memory description.  */\n-  T * release_instance_overhead (void *ptr, size_t size,\n-\t\t\t\t bool remove_from_map = false);\n+  T *release_instance_overhead (void *ptr, size_t size,\n+\t\t\t\tbool remove_from_map = false);\n \n   /* Release intance object identified by PTR pointer.  */\n   void release_object_overhead (void *ptr);\n@@ -355,9 +355,9 @@ class mem_alloc_description\n      are filtered by ORIGIN type, LENGTH is return value where we register\n      the number of elements in the list. If we want to process custom order,\n      CMP comparator can be provided.  */\n-  mem_list_t * get_list (mem_alloc_origin origin, unsigned *length,\n-\t\t\t int (*cmp) (const void *first,\n-\t\t\t\t     const void *second) = NULL);\n+  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length,\n+\t\t\tint (*cmp) (const void *first,\n+\t\t\t\t    const void *second) = NULL);\n \n   /* Dump all tracked instances of type ORIGIN. If we want to process custom\n      order, CMP comparator can be provided.  */"}]}