{"sha": "16cc44407fe40e3411e206eeec60a14d20769ade", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjYzQ0NDA3ZmU0MGUzNDExZTIwNmVlZWM2MGExNGQyMDc2OWFkZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-03-18T20:54:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-03-18T20:54:25Z"}, "message": "i386.md (float<SSEMODEI24:mode><X87MODEF:mode>2): Rewrite using indirect functions.\n\n\t* config/i386/i386.md (float<SSEMODEI24:mode><X87MODEF:mode>2):\n\tRewrite using indirect functions.\n\t(lwp_slwpcb): Ditto.\n\t* config/i386/sse.md (avx_vextractf128<mode>): Ditto.\n\t(avx_vinsertf128<mode>): Ditto.\n\nFrom-SVN: r171169", "tree": {"sha": "fb631932e8019654ce883f5f06071216d35dc929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb631932e8019654ce883f5f06071216d35dc929"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16cc44407fe40e3411e206eeec60a14d20769ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cc44407fe40e3411e206eeec60a14d20769ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16cc44407fe40e3411e206eeec60a14d20769ade", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cc44407fe40e3411e206eeec60a14d20769ade/comments", "author": null, "committer": null, "parents": [{"sha": "f2c779bb053da67c12af0c91371ce13b5cdf8a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2c779bb053da67c12af0c91371ce13b5cdf8a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2c779bb053da67c12af0c91371ce13b5cdf8a7a"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "762dbb4a45c1c0717b3124b851d5f44688cfe007", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cc44407fe40e3411e206eeec60a14d20769ade/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cc44407fe40e3411e206eeec60a14d20769ade/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16cc44407fe40e3411e206eeec60a14d20769ade", "patch": "@@ -1,3 +1,11 @@\n+2011-03-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (float<SSEMODEI24:mode><X87MODEF:mode>2):\n+\tRewrite using indirect functions.\n+\t(lwp_slwpcb): Ditto.\n+\t* config/i386/sse.md (avx_vextractf128<mode>): Ditto.\n+\t(avx_vinsertf128<mode>): Ditto.\n+\n 2011-03-18  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_delegitimize_address): Handle GOTOFF\n@@ -214,8 +222,7 @@\n 2011-03-16  Jeff Law  <law@redhat.com>\n \n \t* tree-vrp.c (identify_jump_threads): Slightly simplify type\n-\tcheck for operands of conditional.  Allow type to be a\n-\tpointer.\n+\tcheck for operands of conditional.  Allow type to be a pointer.\n \n 2011-03-16  Richard Guenther  <rguenther@suse.de>\n \n@@ -470,8 +477,7 @@\n \n 2011-03-15  Richard Guenther  <rguenther@suse.de>\n \n-\t* config/i386/i386.c (ix86_emit_swdivsf): Implement more\n-\tefficiently.\n+\t* config/i386/i386.c (ix86_emit_swdivsf): Implement more efficiently.\n \n 2011-03-15  Alan Modra  <amodra@gmail.com>\n \n@@ -499,8 +505,7 @@\n \n 2011-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n-\t* config/sol2.c (solaris_assemble_visibility): Remove obsolete\n-\tURLs.\n+\t* config/sol2.c (solaris_assemble_visibility): Remove obsolete URLs.\n \n 2011-03-14  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c9761a46e4c574b14f16c0178c65ad244a14ab9e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cc44407fe40e3411e206eeec60a14d20769ade/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cc44407fe40e3411e206eeec60a14d20769ade/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=16cc44407fe40e3411e206eeec60a14d20769ade", "patch": "@@ -4959,18 +4959,18 @@\n       && !X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SSEMODEI24:MODE>mode))\n     {\n       rtx reg = gen_reg_rtx (XFmode);\n-      rtx insn;\n+      rtx (*insn)(rtx, rtx);\n \n       emit_insn (gen_float<SSEMODEI24:mode>xf2 (reg, operands[1]));\n \n       if (<X87MODEF:MODE>mode == SFmode)\n-\tinsn = gen_truncxfsf2 (operands[0], reg);\n+\tinsn = gen_truncxfsf2;\n       else if (<X87MODEF:MODE>mode == DFmode)\n-\tinsn = gen_truncxfdf2 (operands[0], reg);\n+\tinsn = gen_truncxfdf2;\n       else\n \tgcc_unreachable ();\n \n-      emit_insn (insn);\n+      emit_insn (insn (operands[0], reg));\n       DONE;\n     }\n })\n@@ -18216,10 +18216,13 @@\n \t(unspec_volatile [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n {\n-  if (TARGET_64BIT)\n-    emit_insn (gen_lwp_slwpcbdi (operands[0]));\n-  else\n-    emit_insn (gen_lwp_slwpcbsi (operands[0]));\n+  rtx (*insn)(rtx);\n+\n+  insn = (TARGET_64BIT\n+\t  ? gen_lwp_slwpcbdi\n+\t  : gen_lwp_slwpcbsi);\n+\n+  emit_insn (insn (operands[0]));\n   DONE;\n })\n "}, {"sha": "6200419854860fa866548707c40258c0f3d1cd7f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16cc44407fe40e3411e206eeec60a14d20769ade/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16cc44407fe40e3411e206eeec60a14d20769ade/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=16cc44407fe40e3411e206eeec60a14d20769ade", "patch": "@@ -4122,17 +4122,21 @@\n    (match_operand:SI 2 \"const_0_to_1_operand\" \"\")]\n   \"TARGET_AVX\"\n {\n+  rtx (*insn)(rtx, rtx);\n+\n   switch (INTVAL (operands[2]))\n     {\n     case 0:\n-      emit_insn (gen_vec_extract_lo_<mode> (operands[0], operands[1]));\n+      insn = gen_vec_extract_lo_<mode>;\n       break;\n     case 1:\n-      emit_insn (gen_vec_extract_hi_<mode> (operands[0], operands[1]));\n+      insn = gen_vec_extract_hi_<mode>;\n       break;\n     default:\n       gcc_unreachable ();\n     }\n+\n+  emit_insn (insn (operands[0], operands[1]));\n   DONE;\n })\n \n@@ -11776,19 +11780,21 @@\n    (match_operand:SI 3 \"const_0_to_1_operand\" \"\")]\n   \"TARGET_AVX\"\n {\n+  rtx (*insn)(rtx, rtx, rtx);\n+\n   switch (INTVAL (operands[3]))\n     {\n     case 0:\n-      emit_insn (gen_vec_set_lo_<mode> (operands[0], operands[1],\n-\t\t\t\t\toperands[2]));\n+      insn = gen_vec_set_lo_<mode>;\n       break;\n     case 1:\n-      emit_insn (gen_vec_set_hi_<mode> (operands[0], operands[1],\n-\t\t\t\t\toperands[2]));\n+      insn = gen_vec_set_hi_<mode>;\n       break;\n     default:\n       gcc_unreachable ();\n     }\n+\n+  emit_insn (insn (operands[0], operands[1], operands[2]));\n   DONE;\n })\n "}]}