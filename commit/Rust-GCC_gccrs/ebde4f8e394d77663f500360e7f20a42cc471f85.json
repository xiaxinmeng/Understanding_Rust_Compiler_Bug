{"sha": "ebde4f8e394d77663f500360e7f20a42cc471f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkZTRmOGUzOTRkNzc2NjNmNTAwMzYwZTdmMjBhNDJjYzQ3MWY4NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2015-03-03T13:58:15Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2015-03-03T13:58:15Z"}, "message": "tree-sra.c (ipa_sra_check_caller_data): New type.\n\n2015-03-03  Martin Jambor  <mjambor@suse.cz>\n            Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/\n        * tree-sra.c (ipa_sra_check_caller_data): New type.\n        (has_caller_p): Removed.\n        (ipa_sra_check_caller): New function.\n        (ipa_sra_preliminary_function_checks): Use it.\n\ngcc/changelog/\n        * gnat.dg/specs/pack12.ads: New test.\n\n\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r221148", "tree": {"sha": "b1959337d9cc7caa96e5b56c85185acc75837d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1959337d9cc7caa96e5b56c85185acc75837d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebde4f8e394d77663f500360e7f20a42cc471f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebde4f8e394d77663f500360e7f20a42cc471f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebde4f8e394d77663f500360e7f20a42cc471f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebde4f8e394d77663f500360e7f20a42cc471f85/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21ce14d309100d40a7f0340b66af22bf28f5ef5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ce14d309100d40a7f0340b66af22bf28f5ef5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ce14d309100d40a7f0340b66af22bf28f5ef5b"}], "stats": {"total": 110, "additions": 98, "deletions": 12}, "files": [{"sha": "73854e0555b60886e65094c4d9f52dc5d5cd6f45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebde4f8e394d77663f500360e7f20a42cc471f85", "patch": "@@ -1,3 +1,11 @@\n+2015-03-03  Martin Jambor  <mjambor@suse.cz>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-sra.c (ipa_sra_check_caller_data): New type.\n+\t(has_caller_p): Removed.\n+\t(ipa_sra_check_caller): New function.\n+\t(ipa_sra_preliminary_function_checks): Use it.\n+\n 2015-03-03  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sem_item_optimizer::merge_classes): Use bit or"}, {"sha": "e242e595dc288fc1008163c9580f4ec07f9559ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebde4f8e394d77663f500360e7f20a42cc471f85", "patch": "@@ -1,3 +1,8 @@\n+2015-03-03  Martin Jambor  <mjambor@suse.cz>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/pack12.ads: New test.\n+\n 2015-03-03  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/ipa/PR65282.c: New test."}, {"sha": "c5e962cf3d3e2c95ad124db939d21ac7e1a15a55", "filename": "gcc/testsuite/gnat.dg/specs/pack12.ads", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack12.ads?ref=ebde4f8e394d77663f500360e7f20a42cc471f85", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+package Pack12 is\n+\n+  type Rec1 is record\n+    B : Boolean;\n+    N : Natural;\n+  end record;\n+\n+  type Rec2 is record\n+    B : Boolean;\n+    R : Rec1;\n+  end record;\n+  pragma Pack (Rec2);\n+\n+  type Rec3 is tagged record\n+    R : Rec2;\n+  end record;\n+\n+end Pack12;"}, {"sha": "a6cddafe44bf8a2c4411c1fa102583afb230fa8d", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 64, "deletions": 12, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebde4f8e394d77663f500360e7f20a42cc471f85/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=ebde4f8e394d77663f500360e7f20a42cc471f85", "patch": "@@ -5009,13 +5009,54 @@ modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n   return cfg_changed;\n }\n \n-/* If NODE has a caller, return true.  */\n+/* Means of communication between ipa_sra_check_caller and\n+   ipa_sra_preliminary_function_checks.  */\n+\n+struct ipa_sra_check_caller_data\n+{\n+  bool has_callers;\n+  bool bad_arg_alignment;\n+};\n+\n+/* If NODE has a caller, mark that fact in DATA which is pointer to\n+   ipa_sra_check_caller_data.  Also check all aggregate arguments in all known\n+   calls if they are unit aligned and if not, set the appropriate flag in DATA\n+   too. */\n \n static bool\n-has_caller_p (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n+ipa_sra_check_caller (struct cgraph_node *node, void *data)\n {\n-  if (node->callers)\n-    return true;\n+  if (!node->callers)\n+    return false;\n+\n+  struct ipa_sra_check_caller_data *iscc;\n+  iscc = (struct ipa_sra_check_caller_data *) data;\n+  iscc->has_callers = true;\n+\n+  for (cgraph_edge *cs = node->callers; cs; cs = cs->next_caller)\n+    {\n+      gimple call_stmt = cs->call_stmt;\n+      unsigned count = gimple_call_num_args (call_stmt);\n+      for (unsigned i = 0; i < count; i++)\n+\t{\n+\t  tree arg = gimple_call_arg (call_stmt, i);\n+\t  if (is_gimple_reg (arg))\n+\t      continue;\n+\n+\t  tree offset;\n+\t  HOST_WIDE_INT bitsize, bitpos;\n+\t  machine_mode mode;\n+\t  int unsignedp, volatilep = 0;\n+\t  get_inner_reference (arg, &bitsize, &bitpos, &offset, &mode,\n+\t\t\t       &unsignedp, &volatilep, false);\n+\t  if (bitpos % BITS_PER_UNIT)\n+\t    {\n+\t      iscc->bad_arg_alignment = true;\n+\t      return true;\n+\t    }\n+\t}\n+    }\n+\n   return false;\n }\n \n@@ -5070,14 +5111,6 @@ ipa_sra_preliminary_function_checks (struct cgraph_node *node)\n       return false;\n     }\n \n-  if (!node->call_for_symbol_thunks_and_aliases (has_caller_p, NULL, true))\n-    {\n-      if (dump_file)\n-\tfprintf (dump_file,\n-\t\t \"Function has no callers in this compilation unit.\\n\");\n-      return false;\n-    }\n-\n   if (cfun->stdarg)\n     {\n       if (dump_file)\n@@ -5096,6 +5129,25 @@ ipa_sra_preliminary_function_checks (struct cgraph_node *node)\n       return false;\n     }\n \n+  struct ipa_sra_check_caller_data iscc;\n+  memset (&iscc, 0, sizeof(iscc));\n+  node->call_for_symbol_thunks_and_aliases (ipa_sra_check_caller, &iscc, true);\n+  if (!iscc.has_callers)\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file,\n+\t\t \"Function has no callers in this compilation unit.\\n\");\n+      return false;\n+    }\n+\n+  if (iscc.bad_arg_alignment)\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file,\n+\t\t \"A function call has an argument with non-unit alignemnt.\\n\");\n+      return false;\n+    }\n+\n   return true;\n }\n "}]}