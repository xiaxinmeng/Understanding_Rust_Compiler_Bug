{"sha": "15717b4784053e59121a1e239d0081ca4d2c738a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3MTdiNDc4NDA1M2U1OTEyMWExZTIzOWQwMDgxY2E0ZDJjNzM4YQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-20T16:18:40Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-20T23:08:08Z"}, "message": "d: Merge upstream dmd 1b5a53d01.\n\nFixes an ICE in setValue at dmd/dinterpret.c:7046\n\nThis was originally seen when running the testsuite for a 16-bit target,\nhowever, it could be reproduced on 32-bit using long[] as well.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11547\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 1b5a53d01.", "tree": {"sha": "b9f2a3d562acef103b6463a4d17495cc7f8bc538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9f2a3d562acef103b6463a4d17495cc7f8bc538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15717b4784053e59121a1e239d0081ca4d2c738a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15717b4784053e59121a1e239d0081ca4d2c738a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15717b4784053e59121a1e239d0081ca4d2c738a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15717b4784053e59121a1e239d0081ca4d2c738a/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cb0f5840795698557731c6e549a5ce99573223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cb0f5840795698557731c6e549a5ce99573223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cb0f5840795698557731c6e549a5ce99573223"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "d0e5f4422476d99971b9cef8a05080dbdb6585f0", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=15717b4784053e59121a1e239d0081ca4d2c738a", "patch": "@@ -1,4 +1,4 @@\n-c2274e56a3220ea636c6199fd06cd54fcdf6bad9\n+1b5a53d01c465109ce47edf49ace6143b69b118b\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "ee38033ac82e42d5d78700d3d4a0c1252cf8ac34", "filename": "gcc/d/dmd/ctfeexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctfeexpr.c?ref=15717b4784053e59121a1e239d0081ca4d2c738a", "patch": "@@ -1913,7 +1913,7 @@ bool isCtfeValueValid(Expression *newval)\n         // e1 should be a CTFE reference\n         Expression *e1 = ((AddrExp *)newval)->e1;\n         return tb->ty == Tpointer &&\n-               ((e1->op == TOKstructliteral && isCtfeValueValid(e1)) ||\n+               (((e1->op == TOKstructliteral || e1->op == TOKarrayliteral) && isCtfeValueValid(e1)) ||\n                 (e1->op == TOKvar) ||\n                 (e1->op == TOKdotvar && isCtfeReferenceValid(e1)) ||\n                 (e1->op == TOKindex && isCtfeReferenceValid(e1)) ||"}, {"sha": "74c5b40741f34549999f588b1da4b5655253db48", "filename": "gcc/d/dmd/dinterpret.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Fd%2Fdmd%2Fdinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Fd%2Fdmd%2Fdinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.c?ref=15717b4784053e59121a1e239d0081ca4d2c738a", "patch": "@@ -1947,15 +1947,6 @@ class Interpreter : public Visitor\n             Type *elemtype = ((TypeArray *)(val->type))->next;\n             d_uns64 elemsize = elemtype->size();\n \n-            // It's OK to cast from fixed length to dynamic array, eg &int[3] to int[]*\n-            if (val->type->ty == Tsarray && pointee->ty == Tarray &&\n-                elemsize == pointee->nextOf()->size())\n-            {\n-                new(pue) AddrExp(e->loc, val, e->type);\n-                result = pue->exp();\n-                return;\n-            }\n-\n             // It's OK to cast from fixed length to fixed length array, eg &int[n] to int[d]*.\n             if (val->type->ty == Tsarray && pointee->ty == Tsarray &&\n                 elemsize == pointee->nextOf()->size())"}, {"sha": "6e7304d742e20fe6a60ab158201aeb970d04a086", "filename": "gcc/testsuite/gdc.test/compilable/interpret3.d", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret3.d?ref=15717b4784053e59121a1e239d0081ca4d2c738a", "patch": "@@ -3235,6 +3235,44 @@ int ctfeSort6250()\n \n static assert(ctfeSort6250() == 57);\n \n+/**************************************************/\n+\n+long[]* simple6250b(long[]* x) { return x; }\n+\n+void swap6250b(long[]* lhs, long[]* rhs)\n+{\n+    long[] kk = *lhs;\n+    assert(simple6250b(lhs) == lhs);\n+    lhs = simple6250b(lhs);\n+    assert(kk[0] == 18);\n+    assert((*lhs)[0] == 18);\n+    assert((*rhs)[0] == 19);\n+    *lhs = *rhs;\n+    assert((*lhs)[0] == 19);\n+    *rhs = kk;\n+    assert(*rhs == kk);\n+    assert(kk[0] == 18);\n+    assert((*rhs)[0] == 18);\n+}\n+\n+long ctfeSort6250b()\n+{\n+     long[][2] x;\n+     long[3] a = [17, 18, 19];\n+     x[0] = a[1 .. 2];\n+     x[1] = a[2 .. $];\n+     assert(x[0][0] == 18);\n+     assert(x[0][1] == 19);\n+     swap6250b(&x[0], &x[1]);\n+     assert(x[0][0] == 19);\n+     assert(x[1][0] == 18);\n+     a[1] = 57;\n+     assert(x[0][0] == 19);\n+     return x[1][0];\n+}\n+\n+static assert(ctfeSort6250b() == 57);\n+\n /**************************************************\n     6672 circular references in array\n **************************************************/"}, {"sha": "b11fac925a0e6a29a9e14d0aa50dbf1147c998ac", "filename": "gcc/testsuite/gdc.test/fail_compilation/reg6769.d", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freg6769.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15717b4784053e59121a1e239d0081ca4d2c738a/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freg6769.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freg6769.d?ref=15717b4784053e59121a1e239d0081ca4d2c738a", "patch": "@@ -0,0 +1,29 @@\n+/*\n+TEST_OUTPUT\n+---\n+fail_compilation/reg6769.d(14): Error: reinterpreting cast from `int[]` to `int[7]*` is not supported in CTFE\n+fail_compilation/reg6769.d(27):        called from here: `reg6769a([0, 1, 2, 3, 4, 5, 6])`\n+fail_compilation/reg6769.d(27):        while evaluating: `static assert(reg6769a([0, 1, 2, 3, 4, 5, 6]) == 1)`\n+fail_compilation/reg6769.d(20): Error: reinterpreting cast from `int[7]` to `int[]*` is not supported in CTFE\n+fail_compilation/reg6769.d(28):        called from here: `reg6769b([0, 1, 2, 3, 4, 5, 6])`\n+fail_compilation/reg6769.d(28):        while evaluating: `static assert(reg6769b([0, 1, 2, 3, 4, 5, 6]) == 1)`\n+---\n+*/\n+int reg6769a(int[] a)\n+{\n+    int[7]* b = cast(int[7]*)&a;\n+    return (*b)[1];\n+}\n+\n+int reg6769b(int[7] a)\n+{\n+    int[]* b = cast(int[]*)&a;\n+    return (*b)[1];\n+}\n+\n+void main()\n+{\n+    // Both should never succeed, run-time would raise a SEGV.\n+    static assert(reg6769a([0,1,2,3,4,5,6]) == 1);\n+    static assert(reg6769b([0,1,2,3,4,5,6]) == 1);\n+}"}]}