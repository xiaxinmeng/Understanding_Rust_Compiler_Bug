{"sha": "4b1e44bee1cc164e8b6660eae8980a0e52770f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxZTQ0YmVlMWNjMTY0ZThiNjY2MGVhZTg5ODBhMGU1Mjc3MGYwNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-08-29T21:57:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-08-29T21:57:05Z"}, "message": "c-tree.h (C_DECL_FILE_SCOPE): Move ...\n\n        * c-tree.h (C_DECL_FILE_SCOPE): Move ...\n        * tree.h (DECL_FILE_SCOPE_P): ... here, and rename.\n        * c-decl.c, c-objc-common.c, c-typeck.c: Update to match.\n\nFrom-SVN: r70925", "tree": {"sha": "4633005da8f64b1767538dcd1ee8920a7bf39820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4633005da8f64b1767538dcd1ee8920a7bf39820"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b1e44bee1cc164e8b6660eae8980a0e52770f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1e44bee1cc164e8b6660eae8980a0e52770f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1e44bee1cc164e8b6660eae8980a0e52770f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1e44bee1cc164e8b6660eae8980a0e52770f06/comments", "author": null, "committer": null, "parents": [{"sha": "05a5fba9c719bedb9584cdec2e677636038be449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a5fba9c719bedb9584cdec2e677636038be449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a5fba9c719bedb9584cdec2e677636038be449"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "d96b40ada68188383e67f32b7adbf1b94c9a4c06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b1e44bee1cc164e8b6660eae8980a0e52770f06", "patch": "@@ -1,3 +1,9 @@\n+2003-08-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-tree.h (C_DECL_FILE_SCOPE): Move ...\n+\t* tree.h (DECL_FILE_SCOPE_P): ... here, and rename.\n+\t* c-decl.c, c-objc-common.c, c-typeck.c: Update to match.\n+\n 2003-08-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.def: Fix typos."}, {"sha": "51491d283e54ab23da9fd0a68949a59542348e82", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4b1e44bee1cc164e8b6660eae8980a0e52770f06", "patch": "@@ -1571,7 +1571,7 @@ warn_if_shadowing (tree x, tree old)\n   name = IDENTIFIER_POINTER (DECL_NAME (x));\n   if (TREE_CODE (old) == PARM_DECL)\n     shadow_warning (SW_PARAM, name, old);\n-  else if (C_DECL_FILE_SCOPE (old))\n+  else if (DECL_FILE_SCOPE_P (old))\n     shadow_warning (SW_GLOBAL, name, old);\n   else\n     shadow_warning (SW_LOCAL, name, old);\n@@ -1818,7 +1818,7 @@ implicitly_declare (tree functionid)\n       if (!C_DECL_IMPLICIT (decl))\n \t{\n \t  implicit_decl_warning (DECL_NAME (decl));\n-\t  if (! C_DECL_FILE_SCOPE (decl))\n+\t  if (! DECL_FILE_SCOPE_P (decl))\n \t    warning (\"%Hprevious declaration of '%D'\",\n                      &DECL_SOURCE_LOCATION (decl), decl);\n \t  C_DECL_IMPLICIT (decl) = 1;\n@@ -1898,7 +1898,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \treturn 1;\n       return 0;\n     }\n-  else if (C_DECL_FILE_SCOPE (newdecl))\n+  else if (DECL_FILE_SCOPE_P (newdecl))\n     {\n       /* Objects declared at file scope:  */\n       /* If at least one is a reference, it's ok.  */\n@@ -2689,7 +2689,7 @@ start_decl (tree declarator, tree declspecs, int initialized, tree attributes)\n \t and we preserved the rtl from the previous one\n \t (which may or may not happen).  */\n       && !DECL_RTL_SET_P (tem)\n-      && C_DECL_FILE_SCOPE (tem))\n+      && DECL_FILE_SCOPE_P (tem))\n     {\n       if (TREE_TYPE (tem) != error_mark_node\n \t  && (COMPLETE_TYPE_P (TREE_TYPE (tem))\n@@ -2794,7 +2794,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \t\t   Otherwise, let it through, but if it is not `extern'\n \t\t   then it may cause an error message later.  */\n \t\t(DECL_INITIAL (decl) != 0\n-\t\t || !C_DECL_FILE_SCOPE (decl))\n+\t\t || !DECL_FILE_SCOPE_P (decl))\n \t      :\n \t\t/* An automatic variable with an incomplete type\n \t\t   is an error.  */\n@@ -2865,7 +2865,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n       if (c_dialect_objc ())\n \tobjc_check_decl (decl);\n \n-      if (C_DECL_FILE_SCOPE (decl))\n+      if (DECL_FILE_SCOPE_P (decl))\n \t{\n \t  if (DECL_INITIAL (decl) == NULL_TREE\n \t      || DECL_INITIAL (decl) == error_mark_node)\n@@ -2905,7 +2905,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \t    add_decl_stmt (decl);\n \t}\n \n-      if (!C_DECL_FILE_SCOPE (decl))\n+      if (!DECL_FILE_SCOPE_P (decl))\n \t{\n \t  /* Recompute the RTL of a local array now\n \t     if it used to be an incomplete type.  */\n@@ -2930,7 +2930,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n       /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n       if (c_dialect_objc ())\n \tobjc_check_decl (decl);\n-      rest_of_decl_compilation (decl, NULL, C_DECL_FILE_SCOPE (decl), 0);\n+      rest_of_decl_compilation (decl, NULL, DECL_FILE_SCOPE_P (decl), 0);\n     }\n \n   /* At the end of a declaration, throw away any variable type sizes\n@@ -6308,7 +6308,7 @@ c_expand_body_1 (tree fndecl, int nested_p)\n      to run global initializers, etc.  */\n   if (DECL_NAME (fndecl)\n       && MAIN_NAME_P (DECL_NAME (fndecl))\n-      && C_DECL_FILE_SCOPE (fndecl))\n+      && DECL_FILE_SCOPE_P (fndecl))\n     expand_main_function ();\n \n   /* Generate the RTL for this function.  */\n@@ -6640,7 +6640,7 @@ tree\n identifier_global_value\t(tree t)\n {\n   tree decl = IDENTIFIER_SYMBOL_VALUE (t);\n-  if (decl == 0 || C_DECL_FILE_SCOPE (decl))\n+  if (decl == 0 || DECL_FILE_SCOPE_P (decl))\n     return decl;\n \n   /* Shadowed by something else; find the true global value.  */"}, {"sha": "b5f263fe35c7c0cc1e18950a1572037fdca61970", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=4b1e44bee1cc164e8b6660eae8980a0e52770f06", "patch": "@@ -127,7 +127,7 @@ inline_forbidden_p (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n       /* We cannot inline a nested function that jumps to a nonlocal\n          label.  */\n       if (TREE_CODE (t) == LABEL_DECL\n-\t  && !C_DECL_FILE_SCOPE (t) && DECL_CONTEXT (t) != fn)\n+\t  && !DECL_FILE_SCOPE_P (t) && DECL_CONTEXT (t) != fn)\n \treturn node;\n \n       break;\n@@ -184,7 +184,7 @@ c_cannot_inline_tree_fn (tree *fnp)\n \tgoto cannot_inline;\n     }\n \n-  if (! C_DECL_FILE_SCOPE (fn))\n+  if (! DECL_FILE_SCOPE_P (fn))\n     {\n       /* If a nested function has pending sizes, we may have already\n          saved them.  */"}, {"sha": "7615486595d610dfdf7a85c157eb89627426ef57", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=4b1e44bee1cc164e8b6660eae8980a0e52770f06", "patch": "@@ -138,11 +138,6 @@ struct lang_type GTY(())\n \t|| (TYPE_ARG_TYPES (TREE_TYPE (EXP)) == 0\t\\\n \t    && !DECL_BUILT_IN (EXP)))\n \n-/* Nonzero for a decl which is at file scope.  */\n-#define C_DECL_FILE_SCOPE(EXP) \t\t\t\t\t\\\n-  (! DECL_CONTEXT (EXP)\t\t\t\t\t\t\\\n-   || TREE_CODE (DECL_CONTEXT (EXP)) == TRANSLATION_UNIT_DECL)\n-\n /* For FUNCTION_TYPE, a hidden list of types of arguments.  The same as\n    TYPE_ARG_TYPES for functions with prototypes, but created for functions\n    without prototypes.  */"}, {"sha": "2dfce9e2ecd0a664bb5e111a61e6be66e03bbf21", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4b1e44bee1cc164e8b6660eae8980a0e52770f06", "patch": "@@ -1545,7 +1545,7 @@ build_external_ref (tree id, int fun)\n       /* Properly declared variable or function reference.  */\n       if (!objc_ivar)\n \tref = decl;\n-      else if (decl != objc_ivar && !C_DECL_FILE_SCOPE (decl))\n+      else if (decl != objc_ivar && !DECL_FILE_SCOPE_P (decl))\n \t{\n \t  warning (\"local declaration of `%s' hides instance variable\",\n \t\t   IDENTIFIER_POINTER (id));\n@@ -1585,7 +1585,7 @@ build_external_ref (tree id, int fun)\n       TREE_CONSTANT (ref) = 1;\n     }\n   else if (current_function_decl != 0\n-\t   && !C_DECL_FILE_SCOPE (current_function_decl)\n+\t   && !DECL_FILE_SCOPE_P (current_function_decl)\n \t   && (TREE_CODE (ref) == VAR_DECL\n \t       || TREE_CODE (ref) == PARM_DECL\n \t       || TREE_CODE (ref) == FUNCTION_DECL))\n@@ -2436,7 +2436,7 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \t   file-scope function counts as a constant.  */\n \tif (staticp (arg)\n \t    && ! (TREE_CODE (arg) == FUNCTION_DECL\n-\t\t  && !C_DECL_FILE_SCOPE (arg)))\n+\t\t  && !DECL_FILE_SCOPE_P (arg)))\n \t  TREE_CONSTANT (addr) = 1;\n \treturn addr;\n       }"}, {"sha": "7f99a51490527329602502267f6582149ff3eb09", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1e44bee1cc164e8b6660eae8980a0e52770f06/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4b1e44bee1cc164e8b6660eae8980a0e52770f06", "patch": "@@ -1624,6 +1624,11 @@ struct tree_type GTY(())\n #define DECL_ESTIMATED_INSNS(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->decl.u1.i)\n \n+/* Nonzero for a decl which is at file scope.  */\n+#define DECL_FILE_SCOPE_P(EXP) \t\t\t\t\t\\\n+  (! DECL_CONTEXT (EXP)\t\t\t\t\t\t\\\n+   || TREE_CODE (DECL_CONTEXT (EXP)) == TRANSLATION_UNIT_DECL)\n+\n struct function;\n \n struct tree_decl GTY(())"}]}