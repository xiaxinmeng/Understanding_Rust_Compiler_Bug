{"sha": "ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZhZjkzMDVhYTBmMGQ0YTRjYzZjYzhhZmE1NDQ0Yjk0YjJiNjdhMA==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-09T12:46:57Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-09T12:46:57Z"}, "message": "re PR fortran/78505 ([F08] Coarray source allocation not synchronizing on oversubscribed cores)\n\ngcc/fortran/ChangeLog:\n\n2016-12-09  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/78505\n\t* trans-stmt.c (gfc_trans_allocate): Add sync all after the execution\n\tof the whole allocate-statement to adhere to the standard.\n\ngcc/testsuite/ChangeLog:\n\n2016-12-09  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/78505\n\t* gfortran.dg/coarray_alloc_with_implicit_sync_1.f90: New test.\n\nFrom-SVN: r243482", "tree": {"sha": "8fe9dad2782867aa3c0da84852836bbebe934abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fe9dad2782867aa3c0da84852836bbebe934abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/comments", "author": null, "committer": null, "parents": [{"sha": "39da58667d94ab210cb6918fb8f528aa6aabfbb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39da58667d94ab210cb6918fb8f528aa6aabfbb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39da58667d94ab210cb6918fb8f528aa6aabfbb2"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "23421639671f37ecc8f61c852e663a85e0281544", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "patch": "@@ -1,3 +1,9 @@\n+2016-12-09  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78505\n+\t* trans-stmt.c (gfc_trans_allocate): Add sync all after the execution\n+\tof the whole allocate-statement to adhere to the standard.\n+\n 2016-12-09  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* trans-array.c (gfc_array_deallocate): Remove wrapper."}, {"sha": "d34bdba9628c9f5adf1c594316e5a9d18d80ae89", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "patch": "@@ -5506,7 +5506,7 @@ gfc_trans_allocate (gfc_code * code)\n   stmtblock_t block;\n   stmtblock_t post;\n   tree nelems;\n-  bool upoly_expr, tmp_expr3_len_flag = false, al_len_needs_set;\n+  bool upoly_expr, tmp_expr3_len_flag = false, al_len_needs_set, is_coarray ;\n   gfc_symtree *newsym = NULL;\n \n   if (!code->ext.alloc.list)\n@@ -5516,6 +5516,7 @@ gfc_trans_allocate (gfc_code * code)\n   expr3 = expr3_vptr = expr3_len = expr3_esize = NULL_TREE;\n   label_errmsg = label_finish = errmsg = errlen = NULL_TREE;\n   e3_is = E3_UNSET;\n+  is_coarray = false;\n \n   gfc_init_block (&block);\n   gfc_init_block (&post);\n@@ -5555,8 +5556,9 @@ gfc_trans_allocate (gfc_code * code)\n      expression.  */\n   if (code->expr3)\n     {\n-      bool vtab_needed = false, temp_var_needed = false,\n-\t  is_coarray = gfc_is_coarray (code->expr3);\n+      bool vtab_needed = false, temp_var_needed = false;\n+\n+      is_coarray = gfc_is_coarray (code->expr3);\n \n       /* Figure whether we need the vtab from expr3.  */\n       for (al = code->ext.alloc.list; !vtab_needed && al != NULL;\n@@ -6093,6 +6095,9 @@ gfc_trans_allocate (gfc_code * code)\n \t      tree caf_decl, token;\n \t      gfc_se caf_se;\n \n+\t      /* Set flag, to add synchronize after the allocate.  */\n+\t      is_coarray = true;\n+\n \t      gfc_init_se (&caf_se, NULL);\n \n \t      caf_decl = gfc_get_tree_for_caf_expr (expr);\n@@ -6114,6 +6119,11 @@ gfc_trans_allocate (gfc_code * code)\n \t}\n       else\n \t{\n+\t  /* Allocating coarrays needs a sync after the allocate executed.\n+\t     Set the flag to add the sync after all objects are allocated.  */\n+\t  is_coarray = is_coarray || (gfc_caf_attr (expr).codimension\n+\t\t\t\t      && flag_coarray == GFC_FCOARRAY_LIB);\n+\n \t  if (expr->ts.type == BT_CHARACTER && al_len != NULL_TREE\n \t      && expr3_len != NULL_TREE)\n \t    {\n@@ -6357,6 +6367,15 @@ gfc_trans_allocate (gfc_code * code)\n       gfc_add_modify (&block, se.expr, tmp);\n     }\n \n+  if (is_coarray && flag_coarray == GFC_FCOARRAY_LIB)\n+    {\n+      /* Add a sync all after the allocation has been executed.  */\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n+\t\t\t\t 3, null_pointer_node, null_pointer_node,\n+\t\t\t\t integer_zero_node);\n+      gfc_add_expr_to_block (&post, tmp);\n+    }\n+\n   gfc_add_block_to_block (&block, &se.post);\n   gfc_add_block_to_block (&block, &post);\n "}, {"sha": "49146a3b6b34be76f24b61ffc04f133507993888", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "patch": "@@ -1,3 +1,8 @@\n+2016-12-09  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78505\n+\t* gfortran.dg/coarray_alloc_with_implicit_sync_1.f90: New test.\n+\n 2016-12-09  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* gfortran.dg/coarray_alloc_comp_3.f08: New test."}, {"sha": "1dbbcb7bf6e9849960416efe5f10cd5573853761", "filename": "gcc/testsuite/gfortran.dg/coarray_alloc_with_implicit_sync_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_alloc_with_implicit_sync_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_alloc_with_implicit_sync_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_alloc_with_implicit_sync_1.f90?ref=ffaf9305aa0f0d4a4cc6cc8afa5444b94b2b67a0", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib\" }\n+! Check that allocating a coarray adds an implicit sync all.\n+ \n+ implicit none\n+ integer, allocatable :: f(:)[:]\n+ allocate( f(20)[*], source = 1 )\n+end\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_sync_all \\\\(\" 1 \"original\" } }"}]}