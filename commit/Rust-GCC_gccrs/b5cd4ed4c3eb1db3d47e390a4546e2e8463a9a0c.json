{"sha": "b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjZDRlZDRjM2ViMWRiM2Q0N2UzOTBhNDU0NmUyZTg0NjNhOWEwYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-22T14:46:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-22T14:46:58Z"}, "message": "calls.c (flags_from_decl_or_type): Move ECF_SP_DEPRESSED here.\n\n\t* calls.c (flags_from_decl_or_type): Move ECF_SP_DEPRESSED here.\n\t(expand_call): Delete from here.\n\tDo pending stack adjustments if ECF_SP_DEPRESSED.\n\nFrom-SVN: r48267", "tree": {"sha": "25d46e8d5e09f2c5788b455a9ac84fd305e096b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d46e8d5e09f2c5788b455a9ac84fd305e096b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c/comments", "author": null, "committer": null, "parents": [{"sha": "c470afad3c835b020cdd9c500f38f9d12713866a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c470afad3c835b020cdd9c500f38f9d12713866a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c470afad3c835b020cdd9c500f38f9d12713866a"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "0290fca10dfbe792f2a0d14911cb8a91ccdd7a95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "patch": "@@ -1,5 +1,9 @@\n Sat Dec 22 08:59:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* calls.c (flags_from_decl_or_type): Move ECF_SP_DEPRESSED here.\n+\t(expand_call): Delete from here.\n+\tDo pending stack adjustments if ECF_SP_DEPRESSED.\n+\n \t* dwarf2out.c (save_rtx): Deleted.\n \t(mem_loc_descriptor): Do equivalent operation.\n \t(add_const_value_attribute, case CONST): Likewise."}, {"sha": "5c4fd8d17925642b257228641bc13a65d36fba42", "filename": "gcc/calls.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=b5cd4ed4c3eb1db3d47e390a4546e2e8463a9a0c", "patch": "@@ -789,17 +789,19 @@ setjmp_call_p (fndecl)\n   return special_function_p (fndecl, 0) & ECF_RETURNS_TWICE;\n }\n \n-/* Detect flags (function attributes) from the function type node.  */\n+/* Detect flags (function attributes) from the function decl or type node.  */\n \n static int\n flags_from_decl_or_type (exp)\n      tree exp;\n {\n   int flags = 0;\n-\n+  tree type = exp;\n   /* ??? We can't set IS_MALLOC for function types?  */\n   if (DECL_P (exp))\n     {\n+      type = TREE_TYPE (exp);\n+\n       /* The function exp may have the `malloc' attribute.  */\n       if (DECL_P (exp) && DECL_IS_MALLOC (exp))\n \tflags |= ECF_MALLOC;\n@@ -818,6 +820,14 @@ flags_from_decl_or_type (exp)\n   if (TREE_THIS_VOLATILE (exp))\n     flags |= ECF_NORETURN;\n \n+  /* Mark if the function returns with the stack pointer depressed.   We\n+     cannot consider it pure or constant in that case.  */\n+  if (TREE_CODE (type) == FUNCTION_TYPE && TYPE_RETURNS_STACK_DEPRESSED (type))\n+    {\n+      flags |= ECF_SP_DEPRESSED;\n+      flags &= ~(ECF_PURE | ECF_CONST);\n+    }\n+\n   return flags;\n }\n \n@@ -2206,14 +2216,6 @@ expand_call (exp, target, ignore)\n   else\n     flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n \n-  /* Mark if the function returns with the stack pointer depressed.  */\n-  if (TREE_CODE (TREE_TYPE (TREE_TYPE (p))) == FUNCTION_TYPE\n-      && TYPE_RETURNS_STACK_DEPRESSED (TREE_TYPE (TREE_TYPE (p))))\n-    {\n-      flags |= ECF_SP_DEPRESSED;\n-      flags &= ~(ECF_PURE | ECF_CONST);\n-    }\n-\n #ifdef REG_PARM_STACK_SPACE\n #ifdef MAYBE_REG_PARM_STACK_SPACE\n   reg_parm_stack_space = MAYBE_REG_PARM_STACK_SPACE;\n@@ -2658,9 +2660,11 @@ expand_call (exp, target, ignore)\n       /* Don't let pending stack adjusts add up to too much.\n \t Also, do all pending adjustments now if there is any chance\n \t this might be a call to alloca or if we are expanding a sibling\n-\t call sequence.  */\n+\t call sequence or if we are calling a function that is to return\n+\t with stack pointer depressed.  */\n       if (pending_stack_adjust >= 32\n-\t  || (pending_stack_adjust > 0 && (flags & ECF_MAY_BE_ALLOCA))\n+\t  || (pending_stack_adjust > 0\n+\t      && (flags & (ECF_MAY_BE_ALLOCA | ECF_SP_DEPRESSED)))\n \t  || pass == 0)\n \tdo_pending_stack_adjust ();\n \n@@ -3170,9 +3174,7 @@ expand_call (exp, target, ignore)\n \n       if (TYPE_MODE (TREE_TYPE (exp)) == VOIDmode\n \t  || ignore)\n-\t{\n-\t  target = const0_rtx;\n-\t}\n+\ttarget = const0_rtx;\n       else if (structure_value_addr)\n \t{\n \t  if (target == 0 || GET_CODE (target) != MEM)"}]}