{"sha": "aaeaa9a91c6166d095b0b128315290b538080fac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlYWE5YTkxYzYxNjZkMDk1YjBiMTI4MzE1MjkwYjUzODA4MGZhYw==", "commit": {"author": {"name": "Radovan Obradovic", "email": "robradovic@mips.com", "date": "2014-05-05T22:51:36Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-05-05T22:51:36Z"}, "message": "Add call_fusage_contains_non_callee_clobbers hook\n\n2014-05-05  Radovan Obradovic  <robradovic@mips.com>\n            Tom de Vries  <tom@codesourcery.com>\n\n\t* target.def (call_fusage_contains_non_callee_clobbers): New DEFHOOKPOD.\n\t* doc/tm.texi.in (@node Stack and Calling): Add Miscellaneous Register\n\tHooks to @menu.\n\t(@node Miscellaneous Register Hooks): New node.\n\t(@hook TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): New hook.\n\t* doc/tm.texi: Regenerate.\n\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r210085", "tree": {"sha": "0143c588ed170c91e0177aa70b6d00bbdcffd76a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0143c588ed170c91e0177aa70b6d00bbdcffd76a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaeaa9a91c6166d095b0b128315290b538080fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaeaa9a91c6166d095b0b128315290b538080fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaeaa9a91c6166d095b0b128315290b538080fac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaeaa9a91c6166d095b0b128315290b538080fac/comments", "author": null, "committer": null, "parents": [{"sha": "a29aa02e798ba731d43363495f158f0dea351160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29aa02e798ba731d43363495f158f0dea351160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29aa02e798ba731d43363495f158f0dea351160"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "0a5bd037420479d69cee8a4668eb2c3a254485a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaeaa9a91c6166d095b0b128315290b538080fac", "patch": "@@ -1,3 +1,13 @@\n+2014-05-05  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* target.def (call_fusage_contains_non_callee_clobbers): New DEFHOOKPOD.\n+\t* doc/tm.texi.in (@node Stack and Calling): Add Miscellaneous Register\n+\tHooks to @menu.\n+\t(@node Miscellaneous Register Hooks): New node.\n+\t(@hook TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\n 2014-05-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR driver/61065"}, {"sha": "4eed4511b60555588b49ae11e54fffd8aa5baf27", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=aaeaa9a91c6166d095b0b128315290b538080fac", "patch": "@@ -3091,6 +3091,7 @@ This describes the stack layout and calling conventions.\n * Profiling::\n * Tail Calls::\n * Stack Smashing Protection::\n+* Miscellaneous Register Hooks::\n @end menu\n \n @node Frame Layout\n@@ -5020,6 +5021,21 @@ normally defined in @file{libgcc2.c}.\n Whether this target supports splitting the stack when the options described in @var{opts} have been passed.  This is called after options have been parsed, so the target may reject splitting the stack in some configurations.  The default version of this hook returns false.  If @var{report} is true, this function may issue a warning or error; if @var{report} is false, it must simply return a value\n @end deftypefn\n \n+@node Miscellaneous Register Hooks\n+@subsection Miscellaneous register hooks\n+@cindex miscellaneous register hooks\n+\n+@deftypevr {Target Hook} bool TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS\n+set to true if all the calls in the current function contain clobbers in\n+CALL_INSN_FUNCTION_USAGE for the registers that are clobbered by the call\n+rather than by the callee, and are not already set or clobbered in the call\n+pattern.  Examples of such registers are registers used in PLTs and stubs,\n+and temporary registers used in the call instruction but not present in the\n+rtl pattern.  Another way to formulate it is the registers not present in the\n+rtl pattern that are clobbered by the call assuming the callee does not\n+clobber any register.  The default version of this hook is set to false.\n+@end deftypevr\n+\n @node Varargs\n @section Implementing the Varargs Macros\n @cindex varargs implementation"}, {"sha": "3c59714a862eb5da280c1e41faec07b95179b57d", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=aaeaa9a91c6166d095b0b128315290b538080fac", "patch": "@@ -2720,6 +2720,7 @@ This describes the stack layout and calling conventions.\n * Profiling::\n * Tail Calls::\n * Stack Smashing Protection::\n+* Miscellaneous Register Hooks::\n @end menu\n \n @node Frame Layout\n@@ -3987,6 +3988,12 @@ the function prologue.  Normally, the profiling code comes after.\n \n @hook TARGET_SUPPORTS_SPLIT_STACK\n \n+@node Miscellaneous Register Hooks\n+@subsection Miscellaneous register hooks\n+@cindex miscellaneous register hooks\n+\n+@hook TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS\n+\n @node Varargs\n @section Implementing the Varargs Macros\n @cindex varargs implementation"}, {"sha": "7e0c96e472c12331ddc82e6b6be22c57db011960", "filename": "gcc/target.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaeaa9a91c6166d095b0b128315290b538080fac/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=aaeaa9a91c6166d095b0b128315290b538080fac", "patch": "@@ -5142,6 +5142,22 @@ FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM, and the PIC_OFFSET_TABLE_REGNUM.\",\n  void, (bitmap regs),\n  hook_void_bitmap)\n \n+/* Targets should define this target hook to mark that non-callee clobbers are\n+   present in CALL_INSN_FUNCTION_USAGE for all the calls in the current\n+   function.  */\n+DEFHOOKPOD\n+(call_fusage_contains_non_callee_clobbers,\n+ \"set to true if all the calls in the current function contain clobbers in\\n\\\n+CALL_INSN_FUNCTION_USAGE for the registers that are clobbered by the call\\n\\\n+rather than by the callee, and are not already set or clobbered in the call\\n\\\n+pattern.  Examples of such registers are registers used in PLTs and stubs,\\n\\\n+and temporary registers used in the call instruction but not present in the\\n\\\n+rtl pattern.  Another way to formulate it is the registers not present in the\\n\\\n+rtl pattern that are clobbered by the call assuming the callee does not\\n\\\n+clobber any register.  The default version of this hook is set to false.\",\n+ bool, \n+ false)\n+\n /* Fill in additional registers set up by prologue into a regset.  */\n DEFHOOK\n (set_up_by_prologue,"}]}