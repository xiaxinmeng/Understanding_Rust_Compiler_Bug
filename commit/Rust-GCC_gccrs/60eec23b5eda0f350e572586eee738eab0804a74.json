{"sha": "60eec23b5eda0f350e572586eee738eab0804a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlZWMyM2I1ZWRhMGYzNTBlNTcyNTg2ZWVlNzM4ZWFiMDgwNGE3NA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T08:19:37Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-09T01:33:40Z"}, "message": "Optimize vec_extract for 256/512-bit vector when index exceeds the lower 128 bits.\n\n-\tvextracti32x8\t$0x1, %zmm0, %ymm0\n-\tvmovd\t%xmm0, %eax\n+\tvalignd\t$8, %zmm0, %zmm0, %zmm1\n+\tvmovd\t%xmm1, %eax\n\n-\tvextracti32x8\t$0x1, %zmm0, %ymm0\n-\tvextracti128\t$0x1, %ymm0, %xmm0\n-\tvpextrd\t$3, %xmm0, %eax\n+\tvalignd\t$15, %zmm0, %zmm0, %zmm1\n+\tvmovd\t%xmm1, %eax\n\n-\tvextractf64x2\t$0x1, %ymm0, %xmm0\n+\tvalignq\t$2, %ymm0, %ymm0, %ymm0\n\n-\tvextractf64x4\t$0x1, %zmm0, %ymm0\n-\tvextractf64x2\t$0x1, %ymm0, %xmm0\n-\tvunpckhpd\t%xmm0, %xmm0, %xmm0\n+\tvalignq\t$7, %zmm0, %zmm0, %zmm0\n\ngcc/ChangeLog:\n\n\tPR target/91103\n\t* config/i386/sse.md (*vec_extract<mode><ssescalarmodelower>_valign):\n\tNew define_insn.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/91103\n\t* gcc.target/i386/pr91103-1.c: New test.\n\t* gcc.target/i386/pr91103-2.c: New test.", "tree": {"sha": "2b6f7a765bac97ef89278cfb643d2166181bddd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6f7a765bac97ef89278cfb643d2166181bddd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60eec23b5eda0f350e572586eee738eab0804a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60eec23b5eda0f350e572586eee738eab0804a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60eec23b5eda0f350e572586eee738eab0804a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60eec23b5eda0f350e572586eee738eab0804a74/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6db7cd41ccf821ffb10ff4f18845465e98803cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db7cd41ccf821ffb10ff4f18845465e98803cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6db7cd41ccf821ffb10ff4f18845465e98803cd"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "ee81fdb74d4b2b796e1ca03df3f42ce79bedd5f4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60eec23b5eda0f350e572586eee738eab0804a74/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60eec23b5eda0f350e572586eee738eab0804a74/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=60eec23b5eda0f350e572586eee738eab0804a74", "patch": "@@ -233,6 +233,12 @@\n    V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n    V8DF  (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator V48_256_512_AVX512VL\n+  [V16SI (V8SI \"TARGET_AVX512VL\")\n+   V8DI  (V4DI \"TARGET_AVX512VL\")\n+   V16SF (V8SF \"TARGET_AVX512VL\")\n+   V8DF  (V4DF \"TARGET_AVX512VL\")])\n+\n ;; 1,2 byte AVX-512{BW,VL} vector modes. Supposed TARGET_AVX512BW baseline.\n (define_mode_iterator VI12_AVX512VL\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n@@ -828,6 +834,15 @@\n    (V8HF \"TI\") (V16HF \"OI\") (V32HF \"XI\")\n    (TI \"TI\")])\n \n+(define_mode_attr sseintvecinsnmode\n+  [(V64QI \"XI\") (V32HI \"XI\") (V16SI \"XI\") (V8DI \"XI\") (V4TI \"XI\")\n+   (V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\") (V2TI \"OI\")\n+   (V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V1TI \"TI\")\n+   (V16SF \"XI\") (V8DF \"XI\")\n+   (V8SF \"OI\") (V4DF \"OI\")\n+   (V4SF \"TI\") (V2DF \"TI\")\n+   (TI \"TI\")])\n+\n ;; SSE constant -1 constraint\n (define_mode_attr sseconstm1\n   [(V64QI \"BC\") (V32HI \"BC\") (V16SI \"BC\") (V8DI \"BC\") (V4TI \"BC\")\n@@ -10517,6 +10532,23 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_mode_attr vec_extract_imm_predicate\n+  [(V16SF \"const_0_to_15_operand\") (V8SF \"const_0_to_7_operand\")\n+   (V16SI \"const_0_to_15_operand\") (V8SI \"const_0_to_7_operand\")\n+   (V8DF \"const_0_to_7_operand\") (V4DF \"const_0_to_3_operand\")\n+   (V8DI \"const_0_to_7_operand\") (V4DI \"const_0_to_3_operand\")])\n+\n+(define_insn \"*vec_extract<mode><ssescalarmodelower>_valign\"\n+  [(set (match_operand:<ssescalarmode> 0 \"register_operand\" \"=v\")\n+\t(vec_select:<ssescalarmode>\n+\t  (match_operand:V48_256_512_AVX512VL 1 \"register_operand\" \"v\")\n+\t  (parallel [(match_operand 2 \"<vec_extract_imm_predicate>\")])))]\n+  \"TARGET_AVX512F\n+   && INTVAL(operands[2]) >= 16 / GET_MODE_SIZE (<ssescalarmode>mode)\"\n+  \"valign<ternlogsuffix>\\t{%2, %1, %1, %<xtg_mode>0|%<xtg_mode>0, %1, %1, %2}\";\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseintvecinsnmode>\")])\n+\n (define_expand \"avx512f_shufps512_mask\"\n   [(match_operand:V16SF 0 \"register_operand\")\n    (match_operand:V16SF 1 \"register_operand\")"}, {"sha": "11caaa8bd1b6d5fff5cb979a4b5bde7967854adb", "filename": "gcc/testsuite/gcc.target/i386/pr91103-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60eec23b5eda0f350e572586eee738eab0804a74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91103-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60eec23b5eda0f350e572586eee738eab0804a74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91103-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91103-1.c?ref=60eec23b5eda0f350e572586eee738eab0804a74", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"valign\\[dq\\]\" 16 } } */\n+\n+typedef float v8sf __attribute__((vector_size(32)));\n+typedef float v16sf __attribute__((vector_size(64)));\n+typedef int v8si __attribute__((vector_size(32)));\n+typedef int v16si __attribute__((vector_size(64)));\n+typedef double v4df __attribute__((vector_size(32)));\n+typedef double v8df __attribute__((vector_size(64)));\n+typedef long long v4di __attribute__((vector_size(32)));\n+typedef long long v8di __attribute__((vector_size(64)));\n+\n+#define EXTRACT(V,S,IDX)\t\t\t\\\n+  S\t\t\t\t\t\t\\\n+  __attribute__((noipa))\t\t\t\\\n+  foo_##V##_##IDX (V v)\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return v[IDX];\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+EXTRACT (v8sf, float, 4);\n+EXTRACT (v8sf, float, 7);\n+EXTRACT (v8si, int, 4);\n+EXTRACT (v8si, int, 7);\n+EXTRACT (v16sf, float, 8);\n+EXTRACT (v16sf, float, 15);\n+EXTRACT (v16si, int, 8);\n+EXTRACT (v16si, int, 15);\n+EXTRACT (v4df, double, 2);\n+EXTRACT (v4df, double, 3);\n+EXTRACT (v4di, long long, 2);\n+EXTRACT (v4di, long long, 3);\n+EXTRACT (v8df, double, 4);\n+EXTRACT (v8df, double, 7);\n+EXTRACT (v8di, long long, 4);\n+EXTRACT (v8di, long long, 7);"}, {"sha": "010e4775723088fb619c7ef41d9ba7b772399eed", "filename": "gcc/testsuite/gcc.target/i386/pr91103-2.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60eec23b5eda0f350e572586eee738eab0804a74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91103-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60eec23b5eda0f350e572586eee738eab0804a74/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91103-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91103-2.c?ref=60eec23b5eda0f350e572586eee738eab0804a74", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+#include \"pr91103-1.c\"\n+\n+#define RUNCHECK(U,V,S,IDX)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      S tmp = foo_##V##_##IDX ((V)U.x);\t\t\\\n+      if (tmp != U.a[IDX])\t\t\t\\\n+\tabort();\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+test_256 (void)\n+{\n+  union512i_d di1;\n+  union256i_d di2;\n+  union512i_q q1;\n+  union256i_q q2;\n+  union512 f1;\n+  union256 f2;\n+  union512d d1;\n+  union256d d2;\n+  int sign = 1;\n+\n+  int i = 0;\n+  for (i = 0; i < 16; i++)\n+    {\n+      di1.a[i] = 30 * (i - 30) * sign;\n+      f1.a[i] = 56.78 * (i - 30) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i != 8; i++)\n+    {\n+      di2.a[i] = 15 * (i + 40) * sign;\n+      f2.a[i] = 90.12 * (i + 40) * sign;\n+      q1.a[i] = 15 * (i + 40) * sign;\n+      d1.a[i] = 90.12 * (i + 40) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i != 4; i++)\n+    {\n+      q2.a[i] = 15 * (i + 40) * sign;\n+      d2.a[i] = 90.12 * (i + 40) * sign;\n+      sign = -sign;\n+    }\n+\n+RUNCHECK (f2, v8sf, float, 4);\n+RUNCHECK (f2, v8sf, float, 7);\n+RUNCHECK (di2, v8si, int, 4);\n+RUNCHECK (di2, v8si, int, 7);\n+RUNCHECK (f1, v16sf, float, 8);\n+RUNCHECK (f1, v16sf, float, 15);\n+RUNCHECK (di1, v16si, int, 8);\n+RUNCHECK (di1, v16si, int, 15);\n+RUNCHECK (d2, v4df, double, 2);\n+RUNCHECK (d2, v4df, double, 3);\n+RUNCHECK (q2, v4di, long long, 2);\n+RUNCHECK (q2, v4di, long long, 3);\n+RUNCHECK (d1, v8df, double, 4);\n+RUNCHECK (d1, v8df, double, 7);\n+RUNCHECK (q1, v8di, long long, 4);\n+RUNCHECK (q1, v8di, long long, 7);\n+}\n+\n+void\n+test_128()\n+{\n+}"}]}