{"sha": "8f81c3c650cb19b50c44d52639fc05738736c88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4MWMzYzY1MGNiMTliNTBjNDRkNTI2MzlmYzA1NzM4NzM2Yzg4YQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-07T15:17:17Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-07T15:17:17Z"}, "message": "re PR fortran/29539 (ICE in variable_decl)\n\n2006-11-07 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29539\n\tPR fortran/29634\n\t* decl.c (variable_decl): Add test for presence of proc_name.\n\t* error.c (gfc_error_flag_test): New function.\n\t* gfortran.h : Prototype for gfc_error_flag_test.\n\n2006-11-07 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29539\n\t* gfortran.dg/gfortran.dg/blockdata_3.f90: New test.\n\n\tPR fortran/29634\n\t* gfortran.dg/gfortran.dg/derived_function_interface_1.f90: New\n\ttest.\n\nFrom-SVN: r118553", "tree": {"sha": "e381d60e6698b9bdf2995a250640098b1187c13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e381d60e6698b9bdf2995a250640098b1187c13a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f81c3c650cb19b50c44d52639fc05738736c88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f81c3c650cb19b50c44d52639fc05738736c88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f81c3c650cb19b50c44d52639fc05738736c88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f81c3c650cb19b50c44d52639fc05738736c88a/comments", "author": null, "committer": null, "parents": [{"sha": "36b8206084f7c4812f565e01d86ccf711e60b702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b8206084f7c4812f565e01d86ccf711e60b702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b8206084f7c4812f565e01d86ccf711e60b702"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "2298315de8ea4921a1b413794e8ca2278cbf443b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8f81c3c650cb19b50c44d52639fc05738736c88a", "patch": "@@ -1,3 +1,11 @@\n+2006-11-07 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29539\n+\tPR fortran/29634\n+\t* decl.c (variable_decl): Add test for presence of proc_name.\n+\t* error.c (gfc_error_flag_test): New function.\n+\t* gfortran.h : Prototype for gfc_error_flag_test.\n+\n 2006-11-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/29601"}, {"sha": "ec3ce2ee892387218e45ef464630da9087aafa75", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8f81c3c650cb19b50c44d52639fc05738736c88a", "patch": "@@ -1218,6 +1218,7 @@ variable_decl (int elem)\n      that the interface may specify a procedure that is not pure if the procedure\n      is defined to be pure(12.3.2).  */\n   if (current_ts.type == BT_DERIVED\n+\t&& gfc_current_ns->proc_name\n \t&& gfc_current_ns->proc_name->attr.if_source == IFSRC_IFBODY\n \t&& current_ts.derived->ns != gfc_current_ns)\n     {\n@@ -2397,7 +2398,8 @@ gfc_match_data_decl (void)\n \tbreak;\n     }\n \n-  gfc_error (\"Syntax error in data declaration at %C\");\n+  if (gfc_error_flag_test () == 0)\n+    gfc_error (\"Syntax error in data declaration at %C\");\n   m = MATCH_ERROR;\n \n   gfc_free_data_all (gfc_current_ns);"}, {"sha": "ade361a69c555bb49d101c1502733e32e6589141", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=8f81c3c650cb19b50c44d52639fc05738736c88a", "patch": "@@ -699,6 +699,15 @@ gfc_clear_error (void)\n }\n \n \n+/* Tests the state of error_flag.  */\n+\n+int\n+gfc_error_flag_test (void)\n+{\n+  return error_buffer.flag;\n+}\n+\n+\n /* Check to see if any errors have been saved.\n    If so, print the error.  Returns the state of error_flag.  */\n "}, {"sha": "970bda3c91f55e0433a2e70eb4106d75d40cf774", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8f81c3c650cb19b50c44d52639fc05738736c88a", "patch": "@@ -1788,6 +1788,7 @@ void gfc_fatal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,\n void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_clear_error (void);\n int gfc_error_check (void);\n+int gfc_error_flag_test (void);\n \n notification gfc_notification_std (int);\n try gfc_notify_std (int, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);"}, {"sha": "74f54970121eacf336a2cf4e7d070406f2499350", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f81c3c650cb19b50c44d52639fc05738736c88a", "patch": "@@ -1,3 +1,12 @@\n+2006-11-07 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29539\n+\t* gfortran.dg/gfortran.dg/blockdata_3.f90: New test.\n+\n+\tPR fortran/29634\n+\t* gfortran.dg/gfortran.dg/derived_function_interface_1.f90: New\n+\ttest.\n+\n 2006-11-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/29601"}, {"sha": "695cbee4832ca4cbc69ef8ed0dc0c712a281369f", "filename": "gcc/testsuite/gfortran.dg/blockdata_3.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ftestsuite%2Fgfortran.dg%2Fblockdata_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ftestsuite%2Fgfortran.dg%2Fblockdata_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblockdata_3.f90?ref=8f81c3c650cb19b50c44d52639fc05738736c88a", "patch": "@@ -0,0 +1,28 @@\n+! { dg-compile }\n+! { dg-options \"-W -Wall\" }\n+! Tests the fix for PR29539, in which the derived type in a blockdata\n+! cause an ICE.  With the fix for PR29565, this now compiles and runs\n+! correctly.\n+!\n+! Contributed by Bernhard Fischer  <aldot@gcc.gnu.org>\n+!\n+block data\n+  common /c/ d(5), cc\n+  type c_t\n+    sequence\n+    integer i\n+  end type c_t\n+  type (c_t) :: cc\n+  data d /5*1./\n+  data cc%i /5/\n+end\n+\n+  common /c/ d(5), cc\n+  type c_t\n+    sequence\n+    integer i\n+  end type c_t\n+  type (c_t) :: cc\n+  print *, d\n+  print *, cc\n+end"}, {"sha": "2cee73c3c02d290a2f39b771c87fde409f9240f9", "filename": "gcc/testsuite/gfortran.dg/derived_function_interface_1.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_function_interface_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f81c3c650cb19b50c44d52639fc05738736c88a/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_function_interface_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_function_interface_1.f90?ref=8f81c3c650cb19b50c44d52639fc05738736c88a", "patch": "@@ -0,0 +1,40 @@\n+! { dg-compile }\n+! Tests the fix for PR29634, in which an ICE would occur in the\n+! interface declaration of a function with an 'old-style' type\n+! declaration.  When fixed, it was found that the error message\n+! was not very helpful - this was fixed.\n+!\n+! Contributed by Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+!\n+type(foo) function ext_fun()\n+  type foo\n+    integer :: i\n+  end type foo\n+  ext_fun%i = 1\n+end function ext_fun\n+\n+  type foo\n+    integer :: i\n+  end type foo\n+\n+  interface fun_interface\n+    type(foo) function fun()\n+    end function fun\n+  end interface\n+\n+  interface ext_fun_interface\n+    type(foo) function ext_fun()\n+    end function ext_fun\n+  end interface\n+\n+  type(foo) :: x\n+\n+  x = ext_fun ()\n+  print *, x%i\n+\n+contains\n+\n+  type(foo) function fun() ! { dg-error \"already has an explicit interface\" }\n+  end function fun  ! { dg-error \"Expecting END PROGRAM\" }\n+\n+end"}]}