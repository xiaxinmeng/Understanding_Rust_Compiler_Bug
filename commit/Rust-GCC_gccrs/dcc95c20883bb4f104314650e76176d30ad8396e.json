{"sha": "dcc95c20883bb4f104314650e76176d30ad8396e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjOTVjMjA4ODNiYjRmMTA0MzE0NjUwZTc2MTc2ZDMwYWQ4Mzk2ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-11T14:27:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-11T14:27:04Z"}, "message": "tree-vrp.c (simplify_conversion_using_ranges): Manually translate the source value-range through the conversion chain.\n\n2011-07-11  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (simplify_conversion_using_ranges): Manually\n\ttranslate the source value-range through the conversion chain.\n\nFrom-SVN: r176154", "tree": {"sha": "bafcbf8cbeddfaf7f813f266159b82dd6a444b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bafcbf8cbeddfaf7f813f266159b82dd6a444b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcc95c20883bb4f104314650e76176d30ad8396e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc95c20883bb4f104314650e76176d30ad8396e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc95c20883bb4f104314650e76176d30ad8396e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc95c20883bb4f104314650e76176d30ad8396e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f07e929dd8f68f5328cb6f4ec46e6d8897447a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07e929dd8f68f5328cb6f4ec46e6d8897447a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07e929dd8f68f5328cb6f4ec46e6d8897447a7a"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "72611b797f2e9e404465d3ae334aca0e2b04db0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc95c20883bb4f104314650e76176d30ad8396e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc95c20883bb4f104314650e76176d30ad8396e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcc95c20883bb4f104314650e76176d30ad8396e", "patch": "@@ -1,3 +1,8 @@\n+2011-07-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (simplify_conversion_using_ranges): Manually\n+\ttranslate the source value-range through the conversion chain.\n+\n 2011-07-11  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* expr.c (expand_expr_real_1): Use expand_insn for movmisalign."}, {"sha": "c975a5d0466d971e9b642e04893b09ab249106a1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc95c20883bb4f104314650e76176d30ad8396e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc95c20883bb4f104314650e76176d30ad8396e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=dcc95c20883bb4f104314650e76176d30ad8396e", "patch": "@@ -7347,30 +7347,55 @@ simplify_switch_using_ranges (gimple stmt)\n static bool\n simplify_conversion_using_ranges (gimple stmt)\n {\n-  tree rhs1 = gimple_assign_rhs1 (stmt);\n-  gimple def_stmt = SSA_NAME_DEF_STMT (rhs1);\n-  value_range_t *final, *inner;\n-\n-  /* Obtain final and inner value-ranges for a conversion\n-     sequence (final-type)(intermediate-type)inner-type.  */\n-  final = get_value_range (gimple_assign_lhs (stmt));\n-  if (final->type != VR_RANGE)\n-    return false;\n+  tree innerop, middleop, finaltype;\n+  gimple def_stmt;\n+  value_range_t *innervr;\n+  double_int innermin, innermax, middlemin, middlemax;\n+\n+  finaltype = TREE_TYPE (gimple_assign_lhs (stmt));\n+  middleop = gimple_assign_rhs1 (stmt);\n+  def_stmt = SSA_NAME_DEF_STMT (middleop);\n   if (!is_gimple_assign (def_stmt)\n       || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n     return false;\n-  rhs1 = gimple_assign_rhs1 (def_stmt);\n-  if (TREE_CODE (rhs1) != SSA_NAME)\n+  innerop = gimple_assign_rhs1 (def_stmt);\n+  if (TREE_CODE (innerop) != SSA_NAME)\n     return false;\n-  inner = get_value_range (rhs1);\n-  if (inner->type != VR_RANGE)\n+\n+  /* Get the value-range of the inner operand.  */\n+  innervr = get_value_range (innerop);\n+  if (innervr->type != VR_RANGE\n+      || TREE_CODE (innervr->min) != INTEGER_CST\n+      || TREE_CODE (innervr->max) != INTEGER_CST)\n     return false;\n-  /* If the value-range is preserved by the conversion sequence strip\n-     the intermediate conversion.  */\n-  if (!tree_int_cst_equal (final->min, inner->min)\n-      || !tree_int_cst_equal (final->max, inner->max))\n+\n+  /* Simulate the conversion chain to check if the result is equal if\n+     the middle conversion is removed.  */\n+  innermin = tree_to_double_int (innervr->min);\n+  innermax = tree_to_double_int (innervr->max);\n+  middlemin = double_int_ext (innermin, TYPE_PRECISION (TREE_TYPE (middleop)),\n+\t\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop)));\n+  middlemax = double_int_ext (innermax, TYPE_PRECISION (TREE_TYPE (middleop)),\n+\t\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop)));\n+  /* If the middle values do not represent a proper range fail.  */\n+  if (double_int_cmp (middlemin, middlemax,\n+\t\t      TYPE_UNSIGNED (TREE_TYPE (middleop))) > 0)\n     return false;\n-  gimple_assign_set_rhs1 (stmt, rhs1);\n+  if (!double_int_equal_p (double_int_ext (middlemin,\n+\t\t\t\t\t   TYPE_PRECISION (finaltype),\n+\t\t\t\t\t   TYPE_UNSIGNED (finaltype)),\n+\t\t\t   double_int_ext (innermin,\n+\t\t\t\t\t   TYPE_PRECISION (finaltype),\n+\t\t\t\t\t   TYPE_UNSIGNED (finaltype)))\n+      || !double_int_equal_p (double_int_ext (middlemax,\n+\t\t\t\t\t      TYPE_PRECISION (finaltype),\n+\t\t\t\t\t      TYPE_UNSIGNED (finaltype)),\n+\t\t\t      double_int_ext (innermax,\n+\t\t\t\t\t      TYPE_PRECISION (finaltype),\n+\t\t\t\t\t      TYPE_UNSIGNED (finaltype))))\n+    return false;\n+\n+  gimple_assign_set_rhs1 (stmt, innerop);\n   update_stmt (stmt);\n   return true;\n }"}]}