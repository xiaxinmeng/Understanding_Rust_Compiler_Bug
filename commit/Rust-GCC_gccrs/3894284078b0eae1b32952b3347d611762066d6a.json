{"sha": "3894284078b0eae1b32952b3347d611762066d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg5NDI4NDA3OGIwZWFlMWIzMjk1MmIzMzQ3ZDYxMTc2MjA2NmQ2YQ==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2015-09-02T23:59:21Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-09-02T23:59:21Z"}, "message": "Fix spawned function with lambda function\n\nMake sure that the spawned function's arguments will not be pushed\ninto lambda function.\n\ngcc/c-family/\n\n2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n\tPR middle-end/60586\n\t* c-common.h (cilk_gimplify_call_params_in_spawned_fn): New\n\tprototype.\n\t* c-gimplify.c (c_gimplify_expr): Added a call to the function\n\tcilk_gimplify_call_params_in_spawned_fn.\n\t* cilk.c (cilk_gimplify_call_params_in_spawned_fn): New function.\n\t(gimplify_cilk_spawn): Removed EXPR_STMT and CLEANUP_POINT_EXPR\n\tunwrapping.\n\ngcc/cp/\n\n2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n\tPR middle-end/60586\n\t* cp-gimplify.c (cilk_cp_gimplify_call_params_in_spawned_fn): New\n\tfunction.\n\t(cp_gimplify_expr): Added a call to the function\n\tcilk_cp_gimplify_call_params_in_spawned_fn.\n\ngcc/testsuite/\n\n2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n\n\tPR middle-end/60586\n\t* c-c++-common/cilk-plus/CK/pr60586.c: New file.\n\t* g++.dg/cilk-plus/CK/pr60586.cc: Likewise.\n\nFrom-SVN: r227423", "tree": {"sha": "8307f0b414b207edca570b97f7da74a6050db019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8307f0b414b207edca570b97f7da74a6050db019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3894284078b0eae1b32952b3347d611762066d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3894284078b0eae1b32952b3347d611762066d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3894284078b0eae1b32952b3347d611762066d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3894284078b0eae1b32952b3347d611762066d6a/comments", "author": null, "committer": null, "parents": [{"sha": "d04ff41777d999fe5f387f46ec8b9cb22422c513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04ff41777d999fe5f387f46ec8b9cb22422c513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04ff41777d999fe5f387f46ec8b9cb22422c513"}], "stats": {"total": 231, "additions": 215, "deletions": 16}, "files": [{"sha": "09b425f2b053f96c5b004bd9d7bc10cbafe21581", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -1,3 +1,14 @@\n+2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\tPR middle-end/60586\n+\t* c-common.h (cilk_gimplify_call_params_in_spawned_fn): New\n+\tprototype.\n+\t* c-gimplify.c (c_gimplify_expr): Added a call to the function\n+\tcilk_gimplify_call_params_in_spawned_fn.\n+\t* cilk.c (cilk_gimplify_call_params_in_spawned_fn): New function.\n+\t(gimplify_cilk_spawn): Removed EXPR_STMT and CLEANUP_POINT_EXPR\n+\tunwrapping.\n+\n 2015-08-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/67330"}, {"sha": "d24dfdab35efac48bc3032847a67ae4ee639f3d2", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -1424,6 +1424,8 @@ extern vec <tree, va_gc> *fix_sec_implicit_args\n extern tree insert_cilk_frame (tree);\n extern void cilk_init_builtins (void);\n extern int gimplify_cilk_spawn (tree *);\n+extern void cilk_gimplify_call_params_in_spawned_fn (tree *, gimple_seq *,\n+\t\t\t\t\t\t     gimple_seq *);\n extern void cilk_install_body_with_frame_cleanup (tree, tree, void *);\n extern bool cilk_detect_spawn_and_unwrap (tree *);\n extern bool cilk_set_spawn_marker (location_t, tree);"}, {"sha": "92987b588f74e8f331cd33aa121836dabf1b6a0e", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -288,8 +288,10 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n \n       /* If errors are seen, then just process it as a CALL_EXPR.  */\n       if (!seen_error ())\n-\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\n+\t{\n+\t  cilk_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n+\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t}\n     case MODIFY_EXPR:\n     case INIT_EXPR:\n     case CALL_EXPR:\n@@ -299,7 +301,10 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n \t     original expression (MODIFY/INIT/CALL_EXPR) is processes as\n \t     it is supposed to be.  */\n \t  && !seen_error ())\n-\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t{\n+\t  cilk_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n+\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t}\n \n     default:;\n     }"}, {"sha": "1c316a4eb7892d879d9e9b7e7ac129a33ddb16d9", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -762,6 +762,34 @@ create_cilk_wrapper (tree exp, tree *args_out)\n   return fndecl;\n }\n \n+/* Gimplify all the parameters for the Spawned function.  *EXPR_P can be a\n+   CALL_EXPR, INIT_EXPR, MODIFY_EXPR or TARGET_EXPR.  *PRE_P and *POST_P are\n+   gimple sequences from the caller of gimplify_cilk_spawn.  */\n+\n+void\n+cilk_gimplify_call_params_in_spawned_fn (tree *expr_p, gimple_seq *pre_p,\n+\t\t\t\t\t gimple_seq *post_p)\n+{\n+  int ii = 0;\n+  tree *fix_parm_expr = expr_p;\n+\n+  /* Remove CLEANUP_POINT_EXPR and EXPR_STMT from *spawn_p.  */\n+  while (TREE_CODE (*fix_parm_expr) == CLEANUP_POINT_EXPR\n+\t || TREE_CODE (*fix_parm_expr) == EXPR_STMT)\n+    *fix_parm_expr = TREE_OPERAND (*fix_parm_expr, 0);\n+\n+  if ((TREE_CODE (*expr_p) == INIT_EXPR)\n+      || (TREE_CODE (*expr_p) == TARGET_EXPR)\n+      || (TREE_CODE (*expr_p) == MODIFY_EXPR))\n+    fix_parm_expr = &TREE_OPERAND (*expr_p, 1);\n+\n+  if (TREE_CODE (*fix_parm_expr) == CALL_EXPR)\n+    for (ii = 0; ii < call_expr_nargs (*fix_parm_expr); ii++)\n+      gimplify_expr (&CALL_EXPR_ARG (*fix_parm_expr, ii), pre_p, post_p,\n+\t\t     is_gimple_reg, fb_rvalue);\n+}\n+\n+\n /* Transform *SPAWN_P, a spawned CALL_EXPR, to gimple.  *SPAWN_P can be a\n    CALL_EXPR, INIT_EXPR or MODIFY_EXPR.  Returns GS_OK if everything is fine,\n    and GS_UNHANDLED, otherwise.  */\n@@ -779,12 +807,6 @@ gimplify_cilk_spawn (tree *spawn_p)\n \n   cfun->calls_cilk_spawn = 1;\n   cfun->is_cilk_function = 1;\n-\n-  /* Remove CLEANUP_POINT_EXPR and EXPR_STMT from *spawn_p.  */\n-  while (TREE_CODE (expr) == CLEANUP_POINT_EXPR\n-\t || TREE_CODE (expr) == EXPR_STMT)\n-    expr = TREE_OPERAND (expr, 0);\n-  \n   new_args = NULL;\n   function = create_cilk_wrapper (expr, &new_args);\n "}, {"sha": "cd00395f1135f49b32d540454ba31bc20b0fe9a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -1,3 +1,11 @@\n+2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\tPR middle-end/60586\n+\t* cp-gimplify.c (cilk_cp_gimplify_call_params_in_spawned_fn): New\n+\tfunction.\n+\t(cp_gimplify_expr): Added a call to the function\n+\tcilk_cp_gimplify_call_params_in_spawned_fn.\n+\n 2015-09-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/61753"}, {"sha": "5ab060431a3f3965dc1448d00278a441c72bf7af", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -95,6 +95,25 @@ finish_bc_block (tree *block, enum bc_t bc, tree label)\n   DECL_CHAIN (label) = NULL_TREE;\n }\n \n+/* This function is a wrapper for cilk_gimplify_call_params_in_spawned_fn.\n+   *EXPR_P can be a CALL_EXPR, INIT_EXPR, MODIFY_EXPR, AGGR_INIT_EXPR or\n+   TARGET_EXPR.  *PRE_P and *POST_P are gimple sequences from the caller\n+   of gimplify_cilk_spawn.  */\n+\n+static void\n+cilk_cp_gimplify_call_params_in_spawned_fn (tree *expr_p, gimple_seq *pre_p,\n+\t\t\t\t\t    gimple_seq *post_p)\n+{\n+  int ii = 0;\n+\n+  cilk_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);  \n+  if (TREE_CODE (*expr_p) == AGGR_INIT_EXPR)\n+    for (ii = 0; ii < aggr_init_expr_nargs (*expr_p); ii++)\n+      gimplify_expr (&AGGR_INIT_EXPR_ARG (*expr_p, ii), pre_p, post_p,\n+\t\t     is_gimple_reg, fb_rvalue);\n+}\n+\n+\n /* Get the LABEL_EXPR to represent a break or continue statement\n    in the current block scope.  BC indicates which.  */\n \n@@ -603,7 +622,10 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       if (fn_contains_cilk_spawn_p (cfun)\n \t  && cilk_detect_spawn_and_unwrap (expr_p)\n \t  && !seen_error ())\n-\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t{\n+\t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n+\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t}\n       cp_gimplify_init_expr (expr_p);\n       if (TREE_CODE (*expr_p) != INIT_EXPR)\n \treturn GS_OK;\n@@ -614,8 +636,10 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \tif (fn_contains_cilk_spawn_p (cfun)\n \t    && cilk_detect_spawn_and_unwrap (expr_p)\n \t    && !seen_error ())\n-\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\n+\t  {\n+\t    cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n+\t    return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t  }\n \t/* If the back end isn't clever enough to know that the lhs and rhs\n \t   types are the same, add an explicit conversion.  */\n \ttree op0 = TREE_OPERAND (*expr_p, 0);\n@@ -715,14 +739,18 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n       /* If errors are seen, then just process it as a CALL_EXPR.  */\n       if (!seen_error ())\n-\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-      \n+\t{\n+\t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n+\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t}\n     case CALL_EXPR:\n       if (fn_contains_cilk_spawn_p (cfun)\n \t  && cilk_detect_spawn_and_unwrap (expr_p)\n \t  && !seen_error ())\n-\treturn (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n-\n+\t{\n+\t  cilk_cp_gimplify_call_params_in_spawned_fn (expr_p, pre_p, post_p);\n+\t  return (enum gimplify_status) gimplify_cilk_spawn (expr_p);\n+\t}\n       /* DR 1030 says that we need to evaluate the elements of an\n \t initializer-list in forward order even when it's used as arguments to\n \t a constructor.  So if the target wants to evaluate them in reverse"}, {"sha": "2c84f9a684bce6c9a64c5c3bab24d9de5ff9a302", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -1,3 +1,9 @@\n+2015-09-02  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\tPR middle-end/60586\n+\t* c-c++-common/cilk-plus/CK/pr60586.c: New file.\n+\t* g++.dg/cilk-plus/CK/pr60586.cc: Likewise.\n+\n 2015-09-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67432"}, {"sha": "c4012a0a4b1187db3fc08e243461cde1ae2252d8", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/pr60586.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60586.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60586.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60586.c?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run  { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"-fcilkplus -O2\" } */\n+/* { dg-additional-options \"-lcilkrts\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int noop(int x)\n+{\n+  return x;\n+}\n+\n+int post_increment(int *x)\n+{\n+  return (*x)++;\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+  int m = 5;\n+  int n = m;\n+  int r = _Cilk_spawn noop(post_increment(&n));\n+  int n2 = n;\n+  _Cilk_sync;\n+\n+  if (r != m || n2 != m + 1)\n+    return 1;\n+  else\n+    return 0;\n+}\n+"}, {"sha": "6a27cade876c7bcd0b9dc5d88334748e668c017e", "filename": "gcc/testsuite/g++.dg/cilk-plus/CK/pr60586.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr60586.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3894284078b0eae1b32952b3347d611762066d6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr60586.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcilk-plus%2FCK%2Fpr60586.cc?ref=3894284078b0eae1b32952b3347d611762066d6a", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-options \"-fcilkplus\" } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* arm*-*-* } } */\n+/* { dg-options \"-fcilkplus -lcilkrts\" { target { i?86-*-* x86_64-*-* arm*-*-* } } } */\n+\n+class Rectangle\n+{\n+  int area_val, h, w;\n+  public:\n+    Rectangle (int, int);\n+    Rectangle (int, int, int);\n+    ~Rectangle ();\n+    int area ();\n+};\n+Rectangle::~Rectangle ()\n+{\n+  h = 0;\n+  w = 0;\n+  area_val = 0;\n+}\n+Rectangle::Rectangle (int height, int width)\n+{\n+  h = height;\n+  w = width;\n+  area_val = 0;\n+}\n+\n+int some_func(int &x)\n+{\n+  x++;\n+  return x;\n+}\n+\n+Rectangle::Rectangle (int height, int width, int area_orig)\n+{\n+  h = height;\n+  w = width;\n+  area_val = area_orig;\n+}\n+\n+int Rectangle::area()\n+{\n+  return (area_val += (h*w));\n+}\n+\n+\n+int some_func (int &);\n+\n+/* Spawning constructor.  */\n+int main1 (void)\n+{\n+  int x = 3;\n+  Rectangle r = _Cilk_spawn Rectangle (some_func(x), 3);\n+  return r.area();\n+}\n+ \n+/* Spawning constructor 2.  */\n+int main2 (void)\n+{\n+  Rectangle r (_Cilk_spawn Rectangle (4, 3));\n+  return r.area();\n+}\n+\n+/* Spawning copy constructor.  */\n+int main3 (void)\n+{\n+  int x = 3;\n+  Rectangle r = _Cilk_spawn Rectangle (some_func(x), 3, 2);\n+  return r.area ();\n+}\n+\n+/* Spawning copy constructor 2.  */\n+int main4 (void)\n+{\n+  Rectangle r ( _Cilk_spawn Rectangle (4, 3, 2));\n+  return r.area();\n+}\n+\n+int main (void)\n+{\n+  if (main1 () != 12)\n+    __builtin_abort ();\n+  if (main2 () != 12)\n+    __builtin_abort ();\n+  if (main3 () != 14)\n+    __builtin_abort ();\n+  if (main4() != 14)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}