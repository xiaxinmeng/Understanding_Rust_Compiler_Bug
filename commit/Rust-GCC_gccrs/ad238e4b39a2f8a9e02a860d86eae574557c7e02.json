{"sha": "ad238e4b39a2f8a9e02a860d86eae574557c7e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyMzhlNGIzOWEyZjhhOWUwMmE4NjBkODZlYWU1NzQ1NTdjN2UwMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-11-27T08:31:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-11-27T08:31:46Z"}, "message": "pa.h (ASM_OUTPUT_EXTERNAL): Don't let assemble_name clobber the value of TREE_SYMBOL_REFERENCED.\n\n\t* pa.h (ASM_OUTPUT_EXTERNAL): Don't let assemble_name clobber\n\tthe value of TREE_SYMBOL_REFERENCED.\n\n\t* pa-ghpux9.h (LINK_SPEC): Pass \"-z\" to the linker to enable\n\ttrap on null pointer dereference for programs built on hpux9.\n\t* pa-hpux9.h, pa1-ghpux9.h, pa1-hpux9.h: Likewise.\n\n\t* pa.c (output_function_prologue): No longer need to keep\n\ttrack of the total number code bytes when TARGET_GAS &&\n\tnot TARGET_PORTABLE_RUNTIME.\n\t* pa.h (DBX_OUTPUT_MAIN_SOURCE_FILE_END): Use .NSUBSPA when\n\tnot TARGET_PORTABLE_RUNTIME.\n\t(ASM_OUTPUT_FUNCTION_PREFIX): Define.  Prefix functions with\n\t.NSUBSPA when TARGET_GAS and not TARGET_PORTABLE_RUNTIME.\n\n\t* pa.md (symbolic high patterns): Use 'H' to print the symbolic\n\taddress so that the constant part gets rounded.\n\t* pa.c (print_operand): Handle 'H' operand for high part of a\n\tsymbolic address with a rounded constant.\n\t(output_global_address): New argument \"rounded_constant\".  All\n\tcallers changed appropriately.\n\n\t* x-pa-hpux (FIXPROTO_DEFINES): Add -D_HPUX_SOURCE.\n\n\t* pa.h (CPP_SPEC): Only pass -D_HPUX_SOURCE and -D_HIUX_SOURCE if\n\t-ansi is not present.\n\t(CPP_PREDEFINES): Remove -D_HPUX_SOURCE and/or -D_HIUX_SOURCE.\n\t* pa-ghiux.h (CPP_PREDEFINES): Likewise.\n\t* pa-gux7.h (CPP_PREDEFINES): Likewise.\n\t* pa-hiux.h (CPP_PREDEFINES): Likewise.\n\t* pa-hpux.h (CPP_PREDEFINES): Likewise.\n\t* pa-hpux7.h (CPP_PREDEFINES): Likewise.\n\t* pa1-ghiux.h (CPP_PREDEFINES): Likewise.\n\t* pa1-hiux.h (CPP_PREDEFINES): Likewise.\n\n\t* pa-hpux.h (LINK_SPEC): If -mlinker-opt, then pass -O to the\n\tlinker.\n\t* pa-ghpux.h, pa-hpux9.h, pa-ghpux9.h: Likewise.\n\t* pa1-ghpux9.h, pa1-hpux9.h: Likewise.\n\t* pa.h (LINK_SPEC): Likewise.\n\t(TARGET_SWITCHES): Add -mlinker-opt.\n\n\t* pa.md (all peepholes): Disable if TARGET_SOFT_FLOAT.\n\n\t* pa.c (pa_reorg): If TARGET_GAS, then emit insns to mark\n\tthe beginning and end of the branch table.\n\t* pa.md (begin_brtab): New insn.  Just a marker so GCC knows\n\twhere to put the .begin_brtab pseudo-op.\n\t(end_brtab): Similarly.\n\n\t* pa.h (EXTRA_SECTIONS): Add in_ctors and in_dtors if\n\tCTORS_SECTION_FUNCTION is defined.  Else define dummy\n\tversions of CTORS_SECTION_FUNCTION and DTORS_SECTION_FUNCTION.\n\t(EXTRA_SECTION_FUNCTIONS): Add CTORS_SECTION_FUNCTION and\n\tDTORS_SECTION_FUNCTION.\n\n\t* pa.md: Add peepholes to improve spill code generated\n\tby reload when we run out of FP registers.\n\nFrom-SVN: r10612", "tree": {"sha": "07ecb20188f4c4d4f32ac9ffeb588abc65a56651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07ecb20188f4c4d4f32ac9ffeb588abc65a56651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad238e4b39a2f8a9e02a860d86eae574557c7e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad238e4b39a2f8a9e02a860d86eae574557c7e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad238e4b39a2f8a9e02a860d86eae574557c7e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad238e4b39a2f8a9e02a860d86eae574557c7e02/comments", "author": null, "committer": null, "parents": [{"sha": "4f26a76615a50c0f37b130f9aa8c9b1824e8ea13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f26a76615a50c0f37b130f9aa8c9b1824e8ea13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f26a76615a50c0f37b130f9aa8c9b1824e8ea13"}], "stats": {"total": 188, "additions": 159, "deletions": 29}, "files": [{"sha": "dc3cc84984df6a0145d8f6daf27319e53a576440", "filename": "gcc/config/pa/pa-hiux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hiux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hiux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hiux.h?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -24,4 +24,4 @@ Boston, MA 02111-1307, USA.  */\n \n /* Predefines are the one noteworthy difference between HPUX and HIUX.  */\n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -DPWB -Dunix -D_HIUX_SOURCE -D__H3050R -D__H3050RX -Asystem(unix) -Asystem(hiux) -Acpu(hppa) -Amachine(hppa)\"\n+#define CPP_PREDEFINES \"-Dhppa -DPWB -Dunix -D__H3050R -D__H3050RX -Asystem(unix) -Asystem(hiux) -Acpu(hppa) -Amachine(hppa)\""}, {"sha": "e080377cadfacee0d9bb2d3edd2603e26b0f7eb1", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -41,11 +41,11 @@ Boston, MA 02111-1307, USA.  */\n #define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}}\"\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -D_HPUX_SOURCE -Asystem(unix) -Asystem(hpux) -Acpu(hppa) -Amachine(hppa)\"\n+#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -Asystem(unix) -Asystem(hpux) -Acpu(hppa) -Amachine(hppa)\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \\\n-  \"%{!shared:-u main} %{static:-a archive} %{g*:-a archive} %{shared:-b}\"\n+  \"%{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{g*:-a archive} %{shared:-b}\"\n \n /* hpux8 and later have C++ compatible include files, so do not\n    pretend they are `extern \"C\"'.  */"}, {"sha": "af25fdee24a30276573d20a9df125c40dfaa6100", "filename": "gcc/config/pa/pa-hpux7.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hpux7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hpux7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux7.h?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -44,4 +44,4 @@ Boston, MA 02111-1307, USA.  */\n #define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}\"\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -D_HPUX_SOURCE -Asystem(unix) -Asystem(hpux) -Acpu(hppa) -Amachine(hppa)\"\n+#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -Asystem(unix) -Asystem(hpux) -Acpu(hppa) -Amachine(hppa)\""}, {"sha": "e48dc25434daf1466da907e072066e7d6a64ba08", "filename": "gcc/config/pa/pa-hpux9.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hpux9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa-hpux9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux9.h?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -23,7 +23,8 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"pa/pa-hpux.h\"\n \n-/* We can debug dynamically linked executables on hpux9.  */\n+/* We can debug dynamically linked executables on hpux9; we also want\n+   dereferecing of a NULL pointer to cause a SEGV.  */\n #undef LINK_SPEC\n #define LINK_SPEC \\\n-  \"%{!shared:-u main} %{static:-a archive} %{shared:-b}\"\n+  \"-z %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:-b}\""}, {"sha": "d0521daa4a4c9f204d309d0e6870aa56a6917a0f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -2012,12 +2012,16 @@ output_function_prologue (file, size)\n     ASM_GENERATE_INTERNAL_LABEL (hp_profile_label_name, \"LP\",\n \t\t\t\t hp_profile_labelno);\n \n-  if (insn_addresses)\n+  /* If we're using GAS and not using the portable runtime model, then\n+     we don't need to accumulate the total number of code bytes.  */\n+  if (TARGET_GAS && ! TARGET_PORTABLE_RUNTIME)\n+    total_code_bytes = 0;\n+  else if (insn_addresses)\n     {\n       unsigned int old_total = total_code_bytes;\n \n       total_code_bytes += insn_addresses[INSN_UID (get_last_insn())];\n-      total_code_bytes += FUNCTION_BOUNDARY /BITS_PER_UNIT;\n+      total_code_bytes += FUNCTION_BOUNDARY / BITS_PER_UNIT;\n \n       /* Be prepared to handle overflows.  */\n       total_code_bytes = old_total > total_code_bytes ? -1 : total_code_bytes;\n@@ -3032,7 +3036,10 @@ print_operand (file, x, code)\n \t}\n       return;\n     case 'G':\n-      output_global_address (file, x);\n+      output_global_address (file, x, 0);\n+      return;\n+    case 'H':\n+      output_global_address (file, x, 1);\n       return;\n     case 0:\t\t\t/* Don't do anything special */\n       break;\n@@ -3079,9 +3086,10 @@ print_operand (file, x, code)\n /* output a SYMBOL_REF or a CONST expression involving a SYMBOL_REF. */\n \n void\n-output_global_address (file, x)\n+output_global_address (file, x, round_constant)\n      FILE *file;\n      rtx x;\n+     int round_constant;\n {\n \n   /* Imagine  (high (const (plus ...))).  */\n@@ -3119,6 +3127,18 @@ output_global_address (file, x)\n \toffset = INTVAL (XEXP (XEXP (x, 0),1));\n       else abort ();\n \n+      /* How bogus.  The compiler is apparently responsible for\n+\t rounding the constant if it uses an LR field selector.\n+\n+\t The linker and/or assembler seem a better place since\n+\t they have to do this kind of thing already.\n+\n+\t If we fail to do this, HP's optimizing linker may eliminate\n+\t an addil, but not update the ldw/stw/ldo instruction that\n+\t uses the result of the addil.  */\n+      if (round_constant)\n+\toffset = ((offset + 0x1000) & ~0x1fff);\n+\n       if (GET_CODE (XEXP (x, 0)) == PLUS)\n \t{\n \t  if (offset < 0)\n@@ -3136,8 +3156,8 @@ output_global_address (file, x)\n \n       if (!read_only_operand (base) && !flag_pic)\n \tfprintf (file, \"-$global$\");\n-      fprintf (file, \"%s\", sep);\n-      if (offset) fprintf (file,\"%d\", offset);\n+      if (offset)\n+\tfprintf (file,\"%s%d\", sep, offset);\n     }\n   else\n     output_addr_const (file, x);\n@@ -4756,9 +4776,14 @@ pa_reorg (insns)\n \t      || GET_CODE (PATTERN (insn)) != ADDR_VEC)\n \t    continue;\n \n+\t  /* If needed, emit marker for the beginning of the branch table.  */\n+\t  if (TARGET_GAS)\n+\t    emit_insn_before (gen_begin_brtab (), insn);\n+\n \t  pattern = PATTERN (insn);\n \t  location = PREV_INSN (insn);\n           length = XVECLEN (pattern, 0);\n+\n \t  for (i = 0; i < length; i++)\n \t    {\n \t      /* Emit the jump itself.  */\n@@ -4779,8 +4804,29 @@ pa_reorg (insns)\n \t      emit_label_after (tmp, location);\n \t      location = NEXT_INSN (location);\n \t    }\n+\n+\t  /* If needed, emit marker for the end of the branch table.  */\n+\t  if (TARGET_GAS)\n+\t    emit_insn_before (gen_end_brtab (), location);\n \t  /* Delete the ADDR_VEC.  */\n \t  delete_insn (insn);\n \t}\n     }\n+  else if (TARGET_GAS)\n+    {\n+      /* Sill need an end_brtab insn.  */\n+      insns = get_insns ();\n+      for (insn = insns; insn; insn = NEXT_INSN (insn))\n+\t{\n+\t  /* Find an ADDR_VEC insn.  */\n+\t  if (GET_CODE (insn) != JUMP_INSN\n+\t      || GET_CODE (PATTERN (insn)) != ADDR_VEC)\n+\t    continue;\n+\n+\t  /* Now generate markers for the beginning and end of the\n+\t     branc table.  */\n+\t  emit_insn_before (gen_begin_brtab (), insn);\n+\t  emit_insn_after (gen_end_brtab (), insn);\n+\t}\n+    }\n }"}, {"sha": "bae272842f3854ecfc52596711adab3ec7c3283e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -126,6 +126,7 @@ extern int target_flags;\n    {\"no-gas\", -128},\t\t\\\n    {\"soft-float\", 256},\t\t\\\n    {\"no-soft-float\", -256},\t\\\n+   {\"linker-opt\", 0},\t\t\\\n    { \"\", TARGET_DEFAULT}}\n \n #ifndef TARGET_DEFAULT\n@@ -196,23 +197,27 @@ extern int target_flags;\n /* gdb needs a null N_SO at the end of each file for scattered loading. */\n \n #undef\tDBX_OUTPUT_MAIN_SOURCE_FILE_END\n-#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n+#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME) \\\n+  if (!TARGET_PORTABLE_RUNTIME) \\\n+    fputs (\"\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\", FILE); \\\n+  else \\\n+    fprintf (FILE, \"%s\\n\", TEXT_SECTION_ASM_OP); \\\n   fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t   \"%s\\n\\t.stabs \\\"%s\\\",%d,0,0,L$text_end\\nL$text_end:\\n\",\\\n-\t   TEXT_SECTION_ASM_OP, \"\" , N_SO)\n+\t   \"\\t.stabs \\\"\\\",%d,0,0,L$text_end0000\\nL$text_end0000:\\n\", N_SO)\n \n #if (TARGET_DEFAULT & 1) == 0\n #define CPP_SPEC \"%{msnake:-D__hp9000s700 -D_PA_RISC1_1}\\\n- %{mpa-risc-1-1:-D__hp9000s700 -D_PA_RISC1_1}\"\n+ %{mpa-risc-1-1:-D__hp9000s700 -D_PA_RISC1_1}\\\n+ %{!ansi: -D_HPUX_SOURCE -D_HIUX_SOURCE}\"\n #else\n-#define CPP_SPEC \"%{!mpa-risc-1-0:%{!mnosnake:%{!msoft-float:-D__hp9000s700 -D_PA_RISC1_1}}}\"\n+#define CPP_SPEC \"%{!mpa-risc-1-0:%{!mnosnake:%{!msoft-float:-D__hp9000s700 -D_PA_RISC1_1}}} %{!ansi: -D_HPUX_SOURCE -D_HIUX_SOURCE}\"\n #endif\n \n /* Defines for a K&R CC */\n \n #define CC1_SPEC \"%{pg:} %{p:}\"\n \n-#define LINK_SPEC \"%{!shared:-u main} %{shared:-b}\"\n+#define LINK_SPEC \"%{mlinker-opt:-O} %{!shared:-u main} %{shared:-b}\"\n \n /* We don't want -lg.  */\n #ifndef LIB_SPEC\n@@ -237,7 +242,7 @@ extern int target_flags;\n \n /* Names to predefine in the preprocessor for this target machine.  */\n \n-#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -D_HPUX_SOURCE -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Asystem(unix) -Asystem(bsd) -Acpu(hppa) -Amachine(hppa)\"\n+#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Asystem(unix) -Asystem(bsd) -Acpu(hppa) -Amachine(hppa)\"\n \n /* HPUX has a program 'chatr' to list the dependencies of dynamically\n    linked executables and shared libraries.  */\n@@ -1005,6 +1010,10 @@ extern enum cmp_type hppa_branch_type;\n        fprintf (FILE, \",ARGW%d=FR\", (ARG1));} while (0)\n #endif\n \n+#define ASM_OUTPUT_FUNCTION_PREFIX(FILE, NAME) \\\n+  if (!TARGET_PORTABLE_RUNTIME && TARGET_GAS && in_section == in_text) \\\n+    fputs (\"\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\", FILE);\n+    \n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n     do { tree fntype = TREE_TYPE (TREE_TYPE (DECL));\t\t\t\\\n \t tree tree_type = TREE_TYPE (DECL);\t\t\t\t\\\n@@ -1794,7 +1803,13 @@ do { fprintf (FILE, \"\\t.SPACE $PRIVATE$\\n\\\n \n /* Define the .bss section for ASM_OUTPUT_LOCAL to use. */\n \n+#ifndef CTORS_SECTION_FUNCTION\n #define EXTRA_SECTIONS in_bss, in_readonly_data\n+#define CTORS_SECTION_FUNCTION\n+#define DTORS_SECTION_FUNCTION\n+#else\n+#define EXTRA_SECTIONS in_bss, in_readonly_data, in_ctors, in_dtors\n+#endif\n \n /* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n    which reference data within the $TEXT$ space (for example constant\n@@ -1830,7 +1845,9 @@ readonly_data ()\t\t\t\t\t\t\t\\\n \tfprintf (asm_out_file, \"%s\\n\", READONLY_DATA_ASM_OP);\t\t\\\n       in_section = in_readonly_data;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-}\n+}\t\t\t\t\t\t\t\t\t\\\n+CTORS_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n+DTORS_SECTION_FUNCTION\n \n \n /* How to refer to registers in assembler output.\n@@ -1880,15 +1897,22 @@ readonly_data ()\t\t\t\t\t\t\t\\\n        fputc ('\\n', FILE); } while (0)\n \n /* This is how to output a command to make the user-level label named NAME\n-   defined for reference from other files.  */\n+   defined for reference from other files.\n+\n+   We call assemble_name, which in turn sets TREE_SYMBOL_REFERENCED.  This\n+   macro will restore the original value of TREE_SYMBOL_REFERENCED to avoid\n+   placing useless function definitions in the output file.  */\n \n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\\\n-  do { fputs (\"\\t.IMPORT \", FILE);\t\t\t\t\\\n+  do { int save_referenced;\t\t\t\t\t\\\n+       save_referenced = TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (DECL)); \\\n+       fputs (\"\\t.IMPORT \", FILE);\t\t\t\t\t\\\n \t assemble_name (FILE, NAME);\t\t\t\t\\\n        if (FUNCTION_NAME_P (NAME))     \t\t\t\t\\\n \t fputs (\",CODE\\n\", FILE);\t\t\t\t\\\n        else\t\t\t\t\t\t\t\\\n \t fputs (\",DATA\\n\", FILE);\t\t\t\t\\\n+       TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (DECL)) = save_referenced; \\\n      } while (0)\n \n /* The bogus HP assembler requires ALL external references to be\n@@ -2110,7 +2134,7 @@ readonly_data ()\t\t\t\t\t\t\t\\\n \tabort ();\t\t\t\t\t\t\t\\\n       else if (flag_pic == 2)\t\t\t\t\t\t\\\n \tfputs (\"RT'\", FILE);\t\t\t\t\t\t\\\n-      output_global_address (FILE, XEXP (addr, 1));\t\t\t\\\n+      output_global_address (FILE, XEXP (addr, 1), 0);\t\t\t\\\n       fputs (\"(\", FILE);\t\t\t\t\t\t\\\n       output_operand (XEXP (addr, 0), 0);\t\t\t\t\\\n       fputs (\")\", FILE);\t\t\t\t\t\t\\\n@@ -2132,10 +2156,12 @@ extern char *output_fp_move_double ();\n extern char *output_block_move ();\n extern char *output_cbranch ();\n extern char *output_bb ();\n+extern char *output_bvb ();\n extern char *output_dbra ();\n extern char *output_movb ();\n extern char *output_return ();\n extern char *output_call ();\n+extern char *output_millicode_call ();\n extern char *output_mul_insn ();\n extern char *output_div_insn ();\n extern char *output_mod_insn ();"}, {"sha": "782e7dc2916b8b16415ad8b57ba33d8f3f3988c7", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -1694,7 +1694,7 @@\n    && ! function_label_operand (operands[1])\n    && ! read_only_operand (operands[1])\n    && ! flag_pic\"\n-  \"addil LR'%G1,%%r27\"\n+  \"addil LR'%H1,%%r27\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n@@ -1741,7 +1741,7 @@\n   \"*\n {\n   if (symbolic_operand (operands[1], Pmode))\n-    return \\\"ldil LR'%G1,%0\\\";\n+    return \\\"ldil LR'%H1,%0\\\";\n   else\n     return \\\"ldil L'%G1,%0\\\";\n }\"\n@@ -4332,6 +4332,22 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"4\")])\n \n+;; These are just placeholders so we know where branch tables\n+;; begin and end.\n+(define_insn \"begin_brtab\"\n+  [(const_int 1)]\n+  \"TARGET_GAS\"\n+  \".begin_brtab\"\n+  [(set_attr \"type\" \"move\")\n+   (set_attr \"length\" \"0\")])\n+\n+(define_insn \"end_brtab\"\n+  [(const_int 2)]\n+  \"TARGET_GAS\"\n+  \".end_brtab\"\n+  [(set_attr \"type\" \"move\")\n+   (set_attr \"length\" \"0\")])\n+\n ;;; Hope this is only within a function...\n (define_insn \"indirect_jump\"\n   [(set (pc) (match_operand:SI 0 \"register_operand\" \"r\"))]\n@@ -4628,7 +4644,7 @@\n    (set (match_operand 3 \"register_operand\" \"+f\")\n \t(plus (match_operand 4 \"register_operand\" \"f\")\n \t      (match_operand 5 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && fmpyaddoperands (operands)\"\n+  \"! TARGET_SOFT_FLOAT && TARGET_SNAKE && fmpyaddoperands (operands)\"\n   \"*\n {\n   if (GET_MODE (operands[0]) == DFmode)\n@@ -4654,7 +4670,7 @@\n    (set (match_operand 0 \"register_operand\" \"=f\")\n \t(mult (match_operand 1 \"register_operand\" \"f\")\n \t      (match_operand 2 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && fmpyaddoperands (operands)\"\n+  \"! TARGET_SOFT_FLOAT && TARGET_SNAKE && fmpyaddoperands (operands)\"\n   \"*\n {\n   if (GET_MODE (operands[0]) == DFmode)\n@@ -4682,7 +4698,7 @@\n    (set (match_operand 3 \"register_operand\" \"+f\")\n \t(minus (match_operand 4 \"register_operand\" \"f\")\n \t       (match_operand 5 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && fmpysuboperands (operands)\"\n+  \"! TARGET_SOFT_FLOAT && TARGET_SNAKE && fmpysuboperands (operands)\"\n   \"*\n {\n   if (GET_MODE (operands[0]) == DFmode)\n@@ -4698,7 +4714,7 @@\n    (set (match_operand 0 \"register_operand\" \"=f\")\n \t(mult (match_operand 1 \"register_operand\" \"f\")\n \t      (match_operand 2 \"register_operand\" \"f\")))]\n-  \"TARGET_SNAKE && fmpysuboperands (operands)\"\n+  \"! TARGET_SOFT_FLOAT && TARGET_SNAKE && fmpysuboperands (operands)\"\n   \"*\n {\n   if (GET_MODE (operands[0]) == DFmode)\n@@ -4707,6 +4723,44 @@\n     return \\\"fmpysub,sgl %1,%2,%0,%5,%3\\\";\n }\")\n \n+;; Clean up turds left by reload.\n+(define_peephole\n+  [(set (match_operand 0 \"reg_or_nonsymb_mem_operand\" \"\")\n+\t(match_operand 1 \"register_operand\" \"f\"))\n+   (set (match_operand 2 \"register_operand\" \"f\")\n+\t(match_dup 0))]\n+  \"! TARGET_SOFT_FLOAT\n+   && GET_CODE (operands[0]) == MEM\n+   && ! MEM_VOLATILE_P (operands[0])\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n+   && GET_MODE (operands[0]) == GET_MODE (operands[2])\n+   && GET_MODE (operands[0]) == DFmode\n+   && REGNO_REG_CLASS (REGNO (operands[1]))\n+      == REGNO_REG_CLASS (REGNO (operands[2]))\"\n+  \"*\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+  rtx xoperands[2];\n+\n+  if (FP_REG_P (operands[1]))\n+    output_asm_insn (output_fp_move_double (operands), operands);\n+  else\n+    output_asm_insn (output_move_double (operands), operands);\n+\n+  if (rtx_equal_p (operands[1], operands[2]))\n+    return \\\"\\\";\n+\n+  xoperands[0] = operands[2];\n+  xoperands[1] = operands[1];\n+      \n+  if (FP_REG_P (xoperands[1]))\n+    output_asm_insn (output_fp_move_double (xoperands), xoperands);\n+  else\n+    output_asm_insn (output_move_double (xoperands), xoperands);\n+\n+  return \\\"\\\";\n+}\")\n+\n ;; Flush the I and D cache line found at the address in operand 0.\n ;; This is used by the trampoline code for nested functions.\n ;; So long as the trampoline itself is less than 32 bytes this"}, {"sha": "1b8bb9fa7336ae347f6613a6b60ac8aab916629c", "filename": "gcc/config/pa/x-pa-hpux", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fx-pa-hpux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad238e4b39a2f8a9e02a860d86eae574557c7e02/gcc%2Fconfig%2Fpa%2Fx-pa-hpux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fx-pa-hpux?ref=ad238e4b39a2f8a9e02a860d86eae574557c7e02", "patch": "@@ -1 +1,4 @@\n ALLOCA=alloca.o\n+\n+# So putenv and other functions get seen by fixproto.\n+FIXPROTO_DEFINES = -D_HPUX_SOURCE"}]}