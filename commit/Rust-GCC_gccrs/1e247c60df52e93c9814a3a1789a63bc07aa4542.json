{"sha": "1e247c60df52e93c9814a3a1789a63bc07aa4542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyNDdjNjBkZjUyZTkzYzk4MTRhM2ExNzg5YTYzYmMwN2FhNDU0Mg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-07T14:46:34Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-07T16:06:15Z"}, "message": "Rename -fevrp-mode= to --param=evrp-mode=.\n\n\t* common.opt (-fevrp-mode): Rename and move...\n\t* params.opt (--param=evrp-mode): ...here.\n\t* gimple-range.h (DEBUG_RANGE_CACHE): Use param_evrp_mode instead\n\tof flag_evrp_mode.\n\t* gimple-ssa-evrp.c (rvrp_folder): Same.\n\t(hybrid_folder): Same.\n\t(execute_early_vrp): Same.", "tree": {"sha": "0cdcc2614a968e54c8771c8222504ca6750869f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cdcc2614a968e54c8771c8222504ca6750869f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e247c60df52e93c9814a3a1789a63bc07aa4542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e247c60df52e93c9814a3a1789a63bc07aa4542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e247c60df52e93c9814a3a1789a63bc07aa4542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e247c60df52e93c9814a3a1789a63bc07aa4542/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae673abd37d400408959497e50fe1f3fbef5533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae673abd37d400408959497e50fe1f3fbef5533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae673abd37d400408959497e50fe1f3fbef5533"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "7e789d1c47f0f52cf7d6121e8354283cafeef991", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1e247c60df52e93c9814a3a1789a63bc07aa4542", "patch": "@@ -2870,37 +2870,6 @@ ftree-vrp\n Common Report Var(flag_tree_vrp) Init(0) Optimization\n Perform Value Range Propagation on trees.\n \n-fevrp-mode=\n-Common Undocumented Joined RejectNegative Enum(evrp_mode) Var(flag_evrp_mode) Init(EVRP_MODE_EVRP_FIRST) Optimization\n--fevrp-mode=[legacy|ranger|legacy-first|ranger-first|ranger-trace|ranger-debug|trace|debug] Specifies the mode Early VRP should operate in.\n-\n-Enum\n-Name(evrp_mode) Type(enum evrp_mode) UnknownError(unknown evrp mode %qs)\n-\n-EnumValue\n-Enum(evrp_mode) String(legacy) Value(EVRP_MODE_EVRP_ONLY)\n-\n-EnumValue\n-Enum(evrp_mode) String(ranger) Value(EVRP_MODE_RVRP_ONLY)\n-\n-EnumValue\n-Enum(evrp_mode) String(legacy-first) Value(EVRP_MODE_EVRP_FIRST)\n-\n-EnumValue\n-Enum(evrp_mode) String(ranger-first) Value(EVRP_MODE_RVRP_FIRST)\n-\n-EnumValue\n-Enum(evrp_mode) String(ranger-trace) Value(EVRP_MODE_RVRP_TRACE)\n-\n-EnumValue\n-Enum(evrp_mode) String(ranger-debug) Value(EVRP_MODE_RVRP_DEBUG)\n-\n-EnumValue\n-Enum(evrp_mode) String(trace) Value(EVRP_MODE_TRACE)\n-\n-EnumValue\n-Enum(evrp_mode) String(debug) Value(EVRP_MODE_DEBUG)\n-\n fsplit-paths\n Common Report Var(flag_split_paths) Init(0) Optimization\n Split paths leading to loop backedges."}, {"sha": "041dc7c2a9771fba5db0d78a41d71fb88871796e", "filename": "gcc/gimple-range.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fgimple-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fgimple-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.h?ref=1e247c60df52e93c9814a3a1789a63bc07aa4542", "patch": "@@ -165,6 +165,6 @@ class trace_ranger : public gimple_ranger\n };\n \n // Flag to enable debugging the various internal Caches.\n-#define DEBUG_RANGE_CACHE (dump_file && (flag_evrp_mode & EVRP_MODE_DEBUG))\n+#define DEBUG_RANGE_CACHE (dump_file && (param_evrp_mode & EVRP_MODE_DEBUG))\n \n #endif // GCC_GIMPLE_RANGE_STMT_H"}, {"sha": "363e2ab6816e00311cc6f19d08dc7135866eb871", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=1e247c60df52e93c9814a3a1789a63bc07aa4542", "patch": "@@ -118,7 +118,7 @@ class rvrp_folder : public substitute_and_fold_engine\n \n   rvrp_folder () : substitute_and_fold_engine (), m_simplifier ()\n   { \n-    if (flag_evrp_mode & EVRP_MODE_TRACE)\n+    if (param_evrp_mode & EVRP_MODE_TRACE)\n       m_ranger = new trace_ranger ();\n     else\n       m_ranger = new gimple_ranger ();\n@@ -175,7 +175,7 @@ class hybrid_folder : public evrp_folder\n public:\n   hybrid_folder (bool evrp_first)\n   {\n-    if (flag_evrp_mode & EVRP_MODE_TRACE)\n+    if (param_evrp_mode & EVRP_MODE_TRACE)\n       m_ranger = new trace_ranger ();\n     else\n       m_ranger = new gimple_ranger ();\n@@ -307,8 +307,8 @@ execute_early_vrp ()\n   scev_initialize ();\n   calculate_dominance_info (CDI_DOMINATORS);\n \n-  // only the last 2 bits matter for choosing the folder.\n-  switch (flag_evrp_mode & EVRP_MODE_RVRP_FIRST)\n+  // Only the last 2 bits matter for choosing the folder.\n+  switch (param_evrp_mode & EVRP_MODE_RVRP_FIRST)\n     {\n     case EVRP_MODE_EVRP_ONLY:\n       {"}, {"sha": "d770c55143bc8eb748b330f99c4f2b814a994b00", "filename": "gcc/params.opt", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e247c60df52e93c9814a3a1789a63bc07aa4542/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=1e247c60df52e93c9814a3a1789a63bc07aa4542", "patch": "@@ -102,6 +102,37 @@ Maximum size (in bytes) of objects tracked bytewise by dead store elimination.\n Common Joined UInteger Var(param_early_inlining_insns) Init(6) Optimization Param\n Maximal estimated growth of function body caused by early inlining of single call.\n \n+-param=evrp-mode=\n+Common Joined Var(param_evrp_mode) Enum(evrp_mode) Init(EVRP_MODE_EVRP_FIRST) Param Optimization\n+--param=evrp-mode=[legacy|ranger|legacy-first|ranger-first|ranger-trace|ranger-debug|trace|debug] Specifies the mode Early VRP should operate in.\n+\n+Enum\n+Name(evrp_mode) Type(enum evrp_mode) UnknownError(unknown evrp mode %qs)\n+\n+EnumValue\n+Enum(evrp_mode) String(legacy) Value(EVRP_MODE_EVRP_ONLY)\n+\n+EnumValue\n+Enum(evrp_mode) String(ranger) Value(EVRP_MODE_RVRP_ONLY)\n+\n+EnumValue\n+Enum(evrp_mode) String(legacy-first) Value(EVRP_MODE_EVRP_FIRST)\n+\n+EnumValue\n+Enum(evrp_mode) String(ranger-first) Value(EVRP_MODE_RVRP_FIRST)\n+\n+EnumValue\n+Enum(evrp_mode) String(ranger-trace) Value(EVRP_MODE_RVRP_TRACE)\n+\n+EnumValue\n+Enum(evrp_mode) String(ranger-debug) Value(EVRP_MODE_RVRP_DEBUG)\n+\n+EnumValue\n+Enum(evrp_mode) String(trace) Value(EVRP_MODE_TRACE)\n+\n+EnumValue\n+Enum(evrp_mode) String(debug) Value(EVRP_MODE_DEBUG)\n+\n -param=fsm-maximum-phi-arguments=\n Common Joined UInteger Var(param_fsm_maximum_phi_arguments) Init(100) IntegerRange(1, 999999) Param Optimization\n Maximum number of arguments a PHI may have before the FSM threader will not try to thread through its block."}]}