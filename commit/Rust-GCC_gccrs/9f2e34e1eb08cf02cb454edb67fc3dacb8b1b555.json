{"sha": "9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyZTM0ZTFlYjA4Y2YwMmNiNDU0ZWRiNjdmYzNkYWNiOGIxYjU1NQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2010-09-23T10:50:48Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2010-09-23T10:50:48Z"}, "message": "rs6000.c (toc_relative_ok): Delete.\n\n\t* config/rs6000/rs6000.c (toc_relative_ok): Delete.\n\t(rs6000_emit_move): Use SYMBOL_REF_LOCAL_P instead.\n\nFrom-SVN: r164553", "tree": {"sha": "e741cc20622d279eb8fc2febf7023c78cca373f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e741cc20622d279eb8fc2febf7023c78cca373f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c3bd4710fecc6ef438e0917e218f3ef5eae63d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c3bd4710fecc6ef438e0917e218f3ef5eae63d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c3bd4710fecc6ef438e0917e218f3ef5eae63d9"}], "stats": {"total": 47, "additions": 6, "deletions": 41}, "files": [{"sha": "3f2e66fdebe77ddc71a9f01b623bb6ed0df65a7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555", "patch": "@@ -1,3 +1,8 @@\n+2010-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (toc_relative_ok): Delete.\n+\t(rs6000_emit_move): Use SYMBOL_REF_LOCAL_P instead.\n+\n 2010-09-23  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR rtl-optimization/44374"}, {"sha": "55cb92fa4ad8298c9f941a68d2b8e851ed8f0152", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9f2e34e1eb08cf02cb454edb67fc3dacb8b1b555", "patch": "@@ -7032,46 +7032,6 @@ rs6000_eliminate_indexed_memrefs (rtx operands[2])\n \t\t\t       copy_addr_to_reg (XEXP (operands[1], 0)));\n }\n \n-/* Return true if OP, a SYMBOL_REF, should be considered local when\n-   generating -mcmodel=medium code.  */\n-\n-static bool\n-toc_relative_ok (rtx op)\n-{\n-  tree decl;\n-\n-  if (!SYMBOL_REF_LOCAL_P (op))\n-    return false;\n-\n-  /* This is a bit hard to explain.  When building shared libraries,\n-     you are supposed to pass -fpic or -fPIC to the compiler.\n-     -fpic/-fPIC not only generate position independent code but also\n-     generate code that supports ELF shared library global function\n-     or variable overriding.  ppc64 is always PIC and at least some of\n-     the ELF shared libaray semantics of global variables happen to be\n-     supported without -fpic/-fPIC.  So people may not be careful\n-     about using -fPIC for shared libs.\n-     With -mcmodel=medium this situation changes.  A shared library\n-     built without -fpic/-fPIC requires text relocs for global var\n-     access (and would fail to load since glibc ld.so doesn't support\n-     the required dynamic relocs).  So avoid this potential\n-     problem by using -mcmodel=large access for global vars, unless\n-     we know we are compiling for an executable.  */\n-  if (flag_pie)\n-    return true;\n-\n-  decl = SYMBOL_REF_DECL (op);\n-  if (!decl || !DECL_P (decl))\n-    return true;\n-  if (!TREE_PUBLIC (decl))\n-    return true;\n-  if (DECL_VISIBILITY (decl) != VISIBILITY_DEFAULT)\n-    return true;\n-\n-  /* If we get here we must have a global var.  See binds_local_p.  */\n-  return flag_whole_program;\n-}\n-\n /* Return true if memory accesses to DECL are known to never straddle\n    a 32k boundary.  */\n \n@@ -7427,7 +7387,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t  || (TARGET_CMODEL == CMODEL_MEDIUM\n \t      && GET_CODE (operands[1]) == SYMBOL_REF\n \t      && !CONSTANT_POOL_ADDRESS_P (operands[1])\n-\t      && toc_relative_ok (operands[1])\n+\t      && SYMBOL_REF_LOCAL_P (operands[1])\n \t      && offsettable_ok_by_alignment (SYMBOL_REF_DECL (operands[1]))))\n \t{\n \t  rtx reg = NULL_RTX;"}]}