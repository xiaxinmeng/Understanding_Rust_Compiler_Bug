{"sha": "7c802a406f2c6871310dd5590ba99c2583d7c12a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4MDJhNDA2ZjJjNjg3MTMxMGRkNTU5MGJhOTljMjU4M2Q3YzEyYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-04-15T01:38:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-15T01:38:29Z"}, "message": "i386.md (QImode add pattern): Support lea instruction.\n\n        * i386.md (QImode add pattern): Support lea instruction.\n        (HImode add pattern): Likewise.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r26468", "tree": {"sha": "924505d90d0e8725c6f95b21d1ffb8cafd9b2150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/924505d90d0e8725c6f95b21d1ffb8cafd9b2150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c802a406f2c6871310dd5590ba99c2583d7c12a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c802a406f2c6871310dd5590ba99c2583d7c12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c802a406f2c6871310dd5590ba99c2583d7c12a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c802a406f2c6871310dd5590ba99c2583d7c12a/comments", "author": null, "committer": null, "parents": [{"sha": "6ec6d558ed34e6b31a5b984cf6fb9ead6a6ac7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec6d558ed34e6b31a5b984cf6fb9ead6a6ac7b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec6d558ed34e6b31a5b984cf6fb9ead6a6ac7b1"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "b69eeda0156ea3a8570874a590419b34fe3e9db3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c802a406f2c6871310dd5590ba99c2583d7c12a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c802a406f2c6871310dd5590ba99c2583d7c12a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c802a406f2c6871310dd5590ba99c2583d7c12a", "patch": "@@ -1,6 +1,9 @@\n Thu Apr 15 01:03:21 1999  Jan Hubicka <hubicka@freesoft.cz>\n \t\t\t  Jeff Law <law@cygnus.com>\n \n+\t* i386.md (QImode add pattern): Support lea instruction.\n+\t(HImode add pattern): Likewise.\n+\n \t* i386.md (ashlsi patterns): Call output_ashl instead of output_ashlsi3.\n \t(ashlqi): Use expander, separate LEA and SAL / ADD patterns; call\n \toutput_ashl."}, {"sha": "28e35e44179d7c08fe765f12bad033242ece722f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c802a406f2c6871310dd5590ba99c2583d7c12a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c802a406f2c6871310dd5590ba99c2583d7c12a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7c802a406f2c6871310dd5590ba99c2583d7c12a", "patch": "@@ -3421,12 +3421,30 @@\n   \"IX86_EXPAND_BINARY_OPERATOR (PLUS, HImode, operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,?r\")\n+\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,r\")\n+\t\t (match_operand:HI 2 \"general_operand\" \"ri,rm,ri\")))]\n   \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"*\n {\n+  if (REG_P (operands[0]) && REG_P (operands[1])\n+      && (REG_P (operands[2]) || CONSTANT_P (operands[2]))\n+      && REGNO (operands[0]) != REGNO (operands[1]))\n+    {\n+      if (operands[2] == stack_pointer_rtx) \n+\tabort ();\n+\n+      CC_STATUS_INIT;\n+      operands[1]\n+\t= gen_rtx_PLUS (SImode,\n+\t\t\tgen_rtx_REG (SImode, REGNO (operands[1])),\n+\t\t\t(! REG_P (operands[2])\n+\t\t\t ? operands[2]\n+\t\t\t : gen_rtx_REG (SImode, REGNO (operands[2]))));\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\n+      return AS2 (lea%L0,%a1,%0);\n+    }\n+\n   /* ??? what about offsettable memory references? */\n   if (!TARGET_PENTIUMPRO /* partial stalls are just too painful to risk. */\n       && QI_REG_P (operands[0])\n@@ -3488,12 +3506,31 @@\n   \"IX86_EXPAND_BINARY_OPERATOR (PLUS, QImode, operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q\")\n-\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,?q\")\n+\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,q\")\n+\t\t (match_operand:QI 2 \"general_operand\" \"qn,qmn,qn\")))]\n   \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"*\n {\n+  if (REG_P (operands[0]) && REG_P (operands[1])\n+      && (REG_P (operands[2]) || CONSTANT_P (operands[2]))\n+      && (REGNO (operands[0]) != REGNO (operands[1])\n+\t  || NON_QI_REG_P (operands[1])\n+\t  || (REG_P (operands[2]) && NON_QI_REG_P (operands[2]))))\n+    {\n+      if (operands[2] == stack_pointer_rtx) \n+\tabort ();\n+\n+      CC_STATUS_INIT;\n+      operands[1]\n+\t= gen_rtx_PLUS (SImode,\n+\t\t\tgen_rtx_REG (SImode, REGNO (operands[1])),\n+\t\t\t(! REG_P (operands[2])\n+\t\t\t ? operands[2]\n+\t\t\t : gen_rtx_REG (SImode, REGNO (operands[2]))));\n+      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));\n+      return AS2 (lea%L0,%a1,%0);\n+    }\n   if (operands[2] == const1_rtx)\n     return AS1 (inc%B0,%0);\n "}]}