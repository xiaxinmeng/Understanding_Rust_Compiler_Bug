{"sha": "e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzYTYwMmE3ZGNkOGUyNjI1MTAwZWExYmViMDhkNWQ4NmNhOGU5OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-21T04:05:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-21T04:05:13Z"}, "message": "tests\n\nFrom-SVN: r16629", "tree": {"sha": "cce95f8a2a311f37c064f78e0a8898fb0b0ed714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cce95f8a2a311f37c064f78e0a8898fb0b0ed714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/comments", "author": null, "committer": null, "parents": [{"sha": "858e4e8cfd71520171ec34839f62cae712b7ee55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858e4e8cfd71520171ec34839f62cae712b7ee55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858e4e8cfd71520171ec34839f62cae712b7ee55"}], "stats": {"total": 292, "additions": 282, "deletions": 10}, "files": [{"sha": "5f5c988c29a41f14389aafef16217e7e0fe151cc", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/new3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnew3.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -1,10 +1,11 @@\n // GROUPS passed operator-new\n #include <stdio.h>\n #include <stdlib.h>\n+#include <new>\n \n int pass = 0;\n \n-void *operator new(size_t sz){\n+void *operator new(size_t sz) throw (std::bad_alloc) {\n \n   void *p;\n "}, {"sha": "6e84da5ac516473c5d05e9f0127b4184a78601fb", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/visibility3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fvisibility3.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -13,7 +13,7 @@ class B\n   TP _a;\n public:\n   B (A &(*f) (A &, TP), TP a) : _f (f), _a (a) {}\n-  friend A &operator<< (A &o, const B<TP> &m);\n+  friend A &operator<< <>(A &o, const B<TP> &m);\n };\n \n template <class TP>"}, {"sha": "b30b402d1be9dcd45002f105bae10b45149a9acf", "filename": "gcc/testsuite/g++.old-deja/g++.eh/pdel1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fpdel1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fpdel1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fpdel1.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,22 @@\n+// Test for calling placement delete.\n+\n+#include <new>\n+#include <stddef.h>\n+\n+int r = 1;\n+\n+struct A {\n+  A() { throw 1; }\n+  void operator delete (void *p, int, int) { r = 0; ::operator delete (p); }\n+};\n+\n+void * operator new (size_t size, int, int) { return operator new (size); }\n+\n+main ()\n+{\n+  try {\n+    A* ap = new (1, 5) A;\n+  } catch (...) {  }\n+\n+  return r;\n+}"}, {"sha": "c9b9bd13edd959ca0401636b3d6da4f1dfe06ec6", "filename": "gcc/testsuite/g++.old-deja/g++.eh/pdel2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fpdel2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fpdel2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fpdel2.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,22 @@\n+// Test for not calling mismatched placement delete.\n+\n+#include <new>\n+#include <stddef.h>\n+\n+int r = 0;\n+\n+struct A {\n+  A() { throw 1; }\n+  void operator delete (void *p, int, long) { r = 1; ::operator delete (p); }\n+};\n+\n+void * operator new (size_t size, int, int) { return operator new (size); }\n+\n+main ()\n+{\n+  try {\n+    A* ap = new (1, 5) A;\n+  } catch (...) {  }\n+\n+  return r;\n+}"}, {"sha": "73ee960f120fd2899a77ab82118af38fbad9484e", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec1.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,38 @@\n+// Testing exception specifications.\n+// Test 1: the original exception succeeds.\n+\n+#include <stdlib.h>\n+#include <exception>\n+\n+void my_term ()  { exit (1); }\n+void my_unexp () { throw 42; }\n+\n+void\n+f () throw (char, int, bad_exception)\n+{\n+  throw 'a';\n+}\n+\n+main ()\n+{\n+  set_terminate (my_term);\n+  set_unexpected (my_unexp);\n+\n+  try\n+    {\n+      f ();\n+    }\n+  catch (char)\n+    {\n+      return 0;\n+    }\n+  catch (int)\n+    {\n+      return 3;\n+    }\n+  catch (bad_exception)\n+    {\n+      return 4;\n+    }\n+  return 5;\n+}"}, {"sha": "440137757616eeaeafb7b04d1ca156a7291e034e", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec2.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec2.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,38 @@\n+// Testing exception specifications.\n+// Test 2: the second throw succeeds.\n+\n+#include <stdlib.h>\n+#include <exception>\n+\n+void my_term ()  { exit (1); }\n+void my_unexp () { throw 42; }\n+\n+void\n+f () throw (int, bad_exception)\n+{\n+  throw 'a';\n+}\n+\n+main ()\n+{\n+  set_terminate (my_term);\n+  set_unexpected (my_unexp);\n+\n+  try\n+    {\n+      f ();\n+    }\n+  catch (char)\n+    {\n+      return 2;\n+    }\n+  catch (int)\n+    {\n+      return 0;\n+    }\n+  catch (bad_exception)\n+    {\n+      return 4;\n+    }\n+  return 5;\n+}"}, {"sha": "148be763214a2dc908356e366a83e6157c6a0312", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec3.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec3.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,38 @@\n+// Testing exception specifications.\n+// Test 3: the bad_exception throw succeeds.\n+\n+#include <stdlib.h>\n+#include <exception>\n+\n+void my_term ()  { exit (1); }\n+void my_unexp () { throw 42; }\n+\n+void\n+f () throw (bad_exception)\n+{\n+  throw 'a';\n+}\n+\n+main ()\n+{\n+  set_terminate (my_term);\n+  set_unexpected (my_unexp);\n+\n+  try\n+    {\n+      f ();\n+    }\n+  catch (char)\n+    {\n+      return 2;\n+    }\n+  catch (int)\n+    {\n+      return 3;\n+    }\n+  catch (bad_exception)\n+    {\n+      return 0;\n+    }\n+  return 5;\n+}"}, {"sha": "d8b8ce7ed32444929fde9e7eea09a303d5e9d7a1", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec4.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec4.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,38 @@\n+// Testing exception specifications.\n+// Test 4: all throws fail, call terminate.\n+\n+#include <stdlib.h>\n+#include <exception>\n+\n+void my_term ()  { exit (0); }\n+void my_unexp () { throw 42; }\n+\n+void\n+f () throw (short)\n+{\n+  throw 'a';\n+}\n+\n+main ()\n+{\n+  set_terminate (my_term);\n+  set_unexpected (my_unexp);\n+\n+  try\n+    {\n+      f ();\n+    }\n+  catch (char)\n+    {\n+      return 2;\n+    }\n+  catch (int)\n+    {\n+      return 3;\n+    }\n+  catch (bad_exception)\n+    {\n+      return 4;\n+    }\n+  return 5;\n+}"}, {"sha": "0ac2562d7f97f3e7810a0b55b85b3cd056da2288", "filename": "gcc/testsuite/g++.old-deja/g++.jason/new.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -1,11 +1,11 @@\n // Bug: new doesn't make sure that the count is an integral value.\n \n-typedef __SIZE_TYPE__ size_t;\n+#include <new>\n extern \"C\" int printf (const char *, ...);\n extern \"C\" void *malloc (size_t);\n size_t s;\n \n-void * operator new (size_t siz) {\n+void * operator new (size_t siz) throw (std::bad_alloc) {\n   if (s == 0)\n     s = siz;\n   else"}, {"sha": "bc41672c3e5db9861702bbf60e4b3304215f6751", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -11,7 +11,7 @@ void operator+ (int, bar&);\n template <class T> class foo\n {\n public:\n-  friend void operator+ (int, T&);\n+  friend void operator+ <> (int, T&);\n };\n \n class baz;"}, {"sha": "cd18382b79fa93524650845db4be1a65360b338f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload10.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload10.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -2,6 +2,7 @@\n // Bug: g++ fails to recognize multiple previous instantiations of a function\n // template.\n // Build don't link:\n+// Special g++ Options: -fguiding-decls\n \n template <class T>\n class A {"}, {"sha": "18a574a28ebaa0407ca7665eff0e5788651c8719", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate10.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -5,7 +5,7 @@ class ostream;\n \n template <class TP> class smanip {\n public:\n-  friend ostream& operator<<(ostream &o, const smanip<TP>&m);\n+  friend ostream& operator<< <>(ostream &o, const smanip<TP>&m);\n };\n \n template<class TP>"}, {"sha": "5628e0b40744dec672e27c37bd2fd0ef5efd983d", "filename": "gcc/testsuite/g++.old-deja/g++.law/friend1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ffriend1.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -7,8 +7,9 @@\n // Message-ID: <m0n2Vec-0000GrC@rwave.roguewave.com>\n \n #include <stddef.h>\n+#include <new>\n struct Foo {\n-  friend void* operator new(size_t);\n+  friend void* operator new(size_t) throw (std::bad_alloc);\n   friend void operator delete(void*) throw ();\n   Foo();\n   ~Foo();"}, {"sha": "235cbfb87e12b29c7d49ce6d23eab186664e4778", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net46.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet46.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -1,9 +1,10 @@\n #include <iostream.h>\n #include <stddef.h>\n+#include <new>\n \n int fail = 1;\n \n-static void *operator new(size_t size) {\n+static void *operator new(size_t size) throw (std::bad_alloc) {\n   --fail;\n   return (void*) 0;\n }"}, {"sha": "9dbebff54854880229eafb6757de2bd31b0a21d8", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p755.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp755.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp755.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp755.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -1,10 +1,10 @@\n // It checks to see if you can define your own global new operator.\n // prms-id: 755\n \n-typedef __SIZE_TYPE__ size_t;\n+#include <new>\n extern \"C\" void exit(int);\n \n-void* operator new(size_t sz) {\n+void* operator new(size_t sz) throw (std::bad_alloc) {\n   void* p = 0;\n   exit(0);\n   return p;"}, {"sha": "67ac939b58a84de6ed47cb00820261541e3a3661", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename4.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename4.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link:\n+\n+template <class T>\n+struct A\n+{\n+  typedef T A_Type;\n+};\n+\n+\n+template <class U>\n+struct B : public A<U>\n+{\n+};\n+\n+\n+template <class U>\n+struct C : public B<U>\n+{\n+  A_Type Func();\n+};\n+\n+\n+template <class U>\n+C<U>::A_Type C<U>::Func()\n+{\n+}"}, {"sha": "202dadf12b61571be38a1cb78d5e35b550a5cdb8", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename5.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename5.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link:\n+\n+template <class T>\n+struct A\n+{\n+  typedef T A_Type;\n+};\n+\n+\n+template <class U>\n+struct B : public A<U>\n+{\n+};\n+\n+\n+template <class U>\n+struct C : public B<U>\n+{\n+  void Func(A_Type);\n+};\n+\n+\n+template <class U>\n+void C<U>::Func(A_Type)\n+{\n+}"}, {"sha": "4a8f05b08e32f368b0ff29681f344563eace88db", "filename": "gcc/testsuite/g++.old-deja/g++.pt/typename6.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a602a7dcd8e2625100ea1beb08d5d86ca8e99/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ftypename6.C?ref=e03a602a7dcd8e2625100ea1beb08d5d86ca8e99", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link:\n+\n+template <class T>\n+struct A\n+{\n+  typedef T A_Type;\n+};\n+\n+\n+template <class U>\n+struct B : public A<U>\n+{\n+  A_Type Func();\n+};\n+\n+\n+template <class U>\n+A<U>::A_Type B<U>::Func()\n+{\n+}"}]}