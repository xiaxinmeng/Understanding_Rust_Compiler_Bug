{"sha": "e1769bdd4cef522ada32aec863feba41116b183a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE3NjliZGQ0Y2VmNTIyYWRhMzJhZWM4NjNmZWJhNDExMTZiMTgzYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-08-10T20:59:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-10T20:59:10Z"}, "message": "re PR target/81708 (The x86 stack canary location should be customizable)\n\n\tPR target/81708\n\t* config/i386/i386.opt (mstack-protector-guard-symbol=): New option\n\t* config/i386/i386.c (ix86_stack_protect_guard): Use\n\tix86_stack_protect_guard_symbol_str to generate varible declaration.\n\t* doc/invoke.texi (x86 Options): Document\n\t-mstack-protector-guard-symbol= option.\n\ntestsuite/ChangeLog:\n\n\tPR target/81708\n\t* gcc.target/i386/stack-prot-sym.c: New test.\n\nFrom-SVN: r251040", "tree": {"sha": "bfa44ea06ab428cb984cd7189bf283a48a7726bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa44ea06ab428cb984cd7189bf283a48a7726bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1769bdd4cef522ada32aec863feba41116b183a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1769bdd4cef522ada32aec863feba41116b183a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1769bdd4cef522ada32aec863feba41116b183a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1769bdd4cef522ada32aec863feba41116b183a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f18f68226c2abb77008da7bd0aef5d7ee905c4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18f68226c2abb77008da7bd0aef5d7ee905c4c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18f68226c2abb77008da7bd0aef5d7ee905c4c6"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "c73897fd9cd774895866327cac9d8705ad5d7c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1769bdd4cef522ada32aec863feba41116b183a", "patch": "@@ -1,3 +1,12 @@\n+2017-08-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/81708\n+\t* config/i386/i386.opt (mstack-protector-guard-symbol=): New option\n+\t* config/i386/i386.c (ix86_stack_protect_guard): Use\n+\tix86_stack_protect_guard_symbol_str to generate varible declaration.\n+\t* doc/invoke.texi (x86 Options): Document\n+\t-mstack-protector-guard-symbol= option.\n+\n 2017-08-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386-protos.h (ix86_split_stack_guard): New prototype."}, {"sha": "1135372be2a95f5690718c7a22ea785b314cef69", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e1769bdd4cef522ada32aec863feba41116b183a", "patch": "@@ -45854,21 +45854,55 @@ ix86_mangle_type (const_tree type)\n     }\n }\n \n+static GTY(()) tree ix86_tls_stack_chk_guard_decl;\n+\n static tree\n ix86_stack_protect_guard (void)\n {\n   if (TARGET_SSP_TLS_GUARD)\n     {\n       tree type_node = lang_hooks.types.type_for_mode (ptr_mode, 1);\n-\n       int qual = ENCODE_QUAL_ADDR_SPACE (ix86_stack_protector_guard_reg);\n-\n       tree type = build_qualified_type (type_node, qual);\n-      tree asptrtype = build_pointer_type (type);\n-      tree sspoff = build_int_cst (asptrtype,\n-\t\t\t\t   ix86_stack_protector_guard_offset);\n-      tree t = build2 (MEM_REF, asptrtype, sspoff,\n-\t\t       build_int_cst (asptrtype, 0));\n+      tree t;\n+\n+      if (global_options_set.x_ix86_stack_protector_guard_symbol_str)\n+\t{\n+\t  t = ix86_tls_stack_chk_guard_decl;\n+\n+\t  if (t == NULL)\n+\t    {\n+\t      rtx x;\n+\n+\t      t = build_decl\n+\t\t(UNKNOWN_LOCATION, VAR_DECL,\n+\t\t get_identifier (ix86_stack_protector_guard_symbol_str),\n+\t\t type);\n+\t      TREE_STATIC (t) = 1;\n+\t      TREE_PUBLIC (t) = 1;\n+\t      DECL_EXTERNAL (t) = 1;\n+\t      TREE_USED (t) = 1;\n+\t      TREE_THIS_VOLATILE (t) = 1;\n+\t      DECL_ARTIFICIAL (t) = 1;\n+\t      DECL_IGNORED_P (t) = 1;\n+\n+\t      /* Do not share RTL as the declaration is visible outside of\n+\t\t current function.  */\n+\t      x = DECL_RTL (t);\n+\t      RTX_FLAG (x, used) = 1;\n+\n+\t      ix86_tls_stack_chk_guard_decl = t;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  tree asptrtype = build_pointer_type (type);\n+\n+\t  t = build_int_cst (asptrtype, ix86_stack_protector_guard_offset);\n+\t  t = build2 (MEM_REF, asptrtype, t,\n+\t\t      build_int_cst (asptrtype, 0));\n+\t}\n+\n       return t;\n     }\n "}, {"sha": "cd564315f04b5194599ff7afac8af7193fe9e652", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e1769bdd4cef522ada32aec863feba41116b183a", "patch": "@@ -938,6 +938,10 @@ Use the given offset for addressing the stack-protector guard.\n TargetVariable\n HOST_WIDE_INT ix86_stack_protector_guard_offset = 0\n \n+mstack-protector-guard-symbol=\n+Target RejectNegative Joined Integer Var(ix86_stack_protector_guard_symbol_str)\n+Use the given symbol for addressing the stack-protector guard.\n+\n mmitigate-rop\n Target Var(flag_mitigate_rop) Init(0)\n Attempt to avoid generating instruction sequences containing ret bytes."}, {"sha": "ec29f1d629ee130a1b98e3de3a20cb5c1ded8968", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e1769bdd4cef522ada32aec863feba41116b183a", "patch": "@@ -1216,7 +1216,8 @@ See RS/6000 and PowerPC Options.\n -mavx256-split-unaligned-load  -mavx256-split-unaligned-store @gol\n -malign-data=@var{type}  -mstack-protector-guard=@var{guard} @gol\n -mstack-protector-guard-reg=@var{reg} @gol\n--mstack-protector-guard-offset=@var{offset}  -mmitigate-rop @gol\n+-mstack-protector-guard-offset=@var{offset} @gol\n+-mstack-protector-guard-symbol=@var{symbol} -mmitigate-rop @gol\n -mgeneral-regs-only  -mcall-ms2sysv-xlogues}\n \n @emph{x86 Windows Options}\n@@ -22757,9 +22758,11 @@ The @option{-mno-compat-align-parm} option is the default.\n @item -mstack-protector-guard=@var{guard}\n @itemx -mstack-protector-guard-reg=@var{reg}\n @itemx -mstack-protector-guard-offset=@var{offset}\n+@itemx -mstack-protector-guard-symbol=@var{symbol}\n @opindex mstack-protector-guard\n @opindex mstack-protector-guard-reg\n @opindex mstack-protector-guard-offset\n+@opindex mstack-protector-guard-symbol\n Generate stack protection code using canary at @var{guard}.  Supported\n locations are @samp{global} for global canary or @samp{tls} for per-thread\n canary in the TLS block (the default with GNU libc version 2.4 or later).\n@@ -22769,7 +22772,8 @@ With the latter choice the options\n @option{-mstack-protector-guard-offset=@var{offset}} furthermore specify\n which register to use as base register for reading the canary, and from what\n offset from that base register. The default for those is as specified in the\n-relevant ABI.\n+relevant ABI.  @option{-mstack-protector-guard-symbol=@var{symbol}} overrides\n+the offset with a symbol reference to a canary in the TLS block.\n @end table\n \n @node RX Options"}, {"sha": "3100618583ad76bdcf7644528429153106a68975", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1769bdd4cef522ada32aec863feba41116b183a", "patch": "@@ -1,3 +1,8 @@\n+2017-08-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/81708\n+\t* gcc.target/i386/stack-prot-sym.c: New test.\n+\n 2017-08-10  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR testsuite/81738"}, {"sha": "7f63424c55f3bd1b1095c2d070105811b246d176", "filename": "gcc/testsuite/gcc.target/i386/stack-prot-sym.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-sym.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1769bdd4cef522ada32aec863feba41116b183a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-sym.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-prot-sym.c?ref=e1769bdd4cef522ada32aec863feba41116b183a", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-protector-all -mstack-protector-guard=tls -mstack-protector-guard-reg=gs -mstack-protector-guard-symbol=my_guard\" } */\n+\n+void f(void) { }\n+\n+/* { dg-final { scan-assembler \"gs:my_guard\" } } */"}]}