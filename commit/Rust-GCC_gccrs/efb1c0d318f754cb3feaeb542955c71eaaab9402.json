{"sha": "efb1c0d318f754cb3feaeb542955c71eaaab9402", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiMWMwZDMxOGY3NTRjYjNmZWFlYjU0Mjk1NWM3MWVhYWFiOTQwMg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-11-07T00:50:44Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-11-07T00:50:44Z"}, "message": "pa.md (trap): New insn.\n\n\t* config/pa/pa.md (trap): New insn.  Add \"trap\" to attribute type.\n\tDon't allow trap insn in in_branch_delay, in_nullified_branch_delay\n\tor in_call_delay.\n\nFrom-SVN: r217208", "tree": {"sha": "55b65d0f3eaea5cdb4a7b39655001790ad2ef3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b65d0f3eaea5cdb4a7b39655001790ad2ef3be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efb1c0d318f754cb3feaeb542955c71eaaab9402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb1c0d318f754cb3feaeb542955c71eaaab9402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb1c0d318f754cb3feaeb542955c71eaaab9402", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb1c0d318f754cb3feaeb542955c71eaaab9402/comments", "author": null, "committer": null, "parents": [{"sha": "35e9ff39f97a215ba925a0bd80329aaf1aa9e65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e9ff39f97a215ba925a0bd80329aaf1aa9e65c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e9ff39f97a215ba925a0bd80329aaf1aa9e65c"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "e912f5b70b33bb78384cc874f210ad6d576d2126", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb1c0d318f754cb3feaeb542955c71eaaab9402/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb1c0d318f754cb3feaeb542955c71eaaab9402/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efb1c0d318f754cb3feaeb542955c71eaaab9402", "patch": "@@ -1,3 +1,9 @@\n+2014-11-06  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.md (trap): New insn.  Add \"trap\" to attribute type.\n+\tDon't allow trap insn in in_branch_delay, in_nullified_branch_delay\n+\tor in_call_delay.\n+\t\n 2014-11-06  Steve Ellcey  <sellcey@imgtec.com>\n \n \t* config.gcc (mips*-mti-linux*): Remove gnu_ld and gas assignments."}, {"sha": "fd580275e797e1a707c6dd72000504021568d767", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb1c0d318f754cb3feaeb542955c71eaaab9402/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb1c0d318f754cb3feaeb542955c71eaaab9402/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=efb1c0d318f754cb3feaeb542955c71eaaab9402", "patch": "@@ -123,7 +123,7 @@\n ;; type \"binary\" insns have two input operands (1,2) and one output (0)\n \n (define_attr \"type\"\n-  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,sh_func_adrs,parallel_branch,fpstore_load,store_fpload\"\n+  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,sh_func_adrs,parallel_branch,fpstore_load,store_fpload,trap\"\n   (const_string \"binary\"))\n \n (define_attr \"pa_combine_type\"\n@@ -166,7 +166,7 @@\n ;; For conditional branches. Frame related instructions are not allowed\n ;; because they confuse the unwind support.\n (define_attr \"in_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch,trap\")\n \t\t     (eq_attr \"length\" \"4\")\n \t\t     (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t\t(const_string \"true\")\n@@ -175,15 +175,15 @@\n ;; Disallow instructions which use the FPU since they will tie up the FPU\n ;; even if the instruction is nullified.\n (define_attr \"in_nullified_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,parallel_branch\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,parallel_branch,trap\")\n \t\t     (eq_attr \"length\" \"4\")\n \t\t     (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t\t(const_string \"true\")\n \t\t(const_string \"false\")))\n \n ;; For calls and millicode calls.\n (define_attr \"in_call_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch,trap\")\n \t\t     (eq_attr \"length\" \"4\")\n \t\t     (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t\t(const_string \"true\")\n@@ -5324,6 +5324,15 @@\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"4,4\")])\n \n+;; Trap instructions.\n+\n+(define_insn \"trap\"\n+  [(trap_if (const_int 1) (const_int 0))]\n+  \"\"\n+  \"{addit|addi,tc},<> 1,%%r0,%%r0\"\n+  [(set_attr \"type\" \"trap\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; Clobbering a \"register_operand\" instead of a match_scratch\n ;; in operand3 of millicode calls avoids spilling %r1 and\n ;; produces better code."}]}