{"sha": "28d2dc757edb6728d1a0f706ffc308aadbd082fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkMmRjNzU3ZWRiNjcyOGQxYTBmNzA2ZmZjMzA4YWFkYmQwODJmYw==", "commit": {"author": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-24T14:29:11Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-10-24T14:29:11Z"}, "message": "emmintrin.h (_mm_cvtpd_epi32): Change deprecated __vector long to __vector long long.\n\n2018-10-24  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Jinsong Ji <jji@us.ibm.com>\n\n\t* config/rs6000/emmintrin.h (_mm_cvtpd_epi32): Change deprecated\n\t__vector long to __vector long long.\n\t(_mm_cvtpd_ps): Likewise.\n\t(_mm_cvttpd_epi32): Likewise.\n\t(_mm_cvtpi32_pd): Likewise.\n\t(_mm_unpackhi_epi64): Likewise.\n\t(_mm_unpacklo_epi64): Likewise.\n\nFrom-SVN: r265464", "tree": {"sha": "60d69ae1bf6cb7b062aae28d453ca216471f0c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60d69ae1bf6cb7b062aae28d453ca216471f0c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d2dc757edb6728d1a0f706ffc308aadbd082fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d2dc757edb6728d1a0f706ffc308aadbd082fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d2dc757edb6728d1a0f706ffc308aadbd082fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d2dc757edb6728d1a0f706ffc308aadbd082fc/comments", "author": null, "committer": null, "parents": [{"sha": "767d455188bb578360d8330782b161471997e3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767d455188bb578360d8330782b161471997e3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767d455188bb578360d8330782b161471997e3c3"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "c499c9dc029cc948ae395b73fb1851c35a18b662", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d2dc757edb6728d1a0f706ffc308aadbd082fc/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d2dc757edb6728d1a0f706ffc308aadbd082fc/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=28d2dc757edb6728d1a0f706ffc308aadbd082fc", "patch": "@@ -888,7 +888,8 @@ _mm_cvtpd_epi32 (__m128d __A)\n \n #ifdef _ARCH_PWR8\n   temp = vec_mergeo (temp, temp);\n-  result = (__v4si)vec_vpkudum ((__vector long)temp, (__vector long)vzero);\n+  result = (__v4si) vec_vpkudum ((__vector long long) temp,\n+\t\t\t\t (__vector long long) vzero);\n #else\n   {\n     const __v16qu pkperm = {0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0a, 0x0b,\n@@ -922,7 +923,8 @@ _mm_cvtpd_ps (__m128d __A)\n \n #ifdef _ARCH_PWR8\n   temp = vec_mergeo (temp, temp);\n-  result = (__v4sf)vec_vpkudum ((__vector long)temp, (__vector long)vzero);\n+  result = (__v4sf) vec_vpkudum ((__vector long long) temp,\n+\t\t\t\t (__vector long long) vzero);\n #else\n   {\n     const __v16qu pkperm = {0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0a, 0x0b,\n@@ -950,7 +952,8 @@ _mm_cvttpd_epi32 (__m128d __A)\n \n #ifdef _ARCH_PWR8\n   temp = vec_mergeo (temp, temp);\n-  result = (__v4si)vec_vpkudum ((__vector long)temp, (__vector long)vzero);\n+  result = (__v4si) vec_vpkudum ((__vector long long) temp,\n+\t\t\t\t (__vector long long) vzero);\n #else\n   {\n     const __v16qu pkperm = {0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0a, 0x0b,\n@@ -986,7 +989,7 @@ _mm_cvtpi32_pd (__m64 __A)\n \n   temp = (__v4si)vec_splats (__A);\n   tmp2 = (__v2di)vec_unpackl (temp);\n-  result = vec_ctf ((__vector signed long)tmp2, 0);\n+  result = vec_ctf ((__vector signed long long) tmp2, 0);\n   return (__m128d)result;\n }\n #endif\n@@ -1289,7 +1292,8 @@ _mm_unpackhi_epi32 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_unpackhi_epi64 (__m128i __A, __m128i __B)\n {\n-  return (__m128i) vec_mergel ((__vector long)__A, (__vector long)__B);\n+  return (__m128i) vec_mergel ((__vector long long) __A,\n+\t\t\t       (__vector long long) __B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1313,7 +1317,8 @@ _mm_unpacklo_epi32 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_unpacklo_epi64 (__m128i __A, __m128i __B)\n {\n-  return (__m128i) vec_mergeh ((__vector long)__A, (__vector long)__B);\n+  return (__m128i) vec_mergeh ((__vector long long) __A,\n+\t\t\t       (__vector long long) __B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}]}