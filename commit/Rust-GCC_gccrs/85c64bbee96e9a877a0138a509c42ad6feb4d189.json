{"sha": "85c64bbee96e9a877a0138a509c42ad6feb4d189", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjNjRiYmVlOTZlOWE4NzdhMDEzOGE1MDljNDJhZDZmZWI0ZDE4OQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-11-13T13:28:56Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-11-13T13:28:56Z"}, "message": "[PATCH 1/7] OpenMP 4.0 offloading infrastructure: configure and make\n\n\t* configure: Regenerate.\n\t* configure.ac (--enable-as-accelerator-for)\n\t(--enable-offload-targets): New configure options.\ngcc/\n\t* Makefile.in (real_target_noncanonical, accel_dir_suffix)\n\t(enable_as_accelerator): New variables substituted by configure.\n\t(libsubdir, libexecsubdir, unlibsubdir): Tweak for the possibility of\n\tbeing configured as an offload compiler.\n\t(DRIVER_DEFINES): Pass new defines DEFAULT_REAL_TARGET_MACHINE and\n\tACCEL_DIR_SUFFIX.\n\t(install-cpp, install-common, install_driver, install-gcc-ar): Do not\n\tinstall for the offload compiler.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac (real_target_noncanonical, accel_dir_suffix)\n\t(enable_as_accelerator): Compute new variables.\n\t(ACCEL_COMPILER): Define if the compiler is built as the accel compiler.\n\t(OFFLOAD_TARGETS): List of target names suitable for offloading.\n\t(ENABLE_OFFLOADING): Define if list of offload targets is not empty.\ngcc/cp/\n\t* Make-lang.in (c++.install-common): Do not install for the offload\n\tcompiler.\ngcc/doc/\n\t* install.texi (Options specification): Document\n\t--enable-as-accelerator-for and --enable-offload-targets.\ngcc/fortran/\n\t* Make-lang.in (fortran.install-common): Do not install for the offload\n\tcompiler.\nlibgcc/\n\t* Makefile.in (crtoffloadbegin$(objext)): New rule.\n\t(crtoffloadend$(objext)): Likewise.\n\t* configure: Regenerate.\n\t* configure.ac (accel_dir_suffix): Compute new variable.\n\t(extra_parts): Add crtoffloadbegin.o and crtoffloadend.o\n\tif enable_offload_targets is not empty.\n\t* offloadstuff.c: New file.\nlibgomp/\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Check for libdl, required for plugin support.\n\t(PLUGIN_SUPPORT): Define if plugins are supported.\n\t(enable_offload_targets): Support Intel MIC targets.\n\t(OFFLOAD_TARGETS): List of target names suitable for offloading.\nlto-plugin/\n\t* Makefile.am (libexecsubdir): Tweak for the possibility of being\n\tconfigured for offload compiler.\n\t(accel_dir_suffix, real_target_noncanonical): New variables substituted\n\tby configure.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac (accel_dir_suffix, real_target_noncanonical): Compute new\n\tvariables.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>\n\nFrom-SVN: r217485", "tree": {"sha": "9e4005cf276444e5ba35ec3bd2b90e585f503eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e4005cf276444e5ba35ec3bd2b90e585f503eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c64bbee96e9a877a0138a509c42ad6feb4d189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c64bbee96e9a877a0138a509c42ad6feb4d189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c64bbee96e9a877a0138a509c42ad6feb4d189", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c64bbee96e9a877a0138a509c42ad6feb4d189/comments", "author": null, "committer": null, "parents": [{"sha": "e8864c8522f08528685762e6e3611da1354c31c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8864c8522f08528685762e6e3611da1354c31c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8864c8522f08528685762e6e3611da1354c31c2"}], "stats": {"total": 669, "additions": 603, "deletions": 66}, "files": [{"sha": "e1db052d1509d89ad3477a5e05604038d6c0a20c", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,3 +1,12 @@\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac (--enable-as-accelerator-for)\n+\t(--enable-offload-targets): New configure options.\n+\n 2014-11-11  Tobias Burnus  <burnus@net-b.de>\n \n \t* Makefile.def: Make all-gcc depend on all-isl."}, {"sha": "69d968bc583f37b57e6c88b1107a5b1ff31f3a15", "filename": "configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -745,6 +745,8 @@ ospace_frag'\n ac_user_opts='\n enable_option_checking\n with_build_libsubdir\n+enable_as_accelerator_for\n+enable_offload_targets\n enable_gold\n enable_ld\n enable_libquadmath\n@@ -1460,6 +1462,13 @@ Optional Features:\n   --disable-option-checking  ignore unrecognized --enable/--with options\n   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n+  --enable-as-accelerator-for=ARG\n+                          build as offload target compiler. Specify offload\n+                          host triple by ARG\n+  --enable-offload-targets=LIST\n+                          enable offloading to devices from comma-separated\n+                          LIST of TARGET[=DIR]. Use optional path to find\n+                          offload target compiler during the build\n   --enable-gold[=ARG]     build gold [ARG={default,yes,no}]\n   --enable-ld[=ARG]       build ld [ARG={default,yes,no}]\n   --disable-libquadmath   do not build libquadmath directory\n@@ -2877,6 +2886,26 @@ case ${with_newlib} in\n   yes) skipdirs=`echo \" ${skipdirs} \" | sed -e 's/ target-newlib / /'` ;;\n esac\n \n+# Check whether --enable-as-accelerator-for was given.\n+if test \"${enable_as_accelerator_for+set}\" = set; then :\n+  enableval=$enable_as_accelerator_for; ENABLE_AS_ACCELERATOR_FOR=$enableval\n+else\n+  ENABLE_AS_ACCELERATOR_FOR=no\n+fi\n+\n+\n+# Check whether --enable-offload-targets was given.\n+if test \"${enable_offload_targets+set}\" = set; then :\n+  enableval=$enable_offload_targets;\n+  if test x\"$enable_offload_targets\" = x; then\n+    as_fn_error \"no offload targets specified\" \"$LINENO\" 5\n+  fi\n+\n+else\n+  enable_offload_targets=\n+fi\n+\n+\n # Handle --enable-gold, --enable-ld.\n # --disable-gold [--enable-ld]\n #     Build only ld.  Default option."}, {"sha": "6c4c954bdf62604f0535240c4ae5bac2692de0f0", "filename": "configure.ac", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -285,6 +285,24 @@ case ${with_newlib} in\n   yes) skipdirs=`echo \" ${skipdirs} \" | sed -e 's/ target-newlib / /'` ;;\n esac\n \n+AC_ARG_ENABLE(as-accelerator-for,\n+[AS_HELP_STRING([--enable-as-accelerator-for=ARG],\n+\t\t[build as offload target compiler.\n+\t\tSpecify offload host triple by ARG])],\n+ENABLE_AS_ACCELERATOR_FOR=$enableval,\n+ENABLE_AS_ACCELERATOR_FOR=no)\n+\n+AC_ARG_ENABLE(offload-targets,\n+[AS_HELP_STRING([--enable-offload-targets=LIST],\n+\t\t[enable offloading to devices from comma-separated LIST of\n+\t\tTARGET[=DIR]. Use optional path to find offload target compiler\n+\t\tduring the build])],\n+[\n+  if test x\"$enable_offload_targets\" = x; then\n+    AC_MSG_ERROR([no offload targets specified])\n+  fi\n+], [enable_offload_targets=])\n+\n # Handle --enable-gold, --enable-ld.\n # --disable-gold [--enable-ld]\n #     Build only ld.  Default option."}, {"sha": "80df1888a3b7717a8bcb00884dbeca31fd83f1ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,3 +1,26 @@\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* Makefile.in (real_target_noncanonical, accel_dir_suffix)\n+\t(enable_as_accelerator): New variables substituted by configure.\n+\t(libsubdir, libexecsubdir, unlibsubdir): Tweak for the possibility of\n+\tbeing configured as an offload compiler.\n+\t(DRIVER_DEFINES): Pass new defines DEFAULT_REAL_TARGET_MACHINE and\n+\tACCEL_DIR_SUFFIX.\n+\t(install-cpp, install-common, install_driver, install-gcc-ar): Do not\n+\tinstall for the offload compiler.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac (real_target_noncanonical, accel_dir_suffix)\n+\t(enable_as_accelerator): Compute new variables.\n+\t(ACCEL_COMPILER): Define if the compiler is built as the accel compiler.\n+\t(OFFLOAD_TARGETS): List of target names suitable for offloading.\n+\t(ENABLE_OFFLOADING): Define if list of offload targets is not empty.\n+\t* doc/install.texi (Options specification): Document\n+\t--enable-as-accelerator-for and --enable-offload-targets.\n+\n 2014-11-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR tree-optimization/63828"}, {"sha": "7c546832c0ff28bb3983d761ba96ff41c18ca994", "filename": "gcc/Makefile.in", "status": "modified", "additions": 59, "deletions": 36, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -59,6 +59,11 @@ host=@host@\n target=@target@\n target_noncanonical:=@target_noncanonical@\n \n+# Normally identical to target_noncanonical, except for compilers built\n+# as accelerator targets.\n+real_target_noncanonical:=@real_target_noncanonical@\n+accel_dir_suffix = @accel_dir_suffix@\n+\n # Sed command to transform gcc to installed name.\n program_transform_name := @program_transform_name@\n \n@@ -363,6 +368,8 @@ enable_plugin = @enable_plugin@\n \n enable_host_shared = @enable_host_shared@\n \n+enable_as_accelerator = @enable_as_accelerator@\n+\n CPPLIB = ../libcpp/libcpp.a\n CPPINC = -I$(srcdir)/../libcpp/include\n \n@@ -574,17 +581,21 @@ libexecdir = @libexecdir@\n # --------\n \n # Directory in which the compiler finds libraries etc.\n-libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(version)\n+libsubdir = $(libdir)/gcc/$(real_target_noncanonical)/$(version)$(accel_dir_suffix)\n # Directory in which the compiler finds executables\n-libexecsubdir = $(libexecdir)/gcc/$(target_noncanonical)/$(version)\n+libexecsubdir = $(libexecdir)/gcc/$(real_target_noncanonical)/$(version)$(accel_dir_suffix)\n # Directory in which all plugin resources are installed\n plugin_resourcesdir = $(libsubdir)/plugin\n  # Directory in which plugin headers are installed\n plugin_includedir = $(plugin_resourcesdir)/include\n # Directory in which plugin specific executables are installed\n plugin_bindir = $(libexecsubdir)/plugin\n # Used to produce a relative $(gcc_tooldir) in gcc.o\n+ifeq ($(enable_as_accelerator),yes)\n+unlibsubdir = ../../../../..\n+else\n unlibsubdir = ../../..\n+endif\n # $(prefix), expressed as a path relative to $(libsubdir).\n #\n # An explanation of the sed strings:\n@@ -1957,9 +1968,11 @@ DRIVER_DEFINES = \\\n   -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc/\\\" \\\n   -DSTANDARD_LIBEXEC_PREFIX=\\\"$(libexecdir)/gcc/\\\" \\\n   -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n+  -DDEFAULT_REAL_TARGET_MACHINE=\\\"$(real_target_noncanonical)\\\" \\\n   -DDEFAULT_TARGET_MACHINE=\\\"$(target_noncanonical)\\\" \\\n   -DSTANDARD_BINDIR_PREFIX=\\\"$(bindir)/\\\" \\\n   -DTOOLDIR_BASE_PREFIX=\\\"$(libsubdir_to_prefix)$(prefix_to_exec_prefix)\\\" \\\n+  -DACCEL_DIR_SUFFIX=\\\"$(accel_dir_suffix)\\\" \\\n   @TARGET_SYSTEM_ROOT_DEFINE@ \\\n   $(VALGRIND_DRIVER_DEFINES) \\\n   $(if $(SHLIB),$(if $(filter yes,@enable_shared@),-DENABLE_SHARED_LIBGCC)) \\\n@@ -3164,12 +3177,14 @@ install-strip: install\n \n # Handle cpp installation.\n install-cpp: installdirs cpp$(exeext)\n-\t-rm -f $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext)\n-\t-$(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext)\n-\t-if [ x$(cpp_install_dir) != x ]; then \\\n-\t  rm -f $(DESTDIR)$(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n-\t  $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(DESTDIR)$(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n-\telse true; fi\n+\t-if test \"$(enable_as_accelerator)\" != \"yes\" ; then \\\n+\t  rm -f $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext); \\\n+\t  $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext); \\\n+\t  if [ x$(cpp_install_dir) != x ]; then \\\n+\t    rm -f $(DESTDIR)$(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n+\t    $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(DESTDIR)$(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n+\t  else true; fi; \\\n+\tfi\n \n # Create the installation directories.\n # $(libdir)/gcc/include isn't currently searched by cpp.\n@@ -3277,35 +3292,41 @@ install-common: native lang.install-common installdirs\n # otherwise override the specs built into the driver.\n \trm -f $(DESTDIR)$(libsubdir)/specs\n # Install gcov if it was compiled.\n-\t-if [ -f gcov$(exeext) ]; \\\n-\tthen \\\n+\t-if test \"$(enable_as_accelerator)\" != \"yes\" ; then \\\n+\t  if [ -f gcov$(exeext) ]; \\\n+\t  then \\\n \t    rm -f $(DESTDIR)$(bindir)/$(GCOV_INSTALL_NAME)$(exeext); \\\n \t    $(INSTALL_PROGRAM) gcov$(exeext) $(DESTDIR)$(bindir)/$(GCOV_INSTALL_NAME)$(exeext); \\\n+\t  fi; \\\n \tfi\n # Install gcov-tool if it was compiled.\n-\t-if [ -f gcov-tool$(exeext) ]; \\\n-\tthen \\\n+\t-if test \"$(enable_as_accelerator)\" != \"yes\" ; then \\\n+\t  if [ -f gcov-tool$(exeext) ]; \\\n+\t  then \\\n \t    rm -f $(DESTDIR)$(bindir)/$(GCOV_TOOL_INSTALL_NAME)$(exeext); \\\n \t    $(INSTALL_PROGRAM) \\\n \t    gcov-tool$(exeext) $(DESTDIR)$(bindir)/$(GCOV_TOOL_INSTALL_NAME)$(exeext); \\\n+\t  fi; \\\n \tfi\n \n # Install the driver program as $(target_noncanonical)-gcc,\n # $(target_noncanonical)-gcc-$(version), and also as gcc if native.\n install-driver: installdirs xgcc$(exeext)\n \t-rm -f $(DESTDIR)$(bindir)/$(GCC_INSTALL_NAME)$(exeext)\n \t-$(INSTALL_PROGRAM) xgcc$(exeext) $(DESTDIR)$(bindir)/$(GCC_INSTALL_NAME)$(exeext)\n-\t-if [ \"$(GCC_INSTALL_NAME)\" != \"$(target_noncanonical)-gcc-$(version)\" ]; then \\\n-\t  rm -f $(DESTDIR)$(bindir)/$(FULL_DRIVER_NAME); \\\n-\t  ( cd $(DESTDIR)$(bindir) && \\\n-\t    $(LN) $(GCC_INSTALL_NAME)$(exeext) $(FULL_DRIVER_NAME) ); \\\n-\tfi\n-\t-if [ ! -f gcc-cross$(exeext) ] \\\n-\t    && [ \"$(GCC_INSTALL_NAME)\" != \"$(GCC_TARGET_INSTALL_NAME)\" ]; then \\\n-\t  rm -f $(DESTDIR)$(bindir)/$(target_noncanonical)-gcc-tmp$(exeext); \\\n-\t  ( cd $(DESTDIR)$(bindir) && \\\n-\t    $(LN) $(GCC_INSTALL_NAME)$(exeext) $(target_noncanonical)-gcc-tmp$(exeext) && \\\n-\t    mv -f $(target_noncanonical)-gcc-tmp$(exeext) $(GCC_TARGET_INSTALL_NAME)$(exeext) ); \\\n+\t-if test \"$(enable_as_accelerator)\" != \"yes\" ; then \\\n+\t  if [ \"$(GCC_INSTALL_NAME)\" != \"$(target_noncanonical)-gcc-$(version)\" ]; then \\\n+\t    rm -f $(DESTDIR)$(bindir)/$(FULL_DRIVER_NAME); \\\n+\t    ( cd $(DESTDIR)$(bindir) && \\\n+\t      $(LN) $(GCC_INSTALL_NAME)$(exeext) $(FULL_DRIVER_NAME) ); \\\n+\t  fi; \\\n+\t  if [ ! -f gcc-cross$(exeext) ] \\\n+\t      && [ \"$(GCC_INSTALL_NAME)\" != \"$(GCC_TARGET_INSTALL_NAME)\" ]; then \\\n+\t    rm -f $(DESTDIR)$(bindir)/$(target_noncanonical)-gcc-tmp$(exeext); \\\n+\t    ( cd $(DESTDIR)$(bindir) && \\\n+\t      $(LN) $(GCC_INSTALL_NAME)$(exeext) $(target_noncanonical)-gcc-tmp$(exeext) && \\\n+\t      mv -f $(target_noncanonical)-gcc-tmp$(exeext) $(GCC_TARGET_INSTALL_NAME)$(exeext) ); \\\n+\t  fi; \\\n \tfi\n \n # Install the info files.\n@@ -3502,19 +3523,21 @@ install-lto-wrapper: lto-wrapper$(exeext)\n \t$(INSTALL_PROGRAM) lto-wrapper$(exeext) $(DESTDIR)$(libexecsubdir)/lto-wrapper$(exeext)\n \n install-gcc-ar: installdirs gcc-ar$(exeext) gcc-nm$(exeext) gcc-ranlib$(exeext)\n-\tfor i in gcc-ar gcc-nm gcc-ranlib; do \\\n-\t  install_name=`echo $$i|sed '$(program_transform_name)'` ;\\\n-\t  target_install_name=$(target_noncanonical)-`echo $$i|sed '$(program_transform_name)'` ; \\\n-\t  rm -f $(DESTDIR)$(bindir)/$$install_name$(exeext) ; \\\n-\t  $(INSTALL_PROGRAM) $$i$(exeext) $(DESTDIR)$(bindir)/$$install_name$(exeext) ;\\\n-\t  if test -f gcc-cross$(exeext); then \\\n-\t    :; \\\n-\t  else \\\n-\t    rm -f $(DESTDIR)$(bindir)/$$target_install_name$(exeext); \\\n-\t    ( cd $(DESTDIR)$(bindir) && \\\n-\t      $(LN) $$install_name$(exeext) $$target_install_name$(exeext) ) ; \\\n-\t  fi ; \\\n-\tdone\n+\tif test \"$(enable_as_accelerator)\" != \"yes\" ; then \\\n+\t  for i in gcc-ar gcc-nm gcc-ranlib; do \\\n+\t    install_name=`echo $$i|sed '$(program_transform_name)'` ;\\\n+\t    target_install_name=$(target_noncanonical)-`echo $$i|sed '$(program_transform_name)'` ; \\\n+\t    rm -f $(DESTDIR)$(bindir)/$$install_name$(exeext) ; \\\n+\t    $(INSTALL_PROGRAM) $$i$(exeext) $(DESTDIR)$(bindir)/$$install_name$(exeext) ;\\\n+\t    if test -f gcc-cross$(exeext); then \\\n+\t      :; \\\n+\t    else \\\n+\t      rm -f $(DESTDIR)$(bindir)/$$target_install_name$(exeext); \\\n+\t      ( cd $(DESTDIR)$(bindir) && \\\n+\t\t$(LN) $$install_name$(exeext) $$target_install_name$(exeext) ) ; \\\n+\t    fi ; \\\n+\t  done; \\\n+\tfi\n \n # Cancel installation by deleting the installed files.\n uninstall: lang.uninstall"}, {"sha": "9d1ad863b5fd825a92b812f7c46a4ae8850d709c", "filename": "gcc/config.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,5 +1,11 @@\n /* config.in.  Generated from configure.ac by autoheader.  */\n \n+/* Define if this compiler should be built as the offload target compiler. */\n+#ifndef USED_FOR_TARGET\n+#undef ACCEL_COMPILER\n+#endif\n+\n+\n /* Define if building universal (internal helper macro) */\n #ifndef USED_FOR_TARGET\n #undef AC_APPLE_UNIVERSAL_BUILD\n@@ -144,6 +150,12 @@\n #endif\n \n \n+/* Define this to enable support for offloading. */\n+#ifndef USED_FOR_TARGET\n+#undef ENABLE_OFFLOADING\n+#endif\n+\n+\n /* Define to enable plugin support. */\n #ifndef USED_FOR_TARGET\n #undef ENABLE_PLUGIN\n@@ -1786,6 +1798,12 @@\n #endif\n \n \n+/* Define to hold the list of target names suitable for offloading. */\n+#ifndef USED_FOR_TARGET\n+#undef OFFLOAD_TARGETS\n+#endif\n+\n+\n /* Define to the address where bug reports for this package should be sent. */\n #ifndef USED_FOR_TARGET\n #undef PACKAGE_BUGREPORT"}, {"sha": "ebc314965a7eb938bafbe9b1d362f2d7a126b395", "filename": "gcc/configure", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -760,6 +760,9 @@ LN\n LN_S\n AWK\n SET_MAKE\n+accel_dir_suffix\n+real_target_noncanonical\n+enable_as_accelerator\n REPORT_BUGS_TEXI\n REPORT_BUGS_TO\n PKGVERSION\n@@ -3198,6 +3201,10 @@ esac\n \n \n \n+# Used for constructing correct paths for offload compilers.\n+real_target_noncanonical=${target_noncanonical}\n+accel_dir_suffix=\n+\n # Determine the target- and build-specific subdirectories\n \n # post-stage1 host modules use a different CC_FOR_BUILD so, in order to\n@@ -7395,6 +7402,45 @@ else\n fi\n \n \n+if test x\"$enable_as_accelerator_for\" != x; then\n+\n+$as_echo \"#define ACCEL_COMPILER 1\" >>confdefs.h\n+\n+  enable_as_accelerator=yes\n+  case \"${target}\" in\n+    *-intelmicemul-*)\n+      # In this case we expect offload compiler to be built as native, so we\n+      # need to rename the driver to avoid clashes with host's drivers.\n+      program_transform_name=\"s&^&${target}-&\" ;;\n+  esac\n+  sedscript=\"s#${target_noncanonical}#${enable_as_accelerator_for}-accel-${target_noncanonical}#\"\n+  program_transform_name=`echo $program_transform_name | sed $sedscript`\n+  accel_dir_suffix=/accel/${target_noncanonical}\n+  real_target_noncanonical=${enable_as_accelerator_for}\n+fi\n+\n+\n+\n+\n+for tgt in `echo $enable_offload_targets | sed 's/,/ /g'`; do\n+  tgt=`echo $tgt | sed 's/=.*//'`\n+  if test x\"$offload_targets\" = x; then\n+    offload_targets=$tgt\n+  else\n+    offload_targets=\"$offload_targets:$tgt\"\n+  fi\n+done\n+\n+cat >>confdefs.h <<_ACEOF\n+#define OFFLOAD_TARGETS \"$offload_targets\"\n+_ACEOF\n+\n+if test x\"$offload_targets\" != x; then\n+\n+$as_echo \"#define ENABLE_OFFLOADING 1\" >>confdefs.h\n+\n+fi\n+\n \n # Check whether --with-multilib-list was given.\n if test \"${with_multilib_list+set}\" = set; then :\n@@ -18094,7 +18140,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18097 \"configure\"\n+#line 18143 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18200,7 +18246,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18203 \"configure\"\n+#line 18249 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "0f7ab894ec55179d9bdbb438a4200927ed059595", "filename": "gcc/configure.ac", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -38,6 +38,10 @@ AC_CANONICAL_TARGET\n # Determine the noncanonical target name, for directory use.\n ACX_NONCANONICAL_TARGET\n \n+# Used for constructing correct paths for offload compilers.\n+real_target_noncanonical=${target_noncanonical}\n+accel_dir_suffix=\n+\n # Determine the target- and build-specific subdirectories\n GCC_TOPLEV_SUBDIRS\n \n@@ -883,6 +887,40 @@ AC_ARG_ENABLE(languages,\n esac],\n [enable_languages=c])\n \n+if test x\"$enable_as_accelerator_for\" != x; then\n+  AC_DEFINE(ACCEL_COMPILER, 1,\n+    [Define if this compiler should be built as the offload target compiler.])\n+  enable_as_accelerator=yes\n+  case \"${target}\" in\n+    *-intelmicemul-*)\n+      # In this case we expect offload compiler to be built as native, so we\n+      # need to rename the driver to avoid clashes with host's drivers.\n+      program_transform_name=\"s&^&${target}-&\" ;;\n+  esac\n+  sedscript=\"s#${target_noncanonical}#${enable_as_accelerator_for}-accel-${target_noncanonical}#\"\n+  program_transform_name=`echo $program_transform_name | sed $sedscript`\n+  accel_dir_suffix=/accel/${target_noncanonical}\n+  real_target_noncanonical=${enable_as_accelerator_for}\n+fi\n+AC_SUBST(enable_as_accelerator)\n+AC_SUBST(real_target_noncanonical)\n+AC_SUBST(accel_dir_suffix)\n+\n+for tgt in `echo $enable_offload_targets | sed 's/,/ /g'`; do\n+  tgt=`echo $tgt | sed 's/=.*//'`\n+  if test x\"$offload_targets\" = x; then\n+    offload_targets=$tgt\n+  else\n+    offload_targets=\"$offload_targets:$tgt\"\n+  fi\n+done\n+AC_DEFINE_UNQUOTED(OFFLOAD_TARGETS, \"$offload_targets\",\n+  [Define to hold the list of target names suitable for offloading.])\n+if test x\"$offload_targets\" != x; then\n+  AC_DEFINE(ENABLE_OFFLOADING, 1,\n+    [Define this to enable support for offloading.])\n+fi\n+\n AC_ARG_WITH(multilib-list,\n [AS_HELP_STRING([--with-multilib-list], [select multilibs (AArch64, SH and x86-64 only)])],\n :,"}, {"sha": "26aa986a2f389b16031c59a47e7c07047b69334c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,3 +1,11 @@\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* Make-lang.in (c++.install-common): Do not install for the offload\n+\tcompiler.\n+\n 2014-11-13  Kai Tietz  <ktietz@redhat.com>\n \n \t* cp-tree.h (cp_build_function_call): Remove prototype."}, {"sha": "a58819a6e328fc09fb78edfaf707c8dd2bd74ac9", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -164,21 +164,23 @@ check_g++_parallelize = 10000\n # Install the driver program as $(target)-g++ and $(target)-c++, and\n # also as g++ and c++ if native.\n c++.install-common: installdirs\n-\t-rm -f $(DESTDIR)$(bindir)/$(GXX_INSTALL_NAME)$(exeext)\n-\t-$(INSTALL_PROGRAM) xg++$(exeext) $(DESTDIR)$(bindir)/$(GXX_INSTALL_NAME)$(exeext)\n-\t-chmod a+x $(DESTDIR)$(bindir)/$(GXX_INSTALL_NAME)$(exeext)\n-\t-rm -f $(DESTDIR)$(bindir)/$(CXX_INSTALL_NAME)$(exeext)\n-\t-( cd $(DESTDIR)$(bindir) && \\\n-\t      $(LN) $(GXX_INSTALL_NAME)$(exeext) $(CXX_INSTALL_NAME)$(exeext) )\n-\t-if [ -f cc1plus$(exeext) ] ; then \\\n-\t  if [ ! -f g++-cross$(exeext) ] ; then \\\n-\t    rm -f $(DESTDIR)$(bindir)/$(GXX_TARGET_INSTALL_NAME)$(exeext); \\\n-\t    ( cd $(DESTDIR)$(bindir) && \\\n-\t      $(LN) $(GXX_INSTALL_NAME)$(exeext) $(GXX_TARGET_INSTALL_NAME)$(exeext) ); \\\n-\t    rm -f $(DESTDIR)$(bindir)/$(CXX_TARGET_INSTALL_NAME)$(exeext); \\\n-\t    ( cd $(DESTDIR)$(bindir) && \\\n-\t      $(LN) $(CXX_INSTALL_NAME)$(exeext) $(CXX_TARGET_INSTALL_NAME)$(exeext) ); \\\n-\t  fi ; \\\n+\t-if test \"$(enable_as_accelerator)\" != \"yes\" ; then \\\n+\t  rm -f $(DESTDIR)$(bindir)/$(GXX_INSTALL_NAME)$(exeext); \\\n+\t  $(INSTALL_PROGRAM) xg++$(exeext) $(DESTDIR)$(bindir)/$(GXX_INSTALL_NAME)$(exeext); \\\n+\t  chmod a+x $(DESTDIR)$(bindir)/$(GXX_INSTALL_NAME)$(exeext); \\\n+\t  rm -f $(DESTDIR)$(bindir)/$(CXX_INSTALL_NAME)$(exeext); \\\n+\t  ( cd $(DESTDIR)$(bindir) && \\\n+\t    $(LN) $(GXX_INSTALL_NAME)$(exeext) $(CXX_INSTALL_NAME)$(exeext) ); \\\n+\t  if [ -f cc1plus$(exeext) ] ; then \\\n+\t    if [ ! -f g++-cross$(exeext) ] ; then \\\n+\t      rm -f $(DESTDIR)$(bindir)/$(GXX_TARGET_INSTALL_NAME)$(exeext); \\\n+\t      ( cd $(DESTDIR)$(bindir) && \\\n+\t\t$(LN) $(GXX_INSTALL_NAME)$(exeext) $(GXX_TARGET_INSTALL_NAME)$(exeext) ); \\\n+\t      rm -f $(DESTDIR)$(bindir)/$(CXX_TARGET_INSTALL_NAME)$(exeext); \\\n+\t      ( cd $(DESTDIR)$(bindir) && \\\n+\t\t$(LN) $(CXX_INSTALL_NAME)$(exeext) $(CXX_TARGET_INSTALL_NAME)$(exeext) ); \\\n+\t    fi ; \\\n+\t  fi; \\\n \tfi\n \n # We can't use links because not everyone supports them.  So just copy the"}, {"sha": "64c66f9d5e4c34dc4faf52f7a923bcb9c7002f4a", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1845,6 +1845,20 @@ If GCC is configured with some multilibs that use glibc and some that\n do not, this option applies only to the multilibs that use glibc.\n However, such configurations may not work well as not all the relevant\n configuration in GCC is on a per-multilib basis.\n+\n+@item --enable-as-accelerator-for=@var{target}\n+Build as offload target compiler. Specify offload host triple by @var{target}.\n+\n+@item --enable-offload-targets=@var{target1}[=@var{path1}],@dots{},@var{targetN}[=@var{pathN}]\n+Enable offloading to targets @var{target1}, @dots{}, @var{targetN}.\n+Offload compilers are expected to be already installed.  Default search\n+path for them is @file{@var{exec-prefix}}, but it can be changed by\n+specifying paths @var{path1}, @dots{}, @var{pathN}.\n+\n+@smallexample\n+% @var{srcdir}/configure \\\n+    --enable-offload-target=i686-unknown-linux-gnu=/path/to/i686/compiler,x86_64-pc-linux-gnu\n+@end smallexample\n @end table\n \n @subheading Cross-Compiler-Specific Options"}, {"sha": "ec1b7b5b6cf855ecd80238cedcdb79113fbb6bad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,3 +1,11 @@\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* Make-lang.in (fortran.install-common): Do not install for the offload\n+\tcompiler.\n+\n 2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR fortran/44054"}, {"sha": "3621b4f1202ee34313a55a60b7b8f44114c2f0df", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -235,14 +235,16 @@ install-finclude-dir: installdirs\n # Install the driver program as $(target)-gfortran, and also as gfortran\n # if native.\n fortran.install-common: install-finclude-dir installdirs\n-\t-if [ -f f951$(exeext) ] ; then \\\n-\t  rm -f $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext); \\\n-\t  $(INSTALL_PROGRAM) gfortran$(exeext) $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext); \\\n-\t  chmod a+x $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext); \\\n-\t  if [ ! -f gfortran-cross$(exeext) ] ; then \\\n-\t    rm -f $(DESTDIR)$(bindir)/$(GFORTRAN_TARGET_INSTALL_NAME)$(exeext); \\\n-\t    $(LN) $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext) $(DESTDIR)$(bindir)/$(GFORTRAN_TARGET_INSTALL_NAME)$(exeext); \\\n-\t  fi ; \\\n+\t-if test \"$(enable_as_accelerator)\" != \"yes\" ; then \\\n+\t  if [ -f f951$(exeext) ] ; then \\\n+\t    rm -f $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext); \\\n+\t    $(INSTALL_PROGRAM) gfortran$(exeext) $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext); \\\n+\t    chmod a+x $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext); \\\n+\t    if [ ! -f gfortran-cross$(exeext) ] ; then \\\n+\t      rm -f $(DESTDIR)$(bindir)/$(GFORTRAN_TARGET_INSTALL_NAME)$(exeext); \\\n+\t      $(LN) $(DESTDIR)$(bindir)/$(GFORTRAN_INSTALL_NAME)$(exeext) $(DESTDIR)$(bindir)/$(GFORTRAN_TARGET_INSTALL_NAME)$(exeext); \\\n+\t    fi ; \\\n+\t  fi; \\\n \tfi\n \n fortran.install-plugin:"}, {"sha": "296a9e4792dbc293c96025b3df3c7c909995d62f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,3 +1,16 @@\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* Makefile.in (crtoffloadbegin$(objext)): New rule.\n+\t(crtoffloadend$(objext)): Likewise.\n+\t* configure: Regenerate.\n+\t* configure.ac (accel_dir_suffix): Compute new variable.\n+\t(extra_parts): Add crtoffloadbegin.o and crtoffloadend.o\n+\tif enable_offload_targets is not empty.\n+\t* offloadstuff.c: New file.\n+\n 2014-11-13  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/divmodhi.S: Add support for the G10 architecture."}, {"sha": "f0506f26620c0bae024038d9c667a82ae527f43d", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -184,7 +184,7 @@ STRIP = @STRIP@\n STRIP_FOR_TARGET = $(STRIP)\n \n # Directory in which the compiler finds libraries etc.\n-libsubdir = $(libdir)/gcc/$(host_noncanonical)/$(version)\n+libsubdir = $(libdir)/gcc/$(host_noncanonical)/$(version)@accel_dir_suffix@\n # Used to install the shared libgcc.\n slibdir = @slibdir@\n # Maybe used for DLLs on Windows targets.\n@@ -995,6 +995,14 @@ crtendS$(objext): $(srcdir)/crtstuff.c\n crtbeginT$(objext): $(srcdir)/crtstuff.c\n \t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $< -DCRT_BEGIN -DCRTSTUFFT_O\n \n+# crtoffloadbegin and crtoffloadend contain symbols, that mark the begin and\n+# the end of tables with addresses, required for offloading.\n+crtoffloadbegin$(objext): $(srcdir)/offloadstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $< -DCRT_BEGIN\n+\n+crtoffloadend$(objext): $(srcdir)/offloadstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $< -DCRT_END\n+\n ifeq ($(enable_vtable_verify),yes)\n # These are used in vtable verification; see comments in source files for\n # more details."}, {"sha": "87924653210b506dccc6a2e0039e6f15697c0048", "filename": "libgcc/configure", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -566,6 +566,7 @@ sfp_machine_header\n set_use_emutls\n set_have_cc_tls\n vis_hide\n+accel_dir_suffix\n force_explicit_eh_registry\n fixed_point\n enable_decimal_float\n@@ -4451,6 +4452,23 @@ esac\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n \n+# Used for constructing correct paths for offload compilers.\n+accel_dir_suffix=\n+if test x\"$enable_as_accelerator_for\" != x; then\n+  accel_dir_suffix=/accel/${target_noncanonical}\n+  case \"${target_noncanonical}\" in\n+    *-intelmicemul-*)\n+      # In this case we expect offload compiler to be built as native, so we\n+      # need to change install directory for driver to be able to find libgcc.\n+      host_noncanonical=${enable_as_accelerator_for} ;;\n+  esac\n+fi\n+\n+\n+if test x\"$enable_offload_targets\" != x; then\n+  extra_parts=\"${extra_parts} crtoffloadbegin.o crtoffloadend.o\"\n+fi\n+\n # Check if Solaris/x86 linker supports ZERO terminator unwind entries.\n # This is after config.host so we can augment tmake_file.\n # Link with -nostartfiles -nodefaultlibs since neither are present while"}, {"sha": "ab9c5562e288a8bb87779fa4b8c2e3a9f18d4260", "filename": "libgcc/configure.ac", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -379,6 +379,23 @@ esac\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n \n+# Used for constructing correct paths for offload compilers.\n+accel_dir_suffix=\n+if test x\"$enable_as_accelerator_for\" != x; then\n+  accel_dir_suffix=/accel/${target_noncanonical}\n+  case \"${target_noncanonical}\" in\n+    *-intelmicemul-*)\n+      # In this case we expect offload compiler to be built as native, so we\n+      # need to change install directory for driver to be able to find libgcc.\n+      host_noncanonical=${enable_as_accelerator_for} ;;\n+  esac\n+fi\n+AC_SUBST(accel_dir_suffix)\n+\n+if test x\"$enable_offload_targets\" != x; then\n+  extra_parts=\"${extra_parts} crtoffloadbegin.o crtoffloadend.o\"\n+fi\n+\n # Check if Solaris/x86 linker supports ZERO terminator unwind entries.\n # This is after config.host so we can augment tmake_file.\n # Link with -nostartfiles -nodefaultlibs since neither are present while"}, {"sha": "273189d952ce32981ad0fc35641d969f34634f96", "filename": "libgcc/offloadstuff.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2Foffloadstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgcc%2Foffloadstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Foffloadstuff.c?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -0,0 +1,80 @@\n+/* Specialized bits of code needed for the offloading tables.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Target machine header files require this define. */\n+#define IN_LIBGCC2\n+\n+/* FIXME: Including auto-host is incorrect, but until we have\n+   identified the set of defines that need to go into auto-target.h,\n+   this will have to do.  */\n+#include \"auto-host.h\"\n+#undef caddr_t\n+#undef pid_t\n+#undef rlim_t\n+#undef ssize_t\n+#undef vfork\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"libgcc_tm.h\"\n+\n+#define OFFLOAD_FUNC_TABLE_SECTION_NAME \".gnu.offload_funcs\"\n+#define OFFLOAD_VAR_TABLE_SECTION_NAME \".gnu.offload_vars\"\n+\n+#ifdef CRT_BEGIN\n+\n+#if defined(HAVE_GAS_HIDDEN) && defined(ENABLE_OFFLOADING)\n+void *__offload_func_table[0]\n+  __attribute__ ((__used__, visibility (\"hidden\"),\n+\t\t  section (OFFLOAD_FUNC_TABLE_SECTION_NAME))) = { };\n+void *__offload_var_table[0]\n+  __attribute__ ((__used__, visibility (\"hidden\"),\n+\t\t  section (OFFLOAD_VAR_TABLE_SECTION_NAME))) = { };\n+#endif\n+\n+#elif defined CRT_END\n+\n+#if defined(HAVE_GAS_HIDDEN) && defined(ENABLE_OFFLOADING)\n+void *__offload_funcs_end[0]\n+  __attribute__ ((__used__, visibility (\"hidden\"),\n+\t\t  section (OFFLOAD_FUNC_TABLE_SECTION_NAME))) = { };\n+void *__offload_vars_end[0]\n+  __attribute__ ((__used__, visibility (\"hidden\"),\n+\t\t  section (OFFLOAD_VAR_TABLE_SECTION_NAME))) = { };\n+\n+extern void *__offload_func_table[];\n+extern void *__offload_var_table[];\n+\n+void *__OFFLOAD_TABLE__[]\n+  __attribute__ ((__visibility__ (\"hidden\"))) =\n+{\n+  &__offload_func_table, &__offload_funcs_end,\n+  &__offload_var_table, &__offload_vars_end\n+};\n+#endif\n+\n+#else /* ! CRT_BEGIN && ! CRT_END */\n+#error \"One of CRT_BEGIN or CRT_END must be defined.\"\n+#endif"}, {"sha": "df1d820f8d8bd268bee0aa9be5f1558ff88d1747", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,3 +1,15 @@\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Check for libdl, required for plugin support.\n+\t(PLUGIN_SUPPORT): Define if plugins are supported.\n+\t(enable_offload_targets): Support Intel MIC targets.\n+\t(OFFLOAD_TARGETS): List of target names suitable for offloading.\n+\n 2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR target/63610"}, {"sha": "94a2b3b3b32490d29ea2faa5a14471dba7cb68e1", "filename": "libgomp/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig.h.in?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -30,6 +30,9 @@\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n+/* Define to 1 if you have the `dl' library (-ldl). */\n+#undef HAVE_LIBDL\n+\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n@@ -86,6 +89,9 @@\n    */\n #undef LT_OBJDIR\n \n+/* Define to hold the list of target names suitable for offloading. */\n+#undef OFFLOAD_TARGETS\n+\n /* Name of package */\n #undef PACKAGE\n \n@@ -107,6 +113,9 @@\n /* Define to the version of this package. */\n #undef PACKAGE_VERSION\n \n+/* Define if all infrastructure, needed for plugins, is supported. */\n+#undef PLUGIN_SUPPORT\n+\n /* The size of `char', as computed by sizeof. */\n #undef SIZEOF_CHAR\n "}, {"sha": "7cd20b1bca1324a2c653b6eb7b50a29b8948b2ac", "filename": "libgomp/configure", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -15052,6 +15052,60 @@ fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n \n+plugin_support=yes\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for dlsym in -ldl\" >&5\n+$as_echo_n \"checking for dlsym in -ldl... \" >&6; }\n+if test \"${ac_cv_lib_dl_dlsym+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-ldl  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char dlsym ();\n+int\n+main ()\n+{\n+return dlsym ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_dl_dlsym=yes\n+else\n+  ac_cv_lib_dl_dlsym=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dl_dlsym\" >&5\n+$as_echo \"$ac_cv_lib_dl_dlsym\" >&6; }\n+if test \"x$ac_cv_lib_dl_dlsym\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_LIBDL 1\n+_ACEOF\n+\n+  LIBS=\"-ldl $LIBS\"\n+\n+else\n+  plugin_support=no\n+fi\n+\n+if test x\"$plugin_support\" = xyes; then\n+\n+$as_echo \"#define PLUGIN_SUPPORT 1\" >>confdefs.h\n+\n+fi\n+\n # Check for functions needed.\n for ac_func in getloadavg clock_gettime strtoull\n do :\n@@ -16153,6 +16207,29 @@ else\n   multilib_arg=\n fi\n \n+offload_targets=\n+if test x\"$enable_offload_targets\" != x; then\n+  for tgt in `echo $enable_offload_targets | sed -e 's#,# #g'`; do\n+    tgt=`echo $tgt | sed 's/=.*//'`\n+    case $tgt in\n+      *-intelmic-* | *-intelmicemul-*)\n+\ttgt_name=\"intelmic\" ;;\n+      *)\n+\tas_fn_error \"unknown offload target specified\" \"$LINENO\" 5 ;;\n+    esac\n+    if test x\"$offload_targets\" = x; then\n+      offload_targets=$tgt_name\n+    else\n+      offload_targets=$offload_targets,$tgt_name\n+    fi\n+  done\n+fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define OFFLOAD_TARGETS \"$offload_targets\"\n+_ACEOF\n+\n+\n # Set up the set of libraries that we need to link against for libgomp.\n # Note that the GOMP_SELF_SPEC in gcc.c may force -pthread,\n # which will force linkage against -lpthread (or equivalent for the system)."}, {"sha": "3f34ff8ee5fd68e7e9e2ce993231218c73e342be", "filename": "libgomp/configure.ac", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -193,6 +193,13 @@ AC_LINK_IFELSE(\n    [],\n    [AC_MSG_ERROR([Pthreads are required to build libgomp])])])\n \n+plugin_support=yes\n+AC_CHECK_LIB(dl, dlsym, , [plugin_support=no])\n+if test x\"$plugin_support\" = xyes; then\n+  AC_DEFINE(PLUGIN_SUPPORT, 1,\n+    [Define if all infrastructure, needed for plugins, is supported.])\n+fi\n+\n # Check for functions needed.\n AC_CHECK_FUNCS(getloadavg clock_gettime strtoull)\n \n@@ -273,6 +280,26 @@ else\n   multilib_arg=\n fi\n \n+offload_targets=\n+if test x\"$enable_offload_targets\" != x; then\n+  for tgt in `echo $enable_offload_targets | sed -e 's#,# #g'`; do\n+    tgt=`echo $tgt | sed 's/=.*//'`\n+    case $tgt in\n+      *-intelmic-* | *-intelmicemul-*)\n+\ttgt_name=\"intelmic\" ;;\n+      *)\n+\tAC_MSG_ERROR([unknown offload target specified]) ;;\n+    esac\n+    if test x\"$offload_targets\" = x; then\n+      offload_targets=$tgt_name\n+    else\n+      offload_targets=$offload_targets,$tgt_name\n+    fi\n+  done\n+fi\n+AC_DEFINE_UNQUOTED(OFFLOAD_TARGETS, \"$offload_targets\",\n+  [Define to hold the list of target names suitable for offloading.])\n+\n # Set up the set of libraries that we need to link against for libgomp.\n # Note that the GOMP_SELF_SPEC in gcc.c may force -pthread,\n # which will force linkage against -lpthread (or equivalent for the system)."}, {"sha": "195ab453a4a298bda7d134cd3feae8e489c4f633", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -1,3 +1,17 @@\n+2014-11-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\n+\t* Makefile.am (libexecsubdir): Tweak for the possibility of being\n+\tconfigured for offload compiler.\n+\t(accel_dir_suffix, real_target_noncanonical): New variables substituted\n+\tby configure.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac (accel_dir_suffix, real_target_noncanonical): Compute new\n+\tvariables.\n+\n 2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR target/63610"}, {"sha": "c637ecb5743fbb5ff3f6d376af76cb22be343c83", "filename": "lto-plugin/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.am?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -5,7 +5,7 @@ AUTOMAKE_OPTIONS = no-dependencies\n \n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n target_noncanonical := @target_noncanonical@\n-libexecsubdir := $(libexecdir)/gcc/$(target_noncanonical)/$(gcc_version)\n+libexecsubdir := $(libexecdir)/gcc/$(real_target_noncanonical)/$(gcc_version)$(accel_dir_suffix)\n \n AM_CPPFLAGS = -I$(top_srcdir)/../include $(DEFS)\n AM_CFLAGS = @ac_lto_plugin_warn_cflags@"}, {"sha": "4bd943bdb013d05f0aa3ee4e6315f962f3c528ae", "filename": "lto-plugin/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.in?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -167,6 +167,7 @@ ac_ct_CC = @ac_ct_CC@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n ac_lto_plugin_ldflags = @ac_lto_plugin_ldflags@\n ac_lto_plugin_warn_cflags = @ac_lto_plugin_warn_cflags@\n+accel_dir_suffix = @accel_dir_suffix@\n am__include = @am__include@\n am__leading_dot = @am__leading_dot@\n am__quote = @am__quote@\n@@ -209,6 +210,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+real_target_noncanonical = @real_target_noncanonical@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -227,7 +229,7 @@ with_libiberty = @with_libiberty@\n ACLOCAL_AMFLAGS = -I .. -I ../config\n AUTOMAKE_OPTIONS = no-dependencies\n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n-libexecsubdir := $(libexecdir)/gcc/$(target_noncanonical)/$(gcc_version)\n+libexecsubdir := $(libexecdir)/gcc/$(real_target_noncanonical)/$(gcc_version)$(accel_dir_suffix)\n AM_CPPFLAGS = -I$(top_srcdir)/../include $(DEFS)\n AM_CFLAGS = @ac_lto_plugin_warn_cflags@\n AM_LDFLAGS = @ac_lto_plugin_ldflags@"}, {"sha": "9d1b09440d71bdc8f86de319a12719a4b832716a", "filename": "lto-plugin/configure", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -622,6 +622,8 @@ EGREP\n GREP\n SED\n LIBTOOL\n+real_target_noncanonical\n+accel_dir_suffix\n gcc_build_dir\n ac_lto_plugin_ldflags\n ac_lto_plugin_warn_cflags\n@@ -4135,6 +4137,16 @@ else\n fi\n \n \n+# Used for constructing correct paths for offload compilers.\n+accel_dir_suffix=\n+real_target_noncanonical=${target_noncanonical}\n+if test x\"$enable_as_accelerator_for\" != x; then\n+  accel_dir_suffix=/accel/${target_noncanonical}\n+  real_target_noncanonical=${enable_as_accelerator_for}\n+fi\n+\n+\n+\n case `pwd` in\n   *\\ * | *\\\t*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Libtool does not cope well with whitespace in \\`pwd\\`\" >&5\n@@ -10607,7 +10619,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10610 \"configure\"\n+#line 10622 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10713,7 +10725,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10716 \"configure\"\n+#line 10728 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "db5b6cd64c8f5b3b7ce209533308f2a49cdc3893", "filename": "lto-plugin/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c64bbee96e9a877a0138a509c42ad6feb4d189/lto-plugin%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure.ac?ref=85c64bbee96e9a877a0138a509c42ad6feb4d189", "patch": "@@ -34,6 +34,16 @@ else\n fi\n AC_SUBST(gcc_build_dir)\n \n+# Used for constructing correct paths for offload compilers.\n+accel_dir_suffix=\n+real_target_noncanonical=${target_noncanonical}\n+if test x\"$enable_as_accelerator_for\" != x; then\n+  accel_dir_suffix=/accel/${target_noncanonical}\n+  real_target_noncanonical=${enable_as_accelerator_for}\n+fi\n+AC_SUBST(accel_dir_suffix)\n+AC_SUBST(real_target_noncanonical)\n+\n AM_PROG_LIBTOOL\n ACX_LT_HOST_FLAGS\n AC_SUBST(target_noncanonical)"}]}