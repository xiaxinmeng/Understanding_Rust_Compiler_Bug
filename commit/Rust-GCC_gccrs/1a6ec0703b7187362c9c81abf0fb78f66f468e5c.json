{"sha": "1a6ec0703b7187362c9c81abf0fb78f66f468e5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE2ZWMwNzAzYjcxODczNjJjOWM4MWFiZjBmYjc4ZjY2ZjQ2OGU1Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-04T23:48:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-04T23:48:04Z"}, "message": "(find_split_point, case SET): If SET_SRC is NE and STORE_FLAG_VALUE is -1, see if we can convert into NEG of shift.\n\n(find_split_point, case SET): If SET_SRC is NE and\nSTORE_FLAG_VALUE is -1, see if we can convert into NEG of shift.\n(force_to_mode, case NE): Make condition stricter.\n\nFrom-SVN: r13370", "tree": {"sha": "e340dd21565a78d5116b02bc784ff8db36b81a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e340dd21565a78d5116b02bc784ff8db36b81a83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a6ec0703b7187362c9c81abf0fb78f66f468e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a6ec0703b7187362c9c81abf0fb78f66f468e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a6ec0703b7187362c9c81abf0fb78f66f468e5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a6ec0703b7187362c9c81abf0fb78f66f468e5c/comments", "author": null, "committer": null, "parents": [{"sha": "4d6a19ff0f57411a6bb7c7eb5d6072392e503dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6a19ff0f57411a6bb7c7eb5d6072392e503dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6a19ff0f57411a6bb7c7eb5d6072392e503dd2"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "6ebd8caab5449eb57eb0a539c6ed9352f1cc1e19", "filename": "gcc/combine.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a6ec0703b7187362c9c81abf0fb78f66f468e5c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a6ec0703b7187362c9c81abf0fb78f66f468e5c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1a6ec0703b7187362c9c81abf0fb78f66f468e5c", "patch": "@@ -1,5 +1,5 @@\n /* Optimize by combining instructions for GNU compiler.\n-   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2667,6 +2667,29 @@ find_split_point (loc, insn)\n \t    }\n \t  break;\n \n+\tcase NE:\n+\t  /* if STORE_FLAG_VALUE is -1, this is (NE X 0) and only one bit of X\n+\t     is known to be on, this can be converted into a NEG of a shift. */\n+\t  if (STORE_FLAG_VALUE == -1 && XEXP (SET_SRC (x), 1) == const0_rtx\n+\t      && GET_MODE (SET_SRC (x)) == GET_MODE (XEXP (SET_SRC (x), 0))\n+\t      && 1 <= (len = exact_log2\n+\t\t       (nonzero_bits (XEXP (SET_SRC (x), 0),\n+\t\t\t\t      GET_MODE (XEXP (SET_SRC (x), 0))))))\n+\t    {\n+\t      enum machine_mode mode = GET_MODE (XEXP (SET_SRC (x), 0));\n+\n+\t      SUBST (SET_SRC (x),\n+\t\t     gen_rtx_combine (NEG, mode,\n+\t\t\t\t      gen_rtx_combine (LSHIFTRT, mode,\n+\t\t\t\t\t\t       XEXP (SET_SRC (x), 0),\n+\t\t\t\t\t\t       GEN_INT (len))));\n+\n+\t      split = find_split_point (&SET_SRC (x), insn);\n+\t      if (split && split != &SET_SRC (x))\n+\t\treturn split;\n+\t    }\n+\t  break;\n+\n \tcase SIGN_EXTEND:\n \t  inner = XEXP (SET_SRC (x), 0);\n \t  pos = 0;\n@@ -6383,10 +6406,10 @@ force_to_mode (x, mode, mask, reg, just_select)\n     case NE:\n       /* (and (ne FOO 0) CONST) can be (and FOO CONST) if CONST is included\n \t in STORE_FLAG_VALUE and FOO has a single bit that might be nonzero,\n-\t which is in CONST.  */\n+\t which is equal to STORE_FLAG_VALUE.  */\n       if ((mask & ~ STORE_FLAG_VALUE) == 0 && XEXP (x, 1) == const0_rtx\n \t  && exact_log2 (nonzero_bits (XEXP (x, 0), mode)) >= 0\n-\t  && (nonzero_bits (XEXP (x, 0), mode) & ~ mask) == 0)\n+\t  && nonzero_bits (XEXP (x, 0), mode) == STORE_FLAG_VALUE)\n \treturn force_to_mode (XEXP (x, 0), mode, mask, reg, next_select);\n \n       break;"}]}