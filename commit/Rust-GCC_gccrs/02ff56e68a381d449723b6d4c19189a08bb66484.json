{"sha": "02ff56e68a381d449723b6d4c19189a08bb66484", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmZjU2ZTY4YTM4MWQ0NDk3MjNiNmQ0YzE5MTg5YTA4YmI2NjQ4NA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-11-10T16:31:10Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-11-10T16:31:10Z"}, "message": "ptx testsuite fix for return addresses.\n\n\t* lib/target-supports.exp (check_effective_target_return_address):\n\tNew function.\n\t* gcc.c-torture/execute/20010122-1.c: Require return_address.\n\t* gcc.c-torture/execute/20030323-1.c: Likewise.\n\t* gcc.c-torture/execute/20030811-1.c: Likewise.\n\t* gcc.c-torture/execute/eeprof-1.c: Likewise.\n\t* gcc.c-torture/execute/frame-address.c: Likewise.\n\t* gcc.c-torture/execute/pr17377.c: Likewise.\n\nFrom-SVN: r217301", "tree": {"sha": "10e56a588cc1f39d5360f7359da890d40f846213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10e56a588cc1f39d5360f7359da890d40f846213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02ff56e68a381d449723b6d4c19189a08bb66484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ff56e68a381d449723b6d4c19189a08bb66484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ff56e68a381d449723b6d4c19189a08bb66484", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ff56e68a381d449723b6d4c19189a08bb66484/comments", "author": null, "committer": null, "parents": [{"sha": "5ea6b1bdc19b9a326d95f8f2c0f85dbc4d81e62d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea6b1bdc19b9a326d95f8f2c0f85dbc4d81e62d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea6b1bdc19b9a326d95f8f2c0f85dbc4d81e62d"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "3af1a43c8f2e1211854c41c3f54300f307689048", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,5 +1,14 @@\n 2014-11-10  Bernd Schmidt  <bernds@codesourcery.com>\n \n+\t* lib/target-supports.exp (check_effective_target_return_address):\n+\tNew function.\n+\t* gcc.c-torture/execute/20010122-1.c: Require return_address.\n+\t* gcc.c-torture/execute/20030323-1.c: Likewise.\n+\t* gcc.c-torture/execute/20030811-1.c: Likewise.\n+\t* gcc.c-torture/execute/eeprof-1.c: Likewise.\n+\t* gcc.c-torture/execute/frame-address.c: Likewise.\n+\t* gcc.c-torture/execute/pr17377.c: Likewise.\n+\n \t* gcc.c-torture/compile/920625-2.c: Add return type to\n \tfreeReturnStruct.\n \t* gcc.c-torture/execute/20091229-1.c: Declare main properly."}, {"sha": "0fa017fc73832957b3a7da2bf307add92d1e5567", "filename": "gcc/testsuite/gcc.c-torture/compile/pr35468.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr35468.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr35468.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr35468.c?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,4 +1,5 @@\n /* PR tree-optimization/35468 */\n+/* { dg-require-effective-target no_const_addr_space } */\n \n void\n foo (void)"}, {"sha": "528cef7139d76371559461f43279748b4e46f859", "filename": "gcc/testsuite/gcc.c-torture/execute/20010122-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,4 +1,5 @@\n /* { dg-skip-if \"requires frame pointers\" { *-*-* } \"-fomit-frame-pointer\" \"\" } */\n+/* { dg-require-effective-target return_address } */\n \n extern void exit (int);\n extern void abort (void);"}, {"sha": "bace9a2772296d28ddf6fc51c8aed857b0879ac2", "filename": "gcc/testsuite/gcc.c-torture/execute/20030323-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030323-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030323-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030323-1.c?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,4 +1,5 @@\n /* PR opt/10116 */\n+/* { dg-require-effective-target return_address } */\n /* Removed tablejump while label still in use; this is really a link test.  */\n \n void *NSReturnAddress(int offset)"}, {"sha": "29cfa1591e04cb9d21b5d797b71f43873a3e53d7", "filename": "gcc/testsuite/gcc.c-torture/execute/20030811-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030811-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030811-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030811-1.c?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,4 +1,5 @@\n /* Origin: PR target/11535 from H. J. Lu <hjl@lucon.org> */\n+/* { dg-require-effective-target return_address } */\n \n void vararg (int i, ...)\n {"}, {"sha": "c2a9ff65f18c94f6fe99c103f3a303ca4467a5ee", "filename": "gcc/testsuite/gcc.c-torture/execute/eeprof-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Feeprof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Feeprof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Feeprof-1.c?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-require-effective-target return_address } */\n /* { dg-options \"-finstrument-functions\" } */\n /* { dg-xfail-if \"\" { powerpc-ibm-aix* } \"*\" \"\" } */\n "}, {"sha": "e453f88435966ae1e10728131484bc142ed2d90b", "filename": "gcc/testsuite/gcc.c-torture/execute/frame-address.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fframe-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fframe-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fframe-address.c?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-require-effective-target return_address } */\n int check_fa_work (const char *, const char *) __attribute__((noinline));\n int check_fa_mid (const char *) __attribute__((noinline));\n int check_fa (char *) __attribute__((noinline));"}, {"sha": "11094d1bea5b3d1da1864ae3c2a8dd5fbd55e861", "filename": "gcc/testsuite/gcc.c-torture/execute/pr17377.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr17377.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr17377.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr17377.c?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -1,6 +1,7 @@\n /* PR target/17377\n    Bug in code emitted by \"return\" pattern on CRIS: missing pop of\n    forced return address on stack.  */\n+/* { dg-require-effective-target return_address } */\n int calls = 0;\n \n void *f (int) __attribute__ ((__noinline__));"}, {"sha": "a31d050b4360c1bb0ba8684a2223c2d98cad8c20", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02ff56e68a381d449723b6d4c19189a08bb66484/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=02ff56e68a381d449723b6d4c19189a08bb66484", "patch": "@@ -632,6 +632,16 @@ proc check_effective_target_label_values {} {\n     }]\n }\n \n+# Return 1 if builtin_return_address and builtin_frame_address are\n+# supported, 0 otherwise.\n+\n+proc check_effective_target_return_address {} {\n+    if { [istarget nvptx-*-*] } {\n+\treturn 0\n+    }\n+    return 1\n+}\n+\n # Return 1 if the assembler does not verify function types against\n # calls, 0 otherwise.  Such verification will typically show up problems\n # with K&R C function declarations."}]}