{"sha": "4c494a15bb5e1bca533f8b1244ab0efbe43da469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0OTRhMTViYjVlMWJjYTUzM2Y4YjEyNDRhYjBlZmJlNDNkYTQ2OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-12-23T20:25:49Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-12-23T20:25:49Z"}, "message": "ia64.c (ia64_va_arg): Pass pointer for variable-sized type through convert_memory_address.\n\ngcc:\n\t* config/ia64/ia64.c (ia64_va_arg): Pass pointer for\n\tvariable-sized type through convert_memory_address.\n\t(ia64_in_small_data_p): Always return false for FUNCTION_DECLs.\n\ngcc/testsuite:\n\t* lib/gcc-dg.exp (dg-prune-output): New annotation.\n\t(additional_prunes): New global.\n\t(gcc-dg-prune): Handle additional per-test pruning.\n\t(dg-test): Clear additional_prunes between tests.\n\n\t* gcc.c-torture/compile/920625-1.c: Remove xfail.  Use\n\tdg-prune-output to avoid spurious failures from assembler\n\tcomplaining about nonexistent WAW violations.\n\t* gcc.c-torture/compile/981223-1.c: Remove dg-options line.\n\tUse dg-prune-output to avoid spurious failures from assembler\n\twarning about Itanium B-step errata.\n\nFrom-SVN: r74980", "tree": {"sha": "71fae27a9efb2795d277a638a93650d906129668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71fae27a9efb2795d277a638a93650d906129668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c494a15bb5e1bca533f8b1244ab0efbe43da469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c494a15bb5e1bca533f8b1244ab0efbe43da469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c494a15bb5e1bca533f8b1244ab0efbe43da469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c494a15bb5e1bca533f8b1244ab0efbe43da469/comments", "author": null, "committer": null, "parents": [{"sha": "baba70d019dcf4ce9cbd6544465b25154eaed5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baba70d019dcf4ce9cbd6544465b25154eaed5e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baba70d019dcf4ce9cbd6544465b25154eaed5e0"}], "stats": {"total": 126, "additions": 91, "deletions": 35}, "files": [{"sha": "58468c92a70872aa9179e6a95b6a9a1feecb8b3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c494a15bb5e1bca533f8b1244ab0efbe43da469", "patch": "@@ -1,3 +1,9 @@\n+2003-12-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/ia64/ia64.c (ia64_va_arg): Pass pointer for\n+\tvariable-sized type through convert_memory_address.\n+\t(ia64_in_small_data_p): Always return false for FUNCTION_DECLs.\n+\n 2003-12-23  Jan Hubicka  <jh@suse.cz>\n \n \t* common.opt (fprofile-generate,fprofile-use): Add.\n@@ -47,7 +53,7 @@\n \t-falt-external-templates and -ftemplates.\n \t* doc/invoke.texi: Remove mention of -fexternal-templates and\n \t-falt-external-templates.\n-\t\n+\n 2003-12-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/13466\n@@ -62,24 +68,24 @@\n \n 2003-12-22  Fariborz Jahanian <fjahanian@apple.com>\n \n-        * config/rs6000/rs6000.c (legitimate_offset_address_p): Correct\n-        check for the legitimate offset when memory of \n-\tDImode/DFmode/TFmode/TImode mode is being referenced and target \n+\t* config/rs6000/rs6000.c (legitimate_offset_address_p): Correct\n+\tcheck for the legitimate offset when memory of\n+\tDImode/DFmode/TFmode/TImode mode is being referenced and target\n \tis TARGET_POWERPC64.\n \n 2003-12-22  Dale Johannesen  <dalej@apple.com>\n \n-        * reload1.c:  Add reg_reloaded_call_part_clobbered.\n-        (reload_as_needed):  Use it.\n-        (forget_old_reloads_1):  Ditto.\n-        (emit_reload_insns):  Ditto.\n+\t* reload1.c:  Add reg_reloaded_call_part_clobbered.\n+\t(reload_as_needed):  Use it.\n+\t(forget_old_reloads_1):  Ditto.\n+\t(emit_reload_insns):  Ditto.\n \n 2003-12-22  Dale Johannesen  <dalej@apple.com>\n \n-        PR optimization/12828\n-        * loop.c:  Add find_regs_nested to look inside CLOBBER(MEM).\n-        (scan_loop):  Call it.\n-        * regclass.c (reg_scan_mark_regs):  Look inside CLOBBER(MEM).\n+\tPR optimization/12828\n+\t* loop.c:  Add find_regs_nested to look inside CLOBBER(MEM).\n+\t(scan_loop):  Call it.\n+\t* regclass.c (reg_scan_mark_regs):  Look inside CLOBBER(MEM).\n \n 2003-12-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n@@ -107,7 +113,7 @@\n \t* configure.in (gather-detailed-mem-stats): New flag.\n \t* configure: Regenerate.\n \t* config.in: Regenerate.\n-\t* doc/install.texi (Configuration): Document \n+\t* doc/install.texi (Configuration): Document\n \t--enable-gather-detailed-mem-stats.\n \n 2003-12-22  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -180,7 +186,7 @@\n \t* config/mn10300/mn10300.c: Likewise.\n \n 2003-12-20  Andrew Pinski  <pinskia@gcc.gnu.org>\n-            Matt Thomas  <matt@3am-software.com>\n+\t    Matt Thomas  <matt@3am-software.com>\n \n \tPR target/12749\n \t* config/i386/i386.c (print_operand): Print only the first\n@@ -280,11 +286,11 @@\n \n \t* gcc/config/i386/i386.c (ix86_expand_call, x86_output_mi_thunk):\n \tTrivial fixes for i386.c on Darwin/x86.\n-\t\n+\n 2003-12-19  Fariborz Jahanian <fjahanian@apple.com>\n \n-        * config/rs6000/rs6000.c (legitimate_lo_sum_address_p): Add code to\n-        recognize macho-style lo_sum adrress patterns.\n+\t* config/rs6000/rs6000.c (legitimate_lo_sum_address_p): Add code to\n+\trecognize macho-style lo_sum adrress patterns.\n \n 2003-12-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -394,7 +400,7 @@\n \n 2003-12-18  Ulrich Weigand  <uweigand@de.ibm.com>\n \n-\t* loop.c (move_movables): Handle combination of m->consec, \n+\t* loop.c (move_movables): Handle combination of m->consec,\n \tm->move_insn_first, and m->insert_temp all nonzero correctly.\n \n 2003-12-18  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -423,7 +429,7 @@\n \n 2003-12-17  James E Wilson  <wilson@specifixinc.com>\n \t    Roger Sayle  <roger@eyesopen.com>\n-\t\n+\n \t* Makefile.in (gcse.o): Add $(TREE_H) to dependencies.\n \t* gcse.c: Include tree.h.\n \t(implicit_set_cond_p): New.\n@@ -512,7 +518,7 @@\n \t* config/m32r/m32r.md (cmp_ne_small_const_insn): Remove.\n \n 2003-12-17  Neil Booth  <neil@daikokuya.co.uk>\n-            Joseph S. Myers  <jsm@polyomino.org.uk>\n+\t    Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/3347\n \t* c-decl.c (enum_decl_context): Remove BITFIELD.\n@@ -542,7 +548,7 @@\n \t* ginclude/stddef.h (offsetof): Reimplement for C++, using\n \t__offsetof__.\n \t* doc/extend.texi: Document __offsetof__.\n-\t\n+\n 2003-12-16  Stan Cox  <scox@redhat.com>\n \n \t* config/iq2000/iq2000.h: Formatting.\n@@ -581,7 +587,7 @@\n \n \t* altivec.h (vec_cmple, vec_all_numeric): Fix typo.\n \t* testsuite/gcc.dg/altivec-10.c: Test for above.\n-\t\n+\n 2003-12-15  David O'Brien  <obrien@FreeBSD.org>\n \n \t* Makefile.in (CPPFLAGS): Initialize from configure."}, {"sha": "67df9cb2b90a9c40a984dcaae3e592d98e171046", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4c494a15bb5e1bca533f8b1244ab0efbe43da469", "patch": "@@ -3742,8 +3742,12 @@ ia64_va_arg (tree valist, tree type)\n   /* Variable sized types are passed by reference.  */\n   if (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n     {\n-      rtx addr = std_expand_builtin_va_arg (valist, build_pointer_type (type));\n-      return gen_rtx_MEM (ptr_mode, force_reg (Pmode, addr));\n+      rtx addr = force_reg (ptr_mode,\n+\t    std_expand_builtin_va_arg (valist, build_pointer_type (type)));\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      addr = convert_memory_address (Pmode, addr);\n+#endif\n+      return gen_rtx_MEM (ptr_mode, addr);\n     }\n \n   /* Arguments with alignment larger than 8 bytes start at the next even\n@@ -7511,6 +7515,10 @@ ia64_in_small_data_p (tree exp)\n   if (TREE_CODE (exp) == STRING_CST)\n     return false;\n \n+  /* Functions are never small data.  */\n+  if (TREE_CODE (exp) == FUNCTION_DECL)\n+    return false;\n+\n   if (TREE_CODE (exp) == VAR_DECL && DECL_SECTION_NAME (exp))\n     {\n       const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (exp));"}, {"sha": "eff3a2d3946f3a3a6d56109da13564f776995864", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c494a15bb5e1bca533f8b1244ab0efbe43da469", "patch": "@@ -1,3 +1,17 @@\n+2003-12-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* lib/gcc-dg.exp (dg-prune-output): New annotation.\n+\t(additional_prunes): New global.\n+\t(gcc-dg-prune): Handle additional per-test pruning.\n+\t(dg-test): Clear additional_prunes between tests.\n+\n+\t* gcc.c-torture/compile/920625-1.c: Remove xfail.  Use\n+\tdg-prune-output to avoid spurious failures from assembler\n+\tcomplaining about nonexistent WAW violations.\n+\t* gcc.c-torture/compile/981223-1.c: Remove dg-options line.\n+\tUse dg-prune-output to avoid spurious failures from assembler\n+\twarning about Itanium B-step errata.\n+\n 2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/macro0.C: New test.\n@@ -315,7 +329,7 @@\n \t* g++.dg/template/type1.C: Likewise.\n \t* g++.old-deja/g++.other/crash32.C: Likewise.\n \t* g++.old-djea/g++.pt/defarg8.C: Likewise.\n-\t\n+\n 2003-12-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/13106"}, {"sha": "6a52b029bade3cd8ecabf1881768f4c7ba60d4fe", "filename": "gcc/testsuite/gcc.c-torture/compile/920625-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920625-1.c?ref=4c494a15bb5e1bca533f8b1244ab0efbe43da469", "patch": "@@ -11,7 +11,11 @@\n \t (p7) mov r14 = r0\n \n    that appears to be a WAW violation. */\n-/* { dg-xfail-if \"missing .pred.rel.mutex directive\" \"ia64-*-*\" { \"-O1\" \"-O2\" \"-O3\" \"-Os\" } { \"\" } } */\n+\n+/* { dg-prune-output \"Assembler messages\" } */\n+/* { dg-prune-output \"violate\\[^\\n\\]*dependency\" } */\n+/* { dg-prune-output \"first path encountering\" } */\n+/* { dg-prune-output \"location of the conflicting\" } */\n \n typedef unsigned long int unsigned_word;\n typedef signed long int signed_word;"}, {"sha": "b62894807496eae66f17a7082997c19e79b39ef5", "filename": "gcc/testsuite/gcc.c-torture/compile/981223-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F981223-1.c?ref=4c494a15bb5e1bca533f8b1244ab0efbe43da469", "patch": "@@ -1,11 +1,11 @@\n /* The problem on IA-64 is that the assembler emits\n \n    Warning: Additional NOP may be necessary to workaround Itanium\n-   processor A/B step errata\n+   processor A/B step errata  */\n+\n+/* { dg-prune-output \"Assembler messages\" } */\n+/* { dg-prune-output \"Additional NOP may be necessary\" } */\n \n-   This can be fixed by adding \"-mb-step\" to the command line, which\n-   does in fact add the extra nop. */\n-/* { dg-options \"-w -mb-step\" { target ia64-*-* } } */\n \n __complex__ float\n func (__complex__ float x)"}, {"sha": "f2ba88eec4742b6aa2cde0f1c2edcabb67373918", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c494a15bb5e1bca533f8b1244ab0efbe43da469/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=4c494a15bb5e1bca533f8b1244ab0efbe43da469", "patch": "@@ -130,8 +130,17 @@ proc gcc-dg-test { prog do_what extra_tool_flags } {\n }\n \n proc gcc-dg-prune { system text } {\n+    global additional_prunes\n+\n     set text [prune_gcc_output $text]\n \n+    foreach p $additional_prunes {\n+\tif { [string length $p] > 0 } {\n+\t    # Following regexp matches a complete line containing $p.\n+\t    regsub -all \"(^|\\n)\\[^\\n\\]*$p\\[^\\n\\]*\" $text \"\" text\n+\t}\n+    }\n+\n     # If we see \"region xxx is full\" then the testcase is too big for ram.\n     # This is tricky to deal with in a large testsuite like c-torture so\n     # deal with it here.  Just mark the testcase as unsupported.\n@@ -329,6 +338,18 @@ proc dg-require-dll { args } {\n     set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n }\n \n+# Prune any messages matching ARGS[1] (a regexp) from test output.\n+proc dg-prune-output { args } {\n+    global additional_prunes\n+\n+    if { [llength $args] != 2 } {\n+\terror \"[lindex $args 1]: need one argument\"\n+\treturn\n+    }\n+\n+    lappend additional_prunes [lindex $args 1]\n+}\n+\n # Like check_conditional_xfail, but callable from a dg test.\n \n proc dg-xfail-if { args } {\n@@ -341,11 +362,10 @@ proc dg-xfail-if { args } {\n }\n \n \n-# We need to make sure that additional_files and additional_sources\n-# are both cleared out after every test.  It is not enough to clear\n-# them out *before* the next test run because gcc-target-compile gets\n-# run directly from some .exp files (outside of any test).  (Those\n-# uses should eventually be eliminated.) \n+# We need to make sure that additional_* are cleared out after every\n+# test.  It is not enough to clear them out *before* the next test run\n+# because gcc-target-compile gets run directly from some .exp files\n+# (outside of any test).  (Those uses should eventually be eliminated.)\n \n # Because the DG framework doesn't provide a hook that is run at the\n # end of a test, we must replace dg-test with a wrapper.\n@@ -356,15 +376,19 @@ if { [info procs saved-dg-test] == [list] } {\n     proc dg-test { args } {\n \tglobal additional_files\n \tglobal additional_sources\n+\tglobal additional_prunes\n \tglobal errorInfo\n \n \tif { [ catch { eval saved-dg-test $args } errmsg ] } {\n \t    set saved_info $errorInfo\n \t    set additional_files \"\"\n \t    set additional_sources \"\"\n+\t    set additional_prunes \"\"\n \t    error $errmsg $saved_info\n \t}\n \tset additional_files \"\"\n \tset additional_sources \"\"\n+\tset additional_prunes \"\"\n     }\n }\n+set additional_prunes \"\""}]}