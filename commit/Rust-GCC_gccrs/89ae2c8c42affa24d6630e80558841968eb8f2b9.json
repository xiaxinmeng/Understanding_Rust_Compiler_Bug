{"sha": "89ae2c8c42affa24d6630e80558841968eb8f2b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhZTJjOGM0MmFmZmEyNGQ2NjMwZTgwNTU4ODQxOTY4ZWI4ZjJiOQ==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1999-01-25T16:09:05Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-01-25T16:09:05Z"}, "message": "tree.c (equal_functions): New function.\n\n\t* tree.c (equal_functions): New function.\n\t(ovl_member): Call it.\n\nFrom-SVN: r24861", "tree": {"sha": "21d2b9184eaecb07b2e8cdcc438b4d67ca34436c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21d2b9184eaecb07b2e8cdcc438b4d67ca34436c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ae2c8c42affa24d6630e80558841968eb8f2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ae2c8c42affa24d6630e80558841968eb8f2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ae2c8c42affa24d6630e80558841968eb8f2b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ae2c8c42affa24d6630e80558841968eb8f2b9/comments", "author": null, "committer": null, "parents": [{"sha": "bdf32ae50a0edc78c711a5ae923de3bae6ca988c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf32ae50a0edc78c711a5ae923de3bae6ca988c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf32ae50a0edc78c711a5ae923de3bae6ca988c"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "95e476714890de05f2616d8efe052e8664b253c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ae2c8c42affa24d6630e80558841968eb8f2b9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ae2c8c42affa24d6630e80558841968eb8f2b9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=89ae2c8c42affa24d6630e80558841968eb8f2b9", "patch": "@@ -1,3 +1,8 @@\n+1999-01-25  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* tree.c (equal_functions): New function.\n+\t(ovl_member): Call it.\n+\n 1999-01-24  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cvt.c (cp_convert_to_pointer): Fix conversion of 0 to pmf."}, {"sha": "d318d1be988a23c9fd34b4cb9ec5c0e49c1e2e1d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ae2c8c42affa24d6630e80558841968eb8f2b9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ae2c8c42affa24d6630e80558841968eb8f2b9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=89ae2c8c42affa24d6630e80558841968eb8f2b9", "patch": "@@ -41,6 +41,7 @@ static tree list_hash_lookup PROTO((int, int, int, int, tree, tree,\n static void propagate_binfo_offsets PROTO((tree, tree));\n static int avoid_overlap PROTO((tree, tree));\n static int lvalue_p_1 PROTO((tree, int));\n+static int equal_function PROTO((tree, tree));\n \n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n \n@@ -1395,6 +1396,20 @@ build_overload (decl, chain)\n   return ovl_cons (decl, chain);\n }\n \n+/* Returns true iff functions are equivalent. Equivalent functions are\n+   not identical only if one is a function-local extern function.\n+   This assumes that function-locals don't have TREE_PERMANENT.  */\n+\n+static int\n+equal_functions (fn1, fn2)\n+     tree fn1;\n+     tree fn2;\n+{\n+  if (!TREE_PERMANENT (fn1) || !TREE_PERMANENT (fn2))\n+    return decls_match (fn1, fn2);\n+  return fn1 == fn2;\n+}\n+\n /* True if fn is in ovl. */\n \n int\n@@ -1405,9 +1420,9 @@ ovl_member (fn, ovl)\n   if (ovl == NULL_TREE)\n     return 0;\n   if (TREE_CODE (ovl) != OVERLOAD)\n-    return decls_match (ovl, fn);\n+    return equal_functions (ovl, fn);\n   for (; ovl; ovl = OVL_CHAIN (ovl))\n-    if (decls_match (OVL_FUNCTION (ovl), fn))\n+    if (equal_functions (OVL_FUNCTION (ovl), fn))\n       return 1;\n   return 0;\n }"}]}