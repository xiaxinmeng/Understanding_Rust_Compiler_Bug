{"sha": "0ba846c771eba2229f64fc22b3bf86ceb70e4557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhODQ2Yzc3MWViYTIyMjlmNjRmYzIyYjNiZjg2Y2ViNzBlNDU1Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-27T03:28:28Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-27T03:28:28Z"}, "message": "(eliminate_regs_in_insn): If recognition fails on modified insn,\n\ngo ahead and modify just the same.\n\nFrom-SVN: r2258", "tree": {"sha": "04ad294e6a5342b8564bd37c4afae06a405777ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04ad294e6a5342b8564bd37c4afae06a405777ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ba846c771eba2229f64fc22b3bf86ceb70e4557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba846c771eba2229f64fc22b3bf86ceb70e4557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba846c771eba2229f64fc22b3bf86ceb70e4557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba846c771eba2229f64fc22b3bf86ceb70e4557/comments", "author": null, "committer": null, "parents": [{"sha": "4a5d0fb5959a5dd39e1fcf765de5912dfb2febd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5d0fb5959a5dd39e1fcf765de5912dfb2febd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5d0fb5959a5dd39e1fcf765de5912dfb2febd8"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "2d6b43bce2356e0adc70abbc85d93464e241d9b7", "filename": "gcc/reload1.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba846c771eba2229f64fc22b3bf86ceb70e4557/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba846c771eba2229f64fc22b3bf86ceb70e4557/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=0ba846c771eba2229f64fc22b3bf86ceb70e4557", "patch": "@@ -2988,20 +2988,22 @@ eliminate_regs_in_insn (insn, replace)\n   if (new_body != old_body)\n     {\n       /* If we had a move insn but now we don't, rerecognize it.  */\n-      if (GET_CODE (old_body) == SET && GET_CODE (SET_SRC (old_body)) == REG\n-\t  && (GET_CODE (new_body) != SET\n-\t      || GET_CODE (SET_SRC (new_body)) != REG))\n+      if ((GET_CODE (old_body) == SET && GET_CODE (SET_SRC (old_body)) == REG\n+\t   && (GET_CODE (new_body) != SET\n+\t       || GET_CODE (SET_SRC (new_body)) != REG))\n+\t  /* If this was an add insn before, rerecognize.  */\n+\t  ||\n+\t  (GET_CODE (old_body) == SET\n+\t   && GET_CODE (SET_SRC (old_body)) == PLUS))\n \t{\n \t  if (! validate_change (insn, &PATTERN (insn), new_body, 0))\n-\t    abort ();\n+\t    /* If recognition fails, store the new body anyway.\n+\t       It's normal to have recognition failures here\n+\t       due to bizarre memory addresses; reloading will fix them.  */\n+\t    PATTERN (insn) = new_body;\n \t}\n-      /* If this was not a move insn, rerecognize.  */\n-      else if (GET_CODE (old_body) != SET\n-\t       || GET_CODE (SET_SRC (old_body)) != PLUS\n-\t       || ! validate_change (insn, &PATTERN (insn), new_body, 0))\n+      else\n \tPATTERN (insn) = new_body;\n-      /* ??? Is it really correct to store the new body anyway\n-\t if validate_change fails?  Shouldn't this abort instead?  */\n \n       if (replace && REG_NOTES (insn))\n \tREG_NOTES (insn) = eliminate_regs (REG_NOTES (insn), 0, NULL_RTX);"}]}