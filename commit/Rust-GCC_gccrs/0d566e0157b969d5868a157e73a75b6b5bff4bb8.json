{"sha": "0d566e0157b969d5868a157e73a75b6b5bff4bb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1NjZlMDE1N2I5NjlkNTg2OGExNTdlNzNhNzViNmI1YmZmNGJiOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-09-05T13:08:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:08:30Z"}, "message": "exp_ch6.adb (Build_In_Place_Formal): If extra formals are not present, create them now.\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Build_In_Place_Formal): If extra formals are not\n\tpresent, create them now.  Needed in case the return type was\n\ta limited view in the function declaration.\n\t(Make_Build_In_Place_Call_In_Allocator): If return type contains\n\ttasks, build the activation chain for it.  Pass a reference to\n\tthe Master_Id in call to Add_Task_Actuals_To_Build_In_Place call.\n\t* exp_ch7.adb (Make_Set_Finalize_Address_Call): Clean up interface\n\twith build_in_place calls.\n\t* sem_ch9.adb (Analyze_Task_Type_Declaration): If partial view was\n\tincomplete, inatialize its Corresponding_Record_Type component.\n\t* sem_ch10.adb (Build_Chain): Initialize Private_Dependents field\n\tof limited views.\n\nFrom-SVN: r178534", "tree": {"sha": "da288dd70e8db01659983fdc6fd89301625d5d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da288dd70e8db01659983fdc6fd89301625d5d58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d566e0157b969d5868a157e73a75b6b5bff4bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d566e0157b969d5868a157e73a75b6b5bff4bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d566e0157b969d5868a157e73a75b6b5bff4bb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d566e0157b969d5868a157e73a75b6b5bff4bb8/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb19dec9b4b50a8f39a48195347d5d60dc687c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb19dec9b4b50a8f39a48195347d5d60dc687c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb19dec9b4b50a8f39a48195347d5d60dc687c3b"}], "stats": {"total": 114, "additions": 104, "deletions": 10}, "files": [{"sha": "f7e2e850b7681cfb7196e5b801396f9b6b00ac92", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0d566e0157b969d5868a157e73a75b6b5bff4bb8", "patch": "@@ -1,3 +1,18 @@\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Build_In_Place_Formal): If extra formals are not\n+\tpresent, create them now.  Needed in case the return type was\n+\ta limited view in the function declaration.\n+\t(Make_Build_In_Place_Call_In_Allocator): If return type contains\n+\ttasks, build the activation chain for it.  Pass a reference to\n+\tthe Master_Id in call to Add_Task_Actuals_To_Build_In_Place call.\n+\t* exp_ch7.adb (Make_Set_Finalize_Address_Call): Clean up interface\n+\twith build_in_place calls.\n+\t* sem_ch9.adb (Analyze_Task_Type_Declaration): If partial view was\n+\tincomplete, inatialize its Corresponding_Record_Type component.\n+\t* sem_ch10.adb (Build_Chain): Initialize Private_Dependents field\n+\tof limited views.\n+\n 2011-09-05  Johannes Kanig  <kanig@adacore.com>\n \n \t* lib-xref-alfa.adb (Is_Alfa_Reference): Filter constants from effect"}, {"sha": "a9a2c42c9d8f467f3c1d992fa595f34233911314", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=0d566e0157b969d5868a157e73a75b6b5bff4bb8", "patch": "@@ -562,6 +562,16 @@ package body Exp_Ch6 is\n       --  Maybe it would be better for each implicit formal of a build-in-place\n       --  function to have a flag or a Uint attribute to identify it. ???\n \n+      --  The return type in the function declaration may have been a limited\n+      --  view, and the extra formals for the function were not generated at\n+      --  that point.  At the point of call the full view must be available and\n+      --  the extra formals can be created.\n+\n+      if No (Extra_Formal) then\n+         Create_Extra_Formals (Func);\n+         Extra_Formal := Extra_Formals (Func);\n+      end if;\n+\n       loop\n          pragma Assert (Present (Extra_Formal));\n          exit when\n@@ -7127,6 +7137,13 @@ package body Exp_Ch6 is\n \n       Result_Subt := Etype (Function_Id);\n \n+      --  Check whether return type includes tasks. This may not have been done\n+      --  previously, if the type was a limited view.\n+\n+      if Has_Task (Result_Subt) then\n+         Build_Activation_Chain_Entity (Allocator);\n+      end if;\n+\n       --  When the result subtype is constrained, the return object must be\n       --  allocated on the caller side, and access to it is passed to the\n       --  function.\n@@ -7219,8 +7236,17 @@ package body Exp_Ch6 is\n          Add_Finalization_Master_Actual_To_Build_In_Place_Call\n            (Func_Call, Function_Id, Acc_Type);\n \n-         Add_Task_Actuals_To_Build_In_Place_Call\n-           (Func_Call, Function_Id, Master_Actual => Master_Id (Acc_Type));\n+         --  Is access type has a master entity, pass a reference to it.\n+\n+         if Present (Master_Id (Acc_Type)) then\n+            Add_Task_Actuals_To_Build_In_Place_Call\n+              (Func_Call, Function_Id,\n+               Master_Actual =>\n+                 New_Occurrence_Of (Master_Id (Acc_Type), Loc));\n+         else\n+            Add_Task_Actuals_To_Build_In_Place_Call\n+              (Func_Call, Function_Id, Empty);\n+         end if;\n \n          --  The caller does not provide the return object in this case, so we\n          --  have to pass null for the object access actual."}, {"sha": "59d2cb18dc96ab0951d662e2d973f101bf1d588f", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=0d566e0157b969d5868a157e73a75b6b5bff4bb8", "patch": "@@ -3890,6 +3890,14 @@ package body Exp_Ch7 is\n          No_Body := True;\n       end if;\n \n+      --  For a nested instance, delay processing until freeze point.\n+\n+      if Has_Delayed_Freeze (Id)\n+       and then Nkind (Parent (N)) /= N_Compilation_Unit\n+      then\n+         return;\n+      end if;\n+\n       --  For a package declaration that implies no associated body, generate\n       --  task activation call and RACW supporting bodies now (since we won't\n       --  have a specific separate compilation unit for that).\n@@ -7450,9 +7458,12 @@ package body Exp_Ch7 is\n       Typ     : Entity_Id;\n       Ptr_Typ : Entity_Id) return Node_Id\n    is\n-      Desig_Typ : constant Entity_Id :=\n-                    Available_View (Designated_Type (Ptr_Typ));\n-      Utyp      : Entity_Id;\n+      Desig_Typ   : constant Entity_Id :=\n+                      Available_View (Designated_Type (Ptr_Typ));\n+      Fin_Mas_Id  : constant Entity_Id := Finalization_Master (Ptr_Typ);\n+      Call        : Node_Id;\n+      Fin_Mas_Ref : Node_Id;\n+      Utyp        : Entity_Id;\n \n    begin\n       --  If the context is a class-wide allocator, we use the class-wide type\n@@ -7503,19 +7514,47 @@ package body Exp_Ch7 is\n          Utyp := Base_Type (Utyp);\n       end if;\n \n+      Fin_Mas_Ref := New_Occurrence_Of (Fin_Mas_Id, Loc);\n+\n+      --  If the call is from a build-in-place function, the Master parameter\n+      --  is actually a pointer. Dereference it for the call.\n+\n+      if Is_Access_Type (Etype (Fin_Mas_Id)) then\n+         Fin_Mas_Ref := Make_Explicit_Dereference (Loc, Fin_Mas_Ref);\n+      end if;\n+\n       --  Generate:\n       --    Set_Finalize_Address (<Ptr_Typ>FM, <Utyp>FD'Unrestricted_Access);\n \n-      return\n+      Call :=\n         Make_Procedure_Call_Statement (Loc,\n           Name                   =>\n             New_Reference_To (RTE (RE_Set_Finalize_Address), Loc),\n           Parameter_Associations => New_List (\n-            New_Reference_To (Finalization_Master (Ptr_Typ), Loc),\n+            Fin_Mas_Ref,\n             Make_Attribute_Reference (Loc,\n               Prefix         =>\n                 New_Reference_To (TSS (Utyp, TSS_Finalize_Address), Loc),\n               Attribute_Name => Name_Unrestricted_Access)));\n+\n+      --  In the case of build-in-place functions, protect the call to ensure\n+      --  we have a master at runtime. Generate:\n+\n+      --    if <Ptr_Typ>FM /= null then\n+      --       <Call>;\n+      --    end if;\n+\n+      if Is_Access_Type (Etype (Fin_Mas_Id)) then\n+         Call :=\n+           Make_If_Statement (Loc,\n+             Condition       =>\n+               Make_Op_Ne (Loc,\n+                 Left_Opnd  => New_Reference_To (Fin_Mas_Id, Loc),\n+                 Right_Opnd => Make_Null (Loc)),\n+             Then_Statements => New_List (Call));\n+      end if;\n+\n+      return Call;\n    end Make_Set_Finalize_Address_Call;\n \n    --------------------------"}, {"sha": "33d8dda47e045a0dc14b0fd3dfa18bce1347b85f", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=0d566e0157b969d5868a157e73a75b6b5bff4bb8", "patch": "@@ -5393,6 +5393,7 @@ package body Sem_Ch10 is\n                end if;\n \n                Set_Non_Limited_View (Lim_Typ, Comp_Typ);\n+               Set_Private_Dependents (Lim_Typ, New_Elmt_List);\n \n             elsif Nkind_In (Decl, N_Private_Type_Declaration,\n                                   N_Incomplete_Type_Declaration,\n@@ -5432,6 +5433,11 @@ package body Sem_Ch10 is\n \n                Set_Non_Limited_View (Lim_Typ, Comp_Typ);\n \n+               --  Initialize Private_Depedents, so the field has the proper\n+               --  type, even though the list will remain empty.\n+\n+               Set_Private_Dependents (Lim_Typ, New_Elmt_List);\n+\n             elsif Nkind (Decl) = N_Private_Extension_Declaration then\n                Comp_Typ := Defining_Identifier (Decl);\n "}, {"sha": "5fbb0ecb97edf5e3611a7310a4decf7edcabe02a", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d566e0157b969d5868a157e73a75b6b5bff4bb8/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=0d566e0157b969d5868a157e73a75b6b5bff4bb8", "patch": "@@ -2001,10 +2001,18 @@ package body Sem_Ch9 is\n \n       --  In the case of an incomplete type, use the full view, unless it's not\n       --  present (as can occur for an incomplete view from a limited with).\n+      --  Initialize the Corresponding_Record_Type (which overlays the Private\n+      --  Dependents field of the incomplete view).\n \n-      if Ekind (T) = E_Incomplete_Type and then Present (Full_View (T)) then\n-         T := Full_View (T);\n-         Set_Completion_Referenced (T);\n+      if Ekind (T) = E_Incomplete_Type then\n+         if Present (Full_View (T)) then\n+            T := Full_View (T);\n+            Set_Completion_Referenced (T);\n+\n+         else\n+            Set_Ekind (T, E_Task_Type);\n+            Set_Corresponding_Record_Type (T, Empty);\n+         end if;\n       end if;\n \n       Set_Ekind              (T, E_Task_Type);"}]}