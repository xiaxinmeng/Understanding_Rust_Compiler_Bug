{"sha": "20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlOGNkZDc5NWU2ZDQyNmZmNGI3NzUwZDZmYmU5ZjJmODY2ZmQzOA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2007-12-19T16:25:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-19T16:25:18Z"}, "message": "re PR ada/34149 (GNAT crash - deeply inrerited function)\n\n2007-12-19  Gary Dismukes  <dismukes@adacore.com>\n\n\tPR ada/34149\n\t* sem_disp.adb (Check_Dispatching_Call): Augment existing test for\n\tpresence of a statically tagged operand (Present (Static_Tag)) with\n\ttest for Indeterm_Ancestor_Call when determining whether to propagate\n\tthe static tag to tag-indeterminate operands (which forces dispatching\n\ton such calls).\n\t(Check_Controlling_Formals): Ada2005, access parameters can have\n\tdefaults.\n\t(Add_Dispatching_Operation, Check_Operation_From_Private_View): do\n\tnot insert subprogram in list of primitive operations if already there.\n\nFrom-SVN: r131082", "tree": {"sha": "a4d387637bb01780bed1fc941cc8d38ce89a75f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4d387637bb01780bed1fc941cc8d38ce89a75f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90067a1585088aa84dde8cc7f796d567231af202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90067a1585088aa84dde8cc7f796d567231af202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90067a1585088aa84dde8cc7f796d567231af202"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "0f3f57becab874c8d05661117733f15e891a3ca2", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=20e8cdd795e6d426ff4b7750d6fbe9f2f866fd38", "patch": "@@ -79,8 +79,14 @@ package body Sem_Disp is\n       New_Op      : Entity_Id)\n    is\n       List : constant Elist_Id := Primitive_Operations (Tagged_Type);\n+\n    begin\n-      Append_Elmt (New_Op, List);\n+      --  The dispatching operation may already be on the list, if it the\n+      --  wrapper for an inherited function of a null extension (see exp_ch3\n+      --  for the construction of function wrappers). The list of primitive\n+      --  operations must not contain duplicates.\n+\n+      Append_Unique_Elmt (New_Op, List);\n    end Add_Dispatching_Operation;\n \n    -------------------------------\n@@ -143,7 +149,12 @@ package body Sem_Disp is\n                end if;\n \n                if Present (Default_Value (Formal)) then\n-                  if Ekind (Etype (Formal)) = E_Anonymous_Access_Type then\n+\n+                  --  In Ada 2005, access parameters can have defaults\n+\n+                  if Ekind (Etype (Formal)) = E_Anonymous_Access_Type\n+                    and then Ada_Version < Ada_05\n+                  then\n                      Error_Msg_N\n                        (\"default not allowed for controlling access parameter\",\n                         Default_Value (Formal));\n@@ -471,10 +482,12 @@ package body Sem_Disp is\n             Set_Controlling_Argument (N, Control);\n             Check_Restriction (No_Dispatching_Calls, N);\n \n-         --  If there is a statically tagged actual, check whether\n-         --  some tag-indeterminate actual can use it.\n+         --  If there is a statically tagged actual and a tag-indeterminate\n+         --  call to a function of the ancestor (such as that provided by a\n+         --  default), then treat this as a dispatching call and propagate\n+         --  the tag to the tag-indeterminate call(s).\n \n-         elsif Present (Static_Tag) then\n+         elsif Present (Static_Tag) and then Indeterm_Ancestor_Call then\n             Control :=\n               Make_Attribute_Reference (Loc,\n                 Prefix         =>\n@@ -1091,8 +1104,10 @@ package body Sem_Disp is\n          Set_Scope (Subp, Current_Scope);\n          Tagged_Type := Find_Dispatching_Type (Subp);\n \n+         --  Add Old_Subp to primitive operations if not already present.\n+\n          if Present (Tagged_Type) and then Is_Tagged_Type (Tagged_Type) then\n-            Append_Elmt (Old_Subp, Primitive_Operations (Tagged_Type));\n+            Append_Unique_Elmt (Old_Subp, Primitive_Operations (Tagged_Type));\n \n             --  If Old_Subp isn't already marked as dispatching then\n             --  this is the case of an operation of an untagged private"}]}