{"sha": "fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1OGM0OWVkOTJkNDk5ZTdkMWQxMWVjYWM4ZjE3YTM0NjFiMjBhOQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-15T12:27:04Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-16T09:54:05Z"}, "message": "testsuite: aarch64: Fix failing SVE tests on big endian\n\nA recent change \"gcc: Add vec_select -> subreg RTL simplification\"\nupdated the expected test results for SVE extraction tests. The new\nresult should only have been changed for little endian. This patch\nrestores the old expected result for big endian.\n\ngcc/testsuite/ChangeLog:\n\n2021-07-15  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/sve/extract_1.c: Split expected results\n\tby big/little endian targets, restoring the old expected\n\tresult for big endian.\n\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_4.c: Likewise.", "tree": {"sha": "bc8fdcddc293a421662ac3453bdf252d77c7753f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8fdcddc293a421662ac3453bdf252d77c7753f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f11ca2a3a3bea38a7c5bd63e777620a4887e649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f11ca2a3a3bea38a7c5bd63e777620a4887e649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f11ca2a3a3bea38a7c5bd63e777620a4887e649"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "7d76c98e92545817f6544d1b131cdbbd800c46ab", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_1.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c?ref=fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "patch": "@@ -56,15 +56,21 @@ typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 2 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "a2644ceae68235175ff787d1d9cbece83985dc5f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c?ref=fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "patch": "@@ -56,15 +56,21 @@ typedef _Float16 vnx16hf __attribute__((vector_size (64)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 2 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 2 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "baa54594c482253b1e0aae2b62a342edea0369e9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_3.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c?ref=fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "patch": "@@ -77,7 +77,10 @@ typedef _Float16 vnx32hf __attribute__((vector_size (128)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 5 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n@@ -86,7 +89,10 @@ TEST_ALL (EXTRACT)\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 5 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}, {"sha": "aa6fe482dbfdc3b2fa54473523cc0efd467a64de", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_4.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc58c49ed92d499e7d1d11ecac8f17a3461b20a9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c?ref=fc58c49ed92d499e7d1d11ecac8f17a3461b20a9", "patch": "@@ -84,7 +84,10 @@ typedef _Float16 v128hf __attribute__((vector_size (256)));\n \n TEST_ALL (EXTRACT)\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, d[0-9]\\n} 6 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n /* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n@@ -93,7 +96,10 @@ TEST_ALL (EXTRACT)\n /* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmov\\tw[0-9]+, s[0-9]\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tx[0-9]+, s[0-9]\\n} 6 {\n+\t\ttarget { aarch64_little_endian } } } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 {\n+\t\ttarget { aarch64_big_endian } } } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n /* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */"}]}