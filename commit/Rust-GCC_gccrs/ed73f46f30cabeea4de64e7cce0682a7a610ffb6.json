{"sha": "ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3M2Y0NmYzMGNhYmVlYTRkZTY0ZTdjY2UwNjgyYTdhNjEwZmZiNg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-06-21T11:16:27Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-06-21T11:16:27Z"}, "message": "NOP conversions in X+CST+CST\n\n2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd (nop_convert): New predicate.\n\t((A +- CST1) +- CST2): Allow some NOP conversions.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/addadd.c: Un-XFAIL.\n\t* gcc.dg/tree-ssa/addadd-2.c: New file.\n\nFrom-SVN: r249447", "tree": {"sha": "d7d3b962f704495dcb135053bb1c5c4b75a8b6c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7d3b962f704495dcb135053bb1c5c4b75a8b6c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d522731379693a5107328079b804ecd2fbd4766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d522731379693a5107328079b804ecd2fbd4766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d522731379693a5107328079b804ecd2fbd4766"}], "stats": {"total": 89, "additions": 77, "deletions": 12}, "files": [{"sha": "65ff2356f3bcb24ccb3cb4b62c634ca92453f273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "patch": "@@ -1,3 +1,8 @@\n+2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (nop_convert): New predicate.\n+\t((A +- CST1) +- CST2): Allow some NOP conversions.\n+\n 2017-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/81130"}, {"sha": "7bd26763826b1d5d59cd0093e7898ff0bc66b502", "filename": "gcc/match.pd", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "patch": "@@ -74,6 +74,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (FLOOR)\n DEFINE_INT_AND_FLOAT_ROUND_FN (CEIL)\n DEFINE_INT_AND_FLOAT_ROUND_FN (ROUND)\n DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n+    \n+/* As opposed to convert?, this still creates a single pattern, so\n+   it is not a suitable replacement for convert? in all cases.  */\n+(match (nop_convert @0)\n+ (convert @0)\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))))\n+(match (nop_convert @0)\n+ (view_convert @0)\n+ (if (VECTOR_TYPE_P (type) && VECTOR_TYPE_P (TREE_TYPE (@0))\n+      && TYPE_VECTOR_SUBPARTS (type) == TYPE_VECTOR_SUBPARTS (TREE_TYPE (@0))\n+      && tree_nop_conversion_p (TREE_TYPE (type), TREE_TYPE (TREE_TYPE (@0))))))\n+/* This one has to be last, or it shadows the others.  */\n+(match (nop_convert @0)\n+ @0) \n \n /* Simplifications of operations with one constant operand and\n    simplifications to constants or single values.  */\n@@ -1296,18 +1310,44 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (minus @0 (minus @0 @1))\n    @1)\n \n-  /* (A +- CST1) +- CST2 -> A + CST3  */\n+  /* (A +- CST1) +- CST2 -> A + CST3\n+     Use view_convert because it is safe for vectors and equivalent for\n+     scalars.  */\n   (for outer_op (plus minus)\n    (for inner_op (plus minus)\n+\tneg_inner_op (minus plus)\n     (simplify\n-     (outer_op (inner_op @0 CONSTANT_CLASS_P@1) CONSTANT_CLASS_P@2)\n-     /* If the constant operation overflows we cannot do the transform\n-\tas we would introduce undefined overflow, for example\n-\twith (a - 1) + INT_MIN.  */\n-     (with { tree cst = const_binop (outer_op == inner_op\n-\t\t\t\t     ? PLUS_EXPR : MINUS_EXPR, type, @1, @2); }\n-      (if (cst && !TREE_OVERFLOW (cst))\n-       (inner_op @0 { cst; } ))))))\n+     (outer_op (nop_convert (inner_op @0 CONSTANT_CLASS_P@1))\n+\t       CONSTANT_CLASS_P@2)\n+     /* If one of the types wraps, use that one.  */\n+     (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n+      (if (outer_op == PLUS_EXPR)\n+       (plus (view_convert @0) (inner_op @2 (view_convert @1)))\n+       (minus (view_convert @0) (neg_inner_op @2 (view_convert @1))))\n+      (if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t   || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n+       (if (outer_op == PLUS_EXPR)\n+\t(view_convert (plus @0 (inner_op (view_convert @2) @1)))\n+\t(view_convert (minus @0 (neg_inner_op (view_convert @2) @1))))\n+       /* If the constant operation overflows we cannot do the transform\n+\t  directly as we would introduce undefined overflow, for example\n+\t  with (a - 1) + INT_MIN.  */\n+       (if (types_match (type, @0))\n+\t(with { tree cst = const_binop (outer_op == inner_op\n+\t\t\t\t\t? PLUS_EXPR : MINUS_EXPR,\n+\t\t\t\t\ttype, @1, @2); }\n+\t (if (cst && !TREE_OVERFLOW (cst))\n+\t  (inner_op @0 { cst; } )\n+\t  /* X+INT_MAX+1 is X-INT_MIN.  */\n+\t  (if (INTEGRAL_TYPE_P (type) && cst\n+\t       && wi::eq_p (cst, wi::min_value (type)))\n+\t   (neg_inner_op @0 { wide_int_to_tree (type, cst); })\n+\t   /* Last resort, use some unsigned type.  */\n+\t   (with { tree utype = unsigned_type_for (type); }\n+\t    (view_convert (inner_op\n+\t\t\t   (view_convert:utype @0)\n+\t\t\t   (view_convert:utype\n+\t\t\t    { drop_tree_overflow (cst); })))))))))))))\n \n   /* (CST1 - A) +- CST2 -> CST3 - A  */\n   (for outer_op (plus minus)"}, {"sha": "ccfd2746b876d5df7a0233e6eb4be8ce4d011af6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "patch": "@@ -1,3 +1,8 @@\n+2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/addadd.c: Un-XFAIL.\n+\t* gcc.dg/tree-ssa/addadd-2.c: New file.\n+\n 2017-06-21  Tom de Vries  <tom@codesourcery.com>\n \n \t* lib/target-supports.exp (add_options_for_stack_size): New proc."}, {"sha": "39aa032c9b186bea18d72df217642e67c0ecebe9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/addadd-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd-2.c?ref=ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef int S __attribute__((vector_size(64)));\n+typedef unsigned U __attribute__((vector_size(64)));\n+void j(S*x){\n+  *x += __INT_MAX__;\n+  *x += __INT_MAX__;\n+}\n+void k(S*x){\n+  U y = (U)(*x + __INT_MAX__);\n+  *x = (S)(y + __INT_MAX__);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"2147483647\" \"optimized\" } } */"}, {"sha": "16474db65658a5e3e88b141b24f991c80936a9e9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/addadd.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed73f46f30cabeea4de64e7cce0682a7a610ffb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c?ref=ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "patch": "@@ -29,6 +29,6 @@ void j(S*x){\n   *x += __INT_MAX__;\n }\n \n-/* { dg-final { scan-tree-dump-times \" \\\\+ 24;\" 2 \"optimized\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" { xfail *-*-* }  } } */\n-/* { dg-final { scan-tree-dump-not \"2147483647\" \"optimized\" { xfail *-*-* }  } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\+ 24;\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"2147483647\" \"optimized\" } } */"}]}