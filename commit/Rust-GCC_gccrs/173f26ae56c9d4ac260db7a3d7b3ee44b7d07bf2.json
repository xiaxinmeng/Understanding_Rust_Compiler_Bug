{"sha": "173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczZjI2YWU1NmM5ZDRhYzI2MGRiN2EzZDdiM2VlNDRiN2QwN2JmMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-19T17:20:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-19T17:20:22Z"}, "message": "tuple (tuple<>::operator=(tuple&&)): Specify as noexcept.\n\n2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple (tuple<>::operator=(tuple&&)): Specify as\n        noexcept.\n\t(__get_helper): Likewise.\n\t(_Head_base<>::_M_head, _Tuple_impl<>::_M_head, _M_tail): Likewise.\n\t* include/bits/move.h (swap): Likewise.\n\t* include/bits/algorithmfwd.h (swap): Adjust.\n\t* include/bits/stl_pair.h (pair<>::operator=(pair&&)): Spec noexcept.\n\t* testsuite/util/testsuite_allocator.h (uneq_allocator): In C++0x\n\tmode, prefer delete to access control to make the type not copy\n\tassignable.\n\t* testsuite/util/testsuite_tr1.h: Add test classes.\n\t* testsuite/20_util/tuple/noexcept_swap.cc: New.\n\t* testsuite/20_util/tuple/noexcept_move_assign.cc: Likewise.\n\t* testsuite/25_algorithms/reverse/moveable.cc: Likewise, prefer\n\tdelete to access control.\n\t* testsuite/25_algorithms/swap_ranges/moveable.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-warning\n\tline numbers.\n\nFrom-SVN: r173917", "tree": {"sha": "c54b3620070b6805a4331466f54424e6a1550eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c54b3620070b6805a4331466f54424e6a1550eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/comments", "author": null, "committer": null, "parents": [{"sha": "12d844c83053a523f291565a757220fee255995c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d844c83053a523f291565a757220fee255995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d844c83053a523f291565a757220fee255995c"}], "stats": {"total": 310, "additions": 282, "deletions": 28}, "files": [{"sha": "6275373d9f5c8f23646577227b75ee1687ce00a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -1,3 +1,24 @@\n+2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple (tuple<>::operator=(tuple&&)): Specify as\n+        noexcept.\n+\t(__get_helper): Likewise.\n+\t(_Head_base<>::_M_head, _Tuple_impl<>::_M_head, _M_tail): Likewise.\n+\t* include/bits/move.h (swap): Likewise.\n+\t* include/bits/algorithmfwd.h (swap): Adjust.\n+\t* include/bits/stl_pair.h (pair<>::operator=(pair&&)): Spec noexcept.\n+\t* testsuite/util/testsuite_allocator.h (uneq_allocator): In C++0x\n+\tmode, prefer delete to access control to make the type not copy\n+\tassignable.\n+\t* testsuite/util/testsuite_tr1.h: Add test classes.\n+\t* testsuite/20_util/tuple/noexcept_swap.cc: New.\n+\t* testsuite/20_util/tuple/noexcept_move_assign.cc: Likewise.\n+\t* testsuite/25_algorithms/reverse/moveable.cc: Likewise, prefer\n+\tdelete to access control.\n+\t* testsuite/25_algorithms/swap_ranges/moveable.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-warning\n+\tline numbers.\n+\n 2011-05-19  Daniel Krugler  <daniel.kruegler@googlemail.com>\n \n \t* testsuite/util/testsuite_tr1.h: Add test classes."}, {"sha": "fe3b68f6a25c7dac6732f2083b4e4967e508e285", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -549,7 +549,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp> \n     void \n-    swap(_Tp&, _Tp&);\n+    swap(_Tp&, _Tp&)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    noexcept(is_nothrow_move_constructible<_Tp>::value\n+\t     && is_nothrow_move_assignable<_Tp>::value)\n+#endif\n+    ;\n \n   template<typename _Tp, size_t _Nm>\n     void"}, {"sha": "963dd4c655d4069a392597c92e02611e1dcd74eb", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -135,7 +135,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     inline void\n     swap(_Tp& __a, _Tp& __b)\n-    // noexcept has to wait is_nothrow_move_assignable\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    noexcept(is_nothrow_move_constructible<_Tp>::value\n+\t     && is_nothrow_move_assignable<_Tp>::value)\n+#endif\n     {\n       // concept requirements\n       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)"}, {"sha": "e2fc16deae5b19bbaedd46c334428735db67da10", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -153,7 +153,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       pair&\n       operator=(pair&& __p)\n-      // noexcept has to wait is_nothrow_move_assignable\n+      noexcept(is_nothrow_move_assignable<_T1>::value\n+\t       && is_nothrow_move_assignable<_T2>::value)\n       {\n \tfirst = std::move(__p.first);\n \tsecond = std::move(__p.second);"}, {"sha": "682e3c92a4721dbd89d28a49d423eaabcda9f6f0", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -85,8 +85,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _Head_base(_UHead&& __h)\n \t: _Head(std::forward<_UHead>(__h)) { }\n \n-      _Head&       _M_head()       { return *this; }\n-      const _Head& _M_head() const { return *this; }\n+      _Head&       _M_head() noexcept       { return *this; }\n+      const _Head& _M_head() const noexcept { return *this; }\n     };\n \n   template<std::size_t _Idx, typename _Head>\n@@ -102,8 +102,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _Head_base(_UHead&& __h)\n \t: _M_head_impl(std::forward<_UHead>(__h)) { }\n \n-      _Head&       _M_head()       { return _M_head_impl; }\n-      const _Head& _M_head() const { return _M_head_impl; }        \n+      _Head&       _M_head() noexcept       { return _M_head_impl; }\n+      const _Head& _M_head() const noexcept { return _M_head_impl; }        \n \n       _Head _M_head_impl; \n     };\n@@ -147,11 +147,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;\n       typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;\n \n-      _Head&            _M_head()       { return _Base::_M_head(); }\n-      const _Head&      _M_head() const { return _Base::_M_head(); }\n+      _Head&            _M_head() noexcept       { return _Base::_M_head(); }\n+      const _Head&      _M_head() const noexcept { return _Base::_M_head(); }\n \n-      _Inherited&       _M_tail()       { return *this; }\n-      const _Inherited& _M_tail() const { return *this; }\n+      _Inherited&       _M_tail() noexcept       { return *this; }\n+      const _Inherited& _M_tail() const noexcept { return *this; }\n \n       constexpr _Tuple_impl()\n       : _Inherited(), _Base() { }\n@@ -191,6 +191,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Tuple_impl&\n       operator=(_Tuple_impl&& __in)\n+      noexcept(is_nothrow_move_assignable<_Head>::value\n+\t       && is_nothrow_move_assignable<_Inherited>::value)\n       {\n \t_M_head() = std::forward<_Head>(__in._M_head());\n \t_M_tail() = std::move(__in._M_tail());\n@@ -276,6 +278,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n+      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n@@ -364,7 +367,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n-      // noexcept has to wait is_nothrow_move_assignable\n+      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n@@ -397,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _U1, typename _U2>\n         tuple&\n-        operator=(pair<_U1, _U2>&& __in) noexcept\n+        operator=(pair<_U1, _U2>&& __in)\n         {\n \t  this->_M_head() = std::forward<_U1>(__in.first);\n \t  this->_M_tail()._M_head() = std::forward<_U2>(__in.second);\n@@ -452,6 +455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n+      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n@@ -517,12 +521,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n     inline typename __add_ref<_Head>::type\n-    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t)\n+    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return __t._M_head(); }\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n     inline typename __add_c_ref<_Head>::type\n-    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t)\n+    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return __t._M_head(); }\n \n   // Return a reference (const reference, rvalue reference) to the ith element"}, {"sha": "7acf0b95358267d1d5e6c626f50c790ec95e84ce", "filename": "libstdc++-v3/testsuite/20_util/tuple/noexcept_move_assign.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fnoexcept_move_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fnoexcept_move_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fnoexcept_move_assign.cc?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -0,0 +1,59 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+typedef std::tuple<int>                                        tt1;\n+typedef std::tuple<int, double>                                tt2;\n+typedef std::tuple<short, double, int>                         tt3;\n+typedef std::tuple<short, NoexceptMoveAssignClass, double>     tt4;\n+typedef std::tuple<NoexceptMoveAssignClass,\n+\t\t   NoexceptMoveAssignClass, double>            tt5;\n+typedef std::tuple<NoexceptMoveAssignClass,\n+\t\t   NoexceptMoveAssignClass,\n+\t\t   NoexceptMoveAssignClass>                    tt6;\n+typedef std::tuple<ExceptMoveAssignClass>                      tt7;\n+typedef std::tuple<ExceptMoveAssignClass, double>              tt8;\n+typedef std::tuple<short, double, ExceptMoveAssignClass>       tt9;\n+typedef std::tuple<ExceptMoveAssignClass, double,\n+\t\t   ExceptMoveAssignClass>                      tt10;\n+typedef std::tuple<NoexceptMoveAssignClass,\n+\t\t   ExceptMoveAssignClass>                      tt11;\n+typedef std::tuple<int,\n+\t\t   NoexceptMoveAssignClass,\n+\t\t   ExceptMoveAssignClass>                      tt12;\n+\n+static_assert(std::is_nothrow_move_assignable<tt1>::value, \"Error\");\n+static_assert(std::is_nothrow_move_assignable<tt2>::value, \"Error\");\n+static_assert(std::is_nothrow_move_assignable<tt3>::value, \"Error\");\n+static_assert(std::is_nothrow_move_assignable<tt4>::value, \"Error\");\n+static_assert(std::is_nothrow_move_assignable<tt5>::value, \"Error\");\n+static_assert(std::is_nothrow_move_assignable<tt6>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt7>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt8>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt9>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt10>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt11>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt12>::value, \"Error\");"}, {"sha": "4ad327036fabaa77e03211738d0e625bfca962d8", "filename": "libstdc++-v3/testsuite/20_util/tuple/noexcept_swap.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fnoexcept_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fnoexcept_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fnoexcept_swap.cc?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -0,0 +1,116 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+typedef std::tuple<int>                                        tt1;\n+typedef std::tuple<int, double>                                tt2;\n+typedef std::tuple<short, double, int>                         tt3;\n+typedef std::tuple<short, NoexceptMoveAssignClass, double>     tt4;\n+typedef std::tuple<ExceptMoveAssignClass>                      tt5;\n+typedef std::tuple<ExceptMoveAssignClass, double>              tt6;\n+typedef std::tuple<short, double, ExceptMoveAssignClass>       tt7;\n+typedef std::tuple<ExceptMoveConsClass>                        tt8;\n+typedef std::tuple<int, ExceptMoveConsClass>                   tt9;\n+typedef std::tuple<ExceptMoveConsClass, short, double>         tt10;\n+typedef std::tuple<short, NoexceptMoveConsClass, double>       tt11;\n+typedef std::tuple<NoexceptMoveConsClass>                      tt12;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass>    tt13;\n+typedef std::tuple<ExceptMoveConsNoexceptMoveAssignClass>      tt14;\n+typedef std::tuple<NoexceptMoveConsExceptMoveAssignClass>      tt15;\n+typedef std::tuple<ExceptMoveConsExceptMoveAssignClass>        tt16;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   double>                                     tt17;\n+typedef std::tuple<double,\n+\t\t   NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   short>                                      tt18;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   char>                                       tt19;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   NoexceptMoveConsNoexceptMoveAssignClass>    tt20;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   ExceptMoveConsNoexceptMoveAssignClass,\n+\t\t   NoexceptMoveConsNoexceptMoveAssignClass>    tt21;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   ExceptMoveConsNoexceptMoveAssignClass,\n+\t\t   NoexceptMoveConsExceptMoveAssignClass>      tt22;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   ExceptMoveConsExceptMoveAssignClass>        tt23;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   short, ExceptMoveConsExceptMoveAssignClass> tt24;\n+typedef std::tuple<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t   short, ExceptMoveConsExceptMoveAssignClass> tt25;\n+\n+static_assert(noexcept(std::declval<tt1&>().swap(std::declval<tt1&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt2&>().swap(std::declval<tt2&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt3&>().swap(std::declval<tt3&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt4&>().swap(std::declval<tt4&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt5&>().swap(std::declval<tt5&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt6&>().swap(std::declval<tt6&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt7&>().swap(std::declval<tt7&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt8&>().swap(std::declval<tt8&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt9&>().swap(std::declval<tt9&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt10&>().swap(std::declval<tt10&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt11&>().swap(std::declval<tt11&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt12&>().swap(std::declval<tt12&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt13&>().swap(std::declval<tt13&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt14&>().swap(std::declval<tt14&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt15&>().swap(std::declval<tt15&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt16&>().swap(std::declval<tt16&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt17&>().swap(std::declval<tt17&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt18&>().swap(std::declval<tt18&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt19&>().swap(std::declval<tt19&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt20&>().swap(std::declval<tt20&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt21&>().swap(std::declval<tt21&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt22&>().swap(std::declval<tt22&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt23&>().swap(std::declval<tt23&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt24&>().swap(std::declval<tt24&>())),\n+\t      \"Error\");"}, {"sha": "24168ceda2cb7ae1044ba5b4d5863003a3583e2e", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -51,9 +51,9 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 469 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 599 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 603 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }\n // { dg-warning \"note\" \"\" { target *-*-* } 292 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 211 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 212 }"}, {"sha": "ec6d241ac5d9bb941a11310f173f5624ed959cc5", "filename": "libstdc++-v3/testsuite/25_algorithms/reverse/moveable.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fmoveable.cc?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,11 @@\n \n using __gnu_test::bidirectional_iterator_wrapper;\n \n-class X \n-{ \n-  X();\n-  X(const X&);\n-  void operator=(const X&);\n+struct X \n+{\n+  X() = delete;\n+  X(const X&) = delete;\n+  void operator=(const X&) = delete;\n };\n \n void"}, {"sha": "78750f29b40703bf75f06e67ae95e32b03925423", "filename": "libstdc++-v3/testsuite/25_algorithms/swap_ranges/moveable.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fmoveable.cc?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,11 @@\n \n using __gnu_test::forward_iterator_wrapper;\n \n-class X \n+struct X \n { \n-  X();\n-  X(const X&);\n-  void operator=(const X&);\n+  X() = delete;\n+  X(const X&) = delete;\n+  void operator=(const X&) = delete;\n };\n \n void"}, {"sha": "73622f1a7a19664dc8bc9b5fc2b4ce7aa19bc74b", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -327,10 +327,19 @@ namespace __gnu_test\n       void \n       destroy(pointer p) { p->~Tp(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      // Not copy assignable...\n+      uneq_allocator&\n+      operator=(const uneq_allocator&) = delete;\n+#endif\n+\n     private:\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       // Not assignable...\n       uneq_allocator&\n       operator=(const uneq_allocator&);\n+#endif\n \n       // ... yet swappable!\n       friend inline void"}, {"sha": "842d445389703096a4a7bd01c349cb9fed83d9c0", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=173f26ae56c9d4ac260db7a3d7b3ee44b7d07bf2", "patch": "@@ -240,6 +240,42 @@ namespace __gnu_test\n     DeletedMoveAssignClass&\n     operator=(DeletedMoveAssignClass&&) = delete;\n   };\n+\n+  struct NoexceptMoveConsNoexceptMoveAssignClass\n+  {\n+    NoexceptMoveConsNoexceptMoveAssignClass\n+    (NoexceptMoveConsNoexceptMoveAssignClass&&) noexcept(true);\n+\n+    NoexceptMoveConsNoexceptMoveAssignClass&\n+    operator=(NoexceptMoveConsNoexceptMoveAssignClass&&) noexcept(true);\n+  };\n+\n+  struct ExceptMoveConsNoexceptMoveAssignClass\n+  {\n+    ExceptMoveConsNoexceptMoveAssignClass\n+    (ExceptMoveConsNoexceptMoveAssignClass&&) noexcept(false);\n+\n+    ExceptMoveConsNoexceptMoveAssignClass&\n+    operator=(ExceptMoveConsNoexceptMoveAssignClass&&) noexcept(true);\n+  };\n+\n+  struct NoexceptMoveConsExceptMoveAssignClass\n+  {\n+    NoexceptMoveConsExceptMoveAssignClass\n+    (NoexceptMoveConsExceptMoveAssignClass&&) noexcept(true);\n+\n+    NoexceptMoveConsExceptMoveAssignClass&\n+    operator=(NoexceptMoveConsExceptMoveAssignClass&&) noexcept(false);\n+  };\n+\n+  struct ExceptMoveConsExceptMoveAssignClass\n+  {\n+    ExceptMoveConsExceptMoveAssignClass\n+    (ExceptMoveConsExceptMoveAssignClass&&) noexcept(false);\n+\n+    ExceptMoveConsExceptMoveAssignClass&\n+    operator=(ExceptMoveConsExceptMoveAssignClass&&) noexcept(false);\n+  };\n #endif\n \n   struct NType   // neither trivial nor standard-layout"}]}