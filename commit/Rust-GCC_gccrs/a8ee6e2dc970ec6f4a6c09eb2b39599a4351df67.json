{"sha": "a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThlZTZlMmRjOTcwZWM2ZjRhNmMwOWViMmIzOTU5OWE0MzUxZGY2Nw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-07-31T23:36:43Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-07-31T23:36:43Z"}, "message": "Makefile.tpl (libsubdir): Use gcc instead of gcc-lib.\n\n2003-07-31  Geoffrey Keating  <geoffk@apple.com>\n\n\t* Makefile.tpl (libsubdir): Use gcc instead of gcc-lib.\n\t* Makefine.in: Update.\n\nIndex: gcc/ChangeLog\n2003-07-31  Geoffrey Keating  <geoffk@apple.com>\n\n\t* Makefile.in (libexecdir): New.\n\t(libsubdir): Use gcc instead of gcc-lib.\n\t(libexecsubdir): New.\n\t(ORDINARY_FLAGS_TO_PASS): Add libexecsubdir.\n\t(DRIVER_DEFINES): Add STANDARD_LIBEXEC_PREFIX, use gcc instead of\n\tgcc-lib.\n\t(installdirs): Make libexecsubdir.\n\t(install-common): Put executables in libexecsubdir.\n\t(itoolsdir): Use libexecsubdir.\n\t(itoolsdatadir): New.\n\t(install-mkheaders): Separate data files and executables.\n\t(install-collect2): Put executables in libexecsubdir.\n\t(uninstall): Remove libexecsubdir.\n\t* mkheaders.in: Update for new arrangement of files.\n\t(libexecdir): New.\n\t(libexecsubdir): New.\n\t(itoolsdir): Use libexecsubdir.\n\t(itoolsdatadir): New.\n\t* gcc.c (gcc_libexec_prefix): New.\n\t(STANDARD_LIBEXEC_PREFIX): Use gcc instead of gcc-lib.\n\t(standard_exec_prefix_1): Use libexec.\n\t(standard_exec_prefix_2): New.\n\t(standard_libexec_prefix): New.\n\t(process_command): Update for new arrangement of files.  Compute\n\tgcc_libexec_prefix.  Update for change from gcc-lib to gcc.\n\nFrom-SVN: r70024", "tree": {"sha": "63caf2b661d8c3bfb8d246a2225e369bec17c8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63caf2b661d8c3bfb8d246a2225e369bec17c8a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "631099c9592ff2218569df541146431b0a38d7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631099c9592ff2218569df541146431b0a38d7d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631099c9592ff2218569df541146431b0a38d7d7"}], "stats": {"total": 146, "additions": 108, "deletions": 38}, "files": [{"sha": "df83b1958092ab4571d6537b00aa4ee3d7f152d5", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "patch": "@@ -1,3 +1,8 @@\n+2003-07-31  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* Makefile.tpl (libsubdir): Use gcc instead of gcc-lib.\n+\t* Makefine.in: Update.\n+\n 2003-07-30  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* configure.in: Enable libgcj for darwin."}, {"sha": "488a78fad3d630e6b8c5a04b48985e61362f1050", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "patch": "@@ -85,7 +85,7 @@ tooldir = @tooldir@\n build_tooldir = @build_tooldir@\n \n # Directory in which the compiler finds executables, libraries, etc.\n-libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(gcc_version)\n+libsubdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)\n GDB_NLM_DEPS = \n \n # This is the name of the environment variable used for the path to"}, {"sha": "64765f285dbc3b4f466993b19cbaba7b6553ebd1", "filename": "Makefile.tpl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "patch": "@@ -88,7 +88,7 @@ tooldir = @tooldir@\n build_tooldir = @build_tooldir@\n \n # Directory in which the compiler finds executables, libraries, etc.\n-libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(gcc_version)\n+libsubdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)\n GDB_NLM_DEPS = \n \n # This is the name of the environment variable used for the path to"}, {"sha": "1323f30cb14a4b616858a06b874357bba09f8af6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "patch": "@@ -1,3 +1,31 @@\n+2003-07-31  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* Makefile.in (libexecdir): New.\n+\t(libsubdir): Use gcc instead of gcc-lib.\n+\t(libexecsubdir): New.\n+\t(ORDINARY_FLAGS_TO_PASS): Add libexecsubdir.\n+\t(DRIVER_DEFINES): Add STANDARD_LIBEXEC_PREFIX, use gcc instead of\n+\tgcc-lib.\n+\t(installdirs): Make libexecsubdir.\n+\t(install-common): Put executables in libexecsubdir.\n+\t(itoolsdir): Use libexecsubdir.\n+\t(itoolsdatadir): New.\n+\t(install-mkheaders): Separate data files and executables.\n+\t(install-collect2): Put executables in libexecsubdir.\n+\t(uninstall): Remove libexecsubdir.\n+\t* mkheaders.in: Update for new arrangement of files.\n+\t(libexecdir): New.\n+\t(libexecsubdir): New.\n+\t(itoolsdir): Use libexecsubdir.\n+\t(itoolsdatadir): New.\n+\t* gcc.c (gcc_libexec_prefix): New.\n+\t(STANDARD_LIBEXEC_PREFIX): Use gcc instead of gcc-lib.\n+\t(standard_exec_prefix_1): Use libexec.\n+\t(standard_exec_prefix_2): New.\n+\t(standard_libexec_prefix): New.\n+\t(process_command): Update for new arrangement of files.  Compute\n+\tgcc_libexec_prefix.  Update for change from gcc-lib to gcc.\n+\n 2003-07-31  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* inclhack.def (stdio_va_list): Avoid bogus replacement which"}, {"sha": "c32f0dd431f1dc86be49765aadbbb7da7b359862", "filename": "gcc/Makefile.in", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "patch": "@@ -386,13 +386,17 @@ exec_prefix = @exec_prefix@\n bindir = @bindir@\n # Directory in which to put the directories used by the compiler.\n libdir = @libdir@\n+# Directory in which GCC puts its executables.\n+libexecdir = @libexecdir@\n \n # --------\n # UNSORTED\n # --------\n \n-# Directory in which the compiler finds executables, libraries, etc.\n-libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(version)\n+# Directory in which the compiler finds libraries etc.\n+libsubdir = $(libdir)/gcc/$(target_alias)/$(version)\n+# Directory in which the compiler finds executables\n+libexecsubdir = $(libexecdir)/gcc/$(target_alias)/$(version)\n # Used to produce a relative $(gcc_tooldir) in gcc.o\n unlibsubdir = ../../..\n # Directory in which to find other cross-compilation tools and headers.\n@@ -769,6 +773,7 @@ ORDINARY_FLAGS_TO_PASS = \\\n \t\"gcc_tooldir=$(gcc_tooldir)\" \\\n \t\"bindir=$(bindir)\" \\\n \t\"libsubdir=$(libsubdir)\" \\\n+\t\"libexecsubdir=$(libsubdir)\" \\\n \t\"datadir=$(datadir)\" \\\n \t\"localedir=$(localedir)\"\n FLAGS_TO_PASS = $(ORDINARY_FLAGS_TO_PASS) \"CC=@cc_set_by_configure@\" \\\n@@ -1358,7 +1363,8 @@ c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n \n DRIVER_DEFINES = \\\n   -DSTANDARD_STARTFILE_PREFIX=\\\"$(unlibsubdir)/\\\" \\\n-  -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc-lib/\\\" \\\n+  -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc/\\\" \\\n+  -DSTANDARD_LIBEXEC_PREFIX=\\\"$(libexecdir)/gcc/\\\" \\\n   -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n   -DDEFAULT_TARGET_MACHINE=\\\"$(target_alias)\\\" \\\n   -DSTANDARD_BINDIR_PREFIX=\\\"$(bindir)/\\\" \\\n@@ -2936,9 +2942,10 @@ install-cpp: cpp$(exeext)\n \tfi\n \n # Create the installation directories.\n-# $(libdir)/gcc-lib/include isn't currently searched by cpp.\n+# $(libdir)/gcc/include isn't currently searched by cpp.\n installdirs:\n \t$(SHELL) ${srcdir}/mkinstalldirs $(DESTDIR)$(libsubdir)\n+\t$(SHELL) ${srcdir}/mkinstalldirs $(DESTDIR)$(libexecsubdir)\n \t$(SHELL) ${srcdir}/mkinstalldirs $(DESTDIR)$(bindir)\n \t$(SHELL) ${srcdir}/mkinstalldirs $(DESTDIR)$(includedir)\n \t$(SHELL) ${srcdir}/mkinstalldirs $(DESTDIR)$(infodir)\n@@ -2950,15 +2957,15 @@ installdirs:\n install-common: native $(EXTRA_PARTS) lang.install-common installdirs\n \tfor file in $(COMPILERS); do \\\n \t  if [ -f $$file ] ; then \\\n-\t    rm -f $(DESTDIR)$(libsubdir)/$$file; \\\n-\t    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libsubdir)/$$file; \\\n+\t    rm -f $(DESTDIR)$(libexecsubdir)/$$file; \\\n+\t    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libexecsubdir)/$$file; \\\n \t  else true; \\\n \t  fi; \\\n \tdone\n \tfor file in $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2) ..; do \\\n \t  if [ x\"$$file\" != x.. ]; then \\\n-\t    rm -f $(DESTDIR)$(libsubdir)/$$file; \\\n-\t    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libsubdir)/$$file; \\\n+\t    rm -f $(DESTDIR)$(libexecsubdir)/$$file; \\\n+\t    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libexecsubdir)/$$file; \\\n \t  else true; fi; \\\n \tdone\n \tfor file in $(EXTRA_PARTS) ..; do \\\n@@ -3165,25 +3172,28 @@ install-headers-cpio: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir\n install-headers-cp: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir\n \tcp -p -r include $(DESTDIR)$(libsubdir)\n \n-itoolsdir = $(libsubdir)/install-tools\n+itoolsdir = $(libexecsubdir)/install-tools\n+itoolsdatadir = $(libsubdir)/install-tools\n # Don't install the headers.  Instead, install appropriate scripts\n # and supporting files for fixincludes to be run later.\n install-mkheaders: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir \\\n     mkheaders xlimits.h\n-\t-rm -rf $(DESTDIR)$(itoolsdir)\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(DESTDIR)$(itoolsdir)/include\n+\t-rm -rf $(DESTDIR)$(itoolsdir) $(DESTDIR)$(itoolsdatadir)\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(DESTDIR)$(itoolsdatadir)/include\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(DESTDIR)$(itoolsdir)\n \tfor file in $(USER_H); do \\\n \t  realfile=`echo $$file | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n \t  $(INSTALL_DATA) $$file \\\n-\t    $(DESTDIR)$(itoolsdir)/include/$$realfile ; \\\n+\t    $(DESTDIR)$(itoolsdatadir)/include/$$realfile ; \\\n \tdone\n-\t$(INSTALL_DATA) xlimits.h $(DESTDIR)$(itoolsdir)/include/limits.h\n+\t$(INSTALL_DATA) xlimits.h $(DESTDIR)$(itoolsdatadir)/include/limits.h\n \tif [ x$(STMP_FIXINC) != x ] ; then \\\n \t  $(INSTALL_DATA) $(srcdir)/README-fixinc \\\n-\t    $(DESTDIR)$(itoolsdir)/include/README ; \\\n+\t    $(DESTDIR)$(itoolsdatadir)/include/README ; \\\n \t  $(INSTALL_SCRIPT) fixinc.sh $(DESTDIR)$(itoolsdir)/fixinc.sh ; \\\n \t  $(INSTALL_PROGRAM) fixinc/fixincl $(DESTDIR)$(itoolsdir)/fixincl ; \\\n-\t  $(INSTALL_DATA) $(srcdir)/gsyslimits.h $(DESTDIR)$(itoolsdir)/gsyslimits.h ; \\\n+\t  $(INSTALL_DATA) $(srcdir)/gsyslimits.h \\\n+\t    $(DESTDIR)$(itoolsdatadir)/gsyslimits.h ; \\\n \telse :; fi\n \tif [ x$(STMP_FIXPROTO) != x ] ; then \\\n \t  $(INSTALL_SCRIPT) $(srcdir)/mkinstalldirs \\\n@@ -3194,23 +3204,26 @@ install-mkheaders: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir \\\n \telse :; fi\n \t$(INSTALL_SCRIPT) mkheaders $(DESTDIR)$(itoolsdir)/mkheaders\n \techo 'SYSTEM_HEADER_DIR=\"'\"$(SYSTEM_HEADER_DIR)\"'\"' \\\n-\t\t> $(DESTDIR)$(itoolsdir)/mkheaders.conf\n+\t\t> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf\n \techo 'OTHER_FIXINCLUDES_DIRS=\"$(OTHER_FIXINCLUDES_DIRS)\"' \\\n-\t\t>> $(DESTDIR)$(itoolsdir)/mkheaders.conf\n+\t\t>> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf\n \techo 'FIXPROTO_DEFINES=\"$(FIXPROTO_DEFINES)\"' \\\n-\t\t>> $(DESTDIR)$(itoolsdir)/mkheaders.conf\n-\techo 'STMP_FIXPROTO=\"$(STMP_FIXPROTO)\"' >> $(DESTDIR)$(itoolsdir)/mkheaders.conf\n-\techo 'STMP_FIXINC=\"$(STMP_FIXINC)\"' >> $(DESTDIR)$(itoolsdir)/mkheaders.conf\n+\t\t>> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf\n+\techo 'STMP_FIXPROTO=\"$(STMP_FIXPROTO)\"' \\\n+\t\t>> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf\n+\techo 'STMP_FIXINC=\"$(STMP_FIXINC)\"' \\\n+\t\t>> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf\n \n # Use this target to install the program `collect2' under the name `collect2'.\n install-collect2: collect2 installdirs\n-\t$(INSTALL_PROGRAM) collect2$(exeext) $(DESTDIR)$(libsubdir)/collect2$(exeext)\n+\t$(INSTALL_PROGRAM) collect2$(exeext) $(DESTDIR)$(libexecsubdir)/collect2$(exeext)\n # Install the driver program as $(libsubdir)/gcc for collect2.\n-\t$(INSTALL_PROGRAM) xgcc$(exeext) $(DESTDIR)$(libsubdir)/gcc$(exeext)\n+\t$(INSTALL_PROGRAM) xgcc$(exeext) $(DESTDIR)$(libexecsubdir)/gcc$(exeext)\n \n # Cancel installation by deleting the installed files.\n uninstall: lang.uninstall\n \t-rm -rf $(DESTDIR)$(libsubdir)\n+\t-rm -rf $(DESTDIR)$(libexecsubdir)\n \t-rm -rf $(DESTDIR)$(bindir)/$(GCC_INSTALL_NAME)$(exeext)\n \t-rm -rf $(DESTDIR)$(bindir)/$(GCC_CROSS_NAME)$(exeext)\n \t-rm -f $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext)"}, {"sha": "9f685252e24cc18beb39623769d328f8d1c16509", "filename": "gcc/gcc.c", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "patch": "@@ -1379,6 +1379,10 @@ static const char *just_machine_suffix = 0;\n \n static const char *gcc_exec_prefix;\n \n+/* Adjusted value of standard_libexec_prefix.  */\n+\n+static const char *gcc_libexec_prefix;\n+\n /* Default prefixes to attach to command names.  */\n \n #ifdef CROSS_COMPILE  /* Don't use these prefixes for a cross compiler.  */\n@@ -1401,7 +1405,7 @@ static const char *gcc_exec_prefix;\n /* Supply defaults for the standard prefixes.  */\n \n #ifndef STANDARD_EXEC_PREFIX\n-#define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc-lib/\"\n+#define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc/\"\n #endif\n #ifndef STANDARD_STARTFILE_PREFIX\n #define STANDARD_STARTFILE_PREFIX \"/usr/local/lib/\"\n@@ -1414,7 +1418,8 @@ static const char *gcc_exec_prefix;\n #endif\n \n static const char *const standard_exec_prefix = STANDARD_EXEC_PREFIX;\n-static const char *const standard_exec_prefix_1 = \"/usr/lib/gcc/\";\n+static const char *const standard_exec_prefix_1 = \"/usr/libexec/gcc/\";\n+static const char *const standard_exec_prefix_2 = \"/usr/lib/gcc/\";\n static const char *md_exec_prefix = MD_EXEC_PREFIX;\n \n static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n@@ -1428,6 +1433,8 @@ static const char *tooldir_prefix;\n \n static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n \n+static const char *standard_libexec_prefix = STANDARD_LIBEXEC_PREFIX;\n+\n /* Subdirectory to use for locating libraries.  Set by\n    set_multilib_dir based on the compilation options.  */\n \n@@ -3163,34 +3170,43 @@ process_command (int argc, const char *const *argv)\n   /* Set up the default search paths.  If there is no GCC_EXEC_PREFIX,\n      see if we can create it from the pathname specified in argv[0].  */\n \n+  gcc_libexec_prefix = standard_libexec_prefix;\n #ifndef VMS\n   /* FIXME: make_relative_prefix doesn't yet work for VMS.  */\n   if (!gcc_exec_prefix)\n     {\n       gcc_exec_prefix = make_relative_prefix (argv[0], standard_bindir_prefix,\n \t\t\t\t\t      standard_exec_prefix);\n+      gcc_libexec_prefix = make_relative_prefix (argv[0], \n+\t\t\t\t\t\t standard_bindir_prefix,\n+\t\t\t\t\t\t standard_libexec_prefix);\n       if (gcc_exec_prefix)\n \tputenv (concat (\"GCC_EXEC_PREFIX=\", gcc_exec_prefix, NULL));\n     }\n+  else\n+    gcc_libexec_prefix = make_relative_prefix (gcc_exec_prefix,\n+\t\t\t\t\t       standard_exec_prefix,\n+\t\t\t\t\t       standard_libexec_prefix);\n+#else\n #endif\n \n   if (gcc_exec_prefix)\n     {\n       int len = strlen (gcc_exec_prefix);\n \n-      if (len > (int) sizeof (\"/lib/gcc-lib/\") - 1\n+      if (len > (int) sizeof (\"/lib/gcc/\") - 1\n \t  && (IS_DIR_SEPARATOR (gcc_exec_prefix[len-1])))\n \t{\n-\t  temp = gcc_exec_prefix + len - sizeof (\"/lib/gcc-lib/\") + 1;\n+\t  temp = gcc_exec_prefix + len - sizeof (\"/lib/gcc/\") + 1;\n \t  if (IS_DIR_SEPARATOR (*temp)\n \t      && strncmp (temp + 1, \"lib\", 3) == 0\n \t      && IS_DIR_SEPARATOR (temp[4])\n-\t      && strncmp (temp + 5, \"gcc-lib\", 7) == 0)\n-\t    len -= sizeof (\"/lib/gcc-lib/\") - 1;\n+\t      && strncmp (temp + 5, \"gcc\", 7) == 0)\n+\t    len -= sizeof (\"/lib/gcc/\") - 1;\n \t}\n \n       set_std_prefix (gcc_exec_prefix, len);\n-      add_prefix (&exec_prefixes, gcc_exec_prefix, \"GCC\",\n+      add_prefix (&exec_prefixes, gcc_libexec_prefix, \"GCC\",\n \t\t  PREFIX_PRIORITY_LAST, 0, NULL, 0);\n       add_prefix (&startfile_prefixes, gcc_exec_prefix, \"GCC\",\n \t\t  PREFIX_PRIORITY_LAST, 0, NULL, 0);\n@@ -3729,17 +3745,21 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n   /* Use 2 as fourth arg meaning try just the machine as a suffix,\n      as well as trying the machine and the version.  */\n #ifndef OS2\n-  add_prefix (&exec_prefixes, standard_exec_prefix, \"GCC\",\n+  add_prefix (&exec_prefixes, standard_libexec_prefix, \"GCC\",\n \t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr, 0);\n+  add_prefix (&exec_prefixes, standard_libexec_prefix, \"BINUTILS\",\n+\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n   add_prefix (&exec_prefixes, standard_exec_prefix, \"BINUTILS\",\n \t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n   add_prefix (&exec_prefixes, standard_exec_prefix_1, \"BINUTILS\",\n \t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n+  add_prefix (&exec_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n+\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr, 0);\n #endif\n \n   add_prefix (&startfile_prefixes, standard_exec_prefix, \"BINUTILS\",\n \t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr, 0);\n-  add_prefix (&startfile_prefixes, standard_exec_prefix_1, \"BINUTILS\",\n+  add_prefix (&startfile_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n \t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr, 0);\n \n   tooldir_prefix = concat (tooldir_base_prefix, spec_machine,"}, {"sha": "1e36ca4f40812af1bcfd6837a590a46bfc5d3b23", "filename": "gcc/mkheaders.in", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2Fmkheaders.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67/gcc%2Fmkheaders.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkheaders.in?ref=a8ee6e2dc970ec6f4a6c09eb2b39599a4351df67", "patch": "@@ -64,18 +64,22 @@ local_prefix=@local_prefix@\n exec_prefix=@exec_prefix@\n # Directory in which to put the directories used by the compiler.\n libdir=@libdir@\n-# Directory in which the compiler finds executables, libraries, etc.\n+libexecdir=@libexecdir@\n+# Directory in which the compiler finds libraries, etc.\n libsubdir=${libdir}/gcc-lib/${target_alias}/${version}\n+# Directory in which the compiler finds executables\n+libexecsubdir=${libexecdir}/gcc/${target_alias}/${version}\n # Since gcc_tooldir does not exist at build-time, use -B${build_tooldir}/bin/\n build_tooldir=${exec_prefix}/${target_alias}\n # Directory to search for site-specific includes.\n local_includedir=${local_prefix}/include\n includedir=${prefix}/include\n \n-itoolsdir=${libsubdir}/install-tools\n+itoolsdir=${libexecsubdir}/install-tools\n+itoolsdatadir=${libsubdir}/install-tools\n incdir=${libsubdir}/include\n \n-. ${itoolsdir}/mkheaders.conf\n+. ${itoolsdatadir}/mkheaders.conf\n \n cd ${itoolsdir}\n rm -rf ${incdir}/*\n@@ -88,11 +92,11 @@ if [ x${STMP_FIXINC} != x ] ; then\n \tif [ -f ${incdir}/limits.h ]; then\n \t  mv ${incdir}/limits.h ${incdir}/syslimits.h\n \telse\n-\t  cp gsyslimits.h ${incdir}/syslimits.h\n+\t  cp ${itoolsdatadir}/gsyslimits.h ${incdir}/syslimits.h\n \tfi\n fi\n \n-cp include/* ${incdir}\n+cp ${itoolsdatadir}/include/* ${incdir}\n \n if [ x${STMP_FIXPROTO} != x ] ; then\n   mkinstalldirs=\"${SHELL} ${itoolsdir}/mkinstalldirs\""}]}