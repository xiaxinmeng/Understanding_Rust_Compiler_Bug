{"sha": "63492372c4709b48dd918e86640fd675856595a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0OTIzNzJjNDcwOWI0OGRkOTE4ZTg2NjQwZmQ2NzU4NTY1OTVhNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-10T22:38:42Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-21T16:22:13Z"}, "message": "aarch64: Use stdint types for SVE ACLE elements\n\nI'd used mode-based element types in the SVE ACLE implementation, but\nit turns out that they don't correspond to the <stdint.h> types used by\nILP32 newlib.  GCC already knows what the correct <stdint.h> types are,\nI just wasn't using the right interface to find them.\n\nA consequence of this is that ILP32 newlib code needs to cast \"int *\"\npointers to \"int32_t *\" before passing them to s32 loads and stores,\nsince int32_t is defined as \"long int\" rather than \"int\".  That matches\nthe normal C++ overloading behaviour for this target, where passing\n\"int *\" to:\n\n    void f(int32_t *);\n    void f(int64_t *);\n\nwould be ambiguous.  It also matches the corresponding <arm_neon.h>\nbehaviour.\n\n2020-01-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve-builtins.def: Use get_typenode_from_name\n\tto get the integer element types.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general-c/load_1.c (f1): Cast to\n\tint32_t * rather than int *.\n\t* gcc.target/aarch64/sve/acle/general-c/load_2.c (f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_1.c\n\t(f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_2.c\n\t(f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_1.c\n\t(f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/load_replicate_1.c\n\t(f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/store_1.c (f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/store_2.c (f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_index_1.c\n\t(f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_2.c\n\t(f1): Likewise.\n\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_restricted_1.c\n\t(f1): Likewise.", "tree": {"sha": "99660c8d1c0f2753c1f42b19340247a348523986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99660c8d1c0f2753c1f42b19340247a348523986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63492372c4709b48dd918e86640fd675856595a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63492372c4709b48dd918e86640fd675856595a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63492372c4709b48dd918e86640fd675856595a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63492372c4709b48dd918e86640fd675856595a4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb15e2bab5267213b8706fa6a29eeef94f62a524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb15e2bab5267213b8706fa6a29eeef94f62a524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb15e2bab5267213b8706fa6a29eeef94f62a524"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "e2f3d0db2cda9163b3db508b71b05bb5ccb0fc84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -1,3 +1,8 @@\n+2020-01-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.def: Use get_typenode_from_name\n+\tto get the integer element types.\n+\n 2020-01-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve-builtins.h"}, {"sha": "a5a5aca58dd41f78b777ef9489da25eb687141ef", "filename": "gcc/config/aarch64/aarch64-sve-builtins.def", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -64,14 +64,17 @@ DEF_SVE_TYPE (svbool_t, 10, __SVBool_t, boolean_type_node)\n DEF_SVE_TYPE (svfloat16_t, 13, __SVFloat16_t, aarch64_fp16_type_node)\n DEF_SVE_TYPE (svfloat32_t, 13, __SVFloat32_t, float_type_node)\n DEF_SVE_TYPE (svfloat64_t, 13, __SVFloat64_t, double_type_node)\n-DEF_SVE_TYPE (svint8_t, 10, __SVInt8_t, intQI_type_node)\n-DEF_SVE_TYPE (svint16_t, 11, __SVInt16_t, intHI_type_node)\n-DEF_SVE_TYPE (svint32_t, 11, __SVInt32_t, intSI_type_node)\n-DEF_SVE_TYPE (svint64_t, 11, __SVInt64_t, intDI_type_node)\n-DEF_SVE_TYPE (svuint8_t, 11, __SVUint8_t, unsigned_intQI_type_node)\n-DEF_SVE_TYPE (svuint16_t, 12, __SVUint16_t, unsigned_intHI_type_node)\n-DEF_SVE_TYPE (svuint32_t, 12, __SVUint32_t, unsigned_intSI_type_node)\n-DEF_SVE_TYPE (svuint64_t, 12, __SVUint64_t, unsigned_intDI_type_node)\n+DEF_SVE_TYPE (svint8_t, 10, __SVInt8_t, get_typenode_from_name (INT8_TYPE))\n+DEF_SVE_TYPE (svint16_t, 11, __SVInt16_t, get_typenode_from_name (INT16_TYPE))\n+DEF_SVE_TYPE (svint32_t, 11, __SVInt32_t, get_typenode_from_name (INT32_TYPE))\n+DEF_SVE_TYPE (svint64_t, 11, __SVInt64_t, get_typenode_from_name (INT64_TYPE))\n+DEF_SVE_TYPE (svuint8_t, 11, __SVUint8_t, get_typenode_from_name (UINT8_TYPE))\n+DEF_SVE_TYPE (svuint16_t, 12, __SVUint16_t,\n+\t      get_typenode_from_name (UINT16_TYPE))\n+DEF_SVE_TYPE (svuint32_t, 12, __SVUint32_t,\n+\t      get_typenode_from_name (UINT32_TYPE))\n+DEF_SVE_TYPE (svuint64_t, 12, __SVUint64_t,\n+\t      get_typenode_from_name (UINT64_TYPE))\n \n DEF_SVE_TYPE_SUFFIX (b, svbool_t, bool, 8, VNx16BImode)\n DEF_SVE_TYPE_SUFFIX (b8, svbool_t, bool, 8, VNx16BImode)"}, {"sha": "4bea57e3968b931f961bc2b75c81ab4b09011825", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -1,3 +1,25 @@\n+2020-01-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general-c/load_1.c (f1): Cast to\n+\tint32_t * rather than int *.\n+\t* gcc.target/aarch64/sve/acle/general-c/load_2.c (f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_1.c\n+\t(f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_2.c\n+\t(f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_1.c\n+\t(f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/load_replicate_1.c\n+\t(f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/store_1.c (f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/store_2.c (f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_index_1.c\n+\t(f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_2.c\n+\t(f1): Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_restricted_1.c\n+\t(f1): Likewise.\n+\n 2020-01-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/92424"}, {"sha": "784fdc317e6a3014276eb26740a0672da09defc9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_1.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -13,7 +13,7 @@ f1 (svbool_t pg, signed char *s8_ptr, void *void_ptr, struct s *s_ptr,\n   svld1 (pg, s8_ptr, 0); /* { dg-error {too many arguments to function 'svld1'} } */\n   svld1 (0, s8_ptr); /* { dg-error {passing 'int' to argument 1 of 'svld1', which expects 'svbool_t'} } */\n   svld1 (pg, 0); /* { dg-error {passing 'int' to argument 2 of 'svld1', which expects a pointer type} } */\n-  svld1 (pg, (int *) 0);\n+  svld1 (pg, (int32_t *) 0);\n   svld1 (pg, void_ptr); /* { dg-error {passing 'void \\*' to argument 2 of 'svld1', but 'void' is not a valid SVE element type} } */\n   svld1 (pg, s_ptr); /* { dg-error {passing 'struct s \\*' to argument 2 of 'svld1', but 'struct s' is not a valid SVE element type} } */\n   svld1 (pg, f32_ptr);"}, {"sha": "a82887626955c7ce748fe9c9e77a82e518ece6fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_2.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -13,7 +13,7 @@ f1 (svbool_t pg, signed char *s8_ptr, void *void_ptr, struct s *s_ptr,\n   svld1_s8 (pg, s8_ptr, 0); /* { dg-error {too many arguments to function 'svld1_s8'} } */\n   svld1_s8 (0, 0); /* { dg-error {incompatible type for argument 1 of 'svld1_s8'} } */\n   svld1_s8 (pg, 0);\n-  svld1_s32 (pg, (int *) 0);\n+  svld1_s32 (pg, (int32_t *) 0);\n   svld1_s8 (pg, void_ptr);\n   svld1_s8 (pg, s_ptr); /* { dg-warning {passing argument 2 of 'svld1_s8' from incompatible pointer type} } */\n   svld1_f32 (pg, f32_ptr);"}, {"sha": "4daede78dcb758c3e6f2c4387a6bf2fed976900d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_gather_sv_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_1.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -18,7 +18,7 @@ f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n   svld1_gather_offset (pg, s32_ptr, s32, 0); /* { dg-error {too many arguments to function 'svld1_gather_offset'} } */\n   svld1_gather_offset (0, s32_ptr, s32); /* { dg-error {passing 'int' to argument 1 of 'svld1_gather_offset', which expects 'svbool_t'} } */\n   svld1_gather_offset (pg, 0, s32); /* { dg-error {passing 'int' to argument 2 of 'svld1_gather_offset', which expects a pointer type} } */\n-  svld1_gather_offset (pg, (int *) 0, s32);\n+  svld1_gather_offset (pg, (int32_t *) 0, s32);\n   svld1_gather_offset (pg, void_ptr, s32); /* { dg-error {passing 'void \\*' to argument 2 of 'svld1_gather_offset', but 'void' is not a valid SVE element type} } */\n   svld1_gather_offset (pg, s_ptr, s32); /* { dg-error {passing 'struct s \\*' to argument 2 of 'svld1_gather_offset', but 'struct s' is not a valid SVE element type} } */\n   svld1_gather_offset (pg, f32_ptr, s32);"}, {"sha": "65510cbe3f6289f13dceec819d0adb392f326fff", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_gather_sv_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_2.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -18,7 +18,7 @@ f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n   svld1_gather_index (pg, s32_ptr, s32, 0); /* { dg-error {too many arguments to function 'svld1_gather_index'} } */\n   svld1_gather_index (0, s32_ptr, s32); /* { dg-error {passing 'int' to argument 1 of 'svld1_gather_index', which expects 'svbool_t'} } */\n   svld1_gather_index (pg, 0, s32); /* { dg-error {passing 'int' to argument 2 of 'svld1_gather_index', which expects a pointer type} } */\n-  svld1_gather_index (pg, (int *) 0, s32);\n+  svld1_gather_index (pg, (int32_t *) 0, s32);\n   svld1_gather_index (pg, void_ptr, s32); /* { dg-error {passing 'void \\*' to argument 2 of 'svld1_gather_index', but 'void' is not a valid SVE element type} } */\n   svld1_gather_index (pg, s_ptr, s32); /* { dg-error {passing 'struct s \\*' to argument 2 of 'svld1_gather_index', but 'struct s' is not a valid SVE element type} } */\n   svld1_gather_index (pg, f32_ptr, s32);"}, {"sha": "51e11fca88a995420d01069bfb39f3c8f4d88c76", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_gather_sv_restricted_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_gather_sv_restricted_1.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -20,7 +20,7 @@ f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n   svldnt1_gather_offset (pg, s32_ptr, s32, 0); /* { dg-error {too many arguments to function 'svldnt1_gather_offset'} } */\n   svldnt1_gather_offset (0, s32_ptr, u32); /* { dg-error {passing 'int' to argument 1 of 'svldnt1_gather_offset', which expects 'svbool_t'} } */\n   svldnt1_gather_offset (pg, 0, s32); /* { dg-error {passing 'int' to argument 2 of 'svldnt1_gather_offset', which expects a pointer type} } */\n-  svldnt1_gather_offset (pg, (int *) 0, u32);\n+  svldnt1_gather_offset (pg, (int32_t *) 0, u32);\n   svldnt1_gather_offset (pg, void_ptr, u32); /* { dg-error {passing 'void \\*' to argument 2 of 'svldnt1_gather_offset', but 'void' is not a valid SVE element type} } */\n   svldnt1_gather_offset (pg, s_ptr, u32); /* { dg-error {passing 'struct s \\*' to argument 2 of 'svldnt1_gather_offset', but 'struct s' is not a valid SVE element type} } */\n   svldnt1_gather_offset (pg, f32_ptr, u32);"}, {"sha": "ebcb0e85b1a9a0e26989edc4b4c7d9e5b515fd89", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/load_replicate_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_replicate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_replicate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fload_replicate_1.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -13,7 +13,7 @@ f1 (svbool_t pg, signed char *s8_ptr, void *void_ptr, struct s *s_ptr,\n   svld1rq (pg, s8_ptr, 0); /* { dg-error {too many arguments to function 'svld1rq'} } */\n   svld1rq (0, s8_ptr); /* { dg-error {passing 'int' to argument 1 of 'svld1rq', which expects 'svbool_t'} } */\n   svld1rq (pg, 0); /* { dg-error {passing 'int' to argument 2 of 'svld1rq', which expects a pointer type} } */\n-  svld1rq (pg, (int *) 0);\n+  svld1rq (pg, (int32_t *) 0);\n   svld1rq (pg, void_ptr); /* { dg-error {passing 'void \\*' to argument 2 of 'svld1rq', but 'void' is not a valid SVE element type} } */\n   svld1rq (pg, s_ptr); /* { dg-error {passing 'struct s \\*' to argument 2 of 'svld1rq', but 'struct s' is not a valid SVE element type} } */\n   svld1rq (pg, f32_ptr);"}, {"sha": "625f059af448b8a8eb2ca569df76f63572c4eaa7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/store_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_1.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -16,7 +16,7 @@ f1 (svbool_t pg, signed char *s8_ptr, void *void_ptr, struct s *s_ptr,\n   svst1 (pg, void_ptr, 0); /* { dg-error {passing 'int' to argument 3 of 'svst1', which expects an SVE vector type} } */\n   svst1 (pg, void_ptr, pg); /* { dg-error {'svst1' has no form that takes 'svbool_t' arguments} } */\n   svst1 (pg, 0, s8);\n-  svst1 (pg, (int *) 0, s8); /* { dg-warning \"passing argument 2 of 'svst1_s8' from incompatible pointer type\" } */\n+  svst1 (pg, (int32_t *) 0, s8); /* { dg-warning \"passing argument 2 of 'svst1_s8' from incompatible pointer type\" } */\n   svst1 (pg, void_ptr, s8);\n   svst1 (pg, s_ptr, s8); /* { dg-warning \"passing argument 2 of 'svst1_s8' from incompatible pointer type\" } */\n   svst1 (pg, f32_ptr, s8); /* { dg-warning \"passing argument 2 of 'svst1_s8' from incompatible pointer type\" } */"}, {"sha": "c718b3ee04eebb9c32fbc9f8865ab48ee56abcfe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/store_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_2.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -18,7 +18,7 @@ f1 (svbool_t pg, signed char *s8_ptr, void *void_ptr, struct s *s_ptr,\n   svst1_vnum (pg, void_ptr, 0, 0); /* { dg-error {passing 'int' to argument 4 of 'svst1_vnum', which expects an SVE vector type} } */\n   svst1_vnum (pg, void_ptr, 0, pg); /* { dg-error {'svst1_vnum' has no form that takes 'svbool_t' arguments} } */\n   svst1_vnum (pg, 0, 0, s8);\n-  svst1_vnum (pg, (int *) 0, 0, s8); /* { dg-warning \"passing argument 2 of 'svst1_vnum_s8' from incompatible pointer type\" } */\n+  svst1_vnum (pg, (int32_t *) 0, 0, s8); /* { dg-warning \"passing argument 2 of 'svst1_vnum_s8' from incompatible pointer type\" } */\n   svst1_vnum (pg, void_ptr, 0, s8);\n   svst1_vnum (pg, s_ptr, 0, s8); /* { dg-warning \"passing argument 2 of 'svst1_vnum_s8' from incompatible pointer type\" } */\n   svst1_vnum (pg, f32_ptr, 0, s8); /* { dg-warning \"passing argument 2 of 'svst1_vnum_s8' from incompatible pointer type\" } */"}, {"sha": "895282375227c53d80209ec5f56779a8ebab6dd2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/store_scatter_index_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_index_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_index_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_index_1.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -18,7 +18,7 @@ f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n   svst1_scatter_index (pg, s32_ptr, s32, s32, 0); /* { dg-error {too many arguments to function 'svst1_scatter_index'} } */\n   svst1_scatter_index (0, s32_ptr, s32, s32); /* { dg-error {passing 'int' to argument 1 of 'svst1_scatter_index', which expects 'svbool_t'} } */\n   svst1_scatter_index (pg, 0, s32, s32);\n-  svst1_scatter_index (pg, (int *) 0, s32, s32);\n+  svst1_scatter_index (pg, (int32_t *) 0, s32, s32);\n   svst1_scatter_index (pg, void_ptr, s32, s32);\n   svst1_scatter_index (pg, s_ptr, s32, s32); /* { dg-warning \"passing argument 2 of 'svst1_scatter_s32index_s32' from incompatible pointer type\" } */\n   svst1_scatter_index (pg, f32_ptr, s32, s32); /* { dg-warning \"passing argument 2 of 'svst1_scatter_s32index_s32' from incompatible pointer type\" } */"}, {"sha": "4854818cae6a6e82b121876e91058788890128cf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_2.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -18,7 +18,7 @@ f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n   svst1_scatter_offset (pg, s32_ptr, s32, s32, 0); /* { dg-error {too many arguments to function 'svst1_scatter_offset'} } */\n   svst1_scatter_offset (0, s32_ptr, s32, s32); /* { dg-error {passing 'int' to argument 1 of 'svst1_scatter_offset', which expects 'svbool_t'} } */\n   svst1_scatter_offset (pg, 0, s32, s32);\n-  svst1_scatter_offset (pg, (int *) 0, s32, s32);\n+  svst1_scatter_offset (pg, (int32_t *) 0, s32, s32);\n   svst1_scatter_offset (pg, void_ptr, s32, s32);\n   svst1_scatter_offset (pg, s_ptr, s32, s32); /* { dg-warning \"passing argument 2 of 'svst1_scatter_s32offset_s32' from incompatible pointer type\" } */\n   svst1_scatter_offset (pg, f32_ptr, s32, s32); /* { dg-warning \"passing argument 2 of 'svst1_scatter_s32offset_s32' from incompatible pointer type\" } */"}, {"sha": "100624b7b0316002e6ead2b9b461df183e158152", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general-c/store_scatter_offset_restricted_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_restricted_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63492372c4709b48dd918e86640fd675856595a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_restricted_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2Fstore_scatter_offset_restricted_1.c?ref=63492372c4709b48dd918e86640fd675856595a4", "patch": "@@ -20,7 +20,7 @@ f1 (svbool_t pg, signed char *s8_ptr, short *s16_ptr,\n   svstnt1_scatter_offset (pg, s32_ptr, u32, s32, 0); /* { dg-error {too many arguments to function 'svstnt1_scatter_offset'} } */\n   svstnt1_scatter_offset (0, s32_ptr, u32, s32); /* { dg-error {passing 'int' to argument 1 of 'svstnt1_scatter_offset', which expects 'svbool_t'} } */\n   svstnt1_scatter_offset (pg, 0, u32, s32);\n-  svstnt1_scatter_offset (pg, (int *) 0, u32, s32);\n+  svstnt1_scatter_offset (pg, (int32_t *) 0, u32, s32);\n   svstnt1_scatter_offset (pg, void_ptr, u32, s32);\n   svstnt1_scatter_offset (pg, s_ptr, u32, s32); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_u32offset_s32' from incompatible pointer type\" } */\n   svstnt1_scatter_offset (pg, f32_ptr, u32, s32); /* { dg-warning \"passing argument 2 of 'svstnt1_scatter_u32offset_s32' from incompatible pointer type\" } */"}]}