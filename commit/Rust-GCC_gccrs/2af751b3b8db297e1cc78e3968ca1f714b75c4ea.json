{"sha": "2af751b3b8db297e1cc78e3968ca1f714b75c4ea", "node_id": "C_kwDOANBUbNoAKDJhZjc1MWIzYjhkYjI5N2UxY2M3OGUzOTY4Y2ExZjcxNGI3NWM0ZWE", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-12-01T16:51:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-05T11:32:38Z"}, "message": "[Ada] Expand controlling function wrapper into expression function\n\ngcc/ada/\n\n\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): For\n\tGNATprove build the wrapper as an expression function.", "tree": {"sha": "f2cbfb8bccabc3589d139fa44a9e996796df613b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2cbfb8bccabc3589d139fa44a9e996796df613b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af751b3b8db297e1cc78e3968ca1f714b75c4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af751b3b8db297e1cc78e3968ca1f714b75c4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af751b3b8db297e1cc78e3968ca1f714b75c4ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af751b3b8db297e1cc78e3968ca1f714b75c4ea/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3531f20f6cff7e43dcde44b200467872a925188f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3531f20f6cff7e43dcde44b200467872a925188f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3531f20f6cff7e43dcde44b200467872a925188f"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "eb386e4250a22413af1e0b395e4f195c5e1eba75", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af751b3b8db297e1cc78e3968ca1f714b75c4ea/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af751b3b8db297e1cc78e3968ca1f714b75c4ea/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=2af751b3b8db297e1cc78e3968ca1f714b75c4ea", "patch": "@@ -9607,11 +9607,11 @@ package body Exp_Ch3 is\n       Actual_List : List_Id;\n       Formal      : Entity_Id;\n       Par_Formal  : Entity_Id;\n+      Ext_Aggr    : Node_Id;\n       Formal_Node : Node_Id;\n       Func_Body   : Node_Id;\n       Func_Decl   : Node_Id;\n       Func_Id     : Entity_Id;\n-      Return_Stmt : Node_Id;\n \n    --  Start of processing for Make_Controlling_Function_Wrappers\n \n@@ -9731,25 +9731,38 @@ package body Exp_Ch3 is\n                Actual_List := No_List;\n             end if;\n \n-            Return_Stmt :=\n-              Make_Simple_Return_Statement (Loc,\n-                Expression =>\n-                  Make_Extension_Aggregate (Loc,\n-                    Ancestor_Part       =>\n-                      Make_Function_Call (Loc,\n-                        Name                   =>\n-                          New_Occurrence_Of (Alias (Subp), Loc),\n-                        Parameter_Associations => Actual_List),\n-                    Null_Record_Present => True));\n-\n-            Func_Body :=\n-              Make_Subprogram_Body (Loc,\n-                Specification              =>\n-                  Make_Wrapper_Specification (Subp),\n-                Declarations               => Empty_List,\n-                Handled_Statement_Sequence =>\n-                  Make_Handled_Sequence_Of_Statements (Loc,\n-                    Statements => New_List (Return_Stmt)));\n+            Ext_Aggr :=\n+              Make_Extension_Aggregate (Loc,\n+                Ancestor_Part       =>\n+                  Make_Function_Call (Loc,\n+                    Name                   =>\n+                      New_Occurrence_Of (Alias (Subp), Loc),\n+                    Parameter_Associations => Actual_List),\n+                Null_Record_Present => True);\n+\n+            --  GNATprove will use expression of an expression function as an\n+            --  implicit postcondition. GNAT will not benefit from expression\n+            --  function (and would struggle if we add an expression function\n+            --  to freezing actions).\n+\n+            if GNATprove_Mode then\n+               Func_Body :=\n+                 Make_Expression_Function (Loc,\n+                   Specification =>\n+                     Make_Wrapper_Specification (Subp),\n+                   Expression => Ext_Aggr);\n+            else\n+               Func_Body :=\n+                 Make_Subprogram_Body (Loc,\n+                   Specification              =>\n+                     Make_Wrapper_Specification (Subp),\n+                   Declarations               => Empty_List,\n+                   Handled_Statement_Sequence =>\n+                     Make_Handled_Sequence_Of_Statements (Loc,\n+                       Statements => New_List (\n+                         Make_Simple_Return_Statement (Loc,\n+                           Expression => Ext_Aggr))));\n+            end if;\n \n             Append_To (Body_List, Func_Body);\n "}]}