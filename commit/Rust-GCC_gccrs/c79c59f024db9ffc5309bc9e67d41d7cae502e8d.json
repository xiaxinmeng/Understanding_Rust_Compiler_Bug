{"sha": "c79c59f024db9ffc5309bc9e67d41d7cae502e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5YzU5ZjAyNGRiOWZmYzUzMDliYzllNjdkNDFkN2NhZTUwMmU4ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-09-04T16:09:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-04T16:09:05Z"}, "message": "fix darwin bootstrap errors due to <mutex>.\n\n\tPR libstdc++/65704\n\t* include/std/mutex (recursive_timed_mutex): Fix uses of _Can_lock.\n\nFrom-SVN: r227495", "tree": {"sha": "9d4916572cfb97a8c260f8d1873b388338b1e98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d4916572cfb97a8c260f8d1873b388338b1e98e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79c59f024db9ffc5309bc9e67d41d7cae502e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79c59f024db9ffc5309bc9e67d41d7cae502e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79c59f024db9ffc5309bc9e67d41d7cae502e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79c59f024db9ffc5309bc9e67d41d7cae502e8d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075e268e81bc06cc89109484c501474a440203b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075e268e81bc06cc89109484c501474a440203b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075e268e81bc06cc89109484c501474a440203b2"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "ac2dde477afacd9d39816f32a7dc374f942b4731", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c59f024db9ffc5309bc9e67d41d7cae502e8d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c59f024db9ffc5309bc9e67d41d7cae502e8d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c79c59f024db9ffc5309bc9e67d41d7cae502e8d", "patch": "@@ -1,4 +1,7 @@\n-2015-09-03  Jonathan Wakely  <jwakely@redhat.com>\n+2015-09-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/65704\n+\t* include/std/mutex (recursive_timed_mutex): Fix uses of _Can_lock.\n \n \tPR libstdc++/65704\n \t* include/Makefile.am: Add <bits/mutex.h>."}, {"sha": "38950b6e9e875d236cc1e9f5ef30d47e6e589dd5", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79c59f024db9ffc5309bc9e67d41d7cae502e8d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79c59f024db9ffc5309bc9e67d41d7cae502e8d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=c79c59f024db9ffc5309bc9e67d41d7cae502e8d", "patch": "@@ -368,9 +368,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Predicate type that tests whether the current thread can lock a mutex.\n     struct _Can_lock\n     {\n-      _Can_lock(const recursive_timed_mutex* __mx)\n-      : _M_mx(__mx), _M_caller(this_thread::get_id()) { }\n-\n       // Returns true if the mutex is unlocked or is locked by _M_caller.\n       bool\n       operator()() const noexcept\n@@ -391,7 +388,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     lock()\n     {\n-      _Can_lock __can_lock{this};\n+      auto __id = this_thread::get_id();\n+      _Can_lock __can_lock{this, __id};\n       unique_lock<mutex> __lk(_M_mut);\n       _M_cv.wait(__lk, __can_lock);\n       if (_M_count == -1u)\n@@ -403,7 +401,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool\n     try_lock()\n     {\n-      _Can_lock __can_lock{this};\n+      auto __id = this_thread::get_id();\n+      _Can_lock __can_lock{this, __id};\n       lock_guard<mutex> __lk(_M_mut);\n       if (!__can_lock())\n \treturn false;\n@@ -418,9 +417,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-\t_Can_lock __can_lock{this};\n+\tauto __id = this_thread::get_id();\n+\t_Can_lock __can_lock{this, __id};\n \tunique_lock<mutex> __lk(_M_mut);\n-\tif (!_M_cv.wait_for(__lk, __rtime, __can_lock);\n+\tif (!_M_cv.wait_for(__lk, __rtime, __can_lock))\n \t  return false;\n \tif (_M_count == -1u)\n \t  return false;\n@@ -433,9 +433,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n-\t_Can_lock __can_lock{this};\n+\tauto __id = this_thread::get_id();\n+\t_Can_lock __can_lock{this, __id};\n \tunique_lock<mutex> __lk(_M_mut);\n-\tif (!_M_cv.wait_until(__lk, __atime, __can_lock);\n+\tif (!_M_cv.wait_until(__lk, __atime, __can_lock))\n \t  return false;\n \tif (_M_count == -1u)\n \t  return false;"}]}