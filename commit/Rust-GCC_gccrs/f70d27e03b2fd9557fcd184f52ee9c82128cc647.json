{"sha": "f70d27e03b2fd9557fcd184f52ee9c82128cc647", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwZDI3ZTAzYjJmZDk1NTdmY2QxODRmNTJlZTljODIxMjhjYzY0Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-05-21T21:58:57Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-05-21T21:58:57Z"}, "message": "Allow indirect branch via GOT slot for x32\n\nX32 doesn't support indirect branch via 32-bit memory slot since\nindirect branch will load 64-bit address from 64-bit memory slot.\nSince x32 GOT slot is 64-bit, we should allow indirect branch via GOT\nslot for x32.\n\ngcc/\n\n\tPR target/66232\n\t* config/i386/constraints.md (Bg): New constraint for GOT memory\n\toperand.\n\t* config/i386/i386.md (*call_got_x32): New pattern.\n\t(*call_value_got_x32): Likewise.\n\t* config/i386/predicates.md (GOT_memory_operand): New predicate.\n\ngcc/testsuite/\n\n\tPR target/66232\n\t* gcc.target/i386/pr66232-1.c: New test.\n\t* gcc.target/i386/pr66232-2.c: Likewise.\n\t* gcc.target/i386/pr66232-3.c: Likewise.\n\t* gcc.target/i386/pr66232-4.c: Likewise.\n\t* gcc.target/i386/pr66232-5.c: Likewise.\n\nFrom-SVN: r223505", "tree": {"sha": "339f22cc373ecb0fcc175e7c6da44a697835e525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/339f22cc373ecb0fcc175e7c6da44a697835e525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f70d27e03b2fd9557fcd184f52ee9c82128cc647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70d27e03b2fd9557fcd184f52ee9c82128cc647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70d27e03b2fd9557fcd184f52ee9c82128cc647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70d27e03b2fd9557fcd184f52ee9c82128cc647/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ab2fcc16d674a876364159f5daa2258b42e6bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab2fcc16d674a876364159f5daa2258b42e6bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab2fcc16d674a876364159f5daa2258b42e6bb0"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "e5fa370ad4c9cf65298cb06dd28072e0bbbbfbb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -1,3 +1,12 @@\n+2015-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66232\n+\t* config/i386/constraints.md (Bg): New constraint for GOT memory\n+\toperand.\n+\t* config/i386/i386.md (*call_got_x32): New pattern.\n+\t(*call_value_got_x32): Likewise.\n+\t* config/i386/predicates.md (GOT_memory_operand): New predicate.\n+\n 2015-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/66233"}, {"sha": "c718bc10017bbb865fcced256329cb80830fb34f", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -146,10 +146,15 @@\n  \"@internal Lower SSE register when avoiding REX prefix and all SSE registers otherwise.\")\n \n ;; We use the B prefix to denote any number of internal operands:\n+;;  g  GOT memory operand.\n ;;  s  Sibcall memory operand, not valid for TARGET_X32\n ;;  w  Call memory operand, not valid for TARGET_X32\n ;;  z  Constant call address operand.\n \n+(define_constraint \"Bg\"\n+  \"@internal GOT memory operand.\"\n+  (match_operand 0 \"GOT_memory_operand\"))\n+\n (define_constraint \"Bs\"\n   \"@internal Sibcall memory operand.\"\n   (and (not (match_test \"TARGET_X32\"))"}, {"sha": "3819dfdcd5c0650f06b7cf7d96bbf95233182b87", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -11659,6 +11659,15 @@\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n+;; This covers both call and sibcall since only GOT slot is allowed.\n+(define_insn \"*call_got_x32\"\n+  [(call (mem:QI (zero_extend:DI\n+\t\t   (match_operand:SI 0 \"GOT_memory_operand\" \"Bg\")))\n+\t (match_operand 1))]\n+  \"TARGET_X32\"\n+  \"* return ix86_output_call_insn (insn, operands[0]);\"\n+  [(set_attr \"type\" \"call\")])\n+\n (define_insn \"*sibcall\"\n   [(call (mem:QI (match_operand:W 0 \"sibcall_insn_operand\" \"UBsBz\"))\n \t (match_operand 1))]\n@@ -11825,6 +11834,17 @@\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n+;; This covers both call and sibcall since only GOT slot is allowed.\n+(define_insn \"*call_value_got_x32\"\n+  [(set (match_operand 0)\n+\t(call (mem:QI\n+\t\t(zero_extend:DI\n+\t\t  (match_operand:SI 1 \"GOT_memory_operand\" \"Bg\")))\n+\t      (match_operand 2)))]\n+  \"TARGET_X32\"\n+  \"* return ix86_output_call_insn (insn, operands[1]);\"\n+  [(set_attr \"type\" \"callv\")])\n+\n (define_insn \"*sibcall_value\"\n   [(set (match_operand 0)\n \t(call (mem:QI (match_operand:W 1 \"sibcall_insn_operand\" \"UBsBz\"))"}, {"sha": "b7bb84fe0ee0c40a63e70cdda6fe3c4b3599e9da", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -606,6 +606,16 @@\n        (and (not (match_test \"TARGET_X32\"))\n \t    (match_operand 0 \"sibcall_memory_operand\"))))\n \n+;; Return true if OP is a GOT memory operand.\n+(define_predicate \"GOT_memory_operand\"\n+  (match_operand 0 \"memory_operand\")\n+{\n+  op = XEXP (op, 0);\n+  return (GET_CODE (op) == CONST\n+\t  && GET_CODE (XEXP (op, 0)) == UNSPEC\n+\t  && XINT (XEXP (op, 0), 1) == UNSPEC_GOTPCREL);\n+})\n+\n ;; Match exactly zero.\n (define_predicate \"const0_operand\"\n   (match_code \"const_int,const_wide_int,const_double,const_vector\")"}, {"sha": "a2d8133a7f2873cd8e13094012aaebe5d093d3d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -1,3 +1,12 @@\n+2015-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66232\n+\t* gcc.target/i386/pr66232-1.c: New test.\n+\t* gcc.target/i386/pr66232-2.c: Likewise.\n+\t* gcc.target/i386/pr66232-3.c: Likewise.\n+\t* gcc.target/i386/pr66232-4.c: Likewise.\n+\t* gcc.target/i386/pr66232-5.c: Likewise.\n+\n 2015-05-21  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/cpp1y/pr60943.C: New."}, {"sha": "ba4a5ef5467186a47c47e509a6aaf5d9eb9cd5d7", "filename": "gcc/testsuite/gcc.target/i386/pr66232-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-1.c?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+\n+extern void bar (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "f05d7c557a501a940cf64d24cbfd6675d12537f6", "filename": "gcc/testsuite/gcc.target/i386/pr66232-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-2.c?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+\n+extern void bar (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "ee3176cac689d0a56efd8d89a4b1c06ca4478f14", "filename": "gcc/testsuite/gcc.target/i386/pr66232-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-3.c?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+\n+extern int bar (void);\n+\n+int\n+foo (void)\n+{\n+  return bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "5fa0dedf67e657f0ed4bbadb1fa96e248798e0d0", "filename": "gcc/testsuite/gcc.target/i386/pr66232-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-4.c?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt\" } */\n+\n+extern int bar (void);\n+\n+int\n+foo (void)\n+{\n+  return bar () + 1;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*.bar@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "c01671767a8dd51c8e4b3df97b726ac09854d246", "filename": "gcc/testsuite/gcc.target/i386/pr66232-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70d27e03b2fd9557fcd184f52ee9c82128cc647/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66232-5.c?ref=f70d27e03b2fd9557fcd184f52ee9c82128cc647", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-O2 -fpic -mx32\" } */\n+\n+extern void (*bar) (void);\n+void\n+foo (int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    {\n+      if (!bar)\n+\tcontinue;\n+      (*bar) ();\n+    }\n+}"}]}