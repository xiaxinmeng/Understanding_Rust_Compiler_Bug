{"sha": "8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI4OWEyNmFjMWUyYjM2NDMxZDNhZWQyMjNmODMxZDRmZjY3NjZlZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2006-04-09T18:32:16Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2006-04-09T18:32:16Z"}, "message": "re PR target/27034 (gcc.dg/20021014-1.c (test for excess errors) fails)\n\n\tPR target/27034\n\tPR target/26508\n\t* config.gcc (hppa*64*-*-hpux11*): Add 'libgcc_stub.a' to extra_parts.\n\t* pa64-hpux.h (LIB_SPEC): Correct typo.  Don't append milli.a.\n\t(LINK_GCC_C_SEQUENCE_SPEC): Define.  Append milli.a here.\n\t(PA_CXA_FINALIZE_STUB, PA_JV_REGISTERCLASSES_STUB): Delete defines.\n\t(PA_INIT_FINI_HACK): Rename to PA_CRTBEGIN_HACK.\n\t(PA_CRTBEGIN_HACK): Ensure __do_global_ctors_aux is placed in text\n\tsection.  Delete PA_CXA_FINALIZE_STUB and PA_JV_REGISTERCLASSES_STUB\n\tstubs.  Add \".align 8\" directives before all \".dword\" directives.\n\t(GTHREAD_USE_WEAK): Revise comment.\n\t(TARGET_ATTRIBUTE_WEAK): Define.\n\t* pa/t-pa64 (LIBGCCSTUB_OBJS): Add new rules for stublib.c, rfi-stub.o,\n\tdfi-stub.o, cxaf-stub.o and jvrc-stub.o.\n\t* stublib.c: New file.\n\nFrom-SVN: r112807", "tree": {"sha": "2407b1bf3922783836efd58972156feaeb942c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2407b1bf3922783836efd58972156feaeb942c81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/comments", "author": null, "committer": null, "parents": [{"sha": "16d74a3cc2e10045063e16a0b04cdb5645a744b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d74a3cc2e10045063e16a0b04cdb5645a744b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d74a3cc2e10045063e16a0b04cdb5645a744b6"}], "stats": {"total": 187, "additions": 141, "deletions": 46}, "files": [{"sha": "11092923e4c2405d6017dea91ccd7977bc8b64e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "patch": "@@ -1,4 +1,20 @@\n-2006-04-09  John David Anglin  <dave.anglin@nrc-crnc.gc.ca>\n+2006-04-09  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/27034\n+\tPR target/26508\n+\t* config.gcc (hppa*64*-*-hpux11*): Add 'libgcc_stub.a' to extra_parts.\n+\t* pa64-hpux.h (LIB_SPEC): Correct typo.  Don't append milli.a.\n+\t(LINK_GCC_C_SEQUENCE_SPEC): Define.  Append milli.a here.\n+\t(PA_CXA_FINALIZE_STUB, PA_JV_REGISTERCLASSES_STUB): Delete defines.\n+\t(PA_INIT_FINI_HACK): Rename to PA_CRTBEGIN_HACK.\n+\t(PA_CRTBEGIN_HACK): Ensure __do_global_ctors_aux is placed in text\n+\tsection.  Delete PA_CXA_FINALIZE_STUB and PA_JV_REGISTERCLASSES_STUB\n+\tstubs.  Add \".align 8\" directives before all \".dword\" directives.\n+\t(GTHREAD_USE_WEAK): Revise comment.\n+\t(TARGET_ATTRIBUTE_WEAK): Define.\n+\t* pa/t-pa64 (LIBGCCSTUB_OBJS): Add new rules for stublib.c, rfi-stub.o,\n+\tdfi-stub.o, cxaf-stub.o and jvrc-stub.o.\n+\t* stublib.c: New file.\n \n \tPR target/26743\n \tPR target/11254"}, {"sha": "67a0625b1ddb82523f812e087051f2eca6fe2eac", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "patch": "@@ -967,7 +967,8 @@ hppa*64*-*-hpux11*)\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o \\\n+\t\t     libgcc_stub.a\"\n \tcase x${enable_threads} in\n \txyes | xposix )\n \t\tthread_file=posix "}, {"sha": "4caef744bad88dad6e76d398da6de4c1e084db23", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 32, "deletions": 43, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "patch": "@@ -63,22 +63,26 @@ Boston, MA 02110-1301, USA.  */\n \t   %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{pg:%{static:%{!mhp-ld:-a shared}%{mhp-ld:-a archive_shared}}\\\n        -lgprof %{static:-a archive} %{static|mt|pthread:-lpthread} -lc\\\n-       %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n-   /usr/lib/pa20_64/milli.a\"\n+       %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\"\n #else\n #define LIB_SPEC \\\n   \"%{!shared:\\\n      %{!p:%{!pg: %{static|mt|pthread:-lpthread} -lc\\\n \t    %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{p:%{!pg:%{static:%{mgnu-ld:-a shared}%{!mgnu-ld:-a archive_shared}}\\\n-\t   -lprof %{static:-a archive} %{shatic|mt|pthread:-lpthread} -lc\\\n+\t   -lprof %{static:-a archive} %{static|mt|pthread:-lpthread} -lc\\\n \t   %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n      %{pg:%{static:%{mgnu-ld:-a shared}%{!mgnu-ld:-a archive_shared}}\\\n        -lgprof %{static:-a archive} %{static|mt|pthread:-lpthread} -lc\\\n-       %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n-   /usr/lib/pa20_64/milli.a\"\n+       %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\"\n #endif\n \n+/* The libgcc_stub.a and milli.a libraries need to come last.  */\n+#undef LINK_GCC_C_SEQUENCE_SPEC\n+#define LINK_GCC_C_SEQUENCE_SPEC \"\\\n+  %G %L %G %{!nostdlib:%{!nodefaultlibs:%{!shared:-lgcc_stub}\\\n+  /usr/lib/pa20_64/milli.a}}\"\n+\n /* Under hpux11, the normal location of the `ld' and `as' programs is the\n    /usr/ccs/bin directory.  */\n \n@@ -326,16 +330,7 @@ do {\t\t\t\t\t\t\t\t\\\n    the array.  DT_FINI_ARRAY is supposed to be executed in the opposite\n    order.\n \n-   The second hack is stubs for __cxa_finalize and _Jv_RegisterClasses.\n-   The HP implementation of undefined weak symbols is broken.  The linker\n-   and dynamic loader both search for undefined weak symbols contrary the\n-   generic System V ABI.  An undefined weak symbol should resolve to a\n-   value of 0 rather than causing an error.  The prototypes for\n-   __cxa_finalize and _Jv_RegisterClasses in crtstuff.c are weak when\n-   weak is supported (GNU as), so in theory a strong define should override\n-   the stub functions provided here.\n-\n-   The final hack is a set of plabels to implement the effect of\n+   The second hack is a set of plabels to implement the effect of\n    CRT_CALL_STATIC_FUNCTION.  HP-UX 11 only supports DI_INIT_ARRAY and\n    DT_FINI_ARRAY and they put the arrays in .init and .fini, rather than\n    in .init_array and .fini_array.  The standard defines for .init and\n@@ -351,25 +346,6 @@ do {\t\t\t\t\t\t\t\t\\\n    either using the linker +init command or a plabel, run before the\n    initializers specified here.  */\n \n-/* We need a __cxa_finalize stub if CRTSTUFFS_O is defined.  */\n-#ifdef CRTSTUFFS_O\n-#define PA_CXA_FINALIZE_STUB \\\n-extern void __cxa_finalize (void *) TARGET_ATTRIBUTE_WEAK;\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__cxa_finalize (void *p __attribute__((unused))) {}\n-#else\n-#define PA_CXA_FINALIZE_STUB\n-#endif\n-\n-/* We need a _Jv_RegisterClasses stub if JCR_SECTION_NAME is defined.  */\n-#ifdef JCR_SECTION_NAME\n-#define PA_JV_REGISTERCLASSES_STUB \\\n-void\t\t\t\t\t\t\t\t\t\\\n-_Jv_RegisterClasses (void *p __attribute__((unused))) {}\n-#else\n-#define PA_JV_REGISTERCLASSES_STUB\n-#endif\n-\n /* We need to add frame_dummy to the initializer list if EH_FRAME_SECTION_NAME\n    or JCR_SECTION_NAME is defined.  */\n #if defined(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n@@ -378,7 +354,10 @@ _Jv_RegisterClasses (void *p __attribute__((unused))) {}\n #define PA_INIT_FRAME_DUMMY_ASM_OP \"\"\n #endif\n \n-#define PA_INIT_FINI_HACK \\\n+/* The following hack sets up the .init, .init_array, .fini and\n+   .fini_array sections.  */\n+#define PA_CRTBEGIN_HACK \\\n+asm (TEXT_SECTION_ASM_OP);\t\t\t\t\t\t\\\n static void __attribute__((used))\t\t\t\t\t\\\n __do_global_ctors_aux (void)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -389,42 +368,52 @@ __do_global_ctors_aux (void)\t\t\t\t\t\t\\\n     (*p) ();\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-PA_CXA_FINALIZE_STUB\t\t\t\t\t\t\t\\\n-PA_JV_REGISTERCLASSES_STUB\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n asm (HP_INIT_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".align 8\");\t\t\t\t\t\t\t\\\n asm (\".dword P%__do_global_ctors_aux\");\t\t\t\t\t\\\n asm (PA_INIT_FRAME_DUMMY_ASM_OP);\t\t\t\t\t\\\n asm (GNU_INIT_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".align 8\");\t\t\t\t\t\t\t\\\n asm (\".dword P%__do_global_ctors_aux\");\t\t\t\t\t\\\n asm (PA_INIT_FRAME_DUMMY_ASM_OP);\t\t\t\t\t\\\n asm (HP_FINI_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".align 8\");\t\t\t\t\t\t\t\\\n asm (\".dword P%__do_global_dtors_aux\");\t\t\t\t\t\\\n asm (GNU_FINI_ARRAY_SECTION_ASM_OP);\t\t\t\t\t\\\n+asm (\".align 8\");\t\t\t\t\t\t\t\\\n asm (\".dword P%__do_global_dtors_aux\")\n \n /* The following two variants of DTOR_LIST_BEGIN are identical to those\n-   in crtstuff.c except for the addition of the above init-fini hack.  */\n+   in crtstuff.c except for the addition of the above crtbegin hack.  */\n #ifdef DTORS_SECTION_ASM_OP\n #define DTOR_LIST_BEGIN \\\n asm (DTORS_SECTION_ASM_OP);\t\t\t\t\t\t\\\n STATIC func_ptr __DTOR_LIST__[1]\t\t\t\t\t\\\n   __attribute__ ((aligned(sizeof(func_ptr))))\t\t\t\t\\\n   = { (func_ptr) (-1) };\t\t\t\t\t\t\\\n-PA_INIT_FINI_HACK\n+PA_CRTBEGIN_HACK\n #else\n #define DTOR_LIST_BEGIN \\\n STATIC func_ptr __DTOR_LIST__[1]\t\t\t\t\t\\\n   __attribute__ ((section(\".dtors\"), aligned(sizeof(func_ptr))))\t\\\n   = { (func_ptr) (-1) };\t\t\t\t\t\t\\\n-PA_INIT_FINI_HACK\n+PA_CRTBEGIN_HACK\n #endif\n \n /* If using HP ld do not call pxdb.  Use size as a program that does nothing\n    and returns 0.  /bin/true cannot be used because it is a script without\n    an interpreter.  */\n #define INIT_ENVIRONMENT \"LD_PXDB=/usr/ccs/bin/size\"\n \n-/* The HPUX dynamic linker objects to weak symbols with no\n-   definitions, so do not use them in gthr-posix.h.  */\n+/* The HPUX dynamic linker objects to undefined weak symbols, so do\n+   not use them in gthr-posix.h.  */\n #define GTHREAD_USE_WEAK 0\n+\n+/* We don't want undefined weak references to __register_frame_info,\n+   __deregister_frame_info, _Jv_RegisterClasses and __cxa_finalize\n+   introduced by crtbegin.o.  The GNU linker only resolves weak\n+   references if they appear in a shared library.  Thus, it would be\n+   impossible to create a static executable if the symbols were weak.\n+   So, the best solution seems to be to make the symbols strong and\n+   provide an archive library of empty stub functions.  */\n+#define TARGET_ATTRIBUTE_WEAK"}, {"sha": "b3c412eb675cdecf32a107c6ce21b6a546de13cf", "filename": "gcc/config/pa/stublib.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig%2Fpa%2Fstublib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig%2Fpa%2Fstublib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fstublib.c?ref=8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "patch": "@@ -0,0 +1,63 @@\n+/* Stub functions.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#ifdef L_register_frame_info\n+struct object;\n+void  __register_frame_info (const void * __attribute__((unused)),\n+\t\t\t     struct object * __attribute__((unused)));\n+void\n+__register_frame_info (const void *p, struct object *ob)\n+{\n+}\n+#endif\n+\n+#ifdef L_deregister_frame_info\n+void *__deregister_frame_info (const void * __attribute__((unused)));\n+void *\n+__deregister_frame_info (const void *p)\n+{\n+  return (void *)0;\n+}\n+#endif\n+\n+#ifdef L_cxa_finalize\n+void __cxa_finalize (void * __attribute__((unused)));\n+void\n+__cxa_finalize (void *p)\n+{\n+}\n+#endif\n+\n+#ifdef L_Jv_RegisterClasses\n+void _Jv_RegisterClasses (void * __attribute__((unused)));\n+void\n+_Jv_RegisterClasses (void *p)\n+{\n+}\n+#endif"}, {"sha": "9d4a545f16c90f34b910e646fa92ebbc5902eca4", "filename": "gcc/config/pa/t-pa64", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig%2Fpa%2Ft-pa64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b89a26ac1e2b36431d3aed223f831d4ff6766ee/gcc%2Fconfig%2Fpa%2Ft-pa64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa64?ref=8b89a26ac1e2b36431d3aed223f831d4ff6766ee", "patch": "@@ -1,2 +1,28 @@\n TARGET_LIBGCC2_CFLAGS = -fPIC -Dpa64=1 -DELF=1 -mlong-calls\n-LIB2FUNCS_EXTRA=quadlib.c\n+LIB2FUNCS_EXTRA = quadlib.c\n+LIBGCCSTUB_OBJS = rfi-stub.o dfi-stub.o jvrc-stub.o cxaf-stub.o\n+\n+stublib.c: $(srcdir)/config/pa/stublib.c\n+\trm -f stublib.c\n+\tcp $(srcdir)/config/pa/stublib.c .\n+\n+rfi-stub.o: stublib.c\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_register_frame_info stublib.c \\\n+\t  -o rfi-stub.o\n+\n+dfi-stub.o: stublib.c\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_deregister_frame_info stublib.c \\\n+\t  -o dfi-stub.o\n+\n+cxaf-stub.o: stublib.c\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_cxa_finalize stublib.c \\\n+\t  -o cxaf-stub.o\n+\n+jvrc-stub.o: stublib.c\n+\t$(GCC_FOR_TARGET) -c -O2 -DL_Jv_RegisterClasses stublib.c \\\n+\t  -o jvrc-stub.o\n+\n+libgcc_stub.a: $(LIBGCCSTUB_OBJS)\n+\t-rm -rf libgcc_stub.a\n+\t$(AR) rc libgcc_stub.a $(LIBGCCSTUB_OBJS)\n+\t$(RANLIB) libgcc_stub.a"}]}