{"sha": "284c32cfd8c0626f0a3db910aef583f75067a9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg0YzMyY2ZkOGMwNjI2ZjBhM2RiOTEwYWVmNTgzZjc1MDY3YTljNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-09T15:51:20Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-09T15:51:20Z"}, "message": "re PR target/50751 (SH Target: Displacement addressing does not work for QImode and HImode)\n\n\tPR target/50751\n\t* config/sh/sh.md (*extendqisi2_compact_reg, *extendhisi2_compact_reg):\n\tUse arith_reg_operand predicate instead of register_operand.\n\t* config/sh/predicates.md (movsrc_no_disp_mem_operand): Accept\n\tonly mem, simplify.\n\nFrom-SVN: r190257", "tree": {"sha": "2175d278e8c3b24fe039200a7a21cea9b723f21a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2175d278e8c3b24fe039200a7a21cea9b723f21a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/284c32cfd8c0626f0a3db910aef583f75067a9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284c32cfd8c0626f0a3db910aef583f75067a9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284c32cfd8c0626f0a3db910aef583f75067a9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284c32cfd8c0626f0a3db910aef583f75067a9c5/comments", "author": null, "committer": null, "parents": [{"sha": "3eda5123a4985b89bb748d98258f63f9e343c294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eda5123a4985b89bb748d98258f63f9e343c294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eda5123a4985b89bb748d98258f63f9e343c294"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "d6631a91108c8b2444d371e19722f8f8bb85dfd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284c32cfd8c0626f0a3db910aef583f75067a9c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284c32cfd8c0626f0a3db910aef583f75067a9c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=284c32cfd8c0626f0a3db910aef583f75067a9c5", "patch": "@@ -1,3 +1,11 @@\n+2012-08-09  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/50751\n+\t* config/sh/sh.md (*extendqisi2_compact_reg, *extendhisi2_compact_reg):\n+\tUse arith_reg_operand predicate instead of register_operand.\n+\t* config/sh/predicates.md (movsrc_no_disp_mem_operand): Accept\n+\tonly mem, simplify.\n+\n 2012-08-09  Uros Bizjak  <ubizjak@gmail.com>\n \n         * config/alpha/alpha.c (alpha_pad_noreturn): Rename to ..."}, {"sha": "588e25c23fae98f97edec50d8cf9fa1c8f8fff39", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284c32cfd8c0626f0a3db910aef583f75067a9c5/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284c32cfd8c0626f0a3db910aef583f75067a9c5/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=284c32cfd8c0626f0a3db910aef583f75067a9c5", "patch": "@@ -428,28 +428,12 @@\n   return general_operand (op, mode);\n })\n \n-;; Same as movsrc_operand, but rejects displacement addressing.\n+;; Returns 1 if OP is a MEM that does not use displacement addressing.\n \n (define_predicate \"movsrc_no_disp_mem_operand\"\n-  (match_code \"subreg,reg,const_int,const_double,mem,symbol_ref,label_ref,const,const_vector\")\n+  (match_code \"mem\")\n {\n-  if (!general_movsrc_operand (op, mode))\n-    return 0;\n-\n-  if ((mode == QImode || mode == HImode)\n-      && mode == GET_MODE (op)\n-      && (MEM_P (op)\n-\t  || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))))\n-    {\n-      rtx x = XEXP ((MEM_P (op) ? op : SUBREG_REG (op)), 0);\n-\n-      if (GET_CODE (x) == PLUS\n-\t  && REG_P (XEXP (x, 0))\n-\t  && CONST_INT_P (XEXP (x, 1)))\n-\treturn 0;\n-    }\n-\n-  return 1;\n+  return general_movsrc_operand (op, mode) && satisfies_constraint_Snd (op);\n })\n \n ;; Returns 1 if OP can be a destination of a move. Same as"}, {"sha": "0d6f161acb9917ec7ce71f433a4c77b6b9518497", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284c32cfd8c0626f0a3db910aef583f75067a9c5/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284c32cfd8c0626f0a3db910aef583f75067a9c5/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=284c32cfd8c0626f0a3db910aef583f75067a9c5", "patch": "@@ -4819,14 +4819,14 @@ label:\n \n (define_insn \"*extendqisi2_compact_reg\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n+\t(sign_extend:SI (match_operand:QI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH1\"\n   \"exts.b\t%1,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*extendhisi2_compact_reg\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+\t(sign_extend:SI (match_operand:HI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH1\"\n   \"exts.w\t%1,%0\"\n   [(set_attr \"type\" \"arith\")])"}]}