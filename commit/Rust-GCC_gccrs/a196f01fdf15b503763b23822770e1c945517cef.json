{"sha": "a196f01fdf15b503763b23822770e1c945517cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5NmYwMWZkZjE1YjUwMzc2M2IyMzgyMjc3MGUxYzk0NTUxN2NlZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-06T03:58:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-06T03:58:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r914", "tree": {"sha": "92e713e39ba2ef1c3fd381f48d771f6b40b2d20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92e713e39ba2ef1c3fd381f48d771f6b40b2d20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a196f01fdf15b503763b23822770e1c945517cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a196f01fdf15b503763b23822770e1c945517cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a196f01fdf15b503763b23822770e1c945517cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a196f01fdf15b503763b23822770e1c945517cef/comments", "author": null, "committer": null, "parents": [{"sha": "c377a5902350ca6ef843d256485263ef1880b614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c377a5902350ca6ef843d256485263ef1880b614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c377a5902350ca6ef843d256485263ef1880b614"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "e4ddf10c98275d9e1c6a3c9293c05fb5a5eb413f", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a196f01fdf15b503763b23822770e1c945517cef/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a196f01fdf15b503763b23822770e1c945517cef/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=a196f01fdf15b503763b23822770e1c945517cef", "patch": "@@ -81,6 +81,8 @@\n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, NA)\t\\\n   do { fprintf ((FILE), \"\\t.file\\t'%s'\\n\", (NA)); } while (0)\n \n+/* This may not matter anymore, now that svr3.h overrides\n+   ASM_GENERATE_INTERNAL_LABEL and ASM_OUTPUT_INTERNAL_LABEL.  */\n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n /* "}, {"sha": "9d70cbf0ae6d5a1f6dc355632542ae02a92b1f30", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a196f01fdf15b503763b23822770e1c945517cef/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a196f01fdf15b503763b23822770e1c945517cef/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=a196f01fdf15b503763b23822770e1c945517cef", "patch": "@@ -161,6 +161,30 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n #undef ASM_OUTPUT_LABELREF\n #define ASM_OUTPUT_LABELREF(FILE,NAME) fprintf (FILE, \"_%s\", NAME)\n \n+/* This is how to output an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+\n+   For most svr3 systems, the convention is that any symbol which begins\n+   with a period is not put into the linker symbol table by the assembler.\n+*/\n+\n+#undef ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.\n+\n+   For most svr3 systems, the convention is that any symbol which begins\n+   with a period is not put into the linker symbol table by the assembler.\n+*/\n+\n+#undef ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf (LABEL, \".%s%d\", PREFIX, NUM)\n+\n /* Support const sections and the ctors and dtors sections for g++.\n    Note that there appears to be two different ways to support const\n    sections at the moment.  You can either #define the symbol"}]}