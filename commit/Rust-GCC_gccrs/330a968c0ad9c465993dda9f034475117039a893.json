{"sha": "330a968c0ad9c465993dda9f034475117039a893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMwYTk2OGMwYWQ5YzQ2NTk5M2RkYTlmMDM0NDc1MTE3MDM5YTg5Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-06T08:25:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-06T08:25:12Z"}, "message": "genmatch.c (c_expr::gen_transform): Emit newlines from line number changes rather than after every semicolon.\n\n2019-12-06  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (c_expr::gen_transform): Emit newlines from line\n\tnumber changes rather than after every semicolon.\n\nFrom-SVN: r279034", "tree": {"sha": "5f1ef9664b9286104692a944806618656a0e86a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f1ef9664b9286104692a944806618656a0e86a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/330a968c0ad9c465993dda9f034475117039a893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330a968c0ad9c465993dda9f034475117039a893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330a968c0ad9c465993dda9f034475117039a893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330a968c0ad9c465993dda9f034475117039a893/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ef278569f60a2c1556f1752aeba39c586521371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef278569f60a2c1556f1752aeba39c586521371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef278569f60a2c1556f1752aeba39c586521371"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "e626e459c4a5110ed9b6049223466c840d24d7ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330a968c0ad9c465993dda9f034475117039a893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330a968c0ad9c465993dda9f034475117039a893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=330a968c0ad9c465993dda9f034475117039a893", "patch": "@@ -1,3 +1,8 @@\n+2019-12-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (c_expr::gen_transform): Emit newlines from line\n+\tnumber changes rather than after every semicolon.\n+\n 2019-12-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92819"}, {"sha": "4a21bc93da73cc2d21f7cb0a2f220bfd9ec55e18", "filename": "gcc/genmatch.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330a968c0ad9c465993dda9f034475117039a893/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330a968c0ad9c465993dda9f034475117039a893/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=330a968c0ad9c465993dda9f034475117039a893", "patch": "@@ -2599,10 +2599,22 @@ c_expr::gen_transform (FILE *f, int indent, const char *dest,\n     fprintf_indent (f, indent, \"%s = \", dest);\n \n   unsigned stmt_nr = 1;\n+  int prev_line = -1;\n   for (unsigned i = 0; i < code.length (); ++i)\n     {\n       const cpp_token *token = &code[i];\n \n+      /* We can't recover from all lexing losses but we can roughly restore line\n+         breaks from location info.  */\n+      const line_map_ordinary *map;\n+      linemap_resolve_location (line_table, token->src_loc,\n+\t\t\t\tLRK_SPELLING_LOCATION, &map);\n+      expanded_location loc = linemap_expand_location (line_table, map,\n+\t\t\t\t\t\t       token->src_loc);\n+      if (prev_line != -1 && loc.line != prev_line)\n+\tfputc ('\\n', f);\n+      prev_line = loc.line;\n+\n       /* Replace captures for code-gen.  */\n       if (token->type == CPP_ATSIGN)\n \t{\n@@ -2653,11 +2665,11 @@ c_expr::gen_transform (FILE *f, int indent, const char *dest,\n       if (token->type == CPP_SEMICOLON)\n \t{\n \t  stmt_nr++;\n-\t  fputc ('\\n', f);\n \t  if (dest && stmt_nr == nr_stmts)\n \t    fprintf_indent (f, indent, \"%s = \", dest);\n \t}\n     }\n+  fputc ('\\n', f);\n }\n \n /* Generate transform code for a capture.  */"}]}