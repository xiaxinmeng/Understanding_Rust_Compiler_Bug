{"sha": "7e8ead54c20a5d007f2f4169acd9353403a3fc38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U4ZWFkNTRjMjBhNWQwMDdmMmY0MTY5YWNkOTM1MzQwM2EzZmMzOA==", "commit": {"author": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-21T22:27:06Z"}, "committer": {"name": "Dennis Glatting", "email": "dennisg@gnu.org", "date": "1991-11-21T22:27:06Z"}, "message": "changed hash value calculation.\n\nfunc name changed from hashValue() to hashIndex().  the\nfunc really calculated a index anyway.\nchanged hash func impl.  essentually it was calculating a hash value\nfrom a hash value.  this is a implementation thing.\n\nFrom-SVN: r66", "tree": {"sha": "fcc27f26832087155abd2908fa1af985a11a0bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcc27f26832087155abd2908fa1af985a11a0bfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e8ead54c20a5d007f2f4169acd9353403a3fc38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8ead54c20a5d007f2f4169acd9353403a3fc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8ead54c20a5d007f2f4169acd9353403a3fc38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8ead54c20a5d007f2f4169acd9353403a3fc38/comments", "author": null, "committer": null, "parents": [{"sha": "c97e400f3060856d3717f5a6d1460529b0135728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97e400f3060856d3717f5a6d1460529b0135728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97e400f3060856d3717f5a6d1460529b0135728"}], "stats": {"total": 41, "additions": 12, "deletions": 29}, "files": [{"sha": "620ff79664c7fb720edfb5bd1b64bafd56f4342c", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e8ead54c20a5d007f2f4169acd9353403a3fc38/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e8ead54c20a5d007f2f4169acd9353403a3fc38/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=7e8ead54c20a5d007f2f4169acd9353403a3fc38", "patch": "@@ -16,10 +16,13 @@\n  * along with this program; if not, write to the Free Software\n  * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n  * \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.c,v 0.4 1991/11/19 12:34:41 dennisg Exp dennisg $\n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/lib/RCS/hash.c,v 0.5 1991/11/20 23:29:20 dennisg Exp dennisg $\n   $Author: dennisg $\n-  $Date: 1991/11/19 12:34:41 $\n+  $Date: 1991/11/20 23:29:20 $\n   $Log: hash.c,v $\n+ * Revision 0.5  1991/11/20  23:29:20  dennisg\n+ * converted hashIndex() to a inline.\n+ *\n  * Revision 0.4  1991/11/19  12:34:41  dennisg\n  * bug in hash_delete().  It was using void* to obtain nodes to\n  * pass to hash_remove().  The value passed to hash_removed() is a\n@@ -60,24 +63,18 @@\n \t(((cache)->sizeOfHash * 175 ) / 100 )\n \n \n-static inline u_int hashValue( Cache_t theCache, void* aKey ) {\n+static inline u_int hashIndex( Cache_t theCache, void* aKey ) {\n \n-  u_int hash = 0;\n-  int   i;\n-  \n-  \n-  assert( theCache->numberOfMaskBits );\n-  for( i = 0; i < ( sizeof( aKey ) * 8 ); i += theCache->numberOfMaskBits )\n-    hash ^= (( u_int )aKey ) >> i ;\n \n-  return ( hash & theCache->mask ) % theCache->sizeOfHash;\n+\tassert (sizeof (u_int) == sizeof (void*));\n+\t\n+\treturn ((u_int)aKey) % theCache->sizeOfHash ;\n }\n \n \n Cache_t hash_new( u_int sizeOfHash ) {\n \n   Cache_t retCache;\n-  int     i;\n \n \n   assert( sizeOfHash );\n@@ -98,20 +95,6 @@ Cache_t hash_new( u_int sizeOfHash ) {\n   \n   retCache->sizeOfHash = sizeOfHash;\n \n-                                                /* Calculate the number of \n-                                                  bits required to represent \n-                                                  the hash mask. */\n-  retCache->numberOfMaskBits = \n-    ceil( log( retCache->sizeOfHash ) / log( 2 ));\n-\n-                                                /* Form a bit mask for the \n-                                                  hash. */\n-  for( i = 0; i < retCache->numberOfMaskBits; ++i )\n-    retCache->mask = ( retCache->mask << 1 ) | 0x01 ;\n-\n-  assert( retCache->numberOfMaskBits );\n-  assert( retCache->mask );\n-\n   return retCache;\n }\n \n@@ -135,7 +118,7 @@ void hash_delete( Cache_t theCache ) {\n \n void hash_add( Cache_t* theCache, void* aKey, void* aValue ) {\n \n-  u_int       indx = hashValue( *theCache, aKey );\n+  u_int       indx = hashIndex( *theCache, aKey );\n   CacheNode_t aCacheNode = calloc( 1, sizeof( CacheNode ));\n \n \n@@ -207,7 +190,7 @@ void hash_add( Cache_t* theCache, void* aKey, void* aValue ) {\n \n void hash_remove( Cache_t theCache, void* aKey ) {\n \n-  u_int       indx = hashValue( theCache, aKey );\n+  u_int       indx = hashIndex( theCache, aKey );\n   CacheNode_t aCacheNode = ( *theCache->theNodeTable )[ indx ];\n   \n   \n@@ -247,7 +230,7 @@ void hash_remove( Cache_t theCache, void* aKey ) {\n \n void* hash_value_for_key( Cache_t theCache, void* aKey ) {\n \n-  u_int       indx = hashValue( theCache, aKey );\n+  u_int       indx = hashIndex( theCache, aKey );\n   CacheNode_t aCacheNode = ( *theCache->theNodeTable )[ indx ];\n   void*       retVal = NULL;\n   "}]}