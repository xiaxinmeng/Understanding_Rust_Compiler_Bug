{"sha": "3629ff8ad6b73b35f4168df465f47f5a302691e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyOWZmOGFkNmI3M2IzNWY0MTY4ZGY0NjVmNDdmNWEzMDI2OTFlMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-01-08T15:30:24Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2020-01-08T15:30:24Z"}, "message": "Use cgraph_node::dump_{asm_},name where possible.\n\n2020-01-08  Martin Liska  <mliska@suse.cz>\n\n\t* cgraph.c (cgraph_node::dump): Use ::dump_name or\n\t::dump_asm_name instead of (::name or ::asm_name).\n\t* cgraphclones.c (symbol_table::materialize_all_clones): Likewise.\n\t* cgraphunit.c (walk_polymorphic_call_targets): Likewise.\n\t(analyze_functions): Likewise.\n\t(expand_all_functions): Likewise.\n\t* ipa-cp.c (ipcp_cloning_candidate_p): Likewise.\n\t(propagate_bits_across_jump_function): Likewise.\n\t(dump_profile_updates): Likewise.\n\t(ipcp_store_bits_results): Likewise.\n\t(ipcp_store_vr_results): Likewise.\n\t* ipa-devirt.c (dump_targets): Likewise.\n\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n\t* ipa-hsa.c (check_warn_node_versionable): Likewise.\n\t(process_hsa_functions): Likewise.\n\t* ipa-icf.c (sem_item_optimizer::merge_classes): Likewise.\n\t(set_alias_uids): Likewise.\n\t* ipa-inline-transform.c (save_inline_function_body): Likewise.\n\t* ipa-inline.c (recursive_inlining): Likewise.\n\t(inline_to_all_callers_1): Likewise.\n\t(ipa_inline): Likewise.\n\t* ipa-profile.c (ipa_propagate_frequency_1): Likewise.\n\t(ipa_propagate_frequency): Likewise.\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Likewise.\n\t(remove_described_reference): Likewise.\n\t* ipa-pure-const.c (worse_state): Likewise.\n\t(check_retval_uses): Likewise.\n\t(analyze_function): Likewise.\n\t(propagate_pure_const): Likewise.\n\t(propagate_nothrow): Likewise.\n\t(dump_malloc_lattice): Likewise.\n\t(propagate_malloc): Likewise.\n\t(pass_local_pure_const::execute): Likewise.\n\t* ipa-visibility.c (optimize_weakref): Likewise.\n\t(function_and_variable_visibility): Likewise.\n\t* ipa.c (symbol_table::remove_unreachable_nodes): Likewise.\n\t(ipa_discover_variable_flags): Likewise.\n\t* lto-streamer-out.c (output_function): Likewise.\n\t(output_constructor): Likewise.\n\t* tree-inline.c (copy_bb): Likewise.\n\t* tree-ssa-structalias.c (ipa_pta_execute): Likewise.\n\t* varpool.c (symbol_table::remove_unreferenced_decls): Likewise.\n2020-01-08  Martin Liska  <mliska@suse.cz>\n\n\t* lto-partition.c (add_symbol_to_partition_1): Use ::dump_name or\n\t::dump_asm_name instead of (::name or ::asm_name).\n\t(lto_balanced_map): Likewise.\n\t(promote_symbol): Likewise.\n\t(rename_statics): Likewise.\n\t* lto.c (lto_wpa_write_files): Likewise.\n2020-01-08  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/ipa/ipa-icf-1.c: Update expected scanned output.\n\t* gcc.dg/ipa/ipa-icf-10.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-11.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-12.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-13.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-16.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-18.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-2.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-20.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-21.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-23.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-25.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-26.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-27.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-3.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-35.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-36.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-37.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-38.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-5.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-7.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-8.c: Likewise.\n\t* gcc.dg/ipa/ipa-icf-merge-1.c: Likewise.\n\t* gcc.dg/ipa/pr64307.c: Likewise.\n\t* gcc.dg/ipa/pr90555.c: Likewise.\n\t* gcc.dg/ipa/propmalloc-1.c: Likewise.\n\t* gcc.dg/ipa/propmalloc-2.c: Likewise.\n\t* gcc.dg/ipa/propmalloc-3.c: Likewise.\n\nFrom-SVN: r280009", "tree": {"sha": "0b3518f6ff58c9f238c2250a493977778aeae5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3518f6ff58c9f238c2250a493977778aeae5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3629ff8ad6b73b35f4168df465f47f5a302691e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3629ff8ad6b73b35f4168df465f47f5a302691e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3629ff8ad6b73b35f4168df465f47f5a302691e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3629ff8ad6b73b35f4168df465f47f5a302691e2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1030b5cd3c99f548b08b752a711f7cb59a6d92e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1030b5cd3c99f548b08b752a711f7cb59a6d92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1030b5cd3c99f548b08b752a711f7cb59a6d92e"}], "stats": {"total": 345, "additions": 215, "deletions": 130}, "files": [{"sha": "f960eb4be6820e2187bcac3d024b0ee9954cbeba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -1,3 +1,48 @@\n+2020-01-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraph.c (cgraph_node::dump): Use ::dump_name or\n+\t::dump_asm_name instead of (::name or ::asm_name).\n+\t* cgraphclones.c (symbol_table::materialize_all_clones): Likewise.\n+\t* cgraphunit.c (walk_polymorphic_call_targets): Likewise.\n+\t(analyze_functions): Likewise.\n+\t(expand_all_functions): Likewise.\n+\t* ipa-cp.c (ipcp_cloning_candidate_p): Likewise.\n+\t(propagate_bits_across_jump_function): Likewise.\n+\t(dump_profile_updates): Likewise.\n+\t(ipcp_store_bits_results): Likewise.\n+\t(ipcp_store_vr_results): Likewise.\n+\t* ipa-devirt.c (dump_targets): Likewise.\n+\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n+\t* ipa-hsa.c (check_warn_node_versionable): Likewise.\n+\t(process_hsa_functions): Likewise.\n+\t* ipa-icf.c (sem_item_optimizer::merge_classes): Likewise.\n+\t(set_alias_uids): Likewise.\n+\t* ipa-inline-transform.c (save_inline_function_body): Likewise.\n+\t* ipa-inline.c (recursive_inlining): Likewise.\n+\t(inline_to_all_callers_1): Likewise.\n+\t(ipa_inline): Likewise.\n+\t* ipa-profile.c (ipa_propagate_frequency_1): Likewise.\n+\t(ipa_propagate_frequency): Likewise.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Likewise.\n+\t(remove_described_reference): Likewise.\n+\t* ipa-pure-const.c (worse_state): Likewise.\n+\t(check_retval_uses): Likewise.\n+\t(analyze_function): Likewise.\n+\t(propagate_pure_const): Likewise.\n+\t(propagate_nothrow): Likewise.\n+\t(dump_malloc_lattice): Likewise.\n+\t(propagate_malloc): Likewise.\n+\t(pass_local_pure_const::execute): Likewise.\n+\t* ipa-visibility.c (optimize_weakref): Likewise.\n+\t(function_and_variable_visibility): Likewise.\n+\t* ipa.c (symbol_table::remove_unreachable_nodes): Likewise.\n+\t(ipa_discover_variable_flags): Likewise.\n+\t* lto-streamer-out.c (output_function): Likewise.\n+\t(output_constructor): Likewise.\n+\t* tree-inline.c (copy_bb): Likewise.\n+\t* tree-ssa-structalias.c (ipa_pta_execute): Likewise.\n+\t* varpool.c (symbol_table::remove_unreferenced_decls): Likewise.\n+\n 2020-01-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/93199"}, {"sha": "bd9e5a172887d47cb2d9a40501f1291e25e8bef1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -1948,7 +1948,7 @@ cgraph_node::dump (FILE *f)\n   if (tp_first_run > 0)\n     fprintf (f, \" first_run:%\" PRId64, (int64_t) tp_first_run);\n   if (origin)\n-    fprintf (f, \" nested in:%s\", origin->asm_name ());\n+    fprintf (f, \" nested in:%s\", origin->dump_asm_name ());\n   if (gimple_has_body_p (decl))\n     fprintf (f, \" body\");\n   if (process)"}, {"sha": "789564ba335107fadd0b195c6a7f49942412be8f", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -1148,8 +1148,7 @@ symbol_table::materialize_all_clones (void)\n \t\t  if (symtab->dump_file)\n \t\t    {\n \t\t      fprintf (symtab->dump_file, \"cloning %s to %s\\n\",\n-\t\t\t       xstrdup_for_dump (node->clone_of->name ()),\n-\t\t\t       xstrdup_for_dump (node->name ()));\n+\t\t\t       node->clone_of->dump_name (), node->name ());\n \t\t      if (node->clone.tree_map)\n \t\t        {\n \t\t\t  unsigned int i;"}, {"sha": "c4ddc61c4d6296fba46d54861711afa80fe8bcb9", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -1020,7 +1020,8 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n             {\n \t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, edge->call_stmt,\n \t\t\t       \"devirtualizing call in %s to %s\\n\",\n-\t\t\t       edge->caller->name (), target->name ());\n+\t\t\t       edge->caller->dump_name (),\n+\t\t\t       target->dump_name ());\n \t    }\n \n \t  edge->make_direct (target);\n@@ -1167,7 +1168,7 @@ analyze_functions (bool first_time)\n \t\tfprintf (symtab->dump_file, \"Trivially needed symbols:\");\n \t      changed = true;\n \t      if (symtab->dump_file)\n-\t\tfprintf (symtab->dump_file, \" %s\", node->asm_name ());\n+\t\tfprintf (symtab->dump_file, \" %s\", node->dump_asm_name ());\n \t      if (!changed && symtab->dump_file)\n \t\tfprintf (symtab->dump_file, \"\\n\");\n \t    }\n@@ -1324,7 +1325,7 @@ analyze_functions (bool first_time)\n       if (!node->aux && !node->referred_to_p ())\n \t{\n \t  if (symtab->dump_file)\n-\t    fprintf (symtab->dump_file, \" %s\", node->name ());\n+\t    fprintf (symtab->dump_file, \" %s\", node->dump_name ());\n \n \t  /* See if the debugger can use anything before the DECL\n \t     passes away.  Perhaps it can notice a DECL that is now a\n@@ -2436,7 +2437,7 @@ expand_all_functions (void)\n \t  if (symtab->dump_file)\n \t    fprintf (symtab->dump_file,\n \t\t     \"Time profile order in expand_all_functions:%s:%d\\n\",\n-\t\t     node->asm_name (), node->tp_first_run);\n+\t\t     node->dump_asm_name (), node->tp_first_run);\n \t  node->process = 0;\n \t  node->expand ();\n \t}"}, {"sha": "7515a9504f601d22222fd87fb71fb783b13f1a90", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -717,7 +717,7 @@ ipcp_cloning_candidate_p (struct cgraph_node *node)\n       if (dump_file)\n \tfprintf (dump_file, \"Not considering %s for cloning; \"\n \t\t \"-fipa-cp-clone disabled.\\n\",\n- \t\t node->name ());\n+\t\t node->dump_name ());\n       return false;\n     }\n \n@@ -726,7 +726,7 @@ ipcp_cloning_candidate_p (struct cgraph_node *node)\n       if (dump_file)\n \tfprintf (dump_file, \"Not considering %s for cloning; \"\n \t\t \"optimizing it for size.\\n\",\n- \t\t node->name ());\n+\t\t node->dump_name ());\n       return false;\n     }\n \n@@ -737,7 +737,7 @@ ipcp_cloning_candidate_p (struct cgraph_node *node)\n     {\n       if (dump_file)\n \tfprintf (dump_file, \"Considering %s for cloning; code might shrink.\\n\",\n- \t\t node->name ());\n+\t\t node->dump_name ());\n       return true;\n     }\n \n@@ -751,20 +751,20 @@ ipcp_cloning_candidate_p (struct cgraph_node *node)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Considering %s for cloning; \"\n \t\t     \"usually called directly.\\n\",\n-\t\t     node->name ());\n+\t\t     node->dump_name ());\n \t  return true;\n \t}\n     }\n   if (!stats.n_hot_calls)\n     {\n       if (dump_file)\n \tfprintf (dump_file, \"Not considering %s for cloning; no hot calls.\\n\",\n-\t\t node->name ());\n+\t\t node->dump_name ());\n       return false;\n     }\n   if (dump_file)\n     fprintf (dump_file, \"Considering %s for cloning.\\n\",\n-\t     node->name ());\n+\t     node->dump_name ());\n   return true;\n }\n \n@@ -2292,7 +2292,7 @@ propagate_bits_across_jump_function (cgraph_edge *cs, int idx,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Setting dest_lattice to bottom, because type of \"\n \t\t \"param %i of %s is NULL or unsuitable for bits propagation\\n\",\n-\t\t idx, cs->callee->name ());\n+\t\t idx, cs->callee->dump_name ());\n \n       return dest_lattice->set_to_bottom ();\n     }\n@@ -4246,7 +4246,7 @@ dump_profile_updates (struct cgraph_node *orig_node,\n   for (cs = new_node->callees; cs; cs = cs->next_callee)\n     {\n       fprintf (dump_file, \"      edge to %s has count \",\n-\t       cs->callee->name ());\n+\t       cs->callee->dump_name ());\n       cs->count.dump (dump_file);\n       fprintf (dump_file, \"\\n\");\n     }\n@@ -4257,7 +4257,7 @@ dump_profile_updates (struct cgraph_node *orig_node,\n   for (cs = orig_node->callees; cs; cs = cs->next_callee)\n     {\n       fprintf (dump_file, \"      edge to %s is left with \",\n-\t       cs->callee->name ());\n+\t       cs->callee->dump_name ());\n       cs->count.dump (dump_file);\n       fprintf (dump_file, \"\\n\");\n     }\n@@ -5675,7 +5675,7 @@ ipcp_store_bits_results (void)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not considering %s for ipa bitwise propagation \"\n \t\t\t\t\"; -fipa-bit-cp: disabled.\\n\",\n-\t\t\t\tnode->name ());\n+\t\t\t\tnode->dump_name ());\n \t  continue;\n \t}\n \n@@ -5751,7 +5751,7 @@ ipcp_store_vr_results (void)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not considering %s for VR discovery \"\n \t\t     \"and propagate; -fipa-ipa-vrp: disabled.\\n\",\n-\t\t     node->name ());\n+\t\t     node->dump_name ());\n \t  continue;\n \t}\n "}, {"sha": "b888186134c71bd10923e6b2da59f5cbf856f0ba", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -3350,8 +3350,7 @@ dump_targets (FILE *f, vec <cgraph_node *> targets, bool verbose)\n       char *name = NULL;\n       if (in_lto_p)\n \tname = cplus_demangle_v3 (targets[i]->asm_name (), 0);\n-      fprintf (f, \" %s/%i\", name ? name : targets[i]->name (),\n-\t       targets[i]->order);\n+      fprintf (f, \" %s\", name ? name : targets[i]->dump_name ());\n       if (in_lto_p)\n \tfree (name);\n       if (!targets[i]->definition)"}, {"sha": "ce2c251693d2f8a1efd98ce877bbbde9eebf1cf1", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -2460,7 +2460,7 @@ analyze_function_body (struct cgraph_node *node, bool early)\n \n   if (dump_file)\n     fprintf (dump_file, \"\\nAnalyzing function body size: %s\\n\",\n-\t     node->name ());\n+\t     node->dump_name ());\n \n   /* When we run into maximal number of entries, we assign everything to the\n      constant truth case.  Be sure to have it in list. */"}, {"sha": "f2980ba36885d678ff31810037ffcf2c18993a2d", "filename": "gcc/ipa-hsa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-hsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-hsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-hsa.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -56,7 +56,7 @@ check_warn_node_versionable (cgraph_node *node)\n     {\n       warning_at (EXPR_LOCATION (node->decl), OPT_Whsa,\n \t\t  \"could not emit HSAIL for function %s: function cannot be \"\n-\t\t  \"cloned\", node->name ());\n+\t\t  \"cloned\", node->dump_name ());\n       return false;\n     }\n   return true;\n@@ -98,7 +98,7 @@ process_hsa_functions (void)\n \n \t  if (dump_file)\n \t    fprintf (dump_file, \"Created a new HSA clone: %s, type: %s\\n\",\n-\t\t     clone->name (),\n+\t\t     clone->dump_name (),\n \t\t     s->m_kind == HSA_KERNEL ? \"kernel\" : \"function\");\n \t}\n       else if (hsa_callable_function_p (node->decl)\n@@ -120,7 +120,7 @@ process_hsa_functions (void)\n \n \t  if (dump_file)\n \t    fprintf (dump_file, \"Created a new HSA function clone: %s\\n\",\n-\t\t     clone->name ());\n+\t\t     clone->dump_name ());\n \t}\n     }\n \n@@ -141,8 +141,8 @@ process_hsa_functions (void)\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file,\n \t\t\t     \"Redirecting edge to HSA function: %s->%s\\n\",\n-\t\t\t     xstrdup_for_dump (e->caller->name ()),\n-\t\t\t     xstrdup_for_dump (e->callee->name ()));\n+\t\t\t     e->caller->dump_name (),\n+\t\t\t     e->callee->dump_name ());\n \t\t}\n \t    }\n "}, {"sha": "17a0ed9760bf2e339f6906091057c26cb1351fe3", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -3322,12 +3322,12 @@ sem_item_optimizer::merge_classes (unsigned int prev_class_count,\n \t      {\n \t\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n \t\t\t\t \"Semantic equality hit:%s->%s\\n\",\n-\t\t\t\t xstrdup_for_dump (source->node->name ()),\n-\t\t\t\t xstrdup_for_dump (alias->node->name ()));\n+\t\t\t\t source->node->dump_name (),\n+\t\t\t\t alias->node->dump_name ());\n \t\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n \t\t\t\t \"Assembler symbol names:%s->%s\\n\",\n-\t\t\t\t xstrdup_for_dump (source->node->asm_name ()),\n-\t\t\t\t xstrdup_for_dump (alias->node->asm_name ()));\n+\t\t\t\t source->node->dump_asm_name (),\n+\t\t\t\t alias->node->dump_asm_name ());\n \t      }\n \n \t    if (lookup_attribute (\"no_icf\", DECL_ATTRIBUTES (alias->decl)))\n@@ -3390,7 +3390,7 @@ set_alias_uids (symtab_node *n, int uid)\n     {\n       if (dump_file)\n \tfprintf (dump_file, \"  Setting points-to UID of [%s] as %d\\n\",\n-\t\t xstrdup_for_dump (ref->referring->asm_name ()), uid);\n+\t\t ref->referring->dump_asm_name (), uid);\n \n       SET_DECL_PT_UID (ref->referring->decl, uid);\n       set_alias_uids (ref->referring, uid);"}, {"sha": "1fe5a5c1c5a809c452f832f33253d0b013fabaf3", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -553,7 +553,7 @@ save_inline_function_body (struct cgraph_node *node)\n \n   if (dump_file)\n     fprintf (dump_file, \"\\nSaving body of %s for later reuse\\n\",\n-\t     node->name ());\n+\t     node->dump_name ());\n  \n   gcc_assert (node == cgraph_node::get (node->decl));\n "}, {"sha": "2a3f31e03a2668af5e9f2c0961b661fcc65d8112", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -1611,8 +1611,7 @@ recursive_inlining (struct cgraph_edge *edge,\n \n   if (dump_file)\n     fprintf (dump_file,\n-\t     \"  Performing recursive inlining on %s\\n\",\n-\t     node->name ());\n+\t     \"  Performing recursive inlining on %s\\n\", node->dump_name ());\n \n   /* Do the inlining and update list of recursive call during process.  */\n   while (!heap.empty ())\n@@ -2396,11 +2395,11 @@ inline_to_all_callers_1 (struct cgraph_node *node, void *data,\n \t  cgraph_node *ultimate = node->ultimate_alias_target ();\n \t  fprintf (dump_file,\n \t\t   \"\\nInlining %s size %i.\\n\",\n-\t\t   ultimate->name (),\n+\t\t   ultimate->dump_name (),\n \t\t   ipa_size_summaries->get (ultimate)->size);\n \t  fprintf (dump_file,\n \t\t   \" Called once from %s %i insns.\\n\",\n-\t\t   node->callers->caller->name (),\n+\t\t   node->callers->caller->dump_name (),\n \t\t   ipa_size_summaries->get (node->callers->caller)->size);\n \t}\n \n@@ -2411,7 +2410,7 @@ inline_to_all_callers_1 (struct cgraph_node *node, void *data,\n       if (dump_file)\n \tfprintf (dump_file,\n \t\t \" Inlined into %s which now has %i size\\n\",\n-\t\t caller->name (),\n+\t\t caller->dump_name (),\n \t\t ipa_size_summaries->get (caller)->size);\n       if (!(*num_calls)--)\n \t{\n@@ -2671,7 +2670,7 @@ ipa_inline (void)\n \t try to flatten itself turning it into a self-recursive\n \t function.  */\n       if (dump_file)\n-\tfprintf (dump_file, \"Flattening %s\\n\", node->name ());\n+\tfprintf (dump_file, \"Flattening %s\\n\", node->dump_name ());\n       flatten_function (node, false, true);\n     }\n "}, {"sha": "017f63e80a30f8064657813c43a08a3422c4c2a7", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -340,7 +340,7 @@ ipa_propagate_frequency_1 (struct cgraph_node *node, void *data)\n \t  {\n \t    if (dump_file && (dump_flags & TDF_DETAILS))\n \t      fprintf (dump_file, \"  Called by %s that is executed once\\n\",\n-\t\t       edge->caller->name ());\n+\t\t       edge->caller->dump_name ());\n \t    d->maybe_unlikely_executed = false;\n \t    ipa_call_summary *s = ipa_call_summaries->get (edge);\n \t    if (s != NULL && s->loop_depth)\n@@ -355,7 +355,7 @@ ipa_propagate_frequency_1 (struct cgraph_node *node, void *data)\n \tcase NODE_FREQUENCY_NORMAL:\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"  Called by %s that is normal or hot\\n\",\n-\t\t     edge->caller->name ());\n+\t\t     edge->caller->dump_name ());\n \t  d->maybe_unlikely_executed = false;\n \t  d->maybe_executed_once = false;\n \t  break;\n@@ -399,7 +399,7 @@ ipa_propagate_frequency (struct cgraph_node *node)\n     return false;\n   gcc_assert (node->analyzed);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"Processing frequency %s\\n\", node->name ());\n+    fprintf (dump_file, \"Processing frequency %s\\n\", node->dump_name ());\n \n   node->call_for_symbol_and_aliases (ipa_propagate_frequency_1, &d,\n \t\t\t\t     true);\n@@ -410,7 +410,7 @@ ipa_propagate_frequency (struct cgraph_node *node)\n        node->only_called_at_startup = true;\n        if (dump_file)\n          fprintf (dump_file, \"Node %s promoted to only called at startup.\\n\",\n-\t\t  node->name ());\n+\t\t  node->dump_name ());\n        changed = true;\n     }\n   if ((d.only_called_at_exit && !d.only_called_at_startup)\n@@ -419,7 +419,7 @@ ipa_propagate_frequency (struct cgraph_node *node)\n        node->only_called_at_exit = true;\n        if (dump_file)\n          fprintf (dump_file, \"Node %s promoted to only called at exit.\\n\",\n-\t\t  node->name ());\n+\t\t  node->dump_name ());\n        changed = true;\n     }\n \n@@ -438,7 +438,7 @@ ipa_propagate_frequency (struct cgraph_node *node)\n \t    {\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"Node %s promoted to hot.\\n\",\n-\t\t\t node->name ());\n+\t\t\t node->dump_name ());\n \t      node->frequency = NODE_FREQUENCY_HOT;\n \t      return true;\n \t    }\n@@ -448,7 +448,7 @@ ipa_propagate_frequency (struct cgraph_node *node)\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Node %s reduced to normal.\\n\",\n-\t\t     node->name ());\n+\t\t     node->dump_name ());\n \t  node->frequency = NODE_FREQUENCY_NORMAL;\n \t  changed = true;\n \t}\n@@ -462,15 +462,15 @@ ipa_propagate_frequency (struct cgraph_node *node)\n       node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n       if (dump_file)\n \tfprintf (dump_file, \"Node %s promoted to unlikely executed.\\n\",\n-\t\t node->name ());\n+\t\t node->dump_name ());\n       changed = true;\n     }\n   else if (d.maybe_executed_once && node->frequency != NODE_FREQUENCY_EXECUTED_ONCE)\n     {\n       node->frequency = NODE_FREQUENCY_EXECUTED_ONCE;\n       if (dump_file)\n \tfprintf (dump_file, \"Node %s promoted to executed once.\\n\",\n-\t\t node->name ());\n+\t\t node->dump_name ());\n       changed = true;\n     }\n   return changed;"}, {"sha": "a6e32a50377ad44630b877ddfd3c1e1a91fd11cd", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -3294,7 +3294,7 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target,\n     {\n       dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, ie->call_stmt,\n \t\t       \"converting indirect call in %s to direct call to %s\\n\",\n-\t\t       ie->caller->name (), callee->name ());\n+\t\t       ie->caller->dump_name (), callee->dump_name ());\n     }\n   if (!speculative)\n     {\n@@ -3489,7 +3489,7 @@ remove_described_reference (symtab_node *symbol, struct ipa_cst_ref_desc *rdesc)\n   to_del->remove_reference ();\n   if (dump_file)\n     fprintf (dump_file, \"ipa-prop: Removed a reference from %s to %s.\\n\",\n-\t     origin->caller->dump_name (), xstrdup_for_dump (symbol->name ()));\n+\t     origin->caller->dump_name (), symbol->dump_name ());\n   return true;\n }\n "}, {"sha": "ccd0918c120c7bd424bca72fb055ac68b099e400", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -500,7 +500,7 @@ worse_state (enum pure_const_state_e *state, bool *looping,\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Dropping state to PURE because call to %s may not \"\n-\t\t \"bind to current def.\\n\", to->name ());\n+\t\t \"bind to current def.\\n\", to->dump_name ());\n       state2 = IPA_PURE;\n     }\n   *state = MAX (*state, state2);\n@@ -874,7 +874,7 @@ check_retval_uses (tree retval, gimple *stmt)\n {  \\\n   if (dump_file && (dump_flags & TDF_DETAILS))  \\\n     fprintf (dump_file, \"\\n%s is not a malloc candidate, reason: %s\\n\", \\\n-\t     (node->name()), (reason));  \\\n+\t     (node->dump_name ()), (reason));  \\\n   return false;  \\\n }\n \n@@ -1037,7 +1037,7 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\n\\n local analysis of %s\\n \",\n-\t       fn->name ());\n+\t       fn->dump_name ());\n     }\n \n   push_cfun (DECL_STRUCT_FUNCTION (decl));\n@@ -1657,7 +1657,7 @@ propagate_pure_const (void)\n \t  w->nonfreeing_fn = !can_free;\n \t  if (!can_free && dump_file)\n \t    fprintf (dump_file, \"Function found not to call free: %s\\n\",\n-\t\t     w->name ());\n+\t\t     w->dump_name ());\n \n \t  if (w_l->state_previously_known != IPA_NEITHER\n \t      && this_state > w_l->state_previously_known)\n@@ -1688,7 +1688,7 @@ propagate_pure_const (void)\n \t\t    if (dump_file)\n \t\t      fprintf (dump_file, \"Function found to be %sconst: %s\\n\",\n \t\t\t       this_looping ? \"looping \" : \"\",\n-\t\t\t       w->name ());\n+\t\t\t       w->dump_name ());\n \t\t  }\n \t\t/* Turning constructor or destructor to non-looping const/pure\n \t\t   enables us to possibly remove the function completely.  */\n@@ -1703,7 +1703,7 @@ propagate_pure_const (void)\n \t\t      fprintf (dump_file,\n \t\t\t       \"Declaration updated to be %sconst: %s\\n\",\n \t\t\t       this_looping ? \"looping \" : \"\",\n-\t\t\t       w->name ());\n+\t\t\t       w->dump_name ());\n \t\t    remove_p |= has_cdtor;\n \t\t  }\n \t\tbreak;\n@@ -1715,7 +1715,7 @@ propagate_pure_const (void)\n \t\t    if (dump_file)\n \t\t      fprintf (dump_file, \"Function found to be %spure: %s\\n\",\n \t\t\t       this_looping ? \"looping \" : \"\",\n-\t\t\t       w->name ());\n+\t\t\t       w->dump_name ());\n \t\t  }\n \t\tif (this_looping)\n \t\t  has_cdtor = false;\n@@ -1728,7 +1728,7 @@ propagate_pure_const (void)\n \t\t      fprintf (dump_file,\n \t\t\t       \"Declaration updated to be %spure: %s\\n\",\n \t\t\t       this_looping ? \"looping \" : \"\",\n-\t\t\t       w->name ());\n+\t\t\t       w->dump_name ());\n \t\t    remove_p |= has_cdtor;\n \t\t  }\n \t\tbreak;\n@@ -1844,7 +1844,7 @@ propagate_nothrow (void)\n \t\t  w->set_nothrow_flag (true);\n \t\t  if (dump_file)\n \t\t    fprintf (dump_file, \"Function found to be nothrow: %s\\n\",\n-\t\t\t     w->name ());\n+\t\t\t     w->dump_name ());\n \t\t}\n \t    }\n \t  else if (can_throw && !TREE_NOTHROW (w->decl))\n@@ -1873,7 +1873,7 @@ dump_malloc_lattice (FILE *dump_file, const char *s)\n     {\n       funct_state fs = funct_state_summaries->get (node);\n       if (fs)\n-\tfprintf (dump_file, \"%s: %s\\n\", node->name (),\n+\tfprintf (dump_file, \"%s: %s\\n\", node->dump_name (),\n \t\t malloc_state_names[fs->malloc_state]);\n     }\n }\n@@ -1970,7 +1970,7 @@ propagate_malloc (void)\n \t  {\n \t    if (dump_file && (dump_flags & TDF_DETAILS))\n \t      fprintf (dump_file, \"Function %s found to be malloc\\n\",\n-\t\t       node->name ());\n+\t\t       node->dump_name ());\n \n \t    bool malloc_decl_p = DECL_IS_MALLOC (node->decl);\n \t    node->set_malloc_flag (true);\n@@ -2199,7 +2199,7 @@ pass_local_pure_const::execute (function *fun)\n       changed = true;\n       if (dump_file)\n \tfprintf (dump_file, \"Function found to be malloc: %s\\n\",\n-\t\t node->name ());\n+\t\t node->dump_name ());\n     }\n \n   free (l);"}, {"sha": "a09282d48250f1213942649a128caccf3da5bd84", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -509,7 +509,7 @@ optimize_weakref (symtab_node *node)\n \n   if (dump_file)\n     fprintf (dump_file, \"Optimizing weakref %s %s\\n\",\n-\t     node->name(),\n+\t     node->dump_name (),\n \t     static_alias ? \"as static alias\" : \"as transparent alias\");\n \n   if (static_alias)\n@@ -876,17 +876,17 @@ function_and_variable_visibility (bool whole_program)\n       fprintf (dump_file, \"\\nMarking local functions:\");\n       FOR_EACH_DEFINED_FUNCTION (node)\n \tif (node->local)\n-\t  fprintf (dump_file, \" %s\", node->name ());\n+\t  fprintf (dump_file, \" %s\", node->dump_name ());\n       fprintf (dump_file, \"\\n\\n\");\n       fprintf (dump_file, \"\\nMarking externally visible functions:\");\n       FOR_EACH_DEFINED_FUNCTION (node)\n \tif (node->externally_visible)\n-\t  fprintf (dump_file, \" %s\", node->name ());\n+\t  fprintf (dump_file, \" %s\", node->dump_name ());\n       fprintf (dump_file, \"\\n\\n\");\n       fprintf (dump_file, \"\\nMarking externally visible variables:\");\n       FOR_EACH_DEFINED_VARIABLE (vnode)\n \tif (vnode->externally_visible)\n-\t  fprintf (dump_file, \" %s\", vnode->name ());\n+\t  fprintf (dump_file, \" %s\", vnode->dump_name ());\n       fprintf (dump_file, \"\\n\\n\");\n     }\n   symtab->function_flags_ready = true;"}, {"sha": "6979c38377d25ad8c2e780d3f95dc834cf12f42f", "filename": "gcc/ipa.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -616,7 +616,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t  if (vnode->definition)\n \t    {\n \t      if (file)\n-\t\tfprintf (file, \" %s\", vnode->name ());\n+\t\tfprintf (file, \" %s\", vnode->dump_name ());\n \t      changed = true;\n \t    }\n \t  /* Keep body if it may be useful for constant folding.  */\n@@ -649,7 +649,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t    (has_addr_references_p, NULL, true))\n \t  {\n \t    if (file)\n-\t      fprintf (file, \" %s\", node->name ());\n+\t      fprintf (file, \" %s\", node->dump_name ());\n \t    node->address_taken = false;\n \t    changed = true;\n \t    if (node->local_p ()\n@@ -794,7 +794,8 @@ ipa_discover_variable_flags (void)\n \tif (!address_taken)\n \t  {\n \t    if (TREE_ADDRESSABLE (vnode->decl) && dump_file)\n-\t      fprintf (dump_file, \" %s (non-addressable)\", vnode->name ());\n+\t      fprintf (dump_file, \" %s (non-addressable)\",\n+\t\t       vnode->dump_name ());\n \t    vnode->call_for_symbol_and_aliases (clear_addressable_bit, NULL,\n \t\t\t\t\t        true);\n \t  }\n@@ -805,13 +806,13 @@ ipa_discover_variable_flags (void)\n \t    && vnode->get_section () == NULL)\n \t  {\n \t    if (!TREE_READONLY (vnode->decl) && dump_file)\n-\t      fprintf (dump_file, \" %s (read-only)\", vnode->name ());\n+\t      fprintf (dump_file, \" %s (read-only)\", vnode->dump_name ());\n \t    vnode->call_for_symbol_and_aliases (set_readonly_bit, NULL, true);\n \t  }\n \tif (!vnode->writeonly && !read && !address_taken && written)\n \t  {\n \t    if (dump_file)\n-\t      fprintf (dump_file, \" %s (write-only)\", vnode->name ());\n+\t      fprintf (dump_file, \" %s (write-only)\", vnode->dump_name ());\n \t    vnode->call_for_symbol_and_aliases (set_writeonly_bit, &remove_p, \n \t\t\t\t\t        true);\n \t  }"}, {"sha": "1faf31c05512ffc5e38a02f5b0ca899242439de7", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -2137,7 +2137,7 @@ output_function (struct cgraph_node *node)\n \n   if (streamer_dump_file)\n     fprintf (streamer_dump_file, \"\\nStreaming body of %s\\n\",\n-\t     node->name ());\n+\t     node->dump_name ());\n \n   function = node->decl;\n   fn = DECL_STRUCT_FUNCTION (function);\n@@ -2211,7 +2211,7 @@ output_function (struct cgraph_node *node)\n   destroy_output_block (ob);\n   if (streamer_dump_file)\n     fprintf (streamer_dump_file, \"Finished streaming %s\\n\",\n-\t     node->name ());\n+\t     node->dump_name ());\n }\n \n /* Output the body of function NODE->DECL.  */\n@@ -2224,7 +2224,7 @@ output_constructor (struct varpool_node *node)\n \n   if (streamer_dump_file)\n     fprintf (streamer_dump_file, \"\\nStreaming constructor of %s\\n\",\n-\t     node->name ());\n+\t     node->dump_name ());\n \n   timevar_push (TV_IPA_LTO_CTORS_OUT);\n   ob = create_output_block (LTO_section_function_body);\n@@ -2245,7 +2245,7 @@ output_constructor (struct varpool_node *node)\n   destroy_output_block (ob);\n   if (streamer_dump_file)\n     fprintf (streamer_dump_file, \"Finished streaming %s\\n\",\n-\t     node->name ());\n+\t     node->dump_name ());\n   timevar_pop (TV_IPA_LTO_CTORS_OUT);\n }\n "}, {"sha": "821a6fa9dc62bb13df8c06b00b99a1466424e477", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -1,3 +1,12 @@\n+2020-01-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-partition.c (add_symbol_to_partition_1): Use ::dump_name or\n+\t::dump_asm_name instead of (::name or ::asm_name).\n+\t(lto_balanced_map): Likewise.\n+\t(promote_symbol): Likewise.\n+\t(rename_statics): Likewise.\n+\t* lto.c (lto_wpa_write_files): Likewise.\n+\n 2020-01-08  Martin Liska  <mliska@suse.cz>\n \n \t* lto-partition.c (lto_balanced_map): Use symtab_node::dump_name."}, {"sha": "3a9990903c77713555c67b51bdd0b7217ab263b9", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -162,7 +162,7 @@ add_symbol_to_partition_1 (ltrans_partition part, symtab_node *node)\n       if (dump_file)\n \tfprintf (dump_file,\n \t\t \"Symbol node %s now used in multiple partitions\\n\",\n-\t\t node->name ());\n+\t\t node->dump_name ());\n     }\n   node->aux = (void *)((size_t)node->aux + 1);\n \n@@ -515,10 +515,10 @@ lto_balanced_map (int n_lto_partitions, int max_partition_size)\n     {\n       for (unsigned i = 0; i < order.length (); i++)\n \tfprintf (dump_file, \"Balanced map symbol order:%s:%u\\n\",\n-\t\t order[i]->name (), order[i]->tp_first_run);\n+\t\t order[i]->dump_name (), order[i]->tp_first_run);\n       for (unsigned i = 0; i < noreorder.length (); i++)\n \tfprintf (dump_file, \"Balanced map symbol no_reorder:%s:%u\\n\",\n-\t\t noreorder[i]->name (), noreorder[i]->tp_first_run);\n+\t\t noreorder[i]->dump_name (), noreorder[i]->tp_first_run);\n     }\n \n   /* Collect all variables that should not be reordered.  */\n@@ -995,7 +995,7 @@ promote_symbol (symtab_node *node)\n   DECL_VISIBILITY_SPECIFIED (node->decl) = true;\n   if (dump_file)\n     fprintf (dump_file,\n-\t     \"Promoting as hidden: %s (%s)\\n\", node->name (),\n+\t     \"Promoting as hidden: %s (%s)\\n\", node->dump_name (),\n \t     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->decl)));\n \n   /* Promoting a symbol also promotes all transparent aliases with exception\n@@ -1079,7 +1079,7 @@ rename_statics (lto_symtab_encoder_t encoder, symtab_node *node)\n \n   if (dump_file)\n     fprintf (dump_file,\n-\t    \"Renaming statics with asm name: %s\\n\", node->name ());\n+\t    \"Renaming statics with asm name: %s\\n\", node->dump_name ());\n \n   /* Assign every symbol in the set that shares the same ASM name an unique\n      mangled name.  */"}, {"sha": "39bb5f45c95b1f8dbda1417c27e6cd8ff886937c", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -355,7 +355,7 @@ lto_wpa_write_files (void)\n \t       lsei_next_in_partition (&lsei))\n \t    {\n \t      symtab_node *node = lsei_node (lsei);\n-\t      fprintf (symtab->dump_file, \"%s \", node->asm_name ());\n+\t      fprintf (symtab->dump_file, \"%s \", node->dump_asm_name ());\n \t    }\n \t  fprintf (symtab->dump_file, \"\\n  Symbols in boundary: \");\n \t  for (lsei = lsei_start (part->encoder); !lsei_end_p (lsei);\n@@ -364,7 +364,7 @@ lto_wpa_write_files (void)\n \t      symtab_node *node = lsei_node (lsei);\n \t      if (!lto_symtab_encoder_in_partition_p (part->encoder, node))\n \t\t{\n-\t\t  fprintf (symtab->dump_file, \"%s \", node->asm_name ());\n+\t\t  fprintf (symtab->dump_file, \"%s \", node->dump_asm_name ());\n \t\t  cgraph_node *cnode = dyn_cast <cgraph_node *> (node);\n \t\t  if (cnode\n \t\t      && lto_symtab_encoder_encode_body_p (part->encoder,"}, {"sha": "972bb6d155df92e18f58547f94d70958902be8c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -1,3 +1,34 @@\n+2020-01-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-icf-1.c: Update expected scanned output.\n+\t* gcc.dg/ipa/ipa-icf-10.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-11.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-12.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-13.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-16.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-18.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-2.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-20.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-21.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-23.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-25.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-26.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-27.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-3.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-35.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-36.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-37.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-38.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-5.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-7.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-8.c: Likewise.\n+\t* gcc.dg/ipa/ipa-icf-merge-1.c: Likewise.\n+\t* gcc.dg/ipa/pr64307.c: Likewise.\n+\t* gcc.dg/ipa/pr90555.c: Likewise.\n+\t* gcc.dg/ipa/propmalloc-1.c: Likewise.\n+\t* gcc.dg/ipa/propmalloc-2.c: Likewise.\n+\t* gcc.dg/ipa/propmalloc-3.c: Likewise.\n+\n 2020-01-08  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/92997"}, {"sha": "05f500e7a646ce93356c99f88fe694c9c3ad3ab1", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-1.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -56,5 +56,5 @@ int main(int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:x1->x2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:x1/\\[0-9+\\]+->x2/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "2383d1217f047100cdfff6853469ec9bafd1ac65", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-10.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -29,5 +29,5 @@ int main(int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:ferda->funkce\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:ferda/\\[0-9+\\]+->funkce/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "36ba88070b7d207df5305401361808a807740697", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-11.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -24,5 +24,5 @@ int main(int argc, char **argv)\n   return f0(argc) * f1(argc);\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:f0->f1\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f0/\\[0-9+\\]+->f1/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "015384fbd20161d29ae05b70eb5f812ed1cd6924", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-12.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -73,5 +73,5 @@ int main(int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:gcd->nsd\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:gcd/\\[0-9+\\]+->nsd/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "9bd16b0c1cb631897582304bf008a0a721541f12", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-13.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-13.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -187,7 +187,7 @@ int main(int argc, char **argv)\n   printf(\"Test2: %d, %d, gdc: %d\\n\", a, b, nsd(a, b));\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:s1->s2\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:nsd_different_result->nsd_different_result2\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:gcd->nsd\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:s1/\\[0-9+\\]+->s2/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:nsd_different_result/\\[0-9+\\]+->nsd_different_result2/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:gcd/\\[0-9+\\]+->nsd/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 3\" \"icf\"  } } */"}, {"sha": "bd7358c5cf1b8a016952db6cdb322086ea38c812", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-16.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -22,5 +22,5 @@ int main()\n   return foo() + bar();\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "55fd877fa74d1bf6eb7c0a3e0ef68c61642dcffa", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-18.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -32,5 +32,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "7068bb069d68169bed179f43deb94e178dc87812", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-2.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -64,5 +64,5 @@ int main(int argc, char **argv)\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:f1->f2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f1/\\[0-9+\\]+->f2/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "c9155ddaf40a783b20b457e9a1338eae5cca9c6e", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-20.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -23,5 +23,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "9afc42ce7d075686d2e4fe32c6749cdb1f9c9c28", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-21.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -22,5 +22,5 @@ int main()\n   return 2;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "20f468d245cc7fb10e85d609c5e92440dcd70c65", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-23.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -24,5 +24,5 @@ int main()\n   return foo(0) + bar(0);\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "fad0891283e5b91c1bad98d9245eeae643e79fda", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-25.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-25.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -46,6 +46,6 @@ int main()\n   return foo() + bar();\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:zip->zap\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:zip/\\[0-9+\\]+->zap/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 2\" \"icf\"  } } */"}, {"sha": "5dc0062bbe5c16671ad142dffaa7521ce2e052d0", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-26.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-26.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -38,5 +38,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:destroy->remove\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:destroy/\\[0-9+\\]+->remove/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "45e2c5689ce7bec2b416fdb0cea4788045ea689e", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-27.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-27.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -25,5 +25,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:destroy->remove\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:destroy/\\[0-9+\\]+->remove/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "aa238329180aacace305bd6504b538eaf09c41e1", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-3.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -31,5 +31,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "d6dd2680591b5ba7858ccac1730cd3e7a81b8d8a", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-35.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-35.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -25,6 +25,6 @@ int main()\n }\n \n /* { dg-final { scan-ipa-dump \"Equal symbols: 3\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:f1->f2\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:c->d\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:a->b\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f1/\\[0-9+\\]+->f2/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:c/\\[0-9+\\]+->d/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:a/\\[0-9+\\]+->b/\\[0-9+\\]+\" \"icf\"  } } */"}, {"sha": "a6a8ef90b0f9a1ee6725d37153889e82a960f742", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-36.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-36.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -31,8 +31,8 @@ int t(int tt)\n }\n \n /* { dg-final { scan-ipa-dump \"Equal symbols: 6\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:a->b\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:c->d\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:e->f\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:g->h\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:i->k\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:a/\\[0-9+\\]+->b/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:c/\\[0-9+\\]+->d/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:e/\\[0-9+\\]+->f/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:g/\\[0-9+\\]+->h/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:i/\\[0-9+\\]+->k/\\[0-9+\\]+\" \"icf\"  } } */"}, {"sha": "509c687d9e9b48fe8f617460a51d0c3a2034da24", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-37.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-37.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -31,8 +31,8 @@ int t(int tt)\n }\n \n /* { dg-final { scan-ipa-dump \"Equal symbols: 5\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:a->b\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:c->d\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:e->f\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:g->h\" \"icf\"  } } */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:i->j\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:a/\\[0-9+\\]+->b/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:c/\\[0-9+\\]+->d/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:e/\\[0-9+\\]+->f/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:g/\\[0-9+\\]+->h/\\[0-9+\\]+\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:i/\\[0-9+\\]+->j/\\[0-9+\\]+\" \"icf\"  } } */"}, {"sha": "452e1b88514536120a7d793e0c91c4f91483c8a9", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-38.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-38.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -27,7 +27,7 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-wpa-ipa-dump \"Semantic equality hit:foo->bar\" \"icf\"  } } */\n+/* { dg-final { scan-wpa-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->bar/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-wpa-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */\n /* { dg-final { scan-ltrans-tree-dump \"Function foo\" \"optimized\" } } */\n /* { dg-final { scan-ltrans-tree-dump-not \"Function bar\" \"optimized\" } } */"}, {"sha": "b564ac301fa31b0348e1fef91500f623dad8a196", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-5.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -50,5 +50,5 @@ int main()\n   return 1;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:f1->f2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:f1/\\[0-9+\\]+->f2/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "8d53455eb01c6eb6e123fd53b63004e67f843597", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-7.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -67,5 +67,5 @@ int main()\n   return 1;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->foo2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->foo2/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "c8c009cf005be86051657c15e605c7c37baa119e", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-8.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -40,5 +40,5 @@ int main(int argc, char **argv)\n   printf(\"fce2: %d\\n\", fce2(argc, 2 * argc));\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:fce1->fce2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:fce1/\\[0-9+\\]+->fce2/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "d5ce5eb18f4b35b3ce2dba67ef2a868d9de2f8ac", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-merge-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-merge-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-merge-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-merge-1.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -18,7 +18,7 @@ int main ()\n }\n \n /* Notice the two functions are the same.  */\n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo->main\" \"icf\" } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:foo/\\[0-9+\\]+->main/\\[0-9+\\]+\" \"icf\" } } */\n \n /* Make sure we don't tail call main.  */\n /* { dg-final { scan-ipa-dump-not \"= main \\\\(\\\\);\" \"icf\" } } */"}, {"sha": "345a51c2baa7c0658bf738c79ba2666dc65a1a72", "filename": "gcc/testsuite/gcc.dg/ipa/pr64307.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr64307.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr64307.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr64307.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -27,5 +27,5 @@ int main()\n   return r1 - r2;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:real_part->real_part_2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:real_part/\\[0-9+\\]+->real_part_2/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "80c5c9fc85b9142f518a55d5839da42a6d46365c", "filename": "gcc/testsuite/gcc.dg/ipa/pr90555.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr90555.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr90555.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr90555.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -62,5 +62,5 @@ test_simduid2 (int j, int b)\n   return c2;\n }\n \n-/* { dg-final { scan-ipa-dump \"Semantic equality hit:test_simduid1->test_simduid2\" \"icf\"  } } */\n+/* { dg-final { scan-ipa-dump \"Semantic equality hit:test_simduid1/\\[0-9+\\]+->test_simduid2/\\[0-9+\\]+\" \"icf\"  } } */\n /* { dg-final { scan-ipa-dump \"Equal symbols: 1\" \"icf\"  } } */"}, {"sha": "d7c13af400d03a119187b2521e85eb761228347e", "filename": "gcc/testsuite/gcc.dg/ipa/propmalloc-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-1.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -17,5 +17,5 @@ static void *bar(__SIZE_TYPE__ n)\n   return p;\n }\n \n-/* { dg-final { scan-ipa-dump \"Function f found to be malloc\" \"pure-const\" } } */\n-/* { dg-final { scan-ipa-dump \"Function bar found to be malloc\" \"pure-const\" } } */\n+/* { dg-final { scan-ipa-dump \"Function f/\\[0-9+\\]+ found to be malloc\" \"pure-const\" } } */\n+/* { dg-final { scan-ipa-dump \"Function bar/\\[0-9+\\]+ found to be malloc\" \"pure-const\" } } */"}, {"sha": "2332d9a4b449237debb1344dc0a977561acf75a7", "filename": "gcc/testsuite/gcc.dg/ipa/propmalloc-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-2.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -19,5 +19,5 @@ static void *bar(__SIZE_TYPE__ n, int cond)\n   return p;\n }\n \n-/* { dg-final { scan-ipa-dump \"Function foo found to be malloc\" \"pure-const\" } } */\n-/* { dg-final { scan-ipa-dump \"Function bar found to be malloc\" \"pure-const\" } } */\n+/* { dg-final { scan-ipa-dump \"Function foo/\\[0-9+\\]+ found to be malloc\" \"pure-const\" } } */\n+/* { dg-final { scan-ipa-dump \"Function bar/\\[0-9+\\]+ found to be malloc\" \"pure-const\" } } */"}, {"sha": "5386695dcb0d2c90cdfd1c2c4ac56e61d0941b0a", "filename": "gcc/testsuite/gcc.dg/ipa/propmalloc-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpropmalloc-3.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -20,5 +20,5 @@ static void *foo(__SIZE_TYPE__ n, int m)\n   return p;\n }\n \n-/* { dg-final { scan-ipa-dump \"Function foo found to be malloc\" \"pure-const\" } } */\n-/* { dg-final { scan-ipa-dump \"Function bar found to be malloc\" \"pure-const\" } } */\n+/* { dg-final { scan-ipa-dump \"Function foo/\\[0-9+\\]+ found to be malloc\" \"pure-const\" } } */\n+/* { dg-final { scan-ipa-dump \"Function bar/\\[0-9+\\]+ found to be malloc\" \"pure-const\" } } */"}, {"sha": "ee4670c94a5edf1d9a0b0724b99478e9a2b90ff2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -2263,7 +2263,7 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t\t  if (dump_file)\n \t\t    {\n \t\t      fprintf (dump_file, \"Created new direct edge to %s\\n\",\n-\t\t\t       dest->name ());\n+\t\t\t       dest->dump_name ());\n \t\t    }\n \t\t}\n "}, {"sha": "f189f7562611ffced109702cb182968f303f3876", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -8157,7 +8157,8 @@ ipa_pta_execute (void)\n \t  && from != constraints.length ())\n \t{\n \t  fprintf (dump_file,\n-\t\t   \"Generating intial constraints for %s\", node->name ());\n+\t\t   \"Generating initial constraints for %s\",\n+\t\t   node->dump_name ());\n \t  if (DECL_ASSEMBLER_NAME_SET_P (node->decl))\n \t    fprintf (dump_file, \" (%s)\",\n \t\t     IDENTIFIER_POINTER\n@@ -8214,7 +8215,7 @@ ipa_pta_execute (void)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file,\n-\t\t   \"Generating constraints for %s\", node->name ());\n+\t\t   \"Generating constraints for %s\", node->dump_name ());\n \t  if (DECL_ASSEMBLER_NAME_SET_P (node->decl))\n \t    fprintf (dump_file, \" (%s)\",\n \t\t     IDENTIFIER_POINTER"}, {"sha": "e5d632e0eb5bcf23687a8bcbe06471645d888f02", "filename": "gcc/varpool.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3629ff8ad6b73b35f4168df465f47f5a302691e2/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=3629ff8ad6b73b35f4168df465f47f5a302691e2", "patch": "@@ -639,7 +639,7 @@ symbol_table::remove_unreferenced_decls (void)\n \t{\n \t  enqueue_node (node, &first);\n \t  if (dump_file)\n-\t    fprintf (dump_file, \" %s\", node->asm_name ());\n+\t    fprintf (dump_file, \" %s\", node->dump_asm_name ());\n \t}\n     }\n   while (first != (varpool_node *)(void *)1)\n@@ -687,7 +687,7 @@ symbol_table::remove_unreferenced_decls (void)\n       if (!node->aux && !node->no_reorder)\n \t{\n \t  if (dump_file)\n-\t    fprintf (dump_file, \" %s\", node->asm_name ());\n+\t    fprintf (dump_file, \" %s\", node->dump_asm_name ());\n \t  if (referenced.contains(node))\n \t    node->remove_initializer ();\n \t  else"}]}