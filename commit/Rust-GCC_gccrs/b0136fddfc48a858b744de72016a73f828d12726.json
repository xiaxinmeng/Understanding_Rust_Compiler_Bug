{"sha": "b0136fddfc48a858b744de72016a73f828d12726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxMzZmZGRmYzQ4YTg1OGI3NDRkZTcyMDE2YTczZjgyOGQxMjcyNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-08T18:22:34Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-08T18:22:34Z"}, "message": "(__savereg, va_arg): Put uses of __va in parens.\n\nFrom-SVN: r2371", "tree": {"sha": "4ca6c13c539be2b27e14b432c3889ed091eb02b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca6c13c539be2b27e14b432c3889ed091eb02b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0136fddfc48a858b744de72016a73f828d12726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0136fddfc48a858b744de72016a73f828d12726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0136fddfc48a858b744de72016a73f828d12726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0136fddfc48a858b744de72016a73f828d12726/comments", "author": null, "committer": null, "parents": [{"sha": "742ba40c29679d6c6216ee5b70487b415fc717fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742ba40c29679d6c6216ee5b70487b415fc717fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742ba40c29679d6c6216ee5b70487b415fc717fb"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "70c987d9b557682097a118d71a8b20e74dd7ba7a", "filename": "gcc/ginclude/va-i860.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0136fddfc48a858b744de72016a73f828d12726/gcc%2Fginclude%2Fva-i860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0136fddfc48a858b744de72016a73f828d12726/gcc%2Fginclude%2Fva-i860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-i860.h?ref=b0136fddfc48a858b744de72016a73f828d12726", "patch": "@@ -92,7 +92,7 @@ enum {\n #define __NUM_PARM_FREGS\t8\n #define __NUM_PARM_IREGS\t12\n \n-#define __savereg(__va) ((__va_saved_regs *) (__va.__reg_base))\n+#define __savereg(__va) ((__va_saved_regs *) ((__va).__reg_base))\n \n /* This macro works both for SVR4 and pre-SVR4 environments.  */\n \n@@ -128,19 +128,19 @@ __extension__\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  case sizeof (float):\t\t\t\t\t\t\\\n \t  case sizeof (double):\t\t\t\t\t\t\\\n-\t    if (__va.__freg_used < __NUM_PARM_FREGS - 1)\t\t\\\n+\t    if ((__va).__freg_used < __NUM_PARM_FREGS - 1)\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n-\t        if ((__va.__freg_used & 1) != 0)\t\t\t\\\n-\t          __va.__freg_used++;\t/* skip odd */\t\t\t\\\n-\t        __rv = &__savereg(__va)->__float_regs.__freg[__va.__freg_used];\\\n-\t\t__va.__freg_used += 2;\t\t\t\t\t\\\n+\t        if (((__va).__freg_used & 1) != 0)\t\t\t\\\n+\t          (__va).__freg_used++;\t/* skip odd */\t\t\t\\\n+\t        __rv = &__savereg((__va))->__float_regs.__freg[(__va).__freg_used];\\\n+\t\t(__va).__freg_used += 2;\t\t\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n \t    else\t\t\t\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n-\t        if ((((unsigned) __va.__mem_ptr) & (sizeof(double)-1)) != 0) \\\n-\t          __va.__mem_ptr++;\t/* skip odd */\t\t\t\\\n-\t        __rv = __va.__mem_ptr;\t\t\t\t\t\\\n-\t        __va.__mem_ptr += 2;\t\t\t\t\t\\\n+\t        if ((((unsigned) (__va).__mem_ptr) & (sizeof(double)-1)) != 0) \\\n+\t          (__va).__mem_ptr++;\t/* skip odd */\t\t\t\\\n+\t        __rv = (__va).__mem_ptr;\t\t\t\t\\\n+\t        (__va).__mem_ptr += 2;\t\t\t\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n \t    if (sizeof (__type) == sizeof (float))\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n@@ -162,15 +162,15 @@ __extension__\t\t\t\t\t\t\t\t\\\n     case __offset_type_class:\t\t\t\t\t\t\\\n       if (sizeof (__type) <= 4)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-          __rv = (__va.__ireg_used < __NUM_PARM_IREGS\t\t\t\\\n-\t          ? (&__savereg(__va)->__ireg[__va.__ireg_used++])\t\\\n-\t          : __va.__mem_ptr++);\t\t\t\t\t\\\n+          __rv = ((__va).__ireg_used < __NUM_PARM_IREGS\t\t\t\\\n+\t          ? (&__savereg((__va))->__ireg[(__va).__ireg_used++])\t\\\n+\t          : (__va).__mem_ptr++);\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      else if (__va.__ireg_used + sizeof (__type) / 4 <= __NUM_PARM_IREGS) \\\n+      else if ((__va).__ireg_used + sizeof (__type) / 4 <= __NUM_PARM_IREGS) \\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  __rv = &__savereg(__va)->__ireg[__va.__ireg_used];\t\t\\\n-\t  __va.__ireg_used += sizeof (__type) / 4;\t\t\t\\\n+\t  __rv = &__savereg((__va))->__ireg[(__va).__ireg_used];\t\\\n+\t  (__va).__ireg_used += sizeof (__type) / 4;\t\t\t\\\n           break;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       /* Fall through to fetch from memory.  */\t\t\t\t\\\n@@ -179,11 +179,11 @@ __extension__\t\t\t\t\t\t\t\t\\\n       __align = (__alignof__ (__type) < sizeof (long)\t\t\t\\\n \t\t ? sizeof (long)\t\t\t\t\t\\\n \t\t : __alignof__ (__type));\t\t\t\t\\\n-      __va.__mem_ptr\t\t\t\t\t\t\t\\\n+      (__va).__mem_ptr\t\t\t\t\t\t\t\\\n \t= (long *)\t\t\t\t\t\t\t\\\n-\t  ((((unsigned) __va.__mem_ptr) + (__align-1)) & ~(__align-1));\t\\\n-      __rv = __va.__mem_ptr;\t\t\t\t\t\t\\\n-      __va.__mem_ptr\t\t\t\t\t\t\t\\\n+\t  ((((unsigned) (__va).__mem_ptr) + (__align-1)) & ~(__align-1)); \\\n+      __rv = (__va).__mem_ptr;\t\t\t\t\t\t\\\n+      (__va).__mem_ptr\t\t\t\t\t\t\t\\\n \t+= ((sizeof (__type) + sizeof (long) - 1) / sizeof (long));\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     case __complex_type_class:\t\t\t\t\t\t\\"}]}