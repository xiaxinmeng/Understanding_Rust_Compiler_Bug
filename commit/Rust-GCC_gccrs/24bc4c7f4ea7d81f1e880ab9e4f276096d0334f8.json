{"sha": "24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRiYzRjN2Y0ZWE3ZDgxZjFlODgwYWI5ZTRmMjc2MDk2ZDAzMzRmOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-23T06:05:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-23T06:05:54Z"}, "message": "(duplicate_decls, grokdeclarator, finish_struct):\n\nUse C_PROMOTING_INTEGER_TYPE_P to decide whether a type promotes.\n(start_function): Likewise.\n\nFrom-SVN: r1666", "tree": {"sha": "1430543f5b309fa752efe765f100a64855ba070a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1430543f5b309fa752efe765f100a64855ba070a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8/comments", "author": null, "committer": null, "parents": [{"sha": "d627ed1b71824b574ec653b2c97f60c33fd66acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d627ed1b71824b574ec653b2c97f60c33fd66acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d627ed1b71824b574ec653b2c97f60c33fd66acc"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "41afaa3cac5587599e78dd565a84c177bf956abc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=24bc4c7f4ea7d81f1e880ab9e4f276096d0334f8", "patch": "@@ -1312,9 +1312,7 @@ duplicate_decls (newdecl, olddecl)\n \t\t}\n \n \t      if (TYPE_MAIN_VARIANT (type) == float_type_node\n-\t\t  || (TREE_CODE (type) == INTEGER_TYPE\n-\t\t      && (TYPE_PRECISION (type)\n-\t\t\t  < TYPE_PRECISION (integer_type_node))))\n+\t\t  || C_PROMOTING_INTEGER_TYPE_P (type))\n \t\t{\n \t\t  error (\"An argument type that has a default promotion\");\n \t\t  error (\"can't match an empty parameter name list declaration.\");\n@@ -4049,11 +4047,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t/* Don't use TYPE_PREISION to decide whether to promote,\n \t   because we should convert short if it's the same size as int,\n \t   but we should not convert long if it's the same size as int.  */\n-\telse if (main_type == char_type_node\n-\t\t || main_type == signed_char_type_node\n-\t\t || main_type == unsigned_char_type_node\n-\t\t || main_type == short_integer_type_node\n-\t\t || main_type == short_unsigned_type_node)\n+\telse if (C_PROMOTING_INTEGER_TYPE_P (main_type))\n \t  {\n \t    if (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)\n \t\t&& TREE_UNSIGNED (type))\n@@ -4843,9 +4837,7 @@ finish_struct (t, fieldlist)\n   /* Promote each bit-field's type to int if it is narrower than that.  */\n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n     if (DECL_BIT_FIELD (x)\n-\t&& TREE_CODE (TREE_TYPE (x)) == INTEGER_TYPE\n-\t&& (TYPE_PRECISION (TREE_TYPE (x))\n-\t    < TYPE_PRECISION (integer_type_node)))\n+\t&& C_PROMOTING_INTEGER_TYPE_P (TREE_TYPE (x)))\n       TREE_TYPE (x) = integer_type_node;\n \n   /* If this structure or union completes the type of any previous\n@@ -5214,8 +5206,7 @@ start_function (declspecs, declarator, nested)\n \n   restype = TREE_TYPE (TREE_TYPE (current_function_decl));\n   /* Promote the value to int before returning it.  */\n-  if (TREE_CODE (restype) == INTEGER_TYPE\n-      && TYPE_PRECISION (restype) < TYPE_PRECISION (integer_type_node))\n+  if (C_PROMOTING_INTEGER_TYPE_P (restype))\n     restype = integer_type_node;\n   DECL_RESULT (current_function_decl)\n     = build_decl (RESULT_DECL, NULL_TREE, restype);"}]}