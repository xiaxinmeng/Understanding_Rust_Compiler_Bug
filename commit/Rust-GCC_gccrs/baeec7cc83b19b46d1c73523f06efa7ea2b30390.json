{"sha": "baeec7cc83b19b46d1c73523f06efa7ea2b30390", "node_id": "C_kwDOANBUbNoAKGJhZWVjN2NjODNiMTliNDZkMWM3MzUyM2YwNmVmYTdlYTJiMzAzOTA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-15T00:17:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-15T00:17:38Z"}, "message": "Daily bump.", "tree": {"sha": "9b003fd2b58b07d064a7c25ccbb037eb62307e4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b003fd2b58b07d064a7c25ccbb037eb62307e4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baeec7cc83b19b46d1c73523f06efa7ea2b30390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeec7cc83b19b46d1c73523f06efa7ea2b30390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baeec7cc83b19b46d1c73523f06efa7ea2b30390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeec7cc83b19b46d1c73523f06efa7ea2b30390/comments", "author": null, "committer": null, "parents": [{"sha": "36d20fa4a83d1a294462c2622ca76eac93465c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d20fa4a83d1a294462c2622ca76eac93465c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d20fa4a83d1a294462c2622ca76eac93465c2c"}], "stats": {"total": 403, "additions": 402, "deletions": 1}, "files": [{"sha": "c1fc2ecb628c1a4a316078e2e91215f622d0b248", "filename": "gcc/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,95 @@\n+2022-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set): Implement distinction between\n+\tHONOR_SIGNED_ZEROS and MODE_HAS_SIGNED_ZEROS.\n+\n+2022-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-op.cc (class cfn_copysign): New.\n+\t(gimple_range_op_handler::maybe_builtin_call): Add\n+\tCFN_BUILT_IN_COPYSIGN*.\n+\n+2022-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* real.h (real_isdenormal): Check rvc_normal.\n+\t* value-range.cc (range_tests_floats): New test.\n+\n+2022-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-op.cc\n+\t(gimple_range_op_handler::maybe_builtin_call): Replace\n+\tCFN_BUILTIN_SIGNBIT* cases with CASE_FLT_FN.\n+\n+2022-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set): Normalize ranges for both bounds.\n+\n+2022-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set): Drop -0.0 for !HONOR_SIGNED_ZEROS.\n+\n+2022-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-op.cc\n+\t(gimple_range_op_handler::maybe_builtin_call): Add\n+\tCFN_BUILT_IN_SIGNBIT[FL]* entries.\n+\n+2022-10-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107254\n+\t* tree-vect-slp.cc (vect_slp_analyze_node_operations_1):\n+\tFor permutes also analyze live lanes.\n+\t(vect_schedule_slp_node): For permutes also code generate\n+\tlive lane extracts.\n+\n+2022-10-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/107248\n+\t* config/sparc/sparc.cc (sparc_expand_prologue): Emit a frame\n+\tblockage for leaf functions.\n+\t(sparc_flat_expand_prologue): Emit frame instead of full blockage.\n+\t(sparc_expand_epilogue): Emit a frame blockage for leaf functions.\n+\t(sparc_flat_expand_epilogue): Emit frame instead of full blockage.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-core.h (enum tree_index): Add TI_BFLOAT16_TYPE.\n+\t* tree.h (bfloat16_type_node): Define.\n+\t* tree.cc (excess_precision_type): Promote bfloat16_type_mode\n+\tlike float16_type_mode.\n+\t(build_common_tree_nodes): Initialize bfloat16_type_node if\n+\tBFmode is supported.\n+\t* expmed.h (maybe_expand_shift): Declare.\n+\t* expmed.cc (maybe_expand_shift): No longer static.\n+\t* expr.cc (convert_mode_scalar): Don't ICE on BF -> HF or HF -> BF\n+\tconversions.  If there is no optab, handle BF -> {DF,XF,TF,HF}\n+\tconversions as separate BF -> SF -> {DF,XF,TF,HF} conversions, add\n+\t-ffast-math generic implementation for BF -> SF and SF -> BF\n+\tconversions.\n+\t* builtin-types.def (BT_BFLOAT16, BT_FN_BFLOAT16_CONST_STRING): New.\n+\t* builtins.def (BUILT_IN_NANSF16B): New builtin.\n+\t* fold-const-call.cc (fold_const_call): Handle CFN_BUILT_IN_NANSF16B.\n+\t* config/i386/i386.cc (classify_argument): Handle E_BCmode.\n+\t(ix86_libgcc_floating_mode_supported_p): Also return true for BFmode\n+\tfor -msse2.\n+\t(ix86_mangle_type): Mangle BFmode as DF16b.\n+\t(ix86_invalid_conversion, ix86_invalid_unary_op,\n+\tix86_invalid_binary_op): Remove.\n+\t(TARGET_INVALID_CONVERSION, TARGET_INVALID_UNARY_OP,\n+\tTARGET_INVALID_BINARY_OP): Don't redefine.\n+\t* config/i386/i386-builtins.cc (ix86_bf16_type_node): Remove.\n+\t(ix86_register_bf16_builtin_type): Use bfloat16_type_node rather than\n+\tix86_bf16_type_node, only create it if still NULL.\n+\t* config/i386/i386-builtin-types.def (BFLOAT16): Likewise.\n+\t* config/i386/i386.md (cbranchbf4, cstorebf4): New expanders.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/323\n+\tPR c++/107097\n+\t* doc/invoke.texi (-fexcess-precision=standard): Mention that the\n+\toption now also works in C++.\n+\n 2022-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple-ssa-warn-access.cc (pass_waccess::check_call): Return"}, {"sha": "88e8f3fec27894bcd0837d810fb443d5d065e1c6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1 +1 @@\n-20221014\n+20221015"}, {"sha": "2047e2e65ec60c06b6c1b16c953f477d8ed8e642", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,22 @@\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-cppbuiltin.cc (c_cpp_builtins): If bfloat16_type_node,\n+\tpredefine __BFLT16_*__ macros and for C++23 also\n+\t__STDCPP_BFLOAT16_T__.  Predefine bfloat16_type_node related\n+\tmacros for -fbuilding-libgcc.\n+\t* c-lex.cc (interpret_float): Handle CPP_N_BFLOAT16.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/323\n+\tPR c++/107097\n+\t* c-common.def (EXCESS_PRECISION_EXPR): Remove comment part about\n+\tthe tree being specific to C/ObjC.\n+\t* c-opts.cc (c_common_post_options): Handle flag_excess_precision\n+\tin C++ the same as in C.\n+\t* c-lex.cc (interpret_float): Set const_type to excess_precision ()\n+\teven for C++.\n+\n 2022-10-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-cppbuiltin.cc (builtin_define_float_constants): Do not use"}, {"sha": "d28585b768b468e9c8d66b30ef1cbd784347d503", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,26 @@\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.cc (convert_arguments): Don't promote __bf16 to\n+\tdouble.\n+\n+2022-10-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.cc (build_compound_literal): Add parameter scspecs.\n+\tHandle storage class specifiers.\n+\t* c-parser.cc (c_token_starts_compound_literal)\n+\t(c_parser_compound_literal_scspecs): New.\n+\t(c_parser_postfix_expression_after_paren_type): Add parameter\n+\tscspecs.  Call pedwarn_c11 for use of storage class specifiers.\n+\tUpdate call to build_compound_literal.\n+\t(c_parser_cast_expression, c_parser_sizeof_expression)\n+\t(c_parser_alignof_expression): Handle storage class specifiers for\n+\tcompound literals.  Update calls to\n+\tc_parser_postfix_expression_after_paren_type.\n+\t(c_parser_postfix_expression): Update syntax comment.\n+\t* c-tree.h (build_compound_literal): Update prototype.\n+\t* c-typeck.cc (c_mark_addressable): Diagnose taking address of\n+\tregister compound literal.\n+\n 2022-10-07  Qing Zhao  <qing.zhao@oracle.com>\n \n \t* c-decl.cc (flexible_array_member_type_p): New function."}, {"sha": "a9983c1346657fdac5d951a6ee8aeca03cd57574", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,79 @@\n+2022-10-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/106304\n+\t* constexpr.cc (cxx_dynamic_cast_fn_p): Check for abi_node\n+\tinstead of global_namespace.\n+\t* rtti.cc (build_dynamic_cast_1): Set DECL_CONTEXT and\n+\tDECL_SOURCE_LOCATION when building dynamic_cast_node.  Push\n+\tit into the namespace.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (extended_float_type_p): Return true for\n+\tbfloat16_type_node.\n+\t* typeck.cc (cp_compare_floating_point_conversion_ranks): Set\n+\textended{1,2} if mv{1,2} is bfloat16_type_node.  Adjust comment.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/82071\n+\tPR c/87390\n+\tPR c++/107097\n+\t* cp-tree.h (cp_ep_convert_and_check): Remove.\n+\t* cvt.cc (cp_ep_convert_and_check): Remove.\n+\t* call.cc (build_conditional_expr): Use excess precision for ?: with\n+\tone arm floating and another integral.  Don't convert first to\n+\tsemantic result type from integral types.\n+\t(convert_like_internal): Don't call cp_ep_convert_and_check, instead\n+\tjust strip EXCESS_PRECISION_EXPR before calling cp_convert_and_check\n+\tor cp_convert.\n+\t* typeck.cc (cp_build_binary_op): Set may_need_excess_precision\n+\tfor comparisons or SPACESHIP_EXPR with at least one operand integral.\n+\tDon't compute semantic_result_type if build_type is non-NULL.  Call\n+\tcp_convert_and_check instead of cp_ep_convert_and_check.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/323\n+\tPR c++/107097\n+\t* parser.cc (cp_parser_primary_expression): Handle\n+\tEXCESS_PRECISION_EXPR with REAL_CST operand the same as REAL_CST.\n+\t* cvt.cc (cp_ep_convert_and_check): New function.\n+\t* call.cc (build_conditional_expr): Add excess precision support.\n+\tWhen type_after_usual_arithmetic_conversions returns error_mark_node,\n+\tuse gcc_checking_assert that it is because of uncomparable floating\n+\tpoint ranks instead of checking all those conditions and make it\n+\twork also with complex types.\n+\t(convert_like_internal): Likewise.  Add NESTED_P argument, pass true\n+\tto recursive calls to convert_like.\n+\t(convert_like): Add NESTED_P argument, pass it through to\n+\tconvert_like_internal.  For other overload pass false to it.\n+\t(convert_like_with_context): Pass false to NESTED_P.\n+\t(convert_arg_to_ellipsis): Add excess precision support.\n+\t(magic_varargs_p): For __builtin_is{finite,inf,inf_sign,nan,normal}\n+\tand __builtin_fpclassify return 2 instead of 1, document what it\n+\tmeans.\n+\t(build_over_call): Don't handle former magic 2 which is no longer\n+\tused, instead for magic 1 remove EXCESS_PRECISION_EXPR.\n+\t(perform_direct_initialization_if_possible): Pass false to NESTED_P\n+\tconvert_like argument.\n+\t* constexpr.cc (cxx_eval_constant_expression): Handle\n+\tEXCESS_PRECISION_EXPR.\n+\t(potential_constant_expression_1): Likewise.\n+\t* pt.cc (tsubst_copy, tsubst_copy_and_build): Likewise.\n+\t* cp-tree.h (cp_ep_convert_and_check): Declare.\n+\t* cp-gimplify.cc (cp_fold): Handle EXCESS_PRECISION_EXPR.\n+\t* typeck.cc (cp_common_type): For COMPLEX_TYPEs, return error_mark_node\n+\tif recursive call returned it.\n+\t(convert_arguments): For magic 1 remove EXCESS_PRECISION_EXPR.\n+\t(cp_build_binary_op): Add excess precision support.  When\n+\tcp_common_type returns error_mark_node, use gcc_checking_assert that\n+\tit is because of uncomparable floating point ranks instead of checking\n+\tall those conditions and make it work also with complex types.\n+\t(cp_build_unary_op): Likewise.\n+\t(cp_build_compound_expr): Likewise.\n+\t(build_static_cast_1): Remove EXCESS_PRECISION_EXPR.\n+\n 2022-10-13  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h: Fix whitespace."}, {"sha": "8b802427e40f173720f431e3d40b68def4de7378", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,9 @@\n+2022-10-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100971\n+\t* resolve.cc (resolve_transfer): Extend check for permissibility\n+\tof polymorphic elements in a data transfer to arrays.\n+\n 2022-10-12  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/107217"}, {"sha": "f71761463f20a198e40200e249c01af511fea2c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,118 @@\n+2022-10-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cpp/c2x-ucnid-1-utf8.c, gcc.dg/cpp/c2x-ucnid-1.c: New\n+\ttests.\n+\n+2022-10-14  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100971\n+\t* gfortran.dg/der_io_5.f90: New test.\n+\n+2022-10-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/c-interop/deferred-character-2.f90: Use 'dg-do run'.\n+\n+2022-10-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/106304\n+\t* g++.dg/modules/pr106304_a.C: New test.\n+\t* g++.dg/modules/pr106304_b.C: New test.\n+\n+2022-10-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107254\n+\t* gfortran.dg/vect/pr107254.f90: New testcase.\n+\n+2022-10-14  J\u00f8rgen Kvalsvik  <jorgen.kvalsvik@woven-planet.global>\n+\n+\t* gcc.misc-tests/gcov-4.c: New testcase.\n+\n+2022-10-14  J\u00f8rgen Kvalsvik  <jorgen.kvalsvik@woven-planet.global>\n+\n+\t* g++.dg/gcov/gcov-1.C: Add line count check.\n+\t* gcc.misc-tests/gcov-4.c: Likewise.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_bfloat16,\n+\tcheck_effective_target_bfloat16_runtime, add_options_for_bfloat16):\n+\tNew.\n+\t* gcc.dg/torture/bfloat16-basic.c: New test.\n+\t* gcc.dg/torture/bfloat16-builtin.c: New test.\n+\t* gcc.dg/torture/bfloat16-builtin-issignaling-1.c: New test.\n+\t* gcc.dg/torture/bfloat16-complex.c: New test.\n+\t* gcc.dg/torture/builtin-issignaling-1.c: Allow to be includable\n+\tfrom bfloat16-builtin-issignaling-1.c.\n+\t* gcc.dg/torture/floatn-basic.h: Allow to be includable from\n+\tbfloat16-basic.c.\n+\t* gcc.target/i386/vect-bfloat16-typecheck_2.c: Adjust expected\n+\tdiagnostics.\n+\t* gcc.target/i386/sse2-bfloat16-scalar-typecheck.c: Likewise.\n+\t* gcc.target/i386/vect-bfloat16-typecheck_1.c: Likewise.\n+\t* g++.target/i386/bfloat_cpp_typecheck.C: Likewise.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/82071\n+\tPR c/87390\n+\tPR c++/107097\n+\t* gcc.target/i386/excess-precision-8.c: For C++ wrap abort and\n+\texit declarations into extern \"C\" block.\n+\t* gcc.target/i386/excess-precision-10.c: Likewise.\n+\t* g++.target/i386/excess-precision-7.C: Remove.\n+\t* g++.target/i386/excess-precision-8.C: New test.\n+\t* g++.target/i386/excess-precision-9.C: Remove.\n+\t* g++.target/i386/excess-precision-10.C: New test.\n+\t* g++.target/i386/excess-precision-12.C: New test.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/323\n+\tPR c++/107097\n+\t* gcc.target/i386/excess-precision-1.c: For C++ wrap abort and\n+\texit declarations into extern \"C\" block.\n+\t* gcc.target/i386/excess-precision-2.c: Likewise.\n+\t* gcc.target/i386/excess-precision-3.c: Likewise.  Remove\n+\tcheck_float_nonproto and check_double_nonproto tests for C++.\n+\t* gcc.target/i386/excess-precision-7.c: For C++ wrap abort and\n+\texit declarations into extern \"C\" block.\n+\t* gcc.target/i386/excess-precision-9.c: Likewise.\n+\t* g++.target/i386/excess-precision-1.C: New test.\n+\t* g++.target/i386/excess-precision-2.C: New test.\n+\t* g++.target/i386/excess-precision-3.C: New test.\n+\t* g++.target/i386/excess-precision-4.C: New test.\n+\t* g++.target/i386/excess-precision-5.C: New test.\n+\t* g++.target/i386/excess-precision-6.C: New test.\n+\t* g++.target/i386/excess-precision-7.C: New test.\n+\t* g++.target/i386/excess-precision-9.C: New test.\n+\t* g++.target/i386/excess-precision-11.C: New test.\n+\t* c-c++-common/dfp/convert-bfp-10.c: Add -fexcess-precision=fast\n+\tas dg-additional-options.\n+\t* c-c++-common/dfp/compare-eq-const.c: Likewise.\n+\t* g++.dg/cpp1z/constexpr-96862.C: Likewise.\n+\t* g++.dg/cpp1z/decomp12.C (main): Use 2.25 instead of 2.3 to\n+\tavoid excess precision differences.\n+\t* g++.dg/other/thunk1.C: Add -fexcess-precision=fast\n+\tas dg-additional-options.\n+\t* g++.dg/vect/pr64410.cc: Likewise.\n+\t* g++.dg/cpp1y/pr68180.C: Likewise.\n+\t* g++.dg/vect/pr89653.cc: Likewise.\n+\t* g++.dg/cpp0x/variadic-tuple.C: Likewise.\n+\t* g++.dg/cpp0x/nsdmi-union1.C: Use 4.25 instead of 4.2 to\n+\tavoid excess precision differences.\n+\t* g++.old-deja/g++.brendan/copy9.C: Add -fexcess-precision=fast\n+\tas dg-additional-options.\n+\t* g++.old-deja/g++.brendan/overload7.C: Likewise.\n+\n+2022-10-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-complit-1.c, gcc.dg/c11-complit-2.c,\n+\tgcc.dg/c11-complit-3.c, gcc.dg/c2x-complit-2.c,\n+\tgcc.dg/c2x-complit-3.c, gcc.dg/c2x-complit-4.c,\n+\tgcc.dg/c2x-complit-5.c, gcc.dg/c2x-complit-6.c,\n+\tgcc.dg/c2x-complit-7.c, gcc.dg/c90-complit-2.c,\n+\tgcc.dg/gnu2x-complit-1.c, gcc.dg/gnu2x-complit-2.c: New tests.\n+\n 2022-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/Wstringop-overflow-89.c: New test."}, {"sha": "3a1b4996bce218e3c35dfd0d42464e22163f8a0c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,20 @@\n+2022-10-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* charset.cc (ucn_valid_in_identifier): Check xid_identifiers not\n+\tcplusplus to determine whether to use CXX23 and NXX23 flags.\n+\t* include/cpplib.h (struct cpp_options): Add xid_identifiers.\n+\t* init.cc (struct lang_flags, lang_defaults): Add xid_identifiers.\n+\t(cpp_set_lang): Set xid_identifiers.\n+\t* lex.cc (warn_about_normalization): Add parameter identifier.\n+\tOnly pedwarn about non-NFC for identifiers, not pp-numbers.\n+\t(_cpp_lex_direct): Update calls to warn_about_normalization.\n+\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/cpplib.h (CPP_N_BFLOAT16): Define.\n+\t* expr.cc (interpret_float_suffix): Handle bf16 and BF16 suffixes for\n+\tC++.\n+\n 2022-09-28  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* include/line-map.h: Add discriminator to location_adhoc_data."}, {"sha": "f756eb5b7338a469ab40dc123513a7eaf04731af", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,24 @@\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/t-softfp (softfp_extensions): Add bfsf.\n+\t(softfp_truncations): Add tfbf xfbf dfbf sfbf hfbf.\n+\t(CFLAGS-extendbfsf2.c, CFLAGS-truncsfbf2.c, CFLAGS-truncdfbf2.c,\n+\tCFLAGS-truncxfbf2.c, CFLAGS-trunctfbf2.c, CFLAGS-trunchfbf2.c): Add\n+\t-msse2.\n+\t* config/i386/libgcc-glibc.ver (GCC_13.0.0): Export\n+\t__extendbfsf2 and __trunc{s,d,x,t,h}fbf2.\n+\t* config/i386/sfp-machine.h (_FP_NANSIGN_B): Define.\n+\t* config/i386/64/sfp-machine.h (_FP_NANFRAC_B): Define.\n+\t* config/i386/32/sfp-machine.h (_FP_NANFRAC_B): Define.\n+\t* soft-fp/brain.h: New file.\n+\t* soft-fp/truncsfbf2.c: New file.\n+\t* soft-fp/truncdfbf2.c: New file.\n+\t* soft-fp/truncxfbf2.c: New file.\n+\t* soft-fp/trunctfbf2.c: New file.\n+\t* soft-fp/trunchfbf2.c: New file.\n+\t* soft-fp/truncbfhf2.c: New file.\n+\t* soft-fp/extendbfsf2.c: New file.\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-driver.c: Use new function."}, {"sha": "1c8cc5c7ef5775aaa0242e646dd26dfd622f3a1c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,11 @@\n+2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-demangle.h (D_BUILTIN_TYPE_COUNT): Increment.\n+\t* cp-demangle.c (cplus_demangle_builtin_types): Add std::bfloat16_t\n+\tentry.\n+\t(cplus_demangle_type): Demangle DF16b.\n+\t* testsuite/demangle-expected (_Z3xxxDF16b): New test.\n+\n 2022-10-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-demangle.c (d_prefix): 'M' components are not"}, {"sha": "8166bc909b6ed8388f588158868d1d7695a50b7f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeec7cc83b19b46d1c73523f06efa7ea2b30390/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=baeec7cc83b19b46d1c73523f06efa7ea2b30390", "patch": "@@ -1,3 +1,27 @@\n+2022-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/eh_alloc.cc [USE_POOL]: New macro.\n+\t[!USE_POOL] (__gnu_cxx::__freeres, pool): Do not define.\n+\t[_GLIBCXX_EH_POOL_STATIC] (pool::arena): Do not use std::max.\n+\t(__cxxabiv1::__cxa_allocate_exception) [!USE_POOL]: Do not use\n+\tpool.\n+\t(__cxxabiv1::__cxa_free_exception) [!USE_POOL]: Likewise.\n+\t(__cxxabiv1::__cxa_allocate_dependent_exception) [!USE_POOL]:\n+\tLikewise.\n+\t(__cxxabiv1::__cxa_free_dependent_exception) [!USE_POOL]:\n+\tLikewise.\n+\n+2022-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/debug.cc (print_raw): Simplify.\n+\t(print_word): Print indentation by calling fprintf directly.\n+\t(_Error_formatter::_M_error): Print unindented string by calling\n+\tfprintf directly.\n+\n+2022-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/iostream: Use markdown in Doxygen comment.\n+\n 2022-10-12  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/string: Add using _Base::compare."}]}