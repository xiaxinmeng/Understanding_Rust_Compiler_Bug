{"sha": "23d9f62c50d935462ecda5516746037a474c25cd", "node_id": "C_kwDOANBUbNoAKDIzZDlmNjJjNTBkOTM1NDYyZWNkYTU1MTY3NDYwMzdhNDc0YzI1Y2Q", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-10-10T20:24:02Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-18T20:15:24Z"}, "message": "RISC-V: allow bseti on SImode without sign-extension\n\nAs long as the SImode operand is not a partial subreg, we can use a\nbseti without postprocessing to or in a bit, as the middle end is\nsmart enough to stay away from the signbit.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (*bsetidisi): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbs-bseti-02.c: New test.", "tree": {"sha": "4841223248fdc3d43760442184b90938c3cf59f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4841223248fdc3d43760442184b90938c3cf59f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23d9f62c50d935462ecda5516746037a474c25cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d9f62c50d935462ecda5516746037a474c25cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d9f62c50d935462ecda5516746037a474c25cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d9f62c50d935462ecda5516746037a474c25cd/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11543b27fe16d81ca5483ecb98ec7a5b2426e0c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11543b27fe16d81ca5483ecb98ec7a5b2426e0c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11543b27fe16d81ca5483ecb98ec7a5b2426e0c0"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "2e7142c5302199b362c4e33193a2159040e897f7", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d9f62c50d935462ecda5516746037a474c25cd/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d9f62c50d935462ecda5516746037a474c25cd/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=23d9f62c50d935462ecda5516746037a474c25cd", "patch": "@@ -350,6 +350,18 @@\n   \"bseti\\t%0,%1,%S2\"\n   [(set_attr \"type\" \"bitmanip\")])\n \n+;; As long as the SImode operand is not a partial subreg, we can use a\n+;; bseti without postprocessing, as the middle end is smart enough to\n+;; stay away from the signbit.\n+(define_insn \"*bsetidisi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ior:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t(match_operand 2 \"single_bit_mask_operand\" \"i\")))]\n+  \"TARGET_ZBS && TARGET_64BIT\n+   && !partial_subreg_p (operands[2])\"\n+  \"bseti\\t%0,%1,%S2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n (define_insn \"*bclr<mode>\"\n   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n \t(and:X (rotate:X (const_int -2)"}, {"sha": "d3629946375b229049ee6e6ad6bde246cb09a104", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bseti-02.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d9f62c50d935462ecda5516746037a474c25cd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bseti-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d9f62c50d935462ecda5516746037a474c25cd/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bseti-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bseti-02.c?ref=23d9f62c50d935462ecda5516746037a474c25cd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+/* bexti */\n+int f(int* a, int b)\n+{\n+  return ((*a << b) | (1 << 14));\n+}\n+\n+int g(int a, int b)\n+{\n+  return ((a + b)| (1 << 30));\n+}\n+\n+int h(int a, int b)\n+{\n+  return ((a + b)| (1ULL << 33));\n+}\n+\n+/* { dg-final { scan-assembler-times \"addw\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"sllw\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bseti\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"sext.w\\t\" } } */\n+"}]}