{"sha": "3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "node_id": "C_kwDOANBUbNoAKDNhYjVjOGNkMDNkOTJiZjRlYzQxZTM1MTgyMDM0OWQ5MmZiYzQwYzQ", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-03-18T08:30:00Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-03-25T17:26:33Z"}, "message": "arm: Revert Auto-vectorization for MVE: add pack/unpack patterns PR target/104882\n\nThis reverts commit r12-1434-g046a3beb1673bf to fix PR target/104882.\n\nAs discussed in the PR, it turns out that the MVE ISA has no natural\nmapping with GCC's vec_pack_trunc / vec_unpack standard patterns, unlike\nNeon or SVE for instance.\n\nThis patch also adds the executable testcase provided in the PR.\nThis test passes at -O3 because the generated code does not need\nto use the pack/unpack patterns, hence the use of -O2 which now\ntriggers vectorization since a few months ago.\n\n2022-03-18  Christophe Lyon  <christohe.lyon@arm.com>\n\n\tPR target/104882\n\tRevert\n\t2021-06-11  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/mve.md (mve_vec_unpack<US>_lo_<mode>): Delete.\n\t(mve_vec_unpack<US>_hi_<mode>): Delete.\n\t(@mve_vec_pack_trunc_lo_<mode>): Delete.\n\t(mve_vmovntq_<supf><mode>): Remove '@' prefix.\n\t* config/arm/neon.md (vec_unpack<US>_hi_<mode>): Move back\n\tfrom vec-common.md.\n\t(vec_unpack<US>_lo_<mode>): Likewise.\n\t(vec_pack_trunc_<mode>): Rename from\n\tneon_quad_vec_pack_trunc_<mode>.\n\t* config/arm/vec-common.md (vec_unpack<US>_hi_<mode>): Delete.\n\t(vec_unpack<US>_lo_<mode>): Delete.\n\t(vec_pack_trunc_<mode>): Delete.\n\n\tPR target/104882\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vclz.c: Update expected results.\n\t* gcc.target/arm/simd/mve-vshl.c: Likewise.\n\t* gcc.target/arm/simd/mve-vec-pack.c: Delete.\n\t* gcc.target/arm/simd/mve-vec-unpack.c: Delete.\n\t* gcc.target/arm/simd/pr104882.c: New test.", "tree": {"sha": "d7fb4667893cc9150e2bea0d960af8e83a732069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7fb4667893cc9150e2bea0d960af8e83a732069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/comments", "author": null, "committer": null, "parents": [{"sha": "25725506b85f478076770942d76799c54310c696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25725506b85f478076770942d76799c54310c696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25725506b85f478076770942d76799c54310c696"}], "stats": {"total": 228, "additions": 59, "deletions": 169}, "files": [{"sha": "369d7a79f6cf7efec4a29521ca266e4b6afa3a11", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "patch": "@@ -535,26 +535,6 @@\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n-(define_insn \"mve_vec_unpack<US>_lo_<mode>\"\n-  [(set (match_operand:<V_unpack> 0 \"register_operand\" \"=w\")\n-\t(SE:<V_unpack> (vec_select:<V_HALF>\n-\t\t\t  (match_operand:MVE_3 1 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:MVE_3 2 \"vect_par_constant_low\" \"\"))))]\n-  \"TARGET_HAVE_MVE\"\n-  \"vmovlb.<US>%#<V_sz_elem> %q0, %q1\"\n-  [(set_attr \"type\" \"mve_move\")]\n-)\n-\n-(define_insn \"mve_vec_unpack<US>_hi_<mode>\"\n-  [(set (match_operand:<V_unpack> 0 \"register_operand\" \"=w\")\n-\t(SE:<V_unpack> (vec_select:<V_HALF>\n-\t\t\t  (match_operand:MVE_3 1 \"register_operand\" \"w\")\n-\t\t\t  (match_operand:MVE_3 2 \"vect_par_constant_high\" \"\"))))]\n-  \"TARGET_HAVE_MVE\"\n-  \"vmovlt.<US>%#<V_sz_elem> %q0, %q1\"\n-  [(set_attr \"type\" \"mve_move\")]\n-)\n-\n ;;\n ;; [vcvtpq_s, vcvtpq_u])\n ;;\n@@ -2219,23 +2199,10 @@\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n-;; vmovnb pattern used by the vec_pack_trunc expander to avoid the\n-;; need for an uninitialized input operand.\n-(define_insn \"@mve_vec_pack_trunc_lo_<mode>\"\n-  [\n-   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n-\t(unspec:<V_narrow_pack> [(match_operand:MVE_5 1 \"s_register_operand\" \"w\")]\n-\t VMOVNBQ_S))\n-  ]\n-  \"TARGET_HAVE_MVE\"\n-  \"vmovnb.i%#<V_sz_elem>\t%q0, %q1\"\n-  [(set_attr \"type\" \"mve_move\")\n-])\n-\n ;;\n ;; [vmovntq_s, vmovntq_u])\n ;;\n-(define_insn \"@mve_vmovntq_<supf><mode>\"\n+(define_insn \"mve_vmovntq_<supf><mode>\"\n   [\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")"}, {"sha": "275bcc1435e24a07d2eb772b229f1803b484e9c9", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "patch": "@@ -6005,6 +6005,43 @@ if (BYTES_BIG_ENDIAN)\n   [(set_attr \"type\" \"neon_shift_imm_long\")]\n )\n \n+(define_expand \"vec_unpack<US>_hi_<mode>\"\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))]\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n+  {\n+   rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n+   rtx t1;\n+   int i;\n+   for (i = 0; i < (<V_mode_nunits>/2); i++)\n+     RTVEC_ELT (v, i) = GEN_INT ((<V_mode_nunits>/2) + i);\n+  \n+   t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+   emit_insn (gen_neon_vec_unpack<US>_hi_<mode> (operands[0], \n+                                                 operands[1], \n+\t\t\t\t\t         t1));\n+   DONE;\n+  }\n+)\n+\n+(define_expand \"vec_unpack<US>_lo_<mode>\"\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))]\n+ \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n+  {\n+   rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n+   rtx t1;\n+   int i;\n+   for (i = 0; i < (<V_mode_nunits>/2) ; i++)\n+     RTVEC_ELT (v, i) = GEN_INT (i);\n+   t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+   emit_insn (gen_neon_vec_unpack<US>_lo_<mode> (operands[0], \n+                                                 operands[1], \n+\t\t\t\t   \t         t1));\n+   DONE;\n+  }\n+)\n+\n (define_insn \"neon_vec_<US>mult_lo_<mode>\"\n  [(set (match_operand:<V_unpack> 0 \"register_operand\" \"=w\")\n        (mult:<V_unpack> (SE:<V_unpack> (vec_select:<V_HALF>\n@@ -6220,7 +6257,7 @@ if (BYTES_BIG_ENDIAN)\n ; because the ordering of vector elements in Q registers is different from what\n ; the semantics of the instructions require.\n \n-(define_insn \"neon_quad_vec_pack_trunc_<mode>\"\n+(define_insn \"vec_pack_trunc_<mode>\"\n  [(set (match_operand:<V_narrow_pack> 0 \"register_operand\" \"=&w\")\n        (vec_concat:<V_narrow_pack> \n \t\t(truncate:<V_narrow> "}, {"sha": "fd878cba22d81994d5f7dc021273db036b8af977", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "patch": "@@ -580,77 +580,6 @@\n   \"ARM_HAVE_<MODE>_ARITH\n    && !TARGET_REALLY_IWMMXT\"\n )\n-\n-;; vmovl[tb] are not available for V4SI on MVE\n-(define_expand \"vec_unpack<US>_hi_<mode>\"\n-  [(set (match_operand:<V_unpack> 0 \"register_operand\")\n-\t(SE:<V_unpack> (vec_select:<V_HALF>\n-\t\t\t (match_operand:VU 1 \"register_operand\")\n-\t\t\t (match_dup 2))))]\n- \"ARM_HAVE_<MODE>_ARITH\n-  && !TARGET_REALLY_IWMMXT\n-  && ! (<MODE>mode == V4SImode && TARGET_HAVE_MVE)\n-  && !BYTES_BIG_ENDIAN\"\n-  {\n-    rtvec v = rtvec_alloc (<V_mode_nunits>/2);\n-    int i;\n-    for (i = 0; i < (<V_mode_nunits>/2); i++)\n-      RTVEC_ELT (v, i) = GEN_INT ((<V_mode_nunits>/2) + i);\n-\n-    operands[2] = gen_rtx_PARALLEL (<MODE>mode, v);\n-  }\n-)\n-\n-;; vmovl[tb] are not available for V4SI on MVE\n-(define_expand \"vec_unpack<US>_lo_<mode>\"\n-  [(set (match_operand:<V_unpack> 0 \"register_operand\")\n-\t(SE:<V_unpack> (vec_select:<V_HALF>\n-\t\t\t (match_operand:VU 1 \"register_operand\")\n-\t\t\t (match_dup 2))))]\n- \"ARM_HAVE_<MODE>_ARITH\n-  && !TARGET_REALLY_IWMMXT\n-  && ! (<MODE>mode == V4SImode && TARGET_HAVE_MVE)\n-  && !BYTES_BIG_ENDIAN\"\n-  {\n-    rtvec v = rtvec_alloc (<V_mode_nunits>/2);\n-    int i;\n-    for (i = 0; i < (<V_mode_nunits>/2) ; i++)\n-      RTVEC_ELT (v, i) = GEN_INT (i);\n-\n-    operands[2] = gen_rtx_PARALLEL (<MODE>mode, v);\n-\n-  }\n-)\n-\n-;; vmovn[tb] are not available for V2DI on MVE\n-(define_expand \"vec_pack_trunc_<mode>\"\n- [(set (match_operand:<V_narrow_pack> 0 \"register_operand\")\n-       (vec_concat:<V_narrow_pack>\n-\t\t(truncate:<V_narrow>\n-\t\t\t(match_operand:VN 1 \"register_operand\"))\n-\t\t(truncate:<V_narrow>\n-\t\t\t(match_operand:VN 2 \"register_operand\"))))]\n- \"ARM_HAVE_<MODE>_ARITH\n-  && !TARGET_REALLY_IWMMXT\n-  && ! (<MODE>mode == V2DImode && TARGET_HAVE_MVE)\n-  && !BYTES_BIG_ENDIAN\"\n- {\n-   if (TARGET_NEON)\n-     {\n-       emit_insn (gen_neon_quad_vec_pack_trunc_<mode> (operands[0], operands[1],\n-\t\t\t\t\t\t       operands[2]));\n-     }\n-   else\n-     {\n-       rtx tmpreg = gen_reg_rtx (<V_narrow_pack>mode);\n-       emit_insn (gen_mve_vec_pack_trunc_lo (<MODE>mode, tmpreg, operands[1]));\n-       emit_insn (gen_mve_vmovntq (VMOVNTQ_S, <MODE>mode,\n-\t\t\t\t   operands[0], tmpreg, operands[2]));\n-     }\n-   DONE;\n- }\n-)\n-\n (define_expand \"vec_init<mode><V_elem_l>\"\n   [(match_operand:VDQX 0 \"s_register_operand\")\n    (match_operand 1 \"\" \"\")]"}, {"sha": "7068736bc283ad51a97ae4a524f6c9a89373abfe", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vclz.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vclz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vclz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vclz.c?ref=3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "patch": "@@ -21,9 +21,8 @@ FUNC(u, uint, 16, clz)\n FUNC(s, int, 8, clz)\n FUNC(u, uint, 8, clz)\n \n-/* 16 and 8-bit versions still use 32-bit intermediate temporaries, so for\n-   instance instead of using vclz.i8, we need 4 vclz.i32, leading to a total of\n-   14 vclz.i32 expected in this testcase.  */\n-/* { dg-final { scan-assembler-times {vclz\\.i32  q[0-9]+, q[0-9]+} 14 } } */\n+/* 16 and 8-bit versions are not vectorized because they need pack/unpack\n+   patterns since __builtin_clz uses 32-bit parameter and return value.  */\n+/* { dg-final { scan-assembler-times {vclz\\.i32  q[0-9]+, q[0-9]+} 2 } } */\n /* { dg-final { scan-assembler-times {vclz\\.i16  q[0-9]+, q[0-9]+} 2 { xfail *-*-* } } } */\n /* { dg-final { scan-assembler-times {vclz\\.i8  q[0-9]+, q[0-9]+} 2 { xfail *-*-* } } } */"}, {"sha": "43642b2fec582abc9ea703114094602a1561ad51", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vec-pack.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25725506b85f478076770942d76799c54310c696/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vec-pack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25725506b85f478076770942d76799c54310c696/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vec-pack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vec-pack.c?ref=25725506b85f478076770942d76799c54310c696", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O3\" } */\n-\n-#include <stdint.h>\n-\n-#define FUNC(SIGN, TYPE, DSTBITS, BITS, NAME)\t\t\t\t\\\n-  void test_ ## NAME ##_ ## SIGN ## BITS (TYPE##DSTBITS##_t * __restrict__ dest, \\\n-\t\t\t\t\t  TYPE##BITS##_t *a) {\t\t\\\n-    int i;\t\t\t\t\t\t\t\t\\\n-    for (i=0; i < (256 / BITS); i++) {\t\t\t\t\t\\\n-      dest[i] = a[i];\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n-FUNC(s, int, 16, 32, pack)\n-FUNC(u, uint, 16, 32, pack)\n-FUNC(s, int, 8, 16, pack)\n-FUNC(u, uint, 8, 16, pack)\n-\n-/* { dg-final { scan-assembler-times {vmovnt\\.i32\\tq[0-9]+, q[0-9]+} 2 } } */\n-/* { dg-final { scan-assembler-times {vmovnb\\.i32\\tq[0-9]+, q[0-9]+} 2 } } */\n-/* { dg-final { scan-assembler-times {vmovnt\\.i16\\tq[0-9]+, q[0-9]+} 2 } } */\n-/* { dg-final { scan-assembler-times {vmovnb\\.i16\\tq[0-9]+, q[0-9]+} 2 } } */\n-/* { dg-final { scan-assembler-not {vldr\\.64\\td[0-9]+, \\.L} } } */"}, {"sha": "cdc62f854ad1942a3ffa2d4dcfed002db80f5e9a", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vec-unpack.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25725506b85f478076770942d76799c54310c696/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vec-unpack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25725506b85f478076770942d76799c54310c696/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vec-unpack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vec-unpack.c?ref=25725506b85f478076770942d76799c54310c696", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n-/* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O3\" } */\n-\n-#include <stdint.h>\n-\n-#define FUNC(SIGN, TYPE, DSTBITS, BITS, NAME)\t\t\t\t\\\n-  void test_ ## NAME ##_ ## SIGN ## BITS (TYPE##DSTBITS##_t * __restrict__ dest, \\\n-\t\t\t\t\t  TYPE##BITS##_t *a) {\t\t\\\n-    int i;\t\t\t\t\t\t\t\t\\\n-    for (i=0; i < (128 / BITS); i++) {\t\t\t\t\t\\\n-      dest[i] = a[i];\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n-FUNC(s, int, 32, 16, unpack)\n-FUNC(u, uint, 32, 16, unpack)\n-FUNC(s, int, 16, 8, unpack)\n-FUNC(u, uint, 16, 8, unpack)\n-\n-/* { dg-final { scan-assembler-times {vmovlt\\.s16 q[0-9]+, q[0-9]+} 1 } } */\n-/* { dg-final { scan-assembler-times {vmovlb\\.s16 q[0-9]+, q[0-9]+} 1 } } */\n-/* { dg-final { scan-assembler-times {vmovlt\\.u16 q[0-9]+, q[0-9]+} 1 } } */\n-/* { dg-final { scan-assembler-times {vmovlb\\.u16 q[0-9]+, q[0-9]+} 1 } } */\n-/* { dg-final { scan-assembler-times {vmovlt\\.s8 q[0-9]+, q[0-9]+} 1 } } */\n-/* { dg-final { scan-assembler-times {vmovlb\\.s8 q[0-9]+, q[0-9]+} 1 } } */\n-/* { dg-final { scan-assembler-times {vmovlt\\.u8 q[0-9]+, q[0-9]+} 1 } } */\n-/* { dg-final { scan-assembler-times {vmovlb\\.u8 q[0-9]+, q[0-9]+} 1 } } */"}, {"sha": "7a0644997c8bdcf6ee97bc843c3da05ed8af43ff", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vshl.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vshl.c?ref=3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "patch": "@@ -56,10 +56,7 @@ FUNC_IMM(u, uint, 8, 16, <<, vshlimm)\n /* MVE has only 128-bit vectors, so we can vectorize only half of the\n    functions above.  */\n /* We only emit vshl.u, which is equivalent to vshl.s anyway.  */\n-/* 16 and 8-bit versions still use 32-bit intermediate temporaries, so for\n-   instance instead of using vshl.u8, we need 4 vshl.i32, leading to a total of\n-   14 vshl.i32 expected in this testcase.  */\n-/* { dg-final { scan-assembler-times {vshl.u[0-9]+\\tq[0-9]+, q[0-9]+} 14 } } */\n+/* { dg-final { scan-assembler-times {vshl.u[0-9]+\\tq[0-9]+, q[0-9]+} 2 } } */\n \n /* We emit vshl.i when the shift amount is an immediate.  */\n /* { dg-final { scan-assembler-times {vshl.i[0-9]+\\tq[0-9]+, q[0-9]+} 6 } } */"}, {"sha": "ae9709af42f227ffb1d72b5a6baad943e578008f", "filename": "gcc/testsuite/gcc.target/arm/simd/pr104882.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr104882.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab5c8cd03d92bf4ec41e351820349d92fbc40c4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr104882.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fpr104882.c?ref=3ab5c8cd03d92bf4ec41e351820349d92fbc40c4", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+int i;\n+char src[1072];\n+char dst[72];\n+int main() {\n+  for (i = 0; i < 128; i++)\n+    src[i] = i;\n+  __builtin_memcpy(dst, src, 7);\n+  for (i = 0; i < 7; i++)\n+    if (dst[i] != i)\n+      __builtin_abort();\n+}"}]}