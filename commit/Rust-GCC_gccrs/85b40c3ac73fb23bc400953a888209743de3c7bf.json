{"sha": "85b40c3ac73fb23bc400953a888209743de3c7bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViNDBjM2FjNzNmYjIzYmM0MDA5NTNhODg4MjA5NzQzZGUzYzdiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-12-06T19:33:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-12-06T19:33:52Z"}, "message": "re PR debug/45997 (__unknown__ type name for typedef'd int)\n\n\tPR debug/45997\n\t* dwarf2out.c (modified_type_die): If both is_const_type and\n\tis_volatile_type is set, start with DW_TAG_const_type or\n\tDW_TAG_volatile_type depending on where we get qualified type\n\tin the recursive call.\n\n\t* g++.dg/debug/dwarf2/pr45997-1.C: New test.\n\t* g++.dg/debug/dwarf2/pr45997-2.C: New test.\n\nFrom-SVN: r167517", "tree": {"sha": "c541315741187be413c024615beee7062b2baad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c541315741187be413c024615beee7062b2baad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85b40c3ac73fb23bc400953a888209743de3c7bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b40c3ac73fb23bc400953a888209743de3c7bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b40c3ac73fb23bc400953a888209743de3c7bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b40c3ac73fb23bc400953a888209743de3c7bf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "628162eabeaddc4079107d467a55b1d0362e5cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628162eabeaddc4079107d467a55b1d0362e5cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628162eabeaddc4079107d467a55b1d0362e5cbd"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "c2d40f134bc3b3ed34190ef11b42c0f52c0b6bef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85b40c3ac73fb23bc400953a888209743de3c7bf", "patch": "@@ -1,5 +1,11 @@\n 2010-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/45997\n+\t* dwarf2out.c (modified_type_die): If both is_const_type and\n+\tis_volatile_type is set, start with DW_TAG_const_type or\n+\tDW_TAG_volatile_type depending on where we get qualified type\n+\tin the recursive call.\n+\n \tPR target/43897\n \t* config/ia64/ia64.c (rtx_needs_barrier): Handle asm CLOBBER\n \tas a store into that register."}, {"sha": "c9855270d3891ce1f73347c4b5b50896b13211fc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=85b40c3ac73fb23bc400953a888209743de3c7bf", "patch": "@@ -12907,15 +12907,20 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n       /* Else cv-qualified version of named type; fall through.  */\n     }\n \n-  if (is_const_type)\n+  if (is_const_type\n+      /* If both is_const_type and is_volatile_type, prefer the path\n+\t which leads to a qualified type.  */\n+      && (!is_volatile_type\n+\t  || get_qualified_type (type, TYPE_QUAL_CONST) == NULL_TREE\n+\t  || get_qualified_type (type, TYPE_QUAL_VOLATILE) != NULL_TREE))\n     {\n       mod_type_die = new_die (DW_TAG_const_type, comp_unit_die (), type);\n       sub_die = modified_type_die (type, 0, is_volatile_type, context_die);\n     }\n   else if (is_volatile_type)\n     {\n       mod_type_die = new_die (DW_TAG_volatile_type, comp_unit_die (), type);\n-      sub_die = modified_type_die (type, 0, 0, context_die);\n+      sub_die = modified_type_die (type, is_const_type, 0, context_die);\n     }\n   else if (code == POINTER_TYPE)\n     {"}, {"sha": "0aecee3806f325e4a11c5b6220696f6c438d11b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85b40c3ac73fb23bc400953a888209743de3c7bf", "patch": "@@ -1,5 +1,9 @@\n 2010-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/45997\n+\t* g++.dg/debug/dwarf2/pr45997-1.C: New test.\n+\t* g++.dg/debug/dwarf2/pr45997-2.C: New test.\n+\n \tPR target/43897\n \t* gcc.target/ia64/pr43897.c: New test.\n "}, {"sha": "72f24ad4a7b0afcff45a582692fc5d34a310cd45", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr45997-1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr45997-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr45997-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr45997-1.C?ref=85b40c3ac73fb23bc400953a888209743de3c7bf", "patch": "@@ -0,0 +1,22 @@\n+// PR debug/45997\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA\" }\n+\n+typedef int my_int;\n+typedef const my_int const_my_int;\n+typedef volatile const_my_int volatile_const_my_int;\n+\n+my_int v_my_int = 0;\n+const_my_int v_const_my_int = 1;\n+volatile_const_my_int v_volatile_const_my_int = 4;\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : \"r\" (&v_my_int));\n+  asm volatile (\"\" : : \"r\" (&v_const_my_int));\n+  asm volatile (\"\" : : \"r\" (&v_volatile_const_my_int));\n+  return 0;\n+}\n+\n+// { dg-final { scan-assembler-times \"DIE\\[^\\n\\r\\]*DW_TAG_base_type\" 1 } }"}, {"sha": "ade542804fb9f15f2b3be6212dd07d8ab5b99dae", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr45997-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr45997-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b40c3ac73fb23bc400953a888209743de3c7bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr45997-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr45997-2.C?ref=85b40c3ac73fb23bc400953a888209743de3c7bf", "patch": "@@ -0,0 +1,22 @@\n+// PR debug/45997\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-2 -dA\" }\n+\n+typedef int my_int;\n+typedef volatile my_int volatile_my_int;\n+typedef const volatile_my_int const_volatile_my_int;\n+\n+my_int v_my_int = 0;\n+volatile_my_int v_volatile_my_int = 1;\n+const_volatile_my_int v_const_volatile_my_int = 4;\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : \"r\" (&v_my_int));\n+  asm volatile (\"\" : : \"r\" (&v_volatile_my_int));\n+  asm volatile (\"\" : : \"r\" (&v_const_volatile_my_int));\n+  return 0;\n+}\n+\n+// { dg-final { scan-assembler-times \"DIE\\[^\\n\\r\\]*DW_TAG_base_type\" 1 } }"}]}