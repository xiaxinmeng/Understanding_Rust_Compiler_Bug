{"sha": "1629f7005208e42cede66374861c211c5a6d85e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyOWY3MDA1MjA4ZTQyY2VkZTY2Mzc0ODYxYzIxMWM1YTZkODVlOA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-07-13T09:03:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T09:03:48Z"}, "message": "par-ch3.adb (P_Discrete_Choice_List): Choice can only be simple expression if extensions permitted.\n\n2009-07-13  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch3.adb (P_Discrete_Choice_List): Choice can only be simple\n\texpression if extensions permitted.\n\n\t* par-ch4.adb (P_Membership_Test): New procedure (implement membership\n\tset tests).\n\t(P_Relation): Use P_Membership_Test\n\n\t* par.adb (P_Membership_Test): New procedure (implement membership set\n\ttests).\n\n\t* sinfo.ads, sinfo.adb (N_In, N_Not_In) Add Alternatives field for sets.\n\n\t* sprint.adb (Sprint_Node): Handle set form for membership tests.\n\nFrom-SVN: r149556", "tree": {"sha": "ffcc18e7df150785b6195dbd7d97b32893c554f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffcc18e7df150785b6195dbd7d97b32893c554f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1629f7005208e42cede66374861c211c5a6d85e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1629f7005208e42cede66374861c211c5a6d85e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1629f7005208e42cede66374861c211c5a6d85e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1629f7005208e42cede66374861c211c5a6d85e8/comments", "author": null, "committer": null, "parents": [{"sha": "c6f3943726b17627b823edc39ab0b33192427b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f3943726b17627b823edc39ab0b33192427b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f3943726b17627b823edc39ab0b33192427b2f"}], "stats": {"total": 182, "additions": 161, "deletions": 21}, "files": [{"sha": "2029915348e82add85541bfc14b10f95e1daee37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1629f7005208e42cede66374861c211c5a6d85e8", "patch": "@@ -1,3 +1,19 @@\n+2009-07-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch3.adb (P_Discrete_Choice_List): Choice can only be simple\n+\texpression if extensions permitted.\n+\n+\t* par-ch4.adb (P_Membership_Test): New procedure (implement membership\n+\tset tests).\n+\t(P_Relation): Use P_Membership_Test\n+\n+\t* par.adb (P_Membership_Test): New procedure (implement membership set\n+\ttests).\n+\n+\t* sinfo.ads, sinfo.adb (N_In, N_Not_In) Add Alternatives field for sets.\n+\n+\t* sprint.adb (Sprint_Node): Handle set form for membership tests.\n+\n 2009-07-13  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_dist.adb (Add_RACW_Primitive_Declarations_And_Bodies):"}, {"sha": "820cb5549e66bb69c3efd7c6af606231a78581a2", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=1629f7005208e42cede66374861c211c5a6d85e8", "patch": "@@ -2057,11 +2057,14 @@ package body Ch3 is\n \n    --  Error recovery: cannot raise Error_Resync\n \n-   function P_Range_Or_Subtype_Mark return Node_Id is\n+   function P_Range_Or_Subtype_Mark\n+     (Allow_Simple_Expression : Boolean := False) return Node_Id\n+   is\n       Expr_Node  : Node_Id;\n       Range_Node : Node_Id;\n       Save_Loc   : Source_Ptr;\n \n+\n    --  Start of processing for P_Range_Or_Subtype_Mark\n \n    begin\n@@ -2071,7 +2074,8 @@ package body Ch3 is\n \n       --  Scan out either a simple expression or a range (this accepts more\n       --  than is legal here, but as explained above, we like to allow more\n-      --  with a proper diagnostic.\n+      --  with a proper diagnostic, and in the case of a membership operation\n+      --  where sets are allowed, a simple expression is permissible anyway.\n \n       Expr_Node := P_Simple_Expression_Or_Range_Attribute;\n \n@@ -3555,14 +3559,15 @@ package body Ch3 is\n \n    begin\n       Choices := New_List;\n-\n       loop\n          if Token = Tok_Others then\n             Append (New_Node (N_Others_Choice, Token_Ptr), Choices);\n             Scan; -- past OTHERS\n \n          else\n             begin\n+               --  Scan out expression or range attribute\n+\n                Expr_Node := P_Expression_Or_Range_Attribute;\n                Ignore (Tok_Right_Paren);\n \n@@ -3572,9 +3577,13 @@ package body Ch3 is\n                   Error_Msg_SP (\"label not permitted in this context\");\n                   Scan; -- past colon\n \n+               --  Range attribute\n+\n                elsif Expr_Form = EF_Range_Attr then\n                   Append (Expr_Node, Choices);\n \n+               --  Explicit range\n+\n                elsif Token = Tok_Dot_Dot then\n                   Check_Simple_Expression (Expr_Node);\n                   Choice_Node := New_Node (N_Range, Token_Ptr);\n@@ -3585,23 +3594,62 @@ package body Ch3 is\n                   Set_High_Bound (Choice_Node, Expr_Node);\n                   Append (Choice_Node, Choices);\n \n+               --  Simple name, must be subtype, so range allowed\n+\n                elsif Expr_Form = EF_Simple_Name then\n                   if Token = Tok_Range then\n                      Append (P_Subtype_Indication (Expr_Node), Choices);\n \n                   elsif Token in Token_Class_Consk then\n                      Error_Msg_SC\n-                        (\"the only constraint allowed here \" &\n-                         \"is a range constraint\");\n+                       (\"the only constraint allowed here \" &\n+                        \"is a range constraint\");\n                      Discard_Junk_Node (P_Constraint_Opt);\n                      Append (Expr_Node, Choices);\n \n                   else\n                      Append (Expr_Node, Choices);\n                   end if;\n \n+               --  Expression\n+\n                else\n-                  Check_Simple_Expression_In_Ada_83 (Expr_Node);\n+                  --  If extensions are permitted then the expression must be a\n+                  --  simple expression. The resaon for this restriction (i.e.\n+                  --  going back to the Ada 83 rule) is to avoid ambiguities\n+                  --  when set membership operations are allowed, consider the\n+                  --  following:\n+\n+                  --     when A in 1 .. 10 | 12 =>\n+\n+                  --  This is ambiguous without parentheses, so we require one\n+                  --  of the following two parenthesized forms to disambuguate:\n+\n+                  --  one of the following:\n+\n+                  --     when (A in 1 .. 10 | 12) =>\n+                  --     when (A in 1 .. 10) | 12 =>\n+\n+                  --  We consider it unlikely that reintroducing the Ada 83\n+                  --  restriction will cause an upwards incompatibility issue.\n+                  --  Historically the only reason for the change in Ada 95 was\n+                  --  for consistency (all cases of Simple_Expression in Ada 83\n+                  --  which could be changed to Expression without causing any\n+                  --  ambiguities were changed).\n+\n+                  if Extensions_Allowed and then Expr_Form = EF_Non_Simple then\n+                     Error_Msg_N\n+                       (\"|this expression must be parenthesized!\",\n+                        Expr_Node);\n+                     Error_Msg_N\n+                       (\"\\|since extensions (and set notation) are allowed\",\n+                        Expr_Node);\n+\n+                  --  In Ada 83 mode, the syntax required a simple expression\n+                  else\n+                     Check_Simple_Expression_In_Ada_83 (Expr_Node);\n+                  end if;\n+\n                   Append (Expr_Node, Choices);\n                end if;\n "}, {"sha": "0d8e33cf7d750a3eb7c3de05c37f8399904b1922", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=1629f7005208e42cede66374861c211c5a6d85e8", "patch": "@@ -79,6 +79,11 @@ package body Ch4 is\n    --  Called to place complaint about bad range attribute at the given\n    --  source location. Terminates by raising Error_Resync.\n \n+   procedure P_Membership_Test (N : Node_Id);\n+   --  N is the node for a N_In or N_Not_In node whose right operand has not\n+   --  yet been processed. It is called just after scanning out the IN keyword.\n+   --  On return, either Right_Opnd or Alternatives is set, as appropriate.\n+\n    function P_Range_Attribute_Reference (Prefix_Node : Node_Id) return Node_Id;\n    --  Scan a range attribute reference. The caller has scanned out the\n    --  prefix. The current token is known to be an apostrophe and the\n@@ -1757,7 +1762,7 @@ package body Ch4 is\n          --  Case of IN or NOT IN\n \n          if Prev_Token = Tok_In then\n-            Set_Right_Opnd (Node2, P_Range_Or_Subtype_Mark);\n+            P_Membership_Test (Node2);\n \n          --  Case of relational operator (= /= < <= > >=)\n \n@@ -2734,4 +2739,42 @@ package body Ch4 is\n           Expressions => Exprs);\n    end P_Conditional_Expression;\n \n+   -----------------------\n+   -- P_Membership_Test --\n+   -----------------------\n+\n+   procedure P_Membership_Test (N : Node_Id) is\n+      Alt : constant Node_Id :=\n+              P_Range_Or_Subtype_Mark\n+                (Allow_Simple_Expression => Extensions_Allowed);\n+\n+   begin\n+      --  Set case\n+\n+      if Token = Tok_Vertical_Bar then\n+         if not Extensions_Allowed then\n+            Error_Msg_SC (\"set notation is a language extension\");\n+            Error_Msg_SC (\"\\|use -gnatX switch to compile this unit\");\n+         end if;\n+\n+         Set_Alternatives (N, New_List (Alt));\n+         Set_Right_Opnd   (N, Empty);\n+\n+         --  Loop to accumulate alternatives\n+\n+         while Token = Tok_Vertical_Bar loop\n+            Scan; -- past vertical bar\n+            Append_To\n+              (Alternatives (N),\n+               P_Range_Or_Subtype_Mark (Allow_Simple_Expression => True));\n+         end loop;\n+\n+      --  Not set case\n+\n+      else\n+         Set_Right_Opnd   (N, Alt);\n+         Set_Alternatives (N, No_List);\n+      end if;\n+   end P_Membership_Test;\n+\n end Ch4;"}, {"sha": "a323d7ad8c7d1791693ede58f469f22feb452e1a", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=1629f7005208e42cede66374861c211c5a6d85e8", "patch": "@@ -577,7 +577,6 @@ is\n       function P_Known_Discriminant_Part_Opt          return List_Id;\n       function P_Signed_Integer_Type_Definition       return Node_Id;\n       function P_Range                                return Node_Id;\n-      function P_Range_Or_Subtype_Mark                return Node_Id;\n       function P_Range_Constraint                     return Node_Id;\n       function P_Record_Definition                    return Node_Id;\n       function P_Subtype_Mark                         return Node_Id;\n@@ -629,6 +628,11 @@ is\n       --  Ada 2005 (AI-231): The flag Not_Null_Present indicates that the\n       --  null-excluding part has been scanned out and it was present.\n \n+      function P_Range_Or_Subtype_Mark\n+        (Allow_Simple_Expression : Boolean := False) return Node_Id;\n+      --  Scans out a range or subtype mark, and also permits a general simple\n+      --  expression if Allow_Simple_Expresion is set to True.\n+\n       function Init_Expr_Opt (P : Boolean := False) return Node_Id;\n       --  If an initialization expression is present (:= expression), then\n       --  it is scanned out and returned, otherwise Empty is returned if no"}, {"sha": "073c79c851d79e8b3036e4add8b5cb27c4a079b8", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=1629f7005208e42cede66374861c211c5a6d85e8", "patch": "@@ -229,7 +229,9 @@ package body Sinfo is\n       (N : Node_Id) return List_Id is\n    begin\n       pragma Assert (False\n-        or else NT (N).Nkind = N_Case_Statement);\n+        or else NT (N).Nkind = N_Case_Statement\n+        or else NT (N).Nkind = N_In\n+        or else NT (N).Nkind = N_Not_In);\n       return List4 (N);\n    end Alternatives;\n \n@@ -3034,7 +3036,9 @@ package body Sinfo is\n       (N : Node_Id; Val : List_Id) is\n    begin\n       pragma Assert (False\n-        or else NT (N).Nkind = N_Case_Statement);\n+        or else NT (N).Nkind = N_Case_Statement\n+        or else NT (N).Nkind = N_In\n+        or else NT (N).Nkind = N_Not_In);\n       Set_List4_With_Parent (N, Val);\n    end Set_Alternatives;\n "}, {"sha": "1e2cd0aff6aa797c838ca8ad16622085d97094c5", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=1629f7005208e42cede66374861c211c5a6d85e8", "patch": "@@ -3472,23 +3472,38 @@ package Sinfo is\n       --    SIMPLE_EXPRESSION [not] in RANGE\n       --  | SIMPLE_EXPRESSION [not] in SUBTYPE_MARK\n \n-      --  Note: although the grammar above allows only a range or a\n-      --  subtype mark, the parser in fact will accept any simple\n-      --  expression in place of a subtype mark. This means that the\n-      --  semantic analyzer must be prepared to deal with, and diagnose\n-      --  a simple expression other than a name for the right operand.\n-      --  This simplifies error recovery in the parser.\n+      --  Note: although the grammar above allows only a range or a subtype\n+      --  mark, the parser in fact will accept any simple expression in place\n+      --  of a subtype mark. This means that the semantic analyzer must be able\n+      --  to deal with, and diagnose a simple expression other than a name for\n+      --  the right operand. This simplifies error recovery in the parser.\n+\n+      --  If extensions are enabled, the grammar is as follows:\n+\n+      --  RELATION ::=\n+      --    SIMPLE_EXPRESSION [not] in SET_ALTERNATIVE {| SET_ALTERNATIVE}\n+\n+      --  SET_ALTERNATIVE ::= RANGE | SUBTYPE_MARK\n+\n+      --  The Alternatives field below is present only if there is more than\n+      --  one Set_Alternative present, in which case Right_Opnd is set to\n+      --  Empty, and Alternatives contains the list of alternatives. In the\n+      --  tree passed to the back end, Alternatives is always No_List, and\n+      --  Right_Opnd is set (i.e. the expansion circuitry expands out the\n+      --  complex set membership case using simple membership operations).\n \n       --  N_In\n       --  Sloc points to IN\n       --  Left_Opnd (Node2)\n       --  Right_Opnd (Node3)\n+      --  Alternatives (List4) (set to No_List if only one set alternative)\n       --  plus fields for expression\n \n       --  N_Not_In\n       --  Sloc points to NOT of NOT IN\n       --  Left_Opnd (Node2)\n       --  Right_Opnd (Node3)\n+      --  Alternatives (List4) (set to No_List if only one set alternative)\n       --  plus fields for expression\n \n       --------------------\n@@ -9757,14 +9772,14 @@ package Sinfo is\n        (1 => False,   --  unused\n         2 => True,    --  Left_Opnd (Node2)\n         3 => True,    --  Right_Opnd (Node3)\n-        4 => False,   --  unused\n+        4 => True,    --  Alternatives (List4)\n         5 => False),  --  Etype (Node5-Sem)\n \n      N_Not_In =>\n        (1 => False,   --  unused\n         2 => True,    --  Left_Opnd (Node2)\n         3 => True,    --  Right_Opnd (Node3)\n-        4 => False,   --  unused\n+        4 => True,    --  Alternatives (List4)\n         5 => False),  --  Etype (Node5-Sem)\n \n      N_Op_And =>"}, {"sha": "86d95f3371bfc751dc4e15b6ca1c90541c95a216", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1629f7005208e42cede66374861c211c5a6d85e8/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=1629f7005208e42cede66374861c211c5a6d85e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1885,7 +1885,12 @@ package body Sprint is\n          when N_In =>\n             Sprint_Left_Opnd (Node);\n             Write_Str_Sloc (\" in \");\n-            Sprint_Right_Opnd (Node);\n+\n+            if Present (Right_Opnd (Node)) then\n+               Sprint_Right_Opnd (Node);\n+            else\n+               Sprint_Bar_List (Alternatives (Node));\n+            end if;\n \n          when N_Incomplete_Type_Declaration =>\n             Write_Indent_Str_Sloc (\"type \");\n@@ -1984,7 +1989,12 @@ package body Sprint is\n          when N_Not_In =>\n             Sprint_Left_Opnd (Node);\n             Write_Str_Sloc (\" not in \");\n-            Sprint_Right_Opnd (Node);\n+\n+            if Present (Right_Opnd (Node)) then\n+               Sprint_Right_Opnd (Node);\n+            else\n+               Sprint_Bar_List (Alternatives (Node));\n+            end if;\n \n          when N_Null =>\n             Write_Str_With_Col_Check_Sloc (\"null\");"}]}