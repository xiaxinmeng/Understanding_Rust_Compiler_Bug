{"sha": "a2fe92030ce71454f728bc2e102a320b462b3bbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmZTkyMDMwY2U3MTQ1NGY3MjhiYzJlMTAyYTMyMGI0NjJiM2JiYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2010-01-28T22:29:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-28T22:29:52Z"}, "message": "stl_algobase.h (struct __iter_base): Add.\n\n2010-01-28  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n\t* include/bits/stl_algobase.h (struct __iter_base): Add.\n\t(__niter_base, __miter_base): Adjust, use the latter.\n\nFrom-SVN: r156335", "tree": {"sha": "1022289d1470b34ec03adc2867963a802f51bd3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1022289d1470b34ec03adc2867963a802f51bd3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2fe92030ce71454f728bc2e102a320b462b3bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2fe92030ce71454f728bc2e102a320b462b3bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2fe92030ce71454f728bc2e102a320b462b3bbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2fe92030ce71454f728bc2e102a320b462b3bbc/comments", "author": null, "committer": null, "parents": [{"sha": "6684eb28f6c4fa031e6959d7826ae0a3e2b846d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6684eb28f6c4fa031e6959d7826ae0a3e2b846d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6684eb28f6c4fa031e6959d7826ae0a3e2b846d5"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "65422238034418e6f143981cf148c50fcb4dd9c5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2fe92030ce71454f728bc2e102a320b462b3bbc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2fe92030ce71454f728bc2e102a320b462b3bbc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2fe92030ce71454f728bc2e102a320b462b3bbc", "patch": "@@ -1,3 +1,8 @@\n+2010-01-28  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* include/bits/stl_algobase.h (struct __iter_base): Add.\n+\t(__niter_base, __miter_base): Adjust, use the latter.\n+\n 2010-01-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/21_strings/basic_string/element_access/char/21674.cc:"}, {"sha": "5f6c648cc0c0f19acdb146963b04b2d5fe39a83c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2fe92030ce71454f728bc2e102a320b462b3bbc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2fe92030ce71454f728bc2e102a320b462b3bbc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=a2fe92030ce71454f728bc2e102a320b462b3bbc", "patch": "@@ -1,6 +1,6 @@\n // Core algorithmic facilities -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -259,42 +259,36 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n \n-  // If _Iterator is a __normal_iterator return its base (a plain pointer,\n-  // normally) otherwise return it untouched.  See copy, fill, ... \n-  template<typename _Iterator,\n-\t   bool _IsNormal = __is_normal_iterator<_Iterator>::__value>\n-    struct __niter_base\n+  // If _Iterator has a base returns it otherwise _Iterator is returned\n+  // untouched\n+  template<typename _Iterator, bool _HasBase>\n+    struct __iter_base\n     {\n       static _Iterator\n       __b(_Iterator __it)\n       { return __it; }\n     };\n \n   template<typename _Iterator>\n-    struct __niter_base<_Iterator, true>\n+    struct __iter_base<_Iterator, true>\n     {\n       static typename _Iterator::iterator_type\n       __b(_Iterator __it)\n       { return __it.base(); }\n     };\n \n-  // Likewise, for move_iterator.\n-  template<typename _Iterator,\n-\t   bool _IsMove = __is_move_iterator<_Iterator>::__value>\n-    struct __miter_base\n-    {\n-      static _Iterator\n-      __b(_Iterator __it)\n-      { return __it; }\n-    };\n+  // If _Iterator is a __normal_iterator return its base (a plain pointer,\n+  // normally) otherwise return it untouched.  See copy, fill, ... \n+  template<typename _Iterator>\n+    struct __niter_base\n+    : __iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>\n+    { };\n \n+  // Likewise, for move_iterator.\n   template<typename _Iterator>\n-    struct __miter_base<_Iterator, true>\n-    {\n-      static typename _Iterator::iterator_type\n-      __b(_Iterator __it)\n-      { return __it.base(); }\n-    };\n+    struct __miter_base\n+    : __iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>\n+    { };\n \n   // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,"}]}