{"sha": "601bf25120ceb240c3866ffb3206d9392094b61b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxYmYyNTEyMGNlYjI0MGMzODY2ZmZiMzIwNmQ5MzkyMDk0YjYxYg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "1999-12-07T03:05:45Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1999-12-07T03:05:45Z"}, "message": "combine.c (check_promoted_subreg): Do not conditionalize this\tupon PROMOTE_FUNCTION_RETURN.\n\n\t* combine.c (check_promoted_subreg): Do not conditionalize this\tupon\n\tPROMOTE_FUNCTION_RETURN.\n\nFrom-SVN: r30814", "tree": {"sha": "a917aa8106924a0b34e281197f3fa88f95acd168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a917aa8106924a0b34e281197f3fa88f95acd168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/601bf25120ceb240c3866ffb3206d9392094b61b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601bf25120ceb240c3866ffb3206d9392094b61b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601bf25120ceb240c3866ffb3206d9392094b61b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601bf25120ceb240c3866ffb3206d9392094b61b/comments", "author": null, "committer": null, "parents": [{"sha": "124d535f9bea46a361fe0b0f2f20dff44b3fb27a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124d535f9bea46a361fe0b0f2f20dff44b3fb27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124d535f9bea46a361fe0b0f2f20dff44b3fb27a"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "fb388a7b1b0a56edcf36c54342e6d60a4e2ab289", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601bf25120ceb240c3866ffb3206d9392094b61b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601bf25120ceb240c3866ffb3206d9392094b61b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=601bf25120ceb240c3866ffb3206d9392094b61b", "patch": "@@ -1,3 +1,8 @@\n+1999-12-06  David S. Miller  <davem@redhat.com>\n+\n+\t* combine.c (check_promoted_subreg): Do not conditionalize this\tupon\n+\tPROMOTE_FUNCTION_RETURN.\n+\n Mon Dec  6 15:12:14 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* regmove.c (optimize_reg_copy_1): If no REG_DEAD note, check for"}, {"sha": "8411b4f9ae189f6c191d4c4f170761c1dc02954d", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601bf25120ceb240c3866ffb3206d9392094b61b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601bf25120ceb240c3866ffb3206d9392094b61b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=601bf25120ceb240c3866ffb3206d9392094b61b", "patch": "@@ -403,9 +403,7 @@ static enum rtx_code simplify_comparison  PROTO((enum rtx_code, rtx *, rtx *));\n static int reversible_comparison_p  PROTO((rtx));\n static void update_table_tick\tPROTO((rtx));\n static void record_value_for_reg  PROTO((rtx, rtx, rtx));\n-#ifdef PROMOTE_FUNCTION_RETURN\n static void check_promoted_subreg PROTO((rtx, rtx));\n-#endif\n static void record_dead_and_set_regs_1  PROTO((rtx, rtx, void *));\n static void record_dead_and_set_regs  PROTO((rtx));\n static int get_last_value_validate  PROTO((rtx *, rtx, int, int));\n@@ -611,11 +609,9 @@ combine_instructions (f, nregs)\n \n       else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n \t{\n-#ifdef PROMOTE_FUNCTION_RETURN\n \t  /* See if we know about function return values before this\n \t     insn based upon SUBREG flags.  */\n \t  check_promoted_subreg (insn, PATTERN (insn));\n-#endif\n \n \t  /* Try this insn with each insn it links back to.  */\n \n@@ -11059,7 +11055,6 @@ record_dead_and_set_regs (insn)\n   note_stores (PATTERN (insn), record_dead_and_set_regs_1, insn);\n }\n \n-#ifdef PROMOTE_FUNCTION_RETURN\n /* If a SUBREG has the promoted bit set, it is in fact a property of the\n    register present in the SUBREG, so for each such SUBREG go back and\n    adjust nonzero and sign bit information of the registers that are\n@@ -11141,7 +11136,6 @@ check_promoted_subreg (insn, x)\n \t  }\n     }\n }\n-#endif\n \f\n /* Utility routine for the following function.  Verify that all the registers\n    mentioned in *LOC are valid when *LOC was part of a value set when"}]}