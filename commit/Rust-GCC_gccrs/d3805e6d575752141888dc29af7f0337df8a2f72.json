{"sha": "d3805e6d575752141888dc29af7f0337df8a2f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4MDVlNmQ1NzU3NTIxNDE4ODhkYzI5YWY3ZjAzMzdkZjhhMmY3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-28T10:10:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-28T10:12:57Z"}, "message": "typos: Fix various typos - mainly misspelled reference* [PR99304]\n\nThe PR is about a typo in handle_malloc_attribute diagnostic message,\nbut grepping around I found many other cases and while fixing those I've\nnoticed a couple of other typos.\n\n2021-02-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/99304\n\t* ipa.c (symbol_table::remove_unreachable_nodes): Fix a comment\n\ttypo - referneced -> referenced.\n\t* tree.c (component_ref_size): Fix comment typo -\n\trefernce -> reference.\n\t* tree-ssa-alias.c (access_path_may_continue_p): Fix comment typo -\n\ttraling -> trailing.\n\t(aliasing_component_refs_p): Fix comment typos -\n\trefernce -> reference and refernece -> reference and\n\ttraling -> trailing.\n\t(nonoverlapping_refs_since_match_p): Fix comment typo -\n\treferneces -> references.\n\t* doc/invoke.texi (--param modref-max-bases): Fix a typo -\n\treferneces -> references.\ngcc/c-family/\n\t* c-attribs.c (handle_malloc_attribute): Fix a typo in inform\n\tmessage - refernced -> referenced.  Remove superfluous space before\n\tclosing paren of function calls.\ngcc/lto/\n\t* lto-symtab.c (lto_symtab_prevailing_virtual_decl): Fix comment\n\ttypos - refernced -> referenced and\n\tdevirtualizaiton -> devirtualization.", "tree": {"sha": "dbf285b05dd478a7094e9e81c57bd6e87179efca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbf285b05dd478a7094e9e81c57bd6e87179efca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3805e6d575752141888dc29af7f0337df8a2f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3805e6d575752141888dc29af7f0337df8a2f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3805e6d575752141888dc29af7f0337df8a2f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3805e6d575752141888dc29af7f0337df8a2f72/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec9dc4fa0803cb85ae0b981ca0d6a406e8f6669c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9dc4fa0803cb85ae0b981ca0d6a406e8f6669c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9dc4fa0803cb85ae0b981ca0d6a406e8f6669c"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "c1f652d1dc978f15ae11673405f028048f8d5ef4", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=d3805e6d575752141888dc29af7f0337df8a2f72", "patch": "@@ -3343,7 +3343,7 @@ handle_malloc_attribute (tree *node, tree name, tree args, int flags,\n \t  error (\"%qE attribute argument 1 must take a pointer \"\n \t\t \"type as its first argument\", name);\n \t  inform (DECL_SOURCE_LOCATION (dealloc),\n-\t\t  \"refernced symbol declared here\" );\n+\t\t  \"referenced symbol declared here\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}\n@@ -3356,7 +3356,7 @@ handle_malloc_attribute (tree *node, tree name, tree args, int flags,\n \t  error (\"%qE attribute argument 1 must take a pointer type \"\n \t\t \"as its first argument; have %qT\", name, argtype);\n \t  inform (DECL_SOURCE_LOCATION (dealloc),\n-\t\t  \"referenced symbol declared here\" );\n+\t\t  \"referenced symbol declared here\");\n \t  *no_add_attrs = true;\n \t  return NULL_TREE;\n \t}"}, {"sha": "4bd4f390ded476b06df7f9558e45b1ac9050d598", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d3805e6d575752141888dc29af7f0337df8a2f72", "patch": "@@ -13257,7 +13257,7 @@ are shared across multiple compilation units.\n @item modref-max-bases\n @item modref-max-refs\n @item modref-max-accesses\n-Specifies the maximal number of base pointers, referneces and accesses stored\n+Specifies the maximal number of base pointers, references and accesses stored\n for a single function by mod/ref analysis.\n \n @item modref-max-tests"}, {"sha": "4f62ac183ee3e353fdb272ac533481fc9d50ff16", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=d3805e6d575752141888dc29af7f0337df8a2f72", "patch": "@@ -285,7 +285,7 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n    - C++ virtual tables keyed to other unit are represented as DECL_EXTERNAL\n      variables with DECL_INITIAL set.  We finalize these and keep reachable\n      ones around for constant folding purposes.  After inlining we however\n-     stop walking their references to let everything static referneced by them\n+     stop walking their references to let everything static referenced by them\n      to be removed when it is otherwise unreachable.\n \n    We maintain queue of both reachable symbols (i.e. defined symbols that needs"}, {"sha": "a4d70150d7feed03aca3990823cb7115620d4abd", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=d3805e6d575752141888dc29af7f0337df8a2f72", "patch": "@@ -1081,7 +1081,8 @@ lto_symtab_merge_symbols (void)\n }\n \n /* Virtual tables may matter for code generation even if they are not\n-   directly refernced by the code because they may be used for devirtualizaiton.\n+   directly referenced by the code because they may be used for\n+   devirtualization.\n    For this reason it is important to merge even virtual tables that have no\n    associated symbol table entries.  Without doing so we lose optimization\n    oppurtunities by losing track of the vtable constructor."}, {"sha": "ebb3f49c86c66501d3d8fff87df85c6cbcab3558", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d3805e6d575752141888dc29af7f0337df8a2f72", "patch": "@@ -1111,7 +1111,7 @@ aliasing_component_refs_walk (tree ref1, tree type1, tree base1,\n    REF1_ALIAS_SET is the alias set of REF1.\n \n    BASE_TYPE2 is type of base2.  END_STRUCT_REF2 is non-NULL if there is\n-   a traling array access in the TBAA part of access path2.\n+   a trailing array access in the TBAA part of access path2.\n    BASE2_ALIAS_SET is the alias set of base2.  */\n \n bool\n@@ -1183,8 +1183,8 @@ aliasing_component_refs_p (tree ref1,\n      trailing array.\n \n      We generally discard the segment after end_of_tbaa_ref however\n-     we need to be careful in case it contains zero sized or traling array.\n-     These may happen after refernce to union and in this case we need to\n+     we need to be careful in case it contains zero sized or trailing array.\n+     These may happen after reference to union and in this case we need to\n      not disambiguate type puning scenarios.\n \n      We set:\n@@ -1195,7 +1195,7 @@ aliasing_component_refs_p (tree ref1,\n \tend_struct_ref1 to point the trailing reference (if it exists\n  \tin range base....end_of_tbaa_ref\n \n-\tend_struct_past_end1 is true if this traling refernece occurs in\n+\tend_struct_past_end1 is true if this trailing reference occurs in\n \tend_of_tbaa_ref...actual_ref.  */\n   base1 = ref1;\n   while (handled_component_p (base1))\n@@ -1674,7 +1674,7 @@ nonoverlapping_refs_since_match_p (tree match1, tree ref1,\n \t\t  seen_unmatched_ref_p = true;\n \t\t  /* We can not maintain the invariant that bases are either\n \t\t     same or completely disjoint.  However we can still recover\n-\t\t     from type based alias analysis if we reach referneces to\n+\t\t     from type based alias analysis if we reach references to\n \t\t     same sizes.  We do not attempt to match array sizes, so\n \t\t     just finish array walking and look for component refs.  */\n \t\t  if (ntbaa1 < 0 || ntbaa2 < 0)"}, {"sha": "8fa99951df7a800cfa5de84066a51dcafe082d4c", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3805e6d575752141888dc29af7f0337df8a2f72/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d3805e6d575752141888dc29af7f0337df8a2f72", "patch": "@@ -13857,7 +13857,7 @@ component_ref_size (tree ref, special_array_member *sam /* = NULL */)\n \t\t    *sam = special_array_member::trail_1;\n \t\t}\n \n-      /* For a refernce to a zero- or one-element array member of a union\n+      /* For a reference to a zero- or one-element array member of a union\n \t use the size of the union instead of the size of the member.  */\n       if (TREE_CODE (argtype) == UNION_TYPE)\n \tmemsize = TYPE_SIZE_UNIT (argtype);"}]}