{"sha": "2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4YTgyOTJlZTdmN2U3NzVjN2JmZjgwNzRkZWFkMGE4YTI5MTllYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-06-30T19:29:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-06-30T19:29:39Z"}, "message": "cfgexpand.c, [...]: Fix comment typos.\n\n\t* cfgexpand.c, config/i386/i386.c, genpreds.c, tree-cfg.c: Fix\n\tcomment typos.\n\nFrom-SVN: r115098", "tree": {"sha": "1fb738fe0271684322341bb9f99dd331266561c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fb738fe0271684322341bb9f99dd331266561c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/comments", "author": null, "committer": null, "parents": [{"sha": "27651ad32c903c079fa300a4d134e60567935567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27651ad32c903c079fa300a4d134e60567935567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27651ad32c903c079fa300a4d134e60567935567"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "7ba6c45b10e67428af5183ff4fc7db47d98f7498", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "patch": "@@ -1,3 +1,8 @@\n+2006-06-30  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cfgexpand.c, config/i386/i386.c, genpreds.c, tree-cfg.c: Fix\n+\tcomment typos.\n+\n 2006-06-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/26905"}, {"sha": "630a82a28a5c9fd29c9cab777faec031b8c824db", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "patch": "@@ -1626,7 +1626,7 @@ tree_expand_cfg (void)\n   init_block = construct_init_block ();\n \n   /* Clear EDGE_EXECUTABLE on the entry edge(s).  It is cleaned from the\n-     remainining edges in expand_gimple_basic_block.  */\n+     remaining edges in expand_gimple_basic_block.  */\n   FOR_EACH_EDGE (e, ei, ENTRY_BLOCK_PTR->succs)\n     e->flags &= ~EDGE_EXECUTABLE;\n "}, {"sha": "958bd613aa8081df096f88ab21439b32a3fa06b0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "patch": "@@ -68,7 +68,7 @@ Boston, MA 02110-1301, USA.  */\n #define COSTS_N_BYTES(N) ((N) * 2)\n \n static const\n-struct processor_costs size_cost = {\t/* costs for tunning for size */\n+struct processor_costs size_cost = {\t/* costs for tuning for size */\n   COSTS_N_BYTES (2),\t\t\t/* cost of an add instruction */\n   COSTS_N_BYTES (3),\t\t\t/* cost of a lea instruction */\n   COSTS_N_BYTES (2),\t\t\t/* variable shift costs */"}, {"sha": "adc3e48372b0ef198534319a763539137ea2dc18", "filename": "gcc/genpreds.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "patch": "@@ -373,7 +373,7 @@ add_mode_tests (struct pred_data *p)\n \tcase AND:\n \t  /* The switch code generation in write_predicate_stmts prefers\n \t     rtx code tests to be at the top of the expression tree.  So\n-\t     push this AND down into the second operand of an exisiting\n+\t     push this AND down into the second operand of an existing\n \t     AND expression.  */\n \t  if (generate_switch_p (XEXP (subexp, 0)))\n \t    pos = &XEXP (subexp, 1);\n@@ -563,7 +563,7 @@ write_match_code_switch (rtx exp)\n     }\n }\n \n-/* Given a predictate expression EXP, write out a sequence of stmts\n+/* Given a predicate expression EXP, write out a sequence of stmts\n    to evaluate it.  This is similar to write_predicate_expr but can\n    generate efficient switch statements.  */\n "}, {"sha": "82adabda06313dec2b777796670919794ea0947d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8292ee7f7e775c7bff8074dead0a8a2919ea/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2a8a8292ee7f7e775c7bff8074dead0a8a2919ea", "patch": "@@ -3121,7 +3121,7 @@ reinstall_phi_args (edge new_edge, edge old_edge)\n   PENDING_STMT (old_edge) = NULL;\n }\n \n-/* Returns the basic block after that the new basic block created\n+/* Returns the basic block after which the new basic block created\n    by splitting edge EDGE_IN should be placed.  Tries to keep the new block\n    near its \"logical\" location.  This is of most help to humans looking\n    at debugging dumps.  */"}]}