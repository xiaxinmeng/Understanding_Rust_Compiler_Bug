{"sha": "1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "node_id": "C_kwDOANBUbNoAKDE3MTZkZGQxZTllN2E1YzYzMDYyZTA3YWMzY2E0MTM2NGZlYTk5MTc", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-10T10:49:19Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:51Z"}, "message": "aarch64: Use type-qualified builtins for LD1/ST1 Neon intrinsics\n\nDeclare unsigned and polynomial type-qualified builtins for LD1/ST1\nNeon intrinsics. Using these builtins removes the need for many casts\nin arm_neon.h.\n\nThe new type-qualified builtins are also lowered to gimple - as the\nunqualified builtins are already.\n\ngcc/ChangeLog:\n\n2021-11-10  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c (TYPES_LOAD1_U): Define.\n\t(TYPES_LOAD1_P): Define.\n\t(TYPES_STORE1_U): Define.\n\t(TYPES_STORE1P): Rename to...\n\t(TYPES_STORE1_P): This.\n\t(get_mem_type_for_load_store): Add unsigned and poly types.\n\t(aarch64_general_gimple_fold_builtin): Add unsigned and poly\n\ttype-qualified builtin declarations.\n\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n\tqualified builtins for LD1/ST1.\n\t* config/aarch64/arm_neon.h (vld1_p8): Use type-qualified\n\tbuiltin and remove cast.\n\t(vld1_p16): Likewise.\n\t(vld1_u8): Likewise.\n\t(vld1_u16): Likewise.\n\t(vld1_u32): Likewise.\n\t(vld1q_p8): Likewise.\n\t(vld1q_p16): Likewise.\n\t(vld1q_p64): Likewise.\n\t(vld1q_u8): Likewise.\n\t(vld1q_u16): Likewise.\n\t(vld1q_u32): Likewise.\n\t(vld1q_u64): Likewise.\n\t(vst1_p8): Likewise.\n\t(vst1_p16): Likewise.\n\t(vst1_u8): Likewise.\n\t(vst1_u16): Likewise.\n\t(vst1_u32): Likewise.\n\t(vst1q_p8): Likewise.\n\t(vst1q_p16): Likewise.\n\t(vst1q_p64): Likewise.\n\t(vst1q_u8): Likewise.\n\t(vst1q_u16): Likewise.\n\t(vst1q_u32): Likewise.\n\t(vst1q_u64): Likewise.\n\t* config/aarch64/iterators.md (VALLP_NO_DI): New iterator.", "tree": {"sha": "4ee1e74f00ddf2b1a7e13a00cb766850bdda638e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee1e74f00ddf2b1a7e13a00cb766850bdda638e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eca10aa761c56b9a26763e036c72475337194f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eca10aa761c56b9a26763e036c72475337194f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eca10aa761c56b9a26763e036c72475337194f8"}], "stats": {"total": 194, "additions": 115, "deletions": 79}, "files": [{"sha": "5d8af627bcf2b0d552daefc907d59ac7684baad8", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 72, "deletions": 29, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "patch": "@@ -372,10 +372,12 @@ aarch64_types_load1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n static enum aarch64_type_qualifiers\n aarch64_types_load1_u_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_const_pointer_map_mode };\n+#define TYPES_LOAD1_U (aarch64_types_load1_u_qualifiers)\n #define TYPES_LOADSTRUCT_U (aarch64_types_load1_u_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_load1_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_poly, qualifier_const_pointer_map_mode };\n+#define TYPES_LOAD1_P (aarch64_types_load1_p_qualifiers)\n #define TYPES_LOADSTRUCT_P (aarch64_types_load1_p_qualifiers)\n \n static enum aarch64_type_qualifiers\n@@ -423,11 +425,12 @@ aarch64_types_store1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n static enum aarch64_type_qualifiers\n aarch64_types_store1_u_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_pointer_map_mode, qualifier_unsigned };\n+#define TYPES_STORE1_U (aarch64_types_store1_u_qualifiers)\n #define TYPES_STORESTRUCT_U (aarch64_types_store1_u_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_store1_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_pointer_map_mode, qualifier_poly };\n-#define TYPES_STORE1P (aarch64_types_store1_p_qualifiers)\n+#define TYPES_STORE1_P (aarch64_types_store1_p_qualifiers)\n #define TYPES_STORESTRUCT_P (aarch64_types_store1_p_qualifiers)\n \n static enum aarch64_type_qualifiers\n@@ -2590,47 +2593,83 @@ get_mem_type_for_load_store (unsigned int fcode)\n {\n   switch (fcode)\n   {\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v8qi)\n-    VAR1 (STORE1, st1 , 0, STORE, v8qi)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v8qi)\n+    VAR1 (STORE1, st1, 0, STORE, v8qi)\n       return Int8x8_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v16qi)\n-    VAR1 (STORE1, st1 , 0, STORE, v16qi)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v16qi)\n+    VAR1 (STORE1, st1, 0, STORE, v16qi)\n       return Int8x16_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v4hi)\n-    VAR1 (STORE1, st1 , 0, STORE, v4hi)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v4hi)\n+    VAR1 (STORE1, st1, 0, STORE, v4hi)\n       return Int16x4_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v8hi)\n-    VAR1 (STORE1, st1 , 0, STORE, v8hi)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v8hi)\n+    VAR1 (STORE1, st1, 0, STORE, v8hi)\n       return Int16x8_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v2si)\n-    VAR1 (STORE1, st1 , 0, STORE, v2si)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v2si)\n+    VAR1 (STORE1, st1, 0, STORE, v2si)\n       return Int32x2_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v4si)\n-    VAR1 (STORE1, st1 , 0, STORE, v4si)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v4si)\n+    VAR1 (STORE1, st1, 0, STORE, v4si)\n       return Int32x4_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v2di)\n-    VAR1 (STORE1, st1 , 0, STORE, v2di)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v2di)\n+    VAR1 (STORE1, st1, 0, STORE, v2di)\n       return Int64x2_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v4hf)\n-    VAR1 (STORE1, st1 , 0, STORE, v4hf)\n+    VAR1 (LOAD1_U, ld1, 0, LOAD, v8qi)\n+    VAR1 (STORE1_U, st1, 0, STORE, v8qi)\n+      return Uint8x8_t;\n+    VAR1 (LOAD1_U, ld1, 0, LOAD, v16qi)\n+    VAR1 (STORE1_U, st1, 0, STORE, v16qi)\n+      return Uint8x16_t;\n+    VAR1 (LOAD1_U, ld1, 0, LOAD, v4hi)\n+    VAR1 (STORE1_U, st1, 0, STORE, v4hi)\n+      return Uint16x4_t;\n+    VAR1 (LOAD1_U, ld1, 0, LOAD, v8hi)\n+    VAR1 (STORE1_U, st1, 0, STORE, v8hi)\n+      return Uint16x8_t;\n+    VAR1 (LOAD1_U, ld1, 0, LOAD, v2si)\n+    VAR1 (STORE1_U, st1, 0, STORE, v2si)\n+      return Uint32x2_t;\n+    VAR1 (LOAD1_U, ld1, 0, LOAD, v4si)\n+    VAR1 (STORE1_U, st1, 0, STORE, v4si)\n+      return Uint32x4_t;\n+    VAR1 (LOAD1_U, ld1, 0, LOAD, v2di)\n+    VAR1 (STORE1_U, st1, 0, STORE, v2di)\n+      return Uint64x2_t;\n+    VAR1 (LOAD1_P, ld1, 0, LOAD, v8qi)\n+    VAR1 (STORE1_P, st1, 0, STORE, v8qi)\n+      return Poly8x8_t;\n+    VAR1 (LOAD1_P, ld1, 0, LOAD, v16qi)\n+    VAR1 (STORE1_P, st1, 0, STORE, v16qi)\n+      return Poly8x16_t;\n+    VAR1 (LOAD1_P, ld1, 0, LOAD, v4hi)\n+    VAR1 (STORE1_P, st1, 0, STORE, v4hi)\n+      return Poly16x4_t;\n+    VAR1 (LOAD1_P, ld1, 0, LOAD, v8hi)\n+    VAR1 (STORE1_P, st1, 0, STORE, v8hi)\n+      return Poly16x8_t;\n+    VAR1 (LOAD1_P, ld1, 0, LOAD, v2di)\n+    VAR1 (STORE1_P, st1, 0, STORE, v2di)\n+      return Poly64x2_t;\n+    VAR1 (LOAD1, ld1, 0, LOAD, v4hf)\n+    VAR1 (STORE1, st1, 0, STORE, v4hf)\n       return Float16x4_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v8hf)\n-    VAR1 (STORE1, st1 , 0, STORE, v8hf)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v8hf)\n+    VAR1 (STORE1, st1, 0, STORE, v8hf)\n       return Float16x8_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v4bf)\n-    VAR1 (STORE1, st1 , 0, STORE, v4bf)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v4bf)\n+    VAR1 (STORE1, st1, 0, STORE, v4bf)\n       return Bfloat16x4_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v8bf)\n-    VAR1 (STORE1, st1 , 0, STORE, v8bf)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v8bf)\n+    VAR1 (STORE1, st1, 0, STORE, v8bf)\n       return Bfloat16x8_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v2sf)\n-    VAR1 (STORE1, st1 , 0, STORE, v2sf)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v2sf)\n+    VAR1 (STORE1, st1, 0, STORE, v2sf)\n       return Float32x2_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v4sf)\n-    VAR1 (STORE1, st1 , 0, STORE, v4sf)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v4sf)\n+    VAR1 (STORE1, st1, 0, STORE, v4sf)\n       return Float32x4_t;\n-    VAR1 (LOAD1, ld1 , 0, LOAD, v2df)\n-    VAR1 (STORE1, st1 , 0, STORE, v2df)\n+    VAR1 (LOAD1, ld1, 0, LOAD, v2df)\n+    VAR1 (STORE1, st1, 0, STORE, v2df)\n       return Float64x2_t;\n     default:\n       gcc_unreachable ();\n@@ -2664,6 +2703,8 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n \n      /*lower store and load neon builtins to gimple.  */\n      BUILTIN_VALL_F16 (LOAD1, ld1, 0, LOAD)\n+     BUILTIN_VDQ_I (LOAD1_U, ld1, 0, LOAD)\n+     BUILTIN_VALLP_NO_DI (LOAD1_P, ld1, 0, LOAD)\n \tif (!BYTES_BIG_ENDIAN)\n \t  {\n \t    enum aarch64_simd_type mem_type\n@@ -2686,6 +2727,8 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n \tbreak;\n \n       BUILTIN_VALL_F16 (STORE1, st1, 0, STORE)\n+      BUILTIN_VDQ_I (STORE1_U, st1, 0, STORE)\n+      BUILTIN_VALLP_NO_DI (STORE1_P, st1, 0, STORE)\n \tif (!BYTES_BIG_ENDIAN)\n \t  {\n \t    enum aarch64_simd_type mem_type"}, {"sha": "3a376310b4d0de096837afcef1ca81aa24bec1bc", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "patch": "@@ -697,11 +697,13 @@\n \n   /* Implemented by aarch64_ld1<VALL_F16:mode>.  */\n   BUILTIN_VALL_F16 (LOAD1, ld1, 0, LOAD)\n-  VAR1(STORE1P, ld1, 0, ALL, v2di)\n+  BUILTIN_VDQ_I (LOAD1_U, ld1, 0, LOAD)\n+  BUILTIN_VALLP_NO_DI (LOAD1_P, ld1, 0, LOAD)\n \n   /* Implemented by aarch64_st1<VALL_F16:mode>.  */\n   BUILTIN_VALL_F16 (STORE1, st1, 0, STORE)\n-  VAR1 (STORE1P, st1, 0, STORE, v2di)\n+  BUILTIN_VDQ_I (STORE1_U, st1, 0, STORE)\n+  BUILTIN_VALLP_NO_DI (STORE1_P, st1, 0, STORE)\n \n   /* Implemented by fma<mode>4.  */\n   BUILTIN_VHSDF (TERNOP, fma, 4, FP)"}, {"sha": "3b00d940a7687fa4dfd4c1eeaa3c308c6621ec9a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 36, "deletions": 48, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "patch": "@@ -14960,16 +14960,16 @@ __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1_p8 (const poly8_t *__a)\n {\n-  return (poly8x8_t)\n-    __builtin_aarch64_ld1v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __builtin_aarch64_ld1v8qi_ps (\n+\t\t\t\t(const __builtin_aarch64_simd_qi *) __a);\n }\n \n __extension__ extern __inline poly16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1_p16 (const poly16_t *__a)\n {\n-  return (poly16x4_t)\n-    __builtin_aarch64_ld1v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __builtin_aarch64_ld1v4hi_ps (\n+\t\t\t\t(const __builtin_aarch64_simd_hi *) __a);\n }\n \n __extension__ extern __inline poly64x1_t\n@@ -15011,24 +15011,24 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1_u8 (const uint8_t *__a)\n {\n-  return (uint8x8_t)\n-    __builtin_aarch64_ld1v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __builtin_aarch64_ld1v8qi_us (\n+\t\t\t\t(const __builtin_aarch64_simd_qi *) __a);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1_u16 (const uint16_t *__a)\n {\n-  return (uint16x4_t)\n-    __builtin_aarch64_ld1v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __builtin_aarch64_ld1v4hi_us (\n+\t\t\t\t(const __builtin_aarch64_simd_hi *) __a);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1_u32 (const uint32_t *__a)\n {\n-  return (uint32x2_t)\n-    __builtin_aarch64_ld1v2si ((const __builtin_aarch64_simd_si *) __a);\n+  return __builtin_aarch64_ld1v2si_us (\n+\t\t\t\t(const __builtin_aarch64_simd_si *) __a);\n }\n \n __extension__ extern __inline uint64x1_t\n@@ -15278,24 +15278,24 @@ __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_p8 (const poly8_t *__a)\n {\n-  return (poly8x16_t)\n-    __builtin_aarch64_ld1v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __builtin_aarch64_ld1v16qi_ps (\n+\t\t\t\t(const __builtin_aarch64_simd_qi *) __a);\n }\n \n __extension__ extern __inline poly16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_p16 (const poly16_t *__a)\n {\n-  return (poly16x8_t)\n-    __builtin_aarch64_ld1v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __builtin_aarch64_ld1v8hi_ps (\n+\t\t\t\t(const __builtin_aarch64_simd_hi *) __a);\n }\n \n __extension__ extern __inline poly64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_p64 (const poly64_t *__a)\n {\n-  return (poly64x2_t)\n-    __builtin_aarch64_ld1v2di ((const __builtin_aarch64_simd_di *) __a);\n+  return __builtin_aarch64_ld1v2di_ps (\n+\t\t\t\t(const __builtin_aarch64_simd_di *) __a);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -15330,8 +15330,8 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_u8 (const uint8_t *__a)\n {\n-  return (uint8x16_t)\n-    __builtin_aarch64_ld1v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __builtin_aarch64_ld1v16qi_us (\n+\t\t\t\t(const __builtin_aarch64_simd_qi *) __a);\n }\n \n __extension__ extern __inline uint8x8x2_t\n@@ -15549,24 +15549,24 @@ __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_u16 (const uint16_t *__a)\n {\n-  return (uint16x8_t)\n-    __builtin_aarch64_ld1v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __builtin_aarch64_ld1v8hi_us (\n+\t\t\t\t(const __builtin_aarch64_simd_hi *) __a);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_u32 (const uint32_t *__a)\n {\n-  return (uint32x4_t)\n-    __builtin_aarch64_ld1v4si ((const __builtin_aarch64_simd_si *) __a);\n+  return __builtin_aarch64_ld1v4si_us (\n+\t\t\t\t(const __builtin_aarch64_simd_si *) __a);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_u64 (const uint64_t *__a)\n {\n-  return (uint64x2_t)\n-    __builtin_aarch64_ld1v2di ((const __builtin_aarch64_simd_di *) __a);\n+  return __builtin_aarch64_ld1v2di_us (\n+\t\t\t\t(const __builtin_aarch64_simd_di *) __a);\n }\n \n /* vld1(q)_x4.  */\n@@ -24624,16 +24624,14 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1_p8 (poly8_t *__a, poly8x8_t __b)\n {\n-  __builtin_aarch64_st1v8qi ((__builtin_aarch64_simd_qi *) __a,\n-\t\t\t     (int8x8_t) __b);\n+  __builtin_aarch64_st1v8qi_sp ((__builtin_aarch64_simd_qi *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1_p16 (poly16_t *__a, poly16x4_t __b)\n {\n-  __builtin_aarch64_st1v4hi ((__builtin_aarch64_simd_hi *) __a,\n-\t\t\t     (int16x4_t) __b);\n+  __builtin_aarch64_st1v4hi_sp ((__builtin_aarch64_simd_hi *) __a, __b);\n }\n \n __extension__ extern __inline void\n@@ -24675,24 +24673,21 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1_u8 (uint8_t *__a, uint8x8_t __b)\n {\n-  __builtin_aarch64_st1v8qi ((__builtin_aarch64_simd_qi *) __a,\n-\t\t\t     (int8x8_t) __b);\n+  __builtin_aarch64_st1v8qi_su ((__builtin_aarch64_simd_qi *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1_u16 (uint16_t *__a, uint16x4_t __b)\n {\n-  __builtin_aarch64_st1v4hi ((__builtin_aarch64_simd_hi *) __a,\n-\t\t\t     (int16x4_t) __b);\n+  __builtin_aarch64_st1v4hi_su ((__builtin_aarch64_simd_hi *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1_u32 (uint32_t *__a, uint32x2_t __b)\n {\n-  __builtin_aarch64_st1v2si ((__builtin_aarch64_simd_si *) __a,\n-\t\t\t     (int32x2_t) __b);\n+  __builtin_aarch64_st1v2si_su ((__builtin_aarch64_simd_si *) __a, __b);\n }\n \n __extension__ extern __inline void\n@@ -24729,24 +24724,21 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_p8 (poly8_t *__a, poly8x16_t __b)\n {\n-  __builtin_aarch64_st1v16qi ((__builtin_aarch64_simd_qi *) __a,\n-\t\t\t      (int8x16_t) __b);\n+  __builtin_aarch64_st1v16qi_sp ((__builtin_aarch64_simd_qi *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_p16 (poly16_t *__a, poly16x8_t __b)\n {\n-  __builtin_aarch64_st1v8hi ((__builtin_aarch64_simd_hi *) __a,\n-\t\t\t     (int16x8_t) __b);\n+  __builtin_aarch64_st1v8hi_sp ((__builtin_aarch64_simd_hi *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_p64 (poly64_t *__a, poly64x2_t __b)\n {\n-  __builtin_aarch64_st1v2di_sp ((__builtin_aarch64_simd_di *) __a,\n-\t\t\t\t(poly64x2_t) __b);\n+  __builtin_aarch64_st1v2di_sp ((__builtin_aarch64_simd_di *) __a, __b);\n }\n \n __extension__ extern __inline void\n@@ -24781,32 +24773,28 @@ __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u8 (uint8_t *__a, uint8x16_t __b)\n {\n-  __builtin_aarch64_st1v16qi ((__builtin_aarch64_simd_qi *) __a,\n-\t\t\t      (int8x16_t) __b);\n+  __builtin_aarch64_st1v16qi_su ((__builtin_aarch64_simd_qi *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u16 (uint16_t *__a, uint16x8_t __b)\n {\n-  __builtin_aarch64_st1v8hi ((__builtin_aarch64_simd_hi *) __a,\n-\t\t\t     (int16x8_t) __b);\n+  __builtin_aarch64_st1v8hi_su ((__builtin_aarch64_simd_hi *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u32 (uint32_t *__a, uint32x4_t __b)\n {\n-  __builtin_aarch64_st1v4si ((__builtin_aarch64_simd_si *) __a,\n-\t\t\t     (int32x4_t) __b);\n+  __builtin_aarch64_st1v4si_su ((__builtin_aarch64_simd_si *) __a, __b);\n }\n \n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst1q_u64 (uint64_t *__a, uint64x2_t __b)\n {\n-  __builtin_aarch64_st1v2di ((__builtin_aarch64_simd_di *) __a,\n-\t\t\t     (int64x2_t) __b);\n+  __builtin_aarch64_st1v2di_su ((__builtin_aarch64_simd_di *) __a, __b);\n }\n \n /* vst1_lane */"}, {"sha": "b19dc5c217721be52632b5f193acf389d469d6ac", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1716ddd1e9e7a5c63062e07ac3ca41364fea9917/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "patch": "@@ -207,6 +207,9 @@\n ;; All Advanced SIMD polynomial modes and DI.\n (define_mode_iterator VALLP [V8QI V16QI V4HI V8HI V2DI DI])\n \n+;; All Advanced SIMD polynomial modes.\n+(define_mode_iterator VALLP_NO_DI [V8QI V16QI V4HI V8HI V2DI])\n+\n ;; Advanced SIMD modes for Integer reduction across lanes.\n (define_mode_iterator VDQV [V8QI V16QI V4HI V8HI V4SI V2DI])\n "}]}