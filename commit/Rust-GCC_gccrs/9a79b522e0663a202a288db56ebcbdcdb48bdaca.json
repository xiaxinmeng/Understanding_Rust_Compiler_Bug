{"sha": "9a79b522e0663a202a288db56ebcbdcdb48bdaca", "node_id": "C_kwDOANBUbNoAKDlhNzliNTIyZTA2NjNhMjAyYTI4OGRiNTZlYmNiZGNkYjQ4YmRhY2E", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-06T13:43:51Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:13Z"}, "message": "arm: improve vcreateq* tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcreateq_u8.c: Likewise.", "tree": {"sha": "ff0b0ae43ffa34980ce77d3817ca6e68b6451a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff0b0ae43ffa34980ce77d3817ca6e68b6451a52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a79b522e0663a202a288db56ebcbdcdb48bdaca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a79b522e0663a202a288db56ebcbdcdb48bdaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a79b522e0663a202a288db56ebcbdcdb48bdaca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a79b522e0663a202a288db56ebcbdcdb48bdaca/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "238cf114de16518c6569f0cdd2c4d6211ac98a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238cf114de16518c6569f0cdd2c4d6211ac98a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238cf114de16518c6569f0cdd2c4d6211ac98a74"}], "stats": {"total": 230, "additions": 220, "deletions": 10}, "files": [{"sha": "c39303daa0350b29190c7a289db68d00089256cc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_f16.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f16.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n float16x8_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+float16x8_t\n+foo1 ()\n+{\n+  return vcreateq_f16 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ad66f4407cd8151731b3a7605fe08a2f101e50c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_f32.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_f32.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n float32x4_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+float32x4_t\n+foo1 ()\n+{\n+  return vcreateq_f32 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7e70a4865131f67d6b9a53807120acdbd53d87ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s16.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s16.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n int16x8_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+int16x8_t\n+foo1 ()\n+{\n+  return vcreateq_s16 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ffcfc80ff40060ff6ee3adec2dce1c33f6b5bead", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s32.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s32.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n int32x4_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+int32x4_t\n+foo1 ()\n+{\n+  return vcreateq_s32 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "26642f9cd68a8a327a1dde9d4e9422bacc6177ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s64.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s64.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n int64x2_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_s64 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+int64x2_t\n+foo1 ()\n+{\n+  return vcreateq_s64 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7e7e4d5948d319b66da85001128f0de70a75fc90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_s8.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_s8.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n int8x16_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+int8x16_t\n+foo1 ()\n+{\n+  return vcreateq_s8 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "858a3a4546f4c978533b3ebc49f212b15611b2c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u16.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u16.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n uint16x8_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+uint16x8_t\n+foo1 ()\n+{\n+  return vcreateq_u16 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5f27cf688455951f76e31e1f7839f0c95bf78100", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u32.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u32.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n uint32x4_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+uint32x4_t\n+foo1 ()\n+{\n+  return vcreateq_u32 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "78553dec701138ea136e7f4a864cd1c351e759f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u64.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u64.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n uint64x2_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_u64 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+uint64x2_t\n+foo1 ()\n+{\n+  return vcreateq_u64 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4a8ab61f865c525a29279ad104fcdcca55ca2ff1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcreateq_u8.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a79b522e0663a202a288db56ebcbdcdb48bdaca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcreateq_u8.c?ref=9a79b522e0663a202a288db56ebcbdcdb48bdaca", "patch": "@@ -1,13 +1,34 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n uint8x16_t\n foo (uint64_t a, uint64_t b)\n {\n   return vcreateq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmov\"  }  } */\n+/*\n+**foo1:\n+**\t...\n+**\tvmov q[0-9+]\\[2\\], q[0-9+]\\[0\\], r[0-9+], r[0-9+]\n+**\tvmov q[0-9+]\\[3\\], q[0-9+]\\[1\\], r[0-9+], r[0-9+]\n+**\t...\n+*/\n+uint8x16_t\n+foo1 ()\n+{\n+  return vcreateq_u8 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}