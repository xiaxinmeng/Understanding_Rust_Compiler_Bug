{"sha": "109949cd3ca2200473c776d19996d72af3a5c6e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5OTQ5Y2QzY2EyMjAwNDczYzc3NmQxOTk5NmQ3MmFmM2E1YzZlNw==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2007-06-06T10:22:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:22:52Z"}, "message": "clean.adb (Clean_Archive): Use untouched casing for the archive name and the corresponding .deps file.\n\n2007-04-20  Pascal Obry  <obry@adacore.com>\n\n\t* clean.adb (Clean_Archive): Use untouched casing for the archive name\n\tand the corresponding .deps file.\n\t(Clean_Interface_Copy_Directory): Use untouched casing for the library\n\tsrc directory. Minor code-clean-up. Use untouched casing for files\n\tread into the library src dir.\n\t(Clean_Library_Directory): Idem.\n\t(Parse_Cmd_Line): Accept new switch -aP\n\nFrom-SVN: r125389", "tree": {"sha": "8d0e39e5977f716f332f88442493ef8b3d4651f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0e39e5977f716f332f88442493ef8b3d4651f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/109949cd3ca2200473c776d19996d72af3a5c6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109949cd3ca2200473c776d19996d72af3a5c6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109949cd3ca2200473c776d19996d72af3a5c6e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109949cd3ca2200473c776d19996d72af3a5c6e7/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11b4899f8af0a089ddbbdd10c2c23564f72c9cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b4899f8af0a089ddbbdd10c2c23564f72c9cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b4899f8af0a089ddbbdd10c2c23564f72c9cd8"}], "stats": {"total": 363, "additions": 199, "deletions": 164}, "files": [{"sha": "7bfc424f0e28ff6b08b5554491c2345ddbdb7134", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 199, "deletions": 164, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109949cd3ca2200473c776d19996d72af3a5c6e7/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109949cd3ca2200473c776d19996d72af3a5c6e7/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=109949cd3ca2200473c776d19996d72af3a5c6e7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -181,10 +181,10 @@ package body Clean is\n    procedure Add_Object_Directories is\n      new Prj.Env.For_All_Object_Dirs (Action => Add_Object_Dir);\n \n-   function ALI_File_Name (Source : Name_Id) return String;\n+   function ALI_File_Name (Source : File_Name_Type) return String;\n    --  Returns the name of the ALI file corresponding to Source\n \n-   function Assembly_File_Name (Source : Name_Id) return String;\n+   function Assembly_File_Name (Source : File_Name_Type) return String;\n    --  Returns the assembly file name corresponding to Source\n \n    procedure Clean_Archive (Project : Project_Id);\n@@ -195,8 +195,8 @@ package body Clean is\n    --  Do the cleaning work when no project file is specified\n \n    procedure Clean_Interface_Copy_Directory (Project : Project_Id);\n-   --  Delete files in an interface coy directory directory: any file that is\n-   --  a copy of a source of the project.\n+   --  Delete files in an interface copy directory: any file that is a copy of\n+   --  a source of the project.\n \n    procedure Clean_Library_Directory (Project : Project_Id);\n    --  Delete the library file in a library directory and any ALI file\n@@ -208,35 +208,36 @@ package body Clean is\n    --  project files in the tree rooted at the main project file and switch -r\n    --  has been specified.\n \n-   function Debug_File_Name (Source : Name_Id) return String;\n+   function Debug_File_Name (Source : File_Name_Type) return String;\n    --  Name of the expanded source file corresponding to Source\n \n    procedure Delete (In_Directory : String; File : String);\n    --  Delete one file, or list the file name if switch -n is specified\n \n-   procedure Delete_Binder_Generated_Files (Dir : String; Source : Name_Id);\n+   procedure Delete_Binder_Generated_Files\n+     (Dir    : String;\n+      Source : File_Name_Type);\n    --  Delete the binder generated file in directory Dir for Source, if they\n    --  exist: for Unix these are b~<source>.ads, b~<source>.adb,\n    --  b~<source>.ali and b~<source>.o.\n \n    procedure Display_Copyright;\n-   --  Display the Copyright notice.\n-   --  If called several times, display the Copyright notice only the first\n-   --  time.\n+   --  Display the Copyright notice. If called several times, display the\n+   --  Copyright notice only the first time.\n \n    procedure Initialize;\n    --  Call the necessary package initializations\n \n-   function Object_File_Name (Source : Name_Id) return String;\n+   function Object_File_Name (Source : File_Name_Type) return String;\n    --  Returns the object file name corresponding to Source\n \n    procedure Parse_Cmd_Line;\n    --  Parse the command line\n \n-   function Repinfo_File_Name (Source : Name_Id) return String;\n+   function Repinfo_File_Name (Source : File_Name_Type) return String;\n    --  Returns the repinfo file name corresponding to Source\n \n-   function Tree_File_Name (Source : Name_Id) return String;\n+   function Tree_File_Name (Source : File_Name_Type) return String;\n    --  Returns the tree file name corresponding to Source\n \n    function In_Extension_Chain\n@@ -290,7 +291,7 @@ package body Clean is\n    -- ALI_File_Name --\n    -------------------\n \n-   function ALI_File_Name (Source : Name_Id) return String is\n+   function ALI_File_Name (Source : File_Name_Type) return String is\n       Src : constant String := Get_Name_String (Source);\n \n    begin\n@@ -313,7 +314,7 @@ package body Clean is\n    -- Assembly_File_Name --\n    ------------------------\n \n-   function Assembly_File_Name (Source : Name_Id) return String is\n+   function Assembly_File_Name (Source : File_Name_Type) return String is\n       Src : constant String := Get_Name_String (Source);\n \n    begin\n@@ -337,19 +338,22 @@ package body Clean is\n    -------------------\n \n    procedure Clean_Archive (Project : Project_Id) is\n-      Current_Dir : constant Dir_Name_Str := Get_Current_Dir;\n-      Data        : constant Project_Data :=\n-                      Project_Tree.Projects.Table (Project);\n+      Current_Dir      : constant Dir_Name_Str := Get_Current_Dir;\n+      Data             : constant Project_Data :=\n+                           Project_Tree.Projects.Table (Project);\n+      Lib_Prefix       : constant String :=\n+                           \"lib\" & Get_Name_String (Data.Display_Name);\n \n       Archive_Name : constant String :=\n-                       \"lib\" & Get_Name_String (Data.Name) & '.' & Archive_Ext;\n+                       Lib_Prefix & '.' & Archive_Ext;\n       --  The name of the archive file for this project\n \n       Archive_Dep_Name : constant String :=\n-                           \"lib\" & Get_Name_String (Data.Name) & \".deps\";\n+                           Lib_Prefix & \".deps\";\n       --  The name of the archive dependency file for this project\n \n-      Obj_Dir : constant String := Get_Name_String (Data.Object_Directory);\n+      Obj_Dir : constant String :=\n+                  Get_Name_String (Data.Display_Object_Dir);\n \n    begin\n       Change_Dir (Obj_Dir);\n@@ -382,7 +386,7 @@ package body Clean is\n       Full_Lib_File : File_Name_Type;\n       --  Full name of the current ALI file\n \n-      Text : Text_Buffer_Ptr;\n+      Text    : Text_Buffer_Ptr;\n       The_ALI : ALI_Id;\n \n    begin\n@@ -505,9 +509,10 @@ package body Clean is\n \n          if not Compile_Only then\n             declare\n-               Source : constant Name_Id := Strip_Suffix (Main_Lib_File);\n-               Executable : constant String := Get_Name_String\n-                                              (Executable_Name (Source));\n+               Source     : constant File_Name_Type :=\n+                              Strip_Suffix (Main_Lib_File);\n+               Executable : constant String :=\n+                              Get_Name_String (Executable_Name (Source));\n             begin\n                if Is_Regular_File (Executable) then\n                   Delete (\"\", Executable);\n@@ -536,13 +541,13 @@ package body Clean is\n       Unit        : Unit_Data;\n \n    begin\n-      if Data.Library and then Data.Library_Src_Dir /= No_Name then\n+      if Data.Library and then Data.Library_Src_Dir /= No_Path then\n          declare\n             Directory : constant String :=\n-                          Get_Name_String (Data.Library_Src_Dir);\n+                          Get_Name_String (Data.Display_Library_Src_Dir);\n \n          begin\n-            Change_Dir (Get_Name_String (Data.Library_Src_Dir));\n+            Change_Dir (Directory);\n             Open (Direc, \".\");\n \n             --  For each regular file in the directory, if switch -n has not\n@@ -553,46 +558,53 @@ package body Clean is\n                Read (Direc, Name, Last);\n                exit when Last = 0;\n \n-               if Is_Regular_File (Name (1 .. Last)) then\n-                  Canonical_Case_File_Name (Name (1 .. Last));\n-                  Delete_File := False;\n+               declare\n+                  Filename : constant String := Name (1 .. Last);\n \n-                  --  Compare with source file names of the project\n+               begin\n+                  if Is_Regular_File (Filename) then\n+                     Canonical_Case_File_Name (Name (1 .. Last));\n+                     Delete_File := False;\n \n-                  for Index in 1 .. Unit_Table.Last (Project_Tree.Units) loop\n-                     Unit := Project_Tree.Units.Table (Index);\n+                     --  Compare with source file names of the project\n \n-                     if Ultimate_Extension_Of\n-                       (Unit.File_Names (Body_Part).Project) = Project\n-                       and then\n-                         Get_Name_String\n-                           (Unit.File_Names (Body_Part).Name) =\n-                       Name (1 .. Last)\n-                     then\n-                        Delete_File := True;\n-                        exit;\n-                     end if;\n+                     for Index in\n+                       1 .. Unit_Table.Last (Project_Tree.Units)\n+                     loop\n+                        Unit := Project_Tree.Units.Table (Index);\n+\n+                        if Ultimate_Extension_Of\n+                          (Unit.File_Names (Body_Part).Project) = Project\n+                          and then\n+                            Get_Name_String\n+                              (Unit.File_Names (Body_Part).Name) =\n+                          Name (1 .. Last)\n+                        then\n+                           Delete_File := True;\n+                           exit;\n+                        end if;\n \n-                     if Ultimate_Extension_Of\n-                       (Unit.File_Names (Specification).Project) = Project\n-                       and then\n-                         Get_Name_String\n-                           (Unit.File_Names (Specification).Name) =\n-                       Name (1 .. Last)\n-                     then\n-                        Delete_File := True;\n-                        exit;\n-                     end if;\n-                  end loop;\n+                        if Ultimate_Extension_Of\n+                          (Unit.File_Names (Specification).Project) = Project\n+                          and then\n+                            Get_Name_String\n+                              (Unit.File_Names (Specification).Name) =\n+                          Name (1 .. Last)\n+                        then\n+                           Delete_File := True;\n+                           exit;\n+                        end if;\n+                     end loop;\n \n-                  if Delete_File then\n-                     if not Do_Nothing then\n-                        Set_Writable (Name (1 .. Last));\n-                     end if;\n+                     if Delete_File then\n+                        if not Do_Nothing then\n+                           Set_Writable (Filename);\n+                        end if;\n \n-                     Delete (Directory, Name (1 .. Last));\n+                        Delete (Directory, Filename);\n+                     end if;\n                   end if;\n-               end if;\n+               end;\n             end loop;\n \n             Close (Direc);\n@@ -613,9 +625,9 @@ package body Clean is\n       Data    : constant Project_Data := Project_Tree.Projects.Table (Project);\n \n       Lib_Filename : constant String := Get_Name_String (Data.Library_Name);\n-      DLL_Name     : constant String :=\n+      DLL_Name     : String :=\n                        DLL_Prefix & Lib_Filename & \".\" & DLL_Ext;\n-      Archive_Name : constant String :=\n+      Archive_Name : String :=\n                        \"lib\" & Lib_Filename & \".\" & Archive_Ext;\n       Direc        : Dir_Type;\n \n@@ -628,11 +640,15 @@ package body Clean is\n       if Data.Library then\n          declare\n             Lib_Directory     : constant String :=\n-                                  Get_Name_String (Data.Library_Dir);\n+                                  Get_Name_String (Data.Display_Library_Dir);\n             Lib_ALI_Directory : constant String :=\n-                                  Get_Name_String (Data.Library_ALI_Dir);\n+                                  Get_Name_String\n+                                    (Data.Display_Library_ALI_Dir);\n \n          begin\n+            Canonical_Case_File_Name (Archive_Name);\n+            Canonical_Case_File_Name (DLL_Name);\n+\n             Change_Dir (Lib_Directory);\n             Open (Direc, \".\");\n \n@@ -644,26 +660,29 @@ package body Clean is\n                Read (Direc, Name, Last);\n                exit when Last = 0;\n \n-               if Is_Regular_File (Name (1 .. Last)) then\n-                  Canonical_Case_File_Name (Name (1 .. Last));\n-                  Delete_File := False;\n-\n-                  if (Data.Library_Kind = Static and then\n-                        Name (1 .. Last) =  Archive_Name)\n-                    or else\n-                      ((Data.Library_Kind = Dynamic or else\n-                          Data.Library_Kind = Relocatable)\n-                       and then\n-                         Name (1 .. Last) = DLL_Name)\n-                  then\n-                     if not Do_Nothing then\n-                        Set_Writable (Name (1 .. Last));\n-                     end if;\n+               declare\n+                  Filename : constant String := Name (1 .. Last);\n+               begin\n+                  if Is_Regular_File (Filename) then\n+                     Canonical_Case_File_Name (Name (1 .. Last));\n+                     Delete_File := False;\n \n-                     Delete (Lib_Directory, Name (1 .. Last));\n-                     exit;\n+                     if (Data.Library_Kind = Static\n+                         and then Name (1 .. Last) =  Archive_Name)\n+                       or else\n+                         ((Data.Library_Kind = Dynamic or else\n+                             Data.Library_Kind = Relocatable)\n+                          and then Name (1 .. Last) = DLL_Name)\n+                     then\n+                        if not Do_Nothing then\n+                           Set_Writable (Filename);\n+                        end if;\n+\n+                        Delete (Lib_Directory, Filename);\n+                        exit;\n+                     end if;\n                   end if;\n-               end if;\n+               end;\n             end loop;\n \n             Close (Direc);\n@@ -679,71 +698,74 @@ package body Clean is\n                Read (Direc, Name, Last);\n                exit when Last = 0;\n \n-               if Is_Regular_File (Name (1 .. Last)) then\n-                  Canonical_Case_File_Name (Name (1 .. Last));\n-                  Delete_File := False;\n+               declare\n+                  Filename : constant String := Name (1 .. Last);\n+               begin\n+                  if Is_Regular_File (Filename) then\n+                     Canonical_Case_File_Name (Name (1 .. Last));\n+                     Delete_File := False;\n \n-                  if Last > 4 and then Name (Last - 3 .. Last) = \".ali\" then\n-                     declare\n-                        Unit : Unit_Data;\n-                     begin\n-                        --  Compare with ALI file names of the project\n+                     if Last > 4 and then Name (Last - 3 .. Last) = \".ali\" then\n+                        declare\n+                           Unit : Unit_Data;\n+                        begin\n+                           --  Compare with ALI file names of the project\n \n-                        for\n-                          Index in 1 .. Unit_Table.Last (Project_Tree.Units)\n-                        loop\n-                           Unit := Project_Tree.Units.Table (Index);\n-\n-                           if Unit.File_Names (Body_Part).Project /=\n-                             No_Project\n-                           then\n-                              if  Ultimate_Extension_Of\n-                                (Unit.File_Names (Body_Part).Project) =\n-                                 Project\n+                           for\n+                             Index in 1 .. Unit_Table.Last (Project_Tree.Units)\n+                           loop\n+                              Unit := Project_Tree.Units.Table (Index);\n+\n+                              if Unit.File_Names (Body_Part).Project /=\n+                                No_Project\n+                              then\n+                                 if  Ultimate_Extension_Of\n+                                   (Unit.File_Names (Body_Part).Project) =\n+                                   Project\n+                                 then\n+                                    Get_Name_String\n+                                      (Unit.File_Names (Body_Part).Name);\n+                                    Name_Len := Name_Len -\n+                                      File_Extension\n+                                        (Name (1 .. Name_Len))'Length;\n+                                    if Name_Buffer (1 .. Name_Len) =\n+                                      Name (1 .. Last - 4)\n+                                    then\n+                                       Delete_File := True;\n+                                       exit;\n+                                    end if;\n+                                 end if;\n+\n+                              elsif Ultimate_Extension_Of\n+                                (Unit.File_Names (Specification).Project) =\n+                                Project\n                               then\n                                  Get_Name_String\n-                                   (Unit.File_Names (Body_Part).Name);\n+                                   (Unit.File_Names (Specification).Name);\n                                  Name_Len := Name_Len -\n                                    File_Extension\n                                      (Name (1 .. Name_Len))'Length;\n+\n                                  if Name_Buffer (1 .. Name_Len) =\n-                                     Name (1 .. Last - 4)\n+                                   Name (1 .. Last - 4)\n                                  then\n                                     Delete_File := True;\n                                     exit;\n                                  end if;\n                               end if;\n+                           end loop;\n+                        end;\n+                     end if;\n \n-                           elsif Ultimate_Extension_Of\n-                                   (Unit.File_Names (Specification).Project) =\n-                                                                        Project\n-                           then\n-                              Get_Name_String\n-                                (Unit.File_Names (Specification).Name);\n-                              Name_Len := Name_Len -\n-                                            File_Extension\n-                                              (Name (1 .. Name_Len))'Length;\n-\n-                              if Name_Buffer (1 .. Name_Len) =\n-                                   Name (1 .. Last - 4)\n-                              then\n-                                 Delete_File := True;\n-                                 exit;\n-                              end if;\n-                           end if;\n-                        end loop;\n-                     end;\n-                  end if;\n+                     if Delete_File then\n+                        if not Do_Nothing then\n+                           Set_Writable (Filename);\n+                        end if;\n \n-                  if Delete_File then\n-                     if not Do_Nothing then\n-                        Set_Writable (Name (1 .. Last));\n+                        Delete (Lib_ALI_Directory, Filename);\n                      end if;\n-\n-                     Delete (Lib_ALI_Directory, Name (1 .. Last));\n                   end if;\n-\n-               end if;\n+               end;\n             end loop;\n \n             Close (Direc);\n@@ -763,16 +785,16 @@ package body Clean is\n       Main_Source_File : File_Name_Type;\n       --  Name of executable on the command line without directory info\n \n-      Executable : Name_Id;\n+      Executable : File_Name_Type;\n       --  Name of the executable file\n \n       Current_Dir : constant Dir_Name_Str := Get_Current_Dir;\n       Data        : constant Project_Data :=\n                       Project_Tree.Projects.Table (Project);\n       U_Data      : Unit_Data;\n-      File_Name1  : Name_Id;\n+      File_Name1  : File_Name_Type;\n       Index1      : Int;\n-      File_Name2  : Name_Id;\n+      File_Name2  : File_Name_Type;\n       Index2      : Int;\n       Lib_File    : File_Name_Type;\n \n@@ -814,10 +836,10 @@ package body Clean is\n          Processed_Projects.Increment_Last;\n          Processed_Projects.Table (Processed_Projects.Last) := Project;\n \n-         if Data.Object_Directory /= No_Name then\n+         if Data.Object_Directory /= No_Path then\n             declare\n                Obj_Dir : constant String :=\n-                           Get_Name_String (Data.Object_Directory);\n+                           Get_Name_String (Data.Display_Object_Dir);\n \n             begin\n                Change_Dir (Obj_Dir);\n@@ -837,8 +859,8 @@ package body Clean is\n                     Unit_Table.Last (Project_Tree.Units)\n                   loop\n                      U_Data := Project_Tree.Units.Table (Unit);\n-                     File_Name1 := No_Name;\n-                     File_Name2 := No_Name;\n+                     File_Name1 := No_File;\n+                     File_Name2 := No_File;\n \n                      --  If either the spec or the body is a source of the\n                      --  project, check for the corresponding ALI file in the\n@@ -858,18 +880,18 @@ package body Clean is\n                         --  If there is no body file name, then there may be\n                         --  only a spec.\n \n-                        if File_Name1 = No_Name then\n+                        if File_Name1 = No_File then\n                            File_Name1 := File_Name2;\n                            Index1     := Index2;\n-                           File_Name2 := No_Name;\n+                           File_Name2 := No_File;\n                            Index2     := 0;\n                         end if;\n                      end if;\n \n                      --  If there is either a spec or a body, look for files\n                      --  in the object directory.\n \n-                     if File_Name1 /= No_Name then\n+                     if File_Name1 /= No_File then\n                         Lib_File := Osint.Lib_File_Name (File_Name1, Index1);\n \n                         declare\n@@ -882,9 +904,9 @@ package body Clean is\n                            Adt : constant String :=\n                                    Tree_File_Name     (Lib_File);\n                            Deb : constant String :=\n-                                   Debug_File_Name (File_Name1);\n+                                   Debug_File_Name    (File_Name1);\n                            Rep : constant String :=\n-                                   Repinfo_File_Name (File_Name1);\n+                                   Repinfo_File_Name  (File_Name1);\n                            Del : Boolean := True;\n \n                         begin\n@@ -948,7 +970,7 @@ package body Clean is\n \n                               --  Second expanded source file\n \n-                              if File_Name2 /= No_Name then\n+                              if File_Name2 /= No_File then\n                                  declare\n                                     Deb : constant String :=\n                                             Debug_File_Name (File_Name2);\n@@ -1040,16 +1062,17 @@ package body Clean is\n             if not Compile_Only then\n                Clean_Library_Directory (Project);\n \n-               if Data.Library_Src_Dir /= No_Name then\n+               if Data.Library_Src_Dir /= No_Path then\n                   Clean_Interface_Copy_Directory (Project);\n                end if;\n             end if;\n \n             if Data.Standalone_Library and then\n-              Data.Object_Directory /= No_Name\n+              Data.Object_Directory /= No_Path\n             then\n                Delete_Binder_Generated_Files\n-                 (Get_Name_String (Data.Object_Directory), Data.Library_Name);\n+                 (Get_Name_String (Data.Display_Object_Dir),\n+                  Data.Library_Name);\n             end if;\n          end if;\n \n@@ -1106,10 +1129,10 @@ package body Clean is\n \n          --  The executables are deleted only if switch -c is not specified\n \n-      if Project = Main_Project and then Data.Exec_Directory /= No_Name then\n+      if Project = Main_Project and then Data.Exec_Directory /= No_Path then\n          declare\n             Exec_Dir : constant String :=\n-                         Get_Name_String (Data.Exec_Directory);\n+                         Get_Name_String (Data.Display_Exec_Dir);\n \n          begin\n             Change_Dir (Exec_Dir);\n@@ -1143,10 +1166,9 @@ package body Clean is\n                   end;\n                end if;\n \n-               if Data.Object_Directory /= No_Name then\n+               if Data.Object_Directory /= No_Path then\n                   Delete_Binder_Generated_Files\n-                    (Get_Name_String\n-                       (Data.Object_Directory),\n+                    (Get_Name_String (Data.Display_Object_Dir),\n                      Strip_Suffix (Main_Source_File));\n                end if;\n             end loop;\n@@ -1162,7 +1184,7 @@ package body Clean is\n    -- Debug_File_Name --\n    ---------------------\n \n-   function Debug_File_Name (Source : Name_Id) return String is\n+   function Debug_File_Name (Source : File_Name_Type) return String is\n    begin\n       return Get_Name_String (Source) & Debug_Suffix;\n    end Debug_File_Name;\n@@ -1173,8 +1195,8 @@ package body Clean is\n \n    procedure Delete (In_Directory : String; File : String) is\n       Full_Name : String (1 .. In_Directory'Length + File'Length + 1);\n-      Last : Natural := 0;\n-      Success : Boolean;\n+      Last      : Natural := 0;\n+      Success   : Boolean;\n \n    begin\n       --  Indicate that at least one file is deleted or is to be deleted\n@@ -1229,7 +1251,10 @@ package body Clean is\n    -- Delete_Binder_Generated_Files --\n    -----------------------------------\n \n-   procedure Delete_Binder_Generated_Files (Dir : String; Source : Name_Id) is\n+   procedure Delete_Binder_Generated_Files\n+     (Dir    : String;\n+      Source : File_Name_Type)\n+   is\n       Source_Name : constant String := Get_Name_String (Source);\n       Current     : constant String := Get_Current_Dir;\n       Last        : constant Positive := B_Start'Length + Source_Name'Length;\n@@ -1546,7 +1571,7 @@ package body Clean is\n    begin\n       --  Do not insert an empty name or an already marked source\n \n-      if Lib_File /= No_Name and then not Makeutl.Is_Marked (Lib_File) then\n+      if Lib_File /= No_File and then not Makeutl.Is_Marked (Lib_File) then\n          Q.Table (Q.Last) := Lib_File;\n          Q.Increment_Last;\n \n@@ -1560,7 +1585,7 @@ package body Clean is\n    -- Object_File_Name --\n    ----------------------\n \n-   function Object_File_Name (Source : Name_Id) return String is\n+   function Object_File_Name (Source : File_Name_Type) return String is\n       Src : constant String := Get_Name_String (Source);\n \n    begin\n@@ -1584,9 +1609,9 @@ package body Clean is\n    --------------------\n \n    procedure Parse_Cmd_Line is\n-      Source_Index : Int := 0;\n-      Index : Positive := 1;\n       Last         : constant Natural := Argument_Count;\n+      Source_Index : Int := 0;\n+      Index        : Positive := 1;\n \n    begin\n       while Index <= Last loop\n@@ -1614,11 +1639,20 @@ package body Clean is\n \n                   case Arg (2) is\n                      when 'a' =>\n-                        if Arg'Length < 4 or else Arg (3) /= 'O' then\n+                        if Arg'Length < 4 then\n                            Bad_Argument;\n                         end if;\n \n-                        Add_Lib_Search_Dir (Arg (3 .. Arg'Last));\n+                        if Arg (3) = 'O' then\n+                           Add_Lib_Search_Dir (Arg (4 .. Arg'Last));\n+\n+                        elsif Arg (3) = 'P' then\n+                           Prj.Ext.Add_Search_Project_Directory\n+                             (Arg (4 .. Arg'Last));\n+\n+                        else\n+                           Bad_Argument;\n+                        end if;\n \n                      when 'c'    =>\n                         Compile_Only := True;\n@@ -1824,7 +1858,7 @@ package body Clean is\n    -- Repinfo_File_Name --\n    -----------------------\n \n-   function Repinfo_File_Name (Source : Name_Id) return String is\n+   function Repinfo_File_Name (Source : File_Name_Type) return String is\n    begin\n       return Get_Name_String (Source) & Repinfo_Suffix;\n    end Repinfo_File_Name;\n@@ -1833,7 +1867,7 @@ package body Clean is\n    -- Tree_File_Name --\n    --------------------\n \n-   function Tree_File_Name (Source : Name_Id) return String is\n+   function Tree_File_Name (Source : File_Name_Type) return String is\n       Src : constant String := Get_Name_String (Source);\n \n    begin\n@@ -1914,4 +1948,5 @@ package body Clean is\n          New_Line;\n       end if;\n    end Usage;\n+\n end Clean;"}]}