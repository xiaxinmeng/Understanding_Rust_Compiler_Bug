{"sha": "1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlYjdkN2Q2N2QxNjcyOTdjYTJmNGE5N2VmMjBmNjhlNzU0NmI0Yw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-10-16T12:59:51Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-10-24T16:03:36Z"}, "message": "Update check for working assembler --gdwarf-4 option\n\nRename HAVE_AS_WORKING_DWARF_4_FLAG to HAVE_AS_WORKING_DWARF_N_FLAG\nDon't set HAVE_AS_WORKING_DWARF_N_FLAG if --gdwarf-5/--gdwarf-4 generate\nan extra assembly input file in debug info from compiler generated\n.debug_line or fail with the APP marker:\n\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=25878\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=26740\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=26778\n\nAlso replace success with dwarf4_success in the 32-bit --gdwarf-4 check.\n\n\tPR bootstrap/97451\n\t* configure.ac (HAVE_AS_WORKING_DWARF_4_FLAG): Renamed to ...\n\t(HAVE_AS_WORKING_DWARF_N_FLAG): This.  Don't define if there is\n\tan extra assembly input file in debug info.  Replace success\n\twith dwarf4_success in the 32-bit --gdwarf-4 check.\n\t* dwarf2out.c (asm_outputs_debug_line_str): Check\n\tHAVE_AS_WORKING_DWARF_N_FLAG instead of\n\tHAVE_AS_WORKING_DWARF_4_FLAG.\n\t* gcc.c (ASM_DEBUG_SPEC): Likewise.\n\t(ASM_DEBUG_OPTION_SPEC): Likewise.\n\t* config.in: Regenerated.\n\t* configure: Likewise.", "tree": {"sha": "4f74334ca22079bdab72a7d5ec1250a31c35a65d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f74334ca22079bdab72a7d5ec1250a31c35a65d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea"}], "stats": {"total": 177, "additions": 164, "deletions": 13}, "files": [{"sha": "b7c3107bfe326c21d4f6149bc711b4c720c08cb2", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "patch": "@@ -719,10 +719,10 @@\n #endif\n \n \n-/* Define if your assembler supports --gdwarf-4 even with compiler generated\n-   .debug_line */\n+/* Define if your assembler supports --gdwarf-4/--gdwarf-5 even with compiler\n+   generated .debug_line. */\n #ifndef USED_FOR_TARGET\n-#undef HAVE_AS_WORKING_DWARF_4_FLAG\n+#undef HAVE_AS_WORKING_DWARF_N_FLAG\n #endif\n \n "}, {"sha": "f96a89e8c37e88a216ab61ec5dbfc160303b62da", "filename": "gcc/configure", "status": "modified", "additions": 102, "deletions": 4, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "patch": "@@ -28701,7 +28701,7 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_debug_line_32_flag\" >&5\n $as_echo \"$gcc_cv_as_debug_line_32_flag\" >&6; }\n if test $gcc_cv_as_debug_line_32_flag = yes; then\n-  success=yes\n+  dwarf4_success=yes\n fi\n \n    else\n@@ -28741,6 +28741,7 @@ fi\n \n    fi\n    if test $dwarf4_success = yes; then\n+     dwarf4_success=no\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for --gdwarf-4 not refusing compiler generated .debug_line\" >&5\n $as_echo_n \"checking assembler for --gdwarf-4 not refusing compiler generated .debug_line... \" >&6; }\n if ${gcc_cv_as_dwarf_4_debug_line_flag+:} false; then :\n@@ -28772,9 +28773,7 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_dwarf_4_debug_line_flag\" >&5\n $as_echo \"$gcc_cv_as_dwarf_4_debug_line_flag\" >&6; }\n if test $gcc_cv_as_dwarf_4_debug_line_flag = yes; then\n-\n-$as_echo \"#define HAVE_AS_WORKING_DWARF_4_FLAG 1\" >>confdefs.h\n-\n+  dwarf4_success=yes\n fi\n \n      break\n@@ -28785,6 +28784,105 @@ fi\n    dwarf4_line_sz=5\n  done\n \n+ if test $dwarf4_success = yes; then\n+   conftest_s=\"\\\n+\t.file\t\\\"foo.c\\\"\n+\t.text\n+bar:\n+#APP\n+# 82 \\\"xxx.h\\\" 1\n+\t$insn\n+# 0 \\\"\\\" 2\n+#NO_APP\n+\t$insn\n+foo:\n+\t.file 1 \\\"foo.c\\\"\n+\t$insn\n+\t.file 2 \\\"foo.h\\\"\n+\tret\n+\"\n+   dwarf4_success=no\n+   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for --gdwarf-4 with the APP marker\" >&5\n+$as_echo_n \"checking assembler for --gdwarf-4 with the APP marker... \" >&6; }\n+if ${gcc_cv_as_dwarf_4_app_flag+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_dwarf_4_app_flag=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --gdwarf-4 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_dwarf_4_app_flag=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_dwarf_4_app_flag\" >&5\n+$as_echo \"$gcc_cv_as_dwarf_4_app_flag\" >&6; }\n+if test $gcc_cv_as_dwarf_4_app_flag = yes; then\n+  dwarf4_success=yes\n+fi\n+\n+ fi\n+\n+ if test $dwarf4_success = yes; then\n+   conftest_s=\"\\\n+\t.text\n+\t.globl\tfoo\n+\t.type\tfoo, %function\n+foo:\n+\t$insn\n+\t.size\tfoo, .-foo\n+\t.file\t1 \\\"foo.c\\\"\n+\"\n+   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for working --gdwarf-4/--gdwarf-5 for all sources\" >&5\n+$as_echo_n \"checking assembler for working --gdwarf-4/--gdwarf-5 for all sources... \" >&6; }\n+if ${gcc_cv_as_working_gdwarf_n_flag+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_working_gdwarf_n_flag=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --gdwarf-4 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\t      if test x$gcc_cv_readelf != x \\\n+\t && $gcc_cv_readelf -w conftest.o 2>&1 \\\n+\t\t| grep conftest.s > /dev/null 2>&1; then\n+\tgcc_cv_as_working_gdwarf_n_flag=no\n+      else\n+\tgcc_cv_as_working_gdwarf_n_flag=yes\n+      fi\n+          else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_working_gdwarf_n_flag\" >&5\n+$as_echo \"$gcc_cv_as_working_gdwarf_n_flag\" >&6; }\n+\n+\n+   if test $gcc_cv_as_working_gdwarf_n_flag = yes; then\n+\n+$as_echo \"#define HAVE_AS_WORKING_DWARF_N_FLAG 1\" >>confdefs.h\n+\n+   fi\n+ fi\n+\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for --gstabs option\" >&5\n $as_echo_n \"checking assembler for --gstabs option... \" >&6; }\n if ${gcc_cv_as_gstabs_flag+:} false; then :"}, {"sha": "9154a5475dcd47040b245ed5bbf039412f59ffba", "filename": "gcc/configure.ac", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "patch": "@@ -5364,19 +5364,19 @@ foo:\n      gcc_GAS_CHECK_FEATURE([assembly of compiler generated 32-bit .debug_line],\n       gcc_cv_as_debug_line_32_flag,\n       [elf,2,36,0], [], [$conftest_s],,\n-      [success=yes])\n+      [dwarf4_success=yes])\n    else\n      gcc_GAS_CHECK_FEATURE([assembly of compiler generated 64-bit .debug_line],\n       gcc_cv_as_debug_line_64_flag,\n       [elf,2,36,0], [], [$conftest_s],,\n       [dwarf4_success=yes])\n    fi\n    if test $dwarf4_success = yes; then\n+     dwarf4_success=no\n      gcc_GAS_CHECK_FEATURE([--gdwarf-4 not refusing compiler generated .debug_line],\n       gcc_cv_as_dwarf_4_debug_line_flag,\n       [elf,2,36,0], [--gdwarf-4], [$conftest_s],,\n-      [AC_DEFINE(HAVE_AS_WORKING_DWARF_4_FLAG, 1,\n-[Define if your assembler supports --gdwarf-4 even with compiler generated .debug_line])])\n+      [dwarf4_success=yes])\n      break\n    fi\n    dwarf4_debug_info_size=0x36\n@@ -5385,6 +5385,59 @@ foo:\n    dwarf4_line_sz=5\n  done\n \n+ if test $dwarf4_success = yes; then\n+   conftest_s=\"\\\n+\t.file\t\\\"foo.c\\\"\n+\t.text\n+bar:\n+#APP\n+# 82 \\\"xxx.h\\\" 1\n+\t$insn\n+# 0 \\\"\\\" 2\n+#NO_APP\n+\t$insn\n+foo:\n+\t.file 1 \\\"foo.c\\\"\n+\t$insn\n+\t.file 2 \\\"foo.h\\\"\n+\tret\n+\"\n+   dwarf4_success=no\n+   gcc_GAS_CHECK_FEATURE([--gdwarf-4 with the APP marker],\n+     gcc_cv_as_dwarf_4_app_flag,,\n+     [--gdwarf-4], [$conftest_s],, [dwarf4_success=yes])\n+ fi\n+\n+ if test $dwarf4_success = yes; then\n+   conftest_s=\"\\\n+\t.text\n+\t.globl\tfoo\n+\t.type\tfoo, %function\n+foo:\n+\t$insn\n+\t.size\tfoo, .-foo\n+\t.file\t1 \\\"foo.c\\\"\n+\"\n+   gcc_GAS_CHECK_FEATURE([working --gdwarf-4/--gdwarf-5 for all sources],\n+     gcc_cv_as_working_gdwarf_n_flag,,\n+     [--gdwarf-4],\n+     [$conftest_s],\n+     [changequote(,)dnl\n+      if test x$gcc_cv_readelf != x \\\n+\t && $gcc_cv_readelf -w conftest.o 2>&1 \\\n+\t\t| grep conftest.s > /dev/null 2>&1; then\n+\tgcc_cv_as_working_gdwarf_n_flag=no\n+      else\n+\tgcc_cv_as_working_gdwarf_n_flag=yes\n+      fi\n+      changequote([,])dnl])\n+   if test $gcc_cv_as_working_gdwarf_n_flag = yes; then\n+     AC_DEFINE(HAVE_AS_WORKING_DWARF_N_FLAG, 1,\n+[Define if your assembler supports --gdwarf-4/--gdwarf-5 even with\n+ compiler generated .debug_line.])\n+   fi\n+ fi\n+\n  gcc_GAS_CHECK_FEATURE([--gstabs option],\n   gcc_cv_as_gstabs_flag,\n   [elf,2,11,0], [--gstabs], [$insn],,"}, {"sha": "534877babfbe5c0df67a266c753866e56797d84a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "patch": "@@ -11884,7 +11884,7 @@ asm_outputs_debug_line_str (void)\n     return true;\n   else\n     {\n-#if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_4_FLAG)\n+#if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_N_FLAG)\n       return !dwarf_split_debug_info && dwarf_version >= 5;\n #else\n       return false;"}, {"sha": "cdf4d4f2403e6236ff0f33c4def95bc445a51dee", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=1aeb7d7d67d167297ca2f4a97ef20f68e7546b4c", "patch": "@@ -880,7 +880,7 @@ proper position among the other output files.  */\n /* Define ASM_DEBUG_SPEC to be a spec suitable for translating '-g'\n    to the assembler, when compiling assembly sources only.  */\n #ifndef ASM_DEBUG_SPEC\n-# if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_4_FLAG)\n+# if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_N_FLAG)\n /* If --gdwarf-N is supported and as can handle even compiler generated\n    .debug_line with it, supply --gdwarf-N in ASM_DEBUG_OPTION_SPEC rather\n    than in ASM_DEBUG_SPEC, so that it applies to both .s and .c etc.\n@@ -921,7 +921,7 @@ proper position among the other output files.  */\n /* Define ASM_DEBUG_OPTION_SPEC to be a spec suitable for translating '-g'\n    to the assembler when compiling all sources.  */\n #ifndef ASM_DEBUG_OPTION_SPEC\n-# if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_4_FLAG)\n+# if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_N_FLAG)\n #  define ASM_DEBUG_OPTION_DWARF_OPT\t\t\t\t\t\\\n \t\"%{%:dwarf-version-gt(4):--gdwarf-5 ;\"\t\t\t\t\\\n \t\"%:dwarf-version-gt(3):--gdwarf-4 ;\"\t\t\t\t\\"}]}