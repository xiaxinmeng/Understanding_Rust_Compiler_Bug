{"sha": "59b9a953b6338358d0346c91b43095875da7eede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTliOWE5NTNiNjMzODM1OGQwMzQ2YzkxYjQzMDk1ODc1ZGE3ZWVkZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-04T19:46:25Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-04T19:46:25Z"}, "message": "alpha.c, [...]: Fix comment typos.\n\n\t* config/alpha/alpha.c, config/arc/arc.c,\n\tconfig/arm/arm-cores.def, config/arm/arm.c, config/arm/arm.h,\n\tconfig/arm/arm1026ejs.md, config/arm/arm1136jfs.md,\n\tconfig/arm/arm926ejs.md, config/arm/vfp.md, config/avr/avr.c,\n\tconfig/c4x/c4x.c, config/cris/cris.c, config/frv/frv.md,\n\tconfig/i386/i386.c, config/i386/i386.h, config/i386/i386.md,\n\tconfig/ia64/ia64.c, config/ia64/unwind-ia64.c,\n\tconfig/iq2000/iq2000.c, config/m32r/m32r.c,\n\tconfig/mips/mips.c, config/mmix/mmix.c, config/mmix/mmix.h,\n\tconfig/ns32k/ns32k.c, config/pa/pa.c, config/pdp11/pdp11.c,\n\tconfig/rs6000/darwin-ldouble.c, config/rs6000/rs6000.c,\n\tconfig/rs6000/rs6000.h, config/sparc/sparc.c,\n\tconfig/vax/vax.c: Fix comment typos.  Follow spelling\n\tconventions.\n\nFrom-SVN: r77267", "tree": {"sha": "225f9eb49e3f815d204a09357409f4f05e10d11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225f9eb49e3f815d204a09357409f4f05e10d11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59b9a953b6338358d0346c91b43095875da7eede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b9a953b6338358d0346c91b43095875da7eede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b9a953b6338358d0346c91b43095875da7eede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b9a953b6338358d0346c91b43095875da7eede/comments", "author": null, "committer": null, "parents": [{"sha": "e146f815b8fcddac741dfb0b3526a1a46140acdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e146f815b8fcddac741dfb0b3526a1a46140acdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e146f815b8fcddac741dfb0b3526a1a46140acdc"}], "stats": {"total": 175, "additions": 96, "deletions": 79}, "files": [{"sha": "e118bc468806dae073b233ed480392796c6429ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1,3 +1,20 @@\n+2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/alpha/alpha.c, config/arc/arc.c,\n+\tconfig/arm/arm-cores.def, config/arm/arm.c, config/arm/arm.h,\n+\tconfig/arm/arm1026ejs.md, config/arm/arm1136jfs.md,\n+\tconfig/arm/arm926ejs.md, config/arm/vfp.md, config/avr/avr.c,\n+\tconfig/c4x/c4x.c, config/cris/cris.c, config/frv/frv.md,\n+\tconfig/i386/i386.c, config/i386/i386.h, config/i386/i386.md,\n+\tconfig/ia64/ia64.c, config/ia64/unwind-ia64.c,\n+\tconfig/iq2000/iq2000.c, config/m32r/m32r.c,\n+\tconfig/mips/mips.c, config/mmix/mmix.c, config/mmix/mmix.h,\n+\tconfig/ns32k/ns32k.c, config/pa/pa.c, config/pdp11/pdp11.c,\n+\tconfig/rs6000/darwin-ldouble.c, config/rs6000/rs6000.c,\n+\tconfig/rs6000/rs6000.h, config/sparc/sparc.c,\n+\tconfig/vax/vax.c: Fix comment typos.  Follow spelling\n+\tconventions.\n+\n 2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* alloc-pool.h, c-convert.c, c-lang.c, c-tree.h,"}, {"sha": "10dbb7528cda8aa08513d3a7b1ffdc374a927e87", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -2112,7 +2112,7 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case CONST_DOUBLE:\n       if (x == CONST0_RTX (mode))\n@@ -2170,7 +2170,7 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = COSTS_N_INSNS (1);\n \t  return false;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case ASHIFTRT:\n     case LSHIFTRT:\n@@ -2206,15 +2206,15 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = COSTS_N_INSNS (1);\n \t  return false;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case ABS:\n       if (! float_mode_p)\n \t{\n \t  *total = COSTS_N_INSNS (1) + alpha_rtx_cost_data[alpha_cpu].int_cmov;\n \t  return false;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case FLOAT:\n     case UNSIGNED_FLOAT:\n@@ -3275,7 +3275,7 @@ alpha_emit_setcc (enum rtx_code code)\n     case NE:\n       if (!fp_p && op1 == const0_rtx)\n \tbreak;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case ORDERED:\n       cmp_code = reverse_condition (code);\n@@ -3708,7 +3708,7 @@ alpha_emit_xfloating_libcall (const char *func, rtx target, rtx operands[],\n \tcase VOIDmode:\n \t  if (GET_CODE (operands[i]) != CONST_INT)\n \t    abort ();\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \tcase DImode:\n \t  reg = gen_rtx_REG (DImode, regno);\n \t  regno += 1;\n@@ -6081,7 +6081,7 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n     case MODE_INT:\n       /* Do the same thing as PROMOTE_MODE.  */\n       mode = DImode;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case MODE_COMPLEX_INT:\n     case MODE_VECTOR_INT:"}, {"sha": "4ac3e2a72d2f0d43b57cfaf04403b045933007b5", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -834,7 +834,7 @@ arc_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "774ba6f10f2d7258f55b53586006c9f6cb52cc35", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -27,7 +27,7 @@\n    rather than a string constant.  The FLAGS are the bitwise-or of the\n    traits that apply to that core.\n \n-   If you update this table, you must update the \"tune\" attribue in\n+   If you update this table, you must update the \"tune\" attribute in\n    arm.md.  */\n \n ARM_CORE(arm2,\t\tFL_CO_PROC | FL_MODE26, slowmul)"}, {"sha": "12255d8710a463f46ba290bf08d9e39cdf57ff6a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -3596,7 +3596,7 @@ arm_rtx_costs_1 (rtx x, enum rtx_code code, enum rtx_code outer)\n     }\n }\n \n-/* RTX costs for cores with a slow MUL implimentation.  */\n+/* RTX costs for cores with a slow MUL implementation.  */\n \n static bool\n arm_slowmul_rtx_costs (rtx x, int code, int outer_code, int *total)\n@@ -4424,7 +4424,7 @@ vfp_mem_operand (rtx op)\n \t  || reg_mentioned_p (virtual_stack_vars_rtx, op)))\n     return FALSE;\n \n-  /* Constants are converted into offets from labels.  */\n+  /* Constants are converted into offsets from labels.  */\n   if (GET_CODE (op) == MEM)\n     {\n       rtx ind;\n@@ -9186,7 +9186,7 @@ arm_output_epilogue (rtx sibling)\n \t     not have base+offset addressing modes, so we use IP to\n \t     hold the address.  Each block requires nregs*2+1 words.  */\n \t  start_reg = FIRST_VFP_REGNUM;\n-\t  /* Cound how many blocks of registers need saving.  */\n+\t  /* Count how many blocks of registers need saving.  */\n \t  for (reg = FIRST_VFP_REGNUM; reg < LAST_VFP_REGNUM; reg += 2)\n \t    {\n \t      if ((!regs_ever_live[reg] || call_used_regs[reg])\n@@ -12449,7 +12449,7 @@ thumb_exit (FILE *f, int reg_containing_return_addr, rtx eh_ofs)\n \n /* Emit code to push or pop registers to or from the stack.  F is the\n    assembly file.  MASK is the registers to push or pop.  PUSH is\n-   non-zero if we should push, and zero if we should pop.  For debugging\n+   nonzero if we should push, and zero if we should pop.  For debugging\n    output, if pushing, adjust CFA_OFFSET by the amount of space added\n    to the stack.  REAL_REGS should have the same number of bits set as\n    MASK, and will be used instead (in the same order) to describe which\n@@ -14132,7 +14132,7 @@ arm_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n     *pretend_size = (NUM_ARG_REGS - cum->nregs) * UNITS_PER_WORD;\n }\n \n-/* Return non-zero if the CONSUMER instruction (a store) does not need\n+/* Return nonzero if the CONSUMER instruction (a store) does not need\n    PRODUCER's value to calculate the address.  */\n \n int\n@@ -14155,7 +14155,7 @@ arm_no_early_store_addr_dep (rtx producer, rtx consumer)\n   return !reg_overlap_mentioned_p (value, addr);\n }\n \n-/* Return non-zero if the CONSUMER instruction (an ALU op) does not\n+/* Return nonzero if the CONSUMER instruction (an ALU op) does not\n    have an early register shift value or amount dependency on the\n    result of PRODUCER.  */\n \n@@ -14187,7 +14187,7 @@ arm_no_early_alu_shift_dep (rtx producer, rtx consumer)\n   return !reg_overlap_mentioned_p (value, early_op);\n }\n \n-/* Return non-zero if the CONSUMER instruction (an ALU op) does not\n+/* Return nonzero if the CONSUMER instruction (an ALU op) does not\n    have an early register shift value dependency on the result of\n    PRODUCER.  */\n \n@@ -14220,7 +14220,7 @@ arm_no_early_alu_shift_value_dep (rtx producer, rtx consumer)\n   return !reg_overlap_mentioned_p (value, early_op);\n }\n \n-/* Return non-zero if the CONSUMER (a mul or mac op) does not\n+/* Return nonzero if the CONSUMER (a mul or mac op) does not\n    have an early register mult dependency on the result of\n    PRODUCER.  */\n "}, {"sha": "2199ee7c5a30ca37d1da389e0d3dfa77ec10aa0a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -136,7 +136,7 @@ extern GTY(()) rtx arm_target_insn;\n extern int target_flags;\n /* The floating point mode.  */\n extern const char *target_fpu_name;\n-/* For backwards compatability.  */\n+/* For backwards compatibility.  */\n extern const char *target_fpe_name;\n /* Whether to use floating point hardware.  */\n extern const char *target_float_abi_name;\n@@ -672,7 +672,7 @@ extern enum float_abi_type arm_float_abi;\n \n /* Default floating point architecture.  Override in sub-target if\n    necessary.\n-   FIXME: Is this still neccessary/desirable?  Do we want VFP chips to\n+   FIXME: Is this still necessary/desirable?  Do we want VFP chips to\n    default to VFP unless overridden by a subtarget?  If so it would be best\n    to remove these definitions.  It also assumes there is only one cpu model\n    with a Maverick fpu.  */\n@@ -1379,7 +1379,7 @@ enum reg_class\n #define REGNO_REG_CLASS(REGNO)  arm_regno_class (REGNO)\n \n /* FPA registers can't do subreg as all values are reformatted to internal\n-   precision.  VFP registers may only be accesed in the mode they\n+   precision.  VFP registers may only be accessed in the mode they\n    were set.  */\n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\\n   (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\\"}, {"sha": "77f8fde2ccfa96b1807d715467a1162e91c8f6db", "filename": "gcc/config/arm/arm1026ejs.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1026ejs.md?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -141,7 +141,7 @@\n \n ;; The \"umulls\", \"umlals\", \"smulls\", and \"smlals\" instructions loop in\n ;; the execute stage for five iterations in order to set the flags.\n-;; The value result is vailable after four iterations.\n+;; The value result is available after four iterations.\n (define_insn_reservation \"mult6\" 4\n  (and (eq_attr \"tune\" \"arm1026ejs\")\n       (eq_attr \"insn\" \"umulls,umlals,smulls,smlals\"))\n@@ -185,7 +185,7 @@\n ;; base address is 64-bit aligned; if it is not, an additional cycle\n ;; is required.  This model assumes that the address is always 64-bit\n ;; aligned.  Because the processor can load two registers per cycle,\n-;; that assumption means that we use the same instruction rservations\n+;; that assumption means that we use the same instruction reservations\n ;; for loading 2k and 2k - 1 registers.\n ;;\n ;; The ALU pipeline is stalled until the completion of the last memory\n@@ -233,7 +233,7 @@\n  \"nothing\")\n \n ;; The latency for a call is not predictable.  Therefore, we use 32 as\n-;; roughly equivalent to postive infinity.\n+;; roughly equivalent to positive infinity.\n \n (define_insn_reservation \"call_op\" 32\n  (and (eq_attr \"tune\" \"arm1026ejs\")"}, {"sha": "2c0638c05247e76458b7a255f5b48aaa749d9943", "filename": "gcc/config/arm/arm1136jfs.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1136jfs.md?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -56,7 +56,7 @@\n ;;\n ;; - A 4-stage LSU pipeline.  It has address generation, data cache (1),\n ;;   data cache (2), and writeback stages.  (Note that this pipeline,\n-;;   including the writeback stage, is independant from the ALU & LSU pipes.)  \n+;;   including the writeback stage, is independent from the ALU & LSU pipes.)  \n \n (define_cpu_unit \"e_1,e_2,e_3,e_wb\" \"arm1136jfs\")     ; ALU and MAC\n ; e_1 = Sh/Mac1, e_2 = ALU/Mac2, e_3 = SAT/Mac3\n@@ -336,7 +336,7 @@\n \t       \"arm_no_early_store_addr_dep\")\n \n ;; An alu op can start sooner after a load, if that alu op does not\n-;; have an early register dependancy on the load\n+;; have an early register dependency on the load\n (define_bypass 2 \"11_load1\"\n \t       \"11_alu_op\")\n (define_bypass 2 \"11_load1\""}, {"sha": "258495b7f0629e472a31aef6ed8f5980f2274c75", "filename": "gcc/config/arm/arm926ejs.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm926ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Farm926ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm926ejs.md?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -180,7 +180,7 @@\n  \"nothing\")\n \n ;; The latency for a call is not predictable.  Therefore, we use 32 as\n-;; roughly equivalent to postive infinity.\n+;; roughly equivalent to positive infinity.\n \n (define_insn_reservation \"9_call_op\" 32\n  (and (eq_attr \"tune\" \"arm926ejs\")"}, {"sha": "5ae6c41f75a29efdf3b8eda1f9d4021d635f88dd", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -42,10 +42,10 @@\n ;;   second memory stage for loads.\n \n ;; We do not model Write-After-Read hazards.\n-;; We do not do write scheduling with the arm core, so it is only neccessary\n-;; to model the first stage of each pieline\n+;; We do not do write scheduling with the arm core, so it is only necessary\n+;; to model the first stage of each pipeline\n ;; ??? Need to model LS pipeline properly for load/store multiple?\n-;; We do not model fmstat properly.  This could be done by modeiling pipelines\n+;; We do not model fmstat properly.  This could be done by modeling pipelines\n ;; properly and defining an absence set between a dummy fmstat unit and all\n ;; other vfp units.\n \n@@ -58,7 +58,7 @@\n ;; The VFP \"type\" attributes differ from those used in the FPA model.\n ;; ffarith\tFast floating point insns, eg. abs, neg, cpy, cmp.\n ;; farith\tMost arithmetic insns.\n-;; fmul\t\tDouble preision multiply.\n+;; fmul\t\tDouble precision multiply.\n ;; fdivs\tSingle precision sqrt or division.\n ;; fdivd\tDouble precision sqrt or division.\n ;; f_load\tFloating point load from memory.\n@@ -104,12 +104,12 @@\n \n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n-;; Insn pattersn\n+;; Insn pattern\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n ;; SImode moves\n ;; ??? For now do not allow loading constants into vfp regs.  This causes\n-;; problems because small sonstants get converted into adds.\n+;; problems because small constants get converted into adds.\n (define_insn \"*arm_movsi_vfp\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r ,m,!w,r,!w,!w, U\")\n       (match_operand:SI 1 \"general_operand\"\t   \"rI,K,mi,r,r,!w,!w,Ui,!w\"))]\n@@ -738,7 +738,7 @@\n ;; fldm*\n ;; fstm*\n ;; fmdhr et al (VFPv1)\n-;; Support for xD (single precisio only) variants.\n+;; Support for xD (single precision only) variants.\n ;; fmrrs, fmsrr\n ;; fuito*\n ;; ftoui*"}, {"sha": "716667a2ae26a9c574f1ede22eafe043265f9f38", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -4825,7 +4825,7 @@ avr_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = 2;\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "7892047c68ff43f79607aa96daf7fb6f43ee4d22", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -3475,7 +3475,7 @@ c4x_S_address_parse (rtx op, int *base, int *incdec, int *index, int *disp)\n \t    return;\n \t  }\n       }\n-      /* Fallthrough.  */\n+      /* Fall through.  */\n \n     default:\n       fatal_insn (\"invalid indirect (S) memory address\", op);\n@@ -3992,7 +3992,7 @@ legitimize_operands (enum rtx_code code, rtx *operands, enum machine_mode mode)\n   /* When the shift count is greater than 32 then the result \n      can be implementation dependent.  We truncate the result to\n      fit in 5 bits so that we do not emit invalid code when\n-     optimising---such as trying to generate lhu2 with 20021124-1.c.  */\n+     optimizing---such as trying to generate lhu2 with 20021124-1.c.  */\n   if (((code == ASHIFTRT || code == LSHIFTRT || code == ASHIFT)\n       && (GET_CODE (operands[2]) == CONST_INT))\n       && INTVAL (operands[2]) > (GET_MODE_BITSIZE (mode) - 1))"}, {"sha": "84f27ebd19f854b85e57bd7199373e8d83cfe11d", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1308,7 +1308,7 @@ cris_print_operand (FILE *file, rtx x, int code)\n   switch (code)\n     {\n     case 'b':\n-      /* Print the unsigned supplied integer as if it was signed\n+      /* Print the unsigned supplied integer as if it were signed\n \t and < 0, i.e print 255 or 65535 as -1, 254, 65534 as -2, etc.  */\n       if (GET_CODE (x) != CONST_INT\n \t  || ! CONST_OK_FOR_LETTER_P (INTVAL (x), 'O'))\n@@ -1734,7 +1734,7 @@ cris_initial_elimination_offset (int fromreg, int toreg)\n     = regs_ever_live[CRIS_SRP_REGNUM]\n     || cfun->machine->needs_return_address_on_stack != 0;\n \n-  /* Here we act as if the frame-pointer is needed.  */\n+  /* Here we act as if the frame-pointer were needed.  */\n   int ap_fp_offset = 4 + (return_address_on_stack ? 4 : 0);\n \n   if (fromreg == ARG_POINTER_REGNUM"}, {"sha": "a5fae615ecc65c9d4ab5d357f39c5e9408896c6e", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -309,8 +309,8 @@\n \n ;; Type:\tthe name of the define_attr type\n ;; Conditions:\t\"yes\" if conditional variants are available\n-;; FR500:\tFujitsu's categorisation for the FR500\n-;; FR400:\tFujitsu's categorisation for the FR400 (but see below).\n+;; FR500:\tFujitsu's categorization for the FR500\n+;; FR400:\tFujitsu's categorization for the FR400 (but see below).\n \n ;; On the FR400, media instructions are divided into 2 broad categories.\n ;; Category 1 instructions can execute in either the M0 or M1 unit and can\n@@ -502,7 +502,7 @@\n (define_cpu_unit \"sl2_i1, sl2_fm1, sl2_b0, sl2_b1\" \"nodiv\")\n (define_cpu_unit \"sl3_fm1, sl3_b0, sl3_b1\"  \"nodiv\")\n \n-;; The following describes conlicts by slots\n+;; The following describes conflicts by slots\n ;; slot0\n (exclusion_set \"sl0_i0\"  \"sl0_fm0,sl0_b0,sl0_c\")\n (exclusion_set \"sl0_fm0\" \"sl0_b0,sl0_c\")\n@@ -523,7 +523,7 @@\n (exclusion_set \"sl3_fm1\" \"sl3_b0,sl3_b1\")\n (exclusion_set \"sl3_b0\"  \"sl3_b1\")\n \n-;; The following describes conlicts by units\n+;; The following describes conflicts by units\n ;; fm0\n (exclusion_set \"sl0_fm0\" \"sl1_fm0\")\n \n@@ -3337,7 +3337,7 @@\n ;;   \"iordi3 %0,%1,%2\"\n ;;   [(set_attr \"length\" \"4\")])\n \n-;; Excludive OR, 64 bit integers\n+;; Exclusive OR, 64 bit integers\n ;; (define_insn \"xordi3\"\n ;;   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n ;; \t(xor:DI (match_operand:DI 1 \"register_operand\" \"%r\")"}, {"sha": "13f30d23b1cc194876dbcacc820b8975da99bdc4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -2573,7 +2573,7 @@ function_arg (CUMULATIVE_ARGS *cum,\t/* current arg information */\n       case BLKmode:\n \tif (bytes < 0)\n \t  break;\n-\t/* FALLTHRU */\n+\t/* Fall through.  */\n       case DImode:\n       case SImode:\n       case HImode:\n@@ -5836,7 +5836,7 @@ legitimate_pic_operand_p (rtx x)\n \t  default:\n \t    return false;\n \t  }\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case SYMBOL_REF:\n     case LABEL_REF:\n@@ -6712,7 +6712,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \n     case LABEL_REF:\n       x = XEXP (x, 0);\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case CODE_LABEL:\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));\n       assemble_name (asm_out_file, buf);\n@@ -7100,13 +7100,13 @@ print_reg (rtx x, int code, FILE *file)\n \t  fputs (\"st(0)\", file);\n \t  break;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case 8:\n     case 4:\n     case 12:\n       if (! ANY_FP_REG_P (x))\n \tputc (code == 8 && TARGET_64BIT ? 'r' : 'e', file);\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case 16:\n     case 2:\n     normal:\n@@ -8630,15 +8630,15 @@ ix86_match_ccmode (rtx insn, enum machine_mode req_mode)\n     case CCmode:\n       if (req_mode == CCGCmode)\n \treturn 0;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case CCGCmode:\n       if (req_mode == CCGOCmode || req_mode == CCNOmode)\n \treturn 0;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case CCGOCmode:\n       if (req_mode == CCZmode)\n \treturn 0;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case CCZmode:\n       break;\n \n@@ -14653,7 +14653,7 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n \tcase HImode:\n \tcase SImode:\n \t  operand = gen_lowpart (DImode, operand);\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \tcase DImode:\n \t  emit_insn (\n \t\t      gen_rtx_SET (VOIDmode,\n@@ -14693,7 +14693,7 @@ ix86_force_to_memory (enum machine_mode mode, rtx operand)\n \t  /* It is better to store HImodes as SImodes.  */\n \t  if (!TARGET_PARTIAL_REG_STALL)\n \t    operand = gen_lowpart (SImode, operand);\n-\t  /* FALLTHRU */\n+\t  /* Fall through.  */\n \tcase SImode:\n \t  emit_insn (\n \t\t      gen_rtx_SET (VOIDmode,\n@@ -15058,7 +15058,7 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t      return false;\n \t    }\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case ROTATE:\n     case ASHIFTRT:\n@@ -15166,15 +15166,15 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t      return true;\n \t    }\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case MINUS:\n       if (FLOAT_MODE_P (mode))\n \t{\n \t  *total = COSTS_N_INSNS (ix86_cost->fadd);\n \t  return false;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case AND:\n     case IOR:\n@@ -15188,15 +15188,15 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t               << (GET_MODE (XEXP (x, 1)) != DImode)));\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case NEG:\n       if (FLOAT_MODE_P (mode))\n \t{\n \t  *total = COSTS_N_INSNS (ix86_cost->fchs);\n \t  return false;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case NOT:\n       if (!TARGET_64BIT && mode == DImode)"}, {"sha": "80d4f116fb7607769138124e9737bd9f90f3be45", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -580,7 +580,7 @@ extern int x86_prefetch_sse;\n \t    {\t\t\t\t\t\t\t\\\n \t    case '3':\t\t\t\t\t\t\\\n \t      builtin_define (\"__tune_pentium3__\");\t\t\\\n-\t      /* FALLTHRU */\t\t\t\t\t\\\n+\t      /* Fall through.  */\t\t\t\t\\\n \t    case '2':\t\t\t\t\t\t\\\n \t      builtin_define (\"__tune_pentium2__\");\t\t\\\n \t      break;\t\t\t\t\t\t\\"}, {"sha": "b03d4a413da5ee79cd6a4d1a9c7840fee248476b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1955,7 +1955,7 @@\n     case TYPE_SSEMOV:\n       if (get_attr_mode (insn) == MODE_TI)\n \t  return \"movdqa\\t{%1, %0|%0, %1}\";\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case TYPE_MMXMOV:\n       /* Moves from and into integer register is done using movd opcode with\n  \t REX prefix.  */\n@@ -2005,7 +2005,7 @@\n     case TYPE_SSEMOV:\n       if (get_attr_mode (insn) == MODE_TI)\n \t  return \"movdqa\\t{%1, %0|%0, %1}\";\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case TYPE_MMXMOV:\n       return \"movq\\t{%1, %0|%0, %1}\";\n     case TYPE_MULTI:"}, {"sha": "d526098b181907ae46a293e6d8b256386421c51f", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -425,7 +425,7 @@ sdata_symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \t  || GET_CODE (XEXP (XEXP (op, 0), 0)) != SYMBOL_REF)\n \tbreak;\n       op = XEXP (XEXP (op, 0), 0);\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case SYMBOL_REF:\n       if (CONSTANT_POOL_ADDRESS_P (op))\n@@ -5299,7 +5299,7 @@ rtx_needs_barrier (rtx x, struct reg_flags flags, int pred)\n \n     case SUBREG:\n       x = SUBREG_REG (x);\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case REG:\n       if (REGNO (x) == AR_UNAT_REGNUM)\n \t{\n@@ -5550,7 +5550,7 @@ group_barrier_needed_p (rtx insn)\n \t  need_barrier = 1;\n \t  break;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case INSN:\n       if (GET_CODE (PATTERN (insn)) == USE"}, {"sha": "ffb4614638cde95c1a24a3044bea6496783b4e5c", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1614,7 +1614,7 @@ unw_access_gr (struct _Unwind_Context *info, int regnum,\n \t\t  *nat = 1;\n \t\t  return;\n \t\t}\n-\t      /* FALLTHRU */\n+\t      /* Fall through.  */\n \n \t    case UNW_NAT_NONE:\n \t      dummy_nat = 0;"}, {"sha": "0490072dcbd4bee2a4e9001596638921522923d3", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -2860,7 +2860,7 @@ iq2000_output_conditional_branch (rtx insn, rtx * operands, int two_operands_p,\n \tchar *c;\n \n \tc = strchr (buffer, '\\0');\n-\t/* Generate the reversed comparision.  This takes four\n+\t/* Generate the reversed comparison.  This takes four\n \t   bytes.  */\n \tif (float_p)\n \t  sprintf (c, \"b%s\\t%%Z2%s\","}, {"sha": "d88067bef30fc9e7e2bf34c392ee8aa80747778a", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1689,7 +1689,7 @@ m32r_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "e03d4764e4603befe1e99fd93ae8faf83629cf7c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1026,7 +1026,7 @@ mips_regno_mode_ok_for_base_p (int regno, enum machine_mode mode, int strict)\n \t   stack pointer (which needs the restriction) or the hard frame\n \t   pointer (which doesn't).\n \n-     All in all, it seems more consitent to only enforce this restriction\n+     All in all, it seems more consistent to only enforce this restriction\n      during and after reload.  */\n   if (TARGET_MIPS16 && regno == STACK_POINTER_REGNUM)\n     return !strict || GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8;"}, {"sha": "e30c433c6410b88e3b527453bb57d945a0596eb5", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -2455,7 +2455,7 @@ mmix_symbolic_or_address_operand (rtx op, enum machine_mode mode)\n \t      || (GET_CODE (XEXP (op, 1)) == CONST_DOUBLE\n \t\t  && GET_MODE (XEXP (op, 1)) == VOIDmode)))\n \treturn 1;\n-      /* FALLTHROUGH */\n+      /* Fall through.  */\n     default:\n       return address_operand (op, mode);\n     }"}, {"sha": "f628f278cf5a6a4d747bb46256eb1a94a93e53b0", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -174,7 +174,7 @@ extern int target_flags;\n    address register) without having to know the specific register or the\n    specific offset.  The setback is that there's a limited number of\n    registers, and you'll not find out until link time whether you\n-   should've compiled with -mno-base-addresses.  */\n+   should have compiled with -mno-base-addresses.  */\n #define TARGET_MASK_BASE_ADDRESSES 128\n \n /* FIXME: Get rid of this one.  */"}, {"sha": "85fa6815434618c0f61db9e9aa5204fab277a220", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -598,7 +598,7 @@ ns32k_address_cost (rtx operand)\n \n     case MULT:\n       cost += 2;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n     case PLUS:\n       cost += ns32k_address_cost (XEXP (operand, 0));\n       cost += ns32k_address_cost (XEXP (operand, 1));"}, {"sha": "f07e1e45d0db44b581bfe8d908e29fefcc6c9abe", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1432,7 +1432,7 @@ hppa_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = COSTS_N_INSNS (14);\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case UDIV:\n     case MOD:"}, {"sha": "10939c5ca70949640eedc7be7cb43b7a6ea771a2", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1084,7 +1084,7 @@ pdp11_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case CONST:\n     case LABEL_REF:"}, {"sha": "14492368178250eac4b974d62ae46d13352d9571", "filename": "gcc/config/rs6000/darwin-ldouble.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -103,7 +103,7 @@ _xlqadd (double a, double b, double c, double d)\n       c = t;\n     }\n \n-  /* Thanks to commutivity, sum is invariant w.r.t. the next\n+  /* Thanks to commutativity, sum is invariant w.r.t. the next\n      conditional exchange. */\n   tau = d + c;\n "}, {"sha": "b0489f6e5a60f7079908dbc743cb87b52da4120d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -8974,7 +8974,7 @@ print_operand (FILE *file, rtx x, int code)\n     case 'Q':\n       if (TARGET_MFCRF)\n \tfputc (',',file);\n-        /* FALLTHRU */\n+        /* Fall through.  */\n       else\n \treturn;\n \n@@ -15581,7 +15581,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n \t  *total = COSTS_N_INSNS (2);\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case UDIV:\n     case UMOD:"}, {"sha": "7b87f59bdbb07bc2e6ec7f84c23273e2d3f284e0", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -1437,7 +1437,7 @@ enum reg_class\n    : (C) == 'Y' ? (word_offset_memref_operand (OP, GET_MODE (OP)))      \\\n    : 0)\n \n-/* Defining, which contraints are memory contraints. Tells reload,\n+/* Define which constraints are memory constraints.  Tell reload\n    that any memory address can be reloaded by copying the \n    memory address into a base register if required.  */\n "}, {"sha": "958cbc20e2d03969c2759250b29b6ea713cc81b9", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -8440,7 +8440,7 @@ sparc_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  *total = 0;\n \t  return true;\n \t}\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case HIGH:\n       *total = 2;"}, {"sha": "47527a4eafc6f2cb068c2205f1882e68aecd25b4", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59b9a953b6338358d0346c91b43095875da7eede/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=59b9a953b6338358d0346c91b43095875da7eede", "patch": "@@ -557,7 +557,7 @@ vax_rtx_costs_1 (register rtx x, enum rtx_code code, enum rtx_code outer_code)\n         return 1;\n       if (outer_code == PLUS && (unsigned HOST_WIDE_INT) -INTVAL (x) <= 077)\n         return 1;\n-      /* FALLTHRU */\n+      /* Fall through.  */\n \n     case CONST:\n     case LABEL_REF:"}]}