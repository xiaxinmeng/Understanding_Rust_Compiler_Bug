{"sha": "04d170d214ae0a801ccfc4f66bf11531d19e75a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkMTcwZDIxNGFlMGE4MDFjY2ZjNGY2NmJmMTE1MzFkMTllNzVhOA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-05-08T12:28:29Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-05-08T12:28:29Z"}, "message": "Makefile.in (TEXI_GCC_FILES): Add avr-mmcu.texi.\n\n\t* Makefile.in (TEXI_GCC_FILES): Add avr-mmcu.texi.\n\t* doc/avr-mmcu.texi: New auto-generated file.\n\t* doc/invoke.texi (AVR Options): Include avr-mmcu.texi in order\n\tto document all valid -mmcu= arguments.\n\t* config/avr/avr.h (arch_info_s): New struct definition.\n\t* config/avr/avr-devices.c (avr_texinfo): New variable.\n\t* config/avr/gen-avr-mmcu-texi.c: New file.\n\t* config/avr/t-avr: New rules and dependencies to build\tavr-mmcu.texi.\n\nFrom-SVN: r187279", "tree": {"sha": "f2bbb3660ff30b54fe18a7c267b668d2d16746a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2bbb3660ff30b54fe18a7c267b668d2d16746a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d170d214ae0a801ccfc4f66bf11531d19e75a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d170d214ae0a801ccfc4f66bf11531d19e75a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d170d214ae0a801ccfc4f66bf11531d19e75a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d170d214ae0a801ccfc4f66bf11531d19e75a8/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c04723a04fc5bbedd779431fede2571561e276f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c04723a04fc5bbedd779431fede2571561e276f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c04723a04fc5bbedd779431fede2571561e276f"}], "stats": {"total": 318, "additions": 235, "deletions": 83}, "files": [{"sha": "a140b83847b61a447e639d68693885bb0c741188", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -1,3 +1,16 @@\n+2012-05-08  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* Makefile.in (TEXI_GCC_FILES): Add avr-mmcu.texi.\n+\n+\t* doc/avr-mmcu.texi: New auto-generated file.\n+\t* doc/invoke.texi (AVR Options): Include avr-mmcu.texi in order\n+\tto document all valid -mmcu= arguments.\n+\n+\t* config/avr/avr.h (arch_info_s): New struct definition.\n+\t* config/avr/avr-devices.c (avr_texinfo): New variable.\n+\t* config/avr/gen-avr-mmcu-texi.c: New file.\n+\t* config/avr/t-avr: New rules and dependencies to build\tavr-mmcu.texi.\n+\n 2012-05-08  Dehao Chen  <dehao@google.com>\n \n \t* predict.c (find_qualified_ssa_name): New"}, {"sha": "792d002dcc496b5c76cfd6979c01aab63ce5bf21", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -4216,7 +4216,7 @@ TEXI_GCC_FILES = gcc.texi gcc-common.texi gcc-vers.texi frontends.texi\t\\\n \t standards.texi invoke.texi extend.texi md.texi objc.texi\t\\\n \t gcov.texi trouble.texi bugreport.texi service.texi\t\t\\\n \t contribute.texi compat.texi funding.texi gnu.texi gpl_v3.texi\t\\\n-\t fdl.texi contrib.texi cppenv.texi cppopts.texi\t\t\t\\\n+\t fdl.texi contrib.texi cppenv.texi cppopts.texi avr-mmcu.texi\t\\\n \t implement-c.texi implement-cxx.texi arm-neon-intrinsics.texi\n \n # we explicitly use $(srcdir)/doc/tm.texi here to avoid confusion with"}, {"sha": "47cfefd861298739516ac5dbce8f4b3132ed4dad", "filename": "gcc/config/avr/avr-devices.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -55,6 +55,51 @@ avr_arch_types[] =\n   { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0x2000,  0, \"107\", \"avrxmega7\" }\n };\n \n+const struct arch_info_s\n+avr_texinfo[] =\n+{\n+  { ARCH_AVR1,\n+    \"This ISA is implemented by the minimal AVR core and supported \"\n+    \"for assembler only.\" },\n+  { ARCH_AVR2,\n+    \"``Classic'' devices with up to 8@tie{}KiB of program memory.\" },\n+  { ARCH_AVR25,\n+    \"``Classic'' devices with up to 8@tie{}KiB of program memory and with \"\n+    \"the @code{MOVW} instruction.\" },\n+  { ARCH_AVR3,\n+    \"``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of \"\n+    \" program memory.\" },\n+  { ARCH_AVR31,\n+    \"``Classic'' devices with 128@tie{}KiB of program memory.\" },\n+  { ARCH_AVR35,\n+    \"``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of \"\n+    \"program memory and with the @code{MOVW} instruction.\" },\n+  { ARCH_AVR4,\n+    \"``Enhanced'' devices with up to 8@tie{}KiB of program memory.\" },\n+  { ARCH_AVR5,\n+    \"``Enhanced'' devices with 16@tie{}KiB up to 64@tie{}KiB of \"\n+    \"program memory.\" },\n+  { ARCH_AVR51,\n+    \"``Enhanced'' devices with 128@tie{}KiB of program memory.\" },\n+  { ARCH_AVR6,\n+    \"``Enhanced'' devices with 3-byte PC, i.e.@: with more than 128@tie{}KiB \"\n+    \"of program memory.\" },\n+  { ARCH_AVRXMEGA2,\n+    \"``XMEGA'' devices with more than 8@tie{}KiB and up to 64@tie{}KiB \"\n+    \"of program memory.\" },\n+  { ARCH_AVRXMEGA4,\n+    \"``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB \"\n+    \"of program memory.\" },\n+  { ARCH_AVRXMEGA5,\n+    \"``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB \"\n+    \"of program memory and more than 64@tie{}KiB of RAM.\" },\n+  { ARCH_AVRXMEGA6,\n+    \"``XMEGA'' devices with more than 128@tie{}KiB of program memory.\" },\n+  { ARCH_AVRXMEGA7,\n+    \"``XMEGA'' devices with more than 128@tie{}KiB of program memory \"\n+    \"and more than 64@tie{}KiB of RAM.\" }\n+};\n+\n const struct mcu_type_s avr_mcu_types[] = {\n #define AVR_MCU(NAME,ARCH,MACRO,SHORT_SP,ERRATA_SKIP,DATA_SEC,N_FLASH,LIB_NAME)\\\n   { NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, N_FLASH, LIB_NAME },"}, {"sha": "ef98a911b9d3386dd67e161e0f43fe915d6f5083", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -133,6 +133,14 @@ struct mcu_type_s {\n   const char *const library_name; \n };\n \n+struct arch_info_s {\n+  /* Architecture ID.  */\n+  enum avr_arch arch;\n+\n+  /* textinfo source to describe the archtiecture.  */\n+  const char *texinfo;\n+};\n+\n /* Preprocessor macros to define depending on MCU type.  */\n extern const char *avr_extra_arch_macro;\n extern const struct base_arch_s *avr_current_arch;"}, {"sha": "0bbd3a30b71e5a71d1ca9cf1a2244045cc00df3f", "filename": "gcc/config/avr/gen-avr-mmcu-texi.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -0,0 +1,73 @@\n+/* Copyright (C) 2012\n+   Free Software Foundation, Inc.\n+   Contributed by Georg-Johann Lay (avr@gjlay.de)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+   \n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"avr-devices.c\"\n+\n+int main (void)\n+{\n+  enum avr_arch arch = 0;\n+  unsigned i, first = 1;\n+  const struct mcu_type_s *mcu;\n+\n+  printf (\"@c Copyright (C) 2012 Free Software Foundation, Inc.\\n\");\n+  printf (\"@c This is part of the GCC manual.\\n\");\n+  printf (\"@c For copying conditions, see the file \"\n+          \"gcc/doc/include/fdl.texi.\\n\\n\");\n+\n+  printf (\"@c This file is generated automatically using\\n\");\n+  printf (\"@c gcc/config/avr/gen-avr-mmcu-texi.c from:\\n\");\n+  printf (\"@c    gcc/config/avr/avr-devices.c\\n\");\n+  printf (\"@c    gcc/config/avr/avr-mcus.def\\n\\n\");\n+\n+  printf (\"@c Please do not edit manually.\\n\\n\");\n+\n+  printf (\"@table @code\\n\\n\");\n+\n+  for (mcu = avr_mcu_types; mcu->name; mcu++)\n+    {\n+      if (mcu->macro == NULL)\n+        {\n+          arch = mcu->arch;\n+\n+          for (i = 0; i < sizeof (avr_texinfo) / sizeof (*avr_texinfo); i++)\n+            {\n+              if (arch == avr_texinfo[i].arch)\n+                {\n+                  if (mcu != avr_mcu_types)\n+                    printf (\".\\n\\n\");\n+                  printf (\"@item %s\\n%s\\n\", mcu->name, avr_texinfo[i].texinfo);\n+                  printf (\"@*@var{mcu}@tie{}=\");\n+                  first = 1;\n+                  break;\n+                }\n+            }\n+        }\n+      else if (arch == (enum avr_arch) mcu->arch)\n+        {\n+          printf (\"%s @code{%s}\", first ? \"\" : \",\", mcu->name);\n+          first = 0;\n+        }\n+    }\n+\n+  printf (\".\\n\\n\");\n+  printf (\"@end table\\n\");\n+\n+  return EXIT_SUCCESS;\n+}"}, {"sha": "24cdd92590af53e889e19eae7dc9b41fa37740d0", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -43,6 +43,26 @@ AVR_MCUS = $(srcdir)/config/avr/avr-mcus.def\n $(srcdir)/config/avr/avr-tables.opt: $(srcdir)/config/avr/genopt.sh $(AVR_MCUS)\n \t$(SHELL) $< $(AVR_MCUS) > $@\n \n+gen-avr-mmcu-texi$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-texi.c \\\n+  $(TM_H) $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.c\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< -o $@\n+\n+avr-devices.o: s-avr-mmcu-texi\n+\n+s-avr-mmcu-texi: gen-avr-mmcu-texi$(build_exeext)\n+\t$(RUN_GEN) $< | sed -e 's:\\r::g' > avr-mmcu.texi\n+\t@if cmp -s $(srcdir)/doc/avr-mmcu.texi avr-mmcu.texi; then \\\n+\t  $(STAMP) $@;\t\t\\\n+\telse\t\t\t\\\n+\t  echo >&2 ;\t\t\\\n+\t  echo \"***\" >&2 ;\t\\\n+\t  echo \"*** Verify that you have permission to grant a\" >&2 ;\t\\\n+\t  echo \"*** GFDL license for all new text in\" >&2 ; \t\t\\\n+\t  echo \"*** avr-mmcu.texi, then copy it to $(srcdir)/doc/avr-mmcu.texi\" >&2 ; \\\n+\t  echo \"***\" >&2 ;\t\\\n+\t  false; \t\t\\\n+\tfi\n+\n # MULTILIB_OPTIONS\n # MULTILIB_DIRNAMES\n # MULTILIB_EXCEPTIONS"}, {"sha": "ee5f2fa34a2f52eab01fd74dfdc8610b3fac5dbe", "filename": "gcc/doc/avr-mmcu.texi", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fdoc%2Favr-mmcu.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fdoc%2Favr-mmcu.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Favr-mmcu.texi?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -0,0 +1,74 @@\n+@c Copyright (C) 2012 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc/doc/include/fdl.texi.\n+\n+@c This file is generated automatically using\n+@c gcc/config/avr/gen-avr-mmcu-texi.c from:\n+@c    gcc/config/avr/avr-devices.c\n+@c    gcc/config/avr/avr-mcus.def\n+\n+@c Please do not edit manually.\n+\n+@table @code\n+\n+@item avr2\n+``Classic'' devices with up to 8@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{at90s2313}, @code{at90s2323}, @code{at90s2333}, @code{at90s2343}, @code{attiny22}, @code{attiny26}, @code{at90s4414}, @code{at90s4433}, @code{at90s4434}, @code{at90s8515}, @code{at90c8534}, @code{at90s8535}.\n+\n+@item avr25\n+``Classic'' devices with up to 8@tie{}KiB of program memory and with the @code{MOVW} instruction.\n+@*@var{mcu}@tie{}= @code{ata6289}, @code{attiny13}, @code{attiny13a}, @code{attiny2313}, @code{attiny2313a}, @code{attiny24}, @code{attiny24a}, @code{attiny4313}, @code{attiny44}, @code{attiny44a}, @code{attiny84}, @code{attiny84a}, @code{attiny25}, @code{attiny45}, @code{attiny85}, @code{attiny261}, @code{attiny261a}, @code{attiny461}, @code{attiny461a}, @code{attiny861}, @code{attiny861a}, @code{attiny43u}, @code{attiny87}, @code{attiny48}, @code{attiny88}, @code{at86rf401}.\n+\n+@item avr3\n+``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of  program memory.\n+@*@var{mcu}@tie{}= @code{at43usb355}, @code{at76c711}.\n+\n+@item avr31\n+``Classic'' devices with 128@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atmega103}, @code{at43usb320}.\n+\n+@item avr35\n+``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory and with the @code{MOVW} instruction.\n+@*@var{mcu}@tie{}= @code{at90usb82}, @code{at90usb162}, @code{atmega8u2}, @code{atmega16u2}, @code{atmega32u2}, @code{attiny167}.\n+\n+@item avr4\n+``Enhanced'' devices with up to 8@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atmega8}, @code{atmega48}, @code{atmega48a}, @code{atmega48p}, @code{atmega88}, @code{atmega88a}, @code{atmega88p}, @code{atmega88pa}, @code{atmega8515}, @code{atmega8535}, @code{atmega8hva}, @code{at90pwm1}, @code{at90pwm2}, @code{at90pwm2b}, @code{at90pwm3}, @code{at90pwm3b}, @code{at90pwm81}.\n+\n+@item avr5\n+``Enhanced'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atmega16}, @code{atmega16a}, @code{atmega161}, @code{atmega162}, @code{atmega163}, @code{atmega164a}, @code{atmega164p}, @code{atmega165}, @code{atmega165a}, @code{atmega165p}, @code{atmega168}, @code{atmega168a}, @code{atmega168p}, @code{atmega169}, @code{atmega169a}, @code{atmega169p}, @code{atmega169pa}, @code{atmega32}, @code{atmega323}, @code{atmega324a}, @code{atmega324p}, @code{atmega324pa}, @code{atmega325}, @code{atmega325a}, @code{atmega325p}, @code{atmega3250}, @code{atmega3250a}, @code{atmega3250p}, @code{atmega328}, @code{atmega328p}, @code{atmega329}, @code{atmega329a}, @code{atmega329p}, @code{atmega329pa}, @code{atmega3290}, @code{atmega3290a}, @code{atmega3290p}, @code{atmega406}, @code{atmega64}, @code{atmega640}, @code{atmega644}, @code{atmega644a}, @code{atmega644p}, @code{atmega644pa}, @code{atmega645}, @code{atmega645a}, @code{atmega645p}, @code{atmega6450}, @code{atmega6450a}, @code{atmega6450p}, @code{atmega649}, @code{atmega649a}, @code{atmega649p}, @code{atmega6490}, @code{atmega16hva}, @code{atmega16hva2}, @code{atmega16hvb}, @code{atmega32hvb}, @code{atmega64hve}, @code{at90can32}, @code{at90can64}, @code{at90pwm216}, @code{at90pwm316}, @code{atmega32c1}, @code{atmega64c1}, @code{atmega16m1}, @code{atmega32m1}, @code{atmega64m1}, @code{atmega16u4}, @code{atmega32u4}, @code{atmega32u6}, @code{at90scr100}, @code{at90usb646}, @code{at90usb647}, @code{at94k}, @code{m3000}.\n+\n+@item avr51\n+``Enhanced'' devices with 128@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atmega128}, @code{atmega1280}, @code{atmega1281}, @code{atmega1284p}, @code{atmega128rfa1}, @code{at90can128}, @code{at90usb1286}, @code{at90usb1287}.\n+\n+@item avr6\n+``Enhanced'' devices with 3-byte PC, i.e.@: with more than 128@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atmega2560}, @code{atmega2561}.\n+\n+@item avrxmega2\n+``XMEGA'' devices with more than 8@tie{}KiB and up to 64@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atxmega16a4}, @code{atxmega16d4}, @code{atxmega16x1}, @code{atxmega32a4}, @code{atxmega32d4}, @code{atxmega32x1}.\n+\n+@item avrxmega4\n+``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atxmega64a3}, @code{atxmega64d3}.\n+\n+@item avrxmega5\n+``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB of program memory and more than 64@tie{}KiB of RAM.\n+@*@var{mcu}@tie{}= @code{atxmega64a1}, @code{atxmega64a1u}.\n+\n+@item avrxmega6\n+``XMEGA'' devices with more than 128@tie{}KiB of program memory.\n+@*@var{mcu}@tie{}= @code{atxmega128a3}, @code{atxmega128d3}, @code{atxmega192a3}, @code{atxmega192d3}, @code{atxmega256a3}, @code{atxmega256a3b}, @code{atxmega256a3bu}, @code{atxmega256d3}.\n+\n+@item avrxmega7\n+``XMEGA'' devices with more than 128@tie{}KiB of program memory and more than 64@tie{}KiB of RAM.\n+@*@var{mcu}@tie{}= @code{atxmega128a1}, @code{atxmega128a1u}.\n+\n+@item avr1\n+This ISA is implemented by the minimal AVR core and supported for assembler only.\n+@*@var{mcu}@tie{}= @code{at90s1200}, @code{attiny11}, @code{attiny12}, @code{attiny15}, @code{attiny28}.\n+\n+@end table"}, {"sha": "0b9164ec55920d8e4ac5c00effa772174a20d5d4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 82, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d170d214ae0a801ccfc4f66bf11531d19e75a8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=04d170d214ae0a801ccfc4f66bf11531d19e75a8", "patch": "@@ -11039,88 +11039,7 @@ The default for this option is@tie{}@code{avr2}.\n \n GCC supports the following AVR devices and ISAs:\n \n-@table @code\n-\n-@item avr1\n-This ISA is implemented by the minimal AVR core and supported\n-for assembler only.\n-@*@var{mcu}@tie{}= @code{at90s1200},\n-@code{attiny10}, @code{attiny11}, @code{attiny12}, @code{attiny15},\n-@code{attiny28}.\n-\n-@item avr2\n-``Classic'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at90s2313}, @code{attiny26}, @code{at90c8534},\n-@dots{}\n-\n-@item avr25\n-``Classic'' devices with up to 8@tie{}KiB of program memory and with\n-the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{attiny2313}, @code{attiny261}, @code{attiny24},\n-@dots{}\n-\n-@item avr3\n-``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at43usb355}, @code{at76c711}.\n-\n-@item avr31\n-``Classic'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega103}, @code{at43usb320}.\n-\n-@item avr35\n-``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of program\n-memory and with the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{at90usb162}, @code{atmega8u2},\n-@code{attiny167}, @dots{}\n-\n-@item avr4\n-``Enhanced'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega8}, @code{atmega88}, @code{at90pwm81},\n-@dots{}\n-\n-@item avr5\n-``Enhanced'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega16}, @code{atmega6490}, @code{at90can64},\n-@dots{}\n-\n-@item avr51\n-``Enhanced'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega128}, @code{at90can128}, @code{at90usb1287},\n-@dots{}\n-\n-@item avr6\n-``Enhanced'' devices with 3-byte PC, i.e.@: with at least 256@tie{}KiB\n-of program memory.\n-@*@var{mcu}@tie{}= @code{atmega2560}, @code{atmega2561}.\n-\n-@item avrxmega2\n-``XMEGA'' devices with more than 8@tie{}KiB and up to 64@tie{}KiB\n-of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega16a4}, @code{atxmega16d4},\n-@dots{}\n-\n-@item avrxmega4\n-``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB\n-of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega64a3}, @code{atxmega64d3}.\n-\n-@item avrxmega5\n-``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB\n-of program memory and more than 64@tie{}KiB of RAM.\n-@*@var{mcu}@tie{}= @code{atxmega64a1}, @code{atxmega64a1u}.\n-\n-@item avrxmega6\n-``XMEGA'' devices with more than 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega128a3}, @code{atxmega192d3},\n-@dots{}\n-\n-@item avrxmega7\n-``XMEGA'' devices with more than 128@tie{}KiB of program memory and\n-more than 64@tie{}KiB of RAM.\n-@*@var{mcu}@tie{}= @code{atxmega128a1}, @code{atxmega128a1u}.\n-\n-@end table\n-\n+@include avr-mmcu.texi\n \n @item -maccumulate-args\n @opindex maccumulate-args"}]}