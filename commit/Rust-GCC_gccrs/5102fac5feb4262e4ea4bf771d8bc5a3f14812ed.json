{"sha": "5102fac5feb4262e4ea4bf771d8bc5a3f14812ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEwMmZhYzVmZWI0MjYyZTRlYTRiZjc3MWQ4YmM1YTNmMTQ4MTJlZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-11-23T11:11:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-11-23T11:11:04Z"}, "message": "decl.c (ceil_alignment): New function.\n\n\t* decl.c (ceil_alignment): New function.\n\t(gnat_to_gnu_entity): Use it to set the alignment on atomic types.\n\t(make_packable_type): Likewise.\n\nFrom-SVN: r130373", "tree": {"sha": "6fe9b17c7454584b3d6e48dd0f922cde410bfd9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fe9b17c7454584b3d6e48dd0f922cde410bfd9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed/comments", "author": null, "committer": null, "parents": [{"sha": "96d9bb07adf360fd685c102467798ba47de254a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d9bb07adf360fd685c102467798ba47de254a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d9bb07adf360fd685c102467798ba47de254a4"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "79ce81c7750df25f974cc827b6f350b15a056439", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5102fac5feb4262e4ea4bf771d8bc5a3f14812ed", "patch": "@@ -1,3 +1,9 @@\n+2007-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (ceil_alignment): New function.\n+\t(gnat_to_gnu_entity): Use it to set the alignment on atomic types.\n+\t(make_packable_type): Likewise.\n+\n 2007-11-22  Olivier Hainque  <hainque@adacore.com>\n \n \t* trans.c (gnat_to_gnu) <case N_Free_Statement>: Reformat lines"}, {"sha": "20b65d29695f76feb4bc0fbe11b49068498d6307", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5102fac5feb4262e4ea4bf771d8bc5a3f14812ed/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=5102fac5feb4262e4ea4bf771d8bc5a3f14812ed", "patch": "@@ -113,6 +113,7 @@ static tree validate_size (Uint, tree, Entity_Id, enum tree_code, bool, bool);\n static void set_rm_size (Uint, tree, Entity_Id);\n static tree make_type_from_size (tree, tree, bool);\n static unsigned int validate_alignment (Uint, Entity_Id, unsigned int);\n+static unsigned int ceil_alignment (unsigned HOST_WIDE_INT);\n static void check_ok_for_atomic (tree, Entity_Id, bool);\n static int  compatible_signatures_p (tree ftype1, tree ftype2);\n \n@@ -645,9 +646,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t/* If this is an atomic object with no specified size and alignment,\n \t   but where the size of the type is a constant, set the alignment to\n-\t   the lowest power of two greater than the size, or to the\n-\t   biggest meaningful alignment, whichever is smaller.  */\n-\n+\t   the smallest not less than the size, or to the biggest meaningful\n+\t   alignment, whichever is smaller.  */\n \tif (Is_Atomic (gnat_entity) && !gnu_size && align == 0\n \t    && TREE_CODE (TYPE_SIZE (gnu_type)) == INTEGER_CST)\n \t  {\n@@ -656,10 +656,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t\t  BIGGEST_ALIGNMENT))\n \t      align = BIGGEST_ALIGNMENT;\n \t    else\n-\t      align = ((unsigned int) 1\n-\t\t       << (floor_log2 (tree_low_cst\n-\t\t\t\t       (TYPE_SIZE (gnu_type), 1) - 1)\n-\t\t\t   + 1));\n+\t      align = ceil_alignment (tree_low_cst (TYPE_SIZE (gnu_type), 1));\n \t  }\n \n \t/* If the object is set to have atomic components, find the component\n@@ -734,7 +731,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t     || (Is_Exported (gnat_entity)\n \t\t /* Exclude exported constants created by the compiler,\n \t\t    which should boil down to static dispatch tables and\n-\t\t    make it possible to put them in read-only memory. \ufffd*/\n+\t\t    make it possible to put them in read-only memory.  */\n \t\t && (Comes_From_Source (gnat_entity) || !const_flag))\n \t     || Is_Imported (gnat_entity)\n \t     || Present (Address_Clause (gnat_entity)))\n@@ -2468,8 +2465,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    = validate_alignment (Alignment (gnat_entity), gnat_entity, 0);\n \telse if (Is_Atomic (gnat_entity))\n \t  TYPE_ALIGN (gnu_type)\n-\t    = (esize >= BITS_PER_WORD ? BITS_PER_WORD\n-\t       : 1 << (floor_log2 (esize - 1) + 1));\n+\t    = esize >= BITS_PER_WORD ? BITS_PER_WORD : ceil_alignment (esize);\n \telse\n \t  TYPE_ALIGN (gnu_type) = 0;\n \n@@ -5208,9 +5204,7 @@ make_packable_type (tree type)\n       TYPE_SIZE_UNIT (new_type) = TYPE_SIZE_UNIT (type);\n     }\n \n-  TYPE_ALIGN (new_type)\n-    = ((HOST_WIDE_INT) 1\n-       << (floor_log2 (tree_low_cst (TYPE_SIZE (type), 1) - 1) + 1));\n+  TYPE_ALIGN (new_type) = ceil_alignment (tree_low_cst (TYPE_SIZE (type), 1));\n   TYPE_USER_ALIGN (new_type) = 1;\n \n   /* Now copy the fields, keeping the position and size.  */\n@@ -6783,6 +6777,14 @@ validate_alignment (Uint alignment, Entity_Id gnat_entity, unsigned int align)\n \n   return align;\n }\n+\n+/* Return the smallest alignment not less than SIZE.  */\n+\n+static unsigned int\n+ceil_alignment (unsigned HOST_WIDE_INT size)\n+{\n+  return (unsigned int) 1 << (floor_log2 (size - 1) + 1);\n+}\n \f\n /* Verify that OBJECT, a type or decl, is something we can implement\n    atomically.  If not, give an error for GNAT_ENTITY.  COMP_P is true"}]}