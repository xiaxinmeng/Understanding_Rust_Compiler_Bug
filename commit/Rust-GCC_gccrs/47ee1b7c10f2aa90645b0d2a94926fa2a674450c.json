{"sha": "47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlZTFiN2MxMGYyYWE5MDY0NWIwZDJhOTQ5MjZmYTJhNjc0NDUwYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-08-10T00:18:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-08-10T00:18:19Z"}, "message": "jit: add gcc_jit_type_get_vector\n\ngcc/jit/ChangeLog:\n\t* docs/cp/topics/types.rst (Vector types): New section.\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_8): New tag.\n\t* docs/topics/types.rst (gcc_jit_context_get_type): Fix typo in\n\texample.\n\t(Vector types): New section.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-playback.c (gcc::jit::playback::type::get_vector): New\n\tmethod.\n\t* jit-playback.h (gcc::jit::playback::type::get_vector): New\n\tmethod.\n\t* jit-recording.c: In namespace gcc::jit::recording::\n\t(type::get_vector): New method.\n\t(memento_of_get_aligned::write_reproducer): Fix typo\n\tin leading comment.\n\t(memento_of_get_vector::replay_into): New method.\n\t(memento_of_get_vector::make_debug_string): New method.\n\t(memento_of_get_vector::write_reproducer): New method.\n\t* jit-recording.h: In namespace gcc::jit::recording::\n\t(type::get_vector): New\n\t method.\n\t(class memento_of_get_vector): New class.\n\t* libgccjit++.h (gccjit::type::get_vector): New method.\n\t* libgccjit.c (gcc_jit_type_get_vector): New public entrypoint.\n\t* libgccjit.h (LIBGCCJIT_HAVE_gcc_jit_type_get_vector): New\n\tdefine.\n\t(gcc_jit_type_get_vector): New decl.\n\t* libgccjit.map (LIBGCCJIT_ABI_8): New ABI tag.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/all-non-failing-tests.h: Add note about\n\ttest-vector-types.cc.\n\t* jit.dg/test-error-gcc_jit_type_get_vector-bad-type.c: New test\n\tcase.\n\t* jit.dg/test-error-gcc_jit_type_get_vector-non-power-of-two.c:\n\tNew test case.\n\t* jit.dg/test-vector-types.cc: New test case.\n\nFrom-SVN: r251018", "tree": {"sha": "61c3ae03baedd98e46435b7e189fd5de3f11229f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c3ae03baedd98e46435b7e189fd5de3f11229f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b240c0e02e292549e21f115d428d12cc34f3e971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b240c0e02e292549e21f115d428d12cc34f3e971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b240c0e02e292549e21f115d428d12cc34f3e971"}], "stats": {"total": 1511, "additions": 1047, "deletions": 464}, "files": [{"sha": "66e34b6f10ccddc2b73b2ed14b184c709092edda", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -1,3 +1,33 @@\n+2017-08-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/cp/topics/types.rst (Vector types): New section.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_8): New tag.\n+\t* docs/topics/types.rst (gcc_jit_context_get_type): Fix typo in\n+\texample.\n+\t(Vector types): New section.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-playback.c (gcc::jit::playback::type::get_vector): New\n+\tmethod.\n+\t* jit-playback.h (gcc::jit::playback::type::get_vector): New\n+\tmethod.\n+\t* jit-recording.c: In namespace gcc::jit::recording::\n+\t(type::get_vector): New method.\n+\t(memento_of_get_aligned::write_reproducer): Fix typo\n+\tin leading comment.\n+\t(memento_of_get_vector::replay_into): New method.\n+\t(memento_of_get_vector::make_debug_string): New method.\n+\t(memento_of_get_vector::write_reproducer): New method.\n+\t* jit-recording.h: In namespace gcc::jit::recording::\n+\t(type::get_vector): New\n+\t method.\n+\t(class memento_of_get_vector): New class.\n+\t* libgccjit++.h (gccjit::type::get_vector): New method.\n+\t* libgccjit.c (gcc_jit_type_get_vector): New public entrypoint.\n+\t* libgccjit.h (LIBGCCJIT_HAVE_gcc_jit_type_get_vector): New\n+\tdefine.\n+\t(gcc_jit_type_get_vector): New decl.\n+\t* libgccjit.map (LIBGCCJIT_ABI_8): New ABI tag.\n+\n 2017-07-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7e9a7d547077017604dc513d7718160e9f5a5f59", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 551, "deletions": 460, "changes": 1011, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c"}, {"sha": "1df896e5c28869edb62e2b88235c4ec24eea7b6a", "filename": "gcc/jit/docs/cp/topics/types.rst", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ftypes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ftypes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ftypes.rst?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -109,6 +109,20 @@ Pointers, `const`, and `volatile`\n    Param \"loc\" is optional.\n \n \n+Vector types\n+------------\n+\n+.. function::  gccjit::type gccjit::type::get_vector (size_t num_units)\n+\n+   Given type \"T\", get type:\n+\n+   .. code-block:: c\n+\n+      T  __attribute__ ((vector_size (sizeof(T) * num_units))\n+\n+   T must be integral or floating point; num_units must be a power of two.\n+\n+\n Structures and unions\n ---------------------\n "}, {"sha": "1d5fbc2e5549c91dc52ca66cf54471c26b92996e", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -149,3 +149,10 @@ entrypoints:\n -------------------\n ``LIBGCCJIT_ABI_7`` covers the addition of\n :func:`gcc_jit_type_get_aligned`\n+\n+.. _LIBGCCJIT_ABI_8:\n+\n+``LIBGCCJIT_ABI_8``\n+-------------------\n+``LIBGCCJIT_ABI_8`` covers the addition of\n+:func:`gcc_jit_type_get_vector`"}, {"sha": "c279222964be4a5123027d931ab4b7986d4d16e4", "filename": "gcc/jit/docs/topics/types.rst", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -35,7 +35,7 @@ Types can be created in several ways:\n \n   .. code-block:: c\n \n-      gcc_jit_type *int_type = gcc_jit_context_get_type (GCC_JIT_TYPE_INT);\n+      gcc_jit_type *int_type = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n \n   See :func:`gcc_jit_context_get_type` for the available types.\n \n@@ -136,6 +136,47 @@ Pointers, `const`, and `volatile`\n \n       #ifdef LIBGCCJIT_HAVE_gcc_jit_type_get_aligned\n \n+Vector types\n+------------\n+\n+.. function::  gcc_jit_type *\\\n+               gcc_jit_type_get_vector (gcc_jit_type *type, \\\n+                                        size_t num_units)\n+\n+   Given type \"T\", get type:\n+\n+   .. code-block:: c\n+\n+      T  __attribute__ ((vector_size (sizeof(T) * num_units))\n+\n+   T must be integral or floating point; num_units must be a power of two.\n+\n+   This can be used to construct a vector type in which operations\n+   are applied element-wise.  The compiler will automatically\n+   use SIMD instructions where possible.  See:\n+   https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html\n+\n+   For example, assuming 4-byte ``ints``, then:\n+\n+   .. code-block:: c\n+\n+      typedef int v4si __attribute__ ((vector_size (16)));\n+\n+   can be obtained using:\n+\n+   .. code-block:: c\n+\n+      gcc_jit_type *int_type = gcc_jit_context_get_type (ctxt,\n+                                                         GCC_JIT_TYPE_INT);\n+      gcc_jit_type *v4si_type = gcc_jit_type_get_vector (int_type, 4);\n+\n+   This API entrypoint was added in :ref:`LIBGCCJIT_ABI_8`; you can test\n+   for its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_type_get_vector\n+\n \n Structures and unions\n ---------------------"}, {"sha": "19b6fe25299d1d3980ff80df4a9350aceea5a764", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -1110,6 +1110,17 @@ get_aligned (size_t alignment_in_bytes) const\n   return new type (t_new_type);\n }\n \n+/* Construct a playback::type instance (wrapping a tree)\n+   for the given vector type.  */\n+\n+playback::type *\n+playback::type::\n+get_vector (size_t num_units) const\n+{\n+  tree t_new_type = build_vector_type (m_inner, num_units);\n+  return new type (t_new_type);\n+}\n+\n /* Construct a playback::lvalue instance (wrapping a tree) for a\n    field access.  */\n "}, {"sha": "7dc7315330c42fe1988465e736b019d64320d16c", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -392,6 +392,7 @@ class type : public wrapper\n   }\n \n   type *get_aligned (size_t alignment_in_bytes) const;\n+  type *get_vector (size_t num_units) const;\n \n private:\n   tree m_inner;"}, {"sha": "ea4ebb124959c916fbb7553a7b138ed4a1e13994", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -1988,6 +1988,20 @@ recording::type::get_aligned (size_t alignment_in_bytes)\n   return result;\n }\n \n+/* Given a type, get a vector version of the type.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_type_get_vector.  */\n+\n+recording::type *\n+recording::type::get_vector (size_t num_units)\n+{\n+  recording::type *result\n+    = new memento_of_get_vector (this, num_units);\n+  m_ctxt->record (result);\n+  return result;\n+}\n+\n const char *\n recording::type::access_as_type (reproducer &r)\n {\n@@ -2457,7 +2471,7 @@ recording::memento_of_get_aligned::make_debug_string ()\n \t\t\t      m_alignment_in_bytes);\n }\n \n-/* Implementation of recording::memento::write_reproducer for volatile\n+/* Implementation of recording::memento::write_reproducer for aligned\n    types. */\n \n void\n@@ -2471,6 +2485,46 @@ recording::memento_of_get_aligned::write_reproducer (reproducer &r)\n \t   m_alignment_in_bytes);\n }\n \n+/* The implementation of class gcc::jit::recording::memento_of_get_vector.  */\n+\n+/* Implementation of pure virtual hook recording::memento::replay_into\n+   for recording::memento_of_get_vector.  */\n+\n+void\n+recording::memento_of_get_vector::replay_into (replayer *)\n+{\n+  set_playback_obj\n+    (m_other_type->playback_type ()->get_vector (m_num_units));\n+}\n+\n+/* Implementation of recording::memento::make_debug_string for\n+   results of get_vector.  */\n+\n+recording::string *\n+recording::memento_of_get_vector::make_debug_string ()\n+{\n+  return string::from_printf\n+    (m_ctxt,\n+     \"%s  __attribute__((vector_size(sizeof (%s) * %zi)))\",\n+     m_other_type->get_debug_string (),\n+     m_other_type->get_debug_string (),\n+     m_num_units);\n+}\n+\n+/* Implementation of recording::memento::write_reproducer for volatile\n+   types. */\n+\n+void\n+recording::memento_of_get_vector::write_reproducer (reproducer &r)\n+{\n+  const char *id = r.make_identifier (this, \"type\");\n+  r.write (\"  gcc_jit_type *%s =\\n\"\n+\t   \"    gcc_jit_type_get_vector (%s, %zi);\\n\",\n+\t   id,\n+\t   r.get_identifier_as_type (m_other_type),\n+\t   m_num_units);\n+}\n+\n /* The implementation of class gcc::jit::recording::array_type */\n \n /* Implementation of pure virtual hook recording::type::dereference for"}, {"sha": "248765d4b812f2e67b03fdff2303e7df64f32967", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -474,6 +474,7 @@ class type : public memento\n   type *get_const ();\n   type *get_volatile ();\n   type *get_aligned (size_t alignment_in_bytes);\n+  type *get_vector (size_t num_units);\n \n   /* Get the type obtained when dereferencing this type.\n \n@@ -600,8 +601,8 @@ class memento_of_get_pointer : public type\n   type *m_other_type;\n };\n \n-/* A decorated version of a type, for get_const, get_volatile and\n-   get_aligned.  */\n+/* A decorated version of a type, for get_const, get_volatile,\n+   get_aligned, and get_vector.  */\n \n class decorated_type : public type\n {\n@@ -683,6 +684,27 @@ class memento_of_get_aligned : public decorated_type\n   size_t m_alignment_in_bytes;\n };\n \n+/* Result of \"gcc_jit_type_get_vector\".  */\n+class memento_of_get_vector : public decorated_type\n+{\n+public:\n+  memento_of_get_vector (type *other_type, size_t num_units)\n+  : decorated_type (other_type),\n+    m_num_units (num_units) {}\n+\n+  /* Strip off the alignment, giving the underlying type.  */\n+  type *unqualified () FINAL OVERRIDE { return m_other_type; }\n+\n+  void replay_into (replayer *) FINAL OVERRIDE;\n+\n+private:\n+  string * make_debug_string () FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+\n+private:\n+  size_t m_num_units;\n+};\n+\n class array_type : public type\n {\n  public:"}, {"sha": "a83ccf6fb2997776adefb4a510ff95efe07f249e", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -333,6 +333,7 @@ namespace gccjit\n     type get_const ();\n     type get_volatile ();\n     type get_aligned (size_t alignment_in_bytes);\n+    type get_vector (size_t num_units);\n \n     // Shortcuts for getting values of numeric types:\n     rvalue zero ();\n@@ -1306,6 +1307,13 @@ type::get_aligned (size_t alignment_in_bytes)\n \t\t\t\t\t alignment_in_bytes));\n }\n \n+inline type\n+type::get_vector (size_t num_units)\n+{\n+  return type (gcc_jit_type_get_vector (get_inner_type (),\n+\t\t\t\t\tnum_units));\n+}\n+\n inline rvalue\n type::zero ()\n {"}, {"sha": "6e352c6131df3a5b140902623b23cde06178b6b9", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -2994,3 +2994,31 @@ gcc_jit_type_get_aligned (gcc_jit_type *type,\n \n   return (gcc_jit_type *)type->get_aligned (alignment_in_bytes);\n }\n+\n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::type::get_vector method, in\n+   jit-recording.c.  */\n+\n+gcc_jit_type *\n+gcc_jit_type_get_vector (gcc_jit_type *type, size_t num_units)\n+{\n+  RETURN_NULL_IF_FAIL (type, NULL, NULL, \"NULL type\");\n+\n+  gcc::jit::recording::context *ctxt = type->m_ctxt;\n+\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+\n+  RETURN_NULL_IF_FAIL_PRINTF1\n+    (type->is_int () || type->is_float (), ctxt, NULL,\n+     \"type is not integral or floating point: %s\",\n+     type->get_debug_string ());\n+\n+  RETURN_NULL_IF_FAIL_PRINTF1\n+    (pow2_or_zerop (num_units), ctxt, NULL,\n+     \"num_units not a power of two: %zi\",\n+     num_units);\n+\n+  return (gcc_jit_type *)type->get_vector (num_units);\n+}"}, {"sha": "b863b07e9595f39f33f2bbf292001bab1a099b31", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -1403,6 +1403,21 @@ extern gcc_jit_type *\n gcc_jit_type_get_aligned (gcc_jit_type *type,\n \t\t\t  size_t alignment_in_bytes);\n \n+#define LIBGCCJIT_HAVE_gcc_jit_type_get_vector\n+\n+/* Given type \"T\", get type:\n+\n+     T  __attribute__ ((vector_size (sizeof(T) * num_units))\n+\n+   T must be integral/floating point; num_units must be a power of two.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_8; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_type_get_vector\n+*/\n+extern gcc_jit_type *\n+gcc_jit_type_get_vector (gcc_jit_type *type, size_t num_units);\n+\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "08760e3cdfba7c82ca7fc52c4b4d260220d8ce43", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -155,3 +155,8 @@ LIBGCCJIT_ABI_7 {\n   global:\n     gcc_jit_type_get_aligned;\n } LIBGCCJIT_ABI_6;\n+\n+LIBGCCJIT_ABI_8 {\n+  global:\n+    gcc_jit_type_get_vector;\n+} LIBGCCJIT_ABI_7;"}, {"sha": "6eac250b97dd37de5fbe3a211ced7862b1bf10a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -1,3 +1,13 @@\n+2017-08-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/all-non-failing-tests.h: Add note about\n+\ttest-vector-types.cc.\n+\t* jit.dg/test-error-gcc_jit_type_get_vector-bad-type.c: New test\n+\tcase.\n+\t* jit.dg/test-error-gcc_jit_type_get_vector-non-power-of-two.c:\n+\tNew test case.\n+\t* jit.dg/test-vector-types.cc: New test case.\n+\n 2017-08-09  Andrew Pinski  <apinski@cavium.com>\n \n \t* gcc.target/aarch64/vect-xorsign_exec.c: Add"}, {"sha": "4af704a4ca2ca9b1ebfa042c259c7a6fb8e4ebf0", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -228,6 +228,8 @@\n    of gcc_jit_context_set_bool_allow_unreachable_blocks affects the whole\n    context.  */\n \n+/* test-vector-types.cc: We don't use this, since it's C++.  */\n+\n /* test-volatile.c */\n #define create_code create_code_volatile\n #define verify_code verify_code_volatile"}, {"sha": "59aed337184052b6befc925cc86087de15d2a1b9", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_type_get_vector-bad-type.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_type_get_vector-bad-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_type_get_vector-bad-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_type_get_vector-bad-type.c?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -0,0 +1,30 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+\n+  /* Trigger an API error by passing a bad type.  */\n+  (void)gcc_jit_type_get_vector (void_type, 4);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Ensure that the bad API usage prevents the API giving a bogus\n+     result back.  */\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      (\"gcc_jit_type_get_vector:\"\n+\t\t       \" type is not integral or floating point: void\"));\n+}\n+"}, {"sha": "aa3bdbde50731204be423d5437ea146a11e36f8c", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_type_get_vector-non-power-of-two.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_type_get_vector-non-power-of-two.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_type_get_vector-non-power-of-two.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_type_get_vector-non-power-of-two.c?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -0,0 +1,29 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  /* Trigger an API error by passing a bad number of units.  */\n+  (void)gcc_jit_type_get_vector (int_type, 7);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Ensure that the bad API usage prevents the API giving a bogus\n+     result back.  */\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      (\"gcc_jit_type_get_vector:\"\n+\t\t       \" num_units not a power of two: 7\"));\n+}"}, {"sha": "3389e04a082e70d4edd89fc010c74c76d0bd4d48", "filename": "gcc/testsuite/jit.dg/test-vector-types.cc", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-vector-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ee1b7c10f2aa90645b0d2a94926fa2a674450c/gcc%2Ftestsuite%2Fjit.dg%2Ftest-vector-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-vector-types.cc?ref=47ee1b7c10f2aa90645b0d2a94926fa2a674450c", "patch": "@@ -0,0 +1,185 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+typedef unsigned int v4ui __attribute__ ((vector_size (16)));\n+typedef float v4f __attribute__ ((vector_size (16)));\n+\n+static void\n+create_vec_fn (gcc_jit_context *ctxt, const char *fnname,\n+\t       gcc_jit_type *the_type, enum gcc_jit_binary_op op)\n+{\n+  /* Create equivalent to:\n+\n+       static void\n+       FNNAME (const T *a, const T *b, T *c)\n+       {\n+         *c = *a OP *b;\n+       }\n+\n+     where T is \"the_type\" (e.g. v4si).  */\n+\n+  gcc_jit_type *ptr_type = gcc_jit_type_get_pointer (the_type);\n+\n+  gcc_jit_type *const_type = gcc_jit_type_get_const (the_type);\n+  gcc_jit_type *ptr_to_const_type = gcc_jit_type_get_pointer (const_type);\n+\n+  gcc_jit_param *a =\n+    gcc_jit_context_new_param (ctxt, NULL, ptr_to_const_type, \"a\");\n+  gcc_jit_param *b =\n+    gcc_jit_context_new_param (ctxt, NULL, ptr_to_const_type, \"b\");\n+  gcc_jit_param *c =\n+    gcc_jit_context_new_param (ctxt, NULL, ptr_type, \"c\");\n+\n+  gcc_jit_type *return_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+\n+  gcc_jit_param *params[3] = {a, b, c};\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  return_type,\n+\t\t\t\t  fnname,\n+\t\t\t\t  3, params, 0);\n+  gcc_jit_block *initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+\n+  /* (*a OP *b) */\n+  gcc_jit_rvalue *op_result =\n+    gcc_jit_context_new_binary_op (\n+      ctxt, NULL,\n+      op,\n+      the_type,\n+      gcc_jit_lvalue_as_rvalue (gcc_jit_rvalue_dereference (gcc_jit_param_as_rvalue (a),\n+\t\t\t\t\t\t\t    NULL)),\n+      gcc_jit_lvalue_as_rvalue (gcc_jit_rvalue_dereference (gcc_jit_param_as_rvalue (b),\n+\t\t\t\t\t\t\t    NULL)));\n+  /* *c = *a OP *b; */\n+  gcc_jit_block_add_assignment (\n+    initial, NULL,\n+    gcc_jit_rvalue_dereference (gcc_jit_param_as_rvalue (c), NULL),\n+    op_result);\n+  gcc_jit_block_end_with_void_return (initial, NULL);\n+}\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *int_type = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *unsigned_type\n+    = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UNSIGNED_INT);\n+  gcc_jit_type *float_type = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_FLOAT);\n+\n+  gcc_jit_type *v4si_type = gcc_jit_type_get_vector (int_type, 4);\n+  gcc_jit_type *v4ui_type = gcc_jit_type_get_vector (unsigned_type, 4);\n+  gcc_jit_type *v4f_type = gcc_jit_type_get_vector (float_type, 4);\n+\n+  create_vec_fn (ctxt, \"jit_v4si_add\",\n+\t\t v4si_type, GCC_JIT_BINARY_OP_PLUS);\n+  create_vec_fn (ctxt, \"jit_v4si_sub\",\n+\t\t v4si_type, GCC_JIT_BINARY_OP_MINUS);\n+  create_vec_fn (ctxt, \"jit_v4si_mult\",\n+\t\t v4si_type, GCC_JIT_BINARY_OP_MULT);\n+  create_vec_fn (ctxt, \"jit_v4si_div\",\n+\t\t v4si_type, GCC_JIT_BINARY_OP_DIVIDE);\n+\n+  create_vec_fn (ctxt, \"jit_v4ui_add\",\n+\t\t v4ui_type, GCC_JIT_BINARY_OP_PLUS);\n+  create_vec_fn (ctxt, \"jit_v4ui_sub\",\n+\t\t v4ui_type, GCC_JIT_BINARY_OP_MINUS);\n+  create_vec_fn (ctxt, \"jit_v4ui_mult\",\n+\t\t v4ui_type, GCC_JIT_BINARY_OP_MULT);\n+  create_vec_fn (ctxt, \"jit_v4ui_div\",\n+\t\t v4ui_type, GCC_JIT_BINARY_OP_DIVIDE);\n+\n+  create_vec_fn (ctxt, \"jit_v4f_add\",\n+\t\t v4f_type, GCC_JIT_BINARY_OP_PLUS);\n+  create_vec_fn (ctxt, \"jit_v4f_sub\",\n+\t\t v4f_type, GCC_JIT_BINARY_OP_MINUS);\n+  create_vec_fn (ctxt, \"jit_v4f_mult\",\n+\t\t v4f_type, GCC_JIT_BINARY_OP_MULT);\n+  create_vec_fn (ctxt, \"jit_v4f_div\",\n+\t\t v4f_type, GCC_JIT_BINARY_OP_DIVIDE);\n+}\n+\n+template <typename T>\n+void\n+check_add (const T &a, const T &b, const T &c)\n+{\n+  for (int i = 0; i < 4; i++)\n+    CHECK_VALUE (c[i], a[i] + b[i]);\n+}\n+\n+template <typename T>\n+void\n+check_sub (const T &a, const T &b, const T &c)\n+{\n+  for (int i = 0; i < 4; i++)\n+    CHECK_VALUE (c[i], a[i] - b[i]);\n+}\n+\n+template <typename T>\n+void\n+check_mult (const T &a, const T &b, const T &c)\n+{\n+  for (int i = 0; i < 4; i++)\n+    CHECK_VALUE (c[i], a[i] * b[i]);\n+}\n+\n+template <typename T>\n+void\n+check_div (const T &a, const T &b, const T &c)\n+{\n+  for (int i = 0; i < 4; i++)\n+    CHECK_VALUE (c[i], a[i] / b[i]);\n+}\n+\n+template <typename T>\n+void\n+verify_vec_code (gcc_jit_context *ctxt, gcc_jit_result *result,\n+\t\t const char *fnname,\n+\t\t void (*check_cb) (const T &a, const T &b, const T &c))\n+{\n+  typedef void (*binop_type) (const T *a, const T *b, T *c);\n+  CHECK_NON_NULL (result);\n+  binop_type fn =\n+    (binop_type)gcc_jit_result_get_code (result, fnname);\n+  CHECK_NON_NULL (fn);\n+\n+  T a, b, c;\n+\n+  /* Init.  */\n+  for (int i = 0; i < 4; i++)\n+    {\n+      a[i] = i + 5;\n+      b[i] = (i + 4) * 3;\n+    }\n+\n+  /* Run jit-compiled code and verify result.  */\n+  fn (&a, &b, &c);\n+  check_cb (a, b, c);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  verify_vec_code<v4si> (ctxt, result, \"jit_v4si_add\", check_add);\n+  verify_vec_code<v4si> (ctxt, result, \"jit_v4si_sub\", check_sub);\n+  verify_vec_code<v4si> (ctxt, result, \"jit_v4si_mult\", check_mult);\n+  verify_vec_code<v4si> (ctxt, result, \"jit_v4si_div\", check_div);\n+\n+  verify_vec_code<v4ui> (ctxt, result, \"jit_v4ui_add\", check_add);\n+  verify_vec_code<v4ui> (ctxt, result, \"jit_v4ui_sub\", check_sub);\n+  verify_vec_code<v4ui> (ctxt, result, \"jit_v4ui_mult\", check_mult);\n+  verify_vec_code<v4ui> (ctxt, result, \"jit_v4ui_div\", check_div);\n+\n+  verify_vec_code<v4f> (ctxt, result, \"jit_v4f_add\", check_add);\n+  verify_vec_code<v4f> (ctxt, result, \"jit_v4f_sub\", check_sub);\n+  verify_vec_code<v4f> (ctxt, result, \"jit_v4f_mult\", check_mult);\n+  verify_vec_code<v4f> (ctxt, result, \"jit_v4f_div\", check_div);\n+}"}]}