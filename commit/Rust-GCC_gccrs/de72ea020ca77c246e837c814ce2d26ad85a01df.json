{"sha": "de72ea020ca77c246e837c814ce2d26ad85a01df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU3MmVhMDIwY2E3N2MyNDZlODM3YzgxNGNlMmQyNmFkODVhMDFkZg==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-01-31T13:22:57Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-01-31T13:22:57Z"}, "message": "gcc/\n\t* config/i386/avx512fintrin.h (_MM_FROUND_TO_NEAREST_INT),\n\t(_MM_FROUND_TO_NEG_INF), (_MM_FROUND_TO_POS_INF),\n\t(_MM_FROUND_TO_ZERO), (_MM_FROUND_CUR_DIRECTION): Are already defined\n\tin smmintrin.h, remove them.\n\t(_MM_FROUND_NO_EXC): Same as above, bit also wrong value.\n\t* config/i386/i386.c (ix86_print_operand): Split sae and rounding.\n\t* config/i386/i386.md (ROUND_SAE): Fix value.\n\t* config/i386/predicates.md (const_4_or_8_to_11_operand): New.\n\t(const48_operand): New.\n\t* config/i386/subst.md (round), (round_expand): Use\n\tconst_4_or_8_to_11_operand.\n\t(round_saeonly), (round_saeonly_expand): Use const48_operand.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx-1.c: Use correct rounding values.\n        * gcc.target/i386/avx512f-vaddpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vaddps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vaddsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vaddss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtdq2ps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtpd2dq-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtpd2ps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtpd2udq-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtps2dq-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtps2udq-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsd2si-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsd2si64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsd2usi-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsd2usi64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsi2sd64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsi2ss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtsi2ss64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtss2si-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtss2si64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtss2usi-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtss2usi64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtudq2ps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtusi2sd64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtusi2ss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vcvtusi2ss64-1.c: Ditto.\n        * gcc.target/i386/avx512f-vdivpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vdivps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vdivsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vdivss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmaddXXXpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmaddXXXps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmaddXXXsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmaddXXXss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmaddsubXXXpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmaddsubXXXps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmsubXXXpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmsubXXXps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmsubXXXsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmsubXXXss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmsubaddXXXpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfmsubaddXXXps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmaddXXXpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmaddXXXps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmaddXXXsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmaddXXXss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmsubXXXpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmsubXXXps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmsubXXXsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vfnmsubXXXss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vmulpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vmulps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vmulsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vmulss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vscalefpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vscalefps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsqrtpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsqrtps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsubpd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsubps-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsubsd-1.c: Ditto.\n        * gcc.target/i386/avx512f-vsubss-1.c: Ditto.\n        * gcc.target/i386/sse-13.c: Ditto.\n        * gcc.target/i386/sse-14.c: Ditto.\n        * gcc.target/i386/sse-22.c: Ditto.\n        * gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r207342", "tree": {"sha": "a1f650c517f4ada9007545cedf5b3545705ecb1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1f650c517f4ada9007545cedf5b3545705ecb1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de72ea020ca77c246e837c814ce2d26ad85a01df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de72ea020ca77c246e837c814ce2d26ad85a01df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de72ea020ca77c246e837c814ce2d26ad85a01df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de72ea020ca77c246e837c814ce2d26ad85a01df/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be792bce4fcab1a4a636545c69885b680eb74fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be792bce4fcab1a4a636545c69885b680eb74fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be792bce4fcab1a4a636545c69885b680eb74fca"}], "stats": {"total": 2171, "additions": 1140, "deletions": 1031}, "files": [{"sha": "621a344195b7cc1141be6d3937c6f545349a965c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -1,3 +1,18 @@\n+2014-01-31  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_MM_FROUND_TO_NEAREST_INT),\n+\t(_MM_FROUND_TO_NEG_INF), (_MM_FROUND_TO_POS_INF),\n+\t(_MM_FROUND_TO_ZERO), (_MM_FROUND_CUR_DIRECTION): Are already defined\n+\tin smmintrin.h, remove them.\n+\t(_MM_FROUND_NO_EXC): Same as above, bit also wrong value.\n+\t* config/i386/i386.c (ix86_print_operand): Split sae and rounding.\n+\t* config/i386/i386.md (ROUND_SAE): Fix value.\n+\t* config/i386/predicates.md (const_4_or_8_to_11_operand): New.\n+\t(const48_operand): New.\n+\t* config/i386/subst.md (round), (round_expand): Use\n+\tconst_4_or_8_to_11_operand.\n+\t(round_saeonly), (round_saeonly_expand): Use const48_operand.\n+\n 2014-01-31  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* config/i386/constraints.md (Yk): Swap meaning with k."}, {"sha": "98cf8358241499912d01143864c693eb018e8f60", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -49,14 +49,6 @@ typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));\n typedef unsigned char  __mmask8;\n typedef unsigned short __mmask16;\n \n-/* Rounding mode macros.  */\n-#define _MM_FROUND_TO_NEAREST_INT   0x00\n-#define _MM_FROUND_TO_NEG_INF       0x01\n-#define _MM_FROUND_TO_POS_INF       0x02\n-#define _MM_FROUND_TO_ZERO\t    0x03\n-#define _MM_FROUND_CUR_DIRECTION    0x04\n-#define _MM_FROUND_NO_EXC\t    0x05\n-\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set_epi64 (long long __A, long long __B, long long __C,"}, {"sha": "dcf96e626a45cff4111f6f44804d179c3b66aae4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -14706,7 +14706,8 @@ get_some_local_dynamic_name (void)\n    F,f -- likewise, but for floating-point.\n    O -- if HAVE_AS_IX86_CMOV_SUN_SYNTAX, expand to \"w.\", \"l.\" or \"q.\",\n \totherwise nothing\n-   R -- print the prefix for register names.\n+   R -- print embeded rounding and sae.\n+   r -- print only sae.\n    z -- print the opcode suffix for the size of the current operand.\n    Z -- likewise, with special suffixes for x87 instructions.\n    * -- print a star (in certain assembler syntax)\n@@ -15156,6 +15157,20 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    fputs (\"{z}\", file);\n \t  return;\n \n+\tcase 'r':\n+\t  gcc_assert (CONST_INT_P (x));\n+\t  gcc_assert (INTVAL (x) == ROUND_SAE);\n+\n+\t  if (ASSEMBLER_DIALECT == ASM_INTEL)\n+\t    fputs (\", \", file);\n+\n+\t  fputs (\"{sae}\", file);\n+\n+\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n+\t    fputs (\", \", file);\n+\n+\t  return;\n+\n \tcase 'R':\n \t  gcc_assert (CONST_INT_P (x));\n \n@@ -15164,21 +15179,18 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \n \t  switch (INTVAL (x))\n \t    {\n-\t    case ROUND_NEAREST_INT:\n+\t    case ROUND_NEAREST_INT | ROUND_SAE:\n \t      fputs (\"{rn-sae}\", file);\n \t      break;\n-\t    case ROUND_NEG_INF:\n+\t    case ROUND_NEG_INF | ROUND_SAE:\n \t      fputs (\"{rd-sae}\", file);\n \t      break;\n-\t    case ROUND_POS_INF:\n+\t    case ROUND_POS_INF | ROUND_SAE:\n \t      fputs (\"{ru-sae}\", file);\n \t      break;\n-\t    case ROUND_ZERO:\n+\t    case ROUND_ZERO | ROUND_SAE:\n \t      fputs (\"{rz-sae}\", file);\n \t      break;\n-\t    case ROUND_SAE:\n-\t      fputs (\"{sae}\", file);\n-\t      break;\n \t    default:\n \t      gcc_unreachable ();\n \t    }"}, {"sha": "87feb473af56953eead20c6412c8acf4f129584a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -251,7 +251,7 @@\n    (ROUND_POS_INF\t\t\t2)\n    (ROUND_ZERO\t\t\t\t3)\n    (NO_ROUND\t\t\t\t4)\n-   (ROUND_SAE\t\t\t\t5)\n+   (ROUND_SAE\t\t\t\t8)\n   ])\n \n ;; Constants to represent pcomtrue/pcomfalse variants"}, {"sha": "6383197b8b5edac803aaae8caa83bbc31581675d", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -676,6 +676,22 @@\n   return i == 3 || i == 5 || i == 9;\n })\n \n+;; Match 4 or 8 to 11.  Used for embeded rounding.\n+(define_predicate \"const_4_or_8_to_11_operand\"\n+  (match_code \"const_int\")\n+{\n+  HOST_WIDE_INT i = INTVAL (op);\n+  return i == 4 || (i >= 8 && i <= 11);\n+})\n+\n+;; Match 4 or 8. Used for SAE.\n+(define_predicate \"const48_operand\"\n+  (match_code \"const_int\")\n+{\n+  HOST_WIDE_INT i = INTVAL (op);\n+  return i == 4 || i == 8;\n+})\n+\n ;; Match 0 or 1.\n (define_predicate \"const_0_to_1_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "1654cbae6ab88564882dfd1f7137b399197a6f90", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -128,18 +128,18 @@\n   [(parallel[\n      (set (match_dup 0)\n           (match_dup 1))\n-     (unspec [(match_operand:SI 2 \"const_0_to_4_operand\")] UNSPEC_EMBEDDED_ROUNDING)])])\n+     (unspec [(match_operand:SI 2 \"const_4_or_8_to_11_operand\")] UNSPEC_EMBEDDED_ROUNDING)])])\n \n (define_subst_attr \"round_saeonly_name\" \"round_saeonly\" \"\" \"_round\")\n-(define_subst_attr \"round_saeonly_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n-(define_subst_attr \"round_saeonly_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n-(define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%R4\" \"%R5\")\n-(define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%R5\" \"%R7\")\n-(define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%R2\")\n-(define_subst_attr \"round_saeonly_op3\" \"round_saeonly\" \"\" \"%R3\")\n-(define_subst_attr \"round_saeonly_op4\" \"round_saeonly\" \"\" \"%R4\")\n-(define_subst_attr \"round_saeonly_op5\" \"round_saeonly\" \"\" \"%R5\")\n-(define_subst_attr \"round_saeonly_op6\" \"round_saeonly\" \"\" \"%R6\")\n+(define_subst_attr \"round_saeonly_mask_operand2\" \"mask\" \"%r2\" \"%r4\")\n+(define_subst_attr \"round_saeonly_mask_operand3\" \"mask\" \"%r3\" \"%r5\")\n+(define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%r4\" \"%r5\")\n+(define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%r5\" \"%r7\")\n+(define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%r2\")\n+(define_subst_attr \"round_saeonly_op3\" \"round_saeonly\" \"\" \"%r3\")\n+(define_subst_attr \"round_saeonly_op4\" \"round_saeonly\" \"\" \"%r4\")\n+(define_subst_attr \"round_saeonly_op5\" \"round_saeonly\" \"\" \"%r5\")\n+(define_subst_attr \"round_saeonly_op6\" \"round_saeonly\" \"\" \"%r6\")\n (define_subst_attr \"round_saeonly_prefix\" \"round_saeonly\" \"vex\" \"evex\")\n (define_subst_attr \"round_saeonly_mask_op2\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand2>\")\n (define_subst_attr \"round_saeonly_mask_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand3>\")\n@@ -157,7 +157,7 @@\n   [(parallel[\n      (set (match_dup 0)\n           (match_dup 1))\n-     (unspec [(match_operand:SI 2 \"const_4_to_5_operand\")] UNSPEC_EMBEDDED_ROUNDING)])])\n+     (unspec [(match_operand:SI 2 \"const48_operand\")] UNSPEC_EMBEDDED_ROUNDING)])])\n \n (define_subst_attr \"round_expand_name\" \"round_expand\" \"\" \"_round\")\n (define_subst_attr \"round_expand_nimm_predicate\" \"round_expand\" \"nonimmediate_operand\" \"register_operand\")\n@@ -175,7 +175,7 @@\n    (match_dup 2)\n    (match_dup 3)\n    (match_dup 4)\n-   (unspec [(match_operand:SI 5 \"const_0_to_4_operand\")] UNSPEC_EMBEDDED_ROUNDING)])\n+   (unspec [(match_operand:SI 5 \"const_4_or_8_to_11_operand\")] UNSPEC_EMBEDDED_ROUNDING)])\n \n (define_subst_attr \"round_saeonly_expand_name\" \"round_saeonly_expand\" \"\" \"_round\")\n (define_subst_attr \"round_saeonly_expand_nimm_predicate\" \"round_saeonly_expand\" \"nonimmediate_operand\" \"register_operand\")\n@@ -195,4 +195,4 @@\n    (match_dup 3)\n    (match_dup 4)\n    (match_dup 5)\n-   (unspec [(match_operand:SI 6 \"const_4_to_5_operand\")] UNSPEC_EMBEDDED_ROUNDING)])\n+   (unspec [(match_operand:SI 6 \"const48_operand\")] UNSPEC_EMBEDDED_ROUNDING)])"}, {"sha": "b978746e07a5911edcc2c708ceaa72b4c1daf7a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -1,3 +1,77 @@\n+2014-01-31  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Use correct rounding values.\n+        * gcc.target/i386/avx512f-vaddpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vaddps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vaddsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vaddss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtdq2ps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtpd2dq-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtpd2ps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtpd2udq-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtps2dq-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtps2udq-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsd2si-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsd2si64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsd2usi-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsd2usi64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsi2sd64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsi2ss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtsi2ss64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtss2si-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtss2si64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtss2usi-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtss2usi64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtudq2ps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtusi2sd64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtusi2ss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vcvtusi2ss64-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vdivpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vdivps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vdivsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vdivss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmaddXXXpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmaddXXXps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmaddXXXsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmaddXXXss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmaddsubXXXpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmaddsubXXXps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmsubXXXpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmsubXXXps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmsubXXXsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmsubXXXss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmsubaddXXXpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfmsubaddXXXps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmaddXXXpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmaddXXXps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmaddXXXsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmaddXXXss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmsubXXXpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmsubXXXps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmsubXXXsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vfnmsubXXXss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vmulpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vmulps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vmulsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vmulss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vscalefpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vscalefps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsqrtpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsqrtps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsubpd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsubps-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsubsd-1.c: Ditto.\n+        * gcc.target/i386/avx512f-vsubss-1.c: Ditto.\n+        * gcc.target/i386/sse-13.c: Ditto.\n+        * gcc.target/i386/sse-14.c: Ditto.\n+        * gcc.target/i386/sse-22.c: Ditto.\n+        * gcc.target/i386/sse-23.c: Ditto.\n+\n 2014-01-31  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* gcc.target/i386/avx512f-inline-asm.c: Swap Yk and k."}, {"sha": "f7e412d3e45229f0947c29101ec7f587482757a6", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 136, "deletions": 136, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -167,86 +167,86 @@\n #define __builtin_ia32_xabort(I) __builtin_ia32_xabort(0)\n \n /* avx512fintrin.h */\n-#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 1)\n-#define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 1)\n+#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n+#define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 8)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n-#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 8)\n #define __builtin_ia32_cmpq512_mask(A, B, E, D) __builtin_ia32_cmpq512_mask(A, B, 1, D)\n-#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtsd2ss_round(A, B, C) __builtin_ia32_cvtsd2ss_round(A, B, 1)\n+#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtsd2ss_round(A, B, C) __builtin_ia32_cvtsd2ss_round(A, B, 8)\n #define __builtin_ia32_cvtss2sd_round(A, B, C) __builtin_ia32_cvtss2sd_round(A, B, 4)\n-#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 1)\n-#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 1)\n-#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 1)\n-#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 1)\n-#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 1)\n-#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 1)\n-#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 1)\n-#define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 1)\n+#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 8)\n+#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 8)\n+#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 8)\n+#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 8)\n+#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 8)\n+#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 8)\n+#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 8)\n+#define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 8)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n-#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 5)\n-#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 5)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 8)\n+#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpsd128_round(A, B, C) __builtin_ia32_getexpsd128_round(A, B, 4)\n #define __builtin_ia32_getexpss128_round(A, B, C) __builtin_ia32_getexpss128_round(A, B, 4)\n-#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantsd_round(A, B, C, D) __builtin_ia32_getmantsd_round(A, B, 1, 4)\n #define __builtin_ia32_getmantss_round(A, B, C, D) __builtin_ia32_getmantss_round(A, B, 1, 4)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti64x4_mask(A, B, F, D, E) __builtin_ia32_inserti64x4_mask(A, B, 1, D, E)\n-#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxsd_round(A, B, C) __builtin_ia32_maxsd_round(A, B, 4)\n #define __builtin_ia32_maxss_round(A, B, C) __builtin_ia32_maxss_round(A, B, 4)\n-#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minsd_round(A, B, C) __builtin_ia32_minsd_round(A, B, 4)\n #define __builtin_ia32_minss_round(A, B, C) __builtin_ia32_minss_round(A, B, 4)\n-#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 1)\n-#define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 1)\n+#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 8)\n+#define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 8)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)\n@@ -264,98 +264,98 @@\n #define __builtin_ia32_pternlogd512_maskz(A, B, C, F, E) __builtin_ia32_pternlogd512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_pternlogq512_mask(A, B, C, F, E) __builtin_ia32_pternlogq512_mask(A, B, C, 1, E)\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 8)\n #define __builtin_ia32_rndscalesd_round(A, B, C, D) __builtin_ia32_rndscalesd_round(A, B, 1, 4)\n #define __builtin_ia32_rndscaless_round(A, B, C, D) __builtin_ia32_rndscaless_round(A, B, 1, 4)\n-#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scalefsd_round(A, B, C) __builtin_ia32_scalefsd_round(A, B, 1)\n-#define __builtin_ia32_scalefss_round(A, B, C) __builtin_ia32_scalefss_round(A, B, 1)\n-#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scalefsd_round(A, B, C) __builtin_ia32_scalefsd_round(A, B, 8)\n+#define __builtin_ia32_scalefss_round(A, B, C) __builtin_ia32_scalefss_round(A, B, 8)\n+#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 8)\n #define __builtin_ia32_shuf_f32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_f32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_f64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_f64x2_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_i32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_i32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_i64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_i64x2_mask(A, B, 1, D, E)\n #define __builtin_ia32_shufpd512_mask(A, B, F, D, E) __builtin_ia32_shufpd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n-#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 1)\n-#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 1)\n-#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 1)\n-#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 1)\n-#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 1)\n-#define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 1)\n+#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 8)\n+#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 8)\n+#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 8)\n+#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 8)\n+#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)\n+#define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 8)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n-#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 5)\n-#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 5)\n-#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 5)\n+#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 8)\n+#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 8)\n+#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 8)\n #define __builtin_ia32_vcvtps2ph512_mask(A, E, C, D) __builtin_ia32_vcvtps2ph512_mask(A, 1, C, D)\n-#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 1)\n-#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 1)\n-#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 1)\n-#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 1)\n-#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 1)\n-#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 1)\n-#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 1)\n-#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 1)\n-#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 5)\n-#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 5)\n-#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 5)\n-#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 5)\n-#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 5)\n-#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 5)\n-#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 5)\n-#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 5)\n-#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_round(A, B, C, D) __builtin_ia32_vfmaddsd3_round(A, B, C, 1)\n-#define __builtin_ia32_vfmaddss3_round(A, B, C, D) __builtin_ia32_vfmaddss3_round(A, B, C, 1)\n-#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 8)\n+#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 8)\n+#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 8)\n+#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 8)\n+#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 8)\n+#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 8)\n+#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 8)\n+#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 8)\n+#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 8)\n+#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 8)\n+#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 8)\n+#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 8)\n+#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 8)\n+#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 8)\n+#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 8)\n+#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 8)\n+#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_round(A, B, C, D) __builtin_ia32_vfmaddsd3_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddss3_round(A, B, C, D) __builtin_ia32_vfmaddss3_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n \n /* avx512erintrin.h */\n-#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 5)\n-#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask(A, B, C, 5)\n-#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask(A, B, C, 5)\n-#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask(A, B, C, 5)\n-#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask(A, B, C, 5)\n-#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask(A, B, C, 5)\n-#define __builtin_ia32_rcp28ss_round(A, B, C) __builtin_ia32_rcp28ss_round(A, B, 5)\n-#define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 5)\n-#define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 5)\n-#define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 5)\n+#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 8)\n+#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask(A, B, C, 8)\n+#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask(A, B, C, 8)\n+#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask(A, B, C, 8)\n+#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask(A, B, C, 8)\n+#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask(A, B, C, 8)\n+#define __builtin_ia32_rcp28ss_round(A, B, C) __builtin_ia32_rcp28ss_round(A, B, 8)\n+#define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 8)\n+#define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 8)\n+#define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 8)\n \n /* avx512pfintrin.h */\n #define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, 1)"}, {"sha": "567fecffb67f61a25bb77b965312884753695924", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddpd-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_add_pd (x, x);\n   x = _mm512_mask_add_pd (x, m, x, x);\n   x = _mm512_maskz_add_pd (m, x, x);\n-  x = _mm512_add_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_add_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_add_round_pd (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_add_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_add_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_add_round_pd (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "66618b9aed52902960f77c21b2f9ebefea3dade3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_add_ps (x, x);\n   x = _mm512_mask_add_ps (x, m, x, x);\n   x = _mm512_maskz_add_ps (m, x, x);\n-  x = _mm512_add_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_add_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_add_round_ps (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_add_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_add_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_add_round_ps (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "5cdb76501e76d23f8e01651a2d2ef1e88a0ca96c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_add_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_add_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "0003c44bb29e28a7db743956fc459b6f6c4f6409", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_add_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_add_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "7c326f0bbeaf6313350aa1f82656abada85fa191", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtdq2ps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtdq2ps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -19,7 +19,7 @@ avx512f_test (void)\n   res = _mm512_cvtepi32_ps (s);\n   res = _mm512_mask_cvtepi32_ps (res, m, s);\n   res = _mm512_maskz_cvtepi32_ps (m, s);\n-  res = _mm512_cvt_roundepi32_ps (s, _MM_FROUND_TO_NEAREST_INT);\n-  res = _mm512_mask_cvt_roundepi32_ps (res, m, s, _MM_FROUND_TO_POS_INF);\n-  res = _mm512_maskz_cvt_roundepi32_ps (m, s, _MM_FROUND_TO_ZERO);\n+  res = _mm512_cvt_roundepi32_ps (s, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvt_roundepi32_ps (res, m, s, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvt_roundepi32_ps (m, s, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "2a6d38c46302a947c18e2ac7e3617ba9f190419b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2dq-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2dq-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -19,7 +19,7 @@ avx512f_test (void)\n   res = _mm512_cvtpd_epi32 (s);\n   res = _mm512_mask_cvtpd_epi32 (res, m, s);\n   res = _mm512_maskz_cvtpd_epi32 (m, s);\n-  res = _mm512_cvt_roundpd_epi32 (s, _MM_FROUND_TO_NEAREST_INT);\n-  res = _mm512_mask_cvt_roundpd_epi32 (res, m, s, _MM_FROUND_TO_POS_INF);\n-  res = _mm512_maskz_cvt_roundpd_epi32 (m, s, _MM_FROUND_TO_ZERO);\n+  res = _mm512_cvt_roundpd_epi32 (s, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvt_roundpd_epi32 (res, m, s, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvt_roundpd_epi32 (m, s, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "baa8b0848766e944f264d370936ceb6eabc254fc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2ps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   y = _mm512_cvtpd_ps (x);\n   y = _mm512_mask_cvtpd_ps (y, 4, x);\n   y = _mm512_maskz_cvtpd_ps (6, x);\n-  y = _mm512_cvt_roundpd_ps (x, _MM_FROUND_TO_NEAREST_INT);\n-  y = _mm512_mask_cvt_roundpd_ps (y, 4, x, _MM_FROUND_TO_NEG_INF);\n-  y = _mm512_maskz_cvt_roundpd_ps (6, x, _MM_FROUND_TO_ZERO);\n+  y = _mm512_cvt_roundpd_ps (x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  y = _mm512_mask_cvt_roundpd_ps (y, 4, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  y = _mm512_maskz_cvt_roundpd_ps (6, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "33651e3f8a27aae9ec00687a9fa5ea832f06390c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2udq-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -19,7 +19,7 @@ avx512f_test (void)\n   res = _mm512_cvtpd_epu32 (s);\n   res = _mm512_mask_cvtpd_epu32 (res, m, s);\n   res = _mm512_maskz_cvtpd_epu32 (m, s);\n-  res = _mm512_cvt_roundpd_epu32 (s, _MM_FROUND_TO_NEAREST_INT);\n-  res = _mm512_mask_cvt_roundpd_epu32 (res, m, s, _MM_FROUND_TO_POS_INF);\n-  res = _mm512_maskz_cvt_roundpd_epu32 (m, s, _MM_FROUND_TO_ZERO);\n+  res = _mm512_cvt_roundpd_epu32 (s, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvt_roundpd_epu32 (res, m, s, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvt_roundpd_epu32 (m, s, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "7879e170e8f3fbb90d01dc6c10287fe275882022", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2dq-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2dq-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -19,7 +19,7 @@ avx512f_test (void)\n   res = _mm512_cvtps_epi32 (s);\n   res = _mm512_mask_cvtps_epi32 (res, m, s);\n   res = _mm512_maskz_cvtps_epi32 (m, s);\n-  res = _mm512_cvt_roundps_epi32 (s, _MM_FROUND_TO_NEAREST_INT);\n-  res = _mm512_mask_cvt_roundps_epi32 (res, m, s, _MM_FROUND_TO_POS_INF);\n-  res = _mm512_maskz_cvt_roundps_epi32 (m, s, _MM_FROUND_TO_ZERO);\n+  res = _mm512_cvt_roundps_epi32 (s, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvt_roundps_epi32 (res, m, s, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvt_roundps_epi32 (m, s, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "b1d9b91438e208b61d3470296d5ac4f4b95240ed", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2udq-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2udq-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -19,7 +19,7 @@ avx512f_test (void)\n   res = _mm512_cvtps_epu32 (s);\n   res = _mm512_mask_cvtps_epu32 (res, m, s);\n   res = _mm512_maskz_cvtps_epu32 (m, s);\n-  res = _mm512_cvt_roundps_epu32 (s, _MM_FROUND_TO_NEAREST_INT);\n-  res = _mm512_mask_cvt_roundps_epu32 (res, m, s, _MM_FROUND_TO_NEG_INF);\n-  res = _mm512_maskz_cvt_roundps_epu32 (m, s, _MM_FROUND_TO_ZERO);\n+  res = _mm512_cvt_roundps_epu32 (s, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvt_roundps_epu32 (res, m, s, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvt_roundps_epu32 (m, s, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "219fc7147fc445faf639d007f3f13a8fed8587d1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2si-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile unsigned y;\n void extern\n avx512f_test (void)\n {\n-  y = _mm_cvt_roundsd_i32 (x, _MM_FROUND_TO_NEAREST_INT);\n+  y = _mm_cvt_roundsd_i32 (x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "7a9f1d893003d1cec790881c0cbafe6927cbc3cc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2si64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2si64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -10,5 +10,5 @@ volatile unsigned long long y;\n void extern\n avx512f_test (void)\n {\n-  y = _mm_cvt_roundsd_i64 (x, _MM_FROUND_TO_ZERO);\n+  y = _mm_cvt_roundsd_i64 (x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "8aadb9ae01495f6b7dc6aea197c3e83aa6987215", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2ss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -10,5 +10,5 @@ volatile __m128d s2;\n void extern\n avx512f_test (void)\n {\n-  r = _mm_cvt_roundsd_ss (s1, s2, _MM_FROUND_TO_NEAREST_INT);\n+  r = _mm_cvt_roundsd_ss (s1, s2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "ec28c865a3bc0c63e9e338839b13fe1c74e6a4cd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2usi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -11,5 +11,5 @@ void extern\n avx512f_test (void)\n {\n   y = _mm_cvtsd_u32 (x);\n-  y = _mm_cvt_roundsd_u32 (x, _MM_FROUND_TO_NEG_INF);\n+  y = _mm_cvt_roundsd_u32 (x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n }"}, {"sha": "f76e752b65a6fe30773d152448d9ef21968da2f4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2usi64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2usi64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -12,5 +12,5 @@ void extern\n avx512f_test (void)\n {\n   y = _mm_cvtsd_u64 (x);\n-  y = _mm_cvt_roundsd_u64 (x, _MM_FROUND_TO_POS_INF);\n+  y = _mm_cvt_roundsd_u64 (x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n }"}, {"sha": "d5e18fbf80166d07dac701395c33cb6a4917dd76", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2sd64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2sd64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -10,5 +10,5 @@ volatile long long n;\n void extern\n avx512f_test (void)\n {\n-  x = _mm_cvt_roundi64_sd (x, n, _MM_FROUND_TO_POS_INF);\n+  x = _mm_cvt_roundi64_sd (x, n, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n }"}, {"sha": "1adca43f23961189a7418625ca03e8f151e52458", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2ss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -10,5 +10,5 @@ volatile int n;\n void extern\n avx512f_test (void)\n {\n-  x = _mm_cvt_roundi32_ss (x, n, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm_cvt_roundi32_ss (x, n, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "0980926660f2430cf3e9f620459e339ef80e9d28", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsi2ss64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsi2ss64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -10,5 +10,5 @@ volatile long long n;\n void extern\n avx512f_test (void)\n {\n-  x = _mm_cvt_roundi64_ss (x, n, _MM_FROUND_TO_ZERO);\n+  x = _mm_cvt_roundi64_ss (x, n, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "a0998a9efeb0163bb6f25ea99e1028011285bb09", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2si-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile unsigned y;\n void extern\n avx512f_test (void)\n {\n-  y = _mm_cvt_roundss_i32 (x, _MM_FROUND_TO_NEAREST_INT);\n+  y = _mm_cvt_roundss_i32 (x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "e429ead958e96dd6306f255f9dddad2929e18b46", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2si64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2si64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -10,5 +10,5 @@ volatile unsigned long long y;\n void extern\n avx512f_test (void)\n {\n-  y = _mm_cvt_roundss_i64 (x, _MM_FROUND_TO_ZERO);\n+  y = _mm_cvt_roundss_i64 (x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "cc3bfcebebc5cf4babd29e52a1a676b79ad4a115", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2usi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -11,5 +11,5 @@ void extern\n avx512f_test (void)\n {\n   y = _mm_cvtss_u32 (x);\n-  y = _mm_cvt_roundss_u32 (x, _MM_FROUND_TO_NEG_INF);\n+  y = _mm_cvt_roundss_u32 (x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n }"}, {"sha": "6c5b01870806ac1877864817930aba603023a666", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2usi64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2usi64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -12,5 +12,5 @@ void extern\n avx512f_test (void)\n {\n   y = _mm_cvtss_u64 (x);\n-  y = _mm_cvt_roundss_u64 (x, _MM_FROUND_TO_POS_INF);\n+  y = _mm_cvt_roundss_u64 (x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n }"}, {"sha": "cb904b95d05d6a515ecc4cfaadbea863f4768083", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtudq2ps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtudq2ps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -19,7 +19,7 @@ avx512f_test (void)\n   res = _mm512_cvtepu32_ps (s);\n   res = _mm512_mask_cvtepu32_ps (res, m, s);\n   res = _mm512_maskz_cvtepu32_ps (m, s);\n-  res = _mm512_cvt_roundepu32_ps (s, _MM_FROUND_TO_NEAREST_INT);\n-  res = _mm512_mask_cvt_roundepu32_ps (res, m, s, _MM_FROUND_TO_NEG_INF);\n-  res = _mm512_maskz_cvt_roundepu32_ps (m, s, _MM_FROUND_TO_ZERO);\n+  res = _mm512_cvt_roundepu32_ps (s, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res = _mm512_mask_cvt_roundepu32_ps (res, m, s, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  res = _mm512_maskz_cvt_roundepu32_ps (m, s, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "9bfafce46efe48f3420a0e7782cb9339fcfd791e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2sd64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2sd64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -12,5 +12,5 @@ void extern\n avx512f_test (void)\n {\n   x = _mm_cvtu64_sd (x, n);\n-  x = _mm_cvt_roundu64_sd (x, n, _MM_FROUND_TO_POS_INF);\n+  x = _mm_cvt_roundu64_sd (x, n, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n }"}, {"sha": "5214af6ee126202484ca59cbb0c57fd68250e4c9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2ss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -12,5 +12,5 @@ void extern\n avx512f_test (void)\n {\n   x = _mm_cvtu32_ss (x, n);\n-  x = _mm_cvt_roundu32_ss (x, n, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm_cvt_roundu32_ss (x, n, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "70ed64a2d2535627081a6a604c1a238ded9fef2e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtusi2ss64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtusi2ss64-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -12,5 +12,5 @@ void extern\n avx512f_test (void)\n {\n   x = _mm_cvtu64_ss (x, n);\n-  x = _mm_cvt_roundu64_ss (x, n, _MM_FROUND_TO_ZERO);\n+  x = _mm_cvt_roundu64_ss (x, n, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "2695ecb1d7d383006d47f213f224bd80632fc0d8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivpd-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_div_pd (x, x);\n   x = _mm512_mask_div_pd (x, m, x, x);\n   x = _mm512_maskz_div_pd (m, x, x);\n-  x = _mm512_div_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_div_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_div_round_pd (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_div_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_div_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_div_round_pd (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "367b1af46bf6aa05039e76621cf9621ae13f6658", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_div_ps (x, x);\n   x = _mm512_mask_div_ps (x, m, x, x);\n   x = _mm512_maskz_div_ps (m, x, x);\n-  x = _mm512_div_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_div_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_div_round_ps (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_div_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_div_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_div_round_ps (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "605304b318d529cfe0c8cc689984f765ddcc1bc2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -10,5 +10,5 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_div_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_div_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "27303ba3a09d1bdc27d7e9863c02c265c15f013d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_div_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_div_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "929afe3e6102a8b61e8db2d6f91e5e1c1c596695", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmadd_pd (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmadd_pd (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmadd_pd (m, x1, x2, x3);\n-  x1 = _mm512_fmadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "95b886162ff1cc4007a0765e93a980f6902acbd8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmadd_ps (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmadd_ps (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmadd_ps (m, x1, x2, x3);\n-  x1 = _mm512_fmadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "eb012d20643af550ca86965499b2680c6cf0749d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "1c04965b51b2c2b8fce47d68c9d72e5f825fe4c6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "6445cbaeda56d3ab544cbec1ded5afd60ab2d6df", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddsubXXXpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmaddsub_pd (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmaddsub_pd (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmaddsub_pd (m, x1, x2, x3);\n-  x1 = _mm512_fmaddsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmaddsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmaddsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmaddsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmaddsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmaddsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmaddsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmaddsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "9cff06c5cc08bdcdde2b8f1741aa48cfff3efd60", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddsubXXXps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddsubXXXps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmaddsub_ps (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmaddsub_ps (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmaddsub_ps (m, x1, x2, x3);\n-  x1 = _mm512_fmaddsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmaddsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmaddsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmaddsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmaddsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmaddsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmaddsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmaddsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "ef4565b363b9d45f3e89bcd830778e832fc917ee", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmsub_pd (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmsub_pd (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmsub_pd (m, x1, x2, x3);\n-  x1 = _mm512_fmsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "1ff9256660cbe4aefec6b517d545755c57df6db7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmsub_ps (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmsub_ps (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmsub_ps (m, x1, x2, x3);\n-  x1 = _mm512_fmsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "b8aecf77e279c74bbeb3f48460ba1dc9dd45583a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "8912eb8a3fb2c6bf6f78439feba1a67382663a89", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "dd5db25f326de9faa151277c5fa4611462973201", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubaddXXXpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmsubadd_pd (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmsubadd_pd (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmsubadd_pd (m, x1, x2, x3);\n-  x1 = _mm512_fmsubadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmsubadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmsubadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmsubadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmsubadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmsubadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmsubadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmsubadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "7cf3b0cf7161a928dd89d4ad5fca9d9385517b44", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubaddXXXps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubaddXXXps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fmsubadd_ps (x1, m, x2, x3);\n   x3 = _mm512_mask3_fmsubadd_ps (x1, x2, x3, m);\n   x1 = _mm512_maskz_fmsubadd_ps (m, x1, x2, x3);\n-  x1 = _mm512_fmsubadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fmsubadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fmsubadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fmsubadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fmsubadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fmsubadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fmsubadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fmsubadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "78c3c6b1c283e188de7675bd5c5d50a7aa49e68a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fnmadd_pd (x1, m, x2, x3);\n   x3 = _mm512_mask3_fnmadd_pd (x1, x2, x3, m);\n   x1 = _mm512_maskz_fnmadd_pd (m, x1, x2, x3);\n-  x1 = _mm512_fnmadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fnmadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fnmadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fnmadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fnmadd_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fnmadd_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fnmadd_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fnmadd_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "c8211ab9005ba45254c99ec01439bd8298bd7022", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fnmadd_ps (x1, m, x2, x3);\n   x3 = _mm512_mask3_fnmadd_ps (x1, x2, x3, m);\n   x1 = _mm512_maskz_fnmadd_ps (m, x1, x2, x3);\n-  x1 = _mm512_fnmadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fnmadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fnmadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fnmadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fnmadd_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fnmadd_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fnmadd_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fnmadd_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "2e2ac1639a470b6b38df648c01065fcb265673a6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fnmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fnmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "b28ed0a56f10d813e79d53289da8dee1a7d5bd77", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fnmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fnmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "664902aac1cb3d6312c2f03fd68a3d2b3c52b5b8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXpd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fnmsub_pd (x1, m, x2, x3);\n   x3 = _mm512_mask3_fnmsub_pd (x1, x2, x3, m);\n   x1 = _mm512_maskz_fnmsub_pd (m, x1, x2, x3);\n-  x1 = _mm512_fnmsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fnmsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fnmsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fnmsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fnmsub_round_pd (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fnmsub_round_pd (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fnmsub_round_pd (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fnmsub_round_pd (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "c0751e9a3a54b3f4b209054c3c19986c87495b1e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXps-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -21,8 +21,8 @@ avx512f_test (void)\n   x1 = _mm512_mask_fnmsub_ps (x1, m, x2, x3);\n   x3 = _mm512_mask3_fnmsub_ps (x1, x2, x3, m);\n   x1 = _mm512_maskz_fnmsub_ps (m, x1, x2, x3);\n-  x1 = _mm512_fnmsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT);\n-  x1 = _mm512_mask_fnmsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF);\n-  x3 = _mm512_mask3_fnmsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF);\n-  x1 = _mm512_maskz_fnmsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO);\n+  x1 = _mm512_fnmsub_round_ps (x1, x2, x3, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_fnmsub_round_ps (x1, m, x2, x3, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x3 = _mm512_mask3_fnmsub_round_ps (x1, x2, x3, m, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_fnmsub_round_ps (m, x1, x2, x3, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "2c7b0453a869abe007ff5ee9b8dd5306c7447407", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fnmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fnmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "ad25c62f0961246c7f5ea4fb60a1eb613bc03aa0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 a, b, c;\n void extern\n avx512f_test (void)\n {\n-  a = _mm_fnmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+  a = _mm_fnmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "944e54fb82e2c05aa14ddea31854d63763d2b977", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulpd-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_mul_pd (x, x);\n   x = _mm512_mask_mul_pd (x, m, x, x);\n   x = _mm512_maskz_mul_pd (m, x, x);\n-  x = _mm512_mul_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_mul_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_mul_round_pd (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_mul_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_mul_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_mul_round_pd (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "273b82d67175ec8ff4187042319ddf95dc669ff5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_mul_ps (x, x);\n   x = _mm512_mask_mul_ps (x, m, x, x);\n   x = _mm512_maskz_mul_ps (m, x, x);\n-  x = _mm512_mul_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_mul_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_mul_round_ps (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_mul_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_mul_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_mul_round_ps (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "1726f7aa43b01de59ee8083c583dede8d277e5c3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_mul_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_mul_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "a3435f800e8ae102e05e58c36bd692e042be9333", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_mul_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_mul_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "884a3d4af131727ec0d0108cdc7da0d9d76ab6ed", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefpd-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_scalef_pd (x, x);\n   x = _mm512_mask_scalef_pd (x, m, x, x);\n   x = _mm512_maskz_scalef_pd (m, x, x);\n-  x = _mm512_scalef_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_scalef_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_scalef_round_pd (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_scalef_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_scalef_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_scalef_round_pd (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "8299f60ed162a2ef0246f3b519aa94a3eafc69e5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_scalef_ps (x, x);\n   x = _mm512_mask_scalef_ps (x, m, x, x);\n   x = _mm512_maskz_scalef_ps (m, x, x);\n-  x = _mm512_scalef_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_scalef_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_scalef_round_ps (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_scalef_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_scalef_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_scalef_round_ps (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "ab3a791a9cbd76e056c64865a8e814030049d56a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -11,5 +11,5 @@ void extern\n avx512f_test (void)\n {\n   x = _mm_scalef_sd (x, x);\n-  x = _mm_scalef_round_sd (x, x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm_scalef_round_sd (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "93ea8a10795a939f56d76583ab13a5ce81c58ef6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -11,5 +11,5 @@ void extern\n avx512f_test (void)\n {\n   x = _mm_scalef_ss (x, x);\n-  x = _mm_scalef_round_ss (x, x, _MM_FROUND_TO_NEAREST_INT);\n+  x = _mm_scalef_round_ss (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "cd85b291cee87f51682136130c5786ca12634fa9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtpd-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_sqrt_pd (x);\n   x = _mm512_mask_sqrt_pd (x, m, x);\n   x = _mm512_maskz_sqrt_pd (m, x);\n-  x = _mm512_sqrt_round_pd (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_sqrt_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_sqrt_round_pd (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_sqrt_round_pd (x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_sqrt_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_sqrt_round_pd (m, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "0e7fcb5e46e03fd83c9fb634f518ed55e0b56b79", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_sqrt_ps (x);\n   x = _mm512_mask_sqrt_ps (x, m, x);\n   x = _mm512_maskz_sqrt_ps (m, x);\n-  x = _mm512_sqrt_round_ps (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_sqrt_round_ps (x, m, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_sqrt_round_ps (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_sqrt_round_ps (x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_sqrt_round_ps (x, m, x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_sqrt_round_ps (m, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "80ad41403650b568665e1ee02b676b63fba62574", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_sqrt_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_sqrt_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "a3bb68f79dfed1d9141751aaf9381dac85c2edc2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_sqrt_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_sqrt_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "5a9cc9fb0d06c88c7524f18e16bcf3f10da218a5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubpd-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubpd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_sub_pd (x, x);\n   x = _mm512_mask_sub_pd (x, m, x, x);\n   x = _mm512_maskz_sub_pd (m, x, x);\n-  x = _mm512_sub_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_sub_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_sub_round_pd (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_sub_round_pd (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_sub_round_pd (x, m, x, x, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_sub_round_pd (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "7f711f316b3e31797361cc5a980e3fd2283743e4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubps-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -18,7 +18,7 @@ avx512f_test (void)\n   x = _mm512_sub_ps (x, x);\n   x = _mm512_mask_sub_ps (x, m, x, x);\n   x = _mm512_maskz_sub_ps (m, x, x);\n-  x = _mm512_sub_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_sub_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_sub_round_ps (m, x, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_sub_round_ps (x, x, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_sub_round_ps (x, m, x, x, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_sub_round_ps (m, x, x, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n }"}, {"sha": "ad552f765120674d4361df112da2120dcf01a90a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubsd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128d x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_sub_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_sub_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "809c515975f0b76e92359541c00f42ed7ce9e7c4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubss-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -9,5 +9,5 @@ volatile __m128 x1, x2;\n void extern\n avx512f_test (void)\n {\n-  x1 = _mm_sub_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+  x1 = _mm_sub_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n }"}, {"sha": "72eabc6d7486c275a9d1acf32c85a284315189cf", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 141, "deletions": 141, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -198,86 +198,86 @@\n #define __builtin_ia32_xabort (N) __builtin_ia32_xabort (1)\n \n /* avx512fintrin.h */\n-#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_addsd_mask(A, B, C, D, E) __builtin_ia32_addsd_mask(A, B, C, D, 1)\n-#define __builtin_ia32_addss_mask(A, B, C, D, E) __builtin_ia32_addss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_addsd_mask(A, B, C, D, E) __builtin_ia32_addsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_addss_mask(A, B, C, D, E) __builtin_ia32_addss_mask(A, B, C, D, 8)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n-#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 8)\n #define __builtin_ia32_cmpq512_mask(A, B, E, D) __builtin_ia32_cmpq512_mask(A, B, 1, D)\n-#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtsd2ss_mask(A, B, C, D, E) __builtin_ia32_cvtsd2ss_mask(A, B, C, D, 1)\n-#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 1)\n-#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 1)\n-#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 1)\n-#define __builtin_ia32_cvtss2sd_mask(A, B, C, D, E) __builtin_ia32_cvtss2sd_mask(A, B, C, D, 5)\n-#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 1)\n-#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 1)\n-#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 1)\n-#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_divsd_mask(A, B, C, D, E) __builtin_ia32_divsd_mask(A, B, C, D, 1)\n-#define __builtin_ia32_divss_mask(A, B, C, D, E) __builtin_ia32_divss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtsd2ss_mask(A, B, C, D, E) __builtin_ia32_cvtsd2ss_mask(A, B, C, D, 8)\n+#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 8)\n+#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 8)\n+#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 8)\n+#define __builtin_ia32_cvtss2sd_mask(A, B, C, D, E) __builtin_ia32_cvtss2sd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 8)\n+#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 8)\n+#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 8)\n+#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_divsd_mask(A, B, C, D, E) __builtin_ia32_divsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_divss_mask(A, B, C, D, E) __builtin_ia32_divss_mask(A, B, C, D, 8)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n-#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 5)\n-#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 5)\n-#define __builtin_ia32_getexpsd128_mask(A, B, C, D, E) __builtin_ia32_getexpsd128_mask(A, B, C, D, 5)\n-#define __builtin_ia32_getexpss128_mask(A, B, C, D, E) __builtin_ia32_getexpss128_mask(A, B, C, D, 5)\n-#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_getmantsd_mask(A, B, I, D, E, F) __builtin_ia32_getmantsd_mask(A, B, 1, D, E, 5)\n-#define __builtin_ia32_getmantss_mask(A, B, I, D, E, F) __builtin_ia32_getmantss_mask(A, B, 1, D, E, 5)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 8)\n+#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 8)\n+#define __builtin_ia32_getexpsd128_mask(A, B, C, D, E) __builtin_ia32_getexpsd128_mask(A, B, C, D, 8)\n+#define __builtin_ia32_getexpss128_mask(A, B, C, D, E) __builtin_ia32_getexpss128_mask(A, B, C, D, 8)\n+#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_getmantsd_mask(A, B, I, D, E, F) __builtin_ia32_getmantsd_mask(A, B, 1, D, E, 8)\n+#define __builtin_ia32_getmantss_mask(A, B, I, D, E, F) __builtin_ia32_getmantss_mask(A, B, 1, D, E, 8)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti64x4_mask(A, B, F, D, E) __builtin_ia32_inserti64x4_mask(A, B, 1, D, E)\n-#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_maxsd_mask(A, B, C, D, E) __builtin_ia32_maxsd_mask(A, B, C, D, 5)\n-#define __builtin_ia32_maxss_mask(A, B, C, D, E) __builtin_ia32_maxss_mask(A, B, C, D, 5)\n-#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_minsd_mask(A, B, C, D, E) __builtin_ia32_minsd_mask(A, B, C, D, 5)\n-#define __builtin_ia32_minss_mask(A, B, C, D, E) __builtin_ia32_minss_mask(A, B, C, D, 5)\n-#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_mulsd_mask(A, B, C, D, E) __builtin_ia32_mulsd_mask(A, B, C, D, 1)\n-#define __builtin_ia32_mulss_mask(A, B, C, D, E) __builtin_ia32_mulss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_maxsd_mask(A, B, C, D, E) __builtin_ia32_maxsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_maxss_mask(A, B, C, D, E) __builtin_ia32_maxss_mask(A, B, C, D, 8)\n+#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_minsd_mask(A, B, C, D, E) __builtin_ia32_minsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_minss_mask(A, B, C, D, E) __builtin_ia32_minss_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulsd_mask(A, B, C, D, E) __builtin_ia32_mulsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulss_mask(A, B, C, D, E) __builtin_ia32_mulss_mask(A, B, C, D, 8)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)\n@@ -295,88 +295,88 @@\n #define __builtin_ia32_pternlogd512_maskz(A, B, C, F, E) __builtin_ia32_pternlogd512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_pternlogq512_mask(A, B, C, F, E) __builtin_ia32_pternlogq512_mask(A, B, C, 1, E)\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_rndscalesd_mask(A, B, I, D, E, F) __builtin_ia32_rndscalesd_mask(A, B, 1, D, E, 5)\n-#define __builtin_ia32_rndscaless_mask(A, B, I, D, E, F) __builtin_ia32_rndscaless_mask(A, B, 1, D, E, 5)\n-#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scalefsd_mask(A, B, C, D, E) __builtin_ia32_scalefsd_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scalefss_mask(A, B, C, D, E) __builtin_ia32_scalefss_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_rndscalesd_mask(A, B, I, D, E, F) __builtin_ia32_rndscalesd_mask(A, B, 1, D, E, 8)\n+#define __builtin_ia32_rndscaless_mask(A, B, I, D, E, F) __builtin_ia32_rndscaless_mask(A, B, 1, D, E, 8)\n+#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scalefsd_mask(A, B, C, D, E) __builtin_ia32_scalefsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scalefss_mask(A, B, C, D, E) __builtin_ia32_scalefss_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 8)\n #define __builtin_ia32_shuf_f32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_f32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_f64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_f64x2_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_i32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_i32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_i64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_i64x2_mask(A, B, 1, D, E)\n #define __builtin_ia32_shufpd512_mask(A, B, F, D, E) __builtin_ia32_shufpd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n-#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 1)\n-#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 1)\n-#define __builtin_ia32_sqrtsd_mask(A, B, C, D, E) __builtin_ia32_sqrtsd_mask(A, B, C, D, 1)\n-#define __builtin_ia32_sqrtss_mask(A, B, C, D, E) __builtin_ia32_sqrtss_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subsd_mask(A, B, C, D, E) __builtin_ia32_subsd_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subss_mask(A, B, C, D, E) __builtin_ia32_subss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 8)\n+#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 8)\n+#define __builtin_ia32_sqrtsd_mask(A, B, C, D, E) __builtin_ia32_sqrtsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_sqrtss_mask(A, B, C, D, E) __builtin_ia32_sqrtss_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subsd_mask(A, B, C, D, E) __builtin_ia32_subsd_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subss_mask(A, B, C, D, E) __builtin_ia32_subss_mask(A, B, C, D, 8)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n-#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 5)\n-#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 5)\n-#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 5)\n+#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 8)\n+#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 8)\n+#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 8)\n #define __builtin_ia32_vcvtps2ph512_mask(A, E, C, D) __builtin_ia32_vcvtps2ph512_mask(A, 1, C, D)\n-#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 1)\n-#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 1)\n-#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 1)\n-#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 1)\n-#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 1)\n-#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 1)\n-#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 1)\n-#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 1)\n-#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 5)\n-#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 5)\n-#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 5)\n-#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 5)\n-#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 5)\n-#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 5)\n-#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 5)\n-#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 5)\n-#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 8)\n+#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 8)\n+#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 8)\n+#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 8)\n+#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 8)\n+#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 8)\n+#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 8)\n+#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 8)\n+#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 8)\n+#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 8)\n+#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 8)\n+#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 8)\n+#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 8)\n+#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 8)\n+#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 8)\n+#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 8)\n+#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n "}, {"sha": "623c495ca59622ed217156976f7a46627e63115c", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 237, "deletions": 237, "changes": 474, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -142,34 +142,34 @@ test_2 (_mm256_insert_epi32, __m256i, __m256i, int, 3)\n #ifdef __x86_64__\n test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n #endif\n-test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n-test_1 (_mm256_round_ps, __m256, __m256, 1)\n+test_1 (_mm256_round_pd, __m256d, __m256d, 9)\n+test_1 (_mm256_round_ps, __m256, __m256, 9)\n test_1 (_cvtss_sh, unsigned short, float, 1)\n test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n test_0 (_xabort, void, 1)\n-test_1 (_mm512_cvt_roundepi32_ps, __m512, __m512i, 1)\n-test_1 (_mm512_cvt_roundepu32_ps, __m512, __m512i, 1)\n-test_1 (_mm512_cvt_roundpd_epi32, __m256i, __m512d, 1)\n-test_1 (_mm512_cvt_roundpd_epu32, __m256i, __m512d, 1)\n-test_1 (_mm512_cvt_roundpd_ps, __m256, __m512d, 1)\n-test_1 (_mm512_cvt_roundph_ps, __m512, __m256i, 5)\n-test_1 (_mm512_cvt_roundps_epi32, __m512i, __m512, 1)\n-test_1 (_mm512_cvt_roundps_epu32, __m512i, __m512, 1)\n-test_1 (_mm512_cvt_roundps_pd, __m512d, __m256, 5)\n+test_1 (_mm512_cvt_roundepi32_ps, __m512, __m512i, 9)\n+test_1 (_mm512_cvt_roundepu32_ps, __m512, __m512i, 9)\n+test_1 (_mm512_cvt_roundpd_epi32, __m256i, __m512d, 9)\n+test_1 (_mm512_cvt_roundpd_epu32, __m256i, __m512d, 9)\n+test_1 (_mm512_cvt_roundpd_ps, __m256, __m512d, 9)\n+test_1 (_mm512_cvt_roundph_ps, __m512, __m256i, 8)\n+test_1 (_mm512_cvt_roundps_epi32, __m512i, __m512, 9)\n+test_1 (_mm512_cvt_roundps_epu32, __m512i, __m512, 9)\n+test_1 (_mm512_cvt_roundps_pd, __m512d, __m256, 8)\n test_1 (_mm512_cvtps_ph, __m256i, __m512, 1)\n-test_1 (_mm512_cvtt_roundpd_epi32, __m256i, __m512d, 5)\n-test_1 (_mm512_cvtt_roundpd_epu32, __m256i, __m512d, 5)\n-test_1 (_mm512_cvtt_roundps_epi32, __m512i, __m512, 5)\n-test_1 (_mm512_cvtt_roundps_epu32, __m512i, __m512, 5)\n+test_1 (_mm512_cvtt_roundpd_epi32, __m256i, __m512d, 8)\n+test_1 (_mm512_cvtt_roundpd_epu32, __m256i, __m512d, 8)\n+test_1 (_mm512_cvtt_roundps_epi32, __m512i, __m512, 8)\n+test_1 (_mm512_cvtt_roundps_epu32, __m512i, __m512, 8)\n test_1 (_mm512_extractf32x4_ps, __m128, __m512, 1)\n test_1 (_mm512_extractf64x4_pd, __m256d, __m512d, 1)\n test_1 (_mm512_extracti32x4_epi32, __m128i, __m512i, 1)\n test_1 (_mm512_extracti64x4_epi64, __m256i, __m512i, 1)\n-test_1 (_mm512_getexp_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_getexp_round_ps, __m512, __m512, 5)\n-test_1y (_mm512_getmant_round_pd, __m512d, __m512d, 1, 1, 5)\n-test_1y (_mm512_getmant_round_ps, __m512, __m512, 1, 1, 5)\n+test_1 (_mm512_getexp_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_getexp_round_ps, __m512, __m512, 8)\n+test_1y (_mm512_getmant_round_pd, __m512d, __m512d, 1, 1, 8)\n+test_1y (_mm512_getmant_round_ps, __m512, __m512, 1, 1, 8)\n test_1 (_mm512_permute_pd, __m512d, __m512d, 1)\n test_1 (_mm512_permute_ps, __m512, __m512, 1)\n test_1 (_mm512_permutex_epi64, __m512i, __m512i, 1)\n@@ -181,27 +181,27 @@ test_1 (_mm512_ror_epi64, __m512i, __m512i, 1)\n test_1 (_mm512_shuffle_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_slli_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_slli_epi64, __m512i, __m512i, 1)\n-test_1 (_mm512_sqrt_round_pd, __m512d, __m512d, 1)\n-test_1 (_mm512_sqrt_round_ps, __m512, __m512, 1)\n+test_1 (_mm512_sqrt_round_pd, __m512d, __m512d, 9)\n+test_1 (_mm512_sqrt_round_ps, __m512, __m512, 9)\n test_1 (_mm512_srai_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_srai_epi64, __m512i, __m512i, 1)\n test_1 (_mm512_srli_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_srli_epi64, __m512i, __m512i, 1)\n-test_1 (_mm_cvt_roundsd_i32, int, __m128d, 1)\n-test_1 (_mm_cvt_roundsd_u32, unsigned, __m128d, 1)\n-test_1 (_mm_cvt_roundss_i32, int, __m128, 1)\n-test_1 (_mm_cvt_roundss_u32, unsigned, __m128, 1)\n-test_1 (_mm_cvtt_roundsd_i32, int, __m128d, 5)\n-test_1 (_mm_cvtt_roundsd_u32, unsigned, __m128d, 5)\n-test_1 (_mm_cvtt_roundss_i32, int, __m128, 5)\n-test_1 (_mm_cvtt_roundss_u32, unsigned, __m128, 5)\n+test_1 (_mm_cvt_roundsd_i32, int, __m128d, 9)\n+test_1 (_mm_cvt_roundsd_u32, unsigned, __m128d, 9)\n+test_1 (_mm_cvt_roundss_i32, int, __m128, 9)\n+test_1 (_mm_cvt_roundss_u32, unsigned, __m128, 9)\n+test_1 (_mm_cvtt_roundsd_i32, int, __m128d, 8)\n+test_1 (_mm_cvtt_roundsd_u32, unsigned, __m128d, 8)\n+test_1 (_mm_cvtt_roundss_i32, int, __m128, 8)\n+test_1 (_mm_cvtt_roundss_u32, unsigned, __m128, 8)\n test_1x (_mm512_getmant_pd, __m512d, __m512d, 1, 1)\n test_1x (_mm512_getmant_ps, __m512, __m512, 1, 1)\n-test_1x (_mm512_roundscale_round_pd, __m512d, __m512d, 1, 5)\n-test_1x (_mm512_roundscale_round_ps, __m512, __m512, 1, 5)\n-test_1x (_mm_cvt_roundi32_ss, __m128, __m128, 1, 1)\n-test_2 (_mm512_add_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_add_round_ps, __m512, __m512, __m512, 1)\n+test_1x (_mm512_roundscale_round_pd, __m512d, __m512d, 1, 8)\n+test_1x (_mm512_roundscale_round_ps, __m512, __m512, 1, 8)\n+test_1x (_mm_cvt_roundi32_ss, __m128, __m128, 1, 9)\n+test_2 (_mm512_add_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_add_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm512_alignr_epi32, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_alignr_epi64, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_cmp_epi32_mask, __mmask16, __m512i, __m512i, 1)\n@@ -210,8 +210,8 @@ test_2 (_mm512_cmp_epu32_mask, __mmask16, __m512i, __m512i, 1)\n test_2 (_mm512_cmp_epu64_mask, __mmask8, __m512i, __m512i, 1)\n test_2 (_mm512_cmp_pd_mask, __mmask8, __m512d, __m512d, 1)\n test_2 (_mm512_cmp_ps_mask, __mmask16, __m512, __m512, 1)\n-test_2 (_mm512_div_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_div_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_div_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_div_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm512_i32gather_epi32, __m512i, __m512i, void const *, 1)\n test_2 (_mm512_i32gather_epi64, __m512i, __m256i, void const *, 1)\n test_2 (_mm512_i32gather_pd, __m512d, __m256i, void const *, 1)\n@@ -224,28 +224,28 @@ test_2 (_mm512_insertf32x4, __m512, __m512, __m128, 1)\n test_2 (_mm512_insertf64x4, __m512d, __m512d, __m256d, 1)\n test_2 (_mm512_inserti32x4, __m512i, __m512i, __m128i, 1)\n test_2 (_mm512_inserti64x4, __m512i, __m512i, __m256i, 1)\n-test_2 (_mm512_maskz_cvt_roundepi32_ps, __m512, __mmask16, __m512i, 1)\n-test_2 (_mm512_maskz_cvt_roundepu32_ps, __m512, __mmask16, __m512i, 1)\n-test_2 (_mm512_maskz_cvt_roundpd_epi32, __m256i, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_cvt_roundpd_epu32, __m256i, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_cvt_roundpd_ps, __m256, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_cvt_roundph_ps, __m512, __mmask16, __m256i, 5)\n-test_2 (_mm512_maskz_cvt_roundps_epi32, __m512i, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_cvt_roundps_epu32, __m512i, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_cvt_roundps_pd, __m512d, __mmask8, __m256, 5)\n+test_2 (_mm512_maskz_cvt_roundepi32_ps, __m512, __mmask16, __m512i, 9)\n+test_2 (_mm512_maskz_cvt_roundepu32_ps, __m512, __mmask16, __m512i, 9)\n+test_2 (_mm512_maskz_cvt_roundpd_epi32, __m256i, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_cvt_roundpd_epu32, __m256i, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_cvt_roundpd_ps, __m256, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_cvt_roundph_ps, __m512, __mmask16, __m256i, 8)\n+test_2 (_mm512_maskz_cvt_roundps_epi32, __m512i, __mmask16, __m512, 9)\n+test_2 (_mm512_maskz_cvt_roundps_epu32, __m512i, __mmask16, __m512, 9)\n+test_2 (_mm512_maskz_cvt_roundps_pd, __m512d, __mmask8, __m256, 8)\n test_2 (_mm512_maskz_cvtps_ph, __m256i, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_cvtt_roundpd_epi32, __m256i, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_cvtt_roundpd_epu32, __m256i, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_cvtt_roundps_epi32, __m512i, __mmask16, __m512, 5)\n-test_2 (_mm512_maskz_cvtt_roundps_epu32, __m512i, __mmask16, __m512, 5)\n+test_2 (_mm512_maskz_cvtt_roundpd_epi32, __m256i, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_cvtt_roundpd_epu32, __m256i, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_cvtt_roundps_epi32, __m512i, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_cvtt_roundps_epu32, __m512i, __mmask16, __m512, 8)\n test_2 (_mm512_maskz_extractf32x4_ps, __m128, __mmask8, __m512, 1)\n test_2 (_mm512_maskz_extractf64x4_pd, __m256d, __mmask8, __m512d, 1)\n test_2 (_mm512_maskz_extracti32x4_epi32, __m128i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_extracti64x4_epi64, __m256i, __mmask8, __m512i, 1)\n-test_2 (_mm512_maskz_getexp_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_getexp_round_ps, __m512, __mmask16, __m512, 5)\n-test_2y (_mm512_maskz_getmant_round_pd, __m512d, __mmask8, __m512d, 1, 1, 5)\n-test_2y (_mm512_maskz_getmant_round_ps, __m512, __mmask16, __m512, 1, 1, 5)\n+test_2 (_mm512_maskz_getexp_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_getexp_round_ps, __m512, __mmask16, __m512, 8)\n+test_2y (_mm512_maskz_getmant_round_pd, __m512d, __mmask8, __m512d, 1, 1, 8)\n+test_2y (_mm512_maskz_getmant_round_ps, __m512, __mmask16, __m512, 1, 1, 8)\n test_2 (_mm512_maskz_permute_pd, __m512d, __mmask8, __m512d, 1)\n test_2 (_mm512_maskz_permute_ps, __m512, __mmask16, __m512, 1)\n test_2 (_mm512_maskz_permutex_epi64, __m512i, __mmask8, __m512i, 1)\n@@ -257,107 +257,107 @@ test_2 (_mm512_maskz_ror_epi64, __m512i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_shuffle_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_slli_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_slli_epi64, __m512i, __mmask8, __m512i, 1)\n-test_2 (_mm512_maskz_sqrt_round_pd, __m512d, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_sqrt_round_ps, __m512, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_sqrt_round_pd, __m512d, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_sqrt_round_ps, __m512, __mmask16, __m512, 9)\n test_2 (_mm512_maskz_srai_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_srai_epi64, __m512i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_srli_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_srli_epi64, __m512i, __mmask8, __m512i, 1)\n-test_2 (_mm512_max_round_pd, __m512d, __m512d, __m512d, 5)\n-test_2 (_mm512_max_round_ps, __m512, __m512, __m512, 5)\n-test_2 (_mm512_min_round_pd, __m512d, __m512d, __m512d, 5)\n-test_2 (_mm512_min_round_ps, __m512, __m512, __m512, 5)\n-test_2 (_mm512_mul_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_mul_round_ps, __m512, __m512, __m512, 1)\n-test_2 (_mm512_scalef_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_scalef_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_max_round_pd, __m512d, __m512d, __m512d, 8)\n+test_2 (_mm512_max_round_ps, __m512, __m512, __m512, 8)\n+test_2 (_mm512_min_round_pd, __m512d, __m512d, __m512d, 8)\n+test_2 (_mm512_min_round_ps, __m512, __m512, __m512, 8)\n+test_2 (_mm512_mul_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_mul_round_ps, __m512, __m512, __m512, 9)\n+test_2 (_mm512_scalef_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_scalef_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm512_shuffle_f32x4, __m512, __m512, __m512, 1)\n test_2 (_mm512_shuffle_f64x2, __m512d, __m512d, __m512d, 1)\n test_2 (_mm512_shuffle_i32x4, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_shuffle_i64x2, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_shuffle_pd, __m512d, __m512d, __m512d, 1)\n test_2 (_mm512_shuffle_ps, __m512, __m512, __m512, 1)\n-test_2 (_mm512_sub_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_sub_round_ps, __m512, __m512, __m512, 1)\n-test_2 (_mm_add_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_add_round_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm512_sub_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_sub_round_ps, __m512, __m512, __m512, 9)\n+test_2 (_mm_add_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_add_round_ss, __m128, __m128, __m128, 9)\n test_2 (_mm_cmp_sd_mask, __mmask8, __m128d, __m128d, 1)\n test_2 (_mm_cmp_ss_mask, __mmask8, __m128, __m128, 1)\n #ifdef __x86_64__\n-test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 1)\n-test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 1)\n+test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 9)\n+test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 9)\n #endif\n-test_2 (_mm_cvt_roundsd_ss, __m128, __m128, __m128d, 1)\n-test_2 (_mm_cvt_roundss_sd, __m128d, __m128d, __m128, 5)\n-test_2 (_mm_cvt_roundu32_ss, __m128, __m128, unsigned, 1)\n+test_2 (_mm_cvt_roundsd_ss, __m128, __m128, __m128d, 9)\n+test_2 (_mm_cvt_roundss_sd, __m128d, __m128d, __m128, 8)\n+test_2 (_mm_cvt_roundu32_ss, __m128, __m128, unsigned, 9)\n #ifdef __x86_64__\n-test_2 (_mm_cvt_roundu64_sd, __m128d, __m128d, unsigned long long, 1)\n-test_2 (_mm_cvt_roundu64_ss, __m128, __m128, unsigned long long, 1)\n+test_2 (_mm_cvt_roundu64_sd, __m128d, __m128d, unsigned long long, 9)\n+test_2 (_mm_cvt_roundu64_ss, __m128, __m128, unsigned long long, 9)\n #endif\n-test_2 (_mm_div_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_div_round_ss, __m128, __m128, __m128, 1)\n-test_2 (_mm_getexp_round_sd, __m128d, __m128d, __m128d, 5)\n-test_2 (_mm_getexp_round_ss, __m128, __m128, __m128, 5)\n-test_2y (_mm_getmant_round_sd, __m128d, __m128d, __m128d, 1, 1, 5)\n-test_2y (_mm_getmant_round_ss, __m128, __m128, __m128, 1, 1, 5)\n-test_2 (_mm_mul_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_mul_round_ss, __m128, __m128, __m128, 1)\n-test_2 (_mm_scalef_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_scalef_round_ss, __m128, __m128, __m128, 1)\n-test_2 (_mm_sqrt_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_sqrt_round_ss, __m128, __m128, __m128, 1)\n-test_2 (_mm_sub_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_sub_round_ss, __m128, __m128, __m128, 1)\n-test_2x (_mm512_cmp_round_pd_mask, __mmask8, __m512d, __m512d, 1, 5)\n-test_2x (_mm512_cmp_round_ps_mask, __mmask16, __m512, __m512, 1, 5)\n-test_2x (_mm512_maskz_roundscale_round_pd, __m512d, __mmask8, __m512d, 1, 5)\n-test_2x (_mm512_maskz_roundscale_round_ps, __m512, __mmask16, __m512, 1, 5)\n-test_2x (_mm_cmp_round_sd_mask, __mmask8, __m128d, __m128d, 1, 5)\n-test_2x (_mm_cmp_round_ss_mask, __mmask8, __m128, __m128, 1, 5)\n-test_2x (_mm_comi_round_sd, int, __m128d, __m128d, 1, 5)\n-test_2x (_mm_comi_round_ss, int, __m128, __m128, 1, 5)\n-test_2x (_mm_roundscale_round_sd, __m128d, __m128d, __m128d, 1, 5)\n-test_2x (_mm_roundscale_round_ss, __m128, __m128, __m128, 1, 5)\n-test_3 (_mm512_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmadd_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmaddsub_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmsub_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmsubadd_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fnmadd_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fnmsub_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_2 (_mm_div_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_div_round_ss, __m128, __m128, __m128, 9)\n+test_2 (_mm_getexp_round_sd, __m128d, __m128d, __m128d, 8)\n+test_2 (_mm_getexp_round_ss, __m128, __m128, __m128, 8)\n+test_2y (_mm_getmant_round_sd, __m128d, __m128d, __m128d, 1, 1, 8)\n+test_2y (_mm_getmant_round_ss, __m128, __m128, __m128, 1, 1, 8)\n+test_2 (_mm_mul_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_mul_round_ss, __m128, __m128, __m128, 9)\n+test_2 (_mm_scalef_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_scalef_round_ss, __m128, __m128, __m128, 9)\n+test_2 (_mm_sqrt_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_sqrt_round_ss, __m128, __m128, __m128, 9)\n+test_2 (_mm_sub_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_sub_round_ss, __m128, __m128, __m128, 9)\n+test_2x (_mm512_cmp_round_pd_mask, __mmask8, __m512d, __m512d, 1, 8)\n+test_2x (_mm512_cmp_round_ps_mask, __mmask16, __m512, __m512, 1, 8)\n+test_2x (_mm512_maskz_roundscale_round_pd, __m512d, __mmask8, __m512d, 1, 8)\n+test_2x (_mm512_maskz_roundscale_round_ps, __m512, __mmask16, __m512, 1, 8)\n+test_2x (_mm_cmp_round_sd_mask, __mmask8, __m128d, __m128d, 1, 8)\n+test_2x (_mm_cmp_round_ss_mask, __mmask8, __m128, __m128, 1, 8)\n+test_2x (_mm_comi_round_sd, int, __m128d, __m128d, 1, 8)\n+test_2x (_mm_comi_round_ss, int, __m128, __m128, 1, 8)\n+test_2x (_mm_roundscale_round_sd, __m128d, __m128d, __m128d, 1, 8)\n+test_2x (_mm_roundscale_round_ss, __m128, __m128, __m128, 1, 8)\n+test_3 (_mm512_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmadd_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmaddsub_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmsub_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmsubadd_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fnmadd_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fnmsub_round_ps, __m512, __m512, __m512, __m512, 9)\n test_3 (_mm512_mask_cmp_epi32_mask, __mmask16, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_epi64_mask, __mmask8, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_epu32_mask, __mmask16, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_epu64_mask, __mmask8, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_pd_mask, __mmask8, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_mask_cmp_ps_mask, __mmask16, __mmask16, __m512, __m512, 1)\n-test_3 (_mm512_mask_cvt_roundepi32_ps, __m512, __m512, __mmask16, __m512i, 1)\n-test_3 (_mm512_mask_cvt_roundepu32_ps, __m512, __m512, __mmask16, __m512i, 1)\n-test_3 (_mm512_mask_cvt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_cvt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_cvt_roundpd_ps, __m256, __m256, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_cvt_roundph_ps, __m512, __m512, __mmask16, __m256i, 5)\n-test_3 (_mm512_mask_cvt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_cvt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_cvt_roundps_pd, __m512d, __m512d, __mmask8, __m256, 5)\n+test_3 (_mm512_mask_cvt_roundepi32_ps, __m512, __m512, __mmask16, __m512i, 9)\n+test_3 (_mm512_mask_cvt_roundepu32_ps, __m512, __m512, __mmask16, __m512i, 9)\n+test_3 (_mm512_mask_cvt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_cvt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_cvt_roundpd_ps, __m256, __m256, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_cvt_roundph_ps, __m512, __m512, __mmask16, __m256i, 8)\n+test_3 (_mm512_mask_cvt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 9)\n+test_3 (_mm512_mask_cvt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 9)\n+test_3 (_mm512_mask_cvt_roundps_pd, __m512d, __m512d, __mmask8, __m256, 8)\n test_3 (_mm512_mask_cvtps_ph, __m256i, __m256i, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_cvtt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_cvtt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_cvtt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_cvtt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 5)\n+test_3 (_mm512_mask_cvtt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_cvtt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_cvtt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_cvtt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 8)\n test_3 (_mm512_mask_extractf32x4_ps, __m128, __m128, __mmask8, __m512, 1)\n test_3 (_mm512_mask_extractf64x4_pd, __m256d, __m256d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_extracti32x4_epi32, __m128i, __m128i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_extracti64x4_epi64, __m256i, __m256i, __mmask8, __m512i, 1)\n-test_3 (_mm512_mask_getexp_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_getexp_round_ps, __m512, __m512, __mmask16, __m512, 5)\n-test_3y (_mm512_mask_getmant_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 1, 5)\n-test_3y (_mm512_mask_getmant_round_ps, __m512, __m512, __mmask16, __m512, 1, 1, 5)\n+test_3 (_mm512_mask_getexp_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_getexp_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_3y (_mm512_mask_getmant_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 1, 8)\n+test_3y (_mm512_mask_getmant_round_ps, __m512, __m512, __mmask16, __m512, 1, 1, 8)\n test_3 (_mm512_mask_permute_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_permute_ps, __m512, __m512, __mmask16, __m512, 1)\n test_3 (_mm512_mask_permutex_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n@@ -369,48 +369,48 @@ test_3 (_mm512_mask_ror_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_shuffle_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_slli_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_slli_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n-test_3 (_mm512_mask_sqrt_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_sqrt_round_ps, __m512, __m512, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_sqrt_round_pd, __m512d, __m512d, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_sqrt_round_ps, __m512, __m512, __mmask16, __m512, 9)\n test_3 (_mm512_mask_srai_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_srai_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_srli_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_srli_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n-test_3 (_mm512_maskz_add_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_add_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_add_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_add_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_maskz_alignr_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_alignr_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n-test_3 (_mm512_maskz_div_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_div_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_div_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_div_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_maskz_insertf32x4, __m512, __mmask16, __m512, __m128, 1)\n test_3 (_mm512_maskz_insertf64x4, __m512d, __mmask8, __m512d, __m256d, 1)\n test_3 (_mm512_maskz_inserti32x4, __m512i, __mmask16, __m512i, __m128i, 1)\n test_3 (_mm512_maskz_inserti64x4, __m512i, __mmask8, __m512i, __m256i, 1)\n-test_3 (_mm512_maskz_max_round_pd, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_3 (_mm512_maskz_max_round_ps, __m512, __mmask16, __m512, __m512, 5)\n-test_3 (_mm512_maskz_min_round_pd, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_3 (_mm512_maskz_min_round_ps, __m512, __mmask16, __m512, __m512, 5)\n-test_3 (_mm512_maskz_mul_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_mul_round_ps, __m512, __mmask16, __m512, __m512, 1)\n-test_3 (_mm512_maskz_scalef_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_scalef_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_max_round_pd, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_3 (_mm512_maskz_max_round_ps, __m512, __mmask16, __m512, __m512, 8)\n+test_3 (_mm512_maskz_min_round_pd, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_3 (_mm512_maskz_min_round_ps, __m512, __mmask16, __m512, __m512, 8)\n+test_3 (_mm512_maskz_mul_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_mul_round_ps, __m512, __mmask16, __m512, __m512, 9)\n+test_3 (_mm512_maskz_scalef_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_scalef_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_maskz_shuffle_f32x4, __m512, __mmask16, __m512, __m512, 1)\n test_3 (_mm512_maskz_shuffle_f64x2, __m512d, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_maskz_shuffle_i32x4, __m512i, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_shuffle_i64x2, __m512i, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_shuffle_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_maskz_shuffle_ps, __m512, __mmask16, __m512, __m512, 1)\n-test_3 (_mm512_maskz_sub_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_sub_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_sub_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_sub_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_ternarylogic_epi32, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm512_ternarylogic_epi64, __m512i, __m512i, __m512i, __m512i, 1)\n-test_3 (_mm_fmadd_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n-test_3 (_mm_fmadd_round_ss, __m128, __m128, __m128, __m128, 1)\n-test_3 (_mm_fmsub_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n-test_3 (_mm_fmsub_round_ss, __m128, __m128, __m128, __m128, 1)\n-test_3 (_mm_fnmadd_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n-test_3 (_mm_fnmadd_round_ss, __m128, __m128, __m128, __m128, 1)\n-test_3 (_mm_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n-test_3 (_mm_fnmsub_round_ss, __m128, __m128, __m128, __m128, 1)\n+test_3 (_mm_fmadd_round_sd, __m128d, __m128d, __m128d, __m128d, 9)\n+test_3 (_mm_fmadd_round_ss, __m128, __m128, __m128, __m128, 9)\n+test_3 (_mm_fmsub_round_sd, __m128d, __m128d, __m128d, __m128d, 9)\n+test_3 (_mm_fmsub_round_ss, __m128, __m128, __m128, __m128, 9)\n+test_3 (_mm_fnmadd_round_sd, __m128d, __m128d, __m128d, __m128d, 9)\n+test_3 (_mm_fnmadd_round_ss, __m128, __m128, __m128, __m128, 9)\n+test_3 (_mm_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, 9)\n+test_3 (_mm_fnmsub_round_ss, __m128, __m128, __m128, __m128, 9)\n test_3 (_mm_mask_cmp_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1)\n test_3 (_mm_mask_cmp_ss_mask, __mmask8, __mmask8, __m128, __m128, 1)\n test_3v (_mm512_i32scatter_epi32, void *, __m512i, __m512i, 1)\n@@ -421,42 +421,42 @@ test_3v (_mm512_i64scatter_epi32, void *, __m512i, __m256i, 1)\n test_3v (_mm512_i64scatter_epi64, void *, __m512i, __m512i, 1)\n test_3v (_mm512_i64scatter_pd, void *, __m512i, __m512d, 1)\n test_3v (_mm512_i64scatter_ps, void *, __m512i, __m256, 1)\n-test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 5)\n-test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 5)\n-test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 5)\n-test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 5)\n-test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 5)\n-test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 5)\n-test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmaddsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmsubadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fnmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fnmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask_add_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_add_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 8)\n+test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 8)\n+test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 8)\n+test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 8)\n+test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 8)\n+test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 8)\n+test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmaddsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmsubadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fnmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fnmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask_add_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_add_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_alignr_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_alignr_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n-test_4 (_mm512_mask_div_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_div_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmaddsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmaddsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmsubadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmsubadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fnmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fnmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fnmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fnmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_div_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_div_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmaddsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmaddsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmsubadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmsubadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fnmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fnmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fnmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fnmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_i32gather_epi32, __m512i, __m512i, __mmask16, __m512i, void const *, 1)\n test_4 (_mm512_mask_i32gather_epi64, __m512i, __m512i, __mmask8, __m256i, void const *, 1)\n test_4 (_mm512_mask_i32gather_pd, __m512d, __m512d, __mmask8, __m256i, void const *, 1)\n@@ -469,36 +469,36 @@ test_4 (_mm512_mask_insertf32x4, __m512, __m512, __mmask16, __m512, __m128, 1)\n test_4 (_mm512_mask_insertf64x4, __m512d, __m512d, __mmask8, __m512d, __m256d, 1)\n test_4 (_mm512_mask_inserti32x4, __m512i, __m512i, __mmask16, __m512i, __m128i, 1)\n test_4 (_mm512_mask_inserti64x4, __m512i, __m512i, __mmask8, __m512i, __m256i, 1)\n-test_4 (_mm512_mask_max_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_4 (_mm512_mask_max_round_ps, __m512, __m512, __mmask16, __m512, __m512, 5)\n-test_4 (_mm512_mask_min_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_4 (_mm512_mask_min_round_ps, __m512, __m512, __mmask16, __m512, __m512, 5)\n-test_4 (_mm512_mask_mul_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_mul_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_scalef_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_scalef_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_max_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_4 (_mm512_mask_max_round_ps, __m512, __m512, __mmask16, __m512, __m512, 8)\n+test_4 (_mm512_mask_min_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_4 (_mm512_mask_min_round_ps, __m512, __m512, __mmask16, __m512, __m512, 8)\n+test_4 (_mm512_mask_mul_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_mul_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_scalef_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_scalef_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_shuffle_f32x4, __m512, __m512, __mmask16, __m512, __m512, 1)\n test_4 (_mm512_mask_shuffle_f64x2, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n test_4 (_mm512_mask_shuffle_i32x4, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_shuffle_i64x2, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n test_4 (_mm512_mask_shuffle_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n test_4 (_mm512_mask_shuffle_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_sub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_sub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_sub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_sub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_ternarylogic_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_ternarylogic_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n-test_4 (_mm512_maskz_fmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fmaddsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmaddsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fmsubadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmsubadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fnmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fnmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fnmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fnmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_fmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fmaddsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmaddsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fmsubadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmsubadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fnmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fnmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fnmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fnmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n test_4 (_mm512_maskz_ternarylogic_epi32, __m512i, __mmask16, __m512i, __m512i, __m512i, 1)\n test_4 (_mm512_maskz_ternarylogic_epi64, __m512i, __mmask8, __m512i, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_epi32, void *, __mmask16, __m512i, __m512i, 1)\n@@ -509,14 +509,14 @@ test_4v (_mm512_mask_i64scatter_epi32, void *, __mmask8, __m512i, __m256i, 1)\n test_4v (_mm512_mask_i64scatter_epi64, void *, __mmask8, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i64scatter_pd, void *, __mmask8, __m512i, __m512d, 1)\n test_4v (_mm512_mask_i64scatter_ps, void *, __mmask8, __m512i, __m256, 1)\n-test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512i, 1, 5)\n-test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 5)\n-test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 5)\n-test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 5)\n-test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 5)\n-test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 5)\n-test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 5)\n-test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 5)\n+test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512i, 1, 8)\n+test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 8)\n+test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 8)\n+test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 8)\n+test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 8)\n+test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 8)\n+test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 8)\n+test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 8)\n \n /* avx512pfintrin.h */\n test_3vx (_mm512_mask_prefetch_i32gather_ps, __m512i, __mmask16, void const *, 1, 1)\n@@ -529,24 +529,24 @@ test_3vx (_mm512_mask_prefetch_i64gather_pd, __m512i, __mmask8, void const *, 1,\n test_3vx (_mm512_mask_prefetch_i64scatter_pd, void const *, __mmask8, __m512i, 1, 1)\n \n /* avx512erintrin.h */\n-test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 5)\n-test_1 (_mm512_rcp28_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_rcp28_round_ps, __m512, __m512, 5)\n-test_1 (_mm512_rsqrt28_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_rsqrt28_round_ps, __m512, __m512, 5)\n-test_2 (_mm512_maskz_exp2a23_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_exp2a23_round_ps, __m512, __mmask16, __m512, 5)\n-test_2 (_mm512_maskz_rcp28_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_rcp28_round_ps, __m512, __mmask16, __m512, 5)\n-test_2 (_mm512_maskz_rsqrt28_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_rsqrt28_round_ps, __m512, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_exp2a23_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_exp2a23_round_ps, __m512, __m512, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_rcp28_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 5)\n+test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 8)\n+test_1 (_mm512_rcp28_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_rcp28_round_ps, __m512, __m512, 8)\n+test_1 (_mm512_rsqrt28_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_rsqrt28_round_ps, __m512, __m512, 8)\n+test_2 (_mm512_maskz_exp2a23_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_exp2a23_round_ps, __m512, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_rcp28_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_rcp28_round_ps, __m512, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_rsqrt28_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_rsqrt28_round_ps, __m512, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_exp2a23_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_exp2a23_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_rcp28_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n \n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n@@ -556,10 +556,10 @@ test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* smmintrin.h */\n-test_1 (_mm_round_pd, __m128d, __m128d, 1)\n-test_1 (_mm_round_ps, __m128, __m128, 1)\n-test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n+test_1 (_mm_round_pd, __m128d, __m128d, 9)\n+test_1 (_mm_round_ps, __m128, __m128, 9)\n+test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_round_ss, __m128, __m128, __m128, 9)\n \n test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)"}, {"sha": "1064ed46c484c2a14341e3f9e407468565063069", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 213, "deletions": 213, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -174,10 +174,10 @@ test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n #endif\n #include <nmmintrin.h>\n /* smmintrin.h (SSE4.2).  */\n-test_1 (_mm_round_pd, __m128d, __m128d, 1)\n-test_1 (_mm_round_ps, __m128, __m128, 1)\n-test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n-test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n+test_1 (_mm_round_pd, __m128d, __m128d, 9)\n+test_1 (_mm_round_ps, __m128, __m128, 9)\n+test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 9)\n+test_2 (_mm_round_ss, __m128, __m128, __m128, 9)\n \n test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)\n@@ -258,8 +258,8 @@ test_2 (_mm256_insert_epi32, __m256i, __m256i, int, 3)\n #ifdef __x86_64__\n test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n #endif\n-test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n-test_1 (_mm256_round_ps, __m256, __m256, 1)\n+test_1 (_mm256_round_pd, __m256d, __m256d, 9)\n+test_1 (_mm256_round_ps, __m256, __m256, 9)\n \n /* avx2intrin.h */\n test_2 ( _mm256_mpsadbw_epu8, __m256i, __m256i, __m256i, 1)\n@@ -298,28 +298,28 @@ test_2 ( _mm256_i64gather_epi32, __m128i, int const *, __m256i, 1)\n test_0 ( _xabort, void, 1)\n \n /* avx512fintrin.h */\n-test_1 (_mm512_cvt_roundepi32_ps, __m512, __m512i, 1)\n-test_1 (_mm512_cvt_roundepu32_ps, __m512, __m512i, 1)\n-test_1 (_mm512_cvt_roundpd_epi32, __m256i, __m512d, 1)\n-test_1 (_mm512_cvt_roundpd_epu32, __m256i, __m512d, 1)\n-test_1 (_mm512_cvt_roundpd_ps, __m256, __m512d, 1)\n-test_1 (_mm512_cvt_roundph_ps, __m512, __m256i, 5)\n-test_1 (_mm512_cvt_roundps_epi32, __m512i, __m512, 1)\n-test_1 (_mm512_cvt_roundps_epu32, __m512i, __m512, 1)\n-test_1 (_mm512_cvt_roundps_pd, __m512d, __m256, 5)\n+test_1 (_mm512_cvt_roundepi32_ps, __m512, __m512i, 9)\n+test_1 (_mm512_cvt_roundepu32_ps, __m512, __m512i, 9)\n+test_1 (_mm512_cvt_roundpd_epi32, __m256i, __m512d, 9)\n+test_1 (_mm512_cvt_roundpd_epu32, __m256i, __m512d, 9)\n+test_1 (_mm512_cvt_roundpd_ps, __m256, __m512d, 9)\n+test_1 (_mm512_cvt_roundph_ps, __m512, __m256i, 8)\n+test_1 (_mm512_cvt_roundps_epi32, __m512i, __m512, 9)\n+test_1 (_mm512_cvt_roundps_epu32, __m512i, __m512, 9)\n+test_1 (_mm512_cvt_roundps_pd, __m512d, __m256, 8)\n test_1 (_mm512_cvtps_ph, __m256i, __m512, 1)\n-test_1 (_mm512_cvtt_roundpd_epi32, __m256i, __m512d, 5)\n-test_1 (_mm512_cvtt_roundpd_epu32, __m256i, __m512d, 5)\n-test_1 (_mm512_cvtt_roundps_epi32, __m512i, __m512, 5)\n-test_1 (_mm512_cvtt_roundps_epu32, __m512i, __m512, 5)\n+test_1 (_mm512_cvtt_roundpd_epi32, __m256i, __m512d, 8)\n+test_1 (_mm512_cvtt_roundpd_epu32, __m256i, __m512d, 8)\n+test_1 (_mm512_cvtt_roundps_epi32, __m512i, __m512, 8)\n+test_1 (_mm512_cvtt_roundps_epu32, __m512i, __m512, 8)\n test_1 (_mm512_extractf32x4_ps, __m128, __m512, 1)\n test_1 (_mm512_extractf64x4_pd, __m256d, __m512d, 1)\n test_1 (_mm512_extracti32x4_epi32, __m128i, __m512i, 1)\n test_1 (_mm512_extracti64x4_epi64, __m256i, __m512i, 1)\n-test_1 (_mm512_getexp_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_getexp_round_ps, __m512, __m512, 5)\n-test_1y (_mm512_getmant_round_pd, __m512d, __m512d, 1, 1, 5)\n-test_1y (_mm512_getmant_round_ps, __m512, __m512, 1, 1, 5)\n+test_1 (_mm512_getexp_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_getexp_round_ps, __m512, __m512, 8)\n+test_1y (_mm512_getmant_round_pd, __m512d, __m512d, 1, 1, 8)\n+test_1y (_mm512_getmant_round_ps, __m512, __m512, 1, 1, 8)\n test_1 (_mm512_permute_pd, __m512d, __m512d, 1)\n test_1 (_mm512_permute_ps, __m512, __m512, 1)\n test_1 (_mm512_permutex_epi64, __m512i, __m512i, 1)\n@@ -331,25 +331,25 @@ test_1 (_mm512_ror_epi64, __m512i, __m512i, 1)\n test_1 (_mm512_shuffle_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_slli_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_slli_epi64, __m512i, __m512i, 1)\n-test_1 (_mm512_sqrt_round_pd, __m512d, __m512d, 1)\n-test_1 (_mm512_sqrt_round_ps, __m512, __m512, 1)\n+test_1 (_mm512_sqrt_round_pd, __m512d, __m512d, 9)\n+test_1 (_mm512_sqrt_round_ps, __m512, __m512, 9)\n test_1 (_mm512_srai_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_srai_epi64, __m512i, __m512i, 1)\n test_1 (_mm512_srli_epi32, __m512i, __m512i, 1)\n test_1 (_mm512_srli_epi64, __m512i, __m512i, 1)\n-test_1 (_mm_cvt_roundsd_i32, int, __m128d, 1)\n-test_1 (_mm_cvt_roundsd_u32, unsigned, __m128d, 1)\n-test_1 (_mm_cvt_roundss_i32, int, __m128, 1)\n-test_1 (_mm_cvt_roundss_u32, unsigned, __m128, 1)\n-test_1 (_mm_cvtt_roundsd_i32, int, __m128d, 5)\n-test_1 (_mm_cvtt_roundsd_u32, unsigned, __m128d, 5)\n-test_1 (_mm_cvtt_roundss_i32, int, __m128, 5)\n-test_1 (_mm_cvtt_roundss_u32, unsigned, __m128, 5)\n+test_1 (_mm_cvt_roundsd_i32, int, __m128d, 9)\n+test_1 (_mm_cvt_roundsd_u32, unsigned, __m128d, 9)\n+test_1 (_mm_cvt_roundss_i32, int, __m128, 9)\n+test_1 (_mm_cvt_roundss_u32, unsigned, __m128, 9)\n+test_1 (_mm_cvtt_roundsd_i32, int, __m128d, 8)\n+test_1 (_mm_cvtt_roundsd_u32, unsigned, __m128d, 8)\n+test_1 (_mm_cvtt_roundss_i32, int, __m128, 8)\n+test_1 (_mm_cvtt_roundss_u32, unsigned, __m128, 8)\n test_1x (_mm512_getmant_pd, __m512d, __m512d, 1, 1)\n test_1x (_mm512_getmant_ps, __m512, __m512, 1, 1)\n-test_1x (_mm_cvt_roundi32_ss, __m128, __m128, 1, 1)\n-test_2 (_mm512_add_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_add_round_ps, __m512, __m512, __m512, 1)\n+test_1x (_mm_cvt_roundi32_ss, __m128, __m128, 1, 9)\n+test_2 (_mm512_add_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_add_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm512_alignr_epi32, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_alignr_epi64, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_cmp_epi32_mask, __mmask16, __m512i, __m512i, 1)\n@@ -358,8 +358,8 @@ test_2 (_mm512_cmp_epu32_mask, __mmask16, __m512i, __m512i, 1)\n test_2 (_mm512_cmp_epu64_mask, __mmask8, __m512i, __m512i, 1)\n test_2 (_mm512_cmp_pd_mask, __mmask8, __m512d, __m512d, 1)\n test_2 (_mm512_cmp_ps_mask, __mmask16, __m512, __m512, 1)\n-test_2 (_mm512_div_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_div_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_div_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_div_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm512_i32gather_epi32, __m512i, __m512i, void const *, 1)\n test_2 (_mm512_i32gather_epi64, __m512i, __m256i, void const *, 1)\n test_2 (_mm512_i32gather_pd, __m512d, __m256i, void const *, 1)\n@@ -372,28 +372,28 @@ test_2 (_mm512_insertf32x4, __m512, __m512, __m128, 1)\n test_2 (_mm512_insertf64x4, __m512d, __m512d, __m256d, 1)\n test_2 (_mm512_inserti32x4, __m512i, __m512i, __m128i, 1)\n test_2 (_mm512_inserti64x4, __m512i, __m512i, __m256i, 1)\n-test_2 (_mm512_maskz_cvt_roundepi32_ps, __m512, __mmask16, __m512i, 1)\n-test_2 (_mm512_maskz_cvt_roundepu32_ps, __m512, __mmask16, __m512i, 1)\n-test_2 (_mm512_maskz_cvt_roundpd_epi32, __m256i, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_cvt_roundpd_epu32, __m256i, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_cvt_roundpd_ps, __m256, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_cvt_roundph_ps, __m512, __mmask16, __m256i, 5)\n-test_2 (_mm512_maskz_cvt_roundps_epi32, __m512i, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_cvt_roundps_epu32, __m512i, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_cvt_roundps_pd, __m512d, __mmask8, __m256, 5)\n+test_2 (_mm512_maskz_cvt_roundepi32_ps, __m512, __mmask16, __m512i, 9)\n+test_2 (_mm512_maskz_cvt_roundepu32_ps, __m512, __mmask16, __m512i, 9)\n+test_2 (_mm512_maskz_cvt_roundpd_epi32, __m256i, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_cvt_roundpd_epu32, __m256i, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_cvt_roundpd_ps, __m256, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_cvt_roundph_ps, __m512, __mmask16, __m256i, 8)\n+test_2 (_mm512_maskz_cvt_roundps_epi32, __m512i, __mmask16, __m512, 9)\n+test_2 (_mm512_maskz_cvt_roundps_epu32, __m512i, __mmask16, __m512, 9)\n+test_2 (_mm512_maskz_cvt_roundps_pd, __m512d, __mmask8, __m256, 8)\n test_2 (_mm512_maskz_cvtps_ph, __m256i, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_cvtt_roundpd_epi32, __m256i, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_cvtt_roundpd_epu32, __m256i, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_cvtt_roundps_epi32, __m512i, __mmask16, __m512, 5)\n-test_2 (_mm512_maskz_cvtt_roundps_epu32, __m512i, __mmask16, __m512, 5)\n+test_2 (_mm512_maskz_cvtt_roundpd_epi32, __m256i, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_cvtt_roundpd_epu32, __m256i, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_cvtt_roundps_epi32, __m512i, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_cvtt_roundps_epu32, __m512i, __mmask16, __m512, 8)\n test_2 (_mm512_maskz_extractf32x4_ps, __m128, __mmask8, __m512, 1)\n test_2 (_mm512_maskz_extractf64x4_pd, __m256d, __mmask8, __m512d, 1)\n test_2 (_mm512_maskz_extracti32x4_epi32, __m128i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_extracti64x4_epi64, __m256i, __mmask8, __m512i, 1)\n-test_2 (_mm512_maskz_getexp_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_getexp_round_ps, __m512, __mmask16, __m512, 5)\n-test_2y (_mm512_maskz_getmant_round_pd, __m512d, __mmask8, __m512d, 1, 1, 5)\n-test_2y (_mm512_maskz_getmant_round_ps, __m512, __mmask16, __m512, 1, 1, 5)\n+test_2 (_mm512_maskz_getexp_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_getexp_round_ps, __m512, __mmask16, __m512, 8)\n+test_2y (_mm512_maskz_getmant_round_pd, __m512d, __mmask8, __m512d, 1, 1, 8)\n+test_2y (_mm512_maskz_getmant_round_ps, __m512, __mmask16, __m512, 1, 1, 8)\n test_2 (_mm512_maskz_permute_pd, __m512d, __mmask8, __m512d, 1)\n test_2 (_mm512_maskz_permute_ps, __m512, __mmask16, __m512, 1)\n test_2 (_mm512_maskz_permutex_epi64, __m512i, __mmask8, __m512i, 1)\n@@ -405,87 +405,87 @@ test_2 (_mm512_maskz_ror_epi64, __m512i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_shuffle_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_slli_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_slli_epi64, __m512i, __mmask8, __m512i, 1)\n-test_2 (_mm512_maskz_sqrt_round_pd, __m512d, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_sqrt_round_ps, __m512, __mmask16, __m512, 1)\n+test_2 (_mm512_maskz_sqrt_round_pd, __m512d, __mmask8, __m512d, 9)\n+test_2 (_mm512_maskz_sqrt_round_ps, __m512, __mmask16, __m512, 9)\n test_2 (_mm512_maskz_srai_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_srai_epi64, __m512i, __mmask8, __m512i, 1)\n test_2 (_mm512_maskz_srli_epi32, __m512i, __mmask16, __m512i, 1)\n test_2 (_mm512_maskz_srli_epi64, __m512i, __mmask8, __m512i, 1)\n-test_2 (_mm512_max_round_pd, __m512d, __m512d, __m512d, 5)\n-test_2 (_mm512_max_round_ps, __m512, __m512, __m512, 5)\n-test_2 (_mm512_min_round_pd, __m512d, __m512d, __m512d, 5)\n-test_2 (_mm512_min_round_ps, __m512, __m512, __m512, 5)\n-test_2 (_mm512_mul_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_mul_round_ps, __m512, __m512, __m512, 1)\n-test_2 (_mm512_scalef_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_scalef_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_max_round_pd, __m512d, __m512d, __m512d, 8)\n+test_2 (_mm512_max_round_ps, __m512, __m512, __m512, 8)\n+test_2 (_mm512_min_round_pd, __m512d, __m512d, __m512d, 8)\n+test_2 (_mm512_min_round_ps, __m512, __m512, __m512, 8)\n+test_2 (_mm512_mul_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_mul_round_ps, __m512, __m512, __m512, 9)\n+test_2 (_mm512_scalef_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_scalef_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm512_shuffle_f32x4, __m512, __m512, __m512, 1)\n test_2 (_mm512_shuffle_f64x2, __m512d, __m512d, __m512d, 1)\n test_2 (_mm512_shuffle_i32x4, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_shuffle_i64x2, __m512i, __m512i, __m512i, 1)\n test_2 (_mm512_shuffle_pd, __m512d, __m512d, __m512d, 1)\n test_2 (_mm512_shuffle_ps, __m512, __m512, __m512, 1)\n-test_2 (_mm512_sub_round_pd, __m512d, __m512d, __m512d, 1)\n-test_2 (_mm512_sub_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm512_sub_round_pd, __m512d, __m512d, __m512d, 9)\n+test_2 (_mm512_sub_round_ps, __m512, __m512, __m512, 9)\n test_2 (_mm_cmp_sd_mask, __mmask8, __m128d, __m128d, 1)\n test_2 (_mm_cmp_ss_mask, __mmask8, __m128, __m128, 1)\n #ifdef __x86_64__\n-test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 1)\n-test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 1)\n+test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 9)\n+test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 9)\n #endif\n-test_2 (_mm_cvt_roundu32_ss, __m128, __m128, unsigned, 1)\n+test_2 (_mm_cvt_roundu32_ss, __m128, __m128, unsigned, 9)\n #ifdef __x86_64__\n-test_2 (_mm_cvt_roundu64_sd, __m128d, __m128d, unsigned long long, 1)\n-test_2 (_mm_cvt_roundu64_ss, __m128, __m128, unsigned long long, 1)\n+test_2 (_mm_cvt_roundu64_sd, __m128d, __m128d, unsigned long long, 9)\n+test_2 (_mm_cvt_roundu64_ss, __m128, __m128, unsigned long long, 9)\n #endif\n-test_2x (_mm512_cmp_round_pd_mask, __mmask8, __m512d, __m512d, 1, 5)\n-test_2x (_mm512_cmp_round_ps_mask, __mmask16, __m512, __m512, 1, 5)\n-test_2x (_mm512_maskz_roundscale_round_pd, __m512d, __mmask8, __m512d, 1, 5)\n-test_2x (_mm512_maskz_roundscale_round_ps, __m512, __mmask16, __m512, 1, 5)\n-test_2x (_mm_cmp_round_sd_mask, __mmask8, __m128d, __m128d, 1, 5)\n-test_2x (_mm_cmp_round_ss_mask, __mmask8, __m128, __m128, 1, 5)\n-test_2x (_mm_comi_round_sd, int, __m128d, __m128d, 1, 5)\n-test_2x (_mm_comi_round_ss, int, __m128, __m128, 1, 5)\n-test_3 (_mm512_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmadd_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmaddsub_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmsub_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fmsubadd_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fnmadd_round_ps, __m512, __m512, __m512, __m512, 1)\n-test_3 (_mm512_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n-test_3 (_mm512_fnmsub_round_ps, __m512, __m512, __m512, __m512, 1)\n+test_2x (_mm512_cmp_round_pd_mask, __mmask8, __m512d, __m512d, 1, 8)\n+test_2x (_mm512_cmp_round_ps_mask, __mmask16, __m512, __m512, 1, 8)\n+test_2x (_mm512_maskz_roundscale_round_pd, __m512d, __mmask8, __m512d, 1, 8)\n+test_2x (_mm512_maskz_roundscale_round_ps, __m512, __mmask16, __m512, 1, 8)\n+test_2x (_mm_cmp_round_sd_mask, __mmask8, __m128d, __m128d, 1, 8)\n+test_2x (_mm_cmp_round_ss_mask, __mmask8, __m128, __m128, 1, 8)\n+test_2x (_mm_comi_round_sd, int, __m128d, __m128d, 1, 8)\n+test_2x (_mm_comi_round_ss, int, __m128, __m128, 1, 8)\n+test_3 (_mm512_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmadd_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmaddsub_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmsub_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fmsubadd_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fnmadd_round_ps, __m512, __m512, __m512, __m512, 9)\n+test_3 (_mm512_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, 9)\n+test_3 (_mm512_fnmsub_round_ps, __m512, __m512, __m512, __m512, 9)\n test_3 (_mm512_mask_cmp_epi32_mask, __mmask16, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_epi64_mask, __mmask8, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_epu32_mask, __mmask16, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_epu64_mask, __mmask8, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_mask_cmp_pd_mask, __mmask8, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_mask_cmp_ps_mask, __mmask16, __mmask16, __m512, __m512, 1)\n-test_3 (_mm512_mask_cvt_roundepi32_ps, __m512, __m512, __mmask16, __m512i, 1)\n-test_3 (_mm512_mask_cvt_roundepu32_ps, __m512, __m512, __mmask16, __m512i, 1)\n-test_3 (_mm512_mask_cvt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_cvt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_cvt_roundpd_ps, __m256, __m256, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_cvt_roundph_ps, __m512, __m512, __mmask16, __m256i, 5)\n-test_3 (_mm512_mask_cvt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_cvt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_cvt_roundps_pd, __m512d, __m512d, __mmask8, __m256, 5)\n+test_3 (_mm512_mask_cvt_roundepi32_ps, __m512, __m512, __mmask16, __m512i, 9)\n+test_3 (_mm512_mask_cvt_roundepu32_ps, __m512, __m512, __mmask16, __m512i, 9)\n+test_3 (_mm512_mask_cvt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_cvt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_cvt_roundpd_ps, __m256, __m256, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_cvt_roundph_ps, __m512, __m512, __mmask16, __m256i, 8)\n+test_3 (_mm512_mask_cvt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 9)\n+test_3 (_mm512_mask_cvt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 9)\n+test_3 (_mm512_mask_cvt_roundps_pd, __m512d, __m512d, __mmask8, __m256, 8)\n test_3 (_mm512_mask_cvtps_ph, __m256i, __m256i, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_cvtt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_cvtt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_cvtt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_cvtt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 5)\n+test_3 (_mm512_mask_cvtt_roundpd_epi32, __m256i, __m256i, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_cvtt_roundpd_epu32, __m256i, __m256i, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_cvtt_roundps_epi32, __m512i, __m512i, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_cvtt_roundps_epu32, __m512i, __m512i, __mmask16, __m512, 8)\n test_3 (_mm512_mask_extractf32x4_ps, __m128, __m128, __mmask8, __m512, 1)\n test_3 (_mm512_mask_extractf64x4_pd, __m256d, __m256d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_extracti32x4_epi32, __m128i, __m128i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_extracti64x4_epi64, __m256i, __m256i, __mmask8, __m512i, 1)\n-test_3 (_mm512_mask_getexp_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_getexp_round_ps, __m512, __m512, __mmask16, __m512, 5)\n-test_3y (_mm512_mask_getmant_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 1, 5)\n-test_3y (_mm512_mask_getmant_round_ps, __m512, __m512, __mmask16, __m512, 1, 1, 5)\n+test_3 (_mm512_mask_getexp_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_getexp_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_3y (_mm512_mask_getmant_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 1, 8)\n+test_3y (_mm512_mask_getmant_round_ps, __m512, __m512, __mmask16, __m512, 1, 1, 8)\n test_3 (_mm512_mask_permute_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_permute_ps, __m512, __m512, __mmask16, __m512, 1)\n test_3 (_mm512_mask_permutex_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n@@ -497,38 +497,38 @@ test_3 (_mm512_mask_ror_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_shuffle_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_slli_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_slli_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n-test_3 (_mm512_mask_sqrt_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_sqrt_round_ps, __m512, __m512, __mmask16, __m512, 1)\n+test_3 (_mm512_mask_sqrt_round_pd, __m512d, __m512d, __mmask8, __m512d, 9)\n+test_3 (_mm512_mask_sqrt_round_ps, __m512, __m512, __mmask16, __m512, 9)\n test_3 (_mm512_mask_srai_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_srai_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n test_3 (_mm512_mask_srli_epi32, __m512i, __m512i, __mmask16, __m512i, 1)\n test_3 (_mm512_mask_srli_epi64, __m512i, __m512i, __mmask8, __m512i, 1)\n-test_3 (_mm512_maskz_add_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_add_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_add_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_add_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_maskz_alignr_epi32, __m512i, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_alignr_epi64, __m512i, __mmask8, __m512i, __m512i, 1)\n-test_3 (_mm512_maskz_div_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_div_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_div_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_div_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_maskz_insertf32x4, __m512, __mmask16, __m512, __m128, 1)\n test_3 (_mm512_maskz_insertf64x4, __m512d, __mmask8, __m512d, __m256d, 1)\n test_3 (_mm512_maskz_inserti32x4, __m512i, __mmask16, __m512i, __m128i, 1)\n test_3 (_mm512_maskz_inserti64x4, __m512i, __mmask8, __m512i, __m256i, 1)\n-test_3 (_mm512_maskz_max_round_pd, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_3 (_mm512_maskz_max_round_ps, __m512, __mmask16, __m512, __m512, 5)\n-test_3 (_mm512_maskz_min_round_pd, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_3 (_mm512_maskz_min_round_ps, __m512, __mmask16, __m512, __m512, 5)\n-test_3 (_mm512_maskz_mul_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_mul_round_ps, __m512, __mmask16, __m512, __m512, 1)\n-test_3 (_mm512_maskz_scalef_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_scalef_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_max_round_pd, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_3 (_mm512_maskz_max_round_ps, __m512, __mmask16, __m512, __m512, 8)\n+test_3 (_mm512_maskz_min_round_pd, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_3 (_mm512_maskz_min_round_ps, __m512, __mmask16, __m512, __m512, 8)\n+test_3 (_mm512_maskz_mul_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_mul_round_ps, __m512, __mmask16, __m512, __m512, 9)\n+test_3 (_mm512_maskz_scalef_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_scalef_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_maskz_shuffle_f32x4, __m512, __mmask16, __m512, __m512, 1)\n test_3 (_mm512_maskz_shuffle_f64x2, __m512d, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_maskz_shuffle_i32x4, __m512i, __mmask16, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_shuffle_i64x2, __m512i, __mmask8, __m512i, __m512i, 1)\n test_3 (_mm512_maskz_shuffle_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_maskz_shuffle_ps, __m512, __mmask16, __m512, __m512, 1)\n-test_3 (_mm512_maskz_sub_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_3 (_mm512_maskz_sub_round_ps, __m512, __mmask16, __m512, __m512, 1)\n+test_3 (_mm512_maskz_sub_round_pd, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_3 (_mm512_maskz_sub_round_ps, __m512, __mmask16, __m512, __m512, 9)\n test_3 (_mm512_ternarylogic_epi32, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm512_ternarylogic_epi64, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm_mask_cmp_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1)\n@@ -541,44 +541,44 @@ test_3v (_mm512_i64scatter_epi32, void *, __m512i, __m256i, 1)\n test_3v (_mm512_i64scatter_epi64, void *, __m512i, __m512i, 1)\n test_3v (_mm512_i64scatter_pd, void *, __m512i, __m512d, 1)\n test_3v (_mm512_i64scatter_ps, void *, __m512i, __m256, 1)\n-test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 5)\n-test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 5)\n-test_3x (_mm512_mask_cmp_round_pd_mask, __mmask8, __mmask8, __m512d, __m512d, 1, 5)\n-test_3x (_mm512_mask_cmp_round_ps_mask, __mmask16, __mmask16, __m512, __m512, 1, 5)\n-test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 5)\n-test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 5)\n-test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 5)\n-test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 5)\n-test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmaddsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fmsubadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fnmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask3_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n-test_4 (_mm512_mask3_fnmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n-test_4 (_mm512_mask_add_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_add_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 8)\n+test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 8)\n+test_3x (_mm512_mask_cmp_round_pd_mask, __mmask8, __mmask8, __m512d, __m512d, 1, 8)\n+test_3x (_mm512_mask_cmp_round_ps_mask, __mmask16, __mmask16, __m512, __m512, 1, 8)\n+test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 8)\n+test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 8)\n+test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 8)\n+test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 8)\n+test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmaddsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fmsubadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fmsubadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fnmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fnmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask3_fnmsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 9)\n+test_4 (_mm512_mask3_fnmsub_round_ps, __m512, __m512, __m512, __m512, __mmask16, 9)\n+test_4 (_mm512_mask_add_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_add_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_alignr_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_alignr_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n-test_4 (_mm512_mask_div_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_div_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmaddsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmaddsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fmsubadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fmsubadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fnmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fnmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_fnmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_fnmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_div_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_div_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmaddsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmaddsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fmsubadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fmsubadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fnmadd_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fnmadd_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_fnmsub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_fnmsub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_i32gather_epi32, __m512i, __m512i, __mmask16, __m512i, void const *, 1)\n test_4 (_mm512_mask_i32gather_epi64, __m512i, __m512i, __mmask8, __m256i, void const *, 1)\n test_4 (_mm512_mask_i32gather_pd, __m512d, __m512d, __mmask8, __m256i, void const *, 1)\n@@ -591,36 +591,36 @@ test_4 (_mm512_mask_insertf32x4, __m512, __m512, __mmask16, __m512, __m128, 1)\n test_4 (_mm512_mask_insertf64x4, __m512d, __m512d, __mmask8, __m512d, __m256d, 1)\n test_4 (_mm512_mask_inserti32x4, __m512i, __m512i, __mmask16, __m512i, __m128i, 1)\n test_4 (_mm512_mask_inserti64x4, __m512i, __m512i, __mmask8, __m512i, __m256i, 1)\n-test_4 (_mm512_mask_max_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_4 (_mm512_mask_max_round_ps, __m512, __m512, __mmask16, __m512, __m512, 5)\n-test_4 (_mm512_mask_min_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 5)\n-test_4 (_mm512_mask_min_round_ps, __m512, __m512, __mmask16, __m512, __m512, 5)\n-test_4 (_mm512_mask_mul_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_mul_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_scalef_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_scalef_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_max_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_4 (_mm512_mask_max_round_ps, __m512, __m512, __mmask16, __m512, __m512, 8)\n+test_4 (_mm512_mask_min_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 8)\n+test_4 (_mm512_mask_min_round_ps, __m512, __m512, __mmask16, __m512, __m512, 8)\n+test_4 (_mm512_mask_mul_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_mul_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n+test_4 (_mm512_mask_scalef_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_scalef_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_shuffle_f32x4, __m512, __m512, __mmask16, __m512, __m512, 1)\n test_4 (_mm512_mask_shuffle_f64x2, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n test_4 (_mm512_mask_shuffle_i32x4, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_shuffle_i64x2, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n test_4 (_mm512_mask_shuffle_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n test_4 (_mm512_mask_shuffle_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n-test_4 (_mm512_mask_sub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 1)\n-test_4 (_mm512_mask_sub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 1)\n+test_4 (_mm512_mask_sub_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512d, 9)\n+test_4 (_mm512_mask_sub_round_ps, __m512, __m512, __mmask16, __m512, __m512, 9)\n test_4 (_mm512_mask_ternarylogic_epi32, __m512i, __m512i, __mmask16, __m512i, __m512i, 1)\n test_4 (_mm512_mask_ternarylogic_epi64, __m512i, __m512i, __mmask8, __m512i, __m512i, 1)\n-test_4 (_mm512_maskz_fmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fmaddsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmaddsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fmsubadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fmsubadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fnmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fnmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n-test_4 (_mm512_maskz_fnmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 1)\n-test_4 (_mm512_maskz_fnmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 1)\n+test_4 (_mm512_maskz_fmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fmaddsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmaddsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fmsubadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fmsubadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fnmadd_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fnmadd_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n+test_4 (_mm512_maskz_fnmsub_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512d, 9)\n+test_4 (_mm512_maskz_fnmsub_round_ps, __m512, __mmask16, __m512, __m512, __m512, 9)\n test_4 (_mm512_maskz_ternarylogic_epi32, __m512i, __mmask16, __m512i, __m512i, __m512i, 1)\n test_4 (_mm512_maskz_ternarylogic_epi64, __m512i, __mmask8, __m512i, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i32scatter_epi32, void *, __mmask16, __m512i, __m512i, 1)\n@@ -631,14 +631,14 @@ test_4v (_mm512_mask_i64scatter_epi32, void *, __mmask8, __m512i, __m256i, 1)\n test_4v (_mm512_mask_i64scatter_epi64, void *, __mmask8, __m512i, __m512i, 1)\n test_4v (_mm512_mask_i64scatter_pd, void *, __mmask8, __m512i, __m512d, 1)\n test_4v (_mm512_mask_i64scatter_ps, void *, __mmask8, __m512i, __m256, 1)\n-test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512i, 1, 5)\n-test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 5)\n-test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 5)\n-test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 5)\n-test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 5)\n-test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 5)\n-test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 5)\n-test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 5)\n+test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m512i, 1, 8)\n+test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 8)\n+test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 8)\n+test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 8)\n+test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 8)\n+test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 8)\n+test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 8)\n+test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 8)\n \n /* avx512pfintrin.h */\n test_3vx (_mm512_mask_prefetch_i32gather_ps, __m512i, __mmask16, void const *, 1, 1)\n@@ -652,28 +652,28 @@ test_3vx (_mm512_mask_prefetch_i64gather_pd, __m512i, __mmask8, long long *, 1,\n test_3vx (_mm512_mask_prefetch_i64scatter_pd, void const *, __mmask8, __m512i, 1, 1)\n \n /* avx512erintrin.h */\n-test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 5)\n-test_1 (_mm512_rcp28_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_rcp28_round_ps, __m512, __m512, 5)\n-test_1 (_mm512_rsqrt28_round_pd, __m512d, __m512d, 5)\n-test_1 (_mm512_rsqrt28_round_ps, __m512, __m512, 5)\n-test_2 (_mm512_maskz_exp2a23_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_exp2a23_round_ps, __m512, __mmask16, __m512, 5)\n-test_2 (_mm512_maskz_rcp28_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_rcp28_round_ps, __m512, __mmask16, __m512, 5)\n-test_2 (_mm512_maskz_rsqrt28_round_pd, __m512d, __mmask8, __m512d, 5)\n-test_2 (_mm512_maskz_rsqrt28_round_ps, __m512, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_exp2a23_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_exp2a23_round_ps, __m512, __m512, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_rcp28_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 5)\n-test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n-test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 5)\n-test_2 (_mm_rcp28_round_sd, __m128d, __m128d, __m128d, 5)\n-test_2 (_mm_rcp28_round_ss, __m128, __m128, __m128, 5)\n-test_2 (_mm_rsqrt28_round_sd, __m128d, __m128d, __m128d, 5)\n-test_2 (_mm_rsqrt28_round_ss, __m128, __m128, __m128, 5)\n+test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 8)\n+test_1 (_mm512_rcp28_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_rcp28_round_ps, __m512, __m512, 8)\n+test_1 (_mm512_rsqrt28_round_pd, __m512d, __m512d, 8)\n+test_1 (_mm512_rsqrt28_round_ps, __m512, __m512, 8)\n+test_2 (_mm512_maskz_exp2a23_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_exp2a23_round_ps, __m512, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_rcp28_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_rcp28_round_ps, __m512, __mmask16, __m512, 8)\n+test_2 (_mm512_maskz_rsqrt28_round_pd, __m512d, __mmask8, __m512d, 8)\n+test_2 (_mm512_maskz_rsqrt28_round_ps, __m512, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_exp2a23_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_exp2a23_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_rcp28_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 8)\n+test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 8)\n+test_2 (_mm_rcp28_round_sd, __m128d, __m128d, __m128d, 8)\n+test_2 (_mm_rcp28_round_ss, __m128, __m128, __m128, 8)\n+test_2 (_mm_rsqrt28_round_sd, __m128d, __m128d, __m128d, 8)\n+test_2 (_mm_rsqrt28_round_ss, __m128, __m128, __m128, 8)\n \n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)"}, {"sha": "8a8c9dfb26c46c1f4debafe736254473cf8eb11a", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 134, "deletions": 134, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de72ea020ca77c246e837c814ce2d26ad85a01df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=de72ea020ca77c246e837c814ce2d26ad85a01df", "patch": "@@ -184,86 +184,86 @@\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n /* avx512fintrin.h */\n-#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 1)\n-#define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 1)\n+#define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 8)\n+#define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 8)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n-#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 5)\n+#define __builtin_ia32_cmppd512_mask(A, B, F, D, E) __builtin_ia32_cmppd512_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cmpps512_mask(A, B, F, D, E) __builtin_ia32_cmpps512_mask(A, B, 1, D, 8)\n #define __builtin_ia32_cmpq512_mask(A, B, E, D) __builtin_ia32_cmpq512_mask(A, B, 1, D)\n-#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 5)\n-#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtsd2ss_round(A, B, C) __builtin_ia32_cvtsd2ss_round(A, B, 1)\n+#define __builtin_ia32_cmpsd_mask(A, B, F, D, E) __builtin_ia32_cmpsd_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cmpss_mask(A, B, F, D, E) __builtin_ia32_cmpss_mask(A, B, 1, D, 8)\n+#define __builtin_ia32_cvtdq2ps512_mask(A, B, C, D) __builtin_ia32_cvtdq2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2dq512_mask(A, B, C, D) __builtin_ia32_cvtpd2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2ps512_mask(A, B, C, D) __builtin_ia32_cvtpd2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtpd2udq512_mask(A, B, C, D) __builtin_ia32_cvtpd2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtsd2ss_round(A, B, C) __builtin_ia32_cvtsd2ss_round(A, B, 8)\n #define __builtin_ia32_cvtss2sd_round(A, B, C) __builtin_ia32_cvtss2sd_round(A, B, 4)\n-#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 1)\n-#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 1)\n-#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 1)\n-#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 5)\n-#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 1)\n-#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 1)\n-#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 1)\n-#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 1)\n-#define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 1)\n+#define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 8)\n+#define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 8)\n+#define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 8)\n+#define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvttps2udq512_mask(A, B, C, D) __builtin_ia32_cvttps2udq512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtudq2ps512_mask(A, B, C, D) __builtin_ia32_cvtudq2ps512_mask(A, B, C, 8)\n+#define __builtin_ia32_cvtusi2sd64(A, B, C) __builtin_ia32_cvtusi2sd64(A, B, 8)\n+#define __builtin_ia32_cvtusi2ss32(A, B, C) __builtin_ia32_cvtusi2ss32(A, B, 8)\n+#define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 8)\n+#define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 8)\n+#define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 8)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti64x4_mask(A, E, C, D) __builtin_ia32_extracti64x4_mask(A, 1, C, D)\n-#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 5)\n-#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 5)\n-#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 5)\n-#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 5)\n+#define __builtin_ia32_fixupimmpd512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmpd512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmpd512_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmps512_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmps512_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmsd_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmsd_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss_mask(A, B, C, I, E, F) __builtin_ia32_fixupimmss_mask(A, B, C, 1, E, 8)\n+#define __builtin_ia32_fixupimmss_maskz(A, B, C, I, E, F) __builtin_ia32_fixupimmss_maskz(A, B, C, 1, E, 8)\n+#define __builtin_ia32_gatherdiv8df(A, B, C, D, F) __builtin_ia32_gatherdiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv8di(A, B, C, D, F) __builtin_ia32_gatherdiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv16sf(A, B, C, D, F) __builtin_ia32_gatherdiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_gatherdiv16si(A, B, C, D, F) __builtin_ia32_gatherdiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv16sf(A, B, C, D, F) __builtin_ia32_gathersiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv16si(A, B, C, D, F) __builtin_ia32_gathersiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv8df(A, B, C, D, F) __builtin_ia32_gathersiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 8)\n+#define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 8)\n #define __builtin_ia32_getexpsd128_round(A, B, C) __builtin_ia32_getexpsd128_round(A, B, 4)\n #define __builtin_ia32_getexpss128_round(A, B, C) __builtin_ia32_getexpss128_round(A, B, 4)\n-#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 8)\n #define __builtin_ia32_getmantsd_round(A, B, C, D) __builtin_ia32_getmantsd_round(A, B, 1, 4)\n #define __builtin_ia32_getmantss_round(A, B, C, D) __builtin_ia32_getmantss_round(A, B, 1, 4)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti64x4_mask(A, B, F, D, E) __builtin_ia32_inserti64x4_mask(A, B, 1, D, E)\n-#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_maxsd_round(A, B, C) __builtin_ia32_maxsd_round(A, B, 4)\n #define __builtin_ia32_maxss_round(A, B, C) __builtin_ia32_maxss_round(A, B, 4)\n-#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 5)\n-#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 8)\n #define __builtin_ia32_minsd_round(A, B, C) __builtin_ia32_minsd_round(A, B, 4)\n #define __builtin_ia32_minss_round(A, B, C) __builtin_ia32_minss_round(A, B, 4)\n-#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 1)\n-#define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 1)\n+#define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 8)\n+#define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 8)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)\n@@ -281,82 +281,82 @@\n #define __builtin_ia32_pternlogd512_maskz(A, B, C, F, E) __builtin_ia32_pternlogd512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_pternlogq512_mask(A, B, C, F, E) __builtin_ia32_pternlogq512_mask(A, B, C, 1, E)\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n-#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 8)\n #define __builtin_ia32_rndscalesd_round(A, B, C, D) __builtin_ia32_rndscalesd_round(A, B, 1, 4)\n #define __builtin_ia32_rndscaless_round(A, B, C, D) __builtin_ia32_rndscaless_round(A, B, 1, 4)\n-#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_scalefsd_round(A, B, C) __builtin_ia32_scalefsd_round(A, B, 1)\n-#define __builtin_ia32_scalefss_round(A, B, C) __builtin_ia32_scalefss_round(A, B, 1)\n-#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 1)\n-#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 1)\n+#define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_scalefsd_round(A, B, C) __builtin_ia32_scalefsd_round(A, B, 8)\n+#define __builtin_ia32_scalefss_round(A, B, C) __builtin_ia32_scalefss_round(A, B, 8)\n+#define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_scatterdiv16si(A, B, C, D, F) __builtin_ia32_scatterdiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv16sf(A, B, C, D, F) __builtin_ia32_scattersiv16sf(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv16si(A, B, C, D, F) __builtin_ia32_scattersiv16si(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv8df(A, B, C, D, F) __builtin_ia32_scattersiv8df(A, B, C, D, 8)\n+#define __builtin_ia32_scattersiv8di(A, B, C, D, F) __builtin_ia32_scattersiv8di(A, B, C, D, 8)\n #define __builtin_ia32_shuf_f32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_f32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_f64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_f64x2_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_i32x4_mask(A, B, F, D, E) __builtin_ia32_shuf_i32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_shuf_i64x2_mask(A, B, F, D, E) __builtin_ia32_shuf_i64x2_mask(A, B, 1, D, E)\n #define __builtin_ia32_shufpd512_mask(A, B, F, D, E) __builtin_ia32_shufpd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n-#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 1)\n-#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 1)\n-#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 1)\n-#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 1)\n-#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 1)\n-#define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 1)\n+#define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 8)\n+#define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 8)\n+#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 8)\n+#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 8)\n+#define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 8)\n+#define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 8)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n-#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 5)\n-#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 5)\n-#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 5)\n+#define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 8)\n+#define __builtin_ia32_vcomiss(A, B, C, D) __builtin_ia32_vcomiss(A, B, 1, 8)\n+#define __builtin_ia32_vcvtph2ps512_mask(A, B, C, D) __builtin_ia32_vcvtph2ps512_mask(A, B, C, 8)\n #define __builtin_ia32_vcvtps2ph512_mask(A, E, C, D) __builtin_ia32_vcvtps2ph512_mask(A, 1, C, D)\n-#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 1)\n-#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 1)\n-#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 1)\n-#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 1)\n-#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 1)\n-#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 1)\n-#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 1)\n-#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 1)\n-#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 5)\n-#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 5)\n-#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 5)\n-#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 5)\n-#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 5)\n-#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 5)\n-#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 5)\n-#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 5)\n-#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_round(A, B, C, D) __builtin_ia32_vfmaddsd3_round(A, B, C, 1)\n-#define __builtin_ia32_vfmaddss3_round(A, B, C, D) __builtin_ia32_vfmaddss3_round(A, B, C, 1)\n-#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 1)\n+#define __builtin_ia32_vcvtsd2si32(A, B) __builtin_ia32_vcvtsd2si32(A, 8)\n+#define __builtin_ia32_vcvtsd2si64(A, B) __builtin_ia32_vcvtsd2si64(A, 8)\n+#define __builtin_ia32_vcvtsd2usi32(A, B) __builtin_ia32_vcvtsd2usi32(A, 8)\n+#define __builtin_ia32_vcvtsd2usi64(A, B) __builtin_ia32_vcvtsd2usi64(A, 8)\n+#define __builtin_ia32_vcvtss2si32(A, B) __builtin_ia32_vcvtss2si32(A, 8)\n+#define __builtin_ia32_vcvtss2si64(A, B) __builtin_ia32_vcvtss2si64(A, 8)\n+#define __builtin_ia32_vcvtss2usi32(A, B) __builtin_ia32_vcvtss2usi32(A, 8)\n+#define __builtin_ia32_vcvtss2usi64(A, B) __builtin_ia32_vcvtss2usi64(A, 8)\n+#define __builtin_ia32_vcvttsd2si32(A, B) __builtin_ia32_vcvttsd2si32(A, 8)\n+#define __builtin_ia32_vcvttsd2si64(A, B) __builtin_ia32_vcvttsd2si64(A, 8)\n+#define __builtin_ia32_vcvttsd2usi32(A, B) __builtin_ia32_vcvttsd2usi32(A, 8)\n+#define __builtin_ia32_vcvttsd2usi64(A, B) __builtin_ia32_vcvttsd2usi64(A, 8)\n+#define __builtin_ia32_vcvttss2si32(A, B) __builtin_ia32_vcvttss2si32(A, 8)\n+#define __builtin_ia32_vcvttss2si64(A, B) __builtin_ia32_vcvttss2si64(A, 8)\n+#define __builtin_ia32_vcvttss2usi32(A, B) __builtin_ia32_vcvttss2usi32(A, 8)\n+#define __builtin_ia32_vcvttss2usi64(A, B) __builtin_ia32_vcvttss2usi64(A, 8)\n+#define __builtin_ia32_vfmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddpd512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsd3_round(A, B, C, D) __builtin_ia32_vfmaddsd3_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddss3_round(A, B, C, D) __builtin_ia32_vfmaddss3_round(A, B, C, 8)\n+#define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubps512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubps512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n \n@@ -371,16 +371,16 @@\n #define __builtin_ia32_scatterpfqpd(A, B, C, D, E) __builtin_ia32_scatterpfqpd(A, B, C, 1, 1)\n \n /* avx512erintrin.h */\n-#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask (A, B, C, 5)\n-#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask (A, B, C, 5)\n-#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask (A, B, C, 5)\n-#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask (A, B, C, 5)\n-#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask (A, B, C, 5)\n-#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask (A, B, C, 5)\n-#define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 5)\n-#define __builtin_ia32_rcp28ss_round(A, B, C) __builtin_ia32_rcp28ss_round(A, B, 5)\n-#define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 5)\n-#define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 5)\n+#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask (A, B, C, 8)\n+#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask (A, B, C, 8)\n+#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask (A, B, C, 8)\n+#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask (A, B, C, 8)\n+#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask (A, B, C, 8)\n+#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask (A, B, C, 8)\n+#define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 8)\n+#define __builtin_ia32_rcp28ss_round(A, B, C) __builtin_ia32_rcp28ss_round(A, B, 8)\n+#define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 8)\n+#define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 8)\n \n /* shaintrin.h */\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)"}]}