{"sha": "50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "node_id": "C_kwDOANBUbNoAKDUwZTIwZWU2ZTQwNjQzYzIzYjUzYmFjZGE0ZGI0ZGQ5NTczZDdjOGE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-08T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-08T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "14a8a8caafe8a8b7d50d06d0e3ab00397e685373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14a8a8caafe8a8b7d50d06d0e3ab00397e685373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/comments", "author": null, "committer": null, "parents": [{"sha": "fba228e259dd5112851527f2dbb62c5601100985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba228e259dd5112851527f2dbb62c5601100985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba228e259dd5112851527f2dbb62c5601100985"}], "stats": {"total": 245, "additions": 244, "deletions": 1}, "files": [{"sha": "c0fb0f26e43990e9867ad8da3f42b050e9192263", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1,3 +1,8 @@\n+2021-10-07  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* MAINTAINERS: Add myself to DCO section and update email\n+\taddress.\n+\n 2021-09-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* MAINTAINERS: Add myself to DCO section."}, {"sha": "425ec282f1a1b99d3441672047ab0a90d9cc66cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1,3 +1,127 @@\n+2021-10-07  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* ctfc.c (ctfc_delete_container): Free hash table contents.\n+\n+2021-10-07  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* toplev.c (process_options): Do not warn for GNU GIMPLE.\n+\n+2021-10-07  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* tree-object-size.c (addr_object_size,\n+\tcompute_builtin_object_size): Drop PDECL and POFF arguments.\n+\t(addr_object_size): Adjust calls.\n+\t* tree-object-size.h (compute_builtin_object_size): Drop PDECL\n+\tand POFF arguments.\n+\n+2021-10-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* rtl.def (SMUL_HIGHPART, UMUL_HIGHPART): New RTX codes for\n+\trepresenting signed and unsigned high-part multiplication resp.\n+\t* simplify-rtx.c (simplify_binary_operation_1) [SMUL_HIGHPART,\n+\tUMUL_HIGHPART]: Simplify high-part multiplications by zero.\n+\t[SS_PLUS, US_PLUS, SS_MINUS, US_MINUS, SS_MULT, US_MULT,\n+\tSS_DIV, US_DIV]: Similar simplifications for saturating\n+\tarithmetic.\n+\t(simplify_const_binary_operation) [SS_PLUS, US_PLUS, SS_MINUS,\n+\tUS_MINUS, SS_MULT, US_MULT, SMUL_HIGHPART, UMUL_HIGHPART]:\n+\tImplement compile-time evaluation for constant operands.\n+\t* dwarf2out.c (mem_loc_descriptor): Skip SMUL_HIGHPART and\n+\tUMUL_HIGHPART.\n+\t* doc/rtl.texi (smul_highpart, umul_highpart): Document RTX codes.\n+\t* doc/md.texi (smul@var{m}3_highpart, umul@var{m3}_highpart):\n+\tMention the new smul_highpart and umul_highpart RTX codes.\n+\t* doc/invoke.texi: Silence @xref \"compilation\" warnings.\n+\n+2021-10-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/102388\n+\t* ipa-prop.c (ipa_edge_args_sum_t::duplicate): Also handle the\n+\tcase when the source reference description corresponds to a\n+\treferance taken in a function src->caller is inlined to.\n+\n+2021-10-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/102581\n+\t* ipa-modref-tree.h (modref_access_node::contains_p): Handle offsets\n+\tbetter.\n+\t(modref_access_node::try_merge_with): Add sanity check that there\n+\tare no redundant entries in the list.\n+\n+2021-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102608\n+\t* tree-ssa-sccvn.c (visit_stmt): Drop .DEFERRED_INIT to\n+\tvarying.\n+\n+2021-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* toplev.c (toplev::main): Make\n+\tsave_opt_decoded_options a pointer type\n+\t* toplev.h: Likewise.\n+\n+2021-10-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (gather<mode>_insn_2offsets<exec>): Apply\n+\tHAVE_GCN_ASM_GLOBAL_LOAD_FIXED.\n+\t(scatter<mode>_insn_2offsets<exec_scatter>): Likewise.\n+\n+2021-10-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-hsa.h (SRAMOPT): Include the whole option string.\n+\tAdjust for new -msram-ecc=any behaviour.\n+\t(ASM_SPEC): Adjust -mxnack and -msram-ecc usage.\n+\t* config/gcn/gcn.c (output_file_start): Implement -msram-ecc=any.\n+\t* config/gcn/mkoffload.c (EF_AMDGPU_XNACK): Rename to ...\n+\t(EF_AMDGPU_XNACK_V3): ... this.\n+\t(EF_AMDGPU_SRAM_ECC): Rename to ...\n+\t(EF_AMDGPU_SRAM_ECC_V3): ... this.\n+\t(EF_AMDGPU_FEATURE_XNACK_V4): New.\n+\t(EF_AMDGPU_FEATURE_XNACK_UNSUPPORTED_V4): New.\n+\t(EF_AMDGPU_FEATURE_XNACK_ANY_V4): New.\n+\t(EF_AMDGPU_FEATURE_XNACK_OFF_V4): New.\n+\t(EF_AMDGPU_FEATURE_XNACK_ON_V4): New.\n+\t(EF_AMDGPU_FEATURE_SRAMECC_V4): New.\n+\t(EF_AMDGPU_FEATURE_SRAMECC_UNSUPPORTED_V4): New.\n+\t(EF_AMDGPU_FEATURE_SRAMECC_ANY_V4): New.\n+\t(EF_AMDGPU_FEATURE_SRAMECC_OFF_V4): New.\n+\t(EF_AMDGPU_FEATURE_SRAMECC_ON_V4): New.\n+\t(SET_XNACK_ON): New.\n+\t(SET_XNACK_OFF): New.\n+\t(TEST_XNACK): New.\n+\t(SET_SRAM_ECC_ON): New.\n+\t(SET_SRAM_ECC_ANY): New.\n+\t(SET_SRAM_ECC_OFF): New.\n+\t(TEST_SRAM_ECC_ANY): New.\n+\t(TEST_SRAM_ECC_ON): New.\n+\t(main): Implement HSACOv4 and -msram-ecc=any.\n+\n+2021-10-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config.in: Regenerate.\n+\t* config/gcn/gcn-hsa.h (X_FIJI): New macro.\n+\t(X_900): New macro.\n+\t(X_906): New macro.\n+\t(X_908): New macro.\n+\t(A_FIJI): Rename to ...\n+\t(S_FIJI): ... this.\n+\t(A_900): Rename to ...\n+\t(S_900): ... this.\n+\t(A_906): Rename to ...\n+\t(S_906): ... this.\n+\t(A_908): Rename to ...\n+\t(S_908): ... this.\n+\t(SRAMOPT): New macro.\n+\t(ASM_SPEC): Adjust xnack option usage.\n+\t* config/gcn/gcn.c (output_file_start): Adjust amdgcn_target usage.\n+\t* configure: Regenerate.\n+\t* configure.ac: Detect LLVM assembler dialect.\n+\n+2021-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-pretty-print.c (dump_generic_node): Do not elide\n+\tprinting '&' when dumping with -gimple.\n+\n 2021-10-06  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple-range-cache.cc (non_null_ref::adjust_range): Call new"}, {"sha": "202e0fefcbaa26a68a731b6a92ce1cf8c1a686bc", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1 +1 @@\n-20211007\n+20211008"}, {"sha": "c3ee247a2b0cb3e0f9aa2ad33947e9e8f8429613", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1,3 +1,8 @@\n+2021-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-common.c (parse_optimize_options): Make\n+\tsave_opt_decoded_options a pointer type.\n+\n 2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/102571"}, {"sha": "c5f557561646d914b6fd10c08a50aa8a8b1e8e68", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1,3 +1,7 @@\n+2021-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-typeck.c (lvalue_p): Also allow MEM_REF and TARGET_MEM_REF.\n+\n 2021-10-05  Richard Biener  <rguenther@suse.de>\n \n \tPR c/102605"}, {"sha": "b4acf62d734894a98c3eafb46922f2fac1ba839f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1,3 +1,21 @@\n+2021-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/61355\n+\t* pt.c (convert_template_argument): Perform array/function to\n+\tpointer conversion on the substituted type of an NTTP.\n+\n+2021-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99904\n+\t* pt.c (is_compatible_template_arg): Set processing_template_decl\n+\taround tsubst_constraint_info.\n+\n+2021-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/102482\n+\t* init.c (maybe_warn_list_ctor): Do not warn for a reference to\n+\ta non-const std::initializer_list.\n+\n 2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/102612"}, {"sha": "1cc6addae12c5129353dc3b113fda736d05678c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1,3 +1,39 @@\n+2021-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/61355\n+\t* g++.old-deja/g++.pt/nontype5.C: Adjust.\n+\t* g++.dg/template/param6.C: New test.\n+\n+2021-10-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/sse2-mmx-paddsb-2.c: New test case.\n+\t* gcc.target/i386/sse2-mmx-paddusb-2.c: New test case.\n+\t* gcc.target/i386/sse2-mmx-psubsb-2.c: New test case.\n+\t* gcc.target/i386/sse2-mmx-psubusb-2.c: New test case.\n+\n+2021-10-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99904\n+\t* g++.dg/cpp2a/concepts-ttp4.C: New test.\n+\n+2021-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/102482\n+\t* g++.dg/warn/Winit-list5.C: New test.\n+\n+2021-10-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/torture/pr102581.C: New test.\n+\n+2021-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102615\n+\t* g++.dg/cpp23/charlit-encoding1.C: New testcase for C++23 P2316R2.\n+\n+2021-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-47.c: New testcase.\n+\n 2021-10-06  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp2a/spaceship-synth8a.C: New test."}, {"sha": "1a7bb78b1d4ad59796956a212c3d12679747c6f1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e20ee6e40643c23b53bacda4db4dd9573d7c8a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50e20ee6e40643c23b53bacda4db4dd9573d7c8a", "patch": "@@ -1,3 +1,54 @@\n+2021-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/std/chrono (duration, time_point, system_clock)\n+\t(steady_clock, high_resolution_clock, chrono_literals, sys_time)\n+\t(file_clock, file_time): Move to ...\n+\t* include/bits/chrono.h: New file.\n+\t* include/bits/atomic_futex.h: Include new header instead of\n+\t<chrono>.\n+\t* include/bits/atomic_timed_wait.h: Likewise.\n+\t* include/bits/fs_fwd.h: Likewise.\n+\t* include/bits/semaphore_base.h: Likewise.\n+\t* include/bits/this_thread_sleep.h: Likewise.\n+\t* include/bits/unique_lock.h: Likewise.\n+\t* include/experimental/bits/fs_fwd.h: Likewise.\n+\t* include/experimental/chrono: Likewise.\n+\t* include/experimental/io_context: Likewise.\n+\t* include/experimental/netfwd: Likewise.\n+\t* include/experimental/timer: Likewise.\n+\t* include/std/condition_variable: Likewise.\n+\t* include/std/mutex: Likewise.\n+\t* include/std/shared_mutex: Likewise.\n+\n+2021-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102377\n+\t* include/bits/atomic_wait.h (__waiter_pool_base:_S_align):\n+\tHardcode to 64 instead of using non-constant constant.\n+\n+2021-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/erase_if.h (__erase_nodes_if): Remove redundant\n+\t__niter_base calls.\n+\t* include/std/string (erase, erase_if): Likewise.\n+\t* include/std/deque (erase, erase_if): Access non-debug\n+\tcontainer directly.\n+\t* include/std/map (erase, erase_if): Likewise.\n+\t* include/std/set (erase, erase_if): Likewise.\n+\t* include/std/unordered_map (erase, erase_if): Likewise.\n+\t* include/std/unordered_set (erase, erase_if): Likewise.\n+\t* include/std/vector (erase, erase_if): Likewise.\n+\t* include/experimental/deque (erase, erase_if): Likewise.\n+\t* include/experimental/map (erase, erase_if): Likewise.\n+\t* include/experimental/set (erase, erase_if): Likewise.\n+\t* include/experimental/unordered_map (erase, erase_if):\n+\tLikewise.\n+\t* include/experimental/unordered_set (erase, erase_if):\n+\tLikewise.\n+\t* include/experimental/vector (erase, erase_if): Likewise.\n+\n 2021-10-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/Makefile.am: Add new headers."}]}