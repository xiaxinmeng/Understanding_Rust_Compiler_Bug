{"sha": "d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3Y2NhNGE0NmFlYTM2MmUxNWZiZjNhMzVmNWY4YzRmNjZkZWQ3NQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-11-14T10:25:34Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-11-14T10:25:34Z"}, "message": "re PR target/78093 ([avr] New variable attribute \"absdata\" and option \"-mabsdata\" to enable LDS / STS on Reduced Tiny)\n\ngcc/\n\tPR target/78093\n\t* doc/invoke.texi (AVR Options) [-mabsdata]: Document new option.\n\t* config/avr/avr.opt (-mabsdata): New option.\n\t* config/avr/avr-arch.h (avr_device_specific_features):\tAdd AVR_ISA_LDS.\n\t* config/avr/avr.c (avr_encode_section_info) [AVR_TINY]: If\n\t-mabsdata & symbol is not progmem, tag as AVR_SYMBOL_FLAG_TINY_ABSDATA.\n\t* config/avr/avr-mcus.def (attiny4/5/9/10/20): Use AVR_ISA_LDS.\n\t* config/avr/gen-avr-mmcu-specs.c (print_mcu): Print cc1_absdata\n\tspec depending on AVR_ISA_LDS.\n\t* config/avr/specs.h (CC1_SPEC): Enhanced by cc1_absdata spec.\ngcc/testsuite/\n\tPR target/78093\n\t* gcc.target/avr/torture/tiny-absdata-2.c: New test.\n\nFrom-SVN: r242379", "tree": {"sha": "9cd791f5a1507d5f8d8f05ac6dd1c0e4b14a2f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd791f5a1507d5f8d8f05ac6dd1c0e4b14a2f89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5230c3d825aee39da28c73705bc5852fae9f92a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5230c3d825aee39da28c73705bc5852fae9f92a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5230c3d825aee39da28c73705bc5852fae9f92a6"}], "stats": {"total": 147, "additions": 137, "deletions": 10}, "files": [{"sha": "5c53b9bf271ec4e6891103e01cbaf9e29f6b4069", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -1,3 +1,16 @@\n+2016-11-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/78093\n+\t* doc/invoke.texi (AVR Options) [-mabsdata]: Document new option.\n+\t* config/avr/avr.opt (-mabsdata): New option.\n+\t* config/avr/avr-arch.h (avr_device_specific_features):\tAdd AVR_ISA_LDS.\n+\t* config/avr/avr.c (avr_encode_section_info) [AVR_TINY]: If\n+\t-mabsdata & symbol is not progmem, tag as AVR_SYMBOL_FLAG_TINY_ABSDATA.\n+\t* config/avr/avr-mcus.def (attiny4/5/9/10/20): Use AVR_ISA_LDS.\n+\t* config/avr/gen-avr-mmcu-specs.c (print_mcu): Print cc1_absdata\n+\tspec depending on AVR_ISA_LDS.\n+\t* config/avr/specs.h (CC1_SPEC): Enhanced by cc1_absdata spec.\n+\n 2016-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* match.pd: Don't try to compare addresses of variables with"}, {"sha": "a740a151105017131fbd66972d2ddc38270c45dd", "filename": "gcc/config/avr/avr-arch.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-arch.h?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -157,7 +157,9 @@ enum avr_device_specific_features\n   AVR_ISA_NONE,\n   AVR_ISA_RMW     = 0x1, /* device has RMW instructions. */\n   AVR_SHORT_SP    = 0x2, /* Stack Pointer has 8 bits width. */\n-  AVR_ERRATA_SKIP = 0x4  /* device has a core erratum. */\n+  AVR_ERRATA_SKIP = 0x4, /* device has a core erratum. */\n+  AVR_ISA_LDS     = 0x8  /* whether LDS / STS is valid for all data in static\n+                            storage.  Only useful for reduced Tiny.  */\n };\n \n /* Map architecture to its texinfo string.  */"}, {"sha": "e5b4cdaf660f02228f97371aace33ded39f48dbc", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -341,11 +341,11 @@ AVR_MCU (\"atxmega128a1u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A1U_\n AVR_MCU (\"atxmega128a4u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A4U__\",    0x2000, 0x0, 3)\n /* Tiny family */\n AVR_MCU (\"avrtiny\",          ARCH_AVRTINY, AVR_ISA_NONE, NULL,                     0x0040, 0x0, 1)\n-AVR_MCU (\"attiny4\",          ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny4__\",        0x0040, 0x0, 1)\n-AVR_MCU (\"attiny5\",          ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny5__\",        0x0040, 0x0, 1)\n-AVR_MCU (\"attiny9\",          ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny9__\",        0x0040, 0x0, 1) \n-AVR_MCU (\"attiny10\",         ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny10__\",       0x0040, 0x0, 1)\n-AVR_MCU (\"attiny20\",         ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny20__\",       0x0040, 0x0, 1)\n+AVR_MCU (\"attiny4\",          ARCH_AVRTINY, AVR_ISA_LDS,  \"__AVR_ATtiny4__\",        0x0040, 0x0, 1)\n+AVR_MCU (\"attiny5\",          ARCH_AVRTINY, AVR_ISA_LDS,  \"__AVR_ATtiny5__\",        0x0040, 0x0, 1)\n+AVR_MCU (\"attiny9\",          ARCH_AVRTINY, AVR_ISA_LDS,  \"__AVR_ATtiny9__\",        0x0040, 0x0, 1) \n+AVR_MCU (\"attiny10\",         ARCH_AVRTINY, AVR_ISA_LDS,  \"__AVR_ATtiny10__\",       0x0040, 0x0, 1)\n+AVR_MCU (\"attiny20\",         ARCH_AVRTINY, AVR_ISA_LDS,  \"__AVR_ATtiny20__\",       0x0040, 0x0, 1)\n AVR_MCU (\"attiny40\",         ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny40__\",       0x0040, 0x0, 1)\n /* Assembler only.  */\n AVR_MCU (\"avr1\",             ARCH_AVR1, AVR_ISA_NONE, NULL,                        0x0060, 0x0, 1)"}, {"sha": "b6899a4b69a51be419c642dfcceb0ca930dff98b", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -10182,14 +10182,18 @@ avr_encode_section_info (tree decl, rtx rtl, int new_decl_p)\n       && SYMBOL_REF_P (XEXP (rtl, 0)))\n     {\n       rtx sym = XEXP (rtl, 0);\n+      bool progmem_p = -1 == avr_progmem_p (decl, DECL_ATTRIBUTES (decl));\n \n-      if (-1 == avr_progmem_p (decl, DECL_ATTRIBUTES (decl)))\n+      if (progmem_p)\n         {\n           // Tag symbols for later addition of 0x4000 (AVR_TINY_PM_OFFSET).\n           SYMBOL_REF_FLAGS (sym) |= AVR_SYMBOL_FLAG_TINY_PM;\n         }\n \n       if (avr_decl_absdata_p (decl, DECL_ATTRIBUTES (decl))\n+          || (TARGET_ABSDATA\n+              && !progmem_p\n+              && !addr_attr)\n           || (addr_attr\n               // If addr_attr is non-null, it has an argument.  Peek into it.\n               && TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (addr_attr))) < 0xc0))\n@@ -10198,7 +10202,7 @@ avr_encode_section_info (tree decl, rtx rtl, int new_decl_p)\n           SYMBOL_REF_FLAGS (sym) |= AVR_SYMBOL_FLAG_TINY_ABSDATA;\n         }\n \n-      if (-1 == avr_progmem_p (decl, DECL_ATTRIBUTES (decl))\n+      if (progmem_p\n           && avr_decl_absdata_p (decl, DECL_ATTRIBUTES (decl)))\n         {\n           error (\"%q+D has incompatible attributes %qs and %qs\","}, {"sha": "9ad6c5ab8d7d1ad7aa76ef8dd33535f85fef954e", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -99,6 +99,10 @@ mfract-convert-truncate\n Target Report Mask(FRACT_CONV_TRUNC)\n Allow to use truncation instead of rounding towards zero for fractional fixed-point types.\n \n+mabsdata\n+Target Report Mask(ABSDATA)\n+Assume that all data in static storage can be accessed by LDS / STS.  This option is only useful for reduced Tiny devices.\n+\n nodevicelib\n Driver Target Report RejectNegative\n Do not link against the device-specific library lib<MCU>.a."}, {"sha": "9ea987f6addd7f496ffd4e22784ba55cdfe7c30f", "filename": "gcc/config/avr/gen-avr-mmcu-specs.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -130,6 +130,7 @@ print_mcu (const avr_mcu_t *mcu)\n \n   FILE *f = fopen (name ,\"w\");\n \n+  bool absdata = 0 != (mcu->dev_attribute & AVR_ISA_LDS);\n   bool errata_skip = 0 != (mcu->dev_attribute & AVR_ERRATA_SKIP);\n   bool rmw = 0 != (mcu->dev_attribute & AVR_ISA_RMW);\n   bool sp8 = 0 != (mcu->dev_attribute & AVR_SHORT_SP);\n@@ -189,6 +190,10 @@ print_mcu (const avr_mcu_t *mcu)\n            ? \"\\t%{!mno-skip-bug: -mskip-bug}\"\n            : \"\\t%{!mskip-bug: -mno-skip-bug}\");\n \n+  fprintf (f, \"*cc1_absdata:\\n%s\\n\\n\", absdata\n+           ? \"\\t%{!mno-absdata: -mabsdata}\"\n+           : \"\\t%{mabsdata}\");\n+\n   // avr-gcc specific specs for assembling / the assembler.\n \n   fprintf (f, \"*asm_arch:\\n\\t-mmcu=%s\\n\\n\", arch->name);"}, {"sha": "222ad5badae02c1a0be198a37c4644f1ddfbfb42", "filename": "gcc/config/avr/specs.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Fspecs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fconfig%2Favr%2Fspecs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fspecs.h?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -34,7 +34,8 @@ along with GCC; see the file COPYING3.  If not see\n #define CC1_SPEC                                \\\n   \"%(cc1_n_flash) \"                             \\\n   \"%(cc1_errata_skip) \"                         \\\n-  \"%(cc1_rmw) \"\n+  \"%(cc1_rmw) \"                                 \\\n+  \"%(cc1_absdata) \"\n \n #undef  CC1PLUS_SPEC\n #define CC1PLUS_SPEC                                    \\"}, {"sha": "4251bc2010e7d5a3ba1886079e1ffed3499d0190", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -650,7 +650,8 @@ Objective-C and Objective-C++ Dialects}.\n -mpure-code}\n \n @emph{AVR Options}\n-@gccoptlist{-mmcu=@var{mcu} -maccumulate-args -mbranch-cost=@var{cost} @gol\n+@gccoptlist{-mmcu=@var{mcu} -mabsdata -maccumulate-args @gol\n+-mbranch-cost=@var{cost} @gol\n -mcall-prologues -mint8 -mn_flash=@var{size} -mno-interrupts @gol\n -mrelax -mrmw -mstrict-X -mtiny-stack -mfract-convert-truncate -nodevicelib @gol\n -Waddr-space-convert -Wmisspelled-isr}\n@@ -15310,6 +15311,13 @@ GCC supports the following AVR devices and ISAs:\n \n @include avr-mmcu.texi\n \n+@item -mabsdata\n+@opindex mabsdata\n+\n+Assume that all data in static storage can be accessed by LDS / STS\n+instructions.  This option has only an effect on reduced Tiny devices like\n+ATtiny40.\n+\n @item -maccumulate-args\n @opindex maccumulate-args\n Accumulate outgoing function arguments and acquire/release the needed"}, {"sha": "b87788eaf16681e3f205721e66bb0b3e3cc20701", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -1,3 +1,8 @@\n+2016-11-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/78093\n+\t* gcc.target/avr/torture/tiny-absdata-2.c: New test.\n+\n 2016-11-14  Jakub Jelinek  <jakub@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "1d98a6b57b7b281f5157d541fceeb72045ca42cb", "filename": "gcc/testsuite/gcc.target/avr/torture/tiny-absdata-2.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Ftiny-absdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97cca4a46aea362e15fbf3a35f5f8c4f66ded75/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Ftiny-absdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Ftiny-absdata-2.c?ref=d97cca4a46aea362e15fbf3a35f5f8c4f66ded75", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target avr_tiny } */\n+/* { dg-options \"-mabsdata\" } */\n+\n+typedef struct\n+{\n+  char a, b, c;\n+} abc_t;\n+\n+extern char varA;\n+extern char varB;\n+extern const char varC __attribute__((progmem));\n+\n+extern int arrayA[];\n+extern int arrayB[];\n+extern char arrayC[] __attribute__((address(0x80)));\n+extern char arrayD[] __attribute__((address(0xc0)));\n+\n+extern abc_t abc;\n+\n+char get_1 (void)\n+{\n+  return varA;\n+}\n+\n+int get_2 (void)\n+{\n+  return arrayA[3];\n+}\n+\n+char get_3 (void)\n+{\n+  return abc.a + abc.b + abc.c;\n+}\n+\n+char get_4 (void)\n+{\n+  return varC;\n+}\n+\n+void put_1 (char b)\n+{\n+  varB = b;\n+}\n+\n+void put_2 (int b)\n+{\n+  arrayB[3] = b;\n+}\n+\n+void put_3 (void)\n+{\n+  abc.a = abc.b = abc.c = 0;\n+}\n+\n+void put_4 (void)\n+{\n+  arrayC[0] = arrayC[1] = arrayC[2] = 0;\n+}\n+\n+void put_5 (void)\n+{\n+  arrayD[0] = 0;\n+}\n+\n+/* { dg-final { scan-assembler \"lds r\\[0-9\\]+,varA\" } } */\n+/* { dg-final { scan-assembler \"lds r\\[0-9\\]+,arrayA\\\\+6\" } } */\n+/* { dg-final { scan-assembler \"lds r\\[0-9\\]+,arrayA\\\\+6\\\\+1\" } } */\n+/* { dg-final { scan-assembler \"lds r\\[0-9\\]+,abc\" } } */\n+/* { dg-final { scan-assembler \"lds r\\[0-9\\]+,abc\\\\+1\" } } */\n+/* { dg-final { scan-assembler \"lds r\\[0-9\\]+,abc\\\\+2\" } } */\n+\n+/* { dg-final { scan-assembler \"sts varB,\" } } */\n+/* { dg-final { scan-assembler \"sts arrayB\\\\+6,\" } } */\n+/* { dg-final { scan-assembler \"sts arrayB\\\\+6\\\\+1,\" } } */\n+/* { dg-final { scan-assembler \"sts arrayC,\" } } */\n+/* { dg-final { scan-assembler \"sts arrayC\\\\+1,\" } } */\n+/* { dg-final { scan-assembler \"sts arrayC\\\\+2,\" } } */\n+\n+/* { dg-final { scan-assembler \"sts abc,\" } } */\n+/* { dg-final { scan-assembler \"sts abc\\\\+1,\" } } */\n+/* { dg-final { scan-assembler \"sts abc\\\\+2,\" } } */\n+\n+/* { dg-final { scan-assembler-not \"lds r\\[0-9\\]+,varC\" } } */\n+/* { dg-final { scan-assembler-not \"sts arrayD,\" } } */"}]}