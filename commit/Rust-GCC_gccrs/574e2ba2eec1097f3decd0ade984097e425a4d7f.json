{"sha": "574e2ba2eec1097f3decd0ade984097e425a4d7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0ZTJiYTJlZWMxMDk3ZjNkZWNkMGFkZTk4NDA5N2U0MjVhNGQ3Zg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-11-02T12:58:48Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-11-02T12:58:48Z"}, "message": "Fix PR c++/46170, c++/46162\n\ngcc/cp/ChangeLog:\n\tPR c++/46170\n\tPR c++/46162\n\t* pt.c (check_valid_ptrmem_cst_expr): Add a complain parameter to\n\tcontrol diagnostic.\n\t(convert_nontype_argument, convert_nontype_argument): Pass the\n\tcomplain parameter down to check_valid_ptrmem_cst_expr.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/46170\n\tPR c++/46162\n\t* g++.dg/template/sfinae26.C: New test.\n\t* g++.dg/template/sfinae27.C: Likewise.\n\nFrom-SVN: r166181", "tree": {"sha": "8d8adab2c9da335fb908dcd0a21b2377a06f9ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d8adab2c9da335fb908dcd0a21b2377a06f9ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574e2ba2eec1097f3decd0ade984097e425a4d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574e2ba2eec1097f3decd0ade984097e425a4d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574e2ba2eec1097f3decd0ade984097e425a4d7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574e2ba2eec1097f3decd0ade984097e425a4d7f/comments", "author": null, "committer": null, "parents": [{"sha": "c86af7f3e49d0209d8bf3e54a3d064f98e32debd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86af7f3e49d0209d8bf3e54a3d064f98e32debd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86af7f3e49d0209d8bf3e54a3d064f98e32debd"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "66b6671defd499fead35c76079ac60cf0fe01703", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=574e2ba2eec1097f3decd0ade984097e425a4d7f", "patch": "@@ -1,5 +1,13 @@\n 2010-11-02  Dodji Seketeli  <dodji@redhat.com>\n \n+\tPR c++/46170\n+\tPR c++/46162\n+\t* pt.c (check_valid_ptrmem_cst_expr): Add a complain parameter to\n+\t control diagnostic.\n+\t(convert_nontype_argument, convert_nontype_argument): Pass the\n+\tcomplain parameter down to check_valid_ptrmem_cst_expr.\n+\n+2010-11-02  Dodji Seketeli  <dodji@redhat.com>\n \tPR c++/45606\n \t* cp-tree.h (TEMPLATE_TYPE_PARM_SIBLING_PARMS): Remove.\n \t(struct template_parm_index_s)<num_siblings>: New field."}, {"sha": "21366d962e94a77224d005df294db9e602c2a9c6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=574e2ba2eec1097f3decd0ade984097e425a4d7f", "patch": "@@ -5224,14 +5224,18 @@ convert_nontype_argument_function (tree type, tree expr)\n    Emit an error otherwise.  */\n \n static bool\n-check_valid_ptrmem_cst_expr (tree type, tree expr)\n+check_valid_ptrmem_cst_expr (tree type, tree expr,\n+\t\t\t     tsubst_flags_t complain)\n {\n   STRIP_NOPS (expr);\n   if (expr && (null_ptr_cst_p (expr) || TREE_CODE (expr) == PTRMEM_CST))\n     return true;\n-  error (\"%qE is not a valid template argument for type %qT\",\n-\t expr, type);\n-  error (\"it must be a pointer-to-member of the form `&X::Y'\");\n+  if (complain & tf_error)\n+    {\n+      error (\"%qE is not a valid template argument for type %qT\",\n+\t     expr, type);\n+      error (\"it must be a pointer-to-member of the form `&X::Y'\");\n+    }\n   return false;\n }\n \n@@ -5600,7 +5604,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \n       /* [temp.arg.nontype] bullet 1 says the pointer to member\n          expression must be a pointer-to-member constant.  */\n-      if (!check_valid_ptrmem_cst_expr (type, expr))\n+      if (!check_valid_ptrmem_cst_expr (type, expr, complain))\n \treturn error_mark_node;\n \n       /* There is no way to disable standard conversions in\n@@ -5632,7 +5636,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n     {\n       /* [temp.arg.nontype] bullet 1 says the pointer to member\n          expression must be a pointer-to-member constant.  */\n-      if (!check_valid_ptrmem_cst_expr (type, expr))\n+      if (!check_valid_ptrmem_cst_expr (type, expr, complain))\n \treturn error_mark_node;\n \n       expr = perform_qualification_conversions (type, expr);"}, {"sha": "9e657754de5c23dac796ae3ac053d575f0956726", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=574e2ba2eec1097f3decd0ade984097e425a4d7f", "patch": "@@ -1,3 +1,10 @@\n+2010-11-02  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/46170\n+    \tPR c++/46162\n+\t* g++.dg/template/sfinae26.C: New test.\n+\t* g++.dg/template/sfinae27.C: Likewise.\n+\n 2010-11-02  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/45606"}, {"sha": "41673fb48d92b62fdcd465d8c0dcfca50a36f877", "filename": "gcc/testsuite/g++.dg/template/sfinae26.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae26.C?ref=574e2ba2eec1097f3decd0ade984097e425a4d7f", "patch": "@@ -0,0 +1,34 @@\n+// Origin: PR c++/46170\n+// { dg-do \"compile\" }\n+\n+namespace util {\n+  struct option_value {\n+  };\n+  template <class T> struct options_map_impl {\n+    typedef T options_struct_type;\n+    typedef bool (*opt_func)(const option_value&, options_struct_type&);\n+    template <class V, V K>  static  bool  set_member_constant(const option_value&,\n+\t\t\t\t\t\t\t       options_struct_type&, V options_struct_type::*);\n+    template <class V, V options_struct_type::*mem, V K>  static  bool \n+    set_member_constant(const option_value& opt, options_struct_type& t) {\n+      return set_member_constant<V,K>(opt, t, mem);\n+    }\n+  };\n+}\n+struct cflat_options {\n+  bool show_precharges;\n+};\n+typedef util::options_map_impl<cflat_options> options_map_impl_type;\n+class register_options_modifier {\n+  typedef options_map_impl_type::opt_func modifier_type;\n+public:  register_options_modifier();\n+  register_options_modifier(const char* Mode,    const modifier_type COM,   \n+\t\t\t    const char* h);\n+};\n+static const register_options_modifier\n+cflat_opt_mod_show_precharges(\"precharges\",\n+\t\t\t      &options_map_impl_type::set_member_constant<bool,\n+\t\t\t\t\t\t\t\t\t  &cflat_options::show_precharges, true>, \"show precharge expressions\"),\n+  cflat_opt_mod_no_show_precharges(\"no-\" \"precharges\",\n+\t\t\t\t   &options_map_impl_type::set_member_constant<bool,\n+\t\t\t\t\t\t\t\t\t       &cflat_options::show_precharges, false>, \"hide precharge expressions\");"}, {"sha": "0ecd1700dec8b12cdfc6dc34faab65b0c7cc302e", "filename": "gcc/testsuite/g++.dg/template/sfinae27.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e2ba2eec1097f3decd0ade984097e425a4d7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae27.C?ref=574e2ba2eec1097f3decd0ade984097e425a4d7f", "patch": "@@ -0,0 +1,33 @@\n+// Origin: PR c++/46162\n+\n+struct small_type { char dummy; };\n+struct large_type { char dummy[2]; };\n+\n+template<class T>\n+struct has_foo_member_variable\n+{\n+  template<int T::*> struct tester;\n+  template<class U> static small_type has_foo(tester<&U::foo> *);\n+  template<class U> static large_type has_foo(...);\n+  static const bool value = (sizeof(has_foo<T>(0)) == sizeof(small_type));\n+};\n+\n+struct A\n+{\n+  static int foo()\n+  {\n+    return 0;\n+  }\n+};\n+\n+struct B\n+{\n+  static int foo;\n+};\n+\n+void\n+bar()\n+{\n+  bool b = has_foo_member_variable<A>::value;\n+}\n+"}]}