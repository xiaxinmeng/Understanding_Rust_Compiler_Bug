{"sha": "7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a", "node_id": "C_kwDOANBUbNoAKDdhM2RmYzIzYTkxMGE0N2I2YzExMTNiM2EyOGEyMjg1OGQwYjllN2E", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-09-05T05:36:10Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-09-15T06:20:15Z"}, "message": "rs6000: Using pli(paddi) and rotate to build 64bit constants\n\nHi,\n\nTest cases are updated/added, and code is refined as the comments in the\nreview for previous version:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-September/600768.html\n\nAs mentioned in PR106550, since pli could support 34bits immediate, we could\nuse less instructions(3insn would be ok) to build 64bits constant with pli.\n\nFor example, for constant 0x020805006106003, we could generate it with:\nasm code1:\npli 9,101736451 (0x6106003)\nsldi 9,9,32\npaddi 9,9, 2130000 (0x0208050)\n\nor asm code2:\npli 10, 2130000\npli 9, 101736451\nrldimi 9, 10, 32, 0\n\nThe asm code2 would be better.\nThis patch generates the asm code2 in split1 pass, this patch also supports\nto generate asm code1 when splitter is only after RA.\n\nThis patch pass boostrap and regtest on ppc64. P10 testing is running.\nThanks for any comments!\n\nBR,\nJeff(Jiufu)\n\n\tPR target/106550\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_emit_set_long_const): Use pli.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr106550.c: New test.\n\t* gcc.target/powerpc/pr106550_1.c: New test.", "tree": {"sha": "b8e129cd436c1942313a361142ebccccf5ace41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8e129cd436c1942313a361142ebccccf5ace41f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a/comments", "author": null, "committer": null, "parents": [{"sha": "ff822367bb638fe43dfd0038fba883a7c4433576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff822367bb638fe43dfd0038fba883a7c4433576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff822367bb638fe43dfd0038fba883a7c4433576"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "5f347e9574fcc0afb803c18165dda35f0f3050e8", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a", "patch": "@@ -10297,6 +10297,41 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n \t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n \t\t\t\t     GEN_INT (ud1)));\n     }\n+  else if (TARGET_PREFIXED)\n+    {\n+      if (can_create_pseudo_p ())\n+\t{\n+\t  /* pli A,L + pli B,H + rldimi A,B,32,0.  */\n+\t  temp = gen_reg_rtx (DImode);\n+\t  rtx temp1 = gen_reg_rtx (DImode);\n+\t  emit_move_insn (temp, GEN_INT ((ud4 << 16) | ud3));\n+\t  emit_move_insn (temp1, GEN_INT ((ud2 << 16) | ud1));\n+\n+\t  emit_insn (gen_rotldi3_insert_3 (dest, temp, GEN_INT (32), temp1,\n+\t\t\t\t\t   GEN_INT (0xffffffff)));\n+\t}\n+      else\n+\t{\n+\t  /* pli A,H + sldi A,32 + paddi A,A,L.  */\n+\t  emit_move_insn (dest, GEN_INT ((ud4 << 16) | ud3));\n+\n+\t  emit_move_insn (dest, gen_rtx_ASHIFT (DImode, dest, GEN_INT (32)));\n+\n+\t  bool can_use_paddi = REGNO (dest) != FIRST_GPR_REGNO;\n+\n+\t  /* Use paddi for the low 32 bits.  */\n+\t  if (ud2 != 0 && ud1 != 0 && can_use_paddi)\n+\t    emit_move_insn (dest, gen_rtx_PLUS (DImode, dest,\n+\t\t\t\t\t\tGEN_INT ((ud2 << 16) | ud1)));\n+\n+\t  /* Use oris, ori for low 32 bits.  */\n+\t  if (ud2 != 0 && (ud1 == 0 || !can_use_paddi))\n+\t    emit_move_insn (dest,\n+\t\t\t    gen_rtx_IOR (DImode, dest, GEN_INT (ud2 << 16)));\n+\t  if (ud1 != 0 && (ud2 == 0 || !can_use_paddi))\n+\t    emit_move_insn (dest, gen_rtx_IOR (DImode, dest, GEN_INT (ud1)));\n+\t}\n+    }\n   else\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);"}, {"sha": "74e395331ab2105494e24e0067d8fcbed81b0231", "filename": "gcc/testsuite/gcc.target/powerpc/pr106550.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106550.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106550.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106550.c?ref=7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/106550 */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+/* { dg-require-effective-target power10_ok } */\n+\n+void\n+foo (unsigned long long *a)\n+{\n+  *a++ = 0x020805006106003; /* pli+pli+rldimi */\n+  *a++ = 0x2351847027482577;/* pli+pli+rldimi */  \n+}\n+\n+/* { dg-final { scan-assembler-times {\\mpli\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mrldimi\\M} 2 } } */\n+"}, {"sha": "7e709fcf9d80a24fdfc1339a0b3359ff2b2bf0e0", "filename": "gcc/testsuite/gcc.target/powerpc/pr106550_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106550_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106550_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106550_1.c?ref=7a3dfc23a910a47b6c1113b3a28a22858d0b9e7a", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/106550 */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10 -fdisable-rtl-split1\" } */\n+/* force the constant splitter run after RA: -fdisable-rtl-split1.  */\n+\n+void\n+foo (unsigned long long *a)\n+{\n+  /* Test oris/ori is used where paddi does not work with 'r0'. */\n+  register long long d asm(\"r0\") = 0x1245abcef9240dec; /* pli+sldi+oris+ori */\n+  long long n;\n+  asm(\"cntlzd %0, %1\" : \"=r\"(n) : \"r\"(d));\n+  *a++ = n;\n+\n+  *a++ = 0x235a8470a7480000ULL; /* pli+sldi+oris */\n+  *a++ = 0x23a184700000b677ULL; /* pli+sldi+ori */\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mpli\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\msldi\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\moris\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mori\\M} 2 } } */"}]}