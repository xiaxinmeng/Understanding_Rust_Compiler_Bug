{"sha": "30ed9d3dbe146861e42fd19eb6db134c2dd263c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBlZDlkM2RiZTE0Njg2MWU0MmZkMTllYjZkYjEzNGMyZGQyNjNjNw==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2009-08-27T20:08:49Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-27T20:08:49Z"}, "message": "ia64.c (ia64_attribute_table): Add \"common_object\" entry.\n\n\n\t* config/ia64/ia64.c (ia64_attribute_table): Add \"common_object\"\n\tentry.\n\t(SECTION_VMS_OVERLAY): Define.\n\t(ia64_vms_common_object_attribute): Added.  Handle the \"common_object\"\n\tattribute.\n\t(ia64_vms_elf_asm_named_section): Added.  Generate .section pseudo-op\n\tfor common_object.\n\t(ia64_vms_output_aligned_decl_common): Added.  Generate pseudo-op for\n\tcommon_object declarations.\n\t(ia64_section_type_flags): Set section flag for common_object.\n\t* config/ia64/ia64-protos.h\n\t(ia64_vms_output_aligned_decl_common): Declare.\n\t(ia64_vms_elf_asm_named_section): Declare.\n\n\nCo-Authored-By: Douglas B Rupp <rupp@gnat.com>\n\nFrom-SVN: r151148", "tree": {"sha": "97aec3a4e2b329a684d9bd555d161a0e03ab4eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97aec3a4e2b329a684d9bd555d161a0e03ab4eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30ed9d3dbe146861e42fd19eb6db134c2dd263c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ed9d3dbe146861e42fd19eb6db134c2dd263c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ed9d3dbe146861e42fd19eb6db134c2dd263c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ed9d3dbe146861e42fd19eb6db134c2dd263c7/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "889dc035812dfc72033fb61b7b3433dba072e279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/889dc035812dfc72033fb61b7b3433dba072e279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/889dc035812dfc72033fb61b7b3433dba072e279"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "df916f54dec1e2c5b06352d260c9c4cbcbe1f3ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ed9d3dbe146861e42fd19eb6db134c2dd263c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ed9d3dbe146861e42fd19eb6db134c2dd263c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30ed9d3dbe146861e42fd19eb6db134c2dd263c7", "patch": "@@ -1,3 +1,20 @@\n+2009-08-27  Tristan Gingold  <gingold@adacore.com>\n+\t    Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/ia64/ia64.c (ia64_attribute_table): Add \"common_object\"\n+\tentry.\n+\t(SECTION_VMS_OVERLAY): Define.\n+\t(ia64_vms_common_object_attribute): Added.  Handle the \"common_object\"\n+\tattribute.\n+\t(ia64_vms_elf_asm_named_section): Added.  Generate .section pseudo-op\n+\tfor common_object.\n+\t(ia64_vms_output_aligned_decl_common): Added.  Generate pseudo-op for\n+\tcommon_object declarations.\n+\t(ia64_section_type_flags): Set section flag for common_object.\n+\t* config/ia64/ia64-protos.h\n+\t(ia64_vms_output_aligned_decl_common): Declare.\n+\t(ia64_vms_elf_asm_named_section): Declare.\n+\n 2009-08-27  Michael Matz  <matz@suse.de>\n \n \t* expr.c (expand_expr_real_2): New function taking exploded"}, {"sha": "6d9440ef0d4f18c56cfabc6e4f855cd5e619a13d", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ed9d3dbe146861e42fd19eb6db134c2dd263c7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ed9d3dbe146861e42fd19eb6db134c2dd263c7/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=30ed9d3dbe146861e42fd19eb6db134c2dd263c7", "patch": "@@ -77,6 +77,10 @@ extern void ia64_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, int);\n extern int ia64_function_arg_boundary (enum machine_mode, tree);\n extern void ia64_asm_output_external (FILE *, tree, const char *);\n+extern void ia64_vms_output_aligned_decl_common (FILE *, tree, const char *,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned int);\n+extern void ia64_vms_elf_asm_named_section (const char *, unsigned int, tree);\n #endif /* TREE_CODE */\n \n extern int ia64_register_move_cost (enum machine_mode, enum reg_class,"}, {"sha": "dbc33cbc892f044126419f6f1a66605603be202a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ed9d3dbe146861e42fd19eb6db134c2dd263c7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ed9d3dbe146861e42fd19eb6db134c2dd263c7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=30ed9d3dbe146861e42fd19eb6db134c2dd263c7", "patch": "@@ -281,6 +281,8 @@ static void ia64_soft_fp_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n static bool ia64_vms_valid_pointer_mode (enum machine_mode mode)\n      ATTRIBUTE_UNUSED;\n+static tree ia64_vms_common_object_attribute (tree *, tree, tree, int, bool *)\n+     ATTRIBUTE_UNUSED;\n \n static tree ia64_handle_model_attribute (tree *, tree, tree, int, bool *);\n static tree ia64_handle_version_id_attribute (tree *, tree, tree, int, bool *);\n@@ -307,6 +309,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"syscall_linkage\", 0, 0, false, true,  true,  NULL },\n   { \"model\",\t       1, 1, true, false, false, ia64_handle_model_attribute },\n+#if TARGET_ABI_OPEN_VMS\n+  { \"common_object\",   1, 1, true, false, false, ia64_vms_common_object_attribute},\n+#endif\n   { \"version_id\",      1, 1, true, false, false,\n     ia64_handle_version_id_attribute },\n   { NULL,\t       0, 0, false, false, false, NULL }\n@@ -628,6 +633,95 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n+/* The section must have global and overlaid attributes.  */\n+#define SECTION_VMS_OVERLAY SECTION_MACH_DEP\n+\n+/* Part of the low level implementation of DEC Ada pragma Common_Object which\n+   enables the shared use of variables stored in overlaid linker areas\n+   corresponding to the use of Fortran COMMON.  */\n+\n+static tree\n+ia64_vms_common_object_attribute (tree *node, tree name, tree args,\n+\t\t\t\t  int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t  bool *no_add_attrs)\n+{\n+    tree decl = *node;\n+    tree id, val;\n+    if (! DECL_P (decl))\n+      abort ();\n+  \n+    DECL_COMMON (decl) = 1;\n+    id = TREE_VALUE (args);\n+    if (TREE_CODE (id) == IDENTIFIER_NODE)\n+      val = build_string (IDENTIFIER_LENGTH (id), IDENTIFIER_POINTER (id));\n+    else if (TREE_CODE (id) == STRING_CST)\n+      val = id;\n+    else\n+      {\n+\twarning (OPT_Wattributes,\n+\t\t \"%qE attribute requires a string constant argument\", name);\n+\t*no_add_attrs = true;\n+\treturn NULL_TREE;\n+      }\n+    DECL_SECTION_NAME (decl) = val;\n+    return NULL_TREE;\n+}\n+\n+/* Part of the low level implementation of DEC Ada pragma Common_Object.  */\n+\n+void\n+ia64_vms_output_aligned_decl_common (FILE *file, tree decl, const char *name,\n+\t\t\t\t     unsigned HOST_WIDE_INT size,\n+\t\t\t\t     unsigned int align)\n+{\n+  tree attr = DECL_ATTRIBUTES (decl);\n+\n+  /* As common_object attribute set DECL_SECTION_NAME check it before\n+     looking up the attribute.  */\n+  if (DECL_SECTION_NAME (decl) && attr)\n+    attr = lookup_attribute (\"common_object\", attr);\n+  else\n+    attr = NULL_TREE;\n+\n+  if (!attr)\n+    {\n+      /*  Code from elfos.h.  */\n+      fprintf (file, \"%s\", COMMON_ASM_OP);\n+      assemble_name (file, name);\n+      fprintf (file, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n+\t       size, align / BITS_PER_UNIT);\n+    }\n+  else\n+    {\n+      ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n+      ASM_OUTPUT_LABEL (file, name);\n+      ASM_OUTPUT_SKIP (file, size ? size : 1);\n+    }\n+}\n+\n+/* Definition of TARGET_ASM_NAMED_SECTION for VMS.  */\n+\n+void\n+ia64_vms_elf_asm_named_section (const char *name, unsigned int flags,\n+\t\t\t\ttree decl)\n+{\n+  if (!(flags & SECTION_VMS_OVERLAY))\n+    {\n+      default_elf_asm_named_section (name, flags, decl);\n+      return;\n+    }\n+  if (flags != (SECTION_VMS_OVERLAY | SECTION_WRITE))\n+    abort ();\n+\n+  if (flags & SECTION_DECLARED)\n+    {\n+      fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n+      return;\n+    }\n+\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"awgO\\\"\\n\", name);\n+}\n+\n static void\n ia64_encode_addr_area (tree decl, rtx symbol)\n {\n@@ -10243,6 +10337,12 @@ ia64_section_type_flags (tree decl, const char *name, int reloc)\n       || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n     flags = SECTION_SMALL;\n \n+#if TARGET_ABI_OPEN_VMS\n+  if (decl && DECL_ATTRIBUTES (decl)\n+      && lookup_attribute (\"common_object\", DECL_ATTRIBUTES (decl)))\n+    flags |= SECTION_VMS_OVERLAY;\n+#endif\n+\n   flags |= default_section_type_flags (decl, name, reloc);\n   return flags;\n }"}]}