{"sha": "515646845f462707b22e7425f9f2f5917a93085a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE1NjQ2ODQ1ZjQ2MjcwN2IyMmU3NDI1ZjlmMmY1OTE3YTkzMDg1YQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-13T17:47:26Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-13T17:47:26Z"}, "message": "haifa-sched.c (struct sched_block_state): New.\n\n\t* haifa-sched.c (struct sched_block_state): New.\n\t(schedule_block): Move some local variables into such a structure.\n\nFrom-SVN: r176243", "tree": {"sha": "afb2987d867364585bdf33bc9a32719ec85eaac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afb2987d867364585bdf33bc9a32719ec85eaac6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/515646845f462707b22e7425f9f2f5917a93085a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515646845f462707b22e7425f9f2f5917a93085a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515646845f462707b22e7425f9f2f5917a93085a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515646845f462707b22e7425f9f2f5917a93085a/comments", "author": null, "committer": null, "parents": [{"sha": "b3fe1584251c039b787e1775ea725bc161cf334c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3fe1584251c039b787e1775ea725bc161cf334c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3fe1584251c039b787e1775ea725bc161cf334c"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "cd02017211ecb792333609f22e6729cc2d9925d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515646845f462707b22e7425f9f2f5917a93085a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515646845f462707b22e7425f9f2f5917a93085a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=515646845f462707b22e7425f9f2f5917a93085a", "patch": "@@ -1,3 +1,8 @@\n+2011-07-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* haifa-sched.c (struct sched_block_state): New.\n+\t(schedule_block): Move some local variables into such a structure.\n+\n 2011-07-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/crtprec.c: Move to ../libgcc/config/i386."}, {"sha": "5eba79e4f981457aff9bbc7cdfab74da0d398e2e", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515646845f462707b22e7425f9f2f5917a93085a/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515646845f462707b22e7425f9f2f5917a93085a/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=515646845f462707b22e7425f9f2f5917a93085a", "patch": "@@ -1638,6 +1638,16 @@ sched_setup_bb_reg_pressure_info (basic_block bb, rtx after)\n   initiate_bb_reg_pressure_info (bb);\n   setup_insn_max_reg_pressure (after, false);\n }\n+\f\n+/* A structure that holds local state for the loop in schedule_block.  */\n+struct sched_block_state\n+{\n+  /* True if no real insns have been scheduled in the current cycle.  */\n+  bool first_cycle_insn_p;\n+  /* Initialized with the machine's issue rate every cycle, and updated\n+     by calls to the variable_issue hook.  */\n+  int can_issue_more;\n+};\n \n /* INSN is the \"currently executing insn\".  Launch each insn which was\n    waiting on INSN.  READY is the ready list which contains the insns\n@@ -2924,8 +2934,7 @@ void\n schedule_block (basic_block *target_bb)\n {\n   int i;\n-  bool first_cycle_insn_p;\n-  int can_issue_more;\n+  struct sched_block_state ls;\n   state_t temp_state = NULL;  /* It is used for multipass scheduling.  */\n   int sort_p, advance, start_clock_var;\n \n@@ -3075,9 +3084,9 @@ schedule_block (basic_block *target_bb)\n       if (ready.n_ready == 0)\n \tcontinue;\n \n-      first_cycle_insn_p = true;\n+      ls.first_cycle_insn_p = true;\n       cycle_issued_insns = 0;\n-      can_issue_more = issue_rate;\n+      ls.can_issue_more = issue_rate;\n       for (;;)\n \t{\n \t  rtx insn;\n@@ -3118,7 +3127,7 @@ schedule_block (basic_block *target_bb)\n \t\t}\n \t    }\n \n-\t  if (first_cycle_insn_p && !ready.n_ready)\n+\t  if (ls.first_cycle_insn_p && !ready.n_ready)\n \t    break;\n \n \t  /* Allow the target to reorder the list, typically for\n@@ -3127,13 +3136,13 @@ schedule_block (basic_block *target_bb)\n \t      && (ready.n_ready == 0\n \t\t  || !SCHED_GROUP_P (ready_element (&ready, 0))))\n \t    {\n-\t      if (first_cycle_insn_p && targetm.sched.reorder)\n-\t\tcan_issue_more\n+\t      if (ls.first_cycle_insn_p && targetm.sched.reorder)\n+\t\tls.can_issue_more\n \t\t  = targetm.sched.reorder (sched_dump, sched_verbose,\n \t\t\t\t\t   ready_lastpos (&ready),\n \t\t\t\t\t   &ready.n_ready, clock_var);\n-\t      else if (!first_cycle_insn_p && targetm.sched.reorder2)\n-\t\tcan_issue_more\n+\t      else if (!ls.first_cycle_insn_p && targetm.sched.reorder2)\n+\t\tls.can_issue_more\n \t\t  = targetm.sched.reorder2 (sched_dump, sched_verbose,\n \t\t\t\t\t    ready.n_ready\n \t\t\t\t\t    ? ready_lastpos (&ready) : NULL,\n@@ -3151,7 +3160,7 @@ schedule_block (basic_block *target_bb)\n \t    }\n \n \t  if (ready.n_ready == 0\n-\t      && can_issue_more\n+\t      && ls.can_issue_more\n \t      && reload_completed)\n \t    {\n \t      /* Allow scheduling insns directly from the queue in case\n@@ -3165,7 +3174,7 @@ schedule_block (basic_block *target_bb)\n \t    }\n \n \t  if (ready.n_ready == 0\n-\t      || !can_issue_more\n+\t      || !ls.can_issue_more\n \t      || state_dead_lock_p (curr_state)\n \t      || !(*current_sched_info->schedule_more_p) ())\n \t    break;\n@@ -3176,7 +3185,7 @@ schedule_block (basic_block *target_bb)\n \t      int res;\n \n \t      insn = NULL_RTX;\n-\t      res = choose_ready (&ready, first_cycle_insn_p, &insn);\n+\t      res = choose_ready (&ready, ls.first_cycle_insn_p, &insn);\n \n \t      if (res < 0)\n \t\t/* Finish cycle.  */\n@@ -3256,14 +3265,14 @@ schedule_block (basic_block *target_bb)\n \t\t     || asm_noperands (PATTERN (insn)) >= 0);\n \n \t  if (targetm.sched.variable_issue)\n-\t    can_issue_more =\n+\t    ls.can_issue_more =\n \t      targetm.sched.variable_issue (sched_dump, sched_verbose,\n-\t\t\t\t\t    insn, can_issue_more);\n+\t\t\t\t\t    insn, ls.can_issue_more);\n \t  /* A naked CLOBBER or USE generates no instruction, so do\n \t     not count them against the issue rate.  */\n \t  else if (GET_CODE (PATTERN (insn)) != USE\n \t\t   && GET_CODE (PATTERN (insn)) != CLOBBER)\n-\t    can_issue_more--;\n+\t    ls.can_issue_more--;\n \t  advance = schedule_insn (insn);\n \n \t  /* After issuing an asm insn we should start a new cycle.  */\n@@ -3272,7 +3281,7 @@ schedule_block (basic_block *target_bb)\n \t  if (advance != 0)\n \t    break;\n \n-\t  first_cycle_insn_p = false;\n+\t  ls.first_cycle_insn_p = false;\n \t  if (ready.n_ready > 0)\n \t    prune_ready_list (temp_state, false);\n \t}"}]}