{"sha": "acb619d9976d653433afad5010748b8f08b7b783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiNjE5ZDk5NzZkNjUzNDMzYWZhZDUwMTA3NDhiOGYwOGI3Yjc4Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-20T23:35:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-20T23:35:23Z"}, "message": "oops\n\nFrom-SVN: r21888", "tree": {"sha": "f7693c2fdaa6e5abcb2835412671a4db5d24cd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7693c2fdaa6e5abcb2835412671a4db5d24cd1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb619d9976d653433afad5010748b8f08b7b783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb619d9976d653433afad5010748b8f08b7b783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb619d9976d653433afad5010748b8f08b7b783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb619d9976d653433afad5010748b8f08b7b783/comments", "author": null, "committer": null, "parents": [{"sha": "84f1ebff03debd27c7cd5e39c9cf68bdc77fad1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f1ebff03debd27c7cd5e39c9cf68bdc77fad1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f1ebff03debd27c7cd5e39c9cf68bdc77fad1c"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "d598001a56b88b07e3a99579a4f5df72fc400335", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb619d9976d653433afad5010748b8f08b7b783/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb619d9976d653433afad5010748b8f08b7b783/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=acb619d9976d653433afad5010748b8f08b7b783", "patch": "@@ -1565,7 +1565,7 @@ search_tree (t, func)\n      tree t;\n      tree (*func) PROTO((tree));\n {\n-#define TRY(ARG) if (tmp = walk_tree (ARG, func), tmp != NULL_TREE) return tmp\n+#define TRY(ARG) if (tmp=search_tree (ARG, func), tmp != NULL_TREE) return tmp\n \n   tree tmp;\n "}]}