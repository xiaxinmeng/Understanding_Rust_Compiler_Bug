{"sha": "441e427cd5ef4e97683f6402606a855f90a3eb10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxZTQyN2NkNWVmNGU5NzY4M2Y2NDAyNjA2YTg1NWY5MGEzZWIxMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-23T19:10:22Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-23T19:10:22Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r234", "tree": {"sha": "376e21a1ff340d5159d0764b8c9eb25f196b0c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/376e21a1ff340d5159d0764b8c9eb25f196b0c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/441e427cd5ef4e97683f6402606a855f90a3eb10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441e427cd5ef4e97683f6402606a855f90a3eb10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441e427cd5ef4e97683f6402606a855f90a3eb10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441e427cd5ef4e97683f6402606a855f90a3eb10/comments", "author": null, "committer": null, "parents": [{"sha": "235d6e4f73ea401b7e34269463ec0bed125dc421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235d6e4f73ea401b7e34269463ec0bed125dc421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235d6e4f73ea401b7e34269463ec0bed125dc421"}], "stats": {"total": 305, "additions": 88, "deletions": 217}, "files": [{"sha": "debb179898ae863df5de810e1b44748a89ce76c5", "filename": "gcc/config/i860/i860.md", "status": "modified", "additions": 88, "deletions": 217, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441e427cd5ef4e97683f6402606a855f90a3eb10/gcc%2Fconfig%2Fi860%2Fi860.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441e427cd5ef4e97683f6402606a855f90a3eb10/gcc%2Fconfig%2Fi860%2Fi860.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.md?ref=441e427cd5ef4e97683f6402606a855f90a3eb10", "patch": "@@ -692,32 +692,38 @@\n \f\n ;; Generation of conditionals.\n \n-;; The first step is the emission of a standard-looking compare insn.\n-;; Then a standard-named conditional branch pattern is run.\n-;; That branch pattern looks back at the compare insn and deletes it.\n-;; It then emits a machine-specific compare insn and a branch-if-true\n-;; or a branch-if-false.\n+;; We save the compare operands in the cmpxx patterns and use then when\n+;; we generate the branch.\n \n-;; These patterns have `abort' because they are supposed to be deleted\n-;; in that fashion.\n-\n-(define_insn \"cmpsi\"\n+(define_expand \"cmpsi\"\n   [(set (cc0) (compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t       (match_operand:SI 1 \"compare_operand\" \"\")))]\n   \"\"\n-  \"* abort ();\")\n+  \"\n+{ i860_compare_op0 = operands[0];\n+  i860_compare_op1 = operands[1];\n+  DONE;\n+}\")\n \n-(define_insn \"cmpsf\"\n+(define_expand \"cmpsf\"\n   [(set (cc0) (compare (match_operand:SF 0 \"register_operand\" \"\")\n \t\t       (match_operand:SF 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"* abort ();\")\n+  \"\n+{ i860_compare_op0 = operands[0];\n+  i860_compare_op1 = operands[1];\n+  DONE;\n+}\")\n \n-(define_insn \"cmpdf\"\n+(define_expand \"cmpdf\"\n   [(set (cc0) (compare (match_operand:DF 0 \"register_operand\" \"\")\n \t\t       (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"* abort ();\")\n+  \"\n+{ i860_compare_op0 = operands[0];\n+  i860_compare_op1 = operands[1];\n+  DONE;\n+}\")\n \n ;; These are the standard-named conditional branch patterns.\n ;; Detailed comments are found in the first one only.\n@@ -731,42 +737,21 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  /* Get out of the sequence just started for us.  */\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  /* Examine the preceding compare insn, and get rid of it.  */\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-\n-  /* Now once again start a sequence for our new instructions.  */\n-\n-  start_sequence ();\n-\n   /* Emit a single-condition compare insn according to\n      the type of operands and the condition to be tested.  */\n \n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpeqsi (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpsf)\n-    emit_insn (gen_cmpeqsf (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpdf)\n-    emit_insn (gen_cmpeqdf (recog_operand[0], recog_operand[1]));\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) == MODE_INT)\n+    emit_insn (gen_cmpeqsi (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == SFmode)\n+    emit_insn (gen_cmpeqsf (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == DFmode)\n+    emit_insn (gen_cmpeqdf (i860_compare_op0, i860_compare_op1));\n   else\n     abort ();\n \n   /* Emit branch-if-true.  */\n \n-  emit_jump_insn (gen_flipped_inverse_cbranch (label));\n-\n+  emit_jump_insn (gen_flipped_inverse_cbranch (operands[0]));\n   DONE;\n }\")\n \n@@ -779,28 +764,16 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpeqsi (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpsf)\n-    emit_insn (gen_cmpeqsf (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpdf)\n-    emit_insn (gen_cmpeqdf (recog_operand[0], recog_operand[1]));\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) == MODE_INT)\n+    emit_insn (gen_cmpeqsi (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == SFmode)\n+    emit_insn (gen_cmpeqsf (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == DFmode)\n+    emit_insn (gen_cmpeqdf (i860_compare_op0, i860_compare_op1));\n   else\n     abort ();\n-  emit_jump_insn (gen_flipped_cbranch (label));\n+\n+  emit_jump_insn (gen_flipped_cbranch (operands[0]));\n \n   DONE;\n }\")\n@@ -814,28 +787,16 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpgtsi (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpsf)\n-    emit_insn (gen_cmpgtsf (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpdf)\n-    emit_insn (gen_cmpgtdf (recog_operand[0], recog_operand[1]));\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) == MODE_INT)\n+    emit_insn (gen_cmpgtsi (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == SFmode)\n+    emit_insn (gen_cmpgtsf (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == DFmode)\n+    emit_insn (gen_cmpgtdf (i860_compare_op0, i860_compare_op1));\n   else\n     abort ();\n-  emit_jump_insn (gen_flipped_inverse_cbranch (label));\n+\n+  emit_jump_insn (gen_flipped_inverse_cbranch (operands[0]));\n   DONE;\n }\")\n \n@@ -848,28 +809,16 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpltsi (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpsf)\n-    emit_insn (gen_cmpltsf (recog_operand[0], recog_operand[1]));\n-  else if (code == CODE_FOR_cmpdf)\n-    emit_insn (gen_cmpltdf (recog_operand[0], recog_operand[1]));\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) == MODE_INT)\n+    emit_insn (gen_cmpltsi (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == SFmode)\n+    emit_insn (gen_cmpltsf (i860_compare_op0, i860_compare_op1));\n+  else if (GET_MODE (i860_compare_op0) == DFmode)\n+    emit_insn (gen_cmpltdf (i860_compare_op0, i860_compare_op1));\n   else\n     abort ();\n-  emit_jump_insn (gen_flipped_inverse_cbranch (label));\n+\n+  emit_jump_insn (gen_flipped_inverse_cbranch (operands[0]));\n   DONE;\n }\")\n \n@@ -882,33 +831,20 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) == MODE_INT)\n     {\n-      emit_insn (gen_cmpgtsi (recog_operand[0], recog_operand[1]));\n-      emit_jump_insn (gen_flipped_cbranch (label));\n+      emit_insn (gen_cmpgtsi (i860_compare_op0, i860_compare_op1));\n+      emit_jump_insn (gen_flipped_cbranch (operands[0]));\n     }\n   else\n     {\n-      if (code == CODE_FOR_cmpsf)\n-\temit_insn (gen_cmplesf (recog_operand[0], recog_operand[1]));\n-      else if (code == CODE_FOR_cmpdf)\n-\temit_insn (gen_cmpledf (recog_operand[0], recog_operand[1]));\n+      if (GET_MODE (i860_compare_op0) == SFmode)\n+\temit_insn (gen_cmplesf (i860_compare_op0, i860_compare_op1));\n+      else if (GET_MODE (i860_compare_op0) == DFmode)\n+\temit_insn (gen_cmpledf (i860_compare_op0, i860_compare_op1));\n       else\n \tabort ();\n-      emit_jump_insn (gen_flipped_inverse_cbranch (label));\n+      emit_jump_insn (gen_flipped_inverse_cbranch (operands[0]));\n     }\n   DONE;\n }\")\n@@ -922,33 +858,20 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) == MODE_INT)\n     {\n-      emit_insn (gen_cmpltsi (recog_operand[0], recog_operand[1]));\n-      emit_jump_insn (gen_flipped_cbranch (label));\n+      emit_insn (gen_cmpltsi (i860_compare_op0, i860_compare_op1));\n+      emit_jump_insn (gen_flipped_cbranch (operands[0]));\n     }\n   else\n     {\n-      if (code == CODE_FOR_cmpsf)\n-\temit_insn (gen_cmpgesf (recog_operand[0], recog_operand[1]));\n-      else if (code == CODE_FOR_cmpdf)\n-\temit_insn (gen_cmpgedf (recog_operand[0], recog_operand[1]));\n+      if (GET_MODE (i860_compare_op0) == SFmode)\n+\temit_insn (gen_cmpgesf (i860_compare_op0, i860_compare_op1));\n+      else if (GET_MODE (i860_compare_op0) == DFmode)\n+\temit_insn (gen_cmpgedf (i860_compare_op0, i860_compare_op1));\n       else\n-        abort ();\n-      emit_jump_insn (gen_flipped_inverse_cbranch (label));\n+\tabort ();\n+      emit_jump_insn (gen_flipped_inverse_cbranch (operands[0]));\n     }\n   DONE;\n }\")\n@@ -962,24 +885,11 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpleusi (recog_operand[0], recog_operand[1]));\n-  else\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) != MODE_INT)\n     abort ();\n-  emit_jump_insn (gen_flipped_cbranch (label));\n+\n+  emit_insn (gen_cmpleusi (i860_compare_op0, i860_compare_op1));\n+  emit_jump_insn (gen_flipped_cbranch (operands[0]));\n   DONE;\n }\")\n \n@@ -992,24 +902,11 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpgeusi (recog_operand[0], recog_operand[1]));\n-  else\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) != MODE_INT)\n     abort ();\n-  emit_jump_insn (gen_flipped_cbranch (label));\n+\n+  emit_insn (gen_cmpgeusi (i860_compare_op0, i860_compare_op1));\n+  emit_jump_insn (gen_flipped_cbranch (operands[0]));\n   DONE;\n }\")\n \n@@ -1022,24 +919,11 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpgeusi (recog_operand[0], recog_operand[1]));\n-  else\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) != MODE_INT)\n     abort ();\n-  emit_jump_insn (gen_flipped_inverse_cbranch (label));\n+\n+  emit_insn (gen_cmpgeusi (i860_compare_op0, i860_compare_op1));\n+  emit_jump_insn (gen_flipped_inverse_cbranch (operands[0]));\n   DONE;\n }\")\n \n@@ -1052,24 +936,11 @@\n   \"\"\n   \"\n {\n-  rtx label = operands[0];\n-  enum insn_code code;\n-  rtx prev;\n-\n-  end_sequence ();\n-  prev = get_last_insn ();\n-\n-  code = recog_memoized (prev);\n-  insn_extract (prev);\n-  NEXT_INSN (PREV_INSN (prev)) = 0;\n-  set_last_insn (PREV_INSN (prev));\n-  start_sequence ();\n-\n-  if (code == CODE_FOR_cmpsi)\n-    emit_insn (gen_cmpleusi (recog_operand[0], recog_operand[1]));\n-  else\n+  if (GET_MODE_CLASS (GET_MODE (i860_compare_op0)) != MODE_INT)\n     abort ();\n-  emit_jump_insn (gen_flipped_inverse_cbranch (label));\n+\n+  emit_insn (gen_cmpleusi (i860_compare_op0, i860_compare_op1));\n+  emit_jump_insn (gen_flipped_inverse_cbranch (operands[0]));\n   DONE;\n }\")\n \f\n@@ -1847,8 +1718,8 @@\n \n (define_insn \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,*f\")\n-\t(plus:SI (match_operand:SI 1 \"nonmemory_operand\" \"%r,!*f\")\n-\t\t (match_operand:SI 2 \"arith_operand\" \"rI,!*f\")))]\n+\t(plus:SI (match_operand:SI 1 \"nonmemory_operand\" \"%r,*f\")\n+\t\t (match_operand:SI 2 \"arith_operand\" \"rI,*f\")))]\n   \"\"\n   \"*\n {\n@@ -1867,8 +1738,8 @@\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,*f\")\n-\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,I,!*f\")\n-\t\t  (match_operand:SI 2 \"arith_operand\" \"rI,r,!*f\")))]\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r,I,*f\")\n+\t\t  (match_operand:SI 2 \"arith_operand\" \"rI,r,*f\")))]\n   \"\"\n   \"*\n {"}]}