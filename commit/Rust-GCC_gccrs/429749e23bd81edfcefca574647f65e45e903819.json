{"sha": "429749e23bd81edfcefca574647f65e45e903819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5NzQ5ZTIzYmQ4MWVkZmNlZmNhNTc0NjQ3ZjY1ZTQ1ZTkwMzgxOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-03-30T17:38:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-03-30T17:38:57Z"}, "message": "sse.md (FMAMODE_NOVF512): New mode iterator.\n\n\t* config/i386/sse.md (FMAMODE_NOVF512): New mode iterator.\n\t(<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>):\n\tSplit out\n\t<sd_mask_codefor>fma_fmadd_<VF_512:mode><sd_maskz_name><round_name>.\n\tUse FMAMODE_NOVF512 mode iterator.\n\t(<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>): Ditto.\n\t(<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>): Ditto.\n\t(<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>): Ditto.\n\t(<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>):\n\tSplit out\n\t<sd_mask_codefor>fma_fmaddsub_<VF_512:mode><sd_maskz_name><round_name>.\n\tUse VF_128_256 mode iterator.\n\t(<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>):\n\tDitto.\n\nFrom-SVN: r208948", "tree": {"sha": "30731aae25c1705f727a173ee36d0ad0737cf5fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30731aae25c1705f727a173ee36d0ad0737cf5fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429749e23bd81edfcefca574647f65e45e903819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429749e23bd81edfcefca574647f65e45e903819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429749e23bd81edfcefca574647f65e45e903819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429749e23bd81edfcefca574647f65e45e903819/comments", "author": null, "committer": null, "parents": [{"sha": "368348abbb3c4abff8f8e5bb356f326468fda8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368348abbb3c4abff8f8e5bb356f326468fda8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368348abbb3c4abff8f8e5bb356f326468fda8e9"}], "stats": {"total": 256, "additions": 185, "deletions": 71}, "files": [{"sha": "b7b6bcae3fc2afd7c64daa2b545a06896dd73173", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429749e23bd81edfcefca574647f65e45e903819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429749e23bd81edfcefca574647f65e45e903819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=429749e23bd81edfcefca574647f65e45e903819", "patch": "@@ -1,3 +1,20 @@\n+2014-03-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (FMAMODE_NOVF512): New mode iterator.\n+\t(<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>):\n+\tSplit out\n+\t<sd_mask_codefor>fma_fmadd_<VF_512:mode><sd_maskz_name><round_name>.\n+\tUse FMAMODE_NOVF512 mode iterator.\n+\t(<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>):\n+\tSplit out\n+\t<sd_mask_codefor>fma_fmaddsub_<VF_512:mode><sd_maskz_name><round_name>.\n+\tUse VF_128_256 mode iterator.\n+\t(<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\n 2014-03-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_redirect_edge_call_stmt_to_callee): Clear\n@@ -67,7 +84,8 @@\n 2014-03-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c: Include expr.h and tree-dfa.h.\n-\t(cgraph_redirect_edge_call_stmt_to_callee): If call in noreturn; remove LHS.\n+\t(cgraph_redirect_edge_call_stmt_to_callee): If call in noreturn;\n+\tremove LHS.\n \n 2014-03-28  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -111,8 +129,7 @@\n \tOptimize vec_extract of 64-bit values, where the value being\n \textracted is in the top word, where we can use scalar\n \tinstructions.  Add direct move and store support.  Combine the big\n-\tendian/little endian vector select load support into a single\n-\tinsn.\n+\tendian/little endian vector select load support into a single insn.\n \t(vsx_extract_<mode>_internal1): Likewise.\n \t(vsx_extract_<mode>_internal2): Likewise.\n \t(vsx_extract_<mode>_load): Likewise.\n@@ -257,12 +274,13 @@\n \n \tPR ipa/60315\n \t* cif-code.def (UNREACHABLE) New code.\n-\t* ipa-inline.c (inline_small_functions): Skip edges to __builtlin_unreachable.\n+\t* ipa-inline.c (inline_small_functions): Skip edges to\n+\t__builtlin_unreachable.\n \t(estimate_edge_growth): Allow edges to __builtlin_unreachable.\n \t* ipa-inline-analysis.c (edge_set_predicate): Redirect edges with false\n \tpredicate to __bulitin_unreachable.\n-\t(set_cond_stmt_execution_predicate): Fix issue when invert_tree_comparison\n-\treturns ERROR_MARK.\n+\t(set_cond_stmt_execution_predicate): Fix issue when\n+\tinvert_tree_comparison returns ERROR_MARK.\n \t* ipa-pure-const.c (propagate_pure_const, propagate_nothrow): Do not\n \tpropagate to inline clones.\n \t* cgraph.c (verify_edge_corresponds_to_fndecl): Allow redirection\n@@ -284,8 +302,8 @@\n \t(addv<mode>4, subv<mode>4, mulv<mode>4): If operands[2] is CONST_INT,\n \tdon't generate (sign_extend (const_int)).\n \t(*addv<mode>4, *subv<mode>4, *mulv<mode>4): Disallow CONST_INT_P\n-\toperands[2].  Use We constraint instead of <i> and <general_sext_operand>\n-\tpredicate instead of <general_operand>.\n+\toperands[2].  Use We constraint instead of <i> and\n+\t<general_sext_operand> predicate instead of <general_operand>.\n \t(*addv<mode>4_1, *subv<mode>4_1, *mulv<mode>4_1): New insns.\n \t* config/i386/constraints.md (We): New constraint.\n \t* config/i386/predicates.md (x86_64_sext_operand,\n@@ -323,8 +341,7 @@\n \n 2014-03-25  Richard Biener  <rguenther@suse.de>\n \n-\t* lto-wrapper.c (merge_and_complain): Handle OPT_fPIE like\n-\tOPT_fpie.\n+\t* lto-wrapper.c (merge_and_complain): Handle OPT_fPIE like OPT_fpie.\n \t(run_gcc): Likewise.\n \n 2014-03-25  Jakub Jelinek  <jakub@redhat.com>\n@@ -550,13 +567,10 @@\n 2014-03-18  Basile Starynkevitch  <basile@starynkevitch.net>\n \n \t* plugin.def: Improve comment for PLUGIN_INCLUDE_FILE.\n-\t* doc/plugins.texi (Plugin callbacks): Mention\n-\tPLUGIN_INCLUDE_FILE.\n+\t* doc/plugins.texi (Plugin callbacks): Mention PLUGIN_INCLUDE_FILE.\n \tItalicize plugin event names in description.  Explain that\n-\tPLUGIN_PRAGMAS has no sense for lto1. Explain\n-\tPLUGIN_INCLUDE_FILE.\n-\tRemind that no GCC functions should be called after\n-\tPLUGIN_FINISH.\n+\tPLUGIN_PRAGMAS has no sense for lto1.  Explain PLUGIN_INCLUDE_FILE.\n+\tRemind that no GCC functions should be called after PLUGIN_FINISH.\n \tExplain what pragmas with expansion are.\n \n 2014-03-18  Martin Liska  <mliska@suse.cz>\n@@ -814,8 +828,7 @@\n \n 2014-03-13  Cesar Philippidis  <cesar@codesourcery.com>\n \n-\t* lto-wrapper.c (maybe_unlink_file): Suppress diagnostic\n-\tmessages.\n+\t* lto-wrapper.c (maybe_unlink_file): Suppress diagnostic messages.\n \n 2014-03-13  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "72a4d6d0788124060d324aac3cdac6b7a82e46fe", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 154, "deletions": 53, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429749e23bd81edfcefca574647f65e45e903819/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429749e23bd81edfcefca574647f65e45e903819/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=429749e23bd81edfcefca574647f65e45e903819", "patch": "@@ -2712,50 +2712,46 @@\n \t(fma:FMAMODEM\n \t  (match_operand:FMAMODEM 1 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODEM 2 \"nonimmediate_operand\")\n-\t  (match_operand:FMAMODEM 3 \"nonimmediate_operand\")))]\n-  \"\")\n+\t  (match_operand:FMAMODEM 3 \"nonimmediate_operand\")))])\n \n (define_expand \"fms<mode>4\"\n   [(set (match_operand:FMAMODEM 0 \"register_operand\")\n \t(fma:FMAMODEM\n \t  (match_operand:FMAMODEM 1 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODEM 2 \"nonimmediate_operand\")\n-\t  (neg:FMAMODEM (match_operand:FMAMODEM 3 \"nonimmediate_operand\"))))]\n-  \"\")\n+\t  (neg:FMAMODEM (match_operand:FMAMODEM 3 \"nonimmediate_operand\"))))])\n \n (define_expand \"fnma<mode>4\"\n   [(set (match_operand:FMAMODEM 0 \"register_operand\")\n \t(fma:FMAMODEM\n \t  (neg:FMAMODEM (match_operand:FMAMODEM 1 \"nonimmediate_operand\"))\n \t  (match_operand:FMAMODEM 2 \"nonimmediate_operand\")\n-\t  (match_operand:FMAMODEM 3 \"nonimmediate_operand\")))]\n-  \"\")\n+\t  (match_operand:FMAMODEM 3 \"nonimmediate_operand\")))])\n \n (define_expand \"fnms<mode>4\"\n   [(set (match_operand:FMAMODEM 0 \"register_operand\")\n \t(fma:FMAMODEM\n \t  (neg:FMAMODEM (match_operand:FMAMODEM 1 \"nonimmediate_operand\"))\n \t  (match_operand:FMAMODEM 2 \"nonimmediate_operand\")\n-\t  (neg:FMAMODEM (match_operand:FMAMODEM 3 \"nonimmediate_operand\"))))]\n-  \"\")\n+\t  (neg:FMAMODEM (match_operand:FMAMODEM 3 \"nonimmediate_operand\"))))])\n \n ;; The builtins for intrinsics are not constrained by SSE math enabled.\n-(define_mode_iterator FMAMODE [(SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n-\t\t\t       (DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n-\t\t\t       (V4SF \"TARGET_FMA || TARGET_FMA4\")\n-\t\t\t       (V2DF \"TARGET_FMA || TARGET_FMA4\")\n-\t\t\t       (V8SF \"TARGET_FMA || TARGET_FMA4\")\n-\t\t\t       (V4DF \"TARGET_FMA || TARGET_FMA4\")\n-\t\t\t       (V16SF \"TARGET_AVX512F\")\n-\t\t\t       (V8DF \"TARGET_AVX512F\")])\n+(define_mode_iterator FMAMODE\n+  [(SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n+   (DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n+   (V4SF \"TARGET_FMA || TARGET_FMA4\")\n+   (V2DF \"TARGET_FMA || TARGET_FMA4\")\n+   (V8SF \"TARGET_FMA || TARGET_FMA4\")\n+   (V4DF \"TARGET_FMA || TARGET_FMA4\")\n+   (V16SF \"TARGET_AVX512F\")\n+   (V8DF \"TARGET_AVX512F\")])\n \n (define_expand \"fma4i_fmadd_<mode>\"\n   [(set (match_operand:FMAMODE 0 \"register_operand\")\n \t(fma:FMAMODE\n \t  (match_operand:FMAMODE 1 \"nonimmediate_operand\")\n \t  (match_operand:FMAMODE 2 \"nonimmediate_operand\")\n-\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))]\n-  \"\")\n+\t  (match_operand:FMAMODE 3 \"nonimmediate_operand\")))])\n \n (define_expand \"avx512f_fmadd_<mode>_maskz<round_expand_name>\"\n   [(match_operand:VF_512 0 \"register_operand\")\n@@ -2771,12 +2767,20 @@\n   DONE;\n })\n \n+(define_mode_iterator FMAMODE_NOVF512\n+  [(SF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n+   (DF \"TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F\")\n+   (V4SF \"TARGET_FMA || TARGET_FMA4\")\n+   (V2DF \"TARGET_FMA || TARGET_FMA4\")\n+   (V8SF \"TARGET_FMA || TARGET_FMA4\")\n+   (V4DF \"TARGET_FMA || TARGET_FMA4\")])\n+\n (define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE\n-\t  (match_operand:FMAMODE 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n-\t  (match_operand:FMAMODE 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (match_operand:FMAMODE 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n+  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE_NOVF512\n+\t  (match_operand:FMAMODE_NOVF512 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n+\t  (match_operand:FMAMODE_NOVF512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t  (match_operand:FMAMODE_NOVF512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n   \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -2788,6 +2792,21 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_512\n+\t  (match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t  (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n+  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n+   (set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"avx512f_fmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n@@ -2821,12 +2840,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE\n-\t  (match_operand:FMAMODE   1 \"<round_nimm_predicate>\" \"%0, 0, v, x,x\")\n-\t  (match_operand:FMAMODE   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n+  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE_NOVF512\n+\t  (match_operand:FMAMODE_NOVF512   1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n+\t  (match_operand:FMAMODE_NOVF512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t  (neg:FMAMODE_NOVF512\n+\t    (match_operand:FMAMODE_NOVF512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n   \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -2838,6 +2857,22 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_512\n+\t  (match_operand:VF_512   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t  (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (neg:VF_512\n+\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n+  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n+   (set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"avx512f_fmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n@@ -2873,12 +2908,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE\n-\t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n-\t  (match_operand:FMAMODE   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (match_operand:FMAMODE   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n+  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE_NOVF512\n+\t  (neg:FMAMODE_NOVF512\n+\t    (match_operand:FMAMODE_NOVF512 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n+\t  (match_operand:FMAMODE_NOVF512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t  (match_operand:FMAMODE_NOVF512   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")))]\n   \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfnmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -2890,6 +2925,22 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_512\n+\t  (neg:VF_512\n+\t    (match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n+\t  (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (match_operand:VF_512   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfnmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfnmadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfnmadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n+  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n+   (set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"avx512f_fnmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n@@ -2925,13 +2976,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:FMAMODE 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(fma:FMAMODE\n-\t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n-\t  (match_operand:FMAMODE   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t  (neg:FMAMODE\n-\t    (match_operand:FMAMODE 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n+  [(set (match_operand:FMAMODE_NOVF512 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(fma:FMAMODE_NOVF512\n+\t  (neg:FMAMODE_NOVF512\n+\t    (match_operand:FMAMODE_NOVF512 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\"))\n+\t  (match_operand:FMAMODE_NOVF512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t  (neg:FMAMODE_NOVF512\n+\t    (match_operand:FMAMODE_NOVF512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))))]\n   \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfnmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -2943,6 +2994,23 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n+\t(fma:VF_512\n+\t  (neg:VF_512\n+\t    (match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n+\t  (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (neg:VF_512\n+\t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n+  \"<sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfnmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfnmsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfnmsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n+  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n+   (set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"avx512f_fnmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n@@ -3014,11 +3082,11 @@\n })\n \n (define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(unspec:VF\n-\t  [(match_operand:VF 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n-\t   (match_operand:VF 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t   (match_operand:VF 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")]\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(unspec:VF_128_256\n+\t  [(match_operand:VF_128_256 1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n+\t   (match_operand:VF_128_256 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t   (match_operand:VF_128_256 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\")]\n \t  UNSPEC_FMADDSUB))]\n   \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n@@ -3031,6 +3099,22 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"<sd_mask_codefor>fma_fmaddsub_<mode><sd_maskz_name><round_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t   (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t   (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")]\n+\t  UNSPEC_FMADDSUB))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfmaddsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmaddsub213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmaddsub231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n+  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n+   (set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"avx512f_fmaddsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512\n@@ -3066,12 +3150,12 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"=v,v,v,x,x\")\n-\t(unspec:VF\n-\t  [(match_operand:VF   1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n-\t   (match_operand:VF   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n-\t   (neg:VF\n-\t     (match_operand:VF 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))]\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=v,v,v,x,x\")\n+\t(unspec:VF_128_256\n+\t  [(match_operand:VF_128_256   1 \"<round_nimm_predicate>\" \"%0,0,v,x,x\")\n+\t   (match_operand:VF_128_256   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>,x,m\")\n+\t   (neg:VF_128_256\n+\t     (match_operand:VF_128_256 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0,xm,x\"))]\n \t  UNSPEC_FMADDSUB))]\n   \"(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n@@ -3084,6 +3168,23 @@\n    (set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"<sd_mask_codefor>fma_fmsubadd_<mode><sd_maskz_name><round_name>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v,v\")\n+\t(unspec:VF_512\n+\t  [(match_operand:VF_512   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n+\t   (match_operand:VF_512   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t   (neg:VF_512\n+\t     (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))]\n+\t  UNSPEC_FMADDSUB))]\n+  \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"@\n+   vfmsubadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n+   vfmsubadd213<ssemodesuffix>\\t{<round_sd_mask_op4>%3, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<round_sd_mask_op4>}\n+   vfmsubadd231<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<round_sd_mask_op4>}\"\n+  [(set_attr \"isa\" \"fma_avx512f,fma_avx512f,fma_avx512f\")\n+   (set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"avx512f_fmsubadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_512"}]}