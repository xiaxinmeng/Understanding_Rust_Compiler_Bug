{"sha": "c630157fd01140dbce120c1409c413a97dc17104", "node_id": "C_kwDOANBUbNoAKGM2MzAxNTdmZDAxMTQwZGJjZTEyMGMxNDA5YzQxM2E5N2RjMTcxMDQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-16T18:22:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-16T18:22:54Z"}, "message": "c++: checking ICE with diagnosed constraint recursion [PR100288]\n\nWhen satisfaction_cache::get detects constraint recursion, it asserts\nthat entry->result is empty.  This makes sense when we're initially\ndetecting/diagnosing recursion from the inner recursive call, but\nafterwards from the outer recursive call the recursion error is treated\nlike any other unrelated constraint failure encountered during\nsatisfaction, and we set entry->result to whatever the satisfaction\nvalue ended up being.\n\nPerhaps we should keep entry->result cleared in this case, but that'd\nrequire the inner recursive call to communicate to the outer recursive\ncall that constraint recursion occurred, likely via setting entry->result\nto some sentinel value, which doesn't seem to be worth the complexity.\nSo this patch just relaxes the problematic assert to accept non-empty\nentry->result as long as we've already issued an error.\n\n\tPR c++/100288\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (satisfaction_cache::get): Relax overly strict\n\tchecking assert in the constraint recursion case.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-recursive-sat5.C: New test.", "tree": {"sha": "b8ef90a8836d0a675f0799cf3f33314dafe9c018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ef90a8836d0a675f0799cf3f33314dafe9c018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c630157fd01140dbce120c1409c413a97dc17104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c630157fd01140dbce120c1409c413a97dc17104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c630157fd01140dbce120c1409c413a97dc17104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c630157fd01140dbce120c1409c413a97dc17104/comments", "author": null, "committer": null, "parents": [{"sha": "8da8c7d337123b28fdeb539a283d00732118712e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da8c7d337123b28fdeb539a283d00732118712e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da8c7d337123b28fdeb539a283d00732118712e"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "273d15ab0975b15cbf1256285e54939c2758748c", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c630157fd01140dbce120c1409c413a97dc17104/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c630157fd01140dbce120c1409c413a97dc17104/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=c630157fd01140dbce120c1409c413a97dc17104", "patch": "@@ -2705,7 +2705,7 @@ satisfaction_cache::get ()\n   if (entry->evaluating)\n     {\n       /* If we get here, it means satisfaction is self-recursive.  */\n-      gcc_checking_assert (!entry->result);\n+      gcc_checking_assert (!entry->result || seen_error ());\n       if (info.noisy ())\n \terror_at (EXPR_LOCATION (ATOMIC_CONSTR_EXPR (entry->atom)),\n \t\t  \"satisfaction of atomic constraint %qE depends on itself\","}, {"sha": "ba564873a2042b70aaffc28f4eb7c04efc008ecd", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-recursive-sat5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c630157fd01140dbce120c1409c413a97dc17104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c630157fd01140dbce120c1409c413a97dc17104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-recursive-sat5.C?ref=c630157fd01140dbce120c1409c413a97dc17104", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/100288\n+// { dg-do compile { target c++20 } }\n+\n+struct A { };\n+\n+template<typename T> concept pipeable = requires(A a, T t) { a | t; }; // { dg-error \"depends on itself\" }\n+\n+template<pipeable T> void operator|(A, T);\n+\n+void f(A tab) {\n+  tab | 1; // { dg-error \"no match\" }\n+  tab | 1; // { dg-error \"no match\" }\n+}"}]}