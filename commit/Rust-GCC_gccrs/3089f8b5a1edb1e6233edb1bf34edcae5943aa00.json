{"sha": "3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4OWY4YjVhMWVkYjFlNjIzM2VkYjFiZjM0ZWRjYWU1OTQzYWEwMA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-06-14T07:51:58Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-06-14T07:51:58Z"}, "message": "configure.ac: Add --enable-checking=df.\n\n2007-06-14  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac: Add --enable-checking=df.  Explicitly mention that\n\tthe variables are initialized as for \"release\".\n\t* df-core.c: Use it.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\nFrom-SVN: r125698", "tree": {"sha": "56353f3485cfb67af89ae4262894376f50a8e2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56353f3485cfb67af89ae4262894376f50a8e2c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/comments", "author": null, "committer": null, "parents": [{"sha": "20dca97bbdf6cc9319e32c5731c7df2faf1427b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20dca97bbdf6cc9319e32c5731c7df2faf1427b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20dca97bbdf6cc9319e32c5731c7df2faf1427b3"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "22f9685887da364016cf8fc3465b6421369319a0", "filename": "gcc/config.in", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "patch": "@@ -46,15 +46,22 @@\n #endif\n \n \n+/* Define to 1 to specify that we are using the BID decimal floating point\n+   format instead of DPD */\n+#ifndef USED_FOR_TARGET\n+#undef ENABLE_DECIMAL_BID_FORMAT\n+#endif\n+\n+\n /* Define to 1 to enable decimal float extension to C. */\n #ifndef USED_FOR_TARGET\n #undef ENABLE_DECIMAL_FLOAT\n #endif\n \n \n-/* Define to 1 to say we are using the BID decimal format */\n+/* Define if you want more run-time sanity checks for dataflow. */\n #ifndef USED_FOR_TARGET\n-#undef ENABLE_DECIMAL_BID_FORMAT\n+#undef ENABLE_DF_CHECKING\n #endif\n \n "}, {"sha": "2b435d4d49c241accf7d9c9f8ee85042828bcea7", "filename": "gcc/configure", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "patch": "@@ -867,7 +867,7 @@ Optional Features:\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n \t\t\t  Categories are: yes,no,all,none,release.\n-\t\t\t  Flags are: assert,fold,gc,gcac,misc,\n+\t\t\t  Flags are: assert,df,fold,gc,gcac,misc,\n \t\t\t  rtlflag,rtl,runtime,tree,valgrind.\n   --enable-mapped-location   location_t is fileline integer cookie\n   --enable-coverage=LEVEL\n@@ -6474,43 +6474,34 @@ else\n   ac_checking_flags=release\n fi\n fi;\n-ac_assert_checking=1\n-ac_checking=\n-ac_fold_checking=\n-ac_gc_checking=\n-ac_gc_always_collect=\n-ac_rtl_checking=\n-ac_rtlflag_checking=\n-ac_runtime_checking=1\n-ac_tree_checking=\n-ac_valgrind_checking=\n IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n-for check in $ac_checking_flags\n+for check in release,$ac_checking_flags\n do\n \tcase $check in\n \t# these set all the flags to specific states\n-\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n \t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n-\tno|none)\tac_assert_checking= ; ac_checking= ;\n+\tno|none)\tac_assert_checking= ; ac_checking= ; ac_df_checking= ;\n \t\t\tac_fold_checking= ; ac_gc_checking= ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking= ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n-\tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\tall)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n \t\t\tac_fold_checking=1 ; ac_gc_checking=1 ;\n \t\t\tac_gc_always_collect=1 ; ac_rtl_checking=1 ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n-\trelease)\tac_assert_checking=1 ; ac_checking= ;\n+\trelease)\tac_assert_checking=1 ; ac_checking= ; ac_df_checking= ;\n \t\t\tac_fold_checking= ; ac_gc_checking= ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n \t# these enable particular checks\n \tassert) \tac_assert_checking=1 ;;\n+\tdf)\t \tac_df_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n@@ -6536,6 +6527,13 @@ _ACEOF\n \n   nocommon_flag=-fno-common\n fi\n+if test x$ac_df_checking != x ; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define ENABLE_DF_CHECKING 1\n+_ACEOF\n+\n+fi\n \n if test x$ac_assert_checking != x ; then\n \n@@ -7675,7 +7673,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7678: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7676: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[4-9]*)"}, {"sha": "0f13e99fd408aa94d9e3de5d69a04089faa87c61", "filename": "gcc/configure.ac", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "patch": "@@ -435,7 +435,7 @@ AC_ARG_ENABLE(checking,\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n \t\t\t  Categories are: yes,no,all,none,release.\n-\t\t\t  Flags are: assert,fold,gc,gcac,misc,\n+\t\t\t  Flags are: assert,df,fold,gc,gcac,misc,\n \t\t\t  rtlflag,rtl,runtime,tree,valgrind.],\n [ac_checking_flags=\"${enableval}\"],[\n # Determine the default checks.\n@@ -444,43 +444,34 @@ if test x$is_release = x ; then\n else\n   ac_checking_flags=release\n fi])\n-ac_assert_checking=1\n-ac_checking=\n-ac_fold_checking=\n-ac_gc_checking=\n-ac_gc_always_collect=\n-ac_rtl_checking=\n-ac_rtlflag_checking=\n-ac_runtime_checking=1\n-ac_tree_checking=\n-ac_valgrind_checking=\n IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n-for check in $ac_checking_flags\n+for check in release,$ac_checking_flags\n do\n \tcase $check in\n \t# these set all the flags to specific states\n-\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\tyes)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n \t\t\tac_fold_checking= ; ac_gc_checking=1 ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n-\tno|none)\tac_assert_checking= ; ac_checking= ;\n+\tno|none)\tac_assert_checking= ; ac_checking= ; ac_df_checking= ;\n \t\t\tac_fold_checking= ; ac_gc_checking= ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking= ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n-\tall)\t\tac_assert_checking=1 ; ac_checking=1 ;\n+\tall)\t\tac_assert_checking=1 ; ac_checking=1 ; ac_df_checking=1 ;\n \t\t\tac_fold_checking=1 ; ac_gc_checking=1 ;\n \t\t\tac_gc_always_collect=1 ; ac_rtl_checking=1 ;\n \t\t\tac_rtlflag_checking=1 ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking=1 ; ac_valgrind_checking= ;;\n-\trelease)\tac_assert_checking=1 ; ac_checking= ;\n+\trelease)\tac_assert_checking=1 ; ac_checking= ; ac_df_checking= ;\n \t\t\tac_fold_checking= ; ac_gc_checking= ;\n \t\t\tac_gc_always_collect= ; ac_rtl_checking= ;\n \t\t\tac_rtlflag_checking= ; ac_runtime_checking=1 ;\n \t\t\tac_tree_checking= ; ac_valgrind_checking= ;;\n \t# these enable particular checks\n \tassert) \tac_assert_checking=1 ;;\n+\tdf)\t \tac_df_checking=1 ;;\n \tfold)\t\tac_fold_checking=1 ;;\n \tgc)\t\tac_gc_checking=1 ;;\n \tgcac)\t\tac_gc_always_collect=1 ;;\n@@ -503,6 +494,10 @@ if test x$ac_checking != x ; then\n   nocommon_flag=-fno-common\n fi\n AC_SUBST(nocommon_flag)\n+if test x$ac_df_checking != x ; then\n+  AC_DEFINE(ENABLE_DF_CHECKING, 1,\n+[Define if you want more run-time sanity checks for dataflow.])\n+fi\n if test x$ac_assert_checking != x ; then\n   AC_DEFINE(ENABLE_ASSERT_CHECKING, 1,\n [Define if you want assertions enabled.  This is a cheap check.])"}, {"sha": "67a4040d50e6d6f013f6ca6e909f7d10240e2f89", "filename": "gcc/df-core.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3089f8b5a1edb1e6233edb1bf34edcae5943aa00/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=3089f8b5a1edb1e6233edb1bf34edcae5943aa00", "patch": "@@ -644,7 +644,7 @@ df_finish_pass (void)\n   int i;\n   int removed = 0;\n \n-#ifdef ENABLE_CHECKING\n+#ifdef ENABLE_DF_CHECKING\n   enum df_changeable_flags saved_flags;\n #endif\n \n@@ -654,7 +654,7 @@ df_finish_pass (void)\n   df_maybe_reorganize_def_refs (DF_REF_ORDER_NO_TABLE);\n   df_maybe_reorganize_use_refs (DF_REF_ORDER_NO_TABLE);\n \n-#ifdef ENABLE_CHECKING\n+#ifdef ENABLE_DF_CHECKING\n   saved_flags = df->changeable_flags;\n #endif\n \n@@ -684,7 +684,7 @@ df_finish_pass (void)\n       df->analyze_subset = false;\n     }\n \n-#ifdef ENABLE_CHECKING\n+#ifdef ENABLE_DF_CHECKING\n   /* Verification will fail in DF_NO_INSN_RESCAN.  */\n   if (!(saved_flags & DF_NO_INSN_RESCAN))\n     {\n@@ -1040,7 +1040,7 @@ df_analyze_problem (struct dataflow *dflow,\n {\n   timevar_push (dflow->problem->tv_id);\n \n-#ifdef ENABLE_CHECKING\n+#ifdef ENABLE_DF_CHECKING\n   if (dflow->problem->verify_start_fun)\n     dflow->problem->verify_start_fun ();\n #endif\n@@ -1062,7 +1062,7 @@ df_analyze_problem (struct dataflow *dflow,\n   if (dflow->problem->finalize_fun)\n     dflow->problem->finalize_fun (blocks_to_consider);\n \n-#ifdef ENABLE_CHECKING\n+#ifdef ENABLE_DF_CHECKING\n   if (dflow->problem->verify_end_fun)\n     dflow->problem->verify_end_fun ();\n #endif\n@@ -1100,9 +1100,10 @@ df_analyze (void)\n   df_compute_regs_ever_live (false);\n   df_process_deferred_rescans ();\n \n-#ifdef ENABLE_CHECKING\n   if (dump_file)\n     fprintf (dump_file, \"df_analyze called\\n\");\n+\n+#ifdef ENABLE_DF_CHECKING\n   df_verify ();\n #endif \n "}]}