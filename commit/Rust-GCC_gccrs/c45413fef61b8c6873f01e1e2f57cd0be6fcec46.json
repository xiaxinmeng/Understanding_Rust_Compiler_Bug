{"sha": "c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1NDEzZmVmNjFiOGM2ODczZjAxZTFlMmY1N2NkMGJlNmZjZWM0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-20T00:06:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-20T00:06:19Z"}, "message": "re PR c++/45267 (inlining fails with -m32)\n\n\tPR c++/45267\n\t* decl.c (duplicate_decls): Keep always_inline attribute\n\tin sync with DECL_DISREGARD_INLINE_LIMITS.\n\nFrom-SVN: r172744", "tree": {"sha": "824a882a9918314f543413bb9d1acf74b7602879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824a882a9918314f543413bb9d1acf74b7602879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f888468542a71fd6324f2e6668e7f968000f641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f888468542a71fd6324f2e6668e7f968000f641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f888468542a71fd6324f2e6668e7f968000f641"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "7feb42795654f124ab664030bf20d763542e5cc9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "patch": "@@ -1,3 +1,9 @@\n+2011-04-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/45267\n+\t* decl.c (duplicate_decls): Keep always_inline attribute\n+\tin sync with DECL_DISREGARD_INLINE_LIMITS.\n+\n 2011-04-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48569"}, {"sha": "63096485ffed2e791e74942dafa8b51a4f233c81", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "patch": "@@ -2052,6 +2052,19 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n \t  /* [temp.expl.spec/14] We don't inline explicit specialization\n \t     just because the primary template says so.  */\n+\n+\t  /* But still keep DECL_DISREGARD_INLINE_LIMITS in sync with\n+\t     the always_inline attribute.  */\n+\t  if (DECL_DISREGARD_INLINE_LIMITS (olddecl)\n+\t      && !DECL_DISREGARD_INLINE_LIMITS (newdecl))\n+\t    {\n+\t      if (DECL_DECLARED_INLINE_P (newdecl))\n+\t\tDECL_DISREGARD_INLINE_LIMITS (newdecl) = true;\n+\t      else\n+\t\tDECL_ATTRIBUTES (newdecl)\n+\t\t  = remove_attribute (\"always_inline\",\n+\t\t\t\t      DECL_ATTRIBUTES (newdecl));\n+\t    }\n \t}\n       else if (new_defines_function && DECL_INITIAL (olddecl))\n \t{"}, {"sha": "7e5d187a19299b3420245d22868af979cb25d9e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "patch": "@@ -1,3 +1,7 @@\n+2011-04-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/attrib41.C: New.\n+\n 2011-04-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR testsuite/48676"}, {"sha": "368554a1b1dd5f60e2f6e793ea54034fd2d39ac3", "filename": "gcc/testsuite/g++.dg/ext/attrib41.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c45413fef61b8c6873f01e1e2f57cd0be6fcec46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib41.C?ref=c45413fef61b8c6873f01e1e2f57cd0be6fcec46", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/45267\n+// { dg-options \"-O\" }\n+\n+template<typename T> struct Vector {\n+  Vector(long long x);\n+  inline Vector<T> operator<<(int x) const __attribute__((always_inline));\n+};\n+long long bar (long long);\n+template<> inline Vector<int> Vector<int>::operator<<(int x) const {\n+  return bar(x);\n+}\n+bool b;\n+int main() {\n+  Vector<int> a(1);\n+  if ((a << 2), b) {\n+    a << 2;\n+    throw 1;\n+  }\n+}"}]}