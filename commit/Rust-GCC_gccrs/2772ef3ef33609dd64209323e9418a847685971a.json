{"sha": "2772ef3ef33609dd64209323e9418a847685971a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3MmVmM2VmMzM2MDlkZDY0MjA5MzIzZTk0MThhODQ3Njg1OTcxYQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-07T11:10:46Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-07T11:10:46Z"}, "message": "Makefile.in (OJBS, c-opts.o): Update.\n\n\t* Makefile.in (OJBS, c-opts.o): Update.\n\t(c-options.c, c-options.h): Rename options.h and options.c.\n\t(options.h): Rename options_.h.\n\t(opts.o): New.\n\t* c-common.h (c_common_handle_option): Replace c_common_decode_option.\n\t(c_common_init_options): Update prototype.\n\t* c-lang.c (c_init_options): Update prototype.\n\t(LANG_HOOKS_HANDLE_OPTION): Override.\n\t(LANG_HOOKS_DECODE_OPTION): Drop.\n\t* c-opts.c: Include opts.h and options.h instead of c-options.h\n\tand c-options.c.\n\t(lang_flags): Move to file scope.\n\t(find_opt, c_common_decode_option): Remove.\n\t(CL_C, CL_OBJC, CL_CXX, CL_OBJCXX, CL_JOINED, CL_SEPARATE,\n\tCL_REJECT_NEGATIVE): Move to opts.h.\n\t(missing_arg): Update prototype.\n\t(c_common_init_options): Update for new prototype.\n\t(c_common_handle_options): Filenames are passed as N_OPTS.\n\t* hooks.c (hook_int_void_0): New.\n\t* hooks.h (hook_int_void_0): New.\n\t* langhooks-def.h (LANG_HOOKS_INIT_OPTIONS): New default.\n\t(LANG_HOOKS_HANDLE_OPTION): Default to NULL for now.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.h (init_options): Update.\n\t(handle_option): New.\n\t* opts.c, opts.h: New files.\n\t* opts.sh: Update c file to include opts.h and options.h.\n\t* toplev.c: Include opts.h; change options.h to options_.h.\n\t(parse_options_and_default_flags): Get lang_mask, use\n\thandle_option for language-specific handling.\n\t* objc/objc-lang.c (LANG_HOOKS_DECODE_OPTON): Drop.\n\t(LANG_HOOKS_HANDLE_OPTION): Override.\n\t(objc_init_options): Update.\nada:\n\t* misc.c (gnat_init_options): Update.\ncp:\n\t* cp-lang.c (LANG_HOOKS_DECODE_OPTON): Drop.\n\t(LANG_HOOKS_HANDLE_OPTION): Override.\n\t* cp-tree.h (cxx_init_options): Update.\n\t* lex.c (cxx_init_options): Update.\nf:\n\t* com.c (ffe_init_options): Update.\njava:\n\t* lang.c (java_init_options): Update.\n\nFrom-SVN: r67584", "tree": {"sha": "924f51e62bf4028b92bc3030d4120771978f8a12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/924f51e62bf4028b92bc3030d4120771978f8a12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2772ef3ef33609dd64209323e9418a847685971a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2772ef3ef33609dd64209323e9418a847685971a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2772ef3ef33609dd64209323e9418a847685971a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2772ef3ef33609dd64209323e9418a847685971a/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6749ed8d3a382fa8815a1481937d17591c89891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6749ed8d3a382fa8815a1481937d17591c89891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6749ed8d3a382fa8815a1481937d17591c89891"}], "stats": {"total": 684, "additions": 410, "deletions": 274}, "files": [{"sha": "77210d955303fe6ff5d28133a44372da4178640f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -1,3 +1,39 @@\n+2003-06-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in (OJBS, c-opts.o): Update.\n+\t(c-options.c, c-options.h): Rename options.h and options.c.\n+\t(options.h): Rename options_.h.\n+\t(opts.o): New.\n+\t* c-common.h (c_common_handle_option): Replace c_common_decode_option.\n+\t(c_common_init_options): Update prototype.\n+\t* c-lang.c (c_init_options): Update prototype.\n+\t(LANG_HOOKS_HANDLE_OPTION): Override.\n+\t(LANG_HOOKS_DECODE_OPTION): Drop.\n+\t* c-opts.c: Include opts.h and options.h instead of c-options.h\n+\tand c-options.c.\n+\t(lang_flags): Move to file scope.\n+\t(find_opt, c_common_decode_option): Remove.\n+\t(CL_C, CL_OBJC, CL_CXX, CL_OBJCXX, CL_JOINED, CL_SEPARATE,\n+\tCL_REJECT_NEGATIVE): Move to opts.h.\n+\t(missing_arg): Update prototype.\n+\t(c_common_init_options): Update for new prototype.\n+\t(c_common_handle_options): Filenames are passed as N_OPTS.\n+\t* hooks.c (hook_int_void_0): New.\n+\t* hooks.h (hook_int_void_0): New.\n+\t* langhooks-def.h (LANG_HOOKS_INIT_OPTIONS): New default.\n+\t(LANG_HOOKS_HANDLE_OPTION): Default to NULL for now.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.h (init_options): Update.\n+\t(handle_option): New.\n+\t* opts.c, opts.h: New files.\n+\t* opts.sh: Update c file to include opts.h and options.h.\n+\t* toplev.c: Include opts.h; change options.h to options_.h.\n+\t(parse_options_and_default_flags): Get lang_mask, use\n+\thandle_option for language-specific handling.\n+\t* objc/objc-lang.c (LANG_HOOKS_DECODE_OPTON): Drop.\n+\t(LANG_HOOKS_HANDLE_OPTION): Override.\n+\t(objc_init_options): Update.\n+\n 2003-06-07  Magnus Kreth <magnus.kreth@gmx.de>\n \t    Thibaud Gaillard <thibaud.gaillard@nto.atmel.com>\n "}, {"sha": "c92a4c7356c75dd088fa6dc80a8c7d143f6ac88a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -812,7 +812,8 @@ OBJS = alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t   \\\n  haifa-sched.o hashtable.o hooks.o ifcvt.o insn-attrtab.o insn-emit.o\t   \\\n  insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o\t   \\\n  integrate.o intl.o jump.o  langhooks.o lcm.o lists.o local-alloc.o  \t   \\\n- loop.o mbchar.o optabs.o params.o predict.o print-rtl.o print-tree.o\t   \\\n+ loop.o mbchar.o optabs.o options.o opts.o params.o predict.o\t\t   \\\n+ print-rtl.o print-tree.o\t\t\t\t\t\t   \\\n  profile.o ra.o ra-build.o ra-colorize.o ra-debug.o ra-rewrite.o\t   \\\n  real.o recog.o reg-stack.o regclass.o regmove.o regrename.o\t\t   \\\n  reload.o reload1.o reorg.o resource.o rtl.o rtlanal.o rtl-error.o\t   \\\n@@ -1316,15 +1317,14 @@ c-pretty-print.o : c-pretty-print.c c-pretty-print.h pretty-print.h \\\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n         c-pragma.h flags.h toplev.h langhooks.h tree-inline.h diagnostic.h \\\n-\tintl.h debug.h $(C_COMMON_H) c-options.h c-options.c\n+\tintl.h debug.h $(C_COMMON_H) opts.h options.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n-c-options.c: c.opt $(srcdir)/opts.sh\n-\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh c-options.c c-options.h $(srcdir)/c.opt\n+options.c: c.opt $(srcdir)/opts.sh options.h\n \n-c-options.h: c-options.c\n-\t@true\n+options.h: c.opt $(srcdir)/opts.sh\n+\tAWK=$(AWK) $(SHELL) $(srcdir)/opts.sh options.c options.h $(srcdir)/c.opt\n \n c-cppbuiltin.o : c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(C_COMMON_H) c-pragma.h flags.h toplev.h langhooks.h \\\n@@ -1404,12 +1404,12 @@ s-gencheck : Makefile\n \t$(SHELL) $(srcdir)/move-if-change tmp-gencheck.h gencheck.h\n \t$(STAMP) s-gencheck\n \n-options.h : s-options ; @true\n+options_.h : s-options ; @true\n s-options : Makefile\n \tlof=\"$(lang_options_files)\"; for f in $$lof; do \\\n \t    echo \"#include \\\"$$f\\\"\"; \\\n-\tdone | sed 's|$(srcdir)/||' > tmp-options.h\n-\t$(SHELL) $(srcdir)/move-if-change tmp-options.h options.h\n+\tdone | sed 's|$(srcdir)/||' > tmp-options_.h\n+\t$(SHELL) $(srcdir)/move-if-change tmp-options_.h options_.h\n \t$(STAMP) s-options\n \n specs.h : s-specs ; @true\n@@ -1479,13 +1479,15 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H\n diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n+opts.o : opts.c opts.h options.h $(CONFIG_H) $(SYSTEM_H) \\\n+\tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H)\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n    ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n-   langhooks.h insn-flags.h options.h cfglayout.h real.h cfgloop.h \\\n+   langhooks.h insn-flags.h options_.h cfglayout.h real.h cfgloop.h \\\n    hosthooks.h $(LANGHOOKS_DEF_H) cgraph.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n@@ -2785,7 +2787,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f xlimits.h\n # Delete other built files.\n \t-rm -f xsys-protos.hT\n-\t-rm -f specs.h options.h gencheck.h c-options.c c-options.h\n+\t-rm -f specs.h options_.h gencheck.h options.c options.h\n # Delete the stamp and temporary files.\n \t-rm -f s-* tmp-* stamp-* stmp-*\n \t-rm -f */stamp-* */tmp-*"}, {"sha": "2a584d0d20ce21ad5728093ec4a9ef49739d6eba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -1,3 +1,7 @@\n+2003-06-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* misc.c (gnat_init_options): Update.\n+\n 2003-06-05  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* Make-lang.in (ada/b_gnatb.o-warn): Remove."}, {"sha": "180bb9a60f9a51a19da74160a2a90e7ab1ed5db0", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -81,7 +81,7 @@ extern char **save_argv;\n \n static size_t gnat_tree_size\t\tPARAMS ((enum tree_code));\n static bool gnat_init\t\t\tPARAMS ((void));\n-static void gnat_init_options\t\tPARAMS ((void));\n+static int gnat_init_options\t\tPARAMS ((void));\n static int gnat_decode_option\t\tPARAMS ((int, char **));\n static HOST_WIDE_INT gnat_get_alias_set\tPARAMS ((tree));\n static void gnat_print_decl\t\tPARAMS ((FILE *, tree, int));\n@@ -300,13 +300,15 @@ gnat_decode_option (argc, argv)\n \n /* Initialize for option processing.  */\n \n-static void\n+static int\n gnat_init_options ()\n {\n   /* Initialize gnat_argv with save_argv size */\n   gnat_argv = (char **) xmalloc ((save_argc + 1) * sizeof (gnat_argv[0])); \n   gnat_argv[0] = save_argv[0];     /* name of the command */ \n   gnat_argc = 1;\n+\n+  return 0;\n }\n \n /* Here is the function to handle the compiler error processing in GCC.  */"}, {"sha": "b458afcf4ceeac3dc8d36d4d09cce763b5e3e2de", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -901,7 +901,7 @@ extern tree handle_format_attribute\t\tPARAMS ((tree *, tree, tree,\n extern tree handle_format_arg_attribute\t\tPARAMS ((tree *, tree, tree,\n \t\t\t\t\t\t\t int, bool *));\n extern void c_common_insert_default_attributes\tPARAMS ((tree));\n-extern int c_common_decode_option\t\tPARAMS ((int, char **));\n+extern int c_common_handle_option (size_t code, const char *arg, int value);\n extern tree c_common_type_for_mode\t\tPARAMS ((enum machine_mode,\n \t\t\t\t\t\t\t int));\n extern tree c_common_type_for_size\t\tPARAMS ((unsigned int, int));\n@@ -959,7 +959,7 @@ extern void disable_builtin_function\t\tPARAMS ((const char *));\n \n extern tree build_va_arg\t\t\tPARAMS ((tree, tree));\n \n-extern void c_common_init_options\t\tPARAMS ((enum c_language_kind));\n+extern int c_common_init_options\t\tPARAMS ((enum c_language_kind));\n extern bool c_common_post_options\t\tPARAMS ((const char **));\n extern bool c_common_init\t\t\tPARAMS ((void));\n extern void c_common_finish\t\t\tPARAMS ((void));"}, {"sha": "92b9c6e4b28f689b4a8c72b135a35874c9af1154", "filename": "gcc/c-lang.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -31,7 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n-static void c_init_options PARAMS ((void));\n+static int c_init_options PARAMS ((void));\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n \n@@ -43,8 +43,8 @@ static void c_init_options PARAMS ((void));\n #define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_init_options\n-#undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION c_common_decode_option\n+#undef LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n@@ -157,10 +157,10 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n-static void\n+static int\n c_init_options ()\n {\n-  c_common_init_options (clk_c);\n+  return c_common_init_options (clk_c);\n }\n \n /* Used by c-lex.c, but only for objc.  */"}, {"sha": "75078b5d5cfcd92089c2a25abf3db98ffdbe4faa", "filename": "gcc/c-opts.c", "status": "modified", "additions": 34, "deletions": 229, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -35,7 +35,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cppdefault.h\"\n #include \"c-incpath.h\"\n #include \"debug.h\"\t\t/* For debug_hooks.  */\n-#include \"c-options.h\"\n+#include \"opts.h\"\n+#include \"options.h\"\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true\n@@ -49,6 +50,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n # define TARGET_EBCDIC 0\n #endif\n \n+static const int lang_flags[] = {CL_C, CL_OBJC, CL_CXX, CL_OBJCXX};\n+\n static int saved_lineno;\n \n /* CPP's options.  */\n@@ -97,8 +100,7 @@ static size_t deferred_count, deferred_size;\n /* Number of deferred options scanned for -include.  */\n static size_t include_cursor;\n \n-static void missing_arg PARAMS ((size_t));\n-static size_t find_opt PARAMS ((const char *, int));\n+static void missing_arg PARAMS ((enum opt_code));\n static void set_Wimplicit PARAMS ((int));\n static void complain_wrong_lang PARAMS ((size_t));\n static void write_langs PARAMS ((char *, int));\n@@ -114,36 +116,12 @@ static void add_prefixed_path PARAMS ((const char *, size_t));\n static void push_command_line_include PARAMS ((void));\n static void cb_file_change PARAMS ((cpp_reader *, const struct line_map *));\n static void finish_options PARAMS ((void));\n-static int c_common_handle_option (enum opt_code, const char *arg, int on);\n \n #ifndef STDC_0_IN_SYSTEM_HEADERS\n #define STDC_0_IN_SYSTEM_HEADERS 0\n #endif\n \n-#define CL_C\t\t\t(1 << 0) /* Only C.  */\n-#define CL_OBJC\t\t\t(1 << 1) /* Only ObjC.  */\n-#define CL_CXX\t\t\t(1 << 2) /* Only C++.  */\n-#define CL_OBJCXX\t\t(1 << 3) /* Only ObjC++.  */\n-#define CL_JOINED\t\t(1 << 4) /* If takes joined argument.  */\n-#define CL_SEPARATE\t\t(1 << 5) /* If takes a separate argument.  */\n-#define CL_REJECT_NEGATIVE\t(1 << 6) /* Reject no- form.  */\n-\n-#include \"c-options.c\"\n-\n-/* If the user gives an option to a front end that doesn't support it,\n-   an error is output, mentioning which front ends the option is valid\n-   for.  If you don't want this, you must accept it for all front\n-   ends, and test for the front end in the option handler.  See, for\n-   example, the handling of -fcond-mismatch.\n-\n-   If you requested a joined or separate argument, it is stored in the\n-   variable \"arg\", which is guaranteed to be non-NULL and to not be an\n-   empty string.  It points to the argument either within the argv[]\n-   vector or within one of that vector's strings, and so the text is\n-   permanent and copies need not be made.  Be sure to add an error\n-   message in missing_arg() if the default is not appropriate.  */\n-\n-/* Holds switches parsed by c_common_decode_option (), but whose\n+/* Holds switches parsed by c_common_handle_option (), but whose\n    handling is deferred to c_common_post_options ().  */\n static void defer_opt PARAMS ((enum opt_code, const char *));\n static struct deferred_opt\n@@ -155,12 +133,11 @@ static struct deferred_opt\n /* Complain that switch OPT_INDEX expects an argument but none was\n    provided.  */\n static void\n-missing_arg (opt_index)\n-     size_t opt_index;\n+missing_arg (enum opt_code code)\n {\n-  const char *opt_text = cl_options[opt_index].opt_text;\n+  const char *opt_text = cl_options[code].opt_text;\n \n-  switch (opt_index)\n+  switch (code)\n     {\n     case OPT__output_pch_:\n     case OPT_Wformat_:\n@@ -214,95 +191,6 @@ missing_arg (opt_index)\n     }\n }\n \n-/* Perform a binary search to find which option the command-line INPUT\n-   matches.  Returns its index in the option array, and N_OPTS on\n-   failure.\n-\n-   Complications arise since some options can be suffixed with an\n-   argument, and multiple complete matches can occur, e.g. -pedantic\n-   and -pedantic-errors.  Also, some options are only accepted by some\n-   languages.  If a switch matches for a different language and\n-   doesn't match any alternatives for the true front end, the index of\n-   the matched switch is returned anyway.  The caller should check for\n-   this case.  */\n-static size_t\n-find_opt (input, lang_flag)\n-     const char *input;\n-     int lang_flag;\n-{\n-  size_t md, mn, mx;\n-  size_t opt_len;\n-  size_t result = N_OPTS;\n-  int comp;\n-\n-  mn = 0;\n-  mx = N_OPTS;\n-\n-  while (mx > mn)\n-    {\n-      md = (mn + mx) / 2;\n-\n-      opt_len = cl_options[md].opt_len;\n-      comp = strncmp (input, cl_options[md].opt_text, opt_len);\n-\n-      if (comp < 0)\n-\tmx = md;\n-      else if (comp > 0)\n-\tmn = md + 1;\n-      else\n-\t{\n-\t  /* The switch matches.  It it an exact match?  */\n-\t  if (input[opt_len] == '\\0')\n-\t    return md;\n-\t  else\n-\t    {\n-\t      mn = md + 1;\n-\n-\t      /* If the switch takes no arguments this is not a proper\n-\t\t match, so we continue the search (e.g. input=\"stdc++\"\n-\t\t match was \"stdc\").  */\n-\t      if (!(cl_options[md].flags & CL_JOINED))\n-\t\tcontinue;\n-\n-\t      /* Is this switch valid for this front end?  */\n-\t      if (!(cl_options[md].flags & lang_flag))\n-\t\t{\n-\t\t  /* If subsequently we don't find a better match,\n-\t\t     return this and let the caller report it as a bad\n-\t\t     match.  */\n-\t\t  result = md;\n-\t\t  continue;\n-\t\t}\n-\n-\t      /* Two scenarios remain: we have the switch's argument,\n-\t\t or we match a longer option.  This can happen with\n-\t\t -iwithprefix and -withprefixbefore.  The longest\n-\t\t possible option match succeeds.\n-\n-\t\t Scan forwards, and return an exact match.  Otherwise\n-\t\t return the longest valid option-accepting match (mx).\n-\t\t This loops at most twice with current options.  */\n-\t      mx = md;\n-\t      for (md = md + 1; md < (size_t) N_OPTS; md++)\n-\t\t{\n-\t\t  opt_len = cl_options[md].opt_len;\n-\t\t  if (strncmp (input, cl_options[md].opt_text, opt_len))\n-\t\t    break;\n-\t\t  if (input[opt_len] == '\\0')\n-\t\t    return md;\n-\t\t  if (cl_options[md].flags & lang_flag\n-\t\t      && cl_options[md].flags & CL_JOINED)\n-\t\t    mx = md;\n-\t\t}\n-\n-\t      return mx;\n-\t    }\n-\t}\n-    }\n-\n-  return result;\n-}\n-\n /* Defer option CODE with argument ARG.  */\n static void\n defer_opt (code, arg)\n@@ -328,7 +216,7 @@ defer_opt (code, arg)\n }\n \n /* Common initialization before parsing options.  */\n-void\n+int\n c_common_init_options (lang)\n      enum c_language_kind lang;\n {\n@@ -342,134 +230,50 @@ c_common_init_options (lang)\n \n   flag_const_strings = (lang == clk_cplusplus);\n   warn_pointer_arith = (lang == clk_cplusplus);\n+\n+  return lang_flags[(c_language << 1) + flag_objc];\n }\n \n-/* Handle one command-line option in (argc, argv).\n-   Can be called multiple times, to handle multiple sets of options.\n-   Returns number of strings consumed.  */\n+/* Handle switch SCODE with argument ARG.  ON is true, unless no-\n+   form of an -f or -W option was given.  Returns 0 if the switch was\n+   invalid, a negative number to prevent language-independent\n+   processing in toplev.c (a hack necessary for the short-term).  */\n int\n-c_common_decode_option (argc, argv)\n-     int argc;\n-     char **argv;\n+c_common_handle_option (size_t scode, const char *arg, int on)\n {\n-  static const int lang_flags[] = {CL_C, CL_OBJC, CL_CXX, CL_OBJCXX};\n-  size_t opt_index;\n-  const char *opt, *arg = 0;\n-  char *dup = 0;\n-  bool on = true;\n-  int result = 0, temp, lang_flag;\n-  const struct cl_option *option;\n-\n-  opt = argv[0];\n-\n-  /* Interpret \"-\" or a non-switch as a file name.  */\n-  if (opt[0] != '-' || opt[1] == '\\0')\n+  const struct cl_option *option = &cl_options[scode];\n+  enum opt_code code = (enum opt_code) scode;\n+  int result = 1, lang_mask;\n+\n+  if (code == N_OPTS)\n     {\n       if (!in_fname)\n-\tin_fname = opt;\n+\tin_fname = arg;\n       else if (!out_fname)\n-\tout_fname = opt;\n+\tout_fname = arg;\n       else\n-\t{\n \t  error (\"too many filenames given.  Type %s --help for usage\",\n \t\t progname);\n-\t  return argc;\n-\t}\n-\n       return 1;\n     }\n \n-  /* Drop the \"no-\" from negative switches.  */\n-  if ((opt[1] == 'W' || opt[1] == 'f')\n-      && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n-    {\n-      size_t len = strlen (opt) - 3;\n-\n-      dup = xmalloc (len + 1);\n-      dup[0] = '-';\n-      dup[1] = opt[1];\n-      memcpy (dup + 2, opt + 5, len - 2 + 1);\n-      opt = dup;\n-      on = false;\n-    }\n-\n-  /* Skip over '-'.  */\n-  lang_flag = lang_flags[(c_language << 1) + flag_objc];\n-  opt_index = find_opt (opt + 1, lang_flag);\n-  if (opt_index == N_OPTS)\n-    goto done;\n-\n-  option = &cl_options[opt_index];\n-\n-  /* Reject negative form of switches that don't take negatives.  */\n-  if (!on && (option->flags & CL_REJECT_NEGATIVE))\n-    goto done;\n-\n-  /* We've recognised this switch.  */\n-  result = 1;\n-\n-  /* Sort out any argument the switch takes.  */\n-  if (option->flags & (CL_JOINED | CL_SEPARATE))\n+  lang_mask = lang_flags[(c_language << 1) + flag_objc];\n+  if (!(option->flags & lang_mask))\n     {\n-      if (option->flags & CL_JOINED)\n-\t{\n-\t  /* Have arg point to the original switch.  This is because\n-\t     some code, such as disable_builtin_function, expects its\n-\t     argument to be persistent until the program exits.  */\n-\t  arg = argv[0] + cl_options[opt_index].opt_len + 1;\n-\t  if (!on)\n-\t    arg += strlen (\"no-\");\n-\t}\n-\n-      /* If we don't have an argument, and CL_SEPARATE, try the next\n-\t argument in the vector.  */\n-      if (!arg || (*arg == '\\0' && option->flags & CL_SEPARATE))\n-\t{\n-\t  arg = argv[1];\n-\t  result = 2;\n-\t}\n-\n-      if (!arg || *arg == '\\0')\n-\t{\n-\t  missing_arg (opt_index);\n-\t  result = argc;\n-\t  goto done;\n-\t}\n+      complain_wrong_lang (code);\n+      return 1;\n     }\n \n-  /* Complain about the wrong language after we've swallowed any\n-     necessary extra argument.  Eventually make this a hard error\n-     after the call to find_opt, and return argc.  */\n-  if (!(cl_options[opt_index].flags & lang_flag))\n+  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n     {\n-      complain_wrong_lang (opt_index);\n-      goto done;\n+      missing_arg (code);\n+      return 1;\n     }\n \n-  temp = c_common_handle_option (opt_index, arg, on);\n-  if (temp <= 0)\n-    result = temp;\n-\n- done:\n-  if (dup)\n-    free (dup);\n-  return result;\n-}\n-\n-/* Handle switch OPT_INDEX with argument ARG.  ON is true, unless no-\n-   form of an -f or -W option was given.  Returns 0 if the switch was\n-   invalid, a negative number to prevent language-independent\n-   processing in toplev.c (a hack necessary for the short-term).  */\n-static int\n-c_common_handle_option (enum opt_code code, const char *arg, int on)\n-{\n-  const struct cl_option *option = &cl_options[code];\n-  int result = 1;\n-\n   switch (code)\n     {\n-    case N_OPTS: /* Shut GCC up.  */\n-      break;\n+    default:\n+      return 0;\n \n     case OPT__help:\n       print_help ();\n@@ -1740,6 +1544,7 @@ complain_wrong_lang (opt_index)\n \n   write_langs (ok_langs, ok_flags);\n   write_langs (bad_langs, ~ok_flags);\n+  /* Eventually this should become a hard error.  */\n   warning (\"\\\"-%s\\\" is valid for %s but not for %s\",\n \t   cl_options[opt_index].opt_text, ok_langs, bad_langs);\n }"}, {"sha": "59109315b70c4c00039f6b038bb0ad5e94becbfd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -1,3 +1,10 @@\n+2003-06-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_DECODE_OPTON): Drop.\n+\t(LANG_HOOKS_HANDLE_OPTION): Override.\n+\t* cp-tree.h (cxx_init_options): Update.\n+\t* lex.c (cxx_init_options): Update.\n+\n Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* Make-lang.in:  Add support for stageprofile and stagefeedback"}, {"sha": "7914d81c5f6f07a8af794e83e038e726983afcbf", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -49,8 +49,8 @@ static bool cp_var_mod_type_p (tree);\n #define LANG_HOOKS_CLEAR_BINDING_STACK pop_everything\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS cxx_init_options\n-#undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION c_common_decode_option\n+#undef LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "5b815fe82b7efd2d69b83ef6cf7726291d249940", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -3898,7 +3898,7 @@ extern void yyhook\t\t\t\t(int);\n extern int cp_type_qual_from_rid                (tree);\n extern bool cxx_init\t\t\t\t(void);\n extern void cxx_finish (void);\n-extern void cxx_init_options (void);\n+extern int cxx_init_options (void);\n \n /* in method.c */\n extern void init_method\t(void);"}, {"sha": "27684527f32e4575bc84a7345245d34a29a9b66d", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -150,11 +150,9 @@ int interface_unknown;\t\t/* whether or not we know this class\n \n \f\n /* Initialization before switch parsing.  */\n-void\n+int\n cxx_init_options ()\n {\n-  c_common_init_options (clk_cplusplus);\n-\n   /* Default exceptions on.  */\n   flag_exceptions = 1;\n   /* By default wrap lines at 80 characters.  Is getenv (\"COLUMNS\")\n@@ -163,6 +161,8 @@ cxx_init_options ()\n   /* By default, emit location information once for every\n      diagnostic message.  */\n   diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+\n+  return c_common_init_options (clk_cplusplus);\n }\n \n void"}, {"sha": "9baac574ffd225e0dcc6254c17afcf7b4178e0cb", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -1,3 +1,7 @@\n+Sat Jun  7 12:10:41 2003  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* com.c (ffe_init_options): Update.\n+\n Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* Make-lang.in:  Add support for stageprofile and stagefeedback"}, {"sha": "c0902c5f99efba8f7201185620c088d1697f02f2", "filename": "gcc/f/com.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -14149,7 +14149,7 @@ insert_block (tree block)\n static bool ffe_init PARAMS ((void));\n static void ffe_finish PARAMS ((void));\n static bool ffe_post_options PARAMS ((const char **));\n-static void ffe_init_options PARAMS ((void));\n+static int ffe_init_options PARAMS ((void));\n static void ffe_print_identifier PARAMS ((FILE *, tree, int));\n \n struct language_function GTY(())\n@@ -14289,7 +14289,7 @@ ffe_finish ()\n   fclose (finput);\n }\n \n-static void\n+static int\n ffe_init_options ()\n {\n   /* Set default options for Fortran.  */\n@@ -14299,6 +14299,8 @@ ffe_init_options ()\n   flag_merge_constants = 2;\n   flag_errno_math = 0;\n   flag_complex_divide_method = 1;\n+\n+  return 0;\n }\n \n static bool"}, {"sha": "a80ded7fc41df23b970a4275919414f27a8d0c12", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -104,6 +104,12 @@ hook_int_rtx_0 (a)\n   return 0;\n }\n \n+int\n+hook_int_void_0 (void)\n+{\n+  return 0;\n+}\n+\n void\n hook_void_tree (a)\n      tree a ATTRIBUTE_UNUSED;"}, {"sha": "407440fe33188b18f82b71247c7fade131d2fac8", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -39,6 +39,7 @@ void hook_void_tree_treeptr PARAMS ((tree, tree *));\n \n int hook_int_tree_tree_1 PARAMS ((tree, tree));\n int hook_int_rtx_0 PARAMS ((rtx));\n+int hook_int_void_0 (void);\n \n bool default_can_output_mi_thunk_no_vcall\n   PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));"}, {"sha": "f06a3c675acf4c3664d4e618ac153c166ec17ad4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -1,3 +1,7 @@\n+2003-06-07  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.c (java_init_options): Update.\n+\n Thu Jun  5 18:33:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* Make-lang.in:  Add support for stageprofile and stagefeedback"}, {"sha": "28be548e8879d48b53b5c5fee3e81d30aeb53b2d", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -55,7 +55,7 @@ struct string_option\n \n static bool java_init (void);\n static void java_finish (void);\n-static void java_init_options (void);\n+static int java_init_options (void);\n static bool java_post_options (const char **);\n \n static int java_decode_option (int, char **);\n@@ -731,7 +731,7 @@ void lang_init_source (int level)\n   inhibit_error_function_printing = (level == 1);\n }\n \n-static void\n+static int\n java_init_options (void)\n {\n   flag_bounds_check = 1;\n@@ -743,6 +743,8 @@ java_init_options (void)\n \n   /* In Java arithmetic overflow always wraps around.  */\n   flag_wrapv = 1;\n+\n+  return 0;\n }\n \n static bool"}, {"sha": "5a752bed119d9efae7a82e0abbd44241fa20483d", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -92,8 +92,9 @@ void write_global_declarations PARAMS ((void));\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n-#define LANG_HOOKS_INIT_OPTIONS\t\tlhd_do_nothing\n+#define LANG_HOOKS_INIT_OPTIONS\t\thook_int_void_0\n #define LANG_HOOKS_DECODE_OPTION\tlhd_decode_option\n+#define LANG_HOOKS_HANDLE_OPTION\tNULL\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n@@ -243,6 +244,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_TREE_SIZE, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n   LANG_HOOKS_DECODE_OPTION, \\\n+  LANG_HOOKS_HANDLE_OPTION, \\\n   LANG_HOOKS_POST_OPTIONS, \\\n   LANG_HOOKS_INIT, \\\n   LANG_HOOKS_FINISH, \\"}, {"sha": "c3ec11ddbb32f993be5a95889dcea1b0f1ef2547", "filename": "gcc/langhooks.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -199,8 +199,9 @@ struct lang_hooks\n   size_t (*tree_size) PARAMS ((enum tree_code));\n \n   /* The first callback made to the front end, for simple\n-     initialization needed before any calls to decode_option.  */\n-  void (*init_options) PARAMS ((void));\n+     initialization needed before any calls to handle_option.  Return\n+     the language mask to filter the switch array with.  */\n+  int (*init_options) PARAMS ((void));\n \n   /* Function called with an option vector as argument, to decode a\n      single option (typically starting with -f or -W or +).  It should\n@@ -209,9 +210,20 @@ struct lang_hooks\n      option.  If this function returns a negative number, then its\n      absolute value is the number of command-line arguments used, but,\n      in addition, no language-independent option processing should be\n-     done for this option.  */\n+     done for this option.  Obsoleted by handle_option.  */\n   int (*decode_option) PARAMS ((int, char **));\n \n+  /* Handle the switch CODE, which has real type enum opt_code from\n+     options.h.  If the switch takes an argument, it is passed in ARG\n+     which points to permanent storage.  The handler is resonsible for\n+     checking whether ARG is NULL, which indicates that no argument\n+     was in fact supplied.  For -f and -W switches, VALUE is 1 or 0\n+     for the positive and negative forms respectively.\n+\n+     Return 1 if the switch is valid, 0 if invalid, and -1 if it's\n+     valid and should not be treated as language-independent too.  */\n+  int (*handle_option) (size_t code, const char *arg, int value);\n+\n   /* Called when all command line options have been parsed to allow\n      further processing and initialization\n "}, {"sha": "2002840f5fa03154f424db8758bfb34ea7d74ffb", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -31,7 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n-static void objc_init_options                   PARAMS ((void));\n+static int objc_init_options                   PARAMS ((void));\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU Objective-C\"\n@@ -41,8 +41,8 @@ static void objc_init_options                   PARAMS ((void));\n #define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS objc_init_options\n-#undef LANG_HOOKS_DECODE_OPTION\n-#define LANG_HOOKS_DECODE_OPTION c_common_decode_option\n+#undef LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n@@ -164,9 +164,9 @@ const char * const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n-static void \n+static int \n objc_init_options ()\n {\n   flag_objc = 1;\n-  c_common_init_options (clk_c);\n+  return c_common_init_options (clk_c);\n }"}, {"sha": "3d3fa1010645d9e1855269b8bf30a6ee044822db", "filename": "gcc/opts.c", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -0,0 +1,209 @@\n+/* Command line option handling.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Contributed by Neil Booth.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"langhooks.h\"\n+#include \"opts.h\"\n+#include \"options.h\"\n+\n+static enum opt_code find_opt (const char *, int);\n+\n+/* Perform a binary search to find which option the command-line INPUT\n+   matches.  Returns its index in the option array, and N_OPTS on\n+   failure.\n+\n+   Complications arise since some options can be suffixed with an\n+   argument, and multiple complete matches can occur, e.g. -pedantic\n+   and -pedantic-errors.  Also, some options are only accepted by some\n+   languages.  If a switch matches for a different language and\n+   doesn't match any alternatives for the true front end, the index of\n+   the matched switch is returned anyway.  The caller should check for\n+   this case.  */\n+static enum opt_code\n+find_opt (const char *input, int lang_mask)\n+{\n+  size_t md, mn, mx;\n+  size_t opt_len;\n+  enum opt_code result = N_OPTS;\n+  int comp;\n+\n+  mn = 0;\n+  mx = N_OPTS;\n+\n+  while (mx > mn)\n+    {\n+      md = (mn + mx) / 2;\n+\n+      opt_len = cl_options[md].opt_len;\n+      comp = strncmp (input, cl_options[md].opt_text, opt_len);\n+\n+      if (comp < 0)\n+\tmx = md;\n+      else if (comp > 0)\n+\tmn = md + 1;\n+      else\n+\t{\n+\t  /* The switch matches.  It it an exact match?  */\n+\t  if (input[opt_len] == '\\0')\n+\t    return md;\n+\t  else\n+\t    {\n+\t      mn = md + 1;\n+\n+\t      /* If the switch takes no arguments this is not a proper\n+\t\t match, so we continue the search (e.g. input=\"stdc++\"\n+\t\t match was \"stdc\").  */\n+\t      if (!(cl_options[md].flags & CL_JOINED))\n+\t\tcontinue;\n+\n+\t      /* Is this switch valid for this front end?  */\n+\t      if (!(cl_options[md].flags & lang_mask))\n+\t\t{\n+\t\t  /* If subsequently we don't find a better match,\n+\t\t     return this and let the caller report it as a bad\n+\t\t     match.  */\n+\t\t  result = (enum opt_code) md;\n+\t\t  continue;\n+\t\t}\n+\n+\t      /* Two scenarios remain: we have the switch's argument,\n+\t\t or we match a longer option.  This can happen with\n+\t\t -iwithprefix and -withprefixbefore.  The longest\n+\t\t possible option match succeeds.\n+\n+\t\t Scan forwards, and return an exact match.  Otherwise\n+\t\t return the longest valid option-accepting match (mx).\n+\t\t This loops at most twice with current options.  */\n+\t      mx = md;\n+\t      for (md = md + 1; md < N_OPTS; md++)\n+\t\t{\n+\t\t  opt_len = cl_options[md].opt_len;\n+\t\t  if (strncmp (input, cl_options[md].opt_text, opt_len))\n+\t\t    break;\n+\t\t  if (input[opt_len] == '\\0')\n+\t\t    return md;\n+\t\t  if (cl_options[md].flags & lang_mask\n+\t\t      && cl_options[md].flags & CL_JOINED)\n+\t\t    mx = md;\n+\t\t}\n+\n+\t      return mx;\n+\t    }\n+\t}\n+    }\n+\n+  return result;\n+}\n+\n+/* Handle the switch beginning at ARGV, with ARGC remaining.  */\n+int\n+handle_option (int argc, char **argv, int lang_mask)\n+{\n+  size_t opt_index;\n+  const char *opt, *arg = 0;\n+  char *dup = 0;\n+  bool on = true;\n+  int result = 0, temp;\n+  const struct cl_option *option;\n+\n+  /* If the front end isn't yet converted, use the old hook.  */\n+  if (!lang_hooks.handle_option)\n+    return (*lang_hooks.decode_option) (argc, argv);\n+\n+  opt = argv[0];\n+\n+  /* Interpret \"-\" or a non-switch as a file name.  */\n+  if (opt[0] != '-' || opt[1] == '\\0')\n+    {\n+      opt_index = N_OPTS;\n+      arg = opt;\n+      result = 1;\n+    }\n+  else\n+    {\n+      /* Drop the \"no-\" from negative switches.  */\n+      if ((opt[1] == 'W' || opt[1] == 'f')\n+\t  && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n+\t{\n+\t  size_t len = strlen (opt) - 3;\n+\n+\t  dup = xmalloc (len + 1);\n+\t  dup[0] = '-';\n+\t  dup[1] = opt[1];\n+\t  memcpy (dup + 2, opt + 5, len - 2 + 1);\n+\t  opt = dup;\n+\t  on = false;\n+\t}\n+\n+      /* Skip over '-'.  */\n+      opt_index = find_opt (opt + 1, lang_mask);\n+      if (opt_index == N_OPTS)\n+\tgoto done;\n+\n+      option = &cl_options[opt_index];\n+\n+      /* Reject negative form of switches that don't take negatives.  */\n+      if (!on && (option->flags & CL_REJECT_NEGATIVE))\n+\tgoto done;\n+\n+      /* We've recognised this switch.  */\n+      result = 1;\n+\n+      /* Sort out any argument the switch takes.  */\n+      if (option->flags & (CL_JOINED | CL_SEPARATE))\n+\t{\n+\t  if (option->flags & CL_JOINED)\n+\t    {\n+\t      /* Have arg point to the original switch.  This is because\n+\t\t some code, such as disable_builtin_function, expects its\n+\t\t argument to be persistent until the program exits.  */\n+\t      arg = argv[0] + cl_options[opt_index].opt_len + 1;\n+\t      if (!on)\n+\t\targ += strlen (\"no-\");\n+\t    }\n+\n+\t  /* If we don't have an argument, and CL_SEPARATE, try the next\n+\t     argument in the vector.  */\n+\t  if (!arg || (*arg == '\\0' && option->flags & CL_SEPARATE))\n+\t    {\n+\t      arg = argv[1];\n+\t      result = 2;\n+\t    }\n+\n+\t  /* Canonicalize missing arguments as NULL for the handler.  */\n+\t  if (*arg == '\\0')\n+\t    arg = NULL;\n+\t}\n+    }\n+\n+  temp = (*lang_hooks.handle_option) (opt_index, arg, on);\n+  if (temp <= 0)\n+    result = temp;\n+\n+ done:\n+  if (dup)\n+    free (dup);\n+  return result;\n+}"}, {"sha": "297bd82511163e3f23a152507f5856ba3a89fb2c", "filename": "gcc/opts.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -0,0 +1,34 @@\n+/* Command line option handling.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef GCC_OPTS_H\n+#define GCC_OPTS_H\n+\n+extern int handle_option (int argc, char **argv, int lang_mask);\n+\n+#define CL_C\t\t\t(1 << 0) /* Only C.  */\n+#define CL_OBJC\t\t\t(1 << 1) /* Only ObjC.  */\n+#define CL_CXX\t\t\t(1 << 2) /* Only C++.  */\n+#define CL_OBJCXX\t\t(1 << 3) /* Only ObjC++.  */\n+#define CL_JOINED\t\t(1 << 4) /* If takes joined argument.  */\n+#define CL_SEPARATE\t\t(1 << 5) /* If takes a separate argument.  */\n+#define CL_REJECT_NEGATIVE\t(1 << 6) /* Reject no- form.  */\n+\n+#endif"}, {"sha": "bc90150fcb580f2a3402bd6f1af021e367fd16ce", "filename": "gcc/opts.sh", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -65,9 +65,12 @@ cat \"$@\" | ${AWK} '\n \tprint \"  const char *opt_text;\"\t\t\t>> h_file\n \tprint \"  unsigned char opt_len;\"\t\t>> h_file\n \tprint \"  unsigned char flags;\"\t\t\t>> h_file\n-\tprint \"};\\n\"\t\t\t\t\t>> h_file\n+\tprint \"};\\n\\n\"\t\t\t\t\t>> h_file\n+\tprint \"extern const struct cl_option cl_options[];\\n\" >> h_file\n \tprint \"enum opt_code\\n{\"\t\t\t>> h_file\n-\tprint \"static const struct cl_option cl_options[] =\\n{\" >> c_file\n+\tprint \"#include \\\"options.h\\\"\"\t\t\t>> c_file\n+\tprint \"#include \\\"opts.h\\\"\\n\"\t\t\t>> c_file\n+\tprint \"const struct cl_option cl_options[] =\\n{\" >> c_file\n     }\n \n     {"}, {"sha": "83db268232f5ff146618b4daf1afb1f300540724", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2772ef3ef33609dd64209323e9418a847685971a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2772ef3ef33609dd64209323e9418a847685971a", "patch": "@@ -76,6 +76,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"cfgloop.h\"\n #include \"hosthooks.h\"\n #include \"cgraph.h\"\n+#include \"opts.h\"\n \n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n@@ -1457,7 +1458,7 @@ documented_lang_options[] =\n \n #define DEFINE_LANG_NAME(NAME) { NULL, NAME },\n \n-#include \"options.h\"\n+#include \"options_.h\"\n \n };\n \n@@ -5134,7 +5135,7 @@ general_init (char *argv0)\n static void\n parse_options_and_default_flags (int argc, char **argv)\n {\n-  int i;\n+  int i, lang_mask;\n \n   /* Save in case md file wants to emit args as a comment.  */\n   save_argc = argc;\n@@ -5150,7 +5151,7 @@ parse_options_and_default_flags (int argc, char **argv)\n   init_ggc_heuristics();\n \n   /* Perform language-specific options initialization.  */\n-  (*lang_hooks.init_options) ();\n+  lang_mask = (*lang_hooks.init_options) ();\n \n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */\n@@ -5287,7 +5288,7 @@ parse_options_and_default_flags (int argc, char **argv)\n       int indep_processed;\n \n       /* Give the language a chance to decode the option for itself.  */\n-      lang_processed = (*lang_hooks.decode_option) (argc - i, argv + i);\n+      lang_processed = handle_option (argc - i, argv + i, lang_mask);\n \n       if (lang_processed >= 0)\n \t/* Now see if the option also has a language independent meaning."}]}