{"sha": "e23f28927f1922bd684d985901d13588a942fbd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzZjI4OTI3ZjE5MjJiZDY4NGQ5ODU5MDFkMTM1ODhhOTQyZmJkNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-01-27T19:39:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-01-27T19:39:37Z"}, "message": "re PR ipa/60871 (internal compiler error: in possible_polymorphic_call_targets, at ipa-devirt.c:1510)\n\n\n\tPR ipa/60871\n\tPR ipa/64139\n\t* tree.c (lookup_binfo_at_offset): New function.\n\t(get_binfo_at_offset): Use it.\n\n\t* g++.dg/torture/pr64139.C: New testcase.\n\t* g++.dg/torture/pr60871.C: Likewise.\n\nFrom-SVN: r220185", "tree": {"sha": "6f53950bc7b11bf868f62ef87364acf75ca6c161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f53950bc7b11bf868f62ef87364acf75ca6c161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23f28927f1922bd684d985901d13588a942fbd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23f28927f1922bd684d985901d13588a942fbd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23f28927f1922bd684d985901d13588a942fbd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23f28927f1922bd684d985901d13588a942fbd4/comments", "author": null, "committer": null, "parents": [{"sha": "94e54b8d14ac5525d8a4004e0450f5c6fff50252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e54b8d14ac5525d8a4004e0450f5c6fff50252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e54b8d14ac5525d8a4004e0450f5c6fff50252"}], "stats": {"total": 148, "additions": 113, "deletions": 35}, "files": [{"sha": "36d0045f1943f7e8f4f3207682ab7d1430fc6308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e23f28927f1922bd684d985901d13588a942fbd4", "patch": "@@ -1,3 +1,10 @@\n+2015-01-27  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/60871\n+\tPR ipa/64139\n+\t* tree.c (lookup_binfo_at_offset): New function.\n+\t(get_binfo_at_offset): Use it.\n+\n 2015-01-27  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/64282"}, {"sha": "8d50aacf55ddd415eb6aa04fa3d31232f4a28ce9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e23f28927f1922bd684d985901d13588a942fbd4", "patch": "@@ -1,3 +1,10 @@\n+2015-01-27  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/60871\n+\tPR ipa/64139\n+\t* g++.dg/torture/pr64139.C: New testcase.\n+\t* g++.dg/torture/pr60871.C: Likewise.\n+\n 2015-01-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/64230"}, {"sha": "902b9ee69d03905a45626ebbdc249d27e5a4b1d4", "filename": "gcc/testsuite/g++.dg/torture/pr60871.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60871.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60871.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr60871.C?ref=e23f28927f1922bd684d985901d13588a942fbd4", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+struct A\n+{\n+  virtual void m_fn1 ();\n+  int m_local;\n+};\n+class C : virtual public A\n+{\n+};\n+struct B\n+{\n+  A *m_g;\n+\n+  B (A *p1) : m_g (p1) { m_g->m_fn1 (); }\n+};\n+struct C7\n+{\n+  virtual ~C7 ();\n+};\n+class D : public C, C7\n+{\n+};\n+struct F : D\n+{\n+  F (int);\n+\n+  static void m_fn2 ()\n+  {\n+    F a (0);\n+    B b (&a);\n+  }\n+};\n+void fn1 () { F::m_fn2 (); }"}, {"sha": "932a676d6a02a5d2060473b65a3a0f28566d5900", "filename": "gcc/testsuite/g++.dg/torture/pr64139.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64139.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64139.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64139.C?ref=e23f28927f1922bd684d985901d13588a942fbd4", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+class IObject {\n+public:\n+  virtual ~IObject();\n+};\n+class A {\n+  virtual int m_fn1();\n+};\n+class B {\n+public:\n+  virtual int m_fn2(B) const;\n+};\n+class D : IObject, public virtual B {};\n+class G : public D, A {\n+public:\n+  G(A);\n+};\n+class F : B {\n+  friend class C;\n+};\n+class C {\n+  void m_fn3(const IObject &, int &);\n+  void m_fn4(const B &, int &);\n+};\n+A a;\n+void C::m_fn3(const IObject &, int &p2) {\n+  G r(a);\n+  m_fn4(r, p2);\n+}\n+void C::m_fn4(const B &p1, int &) {\n+  F b;\n+  p1.m_fn2(b);\n+}\n+"}, {"sha": "6fe1d5a0d55379dfb263fc65191b02fe8f35a4de", "filename": "gcc/tree.c", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23f28927f1922bd684d985901d13588a942fbd4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e23f28927f1922bd684d985901d13588a942fbd4", "patch": "@@ -11990,6 +11990,23 @@ type_in_anonymous_namespace_p (const_tree t)\n   return (TYPE_STUB_DECL (t) && !TREE_PUBLIC (TYPE_STUB_DECL (t)));\n }\n \n+/* Lookup sub-BINFO of BINFO of TYPE at offset POS.  */\n+\n+tree\n+lookup_binfo_at_offset (tree binfo, tree type, HOST_WIDE_INT pos)\n+{\n+  unsigned int i;\n+  tree base_binfo, b;\n+\n+  for (i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n+    if (pos == tree_to_shwi (BINFO_OFFSET (base_binfo))\n+\t&& types_same_for_odr (TREE_TYPE (base_binfo), type))\n+      return base_binfo;\n+    else if ((b = lookup_binfo_at_offset (base_binfo, type, pos)) != NULL)\n+      return b;\n+  return NULL;\n+}\n+\n /* Try to find a base info of BINFO that would have its field decl at offset\n    OFFSET within the BINFO type and which is of EXPECTED_TYPE.  If it can be\n    found, return, otherwise return NULL_TREE.  */\n@@ -12027,42 +12044,22 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n \t represented in the binfo for the derived class.  */\n       else if (offset != 0)\n \t{\n-\t  tree base_binfo, binfo2 = binfo;\n+\t  tree found_binfo = NULL, base_binfo;\n+\t  int offset = (tree_to_shwi (BINFO_OFFSET (binfo)) + pos\n+\t\t\t/ BITS_PER_UNIT);\n \n-\t  /* Find BINFO corresponding to FLD.  This is bit harder\n-\t     by a fact that in virtual inheritance we may need to walk down\n-\t     the non-virtual inheritance chain.  */\n-\t  while (true)\n-\t    {\n-\t      tree containing_binfo = NULL, found_binfo = NULL;\n-\t      for (i = 0; BINFO_BASE_ITERATE (binfo2, i, base_binfo); i++)\n-\t\tif (types_same_for_odr (TREE_TYPE (base_binfo), TREE_TYPE (fld)))\n-\t\t  {\n-\t\t    found_binfo = base_binfo;\n-\t\t    break;\n-\t\t  }\n-\t\telse\n-\t\t  if ((tree_to_shwi (BINFO_OFFSET (base_binfo)) \n-\t\t       - tree_to_shwi (BINFO_OFFSET (binfo)))\n-\t\t      * BITS_PER_UNIT < pos\n-\t\t      /* Rule out types with no virtual methods or we can get confused\n-\t\t\t here by zero sized bases.  */\n-\t\t      && TYPE_BINFO (BINFO_TYPE (base_binfo))\n-\t\t      && BINFO_VTABLE (TYPE_BINFO (BINFO_TYPE (base_binfo)))\n-\t\t      && (!containing_binfo\n-\t\t\t  || (tree_to_shwi (BINFO_OFFSET (containing_binfo))\n-\t\t\t      < tree_to_shwi (BINFO_OFFSET (base_binfo)))))\n-\t\t    containing_binfo = base_binfo;\n-\t      if (found_binfo)\n-\t\t{\n-\t\t  binfo = found_binfo;\n-\t\t  break;\n-\t\t}\n-\t      if (!containing_binfo)\n-\t\treturn NULL_TREE;\n-\t      binfo2 = containing_binfo;\n-\t    }\n-\t}\n+\t  for (i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n+\t    if (tree_to_shwi (BINFO_OFFSET (base_binfo)) == offset\n+\t\t&& types_same_for_odr (TREE_TYPE (base_binfo), TREE_TYPE (fld)))\n+\t      {\n+\t\tfound_binfo = base_binfo;\n+\t\tbreak;\n+\t      }\n+\t  if (found_binfo)\n+\t    binfo = found_binfo;\n+\t  else\n+\t    binfo = lookup_binfo_at_offset (binfo, TREE_TYPE (fld), offset);\n+\t }\n \n       type = TREE_TYPE (fld);\n       offset -= pos;"}]}