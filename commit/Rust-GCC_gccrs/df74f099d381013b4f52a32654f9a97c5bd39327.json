{"sha": "df74f099d381013b4f52a32654f9a97c5bd39327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3NGYwOTlkMzgxMDEzYjRmNTJhMzI2NTRmOWE5N2M1YmQzOTMyNw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-10-09T17:02:21Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-10-09T17:02:21Z"}, "message": "pa.h (BIGGEST_ALIGNMENT): Adjust comment.\n\n\t* config/pa/pa.h (BIGGEST_ALIGNMENT): Adjust comment.\n\t(MALLOC_ABI_ALIGNMENT): Define.\n\nFrom-SVN: r240901", "tree": {"sha": "27784452b85abf1298e12fc94cb51a584096ab42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27784452b85abf1298e12fc94cb51a584096ab42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df74f099d381013b4f52a32654f9a97c5bd39327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df74f099d381013b4f52a32654f9a97c5bd39327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df74f099d381013b4f52a32654f9a97c5bd39327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df74f099d381013b4f52a32654f9a97c5bd39327/comments", "author": null, "committer": null, "parents": [{"sha": "8813a647b5f81fb32955f8ec2438d73e9e6280d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8813a647b5f81fb32955f8ec2438d73e9e6280d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8813a647b5f81fb32955f8ec2438d73e9e6280d4"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "a6ef0f414fb3da3fa8c94123d98ebe7070f692a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df74f099d381013b4f52a32654f9a97c5bd39327/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df74f099d381013b4f52a32654f9a97c5bd39327/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df74f099d381013b4f52a32654f9a97c5bd39327", "patch": "@@ -1,3 +1,8 @@\n+2016-10-09  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.h (BIGGEST_ALIGNMENT): Adjust comment.\n+\t(MALLOC_ABI_ALIGNMENT): Define.\n+\n 2016-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-ssa.c (target_for_debug_bind, verify_phi_args,"}, {"sha": "f0aa1ae68c60d06763ef88a5304b4effa2ac1f3b", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df74f099d381013b4f52a32654f9a97c5bd39327/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df74f099d381013b4f52a32654f9a97c5bd39327/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=df74f099d381013b4f52a32654f9a97c5bd39327", "patch": "@@ -292,9 +292,21 @@ typedef struct GTY(()) machine_function\n /* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* No data type wants to be aligned rounder than this.  */\n+/* No data type wants to be aligned rounder than this.  The long double\n+   type has 16-byte alignment on the 64-bit target even though it was never\n+   implemented in hardware.  The software implementation only needs 8-byte\n+   alignment.  This is to match the HP compilers.  */\n #define BIGGEST_ALIGNMENT (2 * BITS_PER_WORD)\n \n+/* Alignment, in bits, a C conformant malloc implementation has to provide.\n+   The HP-UX malloc implementation provides a default alignment of 8 bytes.\n+   This can be increased with mallopt.  The glibc implementation also provides\n+   8-byte alignment.  Note that this isn't enough for various POSIX types such\n+   as pthread_mutex_t.  However, since we no longer need the 16-byte alignment\n+   for atomic operations, we ignore the nominal alignment specified for these\n+   types.  The same is true for long double on 64-bit HP-UX.  */\n+#define MALLOC_ABI_ALIGNMENT (64)\n+\n /* Get around hp-ux assembler bug, and make strcpy of constants fast.  */\n #define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\\\n   (TREE_CODE (EXP) == STRING_CST\t\t\\"}]}