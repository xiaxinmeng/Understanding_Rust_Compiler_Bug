{"sha": "12448f77a57be1954b4f15455b06de9012e88390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI0NDhmNzdhNTdiZTE5NTRiNGYxNTQ1NWIwNmRlOTAxMmU4ODM5MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-01-14T00:22:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-14T00:22:14Z"}, "message": "re PR c++/50012 (C++ front end misses -Wsign-compare warnings when extraneous parentheses are present)\n\ngcc/:\n\tPR c++/50012\n\t* tree.h (TYPE_QUALS): Add cast to int.\n\t(TYPE_QUALS_NO_ADDR_SPACE): Likewise.\ngcc/cp:\n\tPR c++/50012\n\t* typeck.c (enum_cast_to_int): New static function.\n\t(cp_build_binary_op): When handling warn_sign_compare, don't test\n\tfor TREE_NO_WARNING.  Do call enum_cast_to_int.\n\t* call.c (avoid_sign_compare_warnings): Remove static function.\n\t(build_new_op_1): Don't call avoid_sign_compare_warnings.\ngcc/testsuite/:\n\tPR c++/50012\n\t* g++.dg/warn/Wsign-compare-4.C: New.\n\nFrom-SVN: r183178", "tree": {"sha": "65cee32b0b18592f5aa5a416fb63c7ceeca865bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65cee32b0b18592f5aa5a416fb63c7ceeca865bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12448f77a57be1954b4f15455b06de9012e88390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12448f77a57be1954b4f15455b06de9012e88390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12448f77a57be1954b4f15455b06de9012e88390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12448f77a57be1954b4f15455b06de9012e88390/comments", "author": null, "committer": null, "parents": [{"sha": "738134ef335a67def3b324823e24d2932d1baf06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738134ef335a67def3b324823e24d2932d1baf06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/738134ef335a67def3b324823e24d2932d1baf06"}], "stats": {"total": 113, "additions": 72, "deletions": 41}, "files": [{"sha": "8d509262a012ff9dfe3c7934e44767f30bea932b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12448f77a57be1954b4f15455b06de9012e88390/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12448f77a57be1954b4f15455b06de9012e88390/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12448f77a57be1954b4f15455b06de9012e88390", "patch": "@@ -1,3 +1,9 @@\n+2012-01-13  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/50012\n+\t* tree.h (TYPE_QUALS): Add cast to int.\n+\t(TYPE_QUALS_NO_ADDR_SPACE): Likewise.\n+\n 2012-01-13  Ian Lance Taylor  <iant@google.com>\n \n \t* ipa-cp.c (ipa_get_indirect_edge_target): Add typecasts when"}, {"sha": "86ab82f985a034eda8827c5dd1326952e825cf0c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12448f77a57be1954b4f15455b06de9012e88390", "patch": "@@ -1,3 +1,12 @@\n+2012-01-13  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/50012\n+\t* typeck.c (enum_cast_to_int): New static function.\n+\t(cp_build_binary_op): When handling warn_sign_compare, don't test\n+\tfor TREE_NO_WARNING.  Do call enum_cast_to_int.\n+\t* call.c (avoid_sign_compare_warnings): Remove static function.\n+\t(build_new_op_1): Don't call avoid_sign_compare_warnings.\n+\n 2012-01-13  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* decl2.c: Do not include tree-mudflap.h"}, {"sha": "aa70749ee0257207410af26453709d05f3d75135", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=12448f77a57be1954b4f15455b06de9012e88390", "patch": "@@ -1,7 +1,7 @@\n /* Functions related to invoking methods and overloaded functions.\n    Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010, 2011\n+   2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) and\n    modified by Brendan Kehoe (brendan@cygnus.com).\n@@ -4880,32 +4880,10 @@ add_candidates (tree fns, tree first_arg, const VEC(tree,gc) *args,\n     }\n }\n \n-/* Even unsigned enum types promote to signed int.  We don't want to\n-   issue -Wsign-compare warnings for this case.  Here ORIG_ARG is the\n-   original argument and ARG is the argument after any conversions\n-   have been applied.  We set TREE_NO_WARNING if we have added a cast\n-   from an unsigned enum type to a signed integer type.  */\n-\n-static void\n-avoid_sign_compare_warnings (tree orig_arg, tree arg)\n-{\n-  if (orig_arg != NULL_TREE\n-      && arg != NULL_TREE\n-      && orig_arg != arg\n-      && TREE_CODE (TREE_TYPE (orig_arg)) == ENUMERAL_TYPE\n-      && TYPE_UNSIGNED (TREE_TYPE (orig_arg))\n-      && INTEGRAL_TYPE_P (TREE_TYPE (arg))\n-      && !TYPE_UNSIGNED (TREE_TYPE (arg)))\n-    TREE_NO_WARNING (arg) = 1;\n-}\n-\n static tree\n build_new_op_1 (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t\ttree *overload, tsubst_flags_t complain)\n {\n-  tree orig_arg1 = arg1;\n-  tree orig_arg2 = arg2;\n-  tree orig_arg3 = arg3;\n   struct z_candidate *candidates = 0, *cand;\n   VEC(tree,gc) *arglist;\n   tree fnname;\n@@ -5200,10 +5178,6 @@ build_new_op_1 (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     return result;\n \n  builtin:\n-  avoid_sign_compare_warnings (orig_arg1, arg1);\n-  avoid_sign_compare_warnings (orig_arg2, arg2);\n-  avoid_sign_compare_warnings (orig_arg3, arg3);\n-\n   switch (code)\n     {\n     case MODIFY_EXPR:"}, {"sha": "11edeeed3b91c0606585f2e40529f703923fc05c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=12448f77a57be1954b4f15455b06de9012e88390", "patch": "@@ -1,6 +1,7 @@\n /* Build expressions with type checking for C++ compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011, 2012\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -3599,6 +3600,29 @@ build_x_array_ref (tree arg1, tree arg2, tsubst_flags_t complain)\n   return expr;\n }\n \n+/* Return whether OP is an expression of enum type cast to integer\n+   type.  In C++ even unsigned enum types are cast to signed integer\n+   types.  We do not want to issue warnings about comparisons between\n+   signed and unsigned types when one of the types is an enum type.\n+   Those warnings are always false positives in practice.  */\n+\n+static bool\n+enum_cast_to_int (tree op)\n+{\n+  if (TREE_CODE (op) == NOP_EXPR\n+      && TREE_TYPE (op) == integer_type_node\n+      && TREE_CODE (TREE_TYPE (TREE_OPERAND (op, 0))) == ENUMERAL_TYPE\n+      && TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op, 0))))\n+    return true;\n+\n+  /* The cast may have been pushed into a COND_EXPR.  */\n+  if (TREE_CODE (op) == COND_EXPR)\n+    return (enum_cast_to_int (TREE_OPERAND (op, 1))\n+\t    || enum_cast_to_int (TREE_OPERAND (op, 2)));\n+\n+  return false;\n+}\n+\n /* For the c-common bits.  */\n tree\n build_binary_op (location_t location, enum tree_code code, tree op0, tree op1,\n@@ -4465,13 +4489,15 @@ cp_build_binary_op (location_t location,\n \n       if ((short_compare || code == MIN_EXPR || code == MAX_EXPR)\n \t  && warn_sign_compare\n-\t  && !TREE_NO_WARNING (orig_op0)\n-\t  && !TREE_NO_WARNING (orig_op1)\n \t  /* Do not warn until the template is instantiated; we cannot\n \t     bound the ranges of the arguments until that point.  */\n \t  && !processing_template_decl\n           && (complain & tf_warning)\n-\t  && c_inhibit_evaluation_warnings == 0)\n+\t  && c_inhibit_evaluation_warnings == 0\n+\t  /* Even unsigned enum types promote to signed int.  We don't\n+\t     want to issue -Wsign-compare warnings for this case.  */\n+\t  && !enum_cast_to_int (orig_op0)\n+\t  && !enum_cast_to_int (orig_op1))\n \t{\n \t  warn_for_sign_compare (location, orig_op0, orig_op1, op0, op1, \n \t\t\t\t result_type, resultcode);\n@@ -8525,4 +8551,3 @@ check_literal_operator_args (const_tree decl,\n       return true;\n     }\n }\n-"}, {"sha": "e47c3b246ceafd70b1f85c915e75b5093a02fcc1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12448f77a57be1954b4f15455b06de9012e88390", "patch": "@@ -1,3 +1,8 @@\n+2012-01-13  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR c++/50012\n+\t* g++.dg/warn/Wsign-compare-4.C: New.\n+\n 2012-01-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/48351\n@@ -21,7 +26,7 @@\n \tint32plus because of big array needed.\n \t* gcc.dg/pr50527.c: Don't FAIL if sizeof(void*) = 2\n \t* gcc.dg/lto/20090218-2_1.c: Fix prototype of malloc, memcpy.\n-\t\n+\n 2012-01-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51813"}, {"sha": "b3eb8e2a7de7b020594fbb2f788fd9f8ecf9610b", "filename": "gcc/testsuite/g++.dg/warn/Wsign-compare-4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-compare-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-compare-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-compare-4.C?ref=12448f77a57be1954b4f15455b06de9012e88390", "patch": "@@ -0,0 +1,12 @@\n+//PR c++/50012\n+// { dg-options \"-Wsign-compare\" }\n+\n+int foo(unsigned int *a, int b)\n+{\n+  return (*a) <= b; // { dg-warning \"comparison between signed and unsigned\" }\n+}\n+\n+int bar(unsigned int *a, int b)\n+{\n+  return *a <= b; // { dg-warning \"comparison between signed and unsigned\" }\n+}"}, {"sha": "5719b8f6bbf280ef4b37c6993d94d30d4b3fc9c7", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12448f77a57be1954b4f15455b06de9012e88390/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=12448f77a57be1954b4f15455b06de9012e88390", "patch": "@@ -1,6 +1,6 @@\n /* Front-end tree definitions for GNU compiler.\n    Copyright (C) 1989, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -2298,16 +2298,16 @@ enum cv_qualifier\n \n /* The set of type qualifiers for this type.  */\n #define TYPE_QUALS(NODE)\t\t\t\t\t\\\n-  ((TYPE_READONLY (NODE) * TYPE_QUAL_CONST)\t\t\t\\\n-   | (TYPE_VOLATILE (NODE) * TYPE_QUAL_VOLATILE)\t\t\\\n-   | (TYPE_RESTRICT (NODE) * TYPE_QUAL_RESTRICT)\t\t\\\n-   | (ENCODE_QUAL_ADDR_SPACE (TYPE_ADDR_SPACE (NODE))))\n+  ((int) ((TYPE_READONLY (NODE) * TYPE_QUAL_CONST)\t\t\\\n+\t  | (TYPE_VOLATILE (NODE) * TYPE_QUAL_VOLATILE)\t\t\\\n+\t  | (TYPE_RESTRICT (NODE) * TYPE_QUAL_RESTRICT)\t\t\\\n+\t  | (ENCODE_QUAL_ADDR_SPACE (TYPE_ADDR_SPACE (NODE)))))\n \n /* The same as TYPE_QUALS without the address space qualifications.  */\n #define TYPE_QUALS_NO_ADDR_SPACE(NODE)\t\t\t\t\\\n-  ((TYPE_READONLY (NODE) * TYPE_QUAL_CONST)\t\t\t\\\n-   | (TYPE_VOLATILE (NODE) * TYPE_QUAL_VOLATILE)\t\t\\\n-   | (TYPE_RESTRICT (NODE) * TYPE_QUAL_RESTRICT))\n+  ((int) ((TYPE_READONLY (NODE) * TYPE_QUAL_CONST)\t\t\\\n+\t  | (TYPE_VOLATILE (NODE) * TYPE_QUAL_VOLATILE)\t\t\\\n+\t  | (TYPE_RESTRICT (NODE) * TYPE_QUAL_RESTRICT)))\n \n /* These flags are available for each language front end to use internally.  */\n #define TYPE_LANG_FLAG_0(NODE) (TYPE_CHECK (NODE)->type_common.lang_flag_0)"}]}