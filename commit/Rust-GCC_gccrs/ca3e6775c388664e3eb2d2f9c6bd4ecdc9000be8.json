{"sha": "ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzZTY3NzVjMzg4NjY0ZTNlYjJkMmY5YzZiZDRlY2RjOTAwMGJlOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-06-11T15:56:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-11T15:56:30Z"}, "message": "re PR bootstrap/66252 (bootstrap comparison failures on sparc-linux)\n\n\tPR bootstrap/66252\n\t* config/sparc/sparc.c (hard_regno_mode_classes): Add ??? comment.\n\t* config/sparc/sparc.md (zero_extendsidi2_insn_sp32): Use single order.\n\t(*addx_extend_sp32): Fix pasto.\n\t(*subx_extend): Rename into...\n\t(*subx_extend_sp32): ...this.\n\t(*adddi3_extend_sp32): Add earlyclobber.\n\t(*subdi3_insn_sp32): Likewise.\n\t(*subdi3_extend_sp32): Likewise.\n\t(*and_not_di_sp32): Likewise.\n\t(*or_not_di_sp32): Likewise.\n\t(*xor_not_di_sp32): Likewise.\n\t(*negdi2_sp32): Likewise.\n\t(*one_cmpldi2_sp32): Likewise.\n\nFrom-SVN: r224384", "tree": {"sha": "3ddedff9cb845660e9c6c7828004e90850b8ebec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ddedff9cb845660e9c6c7828004e90850b8ebec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8/comments", "author": null, "committer": null, "parents": [{"sha": "26e46e4b94267360451114c8fc1ec5ee6ef5e6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e46e4b94267360451114c8fc1ec5ee6ef5e6a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e46e4b94267360451114c8fc1ec5ee6ef5e6a6"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "a4d42dd022e20661399589c23cdb035b4bb5e55b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8", "patch": "@@ -1,3 +1,20 @@\n+2015-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR bootstrap/66252\n+\t* config/sparc/sparc.c (hard_regno_mode_classes): Add ??? comment.\n+\t* config/sparc/sparc.md (zero_extendsidi2_insn_sp32): Use single order.\n+\t(*addx_extend_sp32): Fix pasto.\n+\t(*subx_extend): Rename into...\n+\t(*subx_extend_sp32): ...this.\n+\t(*adddi3_extend_sp32): Add earlyclobber.\n+\t(*subdi3_insn_sp32): Likewise.\n+\t(*subdi3_extend_sp32): Likewise.\n+\t(*and_not_di_sp32): Likewise.\n+\t(*or_not_di_sp32): Likewise.\n+\t(*xor_not_di_sp32): Likewise.\n+\t(*negdi2_sp32): Likewise.\n+\t(*one_cmpldi2_sp32): Likewise.\n+\n 2015-06-11  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* debug.h (struct gcc_debug_hooks): Add a"}, {"sha": "5d7d5f9e1b2e4dd1ba7d050f7dc6302afaedba91", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8", "patch": "@@ -4733,10 +4733,14 @@ enum sparc_mode_class {\n #define CCFP_MODES (1 << (int) CCFP_MODE)\n \n /* Value is 1 if register/mode pair is acceptable on sparc.\n+\n    The funny mixture of D and T modes is because integer operations\n    do not specially operate on tetra quantities, so non-quad-aligned\n    registers can hold quadword quantities (except %o4 and %i4 because\n-   they cross fixed registers).  */\n+   they cross fixed registers).\n+\n+   ??? Note that, despite the settings, non-double-aligned parameter\n+   registers can hold double-word quantities in 32-bit mode.  */\n \n /* This points to either the 32 bit or the 64 bit version.  */\n const int *hard_regno_mode_classes;"}, {"sha": "a561877d72b0932505bc7baa2029e640d1957e44", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ca3e6775c388664e3eb2d2f9c6bd4ecdc9000be8", "patch": "@@ -3045,30 +3045,10 @@\n   \"! TARGET_ARCH64\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2) (match_dup 3))\n-   (set (match_dup 4) (match_dup 5))]\n-{\n-  rtx dest1, dest2;\n-\n-  dest1 = gen_highpart (SImode, operands[0]);\n-  dest2 = gen_lowpart (SImode, operands[0]);\n-\n-  /* Swap the order in case of overlap.  */\n-  if (REGNO (dest1) == REGNO (operands[1]))\n-    {\n-      operands[2] = dest2;\n-      operands[3] = operands[1];\n-      operands[4] = dest1;\n-      operands[5] = const0_rtx;\n-    }\n-  else\n-    {\n-      operands[2] = dest1;\n-      operands[3] = const0_rtx;\n-      operands[4] = dest2;\n-      operands[5] = operands[1];\n-    }\n-}\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 3) (const_int 0))]\n+  \"operands[2] = gen_lowpart (SImode, operands[0]);\n+   operands[3] = gen_highpart (SImode, operands[0]);\"\n   [(set_attr \"length\" \"2\")])\n \n ;; Simplify comparisons of extended values.\n@@ -3760,7 +3740,7 @@\n                                (ltu:SI (reg:CC_NOOV CC_REG) (const_int 0))))\n    (set (match_dup 4) (const_int 0))]\n   \"operands[3] = gen_lowpart (SImode, operands[0]);\n-   operands[4] = gen_highpart_mode (SImode, DImode, operands[1]);\"\n+   operands[4] = gen_highpart (SImode, operands[0]);\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*addx_extend_sp64\"\n@@ -3782,7 +3762,7 @@\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn_and_split \"*adddi3_extend_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n         (plus:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n                  (match_operand:DI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC CC_REG))]\n@@ -3881,7 +3861,7 @@\n })\n \n (define_insn_and_split \"*subdi3_insn_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (clobber (reg:CC CC_REG))]\n@@ -3937,7 +3917,7 @@\n   \"subx\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n-(define_insn_and_split \"*subx_extend\"\n+(define_insn_and_split \"*subx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n                                             (match_operand:SI 2 \"arith_operand\" \"rI\"))\n@@ -3953,7 +3933,7 @@\n   [(set_attr \"length\" \"2\")])\n \n (define_insn_and_split \"*subdi3_extend_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n       (minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                 (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))\n    (clobber (reg:CC CC_REG))]\n@@ -4757,7 +4737,7 @@\n })\n \n (define_insn_and_split \"*and_not_di_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"%r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"! TARGET_ARCH64\"\n@@ -4834,7 +4814,7 @@\n })\n \n (define_insn_and_split \"*or_not_di_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(ior:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"! TARGET_ARCH64\"\n@@ -4959,7 +4939,7 @@\n ;; xnor patterns.  Note that (a ^ ~b) == (~a ^ b) == ~(a ^ b).\n ;; Combine now canonicalizes to the rightmost expression.\n (define_insn_and_split \"*xor_not_di_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(not:DI (xor:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t(match_operand:DI 2 \"register_operand\" \"r\"))))]\n   \"! TARGET_ARCH64\"\n@@ -5162,7 +5142,7 @@\n })\n \n (define_insn_and_split \"*negdi2_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (reg:CC CC_REG))]\n   \"! TARGET_ARCH64\"\n@@ -5237,7 +5217,7 @@\n   \"\")\n \n (define_insn_and_split \"*one_cmpldi2_sp32\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"! TARGET_ARCH64\"\n   \"#\""}]}