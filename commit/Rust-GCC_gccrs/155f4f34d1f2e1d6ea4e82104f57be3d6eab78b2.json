{"sha": "155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1ZjRmMzRkMWYyZTFkNmVhNGU4MjEwNGY1N2JlM2Q2ZWFiNzhiMg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-12-11T11:12:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:12:11Z"}, "message": "[Ada] Volatility, validity checks, and System.Aux_DEC\n\nThis patch updates validity checks to prevent the validation of an\nby-reference formal parameter because the parameter is not being read in\nthe process.\n\n2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb: Add with and use clauses for Sem_Mech.\n\t(Ensure_Valid): Update the \"annoying special case\" to include\n\tentry and function calls. Use Get_Called_Entity to obtain the\n\tentry or subprogram being invoked, rather than retrieving it\n\tmanually. Parameters passed by reference do not need a validity\n\tcheck.\n\ngcc/testsuite/\n\n\t* gnat.dg/valid4.adb, gnat.dg/valid4_pkg.adb,\n\tgnat.dg/valid4_pkg.ads: New testcase.\n\nFrom-SVN: r267012", "tree": {"sha": "e3f703a0ecfaf3f6139a4704698b7addc6ec8297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3f703a0ecfaf3f6139a4704698b7addc6ec8297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a60c9a20c1581dd0cfd2277ef92cbe7825bf7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a60c9a20c1581dd0cfd2277ef92cbe7825bf7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a60c9a20c1581dd0cfd2277ef92cbe7825bf7a4"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "3dc73b3588462f9a5fae5d8d3209a485aa2b8928", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "patch": "@@ -1,3 +1,12 @@\n+2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb: Add with and use clauses for Sem_Mech.\n+\t(Ensure_Valid): Update the \"annoying special case\" to include\n+\tentry and function calls. Use Get_Called_Entity to obtain the\n+\tentry or subprogram being invoked, rather than retrieving it\n+\tmanually. Parameters passed by reference do not need a validity\n+\tcheck.\n+\n 2018-12-11  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Global_Item): Refine error message."}, {"sha": "d115ce10e02050461fb7b95d9ae50dcf664b9de7", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "patch": "@@ -50,6 +50,7 @@ with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Mech; use Sem_Mech;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sem_Warn; use Sem_Warn;\n@@ -6071,7 +6072,8 @@ package body Checks is\n \n       --  An annoying special case. If this is an out parameter of a scalar\n       --  type, then the value is not going to be accessed, therefore it is\n-      --  inappropriate to do any validity check at the call site.\n+      --  inappropriate to do any validity check at the call site. Likewise\n+      --  if the parameter is passed by reference.\n \n       else\n          --  Only need to worry about scalar types\n@@ -6097,25 +6099,20 @@ package body Checks is\n                   P := Parent (N);\n                end if;\n \n-               --  Only need to worry if we are argument of a procedure call\n-               --  since functions don't have out parameters. If this is an\n-               --  indirect or dispatching call, get signature from the\n-               --  subprogram type.\n+               --  If this is an indirect or dispatching call, get signature\n+               --  from the subprogram type.\n \n-               if Nkind (P) = N_Procedure_Call_Statement then\n+               if Nkind_In (P, N_Entry_Call_Statement,\n+                               N_Function_Call,\n+                               N_Procedure_Call_Statement)\n+               then\n+                  E := Get_Called_Entity (P);\n                   L := Parameter_Associations (P);\n \n-                  if Is_Entity_Name (Name (P)) then\n-                     E := Entity (Name (P));\n-                  else\n-                     pragma Assert (Nkind (Name (P)) = N_Explicit_Dereference);\n-                     E := Etype (Name (P));\n-                  end if;\n-\n                   --  Only need to worry if there are indeed actuals, and if\n-                  --  this could be a procedure call, otherwise we cannot get a\n-                  --  match (either we are not an argument, or the mode of the\n-                  --  formal is not OUT). This test also filters out the\n+                  --  this could be a subprogram call, otherwise we cannot get\n+                  --  a match (either we are not an argument, or the mode of\n+                  --  the formal is not OUT). This test also filters out the\n                   --  generic case.\n \n                   if Is_Non_Empty_List (L) and then Is_Subprogram (E) then\n@@ -6126,7 +6123,10 @@ package body Checks is\n                      F := First_Formal (E);\n                      A := First (L);\n                      while Present (F) loop\n-                        if Ekind (F) = E_Out_Parameter and then A = N then\n+                        if A = N\n+                          and then (Ekind (F) = E_Out_Parameter\n+                                     or else Mechanism (F) = By_Reference)\n+                        then\n                            return;\n                         end if;\n "}, {"sha": "02337b805d7386387809b80350c1b6c85979951a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "patch": "@@ -1,3 +1,8 @@\n+2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/valid4.adb, gnat.dg/valid4_pkg.adb,\n+\tgnat.dg/valid4_pkg.ads: New testcase.\n+\n 2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/packed_array.adb, gnat.dg/packed_array.ads,"}, {"sha": "b64c526977688ec779a3d8907d0867d6c7f44655", "filename": "gcc/testsuite/gnat.dg/valid4.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4.adb?ref=155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "patch": "@@ -0,0 +1,13 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnatVa\" }\n+\n+with Valid4_Pkg; use Valid4_Pkg;\n+\n+procedure Valid4 is\n+begin\n+   Proc (Global);\n+\n+   if Global then\n+      raise Program_Error;\n+   end if;\n+end Valid4;"}, {"sha": "cafb459e5946d30113a28f27a8cec4c8eab7c60a", "filename": "gcc/testsuite/gnat.dg/valid4_pkg.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4_pkg.adb?ref=155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "patch": "@@ -0,0 +1,19 @@\n+package body Valid4_Pkg is\n+   procedure Inner_Proc (B : in out Boolean);\n+   pragma Export_Procedure\n+     (Inner_Proc,\n+      External        => \"Inner_Proc\",\n+      Parameter_Types => (Boolean),\n+      Mechanism       => Reference);\n+\n+   procedure Inner_Proc (B : in out Boolean) is\n+   begin\n+      B := True;\n+      Global := False;\n+   end Inner_Proc;\n+\n+   procedure Proc (B : in out Boolean) is\n+   begin\n+      Inner_Proc (B);\n+   end Proc;\n+end Valid4_Pkg;"}, {"sha": "91c36d74d4f68e6ce3b40f444287749c3316812e", "filename": "gcc/testsuite/gnat.dg/valid4_pkg.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid4_pkg.ads?ref=155f4f34d1f2e1d6ea4e82104f57be3d6eab78b2", "patch": "@@ -0,0 +1,10 @@\n+package Valid4_Pkg is\n+   Global : Boolean := False;\n+\n+   procedure Proc (B : in out Boolean);\n+   pragma Export_Procedure\n+     (Proc,\n+      External        => \"Proc\",\n+      Parameter_Types => (Boolean),\n+      Mechanism       => Reference);\n+end Valid4_Pkg;"}]}