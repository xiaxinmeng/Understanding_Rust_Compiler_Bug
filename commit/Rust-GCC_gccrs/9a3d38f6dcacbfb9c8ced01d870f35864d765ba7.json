{"sha": "9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEzZDM4ZjZkY2FjYmZiOWM4Y2VkMDFkODcwZjM1ODY0ZDc2NWJhNw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-11-04T13:20:32Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-11-04T13:20:32Z"}, "message": "re PR fortran/29600 ([F03] MINLOC and MAXLOC take an optional KIND argument)\n\n2017-11-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/29600\n\t* gfortran.h (gfc_check_f): Replace fm3l with fm4l.\n\t* intrinsic.h (gfc_resolve_maxloc): Add gfc_expr * to argument\n\tlist in protoytpe.\n\t(gfc_resolve_minloc): Likewise.\n\t* check.c (gfc_check_minloc_maxloc): Handle kind argument.\n\t* intrinsic.c (add_sym_3_ml): Rename to\n\t(add_sym_4_ml): and handle kind argument.\n\t(add_function): Replace add_sym_3ml with add_sym_4ml and add\n\textra arguments for maxloc and minloc.\n\t(check_specific): Change use of check.f3ml with check.f4ml.\n\t* iresolve.c (gfc_resolve_maxloc): Handle kind argument. If\n\tthe kind is smaller than the smallest library version available,\n\tuse gfc_default_integer_kind and convert afterwards.\n\t(gfc_resolve_minloc): Likewise.\n\n2017-11-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/29600\n\t* gfortran.dg/minmaxloc_8.f90: New test.\n\nFrom-SVN: r254405", "tree": {"sha": "f05ef1721791d75acf575c83b92dbc3ed7317a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f05ef1721791d75acf575c83b92dbc3ed7317a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/comments", "author": null, "committer": null, "parents": [{"sha": "77dacf9da6fe475efc87d63d7ea6fde66f097afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dacf9da6fe475efc87d63d7ea6fde66f097afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77dacf9da6fe475efc87d63d7ea6fde66f097afc"}], "stats": {"total": 171, "additions": 150, "deletions": 21}, "files": [{"sha": "0b2ca315605d8872b41fc55f09f41982fb5b41b4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -1,3 +1,21 @@\n+2017-11-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/29600\n+\t* gfortran.h (gfc_check_f): Replace fm3l with fm4l.\n+\t* intrinsic.h (gfc_resolve_maxloc): Add gfc_expr * to argument\n+\tlist in protoytpe.\n+\t(gfc_resolve_minloc): Likewise.\n+\t* check.c (gfc_check_minloc_maxloc): Handle kind argument.\n+\t* intrinsic.c (add_sym_3_ml): Rename to\n+\t(add_sym_4_ml): and handle kind argument.\n+\t(add_function): Replace add_sym_3ml with add_sym_4ml and add\n+\textra arguments for maxloc and minloc.\n+\t(check_specific): Change use of check.f3ml with check.f4ml.\n+\t* iresolve.c (gfc_resolve_maxloc): Handle kind argument. If\n+\tthe kind is smaller than the smallest library version available,\n+\tuse gfc_default_integer_kind and convert afterwards.\n+\t(gfc_resolve_minloc): Likewise.\n+\n 2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/81735"}, {"sha": "914dbf957fde20a902184e623e2cde94b915934c", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -3179,14 +3179,15 @@ gfc_check_matmul (gfc_expr *matrix_a, gfc_expr *matrix_b)\n bool\n gfc_check_minloc_maxloc (gfc_actual_arglist *ap)\n {\n-  gfc_expr *a, *m, *d;\n+  gfc_expr *a, *m, *d, *k;\n \n   a = ap->expr;\n   if (!int_or_real_check (a, 0) || !array_check (a, 0))\n     return false;\n \n   d = ap->next->expr;\n   m = ap->next->next->expr;\n+  k = ap->next->next->next->expr;\n \n   if (m == NULL && d != NULL && d->ts.type == BT_LOGICAL\n       && ap->next->name == NULL)\n@@ -3214,6 +3215,9 @@ gfc_check_minloc_maxloc (gfc_actual_arglist *ap)\n \t\t\t\t gfc_current_intrinsic))\n     return false;\n \n+  if (!kind_check (k, 1, BT_INTEGER))\n+    return false;\n+\n   return true;\n }\n "}, {"sha": "213c5da56f75736e4d1c345f560a224d8faf180d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -1989,7 +1989,7 @@ gfc_intrinsic_arg;\n    argument lists of intrinsic functions. fX with X an integer refer\n    to check functions of intrinsics with X arguments. f1m is used for\n    the MAX and MIN intrinsics which can have an arbitrary number of\n-   arguments, f3ml is used for the MINLOC and MAXLOC intrinsics as\n+   arguments, f4ml is used for the MINLOC and MAXLOC intrinsics as\n    these have special semantics.  */\n \n typedef union\n@@ -1999,7 +1999,7 @@ typedef union\n   bool (*f1m)(gfc_actual_arglist *);\n   bool (*f2)(struct gfc_expr *, struct gfc_expr *);\n   bool (*f3)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *);\n-  bool (*f3ml)(gfc_actual_arglist *);\n+  bool (*f4ml)(gfc_actual_arglist *);\n   bool (*f3red)(gfc_actual_arglist *);\n   bool (*f4)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,\n \t    struct gfc_expr *);"}, {"sha": "cb18b21a90d369dc71cdf4596539d58a60fba9b1", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -687,27 +687,29 @@ add_sym_3 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n    might have to be reordered.  */\n \n static void\n-add_sym_3ml (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n+add_sym_4ml (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type,\n \t     int kind, int standard,\n \t     bool (*check) (gfc_actual_arglist *),\n-\t     gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *),\n-\t     void (*resolve) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *),\n+\t     gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *),\n+\t     void (*resolve) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *),\n \t     const char *a1, bt type1, int kind1, int optional1,\n \t     const char *a2, bt type2, int kind2, int optional2,\n-\t     const char *a3, bt type3, int kind3, int optional3)\n+\t     const char *a3, bt type3, int kind3, int optional3,\n+\t     const char *a4, bt type4, int kind4, int optional4)\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n \n-  cf.f3ml = check;\n-  sf.f3 = simplify;\n-  rf.f3 = resolve;\n+  cf.f4ml = check;\n+  sf.f4 = simplify;\n+  rf.f4 = resolve;\n \n   add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1, INTENT_IN,\n \t   a2, type2, kind2, optional2, INTENT_IN,\n \t   a3, type3, kind3, optional3, INTENT_IN,\n+\t   a4, type4, kind4, optional4, INTENT_IN,\n \t   (void *) 0);\n }\n \n@@ -2455,10 +2457,10 @@ add_functions (void)\n \n   make_generic (\"maxexponent\", GFC_ISYM_MAXEXPONENT, GFC_STD_F95);\n \n-  add_sym_3ml (\"maxloc\", GFC_ISYM_MAXLOC, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_4ml (\"maxloc\", GFC_ISYM_MAXLOC, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_maxloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n-\t       msk, BT_LOGICAL, dl, OPTIONAL);\n+\t       msk, BT_LOGICAL, dl, OPTIONAL, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"maxloc\", GFC_ISYM_MAXLOC, GFC_STD_F95);\n \n@@ -2531,10 +2533,10 @@ add_functions (void)\n \n   make_generic (\"minexponent\", GFC_ISYM_MINEXPONENT, GFC_STD_F95);\n \n-  add_sym_3ml (\"minloc\", GFC_ISYM_MINLOC, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_4ml (\"minloc\", GFC_ISYM_MINLOC, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_minloc,\n \t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n-\t       msk, BT_LOGICAL, dl, OPTIONAL);\n+\t       msk, BT_LOGICAL, dl, OPTIONAL, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"minloc\", GFC_ISYM_MINLOC, GFC_STD_F95);\n \n@@ -4498,7 +4500,7 @@ check_specific (gfc_intrinsic_sym *specific, gfc_expr *expr, int error_flag)\n   if (!do_ts29113_check (specific, *ap))\n     return false;\n \n-  if (specific->check.f3ml == gfc_check_minloc_maxloc)\n+  if (specific->check.f4ml == gfc_check_minloc_maxloc)\n     /* This is special because we might have to reorder the argument list.  */\n     t = gfc_check_minloc_maxloc (*ap);\n   else if (specific->check.f3red == gfc_check_minval_maxval)"}, {"sha": "62827887b3cd55232a32e7d87ca01befb22dafea", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -537,15 +537,15 @@ void gfc_resolve_logical (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_lstat (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_matmul (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_max (gfc_expr *, gfc_actual_arglist *);\n-void gfc_resolve_maxloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_maxloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_maxval (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_mclock (gfc_expr *);\n void gfc_resolve_mclock8 (gfc_expr *);\n void gfc_resolve_mask (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_merge (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_merge_bits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_min (gfc_expr *, gfc_actual_arglist *);\n-void gfc_resolve_minloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_minloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_minval (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_mod (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_modulo (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "a54ed2295b576a72c2dc636f0723147a5cd9de4a", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -1691,16 +1691,31 @@ gfc_resolve_max (gfc_expr *f, gfc_actual_arglist *args)\n   gfc_resolve_minmax (\"__max_%c%d\", f, args);\n }\n \n+/* The smallest kind for which a minloc and maxloc implementation exists.  */\n+\n+#define MINMAXLOC_MIN_KIND 4\n \n void\n gfc_resolve_maxloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n-\t\t    gfc_expr *mask)\n+\t\t    gfc_expr *mask, gfc_expr *kind)\n {\n   const char *name;\n   int i, j, idim;\n+  int fkind;\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind;\n+\n+  /* The library versions only exist for kinds 4, 8 and 16. For smaller kinds,\n+     we do a type conversion further down.  */\n+  if (kind)\n+    fkind = mpz_get_si (kind->value.integer);\n+  else\n+    fkind = gfc_default_integer_kind;\n+\n+  if (fkind < MINMAXLOC_MIN_KIND)\n+    f->ts.kind = MINMAXLOC_MIN_KIND;\n+  else\n+    f->ts.kind = fkind;\n \n   if (dim == NULL)\n     {\n@@ -1740,6 +1755,21 @@ gfc_resolve_maxloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%d_%d_%c%d\"), name, dim != NULL, f->ts.kind,\n \t\t      gfc_type_letter (array->ts.type), array->ts.kind);\n+\n+  if (kind)\n+    fkind = mpz_get_si (kind->value.integer);\n+  else\n+    fkind = gfc_default_integer_kind;\n+\n+  if (fkind != f->ts.kind)\n+    {\n+      gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n+\n+      ts.type = BT_INTEGER;\n+      ts.kind = fkind;\n+      gfc_convert_type_warn (f, &ts, 2, 0);\n+    }\n }\n \n \n@@ -1861,13 +1891,25 @@ gfc_resolve_min (gfc_expr *f, gfc_actual_arglist *args)\n \n void\n gfc_resolve_minloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n-\t\t    gfc_expr *mask)\n+\t\t    gfc_expr *mask, gfc_expr *kind)\n {\n   const char *name;\n   int i, j, idim;\n+  int fkind;\n \n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind;\n+\n+  /* The library versions only exist for kinds 4, 8 and 16. For smaller kinds,\n+     we do a type conversion further down.  */\n+  if (kind)\n+    fkind = mpz_get_si (kind->value.integer);\n+  else\n+    fkind = gfc_default_integer_kind;\n+\n+  if (fkind < MINMAXLOC_MIN_KIND)\n+    f->ts.kind = MINMAXLOC_MIN_KIND;\n+  else\n+    f->ts.kind = fkind;\n \n   if (dim == NULL)\n     {\n@@ -1907,6 +1949,16 @@ gfc_resolve_minloc (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n   f->value.function.name\n     = gfc_get_string (PREFIX (\"%s%d_%d_%c%d\"), name, dim != NULL, f->ts.kind,\n \t\t      gfc_type_letter (array->ts.type), array->ts.kind);\n+\n+  if (fkind != f->ts.kind)\n+    {\n+      gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n+\n+      ts.type = BT_INTEGER;\n+      ts.kind = fkind;\n+      gfc_convert_type_warn (f, &ts, 2, 0);\n+    }\n }\n \n "}, {"sha": "3997311bdd4d312cc8175fb3bdd94ea8285bc627", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -1,3 +1,8 @@\n+2017-11-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/29600\n+\t* gfortran.dg/minmaxloc_8.f90: New test.\n+\n 2017-11-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/81735"}, {"sha": "e9f37f2b689fe3b017a02cb6c756bdebc926fb52", "filename": "gcc/testsuite/gfortran.dg/minmaxloc_8.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a3d38f6dcacbfb9c8ced01d870f35864d765ba7/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminmaxloc_8.f90?ref=9a3d38f6dcacbfb9c8ced01d870f35864d765ba7", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do  run }\n+! { dg-options \"-fdump-tree-original\" }\n+! Test that minloc and maxloc using KINDs return the right\n+! kind, by using unformatted I/O for a specific kind.\n+program main\n+  implicit none\n+  real, dimension(3) :: a\n+  integer :: r1, r2, r4, r8\n+  integer :: k\n+  character(len=30) :: l1, l2\n+\n+  ! Check via I/O if the KIND is used correctly\n+  a = [ 1.0, 3.0, 2.0]\n+  write (unit=l1,fmt=*) 2_1\n+  write (unit=l2,fmt=*) maxloc(a,kind=1)\n+  if (l1 /= l2) call abort\n+\n+  write (unit=l1,fmt=*) 2_2\n+  write (unit=l2,fmt=*) maxloc(a,kind=2)\n+  if (l1 /= l2) call abort\n+\n+  write (unit=l1,fmt=*) 2_4\n+  write (unit=l2,fmt=*) maxloc(a,kind=4)\n+  if (l1 /= l2) call abort\n+\n+  write (unit=l1,fmt=*) 2_8\n+  write (unit=l2,fmt=*) maxloc(a,kind=8)\n+  if (l1 /= l2) call abort\n+\n+  a = [ 3.0, -1.0, 2.0]\n+\n+  write (unit=l1,fmt=*) 2_1\n+  write (unit=l2,fmt=*) minloc(a,kind=1)\n+  if (l1 /= l2) call abort\n+\n+  write (unit=l1,fmt=*) 2_2\n+  write (unit=l2,fmt=*) minloc(a,kind=2)\n+  if (l1 /= l2) call abort\n+\n+  write (unit=l1,fmt=*) 2_4\n+  write (unit=l2,fmt=*) minloc(a,kind=4)\n+  if (l1 /= l2) call abort\n+\n+  write (unit=l1,fmt=*) 2_8\n+  write (unit=l2,fmt=*) minloc(a,kind=8)\n+  if (l1 /= l2) call abort\n+\n+end program main"}]}