{"sha": "eedab85e02b8bd5841a36c0600cf397a255a718e", "node_id": "C_kwDOANBUbNoAKGVlZGFiODVlMDJiOGJkNTg0MWEzNmMwNjAwY2YzOTdhMjU1YTcxOGU", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-06-10T20:07:27Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-06-11T18:13:29Z"}, "message": "gccrs: introduce new types_compatable\n\nThis is an initiative to begin getting rid of the can_eq interface.\n\nAddresses #2019\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-implitem.cc (TypeCheckImplItemWithTrait::visit):\n\tuse new interface\n\t* typecheck/rust-type-util.cc (types_compatable): implementation of new interface\n\t* typecheck/rust-type-util.h (types_compatable): prototype\n\t* typecheck/rust-unify.cc (UnifyRules::expect_placeholder):\n\tIt is allow for unification against placeholders\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/traits2.rs: update error message\n\t* rust/compile/traits3.rs: update error message\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "b73972b6517e104ad6c15571500674ccc2a0edcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73972b6517e104ad6c15571500674ccc2a0edcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eedab85e02b8bd5841a36c0600cf397a255a718e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedab85e02b8bd5841a36c0600cf397a255a718e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedab85e02b8bd5841a36c0600cf397a255a718e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedab85e02b8bd5841a36c0600cf397a255a718e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edff04f5ddcacfb3ae8a00c5eaee8459415bb1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edff04f5ddcacfb3ae8a00c5eaee8459415bb1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edff04f5ddcacfb3ae8a00c5eaee8459415bb1c4"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "111c219926e275dbb7f25bf7ae4777ca0e483c9a", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.cc?ref=eedab85e02b8bd5841a36c0600cf397a255a718e", "patch": "@@ -411,7 +411,9 @@ TypeCheckImplItemWithTrait::visit (HIR::ConstantItem &constant)\n \n   // check the types are compatible\n   auto trait_item_type = resolved_trait_item.get_tyty_for_receiver (self);\n-  if (!trait_item_type->can_eq (lookup, true))\n+  if (!types_compatable (TyTy::TyWithLocation (trait_item_type),\n+\t\t\t TyTy::TyWithLocation (lookup), constant.get_locus (),\n+\t\t\t true /*emit_errors*/))\n     {\n       RichLocation r (constant.get_locus ());\n       r.add_range (resolved_trait_item.get_locus ());\n@@ -460,7 +462,9 @@ TypeCheckImplItemWithTrait::visit (HIR::TypeAlias &type)\n \n   // check the types are compatible\n   auto trait_item_type = resolved_trait_item.get_tyty_for_receiver (self);\n-  if (!trait_item_type->can_eq (lookup, true))\n+  if (!types_compatable (TyTy::TyWithLocation (trait_item_type),\n+\t\t\t TyTy::TyWithLocation (lookup), type.get_locus (),\n+\t\t\t true /*emit_errors*/))\n     {\n       RichLocation r (type.get_locus ());\n       r.add_range (resolved_trait_item.get_locus ());\n@@ -519,7 +523,9 @@ TypeCheckImplItemWithTrait::visit (HIR::Function &function)\n \n   // check the types are compatible\n   auto trait_item_type = resolved_trait_item.get_tyty_for_receiver (self);\n-  if (!trait_item_type->can_eq (lookup, true))\n+  if (!types_compatable (TyTy::TyWithLocation (trait_item_type),\n+\t\t\t TyTy::TyWithLocation (lookup), function.get_locus (),\n+\t\t\t true /*emit_errors*/))\n     {\n       RichLocation r (function.get_locus ());\n       r.add_range (resolved_trait_item.get_locus ());"}, {"sha": "1c93c60f29c9340d67c87c29360915c83e41d6ff", "filename": "gcc/rust/typecheck/rust-type-util.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc?ref=eedab85e02b8bd5841a36c0600cf397a255a718e", "patch": "@@ -123,6 +123,16 @@ query_type (HirId reference, TyTy::BaseType **result)\n   return false;\n }\n \n+bool\n+types_compatable (TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t\t  Location unify_locus, bool emit_errors)\n+{\n+  TyTy::BaseType *result\n+    = unify_site_and (UNKNOWN_HIRID, lhs, rhs, unify_locus, emit_errors,\n+\t\t      false /*commit*/, true /*infer*/, true /*cleanup*/);\n+  return result->get_kind () != TyTy::TypeKind::ERROR;\n+}\n+\n TyTy::BaseType *\n unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n \t    Location unify_locus)"}, {"sha": "d6f1b8cf2d10589cadcff6e3b0c104dca7750ad4", "filename": "gcc/rust/typecheck/rust-type-util.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.h?ref=eedab85e02b8bd5841a36c0600cf397a255a718e", "patch": "@@ -28,6 +28,10 @@ namespace Resolver {\n bool\n query_type (HirId reference, TyTy::BaseType **result);\n \n+bool\n+types_compatable (TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t\t  Location unify_locus, bool emit_errors);\n+\n TyTy::BaseType *\n unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n \t    Location unify_locus);"}, {"sha": "d7c5c18ae3c2ad9ad3bf0724827af9141673801d", "filename": "gcc/rust/typecheck/rust-unify.cc", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.cc?ref=eedab85e02b8bd5841a36c0600cf397a255a718e", "patch": "@@ -1576,17 +1576,8 @@ UnifyRules::expect_placeholder (TyTy::PlaceholderType *ltype,\n       }\n       break;\n \n-      case TyTy::PLACEHOLDER: {\n-\tTyTy::PlaceholderType &type\n-\t  = *static_cast<TyTy::PlaceholderType *> (rtype);\n-\tbool symbol_match\n-\t  = ltype->get_symbol ().compare (type.get_symbol ()) == 0;\n-\tif (symbol_match)\n-\t  {\n-\t    return type.clone ();\n-\t  }\n-      }\n-      break;\n+    case TyTy::PLACEHOLDER:\n+      return ltype->clone ();\n \n     case TyTy::PROJECTION:\n     case TyTy::DYNAMIC:\n@@ -1609,6 +1600,10 @@ UnifyRules::expect_placeholder (TyTy::PlaceholderType *ltype,\n     case TyTy::USIZE:\n     case TyTy::ISIZE:\n     case TyTy::NEVER:\n+      if (infer_flag)\n+\treturn rtype->clone ();\n+      gcc_fallthrough ();\n+\n     case TyTy::ERROR:\n       return new TyTy::ErrorType (0);\n     }"}, {"sha": "376b3c9cc7f6cf6745fc6760c259f6452622d061", "filename": "gcc/testsuite/rust/compile/traits2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits2.rs?ref=eedab85e02b8bd5841a36c0600cf397a255a718e", "patch": "@@ -7,7 +7,7 @@ struct Baz;\n \n impl Foo for Baz {\n     fn Bar() {}\n-    // { dg-error \"expected .i32. got .().\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n     // { dg-error \"method .Bar. has an incompatible type for trait .Foo.\" \"\" { target *-*-* } .-2 }\n }\n "}, {"sha": "d6d081487b965904fc4c38789103a9de78fb339e", "filename": "gcc/testsuite/rust/compile/traits3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedab85e02b8bd5841a36c0600cf397a255a718e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits3.rs?ref=eedab85e02b8bd5841a36c0600cf397a255a718e", "patch": "@@ -10,9 +10,9 @@ impl<T> Foo for Bar<T> {\n     type A = i32;\n \n     fn baz(a: f32) -> f32 {\n-        // { dg-error \"method .baz. has an incompatible type for trait .Foo.\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"method .baz. has an incompatible type for trait .Foo.\" \"\" { target *-*-* } .-2 }\n         a\n-        // { dg-error \"expected .i32. got .f32.\" \"\" { target *-*-* } .-1 }\n     }\n }\n "}]}