{"sha": "34c80057fcd1c1019fa93f44483842e1d1c9cc55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjODAwNTdmY2QxYzEwMTlmYTkzZjQ0NDgzODQyZTFkMWM5Y2M1NQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-01-20T22:29:24Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-01-20T22:29:24Z"}, "message": "sysv4.h (DWARF2_FRAME_REG_OUT): Define.\n\n\t* config/rs6000/sysv4.h (DWARF2_FRAME_REG_OUT): Define.\n\t* dwarf2out.c (output_cfi): Map regs using DWARF2_FRAME_REG_OUT.\n\t* doc/tm.texi (DWARF_FRAME_REGNUM, DWARF2_FRAME_REG_OUT): Document.\n\nFrom-SVN: r76235", "tree": {"sha": "92a413817c8bb86d3351646e048b5b3145798b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92a413817c8bb86d3351646e048b5b3145798b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34c80057fcd1c1019fa93f44483842e1d1c9cc55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c80057fcd1c1019fa93f44483842e1d1c9cc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c80057fcd1c1019fa93f44483842e1d1c9cc55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c80057fcd1c1019fa93f44483842e1d1c9cc55/comments", "author": null, "committer": null, "parents": [{"sha": "a42952105e3bbc56a74773323f81bf23bd7e5ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42952105e3bbc56a74773323f81bf23bd7e5ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42952105e3bbc56a74773323f81bf23bd7e5ba1"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "0d7623b55dfd78c11ad987d631ea7fcdd893d122", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34c80057fcd1c1019fa93f44483842e1d1c9cc55", "patch": "@@ -1,3 +1,9 @@\n+2004-01-21  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/sysv4.h (DWARF2_FRAME_REG_OUT): Define.\n+\t* dwarf2out.c (output_cfi): Map regs using DWARF2_FRAME_REG_OUT.\n+\t* doc/tm.texi (DWARF_FRAME_REGNUM, DWARF2_FRAME_REG_OUT): Document.\n+\n 2004-01-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa-protos.h (compute_frame_size): Use HOST_WIDE_INT for frame sizes."}, {"sha": "365804734a433a5ff6a20b23a9326aead65fefc5", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=34c80057fcd1c1019fa93f44483842e1d1c9cc55", "patch": "@@ -744,6 +744,18 @@ extern int fixuplabelno;\n \n #define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n \n+/* Map register numbers held in the call frame info that gcc has\n+   collected using DWARF_FRAME_REGNUM to those that should be output in\n+   .debug_frame and .eh_frame.  We continue to use gcc hard reg numbers\n+   for .eh_frame, but use the numbers mandated by the various ABIs for\n+   .debug_frame.  rs6000_emit_prologue has translated any combination of\n+   CR2, CR3, CR4 saves to a save of CR2.  The actual code emitted saves\n+   the whole of CR, so we map CR2_REGNO to the DWARF reg for CR.  */\n+#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH)\t\\\n+  ((FOR_EH) ? (REGNO)\t\t\t\t\\\n+   : (REGNO) == CR2_REGNO ? 64\t\t\t\\\n+   : DBX_REGISTER_NUMBER (REGNO))\n+\n #define TARGET_ENCODE_SECTION_INFO  rs6000_elf_encode_section_info\n #define TARGET_IN_SMALL_DATA_P  rs6000_elf_in_small_data_p\n #define TARGET_SECTION_TYPE_FLAGS  rs6000_elf_section_type_flags"}, {"sha": "7866e1ae8e91d06d6ff50f6c2b33e48b35519f8f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=34c80057fcd1c1019fa93f44483842e1d1c9cc55", "patch": "@@ -3289,6 +3289,26 @@ column number to use instead.\n See the PowerPC's SPE target for an example.\n @end defmac\n \n+@defmac DWARF_FRAME_REGNUM (@var{regno})\n+\n+Define this macro if the target's representation for dwarf registers\n+used in .eh_frame or .debug_frame is different from that used in other\n+debug info sections.  Given a gcc hard register number, this macro\n+should return the .eh_frame register number.  The default is\n+@code{DBX_REGISTER_NUMBER (@var{regno})}.\n+\n+@end defmac\n+\n+@defmac DWARF2_FRAME_REG_OUT (@var{regno}, @var{for_eh})\n+\n+Define this macro to map register numbers held in the call frame info\n+that gcc has collected using @code{DWARF_FRAME_REGNUM} to those that\n+should be output in .debug_frame (@code{@var{for_eh}} is zero) and\n+.eh_frame (@code{@var{for_eh}} is non-zero).  The default is to \n+return @code{@var{regno}}.\n+\n+@end defmac\n+\n @node Elimination\n @subsection Eliminating Frame Pointer and Arg Pointer\n "}, {"sha": "7dca634483a2acc3764b04a6fd04534389f426be", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c80057fcd1c1019fa93f44483842e1d1c9cc55/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=34c80057fcd1c1019fa93f44483842e1d1c9cc55", "patch": "@@ -1790,29 +1790,37 @@ dw_cfi_oprnd2_desc (enum dwarf_call_frame_info cfi)\n \n #if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n \n+/* Map register numbers held in the call frame info that gcc has\n+   collected using DWARF_FRAME_REGNUM to those that should be output in\n+   .debug_frame and .eh_frame.  */\n+#ifndef DWARF2_FRAME_REG_OUT\n+#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) (REGNO)\n+#endif\n+\n /* Output a Call Frame Information opcode and its operand(s).  */\n \n static void\n output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n {\n+  unsigned long r;\n   if (cfi->dw_cfi_opc == DW_CFA_advance_loc)\n     dw2_asm_output_data (1, (cfi->dw_cfi_opc\n \t\t\t     | (cfi->dw_cfi_oprnd1.dw_cfi_offset & 0x3f)),\n \t\t\t \"DW_CFA_advance_loc \" HOST_WIDE_INT_PRINT_HEX,\n \t\t\t cfi->dw_cfi_oprnd1.dw_cfi_offset);\n   else if (cfi->dw_cfi_opc == DW_CFA_offset)\n     {\n-      dw2_asm_output_data (1, (cfi->dw_cfi_opc\n-\t\t\t       | (cfi->dw_cfi_oprnd1.dw_cfi_reg_num & 0x3f)),\n-\t\t\t   \"DW_CFA_offset, column 0x%lx\",\n-\t\t\t   cfi->dw_cfi_oprnd1.dw_cfi_reg_num);\n+      r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+      dw2_asm_output_data (1, (cfi->dw_cfi_opc | (r & 0x3f)),\n+\t\t\t   \"DW_CFA_offset, column 0x%lx\", r);\n       dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd2.dw_cfi_offset, NULL);\n     }\n   else if (cfi->dw_cfi_opc == DW_CFA_restore)\n-    dw2_asm_output_data (1, (cfi->dw_cfi_opc\n-\t\t\t     | (cfi->dw_cfi_oprnd1.dw_cfi_reg_num & 0x3f)),\n-\t\t\t \"DW_CFA_restore, column 0x%lx\",\n-\t\t\t cfi->dw_cfi_oprnd1.dw_cfi_reg_num);\n+    {\n+      r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+      dw2_asm_output_data (1, (cfi->dw_cfi_opc | (r & 0x3f)),\n+\t\t\t   \"DW_CFA_restore, column 0x%lx\", r);\n+    }\n   else\n     {\n       dw2_asm_output_data (1, cfi->dw_cfi_opc,\n@@ -1857,31 +1865,31 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n \n \tcase DW_CFA_offset_extended:\n \tcase DW_CFA_def_cfa:\n-\t  dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd1.dw_cfi_reg_num,\n-\t\t\t\t       NULL);\n+\t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+\t  dw2_asm_output_data_uleb128 (r, NULL);\n \t  dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd2.dw_cfi_offset, NULL);\n \t  break;\n \n \tcase DW_CFA_offset_extended_sf:\n \tcase DW_CFA_def_cfa_sf:\n-\t  dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd1.dw_cfi_reg_num,\n-\t\t\t\t       NULL);\n+\t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+\t  dw2_asm_output_data_uleb128 (r, NULL);\n \t  dw2_asm_output_data_sleb128 (cfi->dw_cfi_oprnd2.dw_cfi_offset, NULL);\n \t  break;\n \n \tcase DW_CFA_restore_extended:\n \tcase DW_CFA_undefined:\n \tcase DW_CFA_same_value:\n \tcase DW_CFA_def_cfa_register:\n-\t  dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd1.dw_cfi_reg_num,\n-\t\t\t\t       NULL);\n+\t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+\t  dw2_asm_output_data_uleb128 (r, NULL);\n \t  break;\n \n \tcase DW_CFA_register:\n-\t  dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd1.dw_cfi_reg_num,\n-\t\t\t\t       NULL);\n-\t  dw2_asm_output_data_uleb128 (cfi->dw_cfi_oprnd2.dw_cfi_reg_num,\n-\t\t\t\t       NULL);\n+\t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);\n+\t  dw2_asm_output_data_uleb128 (r, NULL);\n+\t  r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd2.dw_cfi_reg_num, for_eh);\n+\t  dw2_asm_output_data_uleb128 (r, NULL);\n \t  break;\n \n \tcase DW_CFA_def_cfa_offset:\n@@ -1911,7 +1919,7 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n     }\n }\n \n-/* Output the call frame information used to used to record information\n+/* Output the call frame information used to record information\n    that relates to calculating the frame pointer, and records the\n    location of saved registers.  */\n "}]}