{"sha": "2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI2MGQxOWQ0YmU2MjE4YzBkZmZmZTZmODdmYzc2NjVhMDlkNWJhNQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-04-20T17:21:50Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-04-20T17:21:50Z"}, "message": "omp-low: fix lastprivate/linear lowering for SIMT\n\ngcc/\n\t* omp-low.c (lower_lastprivate_clauses): Correct handling of linear and\n\tlastprivate clauses in SIMT case.\n\nlibgomp/\n\t* testsuite/libgomp.c/target-36.c: New testcase.\n\nFrom-SVN: r247029", "tree": {"sha": "d48f636ed59fd051513d237e7f224ac325b3b196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48f636ed59fd051513d237e7f224ac325b3b196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3cbcd451736f5257446e927bb880ace569f4a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cbcd451736f5257446e927bb880ace569f4a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3cbcd451736f5257446e927bb880ace569f4a45"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "d96d987040fca9e0dbf92d9d8f8da63e60936b92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "patch": "@@ -1,3 +1,8 @@\n+2017-04-20  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* omp-low.c (lower_lastprivate_clauses): Correct handling of linear and\n+\tlastprivate clauses in SIMT case.\n+\n 2017-04-20  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* doc/invoke.texi (-Wextra-semi): Document new warning option."}, {"sha": "9cc29964dfa03c7f2eb4ba4043d11bc2216f1b15", "filename": "gcc/omp-low.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "patch": "@@ -4770,11 +4770,10 @@ lower_lastprivate_clauses (tree clauses, tree predicate, gimple_seq *stmt_list,\n \t\tTREE_NO_WARNING (new_var) = 1;\n \t    }\n \n-\t  if (simduid && DECL_HAS_VALUE_EXPR_P (new_var))\n+\t  if (!maybe_simt && simduid && DECL_HAS_VALUE_EXPR_P (new_var))\n \t    {\n \t      tree val = DECL_VALUE_EXPR (new_var);\n-\t      if (!maybe_simt\n-\t\t  && TREE_CODE (val) == ARRAY_REF\n+\t      if (TREE_CODE (val) == ARRAY_REF\n \t\t  && VAR_P (TREE_OPERAND (val, 0))\n \t\t  && lookup_attribute (\"omp simd array\",\n \t\t\t\t       DECL_ATTRIBUTES (TREE_OPERAND (val,\n@@ -4794,26 +4793,26 @@ lower_lastprivate_clauses (tree clauses, tree predicate, gimple_seq *stmt_list,\n \t\t\t\t    TREE_OPERAND (val, 0), lastlane,\n \t\t\t\t    NULL_TREE, NULL_TREE);\n \t\t}\n-\t      else if (maybe_simt\n-\t\t       && VAR_P (val)\n-\t\t       && lookup_attribute (\"omp simt private\",\n-\t\t\t\t\t    DECL_ATTRIBUTES (val)))\n+\t    }\n+\t  else if (maybe_simt)\n+\t    {\n+\t      tree val = (DECL_HAS_VALUE_EXPR_P (new_var)\n+\t\t\t  ? DECL_VALUE_EXPR (new_var)\n+\t\t\t  : new_var);\n+\t      if (simtlast == NULL)\n \t\t{\n-\t\t  if (simtlast == NULL)\n-\t\t    {\n-\t\t      simtlast = create_tmp_var (unsigned_type_node);\n-\t\t      gcall *g = gimple_build_call_internal\n-\t\t\t(IFN_GOMP_SIMT_LAST_LANE, 1, simtcond);\n-\t\t      gimple_call_set_lhs (g, simtlast);\n-\t\t      gimple_seq_add_stmt (stmt_list, g);\n-\t\t    }\n-\t\t  x = build_call_expr_internal_loc\n-\t\t    (UNKNOWN_LOCATION, IFN_GOMP_SIMT_XCHG_IDX,\n-\t\t     TREE_TYPE (val), 2, val, simtlast);\n-\t\t  new_var = unshare_expr (new_var);\n-\t\t  gimplify_assign (new_var, x, stmt_list);\n-\t\t  new_var = unshare_expr (new_var);\n+\t\t  simtlast = create_tmp_var (unsigned_type_node);\n+\t\t  gcall *g = gimple_build_call_internal\n+\t\t    (IFN_GOMP_SIMT_LAST_LANE, 1, simtcond);\n+\t\t  gimple_call_set_lhs (g, simtlast);\n+\t\t  gimple_seq_add_stmt (stmt_list, g);\n \t\t}\n+\t      x = build_call_expr_internal_loc\n+\t\t(UNKNOWN_LOCATION, IFN_GOMP_SIMT_XCHG_IDX,\n+\t\t TREE_TYPE (val), 2, val, simtlast);\n+\t      new_var = unshare_expr (new_var);\n+\t      gimplify_assign (new_var, x, stmt_list);\n+\t      new_var = unshare_expr (new_var);\n \t    }\n \n \t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE"}, {"sha": "633ba37a62b3f0bcafd5c52fc3c938b4f976a932", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "patch": "@@ -1,3 +1,7 @@\n+2017-04-20  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* testsuite/libgomp.c/target-36.c: New testcase.\n+\n 2017-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* plugin/plugin-nvptx.c (cuda_lib_inited): Use signed char type"}, {"sha": "6925a2a63deea8aa67ab717de9877bd405983e65", "filename": "libgomp/testsuite/libgomp.c/target-36.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2260d19d4be6218c0dfffe6f87fc7665a09d5ba5/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-36.c?ref=2260d19d4be6218c0dfffe6f87fc7665a09d5ba5", "patch": "@@ -0,0 +1,18 @@\n+int\n+main ()\n+{\n+  int ah, bh, n = 1024;\n+#pragma omp target map(from: ah, bh)\n+  {\n+    int a, b;\n+#pragma omp simd lastprivate(b)\n+    for (a = 0; a < n; a++)\n+      {\n+\tb = a + n + 1;\n+\tasm volatile (\"\" : \"+r\"(b));\n+      }\n+    ah = a, bh = b;\n+  }\n+  if (ah != n || bh != 2 * n)\n+    __builtin_abort ();\n+}"}]}