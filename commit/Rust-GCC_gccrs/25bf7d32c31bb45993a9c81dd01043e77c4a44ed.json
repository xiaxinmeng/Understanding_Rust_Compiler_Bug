{"sha": "25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViZjdkMzJjMzFiYjQ1OTkzYTljODFkZDAxMDQzZTc3YzRhNDRlZA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T21:09:53Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T21:09:53Z"}, "message": "rs6000: Add vclrlb and vclrrb\n\nAdd new vector instructions to clear leftmost and rightmost bytes.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_clrl): New #define.\n\t(vec_clrr): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_VCLRLB): New constant.\n\t(UNSPEC_VCLRRB): Likewise.\n\t(vclrlb): New insn.\n\t(vclrrb): Likewise.\n\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vclrlb): New\n\tbuilt-in function.\n\t(__builtin_altivec_vclrrb): Likewise.\n\t(__builtin_vec_clrl): New overloaded built-in function.\n\t(__builtin_vec_clrr): Likewise.\n\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n\tDefine overloaded forms of __builtin_vec_clrl and\n\t__builtin_vec_clrr.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n\tfor a Future Architecture): Add descriptions of vec_clrl and\n\tvec_clrr.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-clrl-0.c: New.\n\t* gcc.target/powerpc/vec-clrl-1.c: New.\n\t* gcc.target/powerpc/vec-clrr-0.c: New.\n\t* gcc.target/powerpc/vec-clrr-1.c: New.", "tree": {"sha": "c97e5bc9c588f93bcc32b5ffe629ee65eb949abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c97e5bc9c588f93bcc32b5ffe629ee65eb949abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/comments", "author": null, "committer": null, "parents": [{"sha": "0e47fe3ab528c1b29305bfd4ac3889703b4fd85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e47fe3ab528c1b29305bfd4ac3889703b4fd85c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e47fe3ab528c1b29305bfd4ac3889703b4fd85c"}], "stats": {"total": 309, "additions": 309, "deletions": 0}, "files": [{"sha": "f9ce185549052b8d25d8e5870c4a2a63c13d551f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -1,3 +1,23 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_clrl): New #define.\n+\t(vec_clrr): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_VCLRLB): New constant.\n+\t(UNSPEC_VCLRRB): Likewise.\n+\t(vclrlb): New insn.\n+\t(vclrrb): Likewise.\n+\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vclrlb): New\n+\tbuilt-in function.\n+\t(__builtin_altivec_vclrrb): Likewise.\n+\t(__builtin_vec_clrl): New overloaded built-in function.\n+\t(__builtin_vec_clrr): Likewise.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n+\tDefine overloaded forms of __builtin_vec_clrl and\n+\t__builtin_vec_clrr.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n+\tfor a Future Architecture): Add descriptions of vec_clrl and\n+\tvec_clrr.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000-builtin.def (__builtin_cntlzdm): New"}, {"sha": "74319f13fa6d48bfe06293566b3c86cab8906225", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -697,6 +697,8 @@ __altivec_scalar_pred(vec_any_nle,\n \n /* Overloaded built-in functions for future architecture.  */\n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n+#define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)\n+#define vec_clrr(a, b)\t__builtin_vec_clrr (a, b)\n #endif\n \n #endif /* _ALTIVEC_H */"}, {"sha": "11d2dfe9426615af7fc2c10948d49cac8cb479df", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -166,6 +166,8 @@\n    UNSPEC_VGNB\n    UNSPEC_VPDEPD\n    UNSPEC_VPEXTD\n+   UNSPEC_VCLRLB\n+   UNSPEC_VCLRRB\n ])\n \n (define_c_enum \"unspecv\"\n@@ -4156,6 +4158,33 @@\n    \"vgnb %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"vclrlb\"\n+  [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n+\t\t       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]\n+\t UNSPEC_VCLRLB))]\n+   \"TARGET_FUTURE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vclrlb %0,%1,%2\";\n+  else\n+    return \"vclrrb %0,%1,%2\";\n+}\n+   [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"vclrrb\"\n+  [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n+\t\t       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]\n+\t UNSPEC_VCLRRB))]\n+   \"TARGET_FUTURE\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vclrrb %0,%1,%2\";\n+  else\n+    return \"vclrlb %0,%1,%2\";\n+}\n+   [(set_attr \"type\" \"vecsimple\")])\n \n (define_expand \"bcd<bcd_add_sub>_<code>\"\n   [(parallel [(set (reg:CCFP CR6_REGNO)"}, {"sha": "39e7da5fa5069a60a07e4d52ae28ab6d1cd4dab5", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -2579,6 +2579,8 @@ BU_FUTURE_MISC_2 (CNTLZDM, \"cntlzdm\", CONST, cntlzdm)\n BU_FUTURE_MISC_2 (CNTTZDM, \"cnttzdm\", CONST, cnttzdm)\n \n /* Future architecture vector built-ins.  */\n+BU_FUTURE_V_2 (VCLRLB, \"vclrlb\", CONST, vclrlb)\n+BU_FUTURE_V_2 (VCLRRB, \"vclrrb\", CONST, vclrrb)\n BU_FUTURE_V_2 (VCFUGED, \"vcfuged\", CONST, vcfuged)\n BU_FUTURE_V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n@@ -2587,6 +2589,8 @@ BU_FUTURE_V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n BU_FUTURE_V_2 (VGNB, \"vgnb\", CONST, vgnb)\n \n /* Future architecture overloaded vector built-ins.  */\n+BU_FUTURE_OVERLOAD_2 (CLRL, \"clrl\")\n+BU_FUTURE_OVERLOAD_2 (CLRR, \"clrr\")\n BU_FUTURE_OVERLOAD_2 (GNB, \"gnb\")\n \n \f"}, {"sha": "9da5b48463ec541a93a86c22e1dfe7a847105261", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -5506,6 +5506,17 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI },\n \n   /* FUTURE overloaded builtin functions, */\n+  { FUTURE_BUILTIN_VEC_CLRL, FUTURE_BUILTIN_VCLRLB,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },\n+  { FUTURE_BUILTIN_VEC_CLRL, FUTURE_BUILTIN_VCLRLB,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_UINTSI, 0 },\n+  { FUTURE_BUILTIN_VEC_CLRR, FUTURE_BUILTIN_VCLRRB,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },\n+  { FUTURE_BUILTIN_VEC_CLRR, FUTURE_BUILTIN_VCLRRB,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_UINTSI, 0 },\n+\n   { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI, 0 },\n   { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,"}, {"sha": "104397823b0118db108432be47d407a058899fc5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -20760,6 +20760,30 @@ Perform a vector count trailing zeros under bit mask operation, as if\n implemented by the Future @code{vctzdm} instruction.\n @findex vec_ctzm\n \n+@smallexample\n+@exdent vector signed char\n+@exdent vec_clrl (vector signed char a, unsigned int n)\n+@exdent vector unsigned char\n+@exdent vec_clrl (vector unsigned char a, unsigned int n)\n+@end smallexample\n+Clear the left-most @code{(16 - n)} bytes of vector argument @code{a}, as if\n+implemented by the @code{vclrlb} instruction on a big-endian target\n+and by the @code{vclrrb} instruction on a little-endian target.  A\n+value of @code{n} that is greater than 16 is treated as if it equaled 16.\n+@findex vec_clrl\n+\n+@smallexample\n+@exdent vector signed char\n+@exdent vec_clrr (vector signed char a, unsigned int n)\n+@exdent vector unsigned char\n+@exdent vec_clrr (vector unsigned char a, unsigned int n)\n+@end smallexample\n+Clear the right-most @code{(16 - n)} bytes of vector argument @code{a}, as if\n+implemented by the @code{vclrrb} instruction on a big-endian target\n+and by the @code{vclrlb} instruction on a little-endian target.  A\n+value of @code{n} that is greater than 16 is treated as if it equaled 16.\n+@findex vec_clrr\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_gnb (vector unsigned char, const unsigned char)"}, {"sha": "e3f984ea9c276475653e6bc5f27ad1c831dec1ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -1,3 +1,10 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-clrl-0.c: New.\n+\t* gcc.target/powerpc/vec-clrl-1.c: New.\n+\t* gcc.target/powerpc/vec-clrr-0.c: New.\n+\t* gcc.target/powerpc/vec-clrr-1.c: New.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/cntlzdm-0.c: New test."}, {"sha": "d84f672c32e73b9aa400d86ca7e7e3f5e14efd5c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrl-0.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-0.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear left-most bytes of unsigned char.  */\n+vector unsigned char\n+clrl (vector unsigned char arg, int n)\n+{\n+  return vec_clrl (arg, n);\n+}\n+\n+/* { dg-final { scan-assembler {\\mvclrlb\\M} { target be } } } */\n+/* { dg-final { scan-assembler {\\mvclrrb\\M} { target le } } } */"}, {"sha": "d039384203ee84560b1694b1f936ffec70cdcc6e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrl-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-1.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear left-most bytes of unsigned char.  */\n+vector unsigned char\n+clrl (vector unsigned char arg, int n)\n+{\n+  return vec_clrl (arg, n);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected0 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected1 =\n+    { 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+\n+  if (!vec_all_eq (clrl (input0, 5), expected0))\n+    abort ();\n+  if (!vec_all_eq (clrl (input0, 13), expected1))\n+    abort ();\n+  if (!vec_all_eq (clrl (input0, 19), expected2))\n+    abort ();\n+}"}, {"sha": "265fe7817f655c66979114b727315f5d093c2f0f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrl-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-2.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear left-most bytes of unsigned char.  */\n+vector signed char\n+clrl (vector signed char arg, int n)\n+{\n+  return vec_clrl (arg, n);\n+}\n+\n+/* { dg-final { scan-assembler {\\mvclrlb\\M} { target be } } } */\n+/* { dg-final { scan-assembler {\\mvclrrb\\M} { target le } } } */"}, {"sha": "582eb1cfd12ed5ba971430b94af7fefd4ad69f2e", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrl-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrl-3.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear left-most bytes of unsigned char.  */\n+vector signed char\n+clrl (vector signed char arg, int n)\n+{\n+  return vec_clrl (arg, n);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector signed char expected0 =\n+    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector signed char expected1 =\n+    { 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector signed char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+\n+  if (!vec_all_eq (clrl (input0, 5), expected0))\n+    abort ();\n+  if (!vec_all_eq (clrl (input0, 13), expected1))\n+    abort ();\n+  if (!vec_all_eq (clrl (input0, 19), expected2))\n+    abort ();\n+}"}, {"sha": "59a2cf1017c2c360537a29bae31437d7eb386fe8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrr-0.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-0.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear right-most bytes of unsigned char.  */\n+vector unsigned char\n+clrr (vector unsigned char arg, int n)\n+{\n+  return vec_clrr (arg, n);\n+}\n+\n+/* { dg-final { scan-assembler {\\mvclrrb\\M} { target be } } } */\n+/* { dg-final { scan-assembler {\\mvclrlb\\M} { target le } } } */"}, {"sha": "f8a3406a651e4a9fbb11fbb17ea2c491f380ad5a", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrr-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-1.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear right-most bytes of unsigned char.  */\n+vector unsigned char\n+clrr (vector unsigned char arg, int n)\n+{\n+  return vec_clrr (arg, n);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char input0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector unsigned char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector unsigned char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector unsigned char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+\n+  if (!vec_all_eq (clrr(input0, 5), expected0))\n+    abort ();\n+  if (!vec_all_eq (clrr(input0, 13), expected1))\n+    abort ();\n+  if (!vec_all_eq (clrr(input0, 19), expected2))\n+    abort ();\n+}"}, {"sha": "5c972ca7cf3b37836098a3571a2df6055a7f0057", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrr-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-2.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear right-most bytes of unsigned char.  */\n+vector signed char\n+clrr (vector signed char arg, int n)\n+{\n+  return vec_clrr (arg, n);\n+}\n+\n+/* { dg-final { scan-assembler {\\mvclrrb\\M} { target be } } } */\n+/* { dg-final { scan-assembler {\\mvclrlb\\M} { target le } } } */"}, {"sha": "678106a2283051ab372843194b062bb44dd9012d", "filename": "gcc/testsuite/gcc.target/powerpc/vec-clrr-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bf7d32c31bb45993a9c81dd01043e77c4a44ed/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-clrr-3.c?ref=25bf7d32c31bb45993a9c81dd01043e77c4a44ed", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+/* Vector string clear right-most bytes of unsigned char.  */\n+vector signed char\n+clrr (vector signed char arg, int n)\n+{\n+  return vec_clrr (arg, n);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector signed char input0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+  vector signed char expected0 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x0, 0x0,\n+      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+  vector signed char expected1 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0 };\n+  vector signed char expected2 =\n+    { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,\n+      0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11 };\n+\n+  if (!vec_all_eq (clrr (input0, 5), expected0))\n+    abort ();\n+  if (!vec_all_eq (clrr (input0, 13), expected1))\n+    abort ();\n+  if (!vec_all_eq (clrr (input0, 19), expected2))\n+    abort ();\n+}"}]}