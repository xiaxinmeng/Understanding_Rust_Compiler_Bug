{"sha": "58f10249a8182b1b038747113c2ba217d7bd4379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmMTAyNDlhODE4MmIxYjAzODc0NzExM2MyYmEyMTdkN2JkNDM3OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-20T09:01:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-20T09:01:23Z"}, "message": "tree-if-conv.c (add_bb_predicate_gimplified_stmts): Use gimple_seq_add_seq_without_update.\n\n2016-05-20  Richard Biener  <rguenther@suse.de>\n\n\t* tree-if-conv.c (add_bb_predicate_gimplified_stmts): Use\n\tgimple_seq_add_seq_without_update.\n\t(release_bb_predicate): Assert we have no operands to free.\n\t(if_convertible_loop_p_1): Calculate post dominators later.\n\tDo not free BB predicates here.\n\t(combine_blocks): Do not recompute BB predicates.\n\t(version_loop_for_if_conversion): Save BB predicates around\n\tloop versioning.\n\n\t* gcc.dg/tree-ssa/ifc-cd.c: Adjust.\n\nFrom-SVN: r236498", "tree": {"sha": "3ebad3b2e16f9093133b5e69cd4585a36a82d973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebad3b2e16f9093133b5e69cd4585a36a82d973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f10249a8182b1b038747113c2ba217d7bd4379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f10249a8182b1b038747113c2ba217d7bd4379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f10249a8182b1b038747113c2ba217d7bd4379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f10249a8182b1b038747113c2ba217d7bd4379/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ceb17928e5d1d5f89636699f13cc3bde6e19644c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb17928e5d1d5f89636699f13cc3bde6e19644c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb17928e5d1d5f89636699f13cc3bde6e19644c"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "8471e8a01f4522bee35f4dae8ddbe190a536f67b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f10249a8182b1b038747113c2ba217d7bd4379", "patch": "@@ -1,3 +1,14 @@\n+2016-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-if-conv.c (add_bb_predicate_gimplified_stmts): Use\n+\tgimple_seq_add_seq_without_update.\n+\t(release_bb_predicate): Assert we have no operands to free.\n+\t(if_convertible_loop_p_1): Calculate post dominators later.\n+\tDo not free BB predicates here.\n+\t(combine_blocks): Do not recompute BB predicates.\n+\t(version_loop_for_if_conversion): Save BB predicates around\n+\tloop versioning.\n+\n 2016-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* function.c (make_epilogue_seq): Remove epilogue_end parameter."}, {"sha": "0c2f4bc2dfead7da6434f7d515d797bf4fd38cd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58f10249a8182b1b038747113c2ba217d7bd4379", "patch": "@@ -1,3 +1,7 @@\n+2016-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ifc-cd.c: Adjust.\n+\n 2016-05-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/71075"}, {"sha": "29e2559e42be49b42cc20a4e7086127f7031d503", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-cd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-cd.c?ref=58f10249a8182b1b038747113c2ba217d7bd4379", "patch": "@@ -25,4 +25,4 @@ void foo (int *x1, int *x2, int *x3, int *x4, int *y)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Use predicate of bb\" 8 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Use predicate of bb\" 4 \"ifcvt\" } } */"}, {"sha": "3bfa69cfb5093baac3602d1db31ffabb6d2aa34a", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f10249a8182b1b038747113c2ba217d7bd4379/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=58f10249a8182b1b038747113c2ba217d7bd4379", "patch": "@@ -257,7 +257,7 @@ set_bb_predicate_gimplified_stmts (basic_block bb, gimple_seq stmts)\n static inline void\n add_bb_predicate_gimplified_stmts (basic_block bb, gimple_seq stmts)\n {\n-  gimple_seq_add_seq\n+  gimple_seq_add_seq_without_update\n     (&(((struct bb_predicate *) bb->aux)->predicate_gimplified_stmts), stmts);\n }\n \n@@ -280,10 +280,11 @@ release_bb_predicate (basic_block bb)\n   gimple_seq stmts = bb_predicate_gimplified_stmts (bb);\n   if (stmts)\n     {\n-      gimple_stmt_iterator i;\n+      if (flag_checking)\n+\tfor (gimple_stmt_iterator i = gsi_start (stmts);\n+\t     !gsi_end_p (i); gsi_next (&i))\n+\t  gcc_assert (! gimple_use_ops (gsi_stmt (i)));\n \n-      for (i = gsi_start (stmts); !gsi_end_p (i); gsi_next (&i))\n-\tfree_stmt_operands (cfun, gsi_stmt (i));\n       set_bb_predicate_gimplified_stmts (bb, NULL);\n     }\n }\n@@ -1322,7 +1323,6 @@ if_convertible_loop_p_1 (struct loop *loop, vec<data_reference_p> *refs)\n     return false;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n-  calculate_dominance_info (CDI_POST_DOMINATORS);\n \n   /* Allow statements that can be handled during if-conversion.  */\n   ifc_bbs = get_loop_body_in_if_conv_order (loop);\n@@ -1370,6 +1370,7 @@ if_convertible_loop_p_1 (struct loop *loop, vec<data_reference_p> *refs)\n \t  = new hash_map<innermost_loop_behavior_hash, data_reference_p>;\n   baseref_DR_map = new hash_map<tree_operand_hash, data_reference_p>;\n \n+  calculate_dominance_info (CDI_POST_DOMINATORS);\n   predicate_bbs (loop);\n \n   for (i = 0; refs->iterate (i, &dr); i++)\n@@ -1421,9 +1422,6 @@ if_convertible_loop_p_1 (struct loop *loop, vec<data_reference_p> *refs)\n \t    return false;\n     }\n \n-  for (i = 0; i < loop->num_nodes; i++)\n-    free_bb_predicate (ifc_bbs[i]);\n-\n   /* Checking PHIs needs to be done after stmts, as the fact whether there\n      are any masked loads or stores affects the tests.  */\n   for (i = 0; i < loop->num_nodes; i++)\n@@ -2298,7 +2296,6 @@ combine_blocks (struct loop *loop)\n   edge e;\n   edge_iterator ei;\n \n-  predicate_bbs (loop);\n   remove_conditions_and_labels (loop);\n   insert_gimplified_predicates (loop);\n   predicate_all_scalar_phis (loop);\n@@ -2428,13 +2425,23 @@ version_loop_for_if_conversion (struct loop *loop)\n \t\t\t\t  integer_zero_node);\n   gimple_call_set_lhs (g, cond);\n \n+  /* Save BB->aux around loop_version as that uses the same field.  */\n+  void **saved_preds = XALLOCAVEC (void *, loop->num_nodes);\n+  for (unsigned i = 0; i < loop->num_nodes; i++)\n+    saved_preds[i] = ifc_bbs[i]->aux;\n+\n   initialize_original_copy_tables ();\n   new_loop = loop_version (loop, cond, &cond_bb,\n \t\t\t   REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n \t\t\t   REG_BR_PROB_BASE, true);\n   free_original_copy_tables ();\n+\n+  for (unsigned i = 0; i < loop->num_nodes; i++)\n+    ifc_bbs[i]->aux = saved_preds[i];\n+\n   if (new_loop == NULL)\n     return false;\n+\n   new_loop->dont_vectorize = true;\n   new_loop->force_vectorize = false;\n   gsi = gsi_last_bb (cond_bb);"}]}