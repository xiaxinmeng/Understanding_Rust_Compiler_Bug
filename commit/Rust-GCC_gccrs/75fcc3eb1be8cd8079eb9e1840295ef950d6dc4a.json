{"sha": "75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmY2MzZWIxYmU4Y2Q4MDc5ZWI5ZTE4NDAyOTVlZjk1MGQ2ZGM0YQ==", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2018-10-04T08:59:12Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2018-10-04T08:59:12Z"}, "message": "contrib: Add unused_functions.py script\n\nFor a set of object-files, determine symbols that are\n - public but should be static\n\n2018-10-04  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n\n\t* unused_functions.py: New file.\n\nFrom-SVN: r264837", "tree": {"sha": "5a9afe1c672143320d0b7faaf628f36f9137f72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a9afe1c672143320d0b7faaf628f36f9137f72a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a/comments", "author": null, "committer": null, "parents": [{"sha": "289380f1dfe2ba8c58c10c7d30f5f0941480eb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289380f1dfe2ba8c58c10c7d30f5f0941480eb43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289380f1dfe2ba8c58c10c7d30f5f0941480eb43"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "c1a68e6d8f73313ce026be10cdd2aa9e6a070432", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "patch": "@@ -1,3 +1,7 @@\n+2018-10-04  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* unused_functions.py: New file.\n+\n 2018-09-25  Martin Liska  <mliska@suse.cz>\n \n \t* filter-rtags-warnings.py: New file."}, {"sha": "85b65c7982f4cf5fc9aea4f3a356eec160399361", "filename": "contrib/unused_functions.py", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a/contrib%2Funused_functions.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a/contrib%2Funused_functions.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Funused_functions.py?ref=75fcc3eb1be8cd8079eb9e1840295ef950d6dc4a", "patch": "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python\n+#\n+# Copyright (c) 2018 Free Software Foundation\n+# Contributed by Bernhard Reutner-Fischer <aldot@gcc.gnu.org>\n+# Inspired by bloat-o-meter from busybox.\n+\n+# This software may be used and distributed according to the terms and\n+# conditions of the GNU General Public License as published by the Free\n+# Software Foundation.\n+\n+# For a set of object-files, determine symbols that are\n+#  - public but should be static\n+\n+# Examples:\n+# unused_functions.py ./gcc/fortran\n+# unused_functions.py gcc/c  gcc/c-family/ gcc/*-c.o | grep -v \"'gt_\"\n+# unused_functions.py gcc/cp gcc/c-family/ gcc/*-c.o | grep -v \"'gt_\"\n+\n+import sys, os\n+\n+def usage():\n+    sys.stderr.write(\"usage: %s [dirs | files] [-- <readelf options>]\\n\"\n+                        % sys.argv[0])\n+    sys.exit(1)\n+\n+(odir, sym_args) = (set(), \"\")\n+\n+for i in range(1, len(sys.argv)):\n+    f = sys.argv[i]\n+    if f == \"--\": # sym_args\n+        sym_args = \" \".join(sys.argv[i + 1:])\n+        break\n+    if not os.path.exists(f):\n+        sys.stderr.write(\"Error: No such file or directory '%s'\\n\" % f)\n+        usage()\n+    else:\n+        odir.add(f)\n+\n+def get_symbols(file):\n+    syms = {}\n+    for l in os.popen(\"readelf -W -s %s %s | c++filt\" % (sym_args, file)).readlines():\n+        l = l.strip()\n+        if not (len(l) and l[0].isdigit() and len(l.split()) == 8):\n+            continue\n+        num, value, size, typ, bind, vis, ndx, name = l.split()\n+        if typ == 'SECTION' or typ == 'FILE': continue\n+        # I don't think we have many aliases in gcc, re-instate the addr\n+        # lut otherwise.\n+        if vis != \"DEFAULT\": continue\n+        #value = int(value, 16)\n+        #size = int(size, 16) if size.startswith('0x') else int(size)\n+        defined = ndx != \"UND\"\n+        globl = bind == \"GLOBAL\"\n+        # c++ RID_FUNCTION_NAME dance. FORNOW: Handled as local use\n+        # Is that correct?\n+        if name.endswith(\"::__FUNCTION__\") and typ == \"OBJECT\":\n+            name = name[0:(len(name) - len(\"::__FUNCTION__\"))]\n+            if defined: defined = False\n+        if defined and not globl: continue\n+        syms.setdefault(name, {})\n+        syms[name][[\"use\",\"def\"][defined]] = True\n+        syms[name][[\"local\",\"global\"][globl]] = True\n+    # Note: we could filter out e.g. debug_* symbols by looking for\n+    # value in the debug_macro sections.\n+    return syms\n+\n+(oprog, nprog) = ({}, {})\n+\n+def walker(paths):\n+    prog = {}\n+    for path in paths:\n+        if os.path.isdir(path):\n+            for r, dirs, files in os.walk(path):\n+                for f in files:\n+                    # TODO: maybe extract .a to a tmpdir and walk that, too\n+                    # maybe /there/foolib.a(file.o) as name?\n+                    if not f.endswith(\".o\"): continue\n+                    p = os.path.join(r, f)\n+                    prog[os.path.normpath(p)] = get_symbols(p)\n+                for d in dirs:\n+                    tem = prog.copy()\n+                    tem.update(walker([os.path.join(r, d)]))\n+                    prog = tem\n+        else:\n+            prog[os.path.normpath(path)] = get_symbols(path)\n+    return prog\n+\n+def resolve(prog):\n+    x = prog.keys()\n+    use = set()\n+    # for each unique pair of different files\n+    for (f, g) in ((f,g) for f in x for g in x if f != g):\n+        refs = set()\n+        # for each defined symbol\n+        for s in (s for s in prog[f] if prog[f][s].get(\"def\") and s in prog[g]):\n+            if prog[g][s].get(\"use\"):\n+                refs.add(s)\n+        for s in refs:\n+            # Prune externally referenced symbols as speed optimization only\n+            for i in (i for i in x if s in prog[i]): del prog[i][s]\n+        use |= refs\n+    return use\n+\n+oprog = walker(odir)\n+oused = resolve(oprog)\n+for (i,s) in ((i,s) for i in oprog.keys() for s in oprog[i] if oprog[i][s]):\n+    if oprog[i][s].get(\"def\") and not oprog[i][s].get(\"use\"):\n+        print(\"%s: Symbol '%s' declared extern but never referenced externally\"\n+            % (i,s))\n+\n+"}]}