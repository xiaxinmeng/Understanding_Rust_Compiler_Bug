{"sha": "e619b1739d00d5408eedc7b7a04c59de2aabf39e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxOWIxNzM5ZDAwZDU0MDhlZWRjN2I3YTA0YzU5ZGUyYWFiZjM5ZQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2012-09-13T08:55:30Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2012-09-13T08:55:30Z"}, "message": "arm.md (arm_rev): Factorize thumb1, thumb2 and arm variants for rev instruction..\n\n2012-09-13  Christophe Lyon  <christophe.lyon@linaro.org>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\n\tgcc/\n\t* config/arm/arm.md (arm_rev): Factorize thumb1, thumb2 and arm\n\tvariants for rev instruction..\n\t(thumb1_rev): Delete pattern.\n\t(arm_revsh): New pattern to support builtin_bswap16.\n\t(arm_rev16, bswaphi2): Likewise.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/builtin-bswap-1.c: New testcase.\n\n\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r191243", "tree": {"sha": "e9f29450bb47b95908b27391843f15007f6200e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9f29450bb47b95908b27391843f15007f6200e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e619b1739d00d5408eedc7b7a04c59de2aabf39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e619b1739d00d5408eedc7b7a04c59de2aabf39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e619b1739d00d5408eedc7b7a04c59de2aabf39e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e619b1739d00d5408eedc7b7a04c59de2aabf39e/comments", "author": null, "committer": null, "parents": [{"sha": "b9e75f4fccc492cdfd5e5498cb92a23f3b7a25b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e75f4fccc492cdfd5e5498cb92a23f3b7a25b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e75f4fccc492cdfd5e5498cb92a23f3b7a25b5"}], "stats": {"total": 151, "additions": 137, "deletions": 14}, "files": [{"sha": "12f79302d6b934813854d28c92ab0048aeca59a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e619b1739d00d5408eedc7b7a04c59de2aabf39e", "patch": "@@ -1,3 +1,12 @@\n+2012-09-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (arm_rev): Factorize thumb1, thumb2 and arm\n+\tvariants for rev instruction..\n+\t(thumb1_rev): Delete pattern.\n+\t(arm_revsh): New pattern to support builtin_bswap16.\n+\t(arm_rev16, bswaphi2): Likewise.\n+\n 2012-09-12  Teresa Johnson  <tejohnson@google.com>\n \n \tPR gcov-profile/54487"}, {"sha": "43a9f1fef3f240d1e8948e37823344e91fc6e654", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e619b1739d00d5408eedc7b7a04c59de2aabf39e", "patch": "@@ -11371,20 +11371,15 @@\n )\n \n (define_insn \"*arm_rev\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(bswap:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"rev%?\\t%0, %1\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"length\" \"4\")]\n-)\n-\n-(define_insn \"*thumb1_rev\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=l\")\n-\t(bswap:SI (match_operand:SI 1 \"s_register_operand\" \"l\")))]\n-  \"TARGET_THUMB1 && arm_arch6\"\n-   \"rev\\t%0, %1\"\n-  [(set_attr \"length\" \"2\")]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r\")\n+\t(bswap:SI (match_operand:SI 1 \"s_register_operand\" \"l,l,r\")))]\n+  \"arm_arch6\"\n+  \"@\n+   rev\\t%0, %1\n+   rev%?\\t%0, %1\n+   rev%?\\t%0, %1\"\n+  [(set_attr \"arch\" \"t1,t2,32\")\n+   (set_attr \"length\" \"2,2,4\")]\n )\n \n (define_expand \"arm_legacy_rev\"\n@@ -11472,6 +11467,40 @@\n   \"\n )\n \n+;; bswap16 patterns: use revsh and rev16 instructions for the signed\n+;; and unsigned variants, respectively. For rev16, expose\n+;; byte-swapping in the lower 16 bits only.\n+(define_insn \"*arm_revsh\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r\")\n+\t(sign_extend:SI (bswap:HI (match_operand:HI 1 \"s_register_operand\" \"l,l,r\"))))]\n+  \"arm_arch6\"\n+  \"@\n+  revsh\\t%0, %1\n+  revsh%?\\t%0, %1\n+  revsh%?\\t%0, %1\"\n+  [(set_attr \"arch\" \"t1,t2,32\")\n+   (set_attr \"length\" \"2,2,4\")]\n+)\n+\n+(define_insn \"*arm_rev16\"\n+  [(set (match_operand:HI 0 \"s_register_operand\" \"=l,l,r\")\n+\t(bswap:HI (match_operand:HI 1 \"s_register_operand\" \"l,l,r\")))]\n+  \"arm_arch6\"\n+  \"@\n+   rev16\\t%0, %1\n+   rev16%?\\t%0, %1\n+   rev16%?\\t%0, %1\"\n+  [(set_attr \"arch\" \"t1,t2,32\")\n+   (set_attr \"length\" \"2,2,4\")]\n+)\n+\n+(define_expand \"bswaphi2\"\n+  [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")\n+\t(bswap:HI (match_operand:HI 1 \"s_register_operand\" \"r\")))]\n+\"arm_arch6\"\n+\"\"\n+)\n+\n ;; Load the load/store multiple patterns\n (include \"ldmstm.md\")\n "}, {"sha": "8e5ac77f69ae68670d1eefbadfff025a1483be91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e619b1739d00d5408eedc7b7a04c59de2aabf39e", "patch": "@@ -1,3 +1,7 @@\n+2012-09-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/builtin-bswap-1.c: New testcase.\n+\n 2012-09-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* c-c++-common/pr51712.c: Handle for short-enum targets."}, {"sha": "43195bd8235b492a3c4783d88bf744ac92ee9f68", "filename": "gcc/testsuite/gcc.target/arm/builtin-bswap-1.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e619b1739d00d5408eedc7b7a04c59de2aabf39e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin-bswap-1.c?ref=e619b1739d00d5408eedc7b7a04c59de2aabf39e", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm_arch_v6_ok } */\n+/* { dg-add-options arm_arch_v6 } */\n+/* { dg-final { scan-assembler-not \"orr\\[ \\t\\]\" } } */\n+/* { dg-final { scan-assembler-times \"revsh\\\\t\" 1 { target { arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"revshne\\\\t\" 1 { target { arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"revsh\\\\t\" 2 { target { ! arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"rev16\\\\t\" 1 { target { arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"rev16ne\\\\t\" 1 { target { arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"rev16\\\\t\" 2 { target { ! arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"rev\\\\t\" 2 { target { arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"revne\\\\t\" 2 { target { arm_nothumb } } } }  */\n+/* { dg-final { scan-assembler-times \"rev\\\\t\" 4 { target { ! arm_nothumb } } } }  */\n+\n+/* revsh */\n+short swaps16 (short x)\n+{\n+  return __builtin_bswap16 (x);\n+}\n+\n+extern short foos16 (short);\n+\n+/* revshne */\n+short swaps16_cond (short x, int y)\n+{\n+  short z = x;\n+  if (y)\n+    z = __builtin_bswap16 (x);\n+  return foos16 (z);\n+}\n+\n+/* rev16 */\n+unsigned short swapu16 (unsigned short x)\n+{\n+  return __builtin_bswap16 (x);\n+}\n+\n+extern unsigned short foou16 (unsigned short);\n+\n+/* rev16ne */\n+unsigned short swapu16_cond (unsigned short x, int y)\n+{\n+  unsigned short z = x;\n+  if (y)\n+    z = __builtin_bswap16 (x);\n+  return foou16 (z);\n+}\n+\n+/* rev */\n+int swaps32 (int x) {\n+  return __builtin_bswap32 (x);\n+}\n+\n+extern int foos32 (int);\n+\n+/* revne */\n+int swaps32_cond (int x, int y)\n+{\n+  int z = x;\n+  if (y)\n+    z = __builtin_bswap32 (x);\n+  return foos32 (z);\n+}\n+\n+/* rev */\n+unsigned int swapu32 (unsigned int x)\n+{\n+  return __builtin_bswap32 (x);\n+}\n+\n+extern unsigned int foou32 (unsigned int);\n+\n+/* revne */\n+unsigned int swapsu2 (unsigned int x, int y)\n+{\n+  int z = x;\n+  if (y)\n+    z = __builtin_bswap32 (x);\n+  return foou32 (z);\n+}"}]}