{"sha": "34a2b7558b37707a17e1f2ba5298f94a88807492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhMmI3NTU4YjM3NzA3YTE3ZTFmMmJhNTI5OGY5NGE4ODgwNzQ5Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-12-19T18:16:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-12-19T18:16:39Z"}, "message": "New std::string implementation.\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI): Remove.\n\t(GLIBCXX_ENABLE_LIBSTDCXX_DUAL_ABI, GLIBCXX_DEFAULT_ABI): Add.\n\t* configure.ac: Use new macros.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* doc/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* po/Makefile.in: Regenerate.\n\t* src/Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\t* include/Makefile.am: Set _GLIBCXX_USE_DUAL_ABI.\n\t* include/Makefile.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Export symbols related to new std::string.\n\tTighten old patterns to not match new symbols.\n\t* config/locale/generic/monetary_members.cc: Guard some definitions\n\tto not compile with new ABI.\n\t* config/locale/gnu/monetary_members.cc: Likewise.\n\t* config/locale/gnu/numeric_members.cc: Prevent double-free.\n\t* config/os/gnu-linux/ldbl-extra.ver: Add new __gnu_cxx_ldbl128\n\texports. Tighten old patterns.\n\t* doc/xml/manual/configure.xml: Document new configure options.\n\t* doc/html/*: Regenerate.\n\t* include/bits/basic_string.h (__cxx11::basic_string): Define new\n\tnon-reference-counted implementation in inline namespace __cxx11.\n\t(stoi, stol, stoll, stof, stod, stold, to_string): Conditionally use\n\tinline namespace.\n\t(literals::string_literals::operator\"): Conditionally use abi-tag.\n\t* include/bits/basic_string.tcc (__cxx11::basic_string): Define.\n\t* include/bits/c++config: Define _GLIBCXX_USE_DUAL_ABI and\n\tLDBL_CXX11_ABI namespace macros.\n\t* include/bits/locale_classes.h (locale::name()): Use abi_tag when\n\tnew ABI is in use.\n\t(locale::_S_twinned_facets): New static member.\n\t(locale::facet::__shim): Declare new type.\n\t(locale::_facet::_M_sso_shim, locale::_facet::_M_cow_shim): New\n\tfunctions for creating shims.\n\t(locale::_Impl::_M_facet_unchecked): New member function for use\n\tduring construction.\n\t(locale::_Impl::_M_init_extra): New member functions to create second\n\tversion of some facets.\n\t(collate, collate_byname): Use abi_tag when new ABI is in use.\n\t* include/bits/locale_facets.h: Add _GLIBCXX_NUM_CXX11_FACETS macro.\n\t(numpunct, numpunct_byname): Use __cxx11 namespace.\n\t(num_get::_M_extract_float, num_get::_M_extract_int): Use abi_tag\n\twhen new ABI is in use.\n\t(num_get::__do_get, num_put::__do_put): Do not declare long double\n\tcompat functions for new ABI.\n\t* include/bits/locale_facets.tcc (num_get, num_put): Use abi_tag on\n\tdefinitions.\n\t(numpunct, numpunct_byname): Qualify explicit instantiations.\n\t* include/bits/locale_facets_nonio.h (time_get, time_get_byname,\n\tmoneypunct, moneypunct_byname, money_get, money_put, messages,\n\tmessages_byname): Use new inline namespace macros.\n\t(money_get::__do_get, money_put::__do_put): Do not declare long\n\tdouble compat functions for new ABI.\n\t* include/bits/locale_facets_nonio.tcc (money_get, money_put): Use\n\tnew namespace macros.\n\t(money_get::__do_get, money_put::__do_put): Do not define for new ABI.\n\t* include/bits/localefwd.h (numpunct, numpunct_byname, collate,\n\tcollate_byname, time_get, time_get_byname, moneypunct,\n\tmoneypunct_byname, money_get, money_put, messages, messages_byname):\n\tUse new namespace macros.\n\t* include/bits/regex.h: Use inline namespace macros.\n\t* include/bits/stl_list.h (_List_base, list): Use inline namespace\n\tinstead of abi-tag.\n\t* include/bits/stringfwd.h (basic_string): Use namespace macros.\n\t* include/std/iosfwd (basic_stringbuf, basic_istringstream,\n\tbasic_ostringstream, basic_stringstream): Likewise.\n\t* include/std/sstream: Likewise.\n\t(basic_stringbuf::__xfer_bufptrs): Update streambuf pointers on move.\n\t* include/std/stdexcept (__cow_string, __sso_string): New types for\n\tindirectly using std::string with either ABI.\n\t(logic_error, runtime_error): Replace std::string member with\n\t__cow_string when new ABI is in use. Declare non-inline copy\n\tconstructor and assignment operator. Declare const char* constructors.\n\t(domain_error, invalid_argument, length_error, out_of_range,\n\trange_error, overflow_error, underflow_error): Declare const char*\n\tconstructors.\n\t* include/std/system_error (error_category): Replace with new\n\tdefinition in inline namespace _V2.\n\t(error_code::message, error_condition::message): Use abi_tag on\n\tfunctions returning std::string.\n\t* python/libstdcxx/v6/printers.py (StdStringPrinter): Handle new ABI.\n\t* src/c++11/Makefile.am: Add new files.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/compatibility-c++0x.cc: Compile with old std::string ABI.\n\tDefine old error_category symbols.\n\t* src/c++11/cow-fstream-inst.cc: New. Instantiate fstream members\n\tusing old std::string ABI.\n\t* src/c++11/cow-locale_init.cc (locale::_Impl::_M_init_extra): Define.\n\t* src/c++11/cow-shim_facets.cc: Define shim facets using old ABI.\n\t* src/c++11/cow-sstream-inst.cc: Instantiate stringstreams using old\n\tstd::string ABI.\n\t* src/c++11/cow-stdexcept.cc: Define new constructors and assignment\n\toperators.\n\t(__cow_string, error_category::_M_message): Define.\n\t* src/c++11/cow-string-inst.cc: Explicit instantiations using old\n\tstd::string. Include src/c++98/istream-string.cc.\n\t* src/c++11/cow-wstring-inst.cc: Explicit instantiations using old\n\tstd::wstring.\n\t* src/c++11/cxx11-hash_tr1.cc: Explicit instantiations using new\n\tstring.\n\t* src/c++11/cxx11-ios_failure.cc: Add sanity check.\n\t* src/c++11/cxx11-locale-inst.cc: Instantiate facets using new\n\tstd::string.\n\t* src/c++11/cxx11-shim_facets.cc: Define shim facets using new ABI.\n\t* src/c++11/cxx11-stdexcept.cc: Define constructors taking new\n\tstd::string.\n\t* src/c++11/cxx11-wlocale-inst.cc: Instantiate facets using\n\tnew std::wstring.\n\t* src/c++11/fstream-inst.cc: Compile with new ABI.\n\t* src/c++11/functexcept.cc: Compile with old ABI.\n\t* src/c++11/random.cc: Compile with new ABI.\n\t* src/c++11/sstream-inst.cc: Compile with new ABI.\n\t* src/c++11/string-inst.cc: Explicit instantiations for new string.\n\t* src/c++11/system_error.cc (__sso_string, error_category::_M_message):\n\tDefine.\n\t* src/c++11/wstring-inst.cc: Compile with new ABI.\n\t* src/c++98/Makefile.am: Compile some host files twice for old and\n\tnew std::string. Add new files.\n\t* src/c++98/Makefile.in: Regenerate.\n\t* src/c++98/compatibility-ldbl.cc: Compile with old ABI.\n\t* src/c++98/compatibility.cc: Likewise.\n\t* src/c++98/concept-inst.cc: Likewise.\n\t* src/c++98/hash_tr1.cc: Likewise.\n\t* src/c++98/istream-string.cc: New file defining functions that\n\twork with istream and std::string moved from ...\n\t* src/c++98/istream.cc: ... here.\n\t* src/c++98/cow-istream-string.cc: Recompile istream-string.cc with\n\told ABI.\n\t* src/c++98/locale-inst.cc: Adjust facet instantiations to work for\n\teither ABI.\n\t* src/c++98/locale.cc (locale::_M_install_facet,\n\tlocale::_M_install_cache): Handle twinned facets.\n\t* src/c++98/locale-facets.cc: Compile with old std::string ABI.\n\t(__verify_grouping): Define new overload and old std::string version.\n\t* src/c++98/locale_init.cc: Initialize twinned facets.\n\t* src/c++98/localename.cc: Likewise.\n\t* src/c++98/misc-inst.cc: Instantiate C++98-only std::string members.\n\t(__verify_grouping): Define new std::string version.\n\t* src/c++98/stdexcept.cc: Compile with old std::string ABI.\n\t* src/c++98/wlocale-inst.cc: Likewise.\n\t* testsuite/18_support/50594.cc: Adjust to work with SSO strings.\n\t* testsuite/21_strings/basic_string/capacity/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string/capacity/char/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string/capacity/char/18654.cc: Likewise.\n\t* testsuite/21_strings/basic_string/capacity/char/2.cc: Likewise.\n\t* testsuite/21_strings/basic_string/capacity/wchar_t/1.cc: Likewise.\n\t* testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc:\n\tLikewise.\n\t* testsuite/21_strings/headers/string/synopsis.cc: Use inline\n\tnamespace macros.\n\t* testsuite/23_containers/headers/list/synopsis.cc: Likewise.\n\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Set dg-options so\n\tcorrect exception type can be caught.\n\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n\texceptions_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\texceptions_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_istream/sentry/char/12297.cc: Likewise.\n\t* testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n\t* testsuite/27_io/ios_base/failure/cxx11.cc: Disable for old ABI.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error.\n\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Use old ABI.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/whatis.cc: Likewise.\n\t* testsuite/util/exception/safety.h: Adjust member function types\n\tfor new std::string.\n\t* testsuite/util/testsuite_abi.cc: Add new version and ignore\n\t__float128 symbols in __cxx11 namespace.\n\nFrom-SVN: r218964", "tree": {"sha": "7ce127d227b816f2bfdcf2073b38f1243e89657f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ce127d227b816f2bfdcf2073b38f1243e89657f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a2b7558b37707a17e1f2ba5298f94a88807492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a2b7558b37707a17e1f2ba5298f94a88807492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a2b7558b37707a17e1f2ba5298f94a88807492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a2b7558b37707a17e1f2ba5298f94a88807492/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dcfa0b651446a84da43fff88aaf26e7254dd452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dcfa0b651446a84da43fff88aaf26e7254dd452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dcfa0b651446a84da43fff88aaf26e7254dd452"}], "stats": {"total": 7131, "additions": 6685, "deletions": 446}, "files": [{"sha": "a46a2b6d0d3f301fd07f860fbb27b76f2add2cf5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -1,3 +1,187 @@\n+2014-12-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI): Remove.\n+\t(GLIBCXX_ENABLE_LIBSTDCXX_DUAL_ABI, GLIBCXX_DEFAULT_ABI): Add.\n+\t* configure.ac: Use new macros.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* doc/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* po/Makefile.in: Regenerate.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* include/Makefile.am: Set _GLIBCXX_USE_DUAL_ABI.\n+\t* include/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Export symbols related to new std::string.\n+\tTighten old patterns to not match new symbols.\n+\t* config/locale/generic/monetary_members.cc: Guard some definitions\n+\tto not compile with new ABI.\n+\t* config/locale/gnu/monetary_members.cc: Likewise.\n+\t* config/locale/gnu/numeric_members.cc: Prevent double-free.\n+\t* config/os/gnu-linux/ldbl-extra.ver: Add new __gnu_cxx_ldbl128\n+\texports. Tighten old patterns.\n+\t* doc/xml/manual/configure.xml: Document new configure options.\n+\t* doc/html/*: Regenerate.\n+\t* include/bits/basic_string.h (__cxx11::basic_string): Define new\n+\tnon-reference-counted implementation in inline namespace __cxx11.\n+\t(stoi, stol, stoll, stof, stod, stold, to_string): Conditionally use\n+\tinline namespace.\n+\t(literals::string_literals::operator\"): Conditionally use abi-tag.\n+\t* include/bits/basic_string.tcc (__cxx11::basic_string): Define.\n+\t* include/bits/c++config: Define _GLIBCXX_USE_DUAL_ABI and\n+\tLDBL_CXX11_ABI namespace macros.\n+\t* include/bits/locale_classes.h (locale::name()): Use abi_tag when\n+\tnew ABI is in use.\n+\t(locale::_S_twinned_facets): New static member.\n+\t(locale::facet::__shim): Declare new type.\n+\t(locale::_facet::_M_sso_shim, locale::_facet::_M_cow_shim): New\n+\tfunctions for creating shims.\n+\t(locale::_Impl::_M_facet_unchecked): New member function for use\n+\tduring construction.\n+\t(locale::_Impl::_M_init_extra): New member functions to create second\n+\tversion of some facets.\n+\t(collate, collate_byname): Use abi_tag when new ABI is in use.\n+\t* include/bits/locale_facets.h: Add _GLIBCXX_NUM_CXX11_FACETS macro.\n+\t(numpunct, numpunct_byname): Use __cxx11 namespace.\n+\t(num_get::_M_extract_float, num_get::_M_extract_int): Use abi_tag\n+\twhen new ABI is in use.\n+\t(num_get::__do_get, num_put::__do_put): Do not declare long double\n+\tcompat functions for new ABI.\n+\t* include/bits/locale_facets.tcc (num_get, num_put): Use abi_tag on\n+\tdefinitions.\n+\t(numpunct, numpunct_byname): Qualify explicit instantiations.\n+\t* include/bits/locale_facets_nonio.h (time_get, time_get_byname,\n+\tmoneypunct, moneypunct_byname, money_get, money_put, messages,\n+\tmessages_byname): Use new inline namespace macros.\n+\t(money_get::__do_get, money_put::__do_put): Do not declare long\n+\tdouble compat functions for new ABI.\n+\t* include/bits/locale_facets_nonio.tcc (money_get, money_put): Use\n+\tnew namespace macros.\n+\t(money_get::__do_get, money_put::__do_put): Do not define for new ABI.\n+\t* include/bits/localefwd.h (numpunct, numpunct_byname, collate,\n+\tcollate_byname, time_get, time_get_byname, moneypunct,\n+\tmoneypunct_byname, money_get, money_put, messages, messages_byname):\n+\tUse new namespace macros.\n+\t* include/bits/regex.h: Use inline namespace macros.\n+\t* include/bits/stl_list.h (_List_base, list): Use inline namespace\n+\tinstead of abi-tag.\n+\t* include/bits/stringfwd.h (basic_string): Use namespace macros.\n+\t* include/std/iosfwd (basic_stringbuf, basic_istringstream,\n+\tbasic_ostringstream, basic_stringstream): Likewise.\n+\t* include/std/sstream: Likewise.\n+\t(basic_stringbuf::__xfer_bufptrs): Update streambuf pointers on move.\n+\t* include/std/stdexcept (__cow_string, __sso_string): New types for\n+\tindirectly using std::string with either ABI.\n+\t(logic_error, runtime_error): Replace std::string member with\n+\t__cow_string when new ABI is in use. Declare non-inline copy\n+\tconstructor and assignment operator. Declare const char* constructors.\n+\t(domain_error, invalid_argument, length_error, out_of_range,\n+\trange_error, overflow_error, underflow_error): Declare const char*\n+\tconstructors.\n+\t* include/std/system_error (error_category): Replace with new\n+\tdefinition in inline namespace _V2.\n+\t(error_code::message, error_condition::message): Use abi_tag on\n+\tfunctions returning std::string.\n+\t* python/libstdcxx/v6/printers.py (StdStringPrinter): Handle new ABI.\n+\t* src/c++11/Makefile.am: Add new files.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++11/compatibility-c++0x.cc: Compile with old std::string ABI.\n+\tDefine old error_category symbols.\n+\t* src/c++11/cow-fstream-inst.cc: New. Instantiate fstream members\n+\tusing old std::string ABI.\n+\t* src/c++11/cow-locale_init.cc (locale::_Impl::_M_init_extra): Define.\n+\t* src/c++11/cow-shim_facets.cc: Define shim facets using old ABI.\n+\t* src/c++11/cow-sstream-inst.cc: Instantiate stringstreams using old\n+\tstd::string ABI.\n+\t* src/c++11/cow-stdexcept.cc: Define new constructors and assignment\n+\toperators.\n+\t(__cow_string, error_category::_M_message): Define.\n+\t* src/c++11/cow-string-inst.cc: Explicit instantiations using old\n+\tstd::string. Include src/c++98/istream-string.cc.\n+\t* src/c++11/cow-wstring-inst.cc: Explicit instantiations using old\n+\tstd::wstring.\n+\t* src/c++11/cxx11-hash_tr1.cc: Explicit instantiations using new\n+\tstring.\n+\t* src/c++11/cxx11-ios_failure.cc: Add sanity check.\n+\t* src/c++11/cxx11-locale-inst.cc: Instantiate facets using new\n+\tstd::string.\n+\t* src/c++11/cxx11-shim_facets.cc: Define shim facets using new ABI.\n+\t* src/c++11/cxx11-stdexcept.cc: Define constructors taking new\n+\tstd::string.\n+\t* src/c++11/cxx11-wlocale-inst.cc: Instantiate facets using\n+\tnew std::wstring.\n+\t* src/c++11/fstream-inst.cc: Compile with new ABI.\n+\t* src/c++11/functexcept.cc: Compile with old ABI.\n+\t* src/c++11/random.cc: Compile with new ABI.\n+\t* src/c++11/sstream-inst.cc: Compile with new ABI.\n+\t* src/c++11/string-inst.cc: Explicit instantiations for new string.\n+\t* src/c++11/system_error.cc (__sso_string, error_category::_M_message):\n+\tDefine.\n+\t* src/c++11/wstring-inst.cc: Compile with new ABI.\n+\t* src/c++98/Makefile.am: Compile some host files twice for old and\n+\tnew std::string. Add new files.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/c++98/compatibility-ldbl.cc: Compile with old ABI.\n+\t* src/c++98/compatibility.cc: Likewise.\n+\t* src/c++98/concept-inst.cc: Likewise.\n+\t* src/c++98/hash_tr1.cc: Likewise.\n+\t* src/c++98/istream-string.cc: New file defining functions that\n+\twork with istream and std::string moved from ...\n+\t* src/c++98/istream.cc: ... here.\n+\t* src/c++98/cow-istream-string.cc: Recompile istream-string.cc with\n+\told ABI.\n+\t* src/c++98/locale-inst.cc: Adjust facet instantiations to work for\n+\teither ABI.\n+\t* src/c++98/locale.cc (locale::_M_install_facet,\n+\tlocale::_M_install_cache): Handle twinned facets.\n+\t* src/c++98/locale-facets.cc: Compile with old std::string ABI.\n+\t(__verify_grouping): Define new overload and old std::string version.\n+\t* src/c++98/locale_init.cc: Initialize twinned facets.\n+\t* src/c++98/localename.cc: Likewise.\n+\t* src/c++98/misc-inst.cc: Instantiate C++98-only std::string members.\n+\t(__verify_grouping): Define new std::string version.\n+\t* src/c++98/stdexcept.cc: Compile with old std::string ABI.\n+\t* src/c++98/wlocale-inst.cc: Likewise.\n+\t* testsuite/18_support/50594.cc: Adjust to work with SSO strings.\n+\t* testsuite/21_strings/basic_string/capacity/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/char/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/char/18654.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/char/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/wchar_t/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/headers/string/synopsis.cc: Use inline\n+\tnamespace macros.\n+\t* testsuite/23_containers/headers/list/synopsis.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Set dg-options so\n+\tcorrect exception type can be caught.\n+\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n+\texceptions_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\texceptions_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/sentry/char/12297.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n+\t* testsuite/27_io/ios_base/failure/cxx11.cc: Disable for old ABI.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error.\n+\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Use old ABI.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n+\t* testsuite/libstdc++-prettyprinters/whatis.cc: Likewise.\n+\t* testsuite/util/exception/safety.h: Adjust member function types\n+\tfor new std::string.\n+\t* testsuite/util/testsuite_abi.cc: Add new version and ignore\n+\t__float128 symbols in __cxx11 namespace.\n+\n 2014-12-17  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/64302"}, {"sha": "961d840f45f70c0931c897d6bee213e5a4c028b7", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -244,6 +244,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@"}, {"sha": "db357d6d73188034d533a6b9fe21134c80633ba9", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -3832,24 +3832,57 @@ AC_DEFUN([GLIBCXX_CHECK_SDT_H], [\n ])\n \n dnl\n-dnl Check if the user wants the new C++11-conforming ABI.\n+dnl Control whether the library should define symbols for old and new ABIs.\n+dnl This affects definitions of strings, stringstreams and locale facets.\n dnl\n-dnl --disable-libstdcxx-cxx11-abi will use old ABI for all types.\n+dnl --disable-libstdcxx-dual-abi will use old ABI for all types.\n dnl\n dnl Defines:\n-dnl  _GLIBCXX_USE_ABI_TAG (always defined, either to 1 or 0)\n+dnl  _GLIBCXX_USE_DUAL_ABI (always defined, either to 1 or 0)\n dnl\n-AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI], [\n-  AC_ARG_ENABLE([libstdcxx-cxx11-abi],\n-    AC_HELP_STRING([--disable-libstdcxx-cxx11-abi],\n-\t\t   [disable the C++11-conforming ABI]),,\n-\t\t   [enable_libstdcxx_cxx11_abi=yes])\n-  if test x\"$enable_libstdcxx_cxx11_abi\" != xyes; then\n-    AC_MSG_NOTICE([C++11-conforming ABI is disabled])\n+AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_DUAL_ABI], [\n+  GLIBCXX_ENABLE(libstdcxx-dual-abi,$1,,[support two versions of std::string])\n+  if test x\"$enable_libstdcxx_dual_abi\" != xyes; then\n+    AC_MSG_NOTICE([dual ABI is disabled])\n+    default_libstdcxx_abi=\"c++98\"\n   fi\n-  GLIBCXX_CONDITIONAL(ENABLE_CXX11_ABI, test $enable_libstdcxx_cxx11_abi = yes)\n+  GLIBCXX_CONDITIONAL(ENABLE_DUAL_ABI, test $enable_libstdcxx_dual_abi = yes)\n ])\n \n+dnl\n+dnl Check to see which ABI should be enabled by default.\n+dnl\n+dnl --with-default-libstdcxx-abi={c++98,c++11}\n+dnl\n+dnl Defines:\n+dnl  _GLIBCXX_USE_CXX11_ABI (always defined, either to 1 or 0)\n+dnl\n+AC_DEFUN([GLIBCXX_DEFAULT_ABI], [\n+  if test x$enable_libstdcxx_dual_abi = xyes; then\n+  AC_MSG_CHECKING([for default std::string ABI to use])\n+  AC_ARG_WITH([default-libstdcxx-abi],\n+    AS_HELP_STRING([--with-default-libstdcxx-abi],\n+                   [set the std::string ABI to use by default]),\n+    [case \"$withval\" in\n+      c++98|gnu++98|c++03|gnu++03)  default_libstdcxx_abi=\"c++98\" ;;\n+      c++1?|gnu++1?)  default_libstdcxx_abi=\"c++11\" ;;\n+      *)  AC_MSG_ERROR([Invalid argument for --with-default-libstdcxx-abi]) ;;\n+     esac],\n+    [default_libstdcxx_abi=\"c++11\"])\n+  AC_MSG_RESULT(${default_libstdcxx_abi})\n+  fi\n+  if test $default_libstdcxx_abi = \"c++11\"; then\n+    glibcxx_cxx11_abi=1\n+    glibcxx_cxx98_abi=0\n+  else\n+    glibcxx_cxx11_abi=0\n+    glibcxx_cxx98_abi=1\n+  fi\n+  AC_SUBST(glibcxx_cxx98_abi)\n+  GLIBCXX_CONDITIONAL(ENABLE_CXX11_ABI, test $glibcxx_cxx11_abi = 1)\n+])\n+\n+\n # Macros from the top-level gcc directory.\n m4_include([../config/gc++filt.m4])\n m4_include([../config/tls.m4])"}, {"sha": "8ba8ed4dba9fd0ff5c56d5ca4d70b7207c115f60", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 275, "deletions": 33, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -73,7 +73,7 @@ GLIBCXX_3.4 {\n #     std::[d-g]*;\n       std::d[a-d]*;\n       std::d[f-n]*;\n-      std::domain_error::d*;\n+#     std::domain_error::d*;\n #     std::domain_error::~d*;\n       std::d[p-z]*;\n       std::e[a-q]*;\n@@ -82,7 +82,7 @@ GLIBCXX_3.4 {\n       std::gslice*;\n       std::h[^a]*;\n       std::i[a-m]*;\n-      std::invalid_argument::i*;\n+#     std::invalid_argument::i*;\n #     std::invalid_argument::~i*;\n #     std::ios_base::[A-Ha-z]*;\n       std::ios_base::[A-Ha-e]*;\n@@ -103,9 +103,8 @@ GLIBCXX_3.4 {\n       std::istrstream*;\n       std::i[t-z]*;\n       std::[A-Zj-k]*;\n-      std::length_error::l*;\n+#     std::length_error::l*;\n #     std::length_error::~l*;\n-      std::logic_error*;\n       std::locale::[A-Za-e]*;\n       std::locale::facet::[A-Za-z]*;\n       std::locale::facet::_S_get_c_locale*;\n@@ -115,13 +114,20 @@ GLIBCXX_3.4 {\n       std::locale::[A-Zg-h]*;\n       std::locale::id::[A-Za-z]*;\n       std::locale::id::_M_id*;\n-      std::locale::[A-Zj-z]*;\n+      std::locale::[A-Zj-m]*;\n+#     std::locale::name();\n+      std::locale::none*;\n+      std::locale::numeric*;\n+      std::locale::[A-Zn-z]*;\n       std::locale::_[A-Ha-z]*;\n       std::locale::_Impl::[A-Za-z]*;\n #     std::locale::_Impl::_M_[A-Za-z]*;\n       std::locale::_[J-Ra-z]*;\n       std::locale::_S_normalize_category*;\n       std::locale::_[T-Za-z]*;\n+#     std::logic_error::l*;\n+      std::logic_error::what*;\n+#     std::logic_error::~l*;\n #     std::[A-Zm-r]*;\n #     std::[A-Zm]*;\n       std::[A-Z]*;\n@@ -133,16 +139,19 @@ GLIBCXX_3.4 {\n       std::nu[^m]*;\n       std::num[^e]*;\n       std::ostrstream*;\n-      std::out_of_range::o*;\n+#     std::out_of_range::o*;\n #     std::out_of_range::~o*;\n-      std::overflow_error::o*;\n+#     std::overflow_error::o*;\n #     std::overflow_error::~o*;\n #     std::[p-q]*;\n-      std::r[^ae]*;\n-      std::range_error::r*;\n+      std::r[^aeu]*;\n+#     std::range_error::r*;\n #     std::range_error::~r*;\n #     std::re[^t]*;\n #     std::rethrow_exception\n+#     std::runtime_error::r*\n+      std::runtime_error::what*;\n+#     std::runtime_error::~r*;\n       std::set_new_handler*;\n       std::set_terminate*;\n       std::set_unexpected*;\n@@ -158,7 +167,7 @@ GLIBCXX_3.4 {\n       std::tr1::h[^a]*;\n       std::t[s-z]*;\n #     std::[A-Zu-z]*;\n-      std::underflow_error::u*;\n+#     std::underflow_error::u*;\n #     std::underflow_error::~u*;\n       std::uncaught_exception*;\n       std::unexpected*;\n@@ -337,19 +346,19 @@ GLIBCXX_3.4 {\n     _ZNSt19basic_istringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[RS]*;\n     _ZNSt19basic_istringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED*;\n     _ZNSt19basic_istringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3str*;\n-    _ZNKSt19basic_istringstream*;\n+    _ZNKSt19basic_istringstreamI*;\n \n     # std::basic_ostringstream\n     _ZNSt19basic_ostringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[RS]*;\n     _ZNSt19basic_ostringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED*;\n     _ZNSt19basic_ostringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3str*;\n-    _ZNKSt19basic_ostringstream*;\n+    _ZNKSt19basic_ostringstreamI*;\n \n     # std::basic_stringstream\n     _ZNSt18basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[RS]*;\n     _ZNSt18basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED*;\n     _ZNSt18basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3str*;\n-    _ZNKSt18basic_stringstream*;\n+    _ZNKSt18basic_stringstreamI*;\n \n     # std::basic_iostream constructors (except move), destructors\n     _ZNSdC[12]Ev;\n@@ -447,10 +456,10 @@ GLIBCXX_3.4 {\n     _ZNSt13basic_istreamIwSt11char_traitsIwEErsE*[^g];\n \n     # std::istream operators and extractors\n-    _ZSt7getlineI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istream*;\n+    _ZSt7getlineI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istreamIT_T0_ES7_RSbI*;\n     _ZSt2wsI[cw]St11char_traitsI[cw]EE*;\n     _ZStrsI[cw]St11char_traitsI[cw]EERSt13basic_istream*;\n-    _ZStrsI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istream*;\n+    _ZStrsI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istreamIT_T0_ES7_RSbI*;\n     _ZStrsISt11char_traitsI[cw]EERSt13basic_istream*;\n     _ZStrsId[cw]St11char_traitsI[cw]EERSt13basic_istream*;\n     _ZStrsIe[cw]St11char_traitsI[cw]EERSt13basic_istream*;\n@@ -484,7 +493,7 @@ GLIBCXX_3.4 {\n     _ZSt4end[ls]I[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n     _ZSt5flushI[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n     _ZStlsI[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n-    _ZStlsI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_ostream*;\n+    _ZStlsI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_ostreamIT_T0_ES7_RKSbI*;\n     _ZStlsISt11char_traitsI[cw]EERSt13basic_ostream*;\n     _ZStlsId[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n     _ZStlsIe[cw]St11char_traitsI[cw]EERSt13basic_ostream*;\n@@ -493,6 +502,9 @@ GLIBCXX_3.4 {\n     # std::locale destructors\n     _ZNSt6localeD*;\n \n+    # std::locale::name() returning old std::string\n+    _ZNKSt6locale4nameEv;\n+\n     # std::locale::facet destructors\n     _ZNSt6locale5facetD*;\n \n@@ -529,16 +541,23 @@ GLIBCXX_3.4 {\n     _ZNSt12ctype_bynameI[cw]*;\n \n     # std::num_get\n-    _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n+    _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[2-9]*;\n+    _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE14_M_extract_intI*;\n+    _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE16_M_extract_floatI*;\n \n     # std::num_put\n-    _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n+    _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[2-9]*;\n+    _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE1[234]*;\n+    _ZNKSt7num_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE15_M_insert_floatI*;\n \n     # std::money_get\n-    _ZNKSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n+    _ZNKSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[2-9]*;\n+    _ZNKSt9money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE10_M_extractILb[01]EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs;\n \n     # std::money_put\n-    _ZNKSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n+    _ZNKSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[1-8]*;\n+    _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb[01]EEES3_S3_RSt8ios_basecRKSs;\n+    _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb[01]EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE;\n \n     # std::time_get\n     _ZNSt8time_get*;\n@@ -679,7 +698,13 @@ GLIBCXX_3.4 {\n     _ZTVSt[0-9][0-9]a*;\n     _ZTVSt10bad_typeid;\n     _ZTVSt13bad_exception;\n-    _ZTVSt[0-9][0-9]basic*;\n+#   _ZTVSt[0-9][0-9]basic*;\n+    _ZTVSt1[34]basic*;\n+    _ZTVSt15basic_streambufI*;\n+    _ZTVSt15basic_stringbufI*;\n+    _ZTVSt18basic_stringstreamI*;\n+    _ZTVSt19basic_istringstreamI*;\n+    _ZTVSt19basic_ostringstreamI*;\n     _ZTVSt[0-9][0-9][c-d]*;\n     _ZTVSt[0-9][0-9][g-k]*;\n     _ZTVSt11logic_error;\n@@ -701,7 +726,17 @@ GLIBCXX_3.4 {\n     # VTT structure\n     _ZTTS[a-z];\n     _ZTTSt[0-9][A-Za-z]*;\n-    _ZTTSt[0-9][0-9][A-Za-z]*;\n+#   _ZTTSt[0-9][0-9][A-Za-z]*;\n+    _ZTTSt1[0-4]*;\n+    _ZTTSt15a*;\n+    _ZTTSt15basic_streambufI*;\n+    _ZTTSt15basic_stringbufI*;\n+    _ZTTSt15[c-z]*;\n+    _ZTTSt1[67]*;\n+    _ZTTSt18basic_stringstreamI*;\n+    _ZTTSt19basic_istringstreamI*;\n+    _ZTTSt19basic_ostringstreamI*;\n+    _ZTTSt[2-9]*;\n \n     # typeinfo structure\n     _ZTIS[a-z];\n@@ -712,7 +747,13 @@ GLIBCXX_3.4 {\n     _ZTISt[0-9][0-9]a*;\n     _ZTISt10bad_typeid;\n     _ZTISt13bad_exception;\n-    _ZTISt[0-9][0-9]basic*;\n+#   _ZTISt[0-9][0-9]basic*;\n+    _ZTISt1[34]basic*;\n+    _ZTISt15basic_streambufI*;\n+    _ZTISt15basic_stringbufI*;\n+    _ZTISt18basic_stringstreamI*;\n+    _ZTISt19basic_istringstreamI*;\n+    _ZTISt19basic_ostringstreamI*;\n     _ZTISt[0-9][0-9][c-d]*;\n     _ZTISt[0-9][0-9][g-k]*;\n     _ZTISt11logic_error;\n@@ -749,7 +790,13 @@ GLIBCXX_3.4 {\n     _ZTSSt[0-9][0-9]a*;\n     _ZTSSt10bad_typeid;\n     _ZTSSt13bad_exception;\n-    _ZTSSt[0-9][0-9]basic*;\n+#   _ZTSSt[0-9][0-9]basic*;\n+    _ZTSSt1[34]basic*;\n+    _ZTSSt15basic_stringbufI*;\n+    _ZTSSt15basic_streambufI*;\n+    _ZTSSt18basic_stringstreamI*;\n+    _ZTSSt19basic_istringstreamI*;\n+    _ZTSSt19basic_ostringstreamI*;\n     _ZTSSt[0-9][0-9][c-d]*;\n     _ZTSSt[0-9][0-9][g-k]*;\n     _ZTSSt11logic_error;\n@@ -779,8 +826,33 @@ GLIBCXX_3.4 {\n     _ZNSt13bad_exceptionD*;\n \n     # function-scope static objects requires a guard variable.\n-    _ZGVNSt[^1]*;\n-    _ZGVNSt1[^7]*;\n+    _ZGVNSt[2-6]*;\n+    _ZGVNSt7collateI[cw]*;\n+    _ZGVNSt7num_getI[cw]*;\n+    _ZGVNSt7num_putI[cw]*;\n+    _ZGVNSt8messagesI[cw]*;\n+    _ZGVNSt8numpunctI[cw]*;\n+    _ZGVNSt8time_getI[cw]*;\n+    _ZGVNSt8time_putI[cw]*;\n+    _ZGVNSt9money_getI[cw]*;\n+    _ZGVNSt9money_putI[cw]*;\n+    _ZGVNSt1[^07]*;\n+    _ZGVNSt10moneypunctI[cw]Lb[01]*;\n+\n+    # exception constructors taking std::string\n+    _ZNSt11logic_errorC[12]ERKSs;\n+    _ZNSt13runtime_errorC[12]ERKSs;\n+    _ZNSt11range_errorC[12]ERKSs;\n+    _ZNSt12domain_errorC[12]ERKSs;\n+    _ZNSt12length_errorC[12]ERKSs;\n+    _ZNSt12out_of_rangeC[12]ERKSs;\n+    _ZNSt14overflow_errorC[12]ERKSs;\n+    _ZNSt15underflow_errorC[12]ERKSs;\n+    _ZNSt16invalid_argumentC[12]ERKSs;\n+\n+    # complete, deleting and base destructors\n+    _ZNSt11logic_errorD[012]Ev;\n+    _ZNSt13runtime_errorD[012]Ev;\n \n     # complete and deleting destructors where base destructors should not\n     # be exported.\n@@ -793,10 +865,42 @@ GLIBCXX_3.4 {\n     _ZNSt16invalid_argumentD[01]Ev;\n \n     # virtual function thunks\n-    _ZThn8_NS*;\n-    _ZThn16_NS*;\n-    _ZTv0_n12_NS*;\n-    _ZTv0_n24_NS*;\n+#   _ZThn8_NS*;\n+    _ZThn8_NS[dio]*;\n+    _ZThn8_NSt1[0-9]a*;\n+    _ZThn8_NSt1[34]basic*;\n+    _ZThn8_NSt18basic_stringstreamI*;\n+    _ZThn8_NSt19basic_[io]stringstreamI*;\n+    _ZThn8_NSt1[0-9][c-z]*;\n+    _ZThn8_NSt[2-9][a-z0-9]*;\n+#   _ZThn16_NS*;\n+    _ZThn16_NS[dio]*;\n+    _ZThn16_NSt1[0-9]a*;\n+    _ZThn16_NSt1[34]basic*;\n+    _ZThn16_NSt18basic_stringstreamI*;\n+    _ZThn16_NSt19basic_[io]stringstreamI*;\n+    _ZThn16_NSt1[0-9][c-z]*;\n+    _ZThn16_NSt[2-9][a-z0-9]*;\n+#   _ZTv0_n12_NS*;\n+    _ZTv0_n12_NS[dio]*;\n+    _ZTv0_n12_NSt1[0-9]a*;\n+    _ZTv0_n12_NSt1[34]basic*;\n+    _ZTv0_n12_NSt15basic_streambufI*;\n+    _ZTv0_n12_NSt15basic_stringbufI*;\n+    _ZTv0_n12_NSt18basic_stringstreamI*;\n+    _ZTv0_n12_NSt19basic_[io]stringstreamI*;\n+    _ZTv0_n12_NSt1[0-9][c-z]*;\n+    _ZTv0_n12_NSt[2-9][a-z0-9]*;\n+#   _ZTv0_n24_NS*;\n+    _ZTv0_n24_NS[dio]*;\n+    _ZTv0_n24_NSt1[0-9]a*;\n+    _ZTv0_n24_NSt1[34]basic*;\n+    _ZTv0_n24_NSt15basic_streambufI*;\n+    _ZTv0_n24_NSt15basic_stringbufI*;\n+    _ZTv0_n24_NSt18basic_stringstreamI*;\n+    _ZTv0_n24_NSt19basic_[io]stringstreamI*;\n+    _ZTv0_n24_NSt1[0-9][c-z]*;\n+    _ZTv0_n24_NSt[2-9][a-z0-9]*;\n \n     # stub functions from libmath\n     sinf;\n@@ -1034,7 +1138,7 @@ GLIBCXX_3.4.10 {\n     _ZNKSt4hashISsEclESs;\n     _ZNKSt4hashIeEclEe;\n \n-    _ZSt17__verify_grouping*;\n+    _ZSt17__verify_groupingPKc[mj]RKSs;\n \n     _ZNSt8__detail12__prime_listE;\n     _ZNSt3tr18__detail12__prime_listE;\n@@ -1390,10 +1494,15 @@ GLIBCXX_3.4.18 {\n     # Names inside the 'extern' block are demangled names.\n     extern \"C++\"\n     {\n-      std::random_device::*;\n       std::__detail::_Prime_rehash_policy::*;\n     };\n \n+    _ZNSt13random_device14_M_init_pretr1ERKSs;\n+    _ZNSt13random_device16_M_getval_pretr1Ev;\n+    _ZNSt13random_device7_M_finiEv;\n+    _ZNSt13random_device7_M_initERKSs;\n+    _ZNSt13random_device9_M_getvalEv;\n+\n     # std::this_thread::__sleep_for\n     _ZNSt11this_thread11__sleep_for*;\n \n@@ -1487,7 +1596,7 @@ GLIBCXX_3.4.21 {\n     _ZNKSt8ios_base7failureB5cxx114whatEv;\n     _ZNSt8ios_base7failureB5cxx11C[12]ERKSs;\n     _ZNSt8ios_base7failureB5cxx11C[12]EPKcRKSt10error_code;\n-    _ZNSt8ios_base7failureB5cxx11C[12]ERKSsB5cxx11;\n+    _ZNSt8ios_base7failureB5cxx11C[12]ERKNSt7__cxx1112basic_string*;\n     _ZNSt8ios_base7failureB5cxx11C[12]ERKSsB5cxx11RKSt10error_code;\n     _ZNSt8ios_base7failureB5cxx11D[012]Ev;\n     _ZTINSt8ios_base7failureB5cxx11E;\n@@ -1506,6 +1615,139 @@ GLIBCXX_3.4.21 {\n     # std::__future_base::_State_baseV2::_Make_ready::_M_set()\n     _ZNSt13__future_base13_State_baseV211_Make_ready6_M_setEv;\n \n+    # ABI-tagged std::basic_string\n+    _ZNSt7__cxx1112basic_string*;\n+    _ZNKSt7__cxx1112basic_string*;\n+\n+    # ABI-tagged stringstreams\n+    _ZNSt7__cxx1115basic_stringbuf*;\n+    _ZNSt7__cxx1118basic_stringstream*;\n+    _ZNSt7__cxx1119basic_istringstream*;\n+    _ZNSt7__cxx1119basic_ostringstream*;\n+    _ZNKSt7__cxx1115basic_stringbuf*;\n+    _ZNKSt7__cxx1118basic_stringstream*;\n+    _ZNKSt7__cxx1119basic_istringstream*;\n+    _ZNKSt7__cxx1119basic_ostringstream*;\n+    _ZT[ISTV]NSt7__cxx1115basic_stringbuf*;\n+    _ZT[ISTV]NSt7__cxx1118basic_stringstream*;\n+    _ZT[ISTV]NSt7__cxx1119basic_istringstream*;\n+    _ZT[ISTV]NSt7__cxx1119basic_ostringstream*;\n+    _ZThn8_NSt7__cxx1118basic_stringstream*;\n+    _ZThn16_NSt7__cxx1118basic_stringstream*;\n+    _ZTv0_n12_NSt7__cxx1115basic_stringbuf*;\n+    _ZTv0_n12_NSt7__cxx1118basic_stringstream*;\n+    _ZTv0_n12_NSt7__cxx1119basic_istringstream*;\n+    _ZTv0_n12_NSt7__cxx1119basic_ostringstream*;\n+    _ZTv0_n24_NSt7__cxx1115basic_stringbuf*;\n+    _ZTv0_n24_NSt7__cxx1118basic_stringstream*;\n+    _ZTv0_n24_NSt7__cxx1119basic_istringstream*;\n+    _ZTv0_n24_NSt7__cxx1119basic_ostringstream*;\n+\n+    # I/O functions for ABI-tagged basic_string\n+    _ZSt7getlineI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_string*;\n+    _ZStlsI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_string*;\n+    _ZStrsI[cw]St11char_traitsI[cw]ESaI[cw]EERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_string*;\n+\n+    # std::locale::name() returning new std::string\n+    _ZNKSt6locale4nameB5cxx11Ev;\n+\n+    # ABI-tagged locale facets\n+    _ZT[ISTV]NSt7__cxx117collateI[cw]*;\n+    _ZT[ISTV]NSt7__cxx1114collate_bynameI[cw]*;\n+    _ZT[ISTV]NSt7__cxx118messagesI[cw]*;\n+    _ZT[ISTV]NSt7__cxx1115messages_bynameI[cw]*;\n+    _ZT[ISTV]NSt7__cxx119money_getI[cw]*;\n+    _ZT[ISTV]NSt7__cxx119money_putI[cw]*;\n+    _ZT[ISTV]NSt7__cxx1110moneypunctI[cw]Lb[01]*;\n+    _ZT[ISTV]NSt7__cxx1117moneypunct_bynameI[cw]Lb[01]*;\n+    _ZT[ISTV]NSt7__cxx118numpunctI[cw]*;\n+    _ZT[ISTV]NSt7__cxx1115numpunct_bynameI[cw]*;\n+    _ZT[ISTV]NSt7__cxx118time_getI[cw]*;\n+    _ZT[ISTV]NSt7__cxx1115time_get_bynameI[cw]*;\n+\n+    # guard vars for new facet::id globals\n+    _ZGVNSt7__cxx117collateI[cw]*;\n+    _ZGVNSt7__cxx118messagesI[cw]*;\n+    _ZGVNSt7__cxx1110moneypunctI[cw]Lb[01]*;\n+    _ZGVNSt7__cxx119money_getI[cw]*;\n+    _ZGVNSt7__cxx119money_putI[cw]*;\n+    _ZGVNSt7__cxx118numpunctI[cw]*;\n+    _ZGVNSt7__cxx118time_getI[cw]*;\n+\n+    _ZNSt7__cxx117collateI*;\n+    _ZNSt7__cxx1114collate_bynameI*;\n+    _ZNSt7__cxx118messagesI*;\n+    _ZNSt7__cxx1115messages_bynameI*;\n+    _ZNSt7__cxx119money_getI*;\n+    _ZNSt7__cxx119money_putI*;\n+    _ZNSt7__cxx1110moneypunctI*;\n+    _ZNSt7__cxx1117moneypunct_bynameI*;\n+    _ZNSt7__cxx118numpunctI*;\n+    _ZNSt7__cxx1115numpunct_bynameI*;\n+    _ZNSt7__cxx118time_getI*;\n+    _ZNSt7__cxx1115time_get_bynameI*;\n+\n+    _ZNKSt7__cxx117collateI*;\n+    _ZNKSt7__cxx118messagesI*;\n+    _ZNKSt7__cxx119money_getI*;\n+    _ZNKSt7__cxx119money_putI*;\n+    _ZNKSt7__cxx1110moneypunctI*;\n+    _ZNKSt7__cxx118numpunctI*;\n+    _ZNKSt7__cxx118time_getI*;\n+\n+    _ZSt9has_facetINSt7__cxx117collate*;\n+    _ZSt9has_facetINSt7__cxx118messages*;\n+    _ZSt9has_facetINSt7__cxx119money_get*;\n+    _ZSt9has_facetINSt7__cxx119money_put*;\n+    _ZSt9has_facetINSt7__cxx1110moneypunct*;\n+    _ZSt9has_facetINSt7__cxx118numpunct*;\n+    _ZSt9has_facetINSt7__cxx118time_get*;\n+    _ZSt9use_facetINSt7__cxx117collate*;\n+    _ZSt9use_facetINSt7__cxx118messages*;\n+    _ZSt9use_facetINSt7__cxx119money_get*;\n+    _ZSt9use_facetINSt7__cxx119money_put*;\n+    _ZSt9use_facetINSt7__cxx1110moneypunct*;\n+    _ZSt9use_facetINSt7__cxx118numpunct*;\n+    _ZSt9use_facetINSt7__cxx118time_get*;\n+\n+    _ZSt17__verify_groupingPKc[mj]RKNSt7__cxx1112basic_string*;\n+\n+    _ZNSt3_V214error_category*;\n+    _ZNKSt3_V214error_category*;\n+    _ZTVNSt3_V214error_categoryE;\n+    _ZTINSt3_V214error_categoryE;\n+    _ZNSt3_V215system_categoryEv;\n+    _ZNSt3_V216generic_categoryEv;\n+\n+    # New exception constructors\n+    _ZNSt11logic_errorC[12]EPKc;\n+    _ZNSt11logic_errorC[12]ERKS_;\n+    _ZNSt11logic_erroraSERKS_;\n+    _ZNSt11logic_errorC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt11range_errorC[12]EPKc;\n+    _ZNSt11range_errorC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt12domain_errorC[12]EPKc;\n+    _ZNSt12domain_errorC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt12length_errorC[12]EPKc;\n+    _ZNSt12length_errorC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt12out_of_rangeC[12]EPKc;\n+    _ZNSt12out_of_rangeC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt13runtime_errorC[12]EPKc;\n+    _ZNSt13runtime_errorC[12]ERKS_;\n+    _ZNSt13runtime_erroraSERKS_;\n+    _ZNSt13runtime_errorC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt14overflow_errorC[12]EPKc;\n+    _ZNSt14overflow_errorC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt15underflow_errorC[12]EPKc;\n+    _ZNSt15underflow_errorC[12]ERKNSt7__cxx1112basic_string*;\n+    _ZNSt16invalid_argumentC[12]EPKc;\n+    _ZNSt16invalid_argumentC[12]ERKNSt7__cxx1112basic_string*;\n+\n+    _ZNSt13random_device14_M_init_pretr1ERKNSt7__cxx1112basic_string*;\n+    _ZNSt13random_device7_M_initERKNSt7__cxx1112basic_string*;\n+\n+    _ZNKSt3tr14hashINSt7__cxx1112basic_string*;\n+\n } GLIBCXX_3.4.20;\n \n "}, {"sha": "20eabe1013a37b16ba5000dc5c0b32123f20bcec", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -34,11 +34,16 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+// This file might be compiled twice, but we only want to define the members\n+// of money_base once.\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n   money_base::_S_construct_pattern(char, char, char) throw()\n   { return _S_default_pattern; }\n+#endif\n \n   template<>\n     void"}, {"sha": "820ced2c9f823dba02041e5c1ee7c0f15db91fd1", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -35,6 +35,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+// This file might be compiled twice, but we only want to define the members\n+// of money_base once.\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+\n   // Construct and return valid pattern consisting of some combination of:\n   // space none symbol sign value\n   money_base::pattern\n@@ -201,6 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     return __ret;\n   }\n+#endif\n \n   template<> \n     void"}, {"sha": "69ac176ff427da4230a1e68280795c52da0f9a4e", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -117,6 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (_M_data->_M_grouping_size)\n \tdelete [] _M_data->_M_grouping;\n+      _M_data->_M_grouping = 0;\n       delete _M_data;\n     }\n    \n@@ -209,6 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (_M_data->_M_grouping_size)\n \tdelete [] _M_data->_M_grouping;\n+      _M_data->_M_grouping = 0;\n       delete _M_data;\n     }\n  #endif"}, {"sha": "5ef4a6cb6e1e6d517b4b44c26c8c6cb0e32c7119", "filename": "libstdc++-v3/config/os/gnu-linux/ldbl-extra.ver", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-extra.ver?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -9,7 +9,17 @@ GLIBCXX_LDBL_3.4 {\n   _ZSt14__convert_to_vIgEvPKcRT_RSt12_Ios_IostateRKP*;\n   _ZStlsIg[cw]St11char_traitsI[cw]EERSt13basic_ostreamIT0_T1_ES6_RKSt7complexIT_E;\n   _ZStrsIg[cw]St11char_traitsI[cw]EERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E;\n-  *__gnu_cxx_ldbl128*;\n+  *__gnu_cxx_ldbl128[1-6]*;\n+  *St9has_facetINSt17__gnu_cxx_ldbl1287*;\n+  *St9use_facetINSt17__gnu_cxx_ldbl1287*;\n+  *__gnu_cxx_ldbl1287num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[CD][0-2]E?;\n+  *__gnu_cxx_ldbl1287num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE2idE;\n+  *__gnu_cxx_ldbl1287num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEEE;\n+  *__gnu_cxx_ldbl1287num_getI[cw]*getE*;\n+  *__gnu_cxx_ldbl1287num_getI[cw]*14_M_extract_intI*;\n+  *__gnu_cxx_ldbl1287num_getI[cw]*16_M_extract_floatE*;\n+  *__gnu_cxx_ldbl1287num_putI[cw]*;\n+  *__gnu_cxx_ldbl128[8-9]*;\n };\n \n # Corresponding to exports in GLIBCXX_3.4.9, not GLIBCXX_3.4.7\n@@ -25,6 +35,11 @@ GLIBCXX_LDBL_3.4.10 {\n   _ZNKSt4hashIgEclEg;\n } GLIBCXX_LDBL_3.4.7;\n \n+GLIBCXX_LDBL_3.4.21 {\n+  __gnu_cxx_ldbl1287num_getI[cw]*14_M_extract_intB5cxx11*;\n+  __gnu_cxx_ldbl1287num_getI[cw]*16_M_extract_floatB5cxx11*;\n+} GLIBCXX_LDBL_3.4.10;\n+\n CXXABI_LDBL_1.3 {\n   _ZT[IS]g;\n   _ZT[IS]Pg;"}, {"sha": "be9337fcec0f8879eeea543630ddcac85a02222f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 76, "deletions": 21, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -645,6 +645,9 @@ GLIBCXX_LDBL_COMPAT_FALSE\n GLIBCXX_LDBL_COMPAT_TRUE\n ENABLE_CXX11_ABI_FALSE\n ENABLE_CXX11_ABI_TRUE\n+glibcxx_cxx98_abi\n+ENABLE_DUAL_ABI_FALSE\n+ENABLE_DUAL_ABI_TRUE\n ENABLE_VISIBILITY_FALSE\n ENABLE_VISIBILITY_TRUE\n libtool_VERSION\n@@ -882,7 +885,8 @@ with_system_libunwind\n enable_linux_futex\n enable_symvers\n enable_libstdcxx_visibility\n-enable_libstdcxx_cxx11_abi\n+enable_libstdcxx_dual_abi\n+with_default_libstdcxx_abi\n enable_libstdcxx_threads\n with_gxx_include_dir\n enable_version_specific_runtime_libs\n@@ -1578,8 +1582,8 @@ Optional Features:\n                           [default=yes]\n   --enable-libstdcxx-visibility\n                           enables visibility safe usage [default=yes]\n-  --disable-libstdcxx-cxx11-abi\n-                          disable the C++11-conforming ABI\n+  --enable-libstdcxx-dual-abi\n+                          support two versions of std::string [default=yes]\n   --enable-libstdcxx-threads\n                           enable C++11 threads support [default=auto]\n   --enable-version-specific-runtime-libs\n@@ -1602,6 +1606,8 @@ Optional Packages:\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n   --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n   --with-system-libunwind use installed libunwind\n+  --with-default-libstdcxx-abi\n+                          set the std::string ABI to use by default\n   --with-gxx-include-dir=DIR\n                           installation directory for include files\n \n@@ -11531,7 +11537,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11534 \"configure\"\n+#line 11540 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11637,7 +11643,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11640 \"configure\"\n+#line 11646 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15057,7 +15063,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 15060 \"configure\"\n+#line 15066 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15409,7 +15415,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15412 \"configure\"\n+#line 15418 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15444,7 +15450,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15447 \"configure\"\n+#line 15453 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15479,7 +15485,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15482 \"configure\"\n+#line 15488 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15515,7 +15521,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15518 \"configure\"\n+#line 15524 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15594,7 +15600,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15597 \"configure\"\n+#line 15603 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15636,7 +15642,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15639 \"configure\"\n+#line 15645 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15670,7 +15676,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15673 \"configure\"\n+#line 15679 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -78166,20 +78172,56 @@ $as_echo \"$as_me: visibility supported: $enable_libstdcxx_visibility\" >&6;}\n \n \n \n-  # Check whether --enable-libstdcxx-cxx11-abi was given.\n-if test \"${enable_libstdcxx_cxx11_abi+set}\" = set; then :\n-  enableval=$enable_libstdcxx_cxx11_abi;\n+   # Check whether --enable-libstdcxx-dual-abi was given.\n+if test \"${enable_libstdcxx_dual_abi+set}\" = set; then :\n+  enableval=$enable_libstdcxx_dual_abi;\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) as_fn_error \"Argument to enable/disable libstdcxx-dual-abi must be yes or no\" \"$LINENO\" 5 ;;\n+      esac\n+\n else\n-  enable_libstdcxx_cxx11_abi=yes\n+  enable_libstdcxx_dual_abi=yes\n fi\n \n-  if test x\"$enable_libstdcxx_cxx11_abi\" != xyes; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: C++11-conforming ABI is disabled\" >&5\n-$as_echo \"$as_me: C++11-conforming ABI is disabled\" >&6;}\n+\n+  if test x\"$enable_libstdcxx_dual_abi\" != xyes; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: dual ABI is disabled\" >&5\n+$as_echo \"$as_me: dual ABI is disabled\" >&6;}\n+    default_libstdcxx_abi=\"c++98\"\n   fi\n \n \n \n+  if test x$enable_libstdcxx_dual_abi = xyes; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for default std::string ABI to use\" >&5\n+$as_echo_n \"checking for default std::string ABI to use... \" >&6; }\n+\n+# Check whether --with-default-libstdcxx-abi was given.\n+if test \"${with_default_libstdcxx_abi+set}\" = set; then :\n+  withval=$with_default_libstdcxx_abi; case \"$withval\" in\n+      c++98|gnu++98|c++03|gnu++03)  default_libstdcxx_abi=\"c++98\" ;;\n+      c++1?|gnu++1?)  default_libstdcxx_abi=\"c++11\" ;;\n+      *)  as_fn_error \"Invalid argument for --with-default-libstdcxx-abi\" \"$LINENO\" 5 ;;\n+     esac\n+else\n+  default_libstdcxx_abi=\"c++11\"\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ${default_libstdcxx_abi}\" >&5\n+$as_echo \"${default_libstdcxx_abi}\" >&6; }\n+  fi\n+  if test $default_libstdcxx_abi = \"c++11\"; then\n+    glibcxx_cxx11_abi=1\n+    glibcxx_cxx98_abi=0\n+  else\n+    glibcxx_cxx11_abi=0\n+    glibcxx_cxx98_abi=1\n+  fi\n+\n+\n+\n+\n ac_ldbl_compat=no\n case \"$target\" in\n   powerpc*-*-linux* | \\\n@@ -79332,7 +79374,16 @@ else\n fi\n \n \n-    if test $enable_libstdcxx_cxx11_abi = yes; then\n+    if test $enable_libstdcxx_dual_abi = yes; then\n+  ENABLE_DUAL_ABI_TRUE=\n+  ENABLE_DUAL_ABI_FALSE='#'\n+else\n+  ENABLE_DUAL_ABI_TRUE='#'\n+  ENABLE_DUAL_ABI_FALSE=\n+fi\n+\n+\n+    if test $glibcxx_cxx11_abi = 1; then\n   ENABLE_CXX11_ABI_TRUE=\n   ENABLE_CXX11_ABI_FALSE='#'\n else\n@@ -79758,6 +79809,10 @@ if test -z \"${ENABLE_VISIBILITY_TRUE}\" && test -z \"${ENABLE_VISIBILITY_FALSE}\";\n   as_fn_error \"conditional \\\"ENABLE_VISIBILITY\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_DUAL_ABI_TRUE}\" && test -z \"${ENABLE_DUAL_ABI_FALSE}\"; then\n+  as_fn_error \"conditional \\\"ENABLE_DUAL_ABI\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${ENABLE_CXX11_ABI_TRUE}\" && test -z \"${ENABLE_CXX11_ABI_FALSE}\"; then\n   as_fn_error \"conditional \\\"ENABLE_CXX11_ABI\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "7a7c1d820fa7b56de4e36d4ea838efc0680befa1", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -368,7 +368,8 @@ AC_SUBST(libtool_VERSION)\n \n GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY([yes])\n \n-GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI([yes])\n+GLIBCXX_ENABLE_LIBSTDCXX_DUAL_ABI([yes])\n+GLIBCXX_DEFAULT_ABI\n \n ac_ldbl_compat=no\n case \"$target\" in"}, {"sha": "d1f05007898102d7cf99bf0cccb8d404c47ccb9b", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -218,6 +218,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@"}, {"sha": "6453f08d2e77ad548db46d1edb14f473fae424e2", "filename": "libstdc++-v3/doc/html/manual/configure.html", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -227,6 +227,15 @@\n      facilities, which might be undesirable in a low-memory environment or\n      when standard error is not available.  This option disables those\n      messages.  This option does not change the library ABI.\n+   </p></dd><dt><span class=\"term\"><code class=\"code\">--disable-libstdcxx-dual-abi</code></span></dt><dd><p>\n+     Disable support for the new, C++11-conforming <code class=\"code\">std::string</code>\n+     implementation.  This option changes the library ABI.\n+   </p></dd><dt><span class=\"term\"><code class=\"code\">--with-default-libstdcxx-abi</code></span></dt><dd><p>\n+     By default, the new <code class=\"code\">std::string</code> implementation will be\n+     declared and a macro must be defined to declare the old implementation\n+     instead. That default can be reversed by configuring the library with\n+     <code class=\"code\">--with-default-libstdcxx-abi=c++98</code>.\n+     This option does not change the library ABI.\n    </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-vtable-verify</code>[default]</span></dt><dd><p>Use <code class=\"code\">-fvtable-verify=std</code> to compile the C++\n     runtime with instrumentation for vtable verification. All virtual\n     functions in the standard library will be verified at runtime."}, {"sha": "00e9d38f3155ad21bdcfa17a74c5ef85119a3292", "filename": "libstdc++-v3/doc/html/manual/using_exceptions.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -310,4 +310,4 @@\n \t<a class=\"link\" href=\"http://gcc.gnu.org/PR25191\" target=\"_top\">\n       GCC Bug 25191: exception_defines.h #defines try/catch\n \t</a>\n-      </em>. </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"using_concurrency.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Concurrency\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Debugging Support</td></tr></table></div></body></html>\n+      </em>. </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"using_concurrency.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Concurrency\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Debugging Support</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "a6e0c212cff01881fc3f75a2791d71c1cbf75063", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -382,6 +382,25 @@\n    </para>\n  </listitem></varlistentry>\n \n+<varlistentry><term><code>--disable-libstdcxx-dual-abi</code></term>\n+ <listitem>\n+   <para>\n+     Disable support for the new, C++11-conforming <code>std::string</code>\n+     implementation.  This option changes the library ABI.\n+   </para>\n+ </listitem></varlistentry>\n+\n+<varlistentry><term><code>--with-default-libstdcxx-abi</code></term>\n+ <listitem>\n+   <para>\n+     By default, the new <code>std::string</code> implementation will be\n+     declared and a macro must be defined to declare the old implementation\n+     instead. That default can be reversed by configuring the library with\n+     <code>--with-default-libstdcxx-abi=c++98</code>.\n+     This option does not change the library ABI.\n+   </para>\n+ </listitem></varlistentry>\n+\n  <varlistentry><term><code>--enable-vtable-verify</code>[default]</term>\n  <listitem>\n     <para>Use <code>-fvtable-verify=std</code> to compile the C++"}, {"sha": "2594d761d90b81cb89831e554d5cccbd82b0a8d2", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -1129,6 +1129,14 @@ stamp-visibility:\n \techo 0 > stamp-visibility\n endif\n \n+if ENABLE_DUAL_ABI\n+stamp-dual-abi:\n+\techo 1 > stamp-dual-abi\n+else\n+stamp-dual-abi:\n+\techo 0 > stamp-dual-abi\n+endif\n+\n if ENABLE_CXX11_ABI\n stamp-cxx11-abi:\n \techo 1 > stamp-cxx11-abi\n@@ -1146,11 +1154,13 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-namespace-version \\\n \t\t\t      stamp-visibility \\\n \t\t\t      stamp-extern-template \\\n+\t\t\t      stamp-dual-abi \\\n \t\t\t      stamp-cxx11-abi\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n+\tdualabi=`cat stamp-dual-abi` ;\\\n \tcxx11abi=`cat stamp-cxx11-abi` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n@@ -1160,6 +1170,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n \t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE$$, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n+\t-e \"s,define _GLIBCXX_USE_DUAL_ABI, define _GLIBCXX_USE_DUAL_ABI $$dualabi,\" \\\n \t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\"}, {"sha": "3e5d82ec43b68d1a7056113bf28d587835cc06a9", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -216,6 +216,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n@@ -1539,6 +1540,11 @@ stamp-host: ${host_headers} ${bits_host_headers} ${ext_host_headers} ${host_head\n @ENABLE_VISIBILITY_FALSE@stamp-visibility:\n @ENABLE_VISIBILITY_FALSE@\techo 0 > stamp-visibility\n \n+@ENABLE_DUAL_ABI_TRUE@stamp-dual-abi:\n+@ENABLE_DUAL_ABI_TRUE@\techo 1 > stamp-dual-abi\n+@ENABLE_DUAL_ABI_FALSE@stamp-dual-abi:\n+@ENABLE_DUAL_ABI_FALSE@\techo 0 > stamp-dual-abi\n+\n @ENABLE_CXX11_ABI_TRUE@stamp-cxx11-abi:\n @ENABLE_CXX11_ABI_TRUE@\techo 1 > stamp-cxx11-abi\n @ENABLE_CXX11_ABI_FALSE@stamp-cxx11-abi:\n@@ -1553,11 +1559,13 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      stamp-namespace-version \\\n \t\t\t      stamp-visibility \\\n \t\t\t      stamp-extern-template \\\n+\t\t\t      stamp-dual-abi \\\n \t\t\t      stamp-cxx11-abi\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n+\tdualabi=`cat stamp-dual-abi` ;\\\n \tcxx11abi=`cat stamp-cxx11-abi` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n@@ -1567,6 +1575,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n \t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE$$, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n+\t-e \"s,define _GLIBCXX_USE_DUAL_ABI, define _GLIBCXX_USE_DUAL_ABI $$dualabi,\" \\\n \t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\"}, {"sha": "77293848b0b6fd29fe6826e52aa6af04c6fb1f14", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2403, "deletions": 1, "changes": 2404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -37,6 +37,7 @@\n #pragma GCC system_header\n \n #include <ext/atomicity.h>\n+#include <ext/alloc_traits.h>\n #include <debug/debug.h>\n #if __cplusplus >= 201103L\n #include <initializer_list>\n@@ -46,6 +47,2399 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+  /**\n+   *  @class basic_string basic_string.h <string>\n+   *  @brief  Managing sequences of characters and character-like objects.\n+   *\n+   *  @ingroup strings\n+   *  @ingroup sequences\n+   *\n+   *  @tparam _CharT  Type of character\n+   *  @tparam _Traits  Traits for character type, defaults to\n+   *                   char_traits<_CharT>.\n+   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.\n+   *\n+   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n+   *  <a href=\"tables.html#66\">reversible container</a>, and a\n+   *  <a href=\"tables.html#67\">sequence</a>.  Of the\n+   *  <a href=\"tables.html#68\">optional sequence requirements</a>, only\n+   *  @c push_back, @c at, and @c %array access are supported.\n+   */\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class basic_string\n+    {\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+\trebind<_CharT>::other _Char_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n+\n+      // Types:\n+    public:\n+      typedef _Traits\t\t\t\t\ttraits_type;\n+      typedef typename _Traits::char_type\t\tvalue_type;\n+      typedef _Char_alloc_type\t\t\t\tallocator_type;\n+      typedef typename _Alloc_traits::size_type\t\tsize_type;\n+      typedef typename _Alloc_traits::difference_type\tdifference_type;\n+      typedef typename _Alloc_traits::reference\t\treference;\n+      typedef typename _Alloc_traits::const_reference\tconst_reference;\n+      typedef typename _Alloc_traits::pointer\t\tpointer;\n+      typedef typename _Alloc_traits::const_pointer\tconst_pointer;\n+      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;\n+      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>\n+\t\t\t\t\t\t\tconst_iterator;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n+      typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n+\n+      ///  Value returned by various member functions when they fail.\n+      static const size_type\tnpos = static_cast<size_type>(-1);\n+\n+    private:\n+      // type used for positions in insert, erase etc.\n+#if __cplusplus < 201103L\n+      typedef iterator __const_iterator;\n+#else\n+      typedef const_iterator __const_iterator;\n+#endif\n+\n+      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n+      struct _Alloc_hider : allocator_type // TODO check __is_final\n+      {\n+\t_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())\n+\t: allocator_type(__a), _M_p(__dat) { }\n+\n+\tpointer _M_p; // The actual data.\n+      };\n+\n+      _Alloc_hider\t_M_dataplus;\n+      size_type\t\t_M_string_length;\n+\n+      enum { _S_local_capacity = 16 / sizeof(_CharT) - 1 };\n+\n+      union\n+      {\n+\t_CharT           _M_local_buf[_S_local_capacity + 1];\n+\tsize_type        _M_allocated_capacity;\n+      };\n+\n+      void\n+      _M_data(pointer __p)\n+      { _M_dataplus._M_p = __p; }\n+\n+      void\n+      _M_length(size_type __length)\n+      { _M_string_length = __length; }\n+\n+      pointer\n+      _M_data() const\n+      { return _M_dataplus._M_p; }\n+\n+      pointer\n+      _M_local_data()\n+      {\n+#if __cplusplus >= 201103L\n+\treturn std::pointer_traits<pointer>::pointer_to(*_M_local_buf);\n+#else\n+\treturn pointer(_M_local_buf);\n+#endif\n+      }\n+\n+      const_pointer\n+      _M_local_data() const\n+      {\n+#if __cplusplus >= 201103L\n+\treturn std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);\n+#else\n+\treturn const_pointer(_M_local_buf);\n+#endif\n+      }\n+\n+      void\n+      _M_capacity(size_type __capacity)\n+      { _M_allocated_capacity = __capacity; }\n+\n+      void\n+      _M_set_length(size_type __n)\n+      {\n+\t_M_length(__n);\n+\ttraits_type::assign(_M_data()[__n], _CharT());\n+      }\n+\n+      bool\n+      _M_is_local() const\n+      { return _M_data() == _M_local_data(); }\n+\n+      // Create & Destroy\n+      pointer\n+      _M_create(size_type&, size_type);\n+\n+      void\n+      _M_dispose()\n+      {\n+\tif (!_M_is_local())\n+\t  _M_destroy(_M_allocated_capacity);\n+      }\n+\n+      void\n+      _M_destroy(size_type __size) throw()\n+      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }\n+\n+      // _M_construct_aux is used to implement the 21.3.1 para 15 which\n+      // requires special behaviour if _InIterator is an integral type\n+      template<typename _InIterator>\n+        void\n+        _M_construct_aux(_InIterator __beg, _InIterator __end,\n+\t\t\t std::__false_type)\n+\t{\n+          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n+          _M_construct(__beg, __end, _Tag());\n+\t}\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 438. Ambiguity in the \"do the right thing\" clause\n+      template<typename _Integer>\n+        void\n+        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)\n+\t{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }\n+\n+      void\n+      _M_construct_aux_2(size_type __req, _CharT __c)\n+      { _M_construct(__req, __c); }\n+\n+      template<typename _InIterator>\n+        void\n+        _M_construct(_InIterator __beg, _InIterator __end)\n+\t{\n+\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n+\t  _M_construct_aux(__beg, __end, _Integral());\n+        }\n+\n+      // For Input Iterators, used in istreambuf_iterators, etc.\n+      template<typename _InIterator>\n+        void\n+        _M_construct(_InIterator __beg, _InIterator __end,\n+\t\t     std::input_iterator_tag);\n+\n+      // For forward_iterators up to random_access_iterators, used for\n+      // string::iterator, _CharT*, etc.\n+      template<typename _FwdIterator>\n+        void\n+        _M_construct(_FwdIterator __beg, _FwdIterator __end,\n+\t\t     std::forward_iterator_tag);\n+\n+      void\n+      _M_construct(size_type __req, _CharT __c);\n+\n+      allocator_type&\n+      _M_get_allocator()\n+      { return _M_dataplus; }\n+\n+      const allocator_type&\n+      _M_get_allocator() const\n+      { return _M_dataplus; }\n+\n+    private:\n+\n+#ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST\n+      // The explicit instantiations in misc-inst.cc require this due to\n+      // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063\n+      template<typename _Tp, bool _Requires =\n+\t       !__are_same<_Tp, _CharT*>::__value\n+\t       && !__are_same<_Tp, const _CharT*>::__value\n+\t       && !__are_same<_Tp, iterator>::__value\n+\t       && !__are_same<_Tp, const_iterator>::__value>\n+\tstruct __enable_if_not_native_iterator\n+\t{ typedef basic_string& __type; };\n+      template<typename _Tp>\n+\tstruct __enable_if_not_native_iterator<_Tp, false> { };\n+#endif\n+\n+      size_type\n+      _M_check(size_type __pos, const char* __s) const\n+      {\n+\tif (__pos > this->size())\n+\t  __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \"\n+\t\t\t\t       \"this->size() (which is %zu)\"),\n+\t\t\t\t   __s, __pos, this->size());\n+\treturn __pos;\n+      }\n+\n+      void\n+      _M_check_length(size_type __n1, size_type __n2, const char* __s) const\n+      {\n+\tif (this->max_size() - (this->size() - __n1) < __n2)\n+\t  __throw_length_error(__N(__s));\n+      }\n+\n+\n+      // NB: _M_limit doesn't check for a bad __pos value.\n+      size_type\n+      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT\n+      {\n+\tconst bool __testoff =  __off < this->size() - __pos;\n+\treturn __testoff ? __off : this->size() - __pos;\n+      }\n+\n+      // True if _Rep and source do not overlap.\n+      bool\n+      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n+      {\n+\treturn (less<const _CharT*>()(__s, _M_data())\n+\t\t|| less<const _CharT*>()(_M_data() + this->size(), __s));\n+      }\n+\n+      // When __n = 1 way faster than the general multichar\n+      // traits_type::copy/move/assign.\n+      static void\n+      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, *__s);\n+\telse\n+\t  traits_type::copy(__d, __s, __n);\n+      }\n+\n+      static void\n+      _S_move(_CharT* __d, const _CharT* __s, size_type __n)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, *__s);\n+\telse\n+\t  traits_type::move(__d, __s, __n);\n+      }\n+\n+      static void\n+      _S_assign(_CharT* __d, size_type __n, _CharT __c)\n+      {\n+\tif (__n == 1)\n+\t  traits_type::assign(*__d, __c);\n+\telse\n+\t  traits_type::assign(__d, __n, __c);\n+      }\n+\n+      // _S_copy_chars is a separate template to permit specialization\n+      // to optimize for the common case of pointers as iterators.\n+      template<class _Iterator>\n+        static void\n+        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n+\t_GLIBCXX_NOEXCEPT\n+        {\n+\t  for (; __k1 != __k2; ++__k1, ++__p)\n+\t    traits_type::assign(*__p, *__k1); // These types are off.\n+\t}\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)\n+      _GLIBCXX_NOEXCEPT\n+      { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT\n+      { _S_copy(__p, __k1, __k2 - __k1); }\n+\n+      static void\n+      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\n+      _GLIBCXX_NOEXCEPT\n+      { _S_copy(__p, __k1, __k2 - __k1); }\n+\n+      static int\n+      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT\n+      {\n+\tconst difference_type __d = difference_type(__n1 - __n2);\n+\n+\tif (__d > __gnu_cxx::__numeric_traits<int>::__max)\n+\t  return __gnu_cxx::__numeric_traits<int>::__max;\n+\telse if (__d < __gnu_cxx::__numeric_traits<int>::__min)\n+\t  return __gnu_cxx::__numeric_traits<int>::__min;\n+\telse\n+\t  return int(__d);\n+      }\n+\n+      void\n+      _M_assign(const basic_string& __rcs);\n+\n+      void\n+      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n+\t\tsize_type __len2);\n+\n+      void\n+      _M_erase(size_type __pos, size_type __n);\n+\n+    public:\n+      // Construct/copy/destroy:\n+      // NB: We overload ctors in some cases instead of using default\n+      // arguments, per 17.4.4.4 para. 2 item 2.\n+\n+      /**\n+       *  @brief  Default constructor creates an empty string.\n+       */\n+      basic_string() _GLIBCXX_NOEXCEPT\n+      : _M_dataplus(_M_local_data())\n+      { _M_set_length(0); }\n+\n+      /**\n+       *  @brief  Construct an empty string using allocator @a a.\n+       */\n+      explicit\n+      basic_string(const _Alloc& __a)\n+      : _M_dataplus(_M_local_data(), __a)\n+      { _M_set_length(0); }\n+\n+      /**\n+       *  @brief  Construct string with copy of value of @a __str.\n+       *  @param  __str  Source string.\n+       */\n+      basic_string(const basic_string& __str)\n+      : _M_dataplus(_M_local_data(), __str._M_get_allocator()) // TODO A traits\n+      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }\n+\n+      /**\n+       *  @brief  Construct string as copy of a substring.\n+       *  @param  __str  Source string.\n+       *  @param  __pos  Index of first character to copy from.\n+       *  @param  __n  Number of characters to copy (default remainder).\n+       */\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2402. [this constructor] shouldn't use Allocator()\n+      basic_string(const basic_string& __str, size_type __pos,\n+\t\t   size_type __n = npos)\n+      : _M_dataplus(_M_local_data())\n+      {\n+\tconst _CharT* __start = __str._M_data()\n+\t  + __str._M_check(__pos, \"basic_string::basic_string\");\n+\t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n+      }\n+\n+      /**\n+       *  @brief  Construct string as copy of a substring.\n+       *  @param  __str  Source string.\n+       *  @param  __pos  Index of first character to copy from.\n+       *  @param  __n  Number of characters to copy (default remainder).\n+       *  @param  __a  Allocator to use.\n+       */\n+      basic_string(const basic_string& __str, size_type __pos,\n+\t\t   size_type __n, const _Alloc& __a)\n+      : _M_dataplus(_M_local_data(), __a)\n+      {\n+\tconst _CharT* __start\n+\t  = __str._M_data() + __str._M_check(__pos, \"string::string\");\n+\t_M_construct(__start, __start + __str._M_limit(__pos, __n));\n+      }\n+\n+      /**\n+       *  @brief  Construct string initialized by a character %array.\n+       *  @param  __s  Source character %array.\n+       *  @param  __n  Number of characters to copy.\n+       *  @param  __a  Allocator to use (default is default allocator).\n+       *\n+       *  NB: @a __s must have at least @a __n characters, &apos;\\\\0&apos;\n+       *  has no special meaning.\n+       */\n+      basic_string(const _CharT* __s, size_type __n,\n+\t\t   const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_M_local_data(), __a)\n+      { _M_construct(__s, __s + __n); }\n+\n+      /**\n+       *  @brief  Construct string as copy of a C string.\n+       *  @param  __s  Source C string.\n+       *  @param  __a  Allocator to use (default is default allocator).\n+       */\n+      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_M_local_data(), __a)\n+      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }\n+\n+      /**\n+       *  @brief  Construct string as multiple characters.\n+       *  @param  __n  Number of characters.\n+       *  @param  __c  Character to use.\n+       *  @param  __a  Allocator to use (default is default allocator).\n+       */\n+      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_M_local_data(), __a)\n+      { _M_construct(__n, __c); }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Move construct string.\n+       *  @param  __str  Source string.\n+       *\n+       *  The newly-created string contains the exact contents of @a __str.\n+       *  @a __str is a valid, but unspecified string.\n+       **/\n+      basic_string(basic_string&& __str) noexcept\n+      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))\n+      {\n+\tif (__str._M_is_local())\n+\t  {\n+\t    if (__str.length())\n+\t      traits_type::copy(_M_local_buf, __str._M_local_buf,\n+\t\t\t\t_S_local_capacity + 1);\n+\t  }\n+\telse\n+\t  {\n+\t    _M_data(__str._M_data());\n+\t    _M_capacity(__str._M_allocated_capacity);\n+\t  }\n+\n+\t// Must use _M_length() here not _M_set_length() because\n+\t// basic_stringbuf relies on writing into unallocated capacity so\n+\t// we mess up the contents if we put a '\\0' in the string.\n+\t_M_length(__str.length());\n+\t__str._M_data(__str._M_local_data());\n+\t__str._M_set_length(0);\n+      }\n+\n+      /**\n+       *  @brief  Construct string from an initializer %list.\n+       *  @param  __l  std::initializer_list of characters.\n+       *  @param  __a  Allocator to use (default is default allocator).\n+       */\n+      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_M_local_data(), __a)\n+      { _M_construct(__l.begin(), __l.end()); }\n+\n+      basic_string(const basic_string& __str, const _Alloc& __a)\n+      : _M_dataplus(_M_local_data(), __a)\n+      { _M_construct(__str.begin(), __str.end()); }\n+\n+      basic_string(basic_string&& __str, const _Alloc& __a)\n+      : _M_dataplus(_M_local_data(), __a)\n+      {\n+\tif (__str.get_allocator() == __a)\n+\t  *this = std::move(__str);\n+\telse\n+\t  _M_construct(__str.begin(), __str.end());\n+      }\n+\n+#endif // C++11\n+\n+      /**\n+       *  @brief  Construct string as copy of a range.\n+       *  @param  __beg  Start of range.\n+       *  @param  __end  End of range.\n+       *  @param  __a  Allocator to use (default is default allocator).\n+       */\n+#if __cplusplus >= 201103L\n+      template<typename _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<typename _InputIterator>\n+#endif\n+        basic_string(_InputIterator __beg, _InputIterator __end,\n+\t\t     const _Alloc& __a = _Alloc())\n+\t: _M_dataplus(_M_local_data(), __a)\n+\t{ _M_construct(__beg, __end); }\n+\n+      /**\n+       *  @brief  Destroy the string instance.\n+       */\n+      ~basic_string()\n+      { _M_dispose(); }\n+\n+      /**\n+       *  @brief  Assign the value of @a str to this string.\n+       *  @param  __str  Source string.\n+       */\n+      basic_string&\n+      operator=(const basic_string& __str)\n+      { return this->assign(__str); }\n+\n+      /**\n+       *  @brief  Copy contents of @a s into this string.\n+       *  @param  __s  Source null-terminated string.\n+       */\n+      basic_string&\n+      operator=(const _CharT* __s)\n+      { return this->assign(__s); }\n+\n+      /**\n+       *  @brief  Set value to string of length 1.\n+       *  @param  __c  Source character.\n+       *\n+       *  Assigning to a character makes this string length 1 and\n+       *  (*this)[0] == @a c.\n+       */\n+      basic_string&\n+      operator=(_CharT __c)\n+      {\n+\tthis->assign(1, __c);\n+\treturn *this;\n+      }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Move assign the value of @a str to this string.\n+       *  @param  __str  Source string.\n+       *\n+       *  The contents of @a str are moved into this string (without copying).\n+       *  @a str is a valid, but unspecified string.\n+       **/\n+      // PR 58265, this should be noexcept.\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2063. Contradictory requirements for string move assignment\n+      basic_string&\n+      operator=(basic_string&& __str)\n+      {\n+\tthis->swap(__str);\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief  Set value to string constructed from initializer %list.\n+       *  @param  __l  std::initializer_list.\n+       */\n+      basic_string&\n+      operator=(initializer_list<_CharT> __l)\n+      {\n+\tthis->assign(__l.begin(), __l.size());\n+\treturn *this;\n+      }\n+#endif // C++11\n+\n+      // Iterators:\n+      /**\n+       *  Returns a read/write iterator that points to the first character in\n+       *  the %string.\n+       */\n+      iterator\n+      begin() _GLIBCXX_NOEXCEPT\n+      { return iterator(_M_data()); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  character in the %string.\n+       */\n+      const_iterator\n+      begin() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_M_data()); }\n+\n+      /**\n+       *  Returns a read/write iterator that points one past the last\n+       *  character in the %string.\n+       */\n+      iterator\n+      end() _GLIBCXX_NOEXCEPT\n+      { return iterator(_M_data() + this->size()); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the\n+       *  last character in the %string.\n+       */\n+      const_iterator\n+      end() const _GLIBCXX_NOEXCEPT\n+      { return const_iterator(_M_data() + this->size()); }\n+\n+      /**\n+       *  Returns a read/write reverse iterator that points to the last\n+       *  character in the %string.  Iteration is done in reverse element\n+       *  order.\n+       */\n+      reverse_iterator\n+      rbegin() _GLIBCXX_NOEXCEPT\n+      { return reverse_iterator(this->end()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last character in the %string.  Iteration is done in\n+       *  reverse element order.\n+       */\n+      const_reverse_iterator\n+      rbegin() const _GLIBCXX_NOEXCEPT\n+      { return const_reverse_iterator(this->end()); }\n+\n+      /**\n+       *  Returns a read/write reverse iterator that points to one before the\n+       *  first character in the %string.  Iteration is done in reverse\n+       *  element order.\n+       */\n+      reverse_iterator\n+      rend() _GLIBCXX_NOEXCEPT\n+      { return reverse_iterator(this->begin()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first character in the %string.  Iteration\n+       *  is done in reverse element order.\n+       */\n+      const_reverse_iterator\n+      rend() const _GLIBCXX_NOEXCEPT\n+      { return const_reverse_iterator(this->begin()); }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  character in the %string.\n+       */\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(this->_M_data()); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the\n+       *  last character in the %string.\n+       */\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(this->_M_data() + this->size()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last character in the %string.  Iteration is done in\n+       *  reverse element order.\n+       */\n+      const_reverse_iterator\n+      crbegin() const noexcept\n+      { return const_reverse_iterator(this->end()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first character in the %string.  Iteration\n+       *  is done in reverse element order.\n+       */\n+      const_reverse_iterator\n+      crend() const noexcept\n+      { return const_reverse_iterator(this->begin()); }\n+#endif\n+\n+    public:\n+      // Capacity:\n+      ///  Returns the number of characters in the string, not including any\n+      ///  null-termination.\n+      size_type\n+      size() const _GLIBCXX_NOEXCEPT\n+      { return _M_string_length; }\n+\n+      ///  Returns the number of characters in the string, not including any\n+      ///  null-termination.\n+      size_type\n+      length() const _GLIBCXX_NOEXCEPT\n+      { return _M_string_length; }\n+\n+      ///  Returns the size() of the largest possible %string.\n+      size_type\n+      max_size() const _GLIBCXX_NOEXCEPT\n+      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }\n+\n+      /**\n+       *  @brief  Resizes the %string to the specified number of characters.\n+       *  @param  __n  Number of characters the %string should contain.\n+       *  @param  __c  Character to fill any new elements.\n+       *\n+       *  This function will %resize the %string to the specified\n+       *  number of characters.  If the number is smaller than the\n+       *  %string's current size the %string is truncated, otherwise\n+       *  the %string is extended and new elements are %set to @a __c.\n+       */\n+      void\n+      resize(size_type __n, _CharT __c);\n+\n+      /**\n+       *  @brief  Resizes the %string to the specified number of characters.\n+       *  @param  __n  Number of characters the %string should contain.\n+       *\n+       *  This function will resize the %string to the specified length.  If\n+       *  the new size is smaller than the %string's current size the %string\n+       *  is truncated, otherwise the %string is extended and new characters\n+       *  are default-constructed.  For basic types such as char, this means\n+       *  setting them to 0.\n+       */\n+      void\n+      resize(size_type __n)\n+      { this->resize(__n, _CharT()); }\n+\n+#if __cplusplus >= 201103L\n+      ///  A non-binding request to reduce capacity() to size().\n+      void\n+      shrink_to_fit() noexcept\n+      {\n+\tif (capacity() > size())\n+\t  {\n+\t    __try\n+\t      { reserve(0); }\n+\t    __catch(...)\n+\t      { }\n+\t  }\n+      }\n+#endif\n+\n+      /**\n+       *  Returns the total number of characters that the %string can hold\n+       *  before needing to allocate more memory.\n+       */\n+      size_type\n+      capacity() const _GLIBCXX_NOEXCEPT\n+      {\n+\treturn _M_is_local() ? size_type(_S_local_capacity)\n+\t                     : _M_allocated_capacity;\n+      }\n+\n+      /**\n+       *  @brief  Attempt to preallocate enough memory for specified number of\n+       *          characters.\n+       *  @param  __res_arg  Number of characters required.\n+       *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().\n+       *\n+       *  This function attempts to reserve enough memory for the\n+       *  %string to hold the specified number of characters.  If the\n+       *  number requested is more than max_size(), length_error is\n+       *  thrown.\n+       *\n+       *  The advantage of this function is that if optimal code is a\n+       *  necessity and the user can determine the string length that will be\n+       *  required, the user can reserve the memory in %advance, and thus\n+       *  prevent a possible reallocation of memory and copying of %string\n+       *  data.\n+       */\n+      void\n+      reserve(size_type __res_arg = 0);\n+\n+      /**\n+       *  Erases the string, making it empty.\n+       */\n+      void\n+      clear() _GLIBCXX_NOEXCEPT\n+      { _M_set_length(0); }\n+\n+      /**\n+       *  Returns true if the %string is empty.  Equivalent to \n+       *  <code>*this == \"\"</code>.\n+       */\n+      bool\n+      empty() const _GLIBCXX_NOEXCEPT\n+      { return this->size() == 0; }\n+\n+      // Element access:\n+      /**\n+       *  @brief  Subscript access to the data contained in the %string.\n+       *  @param  __pos  The index of the character to access.\n+       *  @return  Read-only (constant) reference to the character.\n+       *\n+       *  This operator allows for easy, array-style, data access.\n+       *  Note that data access with this operator is unchecked and\n+       *  out_of_range lookups are not defined. (For checked lookups\n+       *  see at().)\n+       */\n+      const_reference\n+      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(__pos <= size());\n+\treturn _M_data()[__pos];\n+      }\n+\n+      /**\n+       *  @brief  Subscript access to the data contained in the %string.\n+       *  @param  __pos  The index of the character to access.\n+       *  @return  Read/write reference to the character.\n+       *\n+       *  This operator allows for easy, array-style, data access.\n+       *  Note that data access with this operator is unchecked and\n+       *  out_of_range lookups are not defined. (For checked lookups\n+       *  see at().)\n+       */\n+      reference\n+      operator[](size_type __pos)\n+      {\n+        // Allow pos == size() both in C++98 mode, as v3 extension,\n+\t// and in C++11 mode.\n+\t_GLIBCXX_DEBUG_ASSERT(__pos <= size());\n+        // In pedantic mode be strict in C++98 mode.\n+\t_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());\n+\treturn _M_data()[__pos];\n+      }\n+\n+      /**\n+       *  @brief  Provides access to the data contained in the %string.\n+       *  @param __n The index of the character to access.\n+       *  @return  Read-only (const) reference to the character.\n+       *  @throw  std::out_of_range  If @a n is an invalid index.\n+       *\n+       *  This function provides for safer data access.  The parameter is\n+       *  first checked that it is in the range of the string.  The function\n+       *  throws out_of_range if the check fails.\n+       */\n+      const_reference\n+      at(size_type __n) const\n+      {\n+\tif (__n >= this->size())\n+\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \"\n+\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __n, this->size());\n+\treturn _M_data()[__n];\n+      }\n+\n+      /**\n+       *  @brief  Provides access to the data contained in the %string.\n+       *  @param __n The index of the character to access.\n+       *  @return  Read/write reference to the character.\n+       *  @throw  std::out_of_range  If @a n is an invalid index.\n+       *\n+       *  This function provides for safer data access.  The parameter is\n+       *  first checked that it is in the range of the string.  The function\n+       *  throws out_of_range if the check fails.\n+       */\n+      reference\n+      at(size_type __n)\n+      {\n+\tif (__n >= size())\n+\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \"\n+\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __n, this->size());\n+\treturn _M_data()[__n];\n+      }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  Returns a read/write reference to the data at the first\n+       *  element of the %string.\n+       */\n+      reference\n+      front() noexcept\n+      { return operator[](0); }\n+\n+      /**\n+       *  Returns a read-only (constant) reference to the data at the first\n+       *  element of the %string.\n+       */\n+      const_reference\n+      front() const noexcept\n+      { return operator[](0); }\n+\n+      /**\n+       *  Returns a read/write reference to the data at the last\n+       *  element of the %string.\n+       */\n+      reference\n+      back() noexcept\n+      { return operator[](this->size() - 1); }\n+\n+      /**\n+       *  Returns a read-only (constant) reference to the data at the\n+       *  last element of the %string.\n+       */\n+      const_reference\n+      back() const noexcept\n+      { return operator[](this->size() - 1); }\n+#endif\n+\n+      // Modifiers:\n+      /**\n+       *  @brief  Append a string to this string.\n+       *  @param __str  The string to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      operator+=(const basic_string& __str)\n+      { return this->append(__str); }\n+\n+      /**\n+       *  @brief  Append a C string.\n+       *  @param __s  The C string to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      operator+=(const _CharT* __s)\n+      { return this->append(__s); }\n+\n+      /**\n+       *  @brief  Append a character.\n+       *  @param __c  The character to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      operator+=(_CharT __c)\n+      {\n+\tthis->push_back(__c);\n+\treturn *this;\n+      }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Append an initializer_list of characters.\n+       *  @param __l  The initializer_list of characters to be appended.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      operator+=(initializer_list<_CharT> __l)\n+      { return this->append(__l.begin(), __l.size()); }\n+#endif // C++11\n+\n+      /**\n+       *  @brief  Append a string to this string.\n+       *  @param __str  The string to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      append(const basic_string& __str)\n+      { return _M_append(__str._M_data(), __str.size()); }\n+\n+      /**\n+       *  @brief  Append a substring.\n+       *  @param __str  The string to append.\n+       *  @param __pos  Index of the first character of str to append.\n+       *  @param __n  The number of characters to append.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range if @a __pos is not a valid index.\n+       *\n+       *  This function appends @a __n characters from @a __str\n+       *  starting at @a __pos to this string.  If @a __n is is larger\n+       *  than the number of available characters in @a __str, the\n+       *  remainder of @a __str is appended.\n+       */\n+      basic_string&\n+      append(const basic_string& __str, size_type __pos, size_type __n)\n+      { return _M_append(__str._M_data()\n+\t\t\t + __str._M_check(__pos, \"basic_string::append\"),\n+\t\t\t __str._M_limit(__pos, __n)); }\n+\n+      /**\n+       *  @brief  Append a C substring.\n+       *  @param __s  The C string to append.\n+       *  @param __n  The number of characters to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      append(const _CharT* __s, size_type __n)\n+      {\n+\t__glibcxx_requires_string_len(__s, __n);\n+\t_M_check_length(size_type(0), __n, \"basic_string::append\");\n+\treturn _M_append(__s, __n);\n+      }\n+\n+      /**\n+       *  @brief  Append a C string.\n+       *  @param __s  The C string to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      append(const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\tconst size_type __n = traits_type::length(__s);\n+\t_M_check_length(size_type(0), __n, \"basic_string::append\");\n+\treturn _M_append(__s, __n);\n+      }\n+\n+      /**\n+       *  @brief  Append multiple characters.\n+       *  @param __n  The number of characters to append.\n+       *  @param __c  The character to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  Appends __n copies of __c to this string.\n+       */\n+      basic_string&\n+      append(size_type __n, _CharT __c)\n+      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Append an initializer_list of characters.\n+       *  @param __l  The initializer_list of characters to append.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      append(initializer_list<_CharT> __l)\n+      { return this->append(__l.begin(), __l.size()); }\n+#endif // C++11\n+\n+      /**\n+       *  @brief  Append a range of characters.\n+       *  @param __first  Iterator referencing the first character to append.\n+       *  @param __last  Iterator marking the end of the range.\n+       *  @return  Reference to this string.\n+       *\n+       *  Appends characters in the range [__first,__last) to this string.\n+       */\n+#if __cplusplus >= 201103L\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<class _InputIterator>\n+#endif\n+        basic_string&\n+        append(_InputIterator __first, _InputIterator __last)\n+        { return this->replace(end(), end(), __first, __last); }\n+\n+      /**\n+       *  @brief  Append a single character.\n+       *  @param __c  Character to append.\n+       */\n+      void\n+      push_back(_CharT __c)\n+      {\n+\tconst size_type __size = this->size();\n+\tif (__size + 1 > this->capacity())\n+\t  this->_M_mutate(__size, size_type(0), 0, size_type(1));\n+\ttraits_type::assign(this->_M_data()[__size], __c);\n+\tthis->_M_set_length(__size + 1);\n+      }\n+\n+      /**\n+       *  @brief  Set value to contents of another string.\n+       *  @param  __str  Source string to use.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      assign(const basic_string& __str)\n+      {\n+\tthis->_M_assign(__str);\n+\treturn *this;\n+      }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Set value to contents of another string.\n+       *  @param  __str  Source string to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets this string to the exact contents of @a __str.\n+       *  @a __str is a valid, but unspecified string.\n+       */\n+      basic_string&\n+      assign(basic_string&& __str)\n+      {\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 2063. Contradictory requirements for string move assignment\n+\treturn *this = std::move(__str);\n+      }\n+#endif // C++11\n+\n+      /**\n+       *  @brief  Set value to a substring of a string.\n+       *  @param __str  The string to use.\n+       *  @param __pos  Index of the first character of str.\n+       *  @param __n  Number of characters to use.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range if @a pos is not a valid index.\n+       *\n+       *  This function sets this string to the substring of @a __str\n+       *  consisting of @a __n characters at @a __pos.  If @a __n is\n+       *  is larger than the number of available characters in @a\n+       *  __str, the remainder of @a __str is used.\n+       */\n+      basic_string&\n+      assign(const basic_string& __str, size_type __pos, size_type __n)\n+      { return _M_replace(size_type(0), this->size(), __str._M_data()\n+\t\t\t  + __str._M_check(__pos, \"basic_string::assign\"),\n+\t\t\t  __str._M_limit(__pos, __n)); }\n+\n+      /**\n+       *  @brief  Set value to a C substring.\n+       *  @param __s  The C string to use.\n+       *  @param __n  Number of characters to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets the value of this string to the first @a __n\n+       *  characters of @a __s.  If @a __n is is larger than the number of\n+       *  available characters in @a __s, the remainder of @a __s is used.\n+       */\n+      basic_string&\n+      assign(const _CharT* __s, size_type __n)\n+      {\n+\t__glibcxx_requires_string_len(__s, __n);\n+\treturn _M_replace(size_type(0), this->size(), __s, __n);\n+      }\n+\n+      /**\n+       *  @brief  Set value to contents of a C string.\n+       *  @param __s  The C string to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets the value of this string to the value of @a __s.\n+       *  The data is copied, so there is no dependence on @a __s once the\n+       *  function returns.\n+       */\n+      basic_string&\n+      assign(const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn _M_replace(size_type(0), this->size(), __s,\n+\t\t\t  traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Set value to multiple characters.\n+       *  @param __n  Length of the resulting string.\n+       *  @param __c  The character to use.\n+       *  @return  Reference to this string.\n+       *\n+       *  This function sets the value of this string to @a __n copies of\n+       *  character @a __c.\n+       */\n+      basic_string&\n+      assign(size_type __n, _CharT __c)\n+      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }\n+\n+      /**\n+       *  @brief  Set value to a range of characters.\n+       *  @param __first  Iterator referencing the first character to append.\n+       *  @param __last  Iterator marking the end of the range.\n+       *  @return  Reference to this string.\n+       *\n+       *  Sets value of string to characters in the range [__first,__last).\n+      */\n+#if __cplusplus >= 201103L\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+#else\n+      template<class _InputIterator>\n+#endif\n+        basic_string&\n+        assign(_InputIterator __first, _InputIterator __last)\n+        { return this->replace(begin(), end(), __first, __last); }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Set value to an initializer_list of characters.\n+       *  @param __l  The initializer_list of characters to assign.\n+       *  @return  Reference to this string.\n+       */\n+      basic_string&\n+      assign(initializer_list<_CharT> __l)\n+      { return this->assign(__l.begin(), __l.size()); }\n+#endif // C++11\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert multiple characters.\n+       *  @param __p  Const_iterator referencing location in string to\n+       *              insert at.\n+       *  @param __n  Number of characters to insert\n+       *  @param __c  The character to insert.\n+       *  @return  Iterator referencing the first inserted char.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts @a __n copies of character @a __c starting at the\n+       *  position referenced by iterator @a __p.  If adding\n+       *  characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      iterator\n+      insert(const_iterator __p, size_type __n, _CharT __c)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());\n+\tconst size_type __pos = __p - begin();\n+\tthis->replace(__p, __p, __n, __c);\n+\treturn iterator(this->_M_data() + __pos);\n+      }\n+#else\n+      /**\n+       *  @brief  Insert multiple characters.\n+       *  @param __p  Iterator referencing location in string to insert at.\n+       *  @param __n  Number of characters to insert\n+       *  @param __c  The character to insert.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts @a __n copies of character @a __c starting at the\n+       *  position referenced by iterator @a __p.  If adding\n+       *  characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      void\n+      insert(iterator __p, size_type __n, _CharT __c)\n+      {\tthis->replace(__p, __p, __n, __c);  }\n+#endif\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert a range of characters.\n+       *  @param __p  Const_iterator referencing location in string to\n+       *              insert at.\n+       *  @param __beg  Start of range.\n+       *  @param __end  End of range.\n+       *  @return  Iterator referencing the first inserted char.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts characters in range [beg,end).  If adding characters\n+       *  causes the length to exceed max_size(), length_error is\n+       *  thrown.  The value of the string doesn't change if an error\n+       *  is thrown.\n+      */\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+\titerator\n+        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)\n+        {\n+\t  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());\n+\t  const size_type __pos = __p - begin();\n+\t  this->replace(__p, __p, __beg, __end);\n+\t  return iterator(this->_M_data() + __pos);\n+\t}\n+#else\n+      /**\n+       *  @brief  Insert a range of characters.\n+       *  @param __p  Iterator referencing location in string to insert at.\n+       *  @param __beg  Start of range.\n+       *  @param __end  End of range.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts characters in range [__beg,__end).  If adding\n+       *  characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      template<class _InputIterator>\n+        void\n+        insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n+        { this->replace(__p, __p, __beg, __end); }\n+#endif\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Insert an initializer_list of characters.\n+       *  @param __p  Iterator referencing location in string to insert at.\n+       *  @param __l  The initializer_list of characters to insert.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       */\n+      void\n+      insert(iterator __p, initializer_list<_CharT> __l)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());\n+\tthis->insert(__p - begin(), __l.begin(), __l.size());\n+      }\n+#endif // C++11\n+\n+      /**\n+       *  @brief  Insert value of a string.\n+       *  @param __pos1  Iterator referencing location in string to insert at.\n+       *  @param __str  The string to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts value of @a __str starting at @a __pos1.  If adding\n+       *  characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      basic_string&\n+      insert(size_type __pos1, const basic_string& __str)\n+      { return this->replace(__pos1, size_type(0),\n+\t\t\t     __str._M_data(), __str.size()); }\n+\n+      /**\n+       *  @brief  Insert a substring.\n+       *  @param __pos1  Iterator referencing location in string to insert at.\n+       *  @param __str  The string to insert.\n+       *  @param __pos2  Start of characters in str to insert.\n+       *  @param __n  Number of characters to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a pos1 > size() or\n+       *  @a __pos2 > @a str.size().\n+       *\n+       *  Starting at @a pos1, insert @a __n character of @a __str\n+       *  beginning with @a __pos2.  If adding characters causes the\n+       *  length to exceed max_size(), length_error is thrown.  If @a\n+       *  __pos1 is beyond the end of this string or @a __pos2 is\n+       *  beyond the end of @a __str, out_of_range is thrown.  The\n+       *  value of the string doesn't change if an error is thrown.\n+      */\n+      basic_string&\n+      insert(size_type __pos1, const basic_string& __str,\n+\t     size_type __pos2, size_type __n)\n+      { return this->replace(__pos1, size_type(0), __str._M_data()\n+\t\t\t     + __str._M_check(__pos2, \"basic_string::insert\"),\n+\t\t\t     __str._M_limit(__pos2, __n)); }\n+\n+      /**\n+       *  @brief  Insert a C substring.\n+       *  @param __pos  Iterator referencing location in string to insert at.\n+       *  @param __s  The C string to insert.\n+       *  @param __n  The number of characters to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a __pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Inserts the first @a __n characters of @a __s starting at @a\n+       *  __pos.  If adding characters causes the length to exceed\n+       *  max_size(), length_error is thrown.  If @a __pos is beyond\n+       *  end(), out_of_range is thrown.  The value of the string\n+       *  doesn't change if an error is thrown.\n+      */\n+      basic_string&\n+      insert(size_type __pos, const _CharT* __s, size_type __n)\n+      { return this->replace(__pos, size_type(0), __s, __n); }\n+\n+      /**\n+       *  @brief  Insert a C string.\n+       *  @param __pos  Iterator referencing location in string to insert at.\n+       *  @param __s  The C string to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Inserts the first @a n characters of @a __s starting at @a __pos.  If\n+       *  adding characters causes the length to exceed max_size(),\n+       *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is\n+       *  thrown.  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+      basic_string&\n+      insert(size_type __pos, const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->replace(__pos, size_type(0), __s,\n+\t\t\t     traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Insert multiple characters.\n+       *  @param __pos  Index in string to insert at.\n+       *  @param __n  Number of characters to insert\n+       *  @param __c  The character to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *  @throw  std::out_of_range  If @a __pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Inserts @a __n copies of character @a __c starting at index\n+       *  @a __pos.  If adding characters causes the length to exceed\n+       *  max_size(), length_error is thrown.  If @a __pos > length(),\n+       *  out_of_range is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      basic_string&\n+      insert(size_type __pos, size_type __n, _CharT __c)\n+      { return _M_replace_aux(_M_check(__pos, \"basic_string::insert\"),\n+\t\t\t      size_type(0), __n, __c); }\n+\n+      /**\n+       *  @brief  Insert one character.\n+       *  @param __p  Iterator referencing position in string to insert at.\n+       *  @param __c  The character to insert.\n+       *  @return  Iterator referencing newly inserted char.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Inserts character @a __c at position referenced by @a __p.\n+       *  If adding character causes the length to exceed max_size(),\n+       *  length_error is thrown.  If @a __p is beyond end of string,\n+       *  out_of_range is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      iterator\n+      insert(__const_iterator __p, _CharT __c)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());\n+\tconst size_type __pos = __p - begin();\n+\t_M_replace_aux(__pos, size_type(0), size_type(1), __c);\n+\treturn iterator(_M_data() + __pos);\n+      }\n+\n+      /**\n+       *  @brief  Remove characters.\n+       *  @param __pos  Index of first character to remove (default 0).\n+       *  @param __n  Number of characters to remove (default remainder).\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *\n+       *  Removes @a __n characters from this string starting at @a\n+       *  __pos.  The length of the string is reduced by @a __n.  If\n+       *  there are < @a __n characters to remove, the remainder of\n+       *  the string is truncated.  If @a __p is beyond end of string,\n+       *  out_of_range is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      basic_string&\n+      erase(size_type __pos = 0, size_type __n = npos)\n+      {\n+\tthis->_M_erase(_M_check(__pos, \"basic_string::erase\"),\n+\t\t       _M_limit(__pos, __n));\n+\treturn *this;\n+      }\n+\n+      /**\n+       *  @brief  Remove one character.\n+       *  @param __position  Iterator referencing the character to remove.\n+       *  @return  iterator referencing same location after removal.\n+       *\n+       *  Removes the character at @a __position from this string. The value\n+       *  of the string doesn't change if an error is thrown.\n+      */\n+      iterator\n+      erase(__const_iterator __position)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()\n+\t\t\t\t && __position < end());\n+\tconst size_type __pos = __position - begin();\n+\tthis->_M_erase(__pos, size_type(1));\n+\treturn iterator(_M_data() + __pos);\n+      }\n+\n+      /**\n+       *  @brief  Remove a range of characters.\n+       *  @param __first  Iterator referencing the first character to remove.\n+       *  @param __last  Iterator referencing the end of the range.\n+       *  @return  Iterator referencing location of first after removal.\n+       *\n+       *  Removes the characters in the range [first,last) from this string.\n+       *  The value of the string doesn't change if an error is thrown.\n+      */\n+      iterator\n+      erase(__const_iterator __first, __const_iterator __last)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last\n+\t\t\t\t && __last <= end());\n+        const size_type __pos = __first - begin();\n+\tthis->_M_erase(__pos, __last - __first);\n+\treturn iterator(this->_M_data() + __pos);\n+      }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Remove the last character.\n+       *\n+       *  The string must be non-empty.\n+       */\n+      void\n+      pop_back() noexcept\n+      { _M_erase(size()-1, 1); }\n+#endif // C++11\n+\n+      /**\n+       *  @brief  Replace characters with value from another string.\n+       *  @param __pos  Index of first character to replace.\n+       *  @param __n  Number of characters to be replaced.\n+       *  @param __str  String to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos is beyond the end of this\n+       *  string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__pos,__pos+__n) from\n+       *  this string.  In place, the value of @a __str is inserted.\n+       *  If @a __pos is beyond end of string, out_of_range is thrown.\n+       *  If the length of the result exceeds max_size(), length_error\n+       *  is thrown.  The value of the string doesn't change if an\n+       *  error is thrown.\n+      */\n+      basic_string&\n+      replace(size_type __pos, size_type __n, const basic_string& __str)\n+      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }\n+\n+      /**\n+       *  @brief  Replace characters with value from another string.\n+       *  @param __pos1  Index of first character to replace.\n+       *  @param __n1  Number of characters to be replaced.\n+       *  @param __str  String to insert.\n+       *  @param __pos2  Index of first character of str to use.\n+       *  @param __n2  Number of characters from str to use.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >\n+       *  __str.size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__pos1,__pos1 + n) from this\n+       *  string.  In place, the value of @a __str is inserted.  If @a __pos is\n+       *  beyond end of string, out_of_range is thrown.  If the length of the\n+       *  result exceeds max_size(), length_error is thrown.  The value of the\n+       *  string doesn't change if an error is thrown.\n+      */\n+      basic_string&\n+      replace(size_type __pos1, size_type __n1, const basic_string& __str,\n+\t      size_type __pos2, size_type __n2)\n+      { return this->replace(__pos1, __n1, __str._M_data()\n+\t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),\n+\t\t\t     __str._M_limit(__pos2, __n2)); }\n+\n+      /**\n+       *  @brief  Replace characters with value of a C substring.\n+       *  @param __pos  Index of first character to replace.\n+       *  @param __n1  Number of characters to be replaced.\n+       *  @param __s  C string to insert.\n+       *  @param __n2  Number of characters from @a s to use.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos1 > size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__pos,__pos + __n1)\n+       *  from this string.  In place, the first @a __n2 characters of\n+       *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If\n+       *  @a __pos is beyond end of string, out_of_range is thrown.  If\n+       *  the length of result exceeds max_size(), length_error is\n+       *  thrown.  The value of the string doesn't change if an error\n+       *  is thrown.\n+      */\n+      basic_string&\n+      replace(size_type __pos, size_type __n1, const _CharT* __s,\n+\t      size_type __n2)\n+      {\n+\t__glibcxx_requires_string_len(__s, __n2);\n+\treturn _M_replace(_M_check(__pos, \"basic_string::replace\"),\n+\t\t\t  _M_limit(__pos, __n1), __s, __n2);\n+      }\n+\n+      /**\n+       *  @brief  Replace characters with value of a C string.\n+       *  @param __pos  Index of first character to replace.\n+       *  @param __n1  Number of characters to be replaced.\n+       *  @param __s  C string to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a pos > size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__pos,__pos + __n1)\n+       *  from this string.  In place, the characters of @a __s are\n+       *  inserted.  If @a __pos is beyond end of string, out_of_range\n+       *  is thrown.  If the length of result exceeds max_size(),\n+       *  length_error is thrown.  The value of the string doesn't\n+       *  change if an error is thrown.\n+      */\n+      basic_string&\n+      replace(size_type __pos, size_type __n1, const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->replace(__pos, __n1, __s, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Replace characters with multiple characters.\n+       *  @param __pos  Index of first character to replace.\n+       *  @param __n1  Number of characters to be replaced.\n+       *  @param __n2  Number of characters to insert.\n+       *  @param __c  Character to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::out_of_range  If @a __pos > size().\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [pos,pos + n1) from this\n+       *  string.  In place, @a __n2 copies of @a __c are inserted.\n+       *  If @a __pos is beyond end of string, out_of_range is thrown.\n+       *  If the length of result exceeds max_size(), length_error is\n+       *  thrown.  The value of the string doesn't change if an error\n+       *  is thrown.\n+      */\n+      basic_string&\n+      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n+      { return _M_replace_aux(_M_check(__pos, \"basic_string::replace\"),\n+\t\t\t      _M_limit(__pos, __n1), __n2, __c); }\n+\n+      /**\n+       *  @brief  Replace range of characters with string.\n+       *  @param __i1  Iterator referencing start of range to replace.\n+       *  @param __i2  Iterator referencing end of range to replace.\n+       *  @param __str  String value to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__i1,__i2).  In place,\n+       *  the value of @a __str is inserted.  If the length of result\n+       *  exceeds max_size(), length_error is thrown.  The value of\n+       *  the string doesn't change if an error is thrown.\n+      */\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      const basic_string& __str)\n+      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }\n+\n+      /**\n+       *  @brief  Replace range of characters with C substring.\n+       *  @param __i1  Iterator referencing start of range to replace.\n+       *  @param __i2  Iterator referencing end of range to replace.\n+       *  @param __s  C string value to insert.\n+       *  @param __n  Number of characters from s to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__i1,__i2).  In place,\n+       *  the first @a __n characters of @a __s are inserted.  If the\n+       *  length of result exceeds max_size(), length_error is thrown.\n+       *  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      const _CharT* __s, size_type __n)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= end());\n+\treturn this->replace(__i1 - begin(), __i2 - __i1, __s, __n);\n+      }\n+\n+      /**\n+       *  @brief  Replace range of characters with C string.\n+       *  @param __i1  Iterator referencing start of range to replace.\n+       *  @param __i2  Iterator referencing end of range to replace.\n+       *  @param __s  C string value to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__i1,__i2).  In place,\n+       *  the characters of @a __s are inserted.  If the length of\n+       *  result exceeds max_size(), length_error is thrown.  The\n+       *  value of the string doesn't change if an error is thrown.\n+      */\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->replace(__i1, __i2, __s, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Replace range of characters with multiple characters\n+       *  @param __i1  Iterator referencing start of range to replace.\n+       *  @param __i2  Iterator referencing end of range to replace.\n+       *  @param __n  Number of characters to insert.\n+       *  @param __c  Character to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__i1,__i2).  In place,\n+       *  @a __n copies of @a __c are inserted.  If the length of\n+       *  result exceeds max_size(), length_error is thrown.  The\n+       *  value of the string doesn't change if an error is thrown.\n+      */\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,\n+\t      _CharT __c)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= end());\n+\treturn _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);\n+      }\n+\n+      /**\n+       *  @brief  Replace range of characters with range.\n+       *  @param __i1  Iterator referencing start of range to replace.\n+       *  @param __i2  Iterator referencing end of range to replace.\n+       *  @param __k1  Iterator referencing start of range to insert.\n+       *  @param __k2  Iterator referencing end of range to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__i1,__i2).  In place,\n+       *  characters in the range [__k1,__k2) are inserted.  If the\n+       *  length of result exceeds max_size(), length_error is thrown.\n+       *  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+#if __cplusplus >= 201103L\n+      template<class _InputIterator,\n+\t       typename = std::_RequireInputIter<_InputIterator>>\n+        basic_string&\n+        replace(const_iterator __i1, const_iterator __i2,\n+\t\t_InputIterator __k1, _InputIterator __k2)\n+        {\n+\t  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t   && __i2 <= end());\n+\t  __glibcxx_requires_valid_range(__k1, __k2);\n+\t  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,\n+\t\t\t\t\t   std::__false_type());\n+\t}\n+#else\n+      template<class _InputIterator>\n+#ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST\n+        typename __enable_if_not_native_iterator<_InputIterator>::__type\n+#else\n+        basic_string&\n+#endif\n+        replace(iterator __i1, iterator __i2,\n+\t\t_InputIterator __k1, _InputIterator __k2)\n+        {\n+\t  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t   && __i2 <= end());\n+\t  __glibcxx_requires_valid_range(__k1, __k2);\n+\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+\t  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());\n+\t}\n+#endif\n+\n+      // Specializations for the common case of pointer and iterator:\n+      // useful to avoid the overhead of temporary buffering in _M_replace.\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      _CharT* __k1, _CharT* __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= end());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - begin(), __i2 - __i1,\n+\t\t\t     __k1, __k2 - __k1);\n+      }\n+\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      const _CharT* __k1, const _CharT* __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= end());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - begin(), __i2 - __i1,\n+\t\t\t     __k1, __k2 - __k1);\n+      }\n+\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      iterator __k1, iterator __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= end());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - begin(), __i2 - __i1,\n+\t\t\t     __k1.base(), __k2 - __k1);\n+      }\n+\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      const_iterator __k1, const_iterator __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= end());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - begin(), __i2 - __i1,\n+\t\t\t     __k1.base(), __k2 - __k1);\n+      }\n+\n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Replace range of characters with initializer_list.\n+       *  @param __i1  Iterator referencing start of range to replace.\n+       *  @param __i2  Iterator referencing end of range to replace.\n+       *  @param __l  The initializer_list of characters to insert.\n+       *  @return  Reference to this string.\n+       *  @throw  std::length_error  If new length exceeds @c max_size().\n+       *\n+       *  Removes the characters in the range [__i1,__i2).  In place,\n+       *  characters in the range [__k1,__k2) are inserted.  If the\n+       *  length of result exceeds max_size(), length_error is thrown.\n+       *  The value of the string doesn't change if an error is\n+       *  thrown.\n+      */\n+      basic_string& replace(const_iterator __i1, const_iterator __i2,\n+\t\t\t    initializer_list<_CharT> __l)\n+      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n+#endif // C++11\n+\n+    private:\n+      template<class _Integer>\n+\tbasic_string&\n+\t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n+\t\t\t    _Integer __n, _Integer __val, __true_type)\n+        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }\n+\n+      template<class _InputIterator>\n+\tbasic_string&\n+\t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n+\t\t\t    _InputIterator __k1, _InputIterator __k2,\n+\t\t\t    __false_type);\n+\n+      basic_string&\n+      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n+\t\t     _CharT __c);\n+\n+      basic_string&\n+      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\n+\t\t const size_type __len2);\n+\n+      basic_string&\n+      _M_append(const _CharT* __s, size_type __n);\n+\n+    public:\n+\n+      /**\n+       *  @brief  Copy substring into C string.\n+       *  @param __s  C string to copy value into.\n+       *  @param __n  Number of characters to copy.\n+       *  @param __pos  Index of first character to copy.\n+       *  @return  Number of characters actually copied\n+       *  @throw  std::out_of_range  If __pos > size().\n+       *\n+       *  Copies up to @a __n characters starting at @a __pos into the\n+       *  C string @a __s.  If @a __pos is %greater than size(),\n+       *  out_of_range is thrown.\n+      */\n+      size_type\n+      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;\n+\n+      /**\n+       *  @brief  Swap contents with another string.\n+       *  @param __s  String to swap with.\n+       *\n+       *  Exchanges the contents of this string with that of @a __s in constant\n+       *  time.\n+      */\n+      void\n+      swap(basic_string& __s) _GLIBCXX_NOEXCEPT;\n+\n+      // String operations:\n+      /**\n+       *  @brief  Return const pointer to null-terminated contents.\n+       *\n+       *  This is a handle to internal data.  Do not modify or dire things may\n+       *  happen.\n+      */\n+      const _CharT*\n+      c_str() const _GLIBCXX_NOEXCEPT\n+      { return _M_data(); }\n+\n+      /**\n+       *  @brief  Return const pointer to contents.\n+       *\n+       *  This is a handle to internal data.  Do not modify or dire things may\n+       *  happen.\n+      */\n+      const _CharT*\n+      data() const _GLIBCXX_NOEXCEPT\n+      { return _M_data(); }\n+\n+      /**\n+       *  @brief  Return copy of allocator used to construct this string.\n+      */\n+      allocator_type\n+      get_allocator() const _GLIBCXX_NOEXCEPT\n+      { return _M_get_allocator(); }\n+\n+      /**\n+       *  @brief  Find position of a C substring.\n+       *  @param __s  C string to locate.\n+       *  @param __pos  Index of character to search from.\n+       *  @param __n  Number of characters from @a s to search for.\n+       *  @return  Index of start of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for the first @a\n+       *  __n characters in @a __s within this string.  If found,\n+       *  returns the index where it begins.  If not found, returns\n+       *  npos.\n+      */\n+      size_type\n+      find(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find position of a string.\n+       *  @param __str  String to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of start of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for value of @a __str within\n+       *  this string.  If found, returns the index where it begins.  If not\n+       *  found, returns npos.\n+      */\n+      size_type\n+      find(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return this->find(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find position of a C string.\n+       *  @param __s  C string to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of start of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for the value of @a\n+       *  __s within this string.  If found, returns the index where\n+       *  it begins.  If not found, returns npos.\n+      */\n+      size_type\n+      find(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find position of a character.\n+       *  @param __c  Character to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for @a __c within\n+       *  this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;\n+\n+      /**\n+       *  @brief  Find last position of a string.\n+       *  @param __str  String to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of start of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for value of @a\n+       *  __str within this string.  If found, returns the index where\n+       *  it begins.  If not found, returns npos.\n+      */\n+      size_type\n+      rfind(const basic_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return this->rfind(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find last position of a C substring.\n+       *  @param __s  C string to locate.\n+       *  @param __pos  Index of character to search back from.\n+       *  @param __n  Number of characters from s to search for.\n+       *  @return  Index of start of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for the first @a\n+       *  __n characters in @a __s within this string.  If found,\n+       *  returns the index where it begins.  If not found, returns\n+       *  npos.\n+      */\n+      size_type\n+      rfind(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find last position of a C string.\n+       *  @param __s  C string to locate.\n+       *  @param __pos  Index of character to start search at (default end).\n+       *  @return  Index of start of  last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for the value of\n+       *  @a __s within this string.  If found, returns the index\n+       *  where it begins.  If not found, returns npos.\n+      */\n+      size_type\n+      rfind(const _CharT* __s, size_type __pos = npos) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->rfind(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find last position of a character.\n+       *  @param __c  Character to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for @a __c within\n+       *  this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;\n+\n+      /**\n+       *  @brief  Find position of a character of string.\n+       *  @param __str  String containing characters to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for one of the\n+       *  characters of @a __str within this string.  If found,\n+       *  returns the index where it was found.  If not found, returns\n+       *  npos.\n+      */\n+      size_type\n+      find_first_of(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return this->find_first_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find position of a character of C substring.\n+       *  @param __s  String containing characters to locate.\n+       *  @param __pos  Index of character to search from.\n+       *  @param __n  Number of characters from s to search for.\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for one of the\n+       *  first @a __n characters of @a __s within this string.  If\n+       *  found, returns the index where it was found.  If not found,\n+       *  returns npos.\n+      */\n+      size_type\n+      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find position of a character of C string.\n+       *  @param __s  String containing characters to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for one of the\n+       *  characters of @a __s within this string.  If found, returns\n+       *  the index where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_of(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_first_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find position of a character.\n+       *  @param __c  Character to locate.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for the character\n+       *  @a __c within this string.  If found, returns the index\n+       *  where it was found.  If not found, returns npos.\n+       *\n+       *  Note: equivalent to find(__c, __pos).\n+      */\n+      size_type\n+      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n+      { return this->find(__c, __pos); }\n+\n+      /**\n+       *  @brief  Find last position of a character of string.\n+       *  @param __str  String containing characters to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for one of the\n+       *  characters of @a __str within this string.  If found,\n+       *  returns the index where it was found.  If not found, returns\n+       *  npos.\n+      */\n+      size_type\n+      find_last_of(const basic_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return this->find_last_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find last position of a character of C substring.\n+       *  @param __s  C string containing characters to locate.\n+       *  @param __pos  Index of character to search back from.\n+       *  @param __n  Number of characters from s to search for.\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for one of the\n+       *  first @a __n characters of @a __s within this string.  If\n+       *  found, returns the index where it was found.  If not found,\n+       *  returns npos.\n+      */\n+      size_type\n+      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;\n+\n+      /**\n+       *  @brief  Find last position of a character of C string.\n+       *  @param __s  C string containing characters to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for one of the\n+       *  characters of @a __s within this string.  If found, returns\n+       *  the index where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_of(const _CharT* __s, size_type __pos = npos) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_last_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find last position of a character.\n+       *  @param __c  Character to locate.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for @a __c within\n+       *  this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+       *\n+       *  Note: equivalent to rfind(__c, __pos).\n+      */\n+      size_type\n+      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n+      { return this->rfind(__c, __pos); }\n+\n+      /**\n+       *  @brief  Find position of a character not in string.\n+       *  @param __str  String containing characters to avoid.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for a character not contained\n+       *  in @a __str within this string.  If found, returns the index where it\n+       *  was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find position of a character not in C substring.\n+       *  @param __s  C string containing characters to avoid.\n+       *  @param __pos  Index of character to search from.\n+       *  @param __n  Number of characters from __s to consider.\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for a character not\n+       *  contained in the first @a __n characters of @a __s within\n+       *  this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(const _CharT* __s, size_type __pos,\n+\t\t\tsize_type __n) const;\n+\n+      /**\n+       *  @brief  Find position of a character not in C string.\n+       *  @param __s  C string containing characters to avoid.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for a character not\n+       *  contained in @a __s within this string.  If found, returns\n+       *  the index where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_first_not_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find position of a different character.\n+       *  @param __c  Character to avoid.\n+       *  @param __pos  Index of character to search from (default 0).\n+       *  @return  Index of first occurrence.\n+       *\n+       *  Starting from @a __pos, searches forward for a character\n+       *  other than @a __c within this string.  If found, returns the\n+       *  index where it was found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_first_not_of(_CharT __c, size_type __pos = 0) const\n+\t_GLIBCXX_NOEXCEPT;\n+\n+      /**\n+       *  @brief  Find last position of a character not in string.\n+       *  @param __str  String containing characters to avoid.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for a character\n+       *  not contained in @a __str within this string.  If found,\n+       *  returns the index where it was found.  If not found, returns\n+       *  npos.\n+      */\n+      size_type\n+      find_last_not_of(const basic_string& __str, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT\n+      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }\n+\n+      /**\n+       *  @brief  Find last position of a character not in C substring.\n+       *  @param __s  C string containing characters to avoid.\n+       *  @param __pos  Index of character to search back from.\n+       *  @param __n  Number of characters from s to consider.\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for a character not\n+       *  contained in the first @a __n characters of @a __s within this string.\n+       *  If found, returns the index where it was found.  If not found,\n+       *  returns npos.\n+      */\n+      size_type\n+      find_last_not_of(const _CharT* __s, size_type __pos,\n+\t\t       size_type __n) const;\n+      /**\n+       *  @brief  Find last position of a character not in C string.\n+       *  @param __s  C string containing characters to avoid.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for a character\n+       *  not contained in @a __s within this string.  If found,\n+       *  returns the index where it was found.  If not found, returns\n+       *  npos.\n+      */\n+      size_type\n+      find_last_not_of(const _CharT* __s, size_type __pos = npos) const\n+      {\n+\t__glibcxx_requires_string(__s);\n+\treturn this->find_last_not_of(__s, __pos, traits_type::length(__s));\n+      }\n+\n+      /**\n+       *  @brief  Find last position of a different character.\n+       *  @param __c  Character to avoid.\n+       *  @param __pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n+       *\n+       *  Starting from @a __pos, searches backward for a character other than\n+       *  @a __c within this string.  If found, returns the index where it was\n+       *  found.  If not found, returns npos.\n+      */\n+      size_type\n+      find_last_not_of(_CharT __c, size_type __pos = npos) const\n+\t_GLIBCXX_NOEXCEPT;\n+\n+      /**\n+       *  @brief  Get a substring.\n+       *  @param __pos  Index of first character (default 0).\n+       *  @param __n  Number of characters in substring (default remainder).\n+       *  @return  The new string.\n+       *  @throw  std::out_of_range  If __pos > size().\n+       *\n+       *  Construct and return a new string using the @a __n\n+       *  characters starting at @a __pos.  If the string is too\n+       *  short, use the remainder of the characters.  If @a __pos is\n+       *  beyond the end of the string, out_of_range is thrown.\n+      */\n+      basic_string\n+      substr(size_type __pos = 0, size_type __n = npos) const\n+      { return basic_string(*this,\n+\t\t\t    _M_check(__pos, \"basic_string::substr\"), __n); }\n+\n+      /**\n+       *  @brief  Compare to a string.\n+       *  @param __str  String to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Returns an integer < 0 if this string is ordered before @a\n+       *  __str, 0 if their values are equivalent, or > 0 if this\n+       *  string is ordered after @a __str.  Determines the effective\n+       *  length rlen of the strings to compare as the smallest of\n+       *  size() and str.size().  The function then compares the two\n+       *  strings by calling traits::compare(data(), str.data(),rlen).\n+       *  If the result of the comparison is nonzero returns it,\n+       *  otherwise the shorter one is ordered first.\n+      */\n+      int\n+      compare(const basic_string& __str) const\n+      {\n+\tconst size_type __size = this->size();\n+\tconst size_type __osize = __str.size();\n+\tconst size_type __len = std::min(__size, __osize);\n+\n+\tint __r = traits_type::compare(_M_data(), __str.data(), __len);\n+\tif (!__r)\n+\t  __r = _S_compare(__size, __osize);\n+\treturn __r;\n+      }\n+\n+      /**\n+       *  @brief  Compare substring to a string.\n+       *  @param __pos  Index of first character of substring.\n+       *  @param __n  Number of characters in substring.\n+       *  @param __str  String to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a __n characters\n+       *  starting at @a __pos.  Returns an integer < 0 if the\n+       *  substring is ordered before @a __str, 0 if their values are\n+       *  equivalent, or > 0 if the substring is ordered after @a\n+       *  __str.  Determines the effective length rlen of the strings\n+       *  to compare as the smallest of the length of the substring\n+       *  and @a __str.size().  The function then compares the two\n+       *  strings by calling\n+       *  traits::compare(substring.data(),str.data(),rlen).  If the\n+       *  result of the comparison is nonzero returns it, otherwise\n+       *  the shorter one is ordered first.\n+      */\n+      int\n+      compare(size_type __pos, size_type __n, const basic_string& __str) const;\n+\n+      /**\n+       *  @brief  Compare substring to a substring.\n+       *  @param __pos1  Index of first character of substring.\n+       *  @param __n1  Number of characters in substring.\n+       *  @param __str  String to compare against.\n+       *  @param __pos2  Index of first character of substring of str.\n+       *  @param __n2  Number of characters in substring of str.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a __n1\n+       *  characters starting at @a __pos1.  Form the substring of @a\n+       *  __str from the @a __n2 characters starting at @a __pos2.\n+       *  Returns an integer < 0 if this substring is ordered before\n+       *  the substring of @a __str, 0 if their values are equivalent,\n+       *  or > 0 if this substring is ordered after the substring of\n+       *  @a __str.  Determines the effective length rlen of the\n+       *  strings to compare as the smallest of the lengths of the\n+       *  substrings.  The function then compares the two strings by\n+       *  calling\n+       *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).\n+       *  If the result of the comparison is nonzero returns it,\n+       *  otherwise the shorter one is ordered first.\n+      */\n+      int\n+      compare(size_type __pos1, size_type __n1, const basic_string& __str,\n+\t      size_type __pos2, size_type __n2) const;\n+\n+      /**\n+       *  @brief  Compare to a C string.\n+       *  @param __s  C string to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Returns an integer < 0 if this string is ordered before @a __s, 0 if\n+       *  their values are equivalent, or > 0 if this string is ordered after\n+       *  @a __s.  Determines the effective length rlen of the strings to\n+       *  compare as the smallest of size() and the length of a string\n+       *  constructed from @a __s.  The function then compares the two strings\n+       *  by calling traits::compare(data(),s,rlen).  If the result of the\n+       *  comparison is nonzero returns it, otherwise the shorter one is\n+       *  ordered first.\n+      */\n+      int\n+      compare(const _CharT* __s) const;\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 5 String::compare specification questionable\n+      /**\n+       *  @brief  Compare substring to a C string.\n+       *  @param __pos  Index of first character of substring.\n+       *  @param __n1  Number of characters in substring.\n+       *  @param __s  C string to compare against.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a __n1\n+       *  characters starting at @a pos.  Returns an integer < 0 if\n+       *  the substring is ordered before @a __s, 0 if their values\n+       *  are equivalent, or > 0 if the substring is ordered after @a\n+       *  __s.  Determines the effective length rlen of the strings to\n+       *  compare as the smallest of the length of the substring and\n+       *  the length of a string constructed from @a __s.  The\n+       *  function then compares the two string by calling\n+       *  traits::compare(substring.data(),__s,rlen).  If the result of\n+       *  the comparison is nonzero returns it, otherwise the shorter\n+       *  one is ordered first.\n+      */\n+      int\n+      compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n+\n+      /**\n+       *  @brief  Compare substring against a character %array.\n+       *  @param __pos  Index of first character of substring.\n+       *  @param __n1  Number of characters in substring.\n+       *  @param __s  character %array to compare against.\n+       *  @param __n2  Number of characters of s.\n+       *  @return  Integer < 0, 0, or > 0.\n+       *\n+       *  Form the substring of this string from the @a __n1\n+       *  characters starting at @a __pos.  Form a string from the\n+       *  first @a __n2 characters of @a __s.  Returns an integer < 0\n+       *  if this substring is ordered before the string from @a __s,\n+       *  0 if their values are equivalent, or > 0 if this substring\n+       *  is ordered after the string from @a __s.  Determines the\n+       *  effective length rlen of the strings to compare as the\n+       *  smallest of the length of the substring and @a __n2.  The\n+       *  function then compares the two strings by calling\n+       *  traits::compare(substring.data(),s,rlen).  If the result of\n+       *  the comparison is nonzero returns it, otherwise the shorter\n+       *  one is ordered first.\n+       *\n+       *  NB: s must have at least n2 characters, &apos;\\\\0&apos; has\n+       *  no special meaning.\n+      */\n+      int\n+      compare(size_type __pos, size_type __n1, const _CharT* __s,\n+\t      size_type __n2) const;\n+  };\n+_GLIBCXX_END_NAMESPACE_CXX11\n+#else  // !_GLIBCXX_USE_CXX11_ABI\n+  // Reference-counted COW string implentation\n+\n   /**\n    *  @class basic_string basic_string.h <string>\n    *  @brief  Managing sequences of characters and character-like objects.\n@@ -2371,6 +4765,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2) const;\n   };\n+#endif  // !_GLIBCXX_USE_CXX11_ABI\n \n   // operator+\n   /**\n@@ -2419,7 +4814,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n-\t     const _CharT* __rhs)\n+\t      const _CharT* __rhs)\n     {\n       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);\n       __str.append(__rhs);\n@@ -2737,6 +5132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n \n+\n   /**\n    *  @brief  Read stream into a string.\n    *  @param __is  Input stream.\n@@ -2852,6 +5248,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // 21.4 Numeric Conversions [string.conversions].\n   inline int\n@@ -3058,6 +5455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n #endif\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n@@ -3147,21 +5545,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline namespace string_literals\n   {\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char>\n     operator\"\"s(const char* __str, size_t __len)\n     { return basic_string<char>{__str, __len}; }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n+    _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<wchar_t>\n     operator\"\"s(const wchar_t* __str, size_t __len)\n     { return basic_string<wchar_t>{__str, __len}; }\n #endif\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+    _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char16_t>\n     operator\"\"s(const char16_t* __str, size_t __len)\n     { return basic_string<char16_t>{__str, __len}; }\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char32_t>\n     operator\"\"s(const char32_t* __str, size_t __len)\n     { return basic_string<char32_t>{__str, __len}; }"}, {"sha": "30b3f4bd96ea9bbb61b05883dffd0ffca581dcbd", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 459, "deletions": 14, "changes": 473, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -33,6 +33,8 @@\n \n // Written by Jason Merrill based upon the specification by Takanori Adachi\n // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.\n+// Non-reference-counted implementation written by Paolo Carlini and\n+// updated by Jonathan Wakely for ISO-14882-2011.\n \n #ifndef _BASIC_STRING_TCC\n #define _BASIC_STRING_TCC 1\n@@ -45,6 +47,448 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    const typename basic_string<_CharT, _Traits, _Alloc>::size_type\n+    basic_string<_CharT, _Traits, _Alloc>::npos;\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    swap(basic_string& __s) _GLIBCXX_NOEXCEPT\n+    {\n+      if (this == &__s)\n+\treturn;\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 431. Swapping containers with unequal allocators.\n+      // TODO propagation traits\n+      std::__alloc_swap<allocator_type>::_S_do_it(_M_get_allocator(),\n+\t\t\t\t\t\t  __s._M_get_allocator());\n+\n+      if (_M_is_local())\n+\tif (__s._M_is_local())\n+\t  {\n+\t    if (length() && __s.length())\n+\t      {\n+\t\t_CharT __tmp_data[_S_local_capacity + 1];\n+\t\ttraits_type::copy(__tmp_data, __s._M_local_buf,\n+\t\t\t\t  _S_local_capacity + 1);\n+\t\ttraits_type::copy(__s._M_local_buf, _M_local_buf,\n+\t\t\t\t  _S_local_capacity + 1);\n+\t\ttraits_type::copy(_M_local_buf, __tmp_data,\n+\t\t\t\t  _S_local_capacity + 1);\n+\t      }\n+\t    else if (__s.length())\n+\t      {\n+\t\ttraits_type::copy(_M_local_buf, __s._M_local_buf,\n+\t\t\t\t  _S_local_capacity + 1);\n+\t\t_M_length(__s.length());\n+\t\t__s._M_set_length(0);\n+\t\treturn;\n+\t      }\n+\t    else if (length())\n+\t      {\n+\t\ttraits_type::copy(__s._M_local_buf, _M_local_buf,\n+\t\t\t\t  _S_local_capacity + 1);\n+\t\t__s._M_length(length());\n+\t\t_M_set_length(0);\n+\t\treturn;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    const size_type __tmp_capacity = __s._M_allocated_capacity;\n+\t    traits_type::copy(__s._M_local_buf, _M_local_buf,\n+\t\t\t      _S_local_capacity + 1);\n+\t    _M_data(__s._M_data());\n+\t    __s._M_data(__s._M_local_buf);\n+\t    _M_capacity(__tmp_capacity);\n+\t  }\n+      else\n+\t{\n+\t  const size_type __tmp_capacity = _M_allocated_capacity;\n+\t  if (__s._M_is_local())\n+\t    {\n+\t      traits_type::copy(_M_local_buf, __s._M_local_buf,\n+\t\t\t\t_S_local_capacity + 1);\n+\t      __s._M_data(_M_data());\n+\t      _M_data(_M_local_buf);\n+\t    }\n+\t  else\n+\t    {\n+\t      pointer __tmp_ptr = _M_data();\n+\t      _M_data(__s._M_data());\n+\t      __s._M_data(__tmp_ptr);\n+\t      _M_capacity(__s._M_allocated_capacity);\n+\t    }\n+\t  __s._M_capacity(__tmp_capacity);\n+\t}\n+\n+      const size_type __tmp_length = length();\n+      _M_length(__s.length());\n+      __s._M_length(__tmp_length);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    typename basic_string<_CharT, _Traits, _Alloc>::pointer\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_create(size_type& __capacity, size_type __old_capacity)\n+    {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 83.  String::npos vs. string::max_size()\n+      if (__capacity > max_size())\n+\tstd::__throw_length_error(__N(\"basic_string::_M_create\"));\n+\n+      // The below implements an exponential growth policy, necessary to\n+      // meet amortized linear time requirements of the library: see\n+      // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.\n+      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)\n+\t{\n+\t  __capacity = 2 * __old_capacity;\n+\t  // Never allocate a string bigger than max_size.\n+\t  if (__capacity > max_size())\n+\t    __capacity = max_size();\n+\t}\n+\n+      // NB: Need an array of char_type[__capacity], plus a terminating\n+      // null char_type() element.\n+      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);\n+    }\n+\n+  // NB: This is the special case for Input Iterators, used in\n+  // istreambuf_iterators, etc.\n+  // Input Iterators have a cost structure very different from\n+  // pointers, calling for a different coding style.\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template<typename _InIterator>\n+      void\n+      basic_string<_CharT, _Traits, _Alloc>::\n+      _M_construct(_InIterator __beg, _InIterator __end,\n+\t\t   std::input_iterator_tag)\n+      {\n+\tsize_type __len = 0;\n+\tsize_type __capacity = size_type(_S_local_capacity);\n+\n+\twhile (__beg != __end && __len < __capacity)\n+\t  {\n+\t    _M_data()[__len++] = *__beg;\n+\t    ++__beg;\n+\t  }\n+\n+\t__try\n+\t  {\n+\t    while (__beg != __end)\n+\t      {\n+\t\tif (__len == __capacity)\n+\t\t  {\n+\t\t    // Allocate more space.\n+\t\t    __capacity = __len + 1;\n+\t\t    pointer __another = _M_create(__capacity, __len);\n+\t\t    this->_S_copy(__another, _M_data(), __len);\n+\t\t    _M_dispose();\n+\t\t    _M_data(__another);\n+\t\t    _M_capacity(__capacity);\n+\t\t  }\n+\t\t_M_data()[__len++] = *__beg;\n+\t\t++__beg;\n+\t      }\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    _M_dispose();\n+\t    __throw_exception_again;\n+\t  }\n+\n+\t_M_set_length(__len);\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template<typename _InIterator>\n+      void\n+      basic_string<_CharT, _Traits, _Alloc>::\n+      _M_construct(_InIterator __beg, _InIterator __end,\n+\t\t   std::forward_iterator_tag)\n+      {\n+\t// NB: Not required, but considered best practice.\n+\tif (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)\n+\t  std::__throw_logic_error(__N(\"basic_string::\"\n+\t\t\t\t       \"_M_construct null not valid\"));\n+\n+\tsize_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n+\n+\tif (__dnew > size_type(_S_local_capacity))\n+\t  {\n+\t    _M_data(_M_create(__dnew, size_type(0)));\n+\t    _M_capacity(__dnew);\n+\t  }\n+\n+\t// Check for out_of_range and length_error exceptions.\n+\t__try\n+\t  { this->_S_copy_chars(_M_data(), __beg, __end); }\n+\t__catch(...)\n+\t  {\n+\t    _M_dispose();\n+\t    __throw_exception_again;\n+\t  }\n+\n+\t_M_set_length(__dnew);\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_construct(size_type __n, _CharT __c)\n+    {\n+      if (__n > size_type(_S_local_capacity))\n+\t{\n+\t  _M_data(_M_create(__n, size_type(0)));\n+\t  _M_capacity(__n);\n+\t}\n+\n+      if (__n)\n+\tthis->_S_assign(_M_data(), __n, __c);\n+\n+      _M_set_length(__n);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_assign(const basic_string& __str)\n+    {\n+      if (this != &__str)\n+\t{\n+\t  const size_type __rsize = __str.length();\n+\t  const size_type __capacity = capacity();\n+\n+\t  if (__rsize > __capacity)\n+\t    {\n+\t      size_type __new_capacity = __rsize;\n+\t      pointer __tmp = _M_create(__new_capacity, __capacity);\n+\t      _M_dispose();\n+\t      _M_data(__tmp);\n+\t      _M_capacity(__new_capacity);\n+\t    }\n+\n+\t  if (__rsize)\n+\t    this->_S_copy(_M_data(), __str._M_data(), __rsize);\n+\n+\t  _M_set_length(__rsize);\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    reserve(size_type __res)\n+    {\n+      // Make sure we don't shrink below the current size.\n+      if (__res < length())\n+\t__res = length();\n+\n+      const size_type __capacity = capacity();\n+      if (__res != __capacity)\n+\t{\n+\t  if (__res > __capacity\n+\t      || __res > size_type(_S_local_capacity))\n+\t    {\n+\t      pointer __tmp = _M_create(__res, __capacity);\n+\t      this->_S_copy(__tmp, _M_data(), length() + 1);\n+\t      _M_dispose();\n+\t      _M_data(__tmp);\n+\t      _M_capacity(__res);\n+\t    }\n+\t  else if (!_M_is_local())\n+\t    {\n+\t      this->_S_copy(_M_local_data(), _M_data(), length() + 1);\n+\t      _M_destroy(__capacity);\n+\t      _M_data(_M_local_data());\n+\t    }\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n+\t      size_type __len2)\n+    {\n+      const size_type __how_much = length() - __pos - __len1;\n+\n+      size_type __new_capacity = length() + __len2 - __len1;\n+      pointer __r = _M_create(__new_capacity, capacity());\n+\n+      if (__pos)\n+\tthis->_S_copy(__r, _M_data(), __pos);\n+      if (__s && __len2)\n+\tthis->_S_copy(__r + __pos, __s, __len2);\n+      if (__how_much)\n+\tthis->_S_copy(__r + __pos + __len2,\n+\t\t      _M_data() + __pos + __len1, __how_much);\n+\n+      _M_dispose();\n+      _M_data(__r);\n+      _M_capacity(__new_capacity);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_erase(size_type __pos, size_type __n)\n+    {\n+      const size_type __how_much = length() - __pos - __n;\n+\n+      if (__how_much && __n)\n+\tthis->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);\n+\n+      _M_set_length(length() - __n);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    resize(size_type __n, _CharT __c)\n+    {\n+      const size_type __size = this->size();\n+      if (__size < __n)\n+\tthis->append(__n - __size, __c);\n+      else if (__n < __size)\n+\tthis->_M_erase(__n, __size - __n);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_append(const _CharT* __s, size_type __n)\n+    {\n+      const size_type __len = __n + this->size();\n+\n+      if (__len <= this->capacity())\n+\t{\n+\t  if (__n)\n+\t    this->_S_copy(this->_M_data() + this->size(), __s, __n);\n+\t}\n+      else\n+\tthis->_M_mutate(this->size(), size_type(0), __s, __n);\n+\n+      this->_M_set_length(__len);\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    template<typename _InputIterator>\n+      basic_string<_CharT, _Traits, _Alloc>&\n+      basic_string<_CharT, _Traits, _Alloc>::\n+      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n+\t\t\t  _InputIterator __k1, _InputIterator __k2,\n+\t\t\t  std::__false_type)\n+      {\n+\tconst basic_string __s(__k1, __k2);\n+\tconst size_type __n1 = __i2 - __i1;\n+\treturn _M_replace(__i1 - begin(), __n1, __s._M_data(),\n+\t\t\t  __s.size());\n+      }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n+\t\t   _CharT __c)\n+    {\n+      _M_check_length(__n1, __n2, \"basic_string::_M_replace_aux\");\n+\n+      const size_type __old_size = this->size();\n+      const size_type __new_size = __old_size + __n2 - __n1;\n+\n+      if (__new_size <= this->capacity())\n+\t{\n+\t  _CharT* __p = this->_M_data() + __pos1;\n+\n+\t  const size_type __how_much = __old_size - __pos1 - __n1;\n+\t  if (__how_much && __n1 != __n2)\n+\t    this->_S_move(__p + __n2, __p + __n1, __how_much);\n+\t}\n+      else\n+\tthis->_M_mutate(__pos1, __n1, 0, __n2);\n+\n+      if (__n2)\n+\tthis->_S_assign(this->_M_data() + __pos1, __n2, __c);\n+\n+      this->_M_set_length(__new_size);\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>&\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\n+\t       const size_type __len2)\n+    {\n+      _M_check_length(__len1, __len2, \"basic_string::_M_replace\");\n+\n+      const size_type __old_size = this->size();\n+      const size_type __new_size = __old_size + __len2 - __len1;\n+\n+      if (__new_size <= this->capacity())\n+\t{\n+\t  _CharT* __p = this->_M_data() + __pos;\n+\n+\t  const size_type __how_much = __old_size - __pos - __len1;\n+\t  if (_M_disjunct(__s))\n+\t    {\n+\t      if (__how_much && __len1 != __len2)\n+\t\tthis->_S_move(__p + __len2, __p + __len1, __how_much);\n+\t      if (__len2)\n+\t\tthis->_S_copy(__p, __s, __len2);\n+\t    }\n+\t  else\n+\t    {\n+\t      // Work in-place.\n+\t      if (__len2 && __len2 <= __len1)\n+\t\tthis->_S_move(__p, __s, __len2);\n+\t      if (__how_much && __len1 != __len2)\n+\t\tthis->_S_move(__p + __len2, __p + __len1, __how_much);\n+\t      if (__len2 > __len1)\n+\t\t{\n+\t\t  if (__s + __len2 <= __p + __len1)\n+\t\t    this->_S_move(__p, __s, __len2);\n+\t\t  else if (__s >= __p + __len1)\n+\t\t    this->_S_copy(__p, __s + __len2 - __len1, __len2);\n+\t\t  else\n+\t\t    {\n+\t\t      const size_type __nleft = (__p + __len1) - __s;\n+\t\t      this->_S_move(__p, __s, __nleft);\n+\t\t      this->_S_copy(__p + __nleft, __p + __len2,\n+\t\t\t\t    __len2 - __nleft);\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+      else\n+\tthis->_M_mutate(__pos, __len1, __s, __len2);\n+\n+      this->_M_set_length(__new_size);\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    copy(_CharT* __s, size_type __n, size_type __pos) const\n+    {\n+      _M_check(__pos, \"basic_string::copy\");\n+      __n = _M_limit(__pos, __n);\n+      __glibcxx_requires_string_len(__s, __n);\n+      if (__n)\n+\t_S_copy(__s, _M_data() + __pos, __n);\n+      // 21.3.5.7 par 3: do not append null.  (good.)\n+      return __n;\n+    }\n+\n+#else  // !_GLIBCXX_USE_CXX11_ABI\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     const typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n@@ -686,6 +1130,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_copy(_M_data() + __pos1, __s, __n2);\n       return *this;\n     }\n+\n+    template<typename _CharT, typename _Traits, typename _Alloc>\n+    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    copy(_CharT* __s, size_type __n, size_type __pos) const\n+    {\n+      _M_check(__pos, \"basic_string::copy\");\n+      __n = _M_limit(__pos, __n);\n+      __glibcxx_requires_string_len(__s, __n);\n+      if (__n)\n+\t_M_copy(__s, _M_data() + __pos, __n);\n+      // 21.3.5.7 par 3: do not append null.  (good.)\n+      return __n;\n+    }\n+#endif  // !_GLIBCXX_USE_CXX11_ABI\n    \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>\n@@ -717,20 +1176,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __str;\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    typename basic_string<_CharT, _Traits, _Alloc>::size_type\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    copy(_CharT* __s, size_type __n, size_type __pos) const\n-    {\n-      _M_check(__pos, \"basic_string::copy\");\n-      __n = _M_limit(__pos, __n);\n-      __glibcxx_requires_string_len(__s, __n);\n-      if (__n)\n-\t_M_copy(__s, _M_data() + __pos, __n);\n-      // 21.3.5.7 par 3: do not append null.  (good.)\n-      return __n;\n-    }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::"}, {"sha": "cffb065ce18ffacf1aec1bfa2e5599ce5155af67", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -193,14 +193,30 @@ namespace std\n #endif\n }\n \n-// Use abi_tag(\"cxx11\")\n+#define _GLIBCXX_USE_DUAL_ABI\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+// Ignore any pre-defined value of _GLIBCXX_USE_CXX11_ABI\n+# undef _GLIBCXX_USE_CXX11_ABI\n+#endif\n+\n #ifndef _GLIBCXX_USE_CXX11_ABI\n #define _GLIBCXX_USE_CXX11_ABI\n #endif\n \n #if _GLIBCXX_USE_CXX11_ABI\n+namespace std\n+{\n+  inline namespace __cxx11 __attribute__((abi_tag)) { }\n+}\n+# define _GLIBCXX_NAMESPACE_CXX11 __cxx11::\n+# define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {\n+# define _GLIBCXX_END_NAMESPACE_CXX11 }\n # define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11\n #else\n+# define _GLIBCXX_NAMESPACE_CXX11\n+# define _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+# define _GLIBCXX_END_NAMESPACE_CXX11\n # define _GLIBCXX_DEFAULT_ABI_TAG\n #endif\n \n@@ -370,6 +386,15 @@ namespace std\n # define _GLIBCXX_BEGIN_NAMESPACE_LDBL\n # define _GLIBCXX_END_NAMESPACE_LDBL\n #endif\n+#if _GLIBCXX_USE_CXX11_ABI\n+# define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11\n+# define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11\n+# define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11\n+#else\n+# define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_LDBL\n+# define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_LDBL\n+# define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_LDBL\n+#endif\n \n // Assert.\n #if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PARALLEL)"}, {"sha": "9c1f8e77b750e8446760ba9ee3e798ef2b91bd0b", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -212,6 +212,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *  @brief  Return locale name.\n      *  @return  Locale name or \"*\" if unnamed.\n     */\n+    _GLIBCXX_DEFAULT_ABI_TAG\n     string\n     name() const;\n \n@@ -321,6 +322,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     void\n     _M_coalesce(const locale& __base, const locale& __add, category __cat);\n+\n+#if _GLIBCXX_USE_CXX11_ABI\n+    static const id* const _S_twinned_facets[];\n+#endif\n   };\n \n \n@@ -419,6 +424,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     facet&\n     operator=(const facet&);  // Not defined.\n+\n+    class __shim;\n+\n+    const facet* _M_sso_shim(const id*) const;\n+    const facet* _M_cow_shim(const id*) const;\n   };\n \n \n@@ -563,8 +573,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_init_facet(_Facet* __facet)\n       { _M_install_facet(&_Facet::id, __facet); }\n \n+    template<typename _Facet>\n+      void\n+      _M_init_facet_unchecked(_Facet* __facet)\n+      {\n+\t__facet->_M_add_reference();\n+\t_M_facets[_Facet::id._M_id()] = __facet;\n+      }\n+\n     void\n     _M_install_cache(const facet*, size_t);\n+\n+    void _M_init_extra(facet**);\n+    void _M_init_extra(void*, void*, const char*, const char*);\n   };\n \n \n@@ -581,7 +602,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  collate facet.\n   */\n   template<typename _CharT>\n-    class collate : public locale::facet\n+    class _GLIBCXX_NAMESPACE_CXX11 collate : public locale::facet\n     {\n     public:\n       // Types:\n@@ -755,7 +776,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// class collate_byname [22.2.4.2].\n   template<typename _CharT>\n-    class collate_byname : public collate<_CharT>\n+    class _GLIBCXX_NAMESPACE_CXX11 collate_byname : public collate<_CharT>\n     {\n     public:\n       //@{"}, {"sha": "ce1ffae965a7dbe2069519a97f488c1f42d89988", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -54,8 +54,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n #ifdef _GLIBCXX_USE_WCHAR_T\n # define  _GLIBCXX_NUM_FACETS 28\n+# define  _GLIBCXX_NUM_CXX11_FACETS 16\n #else\n # define  _GLIBCXX_NUM_FACETS 14\n+# define  _GLIBCXX_NUM_CXX11_FACETS 8\n #endif\n \n   // Convert string to numeric value of type _Tp and store results.\n@@ -1623,6 +1625,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n   /**\n    *  @brief  Primary class template numpunct.\n    *  @ingroup locales\n@@ -1896,6 +1900,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~numpunct_byname() { }\n     };\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   /**\n@@ -2107,11 +2113,13 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       /// Destructor.\n       virtual ~num_get() { }\n \n+      _GLIBCXX_DEFAULT_ABI_TAG\n       iter_type\n       _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,\n \t\t       string&) const;\n \n       template<typename _ValueT>\n+\t_GLIBCXX_DEFAULT_ABI_TAG\n \titer_type\n \t_M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,\n \t\t       _ValueT&) const;"}, {"sha": "3a4aedc1fb6a11f21bf583828e4f82e9f1b922ee", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -143,6 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   template<typename _CharT, typename _InIter>\n+    _GLIBCXX_DEFAULT_ABI_TAG\n     _InIter\n     num_get<_CharT, _InIter>::\n     _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,\n@@ -368,6 +369,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n   template<typename _CharT, typename _InIter>\n     template<typename _ValueT>\n+      _GLIBCXX_DEFAULT_ABI_TAG\n       _InIter\n       num_get<_CharT, _InIter>::\n       _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,\n@@ -1290,8 +1292,8 @@ _GLIBCXX_END_NAMESPACE_LDBL\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n #if _GLIBCXX_EXTERN_TEMPLATE\n-  extern template class numpunct<char>;\n-  extern template class numpunct_byname<char>;\n+  extern template class _GLIBCXX_NAMESPACE_CXX11 numpunct<char>;\n+  extern template class _GLIBCXX_NAMESPACE_CXX11 numpunct_byname<char>;\n   extern template class _GLIBCXX_NAMESPACE_LDBL num_get<char>;\n   extern template class _GLIBCXX_NAMESPACE_LDBL num_put<char>;\n   extern template class ctype_byname<char>;\n@@ -1329,8 +1331,8 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     has_facet<num_get<char> >(const locale&);\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  extern template class numpunct<wchar_t>;\n-  extern template class numpunct_byname<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_CXX11 numpunct<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_CXX11 numpunct_byname<wchar_t>;\n   extern template class _GLIBCXX_NAMESPACE_LDBL num_get<wchar_t>;\n   extern template class _GLIBCXX_NAMESPACE_LDBL num_put<wchar_t>;\n   extern template class ctype_byname<wchar_t>;"}, {"sha": "9c629e240d737b4859c857877fef6d2408e9da17", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -347,6 +347,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n   /**\n    *  @brief  Primary class template time_get.\n    *  @ingroup locales\n@@ -694,6 +696,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~time_get_byname() { }\n     };\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n   /**\n    *  @brief  Primary class template time_put.\n    *  @ingroup locales\n@@ -918,6 +922,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n   /**\n    *  @brief  Primary class template moneypunct.\n    *  @ingroup locales\n@@ -1346,7 +1352,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, bool _Intl>\n     const bool moneypunct_byname<_CharT, _Intl>::intl;\n \n-_GLIBCXX_BEGIN_NAMESPACE_LDBL\n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n \n   /**\n    *  @brief  Primary class template money_get.\n@@ -1462,7 +1470,8 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n        *  value returned.  @see get() for details.\n        */\n       // XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n+      && _GLIBCXX_USE_CXX11_ABI == 0\n       virtual iter_type\n       __do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t       ios_base::iostate& __err, double& __units) const;\n@@ -1484,7 +1493,8 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \t     ios_base::iostate& __err, string_type& __digits) const;\n \n       // XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n+      && _GLIBCXX_USE_CXX11_ABI == 0\n       virtual iter_type\n       do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t     ios_base::iostate& __err, long double& __units) const;\n@@ -1605,7 +1615,8 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n        *  @return  Iterator after writing.\n        */\n       // XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n+      && _GLIBCXX_USE_CXX11_ABI == 0\n       virtual iter_type\n       __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t       double __units) const;\n@@ -1639,7 +1650,8 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \t     const string_type& __digits) const;\n \n       // XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n+      && _GLIBCXX_USE_CXX11_ABI == 0\n       virtual iter_type\n       do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t     long double __units) const;\n@@ -1654,7 +1666,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n   template<typename _CharT, typename _OutIter>\n     locale::id money_put<_CharT, _OutIter>::id;\n \n-_GLIBCXX_END_NAMESPACE_LDBL\n+_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \n   /**\n    *  @brief  Messages facet base class providing catalog typedef.\n@@ -1665,6 +1677,8 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     typedef int catalog;\n   };\n \n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n   /**\n    *  @brief  Primary class template messages.\n    *  @ingroup locales\n@@ -1886,6 +1900,8 @@ _GLIBCXX_END_NAMESPACE_LDBL\n       { }\n     };\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "200168da2507dfefbe2a7bbeb6daa9675cc25153", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -128,7 +128,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-_GLIBCXX_BEGIN_NAMESPACE_LDBL\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n \n   template<typename _CharT, typename _InIter>\n     template<bool _Intl>\n@@ -348,7 +348,8 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \treturn __beg;\n       }\n \n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n+      && _GLIBCXX_USE_CXX11_ABI == 0\n   template<typename _CharT, typename _InIter>\n     _InIter\n     money_get<_CharT, _InIter>::\n@@ -559,7 +560,8 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \treturn __s;    \n       }\n \n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n+      && _GLIBCXX_USE_CXX11_ABI == 0\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     money_put<_CharT, _OutIter>::\n@@ -614,7 +616,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n     { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)\n \t            : _M_insert<false>(__s, __io, __fill, __digits); }\n \n-_GLIBCXX_END_NAMESPACE_LDBL\n+_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \n   // NB: Not especially useful. Without an ios_base object or some\n   // kind of locale reference, we are left clawing at the air where\n@@ -1222,8 +1224,8 @@ _GLIBCXX_END_NAMESPACE_LDBL\n   extern template class moneypunct<char, true>;\n   extern template class moneypunct_byname<char, false>;\n   extern template class moneypunct_byname<char, true>;\n-  extern template class _GLIBCXX_NAMESPACE_LDBL money_get<char>;\n-  extern template class _GLIBCXX_NAMESPACE_LDBL money_put<char>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 money_get<char>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 money_put<char>;\n   extern template class __timepunct<char>;\n   extern template class time_put<char>;\n   extern template class time_put_byname<char>;\n@@ -1297,8 +1299,8 @@ _GLIBCXX_END_NAMESPACE_LDBL\n   extern template class moneypunct<wchar_t, true>;\n   extern template class moneypunct_byname<wchar_t, false>;\n   extern template class moneypunct_byname<wchar_t, true>;\n-  extern template class _GLIBCXX_NAMESPACE_LDBL money_get<wchar_t>;\n-  extern template class _GLIBCXX_NAMESPACE_LDBL money_put<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 money_get<wchar_t>;\n+  extern template class _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 money_put<wchar_t>;\n   extern template class __timepunct<wchar_t>;\n   extern template class time_put<wchar_t>;\n   extern template class time_put_byname<wchar_t>;"}, {"sha": "aa24a980d79d0173e058816068d937aed1e72d5a", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -150,45 +150,55 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class num_put;\n _GLIBCXX_END_NAMESPACE_LDBL\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _CharT> class numpunct;\n   template<typename _CharT> class numpunct_byname;\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   // 22.2.4 collation\n   template<typename _CharT>\n     class collate;\n-  template<typename _CharT> class\n-    collate_byname;\n+  template<typename _CharT>\n+    class collate_byname;\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n   // 22.2.5 date and time\n   class time_base;\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n     class time_get;\n   template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n     class time_get_byname;\n+_GLIBCXX_END_NAMESPACE_CXX11\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class time_put;\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class time_put_byname;\n \n   // 22.2.6 money\n   class money_base;\n-_GLIBCXX_BEGIN_NAMESPACE_LDBL\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n   template<typename _CharT, typename _InIter =  istreambuf_iterator<_CharT> >\n     class money_get;\n   template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >\n     class money_put;\n-_GLIBCXX_END_NAMESPACE_LDBL\n+_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _CharT, bool _Intl = false>\n     class moneypunct;\n   template<typename _CharT, bool _Intl = false>\n     class moneypunct_byname;\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n   // 22.2.7 message retrieval\n   class messages_base;\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _CharT>\n     class messages;\n   template<typename _CharT>\n     class messages_byname;\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "acdac5e72ebe97e01ba31799962405ac3ecbfd6a", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -31,12 +31,14 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename, typename>\n     class basic_regex;\n \n   template<typename, typename>\n     class match_results;\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION\n \n namespace __detail\n@@ -71,6 +73,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n }\n \n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   /**\n    * @addtogroup regex\n@@ -1939,6 +1942,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t match_results<_Bi_iter, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n   // [7.11.2] Function template regex_match\n   /**\n    * @name Matching, Searching, and Replacing\n@@ -2407,6 +2412,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   //@}\n \n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n   // std [28.12] Class template regex_iterator\n   /**\n    * An iterator adaptor that will provide repeated calls of regex_search over\n@@ -2770,6 +2777,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   //@} // group regex\n+\n+_GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "7e8e85c162a891ac5eee257bc50ca8e73ada860d", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -292,10 +292,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n                const _List_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_node != __y._M_node; }\n \n-\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   /// See bits/stl_deque.h's _Deque_base for an explanation.\n   template<typename _Tp, typename _Alloc>\n-    class _GLIBCXX_DEFAULT_ABI_TAG _List_base\n+    class _List_base\n     {\n     protected:\n       // NOTA BENE\n@@ -504,7 +504,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  %empty. \n   */\n   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n-    class _GLIBCXX_DEFAULT_ABI_TAG list : protected _List_base<_Tp, _Alloc>\n+    class list : protected _List_base<_Tp, _Alloc>\n     {\n       // concept requirements\n       typedef typename _Alloc::value_type                _Alloc_value_type;\n@@ -1790,6 +1790,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  __builtin_abort();\n       }\n     };\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n   /**\n    *  @brief  List equality comparison."}, {"sha": "13cf027cfdb3162c3d9f6629f057452108e4785c", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -52,35 +52,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<class _CharT>\n     struct char_traits;\n \n+  template<> struct char_traits<char>;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<> struct char_traits<wchar_t>;\n+#endif\n+\n+#if ((__cplusplus >= 201103L) \\\n+     && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n+  template<> struct char_traits<char16_t>;\n+  template<> struct char_traits<char32_t>;\n+#endif\n+\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n   template<typename _CharT, typename _Traits = char_traits<_CharT>,\n            typename _Alloc = allocator<_CharT> >\n     class basic_string;\n \n-  template<> struct char_traits<char>;\n-\n   /// A string of @c char\n   typedef basic_string<char>    string;   \n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  template<> struct char_traits<wchar_t>;\n-\n   /// A string of @c wchar_t\n   typedef basic_string<wchar_t> wstring;   \n #endif\n \n #if ((__cplusplus >= 201103L) \\\n      && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n-\n-  template<> struct char_traits<char16_t>;\n-  template<> struct char_traits<char32_t>;\n-\n   /// A string of @c char16_t\n   typedef basic_string<char16_t> u16string; \n \n   /// A string of @c char32_t\n   typedef basic_string<char32_t> u32string; \n-\n #endif\n+\n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n   /** @}  */\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "c770adad28db70ce5929060409b99a234d8eaa75", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -88,6 +88,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n     class basic_iostream;\n \n+\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+\n   template<typename _CharT, typename _Traits = char_traits<_CharT>,\n \t    typename _Alloc = allocator<_CharT> >\n     class basic_stringbuf;\n@@ -104,6 +107,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Alloc = allocator<_CharT> >\n     class basic_stringstream;\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n     class basic_filebuf;\n "}, {"sha": "a46e197e7fb86d8892c814d7d9f12eae2f872892", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -41,6 +41,7 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // [27.7.1] template class basic_stringbuf\n   /**\n@@ -63,6 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     class basic_stringbuf : public basic_streambuf<_CharT, _Traits>\n     {\n+      struct __xfer_bufptrs;\n     public:\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n@@ -117,9 +119,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_stringbuf(const basic_stringbuf&) = delete;\n \n       basic_stringbuf(basic_stringbuf&& __rhs)\n-      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),\n-      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))\n-      { __rhs._M_stringbuf_init(__rhs._M_mode); }\n+      : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))\n+      { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }\n \n       // 27.8.2.2 Assign and swap:\n \n@@ -129,18 +130,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_stringbuf&\n       operator=(basic_stringbuf&& __rhs)\n       {\n+\t__xfer_bufptrs __st{__rhs, this};\n \tconst __streambuf_type& __base = __rhs;\n \t__streambuf_type::operator=(__base);\n \tthis->pubimbue(__rhs.getloc());\n \t_M_mode = __rhs._M_mode;\n \t_M_string = std::move(__rhs._M_string);\n-\t__rhs._M_stringbuf_init(__rhs._M_mode);\n+\t__rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);\n \treturn *this;\n       }\n \n       void\n       swap(basic_stringbuf& __rhs)\n       {\n+\t__xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};\n+\t__xfer_bufptrs __r_st{__rhs, this};\n \t__streambuf_type& __base = __rhs;\n \t__streambuf_type::swap(__base);\n \t__rhs.pubimbue(this->pubimbue(__rhs.getloc()));\n@@ -185,7 +189,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       str(const __string_type& __s)\n       {\n-\t// Cannot use _M_string = __s, since v3 strings are COW.\n+\t// Cannot use _M_string = __s, since v3 strings are COW\n+\t// (not always true now but assign() always works).\n \t_M_string.assign(__s.data(), __s.size());\n \t_M_stringbuf_init(_M_mode);\n       }\n@@ -286,6 +291,60 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // interface of basic_streambuf, taking just an int.\n       void\n       _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);\n+\n+    private:\n+#if __cplusplus >= 201103L\n+#if _GLIBCXX_USE_CXX11_ABI\n+      // This type captures the state of the gptr / pptr pointers as offsets\n+      // so they can be restored in another object after moving the string.\n+      struct __xfer_bufptrs\n+      {\n+\t__xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)\n+\t: _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}\n+\t{\n+\t  const _CharT* __str = __from._M_string.data();\n+\t  if (__from.eback())\n+\t    {\n+\t    _M_goff[0] = __from.eback() - __str;\n+\t    _M_goff[1] = __from.gptr() - __str;\n+\t    _M_goff[2] = __from.egptr() - __str;\n+\t    }\n+\t  if (__from.pbase())\n+\t    {\n+\t      _M_poff[0] = __from.pbase() - __str;\n+\t      _M_poff[1] = __from.pptr() - __from.pbase();\n+\t      _M_poff[2] = __from.epptr() - __str;\n+\t    }\n+\t}\n+\n+\t~__xfer_bufptrs()\n+\t{\n+\t  char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());\n+\t  if (_M_goff[0] != -1)\n+\t    _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);\n+\t  if (_M_poff[0] != -1)\n+\t    _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);\n+\t}\n+\n+\tbasic_stringbuf* _M_to;\n+\toff_type _M_goff[3];\n+\toff_type _M_poff[3];\n+      };\n+#else\n+      // This type does nothing when using Copy-On-Write strings.\n+      struct __xfer_bufptrs\n+      {\n+\t__xfer_bufptrs(const basic_stringbuf&, basic_stringbuf*) { }\n+      };\n+#endif\n+\n+      // The move constructor initializes an __xfer_bufptrs temporary then\n+      // delegates to this constructor to performs moves during its lifetime.\n+      basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)\n+      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),\n+      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))\n+      { }\n+#endif\n     };\n \n \n@@ -747,6 +806,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __x.swap(__y); }\n #endif\n \n+_GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "c927f0539bbb57a7437f61745bbc16ed9d9c49bc", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 101, "deletions": 2, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -42,6 +42,64 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if _GLIBCXX_USE_DUAL_ABI\n+#if _GLIBCXX_USE_CXX11_ABI\n+  // Emulates an old COW string when the new std::string is in use.\n+  struct __cow_string\n+  {\n+    union {\n+      const char* _M_p;\n+      char _M_bytes[sizeof(_M_p)];\n+    };\n+\n+    __cow_string();\n+    __cow_string(const std::string&);\n+    __cow_string(const char*, size_t);\n+    __cow_string(const __cow_string&) _GLIBCXX_USE_NOEXCEPT;\n+    __cow_string& operator=(const __cow_string&) _GLIBCXX_USE_NOEXCEPT;\n+    ~__cow_string();\n+#if __cplusplus >= 201103L\n+    __cow_string(__cow_string&&) noexcept;\n+    __cow_string& operator=(__cow_string&&) noexcept;\n+#endif\n+  };\n+\n+  typedef basic_string<char> __sso_string;\n+#else // _GLIBCXX_USE_CXX11_ABI\n+  typedef basic_string<char> __cow_string;\n+\n+  // Emulates a new SSO string when the old std::string is in use.\n+  struct __sso_string\n+  {\n+    struct __str\n+    {\n+      const char* _M_p;\n+      size_t _M_string_length;\n+      char _M_local_buf[16];\n+    };\n+\n+    union {\n+      __str _M_s;\n+      char _M_bytes[sizeof(_M_s)];\n+    };\n+\n+    __sso_string() _GLIBCXX_USE_NOEXCEPT;\n+    __sso_string(const std::string&);\n+    __sso_string(const char*, size_t);\n+    __sso_string(const __sso_string&);\n+    __sso_string& operator=(const __sso_string&);\n+    ~__sso_string();\n+#if __cplusplus >= 201103L\n+    __sso_string(__sso_string&&) noexcept;\n+    __sso_string& operator=(__sso_string&&) noexcept;\n+#endif\n+  };\n+#endif // _GLIBCXX_USE_CXX11_ABI\n+#else  // _GLIBCXX_USE_DUAL_ABI\n+  typedef basic_string<char> __sso_string;\n+  typedef basic_string<char> __cow_string;\n+#endif\n+\n   /**\n    * @addtogroup exceptions\n    * @{\n@@ -54,13 +112,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   class logic_error : public exception \n   {\n-    string _M_msg;\n+    __cow_string _M_msg;\n \n   public:\n     /** Takes a character string describing the error.  */\n     explicit \n     logic_error(const string& __arg);\n \n+#if __cplusplus >= 201103L\n+    explicit\n+    logic_error(const char*);\n+#endif\n+\n+#if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n+    logic_error(const logic_error&) _GLIBCXX_USE_NOEXCEPT;\n+    logic_error& operator=(const logic_error&) _GLIBCXX_USE_NOEXCEPT;\n+#endif\n+\n     virtual ~logic_error() _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause of\n@@ -75,6 +143,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit domain_error(const string& __arg);\n+#if __cplusplus >= 201103L\n+    explicit domain_error(const char*);\n+#endif\n     virtual ~domain_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n@@ -83,6 +154,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit invalid_argument(const string& __arg);\n+#if __cplusplus >= 201103L\n+    explicit invalid_argument(const char*);\n+#endif\n     virtual ~invalid_argument() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n@@ -92,6 +166,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit length_error(const string& __arg);\n+#if __cplusplus >= 201103L\n+    explicit length_error(const char*);\n+#endif\n     virtual ~length_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n@@ -101,6 +178,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit out_of_range(const string& __arg);\n+#if __cplusplus >= 201103L\n+    explicit out_of_range(const char*);\n+#endif\n     virtual ~out_of_range() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n@@ -111,13 +191,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   class runtime_error : public exception \n   {\n-    string _M_msg;\n+    __cow_string _M_msg;\n \n   public:\n     /** Takes a character string describing the error.  */\n     explicit \n     runtime_error(const string& __arg);\n \n+#if __cplusplus >= 201103L\n+    explicit\n+    runtime_error(const char*);\n+#endif\n+\n+#if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n+    runtime_error(const runtime_error&) _GLIBCXX_USE_NOEXCEPT;\n+    runtime_error& operator=(const runtime_error&) _GLIBCXX_USE_NOEXCEPT;\n+#endif\n+\n     virtual ~runtime_error() _GLIBCXX_USE_NOEXCEPT;\n \n     /** Returns a C-style character string describing the general cause of\n@@ -131,6 +221,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit range_error(const string& __arg);\n+#if __cplusplus >= 201103L\n+    explicit range_error(const char*);\n+#endif\n     virtual ~range_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n@@ -139,6 +232,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit overflow_error(const string& __arg);\n+#if __cplusplus >= 201103L\n+    explicit overflow_error(const char*);\n+#endif\n     virtual ~overflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n \n@@ -147,6 +243,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     explicit underflow_error(const string& __arg);\n+#if __cplusplus >= 201103L\n+    explicit underflow_error(const char*);\n+#endif\n     virtual ~underflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n "}, {"sha": "786445e1c53943d36ca06d479ea97d1e2bbe41be", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -46,7 +46,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   class error_code;\n   class error_condition;\n-  class error_category;\n   class system_error;\n \n   /// is_error_code_enum\n@@ -61,16 +60,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_error_condition_enum<errc>\n     : public true_type { };\n \n+  inline namespace _V2 {\n \n   /// error_category\n   class error_category\n   {\n   public:\n-#ifdef _GLIBCXX_COMPATIBILITY_CXX0X\n-    error_category() noexcept;\n-#else\n     constexpr error_category() noexcept = default;\n-#endif\n \n     virtual ~error_category();\n \n@@ -80,9 +76,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual const char* \n     name() const noexcept = 0;\n \n+    // We need two different virtual functions here, one returning a\n+    // COW string and one returning an SSO string. Their positions in the\n+    // vtable must be consistent for dynamic dispatch to work, but which one\n+    // the name \"message()\" finds depends on which ABI the caller is using.\n+#if _GLIBCXX_USE_CXX11_ABI\n+  private:\n+    _GLIBCXX_DEFAULT_ABI_TAG\n+    virtual __cow_string\n+    _M_message(int) const;\n+\n+  public:\n+    _GLIBCXX_DEFAULT_ABI_TAG\n+    virtual string\n+    message(int) const = 0;\n+#else\n     virtual string \n     message(int) const = 0;\n \n+  private:\n+    virtual __sso_string\n+    _M_message(int) const;\n+#endif\n+\n+  public:\n     virtual error_condition\n     default_error_condition(int __i) const noexcept;\n \n@@ -109,6 +126,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   _GLIBCXX_CONST const error_category& system_category() noexcept;\n   _GLIBCXX_CONST const error_category& generic_category() noexcept;\n \n+  } // end inline namespace\n+\n   error_code make_error_code(errc) noexcept;\n \n   template<typename _Tp>\n@@ -156,6 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     error_condition \n     default_error_condition() const noexcept;\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     string \n     message() const\n     { return category().message(value()); }\n@@ -231,6 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     const error_category&\n     category() const noexcept { return *_M_cat; }\n \n+    _GLIBCXX_DEFAULT_ABI_TAG\n     string \n     message() const\n     { return category().message(value()); }"}, {"sha": "9a1d725e3605c65c1fd699b5c30672d96948d5b7", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -280,6 +280,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@"}, {"sha": "46538de3ffc6ab779797c93be7da06cc02042957", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -216,6 +216,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@"}, {"sha": "739edcb9126fcc3e68562a4622ab3921ce16c2d0", "filename": "libstdc++-v3/python/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -240,6 +240,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@"}, {"sha": "cf5c3f1c480becc6d3f659216e8b8d9155e31c9d", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -660,6 +660,7 @@ class StdStringPrinter:\n \n     def __init__(self, typename, val):\n         self.val = val\n+        self.new_string = typename.find(\"::__cxx11::basic_string\") != -1\n \n     def to_string(self):\n         # Make sure &string works, too.\n@@ -671,13 +672,18 @@ def to_string(self):\n         # the string according to length, not according to first null\n         # encountered.\n         ptr = self.val ['_M_dataplus']['_M_p']\n-        realtype = type.unqualified ().strip_typedefs ()\n-        reptype = gdb.lookup_type (str (realtype) + '::_Rep').pointer ()\n-        header = ptr.cast(reptype) - 1\n-        len = header.dereference ()['_M_length']\n+        if self.new_string:\n+            length = self.val['_M_string_length']\n+            # https://sourceware.org/bugzilla/show_bug.cgi?id=17728\n+            ptr = ptr.cast(ptr.type.strip_typedefs())\n+        else:\n+            realtype = type.unqualified ().strip_typedefs ()\n+            reptype = gdb.lookup_type (str (realtype) + '::_Rep').pointer ()\n+            header = ptr.cast(reptype) - 1\n+            length = header.dereference ()['_M_length']\n         if hasattr(ptr, \"lazy_string\"):\n-            return ptr.lazy_string (length = len)\n-        return ptr.string (length = len)\n+            return ptr.lazy_string (length = length)\n+        return ptr.string (length = length)\n \n     def display_hint (self):\n         return 'string'\n@@ -1266,6 +1272,7 @@ def build_libstdcxx_dictionary ():\n     # In order from:\n     # http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01847.html\n     libstdcxx_printer.add_version('std::', 'basic_string', StdStringPrinter)\n+    libstdcxx_printer.add_version('std::', '__cxx11::basic_string', StdStringPrinter)\n     libstdcxx_printer.add_container('std::', 'bitset', StdBitsetPrinter)\n     libstdcxx_printer.add_container('std::', 'deque', StdDequePrinter)\n     libstdcxx_printer.add_container('std::', 'list', StdListPrinter)"}, {"sha": "d1b5ab21fe47682acba3a5d9cc08da7cad613ee9", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -267,6 +267,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@"}, {"sha": "c4345af34a62fb6ecb2ebb299745bf63244a207b", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -39,16 +39,22 @@ ctype_configure_char.cc: ${glibcxx_srcdir}/$(OS_INC_SRCDIR)/ctype_configure_char\n ctype_members.cc: ${glibcxx_srcdir}/$(CCTYPE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CCTYPE_CC) . || true\n \n-if ENABLE_CXX11_ABI\n+if ENABLE_DUAL_ABI\n cxx11_abi_sources = \\\n-\tcxx11-ios_failure.cc\n+\tcow-locale_init.cc \\\n+\tcow-shim_facets.cc \\\n+\tcxx11-hash_tr1.cc \\\n+\tcxx11-ios_failure.cc \\\n+\tcxx11-shim_facets.cc \\\n+\tcxx11-stdexcept.cc\n else\n cxx11_abi_sources =\n endif\n \n sources = \\\n \tchrono.cc \\\n \tcondition_variable.cc \\\n+\tcow-stdexcept.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n@@ -69,9 +75,22 @@ sources = \\\n \t${cxx11_abi_sources} \\\n \t${host_sources}\n \n+if ENABLE_DUAL_ABI\n+extra_string_inst_sources = \\\n+\tcow-fstream-inst.cc \\\n+\tcow-sstream-inst.cc \\\n+\tcow-string-inst.cc \\\n+\tcow-wstring-inst.cc \\\n+\tcxx11-locale-inst.cc \\\n+\tcxx11-wlocale-inst.cc\n+else\n+extra_string_inst_sources =\n+endif\n+\n if ENABLE_EXTERN_TEMPLATE\n # XTEMPLATE_FLAGS = -fno-implicit-templates\n inst_sources = \\\n+\t$(extra_string_inst_sources) \\\n \text11-inst.cc \\\n \tfstream-inst.cc \\\n \tios-inst.cc \\"}, {"sha": "2ce23f9e497a5fce62fb0cff8b2f40515948a4db", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -67,20 +67,28 @@ CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__11convenience_la_LIBADD =\n-@ENABLE_CXX11_ABI_TRUE@am__objects_1 = cxx11-ios_failure.lo\n+@ENABLE_DUAL_ABI_TRUE@am__objects_1 = cow-locale_init.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-shim_facets.lo cxx11-hash_tr1.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-ios_failure.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-shim_facets.lo cxx11-stdexcept.lo\n am__objects_2 = ctype_configure_char.lo ctype_members.lo\n-am__objects_3 = chrono.lo condition_variable.lo ctype.lo debug.lo \\\n-\tfunctexcept.lo functional.lo future.lo hash_c++0x.lo \\\n-\thashtable_c++0x.lo ios.lo limits.lo mutex.lo placeholders.lo \\\n-\trandom.lo regex.lo shared_ptr.lo snprintf_lite.lo \\\n-\tsystem_error.lo thread.lo $(am__objects_1) $(am__objects_2)\n-@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_4 = ext11-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tfstream-inst.lo ios-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tiostream-inst.lo istream-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.lo sstream-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.lo string-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.lo\n-am_libc__11convenience_la_OBJECTS = $(am__objects_3) $(am__objects_4)\n+am__objects_3 = chrono.lo condition_variable.lo cow-stdexcept.lo \\\n+\tctype.lo debug.lo functexcept.lo functional.lo future.lo \\\n+\thash_c++0x.lo hashtable_c++0x.lo ios.lo limits.lo mutex.lo \\\n+\tplaceholders.lo random.lo regex.lo shared_ptr.lo \\\n+\tsnprintf_lite.lo system_error.lo thread.lo $(am__objects_1) \\\n+\t$(am__objects_2)\n+@ENABLE_DUAL_ABI_TRUE@am__objects_4 = cow-fstream-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-sstream-inst.lo cow-string-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-wstring-inst.lo cxx11-locale-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-wlocale-inst.lo\n+@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_5 = $(am__objects_4) \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\text11-inst.lo fstream-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.lo iostream-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tistream-inst.lo ostream-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.lo streambuf-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.lo wstring-inst.lo\n+am_libc__11convenience_la_OBJECTS = $(am__objects_3) $(am__objects_5)\n libc__11convenience_la_OBJECTS = $(am_libc__11convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n depcomp =\n@@ -240,6 +248,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n@@ -323,13 +332,19 @@ host_sources = \\\n \tctype_configure_char.cc \\\n \tctype_members.cc\n \n-@ENABLE_CXX11_ABI_FALSE@cxx11_abi_sources = \n-@ENABLE_CXX11_ABI_TRUE@cxx11_abi_sources = \\\n-@ENABLE_CXX11_ABI_TRUE@\tcxx11-ios_failure.cc\n+@ENABLE_DUAL_ABI_FALSE@cxx11_abi_sources = \n+@ENABLE_DUAL_ABI_TRUE@cxx11_abi_sources = \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-locale_init.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-shim_facets.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-hash_tr1.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-ios_failure.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-shim_facets.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-stdexcept.cc\n \n sources = \\\n \tchrono.cc \\\n \tcondition_variable.cc \\\n+\tcow-stdexcept.cc \\\n \tctype.cc \\\n \tdebug.cc \\\n \tfunctexcept.cc \\\n@@ -350,11 +365,21 @@ sources = \\\n \t${cxx11_abi_sources} \\\n \t${host_sources}\n \n+@ENABLE_DUAL_ABI_FALSE@extra_string_inst_sources = \n+@ENABLE_DUAL_ABI_TRUE@extra_string_inst_sources = \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-fstream-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-sstream-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-string-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-wstring-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-locale-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-wlocale-inst.cc\n+\n # XTEMPLATE_FLAGS =\n @ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n \n # XTEMPLATE_FLAGS = -fno-implicit-templates\n @ENABLE_EXTERN_TEMPLATE_TRUE@inst_sources = \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\t$(extra_string_inst_sources) \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\text11-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tfstream-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.cc \\"}, {"sha": "a5546607c54a9f6c45233619bf8c4724b07dd714", "filename": "libstdc++-v3/src/c++11/compatibility-c++0x.cc", "status": "modified", "additions": 127, "deletions": 1, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -23,8 +23,18 @@\n // <http://www.gnu.org/licenses/>.\n \n #define _GLIBCXX_COMPATIBILITY_CXX0X\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#define error_category error_categoryxx\n+#define system_category system_categoryxx\n+#define generic_category generic_categoryxx\n+#define _V2 _V2xx\n #include <string>\n #include <system_error>\n+#include <cstring>\n+#undef error_category\n+#undef system_category\n+#undef generic_category\n+#undef _V2\n \n #if __cplusplus < 201103L\n # error \"compatibility-c++0x.cc must be compiled with -std=gnu++0x\"\n@@ -120,9 +130,125 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     constexpr bool system_clock::is_monotonic;\n   } // namespace chrono\n \n+  // gcc-5 replaces this with _V2::error_category\n+  class error_category\n+  {\n+  public:\n+    error_category() noexcept;\n+\n+    virtual ~error_category();\n+\n+    error_category(const error_category&) = delete;\n+    error_category& operator=(const error_category&) = delete;\n+\n+    virtual const char*\n+    name() const noexcept = 0;\n+\n+    virtual string\n+    message(int) const = 0;\n+\n+    virtual error_condition\n+    default_error_condition(int __i) const noexcept;\n+\n+    virtual bool\n+    equivalent(int __i, const error_condition& __cond) const noexcept;\n+\n+    virtual bool\n+    equivalent(const error_code& __code, int __i) const noexcept;\n+\n+    bool\n+    operator<(const error_category& __other) const noexcept\n+    { return less<const error_category*>()(this, &__other); }\n+\n+    bool\n+    operator==(const error_category& __other) const noexcept\n+    { return this == &__other; }\n+\n+    bool\n+    operator!=(const error_category& __other) const noexcept\n+    { return this != &__other; }\n+  };\n+\n   // gcc-4.9.0\n   // LWG 2145 changes this constructor to constexpr i.e. inline\n   error_category::error_category() noexcept = default;\n-}\n \n+  error_category::~error_category() noexcept = default;\n+\n+  namespace\n+  {\n+    using std::string;\n+\n+    struct generic_error_category : public std::error_category\n+    {\n+      virtual const char*\n+      name() const noexcept\n+      { return \"generic\"; }\n+\n+      virtual string\n+      message(int i) const\n+      {\n+\t// XXX locale issues: how does one get or set loc.\n+\t// _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n+\treturn string(strerror(i));\n+      }\n+    };\n+\n+    struct system_error_category : public std::error_category\n+    {\n+      virtual const char*\n+      name() const noexcept\n+      { return \"system\"; }\n+\n+      virtual string\n+      message(int i) const\n+      {\n+\t// XXX locale issues: how does one get or set loc.\n+\t// _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n+\treturn string(strerror(i));\n+      }\n+    };\n+\n+    const generic_error_category generic_category_instance{};\n+    const system_error_category system_category_instance{};\n+  }\n+\n+  const error_category&\n+  system_category() noexcept { return system_category_instance; }\n+\n+  const error_category&\n+  generic_category() noexcept { return generic_category_instance; }\n+\n+  namespace _V2\n+  {\n+    _GLIBCXX_CONST const error_categoryxx& system_category() noexcept;\n+    _GLIBCXX_CONST const error_categoryxx& generic_category() noexcept;\n+  }\n+\n+  error_condition\n+  error_category::default_error_condition(int __i) const noexcept\n+  {\n+    if (*this == system_category())\n+      return error_condition(__i, _V2::system_category());\n+    return error_condition(__i, _V2::generic_category());\n+  }\n+\n+  bool\n+  error_category::equivalent(int __i,\n+\t\t\t     const error_condition& __cond) const noexcept\n+  { return default_error_condition(__i) == __cond; }\n+\n+  bool\n+  error_category::equivalent(const error_code& __code, int __i) const noexcept\n+  {\n+    if (*this == system_category()\n+\t&& __code.category() == _V2::system_category())\n+      return __code.value() == __i;\n+    if (*this == generic_category()\n+\t&& __code.category() == _V2::generic_category())\n+      return __code.value() == __i;\n+    return false;\n+  }\n+\n+}\n #endif"}, {"sha": "8e373683bb7bbabce7b9a42429a77415367f9015", "filename": "libstdc++-v3/src/c++11/cow-fstream-inst.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-fstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-fstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-fstream-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,78 @@\n+// Explicit instantiation file.\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include <fstream>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template basic_filebuf<char>*\n+    basic_filebuf<char>::open(const std::string&, ios_base::openmode);\n+  template\n+    basic_ifstream<char>::\n+    basic_ifstream(const std::string&, ios_base::openmode);\n+  template void\n+    basic_ifstream<char>::open(const std::string&, ios_base::openmode);\n+  template\n+    basic_ofstream<char>::\n+    basic_ofstream(const std::string&, ios_base::openmode);\n+  template void\n+    basic_ofstream<char>::open(const std::string&, ios_base::openmode);\n+  template\n+    basic_fstream<char>::basic_fstream(const std::string&, ios_base::openmode);\n+  template void\n+    basic_fstream<char>::open(const std::string&, ios_base::openmode);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template basic_filebuf<wchar_t>*\n+    basic_filebuf<wchar_t>::open(const std::string&, ios_base::openmode);\n+  template\n+    basic_ifstream<wchar_t>::\n+    basic_ifstream(const std::string&, ios_base::openmode);\n+  template void\n+    basic_ifstream<wchar_t>::open(const std::string&, ios_base::openmode);\n+  template\n+    basic_ofstream<wchar_t>::\n+    basic_ofstream(const std::string&, ios_base::openmode);\n+  template void\n+    basic_ofstream<wchar_t>::open(const std::string&, ios_base::openmode);\n+  template\n+    basic_fstream<wchar_t>::\n+    basic_fstream(const std::string&, ios_base::openmode);\n+  template void\n+    basic_fstream<wchar_t>::open(const std::string&, ios_base::openmode);\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f48af64c27d2ee12e9e159d342a361727e8afd11", "filename": "libstdc++-v3/src/c++11/cow-locale_init.cc", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,194 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Instantiate the facets using old std::string ABI.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include <locale>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+namespace \n+{\n+  typedef char fake_collate_c[sizeof(std::collate<char>)]\n+  __attribute__ ((aligned(__alignof__(std::collate<char>))));\n+  fake_collate_c collate_c;\n+\n+  typedef char fake_numpunct_c[sizeof(numpunct<char>)]\n+  __attribute__ ((aligned(__alignof__(numpunct<char>))));\n+  fake_numpunct_c numpunct_c;\n+\n+  typedef char fake_moneypunct_c[sizeof(moneypunct<char, true>)]\n+  __attribute__ ((aligned(__alignof__(moneypunct<char, true>))));\n+  fake_moneypunct_c moneypunct_ct;\n+  fake_moneypunct_c moneypunct_cf;\n+\n+  typedef char fake_money_get_c[sizeof(money_get<char>)]\n+  __attribute__ ((aligned(__alignof__(money_get<char>))));\n+  fake_money_get_c money_get_c;\n+  \n+  typedef char fake_money_put_c[sizeof(money_put<char>)]\n+  __attribute__ ((aligned(__alignof__(money_put<char>))));\n+  fake_money_put_c money_put_c;\n+\n+  typedef char fake_time_get_c[sizeof(time_get<char>)]\n+  __attribute__ ((aligned(__alignof__(time_get<char>))));\n+  fake_time_get_c time_get_c;\n+\n+  typedef char fake_messages_c[sizeof(messages<char>)]\n+  __attribute__ ((aligned(__alignof__(messages<char>))));\n+  fake_messages_c messages_c;\n+\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n+  typedef char fake_wollate_w[sizeof(std::collate<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(std::collate<wchar_t>))));\n+  fake_wollate_w collate_w;\n+\n+  typedef char fake_numpunct_w[sizeof(numpunct<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(numpunct<wchar_t>))));\n+  fake_numpunct_w numpunct_w;\n+\n+  typedef char fake_moneypunct_w[sizeof(moneypunct<wchar_t, true>)]\n+  __attribute__ ((aligned(__alignof__(moneypunct<wchar_t, true>))));\n+  fake_moneypunct_w moneypunct_wt;\n+  fake_moneypunct_w moneypunct_wf;\n+\n+  typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n+  fake_money_get_w money_get_w;\n+  \n+  typedef char fake_money_put_w[sizeof(money_put<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(money_put<wchar_t>))));\n+  fake_money_put_w money_put_w;\n+\n+  typedef char fake_time_get_w[sizeof(time_get<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(time_get<wchar_t>))));\n+  fake_time_get_w time_get_w;\n+\n+  typedef char fake_messages_w[sizeof(messages<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(messages<wchar_t>))));\n+  fake_messages_w messages_w;\n+#endif\n+} // anonymous namespace\n+\n+  void\n+  locale::_Impl::_M_init_extra(facet** caches)\n+  {\n+    auto __npc = static_cast<__numpunct_cache<char>*>(caches[0]);\n+    auto __mpcf = static_cast<__moneypunct_cache<char, false>*>(caches[1]);\n+    auto __mpct = static_cast<__moneypunct_cache<char, true>*>(caches[2]);\n+\n+    _M_init_facet_unchecked(new (&numpunct_c) numpunct<char>(__npc, 1));\n+    _M_init_facet_unchecked(new (&collate_c) std::collate<char>(1));\n+    _M_init_facet_unchecked(new (&moneypunct_cf) moneypunct<char, false>(__mpcf, 1));\n+    _M_init_facet_unchecked(new (&moneypunct_ct) moneypunct<char, true>(__mpct, 1));\n+    _M_init_facet_unchecked(new (&money_get_c) money_get<char>(1));\n+    _M_init_facet_unchecked(new (&money_put_c) money_put<char>(1));\n+    _M_init_facet_unchecked(new (&time_get_c) time_get<char>(1));\n+    _M_init_facet_unchecked(new (&messages_c) std::messages<char>(1));\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    auto __npw = static_cast<__numpunct_cache<wchar_t>*>(caches[3]);\n+    auto __mpwf = static_cast<__moneypunct_cache<wchar_t, false>*>(caches[4]);\n+    auto __mpwt = static_cast<__moneypunct_cache<wchar_t, true>*>(caches[5]);\n+\n+    _M_init_facet_unchecked(new (&numpunct_w) numpunct<wchar_t>(__npw, 1));\n+    _M_init_facet_unchecked(new (&collate_w) std::collate<wchar_t>(1));\n+    _M_init_facet_unchecked(new (&moneypunct_wf) moneypunct<wchar_t, false>(__mpwf, 1));\n+    _M_init_facet_unchecked(new (&moneypunct_wt) moneypunct<wchar_t, true>(__mpwt, 1));\n+    _M_init_facet_unchecked(new (&money_get_w) money_get<wchar_t>(1));\n+    _M_init_facet_unchecked(new (&money_put_w) money_put<wchar_t>(1));\n+    _M_init_facet_unchecked(new (&time_get_w) time_get<wchar_t>(1));\n+    _M_init_facet_unchecked(new (&messages_w) std::messages<wchar_t>(1));\n+#endif\n+\n+    _M_caches[numpunct<char>::id._M_id()] = __npc;\n+    _M_caches[moneypunct<char, false>::id._M_id()] = __mpcf;\n+    _M_caches[moneypunct<char, true>::id._M_id()] = __mpct;\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n+    _M_caches[numpunct<wchar_t>::id._M_id()] = __npw;\n+    _M_caches[moneypunct<wchar_t, false>::id._M_id()] = __mpwf;\n+    _M_caches[moneypunct<wchar_t, true>::id._M_id()] = __mpwt;\n+#endif\n+  }\n+\n+  void\n+  locale::_Impl::_M_init_extra(void* cloc, void* clocm,\n+                               const char* __s, const char* __smon)\n+  {\n+    auto& __cloc = *static_cast<__c_locale*>(cloc);\n+\n+    _M_init_facet_unchecked(new numpunct<char>(__cloc));\n+    _M_init_facet_unchecked(new std::collate<char>(__cloc));\n+    _M_init_facet_unchecked(new moneypunct<char, false>(__cloc, 0));\n+    _M_init_facet_unchecked(new moneypunct<char, true>(__cloc, 0));\n+    _M_init_facet_unchecked(new money_get<char>);\n+    _M_init_facet_unchecked(new money_put<char>);\n+    _M_init_facet_unchecked(new time_get<char>);\n+    _M_init_facet_unchecked(new std::messages<char>(__cloc, __s));\n+\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n+    auto& __clocm = *static_cast<__c_locale*>(clocm);\n+\n+    _M_init_facet_unchecked(new numpunct<wchar_t>(__cloc));\n+    _M_init_facet_unchecked(new std::collate<wchar_t>(__cloc));\n+    _M_init_facet_unchecked(new moneypunct<wchar_t, false>(__clocm, __smon));\n+    _M_init_facet_unchecked(new moneypunct<wchar_t, true>(__clocm, __smon));\n+    _M_init_facet_unchecked(new money_get<wchar_t>);\n+    _M_init_facet_unchecked(new money_put<wchar_t>);\n+    _M_init_facet_unchecked(new time_get<wchar_t>);\n+    _M_init_facet_unchecked(new std::messages<wchar_t>(__cloc, __s));\n+#endif\t  \n+  }\n+\n+// TODO should be in another file\n+  string\n+  locale::name() const\n+  {\n+    string __ret;\n+    if (!_M_impl->_M_names[0])\n+      __ret = '*';\n+    else if (_M_impl->_M_check_same_name())\n+      __ret = _M_impl->_M_names[0];\n+    else\n+      {\n+\t__ret.reserve(128);\n+\t__ret += _S_categories[0];\n+\t__ret += '=';\n+\t__ret += _M_impl->_M_names[0]; \n+\tfor (size_t __i = 1; __i < _S_categories_size; ++__i)\n+\t  {\n+\t    __ret += ';';\n+\t    __ret += _S_categories[__i];\n+\t    __ret += '=';\n+\t    __ret += _M_impl->_M_names[__i];\n+\t  }\n+      }\n+    return __ret;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}"}, {"sha": "1373f4b2dcc8ebb3635a84bebc7d5d2d80916afb", "filename": "libstdc++-v3/src/c++11/cow-shim_facets.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-shim_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-shim_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-shim_facets.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,35 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/locale_classes.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include \"cxx11-shim_facets.cc\""}, {"sha": "fdd57aa32c9d8877cd844b4f6ac800ed0b0a830a", "filename": "libstdc++-v3/src/c++11/cow-sstream-inst.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-sstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-sstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-sstream-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,34 @@\n+// Explicit instantiation file.\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include \"sstream-inst.cc\"\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif"}, {"sha": "1bec98c372ee19bcef015a555aab3b18c73a5d9c", "filename": "libstdc++-v3/src/c++11/cow-stdexcept.cc", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,153 @@\n+// Methods for Exception Support for -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 19.1  Exception classes\n+//\n+\n+// All exception classes still use the classic COW std::string.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#define _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS 1\n+#define __cow_string __cow_stringxxx\n+#include <stdexcept>\n+#include <system_error>\n+#undef __cow_string\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // Copy constructors and assignment operators defined using COW std::string\n+\n+  logic_error::logic_error(const logic_error& e) noexcept\n+  : _M_msg(e._M_msg) { }\n+\n+  logic_error& logic_error::operator=(const logic_error& e) noexcept\n+  { _M_msg = e._M_msg; return *this; }\n+\n+  runtime_error::runtime_error(const runtime_error& e) noexcept\n+  : _M_msg(e._M_msg) { }\n+\n+  runtime_error&\n+  runtime_error::operator=(const runtime_error& e) noexcept\n+  { _M_msg = e._M_msg; return *this; }\n+\n+  // New C++11 constructors:\n+\n+  logic_error::logic_error(const char* __arg)\n+  : exception(), _M_msg(__arg) { }\n+\n+  domain_error::domain_error(const char* __arg)\n+  : logic_error(__arg) { }\n+\n+  invalid_argument::invalid_argument(const char* __arg)\n+  : logic_error(__arg) { }\n+\n+  length_error::length_error(const char* __arg)\n+  : logic_error(__arg) { }\n+\n+  out_of_range::out_of_range(const char* __arg)\n+  : logic_error(__arg) { }\n+\n+  runtime_error::runtime_error(const char* __arg)\n+  : exception(), _M_msg(__arg) { }\n+\n+  range_error::range_error(const char* __arg)\n+  : runtime_error(__arg) { }\n+\n+  overflow_error::overflow_error(const char* __arg)\n+  : runtime_error(__arg) { }\n+\n+  underflow_error::underflow_error(const char* __arg)\n+  : runtime_error(__arg) { }\n+\n+#if _GLIBCXX_USE_DUAL_ABI\n+  // Converting constructor from COW std::string to SSO string.\n+  __sso_string::__sso_string(const string& s)\n+  : __sso_string(s.c_str(), s.length()) { }\n+\n+  // Redefine __cow_string so that we can define and export its members\n+  // in terms of the COW std::string.\n+  struct __cow_string\n+  {\n+    union {\n+      const char* _M_p;\n+      char _M_bytes[sizeof(_M_p)];\n+      std::string _M_str;\n+    };\n+\n+    __cow_string();\n+    __cow_string(const std::string& s);\n+    __cow_string(const char*, size_t n);\n+    __cow_string(const __cow_string&) noexcept;\n+    __cow_string& operator=(const __cow_string&) noexcept;\n+    ~__cow_string();\n+    __cow_string(__cow_string&&) noexcept;\n+    __cow_string& operator=(__cow_string&&) noexcept;\n+  };\n+\n+  __cow_string::__cow_string() : _M_str() { }\n+\n+  __cow_string::__cow_string(const std::string& s) : _M_str(s) { }\n+\n+  __cow_string::__cow_string(const char* s, size_t n) : _M_str(s, n) { }\n+\n+  __cow_string::__cow_string(const __cow_string& s) noexcept\n+  : _M_str(s._M_str) { }\n+\n+  __cow_string&\n+  __cow_string::operator=(const __cow_string& s) noexcept\n+  {\n+    _M_str = s._M_str;\n+    return *this;\n+  }\n+\n+  __cow_string::~__cow_string() { _M_str.~basic_string(); }\n+\n+  __cow_string::__cow_string(__cow_string&& s) noexcept\n+  : _M_str(std::move(s._M_str)) { }\n+\n+  __cow_string&\n+  __cow_string::operator=(__cow_string&& s) noexcept\n+  {\n+    _M_str = std::move(s._M_str);\n+    return *this;\n+  }\n+\n+  static_assert(sizeof(__cow_string) == sizeof(std::string),\n+                \"sizeof(std::string) has changed\");\n+  static_assert(alignof(__cow_string) == alignof(std::string),\n+                \"alignof(std::string) has changed\");\n+#endif\n+\n+  // Return error_category::message() as an SSO string\n+  __sso_string\n+  error_category::_M_message(int i) const\n+  {\n+    string msg = this->message(i);\n+    return {msg.c_str(), msg.length()};\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "45811cbbb22e2130108cd01fe18ea4db88e18a72", "filename": "libstdc++-v3/src/c++11/cow-string-inst.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,120 @@\n+// Reference-counted COW string instantiations -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 21  Strings library\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include \"string-inst.cc\"\n+\n+#include <istream>\n+#include <ostream>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // These came from c++98/misc-inst.cc, repeat them for COW string\n+  // string related to iostreams.\n+  template \n+    basic_istream<char>& \n+    operator>>(basic_istream<char>&, string&);\n+  template \n+    basic_ostream<char>& \n+    operator<<(basic_ostream<char>&, const string&);\n+  template \n+    basic_istream<char>& \n+    getline(basic_istream<char>&, string&, char);\n+  template \n+    basic_istream<char>& \n+    getline(basic_istream<char>&, string&);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#ifdef  _GLIBCXX_USE_C99_STDINT_TR1\n+#include <random>\n+#if defined __i386__ || defined __x86_64__\n+# include <cpuid.h>\n+#endif\n+#include <cstdio>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+  void\n+  random_device::_M_init(const std::string& token)\n+  {\n+    const char *fname = token.c_str();\n+\n+    if (token == \"default\")\n+      {\n+#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n+\tunsigned int eax, ebx, ecx, edx;\n+\t// Check availability of cpuid and, for now at least, also the\n+\t// CPU signature for Intel's\n+\tif (__get_cpuid_max(0, &ebx) > 0 && ebx == signature_INTEL_ebx)\n+\t  {\n+\t    __cpuid(1, eax, ebx, ecx, edx);\n+\t    if (ecx & bit_RDRND)\n+\t      {\n+\t\t_M_file = nullptr;\n+\t\treturn;\n+\t      }\n+\t  }\n+#endif\n+\n+\tfname = \"/dev/urandom\";\n+      }\n+    else if (token != \"/dev/urandom\" && token != \"/dev/random\")\n+    fail:\n+      std::__throw_runtime_error(__N(\"random_device::\"\n+\t\t\t\t     \"random_device(const std::string&)\"));\n+\n+    _M_file = static_cast<void*>(std::fopen(fname, \"rb\"));\n+    if (!_M_file)\n+      goto fail;\n+  }\n+\n+  void\n+  random_device::_M_init_pretr1(const std::string& token)\n+  {\n+    unsigned long __seed = 5489UL;\n+    if (token != \"mt19937\")\n+      {\n+\tconst char* __nptr = token.c_str();\n+\tchar* __endptr;\n+\t__seed = std::strtoul(__nptr, &__endptr, 0);\n+\tif (*__nptr == '\\0' || *__endptr != '\\0')\n+\t  std::__throw_runtime_error(__N(\"random_device::random_device\"\n+\t\t\t\t\t \"(const std::string&)\"));\n+      }\n+    _M_mt.seed(__seed);\n+  }\n+} // namespace\n+#endif"}, {"sha": "de1709dbe8caa47dbb5bd1e22a206edd78e7faae", "filename": "libstdc++-v3/src/c++11/cow-wstring-inst.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,64 @@\n+// Reference-counted COW wide string instantiations -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 21  Strings library\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include <bits/c++config.h>\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+#define C wchar_t\n+#include \"string-inst.cc\"\n+\n+#include <ostream>\n+#include <istream>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // XXX these came from c++98/misc-inst.cc, repeat them for COW string\n+  // string related to iostreams\n+  template \n+    basic_istream<wchar_t>& \n+    operator>>(basic_istream<wchar_t>&, wstring&);\n+  template \n+    basic_ostream<wchar_t>& \n+    operator<<(basic_ostream<wchar_t>&, const wstring&);\n+  template \n+    basic_istream<wchar_t>& \n+    getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n+  template \n+    basic_istream<wchar_t>& \n+    getline(basic_istream<wchar_t>&, wstring&);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+#endif"}, {"sha": "2b710d2a62fbd2d78049656e6f2b737441d76302", "filename": "libstdc++-v3/src/c++11/cxx11-hash_tr1.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-hash_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-hash_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-hash_tr1.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,59 @@\n+// std::tr1::hash definitions with new string -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <string>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+#include <tr1/functional>\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+  namespace tr1\n+  {\n+  template<>\n+    size_t\n+    hash<string>::operator()(string __s) const\n+    { return _Fnv_hash::hash(__s.data(), __s.length()); }\n+\n+  template<>\n+    size_t\n+    hash<const string&>::operator()(const string& __s) const\n+    { return _Fnv_hash::hash(__s.data(), __s.length()); }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    size_t\n+    hash<wstring>::operator()(wstring __s) const\n+    { return _Fnv_hash::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n+\n+  template<>\n+    size_t\n+    hash<const wstring&>::operator()(const wstring& __s) const\n+    { return _Fnv_hash::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n+#endif\n+  }\n+}"}, {"sha": "0663de2fa957efacd83d1c55083ec6f50d2dc535", "filename": "libstdc++-v3/src/c++11/cxx11-ios_failure.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-ios_failure.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,8 +26,13 @@\n // ISO C++ 14882:2011: 27.5.3.1.1  Class ios_base::failure\n //\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n #include <ios>\n \n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n namespace\n {\n   struct io_error_category : std::error_category"}, {"sha": "9c1a1c1333f9ba017b51dd6e0297ae079d1eef27", "filename": "libstdc++-v3/src/c++11/cxx11-locale-inst.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-locale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-locale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-locale-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// Facet instantiations using new ABI strings.\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <bits/c++config.h>\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+#ifndef C\n+# define C char\n+# define C_is_char\n+#endif\n+# include \"../c++98/locale-inst.cc\""}, {"sha": "92990a9201c46fcd41146423a4817bd4f3059feb", "filename": "libstdc++-v3/src/c++11/cxx11-shim_facets.cc", "status": "added", "additions": 813, "deletions": 0, "changes": 813, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-shim_facets.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,813 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// This file defines classes that behave like the standard predefined locale\n+// facets (collate, money_get etc.) except that they forward all virtual\n+// functions to another facet which uses a different std::string ABI,\n+// converting between string types as needed.\n+// When a user replaces one of the relevant facets the corresponding shim in\n+// this file is used so that the replacement facet can be used (via the shim)\n+// in code that uses the other std::string ABI from the replacing code.\n+\n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+# define _GLIBCXX_USE_CXX11_ABI 1\n+#endif\n+#include <locale>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+  // Base class of facet shims, holds a reference to the underlying facet\n+  // that the shim forwards to.\n+  class locale::facet::__shim\n+  {\n+  public:\n+    const facet* _M_get() const { return _M_facet; }\n+\n+    __shim(const __shim&) = delete;\n+    __shim& operator=(const __shim&) = delete;\n+\n+  protected:\n+    explicit\n+    __shim(const facet* __f) : _M_facet(__f) { __f->_M_add_reference(); }\n+\n+    ~__shim() { _M_facet->_M_remove_reference(); }\n+\n+  private:\n+    const facet* _M_facet;\n+  };\n+\n+namespace __facet_shims\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  namespace // unnamed\n+  {\n+    template<typename C>\n+      void __destroy_string(void* p)\n+      {\n+\tstatic_cast<std::basic_string<C>*>(p)->~basic_string();\n+      }\n+  } // namespace\n+\n+  // Manages a buffer of uninitialized memory that can store a std::string\n+  // or std::wstring, using either ABI, and convert to the other ABI.\n+  class __any_string\n+  {\n+    struct __attribute__((may_alias)) __str_rep\n+    {\n+      union {\n+\tconst void* _M_p;\n+\tchar* _M_pc;\n+\twchar_t* _M_pwc;\n+      };\n+      size_t _M_len;\n+      char _M_unused[16];\n+\n+      operator const char*() const { return _M_pc; }\n+      operator const wchar_t*() const { return _M_pwc; }\n+    };\n+    union {\n+      __str_rep _M_str;\n+      char _M_bytes[sizeof(__str_rep)];\n+    };\n+    using __dtor_func = void(*)(void*);\n+    __dtor_func _M_dtor = nullptr;\n+\n+#if _GLIBCXX_USE_CXX11_ABI\n+    // SSO strings overlay the entire __str_rep structure.\n+    static_assert(sizeof(std::string) == sizeof(__str_rep),\n+\t\t  \"std::string changed size!\");\n+#else\n+    // COW strings overlay just the pointer, the length is stored manually.\n+    static_assert(sizeof(std::string) == sizeof(__str_rep::_M_p),\n+\t\t  \"std::string changed size!\");\n+#endif\n+# ifdef _GLIBCXX_USE_WCHAR_T\n+    static_assert(sizeof(std::wstring) == sizeof(std::string),\n+\t\t  \"std::wstring and std::string are different sizes!\");\n+# endif\n+\n+  public:\n+    __any_string() = default;\n+    ~__any_string() { if (_M_dtor) _M_dtor(_M_bytes); }\n+\n+    __any_string(const __any_string&) = delete;\n+    __any_string& operator=(const __any_string&) = delete;\n+\n+    // Store a string (and its length if needed) in the buffer and\n+    // set _M_dtor to the function that runs the right destructor.\n+    template<typename C>\n+      __any_string&\n+      operator=(const basic_string<C>& s)\n+      {\n+\tif (_M_dtor)\n+\t  _M_dtor(_M_bytes);\n+\t::new(_M_bytes) basic_string<C>(s);\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+\t_M_str._M_len = s.length();\n+#endif\n+\t_M_dtor = __destroy_string<C>;\n+\treturn *this;\n+      }\n+\n+    // Create a new string with a copy of the characters in the stored string.\n+    // The returned object will match the caller's string ABI, even when the\n+    // stored string doesn't.\n+    template<typename C>\n+      operator basic_string<C>() const\n+      {\n+\tif (!_M_dtor)\n+\t  __throw_logic_error(\"uninitialized __any_string\");\n+\treturn basic_string<C>(static_cast<const C*>(_M_str), _M_str._M_len);\n+      }\n+  };\n+\n+  // This file is compiled twice, with and without this macro defined.\n+  // Define tag types to distinguish between the two cases and to allow\n+  // overloading on the tag.\n+  using current_abi = __bool_constant<_GLIBCXX_USE_CXX11_ABI>;\n+  using other_abi = __bool_constant<!_GLIBCXX_USE_CXX11_ABI>;\n+\n+  using facet = locale::facet;\n+\n+  // Declare the functions that shims defined in this file will call to\n+  // perform work in the context of the other ABI.\n+  // These will be defined when this file is recompiled for the other ABI\n+  // (at which point what is now \"current_abi\" will become \"other_abi\").\n+\n+  template<typename C>\n+    void\n+    __numpunct_fill_cache(other_abi, const facet*, __numpunct_cache<C>*,\n+\t\t\t  const char*&, size_t&);\n+\n+  template<typename C>\n+    int\n+    __collate_compare(other_abi, const facet*, const C*, const C*,\n+\t\t      const C*, const C*);\n+\n+  template<typename C>\n+    void\n+    __collate_transform(other_abi, const facet*, __any_string&,\n+\t\t\tconst C*, const C*);\n+\n+  template<typename C>\n+    time_base::dateorder\n+    __time_get_dateorder(other_abi, const facet* f);\n+\n+  template<typename C>\n+    istreambuf_iterator<C>\n+    __time_get(other_abi, const facet* f,\n+\t       istreambuf_iterator<C> beg, istreambuf_iterator<C> end,\n+\t       ios_base& io, ios_base::iostate& err, tm* t, char which);\n+\n+  template<typename C, bool Intl>\n+    void\n+    __moneypunct_fill_cache(other_abi, const facet*,\n+\t\t\t    __moneypunct_cache<C, Intl>*);\n+\n+  template<typename C>\n+    istreambuf_iterator<C>\n+    __money_get(other_abi, const facet*,\n+\t\tistreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\tbool, ios_base&, ios_base::iostate&,\n+\t\tlong double*, __any_string*);\n+\n+  template<typename C>\n+    ostreambuf_iterator<C>\n+    __money_put(other_abi, const facet*, ostreambuf_iterator<C>, bool,\n+\t\tios_base&, C, long double, const __any_string*);\n+\n+  template<typename C>\n+    messages_base::catalog\n+    __messages_open(other_abi, const facet*, const char*, size_t,\n+\t\t    const locale&);\n+\n+  template<typename C>\n+    void\n+    __messages_get(other_abi, const facet*, __any_string&,\n+\t\t   messages_base::catalog, int, int, const C*, size_t);\n+\n+  template<typename C>\n+    void\n+    __messages_close(other_abi, const facet*, messages_base::catalog);\n+\n+  namespace // unnamed\n+  {\n+    template<typename _CharT>\n+      struct numpunct_shim : std::numpunct<_CharT>, facet::__shim\n+      {\n+\ttypedef typename numpunct<_CharT>::__cache_type __cache_type;\n+\n+\t// f must point to a type derived from numpunct<C>[abi:other]\n+\tnumpunct_shim(const facet* f, __cache_type* c = new __cache_type)\n+\t: std::numpunct<_CharT>(c), __shim(f), _M_cache(c)\n+\t{\n+\t  __numpunct_fill_cache(other_abi{}, f, c, _M_grouping,\n+\t\t\t\t_M_grouping_size);\n+\t}\n+\n+\t~numpunct_shim() { delete[] _M_grouping; }\n+\n+\tvirtual string\n+\tdo_grouping() const\n+\t{ return string(_M_grouping, _M_grouping_size); }\n+\n+\t// No need to override other virtual functions, the base definitions\n+\t// will return the cached data.\n+\n+\t__cache_type* _M_cache;\n+\t// numpunct uses __numpunct_cache<C>::_M_grouping for its own purposes\n+\t// so we can't store that in the cache\n+\tconst char* _M_grouping;\n+\tsize_t _M_grouping_size;\n+      };\n+\n+    template class numpunct_shim<char>;\n+    template class numpunct_shim<wchar_t>;\n+\n+    template<typename _CharT>\n+      struct collate_shim : std::collate<_CharT>, facet::__shim\n+      {\n+\ttypedef basic_string<_CharT>\tstring_type;\n+\n+\t// f must point to a type derived from collate<C>[abi:other]\n+\tcollate_shim(const facet* f) : __shim(f) { }\n+\n+\tvirtual int\n+\tdo_compare(const _CharT* lo1, const _CharT* hi1,\n+\t\t   const _CharT* lo2, const _CharT* hi2) const\n+\t{\n+\t  return __collate_compare(other_abi{}, _M_get(),\n+\t\t\t\t   lo1, hi1, lo2, hi2);\n+\t}\n+\n+\tvirtual string_type\n+\tdo_transform(const _CharT* lo, const _CharT* hi) const\n+\t{\n+\t  __any_string st;\n+\t  __collate_transform(other_abi{}, _M_get(), st, lo, hi);\n+\t  return st;\n+\t}\n+      };\n+\n+    template class collate_shim<char>;\n+    template class collate_shim<wchar_t>;\n+\n+    template<typename _CharT>\n+      struct time_get_shim : std::time_get<_CharT>, facet::__shim\n+      {\n+\ttypedef typename std::time_get<_CharT>::iter_type iter_type;\n+\ttypedef typename std::time_get<_CharT>::char_type char_type;\n+\n+\t// f must point to a type derived from time_get<C>[abi:other]\n+\ttime_get_shim(const facet* f) : __shim(f) { }\n+\n+\tvirtual time_base::dateorder\n+\tdo_date_order() const\n+\t{ return __time_get_dateorder<_CharT>(other_abi{}, _M_get()); }\n+\n+\tvirtual iter_type\n+\tdo_get_time(iter_type beg, iter_type end, ios_base& io,\n+\t\t    ios_base::iostate& err, tm* t) const\n+\t{\n+\t  return __time_get(other_abi{}, _M_get(), beg, end, io, err, t,\n+\t\t\t    't');\n+\t}\n+\n+\tvirtual iter_type\n+\tdo_get_date(iter_type beg, iter_type end, ios_base& io,\n+\t\t    ios_base::iostate& err, tm* t) const\n+\t{\n+\t  return __time_get(other_abi{}, _M_get(), beg, end, io, err, t,\n+\t\t\t    'd');\n+\t}\n+\n+\tvirtual iter_type\n+\tdo_get_weekday(iter_type beg, iter_type end, ios_base& io,\n+\t\t       ios_base::iostate& err, tm* t) const\n+\t{\n+\t  return __time_get(other_abi{}, _M_get(), beg, end, io, err, t,\n+\t\t\t    'w');\n+\t}\n+\n+\tvirtual iter_type\n+\tdo_get_monthname(iter_type beg, iter_type end, ios_base& io,\n+\t\t\t ios_base::iostate& err, tm* t) const\n+\t{\n+\t  return __time_get(other_abi{}, _M_get(), beg, end, io, err, t,\n+\t\t\t    'm');\n+\t}\n+\n+\tvirtual iter_type\n+\tdo_get_year(iter_type beg, iter_type end, ios_base& io,\n+\t\t    ios_base::iostate& err, tm* t) const\n+\t{\n+\t  return __time_get(other_abi{}, _M_get(), beg, end, io, err, t,\n+\t\t\t    'y');\n+\t}\n+      };\n+\n+    template<typename _CharT, bool _Intl>\n+      struct moneypunct_shim : std::moneypunct<_CharT, _Intl>, facet::__shim\n+      {\n+\ttypedef typename moneypunct<_CharT, _Intl>::__cache_type __cache_type;\n+\n+\t// f must point to a type derived from moneypunct<C>[abi:other]\n+\tmoneypunct_shim(const facet* f, __cache_type* c = new __cache_type)\n+\t: std::moneypunct<_CharT, _Intl>(c), __shim(f), _M_cache(c)\n+\t{\n+\t  __moneypunct_fill_cache(other_abi{}, f, c);\n+\t}\n+\n+\t~moneypunct_shim()\n+\t{\n+\t  // stop GNU locale's ~moneypunct() from freeing these strings\n+\t  _M_cache->_M_grouping_size = 0;\n+\t  _M_cache->_M_curr_symbol_size = 0;\n+\t  _M_cache->_M_positive_sign_size = 0;\n+\t  _M_cache->_M_negative_sign_size = 0;\n+\t}\n+\n+\t// No need to override any virtual functions, the base definitions\n+\t// will return the cached data.\n+\n+\t__cache_type* _M_cache;\n+      };\n+\n+    template class moneypunct_shim<char, true>;\n+    template class moneypunct_shim<char, false>;\n+    template class moneypunct_shim<wchar_t, true>;\n+    template class moneypunct_shim<wchar_t, false>;\n+\n+    template<typename _CharT>\n+      struct money_get_shim : std::money_get<_CharT>, facet::__shim\n+      {\n+\ttypedef typename std::money_get<_CharT>::iter_type iter_type;\n+\ttypedef typename std::money_get<_CharT>::char_type char_type;\n+\ttypedef typename std::money_get<_CharT>::string_type string_type;\n+\n+\t// f must point to a type derived from money_get<C>[abi:other]\n+\tmoney_get_shim(const facet* f) : __shim(f) { }\n+\n+\tvirtual iter_type\n+\tdo_get(iter_type s, iter_type end, bool intl, ios_base& io,\n+\t       ios_base::iostate& err, long double& units) const\n+\t{\n+\t  ios_base::iostate err2 = ios_base::goodbit;\n+\t  long double units2;\n+\t  s = __money_get(other_abi{}, _M_get(), s, end, intl, io, err2,\n+\t\t\t  &units2, nullptr);\n+\t  if (err2 == ios_base::goodbit)\n+\t    units = units2;\n+\t  else\n+\t    err = err2;\n+\t  return s;\n+\t}\n+\n+\tvirtual iter_type\n+\tdo_get(iter_type s, iter_type end, bool intl, ios_base& io,\n+\t       ios_base::iostate& err, string_type& digits) const\n+\t{\n+\t  __any_string st;\n+\t  ios_base::iostate err2 = ios_base::goodbit;\n+\t  s = __money_get(other_abi{}, _M_get(), s, end, intl, io, err2,\n+\t\t\t  nullptr, &st);\n+\t  if (err2 == ios_base::goodbit)\n+\t    digits = st;\n+\t  else\n+\t    err = err2;\n+\t  return s;\n+\t}\n+      };\n+\n+    template class money_get_shim<char>;\n+    template class money_get_shim<wchar_t>;\n+\n+    template<typename _CharT>\n+      struct money_put_shim : std::money_put<_CharT>, facet::__shim\n+      {\n+\ttypedef typename std::money_put<_CharT>::iter_type iter_type;\n+\ttypedef typename std::money_put<_CharT>::char_type char_type;\n+\ttypedef typename std::money_put<_CharT>::string_type string_type;\n+\n+\t// f must point to a type derived from money_put<C>[abi:other]\n+\tmoney_put_shim(const facet* f) : __shim(f) { }\n+\n+\tvirtual iter_type\n+\tdo_put(iter_type s, bool intl, ios_base& io,\n+\t       char_type fill, long double units) const\n+\t{\n+\t  return __money_put(other_abi{}, _M_get(), s, intl, io, fill, units,\n+\t\t\t     nullptr);\n+\t}\n+\n+\tvirtual iter_type\n+\tdo_put(iter_type s, bool intl, ios_base& io,\n+\t       char_type fill, const string_type& digits) const\n+\t{\n+\t  __any_string st;\n+\t  st = digits;\n+\t  return __money_put(other_abi{}, _M_get(), s, intl, io, fill, 0.L,\n+\t\t\t     &st);\n+\t}\n+      };\n+\n+    template class money_put_shim<char>;\n+    template class money_put_shim<wchar_t>;\n+\n+\n+    template<typename _CharT>\n+      struct messages_shim : std::messages<_CharT>, facet::__shim\n+      {\n+\ttypedef messages_base::catalog  catalog;\n+\ttypedef basic_string<_CharT>\tstring_type;\n+\n+\t// f must point to a type derived from messages<C>[abi:other]\n+\tmessages_shim(const facet* f) : __shim(f) { }\n+\n+\tvirtual catalog\n+\tdo_open(const basic_string<char>& s, const locale& l) const\n+\t{\n+\t  return __messages_open<_CharT>(other_abi{}, _M_get(),\n+\t\t\t\t\t s.c_str(), s.size(), l);\n+\t}\n+\n+\tvirtual string_type\n+\tdo_get(catalog c, int set, int msgid, const string_type& dfault) const\n+\t{\n+\t  __any_string st;\n+\t  __messages_get(other_abi{}, _M_get(), st, c, set, msgid,\n+\t\t\t dfault.c_str(), dfault.size());\n+\t  return st;\n+\t}\n+\n+\tvirtual void\n+\tdo_close(catalog c) const\n+\t{\n+\t  __messages_close<_CharT>(other_abi{}, _M_get(), c);\n+\t}\n+      };\n+\n+    template class messages_shim<char>;\n+    template class messages_shim<wchar_t>;\n+\n+    template<typename C>\n+      inline size_t\n+      __copy(const C*& dest, const basic_string<C>& s)\n+      {\n+\tauto len = s.length();\n+\tC* p = new C[len+1];\n+\ts.copy(p, len);\n+\tp[len] = '\\0';\n+\tdest = p;\n+\treturn len;\n+      }\n+\n+  } // namespace\n+\n+  // Now define and instantiate the functions that will be called by the\n+  // shim facets defined when this file is recompiled for the other ABI.\n+\n+  template<typename C>\n+    void\n+    __numpunct_fill_cache(current_abi, const facet* f, __numpunct_cache<C>* c,\n+\t\t\t  const char*& grouping, size_t& grouping_size)\n+    {\n+      auto* m = static_cast<const numpunct<C>*>(f);\n+\n+      c->_M_decimal_point = m->decimal_point();\n+      c->_M_thousands_sep = m->thousands_sep();\n+\n+      c->_M_truename = nullptr;\n+      c->_M_falsename = nullptr;\n+      // set _M_allocated so that if any allocation fails the previously\n+      // allocated strings will be deleted in ~__numpunct_c()\n+      c->_M_allocated = true;\n+\n+      c->_M_truename_size = __copy(c->_M_truename, m->truename());\n+      c->_M_falsename_size = __copy(c->_M_falsename, m->falsename());\n+      // Set grouping last as it is only deleted by ~numpunct_shim() which\n+      // won't run if this function throws an exception.\n+      grouping_size = __copy(grouping, m->grouping());\n+    }\n+\n+  template void\n+  __numpunct_fill_cache(current_abi, const facet*, __numpunct_cache<char>*,\n+\t\t\tconst char*&, size_t&);\n+\n+  template void\n+  __numpunct_fill_cache(current_abi, const facet*, __numpunct_cache<wchar_t>*,\n+\t\t\tconst char*&, size_t&);\n+\n+  template<typename C>\n+    int\n+    __collate_compare(current_abi, const facet* f, const C* lo1, const C* hi1,\n+\t\t      const C* lo2, const C* hi2)\n+    {\n+      return static_cast<const collate<C>*>(f)->compare(lo1, hi1, lo2, hi2);\n+    }\n+\n+  template int\n+  __collate_compare(current_abi, const facet*, const char*, const char*,\n+\t\t    const char*, const char*);\n+\n+  template int\n+  __collate_compare(current_abi, const facet*, const wchar_t*, const wchar_t*,\n+\t\t    const wchar_t*, const wchar_t*);\n+\n+  template<typename C>\n+    void\n+    __collate_transform(current_abi, const facet* f, __any_string& st,\n+\t\t\tconst C* __lo, const C* __hi)\n+    {\n+      auto* c = static_cast<const collate<C>*>(f);\n+      st = c->transform(__lo, __hi);\n+    }\n+\n+  template void\n+  __collate_transform(current_abi, const facet*, __any_string&,\n+\t\t      const char*, const char*);\n+\n+  template void\n+  __collate_transform(current_abi, const facet*, __any_string&,\n+\t\t      const wchar_t*, const wchar_t*);\n+\n+  template<typename C, bool Intl>\n+    void\n+    __moneypunct_fill_cache(current_abi, const facet* f,\n+\t\t\t    __moneypunct_cache<C, Intl>* c)\n+    {\n+      auto* m = static_cast<const moneypunct<C, Intl>*>(f);\n+\n+      c->_M_decimal_point = m->decimal_point();\n+      c->_M_thousands_sep = m->thousands_sep();\n+      c->_M_frac_digits = m->frac_digits();\n+\n+      c->_M_grouping = nullptr;\n+      c->_M_curr_symbol = nullptr;\n+      c->_M_positive_sign = nullptr;\n+      c->_M_negative_sign = nullptr;\n+      // set _M_allocated so that if any allocation fails the previously\n+      // allocated strings will be deleted in ~__moneypunct_c()\n+      c->_M_allocated = true;\n+\n+      c->_M_grouping_size = __copy(c->_M_grouping, m->grouping());\n+      c->_M_curr_symbol_size = __copy(c->_M_curr_symbol, m->curr_symbol());\n+      c->_M_positive_sign_size\n+\t= __copy(c->_M_positive_sign, m->positive_sign());\n+      c->_M_negative_sign_size\n+\t= __copy(c->_M_negative_sign, m->negative_sign());\n+\n+      c->_M_pos_format = m->pos_format();\n+      c->_M_neg_format = m->neg_format();\n+    }\n+\n+  template void\n+  __moneypunct_fill_cache(current_abi, const facet*,\n+\t\t\t  __moneypunct_cache<char, true>*);\n+\n+  template void\n+  __moneypunct_fill_cache(current_abi, const facet*,\n+\t\t\t  __moneypunct_cache<char, false>*);\n+\n+  template void\n+  __moneypunct_fill_cache(current_abi, const facet*,\n+\t\t\t  __moneypunct_cache<wchar_t, true>*);\n+\n+  template void\n+  __moneypunct_fill_cache(current_abi, const facet*,\n+\t\t\t  __moneypunct_cache<wchar_t, false>*);\n+\n+  template<typename C>\n+    messages_base::catalog\n+    __messages_open(current_abi, const facet* f, const char* s, size_t n,\n+\t\t    const locale& l)\n+    {\n+      auto* m = static_cast<const messages<C>*>(f);\n+      string str(s, n);\n+      return m->open(str, l);\n+    }\n+\n+  template messages_base::catalog\n+  __messages_open<char>(current_abi, const facet*, const char*, size_t,\n+\t\t\tconst locale&);\n+\n+  template messages_base::catalog\n+  __messages_open<wchar_t>(current_abi, const facet*, const char*, size_t,\n+\t\t\t   const locale&);\n+\n+  template<typename C>\n+    void\n+    __messages_get(current_abi, const facet* f, __any_string& st,\n+\t\t   messages_base::catalog c, int set, int msgid,\n+\t\t   const C* s, size_t n)\n+    {\n+      auto* m = static_cast<const messages<C>*>(f);\n+      st = m->get(c, set, msgid, basic_string<C>(s, n));\n+    }\n+\n+  template void\n+  __messages_get(current_abi, const facet*, __any_string&,\n+\t\t messages_base::catalog, int, int, const char*, size_t);\n+\n+  template void\n+  __messages_get(current_abi, const facet*, __any_string&,\n+\t\t messages_base::catalog, int, int, const wchar_t*, size_t);\n+\n+  template<typename C>\n+    void\n+    __messages_close(current_abi, const facet* f, messages_base::catalog c)\n+    {\n+      static_cast<const messages<C>*>(f)->close(c);\n+    }\n+\n+  template void\n+  __messages_close<char>(current_abi, const facet*, messages_base::catalog c);\n+\n+  template void\n+  __messages_close<wchar_t>(current_abi, const facet*,\n+\t\t\t    messages_base::catalog c);\n+\n+  template<typename C>\n+    time_base::dateorder\n+    __time_get_dateorder(current_abi, const facet* f)\n+    { return static_cast<const time_get<C>*>(f)->date_order(); }\n+\n+  template time_base::dateorder\n+  __time_get_dateorder<char>(current_abi, const facet*);\n+\n+  template time_base::dateorder\n+  __time_get_dateorder<wchar_t>(current_abi, const facet*);\n+\n+  template<typename C>\n+    istreambuf_iterator<C>\n+    __time_get(current_abi, const facet* f,\n+\t       istreambuf_iterator<C> beg, istreambuf_iterator<C> end,\n+\t       ios_base& io, ios_base::iostate& err, tm* t, char which)\n+    {\n+      auto* g = static_cast<const time_get<C>*>(f);\n+      switch(which)\n+      {\n+      case 't':\n+\treturn g->get_time(beg, end, io, err, t);\n+      case 'd':\n+\treturn g->get_date(beg, end, io, err, t);\n+      case 'w':\n+\treturn g->get_weekday(beg, end, io, err, t);\n+      case 'm':\n+\treturn g->get_monthname(beg, end, io, err, t);\n+      case 'y':\n+\treturn g->get_year(beg, end, io, err, t);\n+      default:\n+\t__builtin_unreachable();\n+      }\n+    }\n+\n+  template istreambuf_iterator<char>\n+  __time_get(current_abi, const facet*,\n+\t     istreambuf_iterator<char>, istreambuf_iterator<char>,\n+\t     ios_base&, ios_base::iostate&, tm*, char);\n+\n+  template istreambuf_iterator<wchar_t>\n+  __time_get(current_abi, const facet*,\n+\t     istreambuf_iterator<wchar_t>, istreambuf_iterator<wchar_t>,\n+\t     ios_base&, ios_base::iostate&, tm*, char);\n+\n+  template<typename C>\n+    istreambuf_iterator<C>\n+    __money_get(current_abi, const facet* f,\n+\t\tistreambuf_iterator<C> s, istreambuf_iterator<C> end,\n+\t\tbool intl, ios_base& str, ios_base::iostate& err,\n+\t\tlong double* units, __any_string* digits)\n+    {\n+      auto* m = static_cast<const money_get<C>*>(f);\n+      if (units)\n+\treturn m->get(s, end, intl, str, err, *units);\n+      basic_string<C> digits2;\n+      s = m->get(s, end, intl, str, err, digits2);\n+      if (err == ios_base::goodbit)\n+\t*digits = digits2;\n+      return s;\n+    }\n+\n+  template istreambuf_iterator<char>\n+  __money_get(current_abi, const facet*,\n+\t      istreambuf_iterator<char>, istreambuf_iterator<char>,\n+\t      bool, ios_base&, ios_base::iostate&,\n+\t      long double*, __any_string*);\n+\n+  template istreambuf_iterator<wchar_t>\n+  __money_get(current_abi, const facet*,\n+\t      istreambuf_iterator<wchar_t>, istreambuf_iterator<wchar_t>,\n+\t      bool, ios_base&, ios_base::iostate&,\n+\t      long double*, __any_string*);\n+\n+  template<typename C>\n+    ostreambuf_iterator<C>\n+    __money_put(current_abi, const facet* f, ostreambuf_iterator<C> s,\n+\t\tbool intl, ios_base& io, C fill, long double units,\n+\t\tconst __any_string* digits)\n+    {\n+      auto* m = static_cast<const money_put<C>*>(f);\n+      if (digits)\n+\treturn m->put(s, intl, io, fill, *digits);\n+      else\n+\treturn m->put(s, intl, io, fill, units);\n+    }\n+\n+  template ostreambuf_iterator<char>\n+  __money_put(current_abi, const facet*, ostreambuf_iterator<char>,\n+\t\tbool, ios_base&, char, long double, const __any_string*);\n+\n+  template ostreambuf_iterator<wchar_t>\n+  __money_put(current_abi, const facet*, ostreambuf_iterator<wchar_t>,\n+\t\tbool, ios_base&, wchar_t, long double, const __any_string*);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace __facet_shims\n+\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  // Create a new shim facet of type WHICH that forwards calls to F.\n+  // F is the replacement facet provided by the user, WHICH is the ID of\n+  // F's \"other ABI twin\" which we are replacing with a shim.\n+  const locale::facet*\n+#if _GLIBCXX_USE_CXX11_ABI\n+  locale::facet::_M_sso_shim(const locale::id* which) const\n+#else\n+  locale::facet::_M_cow_shim(const locale::id* which) const\n+#endif\n+  {\n+    using namespace __facet_shims;\n+\n+    // If this is already a shim just use its underlying facet.\n+    if (auto* p = dynamic_cast<const __shim*>(this))\n+      return p->_M_get();\n+\n+    if (which == &numpunct<char>::id)\n+      return new numpunct_shim<char>{this};\n+    if (which == &std::collate<char>::id)\n+      return new collate_shim<char>{this};\n+    if (which == &time_get<char>::id)\n+      return new time_get_shim<char>{this};\n+    if (which == &money_get<char>::id)\n+      return new money_get_shim<char>{this};\n+    if (which == &money_put<char>::id)\n+      return new money_put_shim<char>{this};\n+    if (which == &moneypunct<char, true>::id)\n+      return new moneypunct_shim<char, true>{this};\n+    if (which == &moneypunct<char, false>::id)\n+      return new moneypunct_shim<char, false>{this};\n+    if (which == &std::messages<char>::id)\n+      return new messages_shim<char>{this};\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    if (which == &numpunct<wchar_t>::id)\n+      return new numpunct_shim<wchar_t>{this};\n+    if (which == &std::collate<wchar_t>::id)\n+      return new collate_shim<wchar_t>{this};\n+    if (which == &time_get<wchar_t>::id)\n+      return new time_get_shim<wchar_t>{this};\n+    if (which == &money_get<wchar_t>::id)\n+      return new money_get_shim<wchar_t>{this};\n+    if (which == &money_put<wchar_t>::id)\n+      return new money_put_shim<wchar_t>{this};\n+    if (which == &moneypunct<wchar_t, true>::id)\n+      return new moneypunct_shim<wchar_t, true>{this};\n+    if (which == &moneypunct<wchar_t, false>::id)\n+      return new moneypunct_shim<wchar_t, false>{this};\n+    if (which == &std::messages<wchar_t>::id)\n+      return new messages_shim<wchar_t>{this};\n+#endif\n+    __throw_logic_error(\"cannot create shim for unknown locale::facet\");\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std"}, {"sha": "64158c7c552cc8ddcd420b2012508099e6282642", "filename": "libstdc++-v3/src/c++11/cxx11-stdexcept.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-stdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-stdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-stdexcept.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,78 @@\n+// Methods for Exception Support for -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 19.1  Exception classes\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <stdexcept>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // These constructors take an abi-tagged std::string and use it to\n+  // initialize an untagged COW std::string in _M_msg.\n+\n+  logic_error::logic_error(const string& __arg)\n+  : _M_msg(__arg) { }\n+\n+  runtime_error::runtime_error(const string& __arg)\n+  : _M_msg(__arg) { }\n+\n+  // These constructors take an abi-tagged std::string and pass it to the\n+  // base class constructors defined above.\n+\n+  domain_error::domain_error(const string& __arg)\n+  : logic_error(__arg) { }\n+\n+  invalid_argument::invalid_argument(const string& __arg)\n+  : logic_error(__arg) { }\n+\n+  length_error::length_error(const string& __arg)\n+  : logic_error(__arg) { }\n+\n+  out_of_range::out_of_range(const string& __arg)\n+  : logic_error(__arg) { }\n+\n+  range_error::range_error(const string& __arg)\n+  : runtime_error(__arg) { }\n+\n+  overflow_error::overflow_error(const string& __arg)\n+  : runtime_error(__arg) { }\n+\n+  underflow_error::underflow_error(const string& __arg)\n+  : runtime_error(__arg) { }\n+\n+  // Converting constructor from ABI-tagged std::string to COW string.\n+  __cow_string::__cow_string(const string& s)\n+  : __cow_string(s.c_str(), s.length()) { }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "ba993556f7075775c7af0d791527adad9be3c3a3", "filename": "libstdc++-v3/src/c++11/cxx11-wlocale-inst.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-wlocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-wlocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-wlocale-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <bits/c++config.h>\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+#define C wchar_t\n+#include \"cxx11-locale-inst.cc\"\n+#endif"}, {"sha": "2e3e1740c8ac8576a6ffafd8e6c580870d3b3d76", "filename": "libstdc++-v3/src/c++11/fstream-inst.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffstream-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,6 +26,7 @@\n // ISO C++ 14882:\n //\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n #include <fstream>\n \n namespace std _GLIBCXX_VISIBILITY(default)"}, {"sha": "9d05502e77cb39ab9de4bce9a087ef86ac3c1825", "filename": "libstdc++-v3/src/c++11/functexcept.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,9 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+// We don't want to change the type thrown by __throw_ios_failure (yet?)\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+\n #include <bits/functexcept.h>\n #include <cstdlib>\n #include <exception>"}, {"sha": "cb25f00853fb2c7e6585471dd4c7347512cacb6c", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -22,6 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n #include <random>\n \n #ifdef  _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "ea89fbfb50640843d875b76e2cc6d6ed4663c43d", "filename": "libstdc++-v3/src/c++11/sstream-inst.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,6 +26,11 @@\n // ISO C++ 14882:\n //\n \n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+// Instantiations in this file use the new SSO std::string ABI unless included\n+// by another file which defines _GLIBCXX_USE_CXX11_ABI=0.\n+# define _GLIBCXX_USE_CXX11_ABI 1\n+#endif\n #include <sstream>\n \n namespace std _GLIBCXX_VISIBILITY(default)"}, {"sha": "a892d5d52d9d95337a2870417e2b39a424ba3abf", "filename": "libstdc++-v3/src/c++11/string-inst.cc", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -29,6 +29,12 @@\n // Written by Jason Merrill based upon the specification by Takanori Adachi\n // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers.\n \n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+// Instantiations in this file use the new SSO std::string ABI unless included\n+// by another file which defines _GLIBCXX_USE_CXX11_ABI=0.\n+# define _GLIBCXX_USE_CXX11_ABI 1\n+#endif\n+\n #include <string>\n \n // Instantiation configuration.\n@@ -49,7 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Only one template keyword allowed here. \n   // See core issue #46 (NAD)\n-  // http://anubis.dkuug.dk/jtc1/sc22/wg21/docs/cwg_closed.html#46\n+  // http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#46\n   template\n     S::basic_string(C*, C*, const allocator<C>&);\n \n@@ -59,6 +65,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template \n     S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+  template \n+    void\n+    S::_M_construct(S::iterator, S::iterator, forward_iterator_tag);\n+\n+  template \n+    void\n+    S::_M_construct(S::const_iterator, S::const_iterator, \n+\t\t    forward_iterator_tag);\n+\n+  template\n+    void\n+    S::_M_construct(C*, C*, forward_iterator_tag);\n+\n+  template\n+    void\n+    S::_M_construct(const C*, const C*, forward_iterator_tag);\n+\n+#else // !_GLIBCXX_USE_CXX11_ABI\n+\n   template \n     C* \n     S::_S_construct(S::iterator, S::iterator, \n@@ -72,6 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     C*\n     S::_S_construct(const C*, const C*, const allocator<C>&,\n \t\t    forward_iterator_tag);\n+#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "30e480db9ec3d523b96ac3bb799ede580a71738f", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -23,10 +23,13 @@\n // <http://www.gnu.org/licenses/>.\n \n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#define __sso_string __sso_stringxxx\n #include <cstring>\n #include <system_error>\n #include <bits/functexcept.h>\n #include <limits>\n+#undef __sso_string\n \n namespace\n {\n@@ -73,10 +76,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   error_category::~error_category() noexcept = default;\n \n   const error_category& \n-  system_category() noexcept { return system_category_instance; }\n+  _V2::system_category() noexcept { return system_category_instance; }\n \n   const error_category& \n-  generic_category() noexcept { return generic_category_instance; }\n+  _V2::generic_category() noexcept { return generic_category_instance; }\n   \n   system_error::~system_error() noexcept = default;\n \n@@ -97,5 +100,80 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   error_code::default_error_condition() const noexcept\n   { return category().default_error_condition(value()); }\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+  // Return error_category::message() as a COW string\n+  __cow_string\n+  error_category::_M_message(int i) const\n+  {\n+    string msg = this->message(i);\n+    return {msg.c_str(), msg.length()};\n+  }\n+#endif\n+\n+#if _GLIBCXX_USE_DUAL_ABI\n+  // Redefine __sso_string so that we can define and export its members\n+  // in terms of the SSO std::string.\n+  struct __sso_string\n+  {\n+    struct __str\n+    {\n+      const char* _M_p;\n+      size_t _M_string_length;\n+      char _M_local_buf[16];\n+    };\n+\n+    union {\n+      __str _M_s;\n+      char _M_bytes[sizeof(_M_s)];\n+      std::string _M_str;\n+    };\n+\n+    __sso_string();\n+    __sso_string(const std::string& s);\n+    __sso_string(const char*, size_t n);\n+    __sso_string(const __sso_string&) noexcept;\n+    __sso_string& operator=(const __sso_string&) noexcept;\n+    ~__sso_string();\n+    __sso_string(__sso_string&&) noexcept;\n+    __sso_string& operator=(__sso_string&&) noexcept;\n+  };\n+\n+  __sso_string::__sso_string() : _M_str() { }\n+\n+#if _GLIBCXX_USE_CXX11_ABI\n+  static_assert(sizeof(__sso_string) == sizeof(std::string),\n+                \"sizeof(std::string) has changed\");\n+  static_assert(alignof(__sso_string) == alignof(std::string),\n+                \"alignof(std::string) has changed\");\n+\n+  // This constructor is defined in src/c++11/cow-stdexcept.cc for COW strings\n+  __sso_string::__sso_string(const std::string& s) : _M_str(s) { }\n+#endif\n+\n+  __sso_string::__sso_string(const char* s, size_t n) : _M_str(s, n) { }\n+\n+  __sso_string::__sso_string(const __sso_string& s) noexcept\n+  : _M_str(s._M_str) { }\n+\n+  __sso_string&\n+  __sso_string::operator=(const __sso_string& s) noexcept\n+  {\n+    _M_str = s._M_str;\n+    return *this;\n+  }\n+\n+  __sso_string::~__sso_string() { _M_str.~basic_string(); }\n+\n+  __sso_string::__sso_string(__sso_string&& s) noexcept\n+  : _M_str(std::move(s._M_str)) { }\n+\n+  __sso_string&\n+  __sso_string::operator=(__sso_string&& s) noexcept\n+  {\n+    _M_str = std::move(s._M_str);\n+    return *this;\n+  }\n+#endif // _GLIBCXX_USE_DUAL_ABI\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "65425b0ad39068ab70b5c7ce741635389430025a", "filename": "libstdc++-v3/src/c++11/wstring-inst.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwstring-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,6 +26,7 @@\n // ISO C++ 14882: 21  Strings library\n //\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n #include <bits/c++config.h>\n \n #ifdef _GLIBCXX_USE_WCHAR_T"}, {"sha": "e3e540d64f634fe51a00ff9474b0c6da20ffc1f7", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -27,9 +27,18 @@ noinst_LTLIBRARIES = libc++98convenience.la\n \n headers =\n \n+if ENABLE_DUAL_ABI\n+cow_string_host_sources = \\\n+\tcollate_members_cow.cc \\\n+\tmessages_members_cow.cc \\\n+\tmonetary_members_cow.cc \\\n+\tnumeric_members_cow.cc\n+endif\n+\n # Source files linked in via configuration/make substitution for a\n # particular host.\n host_sources = \\\n+\t$(cow_string_host_sources) \\\n \tatomicity.cc \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n@@ -60,6 +69,20 @@ atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n atomicity.cc: ${atomicity_file}\n \t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n \n+if ENABLE_DUAL_ABI\n+collate_members_cow.cc: ${glibcxx_srcdir}/$(CCOLLATE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CCOLLATE_CC) ./$@ || true\n+\n+messages_members_cow.cc: ${glibcxx_srcdir}/$(CMESSAGES_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CMESSAGES_CC) ./$@ || true\n+\n+monetary_members_cow.cc: ${glibcxx_srcdir}/$(CMONEY_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CMONEY_CC) ./$@ || true\n+\n+numeric_members_cow.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CNUMERIC_CC) ./$@ || true\n+endif\n+\n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\\n@@ -72,6 +95,12 @@ c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n+if ENABLE_DUAL_ABI\n+cxx11_abi_sources = \\\n+\tcow-istream-string.cc\n+else\n+cxx11_abi_sources =\n+endif\n \n if ENABLE_EXTERN_TEMPLATE\n # XTEMPLATE_FLAGS = -fno-implicit-templates\n@@ -117,15 +146,38 @@ sources = \\\n \tstrstream.cc \\\n \ttree.cc \\\n \tistream.cc \\\n+\tistream-string.cc \\\n \tstreambuf.cc \\\n \tvalarray.cc \\\n+\t${cxx11_abi_sources} \\\n \t${host_sources} \\\n \t${host_sources_extra}\n \n vpath % $(top_srcdir)/src/c++98\n \n libc__98convenience_la_SOURCES = $(sources)\n \n+if ENABLE_DUAL_ABI\n+GLIBCXX_ABI_FLAGS = -D_GLIBCXX_USE_CXX11_ABI=@glibcxx_cxx98_abi@\n+# Use special rules to compile with the non-default string ABI.\n+collate_members_cow.lo: collate_members_cow.cc\n+\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+collate_members_cow.o: collate_members_cow.cc\n+\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+messages_members_cow.lo: messages_members_cow.cc\n+\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+messages_members_cow.o: messages_members_cow.cc\n+\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+monetary_members_cow.lo: monetary_members_cow.cc\n+\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+monetary_members_cow.o: monetary_members_cow.cc\n+\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+numeric_members_cow.lo: numeric_members_cow.cc\n+\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+numeric_members_cow.o: numeric_members_cow.cc\n+\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+endif\n+\n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n GLIBCXX_INCLUDE_DIR=$(glibcxx_builddir)/include"}, {"sha": "bd8fd3d778d11cc54dcec7b9d15fb68a9ebf7014", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -67,25 +67,31 @@ CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__98convenience_la_LIBADD =\n-am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n-\tmessages_members.lo monetary_members.lo numeric_members.lo \\\n-\ttime_members.lo\n-@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = allocator-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@am__objects_1 = cow-istream-string.lo\n+@ENABLE_DUAL_ABI_TRUE@am__objects_2 = collate_members_cow.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tmessages_members_cow.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tmonetary_members_cow.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tnumeric_members_cow.lo\n+am__objects_3 = $(am__objects_2) atomicity.lo codecvt_members.lo \\\n+\tcollate_members.lo messages_members.lo monetary_members.lo \\\n+\tnumeric_members.lo time_members.lo\n+@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_4 = allocator-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tconcept-inst.lo ext-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tlocale-inst.lo misc-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.lo\n-am__objects_3 = parallel_settings.lo\n-am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n-\t$(am__objects_3)\n-am__objects_5 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n+am__objects_5 = parallel_settings.lo\n+am__objects_6 = basic_file.lo c++locale.lo $(am__objects_4) \\\n+\t$(am__objects_5)\n+am__objects_7 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tcodecvt.lo complex_io.lo globals_io.lo hash_tr1.lo \\\n \thashtable_tr1.lo ios_failure.lo ios_init.lo ios_locale.lo \\\n \tlist.lo list-aux.lo list-aux-2.lo list_associated.lo \\\n \tlist_associated-2.lo locale.lo locale_init.lo locale_facets.lo \\\n \tlocalename.lo math_stubs_float.lo math_stubs_long_double.lo \\\n-\tstdexcept.lo strstream.lo tree.lo istream.lo streambuf.lo \\\n-\tvalarray.lo $(am__objects_1) $(am__objects_4)\n-am_libc__98convenience_la_OBJECTS = $(am__objects_5)\n+\tstdexcept.lo strstream.lo tree.lo istream.lo istream-string.lo \\\n+\tstreambuf.lo valarray.lo $(am__objects_1) $(am__objects_3) \\\n+\t$(am__objects_6)\n+am_libc__98convenience_la_OBJECTS = $(am__objects_7)\n libc__98convenience_la_OBJECTS = $(am_libc__98convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n depcomp =\n@@ -245,6 +251,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n@@ -321,10 +328,17 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n # Convenience library for C++98 runtime.\n noinst_LTLIBRARIES = libc++98convenience.la \n headers = \n+@ENABLE_DUAL_ABI_TRUE@cow_string_host_sources = \\\n+@ENABLE_DUAL_ABI_TRUE@\tcollate_members_cow.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tmessages_members_cow.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tmonetary_members_cow.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tnumeric_members_cow.cc\n+\n \n # Source files linked in via configuration/make substitution for a\n # particular host.\n host_sources = \\\n+\t$(cow_string_host_sources) \\\n \tatomicity.cc \\\n \tcodecvt_members.cc \\\n \tcollate_members.cc \\\n@@ -341,6 +355,10 @@ host_sources_extra = \\\n \tbasic_file.cc c++locale.cc \\\n \t${inst_sources} ${parallel_sources}\n \n+@ENABLE_DUAL_ABI_FALSE@cxx11_abi_sources = \n+@ENABLE_DUAL_ABI_TRUE@cxx11_abi_sources = \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-istream-string.cc\n+\n # XTEMPLATE_FLAGS =\n @ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n \n@@ -383,12 +401,15 @@ sources = \\\n \tstrstream.cc \\\n \ttree.cc \\\n \tistream.cc \\\n+\tistream-string.cc \\\n \tstreambuf.cc \\\n \tvalarray.cc \\\n+\t${cxx11_abi_sources} \\\n \t${host_sources} \\\n \t${host_sources_extra}\n \n libc__98convenience_la_SOURCES = $(sources)\n+@ENABLE_DUAL_ABI_TRUE@GLIBCXX_ABI_FLAGS = -D_GLIBCXX_USE_CXX11_ABI=@glibcxx_cxx98_abi@\n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n@@ -710,13 +731,42 @@ time_members.cc: ${glibcxx_srcdir}/$(CTIME_CC)\n atomicity.cc: ${atomicity_file}\n \t$(LN_S) ${atomicity_file} ./atomicity.cc || true\n \n+@ENABLE_DUAL_ABI_TRUE@collate_members_cow.cc: ${glibcxx_srcdir}/$(CCOLLATE_CC)\n+@ENABLE_DUAL_ABI_TRUE@\t$(LN_S) ${glibcxx_srcdir}/$(CCOLLATE_CC) ./$@ || true\n+\n+@ENABLE_DUAL_ABI_TRUE@messages_members_cow.cc: ${glibcxx_srcdir}/$(CMESSAGES_CC)\n+@ENABLE_DUAL_ABI_TRUE@\t$(LN_S) ${glibcxx_srcdir}/$(CMESSAGES_CC) ./$@ || true\n+\n+@ENABLE_DUAL_ABI_TRUE@monetary_members_cow.cc: ${glibcxx_srcdir}/$(CMONEY_CC)\n+@ENABLE_DUAL_ABI_TRUE@\t$(LN_S) ${glibcxx_srcdir}/$(CMONEY_CC) ./$@ || true\n+\n+@ENABLE_DUAL_ABI_TRUE@numeric_members_cow.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n+@ENABLE_DUAL_ABI_TRUE@\t$(LN_S) ${glibcxx_srcdir}/$(CNUMERIC_CC) ./$@ || true\n+\n c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(CLOCALE_CC) ./$@ || true\n \n basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n vpath % $(top_srcdir)/src/c++98\n+# Use special rules to compile with the non-default string ABI.\n+@ENABLE_DUAL_ABI_TRUE@collate_members_cow.lo: collate_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+@ENABLE_DUAL_ABI_TRUE@collate_members_cow.o: collate_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+@ENABLE_DUAL_ABI_TRUE@messages_members_cow.lo: messages_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+@ENABLE_DUAL_ABI_TRUE@messages_members_cow.o: messages_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+@ENABLE_DUAL_ABI_TRUE@monetary_members_cow.lo: monetary_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+@ENABLE_DUAL_ABI_TRUE@monetary_members_cow.o: monetary_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+@ENABLE_DUAL_ABI_TRUE@numeric_members_cow.lo: numeric_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+@ENABLE_DUAL_ABI_TRUE@numeric_members_cow.o: numeric_members_cow.cc\n+@ENABLE_DUAL_ABI_TRUE@\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc"}, {"sha": "1543d403250500db3ed5b0ae0ab63e7981eec27d", "filename": "libstdc++-v3/src/c++98/compatibility-ldbl.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility-ldbl.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -22,6 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <locale>\n #include <cmath>\n #include <tr1/functional>"}, {"sha": "2d432e7f972330a65766eae344ae854d55299ea6", "filename": "libstdc++-v3/src/c++98/compatibility.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcompatibility.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -22,6 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <bits/c++config.h>\n \n #if defined(_GLIBCXX_SYMVER_GNU) && defined(_GLIBCXX_SHARED) \\"}, {"sha": "fd374f811f95764023d4d90d27c0fbc7a7d437af", "filename": "libstdc++-v3/src/c++98/concept-inst.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fconcept-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -29,6 +29,7 @@\n // explicitly instantiate the initial set of symbols; compiling this file\n // with -fimplicit-templates will take care of the rest for us.\n \n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <bits/concept_check.h>\n \n #ifdef _GLIBCXX_CONCEPT_CHECKS"}, {"sha": "32723bb230949793232b00fc93f53ac6c089d41b", "filename": "libstdc++-v3/src/c++98/cow-istream-string.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcow-istream-string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcow-istream-string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fcow-istream-string.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,30 @@\n+// Input streams operating on strings -*- C++ -*-\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 27.6.1  Input streams\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include \"istream-string.cc\""}, {"sha": "1a7430043a0a4efde136d9c2a5667da27d30ce43", "filename": "libstdc++-v3/src/c++98/hash_tr1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fhash_tr1.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -22,6 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <string>\n #include <tr1/functional>\n "}, {"sha": "4580adcacdd62b4690d2f37849a3c404114179e2", "filename": "libstdc++-v3/src/c++98/istream-string.cc", "status": "added", "additions": 291, "deletions": 0, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream-string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream-string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream-string.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -0,0 +1,291 @@\n+// Input streams operating on strings-*- C++ -*-\n+\n+// Copyright (C) 2004-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 27.6.1  Input streams\n+//\n+\n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+// Instantiations in this file use the new SSO std::string ABI unless included\n+// by another file which defines _GLIBCXX_USE_CXX11_ABI=0.\n+# define _GLIBCXX_USE_CXX11_ABI 1\n+#endif\n+#include <istream>\n+#include <string>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<>\n+    basic_istream<char>&\n+    operator>>(basic_istream<char>& __in, basic_string<char>& __str)\n+    {\n+      typedef basic_istream<char>       \t__istream_type;\n+      typedef __istream_type::int_type\t\t__int_type;\n+      typedef __istream_type::traits_type\t__traits_type;\n+      typedef __istream_type::__streambuf_type  __streambuf_type;\n+      typedef __istream_type::__ctype_type\t__ctype_type;\n+      typedef basic_string<char>        \t__string_type;\n+      typedef __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      ios_base::iostate __err = ios_base::goodbit;\n+      __istream_type::sentry __cerb(__in, false);\n+      if (__cerb)\n+\t{\n+\t  __try\n+\t    {\n+\t      __str.erase();\n+\t      const streamsize __w = __in.width();\n+\t      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\n+\t\t                              : __str.max_size();\n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\t      const __int_type __eof = __traits_type::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !__traits_type::eq_int_type(__c, __eof)\n+\t\t     && !__ct.is(ctype_base::space,\n+\t\t\t\t __traits_type::to_char_type(__c)))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - __extracted));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      __size = (__ct.scan_is(ctype_base::space,\n+\t\t\t\t\t     __sb->gptr() + 1,\n+\t\t\t\t\t     __sb->gptr() + __size)\n+\t\t\t\t- __sb->gptr());\n+\t\t      __str.append(__sb->gptr(), __size);\n+\t\t      __sb->__safe_gbump(__size);\n+\t\t      __extracted += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __str += __traits_type::to_char_type(__c);\n+\t\t      ++__extracted;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t}\n+\n+\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      __in.width(0);\n+\t    }\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n+\t    {\n+\t      __in._M_setstate(ios_base::badbit);\n+\t      __throw_exception_again;\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+\n+  template<>\n+    basic_istream<char>&\n+    getline(basic_istream<char>& __in, basic_string<char>& __str,\n+\t    char __delim)\n+    {\n+      typedef basic_istream<char>       \t__istream_type;\n+      typedef __istream_type::int_type\t\t__int_type;\n+      typedef __istream_type::char_type\t\t__char_type;\n+      typedef __istream_type::traits_type\t__traits_type;\n+      typedef __istream_type::__streambuf_type  __streambuf_type;\n+      typedef basic_string<char>        \t__string_type;\n+      typedef __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      const __size_type __n = __str.max_size();\n+      ios_base::iostate __err = ios_base::goodbit;\n+      __istream_type::sentry __cerb(__in, true);\n+      if (__cerb)\n+\t{\n+\t  __try\n+\t    {\n+\t      __str.erase();\n+\t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n+\t      const __int_type __eof = __traits_type::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !__traits_type::eq_int_type(__c, __eof)\n+\t\t     && !__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - __extracted));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const __char_type* __p = __traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t\t   __size,\n+\t\t\t\t\t\t\t\t   __delim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      __str.append(__sb->gptr(), __size);\n+\t\t      __sb->__safe_gbump(__size);\n+\t\t      __extracted += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __str += __traits_type::to_char_type(__c);\n+\t\t      ++__extracted;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t}\n+\n+\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++__extracted;\n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n+\t    {\n+\t      __in._M_setstate(ios_base::badbit);\n+\t      __throw_exception_again;\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    basic_istream<wchar_t>&\n+    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,\n+\t    wchar_t __delim)\n+    {\n+      typedef basic_istream<wchar_t>       \t__istream_type;\n+      typedef __istream_type::int_type\t\t__int_type;\n+      typedef __istream_type::char_type\t\t__char_type;\n+      typedef __istream_type::traits_type\t__traits_type;\n+      typedef __istream_type::__streambuf_type  __streambuf_type;\n+      typedef basic_string<wchar_t>        \t__string_type;\n+      typedef __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      const __size_type __n = __str.max_size();\n+      ios_base::iostate __err = ios_base::goodbit;\n+      __istream_type::sentry __cerb(__in, true);\n+      if (__cerb)\n+\t{\n+\t  __try\n+\t    {\n+\t      __str.erase();\n+\t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n+\t      const __int_type __eof = __traits_type::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !__traits_type::eq_int_type(__c, __eof)\n+\t\t     && !__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - __extracted));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const __char_type* __p = __traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t\t   __size,\n+\t\t\t\t\t\t\t\t   __delim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      __str.append(__sb->gptr(), __size);\n+\t\t      __sb->__safe_gbump(__size);\n+\t\t      __extracted += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __str += __traits_type::to_char_type(__c);\n+\t\t      ++__extracted;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\n+\t\t}\n+\n+\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++__extracted;\n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  __catch(__cxxabiv1::__forced_unwind&)\n+\t    {\n+\t      __in._M_setstate(ios_base::badbit);\n+\t      __throw_exception_again;\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f0b024ed677c2c432ae131582bfabc0237f70a30", "filename": "libstdc++-v3/src/c++98/istream.cc", "status": "modified", "additions": 1, "deletions": 247, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fistream.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -273,169 +273,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __in;\n     }\n \n-  template<>\n-    basic_istream<char>&\n-    operator>>(basic_istream<char>& __in, basic_string<char>& __str)\n-    {\n-      typedef basic_istream<char>       \t__istream_type;\n-      typedef __istream_type::int_type\t\t__int_type;\n-      typedef __istream_type::traits_type\t__traits_type;\n-      typedef __istream_type::__streambuf_type  __streambuf_type;\n-      typedef __istream_type::__ctype_type\t__ctype_type;\n-      typedef basic_string<char>        \t__string_type;\n-      typedef __string_type::size_type\t\t__size_type;\n-\n-      __size_type __extracted = 0;\n-      ios_base::iostate __err = ios_base::goodbit;\n-      __istream_type::sentry __cerb(__in, false);\n-      if (__cerb)\n-\t{\n-\t  __try\n-\t    {\n-\t      __str.erase();\n-\t      const streamsize __w = __in.width();\n-\t      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\n-\t\t                              : __str.max_size();\n-\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n-\t      const __int_type __eof = __traits_type::eof();\n-\t      __streambuf_type* __sb = __in.rdbuf();\n-\t      __int_type __c = __sb->sgetc();\n-\n-\t      while (__extracted < __n\n-\t\t     && !__traits_type::eq_int_type(__c, __eof)\n-\t\t     && !__ct.is(ctype_base::space,\n-\t\t\t\t __traits_type::to_char_type(__c)))\n-\t\t{\n-\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n-\t\t\t\t\t\t\t  - __sb->gptr()),\n-\t\t\t\t\t       streamsize(__n - __extracted));\n-\t\t  if (__size > 1)\n-\t\t    {\n-\t\t      __size = (__ct.scan_is(ctype_base::space,\n-\t\t\t\t\t     __sb->gptr() + 1,\n-\t\t\t\t\t     __sb->gptr() + __size)\n-\t\t\t\t- __sb->gptr());\n-\t\t      __str.append(__sb->gptr(), __size);\n-\t\t      __sb->__safe_gbump(__size);\n-\t\t      __extracted += __size;\n-\t\t      __c = __sb->sgetc();\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      __str += __traits_type::to_char_type(__c);\n-\t\t      ++__extracted;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n-\t\t}\n-\n-\t      if (__traits_type::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t      __in.width(0);\n-\t    }\n-\t  __catch(__cxxabiv1::__forced_unwind&)\n-\t    {\n-\t      __in._M_setstate(ios_base::badbit);\n-\t      __throw_exception_again;\n-\t    }\n-\t  __catch(...)\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 91. Description of operator>> and getline() for string<>\n-\t      // might cause endless loop\n-\t      __in._M_setstate(ios_base::badbit);\n-\t    }\n-\t}\n-      if (!__extracted)\n-\t__err |= ios_base::failbit;\n-      if (__err)\n-\t__in.setstate(__err);\n-      return __in;\n-    }\n-\n-  template<>\n-    basic_istream<char>&\n-    getline(basic_istream<char>& __in, basic_string<char>& __str,\n-\t    char __delim)\n-    {\n-      typedef basic_istream<char>       \t__istream_type;\n-      typedef __istream_type::int_type\t\t__int_type;\n-      typedef __istream_type::char_type\t\t__char_type;\n-      typedef __istream_type::traits_type\t__traits_type;\n-      typedef __istream_type::__streambuf_type  __streambuf_type;\n-      typedef basic_string<char>        \t__string_type;\n-      typedef __string_type::size_type\t\t__size_type;\n-\n-      __size_type __extracted = 0;\n-      const __size_type __n = __str.max_size();\n-      ios_base::iostate __err = ios_base::goodbit;\n-      __istream_type::sentry __cerb(__in, true);\n-      if (__cerb)\n-\t{\n-\t  __try\n-\t    {\n-\t      __str.erase();\n-\t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n-\t      const __int_type __eof = __traits_type::eof();\n-\t      __streambuf_type* __sb = __in.rdbuf();\n-\t      __int_type __c = __sb->sgetc();\n-\n-\t      while (__extracted < __n\n-\t\t     && !__traits_type::eq_int_type(__c, __eof)\n-\t\t     && !__traits_type::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n-\t\t\t\t\t\t\t  - __sb->gptr()),\n-\t\t\t\t\t       streamsize(__n - __extracted));\n-\t\t  if (__size > 1)\n-\t\t    {\n-\t\t      const __char_type* __p = __traits_type::find(__sb->gptr(),\n-\t\t\t\t\t\t\t\t   __size,\n-\t\t\t\t\t\t\t\t   __delim);\n-\t\t      if (__p)\n-\t\t\t__size = __p - __sb->gptr();\n-\t\t      __str.append(__sb->gptr(), __size);\n-\t\t      __sb->__safe_gbump(__size);\n-\t\t      __extracted += __size;\n-\t\t      __c = __sb->sgetc();\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      __str += __traits_type::to_char_type(__c);\n-\t\t      ++__extracted;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n-\t\t}\n-\n-\t      if (__traits_type::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t      else if (__traits_type::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  ++__extracted;\n-\t\t  __sb->sbumpc();\n-\t\t}\n-\t      else\n-\t\t__err |= ios_base::failbit;\n-\t    }\n-\t  __catch(__cxxabiv1::__forced_unwind&)\n-\t    {\n-\t      __in._M_setstate(ios_base::badbit);\n-\t      __throw_exception_again;\n-\t    }\n-\t  __catch(...)\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 91. Description of operator>> and getline() for string<>\n-\t      // might cause endless loop\n-\t      __in._M_setstate(ios_base::badbit);\n-\t    }\n-\t}\n-      if (!__extracted)\n-\t__err |= ios_base::failbit;\n-      if (__err)\n-\t__in.setstate(__err);\n-      return __in;\n-    }\n-\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     basic_istream<wchar_t>&\n@@ -596,91 +433,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       return *this;\n     }\n-\n-  template<>\n-    basic_istream<wchar_t>&\n-    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,\n-\t    wchar_t __delim)\n-    {\n-      typedef basic_istream<wchar_t>       \t__istream_type;\n-      typedef __istream_type::int_type\t\t__int_type;\n-      typedef __istream_type::char_type\t\t__char_type;\n-      typedef __istream_type::traits_type\t__traits_type;\n-      typedef __istream_type::__streambuf_type  __streambuf_type;\n-      typedef basic_string<wchar_t>        \t__string_type;\n-      typedef __string_type::size_type\t\t__size_type;\n-\n-      __size_type __extracted = 0;\n-      const __size_type __n = __str.max_size();\n-      ios_base::iostate __err = ios_base::goodbit;\n-      __istream_type::sentry __cerb(__in, true);\n-      if (__cerb)\n-\t{\n-\t  __try\n-\t    {\n-\t      __str.erase();\n-\t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n-\t      const __int_type __eof = __traits_type::eof();\n-\t      __streambuf_type* __sb = __in.rdbuf();\n-\t      __int_type __c = __sb->sgetc();\n-\n-\t      while (__extracted < __n\n-\t\t     && !__traits_type::eq_int_type(__c, __eof)\n-\t\t     && !__traits_type::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n-\t\t\t\t\t\t\t  - __sb->gptr()),\n-\t\t\t\t\t       streamsize(__n - __extracted));\n-\t\t  if (__size > 1)\n-\t\t    {\n-\t\t      const __char_type* __p = __traits_type::find(__sb->gptr(),\n-\t\t\t\t\t\t\t\t   __size,\n-\t\t\t\t\t\t\t\t   __delim);\n-\t\t      if (__p)\n-\t\t\t__size = __p - __sb->gptr();\n-\t\t      __str.append(__sb->gptr(), __size);\n-\t\t      __sb->__safe_gbump(__size);\n-\t\t      __extracted += __size;\n-\t\t      __c = __sb->sgetc();\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      __str += __traits_type::to_char_type(__c);\n-\t\t      ++__extracted;\n-\t\t      __c = __sb->snextc();\n-\t\t    }\t\t  \n-\t\t}\n-\n-\t      if (__traits_type::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t      else if (__traits_type::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  ++__extracted;\n-\t\t  __sb->sbumpc();\n-\t\t}\n-\t      else\n-\t\t__err |= ios_base::failbit;\n-\t    }\n-\t  __catch(__cxxabiv1::__forced_unwind&)\n-\t    {\n-\t      __in._M_setstate(ios_base::badbit);\n-\t      __throw_exception_again;\n-\t    }\n-\t  __catch(...)\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 91. Description of operator>> and getline() for string<>\n-\t      // might cause endless loop\n-\t      __in._M_setstate(ios_base::badbit);\n-\t    }\n-\t}\n-      if (!__extracted)\n-\t__err |= ios_base::failbit;\n-      if (__err)\n-\t__in.setstate(__err);\n-      return __in;\n-    }\n #endif\n \n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "dd479218483ac275aac69f781a8addcca1ed494a", "filename": "libstdc++-v3/src/c++98/locale-inst.cc", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,6 +26,15 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+// Instantiations in this file use the old COW std::string ABI unless included\n+// by another file which defines _GLIBCXX_USE_CXX11_ABI=1. Some instantiations\n+// are guarded by a check for !_GLIBCXX_USE_CXX11_ABI so that they are only\n+// instantiated once, because they are not tagged with abi_tag so should not\n+// be instantiated twice.\n+# define _GLIBCXX_USE_CXX11_ABI 0\n+#endif\n+\n #include <locale>\n \n // Instantiation configuration.\n@@ -39,13 +48,17 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // moneypunct, money_get, and money_put\n-  template class moneypunct<C, false>;\n-  template class moneypunct<C, true>;\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template struct __moneypunct_cache<C, false>;\n   template struct __moneypunct_cache<C, true>;\n+#endif\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+  template class moneypunct<C, false>;\n+  template class moneypunct<C, true>;\n   template class moneypunct_byname<C, false>;\n   template class moneypunct_byname<C, true>;\n-_GLIBCXX_BEGIN_NAMESPACE_LDBL\n+_GLIBCXX_END_NAMESPACE_CXX11\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n   template class money_get<C, istreambuf_iterator<C> >;\n   template class money_put<C, ostreambuf_iterator<C> >;\n   template\n@@ -71,15 +84,21 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n     money_put<C, ostreambuf_iterator<C> >::\n     _M_insert<false>(ostreambuf_iterator<C>, ios_base&, C, \n \t\t     const string_type&) const;\n-_GLIBCXX_END_NAMESPACE_LDBL\n+_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \n   // numpunct, numpunct_byname, num_get, and num_put\n-  template class numpunct<C>;\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template struct __numpunct_cache<C>;\n+#endif\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+  template class numpunct<C>;\n   template class numpunct_byname<C>;\n+_GLIBCXX_END_NAMESPACE_CXX11\n _GLIBCXX_BEGIN_NAMESPACE_LDBL\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template class num_get<C, istreambuf_iterator<C> >;\n-  template class num_put<C, ostreambuf_iterator<C> >; \n+#endif\n+\n   template\n     istreambuf_iterator<C>\n     num_get<C, istreambuf_iterator<C> >::\n@@ -124,6 +143,9 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \t\t   unsigned long long&) const;\n #endif\n \n+#if ! _GLIBCXX_USE_CXX11_ABI\n+  template class num_put<C, ostreambuf_iterator<C> >;\n+\n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::\n@@ -161,40 +183,55 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n     num_put<C, ostreambuf_iterator<C> >::\n     _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char, \n \t\t    long double) const;\n+#endif\n _GLIBCXX_END_NAMESPACE_LDBL\n \n   // time_get and time_put\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template class __timepunct<C>;\n   template struct __timepunct_cache<C>;\n   template class time_put<C, ostreambuf_iterator<C> >;\n   template class time_put_byname<C, ostreambuf_iterator<C> >;\n+#endif\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class time_get<C, istreambuf_iterator<C> >;\n   template class time_get_byname<C, istreambuf_iterator<C> >;\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n   // messages\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class messages<C>;\n   template class messages_byname<C>;\n+_GLIBCXX_END_NAMESPACE_CXX11\n   \n   // ctype\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   inline template class __ctype_abstract_base<C>;\n   template class ctype_byname<C>;\n+#endif\n   \n   // codecvt\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   inline template class __codecvt_abstract_base<C, char, mbstate_t>;\n   template class codecvt_byname<C, char, mbstate_t>;\n+#endif\n \n   // collate\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class collate<C>;\n   template class collate_byname<C>;\n+_GLIBCXX_END_NAMESPACE_CXX11\n     \n   // use_facet\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template\n     const ctype<C>& \n     use_facet<ctype<C> >(const locale&);\n \n   template\n     const codecvt<C, char, mbstate_t>& \n     use_facet<codecvt<C, char, mbstate_t> >(const locale&);\n+#endif\n \n   template\n     const collate<C>& \n@@ -204,13 +241,15 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     const numpunct<C>& \n     use_facet<numpunct<C> >(const locale&);\n \n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template \n     const num_put<C>& \n     use_facet<num_put<C> >(const locale&);\n \n   template \n     const num_get<C>& \n     use_facet<num_get<C> >(const locale&);\n+#endif\n \n   template\n     const moneypunct<C, true>& \n@@ -228,13 +267,15 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     const money_get<C>& \n     use_facet<money_get<C> >(const locale&);\n \n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template\n     const __timepunct<C>& \n     use_facet<__timepunct<C> >(const locale&);\n \n   template \n     const time_put<C>& \n     use_facet<time_put<C> >(const locale&);\n+#endif\n \n   template \n     const time_get<C>& \n@@ -245,13 +286,15 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     use_facet<messages<C> >(const locale&);\n \n   // has_facet\n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template \n     bool\n     has_facet<ctype<C> >(const locale&);\n \n   template \n     bool\n     has_facet<codecvt<C, char, mbstate_t> >(const locale&);\n+#endif\n \n   template \n     bool\n@@ -261,13 +304,15 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     bool\n     has_facet<numpunct<C> >(const locale&);\n \n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template \n     bool\n     has_facet<num_put<C> >(const locale&);\n \n   template \n     bool\n     has_facet<num_get<C> >(const locale&);\n+#endif\n \n   template \n     bool\n@@ -281,13 +326,15 @@ _GLIBCXX_END_NAMESPACE_LDBL\n     bool\n     has_facet<money_get<C> >(const locale&);\n \n+#if ! _GLIBCXX_USE_CXX11_ABI\n   template \n     bool\n     has_facet<__timepunct<C> >(const locale&);\n \n   template \n     bool\n     has_facet<time_put<C> >(const locale&);\n+#endif\n \n   template \n     bool\n@@ -322,7 +369,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n // XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined C_is_char\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined C_is_char \\\n+      && _GLIBCXX_USE_CXX11_ABI == 0\n \n #define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n   extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))"}, {"sha": "a12bba77e0c31031feceeb6d5e794ec6a8321ace", "filename": "libstdc++-v3/src/c++98/locale.cc", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n #include <clocale>\n #include <cstring>\n #include <cstdlib>     // For getenv\n@@ -118,6 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return *this;\n   }\n \n+  _GLIBCXX_DEFAULT_ABI_TAG\n   string\n   locale::name() const\n   {\n@@ -357,6 +359,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconst facet*& __fpr = _M_facets[__index];\n \tif (__fpr)\n \t  {\n+#if _GLIBCXX_USE_DUAL_ABI\n+            // If this is a twinned facet replace its twin with a shim.\n+            for (const id* const* p = _S_twinned_facets; *p != 0; p += 2)\n+              {\n+                if (p[0]->_M_id() == __index)\n+                  {\n+                    // replacing the old ABI facet, also replace new ABI twin\n+                    const facet*& __fpr2 = _M_facets[p[1]->_M_id()];\n+                    if (__fpr2)\n+                      {\n+                        const facet* __fp2 = __fp->_M_sso_shim(p[1]);\n+                        __fp2->_M_add_reference();\n+                        __fpr2->_M_remove_reference();\n+                        __fpr2 = __fp2;\n+                      }\n+                    break;\n+                  }\n+                else if (p[1]->_M_id() == __index)\n+                  {\n+                    // replacing the new ABI facet, also replace old ABI twin\n+                    const facet*& __fpr2 = _M_facets[p[0]->_M_id()];\n+                    if (__fpr2)\n+                      {\n+                        const facet* __fp2 = __fp->_M_cow_shim(p[0]);\n+                        __fp2->_M_add_reference();\n+                        __fpr2->_M_remove_reference();\n+                        __fpr2 = __fp2;\n+                      }\n+                    break;\n+                  }\n+              }\n+#endif\n \t    // Replacing an existing facet. Order matters.\n \t    __fpr->_M_remove_reference();\n \t    __fpr = __fp;\n@@ -391,6 +425,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   _M_install_cache(const facet* __cache, size_t __index)\n   {\n     __gnu_cxx::__scoped_lock sentry(get_locale_cache_mutex());\n+#if _GLIBCXX_USE_DUAL_ABI\n+    // If this cache is for one of the facets that is instantiated twice,\n+    // for old and new std::string ABI, install it in both slots.\n+    size_t __index2 = -1;\n+    for (const id* const* p = _S_twinned_facets; *p != 0; p += 2)\n+      {\n+        if (p[0]->_M_id() == __index)\n+          {\n+            __index2 = p[1]->_M_id();\n+            break;\n+          }\n+        else if (p[1]->_M_id() == __index)\n+          {\n+            __index2 = __index;\n+            __index = p[0]->_M_id();\n+            break;\n+          }\n+      }\n+#endif\n     if (_M_caches[__index] != 0)\n       {\n \t// Some other thread got in first.\n@@ -400,6 +453,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t__cache->_M_add_reference();\n \t_M_caches[__index] = __cache;\n+#if _GLIBCXX_USE_DUAL_ABI\n+        if (__index2 != size_t(-1))\n+          {\n+            __cache->_M_add_reference();\n+            _M_caches[__index2] = __cache;\n+          }\n+#endif\n       }\n   }\n "}, {"sha": "808d93721b749c3e7295cceeb15575dc53b326a7", "filename": "libstdc++-v3/src/c++98/locale_facets.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <locale>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -97,11 +98,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     *__fptr = '\\0';\n   }\n \n-  bool\n-  __verify_grouping(const char* __grouping, size_t __grouping_size,\n-\t\t    const string& __grouping_tmp) throw()\n+  // This function is not exported but is needed internally, by the versions\n+  // of __verify_grouping below and in src/c++11/cxx11-locale-inst.cc\n+  extern bool\n+  __verify_grouping_impl(const char* __grouping, size_t __grouping_size,\n+                         const char* __grouping_tmp, size_t __grouping_tmp_size)\n   {\n-    const size_t __n = __grouping_tmp.size() - 1;\n+    const size_t __n = __grouping_tmp_size - 1;\n     const size_t __min = std::min(__n, size_t(__grouping_size - 1));\n     size_t __i = __n;\n     bool __test = true;\n@@ -122,5 +125,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __test;\n   }\n \n+  bool\n+  __verify_grouping(const char* __grouping, size_t __grouping_size,\n+\t\t    const string& __grouping_tmp) throw()\n+  {\n+    return __verify_grouping_impl(__grouping, __grouping_size,\n+                                  __grouping_tmp.c_str(),\n+                                  __grouping_tmp.size());\n+  }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "f9683fc21d1db89d8c760e0798c36cbdd04bd28c", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 88, "deletions": 6, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n #include <clocale>\n #include <cstring>\n #include <cstdlib>     // For getenv, free.\n@@ -28,8 +29,37 @@\n #include <locale>\n #include <ext/concurrence.h>\n \n+#if _GLIBCXX_USE_DUAL_ABI\n+// This file is compiled with the new std::string ABI so std::numpunct<char>\n+// refers to std::__cxx11::numpunct<char>. These declarations let us refer\n+// to the other facets instantiated with the old ABI.\n+# define _GLIBCXX_LOC_ID(mangled) extern std::locale::id mangled\n+_GLIBCXX_LOC_ID(_ZNSt8numpunctIcE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt7collateIcE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt10moneypunctIcLb0EE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt10moneypunctIcLb1EE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt8messagesIcE2idE);\n+# ifdef _GLIBCXX_USE_WCHAR_T\n+_GLIBCXX_LOC_ID(_ZNSt8numpunctIwE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt7collateIwE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt10moneypunctIwLb0EE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt10moneypunctIwLb1EE2idE);\n+_GLIBCXX_LOC_ID(_ZNSt8messagesIwE2idE);\n+# endif\n+#endif\n+\n+\n namespace \n {\n+  const int num_facets = _GLIBCXX_NUM_FACETS\n+    + (_GLIBCXX_USE_DUAL_ABI ? _GLIBCXX_NUM_CXX11_FACETS : 0);\n+\n   __gnu_cxx::__mutex&\n   get_locale_mutex()\n   {\n@@ -57,11 +87,11 @@ namespace\n \n   typedef char fake_facet_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n-  fake_facet_vec facet_vec[_GLIBCXX_NUM_FACETS];\n+  fake_facet_vec facet_vec[num_facets];\n \n   typedef char fake_cache_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n-  fake_cache_vec cache_vec[_GLIBCXX_NUM_FACETS];\n+  fake_cache_vec cache_vec[num_facets];\n \n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n@@ -355,7 +385,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     0\n   };\n-  \n+\n   const locale::id* const* const\n   locale::_Impl::_S_facet_categories[] =\n   {\n@@ -369,10 +399,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     0\n   };\n \n+#if _GLIBCXX_USE_DUAL_ABI\n+  // Facets that are instantiated for both the COW and SSO std::string ABIs.\n+  // The COW ABI version must come first, followed by its SSO twin.\n+  const locale::id* const locale::_S_twinned_facets[] = {\n+    &::_ZNSt8numpunctIcE2idE,\n+    &numpunct<char>::id,\n+    &::_ZNSt7collateIcE2idE,\n+    &std::collate<char>::id,\n+    &::_ZNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE,\n+    &time_get<char>::id,\n+    &::_ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE2idE,\n+    &money_get<char>::id,\n+    &::_ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE2idE,\n+    &money_put<char>::id,\n+    &::_ZNSt10moneypunctIcLb0EE2idE,\n+    &moneypunct<char, false>::id,\n+    &::_ZNSt10moneypunctIcLb1EE2idE,\n+    &moneypunct<char, true >::id,\n+    &::_ZNSt8messagesIcE2idE,\n+    &std::messages<char>::id,\n+# ifdef _GLIBCXX_USE_WCHAR_T\n+    &::_ZNSt8numpunctIwE2idE,\n+    &numpunct<wchar_t>::id,\n+    &::_ZNSt7collateIwE2idE,\n+    &std::collate<wchar_t>::id,\n+    &::_ZNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE,\n+    &time_get<wchar_t>::id,\n+    &::_ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE2idE,\n+    &money_get<wchar_t>::id,\n+    &::_ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE2idE,\n+    &money_put<wchar_t>::id,\n+    &::_ZNSt10moneypunctIwLb0EE2idE,\n+    &moneypunct<wchar_t, false>::id,\n+    &::_ZNSt10moneypunctIwLb1EE2idE,\n+    &moneypunct<wchar_t, true >::id,\n+    &::_ZNSt8messagesIwE2idE,\n+    &std::messages<wchar_t>::id,\n+# endif\n+    0, 0\n+  };\n+#endif\n+\n   // Construct \"C\" _Impl.\n   locale::_Impl::\n   _Impl(size_t __refs) throw() \n-  : _M_refcount(__refs), _M_facets(0), _M_facets_size(_GLIBCXX_NUM_FACETS),\n+  : _M_refcount(__refs), _M_facets(0), _M_facets_size(num_facets),\n   _M_caches(0), _M_names(0)    \n   {\n     _M_facets = new (&facet_vec) const facet*[_M_facets_size]();\n@@ -448,8 +520,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_init_facet(new (&time_get_w) time_get<wchar_t>(1));\n     _M_init_facet(new (&time_put_w) time_put<wchar_t>(1));\n     _M_init_facet(new (&messages_w) std::messages<wchar_t>(1));\n-#endif \n-     \n+#endif\n+\n+#if _GLIBCXX_USE_DUAL_ABI\n+    facet* extra[] = { __npc, __mpcf, __mpct\n+# ifdef  _GLIBCXX_USE_WCHAR_T\n+        , __npw, __mpwf, __mpwt\n+# endif\n+    };\n+\n+    _M_init_extra(extra);\n+#endif\n+\n     // This locale is safe to pre-cache, after all the facets have\n     // been created and installed.\n     _M_caches[numpunct<char>::id._M_id()] = __npc;"}, {"sha": "282471f121a24b613b61c7482bc15272bd7ce939", "filename": "libstdc++-v3/src/c++98/localename.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n #include <clocale>\n #include <cstring>\n #include <cstdlib>\n@@ -170,10 +171,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   }\n \n+const int num_facets = _GLIBCXX_NUM_FACETS\n+  + (_GLIBCXX_USE_DUAL_ABI ? _GLIBCXX_NUM_CXX11_FACETS : 0);\n+\n   // Construct named _Impl.\n   locale::_Impl::\n   _Impl(const char* __s, size_t __refs)\n-  : _M_refcount(__refs), _M_facets(0), _M_facets_size(_GLIBCXX_NUM_FACETS),\n+  : _M_refcount(__refs), _M_facets(0), _M_facets_size(num_facets),\n     _M_caches(0), _M_names(0)\n   {\n     // Initialize the underlying locale model, which also checks to\n@@ -264,6 +268,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_init_facet(new time_put<wchar_t>);\n \t_M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n #endif\t  \n+\n+#if _GLIBCXX_USE_DUAL_ABI\n+        _M_init_extra(&__cloc, &__clocm, __s, __smon);\n+#endif\n+\n \tlocale::facet::_S_destroy_c_locale(__cloc);\n \tif (__clocm != __cloc)\n \t  locale::facet::_S_destroy_c_locale(__clocm);"}, {"sha": "989218f6e7ed8e1f72581f32e69828a42ed79e85", "filename": "libstdc++-v3/src/c++98/misc-inst.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,6 +26,8 @@\n // ISO C++ 14882:\n //\n \n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#define _GLIBCXX_DISAMBIGUATE_REPLACE_INST 1\n #include <string>\n #include <istream>\n #include <ostream>\n@@ -62,5 +64,44 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+  // C++98 members that are not instantiated by src/c++11/string-inst.cc\n+  // because they changed in C++11 to take const_iterator parameters.\n+  template string::iterator string::erase(iterator);\n+  template void string::insert(iterator, iterator, iterator);\n+  template string::iterator string::insert(iterator, char);\n+  template string& string::replace(iterator, iterator, size_type, char);\n+  template string& string::replace(iterator, iterator, char*, char*);\n+  template string& string::replace(iterator, iterator, iterator, iterator);\n+  template string&\n+  string::replace(iterator, iterator, const_iterator, const_iterator);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template wstring::iterator wstring::erase(iterator);\n+  template void wstring::insert(iterator, iterator, iterator);\n+  template wstring::iterator wstring::insert(iterator, wchar_t);\n+  template wstring& wstring::replace(iterator, iterator, size_type, wchar_t);\n+  template wstring& wstring::replace(iterator, iterator, wchar_t*, wchar_t*);\n+  template wstring& wstring::replace(iterator, iterator, iterator, iterator);\n+  template wstring&\n+  wstring::replace(iterator, iterator, const_iterator, const_iterator);\n+#endif\n+\n+  // XXX this doesn't belong in an -inst.cc file\n+  // Defined in src/c++98/locale_facets.cc\n+  _GLIBCXX_PURE bool\n+  __verify_grouping_impl(const char* __grouping, size_t __grouping_size,\n+                         const char* __grouping_tmp, size_t __n);\n+\n+  bool\n+  __verify_grouping(const char* __grouping, size_t __grouping_size,\n+\t\t    const string& __grouping_tmp) throw()\n+  {\n+    return __verify_grouping_impl(__grouping, __grouping_size,\n+                                  __grouping_tmp.c_str(),\n+                                  __grouping_tmp.size());\n+  }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "25c75f405a1d9a8ec9a98c565fa4a69da1823cf7", "filename": "libstdc++-v3/src/c++98/stdexcept.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fstdexcept.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,6 +26,8 @@\n // ISO C++ 14882: 19.1  Exception classes\n //\n \n+// All exception classes still use the classic COW std::string.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <string>\n #include <stdexcept>\n "}, {"sha": "85ab48aa41971c303ac23311a9cccc31b1d15519", "filename": "libstdc++-v3/src/c++98/wlocale-inst.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fwlocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fwlocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fwlocale-inst.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,6 +26,8 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n+// Instantiate locales using COW std::wstring ABI\n+#define _GLIBCXX_USE_CXX11_ABI 0\n #include <bits/c++config.h>\n \n #ifdef _GLIBCXX_USE_WCHAR_T"}, {"sha": "54448279c3dd2c71481b7ed158ce7305a5bc8fb1", "filename": "libstdc++-v3/testsuite/18_support/50594.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F50594.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -59,7 +59,7 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   {\n-    std::string s = \"Hello World.\";\n+    std::string s = \"Hello World, this is not a small string.\";\n   }\n \n   VERIFY( user_new_called );"}, {"sha": "32d4ec0375b2a964856e0880bfddc80d1d81af35", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/1.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -140,7 +140,11 @@ void test01()\n   VERIFY( sz04 >= 100 );\n   str02.reserve();\n   sz03 = str02.capacity();\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( sz03 < 100);\n+#else\n   VERIFY( sz03 == 0 );\n+#endif\n \n   sz03 = str02.size() + 5;\n   str02.resize(sz03);"}, {"sha": "dc15b252422e0e3b148ec03089f8a2881ba67e8c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/1.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F1.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -36,7 +36,11 @@ void test01()\n   VERIFY( sz02 >= 100 );\n   str01.reserve();\n   sz01 = str01.capacity();\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( sz01 < 100);\n+#else\n   VERIFY( sz01 == 0 );\n+#endif\n \n   sz01 = str01.size() + 5;\n   str01.resize(sz01);"}, {"sha": "9a54b6b402cbb486b4b0afd0b6db46f1d004ef48", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/18654.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F18654.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -36,10 +36,13 @@ void test01()\n \n   typedef string::size_type size_type;\n \n-  // Our current implementation provides exact shrink-to-size\n-  // and shrink-to-fit (in the future, maybe this will change\n-  // for short strings).\n+#if _GLIBCXX_USE_CXX11_ABI\n+  // Can't shrink below small string size.\n+  const size_type minsize = 2 << 3;\n+#else\n+  // Exact shrink-to-size and shrink-to-fit\n   const size_type minsize = 2 << 0;\n+#endif\n   const size_type maxsize = 2 << MAX_SIZE;\n   for (size_type i = minsize; i <= maxsize; i *= 2)\n     {"}, {"sha": "333fe151b5e5437db842734c3f8f1eaf4c46bf66", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2F2.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -32,7 +32,7 @@ void test02()\n   // str01 becomes shared\n   std::string str02 = str01;\n   str01.reserve(1);\n-  VERIFY( str01.capacity() == 12 );\n+  VERIFY( str01.capacity() >= 12 );\n }\n \n int main()"}, {"sha": "8efc7151fbc7630eb1a749c664daeadaa1580ebe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/1.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F1.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -36,7 +36,11 @@ void test01()\n   VERIFY( sz02 >= 100 );\n   str01.reserve();\n   sz01 = str01.capacity();\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( sz01 < 100);\n+#else\n   VERIFY( sz01 == 0 );\n+#endif\n \n   sz01 = str01.size() + 5;\n   str01.resize(sz01);"}, {"sha": "855578dc4af8516b620300d3a45aa2a203862504", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/wchar_t/18654.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fwchar_t%2F18654.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -36,10 +36,13 @@ void test01()\n \n   typedef wstring::size_type size_type;\n \n-  // Our current implementation provides exact shrink-to-size\n-  // and shrink-to-fit (in the future, maybe this will change\n-  // for short strings).\n+#if _GLIBCXX_USE_CXX11_ABI\n+  // Can't shrink below small string size.\n+  const size_type minsize = 2 << 1;\n+#else\n+  // Exact shrink-to-size and shrink-to-fit\n   const size_type minsize = 2 << 0;\n+#endif\n   const size_type maxsize = 2 << MAX_SIZE;\n   for (size_type i = minsize; i <= maxsize; i *= 2)\n     {"}, {"sha": "ff14038f1fa1048b4f97fcca1b04bb2b4d0b29fd", "filename": "libstdc++-v3/testsuite/21_strings/headers/string/synopsis.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fheaders%2Fstring%2Fsynopsis.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -26,9 +26,11 @@ namespace std {\n   template <> struct char_traits<char>;\n   template <> struct char_traits<wchar_t>;\n \n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   //  lib.basic.string, basic_string:\n   template<class charT, class traits, class Allocator >\n   class basic_string;\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n   template<class charT, class traits, class Allocator>\n   basic_string<charT,traits,Allocator>"}, {"sha": "8b76de75823ddebfa17730c419ba9f44b6dcb712", "filename": "libstdc++-v3/testsuite/23_containers/headers/list/synopsis.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Flist%2Fsynopsis.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -21,7 +21,9 @@\n #include <list>\n \n namespace std {\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template <class T, class Allocator> class list;\n+_GLIBCXX_END_NAMESPACE_CXX11\n \n   template <class T, class Allocator>\n   bool operator==(const list<T,Allocator>& x, const list<T,Allocator>&);"}, {"sha": "577daccade9a15cd375ee5a98657e2d62dd84db8", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/copyfmt/char/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n // 27.4.4.2 basic_ios member functions\n "}, {"sha": "0fe273914a387f4f185a4a267753400ba829a6e2", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/exceptions/char/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n // 27.4.4.2 basic_ios member functions\n "}, {"sha": "e390b9ecf86dc53b662bc73a245221b4526e76b5", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_failbit.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n #include <sstream>\n #include <testsuite_hooks.h>"}, {"sha": "6588a8ae5d8aeb5b1e3a3b4ca5e3cea8aa5e9046", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/exceptions_failbit.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n #include <sstream>\n #include <testsuite_hooks.h>"}, {"sha": "d73b3025e3bac89ab469206f95d4dbcfb55bf080", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/exceptions_null.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n #include <istream>\n #include <ostream>"}, {"sha": "f609d0441aecd4eacb4add0094430f355e0df03e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n #include <istream>\n #include <ostream>"}, {"sha": "80486529895e24d48ee0c614fa481e99e55b12fb", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/12297.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -18,6 +18,9 @@\n \n // 27.6.1.1.2 class basic_istream::sentry\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n+\n #include <sstream>\n #include <testsuite_hooks.h>\n "}, {"sha": "1e3fc01397bf531b6635c7d500615e4d467550ae", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n // 27.6.1.1.2 class basic_istream::sentry\n "}, {"sha": "781b5f0b6b165d7499eecacf65dee9461e98c3ad", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_null.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n #include <istream>\n #include <ostream>"}, {"sha": "8539340ecbe3404557c8b3596f5eac8f71504873", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n \n #include <istream>\n #include <ostream>"}, {"sha": "f1e1af2df9542221aafc99ef6c7d01f418240e4d", "filename": "libstdc++-v3/testsuite/27_io/headers/sstream/synopsis.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fsstream%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fsstream%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fsstream%2Fsynopsis.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,7 @@\n #include <sstream>\n \n namespace std {\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template <class charT, class traits, class Allocator>\n     class basic_stringbuf;\n   typedef basic_stringbuf<char>     stringbuf;\n@@ -39,4 +40,5 @@ namespace std {\n     class basic_stringstream;\n   typedef basic_stringstream<char>     stringstream;\n   typedef basic_stringstream<wchar_t> wstringstream;\n+_GLIBCXX_END_NAMESPACE_CXX11\n }"}, {"sha": "29d1b63ad87d8e2368d5768fb9f18f64ff85ad24", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/cxx11.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,7 @@\n #include <ios>\n #include <testsuite_hooks.h>\n \n+#if _GLIBCXX_USE_CXX11_ABI\n using test_type = std::ios_base::failure;\n \n static_assert( std::is_base_of<std::system_error, test_type>::value, \"base\" );\n@@ -50,3 +51,6 @@ main()\n   test01();\n   test02();\n }\n+#else\n+int main() { }\n+#endif"}, {"sha": "0a2ed8c8d8666bd24cc79e4cd528d34d64c08d63", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/2.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -28,6 +28,9 @@\n // Radar 6467884: 10.X systems are not robust when paging space is exceeded\n // { dg-skip-if \"\" { *-*-darwin* && lp64 } { \"*\" } { \"\" } } \n \n+// The library still throws the original definition of std::ios::failure\n+// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n+\n #include <sstream>\n #include <iostream>\n #include <limits>"}, {"sha": "ac64520f77fcaf8b197aeecffc0b12449c6e7865", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -216,6 +216,7 @@ glibcxx_POFILES = @glibcxx_POFILES@\n glibcxx_builddir = @glibcxx_builddir@\n glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n glibcxx_prefixdir = @glibcxx_prefixdir@"}, {"sha": "76e045d195c492ddc94eebbd14a34bd6444148d3", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 290 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 306 }"}, {"sha": "2c42b7daf4f6c02b7ea85d5f617d0db0c8f1ab77", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/libfundts.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -18,6 +18,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// Type printers only recognize the old std::string for now.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+\n #include <experimental/any>\n #include <experimental/optional>\n #include <experimental/string_view>"}, {"sha": "167a7116d5908bcedc4b283da710a603ba5e3bd1", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// Type printers only recognize the old std::string for now.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+\n #include <string>\n #include <deque>\n #include <bitset>"}, {"sha": "fc2e03cd70719c39e24b45434b78dd161bc56dbc", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -20,6 +20,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// Type printers only recognize the old std::string for now.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+\n #include <string>\n #include <deque>\n #include <bitset>"}, {"sha": "76ba1b8fc9cbe7a9a49be46f0f84ec18d729fd2f", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/whatis.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -18,6 +18,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// Type printers only recognize the old std::string for now.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+\n #include <string>\n #include <iostream>\n #include <regex>"}, {"sha": "22dff63c4eff429bb4b1157e35268e20b646755a", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -255,6 +255,7 @@ namespace __gnu_test\n \t: _F_erase_point(&_Tp::erase), _F_erase_range(&_Tp::erase) { }\n       };\n \n+#if _GLIBCXX_USE_CXX11_ABI == 0 || __cplusplus < 201103L\n     // Specialization, old C++03 signature.\n     template<typename _Tp1, typename _Tp2, typename _Tp3>\n       struct erase_base<std::basic_string<_Tp1, _Tp2, _Tp3>>\n@@ -269,6 +270,7 @@ namespace __gnu_test\n \t: _F_erase_point(&container_type::erase),\n \t  _F_erase_range(&container_type::erase) { }\n       };\n+#endif\n \n     // Specialization, as forward_list has erase_after.\n     template<typename _Tp1, typename _Tp2>\n@@ -676,9 +678,15 @@ namespace __gnu_test\n       {\n \ttypedef std::basic_string<_Tp1, _Tp2, _Tp3> \tcontainer_type;\n \ttypedef typename container_type::iterator \titerator;\n+\ttypedef typename container_type::const_iterator\tconst_iterator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n+#if _GLIBCXX_USE_CXX11_ABI == 0 || __cplusplus < 201103L\n \titerator (container_type::* _F_insert_point)(iterator, value_type);\n+#else\n+\titerator (container_type::* _F_insert_point)(const_iterator,\n+\t\t\t\t\t\t     value_type);\n+#endif\n \n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };"}, {"sha": "958ec0ff750b232be856425f8f3ed12c5314346c", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a2b7558b37707a17e1f2ba5298f94a88807492/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=34a2b7558b37707a17e1f2ba5298f94a88807492", "patch": "@@ -201,6 +201,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.19\");\n       known_versions.push_back(\"GLIBCXX_3.4.20\");\n       known_versions.push_back(\"GLIBCXX_3.4.21\");\n+      known_versions.push_back(\"GLIBCXX_LDBL_3.4.21\");\n       known_versions.push_back(\"CXXABI_1.3\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n       known_versions.push_back(\"CXXABI_1.3.1\");\n@@ -239,7 +240,8 @@ check_version(symbol& test, bool added)\n       // Check that long double compatibility symbols demangled as\n       // __float128 and regular __float128 symbols are put into some _LDBL_\n       // or _FLOAT128 version name.\n-      if (added && test.demangled_name.find(\"__float128\") != std::string::npos)\n+      if (added && test.demangled_name.find(\"__float128\") != std::string::npos\n+\t  && test.demangled_name.find(\"std::__cxx11::\") != 0)\n \t{\n \t  if (test.version_name.find(\"_LDBL_\") == std::string::npos\n \t      && test.version_name.find(\"_FLOAT128\") == std::string::npos)"}]}