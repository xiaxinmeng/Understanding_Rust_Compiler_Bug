{"sha": "7be7d292fb618db4c772ee4020dcb62077af819f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlN2QyOTJmYjYxOGRiNGM3NzJlZTQwMjBkY2I2MjA3N2FmODE5Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-07-22T19:33:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-07-22T19:33:45Z"}, "message": "* alias.c (get_alias_set): Fix formatting issues.\n\nFrom-SVN: r162426", "tree": {"sha": "5c7086a2802e14ef1e42ad27696912b2eccf7b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c7086a2802e14ef1e42ad27696912b2eccf7b45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7be7d292fb618db4c772ee4020dcb62077af819f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be7d292fb618db4c772ee4020dcb62077af819f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be7d292fb618db4c772ee4020dcb62077af819f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be7d292fb618db4c772ee4020dcb62077af819f/comments", "author": null, "committer": null, "parents": [{"sha": "980a05010bfa731a05dc11e44ce4126f6b6021f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980a05010bfa731a05dc11e44ce4126f6b6021f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980a05010bfa731a05dc11e44ce4126f6b6021f2"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "321b27cd02d53791613daf335ff9293ef78e6385", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be7d292fb618db4c772ee4020dcb62077af819f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be7d292fb618db4c772ee4020dcb62077af819f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7be7d292fb618db4c772ee4020dcb62077af819f", "patch": "@@ -1,3 +1,7 @@\n+2010-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* alias.c (get_alias_set): Fix formatting issues.\n+\n 2010-07-22  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR middle-end/44878"}, {"sha": "93194907f1fcddf8db511e6d997ede269a841182", "filename": "gcc/alias.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be7d292fb618db4c772ee4020dcb62077af819f/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be7d292fb618db4c772ee4020dcb62077af819f/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=7be7d292fb618db4c772ee4020dcb62077af819f", "patch": "@@ -688,9 +688,9 @@ get_alias_set (tree t)\n \t conversion embedded treat it like a VIEW_CONVERT_EXPR above,\n \t using the memory access type for determining the alias-set.  */\n      if (TREE_CODE (inner) == MEM_REF\n-\t && (TYPE_MAIN_VARIANT (TREE_TYPE (inner))\n-\t     != TYPE_MAIN_VARIANT\n-\t          (TREE_TYPE (TREE_TYPE (TREE_OPERAND (inner, 1))))))\n+\t && TYPE_MAIN_VARIANT (TREE_TYPE (inner))\n+\t    != TYPE_MAIN_VARIANT\n+\t       (TREE_TYPE (TREE_TYPE (TREE_OPERAND (inner, 1)))))\n        return get_deref_alias_set (TREE_OPERAND (inner, 1));\n \n       /* Otherwise, pick up the outermost object that we could have a pointer\n@@ -728,10 +728,13 @@ get_alias_set (tree t)\n \treturn set;\n       return 0;\n     }\n+\n   t = TYPE_CANONICAL (t);\n+\n   /* Canonical types shouldn't form a tree nor should the canonical\n      type require structural equality checks.  */\n-  gcc_checking_assert (!TYPE_STRUCTURAL_EQUALITY_P (t) && TYPE_CANONICAL (t) == t);\n+  gcc_checking_assert (TYPE_CANONICAL (t) == t\n+\t\t       && !TYPE_STRUCTURAL_EQUALITY_P (t));\n \n   /* If this is a type with a known alias set, return it.  */\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n@@ -757,8 +760,7 @@ get_alias_set (tree t)\n   /* There are no objects of FUNCTION_TYPE, so there's no point in\n      using up an alias set for them.  (There are, of course, pointers\n      and references to functions, but that's different.)  */\n-  else if (TREE_CODE (t) == FUNCTION_TYPE\n-\t   || TREE_CODE (t) == METHOD_TYPE)\n+  else if (TREE_CODE (t) == FUNCTION_TYPE || TREE_CODE (t) == METHOD_TYPE)\n     set = 0;\n \n   /* Unless the language specifies otherwise, let vector types alias\n@@ -776,18 +778,17 @@ get_alias_set (tree t)\n      integer(kind=4)[4] the same alias set or not.\n      Just be pragmatic here and make sure the array and its element\n      type get the same alias set assigned.  */\n-  else if (TREE_CODE (t) == ARRAY_TYPE\n-\t   && !TYPE_NONALIASED_COMPONENT (t))\n+  else if (TREE_CODE (t) == ARRAY_TYPE && !TYPE_NONALIASED_COMPONENT (t))\n     set = get_alias_set (TREE_TYPE (t));\n \n+  /* Otherwise make a new alias set for this type.  */\n   else\n-    /* Otherwise make a new alias set for this type.  */\n     set = new_alias_set ();\n \n   TYPE_ALIAS_SET (t) = set;\n \n-  /* If this is an aggregate type, we must record any component aliasing\n-     information.  */\n+  /* If this is an aggregate type or a complex type, we must record any\n+     component aliasing information.  */\n   if (AGGREGATE_TYPE_P (t) || TREE_CODE (t) == COMPLEX_TYPE)\n     record_component_aliases (t);\n "}]}