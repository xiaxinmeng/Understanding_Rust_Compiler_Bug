{"sha": "b73c0bc87d961344377a72a3ddfdadf5695eae66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczYzBiYzg3ZDk2MTM0NDM3N2E3MmEzZGRmZGFkZjU2OTVlYWU2Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-26T08:01:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-26T08:01:13Z"}, "message": "alpha.h (enum reg_class): Add R24_REG, R25_REG; rename PV_REG to R27_REG.\n\n        * config/alpha/alpha.h (enum reg_class): Add R24_REG, R25_REG;\n        rename PV_REG to R27_REG.\n        (REG_CLASS_CONTENTS, REGNO_REG_CLASS): Update.\n        (REG_CLASS_FROM_LETTER): Update.\n        (PREFERRED_RELOAD_CLASS): Don't widen a reg class.\n        * config/alpha/alpha.md (divsi3): Don't hard-code r24, r25, r27.\n        (udivsi3, modsi3, umodsi3): Likewise.\n        (divdi3, udivdi3, moddi3, umoddi3): Likewise.\n\nFrom-SVN: r46535", "tree": {"sha": "0743cb23305e7bc6fe05ecb0df3becb62b4463f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0743cb23305e7bc6fe05ecb0df3becb62b4463f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b73c0bc87d961344377a72a3ddfdadf5695eae66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73c0bc87d961344377a72a3ddfdadf5695eae66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73c0bc87d961344377a72a3ddfdadf5695eae66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73c0bc87d961344377a72a3ddfdadf5695eae66/comments", "author": null, "committer": null, "parents": [{"sha": "108c1afce2b7b55375940b42e3779b76c6c24a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108c1afce2b7b55375940b42e3779b76c6c24a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108c1afce2b7b55375940b42e3779b76c6c24a1f"}], "stats": {"total": 240, "additions": 130, "deletions": 110}, "files": [{"sha": "b66c8d53507c41f82975ac8671d0381ebea9563b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c0bc87d961344377a72a3ddfdadf5695eae66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c0bc87d961344377a72a3ddfdadf5695eae66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b73c0bc87d961344377a72a3ddfdadf5695eae66", "patch": "@@ -1,3 +1,14 @@\n+2001-10-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.h (enum reg_class): Add R24_REG, R25_REG;\n+\trename PV_REG to R27_REG.\n+\t(REG_CLASS_CONTENTS, REGNO_REG_CLASS): Update.\n+\t(REG_CLASS_FROM_LETTER): Update.\n+\t(PREFERRED_RELOAD_CLASS): Don't widen a reg class.\n+\t* config/alpha/alpha.md (divsi3): Don't hard-code r24, r25, r27.\n+\t(udivsi3, modsi3, umodsi3): Likewise.\n+\t(divdi3, udivdi3, moddi3, umoddi3): Likewise.\n+\n 2001-10-26  Richard Henderson  <rth@redhat.com>\n \n \t* cfg.c (clear_aux_for_blocks): Split out of ..."}, {"sha": "155a2670826601e61369355396599f31b24cc772", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c0bc87d961344377a72a3ddfdadf5695eae66/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c0bc87d961344377a72a3ddfdadf5695eae66/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b73c0bc87d961344377a72a3ddfdadf5695eae66", "patch": "@@ -729,30 +729,42 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n    For any two classes, it is very desirable that there be another\n    class that represents their union.  */\n    \n-enum reg_class { NO_REGS, PV_REG, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n-\t\t LIM_REG_CLASSES };\n+enum reg_class {\n+  NO_REGS, R24_REG, R25_REG, R27_REG,\n+  GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n+  LIM_REG_CLASSES\n+};\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n /* Give names of register classes as strings for dump file.   */\n \n #define REG_CLASS_NAMES\t\t\t\t\\\n- {\"NO_REGS\", \"PV_REG\", \"GENERAL_REGS\", \"FLOAT_REGS\", \"ALL_REGS\" }\n+ {\"NO_REGS\", \"R24_REG\", \"R25_REG\", \"R27_REG\",\t\\\n+  \"GENERAL_REGS\", \"FLOAT_REGS\", \"ALL_REGS\" }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS\t\\\n-  { {0, 0}, {0x08000000, 0}, {~0, 0x80000000}, {0, 0x7fffffff}, {~0, ~0} }\n+#define REG_CLASS_CONTENTS\t\t\t\t\\\n+{ {0x00000000, 0x00000000},\t/* NO_REGS */\t\t\\\n+  {0x01000000, 0x00000000},\t/* R24_REG */\t\t\\\n+  {0x02000000, 0x00000000},\t/* R25_REG */\t\t\\\n+  {0x08000000, 0x00000000},\t/* R27_REG */\t\t\\\n+  {0xffffffff, 0x80000000},\t/* GENERAL_REGS */\t\\\n+  {0x00000000, 0x7fffffff},\t/* FLOAT_REGS */\t\\\n+  {0xffffffff, 0xffffffff} }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n #define REGNO_REG_CLASS(REGNO)\t\t\t\\\n- ((REGNO) == 27 ? PV_REG\t\t\t\\\n+ ((REGNO) == 24 ? R24_REG\t\t\t\\\n+  : (REGNO) == 25 ? R25_REG\t\t\t\\\n+  : (REGNO) == 27 ? R27_REG\t\t\t\\\n   : (REGNO) >= 32 && (REGNO) <= 62 ? FLOAT_REGS\t\\\n   : GENERAL_REGS)\n \n@@ -763,7 +775,11 @@ enum reg_class { NO_REGS, PV_REG, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n /* Get reg_class from a letter such as appears in the machine description.  */\n \n #define REG_CLASS_FROM_LETTER(C)\t\\\n- ((C) == 'c' ? PV_REG : (C) == 'f' ? FLOAT_REGS : NO_REGS)\n+ ((C) == 'a' ? R24_REG\t\t\t\\\n+  : (C) == 'b' ? R25_REG\t\t\\\n+  : (C) == 'c' ? R27_REG\t\t\\\n+  : (C) == 'f' ? FLOAT_REGS\t\t\\\n+  : NO_REGS)\n \n /* Define this macro to change register usage conditional on target flags.  */\n /* #define CONDITIONAL_REGISTER_USAGE  */\n@@ -840,9 +856,10 @@ enum reg_class { NO_REGS, PV_REG, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    On the Alpha, all constants except zero go into a floating-point\n    register via memory.  */\n \n-#define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\\\n-   (CONSTANT_P (X) && (X) != const0_rtx && (X) != CONST0_RTX (GET_MODE (X)) \\\n-   ? ((CLASS) == FLOAT_REGS || (CLASS) == NO_REGS ? NO_REGS : GENERAL_REGS) \\\n+#define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\t\t\\\n+  (CONSTANT_P (X) && (X) != const0_rtx && (X) != CONST0_RTX (GET_MODE (X)) \\\n+   ? ((CLASS) == FLOAT_REGS || (CLASS) == NO_REGS ? NO_REGS\t\t\\\n+      : (CLASS) == ALL_REGS ? GENERAL_REGS : (CLASS))\t\t\t\\\n    : (CLASS))\n \n /* Loading and storing HImode or QImode values to and from memory"}, {"sha": "0dfece8d1062c7f290149d639f156c69c2a02dc7", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 92, "deletions": 100, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73c0bc87d961344377a72a3ddfdadf5695eae66/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73c0bc87d961344377a72a3ddfdadf5695eae66/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=b73c0bc87d961344377a72a3ddfdadf5695eae66", "patch": "@@ -1019,91 +1019,99 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n ;; extension?\n \n (define_expand \"divsi3\"\n-  [(set (reg:DI 24)\n+  [(set (match_dup 3)\n \t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-   (set (reg:DI 25)\n+   (set (match_dup 4)\n \t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (sign_extend:DI (div:SI (reg:DI 24) (reg:DI 25))))\n+   (parallel [(set (match_dup 5)\n+\t\t   (sign_extend:DI (div:SI (match_dup 3) (match_dup 4))))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:SI (reg:DI 27) 0))]\n+\t(subreg:SI (match_dup 5) 0))]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n-  \"\")\n+{\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = gen_reg_rtx (DImode);\n+})\n \n (define_expand \"udivsi3\"\n-  [(set (reg:DI 24)\n+  [(set (match_dup 3)\n \t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-   (set (reg:DI 25)\n+   (set (match_dup 4)\n \t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (sign_extend:DI (udiv:SI (reg:DI 24) (reg:DI 25))))\n+   (parallel [(set (match_dup 5)\n+\t\t   (sign_extend:DI (udiv:SI (match_dup 3) (match_dup 4))))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:SI (reg:DI 27) 0))]\n+\t(subreg:SI (match_dup 5) 0))]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n-  \"\")\n+{\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = gen_reg_rtx (DImode);\n+})\n \n (define_expand \"modsi3\"\n-  [(set (reg:DI 24)\n+  [(set (match_dup 3)\n \t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-   (set (reg:DI 25)\n+   (set (match_dup 4)\n \t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (sign_extend:DI (mod:SI (reg:DI 24) (reg:DI 25))))\n+   (parallel [(set (match_dup 5)\n+\t\t   (sign_extend:DI (mod:SI (match_dup 3) (match_dup 4))))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:SI (reg:DI 27) 0))]\n+\t(subreg:SI (match_dup 5) 0))]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n-  \"\")\n+{\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = gen_reg_rtx (DImode);\n+})\n \n (define_expand \"umodsi3\"\n-  [(set (reg:DI 24)\n+  [(set (match_dup 3)\n \t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-   (set (reg:DI 25)\n+   (set (match_dup 4)\n \t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (sign_extend:DI (umod:SI (reg:DI 24) (reg:DI 25))))\n+   (parallel [(set (match_dup 5)\n+\t\t   (sign_extend:DI (umod:SI (match_dup 3) (match_dup 4))))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:SI (reg:DI 27) 0))]\n+\t(subreg:SI (match_dup 5) 0))]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n-  \"\")\n+{\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = gen_reg_rtx (DImode);\n+})\n \n (define_expand \"divdi3\"\n-  [(set (reg:DI 24) (match_operand:DI 1 \"input_operand\" \"\"))\n-   (set (reg:DI 25) (match_operand:DI 2 \"input_operand\" \"\"))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (div:DI (reg:DI 24)\n-\t\t\t   (reg:DI 25)))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (div:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])\n-   (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(reg:DI 27))]\n+\t      (clobber (reg:DI 28))])]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n   \"\")\n \n (define_expand \"udivdi3\"\n-  [(set (reg:DI 24) (match_operand:DI 1 \"input_operand\" \"\"))\n-   (set (reg:DI 25) (match_operand:DI 2 \"input_operand\" \"\"))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (udiv:DI (reg:DI 24)\n-\t\t\t    (reg:DI 25)))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (udiv:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])\n-   (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(reg:DI 27))]\n+\t      (clobber (reg:DI 28))])]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n   \"\")\n \n (define_expand \"moddi3\"\n-  [(use (match_operand:DI 0 \"nonimmediate_operand\" \"\"))\n-   (use (match_operand:DI 1 \"input_operand\" \"\"))\n-   (use (match_operand:DI 2 \"input_operand\" \"\"))]\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))\n+   (use (match_operand:DI 2 \"register_operand\" \"\"))]\n   \"!TARGET_ABI_OPEN_VMS\"\n {\n   if (TARGET_ABI_UNICOSMK)\n@@ -1114,47 +1122,37 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n })\n \n (define_expand \"moddi3_dft\"\n-  [(set (reg:DI 24) (match_operand:DI 1 \"input_operand\" \"\"))\n-   (set (reg:DI 25) (match_operand:DI 2 \"input_operand\" \"\"))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (mod:DI (reg:DI 24)\n-\t\t\t   (reg:DI 25)))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (mod:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t   (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])\n-   (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(reg:DI 27))]\n+\t      (clobber (reg:DI 28))])]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n   \"\")\n \n ;; On Unicos/Mk, we do as the system's C compiler does:\n ;; compute the quotient, multiply and subtract.\n \n (define_expand \"moddi3_umk\"\n-  [(use (match_operand:DI 0 \"nonimmediate_operand\" \"\"))\n-   (use (match_operand:DI 1 \"input_operand\" \"\"))\n-   (use (match_operand:DI 2 \"input_operand\" \"\"))]\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))\n+   (use (match_operand:DI 2 \"register_operand\" \"\"))]\n   \"TARGET_ABI_UNICOSMK\"\n {\n-  rtx mul, div, tmp;\n-\n-  mul = gen_reg_rtx (DImode);\n-  tmp = gen_reg_rtx (DImode);\n-  operands[1] = force_reg (DImode, operands[1]);\n-  operands[2] = force_reg (DImode, operands[2]);\n+  rtx div, mul = gen_reg_rtx (DImode);\n \n   div = expand_binop (DImode, sdiv_optab, operands[1], operands[2],\n \t\t      NULL_RTX, 0, OPTAB_LIB);\n   div = force_reg (DImode, div);\n   emit_insn (gen_muldi3 (mul, operands[2], div));\n-  emit_insn (gen_subdi3 (tmp, operands[1], mul));\n-  emit_move_insn (operands[0], tmp);\n+  emit_insn (gen_subdi3 (operands[0], operands[1], mul));\n   DONE;\n })\n \n (define_expand \"umoddi3\"\n-  [(use (match_operand:DI 0 \"nonimmediate_operand\" \"\"))\n-   (use (match_operand:DI 1 \"input_operand\" \"\"))\n-   (use (match_operand:DI 2 \"input_operand\" \"\"))]\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))\n+   (use (match_operand:DI 2 \"register_operand\" \"\"))]\n   \"! TARGET_ABI_OPEN_VMS\"\n {\n   if (TARGET_ABI_UNICOSMK)\n@@ -1165,84 +1163,78 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n })\n \n (define_expand \"umoddi3_dft\"\n-  [(set (reg:DI 24) (match_operand:DI 1 \"input_operand\" \"\"))\n-   (set (reg:DI 25) (match_operand:DI 2 \"input_operand\" \"\"))\n-   (parallel [(set (reg:DI 27)\n-\t\t   (umod:DI (reg:DI 24)\n-\t\t\t    (reg:DI 25)))\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (umod:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])\n-   (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(reg:DI 27))]\n+\t      (clobber (reg:DI 28))])]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n   \"\")\n \n (define_expand \"umoddi3_umk\"\n-  [(use (match_operand:DI 0 \"nonimmediate_operand\" \"\"))\n-   (use (match_operand:DI 1 \"input_operand\" \"\"))\n-   (use (match_operand:DI 2 \"input_operand\" \"\"))]\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))\n+   (use (match_operand:DI 2 \"register_operand\" \"\"))]\n   \"TARGET_ABI_UNICOSMK\"\n {\n-  rtx mul, div, tmp;\n-\n-  mul = gen_reg_rtx (DImode);\n-  tmp = gen_reg_rtx (DImode);\n-  operands[1] = force_reg (DImode, operands[1]);\n-  operands[2] = force_reg (DImode, operands[2]);\n+  rtx div, mul = gen_reg_rtx (DImode);\n \n   div = expand_binop (DImode, udiv_optab, operands[1], operands[2],\n \t\t      NULL_RTX, 1, OPTAB_LIB);\n   div = force_reg (DImode, div);\n   emit_insn (gen_muldi3 (mul, operands[2], div));\n-  emit_insn (gen_subdi3 (tmp, operands[1], mul));\n-  emit_move_insn (operands[0], tmp);\n+  emit_insn (gen_subdi3 (operands[0], operands[1], mul));\n   DONE;\n })\n \n ;; Lengths of 8 for ldq $t12,__divq($gp); jsr $t9,($t12),__divq as\n ;; expanded by the assembler.\n \n (define_insn \"*divmodsi_internal_er\"\n-  [(set (reg:DI 27)\n-\t(sign_extend:DI (match_operator:SI 0 \"divmod_operator\"\n-\t\t\t[(reg:DI 24) (reg:DI 25)])))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n+\t(sign_extend:DI (match_operator:SI 3 \"divmod_operator\"\n+\t\t\t[(match_operand:DI 1 \"register_operand\" \"a\")\n+\t\t\t (match_operand:DI 2 \"register_operand\" \"b\")])))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n-  \"ldq $27,__%E0($29)\\t\\t!literal!%#\\;jsr $23,($27),__%E0\\t\\t!lituse_jsr!%#\"\n+  \"ldq $27,__%E3($29)\\t\\t!literal!%#\\;jsr $23,($27),__%E3\\t\\t!lituse_jsr!%#\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*divmodsi_internal\"\n-  [(set (reg:DI 27)\n-\t(sign_extend:DI (match_operator:SI 0 \"divmod_operator\"\n-\t\t\t[(reg:DI 24) (reg:DI 25)])))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n+\t(sign_extend:DI (match_operator:SI 3 \"divmod_operator\"\n+\t\t\t[(match_operand:DI 1 \"register_operand\" \"a\")\n+\t\t\t (match_operand:DI 2 \"register_operand\" \"b\")])))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n-  \"%E0 $24,$25,$27\"\n+  \"%E3 %1,%2,%0\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*divmoddi_internal_er\"\n-  [(set (reg:DI 27)\n-\t(match_operator:DI 0 \"divmod_operator\"\n-\t\t\t[(reg:DI 24) (reg:DI 25)]))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n+\t(match_operator:DI 3 \"divmod_operator\"\n+\t\t\t[(match_operand:DI 1 \"register_operand\" \"a\")\n+\t\t\t (match_operand:DI 2 \"register_operand\" \"b\")]))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"TARGET_EXPLICIT_RELOCS && ! TARGET_ABI_OPEN_VMS\"\n-  \"ldq $27,__%E0($29)\\t\\t!literal!%#\\;jsr $23,($27),__%E0\\t\\t!lituse_jsr!%#\"\n+  \"ldq $27,__%E3($29)\\t\\t!literal!%#\\;jsr $23,($27),__%E3\\t\\t!lituse_jsr!%#\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*divmoddi_internal\"\n-  [(set (reg:DI 27)\n-\t(match_operator:DI 0 \"divmod_operator\"\n-\t\t\t[(reg:DI 24) (reg:DI 25)]))\n+  [(set (match_operand:DI 0 \"register_operand\" \"=c\")\n+\t(match_operator:DI 3 \"divmod_operator\"\n+\t\t\t[(match_operand:DI 1 \"register_operand\" \"a\")\n+\t\t\t (match_operand:DI 2 \"register_operand\" \"b\")]))\n    (clobber (reg:DI 23))\n    (clobber (reg:DI 28))]\n   \"! TARGET_ABI_OPEN_VMS && ! TARGET_ABI_UNICOSMK\"\n-  \"%E0 $24,$25,$27\"\n+  \"%E3 %1,%2,%0\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"8\")])\n \f"}]}