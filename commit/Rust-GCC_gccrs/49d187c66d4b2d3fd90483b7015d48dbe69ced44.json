{"sha": "49d187c66d4b2d3fd90483b7015d48dbe69ced44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkMTg3YzY2ZDRiMmQzZmQ5MDQ4M2I3MDE1ZDQ4ZGJlNjljZWQ0NA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-20T00:12:43Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-20T00:12:43Z"}, "message": "rs6000: Delete the \"wu\" constraint\n\nThis replaces the \"wu\" constraint by \"v\", with isa \"p8v\".  Or, in most\ncases, use \"wa\", since the instructions allow all VSX registers, and it\ndoes not change how GCC behaves, so it is clearer that way.\n\nThis also delete the unused <Fa>.\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wu\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wu.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wu\" constraint by \"v\" or \"wa\",\n\tboth with \"p8v\".\n\t(define_mode_attr Fa): Delete.\n\t* config/rs6000/vsx.md: Ditto.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271388", "tree": {"sha": "0c3c465df6a6bff9129a7ecaee7f717cc8a4123d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c3c465df6a6bff9129a7ecaee7f717cc8a4123d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49d187c66d4b2d3fd90483b7015d48dbe69ced44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d187c66d4b2d3fd90483b7015d48dbe69ced44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d187c66d4b2d3fd90483b7015d48dbe69ced44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d187c66d4b2d3fd90483b7015d48dbe69ced44/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c8ac746d1ccfaa429693c4869b08222e447ceed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8ac746d1ccfaa429693c4869b08222e447ceed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8ac746d1ccfaa429693c4869b08222e447ceed"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "e9bbedb26f5485ecb09f11460625136eadb71f9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49d187c66d4b2d3fd90483b7015d48dbe69ced44", "patch": "@@ -1,3 +1,17 @@\n+2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wu\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wu.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wu\" constraint by \"v\" or \"wa\",\n+\tboth with \"p8v\".\n+\t(define_mode_attr Fa): Delete.\n+\t* config/rs6000/vsx.md: Ditto.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wJ\"):"}, {"sha": "f9bbb7fbec030d6190db28adde99245698c041c3", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=49d187c66d4b2d3fd90483b7015d48dbe69ced44", "patch": "@@ -109,9 +109,6 @@\n (define_register_constraint \"wt\" \"rs6000_constraints[RS6000_CONSTRAINT_wt]\"\n   \"VSX vector register to hold 128 bit integer or NO_REGS.\")\n \n-(define_register_constraint \"wu\" \"rs6000_constraints[RS6000_CONSTRAINT_wu]\"\n-  \"Altivec register to use for float/32-bit int loads/stores  or NO_REGS.\")\n-\n (define_register_constraint \"wv\" \"rs6000_constraints[RS6000_CONSTRAINT_wv]\"\n   \"Altivec register to use for double loads/stores  or NO_REGS.\")\n "}, {"sha": "7e2dbf98f5f4aa48bcff1fc294dead1c0b422534", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=49d187c66d4b2d3fd90483b7015d48dbe69ced44", "patch": "@@ -2523,7 +2523,6 @@ rs6000_debug_reg_global (void)\n \t   \"wr reg_class = %s\\n\"\n \t   \"ws reg_class = %s\\n\"\n \t   \"wt reg_class = %s\\n\"\n-\t   \"wu reg_class = %s\\n\"\n \t   \"wv reg_class = %s\\n\"\n \t   \"ww reg_class = %s\\n\"\n \t   \"wx reg_class = %s\\n\"\n@@ -2552,7 +2551,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ws]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wt]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wu]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wv]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ww]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n@@ -3181,7 +3179,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twr - GPR if 64-bit mode is permitted.\n \tws - Register class to do ISA 2.06 DF operations.\n \twt - VSX register for TImode in VSX registers.\n-\twu - Altivec register for ISA 2.07 VSX SF/SI load/stores.\n \twv - Altivec register for ISA 2.06 VSX DF/DI load/stores.\n \tww - Register class to do SF conversions in with VSX operations.\n \twx - Float register if we can do 32-bit int stores.\n@@ -3236,7 +3233,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \n   if (TARGET_P8_VECTOR)\t\t\t\t\t\t/* SFmode  */\n     {\n-      rs6000_constraints[RS6000_CONSTRAINT_wu] = ALTIVEC_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wy] = VSX_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_ww] = VSX_REGS;\n     }"}, {"sha": "6d3056139bec8a1c65eb9ea0000f2b5ebcaad444", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=49d187c66d4b2d3fd90483b7015d48dbe69ced44", "patch": "@@ -1264,7 +1264,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */\n   RS6000_CONSTRAINT_ws,\t\t/* VSX register for DF */\n   RS6000_CONSTRAINT_wt,\t\t/* VSX register for TImode */\n-  RS6000_CONSTRAINT_wu,\t\t/* Altivec register for float load/stores.  */\n   RS6000_CONSTRAINT_wv,\t\t/* Altivec register for double load/stores.  */\n   RS6000_CONSTRAINT_ww,\t\t/* FP or VSX register for vsx float ops.  */\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */"}, {"sha": "c5def7480d917094c9ddf43ff403e3e613f2923a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=49d187c66d4b2d3fd90483b7015d48dbe69ced44", "patch": "@@ -532,9 +532,6 @@\n ; instructions added in ISA 2.07 (power8)\n (define_mode_attr Fv2\t\t[(SF \"wy\") (DF \"ws\") (DI \"wi\")])\n \n-; SF/DF constraint for arithmetic on altivec registers\n-(define_mode_attr Fa\t\t[(SF \"wu\") (DF \"wv\")])\n-\n ; s/d suffix for things like sdiv/ddiv\n (define_mode_attr Fs\t\t[(SF \"s\")  (DF \"d\")])\n \n@@ -834,7 +831,7 @@\n \n \n (define_insn \"zero_extendsi<mode>2\"\n-  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wu,wj,r,wIwH\")\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wa,wj,r,wIwH\")\n \t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wIwH,wIwH\")))]\n   \"\"\n   \"@\n@@ -846,7 +843,7 @@\n    mfvsrwz %0,%x1\n    xxextractuw %x0,%x1,4\"\n   [(set_attr \"type\" \"load,shift,fpload,fpload,mffgpr,mftgpr,vecexts\")\n-   (set_attr \"isa\" \"*,*,*,*,*,*,p9v\")])\n+   (set_attr \"isa\" \"*,*,*,p8v,*,*,p9v\")])\n \n (define_insn_and_split \"*zero_extendsi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n@@ -1019,8 +1016,7 @@\n \n (define_insn \"extendsi<mode>2\"\n   [(set (match_operand:EXTSI 0 \"gpc_reg_operand\"\n-\t\t     \"=r, r,   wl,    wu,    wj,    wH,     wH,    wr\")\n-\n+\t\t     \"=r, r,   wl,    wa,    wj,    wH,     wH,    wr\")\n \t(sign_extend:EXTSI (match_operand:SI 1 \"lwa_operand\"\n \t\t     \"YZ, r,   Z,     Z,     r,     wH,     wH,    ?wIwH\")))]\n   \"\"\n@@ -1036,7 +1032,7 @@\n   [(set_attr \"type\" \"load,exts,fpload,fpload,mffgpr,vecexts,vecperm,mftgpr\")\n    (set_attr \"sign_extend\" \"yes\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,8\")\n-   (set_attr \"isa\" \"*,*,*,*,*,p9v,*,*\")])\n+   (set_attr \"isa\" \"*,*,*,p8v,*,p9v,*,*\")])\n \n (define_split\n   [(set (match_operand:EXTSI 0 \"int_reg_operand\")\n@@ -4775,7 +4771,7 @@\n })\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,ws,?ws,wu,v\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,ws,?ws,wa,v\")\n \t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wy,Z,wY\")))]\n   \"TARGET_HARD_FLOAT && !HONOR_SNANS (SFmode)\"\n   \"@\n@@ -4793,7 +4789,7 @@\n   DONE;\n }\n   [(set_attr \"type\" \"fp,fpsimple,fpload,fp,fpsimple,fpload,fpload\")\n-   (set_attr \"isa\" \"*,*,*,*,*,*,p9v\")])\n+   (set_attr \"isa\" \"*,*,*,*,*,p8v,p9v\")])\n \n (define_insn \"*extendsfdf2_snan\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n@@ -6169,17 +6165,16 @@\n })\n \n ; An UNSPEC is used so we don't have to support SImode in FP registers.\n-; The 'wu' constraint is used for the 2nd alternative to ensure stxsiwx\n-; is only generated for Power8 or later.\n (define_insn \"stfiwx\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=Z,Z\")\n-\t(unspec:SI [(match_operand:DI 1 \"gpc_reg_operand\" \"d,wu\")]\n+\t(unspec:SI [(match_operand:DI 1 \"gpc_reg_operand\" \"d,wa\")]\n \t\t   UNSPEC_STFIWX))]\n   \"TARGET_PPC_GFXOPT\"\n   \"@\n    stfiwx %1,%y0\n    stxsiwx %x1,%y0\"\n-  [(set_attr \"type\" \"fpstore\")])\n+  [(set_attr \"type\" \"fpstore\")\n+   (set_attr \"isa\" \"*,p8v\")])\n \n ;; If we don't have a direct conversion to single precision, don't enable this\n ;; conversion for 32-bit without fast math, because we don't have the insn to\n@@ -6372,13 +6367,14 @@\n   \"\")\n \n (define_insn \"floatunsdisf2_fcfidus\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wu\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa\")\n         (unsigned_float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wi\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDUS\"\n   \"@\n    fcfidus %0,%1\n    xscvuxdsp %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,p8v\")])\n \n (define_insn_and_split \"*floatunsdisf2_mem\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wy,wy\")\n@@ -6882,7 +6878,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n \t\t\"=r,         r,           r,           wI,          wH,\n \t\t m,          Z,           Z,           r,           r,\n-\t\t r,          wIwH,        wIwH,        wIwH,        wu,\n+\t\t r,          wIwH,        wIwH,        wIwH,        v,\n \t\t wIwH,       wH,          wH,          wIwH,        r,\n \t\t r,          *h,          *h\")\n \t(match_operand:SI 1 \"input_operand\"\n@@ -6932,7 +6928,7 @@\n    (set_attr \"isa\"\n \t\t\"*,          *,           *,           *,           *,\n \t\t *,          *,           *,           *,           *,\n-\t\t *,          *,           p9v,         p9v,         *,\n+\t\t *,          *,           p9v,         p9v,         p8v,\n \t\t p9v,        *,           p9v,         *,           *,\n \t\t *,          *,           *\")])\n \n@@ -6962,7 +6958,7 @@\n \t\t wIwH\")\n \t(unspec:SI [(match_operand:SF 1 \"input_operand\"\n \t\t\"r,          m,           Z,           Z,        r,\n-\t\t f,          v,           wu,          wIwH,     wIwH,\n+\t\t f,          v,           wa,          wIwH,     wIwH,\n \t\t r\")]\n \t\t    UNSPEC_SI_FROM_SF))\n    (clobber (match_scratch:V4SF 2\n@@ -7009,7 +7005,7 @@\n \t\t 4\")\n    (set_attr \"isa\"\n \t\t\"*,          *,           *,           *,        *,\n-\t\t *,          p9v,         *,           *,        *,\n+\t\t *,          p9v,         p8v,         *,        *,\n \t\t *\")])\n \n ;; movsi_from_sf with zero extension\n@@ -7295,12 +7291,12 @@\n \n (define_insn \"movsf_hardfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t \"=!r,       f,         v,          wu,        m,         wY,\n+\t \"=!r,       f,         v,          wa,        m,         wY,\n \t  Z,         m,         ww,         !r,        f,         ww,\n \t  !r,        *c*l,      !r,         *h\")\n \t(match_operand:SF 1 \"input_operand\"\n \t \"m,         m,         wY,         Z,         f,         v,\n-\t  wu,        r,         j,          j,         f,         ww,\n+\t  wa,        r,         j,          j,         f,         ww,\n \t  r,         r,         *h,         0\"))]\n   \"(register_operand (operands[0], SFmode)\n    || register_operand (operands[1], SFmode))\n@@ -7329,8 +7325,8 @@\n \t fpstore,    store,     veclogical, integer,   fpsimple,  fpsimple,\n \t *,          mtjmpr,    mfjmpr,     *\")\n    (set_attr \"isa\"\n-\t\"*,          *,         p9v,        *,         *,         p9v,\n-\t *,          *,         *,          *,         *,         *,\n+\t\"*,          *,         p9v,        p8v,       *,         p9v,\n+\t p8v,        *,         *,          *,         *,         *,\n \t *,          *,         *,          *\")])\n \n ;;\tLWZ          LFIWZX     STW        STFIWX     MTVSRWZ    MFVSRWZ\n@@ -7413,11 +7409,11 @@\n ;;\t    STXSIWX      GPR->VSX   VSX->GPR   GPR->GPR\n (define_insn_and_split \"movsf_from_si\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t    \"=!r,       f,         v,         wu,        m,         Z,\n+\t    \"=!r,       f,         v,         wa,        m,         Z,\n \t     Z,         wy,        ?r,        !r\")\n \t(unspec:SF [(match_operand:SI 1 \"input_operand\" \n \t    \"m,         m,         wY,        Z,         r,         f,\n-\t     wu,        r,         wy,        r\")]\n+\t     wa,        r,         wy,        r\")]\n \t\t   UNSPEC_SF_FROM_SI))\n    (clobber (match_scratch:DI 2\n \t    \"=X,        X,         X,         X,         X,         X,\n@@ -7460,8 +7456,8 @@\n \t    \"load,       fpload,    fpload,    fpload,    store,     fpstore,\n \t     fpstore,    vecfloat,  mffgpr,    *\")\n    (set_attr \"isa\"\n-\t    \"*,          *,         p9v,       *,         *,         *,\n-\t     *,          *,         *,         *\")])\n+\t    \"*,          *,         p9v,       p8v,       *,         *,\n+\t     p8v,        *,         *,         *\")])\n \n \f\n ;; Move 64-bit binary/decimal floating point"}, {"sha": "fd92704b3c47e5e4447e3538d80d11f7d7a1022a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49d187c66d4b2d3fd90483b7015d48dbe69ced44/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=49d187c66d4b2d3fd90483b7015d48dbe69ced44", "patch": "@@ -3199,7 +3199,7 @@ Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n When using any of the register constraints (@code{wa}, @code{wd},\n @code{wf}, @code{wg}, @code{wh}, @code{wi}, @code{wj}, @code{wk},\n @code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws},\n-@code{wt}, @code{wu}, @code{wv}, @code{ww}, or @code{wy})\n+@code{wt}, @code{wv}, @code{ww}, or @code{wy})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n@@ -3295,9 +3295,6 @@ VSX vector register to hold scalar double values or NO_REGS.\n @item wt\n VSX vector register to hold 128 bit integer or NO_REGS.\n \n-@item wu\n-Altivec register to use for float/32-bit int loads/stores  or NO_REGS.\n-\n @item wv\n Altivec register to use for double loads/stores  or NO_REGS.\n "}]}