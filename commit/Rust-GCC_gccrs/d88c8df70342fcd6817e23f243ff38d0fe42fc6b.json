{"sha": "d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4YzhkZjcwMzQyZmNkNjgxN2UyM2YyNDNmZjM4ZDBmZTQyZmM2Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-25T13:26:05Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-26T01:39:32Z"}, "message": "analyzer: fix ICE on initializers for unsized array fields [PR96777]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96777\n\t* region-model.h (class compound_svalue): Document that all keys\n\tmust be concrete.\n\t(compound_svalue::compound_svalue): Move definition to svalue.cc.\n\t* store.cc (binding_map::apply_ctor_to_region): Handle\n\tinitializers for trailing arrays with incomplete size.\n\t* svalue.cc (compound_svalue::compound_svalue): Move definition\n\there from region-model.h.  Add assertion that all keys are\n\tconcrete.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96777\n\t* gcc.dg/analyzer/pr96777.c: New test.", "tree": {"sha": "bffe72a889c5ed9f48fdfa06fd85b2efe2fa84a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bffe72a889c5ed9f48fdfa06fd85b2efe2fa84a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0f6efe7a049744b735d8bc69b205a417236c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0f6efe7a049744b735d8bc69b205a417236c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0f6efe7a049744b735d8bc69b205a417236c33"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "f325a8b83810a7cef9416f3697fcd45c9bc8545d", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "patch": "@@ -1109,6 +1109,9 @@ namespace ana {\n    mapping, but are required to use an svalue, such as when handling\n    compound assignments and compound return values.\n \n+   All keys within the underlying binding_map are required to be concrete,\n+   not symbolic.\n+\n    Instances of this class shouldn't be bound as-is into the store;\n    instead they should be unpacked.  Similarly, they should not be\n    nested.  */\n@@ -1150,11 +1153,7 @@ class compound_svalue : public svalue\n     const binding_map *m_map_ptr;\n   };\n \n-  compound_svalue (tree type, const binding_map &map)\n-  : svalue (calc_complexity (map), type),\n-    m_map (map)\n-  {\n-  }\n+  compound_svalue (tree type, const binding_map &map);\n \n   enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_COMPOUND; }\n   const compound_svalue *dyn_cast_compound_svalue () const { return this; }"}, {"sha": "8439366f0b51e584b47029be8cfab8ec9bef4b2f", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "patch": "@@ -429,6 +429,31 @@ binding_map::apply_ctor_to_region (const region *parent_reg, tree ctor,\n \t  const binding_key *k\n \t    = binding_key::make (mgr->get_store_manager (), child_reg,\n \t\t\t\t BK_direct);\n+\t  /* Handle the case where we have an unknown size for child_reg\n+\t     (e.g. due to it being a trailing field with incomplete array\n+\t     type.  */\n+\t  if (!k->concrete_p ())\n+\t    {\n+\t      /* Assume that sval has a well-defined size for this case.  */\n+\t      tree sval_type = sval->get_type ();\n+\t      gcc_assert (sval_type);\n+\t      HOST_WIDE_INT sval_byte_size = int_size_in_bytes (sval_type);\n+\t      gcc_assert (sval_byte_size != -1);\n+\t      bit_size_t sval_bit_size = sval_byte_size * BITS_PER_UNIT;\n+\t      /* Get offset of child relative to base region.  */\n+\t      region_offset child_base_offset = child_reg->get_offset ();\n+\t      gcc_assert (!child_base_offset.symbolic_p ());\n+\t      /* Convert to an offset relative to the parent region.  */\n+\t      region_offset parent_base_offset = parent_reg->get_offset ();\n+\t      gcc_assert (!parent_base_offset.symbolic_p ());\n+\t      bit_offset_t child_parent_offset\n+\t\t= (child_base_offset.get_bit_offset ()\n+\t\t   - parent_base_offset.get_bit_offset ());\n+\t      /* Create a concrete key for the child within the parent.  */\n+\t      k = mgr->get_store_manager ()->get_concrete_binding\n+\t\t(child_parent_offset, sval_bit_size, BK_direct);\n+\t    }\n+\t  gcc_assert (k->concrete_p ());\n \t  put (k, sval);\n \t}\n     }"}, {"sha": "99b5507a43c4959104e3f7a7c9282472358c4d35", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "patch": "@@ -910,6 +910,20 @@ unmergeable_svalue::implicitly_live_p (const svalue_set &live_svalues,\n \n /* class compound_svalue : public svalue.  */\n \n+compound_svalue::compound_svalue (tree type, const binding_map &map)\n+: svalue (calc_complexity (map), type), m_map (map)\n+{\n+  /* All keys within the underlying binding_map are required to be concrete,\n+     not symbolic.  */\n+#if CHECKING_P\n+  for (iterator_t iter = begin (); iter != end (); ++iter)\n+    {\n+      const binding_key *key = (*iter).first;\n+      gcc_assert (key->concrete_p ());\n+    }\n+#endif\n+}\n+\n /* Implementation of svalue::dump_to_pp vfunc for compound_svalue.  */\n \n void"}, {"sha": "2bb2a4e0be359dfa90b84bdee3699ff95313a98f", "filename": "gcc/testsuite/gcc.dg/analyzer/pr96777.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88c8df70342fcd6817e23f243ff38d0fe42fc6b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr96777.c?ref=d88c8df70342fcd6817e23f243ff38d0fe42fc6b", "patch": "@@ -0,0 +1,12 @@\n+struct ge {\n+  char au;\n+  char pz[];\n+};\n+\n+struct ge tr = { 'X', 'X', };\n+\n+int\n+main (void)\n+{\n+  return tr.pz[0] == 'X';\n+}"}]}