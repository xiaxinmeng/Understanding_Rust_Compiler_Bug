{"sha": "04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "node_id": "C_kwDOANBUbNoAKDA0YTliOGQyZjM4NTczZDA1MjdlZGVlYTllNGZkOWI3ZGZkYzc5ODM", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-10-14T20:56:29Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2021-10-14T20:56:29Z"}, "message": "c-family: Support DFP printf/scanf formats for C2X\n\nWhen I enabled various decimal floating-point features for C2X /\nstopped them being diagnosed with -pedantic for C2X, I missed the\nformat checking support.  The DFP printf and scanf formats are\nincluded in C2X.  Thus, adjust the data for those formats so that they\nare no longer diagnosed with -std=c2x -Wformat -pedantic.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c-family/\n\t* c-format.c (printf_length_specs, scanf_length_specs)\n\t(print_char_table, scan_char_table): Support DFP formats for C2X.\n\t* c-format.h (TEX_D32, TEX_D64, TEX_D128): Remove.\n\t(T2X_D32, T2X_D64, T2X_D128): New macros.\n\ngcc/testsuite/\n\t* gcc.dg/format/c11-dfp-printf-1.c,\n\tgcc.dg/format/c11-dfp-scanf-1.c, gcc.dg/format/c2x-dfp-printf-1.c,\n\tgcc.dg/format/c2x-dfp-scanf-1.c: New tests.", "tree": {"sha": "978d0418c6fd25978f46c0b669019b4940a87448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978d0418c6fd25978f46c0b669019b4940a87448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7561b5d2443f1d5f54f5177f0fb1a13c4205856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7561b5d2443f1d5f54f5177f0fb1a13c4205856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7561b5d2443f1d5f54f5177f0fb1a13c4205856"}], "stats": {"total": 168, "additions": 154, "deletions": 14}, "files": [{"sha": "e735e0920434722530ab127be39cd1b4563e823f", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "patch": "@@ -493,8 +493,8 @@ static const format_length_info printf_length_specs[] =\n   { \"Z\", FMT_LEN_z, STD_EXT, NO_FMT, 0 },\n   { \"t\", FMT_LEN_t, STD_C99, NO_FMT, 0 },\n   { \"j\", FMT_LEN_j, STD_C99, NO_FMT, 0 },\n-  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT, 0 },\n-  { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT, 0 },\n+  { \"H\", FMT_LEN_H, STD_C2X, NO_FMT, 0 },\n+  { \"D\", FMT_LEN_D, STD_C2X, \"DD\", FMT_LEN_DD, STD_C2X, 0 },\n   { NO_FMT, NO_FMT, 0 }\n };\n \n@@ -530,8 +530,8 @@ static const format_length_info scanf_length_specs[] =\n   { \"z\", FMT_LEN_z, STD_C99, NO_FMT, 0 },\n   { \"t\", FMT_LEN_t, STD_C99, NO_FMT, 0 },\n   { \"j\", FMT_LEN_j, STD_C99, NO_FMT, 0 },\n-  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT, 0 },\n-  { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT, 0 },\n+  { \"H\", FMT_LEN_H, STD_C2X, NO_FMT, 0 },\n+  { \"D\", FMT_LEN_D, STD_C2X, \"DD\", FMT_LEN_DD, STD_C2X, 0 },\n   { NO_FMT, NO_FMT, 0 }\n };\n \n@@ -703,15 +703,15 @@ static const format_char_info print_char_table[] =\n   { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +'I\",  \"i\",  NULL },\n   { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n   { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0'I\",    \"i\",  NULL },\n-  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"-wp0 +#'I\", \"\",   NULL },\n-  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"-wp0 +#I\",  \"\",   NULL },\n+  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"-wp0 +#'I\", \"\",   NULL },\n+  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"-wp0 +#I\",  \"\",   NULL },\n   { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n   { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"cR\", NULL },\n   { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"c\",  NULL },\n   { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",          \"W\",  NULL },\n   /* C99 conversion specifiers.  */\n-  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"-wp0 +#'I\", \"\",   NULL },\n-  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64,  TEX_D128 }, \"-wp0 +#\",   \"\",   NULL },\n+  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"-wp0 +#'I\", \"\",   NULL },\n+  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64,  T2X_D128 }, \"-wp0 +#\",   \"\",   NULL },\n   /* C2X conversion specifiers.  */\n   { \"b\",   0, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n   /* X/Open conversion specifiers.  */\n@@ -870,15 +870,15 @@ static const format_char_info scan_char_table[] =\n   { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"*w'I\", \"W\",   NULL },\n   { \"u\",     1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w'I\", \"W\",   NULL },\n   { \"oxX\",   1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n-  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"*w'\",  \"W\",   NULL },\n+  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"*w'\",  \"W\",   NULL },\n   { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*mw\",   \"cW\",  NULL },\n   { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"cW\",  NULL },\n   { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"cW[\", NULL },\n   { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n   { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",     \"W\",   NULL },\n   /* C99 conversion specifiers.  */\n-  { \"F\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32, TEX_D64, TEX_D128 }, \"*w'\",  \"W\",   NULL },\n-  { \"aA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  TEX_D32,  TEX_D64,  TEX_D128 }, \"*w'\",  \"W\",   NULL },\n+  { \"F\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32, T2X_D64, T2X_D128 }, \"*w'\",  \"W\",   NULL },\n+  { \"aA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN,  T2X_D32,  T2X_D64,  T2X_D128 }, \"*w'\",  \"W\",   NULL },\n   /* C2X conversion specifiers.  */\n   { \"b\",     1, STD_C2X, { T2X_UI,  T2X_UC,  T2X_US,  T2X_UL,  T2X_ULL, TEX_ULL, T2X_ST,  T2X_UPD, T2X_UIM, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n   /* X/Open conversion specifiers.  */"}, {"sha": "dfa1e11a003fbe5f7435b1dc3f20a3366ada7959", "filename": "gcc/c-family/c-format.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Fc-family%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Fc-family%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.h?ref=04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "patch": "@@ -333,11 +333,11 @@ struct format_kind_info\n #define T99_UIM\t{ STD_C99, \"uintmax_t\", T_UIM }\n #define T2X_UIM\t{ STD_C2X, \"uintmax_t\", T_UIM }\n #define T_D32   &dfloat32_type_node\n-#define TEX_D32 { STD_EXT, \"_Decimal32\", T_D32 }\n+#define T2X_D32 { STD_C2X, \"_Decimal32\", T_D32 }\n #define T_D64   &dfloat64_type_node\n-#define TEX_D64 { STD_EXT, \"_Decimal64\", T_D64 }\n+#define T2X_D64 { STD_C2X, \"_Decimal64\", T_D64 }\n #define T_D128  &dfloat128_type_node\n-#define TEX_D128 { STD_EXT, \"_Decimal128\", T_D128 }\n+#define T2X_D128 { STD_C2X, \"_Decimal128\", T_D128 }\n \n /* Structure describing how format attributes such as \"printf\" are\n    interpreted as \"gnu_printf\" or \"ms_printf\" on a particular system."}, {"sha": "356a23efed05b75bc79b76ac4755aeb158b130b4", "filename": "gcc/testsuite/gcc.dg/format/c11-dfp-printf-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-dfp-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-dfp-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-dfp-printf-1.c?ref=04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "patch": "@@ -0,0 +1,35 @@\n+/* Test for printf formats: rejection of DFP formats in pedantic mode.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-std=gnu11 -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (_Decimal32 d32, _Decimal64 d64, _Decimal128 d128) /* { dg-warning \"ISO C\" } */\n+{\n+  printf (\"%Ha\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%HA\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%He\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%HE\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%Hf\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%HF\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%Hg\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%HG\", d32); /* { dg-warning \"C\" } */\n+  printf (\"%Da\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%DA\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%De\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%DE\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%Df\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%DF\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%Dg\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%DG\", d64); /* { dg-warning \"C\" } */\n+  printf (\"%DDa\", d128); /* { dg-warning \"C\" } */\n+  printf (\"%DDA\", d128); /* { dg-warning \"C\" } */\n+  printf (\"%DDe\", d128); /* { dg-warning \"C\" } */\n+  printf (\"%DDE\", d128); /* { dg-warning \"C\" } */\n+  printf (\"%DDf\", d128); /* { dg-warning \"C\" } */\n+  printf (\"%DDF\", d128); /* { dg-warning \"C\" } */\n+  printf (\"%DDg\", d128); /* { dg-warning \"C\" } */\n+  printf (\"%DDG\", d128); /* { dg-warning \"C\" } */\n+}"}, {"sha": "35bd631d53be4d7eb406d78a6c279ccd770753fb", "filename": "gcc/testsuite/gcc.dg/format/c11-dfp-scanf-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-dfp-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-dfp-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc11-dfp-scanf-1.c?ref=04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "patch": "@@ -0,0 +1,35 @@\n+/* Test for scanf formats: rejection of DFP formats in pedantic mode.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-std=gnu11 -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (_Decimal32 *d32, _Decimal64 *d64, _Decimal128 *d128) /* { dg-warning \"ISO C\" } */\n+{\n+  scanf (\"%Ha\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%HA\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%He\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%HE\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%Hf\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%HF\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%Hg\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%HG\", d32); /* { dg-warning \"C\" } */\n+  scanf (\"%Da\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%DA\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%De\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%DE\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%Df\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%DF\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%Dg\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%DG\", d64); /* { dg-warning \"C\" } */\n+  scanf (\"%DDa\", d128); /* { dg-warning \"C\" } */\n+  scanf (\"%DDA\", d128); /* { dg-warning \"C\" } */\n+  scanf (\"%DDe\", d128); /* { dg-warning \"C\" } */\n+  scanf (\"%DDE\", d128); /* { dg-warning \"C\" } */\n+  scanf (\"%DDf\", d128); /* { dg-warning \"C\" } */\n+  scanf (\"%DDF\", d128); /* { dg-warning \"C\" } */\n+  scanf (\"%DDg\", d128); /* { dg-warning \"C\" } */\n+  scanf (\"%DDG\", d128); /* { dg-warning \"C\" } */\n+}"}, {"sha": "dc40f99bc750eb22967f159f66e75ea8f7a9bb99", "filename": "gcc/testsuite/gcc.dg/format/c2x-dfp-printf-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-dfp-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-dfp-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-dfp-printf-1.c?ref=04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "patch": "@@ -0,0 +1,35 @@\n+/* Test for printf formats: acceptance of DFP formats in pedantic mode.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-std=c2x -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (_Decimal32 d32, _Decimal64 d64, _Decimal128 d128)\n+{\n+  printf (\"%Ha\", d32);\n+  printf (\"%HA\", d32);\n+  printf (\"%He\", d32);\n+  printf (\"%HE\", d32);\n+  printf (\"%Hf\", d32);\n+  printf (\"%HF\", d32);\n+  printf (\"%Hg\", d32);\n+  printf (\"%HG\", d32);\n+  printf (\"%Da\", d64);\n+  printf (\"%DA\", d64);\n+  printf (\"%De\", d64);\n+  printf (\"%DE\", d64);\n+  printf (\"%Df\", d64);\n+  printf (\"%DF\", d64);\n+  printf (\"%Dg\", d64);\n+  printf (\"%DG\", d64);\n+  printf (\"%DDa\", d128);\n+  printf (\"%DDA\", d128);\n+  printf (\"%DDe\", d128);\n+  printf (\"%DDE\", d128);\n+  printf (\"%DDf\", d128);\n+  printf (\"%DDF\", d128);\n+  printf (\"%DDg\", d128);\n+  printf (\"%DDG\", d128);\n+}"}, {"sha": "81e39a97ff894594fa10c7bd83428cd475568b54", "filename": "gcc/testsuite/gcc.dg/format/c2x-dfp-scanf-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-dfp-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-dfp-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-dfp-scanf-1.c?ref=04a9b8d2f38573d0527edeea9e4fd9b7dfdc7983", "patch": "@@ -0,0 +1,35 @@\n+/* Test for scanf formats: acceptance of DFP formats in pedantic mode.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-std=c2x -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (_Decimal32 *d32, _Decimal64 *d64, _Decimal128 *d128)\n+{\n+  scanf (\"%Ha\", d32);\n+  scanf (\"%HA\", d32);\n+  scanf (\"%He\", d32);\n+  scanf (\"%HE\", d32);\n+  scanf (\"%Hf\", d32);\n+  scanf (\"%HF\", d32);\n+  scanf (\"%Hg\", d32);\n+  scanf (\"%HG\", d32);\n+  scanf (\"%Da\", d64);\n+  scanf (\"%DA\", d64);\n+  scanf (\"%De\", d64);\n+  scanf (\"%DE\", d64);\n+  scanf (\"%Df\", d64);\n+  scanf (\"%DF\", d64);\n+  scanf (\"%Dg\", d64);\n+  scanf (\"%DG\", d64);\n+  scanf (\"%DDa\", d128);\n+  scanf (\"%DDA\", d128);\n+  scanf (\"%DDe\", d128);\n+  scanf (\"%DDE\", d128);\n+  scanf (\"%DDf\", d128);\n+  scanf (\"%DDF\", d128);\n+  scanf (\"%DDg\", d128);\n+  scanf (\"%DDG\", d128);\n+}"}]}