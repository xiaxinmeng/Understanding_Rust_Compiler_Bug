{"sha": "1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4YmFkZjY2YmVjNGUwZmY3M2FlMjRiZjRmOGNhYmJlZjhjMTM3YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-08T12:15:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-08T12:15:49Z"}, "message": "tree-data-ref.h (lambda_int): New typedef.\n\n2018-11-08  Richard Biener  <rguenther@suse.de>\n\n\t* tree-data-ref.h (lambda_int): New typedef.\n\t(lambda_vector_gcd): Adjust.\n\t(lambda_vector_new): Likewise.\n\t(lambda_matrix_new): Likewise.\n\t* tree-data-ref.c  (print_lambda_vector): Adjust.\n\nFrom-SVN: r265914", "tree": {"sha": "a47dd33c628cc99faf95b1196f7e583b2540c437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a47dd33c628cc99faf95b1196f7e583b2540c437"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd5c4c4c99f82fe702f4b4cc5fc2d64f461fc639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5c4c4c99f82fe702f4b4cc5fc2d64f461fc639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5c4c4c99f82fe702f4b4cc5fc2d64f461fc639"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "4af240a16a6fedb4c7afd5581b0284c217fa75e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "patch": "@@ -1,3 +1,11 @@\n+2018-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-data-ref.h (lambda_int): New typedef.\n+\t(lambda_vector_gcd): Adjust.\n+\t(lambda_vector_new): Likewise.\n+\t(lambda_matrix_new): Likewise.\n+\t* tree-data-ref.c  (print_lambda_vector): Adjust.\n+\n 2018-11-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87929"}, {"sha": "6019c6168bfc74135be31d927e0f6d88ee904473", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "patch": "@@ -393,7 +393,7 @@ print_lambda_vector (FILE * outfile, lambda_vector vector, int n)\n   int i;\n \n   for (i = 0; i < n; i++)\n-    fprintf (outfile, \"%3d \", vector[i]);\n+    fprintf (outfile, \"%3d \", (int)vector[i]);\n   fprintf (outfile, \"\\n\");\n }\n "}, {"sha": "439a8b986dd88597bd1adab0fb6d5c4bcf8b0fe6", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a", "patch": "@@ -138,7 +138,8 @@ struct dr_alias\n    space. A vector space is a set that is closed under vector addition\n    and scalar multiplication.  In this vector space, an element is a list of\n    integers.  */\n-typedef int *lambda_vector;\n+typedef HOST_WIDE_INT lambda_int;\n+typedef lambda_int *lambda_vector;\n \n /* An integer matrix.  A matrix consists of m vectors of length n (IE\n    all vectors are the same length).  */\n@@ -611,11 +612,11 @@ void split_constant_offset (tree , tree *, tree *);\n \n /* Compute the greatest common divisor of a VECTOR of SIZE numbers.  */\n \n-static inline int\n+static inline lambda_int\n lambda_vector_gcd (lambda_vector vector, int size)\n {\n   int i;\n-  int gcd1 = 0;\n+  lambda_int gcd1 = 0;\n \n   if (size > 0)\n     {\n@@ -632,7 +633,7 @@ static inline lambda_vector\n lambda_vector_new (int size)\n {\n   /* ???  We shouldn't abuse the GC allocator here.  */\n-  return ggc_cleared_vec_alloc<int> (size);\n+  return ggc_cleared_vec_alloc<lambda_int> (size);\n }\n \n /* Clear out vector VEC1 of length SIZE.  */\n@@ -686,7 +687,7 @@ lambda_matrix_new (int m, int n, struct obstack *lambda_obstack)\n   mat = XOBNEWVEC (lambda_obstack, lambda_vector, m);\n \n   for (i = 0; i < m; i++)\n-    mat[i] = XOBNEWVEC (lambda_obstack, int, n);\n+    mat[i] = XOBNEWVEC (lambda_obstack, lambda_int, n);\n \n   return mat;\n }"}]}