{"sha": "9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJiMDZjMmE5ZjhiODMxNzljYjc2YmE5MjhiMjJhYTNhMmI1NzUwMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-22T13:17:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-22T13:17:26Z"}, "message": "re PR tree-optimization/46590 (long compile time with -O2 and many loops)\n\n2012-08-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46590\n\t* tree-ssa-alias.h (get_continuation_for_phi): Add alias query\n\tcounter output argument.\n\t(walk_non_aliased_vuses): Add alias query counter argument\n\tto the walker callback.\n\t* tree-ssa-alias.c (maybe_skip_until): Add alias query counter\n\toutput argument and count alias queries.\n\t(get_continuation_for_phi_1): Likewise.\n\t(get_continuation_for_phi): Likewise.\n\t(walk_non_aliased_vuses): Add alias query counter argument\n\tto the walker callback and allow it to abort the walk by\n\treturning -1.\n\t* tree-ssa-pre.c (translate_vuse_through_block): Adjust.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_2): Add alias query\n\tcounter parmeter, abort walk if that is bigger than\n\t--param sccvn-max-alias-queries-per-access.\n\t* params.def (sccvn-max-alias-queries-per-access): New param.\n\t* doc/invoke.texi (sccvn-max-alias-queries-per-access): Document.\n\nFrom-SVN: r190594", "tree": {"sha": "34c557fa3311568283166d9d30556e185c013ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c557fa3311568283166d9d30556e185c013ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ad149191495f24d32416840e5aaca967e16afb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad149191495f24d32416840e5aaca967e16afb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad149191495f24d32416840e5aaca967e16afb2"}], "stats": {"total": 107, "additions": 87, "deletions": 20}, "files": [{"sha": "75cd34c49b2d8d62f917add9b7868bcc6c63dd99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "patch": "@@ -1,3 +1,24 @@\n+2012-08-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46590\n+\t* tree-ssa-alias.h (get_continuation_for_phi): Add alias query\n+\tcounter output argument.\n+\t(walk_non_aliased_vuses): Add alias query counter argument\n+\tto the walker callback.\n+\t* tree-ssa-alias.c (maybe_skip_until): Add alias query counter\n+\toutput argument and count alias queries.\n+\t(get_continuation_for_phi_1): Likewise.\n+\t(get_continuation_for_phi): Likewise.\n+\t(walk_non_aliased_vuses): Add alias query counter argument\n+\tto the walker callback and allow it to abort the walk by\n+\treturning -1.\n+\t* tree-ssa-pre.c (translate_vuse_through_block): Adjust.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_2): Add alias query\n+\tcounter parmeter, abort walk if that is bigger than\n+\t--param sccvn-max-alias-queries-per-access.\n+\t* params.def (sccvn-max-alias-queries-per-access): New param.\n+\t* doc/invoke.texi (sccvn-max-alias-queries-per-access): Document.\n+\n 2012-08-22  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-loop-ch.c (copy_loop_headers): Remove redundant checking."}, {"sha": "599b0f6f0551429c46e8d2ed261bfcd92bf467cc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "patch": "@@ -9221,6 +9221,14 @@ processing.  If this limit is hit, SCCVN processing for the whole\n function is not done and optimizations depending on it are\n disabled.  The default maximum SCC size is 10000.\n \n+@item sccvn-max-alias-queries-per-access\n+Maximum number of alias-oracle queries we perform when looking for\n+redundancies for loads and stores.  If this limit is hit the search\n+is aborted and the load or store is not considered redundant.  The\n+number of queries is algorithmically limited to the number of\n+stores on all paths from the load to the function entry.\n+The default maxmimum number of queries is 1000.\n+\n @item ira-max-loops-num\n IRA uses regional register allocation by default.  If a function\n contains more loops than the number given by this parameter, only at most"}, {"sha": "17351bf005282148a06042557eb9e5e6e96f4635", "filename": "gcc/params.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "patch": "@@ -752,6 +752,17 @@ DEFPARAM (PARAM_SCCVN_MAX_SCC_SIZE,\n \t  \"Maximum size of a SCC before SCCVN stops processing a function\",\n \t  10000, 10, 0)\n \n+/* The following is used as a stop-gap limit for cases where really huge\n+   functions blow up compile-time use too much.  It limits the number of\n+   alias-queries we do for finding common subexpressions for memory loads and\n+   stores.  The number of alias-queries is otherwise limited by the number of\n+   stores on paths to function entry.  */\n+\n+DEFPARAM (PARAM_SCCVN_MAX_ALIAS_QUERIES_PER_ACCESS,\n+\t  \"sccvn-max-alias-queries-per-access\",\n+\t  \"Maximum number of disambiguations to perform per memory access\",\n+\t  1000, 0, 0)\n+\n DEFPARAM (PARAM_IRA_MAX_LOOPS_NUM,\n \t  \"ira-max-loops-num\",\n \t  \"Max loops number for regional RA\","}, {"sha": "574f418447d42f5fa3fd73c980be08d9e97625f0", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "patch": "@@ -1929,7 +1929,7 @@ stmt_kills_ref_p (gimple stmt, tree ref)\n \n static bool\n maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n-\t\t  tree vuse, bitmap *visited)\n+\t\t  tree vuse, unsigned int *cnt, bitmap *visited)\n {\n   basic_block bb = gimple_bb (phi);\n \n@@ -1948,15 +1948,20 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \t  /* An already visited PHI node ends the walk successfully.  */\n \t  if (bitmap_bit_p (*visited, SSA_NAME_VERSION (PHI_RESULT (def_stmt))))\n \t    return true;\n-\t  vuse = get_continuation_for_phi (def_stmt, ref, visited);\n+\t  vuse = get_continuation_for_phi (def_stmt, ref, cnt, visited);\n \t  if (!vuse)\n \t    return false;\n \t  continue;\n \t}\n-      /* A clobbering statement or the end of the IL ends it failing.  */\n-      else if (gimple_nop_p (def_stmt)\n-\t       || stmt_may_clobber_ref_p_1 (def_stmt, ref))\n+      else if (gimple_nop_p (def_stmt))\n \treturn false;\n+      else\n+\t{\n+\t  /* A clobbering statement or the end of the IL ends it failing.  */\n+\t  ++*cnt;\n+\t  if (stmt_may_clobber_ref_p_1 (def_stmt, ref))\n+\t    return false;\n+\t}\n       /* If we reach a new basic-block see if we already skipped it\n          in a previous walk that ended successfully.  */\n       if (gimple_bb (def_stmt) != bb)\n@@ -1976,7 +1981,7 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \n static tree\n get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n-\t\t\t    ao_ref *ref, bitmap *visited)\n+\t\t\t    ao_ref *ref, unsigned int *cnt, bitmap *visited)\n {\n   gimple def0 = SSA_NAME_DEF_STMT (arg0);\n   gimple def1 = SSA_NAME_DEF_STMT (arg1);\n@@ -1989,14 +1994,14 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n \t       && dominated_by_p (CDI_DOMINATORS,\n \t\t\t\t  gimple_bb (def1), gimple_bb (def0))))\n     {\n-      if (maybe_skip_until (phi, arg0, ref, arg1, visited))\n+      if (maybe_skip_until (phi, arg0, ref, arg1, cnt, visited))\n \treturn arg0;\n     }\n   else if (gimple_nop_p (def1)\n \t   || dominated_by_p (CDI_DOMINATORS,\n \t\t\t      gimple_bb (def0), gimple_bb (def1)))\n     {\n-      if (maybe_skip_until (phi, arg1, ref, arg0, visited))\n+      if (maybe_skip_until (phi, arg1, ref, arg0, cnt, visited))\n \treturn arg1;\n     }\n   /* Special case of a diamond:\n@@ -2015,6 +2020,7 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n   else if ((common_vuse = gimple_vuse (def0))\n \t   && common_vuse == gimple_vuse (def1))\n     {\n+      *cnt += 2;\n       if (!stmt_may_clobber_ref_p_1 (def0, ref)\n \t  && !stmt_may_clobber_ref_p_1 (def1, ref))\n \treturn common_vuse;\n@@ -2027,11 +2033,12 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n /* Starting from a PHI node for the virtual operand of the memory reference\n    REF find a continuation virtual operand that allows to continue walking\n    statements dominating PHI skipping only statements that cannot possibly\n-   clobber REF.  Returns NULL_TREE if no suitable virtual operand can\n-   be found.  */\n+   clobber REF.  Increments *CNT for each alias disambiguation done.\n+   Returns NULL_TREE if no suitable virtual operand can be found.  */\n \n tree\n-get_continuation_for_phi (gimple phi, ao_ref *ref, bitmap *visited)\n+get_continuation_for_phi (gimple phi, ao_ref *ref,\n+\t\t\t  unsigned int *cnt, bitmap *visited)\n {\n   unsigned nargs = gimple_phi_num_args (phi);\n \n@@ -2068,7 +2075,8 @@ get_continuation_for_phi (gimple phi, ao_ref *ref, bitmap *visited)\n       for (i = 0; i < nargs; ++i)\n \t{\n \t  arg1 = PHI_ARG_DEF (phi, i);\n-\t  arg0 = get_continuation_for_phi_1 (phi, arg0, arg1, ref, visited);\n+\t  arg0 = get_continuation_for_phi_1 (phi, arg0, arg1, ref,\n+\t\t\t\t\t     cnt, visited);\n \t  if (!arg0)\n \t    return NULL_TREE;\n \t}\n@@ -2099,11 +2107,12 @@ get_continuation_for_phi (gimple phi, ao_ref *ref, bitmap *visited)\n \n void *\n walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n-\t\t\tvoid *(*walker)(ao_ref *, tree, void *),\n+\t\t\tvoid *(*walker)(ao_ref *, tree, unsigned int, void *),\n \t\t\tvoid *(*translate)(ao_ref *, tree, void *), void *data)\n {\n   bitmap visited = NULL;\n   void *res;\n+  unsigned int cnt = 0;\n \n   timevar_push (TV_ALIAS_STMT_WALK);\n \n@@ -2112,17 +2121,25 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n       gimple def_stmt;\n \n       /* ???  Do we want to account this to TV_ALIAS_STMT_WALK?  */\n-      res = (*walker) (ref, vuse, data);\n-      if (res)\n+      res = (*walker) (ref, vuse, cnt, data);\n+      /* Abort walk.  */\n+      if (res == (void *)-1)\n+\t{\n+\t  res = NULL;\n+\t  break;\n+\t}\n+      /* Lookup succeeded.  */\n+      else if (res != NULL)\n \tbreak;\n \n       def_stmt = SSA_NAME_DEF_STMT (vuse);\n       if (gimple_nop_p (def_stmt))\n \tbreak;\n       else if (gimple_code (def_stmt) == GIMPLE_PHI)\n-\tvuse = get_continuation_for_phi (def_stmt, ref, &visited);\n+\tvuse = get_continuation_for_phi (def_stmt, ref, &cnt, &visited);\n       else\n \t{\n+\t  cnt++;\n \t  if (stmt_may_clobber_ref_p_1 (def_stmt, ref))\n \t    {\n \t      if (!translate)"}, {"sha": "cdff3812181c21e9352f5b385ecb26028c7fe8ac", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "patch": "@@ -107,9 +107,11 @@ extern bool stmt_may_clobber_ref_p (gimple, tree);\n extern bool stmt_may_clobber_ref_p_1 (gimple, ao_ref *);\n extern bool call_may_clobber_ref_p (gimple, tree);\n extern bool stmt_kills_ref_p (gimple, tree);\n-extern tree get_continuation_for_phi (gimple, ao_ref *, bitmap *);\n+extern tree get_continuation_for_phi (gimple, ao_ref *,\n+\t\t\t\t      unsigned int *, bitmap *);\n extern void *walk_non_aliased_vuses (ao_ref *, tree,\n-\t\t\t\t     void *(*)(ao_ref *, tree, void *),\n+\t\t\t\t     void *(*)(ao_ref *, tree,\n+\t\t\t\t\t       unsigned int, void *),\n \t\t\t\t     void *(*)(ao_ref *, tree, void *), void *);\n extern unsigned int walk_aliased_vdefs (ao_ref *, tree,\n \t\t\t\t\tbool (*)(ao_ref *, tree, void *),"}, {"sha": "6d10df87a0e48c204246acf5c5bc6fc4ed1c5177", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "patch": "@@ -1289,9 +1289,10 @@ translate_vuse_through_block (VEC (vn_reference_op_s, heap) *operands,\n       if (use_oracle)\n \t{\n \t  bitmap visited = NULL;\n+\t  unsigned int cnt;\n \t  /* Try to find a vuse that dominates this phi node by skipping\n \t     non-clobbering statements.  */\n-\t  vuse = get_continuation_for_phi (phi, &ref, &visited);\n+\t  vuse = get_continuation_for_phi (phi, &ref, &cnt, &visited);\n \t  if (visited)\n \t    BITMAP_FREE (visited);\n \t}"}, {"sha": "5d5a91cef7ce5e962c23e242f55e301413fe432a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb06c2a9f8b83179cb76ba928b22aa3a2b57501/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9bb06c2a9f8b83179cb76ba928b22aa3a2b57501", "patch": "@@ -1330,12 +1330,19 @@ static vn_lookup_kind default_vn_walk_kind;\n    with the current VUSE and performs the expression lookup.  */\n \n static void *\n-vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse, void *vr_)\n+vn_reference_lookup_2 (ao_ref *op ATTRIBUTE_UNUSED, tree vuse,\n+\t\t       unsigned int cnt, void *vr_)\n {\n   vn_reference_t vr = (vn_reference_t)vr_;\n   void **slot;\n   hashval_t hash;\n \n+  /* This bounds the stmt walks we perform on reference lookups\n+     to O(1) instead of O(N) where N is the number of dominating\n+     stores.  */\n+  if (cnt > (unsigned) PARAM_VALUE (PARAM_SCCVN_MAX_ALIAS_QUERIES_PER_ACCESS))\n+    return (void *)-1;\n+\n   if (last_vuse_ptr)\n     *last_vuse_ptr = vuse;\n "}]}