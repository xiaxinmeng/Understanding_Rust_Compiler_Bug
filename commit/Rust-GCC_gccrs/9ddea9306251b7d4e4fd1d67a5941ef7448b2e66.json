{"sha": "9ddea9306251b7d4e4fd1d67a5941ef7448b2e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkZWE5MzA2MjUxYjdkNGU0ZmQxZDY3YTU5NDFlZjc0NDhiMmU2Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-09T14:06:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-09T17:54:34Z"}, "message": "fixup BIT_FIELD_REF detection in SLP discovery\n\nThis fixes a thinko where we end up combining a BIT_FIELD_REF\nand a memory access, fixed by checking all stmts are a load or\nnone.\n\n2020-07-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96133\n\t* tree-vect-slp.c (vect_build_slp_tree_1): Compare load_p\n\tstatus between stmts.", "tree": {"sha": "b0bb2d34572f548263e4cbed1fb96a0c74b826a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0bb2d34572f548263e4cbed1fb96a0c74b826a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "614662064ad4993a2aaecf190e7399ac5279e78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614662064ad4993a2aaecf190e7399ac5279e78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614662064ad4993a2aaecf190e7399ac5279e78e"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "b3645b0a82079c5139dbed6b805beff15d8d388e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=9ddea9306251b7d4e4fd1d67a5941ef7448b2e66", "patch": "@@ -760,7 +760,7 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n   machine_mode optab_op2_mode;\n   machine_mode vec_mode;\n   stmt_vec_info first_load = NULL, prev_first_load = NULL;\n-  bool load_p = false;\n+  bool first_stmt_load_p = false, load_p = false;\n \n   /* For every stmt in NODE find its def stmt/s.  */\n   stmt_vec_info stmt_info;\n@@ -850,6 +850,7 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t{\n \t  *node_vectype = vectype;\n \t  first_stmt_code = rhs_code;\n+\t  first_stmt_load_p = load_p;\n \n \t  /* Shift arguments should be equal in all the packed stmts for a\n \t     vector shift with scalar shift operand.  */\n@@ -931,24 +932,25 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t  if (first_stmt_code != rhs_code\n \t      && alt_stmt_code == ERROR_MARK)\n \t    alt_stmt_code = rhs_code;\n-\t  if (first_stmt_code != rhs_code\n-\t      && (first_stmt_code != IMAGPART_EXPR\n-\t\t  || rhs_code != REALPART_EXPR)\n-\t      && (first_stmt_code != REALPART_EXPR\n-\t\t  || rhs_code != IMAGPART_EXPR)\n-\t      /* Handle mismatches in plus/minus by computing both\n-\t\t and merging the results.  */\n-\t      && !((first_stmt_code == PLUS_EXPR\n-\t\t    || first_stmt_code == MINUS_EXPR)\n-\t\t   && (alt_stmt_code == PLUS_EXPR\n-\t\t       || alt_stmt_code == MINUS_EXPR)\n-\t\t   && rhs_code == alt_stmt_code)\n-\t      && !(STMT_VINFO_GROUPED_ACCESS (stmt_info)\n-                   && (first_stmt_code == ARRAY_REF\n-                       || first_stmt_code == BIT_FIELD_REF\n-                       || first_stmt_code == INDIRECT_REF\n-                       || first_stmt_code == COMPONENT_REF\n-                       || first_stmt_code == MEM_REF)))\n+\t  if ((first_stmt_code != rhs_code\n+\t       && (first_stmt_code != IMAGPART_EXPR\n+\t\t   || rhs_code != REALPART_EXPR)\n+\t       && (first_stmt_code != REALPART_EXPR\n+\t\t   || rhs_code != IMAGPART_EXPR)\n+\t       /* Handle mismatches in plus/minus by computing both\n+\t\t  and merging the results.  */\n+\t       && !((first_stmt_code == PLUS_EXPR\n+\t\t     || first_stmt_code == MINUS_EXPR)\n+\t\t    && (alt_stmt_code == PLUS_EXPR\n+\t\t\t|| alt_stmt_code == MINUS_EXPR)\n+\t\t    && rhs_code == alt_stmt_code)\n+\t       && !(STMT_VINFO_GROUPED_ACCESS (stmt_info)\n+\t\t    && (first_stmt_code == ARRAY_REF\n+\t\t\t|| first_stmt_code == BIT_FIELD_REF\n+\t\t\t|| first_stmt_code == INDIRECT_REF\n+\t\t\t|| first_stmt_code == COMPONENT_REF\n+\t\t\t|| first_stmt_code == MEM_REF)))\n+\t      || first_stmt_load_p != load_p)\n \t    {\n \t      if (dump_enabled_p ())\n \t\t{"}]}