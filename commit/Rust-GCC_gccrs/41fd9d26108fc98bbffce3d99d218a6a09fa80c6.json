{"sha": "41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmZDlkMjYxMDhmYzk4YmJmZmNlM2Q5OWQyMThhNmEwOWZhODBjNg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-10T13:33:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-10T13:33:17Z"}, "message": "c++: constraints and address of template-id\n\nWhen resolving the address of a template-id, we need to drop functions\nwhose associated constraints are not satisfied, as per [over.over].  We\ndo so in resolve_address_of_overloaded_function, but not in\nresolve_overloaded_unification or resolve_nondeduced_context, which\nseems like an oversight.\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (resolve_overloaded_unification): Drop functions with\n\tunsatisfied constraints.\n\t(resolve_nondeduced_context): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-fn5.C: New test.\n\t* g++.dg/concepts/fn8.C: Generalize dg-error directive to accept\n\t\"no matching function ...\" diagnostic.\n\t* g++.dg/cpp2a/concepts-fn1.C: Likewise.\n\t* g++.dg/cpp2a/concepts-ts2.C: Likewise.\n\t* g++.dg/cpp2a/concepts-ts3.C: Likewise.", "tree": {"sha": "8d896c17924343c311a31c605a5ff82c0a2b57d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d896c17924343c311a31c605a5ff82c0a2b57d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/comments", "author": null, "committer": null, "parents": [{"sha": "90f7636bf8df50940e0f749af60a6b374a8f09b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f7636bf8df50940e0f749af60a6b374a8f09b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f7636bf8df50940e0f749af60a6b374a8f09b4"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "cb81d8e9229bb41518d9b8b077c08d85bb6dafd7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "patch": "@@ -22122,6 +22122,8 @@ resolve_overloaded_unification (tree tparms,\n \t      && !any_dependent_template_arguments_p (subargs))\n \t    {\n \t      fn = instantiate_template (fn, subargs, tf_none);\n+\t      if (!constraints_satisfied_p (fn))\n+\t\tcontinue;\n \t      if (undeduced_auto_decl (fn))\n \t\t{\n \t\t  /* Instantiate the function to deduce its return type.  */\n@@ -22268,7 +22270,8 @@ resolve_nondeduced_context (tree orig_expr, tsubst_flags_t complain)\n \t\t  badfn = fn;\n \t\t  badargs = subargs;\n \t\t}\n-\t      else if (elem && (!goodfn || !decls_match (goodfn, elem)))\n+\t      else if (elem && (!goodfn || !decls_match (goodfn, elem))\n+\t\t       && constraints_satisfied_p (elem))\n \t\t{\n \t\t  goodfn = elem;\n \t\t  ++good;"}, {"sha": "32df5a556c0f01aa7af2ea8c02ba540ed5779a9a", "filename": "gcc/testsuite/g++.dg/concepts/fn8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C?ref=41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "patch": "@@ -24,5 +24,5 @@ template<typename T>\n   void g(T x) { }\n \n int main () {\n-  g(&f<int>); // { dg-error \"no matches\" }\n+  g(&f<int>); // { dg-error \"no match\" }\n }"}, {"sha": "b31675d255ca1f8291d9e2c930bac1354dbadf66", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-fn1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn1.C?ref=41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "patch": "@@ -170,7 +170,7 @@ template<typename T> void g(T x) { }\n void driver_3 () \n {\n   g(&ok<int>);\n-  g(&err<int>); // { dg-error \"no matches\" }\n+  g(&err<int>); // { dg-error \"no match\" }\n }\n \n "}, {"sha": "8f00a760d7ebe8c152c54ac975a2a8d1e1067be7", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-fn5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-fn5.C?ref=41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "patch": "@@ -0,0 +1,17 @@\n+// Verify we check associated constraints when resolving the address of a\n+// template-id.\n+// { dg-do compile { target c++20 } }\n+\n+void id(auto) { }\n+\n+template <typename>\n+int f() { return 0; }\n+\n+template <typename T> requires requires { T::fail(); }\n+auto f() { T::fail(); }\n+\n+int main() {\n+  using U = decltype(&f<int>);\n+  (void)&f<int>;\n+  id(&f<int>);\n+}"}, {"sha": "5942ff19327ce1074774dda5b97f194ae3736296", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts2.C?ref=41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "patch": "@@ -173,7 +173,7 @@ template<typename T> void g(T x) { }\n void driver_3 () \n {\n   g(&ok<int>);\n-  g(&err<int>); // { dg-error \"no matches\" }\n+  g(&err<int>); // { dg-error \"no match\" }\n }\n \n "}, {"sha": "6f7ed1ffee4671342a6b393537026e92b528e511", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd9d26108fc98bbffce3d99d218a6a09fa80c6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts3.C?ref=41fd9d26108fc98bbffce3d99d218a6a09fa80c6", "patch": "@@ -173,7 +173,7 @@ template<typename T> void g(T x) { }\n void driver_3 () \n {\n   g(&ok<int>);\n-  g(&err<int>); // { dg-error \"no matches\" }\n+  g(&err<int>); // { dg-error \"no match\" }\n }\n \n "}]}