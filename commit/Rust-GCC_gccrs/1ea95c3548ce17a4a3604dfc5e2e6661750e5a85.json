{"sha": "1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "node_id": "C_kwDOANBUbNoAKDFlYTk1YzM1NDhjZTE3YTRhMzYwNGRmYzVlMmU2NjYxNzUwZTVhODU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T12:07:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T12:07:42Z"}, "message": "refactor relative type path function into its assoicated file", "tree": {"sha": "50b4406d9f51d9e96c21c18f56a931deeed928ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50b4406d9f51d9e96c21c18f56a931deeed928ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31bffa99b1a7007572637228bd99c00362ae597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31bffa99b1a7007572637228bd99c00362ae597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31bffa99b1a7007572637228bd99c00362ae597"}], "stats": {"total": 94, "additions": 46, "deletions": 48}, "files": [{"sha": "050f3b919e1e390f92ee45fccc2d396e2ebc14e0", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "patch": "@@ -454,5 +454,51 @@ ResolveRelativeTypePath::go (AST::QualifiedPathInType &path)\n   return true;\n }\n \n+bool\n+ResolveRelativeTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n+\t\t\t\t\t   CanonicalPath &result)\n+{\n+  if (seg.is_error ())\n+    {\n+      rust_error_at (seg.get_locus (), \"segment has error: %s\",\n+\t\t     seg.as_string ().c_str ());\n+      return false;\n+    }\n+\n+  auto type = seg.get_type ().get ();\n+  NodeId type_resolved_node = ResolveType::go (type, seg.get_node_id ());\n+  if (type_resolved_node == UNKNOWN_NODEID)\n+    return false;\n+\n+  const CanonicalPath *impl_type_seg = nullptr;\n+  bool ok\n+    = mappings->lookup_canonical_path (mappings->get_current_crate (),\n+\t\t\t\t       type_resolved_node, &impl_type_seg);\n+  rust_assert (ok);\n+\n+  if (!seg.has_as_clause ())\n+    {\n+      result = result.append (*impl_type_seg);\n+      return true;\n+    }\n+\n+  NodeId trait_resolved_node\n+    = ResolveType::go (&seg.get_as_type_path (), seg.get_node_id ());\n+  if (trait_resolved_node == UNKNOWN_NODEID)\n+    return false;\n+\n+  const CanonicalPath *trait_type_seg = nullptr;\n+  ok = mappings->lookup_canonical_path (mappings->get_current_crate (),\n+\t\t\t\t\ttrait_resolved_node, &trait_type_seg);\n+  rust_assert (ok);\n+\n+  CanonicalPath projection\n+    = TraitImplProjection::resolve (seg.get_node_id (), *trait_type_seg,\n+\t\t\t\t    *impl_type_seg);\n+\n+  result = result.append (projection);\n+  return true;\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "93fa7c8761c290acf51ed1de06f1c26abfb83a50", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea95c3548ce17a4a3604dfc5e2e6661750e5a85/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=1ea95c3548ce17a4a3604dfc5e2e6661750e5a85", "patch": "@@ -111,53 +111,5 @@ NameResolution::go (AST::Crate &crate)\n   resolver->pop_module_scope ();\n }\n \n-// qualified path in type\n-\n-bool\n-ResolveRelativeTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n-\t\t\t\t\t   CanonicalPath &result)\n-{\n-  if (seg.is_error ())\n-    {\n-      rust_error_at (seg.get_locus (), \"segment has error: %s\",\n-\t\t     seg.as_string ().c_str ());\n-      return false;\n-    }\n-\n-  auto type = seg.get_type ().get ();\n-  NodeId type_resolved_node = ResolveType::go (type, seg.get_node_id ());\n-  if (type_resolved_node == UNKNOWN_NODEID)\n-    return false;\n-\n-  const CanonicalPath *impl_type_seg = nullptr;\n-  bool ok\n-    = mappings->lookup_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t       type_resolved_node, &impl_type_seg);\n-  rust_assert (ok);\n-\n-  if (!seg.has_as_clause ())\n-    {\n-      result = result.append (*impl_type_seg);\n-      return true;\n-    }\n-\n-  NodeId trait_resolved_node\n-    = ResolveType::go (&seg.get_as_type_path (), seg.get_node_id ());\n-  if (trait_resolved_node == UNKNOWN_NODEID)\n-    return false;\n-\n-  const CanonicalPath *trait_type_seg = nullptr;\n-  ok = mappings->lookup_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t\ttrait_resolved_node, &trait_type_seg);\n-  rust_assert (ok);\n-\n-  CanonicalPath projection\n-    = TraitImplProjection::resolve (seg.get_node_id (), *trait_type_seg,\n-\t\t\t\t    *impl_type_seg);\n-\n-  result = result.append (projection);\n-  return true;\n-}\n-\n } // namespace Resolver\n } // namespace Rust"}]}