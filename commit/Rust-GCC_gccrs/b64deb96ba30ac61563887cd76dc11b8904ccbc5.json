{"sha": "b64deb96ba30ac61563887cd76dc11b8904ccbc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0ZGViOTZiYTMwYWM2MTU2Mzg4N2NkNzZkYzExYjg5MDRjY2JjNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-25T02:15:39Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-04-25T02:15:39Z"}, "message": "x\n\nFrom-SVN: r13980", "tree": {"sha": "dc13ef82b7552c95c617fd5dc6efc4f0d6857559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc13ef82b7552c95c617fd5dc6efc4f0d6857559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64deb96ba30ac61563887cd76dc11b8904ccbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64deb96ba30ac61563887cd76dc11b8904ccbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64deb96ba30ac61563887cd76dc11b8904ccbc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64deb96ba30ac61563887cd76dc11b8904ccbc5/comments", "author": null, "committer": null, "parents": [{"sha": "52a18c1031e2540f517ac918ba5bd0b186cc1987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a18c1031e2540f517ac918ba5bd0b186cc1987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a18c1031e2540f517ac918ba5bd0b186cc1987"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "fe404e0d0ef2f9af3a2ceeb298ae261a7eeec8b1", "filename": "gcc/config/i386/cygwin32.h", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64deb96ba30ac61563887cd76dc11b8904ccbc5/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64deb96ba30ac61563887cd76dc11b8904ccbc5/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin32.h?ref=b64deb96ba30ac61563887cd76dc11b8904ccbc5", "patch": "@@ -158,18 +158,43 @@ while (0)\n #define TARGET_DEFAULT \\\n    (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE) \n \n-/* A C statement to output something to the assembler file to switch to section\n-   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n-   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n-   define this macro in such cases.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n-  fprintf (FILE, \"\\t.section %s\\n\", NAME)\n-\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */\n \n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n     if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d\\n\", 1<<(LOG))\n+\n+/* For objects going into their own sections, a C expression of name of the\n+   section, expressed as a STRING_CST node, to put DECL into.  The\n+   STRING_CST node must be allocated in the saveable obstack.  Function\n+   build_string can be used to do this.  Define this macro if the name of a\n+   symbol cannot be used as its section name.  */\n+extern union tree_node *i386_pe_unique_section ();\n+#define UNIQUE_SECTION(DECL) i386_pe_unique_section (DECL)\n+\n+#define MAKE_DECL_ONE_ONLY(DECL)\t\t\t\\\n+  DECL_SECTION_NAME (DECL) = UNIQUE_SECTION (DECL)\n+\n+/* A C statement to output something to the assembler file to switch to section\n+   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n+   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n+   define this macro in such cases.  */\n+#undef ASM_OUTPUT_SECTION_NAME\n+#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME) \\\n+do {\t\t\t\t\t\t\t\t\\\n+  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n+    fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n+  else if ((DECL) && TREE_READONLY (DECL))\t\t\t\\\n+    fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\\n+  /* Functions may have been compiled at various levels of\t\\\n+     optimization so we can't use `same_size' here.  Instead,\t\\\n+     have the linker pick one.  */\t\t\t\t\\\n+  if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n+    fprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\\\n+\t     TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n+\t     ? \"discard\" : \"same_size\");\t\t\t\\\n+} while (0)"}, {"sha": "9a32aaa5f894c1537234fb18a6a9b63d9925634e", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64deb96ba30ac61563887cd76dc11b8904ccbc5/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64deb96ba30ac61563887cd76dc11b8904ccbc5/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=b64deb96ba30ac61563887cd76dc11b8904ccbc5", "patch": "@@ -64,3 +64,29 @@ gen_stdcall_suffix (decl)\n   return IDENTIFIER_POINTER (get_identifier (newsym));\n }\n \n+/* Cover function for UNIQUE_SECTION.  */\n+\n+tree\n+i386_pe_unique_section (decl)\n+     tree decl;\n+{\n+  int len;\n+  char *name,*string,*prefix;\n+\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\n+  /* The object is put in, for example, section .text$foo.\n+     The linker will then ultimately place them in .text\n+     (everything from the $ on is stripped).  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    prefix = \".text$\";\n+  else if (TREE_READONLY (decl))\n+    prefix = \".rdata$\";\n+  else\n+    prefix = \".data$\";\n+  len = strlen (name) + strlen (prefix);\n+  string = alloca (len + 1);\n+  sprintf (string, \"%s%s\", prefix, name);\n+\n+  return build_string (len, string);\n+}"}]}