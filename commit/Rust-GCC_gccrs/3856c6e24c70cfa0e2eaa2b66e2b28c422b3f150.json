{"sha": "3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150", "node_id": "C_kwDOANBUbNoAKDM4NTZjNmUyNGM3MGNmYTBlMmVhYTJiNjZlMmIyOGM0MjJiM2YxNTA", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-16T08:52:37Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-16T09:32:43Z"}, "message": "Rename imports nomenclature in path_range_query to exit_dependencies.\n\nThe purpose of this change is to disambiguate the imports name with\nits use in GORI.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::import_p): Rename to...\n\t(path_range_query::exit_dependency_p): ...this.\n\t(path_range_query::dump): Rename imports to exit dependencies.\n\t(path_range_query::compute_ranges_in_phis): Same.\n\t(path_range_query::compute_ranges_in_block): Same.\n\t(path_range_query::adjust_for_non_null_uses): Same.\n\t(path_range_query::compute_ranges): Same.\n\t(path_range_query::compute_phi_relations): Same.\n\t(path_range_query::add_to_imports): Rename to...\n\t(path_range_query::add_to_exit_dependencies): ...this.\n\t(path_range_query::compute_imports): Rename to...\n\t(path_range_query::compute_exit_dependencies): ...this.\n\t* gimple-range-path.h (class path_range_query): Rename imports to\n\texit dependencies.", "tree": {"sha": "7a3851d52f7d07037119a8bc85539640071dd479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a3851d52f7d07037119a8bc85539640071dd479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8699a0eb620ad076ed377c6652d1326a47235721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8699a0eb620ad076ed377c6652d1326a47235721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8699a0eb620ad076ed377c6652d1326a47235721"}], "stats": {"total": 98, "additions": 51, "deletions": 47}, "files": [{"sha": "c99d77dd340775e32981658a1e86529d041924e5", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 37, "deletions": 42, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150", "patch": "@@ -62,13 +62,13 @@ path_range_query::~path_range_query ()\n   delete m_cache;\n }\n \n-// Return TRUE if NAME is in the import bitmap.\n+// Return TRUE if NAME is an exit depenency for the path.\n \n bool\n-path_range_query::import_p (tree name)\n+path_range_query::exit_dependency_p (tree name)\n {\n   return (TREE_CODE (name) == SSA_NAME\n-\t  && bitmap_bit_p (m_imports, SSA_NAME_VERSION (name)));\n+\t  && bitmap_bit_p (m_exit_dependencies, SSA_NAME_VERSION (name)));\n }\n \n // Mark cache entry for NAME as unused.\n@@ -118,8 +118,8 @@ path_range_query::dump (FILE *dump_file)\n \n   dump_ranger (dump_file, m_path);\n \n-  fprintf (dump_file, \"Imports:\\n\");\n-  EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n+  fprintf (dump_file, \"Exit dependencies:\\n\");\n+  EXECUTE_IF_SET_IN_BITMAP (m_exit_dependencies, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n       print_generic_expr (dump_file, name, TDF_SLIM);\n@@ -356,7 +356,7 @@ path_range_query::compute_ranges_in_phis (basic_block bb)\n       gphi *phi = iter.phi ();\n       tree name = gimple_phi_result (phi);\n \n-      if (!import_p (name))\n+      if (!exit_dependency_p (name))\n \tcontinue;\n \n       Value_Range r (TREE_TYPE (name));\n@@ -400,17 +400,17 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n \n   // Force recalculation of any names in the cache that are defined in\n   // this block.  This can happen on interdependent SSA/phis in loops.\n-  EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n+  EXECUTE_IF_SET_IN_BITMAP (m_exit_dependencies, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n       if (ssa_defined_in_bb (name, bb))\n \tclear_cache (name);\n     }\n \n-  // Solve imports defined in this block, starting with the PHIs...\n+  // Solve dependencies defined in this block, starting with the PHIs...\n   compute_ranges_in_phis (bb);\n-  // ...and then the rest of the imports.\n-  EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n+  // ...and then the rest of the dependencies.\n+  EXECUTE_IF_SET_IN_BITMAP (m_exit_dependencies, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n       Value_Range r (TREE_TYPE (name));\n@@ -423,7 +423,7 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n   if (at_exit ())\n     return;\n \n-  // Solve imports that are exported to the next block.\n+  // Solve dependencies that are exported to the next block.\n   basic_block next = next_bb ();\n   edge e = find_edge (bb, next);\n \n@@ -444,7 +444,7 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n \n   gori_compute &g = m_ranger->gori ();\n   bitmap exports = g.exports (bb);\n-  EXECUTE_IF_AND_IN_BITMAP (m_imports, exports, 0, i, bi)\n+  EXECUTE_IF_AND_IN_BITMAP (m_exit_dependencies, exports, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n       Value_Range r (TREE_TYPE (name));\n@@ -472,7 +472,7 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n     compute_outgoing_relations (bb, next);\n }\n \n-// Adjust all pointer imports in BB with non-null information.\n+// Adjust all pointer exit dependencies in BB with non-null information.\n \n void\n path_range_query::adjust_for_non_null_uses (basic_block bb)\n@@ -481,7 +481,7 @@ path_range_query::adjust_for_non_null_uses (basic_block bb)\n   bitmap_iterator bi;\n   unsigned i;\n \n-  EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n+  EXECUTE_IF_SET_IN_BITMAP (m_exit_dependencies, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n \n@@ -501,39 +501,33 @@ path_range_query::adjust_for_non_null_uses (basic_block bb)\n     }\n }\n \n-// If NAME is a supported SSA_NAME, add it the bitmap in IMPORTS.\n+// If NAME is a supported SSA_NAME, add it to the bitmap in dependencies.\n \n bool\n-path_range_query::add_to_imports (tree name, bitmap imports)\n+path_range_query::add_to_exit_dependencies (tree name, bitmap dependencies)\n {\n   if (TREE_CODE (name) == SSA_NAME\n       && Value_Range::supports_type_p (TREE_TYPE (name)))\n-    return bitmap_set_bit (imports, SSA_NAME_VERSION (name));\n+    return bitmap_set_bit (dependencies, SSA_NAME_VERSION (name));\n   return false;\n }\n \n-// Compute the imports to PATH.  These are\n-// essentially the SSA names used to calculate the final conditional\n-// along the path.\n-//\n-// They are hints for the solver.  Adding more elements doesn't slow\n-// us down, because we don't solve anything that doesn't appear in the\n-// path.  On the other hand, not having enough imports will limit what\n-// we can solve.\n+// Compute the exit dependencies to PATH.  These are essentially the\n+// SSA names used to calculate the final conditional along the path.\n \n void\n-path_range_query::compute_imports (bitmap imports, const vec<basic_block> &path)\n+path_range_query::compute_exit_dependencies (bitmap dependencies,\n+\t\t\t\t\t     const vec<basic_block> &path)\n {\n   // Start with the imports from the exit block...\n   basic_block exit = path[0];\n   gori_compute &gori = m_ranger->gori ();\n-  bitmap r_imports = gori.imports (exit);\n-  bitmap_copy (imports, r_imports);\n+  bitmap_copy (dependencies, gori.imports (exit));\n \n-  auto_vec<tree> worklist (bitmap_count_bits (imports));\n+  auto_vec<tree> worklist (bitmap_count_bits (dependencies));\n   bitmap_iterator bi;\n   unsigned i;\n-  EXECUTE_IF_SET_IN_BITMAP (imports, 0, i, bi)\n+  EXECUTE_IF_SET_IN_BITMAP (dependencies, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n       worklist.quick_push (name);\n@@ -557,7 +551,7 @@ path_range_query::compute_imports (bitmap imports, const vec<basic_block> &path)\n \n \t      if (TREE_CODE (arg) == SSA_NAME\n \t\t  && path.contains (e->src)\n-\t\t  && bitmap_set_bit (imports, SSA_NAME_VERSION (arg)))\n+\t\t  && bitmap_set_bit (dependencies, SSA_NAME_VERSION (arg)))\n \t\tworklist.safe_push (arg);\n \t    }\n \t}\n@@ -581,7 +575,7 @@ path_range_query::compute_imports (bitmap imports, const vec<basic_block> &path)\n \t  for (unsigned j = 0; j < 3; ++j)\n \t    {\n \t      tree rhs = ssa[j];\n-\t      if (rhs && add_to_imports (rhs, imports))\n+\t      if (rhs && add_to_exit_dependencies (rhs, dependencies))\n \t\tworklist.safe_push (rhs);\n \t    }\n \t}\n@@ -594,30 +588,31 @@ path_range_query::compute_imports (bitmap imports, const vec<basic_block> &path)\n \ttree name;\n \tFOR_EACH_GORI_EXPORT_NAME (gori, bb, name)\n \t  if (TREE_CODE (TREE_TYPE (name)) == BOOLEAN_TYPE)\n-\t    bitmap_set_bit (imports, SSA_NAME_VERSION (name));\n+\t    bitmap_set_bit (dependencies, SSA_NAME_VERSION (name));\n       }\n }\n \n-// Compute the ranges for IMPORTS along PATH.\n+// Compute the ranges for DEPENDENCIES along PATH.\n //\n-// IMPORTS are the set of SSA names, any of which could potentially\n-// change the value of the final conditional in PATH.  Default to the\n-// imports of the last block in the path if none is given.\n+// DEPENDENCIES are path exit dependencies.  They are the set of SSA\n+// names, any of which could potentially change the value of the final\n+// conditional in PATH.  If none is given, the exit dependencies are\n+// calculated from the final conditional in the path.\n \n void\n path_range_query::compute_ranges (const vec<basic_block> &path,\n-\t\t\t\t  const bitmap_head *imports)\n+\t\t\t\t  const bitmap_head *dependencies)\n {\n   if (DEBUG_SOLVER)\n     fprintf (dump_file, \"\\n==============================================\\n\");\n \n   set_path (path);\n   m_undefined_path = false;\n \n-  if (imports)\n-    bitmap_copy (m_imports, imports);\n+  if (dependencies)\n+    bitmap_copy (m_exit_dependencies, dependencies);\n   else\n-    compute_imports (m_imports, m_path);\n+    compute_exit_dependencies (m_exit_dependencies, m_path);\n \n   if (m_resolve)\n     get_path_oracle ()->reset_path ();\n@@ -809,7 +804,7 @@ path_range_query::compute_phi_relations (basic_block bb, basic_block prev)\n       tree result = gimple_phi_result (phi);\n       unsigned nargs = gimple_phi_num_args (phi);\n \n-      if (!import_p (result))\n+      if (!exit_dependency_p (result))\n \tcontinue;\n \n       for (size_t i = 0; i < nargs; ++i)"}, {"sha": "3cb794e34a9856add0629fda1813d891fb17b7b4", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=3856c6e24c70cfa0e2eaa2b66e2b28c422b3f150", "patch": "@@ -35,9 +35,10 @@ class path_range_query : public range_query\n   path_range_query (bool resolve = true, class gimple_ranger *ranger = NULL);\n   virtual ~path_range_query ();\n   void compute_ranges (const vec<basic_block> &,\n-\t\t       const bitmap_head *imports = NULL);\n+\t\t       const bitmap_head *dependencies = NULL);\n   void compute_ranges (edge e);\n-  void compute_imports (bitmap imports, const vec<basic_block> &);\n+  void compute_exit_dependencies (bitmap dependencies,\n+\t\t\t\t  const vec<basic_block> &);\n   bool range_of_expr (vrange &r, tree name, gimple * = NULL) override;\n   bool range_of_stmt (vrange &r, gimple *, tree name = NULL) override;\n   bool unreachable_path_p ();\n@@ -64,8 +65,8 @@ class path_range_query : public range_query\n   void compute_outgoing_relations (basic_block bb, basic_block next);\n   void compute_phi_relations (basic_block bb, basic_block prev);\n   void maybe_register_phi_relation (gphi *, edge e);\n-  bool add_to_imports (tree name, bitmap imports);\n-  bool import_p (tree name);\n+  bool add_to_exit_dependencies (tree name, bitmap dependencies);\n+  bool exit_dependency_p (tree name);\n   bool ssa_defined_in_bb (tree name, basic_block bb);\n   bool relations_may_be_invalidated (edge);\n \n@@ -89,7 +90,15 @@ class path_range_query : public range_query\n   // Path being analyzed.\n   auto_vec<basic_block> m_path;\n \n-  auto_bitmap m_imports;\n+  // This is a list of SSA names that may have relevant context\n+  // information for solving the final conditional along the path.\n+  // Ranges for these SSA names are pre-calculated and cached during a\n+  // top-down traversal of the path, and are then used to answer\n+  // questions at the path exit.\n+  auto_bitmap m_exit_dependencies;\n+\n+  // A ranger used to resolve ranges for SSA names whose values come\n+  // from outside the path.\n   gimple_ranger *m_ranger;\n \n   // Current path position."}]}