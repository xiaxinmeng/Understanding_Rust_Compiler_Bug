{"sha": "9ad8aaf839866994905bf577bcf2a1dee1b8a01a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkOGFhZjgzOTg2Njk5NDkwNWJmNTc3YmNmMmExZGVlMWI4YTAxYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-20T10:08:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-20T10:08:24Z"}, "message": "re PR fortran/80657 (Loop in character function declaration)\n\n2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/80657\n\t* resolve.c (flag_fn_result_spec): Use the 'sym' argument to\n\ttest for self refs to the function result in the character len\n\texpression. If a self reference is found, emit an error and\n\treturn true.\n\t(resolve_fntype): Use the function symbol in the calls to the\n\tabove.\n\n2018-05-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/80657\n\t* gfortran.dg/char_result_18.f90: New test.\n\nFrom-SVN: r260415", "tree": {"sha": "c3f2c693b3e0fe51513d73a0fd51bb4be92f9c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f2c693b3e0fe51513d73a0fd51bb4be92f9c9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad8aaf839866994905bf577bcf2a1dee1b8a01a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad8aaf839866994905bf577bcf2a1dee1b8a01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad8aaf839866994905bf577bcf2a1dee1b8a01a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad8aaf839866994905bf577bcf2a1dee1b8a01a/comments", "author": null, "committer": null, "parents": [{"sha": "f82f425b56a1ccf1950c6d0992e7c106558acba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82f425b56a1ccf1950c6d0992e7c106558acba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82f425b56a1ccf1950c6d0992e7c106558acba0"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "13374dddf1dc7a891c89612bf48e94ffc511c6ca", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad8aaf839866994905bf577bcf2a1dee1b8a01a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad8aaf839866994905bf577bcf2a1dee1b8a01a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9ad8aaf839866994905bf577bcf2a1dee1b8a01a", "patch": "@@ -16217,7 +16217,7 @@ resolve_equivalence (gfc_equiv *eq)\n \n static bool\n flag_fn_result_spec (gfc_expr *expr,\n-                     gfc_symbol *sym ATTRIBUTE_UNUSED,\n+                     gfc_symbol *sym,\n                      int *f ATTRIBUTE_UNUSED)\n {\n   gfc_namespace *ns;\n@@ -16230,6 +16230,13 @@ flag_fn_result_spec (gfc_expr *expr,\n \tif (!ns->parent)\n \t  break;\n \n+      if (sym == s)\n+\t{\n+\t  gfc_error (\"Self reference in character length expression \"\n+\t\t     \"for %qs at %L\", sym->name, &expr->where);\n+\t  return true;\n+\t}\n+\n       if (!s->fn_result_spec\n \t  && s->attr.flavor == FL_PARAMETER)\n \t{\n@@ -16312,7 +16319,7 @@ resolve_fntype (gfc_namespace *ns)\n       }\n \n   if (sym->ts.type == BT_CHARACTER)\n-    gfc_traverse_expr (sym->ts.u.cl->length, NULL, flag_fn_result_spec, 0);\n+    gfc_traverse_expr (sym->ts.u.cl->length, sym, flag_fn_result_spec, 0);\n }\n \n "}, {"sha": "f47c88ad4b3ba7bfc9e5c22a99fa3eadc23b983e", "filename": "gcc/testsuite/gfortran.dg/char_result_18.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad8aaf839866994905bf577bcf2a1dee1b8a01a/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad8aaf839866994905bf577bcf2a1dee1b8a01a/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_18.f90?ref=9ad8aaf839866994905bf577bcf2a1dee1b8a01a", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+!\n+! Tests the fix for PR80657.\n+!\n+! Contributed by Vittorio Zecca  <zeccav@gmail.com>\n+!\n+function f(x)\n+implicit character(len(f)) (x) ! { dg-error \"Self reference in character length\" }\n+character(len(x)) f\n+end"}]}