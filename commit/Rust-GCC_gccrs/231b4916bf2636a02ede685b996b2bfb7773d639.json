{"sha": "231b4916bf2636a02ede685b996b2bfb7773d639", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxYjQ5MTZiZjI2MzZhMDJlZGU2ODViOTk2YjJiZmI3NzczZDYzOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-11-17T22:04:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-11-17T22:04:36Z"}, "message": "ipa-cp.c (ipa_get_indirect_edge_target_1): Handle speculation.\n\n\n\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Handle speculation.\n\t(ipa_get_indirect_edge_target): Add SPECULATIVE argument.\n\t(devirtualization_time_bonus): Use it.\n\t(ipcp_discover_new_direct_edges): Likewise.\n\t* ipa-inline-analysis.c (estimate_edge_devirt_benefit): Update.\n\t* ipa-prop.h (ipa_get_indirect_edge_target): Update prototype.\n\nFrom-SVN: r217675", "tree": {"sha": "a0d20c604d54f9af5b113f166f5c11a470e4b182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0d20c604d54f9af5b113f166f5c11a470e4b182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231b4916bf2636a02ede685b996b2bfb7773d639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231b4916bf2636a02ede685b996b2bfb7773d639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231b4916bf2636a02ede685b996b2bfb7773d639", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231b4916bf2636a02ede685b996b2bfb7773d639/comments", "author": null, "committer": null, "parents": [{"sha": "a19faae31ea866598ad4738a511ed81b01e3d58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19faae31ea866598ad4738a511ed81b01e3d58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19faae31ea866598ad4738a511ed81b01e3d58e"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "366be84ad34b155fbeff27971d6786335eed44e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=231b4916bf2636a02ede685b996b2bfb7773d639", "patch": "@@ -1,3 +1,12 @@\n+2014-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Handle speculation.\n+\t(ipa_get_indirect_edge_target): Add SPECULATIVE argument.\n+\t(devirtualization_time_bonus): Use it.\n+\t(ipcp_discover_new_direct_edges): Likewise.\n+\t* ipa-inline-analysis.c (estimate_edge_devirt_benefit): Update.\n+\t* ipa-prop.h (ipa_get_indirect_edge_target): Update prototype.\n+\n 2014-11-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (free_lang_data_in_decl): Set DECL_FUNCTION_SPECIFIC_OPTIMIZATION"}, {"sha": "e598241c01d91e8dae3a7f6545753a545a9cb0b6", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=231b4916bf2636a02ede685b996b2bfb7773d639", "patch": "@@ -1730,13 +1730,16 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n \t\t\t\tvec<tree> known_csts,\n \t\t\t\tvec<ipa_polymorphic_call_context> known_contexts,\n \t\t\t\tvec<ipa_agg_jump_function_p> known_aggs,\n-\t\t\t\tstruct ipa_agg_replacement_value *agg_reps)\n+\t\t\t\tstruct ipa_agg_replacement_value *agg_reps,\n+\t\t\t\tbool *speculative)\n {\n   int param_index = ie->indirect_info->param_index;\n   HOST_WIDE_INT anc_offset;\n   tree t;\n   tree target = NULL;\n \n+  *speculative = false;\n+\n   if (param_index == -1\n       || known_csts.length () <= (unsigned int) param_index)\n     return NULL_TREE;\n@@ -1792,8 +1795,7 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n   t = NULL;\n \n   /* Try to work out value of virtual table pointer value in replacemnets.  */\n-  if (!t && agg_reps && !ie->indirect_info->by_ref\n-      && !ie->indirect_info->vptr_changed)\n+  if (!t && agg_reps && !ie->indirect_info->by_ref)\n     {\n       while (agg_reps)\n \t{\n@@ -1811,8 +1813,7 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n   /* Try to work out value of virtual table pointer value in known\n      aggregate values.  */\n   if (!t && known_aggs.length () > (unsigned int) param_index\n-      && !ie->indirect_info->by_ref\n-      && !ie->indirect_info->vptr_changed)\n+      && !ie->indirect_info->by_ref)\n     {\n        struct ipa_agg_jump_function *agg;\n        agg = known_aggs[param_index];\n@@ -1836,7 +1837,9 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n \t\t  || !possible_polymorphic_call_target_p\n \t\t       (ie, cgraph_node::get (target)))\n \t\ttarget = ipa_impossible_devirt_target (ie, target);\n-\t      return target;\n+              *speculative = ie->indirect_info->vptr_changed;\n+\t      if (!*speculative)\n+\t        return target;\n \t    }\n \t}\n     }\n@@ -1877,11 +1880,32 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n      ie->indirect_info->otr_token,\n      context, &final);\n   if (!final || targets.length () > 1)\n-    return NULL_TREE;\n-  if (targets.length () == 1)\n-    target = targets[0]->decl;\n+    {\n+      struct cgraph_node *node;\n+      if (*speculative)\n+\treturn target;\n+      if (!flag_devirtualize_speculatively || ie->speculative\n+\t  || !ie->maybe_hot_p ())\n+\treturn NULL;\n+      node = try_speculative_devirtualization (ie->indirect_info->otr_type,\n+\t\t\t\t\t       ie->indirect_info->otr_token,\n+\t\t\t\t\t       context);\n+      if (node)\n+\t{\n+\t  *speculative = true;\n+\t  target = node->decl;\n+\t}\n+      else\n+\treturn NULL;\n+    }\n   else\n-    target = ipa_impossible_devirt_target (ie, NULL_TREE);\n+    {\n+      *speculative = false;\n+      if (targets.length () == 1)\n+\ttarget = targets[0]->decl;\n+      else\n+\ttarget = ipa_impossible_devirt_target (ie, NULL_TREE);\n+    }\n \n   if (target && !possible_polymorphic_call_target_p (ie,\n \t\t\t\t\t\t     cgraph_node::get (target)))\n@@ -1899,10 +1923,11 @@ tree\n ipa_get_indirect_edge_target (struct cgraph_edge *ie,\n \t\t\t      vec<tree> known_csts,\n \t\t\t      vec<ipa_polymorphic_call_context> known_contexts,\n-\t\t\t      vec<ipa_agg_jump_function_p> known_aggs)\n+\t\t\t      vec<ipa_agg_jump_function_p> known_aggs,\n+\t\t\t      bool *speculative)\n {\n   return ipa_get_indirect_edge_target_1 (ie, known_csts, known_contexts,\n-\t\t\t\t\t known_aggs, NULL);\n+\t\t\t\t\t known_aggs, NULL, speculative);\n }\n \n /* Calculate devirtualization time bonus for NODE, assuming we know KNOWN_CSTS\n@@ -1923,9 +1948,10 @@ devirtualization_time_bonus (struct cgraph_node *node,\n       struct inline_summary *isummary;\n       enum availability avail;\n       tree target;\n+      bool speculative;\n \n       target = ipa_get_indirect_edge_target (ie, known_csts, known_contexts,\n-\t\t\t\t\t     known_aggs);\n+\t\t\t\t\t     known_aggs, &speculative);\n       if (!target)\n \tcontinue;\n \n@@ -1944,12 +1970,12 @@ devirtualization_time_bonus (struct cgraph_node *node,\n       /* FIXME: The values below need re-considering and perhaps also\n \t integrating into the cost metrics, at lest in some very basic way.  */\n       if (isummary->size <= MAX_INLINE_INSNS_AUTO / 4)\n-\tres += 31;\n+\tres += 31 / ((int)speculative + 1);\n       else if (isummary->size <= MAX_INLINE_INSNS_AUTO / 2)\n-\tres += 15;\n+\tres += 15 / ((int)speculative + 1);\n       else if (isummary->size <= MAX_INLINE_INSNS_AUTO\n \t       || DECL_DECLARED_INLINE_P (callee->decl))\n-\tres += 7;\n+\tres += 7 / ((int)speculative + 1);\n     }\n \n   return res;\n@@ -2645,16 +2671,18 @@ ipcp_discover_new_direct_edges (struct cgraph_node *node,\n   for (ie = node->indirect_calls; ie; ie = next_ie)\n     {\n       tree target;\n+      bool speculative;\n \n       next_ie = ie->next_callee;\n       target = ipa_get_indirect_edge_target_1 (ie, known_csts, known_contexts,\n-\t\t\t\t\t       vNULL, aggvals);\n+\t\t\t\t\t       vNULL, aggvals, &speculative);\n       if (target)\n \t{\n \t  bool agg_contents = ie->indirect_info->agg_contents;\n \t  bool polymorphic = ie->indirect_info->polymorphic;\n \t  int param_index = ie->indirect_info->param_index;\n-\t  struct cgraph_edge *cs = ipa_make_edge_direct_to_target (ie, target);\n+\t  struct cgraph_edge *cs = ipa_make_edge_direct_to_target (ie, target,\n+\t\t\t\t\t\t\t\t   speculative);\n \t  found = true;\n \n \t  if (cs && !agg_contents && !polymorphic)"}, {"sha": "dace2fc78bebd9ae3549a83e704d3b46acbf3aa8", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=231b4916bf2636a02ede685b996b2bfb7773d639", "patch": "@@ -2986,15 +2986,16 @@ estimate_edge_devirt_benefit (struct cgraph_edge *ie,\n   struct cgraph_node *callee;\n   struct inline_summary *isummary;\n   enum availability avail;\n+  bool speculative;\n \n   if (!known_vals.exists () && !known_contexts.exists ())\n     return false;\n   if (!flag_indirect_inlining)\n     return false;\n \n   target = ipa_get_indirect_edge_target (ie, known_vals, known_contexts,\n-\t\t\t\t\t known_aggs);\n-  if (!target)\n+\t\t\t\t\t known_aggs, &speculative);\n+  if (!target || speculative)\n     return false;\n \n   /* Account for difference in cost between indirect and direct calls.  */"}, {"sha": "6adb8d4d9c7aec4b7115858c713f8665f707719e", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231b4916bf2636a02ede685b996b2bfb7773d639/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=231b4916bf2636a02ede685b996b2bfb7773d639", "patch": "@@ -529,7 +529,8 @@ bool ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n tree ipa_get_indirect_edge_target (struct cgraph_edge *ie,\n \t\t\t\t   vec<tree> ,\n \t\t\t\t   vec<ipa_polymorphic_call_context>,\n-\t\t\t\t   vec<ipa_agg_jump_function_p> );\n+\t\t\t\t   vec<ipa_agg_jump_function_p>,\n+\t\t\t\t   bool *);\n struct cgraph_edge *ipa_make_edge_direct_to_target (struct cgraph_edge *, tree,\n \t\t\t\t\t\t    bool speculative = false);\n tree ipa_impossible_devirt_target (struct cgraph_edge *, tree);"}]}