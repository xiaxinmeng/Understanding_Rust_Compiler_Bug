{"sha": "0287000a9f870363bf864354d7cceffc4b575dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI4NzAwMGE5Zjg3MDM2M2JmODY0MzU0ZDdjY2VmZmM0YjU3NWRlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-06-29T19:37:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-06-29T19:37:46Z"}, "message": "re PR debug/44668 (class->DW_TAG_typedef is missing DW_AT_accessibility)\n\n\tPR debug/44668\n\t* dwarf2out.c (add_accessibility_attribute): New function.\n\t(gen_subprogram_die, gen_variable_die, gen_field_die): Use it\n\tinstead of adding DW_AT_accessibility manually.\n\t(gen_enumeration_type_die, gen_struct_or_union_type_die,\n\tgen_typedef_die): Use it.\n\n\t* g++.dg/debug/dwarf2/accessibility1.C: New test.\n\nFrom-SVN: r161563", "tree": {"sha": "881865d1a095787053735ccc582c9c7752878c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/881865d1a095787053735ccc582c9c7752878c0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0287000a9f870363bf864354d7cceffc4b575dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0287000a9f870363bf864354d7cceffc4b575dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0287000a9f870363bf864354d7cceffc4b575dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0287000a9f870363bf864354d7cceffc4b575dec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d660b7f8795fc3dc553fd79796f5ecdefd009ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d660b7f8795fc3dc553fd79796f5ecdefd009ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d660b7f8795fc3dc553fd79796f5ecdefd009ac"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "f80c207f761df287de503daa91be870e8b40eda2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0287000a9f870363bf864354d7cceffc4b575dec", "patch": "@@ -1,3 +1,12 @@\n+2010-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/44668\n+\t* dwarf2out.c (add_accessibility_attribute): New function.\n+\t(gen_subprogram_die, gen_variable_die, gen_field_die): Use it\n+\tinstead of adding DW_AT_accessibility manually.\n+\t(gen_enumeration_type_die, gen_struct_or_union_type_die,\n+\tgen_typedef_die): Use it.\n+\n 2010-06-29  Douglas B Rupp  <rupp@gnat.com>\n \n \t* vmsdbgout.c (full_name): Just output the file name if not native."}, {"sha": "a72771df2f8cd5e112028910f0dcd720a9190f91", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0287000a9f870363bf864354d7cceffc4b575dec", "patch": "@@ -15771,6 +15771,17 @@ add_AT_location_description (dw_die_ref die, enum dwarf_attribute attr_kind,\n     add_AT_loc_list (die, attr_kind, descr);\n }\n \n+/* Add DW_AT_accessibility attribute to DIE if needed.  */\n+\n+static void\n+add_accessibility_attribute (dw_die_ref die, tree decl)\n+{\n+  if (TREE_PROTECTED (decl))\n+    add_AT_unsigned (die, DW_AT_accessibility, DW_ACCESS_protected);\n+  else if (TREE_PRIVATE (decl))\n+    add_AT_unsigned (die, DW_AT_accessibility, DW_ACCESS_private);\n+}\n+\n /* Attach the specialized form of location attribute used for data members of\n    struct and union types.  In the special case of a FIELD_DECL node which\n    represents a bit-field, the \"offset\" part of this special location\n@@ -18075,7 +18086,10 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n       TREE_ASM_WRITTEN (type) = 1;\n       add_byte_size_attribute (type_die, type);\n       if (TYPE_STUB_DECL (type) != NULL_TREE)\n-\tadd_src_coords_attributes (type_die, TYPE_STUB_DECL (type));\n+\t{\n+\t  add_src_coords_attributes (type_die, TYPE_STUB_DECL (type));\n+\t  add_accessibility_attribute (type_die, TYPE_STUB_DECL (type));\n+\t}\n \n       /* If the first reference to this type was as the return type of an\n \t inline function, then it may not have a parent.  Fix this now.  */\n@@ -18582,10 +18596,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       if (DECL_ARTIFICIAL (decl))\n \tadd_AT_flag (subr_die, DW_AT_artificial, 1);\n \n-      if (TREE_PROTECTED (decl))\n-\tadd_AT_unsigned (subr_die, DW_AT_accessibility, DW_ACCESS_protected);\n-      else if (TREE_PRIVATE (decl))\n-\tadd_AT_unsigned (subr_die, DW_AT_accessibility, DW_ACCESS_private);\n+      add_accessibility_attribute (subr_die, decl);\n     }\n \n   if (declaration)\n@@ -19083,10 +19094,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n       if (DECL_ARTIFICIAL (decl))\n \tadd_AT_flag (var_die, DW_AT_artificial, 1);\n \n-      if (TREE_PROTECTED (decl))\n-\tadd_AT_unsigned (var_die, DW_AT_accessibility, DW_ACCESS_protected);\n-      else if (TREE_PRIVATE (decl))\n-\tadd_AT_unsigned (var_die, DW_AT_accessibility, DW_ACCESS_private);\n+      add_accessibility_attribute (var_die, decl);\n     }\n \n   if (declaration)\n@@ -19315,10 +19323,7 @@ gen_field_die (tree decl, dw_die_ref context_die)\n   if (DECL_ARTIFICIAL (decl))\n     add_AT_flag (decl_die, DW_AT_artificial, 1);\n \n-  if (TREE_PROTECTED (decl))\n-    add_AT_unsigned (decl_die, DW_AT_accessibility, DW_ACCESS_protected);\n-  else if (TREE_PRIVATE (decl))\n-    add_AT_unsigned (decl_die, DW_AT_accessibility, DW_ACCESS_private);\n+  add_accessibility_attribute (decl_die, decl);\n \n   /* Equate decl number to die, so that we can look up this decl later on.  */\n   equate_decl_number_to_die (decl, decl_die);\n@@ -19592,7 +19597,10 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n       TREE_ASM_WRITTEN (type) = 1;\n       add_byte_size_attribute (type_die, type);\n       if (TYPE_STUB_DECL (type) != NULL_TREE)\n-\tadd_src_coords_attributes (type_die, TYPE_STUB_DECL (type));\n+\t{\n+\t  add_src_coords_attributes (type_die, TYPE_STUB_DECL (type));\n+\t  add_accessibility_attribute (type_die, TYPE_STUB_DECL (type));\n+\t}\n \n       /* If the first reference to this type was as the return type of an\n \t inline function, then it may not have a parent.  Fix this now.  */\n@@ -19705,6 +19713,8 @@ gen_typedef_die (tree decl, dw_die_ref context_die)\n \t   TYPE in argument yield the DW_TAG_typedef we have just\n \t   created.  */\n \tequate_type_number_to_die (type, type_die);\n+\n+      add_accessibility_attribute (type_die, decl);\n     }\n \n   if (DECL_ABSTRACT (decl))"}, {"sha": "fa8f96bbfacfe3421a1a10bfc01507d6b87adc77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0287000a9f870363bf864354d7cceffc4b575dec", "patch": "@@ -1,3 +1,8 @@\n+2010-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/44668\n+\t* g++.dg/debug/dwarf2/accessibility1.C: New test.\n+\n 2010-06-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44587"}, {"sha": "4992f41913fa84fe2af309b6c827505c857baffd", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/accessibility1.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Faccessibility1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0287000a9f870363bf864354d7cceffc4b575dec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Faccessibility1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Faccessibility1.C?ref=0287000a9f870363bf864354d7cceffc4b575dec", "patch": "@@ -0,0 +1,24 @@\n+// PR debug/44668\n+// { dg-do compile }\n+// { dg-options \"-g -dA\" }\n+\n+struct C\n+{\n+private:\n+  typedef int a;\n+  a b;\n+  enum g { g1, g2 } h;\n+  struct D { int i; } i;\n+protected:\n+  typedef int c;\n+  c d;\n+public:\n+  typedef int e;\n+  e f;\n+} c;\n+\n+// 3 private DW_TAG_member dies, 1 private DW_TAG_typedef,\n+// 1 private DW_TAG_enumeration_type and 1 private DW_TAG_structure_type\n+// { dg-final { scan-assembler-times \"3\\[^\\\\r\\\\n\\]* DW_AT_accessibility\" 6 } }\n+// 1 private DW_TAG_member die, 1 private DW_TAG_typedef\n+// { dg-final { scan-assembler-times \"2\\[^\\\\r\\\\n\\]* DW_AT_accessibility\" 2 } }"}]}