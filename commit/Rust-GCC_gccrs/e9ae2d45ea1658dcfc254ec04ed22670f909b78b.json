{"sha": "e9ae2d45ea1658dcfc254ec04ed22670f909b78b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlhZTJkNDVlYTE2NThkY2ZjMjU0ZWMwNGVkMjI2NzBmOTA5Yjc4Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-14T21:15:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-15T15:43:23Z"}, "message": "doc: Document C++ 20 modules\n\nAnd here is the user-facing documentation.\n\n\tgcc/\n\t* doc/cppopts.texi: Document new cpp opt.\n\t* doc/invoke.texi: Add C++20 module option & documentation.", "tree": {"sha": "5bbe164428587b92f822c4d75caa171240be1f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bbe164428587b92f822c4d75caa171240be1f4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9ae2d45ea1658dcfc254ec04ed22670f909b78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ae2d45ea1658dcfc254ec04ed22670f909b78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ae2d45ea1658dcfc254ec04ed22670f909b78b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ae2d45ea1658dcfc254ec04ed22670f909b78b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efde6781bba8d64b9dcff07e7efe71d35aa6f6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4efde6781bba8d64b9dcff07e7efe71d35aa6f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4efde6781bba8d64b9dcff07e7efe71d35aa6f6a"}], "stats": {"total": 439, "additions": 434, "deletions": 5}, "files": [{"sha": "e5ece92487bc6291a84276693693c9b3ca8742d9", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ae2d45ea1658dcfc254ec04ed22670f909b78b/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ae2d45ea1658dcfc254ec04ed22670f909b78b/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=e9ae2d45ea1658dcfc254ec04ed22670f909b78b", "patch": "@@ -139,6 +139,10 @@ this useless.\n \n This feature is used in automatic updating of makefiles.\n \n+@item -Mno-modules\n+@opindex Mno-modules\n+Disable dependency generation for compiled module interfaces.\n+\n @item -MP\n @opindex MP\n This option instructs CPP to add a phony target for each dependency"}, {"sha": "2cebe7ab31958c9eda38fcecbb05dde4a18410d3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 430, "deletions": 5, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ae2d45ea1658dcfc254ec04ed22670f909b78b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ae2d45ea1658dcfc254ec04ed22670f909b78b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e9ae2d45ea1658dcfc254ec04ed22670f909b78b", "patch": "@@ -172,6 +172,7 @@ listing and explanation of the binary and decimal byte size prefixes.\n * Spec Files::          How to pass switches to sub-processes.\n * Environment Variables:: Env vars that affect GCC.\n * Precompiled Headers:: Compiling a header once, and using it many times.\n+* C++ Modules::\t\tExperimental C++20 module system.\n @end menu\n \n @c man begin OPTIONS\n@@ -219,7 +220,13 @@ in the following sections.\n -fno-gnu-keywords @gol\n -fno-implicit-templates @gol\n -fno-implicit-inline-templates @gol\n--fno-implement-inlines  -fms-extensions @gol\n+-fno-implement-inlines  @gol\n+-fmodule-header@r{[}=@var{kind}@r{]} -fmodule-only -fmodules-ts @gol\n+-fmodule-implicit-inline @gol\n+-fno-module-lazy @gol\n+-fmodule-mapper=@var{specification} @gol\n+-fmodule-version-ignore @gol\n+-fms-extensions @gol\n -fnew-inheriting-ctors @gol\n -fnew-ttp-matching @gol\n -fno-nonansi-builtins  -fnothrow-opt  -fno-operator-names @gol\n@@ -233,15 +240,18 @@ in the following sections.\n -fvisibility-inlines-hidden @gol\n -fvisibility-ms-compat @gol\n -fext-numeric-literals @gol\n+-flang-info-include-translate@r{[}=@var{name}@r{]} @gol\n+-flang-info-include-translate-not @gol\n -Wabi-tag  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wno-class-conversion  -Wclass-memaccess @gol\n -Wcomma-subscript  -Wconditionally-supported @gol\n -Wno-conversion-null  -Wctad-maybe-unsupported @gol\n -Wctor-dtor-privacy  -Wno-delete-incomplete @gol\n--Wdelete-non-virtual-dtor  -Wdeprecated-copy  -Wdeprecated-copy-dtor @gol\n+-Wdelete-non-virtual-dtor  -Wdeprecated-copy -Wdeprecated-copy-dtor @gol\n -Wno-deprecated-enum-enum-conversion -Wno-deprecated-enum-float-conversion @gol\n -Weffc++  -Wno-exceptions -Wextra-semi  -Wno-inaccessible-base @gol\n -Wno-inherited-variadic-ctor  -Wno-init-list-lifetime @gol\n+-Winvalid-imported-macros @gol\n -Wno-invalid-offsetof  -Wno-literal-suffix @gol\n -Wno-mismatched-new-delete -Wmismatched-tags @gol\n -Wmultiple-inheritance  -Wnamespaces  -Wnarrowing @gol\n@@ -600,7 +610,7 @@ Objective-C and Objective-C++ Dialects}.\n -fpreprocessed  -ftabstop=@var{width}  -ftrack-macro-expansion  @gol\n -fwide-exec-charset=@var{charset}  -fworking-directory @gol\n -H  -imacros @var{file}  -include @var{file} @gol\n--M  -MD  -MF  -MG  -MM  -MMD  -MP  -MQ  -MT @gol\n+-M  -MD  -MF  -MG  -MM  -MMD  -MP  -MQ  -MT -Mno-modules @gol\n -no-integrated-cpp  -P  -pthread  -remap @gol\n -traditional  -traditional-cpp  -trigraphs @gol\n -U@var{macro}  -undef  @gol\n@@ -1572,7 +1582,7 @@ name suffix).  This option applies to all following input files until\n the next @option{-x} option.  Possible values for @var{language} are:\n @smallexample\n c  c-header  cpp-output\n-c++  c++-header  c++-cpp-output\n+c++  c++-header  c++-system-header c++-user-header c++-cpp-output\n objective-c  objective-c-header  objective-c-cpp-output\n objective-c++ objective-c++-header objective-c++-cpp-output\n assembler  assembler-with-cpp\n@@ -3057,6 +3067,52 @@ To save space, do not emit out-of-line copies of inline functions\n controlled by @code{#pragma implementation}.  This causes linker\n errors if these functions are not inlined everywhere they are called.\n \n+@item -fmodules-ts\n+@itemx -fno-modules-ts\n+@opindex fmodules-ts\n+@opindex fno-modules-ts\n+Enable support for C++20 modules (@xref{C++ Modules}).  The\n+@option{-fno-modules-ts} is usually not needed, as that is the\n+default.  Even though this is a C++20 feature, it is not currently\n+implicitly enabled by selecting that standard version.\n+\n+@item -fmodule-header\n+@itemx -fmodule-header=user\n+@itemx -fmodule-header=system\n+@opindex fmodule-header\n+Compile a header file to create an importable header unit.\n+\n+@item -fmodule-implicit-inline\n+@opindex fmodule-implicit-inline\n+Member functions defined in their class definitions are not implicitly\n+inline for modular code.  This is different to traditional C++\n+behavior, for good reasons.  However, it may result in a difficulty\n+during code porting.  This option makes such function definitions\n+implicitly inline.  It does however generate an ABI incompatibility,\n+so you must use it everywhere or nowhere.  (Such definitions outside\n+of a named module remain implicitly inline, regardless.)\n+\n+@item -fno-module-lazy\n+@opindex fno-module-lazy\n+@opindex fmodule-lazy\n+Disable lazy module importing and module mapper creation.\n+\n+@item -fmodule-mapper=@r{[}@var{hostname}@r{]}:@var{port}@r{[}?@var{ident}@r{]}\n+@itemx -fmodule-mapper=|@var{program}@r{[}?@var{ident}@r{]} @var{args...}\n+@itemx -fmodule-mapper==@var{socket}@r{[}?@var{ident}@r{]}\n+@itemx -fmodule-mapper=<>@r{[}@var{inout}@r{]}@r{[}?@var{ident}@r{]}\n+@itemx -fmodule-mapper=<@var{in}>@var{out}@r{[}?@var{ident}@r{]}\n+@itemx -fmodule-mapper=@var{file}@r{[}?@var{ident}@r{]}\n+@vindex CXX_MODULE_MAPPER @r{environment variable}\n+@opindex fmodule-mapper\n+An oracle to query for module name to filename mappings.  If\n+unspecified the @env{CXX_MODULE_MAPPER} environment variable is used,\n+and if that is unset, an in-process default is provided.\n+\n+@item -fmodule-only\n+@opindex fmodule-only\n+Only emit the Compiled Module Interface, inhibiting any object file.\n+\n @item -fms-extensions\n @opindex fms-extensions\n Disable Wpedantic warnings about constructs used in MFC, such as implicit\n@@ -3304,6 +3360,14 @@ for ISO C++11 onwards (@option{-std=c++11}, ...).\n Do not search for header files in the standard directories specific to\n C++, but do still search the other standard directories.  (This option\n is used when building the C++ library.)\n+\n+@item -flang-info-include-translate\n+@itemx -flang-info-include-translate-not\n+@itemx -flang-info-include-translate=@var{header}\n+@opindex flang-info-include-translate\n+@opindex flang-info-include-translate-not\n+Diagnose include translation events.\n+\n @end table\n \n In addition, these warning options have meanings only for C++ programs:\n@@ -3461,6 +3525,14 @@ the variable declaration statement.\n \n @end itemize\n \n+@item -Winvalid-imported-macros\n+@opindex Winvalid-imported-macros\n+@opindex Wno-invalid-imported-macros\n+Verify all imported macro definitions are valid at the end of\n+compilation.  This is not enabled by default, as it requires\n+additional processing to determine.  It may be useful when preparing\n+sets of header-units to ensure consistent macros.\n+\n @item -Wno-literal-suffix @r{(C++ and Objective-C++ only)}\n @opindex Wliteral-suffix\n @opindex Wno-literal-suffix\n@@ -16966,6 +17038,11 @@ By default, the dump will contain messages about successful\n optimizations (equivalent to @option{-optimized}) together with\n low-level details about the analysis.\n \n+@item -fdump-lang\n+@opindex fdump-lang\n+Dump language-specific information.  The file name is made by appending\n+@file{.lang} to the source file name.\n+\n @item -fdump-lang-all\n @itemx -fdump-lang-@var{switch}\n @itemx -fdump-lang-@var{switch}-@var{options}\n@@ -16986,6 +17063,14 @@ Enable all language-specific dumps.\n Dump class hierarchy information.  Virtual table information is emitted\n unless '@option{slim}' is specified.  This option is applicable to C++ only.\n \n+@item module\n+Dump module information.  Options @option{lineno} (locations),\n+@option{graph} (reachability), @option{blocks} (clusters),\n+@option{uid} (serialization), @option{alias} (mergeable),\n+@option{asmname} (Elrond), @option{eh} (mapper) & @option{vops}\n+(macros) may provide additional information.  This option is\n+applicable to C++ only.\n+\n @item raw\n Dump the raw internal tree data.  This option is applicable to C++ only.\n \n@@ -32188,7 +32273,7 @@ usage:\n \n @item @code{sanitize}\n The @code{sanitize} spec function takes no arguments.  It returns non-NULL if\n-any address, thread or undefined behaviour sanitizers are active.\n+any address, thread or undefined behavior sanitizers are active.\n \n @smallexample\n %@{%:sanitize(address):-funwind-tables@}\n@@ -32748,3 +32833,343 @@ precompiled header, the actual behavior is a mixture of the\n behavior for the options.  For instance, if you use @option{-g} to\n generate the precompiled header but not when using it, you may or may\n not get debugging information for routines in the precompiled header.\n+\n+@node C++ Modules\n+@section C++ Modules\n+@cindex speed of compilation\n+\n+Modules are a C++ 20 language feature.  As the name suggests, it\n+provides a modular compilation system, intending to provide both\n+faster builds and better library isolation.  The ``Merging Modules''\n+paper @uref{https://wg21.link/p1103}, provides the easiest to read set\n+of changes to the standard, although it does not capture later\n+changes.  That specification is now part of C++20,\n+@uref{git@@github.com:cplusplus/draft.git}, it is considered complete\n+(there may be defect reports to come).\n+\n+@emph{G++'s modules support is not complete.}  Other than bugs, the\n+known missing pieces are:\n+\n+@table @emph\n+\n+@item Private Module Fragment\n+The Private Module Fragment is recognized, but an error is emitted.\n+\n+@item Partition definition visibility rules\n+Entities may be defined in implementation partitions, and those\n+definitions are not available outside of the module.  This is not\n+implemented, and the definitions are available to extra-module use.\n+\n+@item Textual merging of reachable GM entities\n+Entities may be multiply defined across different header-units.\n+These must be de-duplicated, and this is implemented across imports,\n+or when an import redefines a textually-defined entity.  However the\n+reverse is not implemented---textually redefining an entity that has\n+been defined in an imported header-unit.  A redefinition error is\n+emitted.\n+\n+@item Translation-Unit local referencing rules\n+Papers p1815 (@uref{https://wg21.link/p1815}) and p2003\n+(@uref{https://wg21.link/p2003} add limitations on which entities an\n+exported region may reference (for instance, the entities an exported\n+template definition may reference).  These are not fully implemented.\n+\n+@item Language-linkage module attachment\n+Declarations with explicit language linkage (@code{extern \"C\"} or\n+@code{extern \"C++\"}) are attached to the global module, even when in\n+the purview of a named module.  This is not implemented.  Such\n+declarations will be attached to the module, if any, in which they are\n+declared.\n+\n+@end table\n+\n+Modular compilation is @emph{not} enabled with just the\n+@option{-std=c++20} option.  You must explicitly enable it with the\n+@option{-fmodules-ts} option.  It is independent of the language\n+version selected, although in pre-C++20 versions, it is of course an\n+extension.\n+\n+No new source file suffixes are required or supported.  If you wish to\n+use a non-standard suffix (@xref{Overall Options}), you also need\n+to provide a @option{-x c++} option too.@footnote{Some users like to\n+distinguish module interface files with a new suffix, such as naming\n+the source @code{module.cppm}, which involves\n+teaching all tools about the new suffix.  A different scheme, such as\n+naming @code{module-m.cpp} would be less invasive.}\n+\n+Compiling a module interface unit produces an additional output (to\n+the assembly or object file), called a Compiled Module Interface\n+(CMI).  This encodes the exported declarations of the module.\n+Importing a module reads in the CMI.  The import graph is a Directed\n+Acyclic Graph (DAG).  You must build imports before the importer.\n+\n+Header files may themselves be compiled to header units, which are a\n+transitional ability aiming at faster compilation.  The\n+@option{-fmodule-header} option is used to enable this, and implies\n+the @option{-fmodules-ts} option.  These CMIs are named by the fully\n+resolved underlying header file, and thus may be a complete pathname\n+containing subdirectories.  If the header file is found at an absolute\n+pathname, the CMI location is still relative to a CMI root directory.\n+\n+As header files often have no suffix, you commonly have to specify a\n+@option{-x} option to tell the compiler the source is a header file.\n+You may use @option{-x c++-header}, @option{-x c++-user-header} or\n+@option{-x c++-system-header}.  When used in conjunction with\n+@option{-fmodules-ts}, these all imply an appropriate\n+@option{-fmodule-header} option.  The latter two variants use the\n+user or system include path to search for the file specified.  This\n+allows you to, for instance, compile standard library header files as\n+header units, without needing to know exactly where they are\n+installed.  Specifying the language as one of these variants also\n+inhibits output of the object file, as header files have no associated\n+object file.\n+\n+The @option{-fmodule-only} option disables generation of the\n+associated object file for compiling a module interface.  Only the CMI\n+is generated.  This option is implied when using the\n+@option{-fmodule-header} option.\n+\n+The @option{-flang-info-include-translate} and\n+@option{-flang-info-include-translate-not} options notes whether\n+include translation occurs or not.  With no argument, the first will\n+note all include translation.  The second will note all\n+non-translations of include files not known to intentionally be\n+textual.  With an argument, queries about include translation of a\n+header files with that particular trailing pathname are noted.  You\n+may repeat this form to cover several different header files.  This\n+option may be helpful in determining whether include translation is\n+happening---if it is working correctly, it'll behave as if it wasn't\n+there at all.\n+\n+The @option{-Winvalid-imported-macros} option causes all imported macros\n+to be resolved at the end of compilation.  Without this, imported\n+macros are only resolved when expanded or (re)defined.  This option\n+detects conflicting import definitions for all macros.\n+\n+@xref{C++ Module Mapper} for details of the @option{-fmodule-mapper}\n+family of options.\n+\n+@menu\n+* C++ Module Mapper::       Module Mapper\n+* C++ Module Preprocessing::  Module Preprocessing\n+* C++ Compiled Module Interface:: Compiled Module Interface\n+@end menu\n+\n+@node C++ Module Mapper\n+@subsection Module Mapper\n+@cindex C++ Module Mapper\n+\n+A module mapper provides a server or file that the compiler queries to\n+determine the mapping between module names and CMI files.  It is also\n+used to build CMIs on demand.  @emph{Mapper functionality is in its\n+infancy and is intended for experimentation with build system\n+interactions.}\n+\n+You can specify a mapper with the @option{-fmodule-mapper=@var{val}}\n+option or @env{CXX_MODULE_MAPPER} environment variable.  The value may\n+have one of the following forms:\n+\n+@table @gcctabopt\n+\n+@item @r{[}@var{hostname}@r{]}:@var{port}@r{[}?@var{ident}@r{]}\n+An optional hostname and a numeric port number to connect to.  If the\n+hostname is omitted, the loopback address is used.  If the hostname\n+corresponds to multiple IPV6 addresses, these are tried in turn, until\n+one is successful.  If your host lacks IPv6, this form is\n+non-functional.  If you must use IPv4 use\n+@option{-fmodule-mapper='|ncat @var{ipv4host} @var{port}'}.\n+\n+@item =@var{socket}@r{[}?@var{ident}@r{]}\n+A local domain socket.  If your host lacks local domain sockets, this\n+form is non-functional.\n+\n+@item |@var{program}@r{[}?@var{ident}@r{]} @r{[}@var{args...}@r{]}\n+A program to spawn, and communicate with on its stdin/stdout streams.\n+Your @var{PATH} environment variable is searched for the program.\n+Arguments are separated by space characters, (it is not possible for\n+one of the arguments delivered to the program to contain a space).  An\n+exception is if @var{program} begins with @@.  In that case\n+@var{program} (sans @@) is looked for in the compiler's internal\n+binary directory.  Thus the sample mapper-server can be specified\n+with @code{@@g++-mapper-server}.\n+\n+@item <>@r{[}?@var{ident}@r{]}\n+@item <>@var{inout}@r{[}?@var{ident}@r{]}\n+@item <@var{in}>@var{out}@r{[}?@var{ident}@r{]}\n+Named pipes or file descriptors to communicate over.  The first form,\n+@option{<>}, communicates over stdin and stdout.  The other forms\n+allow you to specify a file descriptor or name a pipe.  A numeric value\n+is interpreted as a file descriptor, otherwise named pipe is opened.\n+The second form specifies a bidirectional pipe and the last form\n+allows specifying two independent pipes.  Using file descriptors\n+directly in this manner is fragile in general, as it can require the\n+cooperation of intermediate processes.  In particular using stdin &\n+stdout is fraught with danger as other compiler options might also\n+cause the compiler to read stdin or write stdout, and it can have\n+unfortunate interactions with signal delivery from the terminal.\n+\n+@item @var{file}@r{[}?@var{ident}@r{]}\n+A mapping file consisting of space-separated module-name, filename\n+pairs, one per line.  Only the mappings for the direct imports and any\n+module export name need be provided.  If other mappings are provided,\n+they override those stored in any imported CMI files.  A repository\n+root may be specified in the mapping file by using @samp{$root} as the\n+module name in the first active line.\n+\n+@end table\n+\n+As shown, an optional @var{ident} may suffix the first word of the\n+option, indicated by a @samp{?} prefix.  The value is used in the\n+initial handshake with the module server, or to specify a prefix on\n+mapping file lines.  In the server case, the main source file name is\n+used if no @var{ident} is specified.  In the file case, all non-blank\n+lines are significant, unless a value is specified, in which case only\n+lines beginning with @var{ident} are significant.  The @var{ident}\n+must be separated by whitespace from the module name.  Be aware that\n+@samp{<}, @samp{>}, @samp{?}, and @samp{|} characters are often\n+significant to the shell, and therefore may need quoting.\n+\n+The mapper is connected to or loaded lazily, when the first module\n+mapping is required.  The networking protocols are only supported on\n+hosts that provide networking.  If no mapper is specified a default is\n+provided.\n+\n+A project-specific mapper is expected to be provided by the build\n+system that invokes the compiler.  It is not expected that a\n+general-purpose server is provided for all compilations.  As such, the\n+server will know the build configuration, the compiler it invoked, and\n+the environment (such as working directory) in which that is\n+operating.  As it may parallelize builds, several compilations may\n+connect to the same socket.\n+\n+The default mapper generates CMI files in a @samp{gcm.cache}\n+directory.  CMI files have a @samp{.gcm} suffix.  The module unit name\n+is used directly to provide the basename.  Header units construct a\n+relative path using the underlying header file name.  If the path is\n+already relative, a @samp{,} directory is prepended.  Internal\n+@samp{..} components are translated to @samp{,,}.  No attempt is made\n+to canonicalize these filenames beyond that done by the preprocessor's\n+include search algorithm, as in general it is ambiguous when symbolic\n+links are present.\n+\n+The mapper protocol was published as ``A Module Mapper''\n+@uref{https://wg21.link/p1184}.  The implementation is provided by\n+@command{libcody}, @uref{https://www.github.com/urnathan/libcody},\n+which specifies the canonical protocol definition.  A proof of concept\n+server implementation embedded in @command{make} was described in\n+''Make Me A Module'', @uref{https://wg21.link/p1602}.\n+\n+@node C++ Module Preprocessing\n+@subsection Module Preprocessing\n+@cindex C++ Module Preprocessing\n+\n+Modules affect preprocessing because of header units and include\n+translation.  Some uses of the preprocessor as a separate step either\n+do not produce a correct output, or require CMIs to be available.\n+\n+Header units import macros.  These macros can affect later conditional\n+inclusion, which therefore can cascade to differing import sets.  When\n+preprocessing, it is necessary to load the CMI.  If a header unit is\n+unavailable, the preprocessor issues a warning and continue (when\n+not just preprocessing, an error is emitted).  Detecting such imports\n+requires preprocessor tokenization of the input stream to phase 4\n+(macro expansion).\n+\n+Include translation converts @code{#include}, @code{#include_next} and\n+@code{#import} directives to internal @code{import} declarations.\n+Whether a particular directive is translated is controlled by the\n+module mapper.  Header unit names are canonicalized during\n+preprocessing.\n+\n+Dependency information can be emitted for macro import, extending the\n+functionality of @option{-MD} and @option{-MMD} options.  Detection of\n+import declarations also requires phase 4 preprocessing, and thus\n+requires full preprocessing (or compilation).\n+\n+The @option{-M}, @option{-MM} and @option{-E -fdirectives-only} options halt\n+preprocessing before phase 4.\n+\n+The @option{-save-temps} option uses @option{-fdirectives-only} for\n+preprocessing, and preserve the macro definitions in the preprocessed\n+output.  Usually you also want to use this option when explicitly\n+preprocessing a header-unit, or consuming such preprocessed output:\n+\n+@smallexample\n+g++ -fmodules-ts -E -fdirectives-only my-header.hh -o my-header.ii\n+g++ -x c++-header -fmodules-ts -fpreprocessed -fdirectives-only my-header.ii\n+@end smallexample\n+\n+@node C++ Compiled Module Interface\n+@subsection Compiled Module Interface\n+@cindex C++ Compiled Module Interface\n+\n+CMIs are an additional artifact when compiling named module\n+interfaces, partitions or header units.  These are read when\n+importing.  CMI contents are implementation-specific, and in GCC's\n+case tied to the compiler version.  Consider them a rebuildable cache\n+artifact, not a distributable object.\n+\n+When creating an output CMI, any missing directory components are\n+created in a manner that is safe for concurrent builds creating\n+multiple, different, CMIs within a common subdirectory tree.\n+\n+CMI contents are written to a temporary file, which is then atomically\n+renamed.  Observers either see old contents (if there is an\n+existing file), or complete new contents.  They do not observe the\n+CMI during its creation.  This is unlike object file writing, which\n+may be observed by an external process.\n+\n+CMIs are read in lazily, if the host OS provides @code{mmap}\n+functionality.  Generally blocks are read when name lookup or template\n+instantiation occurs.  To inhibit this, the @option{-fno-module-lazy}\n+option may be used.\n+\n+The @option{--param lazy-modules=@var{n}} parameter controls the limit\n+on the number of concurrently open module files during lazy loading.\n+Should more modules be imported, an LRU algorithm is used to determine\n+which files to close---until that file is needed again.  This limit\n+may be exceeded with deep module dependency hierarchies.  With large\n+code bases there may be more imports than the process limit of file\n+descriptors.  By default, the limit is a few less than the per-process\n+file descriptor hard limit, if that is determinable.@footnote{Where\n+applicable the soft limit is incremented as needed towards the hard limit.}\n+\n+GCC CMIs use ELF32 as an architecture-neutral encapsulation mechanism.\n+You may use @command{readelf} to inspect them, although section\n+contents are largely undecipherable.  There is a section named\n+@code{.gnu.c++.README}, which contains human-readable text.  Other\n+than the first line, each line consists of @code{@var{tag}: @code{value}}\n+tuples.\n+\n+@smallexample\n+> @command{readelf -p.gnu.c++.README gcm.cache/foo.gcm}\n+\n+String dump of section '.gnu.c++.README':\n+  [     0]  GNU C++ primary module interface\n+  [    21]  compiler: 11.0.0 20201116 (experimental) [c++-modules revision 20201116-0454]\n+  [    6f]  version: 2020/11/16-04:54\n+  [    89]  module: foo\n+  [    95]  source: c_b.ii\n+  [    a4]  dialect: C++20/coroutines\n+  [    be]  cwd: /data/users/nathans/modules/obj/x86_64/gcc\n+  [    ee]  repository: gcm.cache\n+  [   104]  buildtime: 2020/11/16 15:03:21 UTC\n+  [   127]  localtime: 2020/11/16 07:03:21 PST\n+  [   14a]  export: foo:part1 foo-part1.gcm\n+@end smallexample\n+\n+Amongst other things, this lists the source that was built, C++\n+dialect used and imports of the module.@footnote{The precise contents\n+of this output may change.} The timestamp is the same value as that\n+provided by the @code{__DATE__} & @code{__TIME__} macros, and may be\n+explicitly specified with the environment variable\n+@code{SOURCE_DATE_EPOCH}.  @xref{Environment Variables} for further\n+details.\n+\n+A set of related CMIs may be copied, provided the relative pathnames\n+are preserved.\n+\n+The @code{.gnu.c++.README} contents do not affect CMI integrity, and\n+it may be removed or altered.  The section numbering of the sections\n+whose names do not begin with @code{.gnu.c++.}, or are not the string\n+section is significant and must not be altered."}]}