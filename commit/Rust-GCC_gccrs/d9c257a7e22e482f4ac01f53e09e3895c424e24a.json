{"sha": "d9c257a7e22e482f4ac01f53e09e3895c424e24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljMjU3YTdlMjJlNDgyZjRhYzAxZjUzZTA5ZTM4OTVjNDI0ZTI0YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-01-27T23:30:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-01-27T23:30:28Z"}, "message": "re PR libstdc++/51795 (linear_congruential_engine doesn't work correctly)\n\n2012-01-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/51795\n\t* include/bits/random.h (linear_congruential_generator): Add\n\tstatic_assert preventing instantiation for values of 'a' and 'm'\n\tcurrently handled incorrectly but _Mod::__calc.\n\t* include/bits/random.tcc (seed_seq::generate): Avoid unsafe\n\tuses of _Mod::__calc.\n\nFrom-SVN: r183655", "tree": {"sha": "6f3890c64ec695d5be8bc9ee98fc7364d0008092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3890c64ec695d5be8bc9ee98fc7364d0008092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c257a7e22e482f4ac01f53e09e3895c424e24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c257a7e22e482f4ac01f53e09e3895c424e24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c257a7e22e482f4ac01f53e09e3895c424e24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c257a7e22e482f4ac01f53e09e3895c424e24a/comments", "author": null, "committer": null, "parents": [{"sha": "af5c13eb0498074d18c6bc4287e39e859def927e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5c13eb0498074d18c6bc4287e39e859def927e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5c13eb0498074d18c6bc4287e39e859def927e"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "82dbf42f96ad0161568fde4234b69abc4d5be3d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c257a7e22e482f4ac01f53e09e3895c424e24a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c257a7e22e482f4ac01f53e09e3895c424e24a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9c257a7e22e482f4ac01f53e09e3895c424e24a", "patch": "@@ -1,3 +1,12 @@\n+2012-01-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/51795\n+\t* include/bits/random.h (linear_congruential_generator): Add\n+\tstatic_assert preventing instantiation for values of 'a' and 'm'\n+\tcurrently handled incorrectly but _Mod::__calc.\n+\t* include/bits/random.tcc (seed_seq::generate): Avoid unsafe\n+\tuses of _Mod::__calc.\n+\n 2012-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/51798"}, {"sha": "8f6bf4f7bd5e2165d5ef88913d6e1d79f82f219b", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c257a7e22e482f4ac01f53e09e3895c424e24a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c257a7e22e482f4ac01f53e09e3895c424e24a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=d9c257a7e22e482f4ac01f53e09e3895c424e24a", "patch": "@@ -1,6 +1,6 @@\n // random number generation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -174,6 +174,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(__m == 0u || (__a < __m && __c < __m),\n \t\t    \"template argument substituting __m out of bounds\");\n \n+      // XXX FIXME:\n+      // _Mod::__calc should handle correctly __m % __a >= __m / __a too.\n+      static_assert(__m % __a < __m / __a,\n+\t\t    \"sorry, not implemented yet: try a smaller 'a' constant\");\n+\n     public:\n       /** The type of the generated random value. */\n       typedef _UIntType result_type;"}, {"sha": "d55b51838b8aa7a391c7243577a0950680f54269", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c257a7e22e482f4ac01f53e09e3895c424e24a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c257a7e22e482f4ac01f53e09e3895c424e24a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=d9c257a7e22e482f4ac01f53e09e3895c424e24a", "patch": "@@ -1,6 +1,6 @@\n // random number generation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,6 +49,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n     //\n     // Preconditions:  a > 0, m > 0.\n     //\n+    // XXX FIXME: as-is, only works correctly for __m % __a < __m / __a. \n+    //\n     template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>\n       struct _Mod\n       {\n@@ -2771,8 +2773,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t ^ __begin[(__k + __p) % __n]\n \t\t\t ^ __begin[(__k - 1) % __n]);\n \t  _Type __r1 = __arg ^ (__arg >> 27);\n-\t  __r1 = __detail::__mod<_Type, __detail::_Shift<_Type, 32>::__value,\n-\t                         1664525u, 0u>(__r1);\n+\t  __r1 = __detail::__mod<_Type,\n+\t\t    __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);\n \t  _Type __r2 = __r1;\n \t  if (__k == 0)\n \t    __r2 += __s;\n@@ -2793,8 +2795,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t + __begin[(__k + __p) % __n]\n \t\t\t + __begin[(__k - 1) % __n]);\n \t  _Type __r3 = __arg ^ (__arg >> 27);\n-\t  __r3 = __detail::__mod<_Type, __detail::_Shift<_Type, 32>::__value,\n-\t                         1566083941u, 0u>(__r3);\n+\t  __r3 = __detail::__mod<_Type,\n+\t\t   __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);\n \t  _Type __r4 = __r3 - __k % __n;\n \t  __r4 = __detail::__mod<_Type,\n \t           __detail::_Shift<_Type, 32>::__value>(__r4);"}]}