{"sha": "29c8f8c27b170130bc8c621703b12aad646803bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljOGY4YzI3YjE3MDEzMGJjOGM2MjE3MDNiMTJhYWQ2NDY4MDNiZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-12-21T05:58:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-12-21T05:58:02Z"}, "message": "re PR tree-optimization/25382 (VRP does not get a range from BIT_AND_EXPR if the second operand is constant)\n\ngcc/\n\tPR tree-optimization/25382.\n\t* tree-vrp.c (extract_range_from_binary_expr): Extract a range\n\tfrom BIT_AND_EXPR.\n\ngcc/testsuite/\n\tPR tree-optimization/25382.\n\t* gcc.dg/tree-ssa/pr25382.c: New.\n\nFrom-SVN: r108898", "tree": {"sha": "9564794f08f600e648f0a3400982f16c350506aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9564794f08f600e648f0a3400982f16c350506aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c8f8c27b170130bc8c621703b12aad646803bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c8f8c27b170130bc8c621703b12aad646803bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c8f8c27b170130bc8c621703b12aad646803bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c8f8c27b170130bc8c621703b12aad646803bd/comments", "author": null, "committer": null, "parents": [{"sha": "486aa8045ca57e1b66a8435d96d55c78c7e35c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486aa8045ca57e1b66a8435d96d55c78c7e35c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486aa8045ca57e1b66a8435d96d55c78c7e35c90"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "7c34089a752fc771b7be947a3fd0fef3cd5afdbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29c8f8c27b170130bc8c621703b12aad646803bd", "patch": "@@ -1,3 +1,9 @@\n+2005-12-21  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR tree-optimization/25382.\n+\t* tree-vrp.c (extract_range_from_binary_expr): Extract a range\n+\tfrom BIT_AND_EXPR.\n+\n 2005-12-21  Janis Johnson  <janis187@us.ibm.com>\n \t    Ben Elliston  <bje@au.ibm.com>\n "}, {"sha": "090eaf863f511a3ba6eb2f7ccab82edb2355194d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29c8f8c27b170130bc8c621703b12aad646803bd", "patch": "@@ -1,3 +1,8 @@\n+2005-12-21  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR tree-optimization/25382.\n+\t* gcc.dg/tree-ssa/pr25382.c: New.\n+\n 2005-12-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/24306"}, {"sha": "72277f99f6922ec6d074aacea6594a510d789267", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr25382.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr25382.c?ref=29c8f8c27b170130bc8c621703b12aad646803bd", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/25382\n+   VRP used to ignore BIT_AND_EXPRs for the purpose of distilling ranges.\n+   Check that VRP now gets ranges from BIT_AND_EXPRs.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp\" } */\n+\n+int\n+foo (int a)\n+{\n+  int b = a & 0xff;\n+  if (b > 300)\n+    return 2;\n+  else\n+    return 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Folding predicate b_.* > 300 to 0\" 1 \"vrp\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp\" } } */"}, {"sha": "a9609fa61573cd4cd74564156c4cacf611269915", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c8f8c27b170130bc8c621703b12aad646803bd/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=29c8f8c27b170130bc8c621703b12aad646803bd", "patch": "@@ -1184,6 +1184,7 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n       && code != ROUND_DIV_EXPR\n       && code != MIN_EXPR\n       && code != MAX_EXPR\n+      && code != BIT_AND_EXPR\n       && code != TRUTH_ANDIF_EXPR\n       && code != TRUTH_ORIF_EXPR\n       && code != TRUTH_AND_EXPR\n@@ -1220,13 +1221,16 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n     }\n \n   /* Refuse to operate on VARYING ranges, ranges of different kinds\n-     and symbolic ranges.  TODO, we may be able to derive anti-ranges\n-     in some cases.  */\n-  if (vr0.type == VR_VARYING\n-      || vr1.type == VR_VARYING\n-      || vr0.type != vr1.type\n-      || symbolic_range_p (&vr0)\n-      || symbolic_range_p (&vr1))\n+     and symbolic ranges.  As an exception, we allow BIT_AND_EXPR\n+     because we may be able to derive a useful range even if one of\n+     the operands is VR_VARYING or symbolic range.  TODO, we may be\n+     able to derive anti-ranges in some cases.  */\n+  if (code != BIT_AND_EXPR\n+      && (vr0.type == VR_VARYING\n+\t  || vr1.type == VR_VARYING\n+\t  || vr0.type != vr1.type\n+\t  || symbolic_range_p (&vr0)\n+\t  || symbolic_range_p (&vr1)))\n     {\n       set_value_range_to_varying (vr);\n       return;\n@@ -1406,6 +1410,31 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n       min = vrp_int_const_binop (code, vr0.min, vr1.max);\n       max = vrp_int_const_binop (code, vr0.max, vr1.min);\n     }\n+  else if (code == BIT_AND_EXPR)\n+    {\n+      if (vr0.type == VR_RANGE\n+\t  && vr0.min == vr0.max\n+\t  && tree_expr_nonnegative_p (vr0.max)\n+\t  && TREE_CODE (vr0.max) == INTEGER_CST)\n+\t{\n+\t  min = fold_convert (TREE_TYPE (expr), integer_zero_node);\n+\t  max = vr0.max;\n+\t}\n+      else if (vr1.type == VR_RANGE\n+\t  && vr1.min == vr1.max\n+\t  && tree_expr_nonnegative_p (vr1.max)\n+\t  && TREE_CODE (vr1.max) == INTEGER_CST)\n+\t{\n+\t  vr0.type = VR_RANGE;\n+\t  min = fold_convert (TREE_TYPE (expr), integer_zero_node);\n+\t  max = vr1.max;\n+\t}\n+      else\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+    }\n   else\n     gcc_unreachable ();\n "}]}