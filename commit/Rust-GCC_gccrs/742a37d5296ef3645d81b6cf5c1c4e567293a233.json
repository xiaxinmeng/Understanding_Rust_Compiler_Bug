{"sha": "742a37d5296ef3645d81b6cf5c1c4e567293a233", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyYTM3ZDUyOTZlZjM2NDVkODFiNmNmNWMxYzRlNTY3MjkzYTIzMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-12-05T23:48:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-12-05T23:48:19Z"}, "message": "langhooks.h (struct lang_hooks_for_tree_inlining): Add start_inlining, end_inlining.\n\n        * langhooks.h (struct lang_hooks_for_tree_inlining): Add\n        start_inlining, end_inlining.\n        * tree-inline.c (expand_call_inline): Call them.\n        * langhooks-def.h (LANG_HOOKS_TREE_INLINING_START_INLINING): Define.\n        (LANG_HOOKS_TREE_INLINING_END_INLINING): Define.\n        (LANG_HOOKS_TREE_INLINING_INITIALIZER): Add them.\n        * langhooks.c (lhd_tree_inlining_start_inlining): New fn.\n        (lhd_tree_inlining_end_inlining): New fn.\n\n        * cp-lang.c (LANG_HOOKS_TREE_INLINING_START_INLINING): Define.\n        (LANG_HOOKS_TREE_INLINING_END_INLINING): Define.\n        * tree.c (cp_start_inlining, cp_end_inlining): New fns.\n        * pt.c (push_tinst_level): No longer static.\n        * cp-tree.h: Declare them.\n\n        * init.c (resolve_offset_ref): Don't check access for the base\n        conversion to access a FIELD_DECL.\n\n        * cp-tree.h (TYPE_REFFN_P): New macro.\n        * decl.c (bad_specifiers): Check it, too.\n\n        * rtti.c (create_pseudo_type_info): Set CLASSTYPE_INTERFACE_ONLY\n        on the __*_type_info type if we haven't seen a definition.\n\nFrom-SVN: r47703", "tree": {"sha": "d7dc3135dd465d3142b9f9b46de3296e9776e05b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7dc3135dd465d3142b9f9b46de3296e9776e05b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742a37d5296ef3645d81b6cf5c1c4e567293a233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742a37d5296ef3645d81b6cf5c1c4e567293a233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742a37d5296ef3645d81b6cf5c1c4e567293a233", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742a37d5296ef3645d81b6cf5c1c4e567293a233/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4aae2617ab9bd32142b04b17611189353fe280b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4aae2617ab9bd32142b04b17611189353fe280b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4aae2617ab9bd32142b04b17611189353fe280b"}], "stats": {"total": 168, "additions": 162, "deletions": 6}, "files": [{"sha": "d5adcfad67b15afd68b0898e5f4857eeb8cd49eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -1,3 +1,14 @@\n+2001-12-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* langhooks.h (struct lang_hooks_for_tree_inlining): Add\n+\tstart_inlining, end_inlining.\n+\t* tree-inline.c (expand_call_inline): Call them.\n+\t* langhooks-def.h (LANG_HOOKS_TREE_INLINING_START_INLINING): Define.\n+\t(LANG_HOOKS_TREE_INLINING_END_INLINING): Define.\n+\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Add them.\n+\t* langhooks.c (lhd_tree_inlining_start_inlining): New fn.\n+\t(lhd_tree_inlining_end_inlining): New fn.\n+\n 2001-12-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-common.c (shadow_warning): New function, moved from cp/decl.c."}, {"sha": "443f07fe7be2194ddf6e71aebb7233d9a5f9e259", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -1,3 +1,20 @@\n+2001-12-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-lang.c (LANG_HOOKS_TREE_INLINING_START_INLINING): Define.\n+\t(LANG_HOOKS_TREE_INLINING_END_INLINING): Define.\n+\t* tree.c (cp_start_inlining, cp_end_inlining): New fns.\n+\t* pt.c (push_tinst_level): No longer static.\n+\t* cp-tree.h: Declare them.\n+\n+\t* init.c (resolve_offset_ref): Don't check access for the base\n+\tconversion to access a FIELD_DECL.\n+\n+\t* cp-tree.h (TYPE_REFFN_P): New macro.\n+\t* decl.c (bad_specifiers): Check it, too.\n+\n+\t* rtti.c (create_pseudo_type_info): Set CLASSTYPE_INTERFACE_ONLY\n+\ton the __*_type_info type if we haven't seen a definition.\n+\n 2001-12-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* decl.c: Include c-common.h."}, {"sha": "c40330bc319a39d2ecddd99a4b407262b1ecb9d4", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -83,6 +83,10 @@ static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n   cp_copy_res_decl_for_inlining\n #undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n+#undef LANG_HOOKS_TREE_INLINING_START_INLINING\n+#define LANG_HOOKS_TREE_INLINING_START_INLINING cp_start_inlining\n+#undef LANG_HOOKS_TREE_INLINING_END_INLINING\n+#define LANG_HOOKS_TREE_INLINING_END_INLINING cp_end_inlining\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN cp_dump_tree\n #undef LANG_HOOKS_TREE_DUMP_TYPE_QUALS_FN"}, {"sha": "420e2d9fed04ae1f700a775aeccff7f5d91ddf07", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -2487,6 +2487,9 @@ extern int flag_new_for_scope;\n #define TYPE_PTRFN_P(NODE)\t\t\t\t\\\n   (TREE_CODE (NODE) == POINTER_TYPE\t\t\t\\\n    && TREE_CODE (TREE_TYPE (NODE)) == FUNCTION_TYPE)\n+#define TYPE_REFFN_P(NODE)\t\t\t\t\\\n+  (TREE_CODE (NODE) == REFERENCE_TYPE\t\t\t\\\n+   && TREE_CODE (TREE_TYPE (NODE)) == FUNCTION_TYPE)\n \n /* Nonzero for _TYPE node means that this type is a pointer to member\n    function type.  */\n@@ -3968,6 +3971,7 @@ extern void do_decl_instantiation\t\tPARAMS ((tree, tree, tree));\n extern void do_type_instantiation\t\tPARAMS ((tree, tree, int));\n extern tree instantiate_decl\t\t\tPARAMS ((tree, int));\n extern tree get_bindings\t\t\tPARAMS ((tree, tree, tree));\n+extern int push_tinst_level\t\t\tPARAMS ((tree));\n extern void pop_tinst_level\t\t\tPARAMS ((void));\n extern int more_specialized_class\t\tPARAMS ((tree, tree));\n extern int is_member_template                   PARAMS ((tree));\n@@ -4240,6 +4244,8 @@ extern int cp_is_overload_p PARAMS ((tree));\n extern int cp_auto_var_in_fn_p PARAMS ((tree,tree));\n extern tree cp_copy_res_decl_for_inlining PARAMS ((tree, tree, tree, void*,\n \t\t\t\t\t\t   int*, void*));\n+extern int cp_start_inlining\t\t\tPARAMS ((tree));\n+extern void cp_end_inlining\t\t\tPARAMS ((tree));\n \n /* in typeck.c */\n extern int string_conv_p\t\t\tPARAMS ((tree, tree, int));"}, {"sha": "66aa70d89c692c5170a30e23fd1fc8b5f8acd4c3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -8750,6 +8750,7 @@ bad_specifiers (object, type, virtualp, quals, inlinep, friendp, raises)\n   if (raises\n       && (TREE_CODE (object) == TYPE_DECL\n \t  || (!TYPE_PTRFN_P (TREE_TYPE (object))\n+\t      && !TYPE_REFFN_P (TREE_TYPE (object))\n \t      && !TYPE_PTRMEMFUNC_P (TREE_TYPE (object)))))\n     cp_error_at (\"`%D' declared with an exception specification\", object);\n }"}, {"sha": "098697fa5a7c309206f1d7f40c2559d1b8f9f4f3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -1831,9 +1831,12 @@ resolve_offset_ref (exp)\n       if (TREE_CODE (exp) == OFFSET_REF && TREE_CODE (type) == OFFSET_TYPE)\n \tbase = build_scoped_ref (base, TYPE_OFFSET_BASETYPE (type));\n \n-      basetype = lookup_base (TREE_TYPE (base), basetype, ba_check, NULL);\n+      /* Don't check access on the conversion; we might be after a member\n+\t promoted by an access- or using-declaration, and we have already\n+\t checked access for the member itself.  */\n+      basetype = lookup_base (TREE_TYPE (base), basetype, ba_ignore, NULL);\n       expr = build_base_path (PLUS_EXPR, base, basetype, 1);\n-      \n+\n       if (expr == error_mark_node)\n \treturn error_mark_node;\n "}, {"sha": "8e620bea2c5747911e43f5104ad439703b30dfad", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -98,7 +98,6 @@ static int try_one_overload PARAMS ((tree, tree, tree, tree, tree,\n \t\t\t\t   unification_kind_t, int));\n static int unify PARAMS ((tree, tree, tree, tree, int));\n static void add_pending_template PARAMS ((tree));\n-static int push_tinst_level PARAMS ((tree));\n static void reopen_tinst_level PARAMS ((tree));\n static tree classtype_mangled_name PARAMS ((tree));\n static char *mangle_class_name_for_template PARAMS ((const char *, tree, tree));\n@@ -4460,7 +4459,7 @@ static int last_template_error_tick;\n /* We're starting to instantiate D; record the template instantiation context\n    for diagnostics and to restore it later.  */\n \n-static int\n+int\n push_tinst_level (d)\n      tree d;\n {"}, {"sha": "a1b665e592735ceffc73787fc307f8ba25b8bcae", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -1162,6 +1162,15 @@ create_pseudo_type_info VPARAMS((const char *real_name, int ident, ...))\n   \n   /* Get the vtable decl. */\n   real_type = xref_tag (class_type_node, get_identifier (real_name), 1);\n+  if (! TYPE_SIZE (real_type))\n+    {\n+      /* We never saw a definition of this type, so we need to tell the\n+\t compiler that this is an exported class, as indeed all of the\n+\t __*_type_info classes are.  */\n+      SET_CLASSTYPE_INTERFACE_KNOWN (real_type);\n+      CLASSTYPE_INTERFACE_ONLY (real_type) = 1;\n+    }\n+\n   vtable_decl = get_vtable_decl (real_type, /*complete=*/1);\n   vtable_decl = build_unary_op (ADDR_EXPR, vtable_decl, 0);\n \n@@ -1185,12 +1194,12 @@ create_pseudo_type_info VPARAMS((const char *real_name, int ident, ...))\n   pseudo_type = make_aggr_type (RECORD_TYPE);\n   finish_builtin_type (pseudo_type, pseudo_name, fields, ix, ptr_type_node);\n   TYPE_HAS_CONSTRUCTOR (pseudo_type) = 1;\n-  VA_CLOSE (ap);\n \n   result = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE);\n   TINFO_VTABLE_DECL (result) = vtable_decl;\n   TINFO_PSEUDO_TYPE (result) = pseudo_type;\n   \n+  VA_CLOSE (ap);\n   return result;\n }\n "}, {"sha": "1d0c32475ad3e818a6eef1f58a19f5966d58ca31", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -2230,6 +2230,30 @@ cp_copy_res_decl_for_inlining (result, fn, caller, decl_map_,\n   return var;\n }\n \n+/* Record that we're about to start inlining FN, and return non-zero if\n+   that's OK.  Used for lang_hooks.tree_inlining.start_inlining.  */\n+\n+int\n+cp_start_inlining (fn)\n+     tree fn;\n+{\n+  if (DECL_TEMPLATE_INSTANTIATION (fn))\n+    return push_tinst_level (fn);\n+  else\n+    return 1;\n+}\n+\n+/* Record that we're done inlining FN.  Used for\n+   lang_hooks.tree_inlining.end_inlining.  */\n+\n+void\n+cp_end_inlining (fn)\n+     tree fn ATTRIBUTE_UNUSED;\n+{\n+  if (DECL_TEMPLATE_INSTANTIATION (fn))\n+    pop_tinst_level ();\n+}\n+\n /* Initialize tree.c.  */\n \n void"}, {"sha": "ca55a82797da9cfb676e62384cec099716e76dc2", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -60,6 +60,8 @@ tree lhd_tree_inlining_copy_res_decl_for_inlining PARAMS ((tree, tree,\n \t\t\t\t\t\t\t   tree, void *,\n \t\t\t\t\t\t\t   int *, void *));\n int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n+int lhd_tree_inlining_start_inlining\t\tPARAMS ((tree));\n+void lhd_tree_inlining_end_inlining\t\tPARAMS ((tree));\n \n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n@@ -97,6 +99,10 @@ int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n   lhd_tree_inlining_copy_res_decl_for_inlining\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n   lhd_tree_inlining_anon_aggr_type_p\n+#define LANG_HOOKS_TREE_INLINING_START_INLINING \\\n+  lhd_tree_inlining_start_inlining\n+#define LANG_HOOKS_TREE_INLINING_END_INLINING \\\n+  lhd_tree_inlining_end_inlining\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n   LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n@@ -106,7 +112,9 @@ int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n   LANG_HOOKS_TREE_INLINING_TREE_CHAIN_MATTERS_P, \\\n   LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\\n   LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING, \\\n-  LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n+  LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P, \\\n+  LANG_HOOKS_TREE_INLINING_START_INLINING, \\\n+  LANG_HOOKS_TREE_INLINING_END_INLINING \\\n } \\\n \n /* Tree dump hooks.  */"}, {"sha": "e2e72826bb3caabba5c714ade1a811ceb276a8b5", "filename": "gcc/langhooks.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -240,6 +240,27 @@ lhd_tree_inlining_anon_aggr_type_p (t)\n   return 0;\n }\n \n+/* lang_hooks.tree_inlining.start_inlining and end_inlining perform any\n+   language-specific bookkeeping necessary for processing\n+   FN. start_inlining returns non-zero if inlining should proceed, zero if\n+   not.\n+\n+   For instance, the C++ version keeps track of template instantiations to\n+   avoid infinite recursion.  */\n+\n+int\n+lhd_tree_inlining_start_inlining (fn)\n+     tree fn ATTRIBUTE_UNUSED;\n+{\n+  return 1;\n+}\n+\n+void\n+lhd_tree_inlining_end_inlining (fn)\n+     tree fn ATTRIBUTE_UNUSED;\n+{\n+}\n+\n /* lang_hooks.tree_dump.dump_tree:  Dump language-specific parts of tree \n    nodes.  Returns non-zero if it does not want the usual dumping of the \n    second argument.  */"}, {"sha": "81ae71b4dc0d0794ef4fdc4769bc2c8edc21fb16", "filename": "gcc/langhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -46,6 +46,8 @@ struct lang_hooks_for_tree_inlining\n \t\t\t\t\t\t\t  void *, int *,\n \t\t\t\t\t\t\t  void *));\n   int (*anon_aggr_type_p) PARAMS ((union tree_node *));\n+  int (*start_inlining) PARAMS ((union tree_node *));\n+  void (*end_inlining) PARAMS ((union tree_node *));\n };\n \n /* The following hooks are used by tree-dump.c.  */"}, {"sha": "0bd0cbc0394cee8c78543da0bec8771a1fe8af52", "filename": "gcc/testsuite/g++.dg/eh/spec1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec1.C?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -0,0 +1,5 @@\n+// Check that we allow an exception specification on a reference-to-function.\n+// { dg-do compile }\n+\n+void f () throw ();\n+void (&fp)() throw () = f;"}, {"sha": "7f2ec689290899af6262c8a3e86837452b0fbd1e", "filename": "gcc/testsuite/g++.dg/inherit/access1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess1.C?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -0,0 +1,19 @@\n+// Test that we can access a member from an inaccessible base if it has\n+// been promoted with a using-declaration.\n+\n+// { dg-do compile }\n+\n+struct A\n+{\n+  int i;\n+};\n+\n+struct B: private A\n+{\n+  using A::i;\n+};\n+\n+struct C: public B\n+{\n+  void f () { B::i = 0; }\n+};"}, {"sha": "61b94096783657fe2ab6ed6e890e86428a34bcec", "filename": "gcc/testsuite/g++.dg/template/recurse.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -0,0 +1,22 @@\n+// Test for handling of excessive template recursion.\n+// { dg-options \"-ftemplate-depth-50 -O\" }\n+\n+template <int I> struct F\n+{\n+  int operator()()\n+    {\n+      F<I+1> f;\t\t\t// { dg-error \"\" \"\" }\n+      return f()*I;\n+    }\n+};\n+\n+template <> struct F<52>\n+{\n+  int operator()() { return 0; }\n+};\n+\n+int main ()\n+{\n+  F<1> f;\n+  return f();\t\t// { dg-error \"instantiate\" \"excessive recursion\" }\n+}"}, {"sha": "1444edf10ea03d4a91729f24f5ca74af96cae3d8", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742a37d5296ef3645d81b6cf5c1c4e567293a233/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=742a37d5296ef3645d81b6cf5c1c4e567293a233", "patch": "@@ -812,6 +812,9 @@ expand_call_inline (tp, walk_subtrees, data)\n   if (!inlinable_function_p (fn, id))\n     return NULL_TREE;\n \n+  if (! (*lang_hooks.tree_inlining.start_inlining) (fn))\n+    return NULL_TREE;\n+\n   /* Set the current filename and line number to the function we are\n      inlining so that when we create new _STMT nodes here they get\n      line numbers corresponding to the function we are calling.  We\n@@ -951,6 +954,8 @@ expand_call_inline (tp, walk_subtrees, data)\n   /* Don't walk into subtrees.  We've already handled them above.  */\n   *walk_subtrees = 0;\n \n+  (*lang_hooks.tree_inlining.end_inlining) (fn);\n+\n   /* Keep iterating.  */\n   return NULL_TREE;\n }"}]}