{"sha": "ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyZWRmODhlZWM5M2RkMGVjNTMyZDJlODM3YTdhYzFiZjYyYTFjMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-02-22T15:53:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-02-22T15:53:27Z"}, "message": "re PR middle-end/43045 ([lto] ICE non-trivial conversion at assignment)\n\n2010-02-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/43045\n\t* tree-inline.c (declare_return_variable): Use the type of\n\tthe call stmt lhs if available.\n\n\t* gfortran.dg/lto/20100222-1_0.f03: New testcase.\n\t* gfortran.dg/lto/20100222-1_1.c: Likewise.\n\nFrom-SVN: r156966", "tree": {"sha": "c4319a78825fefbbe169d78d1f2716fb5d69d8e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4319a78825fefbbe169d78d1f2716fb5d69d8e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "669887fc19f995611f6dd7ed923aa6bd2726bbc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669887fc19f995611f6dd7ed923aa6bd2726bbc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669887fc19f995611f6dd7ed923aa6bd2726bbc1"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "b0ab9cd9132dddd146f1f4a9aaabda91425360c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "patch": "@@ -1,3 +1,9 @@\n+2010-02-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/43045\n+\t* tree-inline.c (declare_return_variable): Use the type of\n+\tthe call stmt lhs if available.\n+\n 2010-02-22  Duncan Sands  <baldrick@free.fr>\n \n \t* passes.c (register_pass): Always consider all pass lists when"}, {"sha": "04cbe4571a22701f3b131e3bd7aeb578db370763", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "patch": "@@ -1,3 +1,9 @@\n+2010-02-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/43045\n+\t* gfortran.dg/lto/20100222-1_0.f03: New testcase.\n+\t* gfortran.dg/lto/20100222-1_1.c: Likewise.\n+\n 2010-02-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42749"}, {"sha": "fece7815430c1f592e3fbf5e6e024af6b411a129", "filename": "gcc/testsuite/gfortran.dg/lto/20100222-1_0.f03", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20100222-1_0.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20100222-1_0.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20100222-1_0.f03?ref=ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "patch": "@@ -0,0 +1,35 @@\n+! { dg-lto-do run }\n+! This testcase tests c_funloc and c_funptr from iso_c_binding.  It uses \n+! functions defined in c_funloc_tests_3_funcs.c.\n+module c_funloc_tests_3\n+ implicit none\n+contains\n+  function ffunc(j) bind(c)\n+    use iso_c_binding, only: c_funptr, c_int\n+    integer(c_int)        :: ffunc\n+    integer(c_int), value :: j\n+    ffunc = -17*j\n+  end function ffunc\n+end module c_funloc_tests_3\n+program main\n+  use iso_c_binding, only: c_funptr, c_funloc\n+  use c_funloc_tests_3, only: ffunc\n+  implicit none\n+  interface\n+    function returnFunc() bind(c,name=\"returnFunc\")\n+       use iso_c_binding, only: c_funptr\n+       type(c_funptr) :: returnFunc\n+    end function returnFunc\n+    subroutine callFunc(func,pass,compare) bind(c,name=\"callFunc\")\n+       use iso_c_binding, only: c_funptr, c_int\n+       type(c_funptr), value :: func\n+       integer(c_int), value :: pass,compare\n+    end subroutine callFunc\n+  end interface\n+  type(c_funptr) :: p\n+  p = returnFunc()\n+  call callFunc(p, 13,3*13)\n+  p = c_funloc(ffunc)\n+  call callFunc(p, 21,-17*21)\n+end program main\n+! { dg-final { cleanup-modules \"c_funloc_tests_3\" } }"}, {"sha": "994da0a505d15e53acb63c1907279b44f2c70937", "filename": "gcc/testsuite/gfortran.dg/lto/20100222-1_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20100222-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20100222-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20100222-1_1.c?ref=ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "patch": "@@ -0,0 +1,25 @@\n+/* These functions support the test case c_funloc_tests_3.  */\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+int printIntC(int i)\n+{\n+  return 3*i;\n+}\n+\n+int (*returnFunc(void))(int)\n+{\n+  return &printIntC;\n+}\n+\n+void callFunc(int(*func)(int), int pass, int compare)\n+{\n+  int result = (*func)(pass);\n+  if(result != compare)\n+    {\n+       printf(\"FAILED: Got %d, expected %d\\n\", result, compare);\n+       abort();\n+    }\n+  else\n+    printf(\"SUCCESS: Got %d, expected %d\\n\", result, compare);\n+}"}, {"sha": "de8ca707ce238de760255ec912d3525eaafb91b8", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ea2edf88eec93dd0ec532d2e837a7ac1bf62a1c2", "patch": "@@ -2542,9 +2542,16 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest)\n   tree caller = id->dst_fn;\n   tree result = DECL_RESULT (callee);\n   tree callee_type = TREE_TYPE (result);\n-  tree caller_type = TREE_TYPE (TREE_TYPE (callee));\n+  tree caller_type;\n   tree var, use;\n \n+  /* Handle type-mismatches in the function declaration return type\n+     vs. the call expression.  */\n+  if (modify_dest)\n+    caller_type = TREE_TYPE (modify_dest);\n+  else\n+    caller_type = TREE_TYPE (TREE_TYPE (callee));\n+\n   /* We don't need to do anything for functions that don't return\n      anything.  */\n   if (!result || VOID_TYPE_P (callee_type))"}]}