{"sha": "0c18fdf1d20c381548c01f5a1a17d6b586ab5801", "node_id": "C_kwDOANBUbNoAKDBjMThmZGYxZDIwYzM4MTU0OGMwMWY1YTFhMTdkNmI1ODZhYjU4MDE", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-11-08T10:51:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-01T10:24:39Z"}, "message": "[Ada] Whitespace cleanup in Makefile.rtl dependency rules\n\ngcc/ada/\n\n\t* Makefile.rtl: Remove extra whitespace in special compilation\n\trules.", "tree": {"sha": "06d1c58fb6b59b8e7272cfd86e2fa5484c2714d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06d1c58fb6b59b8e7272cfd86e2fa5484c2714d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c18fdf1d20c381548c01f5a1a17d6b586ab5801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c18fdf1d20c381548c01f5a1a17d6b586ab5801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c18fdf1d20c381548c01f5a1a17d6b586ab5801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c18fdf1d20c381548c01f5a1a17d6b586ab5801/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6054bc84f0f6ff064c3dfc4a7e6080ffd1fdbe56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6054bc84f0f6ff064c3dfc4a7e6080ffd1fdbe56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6054bc84f0f6ff064c3dfc4a7e6080ffd1fdbe56"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a08aa95b864019f22194f1a553b7ca4576769ea4", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c18fdf1d20c381548c01f5a1a17d6b586ab5801/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c18fdf1d20c381548c01f5a1a17d6b586ab5801/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=0c18fdf1d20c381548c01f5a1a17d6b586ab5801", "patch": "@@ -91,7 +91,7 @@ GNATRTL_ALTIVEC_OBJS= \\\n   g-alvety$(objext) \\\n   g-alvevi$(objext)\n \n-# Objects needed for non-tasking.\n+# Objects needed for non-tasking\n GNATRTL_NONTASKING_OBJS= \\\n   a-assert$(objext) \\\n   a-btgbso$(objext) \\\n@@ -2970,7 +2970,7 @@ setup-rts: force\n \n ADA_TARGET_PROPERTIES = -gnatet=ada_target_properties\n \n-system.o  : system.ads\n+system.o: system.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(ADA_INCLUDES) $< \\\n \t  $(ADA_TARGET_PROPERTIES) \\\n \t  $(OUTPUT_OPTION)\n@@ -2979,15 +2979,15 @@ system.o  : system.ads\n # frames to be skipped when computing a call chain is not modified by\n # optimization. We don't want inlining, either.\n \n-s-traceb.o  : s-traceb.adb s-traceb.ads\n+s-traceb.o: s-traceb.adb s-traceb.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) \\\n \t  $(NO_INLINE_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) $< \\\n \t  $(OUTPUT_OPTION)\n \n # Compile s-tasdeb.o without optimization and with debug info so that it is\n # always possible to set conditional breakpoints on tasks.\n \n-s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n+s-tasdeb.o: s-tasdeb.adb s-tasdeb.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n@@ -2997,7 +2997,7 @@ s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n # possible to set conditional breakpoints on exceptions.\n # use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.\n \n-a-except.o  : a-except.adb a-except.ads\n+a-except.o: a-except.adb a-except.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) -O1 $(FORCE_DEBUG_ADAFLAGS) \\\n \t  $(NO_INLINE_ADAFLAGS) $(NO_REORDER_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n@@ -3006,28 +3006,28 @@ a-except.o  : a-except.adb a-except.ads\n # debugger set breakpoints and inspect subprogram parameters on exception\n # related events.\n \n-s-excdeb.o  : s-excdeb.adb s-excdeb.ads s-except.ads\n+s-excdeb.o: s-excdeb.adb s-excdeb.ads s-except.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 \\\n \t  $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n # Force debugging information on s-assert.o so that it is always\n # possible to set breakpoint on assert failures.\n \n-s-assert.o  : s-assert.adb s-assert.ads\n+s-assert.o: s-assert.adb s-assert.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n # Force debugging information on a-tags.o so that the debugger can find\n # the description of Ada.Tags.Type_Specific_Data.\n \n-a-tags.o  : a-tags.adb a-tags.ads\n+a-tags.o: a-tags.adb a-tags.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n # Force no sibling call optimization on s-memory.o to avoid turning the\n # tail recursion in Alloc into a loop that confuses branch prediction.\n \n-s-memory.o  : s-memory.adb s-memory.ads\n+s-memory.o: s-memory.adb s-memory.ads\n \t$(ADAC) -c $(ALL_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n "}]}