{"sha": "8d76ff99220c7aa428516e93998457dbe299f037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ3NmZmOTkyMjBjN2FhNDI4NTE2ZTkzOTk4NDU3ZGJlMjk5ZjAzNw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-07-12T06:55:17Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-07-15T05:10:47Z"}, "message": "pass location to md_asm_adjust\n\nSo the hook can use it as the location of diagnostics.\n\ngcc/ChangeLog:\n\n\t* cfgexpand.c (expand_asm_loc): Adjust.\n\t(expand_asm_stmt): Likewise.\n\t* config/arm/aarch-common-protos.h (arm_md_asm_adjust): Likewise.\n\t* config/arm/aarch-common.c (arm_md_asm_adjust): Likewise.\n\t* config/arm/arm.c (thumb1_md_asm_adjust): Likewise.\n\t* config/avr/avr.c (avr_md_asm_adjust): Likewise.\n\t* config/cris/cris.c (cris_md_asm_adjust): Likewise.\n\t* config/i386/i386.c (ix86_md_asm_adjust): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_md_asm_adjust): Likewise.\n\t* config/nds32/nds32.c (nds32_md_asm_adjust): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_md_asm_adjust): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_md_asm_adjust): Likewise.\n\t* config/s390/s390.c (s390_md_asm_adjust): Likewise.\n\t* config/vax/vax.c (vax_md_asm_adjust): Likewise.\n\t* config/visium/visium.c (visium_md_asm_adjust): Likewise.\n\t* doc/tm.texi: Regenerate.\n\t* target.def: Add location argument to md_asm_adjust.\n\nSigned-off-by: Trevor Saunders <tbsaunde@tbsaunde.org>", "tree": {"sha": "d45fe4868eed25ad00ab6be6167b613c84134ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d45fe4868eed25ad00ab6be6167b613c84134ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d76ff99220c7aa428516e93998457dbe299f037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d76ff99220c7aa428516e93998457dbe299f037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d76ff99220c7aa428516e93998457dbe299f037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d76ff99220c7aa428516e93998457dbe299f037/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329769b72001dcca18a120ab751f58de1b716ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329769b72001dcca18a120ab751f58de1b716ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329769b72001dcca18a120ab751f58de1b716ff8"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "818328071db6e4b97c28670624c387d732b2be5e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -2897,7 +2897,8 @@ expand_asm_loc (tree string, int vol, location_t locus)\n \n       if (targetm.md_asm_adjust)\n \ttargetm.md_asm_adjust (output_rvec, input_rvec, input_mode,\n-\t\t\t       constraints, clobber_rvec, clobbered_regs);\n+\t\t\t       constraints, clobber_rvec, clobbered_regs,\n+\t\t\t       locus);\n \n       asm_op = body;\n       nclobbers = clobber_rvec.length ();\n@@ -3074,8 +3075,7 @@ expand_asm_stmt (gasm *stmt)\n       return;\n     }\n \n-  /* There are some legacy diagnostics in here, and also avoids an extra\n-     parameter to targetm.md_asm_adjust.  */\n+  /* There are some legacy diagnostics in here.  */\n   save_input_location s_i_l(locus);\n \n   unsigned noutputs = gimple_asm_noutputs (stmt);\n@@ -3456,7 +3456,8 @@ expand_asm_stmt (gasm *stmt)\n   if (targetm.md_asm_adjust)\n     after_md_seq\n \t= targetm.md_asm_adjust (output_rvec, input_rvec, input_mode,\n-\t\t\t\t constraints, clobber_rvec, clobbered_regs);\n+\t\t\t\t constraints, clobber_rvec, clobbered_regs,\n+\t\t\t\t locus);\n \n   /* Do not allow the hook to change the output and input count,\n      lest it mess up the operand numbering.  */"}, {"sha": "6be5fb1e083d7ff130386dfa181b9a0c8fd5437c", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -147,6 +147,7 @@ struct cpu_cost_table\n rtx_insn *arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n \t\t\t     vec<machine_mode> & /*input_modes*/,\n \t\t\t     vec<const char *> &constraints,\n-\t\t\t     vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs);\n+\t\t\t     vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs,\n+\t\t\t     location_t loc);\n \n #endif /* GCC_AARCH_COMMON_PROTOS_H */"}, {"sha": "67343fe40250221c8b791f7776c39a2d2287cc35", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -534,7 +534,7 @@ rtx_insn *\n arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n \t\t   vec<machine_mode> & /*input_modes*/,\n \t\t   vec<const char *> &constraints, vec<rtx> & /*clobbers*/,\n-\t\t   HARD_REG_SET & /*clobbered_regs*/)\n+\t\t   HARD_REG_SET & /*clobbered_regs*/, location_t loc)\n {\n   bool saw_asm_flag = false;\n \n@@ -547,7 +547,7 @@ arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n       con += 4;\n       if (strchr (con, ',') != NULL)\n \t{\n-\t  error (\"alternatives not allowed in %<asm%> flag output\");\n+\t  error_at (loc, \"alternatives not allowed in %<asm%> flag output\");\n \t  continue;\n \t}\n \n@@ -608,7 +608,7 @@ arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n \t  mode = CC_Vmode, code = NE;\n \t  break;\n \tdefault:\n-\t  error (\"unknown %<asm%> flag output %qs\", constraints[i]);\n+\t  error_at (loc, \"unknown %<asm%> flag output %qs\", constraints[i]);\n \t  continue;\n \t}\n \n@@ -618,7 +618,7 @@ arm_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n       machine_mode dest_mode = GET_MODE (dest);\n       if (!SCALAR_INT_MODE_P (dest_mode))\n \t{\n-\t  error (\"invalid type for %<asm%> flag output\");\n+\t  error_at (loc, \"invalid type for %<asm%> flag output\");\n \t  continue;\n \t}\n "}, {"sha": "6d781e23ee95b557cd16fed0115a17ecca62c3b4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -333,7 +333,7 @@ static HOST_WIDE_INT arm_constant_alignment (const_tree, HOST_WIDE_INT);\n static rtx_insn *thumb1_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n \t\t\t\t       vec<machine_mode> &,\n \t\t\t\t       vec<const char *> &, vec<rtx> &,\n-\t\t\t\t       HARD_REG_SET &);\n+\t\t\t\t       HARD_REG_SET &, location_t);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -34105,7 +34105,7 @@ rtx_insn *\n thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n \t\t      vec<machine_mode> & /*input_modes*/,\n \t\t      vec<const char *> &constraints, vec<rtx> & /*clobbers*/,\n-\t\t      HARD_REG_SET & /*clobbered_regs*/)\n+\t\t      HARD_REG_SET & /*clobbered_regs*/, location_t /*loc*/)\n {\n   for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n     if (startswith (constraints[i], \"=@cc\"))"}, {"sha": "200701a583c176ddc467fda623d568643ccd03c7", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -14498,7 +14498,8 @@ static rtx_insn *\n avr_md_asm_adjust (vec<rtx> &/*outputs*/, vec<rtx> &/*inputs*/,\n                    vec<machine_mode> & /*input_modes*/,\n                    vec<const char *> &/*constraints*/,\n-                   vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+                   vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs,\n+\t\t   location_t /*loc*/)\n {\n   clobbers.safe_push (cc_reg_rtx);\n   SET_HARD_REG_BIT (clobbered_regs, REG_CC);"}, {"sha": "f458ea0c53e4db7ae5f9e72091a30ff223d571f9", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -151,7 +151,7 @@ static void cris_function_arg_advance (cumulative_args_t,\n \t\t\t\t       const function_arg_info &);\n static rtx_insn *cris_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n \t\t\t\t     vec<machine_mode> &, vec<const char *> &,\n-\t\t\t\t     vec<rtx> &, HARD_REG_SET &);\n+\t\t\t\t     vec<rtx> &, HARD_REG_SET &, location_t);\n \n static void cris_option_override (void);\n \n@@ -3507,7 +3507,7 @@ static rtx_insn *\n cris_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &inputs,\n \t\t    vec<machine_mode> & /*input_modes*/,\n \t\t    vec<const char *> &constraints, vec<rtx> &clobbers,\n-\t\t    HARD_REG_SET &clobbered_regs)\n+\t\t    HARD_REG_SET &clobbered_regs, location_t /*loc*/)\n {\n   /* For the time being, all asms clobber condition codes.\n      Revisit when there's a reasonable use for inputs/outputs"}, {"sha": "530d35729650142be1165646ed74aa9f9d82ed32", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -21596,7 +21596,7 @@ static rtx_insn *\n ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n \t\t    vec<machine_mode> & /*input_modes*/,\n \t\t    vec<const char *> &constraints, vec<rtx> &clobbers,\n-\t\t    HARD_REG_SET &clobbered_regs)\n+\t\t    HARD_REG_SET &clobbered_regs, location_t loc)\n {\n   bool saw_asm_flag = false;\n \n@@ -21609,7 +21609,7 @@ ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n       con += 4;\n       if (strchr (con, ',') != NULL)\n \t{\n-\t  error (\"alternatives not allowed in %<asm%> flag output\");\n+\t  error_at (loc, \"alternatives not allowed in %<asm%> flag output\");\n \t  continue;\n \t}\n \n@@ -21673,7 +21673,7 @@ ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n \t}\n       if (code == UNKNOWN)\n \t{\n-\t  error (\"unknown %<asm%> flag output %qs\", constraints[i]);\n+\t  error_at (loc, \"unknown %<asm%> flag output %qs\", constraints[i]);\n \t  continue;\n \t}\n       if (invert)\n@@ -21702,7 +21702,7 @@ ix86_md_asm_adjust (vec<rtx> &outputs, vec<rtx> & /*inputs*/,\n       machine_mode dest_mode = GET_MODE (dest);\n       if (!SCALAR_INT_MODE_P (dest_mode))\n \t{\n-\t  error (\"invalid type for %<asm%> flag output\");\n+\t  error_at (loc, \"invalid type for %<asm%> flag output\");\n \t  continue;\n \t}\n "}, {"sha": "6f842a3ad326a15a39071ac77709eeab8b9ddf93", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -2850,7 +2850,7 @@ static rtx_insn *\n mn10300_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n \t\t       vec<machine_mode> & /*input_modes*/,\n \t\t       vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n-\t\t       HARD_REG_SET &clobbered_regs)\n+\t\t       HARD_REG_SET &clobbered_regs, location_t /*loc*/)\n {\n   clobbers.safe_push (gen_rtx_REG (CCmode, CC_REG));\n   SET_HARD_REG_BIT (clobbered_regs, CC_REG);"}, {"sha": "2c9cfcf322a1aa966c1ff181b3ed238191c5ed55", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -4199,7 +4199,8 @@ nds32_md_asm_adjust (vec<rtx> &outputs ATTRIBUTE_UNUSED,\n \t\t     vec<rtx> &inputs ATTRIBUTE_UNUSED,\n \t\t     vec<machine_mode> &input_modes ATTRIBUTE_UNUSED,\n \t\t     vec<const char *> &constraints ATTRIBUTE_UNUSED,\n-\t\t     vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+\t\t     vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs,\n+\t\t     location_t /*loc*/)\n {\n   if (!flag_inline_asm_r15)\n     {"}, {"sha": "ced653116a4defd25a758e590d0ef425d62e5555", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -156,7 +156,7 @@ static int pdp11_addr_cost (rtx, machine_mode, addr_space_t, bool);\n static int pdp11_insn_cost (rtx_insn *insn, bool speed);\n static rtx_insn *pdp11_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n \t\t\t\t      vec<machine_mode> &, vec<const char *> &,\n-\t\t\t\t      vec<rtx> &, HARD_REG_SET &);\n+\t\t\t\t      vec<rtx> &, HARD_REG_SET &, location_t);\n static bool pdp11_return_in_memory (const_tree, const_tree);\n static rtx pdp11_function_value (const_tree, const_tree, bool);\n static rtx pdp11_libcall_value (machine_mode, const_rtx);\n@@ -2139,7 +2139,7 @@ static rtx_insn *\n pdp11_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n \t\t     vec<machine_mode> & /*input_modes*/,\n \t\t     vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n-\t\t     HARD_REG_SET &clobbered_regs)\n+\t\t     HARD_REG_SET &clobbered_regs, location_t /*loc*/)\n {\n   clobbers.safe_push (gen_rtx_REG (CCmode, CC_REGNUM));\n   SET_HARD_REG_BIT (clobbered_regs, CC_REGNUM);"}, {"sha": "779de9556ffb749fc7eec8d53edc43cd4e331ab4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -3444,7 +3444,7 @@ static rtx_insn *\n rs6000_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n \t\t      vec<machine_mode> & /*input_modes*/,\n \t\t      vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n-\t\t      HARD_REG_SET &clobbered_regs)\n+\t\t      HARD_REG_SET &clobbered_regs, location_t /*loc*/)\n {\n   clobbers.safe_push (gen_rtx_REG (SImode, CA_REGNO));\n   SET_HARD_REG_BIT (clobbered_regs, CA_REGNO);"}, {"sha": "800e0abc016bfa93c69c53dd8c34e211c10af72c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -16771,7 +16771,7 @@ static rtx_insn *\n s390_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &inputs,\n \t\t    vec<machine_mode> &input_modes,\n \t\t    vec<const char *> &constraints, vec<rtx> & /*clobbers*/,\n-\t\t    HARD_REG_SET & /*clobbered_regs*/)\n+\t\t    HARD_REG_SET & /*clobbered_regs*/, location_t /*loc*/)\n {\n   if (!TARGET_VXE)\n     /* Long doubles are stored in FPR pairs - nothing to do.  */"}, {"sha": "e26ab3b2e8e4f3c11b217cf156552682826fb4f8", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -57,7 +57,7 @@ static bool vax_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n static machine_mode vax_cc_modes_compatible (machine_mode, machine_mode);\n static rtx_insn *vax_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n \t\t\t\t    vec<machine_mode> &, vec<const char *> &,\n-\t\t\t\t    vec<rtx> &, HARD_REG_SET &);\n+\t\t\t\t    vec<rtx> &, HARD_REG_SET &, location_t);\n static rtx vax_function_arg (cumulative_args_t, const function_arg_info &);\n static void vax_function_arg_advance (cumulative_args_t,\n \t\t\t\t      const function_arg_info &);\n@@ -1181,7 +1181,8 @@ vax_md_asm_adjust (vec<rtx> &outputs ATTRIBUTE_UNUSED,\n \t\t   vec<rtx> &inputs ATTRIBUTE_UNUSED,\n \t\t   vec<machine_mode> &input_modes ATTRIBUTE_UNUSED,\n \t\t   vec<const char *> &constraints ATTRIBUTE_UNUSED,\n-\t\t   vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs)\n+\t\t   vec<rtx> &clobbers, HARD_REG_SET &clobbered_regs,\n+\t\t   location_t /*loc*/)\n {\n   clobbers.safe_push (gen_rtx_REG (CCmode, VAX_PSL_REGNUM));\n   SET_HARD_REG_BIT (clobbered_regs, VAX_PSL_REGNUM);"}, {"sha": "58e5355e7127de8357fbf55f555cfaa3ad99fa1d", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -190,7 +190,7 @@ static tree visium_build_builtin_va_list (void);\n static rtx_insn *visium_md_asm_adjust (vec<rtx> &, vec<rtx> &,\n \t\t\t\t       vec<machine_mode> &,\n \t\t\t\t       vec<const char *> &, vec<rtx> &,\n-\t\t\t\t       HARD_REG_SET &);\n+\t\t\t\t       HARD_REG_SET &, location_t);\n \n static bool visium_legitimate_constant_p (machine_mode, rtx);\n \n@@ -795,7 +795,7 @@ static rtx_insn *\n visium_md_asm_adjust (vec<rtx> & /*outputs*/, vec<rtx> & /*inputs*/,\n \t\t      vec<machine_mode> & /*input_modes*/,\n \t\t      vec<const char *> & /*constraints*/, vec<rtx> &clobbers,\n-\t\t      HARD_REG_SET &clobbered_regs)\n+\t\t      HARD_REG_SET &clobbered_regs, location_t /*loc*/)\n {\n   clobbers.safe_push (gen_rtx_REG (CCmode, FLAGS_REGNUM));\n   SET_HARD_REG_BIT (clobbered_regs, FLAGS_REGNUM);"}, {"sha": "3ad39443eba4a999887ae6d8746d58c1200bebdc", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -11708,11 +11708,12 @@ from shared libraries (DLLs).\n You need not define this macro if it would always evaluate to zero.\n @end defmac\n \n-@deftypefn {Target Hook} {rtx_insn *} TARGET_MD_ASM_ADJUST (vec<rtx>& @var{outputs}, vec<rtx>& @var{inputs}, vec<machine_mode>& @var{input_modes}, vec<const char *>& @var{constraints}, vec<rtx>& @var{clobbers}, HARD_REG_SET& @var{clobbered_regs})\n+@deftypefn {Target Hook} {rtx_insn *} TARGET_MD_ASM_ADJUST (vec<rtx>& @var{outputs}, vec<rtx>& @var{inputs}, vec<machine_mode>& @var{input_modes}, vec<const char *>& @var{constraints}, vec<rtx>& @var{clobbers}, HARD_REG_SET& @var{clobbered_regs}, location_t @var{loc})\n This target hook may add @dfn{clobbers} to @var{clobbers} and\n @var{clobbered_regs} for any hard regs the port wishes to automatically\n clobber for an asm.  The @var{outputs} and @var{inputs} may be inspected\n-to avoid clobbering a register that is already used by the asm.\n+to avoid clobbering a register that is already used by the asm.  @var{loc}\n+is the source location of the asm.\n \n It may modify the @var{outputs}, @var{inputs}, @var{input_modes}, and\n @var{constraints} as necessary for other pre-processing.  In this case the"}, {"sha": "2e40448e6c53717c93967c541fb3529c0f5099c5", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d76ff99220c7aa428516e93998457dbe299f037/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=8d76ff99220c7aa428516e93998457dbe299f037", "patch": "@@ -4226,7 +4226,8 @@ DEFHOOK\n  \"This target hook may add @dfn{clobbers} to @var{clobbers} and\\n\\\n @var{clobbered_regs} for any hard regs the port wishes to automatically\\n\\\n clobber for an asm.  The @var{outputs} and @var{inputs} may be inspected\\n\\\n-to avoid clobbering a register that is already used by the asm.\\n\\\n+to avoid clobbering a register that is already used by the asm.  @var{loc}\\n\\\n+is the source location of the asm.\\n\\\n \\n\\\n It may modify the @var{outputs}, @var{inputs}, @var{input_modes}, and\\n\\\n @var{constraints} as necessary for other pre-processing.  In this case the\\n\\\n@@ -4236,7 +4237,7 @@ to @var{input_modes}.\",\n  rtx_insn *,\n  (vec<rtx>& outputs, vec<rtx>& inputs, vec<machine_mode>& input_modes,\n   vec<const char *>& constraints, vec<rtx>& clobbers,\n-  HARD_REG_SET& clobbered_regs),\n+  HARD_REG_SET& clobbered_regs, location_t loc),\n  NULL)\n \n /* This target hook allows the backend to specify a calling convention"}]}