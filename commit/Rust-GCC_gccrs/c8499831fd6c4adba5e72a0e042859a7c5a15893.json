{"sha": "c8499831fd6c4adba5e72a0e042859a7c5a15893", "node_id": "C_kwDOANBUbNoAKGM4NDk5ODMxZmQ2YzRhZGJhNWU3MmEwZTA0Mjg1OWE3YzVhMTU4OTM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-01T14:15:07Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-01T14:20:31Z"}, "message": "macro-substitute: Do not substitute non-repetition fragments in sub-maps\n\nWhen creating a sub-map for repetitions, we need to be weary of not\naccessing matched-fragments beyond the vector's size. For example, with\nthe following *fragments*\n\n{ \"e\": [1], \"es\": [2, 3, 10]},\n\nthe sub-maps we want to create are the following:\n\n{ \"e\": [1], \"es\": [2]},\n{ \"e\": [1], \"es\": [3]},\n{ \"e\": [1], \"es\": [10]},\n\nUp until this point however, we were trying to access the second index\nfor the \"e\" metavar when creating the second submap, then the third, and\n  so on... which is obviously outside of the vector's bounds.\n\nWe can simply check if the metavar only has one match and expand that\none in that case. We still need to work on checking that multiple\nmetavars in the same transcriber repetition pattern have the same amount\nof matched fragments (ie the original vectors of matches in the\noriginal map have the same size)", "tree": {"sha": "46275ea129c7731c552f75c48d476b169789b347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46275ea129c7731c552f75c48d476b169789b347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8499831fd6c4adba5e72a0e042859a7c5a15893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8499831fd6c4adba5e72a0e042859a7c5a15893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8499831fd6c4adba5e72a0e042859a7c5a15893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8499831fd6c4adba5e72a0e042859a7c5a15893/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82b59dfc9319d72f891bac099bfa0f46d8b8c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82b59dfc9319d72f891bac099bfa0f46d8b8c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e82b59dfc9319d72f891bac099bfa0f46d8b8c99"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "3d07b484134f3a68553c00e1757b5858a55b3f3c", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8499831fd6c4adba5e72a0e042859a7c5a15893/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8499831fd6c4adba5e72a0e042859a7c5a15893/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=c8499831fd6c4adba5e72a0e042859a7c5a15893", "patch": "@@ -17,8 +17,8 @@ SubstituteCtx::substitute_metavar (std::unique_ptr<AST::Token> &metavar)\n   else\n     {\n       // Replace\n-      // We only care about the vector when expanding repetitions. Just access\n-      // the first element of the vector.\n+      // We only care about the vector when expanding repetitions.\n+      // Just access the first element of the vector.\n       // FIXME: Clean this up so it makes more sense\n       auto &frag = it->second[0];\n       for (size_t offs = frag.token_offset_begin; offs < frag.token_offset_end;\n@@ -103,7 +103,13 @@ SubstituteCtx::substitute_repetition (size_t pattern_start, size_t pattern_end)\n       for (auto &kv_match : fragments)\n \t{\n \t  std::vector<MatchedFragment> sub_vec;\n-\t  sub_vec.emplace_back (kv_match.second[i]);\n+\n+\t  // FIXME: Hack: If a fragment is not repeated, how does it fit in the\n+\t  // submap? Do we really want to expand it? Is this normal behavior?\n+\t  if (kv_match.second.size () == 1)\n+\t    sub_vec.emplace_back (kv_match.second[0]);\n+\t  else\n+\t    sub_vec.emplace_back (kv_match.second[i]);\n \n \t  sub_map.insert ({kv_match.first, sub_vec});\n \t}\n@@ -177,6 +183,7 @@ std::vector<std::unique_ptr<AST::Token>>\n SubstituteCtx::substitute_tokens ()\n {\n   std::vector<std::unique_ptr<AST::Token>> replaced_tokens;\n+  rust_debug (\"expanding tokens\");\n \n   for (size_t i = 0; i < macro.size (); i++)\n     {"}]}