{"sha": "7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlYjM1OThkOGJkM2NiNmMwMGYxZWJlMDhkNDY4ZjVlOGJiZGJmMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-03-11T00:49:44Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-03-11T00:49:44Z"}, "message": "cppfiles.c (file_cleanup, [...]): Replace bcopy(), index() etc calls.\n\n\t* cppfiles.c (file_cleanup, _cpp_find_include_file,\n\tremap_filename, _cpp_read_include_file, actual_directory,\n\thack_vms_include_specification): Replace bcopy(), index() etc\n\tcalls.  Add casts to some allocations.  Make some variables\n \tpointers to const [unsigned] char.\n\t* cpphash.c (_cpp_install, macro_cleanup, collect_expansion,\n\tcollect_formal_parameters): Similarly.\n\t* cppinit.c (struct pending_option, append_include_chain,\n\tcpp_options_init, cpp_reader_init, initialize_standard_includes,\n\tcpp_start_read, new_pending_define, handle_option): Similarly.\n\t* cpplib.c (cpp_define, copy_comment, do_define, do_include,\n\tdo_undef, do_error, do_warning, do_pragma, do_pragma_once,\n\tdo_pragma_implementation, detect_if_not_defined,\n\tdo_ifdef, skip_if_group, cpp_get_token, parse_string,\n\tdo_assert, do_unassert): Similarly.\n\t* cpplib.h (cpp_buffer, cpp_options): Update types.  Update\n\tfunction prototypes.\n\t* mkdeps.c (deps_add_target, deps_add_dep): cast allocations.\n\nFrom-SVN: r32477", "tree": {"sha": "e46c121978cf65e83ae4affddf04e3996e26128a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46c121978cf65e83ae4affddf04e3996e26128a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/comments", "author": null, "committer": null, "parents": [{"sha": "fca9f642280728a9a473e755571b76219a368aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca9f642280728a9a473e755571b76219a368aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca9f642280728a9a473e755571b76219a368aea"}], "stats": {"total": 165, "additions": 94, "deletions": 71}, "files": [{"sha": "7137c8e38bb980882d9c37d107d3ba906be6abdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "patch": "@@ -1,3 +1,24 @@\n+2000-03-11  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppfiles.c (file_cleanup, _cpp_find_include_file,\n+\tremap_filename, _cpp_read_include_file, actual_directory,\n+\thack_vms_include_specification): Replace bcopy(), index() etc\n+\tcalls.  Add casts to some allocations.  Make some variables\n+ \tpointers to const [unsigned] char.\n+\t* cpphash.c (_cpp_install, macro_cleanup, collect_expansion,\n+\tcollect_formal_parameters): Similarly.\n+\t* cppinit.c (struct pending_option, append_include_chain,\n+\tcpp_options_init, cpp_reader_init, initialize_standard_includes,\n+\tcpp_start_read, new_pending_define, handle_option): Similarly.\n+\t* cpplib.c (cpp_define, copy_comment, do_define, do_include,\n+\tdo_undef, do_error, do_warning, do_pragma, do_pragma_once,\n+\tdo_pragma_implementation, detect_if_not_defined,\n+\tdo_ifdef, skip_if_group, cpp_get_token, parse_string,\n+\tdo_assert, do_unassert): Similarly.\n+\t* cpplib.h (cpp_buffer, cpp_options): Update types.  Update\n+\tfunction prototypes.\n+\t* mkdeps.c (deps_add_target, deps_add_dep): cast allocations.\t\n+\n 2000-03-10  Richard Henderson  <rth@cygnus.com>\n \n \t* builtins.c (expand_builtin_strlen): Revert last change."}, {"sha": "7b2b240797120a014c9b62c3c139c68b954d3f18", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "patch": "@@ -165,7 +165,7 @@ file_cleanup (pbuf, pfile)\n {\n   if (pbuf->buf)\n     {\n-      free (pbuf->buf);\n+      free ((PTR) pbuf->buf);\n       pbuf->buf = 0;\n     }\n   if (pfile->system_include_depth)\n@@ -246,7 +246,7 @@ _cpp_find_include_file (pfile, fname, search_start, ihash, before)\n \n   for (l = search_start; l; l = l->next)\n     {\n-      bcopy (l->name, name, l->nlen);\n+      memcpy (name, l->name, l->nlen);\n       name[l->nlen] = '/';\n       strcpy (&name[l->nlen+1], fname);\n       _cpp_simplify_pathname (name);\n@@ -266,7 +266,7 @@ _cpp_find_include_file (pfile, fname, search_start, ihash, before)\n       if (f >= 0)\n         {\n \t  ih->foundhere = l;\n-\t  ih->name = xrealloc (name, strlen (name)+1);\n+\t  ih->name = xrealloc (name, strlen (name) + 1);\n \t  return f;\n         }\n     }\n@@ -445,7 +445,7 @@ remap_filename (pfile, name, loc)\n      looking in.  Thus #include <sys/types.h> will look up sys/types.h\n      in /usr/include/header.gcc and look up types.h in\n      /usr/include/sys/header.gcc.  */\n-  p = rindex (name, '/');\n+  p = strrchr (name, '/');\n   if (!p)\n     p = name;\n   if (loc && loc->name\n@@ -462,7 +462,7 @@ remap_filename (pfile, name, loc)\n   else\n     {\n       char * newdir = (char *) alloca (p - name + 1);\n-      bcopy (name, newdir, p - name);\n+      memcpy (newdir, name, p - name);\n       newdir[p - name] = '\\0';\n       dir = newdir;\n       from = p + 1;\n@@ -614,7 +614,7 @@ _cpp_read_include_file (pfile, fd, ihash)\n   if (length < 0)\n     goto fail;\n   if (length == 0)\n-    ihash->control_macro = \"\";  /* never re-include */\n+    ihash->control_macro = (const U_CHAR *) \"\";  /* never re-include */\n \n   close (fd);\n   fp->rlimit = fp->alimit = fp->buf + length;\n@@ -657,7 +657,7 @@ actual_directory (pfile, fname)\n   struct file_name_list *x;\n   \n   dir = xstrdup (fname);\n-  last_slash = rindex (dir, '/');\n+  last_slash = strrchr (dir, '/');\n   if (last_slash)\n     {\n       if (last_slash == dir)\n@@ -1266,20 +1266,20 @@ hack_vms_include_specification (fullname)\n   check_filename_before_returning = 0;\n   must_revert = 0;\n   /* See if we can find a 1st slash. If not, there's no path information.  */\n-  first_slash = index (fullname, '/');\n+  first_slash = strchr (fullname, '/');\n   if (first_slash == 0)\n     return 0;\t\t\t\t/* Nothing to do!!! */\n \n   /* construct device spec if none given.  */\n \n-  if (index (fullname, ':') == 0)\n+  if (strchr (fullname, ':') == 0)\n     {\n \n       /* If fullname has a slash, take it as device spec.  */\n \n       if (first_slash == fullname)\n \t{\n-\t  first_slash = index (fullname+1, '/');\t/* 2nd slash ? */\n+\t  first_slash = strchr (fullname + 1, '/');\t/* 2nd slash ? */\n \t  if (first_slash)\n \t    *first_slash = ':';\t\t\t\t/* make device spec  */\n \t  for (basename = fullname; *basename != 0; basename++)\n@@ -1399,7 +1399,7 @@ hack_vms_include_specification (fullname)\n      in the \"root\" directory.  Otherwise, we need to add\n      directory specifications.  */\n \n-  if (index (unixname, '/') == 0)\n+  if (strchr (unixname, '/') == 0)\n     {\n       /* if no directories specified yet and none are following.  */\n       if (local_ptr[-1] == '[')\n@@ -1414,7 +1414,7 @@ hack_vms_include_specification (fullname)\n     {\n \n       /* As long as there are still subdirectories to add, do them.  */\n-      while (index (unixname, '/') != 0)\n+      while (strchr (unixname, '/') != 0)\n \t{\n \t  /* If this token is \".\" we can ignore it\n \t       if it's not at the beginning of a path.  */\n@@ -1496,8 +1496,8 @@ hack_vms_include_specification (fullname)\n       /* The filename did not work.  Try to remove the [000000] from the name,\n \t and return it.  */\n \n-      basename = index (fullname, '[');\n-      local_ptr = index (fullname, ']') + 1;\n+      basename = strchr (fullname, '[');\n+      local_ptr = strchr (fullname, ']') + 1;\n       strcpy (basename, local_ptr);\t\t/* this gets rid of it */\n \n     }"}, {"sha": "e81b221fa656075a44fcd5518330b010f1bbc81f", "filename": "gcc/cpphash.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "patch": "@@ -237,7 +237,7 @@ _cpp_install (pfile, name, len, type, value)\n   hp->length = len;\n   hp->value.cpval = value;\n   hp->name = ((U_CHAR *) hp) + sizeof (HASHNODE);\n-  bcopy (name, hp->name, len);\n+  memcpy (hp->name, name, len);\n   hp->name[len] = 0;\n   return hp;\n }\n@@ -251,7 +251,7 @@ macro_cleanup (pbuf, pfile)\n   if (macro->type == T_DISABLED)\n     macro->type = T_MACRO;\n   if (macro->type != T_MACRO || pbuf->buf != macro->value.defn->expansion)\n-    free (pbuf->buf);\n+    free ((PTR) pbuf->buf);\n   return 0;\n }\n \n@@ -493,7 +493,7 @@ collect_expansion (pfile, arglist)\n   if (last_token == START)\n     {\n       /* Empty macro definition.  */\n-      exp = xstrdup (\"\\r \\r \");\n+      exp = (U_CHAR *) xstrdup (\"\\r \\r \");\n       len = 1;\n     }\n   else\n@@ -506,7 +506,8 @@ collect_expansion (pfile, arglist)\n   \n       CPP_NUL_TERMINATE (pfile);\n       len = CPP_WRITTEN (pfile) - start + 1;\n-      exp = xmalloc (len + 4); /* space for no-concat markers at either end */\n+      /* space for no-concat markers at either end */\n+      exp = (U_CHAR *) xmalloc (len + 4);\n       exp[0] = '\\r';\n       exp[1] = ' ';\n       exp[len + 1] = '\\r';\n@@ -580,7 +581,7 @@ collect_formal_parameters (pfile)\n \t  tok = pfile->token_buffer + old_written;\n \t  len = CPP_PWRITTEN (pfile) - tok;\n \t  if (namebuf\n-\t      && (name = strstr (namebuf, tok))\n+\t      && (name = (U_CHAR *) strstr (namebuf, tok))\n \t      && name[len] == ','\n \t      && (name == namebuf || name[-1] == ','))\n \t    {\n@@ -591,7 +592,7 @@ collect_formal_parameters (pfile)\n \t      && !strncmp (tok, \"__VA_ARGS__\", sizeof \"__VA_ARGS__\" - 1))\n \t    cpp_pedwarn (pfile,\n \t\"C99 does not permit use of `__VA_ARGS__' as a macro argument name\");\n-\t  namebuf = xrealloc (namebuf, argslen + len + 1);\n+\t  namebuf = (U_CHAR *) xrealloc (namebuf, argslen + len + 1);\n \t  name = &namebuf[argslen - 1];\n \t  argslen += len + 1;\n \n@@ -604,7 +605,7 @@ collect_formal_parameters (pfile)\n \n \tcase CPP_COMMA:\n \t  argc++;\n-\t  argv = xrealloc (argv, (argc + 1)*sizeof(struct arg));\n+\t  argv = (struct arg *) xrealloc (argv, (argc + 1)*sizeof(struct arg));\n \t  argv[argc].len = 0;\n \t  break;\n \n@@ -637,7 +638,7 @@ collect_formal_parameters (pfile)\n \tcpp_pedwarn (pfile, \"C89 does not permit varargs macros\");\n \n       len = sizeof \"__VA_ARGS__\" - 1;\n-      namebuf = xrealloc (namebuf, argslen + len + 1);\n+      namebuf = (U_CHAR *) xrealloc (namebuf, argslen + len + 1);\n       name = &namebuf[argslen - 1];\n       argslen += len;\n       memcpy (name, \"__VA_ARGS__\", len);"}, {"sha": "be57eaacc3372fe1b7a1f1c99139ef32ee2917aa", "filename": "gcc/cppinit.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "patch": "@@ -167,7 +167,7 @@ static const struct default_include include_defaults_array[]\n struct pending_option\n {\n   struct pending_option *next;\n-  char *arg;\n+  const char *arg;\n   int undef;\n };\n \n@@ -354,7 +354,7 @@ append_include_chain (pfile, pend, dir, path, cxx_aware)\n   if (len > pfile->max_include_len)\n     pfile->max_include_len = len;\n   \n-  new = (struct file_name_list *)xmalloc (sizeof (struct file_name_list));\n+  new = (struct file_name_list *) xmalloc (sizeof (struct file_name_list));\n   new->name = dir;\n   new->nlen = len;\n   new->ino  = st.st_ino;\n@@ -530,7 +530,7 @@ void\n cpp_options_init (opts)\n      cpp_options *opts;\n {\n-  bzero ((char *) opts, sizeof (struct cpp_options));\n+  memset ((char *) opts, 0, sizeof (struct cpp_options));\n \n   opts->dollars_in_ident = 1;\n   opts->cplusplus_comments = 1;\n@@ -546,7 +546,7 @@ void\n cpp_reader_init (pfile)\n      cpp_reader *pfile;\n {\n-  bzero ((char *) pfile, sizeof (cpp_reader));\n+  memset ((char *) pfile, 0, sizeof (cpp_reader));\n \n   pfile->token_buffer_size = 200;\n   pfile->token_buffer = (U_CHAR *) xmalloc (pfile->token_buffer_size);\n@@ -747,7 +747,7 @@ initialize_standard_includes (pfile)\n   cpp_options *opts = CPP_OPTIONS (pfile);\n   char *path;\n   const struct default_include *p;\n-  char *specd_prefix = opts->include_prefix;\n+  const char *specd_prefix = opts->include_prefix;\n \n   /* Several environment variables may add to the include search path.\n      CPATH specifies an additional list of directories to be searched\n@@ -841,7 +841,7 @@ initialize_standard_includes (pfile)\n int\n cpp_start_read (pfile, fname)\n      cpp_reader *pfile;\n-     char *fname;\n+     const char *fname;\n {\n   struct cpp_options *opts = CPP_OPTIONS (pfile);\n   struct pending_option *p, *q;\n@@ -1054,7 +1054,7 @@ new_pending_define (opts, text)\n   struct pending_option *o = (struct pending_option *)\n     xmalloc (sizeof (struct pending_option));\n \n-  o->arg = (char *) text;\n+  o->arg = text;\n   o->next = NULL;\n   o->undef = 0;\n   APPEND (opts->pending, define, o);\n@@ -1268,7 +1268,7 @@ handle_option (pfile, argc, argv)\n     {\n       enum opt_code opt_code;\n       int opt_index;\n-      char *arg = 0;\n+      const char *arg = 0;\n \n       /* Skip over '-' */\n       opt_index = parse_option (&argv[i][1]);"}, {"sha": "aaecad7bd6492fdc81429785816a194cefd773cd", "filename": "gcc/cpplib.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "patch": "@@ -214,9 +214,9 @@ cpp_grow_buffer (pfile, n)\n void\n cpp_define (pfile, str)\n      cpp_reader *pfile;\n-     U_CHAR *str;\n+     const char *str;\n {\n-  U_CHAR *buf, *p;\n+  char *buf, *p;\n   size_t count;\n \n   p = strchr (str, '=');\n@@ -227,7 +227,7 @@ cpp_define (pfile, str)\n   if (p)\n     {\n       count = strlen (str) + 2;\n-      buf = (U_CHAR *) alloca (count);\n+      buf = alloca (count);\n       memcpy (buf, str, count - 2);\n       buf[p - str] = ' ';\n       buf[count - 2] = '\\n';\n@@ -236,7 +236,7 @@ cpp_define (pfile, str)\n   else\n     {\n       count = strlen (str) + 4;\n-      buf = (U_CHAR *) alloca (count);\n+      buf = alloca (count);\n       memcpy (buf, str, count - 4);\n       strcpy (&buf[count-4], \" 1\\n\");\n     }\n@@ -252,7 +252,7 @@ cpp_define (pfile, str)\n void\n cpp_assert (pfile, str)\n      cpp_reader *pfile;\n-     U_CHAR *str;\n+     const char *str;\n {\n   if (cpp_push_buffer (pfile, str, strlen (str)) != NULL)\n     {\n@@ -409,8 +409,8 @@ copy_comment (pfile, m)\n      cpp_reader *pfile;\n      int m;\n {\n-  U_CHAR *start = CPP_BUFFER (pfile)->cur;  /* XXX Layering violation */\n-  U_CHAR *limit;\n+  const U_CHAR *start = CPP_BUFFER (pfile)->cur;  /* XXX Layering violation */\n+  const U_CHAR *limit;\n \n   if (skip_comment (pfile, m) == m)\n     return m;\n@@ -749,7 +749,7 @@ do_define (pfile, keyword)\n cpp_buffer *\n cpp_push_buffer (pfile, buffer, length)\n      cpp_reader *pfile;\n-     U_CHAR *buffer;\n+     const U_CHAR *buffer;\n      long length;\n {\n   cpp_buffer *buf = CPP_BUFFER (pfile);\n@@ -1258,7 +1258,7 @@ do_include (pfile, keyword)\n   /* Actually process the file */\n \n   if (importing)\n-    ihash->control_macro = \"\";\n+    ihash->control_macro = (const U_CHAR *) \"\";\n   \n   if (cpp_push_buffer (pfile, NULL, 0) == NULL)\n     {\n@@ -1491,11 +1491,11 @@ do_undef (pfile, keyword)\n void\n cpp_undef (pfile, macro)\n      cpp_reader *pfile;\n-     U_CHAR *macro;\n+     const char *macro;\n {\n   /* Copy the string so we can append a newline.  */\n   size_t len = strlen (macro);\n-  U_CHAR *buf = alloca (len + 2);\n+  char *buf = alloca (len + 2);\n   memcpy (buf, macro, len);\n   buf[len]     = '\\n';\n   buf[len + 1] = '\\0';\n@@ -1517,7 +1517,7 @@ do_error (pfile, keyword)\n      cpp_reader *pfile;\n      const struct directive *keyword ATTRIBUTE_UNUSED;\n {\n-  U_CHAR *text, *limit;\n+  const U_CHAR *text, *limit;\n \n   cpp_skip_hspace (pfile);\n   text = CPP_BUFFER (pfile)->cur;\n@@ -1538,7 +1538,7 @@ do_warning (pfile, keyword)\n      cpp_reader *pfile;\n      const struct directive *keyword ATTRIBUTE_UNUSED;\n {\n-  U_CHAR *text, *limit;\n+  const U_CHAR *text, *limit;\n \n   cpp_skip_hspace (pfile);\n   text = CPP_BUFFER (pfile)->cur;\n@@ -1626,7 +1626,7 @@ do_pragma (pfile, keyword)\n   buf = pfile->token_buffer + key;\n   CPP_PUTC (pfile, ' ');\n \n-#define tokis(x) !strncmp(buf, x, sizeof(x) - 1)\n+#define tokis(x) !strncmp((char *) buf, x, sizeof(x) - 1)\n   if (tokis (\"once\"))\n     pop = do_pragma_once (pfile);\n   else if (tokis (\"implementation\"))\n@@ -1677,7 +1677,7 @@ do_pragma_once (pfile)\n   if (CPP_PREV_BUFFER (ip) == NULL)\n     cpp_warning (pfile, \"`#pragma once' outside include file\");\n   else\n-    ip->ihash->control_macro = \"\";  /* never repeat */\n+    ip->ihash->control_macro = (const U_CHAR *) \"\";  /* never repeat */\n \n   return 1;\n }\n@@ -1703,7 +1703,7 @@ do_pragma_implementation (pfile)\n     }\n \n   name = pfile->token_buffer + written + 1;\n-  copy = xstrdup (name);\n+  copy = (U_CHAR *) xstrdup (name);\n   copy[strlen(copy)] = '\\0';  /* trim trailing quote */\n \n   if (cpp_included (pfile, copy))\n@@ -1844,7 +1844,7 @@ detect_if_not_defined (pfile)\n       if ((!need_rparen || get_directive_token (pfile) == CPP_RPAREN)\n \t  /* ...and make sure there's nothing else on the line.  */\n \t  && get_directive_token (pfile) == CPP_VSPACE)\n-\tcontrol_macro = xstrdup (ident);\n+\tcontrol_macro = (U_CHAR *) xstrdup (ident);\n \n     restore:\n       CPP_SET_WRITTEN (pfile, base_offset);\n@@ -1980,7 +1980,7 @@ do_ifdef (pfile, keyword)\n       if (start_of_file && !skip)\n \t{\n \t  control_macro = (U_CHAR *) xmalloc (ident_length + 1);\n-\t  bcopy (ident, control_macro, ident_length + 1);\n+\t  memcpy (control_macro, ident, ident_length + 1);\n \t}\n     }\n   else\n@@ -2114,7 +2114,7 @@ skip_if_group (pfile)\n {\n   int c;\n   IF_STACK *save_if_stack = pfile->if_stack; /* don't pop past here */\n-  U_CHAR *beg_of_line;\n+  const U_CHAR *beg_of_line;\n   long old_written;\n \n   old_written = CPP_WRITTEN (pfile);\n@@ -2674,7 +2674,7 @@ cpp_get_token (pfile)\n \n \t      while (CPP_IS_MACRO_BUFFER (CPP_BUFFER (pfile)))\n \t\t{\n-\t\t  U_CHAR *point = CPP_BUFFER (pfile)->cur;\n+\t\t  const U_CHAR *point = CPP_BUFFER (pfile)->cur;\n \t\t  for (;;)\n \t\t    {\n \t\t      cpp_skip_hspace (pfile);\n@@ -2929,8 +2929,8 @@ parse_string (pfile, c)\n      cpp_reader *pfile;\n      int c;\n {\n-  U_CHAR *start = CPP_BUFFER (pfile)->cur;  /* XXX Layering violation */\n-  U_CHAR *limit;\n+  const U_CHAR *start = CPP_BUFFER (pfile)->cur;  /* XXX Layering violation */\n+  const U_CHAR *limit;\n \n   skip_string (pfile, c);\n \n@@ -3050,7 +3050,7 @@ do_assert (pfile, keyword)\n     }\n \n   thislen = strlen (sym);\n-  baselen = (U_CHAR *) index (sym, '(') - sym;\n+  baselen = (U_CHAR *) strchr (sym, '(') - sym;\n   this = _cpp_lookup (pfile, sym, thislen);\n   if (this)\n     {\n@@ -3124,7 +3124,7 @@ do_unassert (pfile, keyword)\n     }\n   else\n     {\n-      baselen = (U_CHAR *) index (sym, '(') - sym;\n+      baselen = (U_CHAR *) strchr (sym, '(') - sym;\n       base = _cpp_lookup (pfile, sym, baselen);\n       if (! base) goto error;\n       this = _cpp_lookup (pfile, sym, thislen);\n@@ -3153,7 +3153,7 @@ do_unassert (pfile, keyword)\n void\n cpp_unassert (pfile, str)\n      cpp_reader *pfile;\n-     unsigned char *str;\n+     const char *str;\n {\n   if (cpp_push_buffer (pfile, str, strlen (str)) != NULL)\n     {"}, {"sha": "85b1df2e6e90f1d7d083aa5e2ee633143e4e4eec", "filename": "gcc/cpplib.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "patch": "@@ -63,11 +63,11 @@ typedef int (*parse_cleanup_t) PARAMS((cpp_buffer *, cpp_reader *));\n \n struct cpp_buffer\n {\n-  unsigned char *cur;\t /* current position */\n-  unsigned char *rlimit; /* end of valid data */\n-  unsigned char *buf;\t /* entire buffer */\n-  unsigned char *alimit; /* end of allocated buffer */\n-  unsigned char *line_base; /* start of current line */\n+  const unsigned char *cur;\t /* current position */\n+  const unsigned char *rlimit; /* end of valid data */\n+  const unsigned char *buf;\t /* entire buffer */\n+  const unsigned char *alimit; /* end of allocated buffer */\n+  const unsigned char *line_base; /* start of current line */\n \n   struct cpp_buffer *prev;\n \n@@ -245,7 +245,7 @@ struct cpp_reader\n /* Pointed to by cpp_reader.opts. */\n struct cpp_options\n {\n-  char *in_fname;\n+  const char *in_fname;\n \n   /* Name of output file, for error messages.  */\n   const char *out_fname;\n@@ -394,7 +394,7 @@ struct cpp_options\n \n   /* Directory prefix that should replace `/usr/lib/gcc-lib/TARGET/VERSION'\n      in the standard include file directories.  */\n-  char *include_prefix;\n+  const char *include_prefix;\n   int include_prefix_len;\n \n   char no_standard_includes;\n@@ -427,7 +427,7 @@ struct cpp_options\n \n   /* File name which deps are being written to.\n      This is 0 if deps are being written to stdout.  */\n-  char *deps_file;\n+  const char *deps_file;\n \n   /* Target-name to write with the dependency information.  */\n   char *deps_target;\n@@ -443,16 +443,16 @@ extern enum cpp_token get_directive_token PARAMS ((cpp_reader *));\n \n extern void cpp_reader_init PARAMS ((cpp_reader *));\n extern void cpp_options_init PARAMS ((cpp_options *));\n-extern int cpp_start_read PARAMS ((cpp_reader *, char *));\n+extern int cpp_start_read PARAMS ((cpp_reader *, const char *));\n extern void cpp_finish PARAMS ((cpp_reader *));\n extern void cpp_cleanup PARAMS ((cpp_reader *PFILE));\n \n extern void cpp_buf_line_and_col PARAMS((cpp_buffer *, long *, long *));\n extern cpp_buffer *cpp_file_buffer PARAMS((cpp_reader *));\n-extern void cpp_define PARAMS ((cpp_reader *, unsigned char *));\n-extern void cpp_assert PARAMS ((cpp_reader *, unsigned char *));\n-extern void cpp_undef  PARAMS ((cpp_reader *, unsigned char *));\n-extern void cpp_unassert PARAMS ((cpp_reader *, unsigned char *));\n+extern void cpp_define PARAMS ((cpp_reader *, const char *));\n+extern void cpp_assert PARAMS ((cpp_reader *, const char *));\n+extern void cpp_undef  PARAMS ((cpp_reader *, const char *));\n+extern void cpp_unassert PARAMS ((cpp_reader *, const char *));\n \n /* N.B. The error-message-printer prototypes have not been nicely\n    formatted because exgettext needs to see 'msgid' on the same line\n@@ -485,7 +485,7 @@ extern void cpp_notice_from_errno PARAMS ((cpp_reader *, const char *));\n \n extern void cpp_grow_buffer PARAMS ((cpp_reader *, long));\n extern cpp_buffer *cpp_push_buffer PARAMS ((cpp_reader *,\n-\t\t\t\t\t    unsigned char *, long));\n+\t\t\t\t\t    const unsigned char *, long));\n extern cpp_buffer *cpp_pop_buffer PARAMS ((cpp_reader *));\n extern int cpp_defined PARAMS ((cpp_reader *, const unsigned char *, int));\n "}, {"sha": "08b3b2ef91ba0a632ba32185b7837c937e9bee61", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=7ceb3598d8bd3cb6c00f1ebe08d468f5e8bbdbf1", "patch": "@@ -173,7 +173,7 @@ deps_add_target (d, t)\n   if (d->ntargets == d->targets_size)\n     {\n       d->targets_size *= 2;\n-      d->targetv = xrealloc (d->targetv,\n+      d->targetv = (const char **) xrealloc (d->targetv,\n \t\t\t     d->targets_size * sizeof (const char *));\n     }\n \n@@ -210,7 +210,8 @@ deps_add_dep (d, t)\n   if (d->ndeps == d->deps_size)\n     {\n       d->deps_size *= 2;\n-      d->depv = xrealloc (d->depv, d->deps_size * sizeof (const char *));\n+      d->depv = (const char **)\n+\txrealloc (d->depv, d->deps_size * sizeof (const char *));\n     }\n   d->depv[d->ndeps++] = t;\n }"}]}