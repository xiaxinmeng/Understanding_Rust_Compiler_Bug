{"sha": "391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxODg2YzhlMDE1M2Q0MWIzYWI0ZGFmNGQyZGQxZDkyM2Q5YzUwZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-13T13:49:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-13T13:49:54Z"}, "message": "basic-block.h (struct basic_block): Remove loop_depth member, move flags and index members next to each other.\n\n2012-08-13  Richard Guenther  <rguenther@suse.de>\n\n\t* basic-block.h (struct basic_block): Remove loop_depth\n\tmember, move flags and index members next to each other.\n\t* cfgloop.h (bb_loop_depth): New inline function.\n\t* cfghooks.c (split_block): Do not set loop_depth.\n\t(duplicate_block): Likewise.\n\t* cfgloop.c (flow_loop_nodes_find): Likewise.\n\t(flow_loops_find): Likewise.\n\t(add_bb_to_loop): Likewise.\n\t(remove_bb_from_loops): Likewise.\n\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n\t* gimple-streamer-in.c (input_bb): Do not stream loop_depth.\n\t* gimple-streamer-out.c (output_bb): Likewise.\n\t* bt-load.c: Include cfgloop.h.\n\t(migrate_btr_defs): Use bb_loop_depth.\n\t* cfg.c (dump_bb_info): Likewise.\n\t* final.c (compute_alignments): Likewise.\n\t* ira.c (update_equiv_regs): Likewise.\n\t* tree-ssa-copy.c (init_copy_prop): Likewise.\n\t* tree-ssa-dom.c (loop_depth_of_name): Likewise.\n\t* tree-ssa-forwprop.c: Include cfgloop.h.\n\t(forward_propagate_addr_expr): Use bb_loop_depth.\n\t* tree-ssa-pre.c (insert_into_preds_of_block): Likewise.\n\t* tree-ssa-sink.c (select_best_block): Likewise.\n\t* ipa-inline-analysis.c: Include cfgloop.h.\n\t(estimate_function_body_sizes): Use bb_loop_depth.\n\t* Makefile.in (tree-ssa-forwprop.o): Depend on $(CFGLOOP_H).\n\t(ipa-inline-analysis.o): Likewise.\n\t(bt-load.o): Likewise.\n\n\t* gcc.dg/tree-prof/update-loopch.c: Adjust.\n\nFrom-SVN: r190346", "tree": {"sha": "c9e7c894d3f7d2eaf1bfddbb370a7e8c883063c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9e7c894d3f7d2eaf1bfddbb370a7e8c883063c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9006f7f325461dff15a5adaa577b36b789eab2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9006f7f325461dff15a5adaa577b36b789eab2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9006f7f325461dff15a5adaa577b36b789eab2a0"}], "stats": {"total": 111, "additions": 71, "deletions": 40}, "files": [{"sha": "4bad1761ba2e743f102674a6c9a2979d2d8690a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -1,3 +1,34 @@\n+2012-08-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* basic-block.h (struct basic_block): Remove loop_depth\n+\tmember, move flags and index members next to each other.\n+\t* cfgloop.h (bb_loop_depth): New inline function.\n+\t* cfghooks.c (split_block): Do not set loop_depth.\n+\t(duplicate_block): Likewise.\n+\t* cfgloop.c (flow_loop_nodes_find): Likewise.\n+\t(flow_loops_find): Likewise.\n+\t(add_bb_to_loop): Likewise.\n+\t(remove_bb_from_loops): Likewise.\n+\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n+\t* gimple-streamer-in.c (input_bb): Do not stream loop_depth.\n+\t* gimple-streamer-out.c (output_bb): Likewise.\n+\t* bt-load.c: Include cfgloop.h.\n+\t(migrate_btr_defs): Use bb_loop_depth.\n+\t* cfg.c (dump_bb_info): Likewise.\n+\t* final.c (compute_alignments): Likewise.\n+\t* ira.c (update_equiv_regs): Likewise.\n+\t* tree-ssa-copy.c (init_copy_prop): Likewise.\n+\t* tree-ssa-dom.c (loop_depth_of_name): Likewise.\n+\t* tree-ssa-forwprop.c: Include cfgloop.h.\n+\t(forward_propagate_addr_expr): Use bb_loop_depth.\n+\t* tree-ssa-pre.c (insert_into_preds_of_block): Likewise.\n+\t* tree-ssa-sink.c (select_best_block): Likewise.\n+\t* ipa-inline-analysis.c: Include cfgloop.h.\n+\t(estimate_function_body_sizes): Use bb_loop_depth.\n+\t* Makefile.in (tree-ssa-forwprop.o): Depend on $(CFGLOOP_H).\n+\t(ipa-inline-analysis.o): Likewise.\n+\t(bt-load.o): Likewise.\n+\n 2012-08-13  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "29bd1aa586b8e8a41c7dbcb5928f6a71d0e027fe", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -2271,7 +2271,7 @@ tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) domwalk.h $(FLAGS_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) langhooks.h\n tree-ssa-forwprop.o : tree-ssa-forwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n+   $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) $(CFGLOOP_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(DIAGNOSTIC_H) \\\n    langhooks.h $(FLAGS_H) $(GIMPLE_H) $(GIMPLE_PRETTY_PRINT_H) $(EXPR_H)\n tree-ssa-phiprop.o : tree-ssa-phiprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -2899,7 +2899,7 @@ ipa-inline.o : ipa-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(EXCEPT_H) $(GIMPLE_PRETTY_PRINT_H) ipa-inline.h $(TARGET_H) $(IPA_UTILS_H)\n ipa-inline-analysis.o : ipa-inline-analysis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(FLAGS_H) $(CGRAPH_H) intl.h \\\n-   $(DIAGNOSTIC_H) $(PARAMS_H) $(TREE_PASS_H) \\\n+   $(DIAGNOSTIC_H) $(PARAMS_H) $(TREE_PASS_H) $(CFGLOOP_H) \\\n    $(HASHTAB_H) $(COVERAGE_H) $(GGC_H) $(TREE_FLOW_H) $(IPA_PROP_H) \\\n    $(GIMPLE_PRETTY_PRINT_H) ipa-inline.h $(LTO_STREAMER_H) $(DATA_STREAMER_H) \\\n    $(TREE_STREAMER_H)\n@@ -3183,7 +3183,7 @@ caller-save.o : caller-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h dumpfile.h \\\n bt-load.o : bt-load.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(EXCEPT_H) \\\n    $(RTL_H) hard-reg-set.h $(REGS_H) $(TM_P_H) $(FIBHEAP_H) $(EXPR_H) \\\n    $(TARGET_H) $(FLAGS_H) $(INSN_ATTR_H) $(FUNCTION_H) $(TREE_PASS_H) \\\n-   $(DIAGNOSTIC_CORE_H) $(DF_H) vecprim.h $(RECOG_H)\n+   $(DIAGNOSTIC_CORE_H) $(DF_H) vecprim.h $(RECOG_H) $(CFGLOOP_H)\n reorg.o : reorg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    conditions.h hard-reg-set.h $(BASIC_BLOCK_H) $(REGS_H) insn-config.h \\\n    $(INSN_ATTR_H) $(EXCEPT_H) $(RECOG_H) $(FUNCTION_H) $(FLAGS_H) output.h \\"}, {"sha": "8183ce2e3c7ff5c3a7350774843d2bd6440ee786", "filename": "gcc/basic-block.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -160,14 +160,14 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n       } GTY ((tag (\"1\"))) x;\n     } GTY ((desc (\"((%1.flags & BB_RTL) != 0)\"))) il;\n \n-  /* Expected number of executions: calculated in profile.c.  */\n-  gcov_type count;\n+  /* Various flags.  See cfg-flags.def.  */\n+  int flags;\n \n   /* The index of this block.  */\n   int index;\n \n-  /* The loop depth of this block.  */\n-  int loop_depth;\n+  /* Expected number of executions: calculated in profile.c.  */\n+  gcov_type count;\n \n   /* Expected frequency.  Normalized to be in range 0 to BB_FREQ_MAX.  */\n   int frequency;\n@@ -176,9 +176,6 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n      among several basic blocks that share a common locus, allowing for\n      more accurate sample-based profiling.  */\n   int discriminator;\n-\n-  /* Various flags.  See cfg-flags.def.  */\n-  int flags;\n };\n \n /* This ensures that struct gimple_bb_info is smaller than"}, {"sha": "385bc6c45ac3f8fa92d7a55a34fc72780b8ec68c", "filename": "gcc/bt-load.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"recog.h\"\n #include \"df.h\"\n+#include \"cfgloop.h\"\n \n /* Target register optimizations - these are performed after reload.  */\n \n@@ -1408,7 +1409,7 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n \t  fprintf(dump_file,\n \t    \"Basic block %d: count = \" HOST_WIDEST_INT_PRINT_DEC\n \t    \" loop-depth = %d idom = %d\\n\",\n-\t    i, (HOST_WIDEST_INT) bb->count, bb->loop_depth,\n+\t    i, (HOST_WIDEST_INT) bb->count, bb_loop_depth (bb),\n \t    get_immediate_dominator (CDI_DOMINATORS, bb)->index);\n \t}\n     }"}, {"sha": "ba8320812cd123053fc63dc011211b8976995369", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -698,7 +698,7 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n       if (flags & TDF_COMMENT)\n \tfputs (\";; \", outf);\n       fprintf (outf, \"%sbasic block %d, loop depth %d\",\n-\t       s_indent, bb->index, bb->loop_depth);\n+\t       s_indent, bb->index, bb_loop_depth (bb));\n       if (flags & TDF_DETAILS)\n \t{\n \t  fprintf (outf, \", count \" HOST_WIDEST_INT_PRINT_DEC,"}, {"sha": "1417e48299d52de55177f084d113470f566d7271", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -462,7 +462,6 @@ split_block (basic_block bb, void *i)\n \n   new_bb->count = bb->count;\n   new_bb->frequency = bb->frequency;\n-  new_bb->loop_depth = bb->loop_depth;\n   new_bb->discriminator = bb->discriminator;\n \n   if (dom_info_available_p (CDI_DOMINATORS))\n@@ -985,7 +984,6 @@ duplicate_block (basic_block bb, edge e, basic_block after)\n   if (after)\n     move_block_after (new_bb, after);\n \n-  new_bb->loop_depth = bb->loop_depth;\n   new_bb->flags = bb->flags;\n   FOR_EACH_EDGE (s, ei, bb->succs)\n     {"}, {"sha": "0c51682897e79a7f47de3de523aa44fe90e946d9", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -229,10 +229,8 @@ flow_loop_nodes_find (basic_block header, struct loop *loop)\n   int num_nodes = 1;\n   edge latch;\n   edge_iterator latch_ei;\n-  unsigned depth = loop_depth (loop);\n \n   header->loop_father = loop;\n-  header->loop_depth = depth;\n \n   FOR_EACH_EDGE (latch, latch_ei, loop->header->preds)\n     {\n@@ -243,7 +241,6 @@ flow_loop_nodes_find (basic_block header, struct loop *loop)\n       num_nodes++;\n       VEC_safe_push (basic_block, heap, stack, latch->src);\n       latch->src->loop_father = loop;\n-      latch->src->loop_depth = depth;\n \n       while (!VEC_empty (basic_block, stack))\n \t{\n@@ -260,7 +257,6 @@ flow_loop_nodes_find (basic_block header, struct loop *loop)\n \t      if (ancestor->loop_father != loop)\n \t\t{\n \t\t  ancestor->loop_father = loop;\n-\t\t  ancestor->loop_depth = depth;\n \t\t  num_nodes++;\n \t\t  VEC_safe_push (basic_block, heap, stack, ancestor);\n \t\t}\n@@ -365,7 +361,7 @@ init_loops_structure (struct loops *loops, unsigned num_loops)\n }\n \n /* Find all the natural loops in the function and save in LOOPS structure and\n-   recalculate loop_depth information in basic block structures.\n+   recalculate loop_father information in basic block structures.\n    Return the number of natural loops found.  */\n \n int\n@@ -404,8 +400,6 @@ flow_loops_find (struct loops *loops)\n     {\n       edge_iterator ei;\n \n-      header->loop_depth = 0;\n-\n       /* If we have an abnormal predecessor, do not consider the\n \t loop (not worth the problems).  */\n       if (bb_has_abnormal_pred (header))\n@@ -1185,7 +1179,6 @@ add_bb_to_loop (basic_block bb, struct loop *loop)\n \n   gcc_assert (bb->loop_father == NULL);\n   bb->loop_father = loop;\n-  bb->loop_depth = loop_depth (loop);\n   loop->num_nodes++;\n   FOR_EACH_VEC_ELT (loop_p, loop->superloops, i, ploop)\n     ploop->num_nodes++;\n@@ -1215,7 +1208,6 @@ remove_bb_from_loops (basic_block bb)\n   FOR_EACH_VEC_ELT (loop_p, loop->superloops, i, ploop)\n     ploop->num_nodes--;\n   bb->loop_father = NULL;\n-  bb->loop_depth = 0;\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n     {"}, {"sha": "5c03390ab253d9d19859589048ac90444e1cac2b", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -445,6 +445,14 @@ loop_depth (const struct loop *loop)\n   return VEC_length (loop_p, loop->superloops);\n }\n \n+/* Returns the loop depth of the loop BB belongs to.  */\n+\n+static inline int\n+bb_loop_depth (const_basic_block bb)\n+{\n+  return bb->loop_father ? loop_depth (bb->loop_father) : 0;\n+}\n+\n /* Returns the immediate superloop of LOOP, or NULL if LOOP is the outermost\n    loop.  */\n "}, {"sha": "c62b5bce33fbe9beb6a80b46496069d68849c43e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -1438,7 +1438,6 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n       jump_block = create_basic_block (note, NULL, e->src);\n       jump_block->count = count;\n       jump_block->frequency = EDGE_FREQUENCY (e);\n-      jump_block->loop_depth = target->loop_depth;\n \n       /* Make sure new block ends up in correct hot/cold section.  */\n "}, {"sha": "ed8624ee600964b9886c083fc3115c520366ea36", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -739,7 +739,8 @@ compute_alignments (void)\n \t{\n \t  if (dump_file)\n \t    fprintf(dump_file, \"BB %4i freq %4i loop %2i loop_depth %2i skipped.\\n\",\n-\t\t    bb->index, bb->frequency, bb->loop_father->num, bb->loop_depth);\n+\t\t    bb->index, bb->frequency, bb->loop_father->num,\n+\t\t    bb_loop_depth (bb));\n \t  continue;\n \t}\n       max_log = LABEL_ALIGN (label);\n@@ -756,7 +757,7 @@ compute_alignments (void)\n \t{\n \t  fprintf(dump_file, \"BB %4i freq %4i loop %2i loop_depth %2i fall %4i branch %4i\",\n \t\t  bb->index, bb->frequency, bb->loop_father->num,\n-\t\t  bb->loop_depth,\n+\t\t  bb_loop_depth (bb),\n \t\t  fallthru_frequency, branch_frequency);\n \t  if (!bb->loop_father->inner && bb->loop_father->num)\n \t    fprintf (dump_file, \" inner_loop\");"}, {"sha": "e2934c7fa8db5245efdcbb377dd44f6529f54704", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -296,7 +296,6 @@ input_bb (struct lto_input_block *ib, enum LTO_tags tag,\n \n   bb->count = (streamer_read_hwi (ib) * count_materialization_scale\n \t       + REG_BR_PROB_BASE / 2) / REG_BR_PROB_BASE;\n-  bb->loop_depth = streamer_read_hwi (ib);\n   bb->frequency = streamer_read_hwi (ib);\n   bb->flags = streamer_read_hwi (ib);\n "}, {"sha": "b7e840844da9bf675215654a28922bdaa1bec8f9", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -176,7 +176,6 @@ output_bb (struct output_block *ob, basic_block bb, struct function *fn)\n \n   streamer_write_uhwi (ob, bb->index);\n   streamer_write_hwi (ob, bb->count);\n-  streamer_write_hwi (ob, bb->loop_depth);\n   streamer_write_hwi (ob, bb->frequency);\n   streamer_write_hwi (ob, bb->flags);\n "}, {"sha": "bf4d42a1fa991574ed567d74d0835fa2705753c7", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -87,6 +87,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-streamer.h\"\n #include \"ipa-inline.h\"\n #include \"alloc-pool.h\"\n+#include \"cfgloop.h\"\n \n /* Estimate runtime of function can easilly run into huge numbers with many\n    nested loops.  Be sure we can compute time * INLINE_SIZE_SCALE * 2 in an\n@@ -2088,7 +2089,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \n \t      es->call_stmt_size = this_size;\n \t      es->call_stmt_time = this_time;\n-\t      es->loop_depth = bb->loop_depth;\n+\t      es->loop_depth = bb_loop_depth (bb);\n \t      edge_set_predicate (edge, &bb_predicate);\n \t    }\n "}, {"sha": "a209894efbe6e06bce4727e72843dd7b9e95f31d", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -2777,7 +2777,7 @@ update_equiv_regs (void)\n      a register can be set below its use.  */\n   FOR_EACH_BB (bb)\n     {\n-      loop_depth = bb->loop_depth;\n+      loop_depth = bb_loop_depth (bb);\n \n       for (insn = BB_HEAD (bb);\n \t   insn != NEXT_INSN (BB_END (bb));\n@@ -3053,7 +3053,7 @@ update_equiv_regs (void)\n      basic block.  */\n   FOR_EACH_BB_REVERSE (bb)\n     {\n-      loop_depth = bb->loop_depth;\n+      loop_depth = bb_loop_depth (bb);\n       for (insn = BB_END (bb);\n \t   insn != PREV_INSN (BB_HEAD (bb));\n \t   insn = PREV_INSN (insn))"}, {"sha": "1117d9a6f2454e853ff8412e2db835feb050ad93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -1,3 +1,7 @@\n+2012-08-13  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-prof/update-loopch.c: Adjust.\n+\n 2012-08-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54200"}, {"sha": "e2656a30645bd6d05f808b160f79ba1bba1b674d", "filename": "gcc/testsuite/gcc.dg/tree-prof/update-loopch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -14,7 +14,7 @@ main ()\n /* Loop header copying will peel away the initial conditional, so the loop body\n    is once reached directly from entry point of function, rest via loopback\n    edge.  */\n-/* { dg-final-use { scan-ipa-dump \"loop depth 1, count 33334\" \"profile\"} } */\n+/* { dg-final-use { scan-ipa-dump \"loop depth 0, count 33334\" \"profile\"} } */\n /* { dg-final-use { scan-tree-dump \"loop depth 1, count 33332\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n /* { dg-final-use { cleanup-ipa-dump \"profile\" } } */"}, {"sha": "b53abb1d0d228a028bbbe536ffd2d01eb4a9d7d8", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -670,7 +670,7 @@ init_copy_prop (void)\n   FOR_EACH_BB (bb)\n     {\n       gimple_stmt_iterator si;\n-      int depth = bb->loop_depth;\n+      int depth = bb_loop_depth (bb);\n \n       for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n \t{"}, {"sha": "f70dcc842da5abac2cce6deead3576fffb3f3da5", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -1391,7 +1391,7 @@ loop_depth_of_name (tree x)\n   if (!defbb)\n     return 0;\n \n-  return defbb->loop_depth;\n+  return bb_loop_depth (defbb);\n }\n \n /* Record that X is equal to Y in const_and_copies.  Record undo"}, {"sha": "78e17a55582dbb6cd75e1ed40802a170a5f993b7", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"gimple.h\"\n #include \"expr.h\"\n+#include \"cfgloop.h\"\n \n /* This pass propagates the RHS of assignment statements into use\n    sites of the LHS of the assignment.  It's basically a specialized\n@@ -1002,7 +1003,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n static bool\n forward_propagate_addr_expr (tree name, tree rhs)\n {\n-  int stmt_loop_depth = gimple_bb (SSA_NAME_DEF_STMT (name))->loop_depth;\n+  int stmt_loop_depth = bb_loop_depth (gimple_bb (SSA_NAME_DEF_STMT (name)));\n   imm_use_iterator iter;\n   gimple use_stmt;\n   bool all = true;\n@@ -1025,7 +1026,7 @@ forward_propagate_addr_expr (tree name, tree rhs)\n       /* If the use is in a deeper loop nest, then we do not want\n \t to propagate non-invariant ADDR_EXPRs into the loop as that\n \t is likely adding expression evaluations into the loop.  */\n-      if (gimple_bb (use_stmt)->loop_depth > stmt_loop_depth\n+      if (bb_loop_depth (gimple_bb (use_stmt)) > stmt_loop_depth\n \t  && !is_gimple_min_invariant (rhs))\n \t{\n \t  all = false;"}, {"sha": "47df596ee6c2390ad5f8bfacd0282ac870591c03", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -3204,7 +3204,7 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   gimple phi;\n \n   /* Make sure we aren't creating an induction variable.  */\n-  if (block->loop_depth > 0 && EDGE_COUNT (block->preds) == 2)\n+  if (bb_loop_depth (block) > 0 && EDGE_COUNT (block->preds) == 2)\n     {\n       bool firstinsideloop = false;\n       bool secondinsideloop = false;"}, {"sha": "2d2c370201fdcbc608b2e98bfcb90d4660498534", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391886c8e0153d41b3ab4daf4d2dd1d923d9c50f/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=391886c8e0153d41b3ab4daf4d2dd1d923d9c50f", "patch": "@@ -212,7 +212,7 @@ select_best_block (basic_block early_bb,\n     {\n       /* If we've moved into a lower loop nest, then that becomes\n \t our best block.  */\n-      if (temp_bb->loop_depth < best_bb->loop_depth)\n+      if (bb_loop_depth (temp_bb) < bb_loop_depth (best_bb))\n \tbest_bb = temp_bb;\n \n       /* Walk up the dominator tree, hopefully we'll find a shallower\n@@ -223,7 +223,7 @@ select_best_block (basic_block early_bb,\n   /* If we found a shallower loop nest, then we always consider that\n      a win.  This will always give us the most control dependent block\n      within that loop nest.  */\n-  if (best_bb->loop_depth < early_bb->loop_depth)\n+  if (bb_loop_depth (best_bb) < bb_loop_depth (early_bb))\n     return best_bb;\n \n   /* Get the sinking threshold.  If the statement to be moved has memory\n@@ -239,7 +239,7 @@ select_best_block (basic_block early_bb,\n \n   /* If BEST_BB is at the same nesting level, then require it to have\n      significantly lower execution frequency to avoid gratutious movement.  */\n-  if (best_bb->loop_depth == early_bb->loop_depth\n+  if (bb_loop_depth (best_bb) == bb_loop_depth (early_bb)\n       && best_bb->frequency < (early_bb->frequency * threshold / 100.0))\n     return best_bb;\n "}]}