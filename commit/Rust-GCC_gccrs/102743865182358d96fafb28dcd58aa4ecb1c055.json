{"sha": "102743865182358d96fafb28dcd58aa4ecb1c055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAyNzQzODY1MTgyMzU4ZDk2ZmFmYjI4ZGNkNThhYTRlY2IxYzA1NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:54:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:54:09Z"}, "message": "[multiple changes]\n\n2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Set_Is_Checked_Ghost_Entity,\n\tSet_Is_Ignored_Ghost_Entity): Add exceptions to the assertion\n\tcheck.\n\t* sem_ch6.adb (Check_Conformance): Consider only\n\tsource subprograms when checking for Ghost conformance.\n\t* sem_prag.adb (Analyze_Pragma): Handle the case\n\twhere pragma Ghost applies to a stand alone subprogram body that\n\tacts as a compilation unit.\n\t* sem_res.adb: Minor reformatting (merge if statements).\n\n2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function):\n\tCheck whether underlying type is constrained before generating\n\tthe object declaration for the result object of the function.\n\nFrom-SVN: r217226", "tree": {"sha": "bf9f208e9a4706f45ebee492df425edd28d13d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf9f208e9a4706f45ebee492df425edd28d13d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/102743865182358d96fafb28dcd58aa4ecb1c055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102743865182358d96fafb28dcd58aa4ecb1c055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102743865182358d96fafb28dcd58aa4ecb1c055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102743865182358d96fafb28dcd58aa4ecb1c055/comments", "author": null, "committer": null, "parents": [{"sha": "8ad1c2df7449624fa5f7d6b9186099d2dfc1b6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad1c2df7449624fa5f7d6b9186099d2dfc1b6ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad1c2df7449624fa5f7d6b9186099d2dfc1b6ab"}], "stats": {"total": 100, "additions": 67, "deletions": 33}, "files": [{"sha": "99ba43c1f0912ee366628a45ea9011c8c7c7f466", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=102743865182358d96fafb28dcd58aa4ecb1c055", "patch": "@@ -1,3 +1,21 @@\n+2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Set_Is_Checked_Ghost_Entity,\n+\tSet_Is_Ignored_Ghost_Entity): Add exceptions to the assertion\n+\tcheck.\n+\t* sem_ch6.adb (Check_Conformance): Consider only\n+\tsource subprograms when checking for Ghost conformance.\n+\t* sem_prag.adb (Analyze_Pragma): Handle the case\n+\twhere pragma Ghost applies to a stand alone subprogram body that\n+\tacts as a compilation unit.\n+\t* sem_res.adb: Minor reformatting (merge if statements).\n+\n+2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_strm.adb (Build_Record_Or_Elementary_Input_Function):\n+\tCheck whether underlying type is constrained before generating\n+\tthe object declaration for the result object of the function.\n+\n 2014-11-07  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb: Code clean up."}, {"sha": "f9307ab9811bf1be32fb0309f33d70cb68a9b854", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=102743865182358d96fafb28dcd58aa4ecb1c055", "patch": "@@ -4748,6 +4748,7 @@ package body Einfo is\n         or else Ekind (Id) = E_Abstract_State\n         or else Ekind (Id) = E_Component\n         or else Ekind (Id) = E_Discriminant\n+        or else Ekind (Id) = E_Exception\n         or else Ekind (Id) = E_Package_Body\n         or else Ekind (Id) = E_Subprogram_Body);\n       Set_Flag277 (Id, V);\n@@ -4942,6 +4943,7 @@ package body Einfo is\n         or else Ekind (Id) = E_Abstract_State\n         or else Ekind (Id) = E_Component\n         or else Ekind (Id) = E_Discriminant\n+        or else Ekind (Id) = E_Exception\n         or else Ekind (Id) = E_Package_Body\n         or else Ekind (Id) = E_Subprogram_Body);\n       Set_Flag278 (Id, V);"}, {"sha": "da16134f0d20de0a33a1a17f48c1f97f2ca30702", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=102743865182358d96fafb28dcd58aa4ecb1c055", "patch": "@@ -1123,9 +1123,15 @@ package body Exp_Strm is\n \n       J := 1;\n \n+      --  In the presence of multiple instantiations (as in uses of the Booch\n+      --  components) the base type may be private, and the underlying type\n+      --  already constrained, in which case there's no discriminant constraint\n+      --  to construct.\n+\n       if Has_Discriminants (Typ)\n         and then\n           No (Discriminant_Default_Value (First_Discriminant (Typ)))\n+        and then not Is_Constrained (Underlying_Type (B_Typ))\n       then\n          Discr := First_Discriminant (B_Typ);\n "}, {"sha": "8219728aa7013782a5d837ecbf248db6f11d389c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=102743865182358d96fafb28dcd58aa4ecb1c055", "patch": "@@ -4766,9 +4766,14 @@ package body Sem_Ch6 is\n             return;\n \n          --  Pragma Ghost behaves as a convention in the context of subtype\n-         --  conformance (SPARK RM 6.9(5)).\n+         --  conformance (SPARK RM 6.9(5)). Do not check internally generated\n+         --  subprograms as their spec may reside in a Ghost region and their\n+         --  body not, or vice versa.\n \n-         elsif Is_Ghost_Entity (Old_Id) /= Is_Ghost_Entity (New_Id) then\n+         elsif Comes_From_Source (Old_Id)\n+           and then Comes_From_Source (New_Id)\n+           and then Is_Ghost_Entity (Old_Id) /= Is_Ghost_Entity (New_Id)\n+         then\n             Conformance_Error (\"\\ghost modes do not match!\");\n             return;\n          end if;"}, {"sha": "0276b5e7e3333e18763c07004134ab0be9c66bf2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=102743865182358d96fafb28dcd58aa4ecb1c055", "patch": "@@ -14216,7 +14216,7 @@ package body Sem_Prag is\n          --  pragma Ghost [ (boolean_EXPRESSION) ];\n \n          when Pragma_Ghost => Ghost : declare\n-            Context   : constant Node_Id := Parent (N);\n+            Context   : Node_Id;\n             Expr      : Node_Id;\n             Id        : Entity_Id;\n             Orig_Stmt : Node_Id;\n@@ -14228,6 +14228,14 @@ package body Sem_Prag is\n             Check_No_Identifiers;\n             Check_At_Most_N_Arguments (1);\n \n+            Context := Parent (N);\n+\n+            --  Handle compilation units\n+\n+            if Nkind (Context) = N_Compilation_Unit_Aux then\n+               Context := Unit (Parent (Context));\n+            end if;\n+\n             Id   := Empty;\n             Stmt := Prev (N);\n             while Present (Stmt) loop"}, {"sha": "addc32c790e1374c8a89286a493c1d200e6c724d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102743865182358d96fafb28dcd58aa4ecb1c055/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=102743865182358d96fafb28dcd58aa4ecb1c055", "patch": "@@ -7053,42 +7053,37 @@ package body Sem_Res is\n       end if;\n \n       --  The following checks are only relevant when SPARK_Mode is on as they\n-      --  are not standard Ada legality rules.\n+      --  are not standard Ada legality rules. An effectively volatile object\n+      --  subject to enabled properties Async_Writers or Effective_Reads must\n+      --  appear in a specific context.\n \n-      if SPARK_Mode = On then\n-\n-         --  An effectively volatile object subject to enabled properties\n-         --  Async_Writers or Effective_Reads must appear in a specific\n-         --  context.\n-\n-         if Is_Object (E)\n-           and then Is_Effectively_Volatile (E)\n-           and then\n-             (Async_Writers_Enabled (E) or else Effective_Reads_Enabled (E))\n-           and then Comes_From_Source (N)\n-         then\n-            --  The effectively volatile objects appears in a \"non-interfering\n-            --  context\" as defined in SPARK RM 7.1.3(13).\n+      if SPARK_Mode = On\n+        and then Is_Object (E)\n+        and then Is_Effectively_Volatile (E)\n+        and then\n+          (Async_Writers_Enabled (E) or else Effective_Reads_Enabled (E))\n+        and then Comes_From_Source (N)\n+      then\n+         --  The effectively volatile objects appears in a \"non-interfering\n+         --  context\" as defined in SPARK RM 7.1.3(13).\n \n-            if Is_OK_Volatile_Context (Par, N) then\n-               null;\n+         if Is_OK_Volatile_Context (Par, N) then\n+            null;\n \n-            --  Assume that references to effectively volatile objects that\n-            --  appear as actual parameters in a procedure call are always\n-            --  legal. A full legality check is done when the actuals are\n-            --  resolved.\n+         --  Assume that references to effectively volatile objects that appear\n+         --  as actual parameters in a procedure call are always legal. A full\n+         --  legality check is done when the actuals are resolved.\n \n-            elsif Nkind (Par) = N_Procedure_Call_Statement then\n-               null;\n+         elsif Nkind (Par) = N_Procedure_Call_Statement then\n+            null;\n \n-            --  Otherwise the context causes a side effect with respect to the\n-            --  effectively volatile object.\n+         --  Otherwise the context causes a side effect with respect to the\n+         --  effectively volatile object.\n \n-            else\n-               SPARK_Msg_N\n-                 (\"volatile object cannot appear in this context \"\n-                  & \"(SPARK RM 7.1.3(13))\", N);\n-            end if;\n+         else\n+            SPARK_Msg_N\n+              (\"volatile object cannot appear in this context \"\n+               & \"(SPARK RM 7.1.3(13))\", N);\n          end if;\n       end if;\n "}]}