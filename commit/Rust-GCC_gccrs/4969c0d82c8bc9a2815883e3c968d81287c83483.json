{"sha": "4969c0d82c8bc9a2815883e3c968d81287c83483", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2OWMwZDgyYzhiYzlhMjgxNTg4M2UzYzk2OGQ4MTI4N2M4MzQ4Mw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2005-07-13T16:28:25Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2005-07-13T16:28:25Z"}, "message": "linux.h (TARGET_HAS_F_SETLKW): Renamed to ...\n\n2005-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/alpha/linux.h (TARGET_HAS_F_SETLKW): Renamed to ...\n\t(TARGET_POSIX_IO): This.\n\t* config/darwin.h: Likewise.\n\t* config/freebsd.h: Likewise.\n\t* config/linux.h: Likewise.\n\t* config/lynx.h: Likewise.\n\t* config/netbsd.h: Likewise.\n\t* config/rs6000/linux64.h: Likewise.\n\t* config/rs6000/linux.h: Likewise.\n\t* config/s390/tpf.h: Likewise.\n\t* config/sh/embed-elf.h: Likewise.\n\t* config/sparc/linux64.h: Likewise.\n\t* config/sparc/linux.h: Likewise.\n\t* config/svr4.h: Likewise.\n\t* gcov-io.h: Likewise.\n\n\t* doc/tm.texi: Updated.\n\n\t* libgcov.c (create_file_directory): Defined only if\n\tTARGET_POSIX_IO is defined.\n\t(gcov_exit): Call create_file_directory only if TARGET_POSIX_IO\n\tis defined.\n\nFrom-SVN: r101973", "tree": {"sha": "5dcc938a73f1b1d0d9190bda9b9610df0e6e1978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dcc938a73f1b1d0d9190bda9b9610df0e6e1978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4969c0d82c8bc9a2815883e3c968d81287c83483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4969c0d82c8bc9a2815883e3c968d81287c83483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4969c0d82c8bc9a2815883e3c968d81287c83483", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4969c0d82c8bc9a2815883e3c968d81287c83483/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98b6d47767360e010bc243995ff1091cc2ef9c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b6d47767360e010bc243995ff1091cc2ef9c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b6d47767360e010bc243995ff1091cc2ef9c3d"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "03ca42bd23a354b74a26140b30194b26b6f872f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -1,3 +1,28 @@\n+2005-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/alpha/linux.h (TARGET_HAS_F_SETLKW): Renamed to ...\n+\t(TARGET_POSIX_IO): This.\n+\t* config/darwin.h: Likewise.\n+\t* config/freebsd.h: Likewise.\n+\t* config/linux.h: Likewise.\n+\t* config/lynx.h: Likewise.\n+\t* config/netbsd.h: Likewise.\n+\t* config/rs6000/linux64.h: Likewise.\n+\t* config/rs6000/linux.h: Likewise.\n+\t* config/s390/tpf.h: Likewise.\n+\t* config/sh/embed-elf.h: Likewise.\n+\t* config/sparc/linux64.h: Likewise.\n+\t* config/sparc/linux.h: Likewise.\n+\t* config/svr4.h: Likewise.\n+\t* gcov-io.h: Likewise.\n+\n+\t* doc/tm.texi: Updated.\n+\n+\t* libgcov.c (create_file_directory): Defined only if\n+\tTARGET_POSIX_IO is defined.\n+\t(gcov_exit): Call create_file_directory only if TARGET_POSIX_IO\n+\tis defined.\n+\n 2005-07-13  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-operands.c (get_expr_operands): Fix typo in previous patch."}, {"sha": "0773462692d4082c9996dcb4f8b793de5475334e", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -71,7 +71,7 @@ Boston, MA 02110-1301, USA.  */\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO\n \n #define LINK_GCC_C_SEQUENCE_SPEC \\\n   \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\""}, {"sha": "c33e2030e4a97b22e05522f1425415a8aa46323f", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -1026,7 +1026,7 @@ void darwin_register_objc_includes (const char *, const char *, int);\n void add_framework_path (char *);\n #define TARGET_OPTF add_framework_path\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO\n \n /* All new versions of Darwin have C99 functions.  */\n #define TARGET_C99_FUNCTIONS 1"}, {"sha": "21dc81e6013a13fa549c0321cf004b931d9cd52b", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -84,4 +84,4 @@ Boston, MA 02110-1301, USA.  */\n /* Used by libgcc2.c.  We support file locking with fcntl / F_SETLKW.\n    This enables the test coverage code to use file locking when exiting a\n    program, which avoids race conditions if the program has forked.  */\n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO"}, {"sha": "3853fa42a005bff30d7b487123fbff43488fbd61", "filename": "gcc/config/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -103,4 +103,4 @@ Boston, MA 02110-1301, USA.  */\n    is present in the runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO"}, {"sha": "271fb626df392a06512c57bc39315d81a2e32aa1", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -173,6 +173,6 @@ Boston, MA 02110-1301, USA.  */\n # define NO_IMPLICIT_EXTERN_C\n #endif\n \n-#ifndef TARGET_HAS_F_SETLKW\n-# define TARGET_HAS_F_SETLKW\n+#ifndef TARGET_POSIX_IO\n+# define TARGET_POSIX_IO\n #endif"}, {"sha": "5386b656512b5367248b790f7ffa9c3202e4e63c", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -156,8 +156,8 @@ Boston, MA 02110-1301, USA.  */\n     fprintf ((STREAM), \"void __fini() {\\n\\t%s();\\n}\\n\", (FUNC));\t\\\n   } while (0)\n \n-#undef TARGET_HAS_F_SETLKW\n-#define TARGET_HAS_F_SETLKW\n+#undef TARGET_POSIX_IO\n+#define TARGET_POSIX_IO\n \n /* Handle #pragma weak and #pragma pack.  */\n "}, {"sha": "497fcca2bc15eb07ff05415c23ae2bb576de76d1", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -110,7 +110,7 @@\n \n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO\n \n #define MD_UNWIND_SUPPORT \"config/rs6000/linux-unwind.h\"\n "}, {"sha": "31bf8ac86ed369ab823c21166ce44de60bd18981", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -536,7 +536,7 @@ while (0)\n \n #define TARGET_ASM_FILE_END rs6000_elf_end_indicate_exec_stack\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO\n \n #define LINK_GCC_C_SEQUENCE_SPEC \\\n   \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\""}, {"sha": "c1feaba09ae01b0368c2d6dba2f733ae733e0fb1", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -32,7 +32,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n #define NO_IMPLICIT_EXTERN_C\n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n "}, {"sha": "2542c4c16bc696fa1c8293202ab44808ca2910e7", "filename": "gcc/config/sh/embed-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fembed-elf.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -23,4 +23,4 @@ Boston, MA 02110-1301, USA.  */\n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"_\"\n \n-#undef TARGET_HAS_F_SETLKW\n+#undef TARGET_POSIX_IO"}, {"sha": "c90080e1eed7700e49b3abbc1793c673c59df794", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -208,7 +208,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO\n \n #undef LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\"}, {"sha": "d7ebb86e945e7797386b903b304143323655e248", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -342,7 +342,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    runtime library.  */\n #define TARGET_C99_FUNCTIONS 1\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO\n \n #undef LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\"}, {"sha": "6fa88fcd821ddace0b01ca2129c9102349bbf4c4", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -203,4 +203,4 @@ Boston, MA 02110-1301, USA.\n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n \n-#define TARGET_HAS_F_SETLKW\n+#define TARGET_POSIX_IO"}, {"sha": "5feacf5668e68d92a11cb85a05efa65f0e8e1f1c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -9275,12 +9275,13 @@ You need only define this macro if the default of @samp{\"LIBRARY_PATH\"}\n is wrong.\n @end defmac\n \n-@defmac TARGET_HAS_F_SETLKW\n-Define this macro if the target supports file locking with fcntl / F_SETLKW@.\n-Note that this functionality is part of POSIX@.\n-Defining @code{TARGET_HAS_F_SETLKW} will enable the test coverage code\n+@defmac TARGET_POSIX_IO\n+Define this macro if the target supports the following POSIX@ file\n+functions, access, mkdir and  file locking with fcntl / F_SETLKW@.\n+Defining @code{TARGET_POSIX_IO} will enable the test coverage code\n to use file locking when exiting a program, which avoids race conditions\n-if the program has forked.\n+if the program has forked. It will also create directories at run-time\n+for cross-profiling.  @xref{Cross-profiling}.\n @end defmac\n \n @defmac MAX_CONDITIONAL_EXECUTE"}, {"sha": "f3607d978908c8902f2d70ffdc23b31b332cc186", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -195,7 +195,7 @@ typedef signed gcov_type __attribute__ ((mode (QI)));\n #endif\n \n \n-#if defined (TARGET_HAS_F_SETLKW)\n+#if defined (TARGET_POSIX_IO)\n #define GCOV_LOCKED 1\n #else\n #define GCOV_LOCKED 0"}, {"sha": "de44d911f017af9c1eb8c919b9f2a3c22ff994ae", "filename": "gcc/libgcov.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969c0d82c8bc9a2815883e3c968d81287c83483/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=4969c0d82c8bc9a2815883e3c968d81287c83483", "patch": "@@ -91,6 +91,7 @@ static gcov_unsigned_t gcov_crc32;\n /* Size of the longest file name. */\n static size_t gcov_max_filename = 0;\n \n+#ifdef TARGET_POSIX_IO\n /* Make sure path component of the given FILENAME exists, create \n    missing directories. FILENAME must be writable. \n    Returns zero on success, or -1 if an error occurred.  */\n@@ -122,6 +123,7 @@ create_file_directory (char *filename)\n       };\n   return 0;\n }\n+#endif\n \n /* Check if VERSION of the info block PTR matches libgcov one.\n    Return 1 on success, or zero in case of versions mismatch.\n@@ -299,13 +301,15 @@ gcov_exit (void)\n       \n       if (!gcov_open (gi_filename))\n \t{\n+#ifdef TARGET_POSIX_IO\n \t  /* Open failed likely due to missed directory.\n \t     Create directory and retry to open file. */\n           if (create_file_directory (gi_filename))\n \t    {\n \t      fprintf (stderr, \"profiling:%s:Skip\\n\", gi_filename);\n \t      continue;\n \t    }\n+#endif\n \t  if (!gcov_open (gi_filename))\n \t    {\n               fprintf (stderr, \"profiling:%s:Cannot open\\n\", gi_filename);"}]}