{"sha": "e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwN2RiZWE3NDQ0MTEyYTFiMWNkM2U3ZWE0ZTI0MDFkMzJkYzllYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-02-19T01:16:30Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-02-19T01:16:30Z"}, "message": "re PR java/20056 ('verification failed: incompatible type on stack' with --indirect-dispatch)\n\n\tPR java/20056:\n\t* include/jvm.h (_Jv_Linker::has_field_p): Declare.\n\t* link.cc (has_field_p): New function.\n\t* verify.cc (check_field_constant): Added 'putfield' argument.\n\t(verify_instructions_0): Updated.\n\t(type::equals): New method.\n\nFrom-SVN: r95259", "tree": {"sha": "ec5509829a5ead4d92fffe9ed882573355f2da97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec5509829a5ead4d92fffe9ed882573355f2da97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/comments", "author": null, "committer": null, "parents": [{"sha": "1870a43b3e9ab55bc5b29284c64be32d08989bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1870a43b3e9ab55bc5b29284c64be32d08989bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1870a43b3e9ab55bc5b29284c64be32d08989bf3"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "a81a389ff19e422cbffe3831dc691b50575bd294", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "patch": "@@ -1,3 +1,12 @@\n+2005-02-18  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/20056:\n+\t* include/jvm.h (_Jv_Linker::has_field_p): Declare.\n+\t* link.cc (has_field_p): New function.\n+\t* verify.cc (check_field_constant): Added 'putfield' argument.\n+\t(verify_instructions_0): Updated.\n+\t(type::equals): New method.\n+\n 2005-02-18  Anthony Green  <green@redhat.com>\n \n \t* NEWS: Draft of libgcj NEWS for 4.0."}, {"sha": "61e426f2e663c5fb3738dff6fe395e580b9de206", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "patch": "@@ -278,6 +278,7 @@ class _Jv_Linker\n \n public:\n \n+  static bool has_field_p (jclass, _Jv_Utf8Const *);\n   static void print_class_loaded (jclass);\n   static void resolve_class_ref (jclass, jclass *);\n   static void wait_for_state(jclass, int);"}, {"sha": "cfaa3cd363d6d3186cbff354d41b74a805f0c870", "filename": "libjava/link.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "patch": "@@ -131,6 +131,18 @@ _Jv_Linker::find_field_helper (jclass search, _Jv_Utf8Const *name,\n   return NULL;\n }\n \n+bool\n+_Jv_Linker::has_field_p (jclass search, _Jv_Utf8Const *field_name)\n+{\n+  for (int i = 0; i < search->field_count; ++i)\n+    {\n+      _Jv_Field *field = &search->fields[i];\n+      if (_Jv_equalUtf8Consts (field->name, field_name))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n // Find a field.\n // KLASS is the class that is requesting the field.\n // OWNER is the class in which the field should be found."}, {"sha": "9df031634fa6b33ab99d731fedc047f9227c8935", "filename": "libjava/verify.cc", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=e207dbea7444112a1b1cd3e7ea4e2401d32dc9ea", "patch": "@@ -1,6 +1,6 @@\n // verify.cc - verify bytecode\n \n-/* Copyright (C) 2001, 2002, 2003, 2004  Free Software Foundation\n+/* Copyright (C) 2001, 2002, 2003, 2004, 2005  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -751,6 +751,20 @@ class _Jv_BytecodeVerifier\n       return klass->compatible(k.klass, verifier);\n     }\n \n+    bool equals (const type &other, _Jv_BytecodeVerifier *vfy)\n+    {\n+      // Only works for reference types.\n+      if (key != reference_type\n+\t  || key != uninitialized_reference_type\n+\t  || other.key != reference_type\n+\t  || other.key != uninitialized_reference_type)\n+\treturn false;\n+      // Only for single-valued types.\n+      if (klass->ref_next || other.klass->ref_next)\n+\treturn false;\n+      return klass->equals (other.klass, vfy);\n+    }\n+\n     bool isvoid () const\n     {\n       return key == void_type;\n@@ -1963,17 +1977,35 @@ class _Jv_BytecodeVerifier\n   }\n \n   // Return field's type, compute class' type if requested.\n-  type check_field_constant (int index, type *class_type = NULL)\n+  // If PUTFIELD is true, use the special 'putfield' semantics.\n+  type check_field_constant (int index, type *class_type = NULL,\n+\t\t\t     bool putfield = false)\n   {\n     _Jv_Utf8Const *name, *field_type;\n     type ct = handle_field_or_method (index,\n \t\t\t\t      JV_CONSTANT_Fieldref,\n \t\t\t\t      &name, &field_type);\n     if (class_type)\n       *class_type = ct;\n+    type result;\n     if (field_type->first() == '[' || field_type->first() == 'L')\n-      return type (field_type, this);\n-    return get_type_val_for_signature (field_type->first());\n+      result = type (field_type, this);\n+    else\n+      result = get_type_val_for_signature (field_type->first());\n+\n+    // We have an obscure special case here: we can use `putfield' on\n+    // a field declared in this class, even if `this' has not yet been\n+    // initialized.\n+    if (putfield\n+\t&& ! current_state->this_type.isinitialized ()\n+\t&& current_state->this_type.pc == type::SELF\n+\t&& current_state->this_type.equals (ct, this)\n+\t// We don't look at the signature, figuring that if it is\n+\t// wrong we will fail during linking.  FIXME?\n+\t&& _Jv_Linker::has_field_p (current_class, name))\n+      class_type->set_uninitialized (type::SELF, this);\n+\n+    return result;\n   }\n \n   type check_method_constant (int index, bool is_interface,\n@@ -2783,15 +2815,8 @@ class _Jv_BytecodeVerifier\n \t  case op_putfield:\n \t    {\n \t      type klass;\n-\t      type field = check_field_constant (get_ushort (), &klass);\n+\t      type field = check_field_constant (get_ushort (), &klass, true);\n \t      pop_type (field);\n-\n-\t      // We have an obscure special case here: we can use\n-\t      // `putfield' on a field declared in this class, even if\n-\t      // `this' has not yet been initialized.\n-\t      if (! current_state->this_type.isinitialized ()\n-\t\t  && current_state->this_type.pc == type::SELF)\n-\t\tklass.set_uninitialized (type::SELF, this);\n \t      pop_type (klass);\n \t    }\n \t    break;"}]}