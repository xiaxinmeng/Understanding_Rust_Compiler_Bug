{"sha": "a6dcb051e93cdf2b5280a11a9f4225d6cc46b434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkY2IwNTFlOTNjZGYyYjUyODBhMTFhOWY0MjI1ZDZjYzQ2YjQzNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-11-29T12:41:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-11-29T12:41:41Z"}, "message": "decl.c (make_packable_type): Retrieve the real name of the type.\n\n\t* decl.c (make_packable_type): Retrieve the real name of the type.\n\t(maybe_pad_type): Simplify similar code.\n\nFrom-SVN: r130512", "tree": {"sha": "b9c209179e868e9dec41ead2db3a311487b18c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c209179e868e9dec41ead2db3a311487b18c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434/comments", "author": null, "committer": null, "parents": [{"sha": "17a15a5c4ac6cf9c43584cd76a825e843c09c4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a15a5c4ac6cf9c43584cd76a825e843c09c4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a15a5c4ac6cf9c43584cd76a825e843c09c4f9"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "c65713b6794bfda9db83991c7366b604a35c73a9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6dcb051e93cdf2b5280a11a9f4225d6cc46b434", "patch": "@@ -1,3 +1,8 @@\n+2007-11-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (make_packable_type): Retrieve the real name of the type.\n+\t(maybe_pad_type): Simplify similar code.\n+\n 2007-11-28  Samuel Tardieu  <sam@rfc1149.net>\n \n \tPR ada/15803"}, {"sha": "876b1595ecd9d5fd925627c0a7397709de3497d3", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dcb051e93cdf2b5280a11a9f4225d6cc46b434/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=a6dcb051e93cdf2b5280a11a9f4225d6cc46b434", "patch": "@@ -5198,13 +5198,17 @@ static tree\n make_packable_type (tree type)\n {\n   tree new_type = make_node (TREE_CODE (type));\n+  tree name = TYPE_NAME (type);\n   tree field_list = NULL_TREE;\n   tree old_field;\n \n+  if (name && TREE_CODE (name) == TYPE_DECL)\n+    name = DECL_NAME (name);\n+\n   /* Copy the name and flags from the old type to that of the new and set\n      the alignment to try for an integral type.  For QUAL_UNION_TYPE,\n      also copy the size.  */\n-  TYPE_NAME (new_type) = TYPE_NAME (type);\n+  TYPE_NAME (new_type) = name;\n   TYPE_JUSTIFIED_MODULAR_P (new_type)\n     = TYPE_JUSTIFIED_MODULAR_P (type);\n   TYPE_CONTAINS_TEMPLATE_P (new_type) = TYPE_CONTAINS_TEMPLATE_P (type);\n@@ -5394,16 +5398,18 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n   /* Unless debugging information isn't being written for the input type,\n      write a record that shows what we are a subtype of and also make a\n      variable that indicates our size, if variable. */\n-  if (TYPE_NAME (record) && AGGREGATE_TYPE_P (type)\n+  if (TYPE_NAME (record)\n+      && AGGREGATE_TYPE_P (type)\n       && (TREE_CODE (TYPE_NAME (type)) != TYPE_DECL\n \t  || !DECL_IGNORED_P (TYPE_NAME (type))))\n     {\n       tree marker = make_node (RECORD_TYPE);\n-      tree name = (TREE_CODE (TYPE_NAME (record)) == TYPE_DECL\n-\t\t   ? DECL_NAME (TYPE_NAME (record))\n-\t\t   : TYPE_NAME (record));\n+      tree name = TYPE_NAME (record);\n       tree orig_name = TYPE_NAME (type);\n \n+      if (TREE_CODE (name) == TYPE_DECL)\n+\tname = DECL_NAME (name);\n+\n       if (TREE_CODE (orig_name) == TYPE_DECL)\n \torig_name = DECL_NAME (orig_name);\n "}]}