{"sha": "22c30bc09a6ff27638521bd82ac5e25c525f1273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJjMzBiYzA5YTZmZjI3NjM4NTIxYmQ4MmFjNWUyNWM1MjVmMTI3Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-01-16T19:50:11Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-16T19:50:11Z"}, "message": "re PR fortran/51809 ([OOP] ICE (segfault) depending on USE statements order)\n\n2012-01-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51809\n        * class.c (gfc_find_derived_vtab): Mark __vtab and\n        __def_init as FL_VARIABLE not as FL_PARAMETER.\n        * expr.c (gfc_simplify_expr): Remove special\n        handling of __vtab.\n        * resolve.c (resolve_values): Ditto.\n        * trans-decl.c (gfc_get_symbol_decl): Mark __vtab\n        and __def_init as TREE_READONLY.\n\n2012-01-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51809\n        * gfortran.dg/use_20.f90: New\n\nFrom-SVN: r183219", "tree": {"sha": "2dcdb80d1e52c4767c27a1030fe645cf115655e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dcdb80d1e52c4767c27a1030fe645cf115655e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22c30bc09a6ff27638521bd82ac5e25c525f1273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c30bc09a6ff27638521bd82ac5e25c525f1273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c30bc09a6ff27638521bd82ac5e25c525f1273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c30bc09a6ff27638521bd82ac5e25c525f1273/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/645c7a55f8861f10f68f3e7fc2ce86fa57fb6b15"}], "stats": {"total": 81, "additions": 74, "deletions": 7}, "files": [{"sha": "4fd31382f565dbec36b7cd79f187a95c5eedcb90", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=22c30bc09a6ff27638521bd82ac5e25c525f1273", "patch": "@@ -1,3 +1,14 @@\n+2012-01-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51809\n+\t* class.c (gfc_find_derived_vtab): Mark __vtab and\n+\t__def_init as FL_VARIABLE not as FL_PARAMETER.\n+\t* expr.c (gfc_simplify_expr): Remove special\n+\thandling of __vtab.\n+\t* resolve.c (resolve_values): Ditto.\n+\t* trans-decl.c (gfc_get_symbol_decl): Mark __vtab\n+\tand __def_init as TREE_READONLY.\n+\n 2012-01-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* trans-array.c (gfc_trans_create_temp_array): In the case of a"}, {"sha": "5e5de1400e6ccfa2ebbac33feb3595cd2e0f97a3", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=22c30bc09a6ff27638521bd82ac5e25c525f1273", "patch": "@@ -588,7 +588,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t{\n \t  gfc_get_symbol (name, ns, &vtab);\n \t  vtab->ts.type = BT_DERIVED;\n-\t  if (gfc_add_flavor (&vtab->attr, FL_PARAMETER, NULL,\n+\t  if (gfc_add_flavor (&vtab->attr, FL_VARIABLE, NULL,\n \t                      &gfc_current_locus) == FAILURE)\n \t    goto cleanup;\n \t  vtab->attr.target = 1;\n@@ -682,7 +682,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  def_init->attr.target = 1;\n \t\t  def_init->attr.save = SAVE_IMPLICIT;\n \t\t  def_init->attr.access = ACCESS_PUBLIC;\n-\t\t  def_init->attr.flavor = FL_PARAMETER;\n+\t\t  def_init->attr.flavor = FL_VARIABLE;\n \t\t  gfc_set_sym_referenced (def_init);\n \t\t  def_init->ts.type = BT_DERIVED;\n \t\t  def_init->ts.u.derived = derived;"}, {"sha": "8f04c73107761b5fece80788a61ee4d7eb33df0d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=22c30bc09a6ff27638521bd82ac5e25c525f1273", "patch": "@@ -1883,8 +1883,7 @@ gfc_simplify_expr (gfc_expr *p, int type)\n \t initialization expression, or we want a subsection.  */\n       if (p->symtree->n.sym->attr.flavor == FL_PARAMETER\n \t  && (gfc_init_expr_flag || p->ref\n-\t      || p->symtree->n.sym->value->expr_type != EXPR_ARRAY)\n-\t  && !p->symtree->n.sym->attr.vtab)\n+\t      || p->symtree->n.sym->value->expr_type != EXPR_ARRAY))\n \t{\n \t  if (simplify_parameter_variable (p, type) == FAILURE)\n \t    return FAILURE;"}, {"sha": "c169b9efbf115af74485f1e228d03d8101fa82dd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=22c30bc09a6ff27638521bd82ac5e25c525f1273", "patch": "@@ -9637,7 +9637,7 @@ resolve_values (gfc_symbol *sym)\n {\n   gfc_try t;\n \n-  if (sym->value == NULL || sym->attr.use_assoc)\n+  if (sym->value == NULL)\n     return;\n \n   if (sym->value->expr_type == EXPR_STRUCTURE)\n@@ -12195,7 +12195,7 @@ resolve_fl_parameter (gfc_symbol *sym)\n   /* Make sure the types of derived parameters are consistent.  This\n      type checking is deferred until resolution because the type may\n      refer to a derived type from the host.  */\n-  if (sym->ts.type == BT_DERIVED && sym->value\n+  if (sym->ts.type == BT_DERIVED\n       && !gfc_compare_types (&sym->ts, &sym->value->ts))\n     {\n       gfc_error (\"Incompatible derived type in PARAMETER at %L\","}, {"sha": "e8e54c77b79c5b94c664977a62a7b8500fb6bff0", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=22c30bc09a6ff27638521bd82ac5e25c525f1273", "patch": "@@ -1485,7 +1485,10 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \n   if (sym->attr.vtab\n       || (sym->name[0] == '_' && strncmp (\"__def_init\", sym->name, 10) == 0))\n-    GFC_DECL_PUSH_TOPLEVEL (decl) = 1;\n+    {\n+      TREE_READONLY (decl) = 1;\n+      GFC_DECL_PUSH_TOPLEVEL (decl) = 1;\n+    }\n \n   return decl;\n }"}, {"sha": "b9054531065dfdb2f08df624b2249e2b36c19d57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22c30bc09a6ff27638521bd82ac5e25c525f1273", "patch": "@@ -1,3 +1,8 @@\n+2012-01-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51809\n+\t* gfortran.dg/use_20.f90: New\n+\n 2012-01-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51868"}, {"sha": "61a15d9e40d321e1a9d430554e6b28d9020d2c56", "filename": "gcc/testsuite/gfortran.dg/use_20.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c30bc09a6ff27638521bd82ac5e25c525f1273/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_20.f90?ref=22c30bc09a6ff27638521bd82ac5e25c525f1273", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+!\n+! PR fortran/51809\n+!\n+! Contributed by Kacper Kowalik\n+!\n+module foo\n+   implicit none\n+\n+   type foo_t\n+   contains\n+      procedure :: func_foo\n+   end type foo_t\n+\n+contains\n+\n+   subroutine func_foo(this)\n+      implicit none\n+      class(foo_t), intent(in) :: this\n+   end subroutine func_foo\n+\n+end module foo\n+\n+module bar\n+   use foo,   only: foo_t\n+\n+   implicit none\n+\n+   type, extends(foo_t) :: bar_t\n+   contains\n+      procedure :: func_bar\n+   end type bar_t\n+\n+contains\n+\n+   subroutine func_bar(this)\n+      use foo,    only: foo_t     ! <--- removing this line also fixes ICE\n+      implicit none\n+      class(bar_t), intent(in) :: this\n+   end subroutine func_bar\n+\n+end module bar\n+\n+module merry_ICE\n+   use foo,  only: foo_t   ! <------ change order to prevent ICE\n+   use bar,  only: bar_t   ! <------ change order to prevent ICE\n+end module merry_ICE\n+\n+! { dg-final { cleanup-modules \"foo bar merry_ice\" } }"}]}