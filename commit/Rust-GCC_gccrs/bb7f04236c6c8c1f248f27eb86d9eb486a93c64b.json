{"sha": "bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3ZjA0MjM2YzZjOGMxZjI0OGYyN2ViODZkOWViNDg2YTkzYzY0Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-25T13:01:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-25T13:01:14Z"}, "message": "optabs.h (enum optab_index): Remove OTI_lrint.\n\n2006-10-25  Richard Guenther  <rguenther@suse.de>\n\n\t* optabs.h (enum optab_index): Remove OTI_lrint.\n\t(enum convert_optab_index): Add COI_lrint.\n\t(lrint_optab): Adjust.\n\t(expand_sfix_optab): Declare.\n\t* optabs.c (expand_sfix_optab): New function.\n\t(init_optabs): Init lrint_optab as conversion optab.\n\t* genopinit.c (lrint_optab): Change to a conversion optab.\n\t* builtins.c (expand_builtin_int_roundingfn_2): Adjust to\n\texpansion via conversion optab.\n\t* config/i386/i386.md (*fistdi2_1): Remove\n\tflag_unsafe_math_optimizations guard.\n\t(fistdi2, fistdi2_with_temp, *fist<mode>2_1, fist<mode>2,\n\tfist<mode>2_with_temp): Likewise.\n\t(lrint<mode>2): Split into...\n\t(lrintxf<mode>2): ... x87 part\n\t(lrint<mode>di2, lrint<mode>si2): ... and SSE parts.\n\t* config/i386/sse.md (sse_cvtss2si_2, sse_cvtss2_siq_2,\n\tsse2_cvtsd2si_2, sse2_cvtsd2siq_2): New insns for\n\tUNSPEC_FIX_NOTRUNC matching non-vector float modes.\n\t* doc/md.texi (lrintMN2): Document.\n\nFrom-SVN: r118029", "tree": {"sha": "a42a7cd31e5e9d2deb0e1ba2a6a9064a8aeaef12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a42a7cd31e5e9d2deb0e1ba2a6a9064a8aeaef12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef984648a15c2c9b8b5127c1ac2e10f3f9793cec"}], "stats": {"total": 220, "additions": 167, "deletions": 53}, "files": [{"sha": "3db23d454296adadd1220fdaaa61ec59ce9b92c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -1,3 +1,27 @@\n+2006-10-25  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR target/28803\n+\t* optabs.h (enum optab_index): Remove OTI_lrint.\n+\t(enum convert_optab_index): Add COI_lrint.\n+\t(lrint_optab): Adjust.\n+\t(expand_sfix_optab): Declare.\n+\t* optabs.c (expand_sfix_optab): New function.\n+\t(init_optabs): Init lrint_optab as conversion optab.\n+\t* genopinit.c (lrint_optab): Change to a conversion optab.\n+\t* builtins.c (expand_builtin_int_roundingfn_2): Adjust to\n+\texpansion via conversion optab.\n+\t* config/i386/i386.md (*fistdi2_1): Remove\n+\tflag_unsafe_math_optimizations guard.\n+\t(fistdi2, fistdi2_with_temp, *fist<mode>2_1, fist<mode>2,\n+\tfist<mode>2_with_temp): Likewise.\n+\t(lrint<mode>2): Split into...\n+\t(lrintxf<mode>2): ... x87 part\n+\t(lrint<mode>di2, lrint<mode>si2): ... and SSE parts.\n+\t* config/i386/sse.md (sse_cvtss2si_2, sse_cvtss2_siq_2,\n+\tsse2_cvtsd2si_2, sse2_cvtsd2siq_2): New insns for\n+\tUNSPEC_FIX_NOTRUNC matching non-vector float modes.\n+\t* doc/md.texi (lrintMN2): Document.\n+\n 2006-10-25  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR target/28909"}, {"sha": "1dcda03920af7c7377e81276bc2eb13be9d6228f", "filename": "gcc/builtins.c", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -2320,7 +2320,7 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n static rtx\n expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n {\n-  optab builtin_optab;\n+  convert_optab builtin_optab;\n   rtx op0, insns;\n   tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n@@ -2348,45 +2348,37 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n   /* Make a suitable register to place result in.  */\n   mode = TYPE_MODE (TREE_TYPE (exp));\n \n-  /* Before working hard, check whether the instruction is available.  */\n-  if (builtin_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n-    {\n-      target = gen_reg_rtx (mode);\n-\n-      /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n-\t need to expand the argument again.  This way, we will not perform\n-\t side-effects more the once.  */\n-      narg = builtin_save_expr (arg);\n-      if (narg != arg)\n-\t{\n-\t  arg = narg;\n-\t  arglist = build_tree_list (NULL_TREE, arg);\n-\t  exp = build_function_call_expr (fndecl, arglist);\n-\t}\n-\n-      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  target = gen_reg_rtx (mode);\n \n-      start_sequence ();\n+  /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n+     need to expand the argument again.  This way, we will not perform\n+     side-effects more the once.  */\n+  narg = builtin_save_expr (arg);\n+  if (narg != arg)\n+    {\n+      arg = narg;\n+      arglist = build_tree_list (NULL_TREE, arg);\n+      exp = build_function_call_expr (fndecl, arglist);\n+    }\n \n-      /* Compute into TARGET.\n-\t Set TARGET to wherever the result comes back.  */\n-      target = expand_unop (mode, builtin_optab, op0, target, 0);\n+  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n \n-      if (target != 0)\n-\t{\n-\t  /* Output the entire sequence.  */\n-\t  insns = get_insns ();\n-\t  end_sequence ();\n-\t  emit_insn (insns);\n-\t  return target;\n-\t}\n+  start_sequence ();\n \n-      /* If we were unable to expand via the builtin, stop the sequence\n-\t (without outputting the insns) and call to the library function\n-\t with the stabilized argument list.  */\n+  if (expand_sfix_optab (target, op0, builtin_optab))\n+    {\n+      /* Output the entire sequence.  */\n+      insns = get_insns ();\n       end_sequence ();\n+      emit_insn (insns);\n+      return target;\n     }\n \n+  /* If we were unable to expand via the builtin, stop the sequence\n+     (without outputting the insns) and call to the library function\n+     with the stabilized argument list.  */\n+  end_sequence ();\n+\n   target = expand_call (exp, target, target == const0_rtx);\n \n   return target;"}, {"sha": "5e6916724675a80d44703ff5d8b38773fb40ce59", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -17205,7 +17205,6 @@\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"f,f\")]\n \t UNSPEC_FIST))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\n    && !(reload_completed || reload_in_progress)\"\n   \"#\"\n   \"&& 1\"\n@@ -17229,8 +17228,7 @@\n \t(unspec:DI [(match_operand:XF 1 \"register_operand\" \"f\")]\n \t UNSPEC_FIST))\n    (clobber (match_scratch:XF 2 \"=&1f\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n   \"* return output_fix_trunc (insn, operands, 0);\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DI\")])\n@@ -17241,8 +17239,7 @@\n \t UNSPEC_FIST))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=m,m\"))\n    (clobber (match_scratch:XF 3 \"=&1f,&1f\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n   \"#\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DI\")])\n@@ -17275,7 +17272,6 @@\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"f\")]\n \t UNSPEC_FIST))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\n    && !(reload_completed || reload_in_progress)\"\n   \"#\"\n   \"&& 1\"\n@@ -17293,8 +17289,7 @@\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"=m\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"f\")]\n \t UNSPEC_FIST))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n   \"* return output_fix_trunc (insn, operands, 0);\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -17304,8 +17299,7 @@\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"f\")]\n \t UNSPEC_FIST))\n    (clobber (match_operand:X87MODEI12 2 \"memory_operand\" \"=m\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_USE_FANCY_MATH_387\"\n   \"#\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -17331,13 +17325,25 @@\n \t\t       UNSPEC_FIST))]\n   \"\")\n \n-(define_expand \"lrint<mode>2\"\n+(define_expand \"lrintxf<mode>2\"\n   [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\")\n-\t(unspec:X87MODEI [(match_operand:XF 1 \"register_operand\" \"\")]\n-\t UNSPEC_FIST))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n+     (unspec:X87MODEI [(match_operand:XF 1 \"register_operand\" \"\")]\n+      UNSPEC_FIST))]\n+  \"TARGET_USE_FANCY_MATH_387\"\n+  \"\")\n+\n+(define_expand \"lrint<mode>di2\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+     (unspec:DI [(match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+      UNSPEC_FIX_NOTRUNC))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH && TARGET_64BIT\"\n+  \"\")\n+\n+(define_expand \"lrint<mode>si2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+     (unspec:SI [(match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+      UNSPEC_FIX_NOTRUNC))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"\")\n \n ;; Rounding mode control word calculation could clobber FLAGS_REG."}, {"sha": "8f5786a6659ce1b9aa3c4efdeede69eab3b4eb5f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -974,6 +974,16 @@\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"sse_cvtss2si_2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SI [(match_operand:SF 1 \"nonimmediate_operand\" \"x,m\")]\n+\t UNSPEC_FIX_NOTRUNC))]\n+  \"TARGET_SSE\"\n+  \"cvtss2si\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"sse_cvtss2siq\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(unspec:DI\n@@ -987,6 +997,16 @@\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"sse_cvtss2siq_2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:DI [(match_operand:SF 1 \"nonimmediate_operand\" \"x,m\")]\n+\t UNSPEC_FIX_NOTRUNC))]\n+  \"TARGET_SSE && TARGET_64BIT\"\n+  \"cvtss2siq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"sse_cvttss2si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI\n@@ -1932,6 +1952,16 @@\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"sse2_cvtsd2si_2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SI [(match_operand:DF 1 \"nonimmediate_operand\" \"x,m\")]\n+\t UNSPEC_FIX_NOTRUNC))]\n+  \"TARGET_SSE2\"\n+  \"cvtsd2si\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"sse2_cvtsd2siq\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(unspec:DI\n@@ -1945,6 +1975,16 @@\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"sse2_cvtsd2siq_2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:DI [(match_operand:DF 1 \"nonimmediate_operand\" \"x,m\")]\n+\t UNSPEC_FIX_NOTRUNC))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"cvtsd2siq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"sse2_cvttsd2si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(fix:SI"}, {"sha": "a41391c140d36c770771e2c9f0002438b21da8f8", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -3702,6 +3702,12 @@ corresponds to the C data type @code{double} and the @code{rintf}\n built-in function uses the mode which corresponds to the C data\n type @code{float}.\n \n+@cindex @code{lrint@var{m}@var{n}2}\n+@item @samp{lrint@var{m}@var{n}2}\n+Convert operand 1 (valid for floating point mode @var{m}) to fixed\n+point mode @var{n} as a signed number according to the current\n+rounding mode and store in operand 0 (which has mode @var{n}).\n+\n @cindex @code{copysign@var{m}3} instruction pattern\n @item @samp{copysign@var{m}3}\n Store a value with the magnitude of operand 1 and the sign of operand"}, {"sha": "15757353a00f3a01ea513352aef81b89e6e604b4", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -127,7 +127,7 @@ static const char * const optabs[] =\n   \"btrunc_optab->handlers[$A].insn_code = CODE_FOR_$(btrunc$a2$)\",\n   \"nearbyint_optab->handlers[$A].insn_code = CODE_FOR_$(nearbyint$a2$)\",\n   \"rint_optab->handlers[$A].insn_code = CODE_FOR_$(rint$a2$)\",\n-  \"lrint_optab->handlers[$A].insn_code = CODE_FOR_$(lrint$a2$)\",\n+  \"lrint_optab->handlers[$B][$A].insn_code = CODE_FOR_$(lrint$F$a$I$b2$)\",\n   \"sincos_optab->handlers[$A].insn_code = CODE_FOR_$(sincos$a3$)\",\n   \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n   \"asin_optab->handlers[$A].insn_code = CODE_FOR_$(asin$a2$)\","}, {"sha": "11cacae31f199545c9a17b1a6219b0708be417ef", "filename": "gcc/optabs.c", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -4861,6 +4861,46 @@ expand_fix (rtx to, rtx from, int unsignedp)\n         convert_move (to, target, 0);\n     }\n }\n+\n+/* Generate code to convert FROM to fixed point and store in TO.  FROM\n+   must be floating point, TO must be signed.  Use the conversion optab\n+   TAB to do the conversion.  */\n+\n+bool\n+expand_sfix_optab (rtx to, rtx from, convert_optab tab)\n+{\n+  enum insn_code icode;\n+  rtx target = to;\n+  enum machine_mode fmode, imode;\n+\n+  /* We first try to find a pair of modes, one real and one integer, at\n+     least as wide as FROM and TO, respectively, in which we can open-code\n+     this conversion.  If the integer mode is wider than the mode of TO,\n+     we can do the conversion either signed or unsigned.  */\n+\n+  for (fmode = GET_MODE (from); fmode != VOIDmode;\n+       fmode = GET_MODE_WIDER_MODE (fmode))\n+    for (imode = GET_MODE (to); imode != VOIDmode;\n+\t imode = GET_MODE_WIDER_MODE (imode))\n+      {\n+\ticode = tab->handlers[imode][fmode].insn_code;\n+\tif (icode != CODE_FOR_nothing)\n+\t  {\n+\t    if (fmode != GET_MODE (from))\n+\t      from = convert_to_mode (fmode, from, 0);\n+\n+\t    if (imode != GET_MODE (to))\n+\t      target = gen_reg_rtx (imode);\n+\n+\t    emit_unop_insn (icode, target, from, UNKNOWN);\n+\t    if (target != to)\n+\t      convert_move (to, target, 0);\n+\t    return true;\n+\t  }\n+      }\n+\n+  return false;\n+}\n \f\n /* Report whether we have an instruction to perform the operation\n    specified by CODE on operands of mode MODE.  */\n@@ -5266,7 +5306,6 @@ init_optabs (void)\n   btrunc_optab = init_optab (UNKNOWN);\n   nearbyint_optab = init_optab (UNKNOWN);\n   rint_optab = init_optab (UNKNOWN);\n-  lrint_optab = init_optab (UNKNOWN);\n   sincos_optab = init_optab (UNKNOWN);\n   sin_optab = init_optab (UNKNOWN);\n   asin_optab = init_optab (UNKNOWN);\n@@ -5325,6 +5364,7 @@ init_optabs (void)\n   ufixtrunc_optab = init_convert_optab (UNKNOWN);\n   sfloat_optab = init_convert_optab (FLOAT);\n   ufloat_optab = init_convert_optab (UNSIGNED_FLOAT);\n+  lrint_optab = init_convert_optab (UNKNOWN);\n \n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n@@ -5444,6 +5484,8 @@ init_optabs (void)\n \t\t\t\t MODE_DECIMAL_FLOAT, MODE_INT);\n   init_interclass_conv_libfuncs (ufloat_optab, \"floatuns\",\n \t\t\t\t MODE_INT, MODE_DECIMAL_FLOAT);\n+  init_interclass_conv_libfuncs (lrint_optab, \"lrint\",\n+\t\t\t\t MODE_INT, MODE_FLOAT);\n \n   /* sext_optab is also used for FLOAT_EXTEND.  */\n   init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);"}, {"sha": "4670b5b7fb254a9e33a23561114d60f9c151aa01", "filename": "gcc/optabs.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7f04236c6c8c1f248f27eb86d9eb486a93c64b/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=bb7f04236c6c8c1f248f27eb86d9eb486a93c64b", "patch": "@@ -196,7 +196,6 @@ enum optab_index\n   OTI_round,\n   OTI_nearbyint,\n   OTI_rint,\n-  OTI_lrint,\n   /* Tangent */\n   OTI_tan,\n   /* Inverse tangent */\n@@ -345,7 +344,6 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define round_optab (optab_table[OTI_round])\n #define nearbyint_optab (optab_table[OTI_nearbyint])\n #define rint_optab (optab_table[OTI_rint])\n-#define lrint_optab (optab_table[OTI_lrint])\n #define tan_optab (optab_table[OTI_tan])\n #define atan_optab (optab_table[OTI_atan])\n #define copysign_optab (optab_table[OTI_copysign])\n@@ -407,6 +405,8 @@ enum convert_optab_index\n   COI_sfloat,\n   COI_ufloat,\n \n+  COI_lrint,\n+\n   COI_MAX\n };\n \n@@ -421,6 +421,7 @@ extern GTY(()) convert_optab convert_optab_table[COI_MAX];\n #define ufixtrunc_optab (convert_optab_table[COI_ufixtrunc])\n #define sfloat_optab (convert_optab_table[COI_sfloat])\n #define ufloat_optab (convert_optab_table[COI_ufloat])\n+#define lrint_optab (convert_optab_table[COI_lrint])\n \n /* These arrays record the insn_code of insns that may be needed to\n    perform input and output reloads of special objects.  They provide a\n@@ -597,6 +598,9 @@ extern void expand_float (rtx, rtx, int);\n /* Generate code for a FIX_EXPR.  */\n extern void expand_fix (rtx, rtx, int);\n \n+/* Generate code for float to integral conversion.  */\n+extern bool expand_sfix_optab (rtx, rtx, convert_optab);\n+\n /* Return tree if target supports vector operations for COND_EXPR.  */\n bool expand_vec_cond_expr_p (tree, enum machine_mode);\n "}]}