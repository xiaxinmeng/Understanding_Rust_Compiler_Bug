{"sha": "875124eb0822d8905d73bd30d51421ba8afde282", "node_id": "C_kwDOANBUbNoAKDg3NTEyNGViMDgyMmQ4OTA1ZDczYmQzMGQ1MTQyMWJhOGFmZGUyODI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-09T08:14:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-09T08:14:36Z"}, "message": "openmp: Add support for OpenMP 5.1 structured-block-sequences\n\nRelated to this is the addition of structured-block-sequence in OpenMP 5.1,\nwhich doesn't change anything for Fortran, but for C/C++ allows multiple\nstatements instead of just one possibly compound around the separating\ndirectives (section and scan).\n\nI've also made some updates to the OpenMP 5.1 support list in libgomp.texi.\n\n2021-10-09  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/c/\n\t* c-parser.c (c_parser_omp_structured_block_sequence): New function.\n\t(c_parser_omp_scan_loop_body): Use it.\n\t(c_parser_omp_sections_scope): Likewise.\ngcc/cp/\n\t* parser.c (cp_parser_omp_structured_block): Remove disallow_omp_attrs\n\targument.\n\t(cp_parser_omp_structured_block_sequence): New function.\n\t(cp_parser_omp_scan_loop_body): Use it.\n\t(cp_parser_omp_sections_scope): Likewise.\ngcc/testsuite/\n\t* c-c++-common/gomp/sections1.c (foo): Don't expect errors on\n\tmultiple statements in between section directive(s).  Add testcases\n\tfor invalid no statements in between section directive(s).\n\t* gcc.dg/gomp/sections-2.c (foo): Don't expect errors on\n\tmultiple statements in between section directive(s).\n\t* g++.dg/gomp/sections-2.C (foo): Likewise.\n\t* g++.dg/gomp/attrs-6.C (foo): Add testcases for multiple\n\tstatements in between section directive(s).\n\t(bar): Add testcases for multiple statements in between scan\n\tdirective.\n\t* g++.dg/gomp/attrs-7.C (bar): Adjust expected error recovery.\nlibgomp/\n\t* libgomp.texi (OpenMP 5.1): Mention implemented support for\n\tstructured block sequences in C/C++.  Mention support for\n\tunconstrained/reproducible modifiers on order clause.\n\tMention partial (C/C++ only) support of extentensions to atomics\n\tconstruct.  Mention partial (C/C++ on clause only) support of\n\talign/allocator modifiers on allocate clause.", "tree": {"sha": "a6e08723492dd20513002f469b2e3dd969ad2644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6e08723492dd20513002f469b2e3dd969ad2644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/875124eb0822d8905d73bd30d51421ba8afde282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875124eb0822d8905d73bd30d51421ba8afde282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875124eb0822d8905d73bd30d51421ba8afde282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875124eb0822d8905d73bd30d51421ba8afde282/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d788c358b94d0e1983e0c6bf6269fa105b6d007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d788c358b94d0e1983e0c6bf6269fa105b6d007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d788c358b94d0e1983e0c6bf6269fa105b6d007"}], "stats": {"total": 203, "additions": 173, "deletions": 30}, "files": [{"sha": "869a811ed90848e94d7c87a33b4523663406b806", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -18976,6 +18976,31 @@ c_parser_omp_flush (c_parser *parser)\n   c_finish_omp_flush (loc, mo);\n }\n \n+/* Parse an OpenMP structured block sequence.  KIND is the corresponding\n+   separating directive.  */\n+\n+static tree\n+c_parser_omp_structured_block_sequence (c_parser *parser,\n+\t\t\t\t\tenum pragma_kind kind)\n+{\n+  tree stmt = push_stmt_list ();\n+  c_parser_statement (parser, NULL);\n+  do\n+    {\n+      if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n+\tbreak;\n+      if (c_parser_next_token_is (parser, CPP_EOF))\n+\tbreak;\n+\n+      if (kind != PRAGMA_NONE\n+\t  && c_parser_peek_token (parser)->pragma_kind == kind)\n+\tbreak;\n+      c_parser_statement (parser, NULL);\n+    }\n+  while (1);\n+  return pop_stmt_list (stmt);\n+}\n+\n /* OpenMP 5.0:\n \n    scan-loop-body:\n@@ -18997,7 +19022,7 @@ c_parser_omp_scan_loop_body (c_parser *parser, bool open_brace_parsed)\n       return;\n     }\n \n-  substmt = c_parser_omp_structured_block (parser, NULL);\n+  substmt = c_parser_omp_structured_block_sequence (parser, PRAGMA_OMP_SCAN);\n   substmt = build2 (OMP_SCAN, void_type_node, substmt, NULL_TREE);\n   SET_EXPR_LOCATION (substmt, loc);\n   add_stmt (substmt);\n@@ -19032,7 +19057,7 @@ c_parser_omp_scan_loop_body (c_parser *parser, bool open_brace_parsed)\n     error (\"expected %<#pragma omp scan%>\");\n \n   clauses = c_finish_omp_clauses (clauses, C_ORT_OMP);\n-  substmt = c_parser_omp_structured_block (parser, NULL);\n+  substmt = c_parser_omp_structured_block_sequence (parser, PRAGMA_NONE);\n   substmt = build2 (OMP_SCAN, void_type_node, substmt, clauses);\n   SET_EXPR_LOCATION (substmt, loc);\n   add_stmt (substmt);\n@@ -19860,6 +19885,8 @@ c_parser_omp_ordered (c_parser *parser, enum pragma_context context,\n      section-directive[opt] structured-block\n      section-sequence section-directive structured-block\n \n+   OpenMP 5.1 allows structured-block-sequence instead of structured-block.\n+\n     SECTIONS_LOC is the location of the #pragma omp sections.  */\n \n static tree\n@@ -19881,7 +19908,8 @@ c_parser_omp_sections_scope (location_t sections_loc, c_parser *parser)\n \n   if (c_parser_peek_token (parser)->pragma_kind != PRAGMA_OMP_SECTION)\n     {\n-      substmt = c_parser_omp_structured_block (parser, NULL);\n+      substmt = c_parser_omp_structured_block_sequence (parser,\n+\t\t\t\t\t\t\tPRAGMA_OMP_SECTION);\n       substmt = build1 (OMP_SECTION, void_type_node, substmt);\n       SET_EXPR_LOCATION (substmt, loc);\n       add_stmt (substmt);\n@@ -19907,7 +19935,8 @@ c_parser_omp_sections_scope (location_t sections_loc, c_parser *parser)\n \t  error_suppress = true;\n \t}\n \n-      substmt = c_parser_omp_structured_block (parser, NULL);\n+      substmt = c_parser_omp_structured_block_sequence (parser,\n+\t\t\t\t\t\t\tPRAGMA_OMP_SECTION);\n       substmt = build1 (OMP_SECTION, void_type_node, substmt);\n       SET_EXPR_LOCATION (substmt, loc);\n       add_stmt (substmt);"}, {"sha": "0818d66be07bc78ab5c3a430986d383956498d76", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -40136,14 +40136,12 @@ cp_parser_end_omp_structured_block (cp_parser *parser, unsigned save)\n }\n \n static tree\n-cp_parser_omp_structured_block (cp_parser *parser, bool *if_p,\n-\t\t\t\tbool disallow_omp_attrs = true)\n+cp_parser_omp_structured_block (cp_parser *parser, bool *if_p)\n {\n   tree stmt = begin_omp_structured_block ();\n   unsigned int save = cp_parser_begin_omp_structured_block (parser);\n \n-  if (disallow_omp_attrs)\n-    parser->omp_attrs_forbidden_p = true;\n+  parser->omp_attrs_forbidden_p = true;\n   cp_parser_statement (parser, NULL_TREE, false, if_p);\n \n   cp_parser_end_omp_structured_block (parser, save);\n@@ -42001,6 +41999,43 @@ cp_parser_omp_section_scan (cp_parser *parser, const char *directive,\n   return true;\n }\n \n+/* Parse an OpenMP structured block sequence.  KIND is the corresponding\n+   separating directive.  */\n+\n+static tree\n+cp_parser_omp_structured_block_sequence (cp_parser *parser,\n+\t\t\t\t\t enum pragma_kind kind)\n+{\n+  tree stmt = begin_omp_structured_block ();\n+  unsigned int save = cp_parser_begin_omp_structured_block (parser);\n+\n+  cp_parser_statement (parser, NULL_TREE, false, NULL);\n+  while (true)\n+    {\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n+\n+      if (token->type == CPP_CLOSE_BRACE\n+\t  || token->type == CPP_EOF\n+\t  || token->type == CPP_PRAGMA_EOL\n+\t  || (token->type == CPP_KEYWORD && token->keyword == RID_AT_END)\n+\t  || (kind != PRAGMA_NONE\n+\t      && cp_parser_pragma_kind (token) == kind))\n+\tbreak;\n+\n+      if (kind != PRAGMA_NONE\n+\t  && cp_parser_omp_section_scan (parser,\n+\t\t\t\t\t kind == PRAGMA_OMP_SCAN\n+\t\t\t\t\t ? \"scan\" : \"section\", false))\n+\tbreak;\n+\n+      cp_parser_statement (parser, NULL_TREE, false, NULL);\n+    }\n+\n+  cp_parser_end_omp_structured_block (parser, save);\n+  return finish_omp_structured_block (stmt);\n+}\n+\n+\n /* OpenMP 5.0:\n \n    scan-loop-body:\n@@ -42015,11 +42050,10 @@ cp_parser_omp_scan_loop_body (cp_parser *parser)\n   if (!braces.require_open (parser))\n     return;\n \n-  substmt = cp_parser_omp_structured_block (parser, NULL, false);\n+  substmt = cp_parser_omp_structured_block_sequence (parser, PRAGMA_OMP_SCAN);\n   substmt = build2 (OMP_SCAN, void_type_node, substmt, NULL_TREE);\n   add_stmt (substmt);\n \n-  cp_parser_omp_section_scan (parser, \"scan\", false);\n   cp_token *tok = cp_lexer_peek_token (parser->lexer);\n   if (cp_parser_pragma_kind (tok) == PRAGMA_OMP_SCAN)\n     {\n@@ -42055,7 +42089,7 @@ cp_parser_omp_scan_loop_body (cp_parser *parser)\n     error (\"expected %<#pragma omp scan%>\");\n \n   clauses = finish_omp_clauses (clauses, C_ORT_OMP);\n-  substmt = cp_parser_omp_structured_block (parser, NULL, false);\n+  substmt = cp_parser_omp_structured_block_sequence (parser, PRAGMA_NONE);\n   substmt = build2_loc (tok->location, OMP_SCAN, void_type_node, substmt,\n \t\t\tclauses);\n   add_stmt (substmt);\n@@ -42924,7 +42958,8 @@ cp_parser_omp_sections_scope (cp_parser *parser)\n       != PRAGMA_OMP_SECTION\n       && !cp_parser_omp_section_scan (parser, \"section\", true))\n     {\n-      substmt = cp_parser_omp_structured_block (parser, NULL, false);\n+      substmt = cp_parser_omp_structured_block_sequence (parser,\n+\t\t\t\t\t\t\t PRAGMA_OMP_SECTION);\n       substmt = build1 (OMP_SECTION, void_type_node, substmt);\n       add_stmt (substmt);\n     }\n@@ -42951,7 +42986,8 @@ cp_parser_omp_sections_scope (cp_parser *parser)\n \t  error_suppress = true;\n \t}\n \n-      substmt = cp_parser_omp_structured_block (parser, NULL, false);\n+      substmt = cp_parser_omp_structured_block_sequence (parser,\n+\t\t\t\t\t\t\t PRAGMA_OMP_SECTION);\n       substmt = build1 (OMP_SECTION, void_type_node, substmt);\n       add_stmt (substmt);\n     }"}, {"sha": "417d2056ed548d570b04a451dd8d71158ce4adad", "filename": "gcc/testsuite/c-c++-common/gomp/sections1.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsections1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsections1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsections1.c?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -50,7 +50,7 @@ foo ()\n   #pragma omp sections\n   {\n     bar (12);\n-    bar (13);\t\t\t/* { dg-error \"pragma omp section\" } */\n+    bar (13);\n     #pragma omp section\n     bar (14);\n   }\n@@ -63,11 +63,29 @@ foo ()\n     bar (15);\n     #pragma omp section\n     bar (16);\n-    bar (17);\t\t\t/* { dg-error \"pragma omp section\" } */\n+    bar (17);\n   }\n   #pragma omp sections\n   {\n     bar (18);\n     #pragma omp section\n   }\t\t\t\t/* { dg-error \"expression before\" } */\n+  #pragma omp sections\n+  {\n+    #pragma omp section\n+    #pragma omp section\t\t/* { dg-error \"may only be used in\" } */\n+    bar (19);\n+  }\n+  #pragma omp sections\n+  {\n+    bar (20);\n+    #pragma omp section\n+    #pragma omp section\t\t/* { dg-error \"may only be used in\" } */\n+    bar (21);\n+  }\n+  #pragma omp sections\n+  {\n+    bar (22);\n+    #pragma omp section\n+  }\t\t\t\t/* { dg-error \"expression before\" } */\n }"}, {"sha": "af8b9731da96969ae0d3a5459e9bbc6792f25ca6", "filename": "gcc/testsuite/g++.dg/gomp/attrs-6.C", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-6.C?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -26,6 +26,41 @@ foo ()\n     #pragma omp section\n     { a[3]++; }\n   }\n+  #pragma omp parallel sections\n+  {\n+    #pragma omp section\n+    a[0]++;\n+    a[4]++;\n+    l1: a[5]++;\n+    if (a[5] == 42) goto l1;\n+    [[omp::directive (section)]] {\n+    a[1]++;\n+    a[6]++;\n+    } [[omp::directive (section)]]\n+    a[2]++;\n+    a[7]++;\n+    #pragma omp section\n+    { a[3]++; }\n+    a[8]++;\n+  }\n+  [[omp::directive (parallel sections)]]\n+  {\n+    #pragma omp section\n+    a[0]++;\n+    a[4]++;\n+    [[omp::directive (section)]] {\n+    a[1]++;\n+    a[5]++;\n+    } [[omp::directive (section)]]\n+    a[2]++;\n+    l2: a[6]++;\n+    if (a[6] == 42)\n+      goto l2;\n+    a[7]++;\n+    #pragma omp section\n+    a[8]++;\n+    { a[3]++; }\n+  }\n }\n \n int\n@@ -46,5 +81,23 @@ bar (int a, int *c, int *d, int *e, int *f)\n       #pragma omp scan inclusive (a)\n       d[i] = a;\n     }\n+  #pragma omp simd reduction (inscan, +: a)\n+  for (i = 0; i < 64; i++)\n+    {\n+      int t = a;\n+      d[i] = t;\n+      [[omp::directive (scan, exclusive (a))]]\n+      int u = c[i];\n+      a += u;\n+    }\n+  [[omp::directive (simd reduction (inscan, +: a))]]\n+  for (i = 0; i < 64; i++)\n+    {\n+      int t = c[i];\n+      a += t;\n+      #pragma omp scan inclusive (a)\n+      int u = a;\n+      d[i] = u;\n+    }\n   return a;\n }"}, {"sha": "900ef664957bf13ba7f10ee03b36e291313a0f80", "filename": "gcc/testsuite/g++.dg/gomp/attrs-7.C", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-7.C?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -29,29 +29,33 @@ bar (int a, int *c, int *d, int *e, int *f)\n     {\n       d[i] = a;\n       [[omp::sequence (omp::directive (parallel), omp::directive (scan, exclusive (a)))]]\t// { dg-error \"must be the only specified attribute on a statement\" }\n-      a += c[i];\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n-    }\n+\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n+      a += c[i];\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n+    }\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n   [[omp::directive (parallel for reduction (inscan, +: a))]]\t\t\t\t// { dg-error \"'a' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n   for (i = 0; i < 64; i++)\n     {\n       a += c[i];\n       [[omp::sequence (directive (scan inclusive (a)), directive (critical))]]\t\t// { dg-error \"must be the only specified attribute on a statement\" }\n-      d[i] = a;\t\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n-    }\n+\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n+      d[i] = a;\t\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n+    }\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n   [[omp::directive (parallel for reduction (inscan, +: a))]]\t\t\t\t// { dg-error \"'a' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n   for (i = 0; i < 64; i++)\n     {\n       d[i] = a;\n       [[gnu::cold]] [[omp::directive (scan, exclusive (a))]]\t\t\t\t// { dg-error \"must be the only specified attribute on a statement\" }\n-      a += c[i];\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n-    }\n+\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n+      a += c[i];\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n+    }\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n   [[omp::directive (parallel for reduction (inscan, +: a))]]\t\t\t\t// { dg-error \"'a' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n   for (i = 0; i < 64; i++)\n     {\n       d[i] = a;\n       [[omp::directive (scan, exclusive (a)), gnu::cold]]\t\t\t\t// { dg-error \"must be the only specified attribute on a statement\" }\n-      a += c[i];\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n-    }\n+\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"#pragma omp scan\" \"\" { target *-*-* } .-1 }\n+      a += c[i];\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n+    }\t\t\t\t\t\t\t\t\t\t\t// { dg-error \"expected\" }\n   [[omp::directive (parallel for reduction (inscan, +: a))]]\t\t\t\t// { dg-error \"'a' specified in 'inscan' 'reduction' clause but not in 'scan' directive clause\" }\n   for (i = 0; i < 64; i++)\n     {"}, {"sha": "6d8305afc036958929e43dfdf22f4b0af4e2e9a7", "filename": "gcc/testsuite/g++.dg/gomp/sections-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fsections-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fsections-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fsections-2.C?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -19,11 +19,11 @@ void foo(void)\n     {\n     #pragma omp section\n       bar(2);\n-      bar(3);\t\t// { dg-error \"expected\" }\n+      bar(3);\n       bar(4);\n     #pragma omp section\n       bar(5);\n-      bar(6);\t\t// { dg-error \"expected\" }\n+      bar(6);\n       bar(7);\n     }\n }"}, {"sha": "6d8305afc036958929e43dfdf22f4b0af4e2e9a7", "filename": "gcc/testsuite/gcc.dg/gomp/sections-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsections-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsections-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsections-2.c?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -19,11 +19,11 @@ void foo(void)\n     {\n     #pragma omp section\n       bar(2);\n-      bar(3);\t\t// { dg-error \"expected\" }\n+      bar(3);\n       bar(4);\n     #pragma omp section\n       bar(5);\n-      bar(6);\t\t// { dg-error \"expected\" }\n+      bar(6);\n       bar(7);\n     }\n }"}, {"sha": "2f61a2231fe719b81759dbe39ae14c7058f93b21", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/875124eb0822d8905d73bd30d51421ba8afde282/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/875124eb0822d8905d73bd30d51421ba8afde282/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=875124eb0822d8905d73bd30d51421ba8afde282", "patch": "@@ -291,7 +291,7 @@ The OpenMP 4.5 specification is fully supported.\n @item @code{strict} modifier in the @code{grainsize} and @code{num_tasks}\n       clauses of the taskloop construct @tab Y @tab\n @item @code{align} clause/modifier in @code{allocate} directive/clause\n-      and @code{allocator} directive @tab N @tab\n+      and @code{allocator} directive @tab P @tab C/C++ on clause only\n @item @code{thread_limit} clause to @code{target} construct @tab N @tab\n @item @code{has_device_addr} clause to @code{target} construct @tab N @tab\n @item iterators in @code{target update} motion clauses and @code{map}\n@@ -301,7 +301,7 @@ The OpenMP 4.5 specification is fully supported.\n @item @code{interop} directive @tab N @tab\n @item @code{omp_interop_t} object support in runtime routines @tab N @tab\n @item @code{nowait} clause in @code{taskwait} directive @tab N @tab\n-@item Extensions to the @code{atomic} directive @tab N @tab\n+@item Extensions to the @code{atomic} directive @tab P @tab C/C++ only\n @item @code{seq_cst} clause on a @code{flush} construct @tab Y @tab\n @item @code{inoutset} argument to the @code{depend} clause @tab N @tab\n @item @code{private} and @code{firstprivate} argument to @code{default}\n@@ -337,7 +337,10 @@ The OpenMP 4.5 specification is fully supported.\n \n @multitable @columnfractions .60 .10 .25\n @headitem Description @tab Status @tab Comments\n-@item Suppport of strictly structured blocks in Fortran @tab N @tab\n+@item Support of strictly structured blocks in Fortran @tab N @tab\n+@item Support of structured block sequences in C/C++ @tab Y @tab\n+@item @code{unconstrained} and @code{reproducible} modifiers on @code{order}\n+      clause @tab Y @tab\n @end multitable\n \n "}]}