{"sha": "41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0NDFkYzdmZjljY2Y3M2ViZTBkZjFmZTNlNTAyZjMxNjhjMjUyOA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-10-15T20:10:13Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-10-15T20:10:13Z"}, "message": "system.h: Poison old unused target macros.\n\n\t* system.h: Poison old unused target macros.\n\t* config/dsp16xx.h (ASM_OPEN_PAREN, ASM_CLOSE_PAREN): Remove.\n\t* config/stormy16/stormy16.c: Update references to obsolete macros.\n\t* config/stormy16/stormy16.h: Similarly.\n\t* config/stormy16/stormy16.md: Similarly.\n\t* config/cris/cris.h: Similarly.\n\nFrom-SVN: r46269", "tree": {"sha": "25df0e529e4781f04131683e820c5b27655f4be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25df0e529e4781f04131683e820c5b27655f4be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/comments", "author": null, "committer": null, "parents": [{"sha": "7d6fd8fd4c1cb56051884f746f774f5c4a523988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6fd8fd4c1cb56051884f746f774f5c4a523988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6fd8fd4c1cb56051884f746f774f5c4a523988"}], "stats": {"total": 135, "additions": 70, "deletions": 65}, "files": [{"sha": "4cf58733372ab0554df03ab44a6fe21c164072c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "patch": "@@ -1,3 +1,12 @@\n+2001-10-15  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* system.h: Poison old unused target macros.\n+\t* config/dsp16xx.h (ASM_OPEN_PAREN, ASM_CLOSE_PAREN): Remove.\n+\t* config/stormy16/stormy16.c: Update references to obsolete macros.\n+\t* config/stormy16/stormy16.h: Similarly.\n+\t* config/stormy16/stormy16.md: Similarly.\n+\t* config/cris/cris.h: Similarly.\n+\n 2001-10-15  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpplib.c (struct pragma_entry): Store the name as a hashnode."}, {"sha": "5795358f03d22a988dac525dcc9b211d893fa835", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "patch": "@@ -509,8 +509,8 @@ extern int target_flags;\n    Old comment: (2.1: still valid in 2.7.2?)\n     Note that to make this macro affect the alignment of stack\n    locals, a fix was required, and special precautions when handling\n-   the stack pointer in various other macros (FUNCTION_PROLOGUE et al)\n-   were required.  See file \"function.c\".  If you would just define\n+   the stack pointer in various other macros (TARGET_ASM_FUNCTION_PROLOGUE\n+   et al) were required.  See file \"function.c\".  If you would just define\n    this macro, it would only affect the builtin alloca and variable\n    local data (non-ANSI, non-K&R, Gnu C extension).  */\n #define STACK_BOUNDARY \\"}, {"sha": "4ad062ee89ce850ef030db468637c0948904f075", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "patch": "@@ -1736,10 +1736,6 @@ const_section ()                                                   \\\n     (OUTPUT) = (char *) alloca (strlen (NAME) + 11);\t\t\t\\\n     ASM_GENERATE_INTERNAL_LABEL (OUTPUT, temp, LABELNO);\t\t\\\n   } while (0)\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n \f\n /* OUTPUT OF UNINITIALIZED VARIABLES */\n "}, {"sha": "5847e2ad086d3aaa80266868cc6e11a87de60268", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "patch": "@@ -908,12 +908,13 @@ emit_addhi3_postreload (dest, src0, src1)\n   return insn;\n }\n \n-/* Called after register allocation to add any instructions needed for the\n-   prologue.  Using a prologue insn is favored compared to putting all of the\n-   instructions in the FUNCTION_PROLOGUE macro, since it allows the scheduler\n-   to intermix instructions with the saves of the caller saved registers.  In\n-   some cases, it might be necessary to emit a barrier instruction as the last\n-   insn to prevent such scheduling.\n+/* Called after register allocation to add any instructions needed for\n+   the prologue.  Using a prologue insn is favored compared to putting\n+   all of the instructions in the TARGET_ASM_FUNCTION_PROLOGUE macro,\n+   since it allows the scheduler to intermix instructions with the\n+   saves of the caller saved registers.  In some cases, it might be\n+   necessary to emit a barrier instruction as the last insn to prevent\n+   such scheduling.\n \n    Also any insns generated here should have RTX_FRAME_RELATED_P(insn) = 1\n    so that the debug info generation code can handle them properly.  */\n@@ -1003,12 +1004,13 @@ direct_return ()\n \t  && stormy16_compute_stack_layout ().frame_size == 0);\n }\n \n-/* Called after register allocation to add any instructions needed for the\n-   epilogue.  Using a epilogue insn is favored compared to putting all of the\n-   instructions in the FUNCTION_PROLOGUE macro, since it allows the scheduler\n-   to intermix instructions with the saves of the caller saved registers.  In\n-   some cases, it might be necessary to emit a barrier instruction as the last\n-   insn to prevent such scheduling.  */\n+/* Called after register allocation to add any instructions needed for\n+   the epilogue.  Using a epilogue insn is favored compared to putting\n+   all of the instructions in the TARGET_ASM_FUNCTION_PROLOGUE macro,\n+   since it allows the scheduler to intermix instructions with the\n+   saves of the caller saved registers.  In some cases, it might be\n+   necessary to emit a barrier instruction as the last insn to prevent\n+   such scheduling.  */\n \n void\n stormy16_expand_epilogue ()"}, {"sha": "9a4e13917ae9690fd8286c27b7a64a48413f6cb3", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "patch": "@@ -2421,10 +2421,11 @@ typedef int CUMULATIVE_ARGS;\n    the return address.  Hence returning from FUNCTION will return to whoever\n    called the current `thunk'.\n \n-   The effect must be as if FUNCTION had been called directly with the adjusted\n-   first argument.  This macro is responsible for emitting all of the code for\n-   a thunk function; `FUNCTION_PROLOGUE' and `FUNCTION_EPILOGUE' are not\n-   invoked.\n+   The effect must be as if @var{function} had been called directly\n+   with the adjusted first argument.  This macro is responsible for\n+   emitting all of the code for a thunk function;\n+   TARGET_ASM_FUNCTION_PROLOGUE and TARGET_ASM_FUNCTION_EPILOGUE are\n+   not invoked.\n \n    The THUNK_FNDECL is redundant.  (DELTA and FUNCTION have already been\n    extracted from it.)  It might possibly be useful on some targets, but\n@@ -2564,10 +2565,11 @@ typedef int CUMULATIVE_ARGS;\n    code to call function `__bb_trace_ret'.  The assembler code should\n    only be output if the global compile flag `profile_block_flag' ==\n    2.  This macro has to be used at every place where code for\n-   returning from a function is generated (e.g. `FUNCTION_EPILOGUE').\n-   Although you have to write the definition of `FUNCTION_EPILOGUE'\n-   as well, you have to define this macro to tell the compiler, that\n-   the proper call to `__bb_trace_ret' is produced.  */\n+   returning from a function is generated\n+   (e.g. `TARGET_ASM_FUNCTION_EPILOGUE').  Although you have to write\n+   the definition of `TARGET_ASM_FUNCTION_EPILOGUE' as well, you have\n+   to define this macro to tell the compiler, that the proper call to\n+   `__bb_trace_ret' is produced.  */\n /* #define FUNCTION_BLOCK_PROFILER_EXIT(FILE) */\n \n /* A C statement or compound statement to save all registers, which may be\n@@ -2576,17 +2578,19 @@ typedef int CUMULATIVE_ARGS;\n    the assembler code can be concatenated with the string ID, to obtain a\n    unique lable name.\n \n-   Registers or condition codes clobbered by `FUNCTION_PROLOGUE' or\n-   `FUNCTION_EPILOGUE' must be saved in the macros `FUNCTION_BLOCK_PROFILER',\n+   Registers or condition codes clobbered by\n+   `TARGET_ASM_FUNCTION_PROLOGUE' or `TARGET_ASM_FUNCTION_EPILOGUE'\n+   must be saved in the macros `FUNCTION_BLOCK_PROFILER',\n    `FUNCTION_BLOCK_PROFILER_EXIT' and `BLOCK_PROFILER' prior calling\n-   `__bb_init_trace_func', `__bb_trace_ret' and `__bb_trace_func' respectively.  */\n+   `__bb_init_trace_func', `__bb_trace_ret' and `__bb_trace_func'\n+   respectively.  */\n /* #define MACHINE_STATE_SAVE(ID) */\n \n /* A C statement or compound statement to restore all registers, including\n    condition codes, saved by `MACHINE_STATE_SAVE'.\n \n-   Registers or condition codes clobbered by `FUNCTION_PROLOGUE' or\n-   `FUNCTION_EPILOGUE' must be restored in the macros\n+   Registers or condition codes clobbered by `TARGET_ASM_FUNCTION_PROLOGUE' or\n+   `TARGET_ASM_FUNCTION_EPILOGUE' must be restored in the macros\n    `FUNCTION_BLOCK_PROFILER', `FUNCTION_BLOCK_PROFILER_EXIT' and\n    `BLOCK_PROFILER' after calling `__bb_init_trace_func', `__bb_trace_ret' and\n    `__bb_trace_func' respectively.  */\n@@ -2720,7 +2724,8 @@ typedef int CUMULATIVE_ARGS;\n    stack slot.  This default is right for most machines.  The exceptions are\n    machines where it is impossible to execute instructions in the stack area.\n    On such machines, you may have to implement a separate stack, using this\n-   macro in conjunction with `FUNCTION_PROLOGUE' and `FUNCTION_EPILOGUE'.\n+   macro in conjunction with `TARGET_ASM_FUNCTION_PROLOGUE' and\n+   `TARGET_ASM_FUNCTION_EPILOGUE'.\n \n    FP points to a data structure, a `struct function', which describes the\n    compilation status of the immediate containing function of the function\n@@ -4875,8 +4880,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    To support optional call frame debugging information, you must also define\n    `INCOMING_RETURN_ADDR_RTX' and either set `RTX_FRAME_RELATED_P' on the\n    prologue insns if you use RTL for the prologue, or call `dwarf2out_def_cfa'\n-   and `dwarf2out_reg_save' as appropriate from `FUNCTION_PROLOGUE' if you\n-   don't.\n+   and `dwarf2out_reg_save' as appropriate from `TARGET_ASM_FUNCTION_PROLOGUE'\n+   if you don't.\n \n    Defined in svr4.h.  */\n /* #define DWARF2_DEBUGGING_INFO */\n@@ -5210,25 +5215,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    #pragma pack(push,<n>) and #pragma pack(pop). */\n /* HANDLE_PRAGMA_PACK_PUSH_POP 1 */\n    \n-/* If defined, a C expression whose value is nonzero if IDENTIFIER with\n-   arguments ARGS is a valid machine specific attribute for DECL.  The\n-   attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-/* #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) */\n-\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER with\n-   arguments ARGS is a valid machine specific attribute for TYPE.  The\n-   attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-/* #define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) */\n-\n-/* If defined, a C expression whose value is zero if the attributes on TYPE1\n-   and TYPE2 are incompatible, one if they are compatible, and two if they are\n-   nearly compatible (which causes a warning to be generated).  */\n-/* #define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) */\n-\n-/* If defined, a C statement that assigns default attributes to newly defined\n-   TYPE.  */\n-/* #define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) */\n-\n /* Define this macro to control use of the character `$' in identifier names.\n    The value should be 0, 1, or 2.  0 means `$' is not allowed by default; 1\n    means it is allowed by default if `-traditional' is used; 2 means it is"}, {"sha": "a27d1bcce1b33e349bb6c1d3b66fe273062894fb", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "patch": "@@ -917,12 +917,13 @@\n ;; ::\n ;; ::::::::::::::::::::\n \n-;; Called after register allocation to add any instructions needed for the\n-;; prologue.  Using a prologue insn is favored compared to putting all of the\n-;; instructions in the FUNCTION_PROLOGUE macro, since it allows the scheduler\n-;; to intermix instructions with the saves of the caller saved registers.  In\n-;; some cases, it might be necessary to emit a barrier instruction as the last\n-;; insn to prevent such scheduling.\n+;; Called after register allocation to add any instructions needed for\n+;; the prologue.  Using a prologue insn is favored compared to putting\n+;; all of the instructions in the TARGET_ASM_FUNCTION_PROLOGUE macro,\n+;; since it allows the scheduler to intermix instructions with the\n+;; saves of the caller saved registers.  In some cases, it might be\n+;; necessary to emit a barrier instruction as the last insn to prevent\n+;; such scheduling.\n (define_expand \"prologue\"\n   [(const_int 1)]\n   \"\"\n@@ -932,12 +933,13 @@\n   DONE;\n }\")\n \n-;; Called after register allocation to add any instructions needed for the\n-;; epilogue.  Using a epilogue insn is favored compared to putting all of the\n-;; instructions in the FUNCTION_EPILOGUE macro, since it allows the scheduler\n-;; to intermix instructions with the restires of the caller saved registers.\n-;; In some cases, it might be necessary to emit a barrier instruction as the\n-;; first insn to prevent such scheduling.\n+;; Called after register allocation to add any instructions needed for\n+;; the epilogue.  Using a epilogue insn is favored compared to putting\n+;; all of the instructions in the TARGET_ASM_FUNCTION_EPILOGUE macro,\n+;; since it allows the scheduler to intermix instructions with the\n+;; restires of the caller saved registers.  In some cases, it might be\n+;; necessary to emit a barrier instruction as the first insn to\n+;; prevent such scheduling.\n (define_expand \"epilogue\"\n   [(const_int 2)]\n   \"\""}, {"sha": "55a9370aca4536c013737a7dcd57cd4e692a5edd", "filename": "gcc/system.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41441dc7ff9ccf73ebe0df1fe3e502f3168c2528/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=41441dc7ff9ccf73ebe0df1fe3e502f3168c2528", "patch": "@@ -584,6 +584,16 @@ typedef union tree_node *tree;\n #undef calloc\n #undef strdup\n  #pragma GCC poison malloc realloc calloc strdup\n+\n+/* Old target macros that have moved to the target hooks structure.  */\n+ #pragma GCC poison ASM_OPEN_PAREN ASM_CLOSE_PAREN\t\t\t\\\n+\tFUNCTION_PROLOGUE FUNCTION_EPILOGUE\t\t\t\t\\\n+\tFUNCTION_END_PROLOGUE FUNCTION_BEGIN_EPILOGUE\t\t\t\\\n+\tDECL_MACHINE_ATTRIBUTES COMP_TYPE_ATTRIBUTES INSERT_ATTRIBUTES\t\\\n+\tVALID_MACHINE_DECL_ATTRIBUTE VALID_MACHINE_TYPE_ATTRIBUTE\t\\\n+\tSET_DEFAULT_TYPE_ATTRIBUTES SET_DEFAULT_DECL_ATTRIBUTES\t\t\\\n+\tMERGE_MACHINE_TYPE_ATTRIBUTES MERGE_MACHINE_DECL_ATTRIBUTES\t\\\n+\tMD_INIT_BUILTINS MD_EXPAND_BUILTIN\n #endif /* IN_GCC */\n \n /* Note: not all uses of the `index' token (e.g. variable names and"}]}