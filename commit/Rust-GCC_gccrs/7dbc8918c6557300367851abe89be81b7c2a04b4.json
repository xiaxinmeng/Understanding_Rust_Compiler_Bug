{"sha": "7dbc8918c6557300367851abe89be81b7c2a04b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiYzg5MThjNjU1NzMwMDM2Nzg1MWFiZTg5YmU4MWI3YzJhMDRiNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-04-08T06:57:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:57:48Z"}, "message": "binde.adb (Gather_All_Links, [...]): units that are mentioned in limited_with_clauses to do create semantic...\n\n2008-04-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* binde.adb (Gather_All_Links, Gather_Dependencies): units that are\n\tmentioned in limited_with_clauses to do create semantic dependencies\n\teven though they appear in the ali file.\n\nFrom-SVN: r134064", "tree": {"sha": "2e26b07a2fa0b075c7c3cac1e292068abfa2a38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e26b07a2fa0b075c7c3cac1e292068abfa2a38d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dbc8918c6557300367851abe89be81b7c2a04b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbc8918c6557300367851abe89be81b7c2a04b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dbc8918c6557300367851abe89be81b7c2a04b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbc8918c6557300367851abe89be81b7c2a04b4/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efde9617b15c8eb477c52111c660e35e45a59785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efde9617b15c8eb477c52111c660e35e45a59785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efde9617b15c8eb477c52111c660e35e45a59785"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "fc1ebeb128cbeffd8dbfc244c21ebe634b40f89b", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbc8918c6557300367851abe89be81b7c2a04b4/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbc8918c6557300367851abe89be81b7c2a04b4/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=7dbc8918c6557300367851abe89be81b7c2a04b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -867,10 +867,12 @@ package body Binde is\n          --  Skip if this with is an interface to a stand-alone library.\n          --  Skip also if no ALI file for this WITH, happens for language\n          --  defined generics while bootstrapping the compiler (see body of\n-         --  Lib.Writ.Write_With_Lines).\n+         --  Lib.Writ.Write_With_Lines). Finally, skip if it is a limited\n+         --  with clause, which does not impose an elaboration link.\n \n          if not Withs.Table (W).SAL_Interface\n            and then Withs.Table (W).Afile /= No_File\n+           and then not Withs.Table (W).Limited_With\n          then\n             declare\n                Info : constant Int :=\n@@ -1237,8 +1239,8 @@ package body Binde is\n                         Make_Elab_Entry\n                           (Withs.Table (W).Uname, No_Elab_All_Link));\n \n-                     --  Elaborate_All_Desirable case, for this we establish\n-                     --  the same links as above, but with a different reason.\n+                  --  Elaborate_All_Desirable case, for this we establish the\n+                  --  same links as above, but with a different reason.\n \n                   elsif Withs.Table (W).Elab_All_Desirable then\n \n@@ -1256,15 +1258,15 @@ package body Binde is\n                         Make_Elab_Entry\n                           (Withs.Table (W).Uname, No_Elab_All_Link));\n \n-                     --  Pragma Elaborate case. We must build a link for the\n-                     --  withed unit itself, and also the corresponding body\n-                     --  if there is one.\n+                  --  Pragma Elaborate case. We must build a link for the\n+                  --  withed unit itself, and also the corresponding body if\n+                  --  there is one.\n \n-                     --  However, skip this processing if there is no ALI file\n-                     --  for the WITH entry, because this means it is a\n-                     --  generic (even when we fix the generics so that an ALI\n-                     --  file is present, we probably still will have no ALI\n-                     --  file for unchecked and other special cases).\n+                  --  However, skip this processing if there is no ALI file for\n+                  --  the WITH entry, because this means it is a generic (even\n+                  --  when we fix the generics so that an ALI file is present,\n+                  --  we probably still will have no ALI file for unchecked and\n+                  --  other special cases).\n \n                   elsif Withs.Table (W).Elaborate\n                     and then Withs.Table (W).Afile /= No_File\n@@ -1276,8 +1278,8 @@ package body Binde is\n                           (Corresponding_Body (Withed_Unit), U, Elab);\n                      end if;\n \n-                     --  Elaborate_Desirable case, for this we establish\n-                     --  the same links as above, but with a different reason.\n+                  --  Elaborate_Desirable case, for this we establish\n+                  --  the same links as above, but with a different reason.\n \n                   elsif Withs.Table (W).Elab_Desirable then\n                      Build_Link (Withed_Unit, U, Withed);\n@@ -1288,8 +1290,14 @@ package body Binde is\n                            U, Elab_Desirable);\n                      end if;\n \n-                     --  Case of normal WITH with no elaboration pragmas, just\n-                     --  build the single link to the directly referenced unit\n+                  --  A limited_with does not establish an elaboration\n+                  --  dependence (that's the whole point!).\n+\n+                  elsif Withs.Table (W).Limited_With then\n+                     null;\n+\n+                  --  Case of normal WITH with no elaboration pragmas, just\n+                  --  build the single link to the directly referenced unit\n \n                   else\n                      Build_Link (Withed_Unit, U, Withed);"}]}