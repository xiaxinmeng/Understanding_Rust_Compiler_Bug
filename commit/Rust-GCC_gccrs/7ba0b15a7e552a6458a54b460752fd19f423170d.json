{"sha": "7ba0b15a7e552a6458a54b460752fd19f423170d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhMGIxNWE3ZTU1MmE2NDU4YTU0YjQ2MDc1MmZkMTlmNDIzMTcwZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-20T14:59:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-20T14:59:39Z"}, "message": "internal,net,os,runtime,syscall: fixes for AIX following update to go1.9\n    \n    Reviewed-on: https://go-review.googlesource.com/64551\n\nFrom-SVN: r253016", "tree": {"sha": "61538defc78695702f080b46ac3bb493c0c2b34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61538defc78695702f080b46ac3bb493c0c2b34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ba0b15a7e552a6458a54b460752fd19f423170d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba0b15a7e552a6458a54b460752fd19f423170d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ba0b15a7e552a6458a54b460752fd19f423170d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ba0b15a7e552a6458a54b460752fd19f423170d/comments", "author": null, "committer": null, "parents": [{"sha": "cace2309d494617577161853a358eb3a444c1688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace2309d494617577161853a358eb3a444c1688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cace2309d494617577161853a358eb3a444c1688"}], "stats": {"total": 175, "additions": 155, "deletions": 20}, "files": [{"sha": "cca4a16e7eca7e1244639be075f91545c43f8ca8", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -1,4 +1,4 @@\n-5fb74cd7192123a9ea06dcae0d5d8d0b3538db8f\n+90fe3da36d904b62d47c00ee40eef4fd2693a5da\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b90f3a2f191c44fdc3eb43b01b0cc7c7b5923f97", "filename": "libgo/go/cmd/go/internal/base/signal_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fbase%2Fsignal_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fbase%2Fsignal_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fbase%2Fsignal_unix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n+// +build aix darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package base\n "}, {"sha": "6b9bb8b7d0dfd44e204cb1a3f9c1a87d660c6505", "filename": "libgo/go/internal/poll/export_posix_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fexport_posix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fexport_posix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fexport_posix_test.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n+// +build aix darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n // Export guts for testing on posix.\n // Since testing imports os and os imports internal/poll,"}, {"sha": "9de8af1598dd39fd39e7dd96978d37dfcf736a11", "filename": "libgo/go/internal/poll/fd_poll_runtime.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_poll_runtime.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_poll_runtime.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_poll_runtime.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows solaris\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd windows solaris\n \n package poll\n "}, {"sha": "4e6e355728d24ec6c527f0f05dff2beb141dc713", "filename": "libgo/go/internal/poll/fd_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_posix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n+// +build aix darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package poll\n "}, {"sha": "246d4989e1cf83a315a626060e0a3a840dcad7a4", "filename": "libgo/go/internal/poll/fd_posix_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_posix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_posix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_posix_test.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n+// +build aix darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package poll_test\n "}, {"sha": "0b43a19590b514cff4a9a93c3ca264e1decba690", "filename": "libgo/go/internal/poll/fd_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Ffd_unix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n+// +build aix darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package poll\n "}, {"sha": "4cf36cc6c09c7b31d02233aebbbb1c4623eb670c", "filename": "libgo/go/internal/poll/hook_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fhook_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fhook_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fhook_unix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n+// +build aix darwin dragonfly freebsd linux nacl netbsd openbsd solaris\n \n package poll\n "}, {"sha": "bb5ea02c0a658897530e9f52b87c4cd867d5d604", "filename": "libgo/go/internal/poll/sockopt.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fsockopt.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fsockopt.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fsockopt.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd solaris windows\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris windows\n \n package poll\n "}, {"sha": "ae59b0c762729095f1e40511309e4660acb32d8f", "filename": "libgo/go/internal/poll/sockoptip.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fsockoptip.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fsockoptip.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fsockoptip.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd windows\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd windows\n \n package poll\n "}, {"sha": "fb5f2bcd32a48449efc3b2eadf9080d62fae338d", "filename": "libgo/go/internal/poll/sys_cloexec.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fsys_cloexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Finternal%2Fpoll%2Fsys_cloexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fpoll%2Fsys_cloexec.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -5,7 +5,7 @@\n // This file implements sysSocket and accept for platforms that do not\n // provide a fast path for setting SetNonblock and CloseOnExec.\n \n-// +build darwin nacl netbsd openbsd solaris\n+// +build aix darwin nacl netbsd openbsd solaris\n \n package poll\n "}, {"sha": "d0ffaaeba70a52f2be195a065961b55fa727154f", "filename": "libgo/go/net/error_posix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fnet%2Ferror_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fnet%2Ferror_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ferror_posix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n+// +build aix darwin dragonfly freebsd linux nacl netbsd openbsd solaris windows\n \n package net\n "}, {"sha": "9670ada49425d15d14907eeb1c114097becde27f", "filename": "libgo/go/os/user/cgo_lookup_unix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fos%2Fuser%2Fcgo_lookup_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fos%2Fuser%2Fcgo_lookup_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fuser%2Fcgo_lookup_unix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd !android,linux netbsd openbsd solaris\n+// +build aix darwin dragonfly freebsd !android,linux netbsd openbsd solaris\n // +build cgo\n \n package user"}, {"sha": "eecdfb7eb2216e4dfd85860062587badfa71587e", "filename": "libgo/go/runtime/export_unix_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fruntime%2Fexport_unix_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fruntime%2Fexport_unix_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fexport_unix_test.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly freebsd linux netbsd openbsd solaris\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris\n \n package runtime\n "}, {"sha": "b4962cc65900f07ffd6be05a78e521799cd627f9", "filename": "libgo/go/runtime/netpoll_aix.go", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fruntime%2Fnetpoll_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fruntime%2Fnetpoll_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fnetpoll_aix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -64,14 +64,14 @@ func netpollinit() {\n \tvar p [2]int32\n \n \tif ps = pollset_create(-1); ps < 0 {\n-\t\tthrow(\"netpollinit: failed to create pollset\")\n+\t\tthrow(\"runtime: netpollinit failed to create pollset\")\n \t}\n \t// It is not possible to add or remove descriptors from\n \t// the pollset while pollset_poll is active.\n \t// We use a pipe to wakeup pollset_poll when the pollset\n \t// needs to be updated.\n \tif err := libc_pipe(&p[0]); err < 0 {\n-\t\tthrow(\"netpollinit: failed to create pipe\")\n+\t\tthrow(\"runtime: netpollinit failed to create pipe\")\n \t}\n \trdwake = p[0]\n \twrwake = p[1]\n@@ -90,12 +90,17 @@ func netpollinit() {\n \tpctl.fd = rdwake\n \tpctl.events = _POLLIN\n \tif pollset_ctl(ps, &pctl, 1) != 0 {\n-\t\tthrow(\"netpollinit: failed to register pipe\")\n+\t\tthrow(\"runtime: netpollinit failed to register pipe\")\n \t}\n \n \tmpfds = make(map[int32]*pollDesc)\n }\n \n+func netpolldescriptor() uintptr {\n+\t// ps is not a real file descriptor.\n+\treturn ^uintptr(0)\n+}\n+\n func netpollopen(fd uintptr, pd *pollDesc) int32 {\n \t// pollset_ctl will block if pollset_poll is active\n \t// so wakeup pollset_poll first.\n@@ -144,7 +149,7 @@ func netpollclose(fd uintptr) int32 {\n }\n \n func netpollarm(pd *pollDesc, mode int) {\n-\tthrow(\"unused\")\n+\tthrow(\"runtime: unused\")\n }\n \n func netpoll(block bool) *g {\n@@ -168,7 +173,7 @@ retry:\n \tif nfound < 0 {\n \t\te := errno()\n \t\tif e != _EINTR {\n-\t\t\tthrow(\"pollset_poll failed\")\n+\t\t\tthrow(\"runtime: pollset_poll failed\")\n \t\t}\n \t\tgoto retry\n \t}"}, {"sha": "d479284340714e7619858aa8e0f71cd43472c977", "filename": "libgo/go/syscall/forkpipe_bsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fsyscall%2Fforkpipe_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fsyscall%2Fforkpipe_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fforkpipe_bsd.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -2,7 +2,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build darwin dragonfly netbsd openbsd solaris\n+// +build aix darwin dragonfly netbsd openbsd solaris\n \n package syscall\n "}, {"sha": "072f92a8151551a961975c222dccb089715afd86", "filename": "libgo/go/syscall/libcall_aix.go", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ba0b15a7e552a6458a54b460752fd19f423170d/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go?ref=7ba0b15a7e552a6458a54b460752fd19f423170d", "patch": "@@ -6,6 +6,136 @@\n \n package syscall\n \n+import (\n+\t\"unsafe\"\n+)\n+\n+//sys\tOpenat(dirfd int, path string, flags int, mode uint32) (fd int, err error)\n+//open64at(dirfd _C_int, path *byte, flags _C_int, mode Mode_t) _C_int\n+\n+//sys\tptrace(request int, id int, addr uintptr, data int, buff uintptr) (val int)\n+//ptrace(request _C_int, id int, addr uintptr, data _C_int, buff *byte) _C_int\n+\n+//sys\tptrace64(request int, id int64, addr int64, data int, buff uintptr) (err error)\n+//ptrace64(request _C_int, id int64, addr int64, data _C_int, buff *byte) _C_int\n+\n func raw_ptrace(request int, pid int, addr *byte, data *byte) Errno {\n+\tif request == _PTRACE_TRACEME {\n+\t\t// Convert to AIX ptrace call.\n+\t\terr := ptrace64(_PT_TRACE_ME, 0, 0, 0, 0)\n+\t\tif err != nil {\n+\t\t\treturn err.(Errno)\n+\t\t}\n+\t\treturn 0\n+\t}\n \treturn ENOSYS\n }\n+\n+func ptracePeek(pid int, addr uintptr, out []byte) (count int, err error) {\n+\tn := 0\n+\tfor len(out) > 0 {\n+\t\tbsize := len(out)\n+\t\tif bsize > 1024 {\n+\t\t\tbsize = 1024\n+\t\t}\n+\t\terr = ptrace64(_PT_READ_BLOCK, int64(pid), int64(addr), bsize, uintptr(unsafe.Pointer(&out[0])))\n+\t\tif err != nil {\n+\t\t\treturn 0, err\n+\t\t}\n+\t\taddr += uintptr(bsize)\n+\t\tn += bsize\n+\t\tout = out[n:]\n+\t}\n+\treturn n, nil\n+}\n+\n+func PtracePeekText(pid int, addr uintptr, out []byte) (count int, err error) {\n+\treturn ptracePeek(pid, addr, out)\n+}\n+\n+func PtracePeekData(pid int, addr uintptr, out []byte) (count int, err error) {\n+\treturn ptracePeek(pid, addr, out)\n+}\n+\n+func ptracePoke(pid int, addr uintptr, data []byte) (count int, err error) {\n+\tn := 0\n+\tfor len(data) > 0 {\n+\t\tbsize := len(data)\n+\t\tif bsize > 1024 {\n+\t\t\tbsize = 1024\n+\t\t}\n+\t\terr = ptrace64(_PT_WRITE_BLOCK, int64(pid), int64(addr), bsize, uintptr(unsafe.Pointer(&data[0])))\n+\t\tif err != nil {\n+\t\t\treturn 0, err\n+\t\t}\n+\t\taddr += uintptr(bsize)\n+\t\tn += bsize\n+\t\tdata = data[n:]\n+\t}\n+\treturn n, nil\n+}\n+\n+func PtracePokeText(pid int, addr uintptr, data []byte) (count int, err error) {\n+\treturn ptracePoke(pid, addr, data)\n+}\n+\n+func PtracePokeData(pid int, addr uintptr, data []byte) (count int, err error) {\n+\treturn ptracePoke(pid, addr, data)\n+}\n+\n+func PtraceCont(pid int, signal int) (err error) {\n+\treturn ptrace64(_PT_CONTINUE, int64(pid), 1, signal, 0)\n+}\n+\n+func PtraceSingleStep(pid int) (err error) { return ptrace64(_PT_STEP, int64(pid), 1, 0, 0) }\n+\n+func PtraceAttach(pid int) (err error) { return ptrace64(_PT_ATTACH, int64(pid), 0, 0, 0) }\n+\n+func PtraceDetach(pid int) (err error) { return ptrace64(_PT_DETACH, int64(pid), 0, 0, 0) }\n+\n+//sys\treboot(how int) (err error)\n+//__linux_reboot(how _C_int) _C_int\n+func Reboot(how int) (err error) {\n+\treturn reboot(how)\n+}\n+\n+//sys\tAcct(path string) (err error)\n+//acct(path *byte) _C_int\n+\n+//sys\tFaccessat(dirfd int, path string, mode uint32, flags int) (err error)\n+//faccessat(dirfd _C_int, pathname *byte, mode _C_int, flags _C_int) _C_int\n+\n+//sys\tFchmodat(dirfd int, path string, mode uint32, flags int) (err error)\n+//fchmodat(dirfd _C_int, pathname *byte, mode Mode_t, flags _C_int) _C_int\n+\n+//sys\tFchownat(dirfd int, path string, uid int, gid int, flags int) (err error)\n+//fchownat(dirfd _C_int, path *byte, owner Uid_t, group Gid_t, flags _C_int) _C_int\n+\n+//sys\tFstatfs(fd int, buf *Statfs_t) (err error)\n+//fstatfs64(fd _C_int, buf *Statfs_t) _C_int\n+\n+//sys\tMkdirat(dirfd int, path string, mode uint32) (err error)\n+//mkdirat(dirfd _C_int, path *byte, mode Mode_t) _C_int\n+\n+//sys\tMknodat(dirfd int, path string, mode uint32, dev int) (err error)\n+//mknodat(dirfd _C_int, path *byte, mode Mode_t, dev _dev_t) _C_int\n+\n+//sys\tgetdirent(fd int, buf []byte) (n int, err error)\n+//getdirent64(fd _C_int, buf *byte, nbyte Size_t) _C_int\n+\n+func ReadDirent(fd int, buf []byte) (n int, err error) {\n+\treturn getdirent(fd, buf)\n+}\n+\n+//sys\tRenameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)\n+//renameat(olddirfd _C_int, oldpath *byte, newdirfd _C_int, newpath *byte) _C_int\n+\n+//sys\tStatfs(path string, buf *Statfs_t) (err error)\n+//statfs64(path *byte, buf *Statfs_t) _C_int\n+\n+//sys\tunlinkat(dirfd int, path string, flags int) (err error)\n+//unlinkat(dirfd _C_int, path *byte, flags _C_int) _C_int\n+\n+func Unlinkat(dirfd int, path string) (err error) {\n+\treturn unlinkat(dirfd, path, 0)\n+}"}]}