{"sha": "096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2ZTg0NDhjYWVlYjhlYTc4ZmQ4YmEwYjgzOTk4NmUyZmZlMmMyMA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-01-27T15:20:14Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-01-27T15:20:14Z"}, "message": "[AArch64] Improve bit-test-branch pattern to avoid unnecessary register clobber\n\n2015-01-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n            Jiong Wang  <jiong.wang@arm.com>\n\n  gcc/\n    * config/aarch64/aarch64.md (tb<optab><mode>1): Clobber CC reg instead of\n    scratch reg.\n    (cb<optab><mode>1): Likewise.\n    * config/aarch64/iterators.md (bcond): New define_code_attr.\n\n  gcc/testsuite/\n    * gcc.dg/long_branch.c: New testcase.\n\nFrom-SVN: r220170", "tree": {"sha": "a5dceab703799e53f4065be6de96635b78ffbe7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5dceab703799e53f4065be6de96635b78ffbe7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/comments", "author": null, "committer": null, "parents": [{"sha": "fb1a3f8f57e3f6a64da3557349a506044bd948e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1a3f8f57e3f6a64da3557349a506044bd948e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1a3f8f57e3f6a64da3557349a506044bd948e6"}], "stats": {"total": 249, "additions": 237, "deletions": 12}, "files": [{"sha": "e7a9241668b05574255a7a39f0618daea7d68515", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "patch": "@@ -1,3 +1,11 @@\n+2015-01-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.md (tb<optab><mode>1): Clobber CC reg instead\n+\tof scratch reg.\n+\t(cb<optab><mode>1): Likewise.\n+\t* config/aarch64/iterators.md (bcond): New define_code_attr.\n+\n 2015-01-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_memory_move_cost): Increase costs for"}, {"sha": "1f4169ee76e7f3f321e5ed7a4d0f08b54ee3bf17", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "patch": "@@ -499,13 +499,17 @@\n \t\t   (const_int 0))\n \t     (label_ref (match_operand 2 \"\" \"\"))\n \t     (pc)))\n-   (clobber (match_scratch:DI 3 \"=r\"))]\n+   (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"*\n-  if (get_attr_length (insn) == 8)\n-    return \\\"ubfx\\\\t%<w>3, %<w>0, %1, #1\\;<cbz>\\\\t%<w>3, %l2\\\";\n-  return \\\"<tbz>\\\\t%<w>0, %1, %l2\\\";\n-  \"\n+  {\n+    if (get_attr_length (insn) == 8)\n+      {\n+\toperands[1] = GEN_INT (HOST_WIDE_INT_1U << UINTVAL (operands[1]));\n+\treturn \"tst\\t%<w>0, %1\\;<bcond>\\t%l2\";\n+      }\n+    else\n+      return \"<tbz>\\t%<w>0, %1, %l2\";\n+  }\n   [(set_attr \"type\" \"branch\")\n    (set (attr \"length\")\n \t(if_then_else (and (ge (minus (match_dup 2) (pc)) (const_int -32768))\n@@ -519,13 +523,21 @@\n \t\t\t\t (const_int 0))\n \t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n \t\t\t   (pc)))\n-   (clobber (match_scratch:DI 2 \"=r\"))]\n+   (clobber (reg:CC CC_REGNUM))]\n   \"\"\n-  \"*\n-  if (get_attr_length (insn) == 8)\n-    return \\\"ubfx\\\\t%<w>2, %<w>0, <sizem1>, #1\\;<cbz>\\\\t%<w>2, %l1\\\";\n-  return \\\"<tbz>\\\\t%<w>0, <sizem1>, %l1\\\";\n-  \"\n+  {\n+    if (get_attr_length (insn) == 8)\n+      {\n+\tchar buf[64];\n+\tuint64_t val = ((uint64_t ) 1)\n+\t\t\t<< (GET_MODE_SIZE (<MODE>mode) * BITS_PER_UNIT - 1);\n+\tsprintf (buf, \"tst\\t%%<w>0, %\"PRId64, val);\n+\toutput_asm_insn (buf, operands);\n+\treturn \"<bcond>\\t%l1\";\n+      }\n+    else\n+      return \"<tbz>\\t%<w>0, <sizem1>, %l1\";\n+  }\n   [(set_attr \"type\" \"branch\")\n    (set (attr \"length\")\n \t(if_then_else (and (ge (minus (match_dup 1) (pc)) (const_int -32768))"}, {"sha": "65a2849155c9b331dc6179853501f0a6207d1773", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "patch": "@@ -814,6 +814,9 @@\n \t\t      (smax \"s\") (umax \"u\")\n \t\t      (smin \"s\") (umin \"u\")])\n \n+;; Emit conditional branch instructions.\n+(define_code_attr bcond [(eq \"beq\") (ne \"bne\") (lt \"bne\") (ge \"beq\")])\n+\n ;; Emit cbz/cbnz depending on comparison type.\n (define_code_attr cbz [(eq \"cbz\") (ne \"cbnz\") (lt \"cbnz\") (ge \"cbz\")])\n "}, {"sha": "9f775968b0e2f261459af40cc171437763993188", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "patch": "@@ -1,3 +1,7 @@\n+2015-01-27  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.dg/long_branch.c: New testcase.\n+\n 2015-01-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56273"}, {"sha": "f388a80c89258f847b5144af5c0ae9aabec8a933", "filename": "gcc/testsuite/gcc.dg/long_branch.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Ftestsuite%2Fgcc.dg%2Flong_branch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096e8448caeeb8ea78fd8ba0b839986e2ffe2c20/gcc%2Ftestsuite%2Fgcc.dg%2Flong_branch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flong_branch.c?ref=096e8448caeeb8ea78fd8ba0b839986e2ffe2c20", "patch": "@@ -0,0 +1,198 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-reorder-blocks\" } */\n+\n+void abort ();\n+\n+__attribute__((noinline, noclone)) int\n+restore (int a, int b)\n+{\n+  return a * b;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+do_nothing (int *input)\n+{\n+  *input = restore (*input, 1);\n+  return;\n+}\n+\n+#define CASE_ENTRY(n) \\\n+  case n: \\\n+    sum = sum / (n + 1); \\\n+    sum = restore (sum, n + 1); \\\n+    if (sum == (n + addend)) \\\n+      break;\\\n+    sum = sum / (n + 2); \\\n+    sum = restore (sum, n + 2); \\\n+    sum = sum / (n + 3); \\\n+    sum = restore (sum, n + 3); \\\n+    sum = sum / (n + 4); \\\n+    sum = restore (sum, n + 4); \\\n+    sum = sum / (n + 5); \\\n+    sum = restore (sum, n + 5); \\\n+    sum = sum / (n + 6); \\\n+    sum = restore (sum, n + 6); \\\n+    sum = sum / (n + 7); \\\n+    sum = restore (sum, n + 7); \\\n+    sum = sum / (n + 8); \\\n+    sum = restore (sum, n + 8); \\\n+    sum = sum / (n + 9); \\\n+    sum = restore (sum, n + 9); \\\n+    sum = sum / (n + 10); \\\n+    sum = restore (sum, n + 10); \\\n+    sum = sum / (n + 11); \\\n+    sum = restore (sum, n + 11); \\\n+    sum = sum / (n + 12); \\\n+    sum = restore (sum, n + 12); \\\n+    sum = sum / (n + 13); \\\n+    sum = restore (sum, n + 13); \\\n+    sum = sum / (n + 14); \\\n+    sum = restore (sum, n + 14); \\\n+    sum = sum / (n + 15); \\\n+    sum = restore (sum, n + 15); \\\n+    sum = sum / (n + 16); \\\n+    sum = restore (sum, n + 16); \\\n+    sum = sum / (n + 17); \\\n+    sum = restore (sum, n + 17); \\\n+    sum = sum / (n + 18); \\\n+    sum = restore (sum, n + 18); \\\n+    sum = sum / (n + 19); \\\n+    sum = restore (sum, n + 19); \\\n+    sum = sum / (n + 20); \\\n+    sum = restore (sum, n + 20); \\\n+    sum = sum / (n + 21); \\\n+    sum = restore (sum, n + 21); \\\n+    sum = sum / (n + 22); \\\n+    sum = restore (sum, n + 22); \\\n+    sum = sum / (n + 23); \\\n+    sum = restore (sum, n + 23); \\\n+    sum = sum / (n + 24); \\\n+    sum = restore (sum, n + 24); \\\n+    sum = sum / (n + 25); \\\n+    sum = restore (sum, n + 25); \\\n+    sum = sum / (n + 26); \\\n+    sum = restore (sum, n + 26); \\\n+    sum = sum / (n + 27); \\\n+    sum = restore (sum, n + 27); \\\n+    sum = sum / (n + 28); \\\n+    sum = restore (sum, n + 28); \\\n+    sum = sum / (n + 29); \\\n+    sum = restore (sum, n + 29); \\\n+    sum = sum / (n + 30); \\\n+    sum = restore (sum, n + 30); \\\n+    sum = sum / (n + 31); \\\n+    sum = restore (sum, n + 31); \\\n+    sum = sum / (n + 32); \\\n+    sum = restore (sum, n + 32); \\\n+    sum = sum / (n + 33); \\\n+    sum = restore (sum, n + 33); \\\n+    sum = sum / (n + 34); \\\n+    sum = restore (sum, n + 34); \\\n+    sum = sum / (n + 35); \\\n+    sum = restore (sum, n + 35); \\\n+    sum = sum / (n + 36); \\\n+    sum = restore (sum, n + 36); \\\n+    break;\n+\n+__attribute__((noinline, noclone)) long long\n+test_and_branch (int selector, int addend)\n+{\n+  long long sum = selector + 1;\n+\n+  if (selector > 64)\n+    {\n+start:\n+      return sum - 1;\n+    }\n+  else\n+    {\n+      switch (selector)\n+\t{\n+\t  CASE_ENTRY (1)\n+\t  CASE_ENTRY (2)\n+\t  CASE_ENTRY (3)\n+\t  CASE_ENTRY (4)\n+\t  CASE_ENTRY (5)\n+\t  CASE_ENTRY (6)\n+\t  CASE_ENTRY (7)\n+\t  CASE_ENTRY (8)\n+\t  CASE_ENTRY (9)\n+\t  CASE_ENTRY (10)\n+\t  CASE_ENTRY (11)\n+\t  CASE_ENTRY (12)\n+\t  CASE_ENTRY (13)\n+\t  CASE_ENTRY (14)\n+\t  CASE_ENTRY (15)\n+\t  CASE_ENTRY (16)\n+\t  CASE_ENTRY (17)\n+\t  CASE_ENTRY (18)\n+\t  CASE_ENTRY (19)\n+\t  CASE_ENTRY (20)\n+\t  CASE_ENTRY (21)\n+\t  CASE_ENTRY (22)\n+\t  CASE_ENTRY (23)\n+\t  CASE_ENTRY (24)\n+\t  CASE_ENTRY (25)\n+\t  CASE_ENTRY (26)\n+\t  CASE_ENTRY (27)\n+\t  CASE_ENTRY (28)\n+\t  CASE_ENTRY (29)\n+\t  CASE_ENTRY (30)\n+\t  CASE_ENTRY (31)\n+\t  CASE_ENTRY (32)\n+\t  CASE_ENTRY (33)\n+\t  CASE_ENTRY (34)\n+\t  CASE_ENTRY (35)\n+\t  CASE_ENTRY (36)\n+\t  CASE_ENTRY (37)\n+\t  CASE_ENTRY (38)\n+\t  CASE_ENTRY (39)\n+\t  CASE_ENTRY (40)\n+\t  CASE_ENTRY (41)\n+\t  CASE_ENTRY (42)\n+\t  CASE_ENTRY (43)\n+\t  CASE_ENTRY (44)\n+\t  CASE_ENTRY (45)\n+\t  CASE_ENTRY (46)\n+\t  CASE_ENTRY (47)\n+\t  CASE_ENTRY (48)\n+\t  CASE_ENTRY (49)\n+\t  CASE_ENTRY (50)\n+\t  CASE_ENTRY (51)\n+\t  CASE_ENTRY (52)\n+\t  CASE_ENTRY (53)\n+\t  CASE_ENTRY (54)\n+\t  CASE_ENTRY (55)\n+\t  CASE_ENTRY (56)\n+\t  CASE_ENTRY (57)\n+\t  CASE_ENTRY (58)\n+\t  CASE_ENTRY (59)\n+\t  CASE_ENTRY (60)\n+\t  CASE_ENTRY (61)\n+\t  CASE_ENTRY (62)\n+\t  CASE_ENTRY (63)\n+\t  CASE_ENTRY (64)\n+\t}\n+\n+      do_nothing ((int *)&sum);\n+\n+      if (sum & 0x40)\n+\tgoto start;\n+    }\n+\n+  return -1;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  long long ret = test_and_branch (64, 1);\n+  if (ret != 64)\n+    abort ();\n+\n+  ret = test_and_branch (7, 1);\n+  if (ret != -1)\n+    abort ();\n+\n+  return 0;\n+}"}]}