{"sha": "a8e3bad42b9636e20442b52a3924c914dc34dd82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThlM2JhZDQyYjk2MzZlMjA0NDJiNTJhMzkyNGM5MTRkYzM0ZGQ4Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-11-26T14:35:54Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-11-26T14:35:54Z"}, "message": "builtins.c (fold_builtin_fmin_fmax): Handle NaN arguments.\n\n\t* builtins.c (fold_builtin_fmin_fmax): Handle NaN arguments.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-minmax-1.c: Test NaN in fmin/fmax.\n\tDon't ever inline the testcase.\n\nFrom-SVN: r119224", "tree": {"sha": "734a8de765f4b48ee96ae36a16bd7acbc013212e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/734a8de765f4b48ee96ae36a16bd7acbc013212e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8e3bad42b9636e20442b52a3924c914dc34dd82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e3bad42b9636e20442b52a3924c914dc34dd82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e3bad42b9636e20442b52a3924c914dc34dd82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e3bad42b9636e20442b52a3924c914dc34dd82/comments", "author": null, "committer": null, "parents": [{"sha": "d19c0f4fa6599e454c1c7b12917252f6f34852e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19c0f4fa6599e454c1c7b12917252f6f34852e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19c0f4fa6599e454c1c7b12917252f6f34852e7"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "274c862f3bee66223ef8e502cb4f02eb44a1c277", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8e3bad42b9636e20442b52a3924c914dc34dd82", "patch": "@@ -1,3 +1,7 @@\n+2006-11-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_fmin_fmax): Handle NaN arguments.\n+\n 2006-11-26  Razya Ladklesky  <razya@il.ibm.com> \n \n         * testsuite/gcc.dg/ipa/ipa-6.c: New."}, {"sha": "b2964ded2966dfd6cb173e2a3dabb374b7860f27", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a8e3bad42b9636e20442b52a3924c914dc34dd82", "patch": "@@ -8734,6 +8734,20 @@ fold_builtin_fmin_fmax (tree arglist, tree type, bool max)\n       if (res)\n \treturn res;\n \n+      /* If either argument is NaN, return the other one.  Avoid the\n+\t transformation if we get (and honor) a signalling NaN.  Using\n+\t omit_one_operand() ensures we create a non-lvalue.  */\n+      if (TREE_CODE (arg0) == REAL_CST\n+\t  && real_isnan (&TREE_REAL_CST (arg0))\n+\t  && (! HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t      || ! TREE_REAL_CST (arg0).signalling))\n+\treturn omit_one_operand (type, arg1, arg0);\n+      if (TREE_CODE (arg1) == REAL_CST\n+\t  && real_isnan (&TREE_REAL_CST (arg1))\n+\t  && (! HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg1)))\n+\t      || ! TREE_REAL_CST (arg1).signalling))\n+\treturn omit_one_operand (type, arg0, arg1);\n+\n       /* Transform fmin/fmax(x,x) -> x.  */\n       if (operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n \treturn omit_one_operand (type, arg0, arg1);"}, {"sha": "3adde52429f53fae72df8394beeeb821247521d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8e3bad42b9636e20442b52a3924c914dc34dd82", "patch": "@@ -1,3 +1,8 @@\n+2006-11-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-minmax-1.c: Test NaN in fmin/fmax.\n+\tDon't ever inline the testcase.\n+\n 2006-11-25  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR fortran/29982"}, {"sha": "4948aa9e004f451f0a2ce8a4c51f55bafcbca6cd", "filename": "gcc/testsuite/gcc.dg/torture/builtin-minmax-1.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e3bad42b9636e20442b52a3924c914dc34dd82/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-minmax-1.c?ref=a8e3bad42b9636e20442b52a3924c914dc34dd82", "patch": "@@ -74,7 +74,25 @@ extern int pure(int) __attribute__ ((__pure__));\n     link_error(__LINE__); \\\n   } while (0)\n \n-void foo (float xf, double x, long double xl,\n+/* Test that FUNC(NaN,x) == x.  We cast to (long) so \"!=\" folds.  Set\n+   parameter SIGNAL to `s' for testing signaling NaN.  */\n+#define TEST_NAN(FUNC,SIGNAL) do { \\\n+  if ((long)FUNC##f(__builtin_nan##SIGNAL##f(\"\"),xf) != (long)xf) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC##f(xf,__builtin_nan##SIGNAL##f(\"\")) != (long)xf) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC(__builtin_nan##SIGNAL(\"\"),x) != (long)x) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC(x,__builtin_nan##SIGNAL(\"\")) != (long)x) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC##l(__builtin_nan##SIGNAL##l(\"\"),xl) != (long)xl) \\\n+    link_error(__LINE__); \\\n+  if ((long)FUNC##l(xl,__builtin_nan##SIGNAL##l(\"\")) != (long)xl) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n+void __attribute__ ((__noinline__))\n+     foo (float xf, double x, long double xl,\n \t  float yf, double y, long double yl,\n \t  int i, int j)\n {\n@@ -91,6 +109,11 @@ void foo (float xf, double x, long double xl,\n   \n   TEST_NONNEG(fmin);\n   TEST_NONNEG(fmax);\n+\n+  TEST_NAN(fmin,);\n+  TEST_NAN(fmax,);\n+  TEST_NAN(fmin,s);\n+  TEST_NAN(fmax,s);\n }\n \n int main()"}]}