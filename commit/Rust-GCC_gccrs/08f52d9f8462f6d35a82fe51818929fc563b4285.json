{"sha": "08f52d9f8462f6d35a82fe51818929fc563b4285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmNTJkOWY4NDYyZjZkMzVhODJmZTUxODE4OTI5ZmM1NjNiNDI4NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T08:48:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T08:48:04Z"}, "message": "[multiple changes]\n\n2016-04-21  Philippe Gil  <gil@adacore.com>\n\n\t* tracebak.c (__gnat_backtrace): handle bad RIP values (win64 only)\n\n2016-04-21  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_aggr.adb (Component_Not_OK_For_Backend): Return true for string\n\tliterals.\n\n2016-04-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Has_Non_Null_Abstract_State): New routine.\n\t* einfo.ads New synthesized attribute\n\tHas_Non_Null_Abstract_State along with occurrences in entities.\n\t(Has_Non_Null_Abstract_State): New routine.\n\t* sem_ch7.adb (Unit_Requires_Body): Add local variable\n\tRequires_Body. A package declaring an abstract state requires\n\ta body only when the state is non-null and the package contains\n\tat least one other construct that requires completion in a body.\n\t* sem_util.adb (Mode_Is_Off): Removed.\n\t(Requires_State_Refinement): Remove an obsolete check. Code\n\tcleanup.\n\n2016-04-21  Bob Duff  <duff@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): In processing\n\tthe 'Old attribute, a warning is given for infinite recursion. Fix\n\tthe code to not crash when the prefix of 'Old denotes a protected\n\tfunction.\n\t* sem_ch5.adb (Analyze_Iterator_Specification):\n\tAvoid calling Is_Dependent_Component_Of_Mutable_Object in cases\n\twhere the parameter would not be an object.\n\n2016-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_eval.adb (Compile_Time_Compare): Be prepared for an empty\n\tEtype or Underlying_Type of the operands.\n\n2016-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* atree.adb (Print_Statistics): Protect against overflows and\n\tprint the memory consumption in bytes.\n\t* table.adb (Reallocate): Do the intermediate calculation of the new\n\tsize using the Memory.size_t type.\n\nFrom-SVN: r235312", "tree": {"sha": "d48fa71938d552b7b9b48fb1a0a0bf1bc6acb1a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48fa71938d552b7b9b48fb1a0a0bf1bc6acb1a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08f52d9f8462f6d35a82fe51818929fc563b4285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f52d9f8462f6d35a82fe51818929fc563b4285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f52d9f8462f6d35a82fe51818929fc563b4285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f52d9f8462f6d35a82fe51818929fc563b4285/comments", "author": null, "committer": null, "parents": [{"sha": "b943a971133bb727c28aaaa705b93c7f6f7a5fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b943a971133bb727c28aaaa705b93c7f6f7a5fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b943a971133bb727c28aaaa705b93c7f6f7a5fb4"}], "stats": {"total": 299, "additions": 196, "deletions": 103}, "files": [{"sha": "0203415835205e8801ba6f0b911b7a421569a003", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -1,3 +1,48 @@\n+2016-04-21  Philippe Gil  <gil@adacore.com>\n+\n+\t* tracebak.c (__gnat_backtrace): handle bad RIP values (win64 only)\n+\n+2016-04-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_aggr.adb (Component_Not_OK_For_Backend): Return true for string\n+\tliterals.\n+\n+2016-04-21  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Has_Non_Null_Abstract_State): New routine.\n+\t* einfo.ads New synthesized attribute\n+\tHas_Non_Null_Abstract_State along with occurrences in entities.\n+\t(Has_Non_Null_Abstract_State): New routine.\n+\t* sem_ch7.adb (Unit_Requires_Body): Add local variable\n+\tRequires_Body. A package declaring an abstract state requires\n+\ta body only when the state is non-null and the package contains\n+\tat least one other construct that requires completion in a body.\n+\t* sem_util.adb (Mode_Is_Off): Removed.\n+\t(Requires_State_Refinement): Remove an obsolete check. Code\n+\tcleanup.\n+\n+2016-04-21  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): In processing\n+\tthe 'Old attribute, a warning is given for infinite recursion. Fix\n+\tthe code to not crash when the prefix of 'Old denotes a protected\n+\tfunction.\n+\t* sem_ch5.adb (Analyze_Iterator_Specification):\n+\tAvoid calling Is_Dependent_Component_Of_Mutable_Object in cases\n+\twhere the parameter would not be an object.\n+\n+2016-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.adb (Compile_Time_Compare): Be prepared for an empty\n+\tEtype or Underlying_Type of the operands.\n+\n+2016-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* atree.adb (Print_Statistics): Protect against overflows and\n+\tprint the memory consumption in bytes.\n+\t* table.adb (Reallocate): Do the intermediate calculation of the new\n+\tsize using the Memory.size_t type.\n+\n 2016-04-21  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Suppress"}, {"sha": "a0849d253d084a96701e2766e7779d13dc8309cf", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1970,13 +1970,6 @@ package body Atree is\n       E_Count : Natural := 0;\n \n    begin\n-      Write_Str (\"Maximum number of nodes per entity: \");\n-      Write_Int (Int (Num_Extension_Nodes + 1));\n-      Write_Eol;\n-      Write_Str (\"Number of allocated nodes: \");\n-      Write_Int (Int (N_Count));\n-      Write_Eol;\n-\n       Write_Str (\"Number of entities: \");\n       Write_Eol;\n \n@@ -2051,10 +2044,29 @@ package body Atree is\n       Write_Str (\"Total number of entities: \");\n       Write_Int (Int (E_Count));\n       Write_Eol;\n+\n+      Write_Str (\"Maximum number of nodes per entity: \");\n+      Write_Int (Int (Num_Extension_Nodes + 1));\n+      Write_Eol;\n+\n+      Write_Str (\"Number of allocated nodes: \");\n+      Write_Int (Int (N_Count));\n+      Write_Eol;\n+\n       Write_Str (\"Ratio allocated nodes/entities: \");\n-      Write_Int (Int (N_Count * 100 / E_Count));\n+      Write_Int (Int (Long_Long_Integer (N_Count) * 100 /\n+                                                 Long_Long_Integer (E_Count)));\n       Write_Str (\"/100\");\n       Write_Eol;\n+\n+      Write_Str (\"Size of a node in bytes: \");\n+      Write_Int (Int (Node_Record'Size) / Storage_Unit);\n+      Write_Eol;\n+\n+      Write_Str (\"Memory consumption in bytes: \");\n+      Write_Int (Int (Long_Long_Integer (N_Count) *\n+                                           (Node_Record'Size / Storage_Unit)));\n+      Write_Eol;\n    end Print_Statistics;\n \n    -------------------"}, {"sha": "f52702f03fdf0fbd13ed4703abfc42f19ea2db92", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -7332,6 +7332,20 @@ package body Einfo is\n         and then Present (Non_Limited_View (Id));\n    end Has_Non_Limited_View;\n \n+   ---------------------------------\n+   -- Has_Non_Null_Abstract_State --\n+   ---------------------------------\n+\n+   function Has_Non_Null_Abstract_State (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Generic_Package, E_Package));\n+\n+      return\n+        Present (Abstract_States (Id))\n+          and then\n+            not Is_Null_State (Node (First_Elmt (Abstract_States (Id))));\n+   end Has_Non_Null_Abstract_State;\n+\n    -------------------------------------\n    -- Has_Non_Null_Visible_Refinement --\n    -------------------------------------"}, {"sha": "d403f77d83073176d85c28eccd260417a07976c1", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1761,6 +1761,10 @@ package Einfo is\n --       E_Abstract_State entities. True if their Non_Limited_View attribute\n --       is present.\n \n+--    Has_Non_Null_Abstract_State (synth)\n+--       Defined in package entities. True if the package is subject to a non-\n+--       null Abstract_State aspect/pragma.\n+\n --    Has_Non_Null_Visible_Refinement (synth)\n --       Defined in E_Abstract_State entities. True if the state has a visible\n --       refinement of at least one variable or state constituent as expressed\n@@ -6133,6 +6137,7 @@ package Einfo is\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Static_Elaboration_Desired          (Flag77)   (non-generic case only)\n+   --    Has_Non_Null_Abstract_State         (synth)\n    --    Has_Null_Abstract_State             (synth)\n    --    Is_Wrapper_Package                  (synth)    (non-generic case only)\n    --    Scope_Depth                         (synth)\n@@ -7270,6 +7275,7 @@ package Einfo is\n    function Has_Entries                         (Id : E) return B;\n    function Has_Foreign_Convention              (Id : E) return B;\n    function Has_Non_Limited_View                (Id : E) return B;\n+   function Has_Non_Null_Abstract_State         (Id : E) return B;\n    function Has_Non_Null_Visible_Refinement     (Id : E) return B;\n    function Has_Null_Abstract_State             (Id : E) return B;\n    function Has_Null_Visible_Refinement         (Id : E) return B;"}, {"sha": "a99b6ce59aeb65e31b14de70eed4f31c7f7a8b94", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6014,6 +6014,12 @@ package body Exp_Aggr is\n             elsif Possible_Bit_Aligned_Component (Expr_Q) then\n                Static_Components := False;\n                return True;\n+\n+            elsif Modify_Tree_For_C\n+              and then Ekind (Etype (Expr_Q)) = E_String_Literal_Subtype\n+            then\n+               Static_Components := False;\n+               return True;\n             end if;\n \n             if Is_Elementary_Type (Etype (Expr_Q)) then"}, {"sha": "3a0fcbe60fe0b93e06a918a265f06f59ed4f7a73", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -4940,7 +4940,13 @@ package body Sem_Attr is\n             --    function Func (...) return ...\n             --      with Post => Func'Old ...;\n \n-            elsif Nkind (P) = N_Function_Call then\n+            --  The function may be specified in qualified form X.Y where X is\n+            --  a protected object and Y is a protected function. In that case\n+            --  ensure that the qualified form has an entity.\n+\n+            elsif Nkind (P) = N_Function_Call\n+              and then Nkind (Name (P)) in N_Has_Entity\n+            then\n                Pref_Id := Entity (Name (P));\n \n                if Ekind_In (Spec_Id, E_Function, E_Generic_Function)"}, {"sha": "138da4dedda6a21fe6e129c979ff2a77abd35444", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2139,11 +2139,15 @@ package body Sem_Ch5 is\n \n             else\n                declare\n-                  Element     : constant Entity_Id :=\n-                    Find_Value_Of_Aspect (Typ, Aspect_Iterator_Element);\n-                  Iterator    : constant Entity_Id :=\n-                    Find_Value_Of_Aspect (Typ, Aspect_Default_Iterator);\n-                  Cursor_Type : Entity_Id;\n+                  Element        : constant Entity_Id :=\n+                                     Find_Value_Of_Aspect\n+                                       (Typ, Aspect_Iterator_Element);\n+                  Iterator       : constant Entity_Id :=\n+                                     Find_Value_Of_Aspect\n+                                       (Typ, Aspect_Default_Iterator);\n+                  Orig_Iter_Name : constant Node_Id :=\n+                                     Original_Node (Iter_Name);\n+                  Cursor_Type    : Entity_Id;\n \n                begin\n                   if No (Element) then\n@@ -2181,8 +2185,9 @@ package body Sem_Ch5 is\n                      if not Is_Variable (Iter_Name)\n                        and then not Has_Aspect (Typ, Aspect_Constant_Indexing)\n                      then\n-                        Error_Msg_N (\"iteration over constant container \"\n-                          & \"require constant_indexing aspect\", N);\n+                        Error_Msg_N\n+                          (\"iteration over constant container require \"\n+                           & \"constant_indexing aspect\", N);\n \n                      --  The Iterate function may have an in_out parameter,\n                      --  and a constant container is thus illegal.\n@@ -2193,15 +2198,20 @@ package body Sem_Ch5 is\n                                   E_In_Parameter\n                        and then not Is_Variable (Iter_Name)\n                      then\n-                        Error_Msg_N\n-                          (\"variable container expected\", N);\n+                        Error_Msg_N (\"variable container expected\", N);\n                      end if;\n \n-                     if Nkind (Original_Node (Iter_Name))\n-                        = N_Selected_Component\n-                       and then\n-                         Is_Dependent_Component_Of_Mutable_Object\n-                           (Original_Node (Iter_Name))\n+                     --  It could be a function, which\n+                     --  Is_Dependent_Component_Of_Mutable_Object doesn't like,\n+                     --  so check that it's a component.\n+\n+                     if Nkind (Orig_Iter_Name) = N_Selected_Component\n+                       and then Ekind_In\n+                                  (Entity (Selector_Name (Orig_Iter_Name)),\n+                                   E_Component,\n+                                   E_Discriminant)\n+                       and then Is_Dependent_Component_Of_Mutable_Object\n+                                  (Orig_Iter_Name)\n                      then\n                         Error_Msg_N\n                           (\"container cannot be a discriminant-dependent \""}, {"sha": "04ad209b32cc2e4b157e349b6cb4295c8f11cdd4", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2454,7 +2454,7 @@ package body Sem_Ch7 is\n \n       elsif Ekind (Id) = E_Package\n         and then Nkind (Original_Node (Unit_Declaration_Node (Id))) =\n-                                                   N_Formal_Package_Declaration\n+                   N_Formal_Package_Declaration\n       then\n          return False;\n \n@@ -2464,8 +2464,7 @@ package body Sem_Ch7 is\n       --  implicit completion at some point.\n \n       elsif (Is_Overloadable (Id)\n-              and then Ekind (Id) /= E_Enumeration_Literal\n-              and then Ekind (Id) /= E_Operator\n+              and then not Ekind_In (Id, E_Enumeration_Literal, E_Operator)\n               and then not Is_Abstract_Subprogram (Id)\n               and then not Has_Completion (Id)\n               and then Comes_From_Source (Parent (Id)))\n@@ -2494,7 +2493,6 @@ package body Sem_Ch7 is\n         or else\n           (Is_Generic_Subprogram (Id)\n             and then not Has_Completion (Id))\n-\n       then\n          return True;\n \n@@ -2962,6 +2960,10 @@ package body Sem_Ch7 is\n    is\n       E : Entity_Id;\n \n+      Requires_Body : Boolean := False;\n+      --  Flag set when the unit has at least one construct that requries\n+      --  completion in a body.\n+\n    begin\n       --  Imported entity never requires body. Right now, only subprograms can\n       --  be imported, but perhaps in the future we will allow import of\n@@ -2996,35 +2998,42 @@ package body Sem_Ch7 is\n                return True;\n             end if;\n          end;\n-\n-      --  A [generic] package that introduces at least one non-null abstract\n-      --  state requires completion. However, there is a separate rule that\n-      --  requires that such a package have a reason other than this for a\n-      --  body being required (if necessary a pragma Elaborate_Body must be\n-      --  provided). If Ignore_Abstract_State is True, we don't do this check\n-      --  (so we can use Unit_Requires_Body to check for some other reason).\n-\n-      elsif Ekind_In (Pack_Id, E_Generic_Package, E_Package)\n-        and then not Ignore_Abstract_State\n-        and then Present (Abstract_States (Pack_Id))\n-        and then not Is_Null_State\n-                       (Node (First_Elmt (Abstract_States (Pack_Id))))\n-      then\n-         return True;\n       end if;\n \n-      --  Otherwise search entity chain for entity requiring completion\n+      --  Traverse the entity chain of the package and look for constructs that\n+      --  require a completion in a body.\n \n       E := First_Entity (Pack_Id);\n       while Present (E) loop\n-         if Requires_Completion_In_Body (E, Pack_Id) then\n-            return True;\n+\n+         --  Skip abstract states because their completion depends on several\n+         --  criteria (see below).\n+\n+         if Ekind (E) = E_Abstract_State then\n+            null;\n+\n+         elsif Requires_Completion_In_Body (E, Pack_Id) then\n+            Requires_Body := True;\n+            exit;\n          end if;\n \n          Next_Entity (E);\n       end loop;\n \n-      return False;\n+      --  A [generic] package that defines at least one non-null abstract state\n+      --  requires a completion only when at least one other construct requires\n+      --  a completion in a body (SPARK RM 7.1.4(4) and (6)). This check is not\n+      --  performed if the caller requests this behavior.\n+\n+      if not Ignore_Abstract_State\n+        and then Ekind_In (Pack_Id, E_Generic_Package, E_Package)\n+        and then Has_Non_Null_Abstract_State (Pack_Id)\n+        and then Requires_Body\n+      then\n+         return True;\n+      end if;\n+\n+      return Requires_Body;\n    end Unit_Requires_Body;\n \n    -----------------------------"}, {"sha": "5589394ede2e6898c539ef281628ec24b2d25602", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -772,12 +772,8 @@ package body Sem_Eval is\n       Assume_Valid : Boolean;\n       Rec          : Boolean := False) return Compare_Result\n    is\n-      Ltyp : Entity_Id := Underlying_Type (Etype (L));\n-      Rtyp : Entity_Id := Underlying_Type (Etype (R));\n-      --  These get reset to the base type for the case of entities where\n-      --  Is_Known_Valid is not set. This takes care of handling possible\n-      --  invalid representations using the value of the base type, in\n-      --  accordance with RM 13.9.1(10).\n+      Ltyp : Entity_Id := Etype (L);\n+      Rtyp : Entity_Id := Etype (R);\n \n       Discard : aliased Uint;\n \n@@ -1100,19 +1096,35 @@ package body Sem_Eval is\n \n       if L = R then\n          return EQ;\n+      end if;\n \n       --  If expressions have no types, then do not attempt to determine if\n       --  they are the same, since something funny is going on. One case in\n       --  which this happens is during generic template analysis, when bounds\n       --  are not fully analyzed.\n \n-      elsif No (Ltyp) or else No (Rtyp) then\n+      if No (Ltyp) or else No (Rtyp) then\n+         return Unknown;\n+      end if;\n+\n+      --  These get reset to the base type for the case of entities where\n+      --  Is_Known_Valid is not set. This takes care of handling possible\n+      --  invalid representations using the value of the base type, in\n+      --  accordance with RM 13.9.1(10).\n+\n+      Ltyp := Underlying_Type (Ltyp);\n+      Rtyp := Underlying_Type (Rtyp);\n+\n+      --  Same rationale as above, but for Underlying_Type instead of Etype\n+\n+      if No (Ltyp) or else No (Rtyp) then\n          return Unknown;\n+      end if;\n \n-      --  We do not attempt comparisons for packed arrays represented as\n+      --  We do not attempt comparisons for packed arrays arrays represented as\n       --  modular types, where the semantics of comparison is quite different.\n \n-      elsif Is_Packed_Array_Impl_Type (Ltyp)\n+      if Is_Packed_Array_Impl_Type (Ltyp)\n         and then Is_Modular_Integer_Type (Ltyp)\n       then\n          return Unknown;"}, {"sha": "a47002645bda3a3eab76d700b11d686e9e9d17c4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -18267,35 +18267,7 @@ package body Sem_Util is\n      (Spec_Id : Entity_Id;\n       Body_Id : Entity_Id) return Boolean\n    is\n-      function Mode_Is_Off (Prag : Node_Id) return Boolean;\n-      --  Given pragma SPARK_Mode, determine whether the mode is Off\n-\n-      -----------------\n-      -- Mode_Is_Off --\n-      -----------------\n-\n-      function Mode_Is_Off (Prag : Node_Id) return Boolean is\n-         Mode : Node_Id;\n-\n-      begin\n-         --  The default SPARK mode is On\n-\n-         if No (Prag) then\n-            return False;\n-         end if;\n-\n-         Mode := Get_Pragma_Arg (First (Pragma_Argument_Associations (Prag)));\n-\n-         --  Then the pragma lacks an argument, the default mode is On\n-\n-         if No (Mode) then\n-            return False;\n-         else\n-            return Chars (Mode) = Name_Off;\n-         end if;\n-      end Mode_Is_Off;\n-\n-   --  Start of processing for Requires_State_Refinement\n+      Prag : constant Node_Id := SPARK_Pragma (Body_Id);\n \n    begin\n       --  A package that does not define at least one abstract state cannot\n@@ -18314,15 +18286,8 @@ package body Sem_Util is\n       --  it is and the mode is Off, the package body is considered to be in\n       --  regular Ada and does not require refinement.\n \n-      elsif Mode_Is_Off (SPARK_Pragma (Body_Id)) then\n-         return False;\n-\n-      --  The body's SPARK_Mode may be inherited from a similar pragma that\n-      --  appears in the private declarations of the spec. The pragma we are\n-      --  interested appears as the second entry in SPARK_Pragma.\n-\n-      elsif Present (SPARK_Pragma (Spec_Id))\n-        and then Mode_Is_Off (Next_Pragma (SPARK_Pragma (Spec_Id)))\n+      elsif Present (Prag)\n+        and then Get_SPARK_Mode_From_Annotation (Prag) = Off\n       then\n          return False;\n "}, {"sha": "34fe728378705906754dca70f553d8f8f3c1db24", "filename": "gcc/ada/table.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Ftable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Ftable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.adb?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -207,9 +207,11 @@ package body Table is\n             end if;\n          end if;\n \n+         --  Do the intermediate calculation in size_t to avoid signed overflow\n+\n          New_Size :=\n-           Memory.size_t ((Max - Min + 1) *\n-                          (Table_Type'Component_Size / Storage_Unit));\n+           Memory.size_t (Max - Min + 1) *\n+                                    (Table_Type'Component_Size / Storage_Unit);\n \n          if Table = null then\n             Table := To_Pointer (Alloc (New_Size));"}, {"sha": "dceac0d443b18b81fb809e6739dc122f9fddef6a", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f52d9f8462f6d35a82fe51818929fc563b4285/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=08f52d9f8462f6d35a82fe51818929fc563b4285", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *            Copyright (C) 2000-2015, Free Software Foundation, Inc.       *\n+ *            Copyright (C) 2000-2016, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -99,6 +99,8 @@ extern void (*Unlock_Task) (void);\n \n #include <windows.h>\n \n+#define IS_BAD_PTR(ptr) (IsBadCodePtr((FARPROC)ptr))\n+\n int\n __gnat_backtrace (void **array,\n                   int size,\n@@ -137,6 +139,10 @@ __gnat_backtrace (void **array,\n \t}\n       else\n \t{\n+\t  /* If the last unwinding step failed somehow, stop here.  */\n+\t  if (IS_BAD_PTR(context.Rip))\n+\t    break;\n+\n \t  /* Unwind.  */\n \t  memset (&NvContext, 0, sizeof (KNONVOLATILE_CONTEXT_POINTERS));\n \t  RtlVirtualUnwind (0, ImageBase, context.Rip, RuntimeFunction,"}]}