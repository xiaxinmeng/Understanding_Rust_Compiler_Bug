{"sha": "5274639a7c33f4a7bfd51621200cbfae5330f1c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3NDYzOWE3YzMzZjRhN2JmZDUxNjIxMjAwY2JmYWU1MzMwZjFjOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-28T17:53:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-02-28T17:53:35Z"}, "message": "Undo the accidental checkin :(\n\nFrom-SVN: r40129", "tree": {"sha": "f61b82051d5216e592009b2132c13301a0bdce4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f61b82051d5216e592009b2132c13301a0bdce4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5274639a7c33f4a7bfd51621200cbfae5330f1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5274639a7c33f4a7bfd51621200cbfae5330f1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5274639a7c33f4a7bfd51621200cbfae5330f1c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5274639a7c33f4a7bfd51621200cbfae5330f1c8/comments", "author": null, "committer": null, "parents": [{"sha": "6f45f005917d5c1d3223a437584b4fd66751a39c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f45f005917d5c1d3223a437584b4fd66751a39c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f45f005917d5c1d3223a437584b4fd66751a39c"}], "stats": {"total": 39, "additions": 0, "deletions": 39}, "files": [{"sha": "a34aa58f6efb99f53761e93336becf835de38b49", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5274639a7c33f4a7bfd51621200cbfae5330f1c8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5274639a7c33f4a7bfd51621200cbfae5330f1c8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5274639a7c33f4a7bfd51621200cbfae5330f1c8", "patch": "@@ -1743,39 +1743,6 @@ dwarf2out_frame_debug (insn)\n       cfa_store = cfa;\n       cfa_temp.reg = -1;\n       cfa_temp.offset = 0;\n-\n-      n_alternate_entry_points = 0;\n-      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\tif (GET_CODE (insn) == CODE_LABEL && LABEL_ALTERNATE_NAME (insn))\n-\t  n_alternate_entry_points ++;\n-\n-      /* For each alternate entry point amit an store_state command.  We will pop\n-\t the state once we will reach it.  */\n-      while (n_alternate_entry_points--)\n-\t{\n-\t  register dw_cfi_ref xcfi;\n-\n-\t  /* Set the location counter to the new label.  */\n-\t  xcfi = new_cfi ();\n-\t  xcfi->dw_cfi_opc = DW_CFA_remember_state;\n-\t  add_fde_cfi (NULL, xcfi);\n-\t}\n-      return;\n-    }\n-  /* An alternate entry point.  Pop the state we pushed during initialization\n-     and re-initialize our tables.  */\n-  if (GET_CODE (insn) == CODE_LABEL && LABEL_ALTERNATE_NAME (insn))\n-    {\n-      register dw_cfi_ref xcfi;\n-      label = dwarf2out_cfi_label ();\n-\n-      /* On entry, the Canonical Frame Address is at SP.  */\n-      dwarf2out_def_cfa (label, STACK_POINTER_REGNUM, INCOMING_FRAME_SP_OFFSET);\n-\n-      /* Restore the frame state we had right before entering function.  */\n-      xcfi = new_cfi ();\n-      xcfi->dw_cfi_opc = DW_CFA_restore_state;\n-      add_fde_cfi (label, xcfi);\n       return;\n     }\n "}, {"sha": "70d6add68182fa099108f5138d7b347029a6f6c5", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5274639a7c33f4a7bfd51621200cbfae5330f1c8/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5274639a7c33f4a7bfd51621200cbfae5330f1c8/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5274639a7c33f4a7bfd51621200cbfae5330f1c8", "patch": "@@ -2332,12 +2332,6 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       break;\n \n     case CODE_LABEL:\n-#if defined (DWARF2_UNWIND_INFO)\n-      /* If we push arguments, we need to check all insns for stack\n-\t adjustments.  */\n-      if (dwarf2out_do_frame ())\n-\tdwarf2out_frame_debug (insn);\n-#endif\n       /* The target port might emit labels in the output function for\n \t some insn, e.g. sh.c output_branchy_insn.  */\n       if (CODE_LABEL_NUMBER (insn) <= max_labelno)"}]}