{"sha": "642bcbdf1d63f4c20070bfa7f15998f5b833a527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyYmNiZGYxZDYzZjRjMjAwNzBiZmE3ZjE1OTk4ZjViODMzYTUyNw==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2016-07-08T18:34:55Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2016-07-08T18:34:55Z"}, "message": "parse.c (matcha): Define.\n\n\tgcc/fortran/\n\t* parse.c (matcha): Define.\n\t(decode_oacc_directive): Add spec_only local var and set it.  Use\n\tmatcha to parse acc directives except for routine and declare.  Return\n\tST_GET_FCN_CHARACTERISTICS if a non-declarative directive could be\n\tmatched.\n\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/pr71704.f90: New test.\n\nFrom-SVN: r238171", "tree": {"sha": "371c0bd327dfe09e5b3c7be1a13649d8fbe2eb22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/371c0bd327dfe09e5b3c7be1a13649d8fbe2eb22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/642bcbdf1d63f4c20070bfa7f15998f5b833a527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642bcbdf1d63f4c20070bfa7f15998f5b833a527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642bcbdf1d63f4c20070bfa7f15998f5b833a527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642bcbdf1d63f4c20070bfa7f15998f5b833a527/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d81102f47338747e8b769325012c34a0820a916b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81102f47338747e8b769325012c34a0820a916b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81102f47338747e8b769325012c34a0820a916b"}], "stats": {"total": 142, "additions": 121, "deletions": 21}, "files": [{"sha": "4faf79780abf33021568695903606d39a0c06af6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=642bcbdf1d63f4c20070bfa7f15998f5b833a527", "patch": "@@ -1,3 +1,11 @@\n+2016-07-08  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* parse.c (matcha): Define.\n+\t(decode_oacc_directive): Add spec_only local var and set it.  Use\n+\tmatcha to parse acc directives except for routine and declare.  Return\n+\tST_GET_FCN_CHARACTERISTICS if a non-declarative directive could be\n+\tmatched.\n+\n 2016-07-08  Martin Liska  <mliska@suse.cz>\n \n \t* invoke.texi (Wundefined-do-loop): Enhance documentation."}, {"sha": "0aa736c7089d6d6f6cacb70740dd349b4b8f4833", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=642bcbdf1d63f4c20070bfa7f15998f5b833a527", "patch": "@@ -589,11 +589,25 @@ decode_statement (void)\n   return ST_NONE;\n }\n \n+/* Like match and if spec_only, goto do_spec_only without actually\n+   matching.  */\n+#define matcha(keyword, subr, st)\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      if (spec_only && gfc_match (keyword) == MATCH_YES)\t\\\n+\tgoto do_spec_only;\t\t\t\t\t\\\n+      else if (match_word (keyword, subr, &old_locus)\t\t\\\n+\t       == MATCH_YES)\t\t\t\t\t\\\n+\treturn st;\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tundo_new_statement ();\t\t\t\t  \t\\\n+    } while (0);\n+\n static gfc_statement\n decode_oacc_directive (void)\n {\n   locus old_locus;\n   char c;\n+  bool spec_only = false;\n \n   gfc_enforce_clean_symbol_state ();\n \n@@ -608,6 +622,10 @@ decode_oacc_directive (void)\n       return ST_NONE;\n     }\n \n+  if (gfc_current_state () == COMP_FUNCTION\n+      && gfc_current_block ()->result->ts.kind == -1)\n+    spec_only = true;\n+\n   gfc_unset_implicit_pure (NULL);\n \n   old_locus = gfc_current_locus;\n@@ -621,49 +639,52 @@ decode_oacc_directive (void)\n   switch (c)\n     {\n     case 'a':\n-      match (\"atomic\", gfc_match_oacc_atomic, ST_OACC_ATOMIC);\n+      matcha (\"atomic\", gfc_match_oacc_atomic, ST_OACC_ATOMIC);\n       break;\n     case 'c':\n-      match (\"cache\", gfc_match_oacc_cache, ST_OACC_CACHE);\n+      matcha (\"cache\", gfc_match_oacc_cache, ST_OACC_CACHE);\n       break;\n     case 'd':\n-      match (\"data\", gfc_match_oacc_data, ST_OACC_DATA);\n+      matcha (\"data\", gfc_match_oacc_data, ST_OACC_DATA);\n       match (\"declare\", gfc_match_oacc_declare, ST_OACC_DECLARE);\n       break;\n     case 'e':\n-      match (\"end atomic\", gfc_match_omp_eos, ST_OACC_END_ATOMIC);\n-      match (\"end data\", gfc_match_omp_eos, ST_OACC_END_DATA);\n-      match (\"end host_data\", gfc_match_omp_eos, ST_OACC_END_HOST_DATA);\n-      match (\"end kernels loop\", gfc_match_omp_eos, ST_OACC_END_KERNELS_LOOP);\n-      match (\"end kernels\", gfc_match_omp_eos, ST_OACC_END_KERNELS);\n-      match (\"end loop\", gfc_match_omp_eos, ST_OACC_END_LOOP);\n-      match (\"end parallel loop\", gfc_match_omp_eos, ST_OACC_END_PARALLEL_LOOP);\n-      match (\"end parallel\", gfc_match_omp_eos, ST_OACC_END_PARALLEL);\n-      match (\"enter data\", gfc_match_oacc_enter_data, ST_OACC_ENTER_DATA);\n-      match (\"exit data\", gfc_match_oacc_exit_data, ST_OACC_EXIT_DATA);\n+      matcha (\"end atomic\", gfc_match_omp_eos, ST_OACC_END_ATOMIC);\n+      matcha (\"end data\", gfc_match_omp_eos, ST_OACC_END_DATA);\n+      matcha (\"end host_data\", gfc_match_omp_eos, ST_OACC_END_HOST_DATA);\n+      matcha (\"end kernels loop\", gfc_match_omp_eos, ST_OACC_END_KERNELS_LOOP);\n+      matcha (\"end kernels\", gfc_match_omp_eos, ST_OACC_END_KERNELS);\n+      matcha (\"end loop\", gfc_match_omp_eos, ST_OACC_END_LOOP);\n+      matcha (\"end parallel loop\", gfc_match_omp_eos,\n+\t      ST_OACC_END_PARALLEL_LOOP);\n+      matcha (\"end parallel\", gfc_match_omp_eos, ST_OACC_END_PARALLEL);\n+      matcha (\"enter data\", gfc_match_oacc_enter_data, ST_OACC_ENTER_DATA);\n+      matcha (\"exit data\", gfc_match_oacc_exit_data, ST_OACC_EXIT_DATA);\n       break;\n     case 'h':\n-      match (\"host_data\", gfc_match_oacc_host_data, ST_OACC_HOST_DATA);\n+      matcha (\"host_data\", gfc_match_oacc_host_data, ST_OACC_HOST_DATA);\n       break;\n     case 'p':\n-      match (\"parallel loop\", gfc_match_oacc_parallel_loop, ST_OACC_PARALLEL_LOOP);\n-      match (\"parallel\", gfc_match_oacc_parallel, ST_OACC_PARALLEL);\n+      matcha (\"parallel loop\", gfc_match_oacc_parallel_loop,\n+\t      ST_OACC_PARALLEL_LOOP);\n+      matcha (\"parallel\", gfc_match_oacc_parallel, ST_OACC_PARALLEL);\n       break;\n     case 'k':\n-      match (\"kernels loop\", gfc_match_oacc_kernels_loop, ST_OACC_KERNELS_LOOP);\n-      match (\"kernels\", gfc_match_oacc_kernels, ST_OACC_KERNELS);\n+      matcha (\"kernels loop\", gfc_match_oacc_kernels_loop,\n+\t      ST_OACC_KERNELS_LOOP);\n+      matcha (\"kernels\", gfc_match_oacc_kernels, ST_OACC_KERNELS);\n       break;\n     case 'l':\n-      match (\"loop\", gfc_match_oacc_loop, ST_OACC_LOOP);\n+      matcha (\"loop\", gfc_match_oacc_loop, ST_OACC_LOOP);\n       break;\n     case 'r':\n       match (\"routine\", gfc_match_oacc_routine, ST_OACC_ROUTINE);\n       break;\n     case 'u':\n-      match (\"update\", gfc_match_oacc_update, ST_OACC_UPDATE);\n+      matcha (\"update\", gfc_match_oacc_update, ST_OACC_UPDATE);\n       break;\n     case 'w':\n-      match (\"wait\", gfc_match_oacc_wait, ST_OACC_WAIT);\n+      matcha (\"wait\", gfc_match_oacc_wait, ST_OACC_WAIT);\n       break;\n     }\n \n@@ -678,6 +699,13 @@ decode_oacc_directive (void)\n   gfc_error_recovery ();\n \n   return ST_NONE;\n+\n+ do_spec_only:\n+  reject_statement ();\n+  gfc_clear_error ();\n+  gfc_buffer_error (false);\n+  gfc_current_locus = old_locus;\n+  return ST_GET_FCN_CHARACTERISTICS;\n }\n \n /* Like match, but set a flag simd_matched if keyword matched"}, {"sha": "5245fdd44dfa698b9be2d9289fe76ee019f878ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=642bcbdf1d63f4c20070bfa7f15998f5b833a527", "patch": "@@ -1,3 +1,7 @@\n+2016-07-08  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/pr71704.f90: New test.\n+\n 2016-07-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/71297"}, {"sha": "0235e85d42a80c125f76cbac8cab39a95eca1272", "filename": "gcc/testsuite/gfortran.dg/goacc/pr71704.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr71704.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642bcbdf1d63f4c20070bfa7f15998f5b833a527/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr71704.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fpr71704.f90?ref=642bcbdf1d63f4c20070bfa7f15998f5b833a527", "patch": "@@ -0,0 +1,60 @@\n+! PR fortran/71704\n+! { dg-do compile }\n+\n+real function f1 ()\n+!$acc routine (f1)\n+  f1 = 1\n+end\n+\n+real function f2 (a)\n+  integer a\n+  !$acc enter data copyin(a)\n+  f2 = 1\n+end\n+\n+real function f3 (a)\n+  integer a\n+!$acc enter data copyin(a)\n+  f3 = 1\n+end\n+\n+real function f4 ()\n+!$acc wait\n+  f4 = 1\n+end\n+\n+real function f5 (a)\n+  integer a\n+!$acc update device(a)\n+  f5 = 1\n+end\n+\n+real function f6 ()\n+!$acc parallel\n+!$acc end parallel\n+  f6 = 1\n+end\n+\n+real function f7 ()\n+!$acc kernels\n+!$acc end kernels\n+  f7 = 1\n+end\n+\n+real function f8 ()\n+!$acc data\n+!$acc end data\n+  f8 = 1\n+end\n+\n+real function f9 ()\n+!$acc host_data\n+!$acc end host_data\n+  f8 = 1\n+end\n+\n+real function f10 (a)\n+  integer a\n+!$acc declare present (a)\n+  f8 = 1\n+end"}]}