{"sha": "721425b6ada0661975ba11b6b4dfc83421150886", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxNDI1YjZhZGEwNjYxOTc1YmExMWI2YjRkZmM4MzQyMTE1MDg4Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-23T02:01:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-23T02:01:53Z"}, "message": "re PR tree-optimization/21088 (VRP passes fold the type of operands of a comparison)\n\n\tPR tree-optimization/21088\n\t* fold-const.c (fold_unary, fold_binary, fold_ternary):\n\tExport.\n\t* tree-vrp.c (compare_values): Use fold_binary to compare\n\tpointers.  Use boolean_type_node as the type of a comparison\n\texpression being folded.\n\t* tree.h: Add prototypes for fold_unary, fold_binary,\n\tfold_ternary.\n\nFrom-SVN: r98600", "tree": {"sha": "4d5c798a9511b850de0000a74818df18ef340983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d5c798a9511b850de0000a74818df18ef340983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/721425b6ada0661975ba11b6b4dfc83421150886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721425b6ada0661975ba11b6b4dfc83421150886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/721425b6ada0661975ba11b6b4dfc83421150886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721425b6ada0661975ba11b6b4dfc83421150886/comments", "author": null, "committer": null, "parents": [{"sha": "84d658141e6b1d315b0eba5f19a3c57a7c51fd3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d658141e6b1d315b0eba5f19a3c57a7c51fd3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d658141e6b1d315b0eba5f19a3c57a7c51fd3f"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "38cb114d885e430796e002450323dfc171c47bda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=721425b6ada0661975ba11b6b4dfc83421150886", "patch": "@@ -1,3 +1,14 @@\n+2005-04-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21088\n+\t* fold-const.c (fold_unary, fold_binary, fold_ternary):\n+\tExport.\n+\t* tree-vrp.c (compare_values): Use fold_binary to compare\n+\tpointers.  Use boolean_type_node as the type of a comparison\n+\texpression being folded.\n+\t* tree.h: Add prototypes for fold_unary, fold_binary,\n+\tfold_ternary.\n+\n 2005-04-22  Diego Novillo  <dnovillo@redhat.com>\n \n \t* Makefile.in (tree-into-ssa.o): Add dependency on PARAMS_H."}, {"sha": "1327c74ee869c82bcd4f2d57e73f5ce3224572ac", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=721425b6ada0661975ba11b6b4dfc83421150886", "patch": "@@ -6678,7 +6678,7 @@ fold_complex_div (tree type, tree ac, tree bc, enum tree_code code)\n    OP0.  Return the folded expression if folding is successful.\n    Otherwise, return NULL_TREE.  */\n \n-static tree\n+tree\n fold_unary (enum tree_code code, tree type, tree op0)\n {\n   tree tem;\n@@ -7113,7 +7113,7 @@ fold_unary (enum tree_code code, tree type, tree op0)\n    OP0 and OP1.  Return the folded expression if folding is\n    successful.  Otherwise, return NULL_TREE.  */\n \n-static tree\n+tree\n fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n {\n   tree t1 = NULL_TREE;\n@@ -9852,7 +9852,7 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n    OP0, OP1, and OP2.  Return the folded expression if folding is\n    successful.  Otherwise, return NULL_TREE.  */\n \n-static tree\n+tree\n fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n {\n   tree tem;"}, {"sha": "4a0859ef33310ef5e2cbf381dedf394792f52fb5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=721425b6ada0661975ba11b6b4dfc83421150886", "patch": "@@ -416,17 +416,17 @@ compare_values (tree val1, tree val2)\n \treturn 0;\n       \n       /* If VAL1 is a lower address than VAL2, return -1.  */\n-      t = fold (build2 (LT_EXPR, TREE_TYPE (val1), val1, val2));\n+      t = fold_binary (LT_EXPR, boolean_type_node, val1, val2);\n       if (t == boolean_true_node)\n \treturn -1;\n \n       /* If VAL1 is a higher address than VAL2, return +1.  */\n-      t = fold (build2 (GT_EXPR, TREE_TYPE (val1), val1, val2));\n+      t = fold_binary (GT_EXPR, boolean_type_node, val1, val2);\n       if (t == boolean_true_node)\n \treturn 1;\n \n       /* If VAL1 is different than VAL2, return +2.  */\n-      t = fold (build2 (NE_EXPR, TREE_TYPE (val1), val1, val2));\n+      t = fold_binary (NE_EXPR, boolean_type_node, val1, val2);\n       if (t == boolean_true_node)\n \treturn 2;\n "}, {"sha": "a6f9e57f44b146d7758ec323e10771e8fc73fa42", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721425b6ada0661975ba11b6b4dfc83421150886/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=721425b6ada0661975ba11b6b4dfc83421150886", "patch": "@@ -3511,6 +3511,9 @@ extern void using_eh_for_cleanups (void);\n    subexpressions are not changed.  */\n \n extern tree fold (tree);\n+extern tree fold_unary (enum tree_code, tree, tree);\n+extern tree fold_binary (enum tree_code, tree, tree, tree);\n+extern tree fold_ternary (enum tree_code, tree, tree, tree, tree);\n extern tree fold_build1 (enum tree_code, tree, tree);\n extern tree fold_build2 (enum tree_code, tree, tree, tree);\n extern tree fold_build3 (enum tree_code, tree, tree, tree, tree);"}]}