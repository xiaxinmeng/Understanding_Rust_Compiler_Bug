{"sha": "8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "node_id": "C_kwDOANBUbNoAKDhlNWMzNGFiNDVmMzRhYWRlYTY1YzViYTMzZWM2ODUyNjRiNmVjNjY", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-18T15:50:03Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-19T18:57:12Z"}, "message": "[nvptx] Use nvptx_warpsync / nvptx_uniform_warp_check for -muniform-simt\n\nWith the default ptx isa 6.0, we have for uniform-simt-1.c:\n...\n        @%r33   atom.global.cas.b32     %r26, [a], %r28, %r29;\n                shfl.sync.idx.b32       %r26, %r26, %r32, 31, 0xffffffff;\n...\n\nThe atomic insn is predicated by -muniform-simt, and the subsequent insn does\na warp sync, at which point the warp is uniform again.\n\nBut with -mptx=3.1, we have instead:\n...\n        @%r33   atom.global.cas.b32     %r26, [a], %r28, %r29;\n                shfl.idx.b32    %r26, %r26, %r32, 31;\n...\n\nThe shfl does not sync the warp, and we want the warp to go back to executing\nuniformly asap.  We cannot enforce this, but at least check this using\nnvptx_uniform_warp_check, similar to how that is done for openacc.\n\nLikewise, detect the case that no shfl insn is emitted, and add a\nnvptx_uniform_warp_check or nvptx_warpsync.\n\ngcc/ChangeLog:\n\n2022-02-19  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (nvptx_unisimt_handle_set): Change return\n\ttype to bool.\n\t(nvptx_reorg_uniform_simt): Insert nvptx_uniform_warp_check or\n\tnvptx_warpsync, if necessary.\n\ngcc/testsuite/ChangeLog:\n\n2022-02-19  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.target/nvptx/uniform-simt-1.c: Add scan-assembler test.\n\t* gcc.target/nvptx/uniform-simt-2.c: New test.", "tree": {"sha": "7b409182fd796d391d64e4617cec639805ab5934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b409182fd796d391d64e4617cec639805ab5934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5c34ab45f34aadea65c5ba33ec685264b6ec66/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e3bbb4a8024121eb0fa675cb1f074218c1345a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3bbb4a8024121eb0fa675cb1f074218c1345a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3bbb4a8024121eb0fa675cb1f074218c1345a6"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "4942f1100da0801f06bdf50731176b6ecd89d6f9", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5c34ab45f34aadea65c5ba33ec685264b6ec66/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5c34ab45f34aadea65c5ba33ec685264b6ec66/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "patch": "@@ -3248,12 +3248,18 @@ nvptx_call_insn_is_syscall_p (rtx_insn *insn)\n /* If SET subexpression of INSN sets a register, emit a shuffle instruction to\n    propagate its value from lane MASTER to current lane.  */\n \n-static void\n+static bool\n nvptx_unisimt_handle_set (rtx set, rtx_insn *insn, rtx master)\n {\n   rtx reg;\n   if (GET_CODE (set) == SET && REG_P (reg = SET_DEST (set)))\n-    emit_insn_after (nvptx_gen_shuffle (reg, reg, master, SHUFFLE_IDX), insn);\n+    {\n+      emit_insn_after (nvptx_gen_shuffle (reg, reg, master, SHUFFLE_IDX),\n+\t\t       insn);\n+      return true;\n+    }\n+\n+  return false;\n }\n \n /* Adjust code for uniform-simt code generation variant by making atomics and\n@@ -3275,8 +3281,30 @@ nvptx_reorg_uniform_simt ()\n \tcontinue;\n       rtx pat = PATTERN (insn);\n       rtx master = nvptx_get_unisimt_master ();\n+      bool shuffle_p = false;\n       for (int i = 0; i < XVECLEN (pat, 0); i++)\n-\tnvptx_unisimt_handle_set (XVECEXP (pat, 0, i), insn, master);\n+\tshuffle_p\n+\t  |= nvptx_unisimt_handle_set (XVECEXP (pat, 0, i), insn, master);\n+      if (shuffle_p && TARGET_PTX_6_0)\n+\t{\n+\t  /* The shuffle is a sync, so uniformity is guaranteed.  */\n+\t}\n+      else\n+\t{\n+\t  if (TARGET_PTX_6_0)\n+\t    {\n+\t      gcc_assert (!shuffle_p);\n+\t      /* Emit after the insn, to guarantee uniformity.  */\n+\t      emit_insn_after (gen_nvptx_warpsync (), insn);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Emit after the insn (and before the shuffle, if there are any)\n+\t\t to check uniformity.  */\n+\t      emit_insn_after (gen_nvptx_uniform_warp_check (), insn);\n+\t    }\n+\t}\n+\n       rtx pred = nvptx_get_unisimt_predicate ();\n       pred = gen_rtx_NE (BImode, pred, const0_rtx);\n       pat = gen_rtx_COND_EXEC (VOIDmode, pred, pat);"}, {"sha": "77cffc40a669cf962bd3c2ae5777e9f19d8fa147", "filename": "gcc/testsuite/gcc.target/nvptx/uniform-simt-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5c34ab45f34aadea65c5ba33ec685264b6ec66/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5c34ab45f34aadea65c5ba33ec685264b6ec66/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-1.c?ref=8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "patch": "@@ -16,3 +16,4 @@ f (void)\n }\n \n /* { dg-final { scan-assembler-times \"@%r\\[0-9\\]*\\tatom.global.cas\" 1 } } */\n+/* { dg-final { scan-assembler-times \"shfl.sync.idx.b32\" 1 } } */"}, {"sha": "0f1e4e780fe13ebf22c852f8419548f83b73618d", "filename": "gcc/testsuite/gcc.target/nvptx/uniform-simt-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5c34ab45f34aadea65c5ba33ec685264b6ec66/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5c34ab45f34aadea65c5ba33ec685264b6ec66/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-2.c?ref=8e5c34ab45f34aadea65c5ba33ec685264b6ec66", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-O2 -muniform-simt -mptx=3.1\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_RELAXED = 0,\n+};\n+\n+int a = 0;\n+\n+int\n+f (void)\n+{\n+  int expected = 1;\n+  return __atomic_compare_exchange_n (&a, &expected, 0, 0, MEMMODEL_RELAXED,\n+\t\t\t\t      MEMMODEL_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"@%r\\[0-9\\]*\\tatom.global.cas\" 1 } } */\n+/* { dg-final { scan-assembler-times \"shfl.idx.b32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vote.ballot.b32\" 1 } } */"}]}