{"sha": "014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0ZWM2ZWU1ZmNiNzdlMzhkY2E0YTZmMjcyMzQ5ZjQ4NTliMDNjNQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-08-15T23:03:28Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-08-15T23:03:28Z"}, "message": "re PR fortran/25828 ([f2003] ACCESS='STREAM' io support)\n\n2006-08-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/25828\n\t* gfortran.h: Add new pointer for stream position to st_inquire.\n\tRename gfc_large_io_int_kind to gfc_intio_kind.\n\t* trans-types.c (gfc_init_kinds): use gfc_intio_kind.\n\t* io.c: Add new IO tag for file position going in and another for out.\n\t(match_dt_element): Match new tag_spos.\n\t(gfc_resolve_dt): Resolve new tag_spos.\n\t(gfc_free_inquire): Free inquire->strm_pos.\n\t(match_inquire_element): Match new tag_strm_out.\n\t(gfc_resolve_inquire): Resolve new tag_strm_out.\n\t* trans-io.c: Rename IOPARM_type_large_io_int to IOPARM_type_intio.\n\t(gfc_build_st_parameter): Same.\n\t(gfc_build_io_library_fndecls) Same. and add build pointer type pintio.\n\t(gfc_trans_inquire): Translate strm_pos for inquire.\n\t* ioparm.def: Reorder flags to accomodate addition of new inquire\n\tflag for strm_pos_out and add it in.\n\nFrom-SVN: r116171", "tree": {"sha": "69155a97cbe4b81569cdabce8b9f3f44a1536d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69155a97cbe4b81569cdabce8b9f3f44a1536d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/comments", "author": null, "committer": null, "parents": [{"sha": "55af93a8a3f04d7a1953fafba7d7e169754cb863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55af93a8a3f04d7a1953fafba7d7e169754cb863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55af93a8a3f04d7a1953fafba7d7e169754cb863"}], "stats": {"total": 96, "additions": 66, "deletions": 30}, "files": [{"sha": "aacdc11889d647df68aee1c545b7894ed996dbaf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "patch": "@@ -1,3 +1,22 @@\n+2006-08-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/25828\n+\t* gfortran.h: Add new pointer for stream position to st_inquire.\n+\tRename gfc_large_io_int_kind to gfc_intio_kind.\n+\t* trans-types.c (gfc_init_kinds): use gfc_intio_kind.\n+\t* io.c: Add new IO tag for file position going in and another for out.\n+\t(match_dt_element): Match new tag_spos.\n+\t(gfc_resolve_dt): Resolve new tag_spos.\n+\t(gfc_free_inquire): Free inquire->strm_pos.\n+\t(match_inquire_element): Match new tag_strm_out.\n+\t(gfc_resolve_inquire): Resolve new tag_strm_out.\n+\t* trans-io.c: Rename IOPARM_type_large_io_int to IOPARM_type_intio.\n+\t(gfc_build_st_parameter): Same.\n+\t(gfc_build_io_library_fndecls) Same. and add build pointer type pintio.\n+\t(gfc_trans_inquire): Translate strm_pos for inquire.\n+\t* ioparm.def: Reorder flags to accomodate addition of new inquire\n+\tflag for strm_pos_out and add it in.\n+\n 2006-08-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/28590"}, {"sha": "01bcf976e54686275cc805184bc19af17ae729f9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "patch": "@@ -1465,7 +1465,7 @@ typedef struct\n   gfc_expr *unit, *file, *iostat, *exist, *opened, *number, *named,\n     *name, *access, *sequential, *direct, *form, *formatted,\n     *unformatted, *recl, *nextrec, *blank, *position, *action, *read,\n-    *write, *readwrite, *delim, *pad, *iolength, *iomsg, *convert;\n+    *write, *readwrite, *delim, *pad, *iolength, *iomsg, *convert, *strm_pos;\n \n   gfc_st_label *err;\n \n@@ -1816,7 +1816,7 @@ extern int gfc_default_character_kind;\n extern int gfc_default_logical_kind;\n extern int gfc_default_complex_kind;\n extern int gfc_c_int_kind;\n-extern int gfc_large_io_int_kind;\n+extern int gfc_intio_kind;\n \n /* symbol.c */\n void gfc_clear_new_implicit (void);"}, {"sha": "a95cd2c8361b779c946270ef204f0db1f7348d9b", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "patch": "@@ -52,6 +52,7 @@ static const io_tag\n \ttag_unit\t= {\"UNIT\", \" unit = %e\", BT_INTEGER},\n \ttag_advance\t= {\"ADVANCE\", \" advance = %e\", BT_CHARACTER},\n \ttag_rec\t\t= {\"REC\", \" rec = %e\", BT_INTEGER},\n+\ttag_spos        = {\"POSITION\", \" pos = %e\", BT_INTEGER},\n \ttag_format\t= {\"FORMAT\", NULL, BT_CHARACTER},\n \ttag_iomsg\t= {\"IOMSG\", \" iomsg = %e\", BT_CHARACTER},\n \ttag_iostat\t= {\"IOSTAT\", \" iostat = %v\", BT_INTEGER},\n@@ -79,6 +80,7 @@ static const io_tag\n \ttag_s_pad\t= {\"PAD\", \" pad = %v\", BT_CHARACTER},\n \ttag_iolength\t= {\"IOLENGTH\", \" iolength = %v\", BT_INTEGER},\n \ttag_convert     = {\"CONVERT\", \" convert = %e\", BT_CHARACTER},\n+\ttag_strm_out    = {\"POS\", \" pos = %v\", BT_INTEGER},\n \ttag_err\t\t= {\"ERR\", \" err = %l\", BT_UNKNOWN},\n \ttag_end\t\t= {\"END\", \" end = %l\", BT_UNKNOWN},\n \ttag_eor\t\t= {\"EOR\", \" eor = %l\", BT_UNKNOWN};\n@@ -1782,6 +1784,9 @@ match_dt_element (io_kind k, gfc_dt * dt)\n     }\n \n   m = match_etag (&tag_rec, &dt->rec);\n+  if (m != MATCH_NO)\n+    return m;\n+  m = match_etag (&tag_spos, &dt->rec);\n   if (m != MATCH_NO)\n     return m;\n   m = match_out_tag (&tag_iomsg, &dt->iomsg);\n@@ -1855,6 +1860,7 @@ gfc_resolve_dt (gfc_dt * dt)\n \n   RESOLVE_TAG (&tag_format, dt->format_expr);\n   RESOLVE_TAG (&tag_rec, dt->rec);\n+  RESOLVE_TAG (&tag_spos, dt->rec);\n   RESOLVE_TAG (&tag_advance, dt->advance);\n   RESOLVE_TAG (&tag_iomsg, dt->iomsg);\n   RESOLVE_TAG (&tag_iostat, dt->iostat);\n@@ -2643,6 +2649,7 @@ gfc_free_inquire (gfc_inquire * inquire)\n   gfc_free_expr (inquire->pad);\n   gfc_free_expr (inquire->iolength);\n   gfc_free_expr (inquire->convert);\n+  gfc_free_expr (inquire->strm_pos);\n \n   gfc_free (inquire);\n }\n@@ -2685,6 +2692,7 @@ match_inquire_element (gfc_inquire * inquire)\n   RETM m = match_vtag (&tag_s_pad, &inquire->pad);\n   RETM m = match_vtag (&tag_iolength, &inquire->iolength);\n   RETM m = match_vtag (&tag_convert, &inquire->convert);\n+  RETM m = match_out_tag (&tag_strm_out, &inquire->strm_pos);\n   RETM return MATCH_NO;\n }\n \n@@ -2839,6 +2847,7 @@ gfc_resolve_inquire (gfc_inquire * inquire)\n   RESOLVE_TAG (&tag_s_pad, inquire->pad);\n   RESOLVE_TAG (&tag_iolength, inquire->iolength);\n   RESOLVE_TAG (&tag_convert, inquire->convert);\n+  RESOLVE_TAG (&tag_strm_out, inquire->strm_pos);\n \n   if (gfc_reference_st_label (inquire->err, ST_LABEL_TARGET) == FAILURE)\n     return FAILURE;"}, {"sha": "8c09a296fa2f2e29532078b86a76a074a3e59103", "filename": "gcc/fortran/ioparm.def", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Fioparm.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Fioparm.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fioparm.def?ref=014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "patch": "@@ -36,29 +36,30 @@ IOPARM (inquire, number,\t1 << 9,  pint4)\n IOPARM (inquire, named,\t\t1 << 10, pint4)\n IOPARM (inquire, nextrec,\t1 << 11, pint4)\n IOPARM (inquire, recl_out,\t1 << 12, pint4)\n-IOPARM (inquire, file,\t\t1 << 13, char1)\n-IOPARM (inquire, access,\t1 << 14, char2)\n-IOPARM (inquire, form,\t\t1 << 15, char1)\n-IOPARM (inquire, blank,\t\t1 << 16, char2)\n-IOPARM (inquire, position,\t1 << 17, char1)\n-IOPARM (inquire, action,\t1 << 18, char2)\n-IOPARM (inquire, delim,\t\t1 << 19, char1)\n-IOPARM (inquire, pad,\t\t1 << 20, char2)\n-IOPARM (inquire, name,\t\t1 << 21, char1)\n-IOPARM (inquire, sequential,\t1 << 22, char2)\n-IOPARM (inquire, direct,\t1 << 23, char1)\n-IOPARM (inquire, formatted,\t1 << 24, char2)\n-IOPARM (inquire, unformatted,\t1 << 25, char1)\n-IOPARM (inquire, read,\t\t1 << 26, char2)\n-IOPARM (inquire, write,\t\t1 << 27, char1)\n-IOPARM (inquire, readwrite,\t1 << 28, char2)\n-IOPARM (inquire, convert,       1 << 29, char1)\n+IOPARM (inquire, strm_pos_out,\t1 << 13, pintio)\n+IOPARM (inquire, file,\t\t1 << 14, char1)\n+IOPARM (inquire, access,\t1 << 15, char2)\n+IOPARM (inquire, form,\t\t1 << 16, char1)\n+IOPARM (inquire, blank,\t\t1 << 17, char2)\n+IOPARM (inquire, position,\t1 << 18, char1)\n+IOPARM (inquire, action,\t1 << 19, char2)\n+IOPARM (inquire, delim,\t\t1 << 20, char1)\n+IOPARM (inquire, pad,\t\t1 << 21, char2)\n+IOPARM (inquire, name,\t\t1 << 22, char1)\n+IOPARM (inquire, sequential,\t1 << 23, char2)\n+IOPARM (inquire, direct,\t1 << 24, char1)\n+IOPARM (inquire, formatted,\t1 << 25, char2)\n+IOPARM (inquire, unformatted,\t1 << 26, char1)\n+IOPARM (inquire, read,\t\t1 << 27, char2)\n+IOPARM (inquire, write,\t\t1 << 28, char1)\n+IOPARM (inquire, readwrite,\t1 << 29, char2)\n+IOPARM (inquire, convert,       1 << 30, char1)\n #ifndef IOPARM_dt_list_format\n #define IOPARM_dt_list_format\t\t(1 << 7)\n #define IOPARM_dt_namelist_read_mode\t(1 << 8)\n #endif\n IOPARM (dt,      common,\t0,\t common)\n-IOPARM (dt,      rec,\t\t1 << 9,  large_io_int)\n+IOPARM (dt,      rec,\t\t1 << 9,  intio)\n IOPARM (dt,      size,\t\t1 << 10, pint4)\n IOPARM (dt,      iolength,\t1 << 11, pint4)\n IOPARM (dt,      internal_unit_desc, 0,  parray)"}, {"sha": "4fb198366037df6b7424a44c823aeed0f27d4921", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "patch": "@@ -35,7 +35,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"trans-types.h\"\n #include \"trans-const.h\"\n \n-\n /* Members of the ioparm structure.  */\n \n enum ioparam_type\n@@ -52,8 +51,9 @@ enum ioparam_type\n enum iofield_type\n {\n   IOPARM_type_int4,\n-  IOPARM_type_large_io_int,\n+  IOPARM_type_intio,\n   IOPARM_type_pint4,\n+  IOPARM_type_pintio,\n   IOPARM_type_pchar,\n   IOPARM_type_parray,\n   IOPARM_type_pad,\n@@ -169,8 +169,9 @@ gfc_build_st_parameter (enum ioparam_type ptype, tree *types)\n       switch (p->type)\n \t{\n \tcase IOPARM_type_int4:\n-\tcase IOPARM_type_large_io_int:\n+\tcase IOPARM_type_intio:\n \tcase IOPARM_type_pint4:\n+\tcase IOPARM_type_pintio:\n \tcase IOPARM_type_parray:\n \tcase IOPARM_type_pchar:\n \tcase IOPARM_type_pad:\n@@ -216,16 +217,18 @@ void\n gfc_build_io_library_fndecls (void)\n {\n   tree types[IOPARM_type_num], pad_idx, gfc_int4_type_node;\n-  tree gfc_large_io_int_type_node;\n+  tree gfc_intio_type_node;\n   tree parm_type, dt_parm_type;\n   tree gfc_c_int_type_node;\n   HOST_WIDE_INT pad_size;\n   enum ioparam_type ptype;\n \n   types[IOPARM_type_int4] = gfc_int4_type_node = gfc_get_int_type (4);\n-  types[IOPARM_type_large_io_int] = gfc_large_io_int_type_node\n-\t\t\t    = gfc_get_int_type (gfc_large_io_int_kind);\n+  types[IOPARM_type_intio] = gfc_intio_type_node\n+\t\t\t    = gfc_get_int_type (gfc_intio_kind);\n   types[IOPARM_type_pint4] = build_pointer_type (gfc_int4_type_node);\n+  types[IOPARM_type_pintio]\n+\t\t\t    = build_pointer_type (gfc_intio_type_node);\n   types[IOPARM_type_parray] = pchar_type_node;\n   types[IOPARM_type_pchar] = pchar_type_node;\n   pad_size = 16 * TREE_INT_CST_LOW (TYPE_SIZE_UNIT (pchar_type_node));\n@@ -1098,6 +1101,10 @@ gfc_trans_inquire (gfc_code * code)\n     mask |= set_string (&block, &post_block, var, IOPARM_inquire_convert,\n \t\t\tp->convert);\n \n+  if (p->strm_pos)\n+    mask |= set_parameter_ref (&block, &post_block, var,\n+\t\t\t       IOPARM_inquire_strm_pos_out, p->strm_pos);\n+\n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n   tmp = build_fold_addr_expr (var);"}, {"sha": "ca93adbf968e8fd11c4c7efdc53fd5d0edf4eb69", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014ec6ee5fcb77e38dca4a6f272349f4859b03c5/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=014ec6ee5fcb77e38dca4a6f272349f4859b03c5", "patch": "@@ -95,7 +95,7 @@ int gfc_c_int_kind;\n \n /* The kind size used for record offsets. If the target system supports\n    kind=8, this will be set to 8, otherwise it is set to 4.  */\n-int gfc_large_io_int_kind; \n+int gfc_intio_kind; \n \n /* Query the target to determine which machine modes are available for\n    computation.  Choose KIND numbers for them.  */\n@@ -144,13 +144,13 @@ gfc_init_kinds (void)\n       i_index += 1;\n     }\n \n-  /* Set the kind used to match GFC_LARGE_IO_INT in libgfortran.  This is \n+  /* Set the kind used to match GFC_INT_IO in libgfortran.  This is \n      used for large file access.  */\n \n   if (saw_i8)\n-    gfc_large_io_int_kind = 8;\n+    gfc_intio_kind = 8;\n   else\n-    gfc_large_io_int_kind = 4;\n+    gfc_intio_kind = 4;\n \n   /* If we do not at least have kind = 4, everything is pointless.  */  \n   gcc_assert(saw_i4);  "}]}