{"sha": "3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1N2Q3Y2VlNzNjNDYwNmExYzJmZDdhOTM2Mjg1Yjg0OTZlYjQxYQ==", "commit": {"author": {"name": "Doug Kwan", "email": "dougkwan@google.com", "date": "2008-04-15T19:56:20Z"}, "committer": {"name": "Doug Kwan", "email": "dougkwan@gcc.gnu.org", "date": "2008-04-15T19:56:20Z"}, "message": "dwarf2asm.c (dw2_assemble_integer): Cast to unsigned HOST_WIDE_INT for hex printing.\n\n2008-04-15  Doug Kwan  <dougkwan@google.com>\n\n\t* dwarf2asm.c (dw2_assemble_integer): Cast to unsigned HOST_WIDE_INT\n\tfor hex printing.\n\t* tree-pretty-print.c (dump_generic_node): Ditto.\n\t* final.c (output_addr_const): Ditto.\n\t* dwarf2out.c (output_cfi): Ditto.\n\t* c-pretty-print.c (pp_c_integer_constant): Ditto.\n\t* print-rtl.c (print_rtx): Ditto.\n\t* print-tree.c (print_node_brief, print_node): Ditto.\n\t* c-common.c (match_case_to_enum_1): Ditto.\n\t* sched-vis.c (print_value): Ditto.\n\t* config/i386/i386.c (print_operand): Cast to long unsigned int\n\tfor hex printing.\n\nFrom-SVN: r134331", "tree": {"sha": "d834560ba814bbd7a2a3e597e31030c651b67b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d834560ba814bbd7a2a3e597e31030c651b67b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/comments", "author": {"login": "dougkwan", "id": 1399231, "node_id": "MDQ6VXNlcjEzOTkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1399231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dougkwan", "html_url": "https://github.com/dougkwan", "followers_url": "https://api.github.com/users/dougkwan/followers", "following_url": "https://api.github.com/users/dougkwan/following{/other_user}", "gists_url": "https://api.github.com/users/dougkwan/gists{/gist_id}", "starred_url": "https://api.github.com/users/dougkwan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dougkwan/subscriptions", "organizations_url": "https://api.github.com/users/dougkwan/orgs", "repos_url": "https://api.github.com/users/dougkwan/repos", "events_url": "https://api.github.com/users/dougkwan/events{/privacy}", "received_events_url": "https://api.github.com/users/dougkwan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d98c89de9bb0530cb4aeb91771d88b82bce5dba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98c89de9bb0530cb4aeb91771d88b82bce5dba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98c89de9bb0530cb4aeb91771d88b82bce5dba1"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "0295ec08d5e2a9c23acc9418c9ce62aff5615db0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -1,3 +1,18 @@\n+2008-04-15  Doug Kwan  <dougkwan@google.com>\n+\n+\t* dwarf2asm.c (dw2_assemble_integer): Cast to unsigned HOST_WIDE_INT\n+\tfor hex printing.\n+\t* tree-pretty-print.c (dump_generic_node): Ditto.\n+\t* final.c (output_addr_const): Ditto.\n+\t* dwarf2out.c (output_cfi): Ditto.\n+\t* c-pretty-print.c (pp_c_integer_constant): Ditto.\n+\t* print-rtl.c (print_rtx): Ditto.\n+\t* print-tree.c (print_node_brief, print_node): Ditto.\n+\t* c-common.c (match_case_to_enum_1): Ditto.\n+\t* sched-vis.c (print_value): Ditto.\n+\t* config/i386/i386.c (print_operand): Cast to long unsigned int\n+\tfor hex printing.\n+\n 2008-04-15  Danny Smith  <dannysmith@users.sourceforge.net>\n \t* libgcc2.c [L_trampoline]: Remove  unnecessary prototype for\n \tMS Windows VirtualProtect function."}, {"sha": "ceb2f0666c3d6347b4acba21c969adbfb29de99e", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -4332,7 +4332,8 @@ match_case_to_enum_1 (tree key, tree type, tree label)\n \t      -TREE_INT_CST_LOW (key));\n   else\n     snprintf (buf, sizeof (buf), HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t      TREE_INT_CST_HIGH (key), TREE_INT_CST_LOW (key));\n+\t      (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (key),\n+\t      (unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (key));\n \n   if (TYPE_NAME (type) == 0)\n     warning (warn_switch ? OPT_Wswitch : OPT_Wswitch_enum,"}, {"sha": "3c2f021846168ed9c55630800ba1edcabad32ce1", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -832,8 +832,8 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n \t  high = ~high + !low;\n \t  low = -low;\n \t}\n-      sprintf (pp_buffer (pp)->digit_buffer,\n-\t       HOST_WIDE_INT_PRINT_DOUBLE_HEX, high, low);\n+      sprintf (pp_buffer (pp)->digit_buffer, HOST_WIDE_INT_PRINT_DOUBLE_HEX, \n+\t       (unsigned HOST_WIDE_INT) high, (unsigned HOST_WIDE_INT) low);\n       pp_string (pp, pp_buffer (pp)->digit_buffer);\n     }\n   if (TYPE_UNSIGNED (type))"}, {"sha": "4bb686f818be32d1435b8ef6d1c71e9e3c914d5e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -9288,7 +9288,7 @@ print_operand (FILE *file, rtx x, int code)\n \n       if (ASSEMBLER_DIALECT == ASM_ATT)\n \tputc ('$', file);\n-      fprintf (file, \"0x%08lx\", l);\n+      fprintf (file, \"0x%08lx\", (long unsigned int) l);\n     }\n \n   /* These float cases don't actually occur as immediate operands.  */"}, {"sha": "552bf170218f3a2a80a9f1e94f55a7a94d088123", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -52,7 +52,8 @@ dw2_assemble_integer (int size, rtx x)\n     {\n       fputs (op, asm_out_file);\n       if (GET_CODE (x) == CONST_INT)\n-\tfprintf (asm_out_file, HOST_WIDE_INT_PRINT_HEX, INTVAL (x));\n+\tfprintf (asm_out_file, HOST_WIDE_INT_PRINT_HEX,\n+\t\t (unsigned HOST_WIDE_INT) INTVAL (x));\n       else\n \toutput_addr_const (asm_out_file, x);\n     }"}, {"sha": "49c13d2afe4b5131b7f4e3191262efd1f2bf9d86", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -2116,7 +2116,8 @@ output_cfi (dw_cfi_ref cfi, dw_fde_ref fde, int for_eh)\n     dw2_asm_output_data (1, (cfi->dw_cfi_opc\n \t\t\t     | (cfi->dw_cfi_oprnd1.dw_cfi_offset & 0x3f)),\n \t\t\t \"DW_CFA_advance_loc \" HOST_WIDE_INT_PRINT_HEX,\n-\t\t\t cfi->dw_cfi_oprnd1.dw_cfi_offset);\n+\t\t\t ((unsigned HOST_WIDE_INT)\n+\t\t\t  cfi->dw_cfi_oprnd1.dw_cfi_offset));\n   else if (cfi->dw_cfi_opc == DW_CFA_offset)\n     {\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, for_eh);"}, {"sha": "6d861c76e62f95f800c11c78943b34b621358c0f", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -3416,9 +3416,11 @@ output_addr_const (FILE *file, rtx x)\n \t  /* We can use %d if the number is one word and positive.  */\n \t  if (CONST_DOUBLE_HIGH (x))\n \t    fprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t\t     CONST_DOUBLE_HIGH (x), CONST_DOUBLE_LOW (x));\n+\t\t     (unsigned HOST_WIDE_INT) CONST_DOUBLE_HIGH (x),\n+\t\t     (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (x));\n \t  else if (CONST_DOUBLE_LOW (x) < 0)\n-\t    fprintf (file, HOST_WIDE_INT_PRINT_HEX, CONST_DOUBLE_LOW (x));\n+\t    fprintf (file, HOST_WIDE_INT_PRINT_HEX,\n+\t\t     (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (x));\n \t  else\n \t    fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x));\n \t}\n@@ -3429,7 +3431,8 @@ output_addr_const (FILE *file, rtx x)\n       break;\n \n     case CONST_FIXED:\n-      fprintf (file, HOST_WIDE_INT_PRINT_HEX, CONST_FIXED_VALUE_LOW (x));\n+      fprintf (file, HOST_WIDE_INT_PRINT_HEX,\n+\t       (unsigned HOST_WIDE_INT) CONST_FIXED_VALUE_LOW (x));\n       break;\n \n     case PLUS:"}, {"sha": "2e96bb4d80a7e23158bdf0895a37baad2cbe86d2", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -384,7 +384,7 @@ print_rtx (const_rtx in_rtx)\n \tfprintf (outfile, HOST_WIDE_INT_PRINT_DEC, XWINT (in_rtx, i));\n \tif (! flag_simple)\n \t  fprintf (outfile, \" [\" HOST_WIDE_INT_PRINT_HEX \"]\",\n-\t\t   XWINT (in_rtx, i));\n+\t\t   (unsigned HOST_WIDE_INT) XWINT (in_rtx, i));\n \tbreak;\n \n       case 'i':"}, {"sha": "78fd72ec7c530427f378ac87c922d23f231a6bef", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -127,7 +127,8 @@ print_node_brief (FILE *file, const char *prefix, const_tree node, int indent)\n \t\t -TREE_INT_CST_LOW (node));\n       else\n \tfprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t\t TREE_INT_CST_HIGH (node), TREE_INT_CST_LOW (node));\n+\t\t (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (node),\n+\t\t (unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (node));\n     }\n   if (TREE_CODE (node) == REAL_CST)\n     {\n@@ -741,7 +742,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t\t     -TREE_INT_CST_LOW (node));\n \t  else\n \t    fprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t\t     TREE_INT_CST_HIGH (node), TREE_INT_CST_LOW (node));\n+\t\t     (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (node),\n+\t\t     (unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (node));\n \t  break;\n \n \tcase REAL_CST:"}, {"sha": "242791ba9e14d745aca11912ff52a8c7f0177ac4", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -434,7 +434,8 @@ print_value (char *buf, const_rtx x, int verbose)\n   switch (GET_CODE (x))\n     {\n     case CONST_INT:\n-      sprintf (t, HOST_WIDE_INT_PRINT_HEX, INTVAL (x));\n+      sprintf (t, HOST_WIDE_INT_PRINT_HEX,\n+\t       (unsigned HOST_WIDE_INT) INTVAL (x));\n       cur = safe_concat (buf, cur, t);\n       break;\n     case CONST_DOUBLE:"}, {"sha": "1faeab182dc58746771aa1778eba294cac2c230a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d57d7cee73c4606a1c2fd7a936285b8496eb41a/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=3d57d7cee73c4606a1c2fd7a936285b8496eb41a", "patch": "@@ -784,7 +784,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n \t     systems?  */\n \t  sprintf (pp_buffer (buffer)->digit_buffer,\n-\t\t   HOST_WIDE_INT_PRINT_DOUBLE_HEX, high, low);\n+\t\t   HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+\t\t   (unsigned HOST_WIDE_INT) high, low);\n \t  pp_string (buffer, pp_buffer (buffer)->digit_buffer);\n \t}\n       else"}]}