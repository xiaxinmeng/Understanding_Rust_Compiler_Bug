{"sha": "f858fe7a8b250995bc5b0d18720a2ceb6815622d", "node_id": "C_kwDOANBUbNoAKGY4NThmZTdhOGIyNTA5OTViYzViMGQxODcyMGEyY2ViNjgxNTYyMmQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-13T10:58:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-15T08:40:47Z"}, "message": "libcpp: Improve encapsulation of label_text\n\nThis adjusts the API of label_text so that the data members are private\nand cannot be modified by callers.  Add accessors for them instead, and\nmake the accessors const-correct.  Also rename moved_from () to the more\nidiomatic release ().  Also remove the unused take_or_copy () member\nfunction which has confusing ownership semantics.\n\ngcc/analyzer/ChangeLog:\n\n\t* call-info.cc (call_info::print): Adjust to new label_text API.\n\t* checker-path.cc (checker_event::dump): Likewise.\n\t(region_creation_event::get_desc): Likewise.\n\t(state_change_event::get_desc): Likewise.\n\t(superedge_event::should_filter_p): Likewise.\n\t(start_cfg_edge_event::get_desc): Likewise.\n\t(call_event::get_desc): Likewise.\n\t(return_event::get_desc): Likewise.\n\t(warning_event::get_desc): Likewise.\n\t(checker_path::dump): Likewise.\n\t(checker_path::debug): Likewise.\n\t* diagnostic-manager.cc (diagnostic_manager::prune_for_sm_diagnostic):\n\tLikewise.\n\t(diagnostic_manager::prune_interproc_events): Likewise.\n\t* engine.cc (feasibility_state::maybe_update_for_edge):\n\tLikewise.\n\t* program-state.cc (sm_state_map::to_json): Likewise.\n\t* region-model-impl-calls.cc (region_model::impl_call_analyzer_describe): Likewise.\n\t(region_model::impl_call_analyzer_dump_capacity): Likewise.\n\t* region.cc (region::to_json): Likewise.\n\t* sm-malloc.cc (inform_nonnull_attribute): Likewise.\n\t* store.cc (binding_map::to_json): Likewise.\n\t(store::to_json): Likewise.\n\t* supergraph.cc (superedge::dump): Likewise.\n\t* svalue.cc (svalue::to_json): Likewise.\n\ngcc/c-family/ChangeLog:\n\n\t* c-format.cc (class range_label_for_format_type_mismatch):\n\tAdjust to new label_text API.\n\ngcc/ChangeLog:\n\n\t* diagnostic-format-json.cc (json_from_location_range): Adjust\n\tto new label_text API.\n\t* diagnostic-format-sarif.cc (sarif_builder::make_location_object):\n\tLikewise.\n\t* diagnostic-show-locus.cc (struct pod_label_text): Likewise.\n\t(layout::print_any_labels): Likewise.\n\t* tree-diagnostic-path.cc (class path_label): Likewise.\n\t(struct event_range): Likewise.\n\t(default_tree_diagnostic_path_printer): Likewise.\n\t(default_tree_make_json_for_path): Likewise.\n\nlibcpp/ChangeLog:\n\n\t* include/line-map.h (label_text::take_or_copy): Remove.\n\t(label_text::moved_from): Rename to release.\n\t(label_text::m_buffer, label_text::m_owned): Make private.\n\t(label_text::get, label_text::is_owned): New accessors.", "tree": {"sha": "25d0bc8282256c6407fa5474dfbe54a7cbdab7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d0bc8282256c6407fa5474dfbe54a7cbdab7be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f858fe7a8b250995bc5b0d18720a2ceb6815622d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f858fe7a8b250995bc5b0d18720a2ceb6815622d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f858fe7a8b250995bc5b0d18720a2ceb6815622d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f858fe7a8b250995bc5b0d18720a2ceb6815622d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae69e6f61b93dcb5b1e7ef609431f100c1b9b2e5"}], "stats": {"total": 158, "additions": 80, "deletions": 78}, "files": [{"sha": "efc070b8bedee559b38a356a1094e97e5d579ac0", "filename": "gcc/analyzer/call-info.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fcall-info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fcall-info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-info.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -75,7 +75,7 @@ void\n call_info::print (pretty_printer *pp) const\n {\n   label_text desc (get_desc (pp_show_color (pp)));\n-  pp_string (pp, desc.m_buffer);\n+  pp_string (pp, desc.get ());\n }\n \n /* Implementation of custom_edge_info::add_events_to_path vfunc for"}, {"sha": "273f40d3a570f0399a7f6c45cf6338a34c405fe8", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -195,7 +195,7 @@ checker_event::dump (pretty_printer *pp) const\n {\n   label_text event_desc (get_desc (false));\n   pp_printf (pp, \"\\\"%s\\\" (depth %i\",\n-\t     event_desc.m_buffer, m_effective_depth);\n+\t     event_desc.get (), m_effective_depth);\n \n   if (m_effective_depth != m_original_depth)\n     pp_printf (pp, \" corrected from %i\",\n@@ -307,7 +307,7 @@ region_creation_event::get_desc (bool can_colorize) const\n       label_text custom_desc\n \t    = m_pending_diagnostic->describe_region_creation_event\n \t\t(evdesc::region_creation (can_colorize, m_reg));\n-      if (custom_desc.m_buffer)\n+      if (custom_desc.get ())\n \treturn custom_desc;\n     }\n \n@@ -390,7 +390,7 @@ state_change_event::get_desc (bool can_colorize) const\n \t= m_pending_diagnostic->describe_state_change\n \t    (evdesc::state_change (can_colorize, var, origin,\n \t\t\t\t   m_from, m_to, m_emission_id, *this));\n-      if (custom_desc.m_buffer)\n+      if (custom_desc.get ())\n \t{\n \t  if (flag_analyzer_verbose_state_changes)\n \t    {\n@@ -404,7 +404,7 @@ state_change_event::get_desc (bool can_colorize) const\n \t\treturn make_label_text\n \t\t  (can_colorize,\n \t\t   \"%s (state of %qE: %qs -> %qs, origin: %qE, meaning: %s)\",\n-\t\t   custom_desc.m_buffer,\n+\t\t   custom_desc.get (),\n \t\t   var,\n \t\t   m_from->get_name (),\n \t\t   m_to->get_name (),\n@@ -414,7 +414,7 @@ state_change_event::get_desc (bool can_colorize) const\n \t\treturn make_label_text\n \t\t  (can_colorize,\n \t\t   \"%s (state of %qE: %qs -> %qs, NULL origin, meaning: %s)\",\n-\t\t   custom_desc.m_buffer,\n+\t\t   custom_desc.get (),\n \t\t   var,\n \t\t   m_from->get_name (),\n \t\t   m_to->get_name (),\n@@ -435,16 +435,16 @@ state_change_event::get_desc (bool can_colorize) const\n \t  return make_label_text\n \t    (can_colorize,\n \t     \"state of %qs: %qs -> %qs (origin: %qs)\",\n-\t     sval_desc.m_buffer,\n+\t     sval_desc.get (),\n \t     m_from->get_name (),\n \t     m_to->get_name (),\n-\t     origin_desc.m_buffer);\n+\t     origin_desc.get ());\n \t}\n       else\n \treturn make_label_text\n \t  (can_colorize,\n \t   \"state of %qs: %qs -> %qs (NULL origin)\",\n-\t   sval_desc.m_buffer,\n+\t   sval_desc.get (),\n \t   m_from->get_name (),\n \t   m_to->get_name ());\n     }\n@@ -509,8 +509,8 @@ superedge_event::should_filter_p (int verbosity) const\n \t    /* Filter events with empty descriptions.  This ought to filter\n \t       FALLTHRU, but retain true/false/switch edges.  */\n \t    label_text desc = get_desc (false);\n-\t    gcc_assert (desc.m_buffer);\n-\t    if (desc.m_buffer[0] == '\\0')\n+\t    gcc_assert (desc.get ());\n+\t    if (desc.get ()[0] == '\\0')\n \t      return true;\n \t  }\n       }\n@@ -597,28 +597,28 @@ start_cfg_edge_event::get_desc (bool can_colorize) const\n   label_text edge_desc (m_sedge->get_description (user_facing));\n   if (user_facing)\n     {\n-      if (edge_desc.m_buffer && strlen (edge_desc.m_buffer) > 0)\n+      if (edge_desc.get () && strlen (edge_desc.get ()) > 0)\n \t{\n \t  label_text cond_desc = maybe_describe_condition (can_colorize);\n \t  label_text result;\n-\t  if (cond_desc.m_buffer)\n+\t  if (cond_desc.get ())\n \t    return make_label_text (can_colorize,\n \t\t\t\t    \"following %qs branch (%s)...\",\n-\t\t\t\t    edge_desc.m_buffer, cond_desc.m_buffer);\n+\t\t\t\t    edge_desc.get (), cond_desc.get ());\n \t  else\n \t    return make_label_text (can_colorize,\n \t\t\t\t    \"following %qs branch...\",\n-\t\t\t\t    edge_desc.m_buffer);\n+\t\t\t\t    edge_desc.get ());\n \t}\n       else\n \treturn label_text::borrow (\"\");\n     }\n   else\n     {\n-      if (strlen (edge_desc.m_buffer) > 0)\n+      if (strlen (edge_desc.get ()) > 0)\n \treturn make_label_text (can_colorize,\n \t\t\t\t\"taking %qs edge SN:%i -> SN:%i\",\n-\t\t\t\tedge_desc.m_buffer,\n+\t\t\t\tedge_desc.get (),\n \t\t\t\tm_sedge->m_src->m_index,\n \t\t\t\tm_sedge->m_dest->m_index);\n       else\n@@ -798,7 +798,7 @@ call_event::get_desc (bool can_colorize) const\n \t\t\t\t      m_dest_snode->m_fun->decl,\n \t\t\t\t      var,\n \t\t\t\t      m_critical_state));\n-      if (custom_desc.m_buffer)\n+      if (custom_desc.get ())\n \treturn custom_desc;\n     }\n \n@@ -878,7 +878,7 @@ return_event::get_desc (bool can_colorize) const\n \t\t\t\t      m_dest_snode->m_fun->decl,\n \t\t\t\t      m_src_snode->m_fun->decl,\n \t\t\t\t      m_critical_state));\n-      if (custom_desc.m_buffer)\n+      if (custom_desc.get ())\n \treturn custom_desc;\n     }\n   return make_label_text (can_colorize,\n@@ -1105,19 +1105,19 @@ warning_event::get_desc (bool can_colorize) const\n       label_text ev_desc\n \t= m_pending_diagnostic->describe_final_event\n \t    (evdesc::final_event (can_colorize, var, m_state));\n-      if (ev_desc.m_buffer)\n+      if (ev_desc.get ())\n \t{\n \t  if (m_sm && flag_analyzer_verbose_state_changes)\n \t    {\n \t      if (var)\n \t\treturn make_label_text (can_colorize,\n \t\t\t\t\t\"%s (%qE is in state %qs)\",\n-\t\t\t\t\tev_desc.m_buffer,\n+\t\t\t\t\tev_desc.get (),\n \t\t\t\t\tvar, m_state->get_name ());\n \t      else\n \t\treturn make_label_text (can_colorize,\n \t\t\t\t\t\"%s (in global state %qs)\",\n-\t\t\t\t\tev_desc.m_buffer,\n+\t\t\t\t\tev_desc.get (),\n \t\t\t\t\tm_state->get_name ());\n \t    }\n \t  else\n@@ -1163,7 +1163,7 @@ checker_path::dump (pretty_printer *pp) const\n       if (i > 0)\n \tpp_string (pp, \", \");\n       label_text event_desc (e->get_desc (false));\n-      pp_printf (pp, \"\\\"%s\\\"\", event_desc.m_buffer);\n+      pp_printf (pp, \"\\\"%s\\\"\", event_desc.get ());\n     }\n   pp_character (pp, ']');\n }\n@@ -1203,7 +1203,7 @@ checker_path::debug () const\n \t       \"[%i]: %s \\\"%s\\\"\\n\",\n \t       i,\n \t       event_kind_to_string (m_events[i]->m_kind),\n-\t       event_desc.m_buffer);\n+\t       event_desc.get ());\n     }\n }\n "}, {"sha": "fded8281e570fa6c03ac52d126ddf9b667b08c44", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -2297,7 +2297,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t  label_text sval_desc = sval->get_desc ();\n \t\t  log (\"considering event %i (%s), with sval: %qs, state: %qs\",\n \t\t       idx, event_kind_to_string (base_event->m_kind),\n-\t\t       sval_desc.m_buffer, state->get_name ());\n+\t\t       sval_desc.get (), state->get_name ());\n \t\t}\n \t      else\n \t\tlog (\"considering event %i (%s), with global state: %qs\",\n@@ -2363,8 +2363,8 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t  = state_change->m_origin->get_desc ();\n \t\t\tlog (\"event %i:\"\n \t\t\t     \" switching var of interest from %qs to %qs\",\n-\t\t\t     idx, sval_desc.m_buffer,\n-\t\t\t     origin_sval_desc.m_buffer);\n+\t\t\t     idx, sval_desc.get (),\n+\t\t\t     origin_sval_desc.get ());\n \t\t      }\n \t\t    sval = state_change->m_origin;\n \t\t  }\n@@ -2386,12 +2386,12 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\t    label_text sval_desc = sval->get_desc ();\n \t\t\t    log (\"filtering event %i:\"\n \t\t\t\t \" state change to %qs unrelated to %qs\",\n-\t\t\t\t idx, change_sval_desc.m_buffer,\n-\t\t\t\t sval_desc.m_buffer);\n+\t\t\t\t idx, change_sval_desc.get (),\n+\t\t\t\t sval_desc.get ());\n \t\t\t  }\n \t\t\telse\n \t\t\t  log (\"filtering event %i: state change to %qs\",\n-\t\t\t       idx, change_sval_desc.m_buffer);\n+\t\t\t       idx, change_sval_desc.get ());\n \t\t      }\n \t\t    else\n \t\t      log (\"filtering event %i: global state change\", idx);\n@@ -2460,7 +2460,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t    log (\"event %i:\"\n \t\t\t \" recording critical state for %qs at call\"\n \t\t\t \" from %qE in callee to %qE in caller\",\n-\t\t\t idx, sval_desc.m_buffer, callee_var, caller_var);\n+\t\t\t idx, sval_desc.get (), callee_var, caller_var);\n \t\t  }\n \t\tif (expr.param_p ())\n \t\t  event->record_critical_state (caller_var, state);\n@@ -2503,7 +2503,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t\tlog (\"event %i:\"\n \t\t\t     \" recording critical state for %qs at return\"\n \t\t\t     \" from %qE in caller to %qE in callee\",\n-\t\t\t     idx, sval_desc.m_buffer, callee_var, callee_var);\n+\t\t\t     idx, sval_desc.get (), callee_var, callee_var);\n \t\t      }\n \t\t    if (expr.return_value_p ())\n \t\t      event->record_critical_state (callee_var, state);\n@@ -2586,7 +2586,7 @@ diagnostic_manager::prune_interproc_events (checker_path *path) const\n \t\t    (path->get_checker_event (idx)->get_desc (false));\n \t\t  log (\"filtering events %i-%i:\"\n \t\t       \" irrelevant call/entry/return: %s\",\n-\t\t       idx, idx + 2, desc.m_buffer);\n+\t\t       idx, idx + 2, desc.get ());\n \t\t}\n \t      path->delete_event (idx + 2);\n \t      path->delete_event (idx + 1);\n@@ -2608,7 +2608,7 @@ diagnostic_manager::prune_interproc_events (checker_path *path) const\n \t\t    (path->get_checker_event (idx)->get_desc (false));\n \t\t  log (\"filtering events %i-%i:\"\n \t\t       \" irrelevant call/return: %s\",\n-\t\t       idx, idx + 1, desc.m_buffer);\n+\t\t       idx, idx + 1, desc.get ());\n \t\t}\n \t      path->delete_event (idx + 1);\n \t      path->delete_event (idx);"}, {"sha": "9ffcc4108392c531072e0117c1f9087aee3598d4", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -4590,7 +4590,7 @@ feasibility_state::maybe_update_for_edge (logger *logger,\n \t  logger->log (\"  sedge: SN:%i -> SN:%i %s\",\n \t\t       sedge->m_src->m_index,\n \t\t       sedge->m_dest->m_index,\n-\t\t       desc.m_buffer);\n+\t\t       desc.get ());\n \t}\n \n       const gimple *last_stmt = src_point.get_supernode ()->get_last_stmt ();"}, {"sha": "f0f40465aad90cc916f8ef37ebf26e6d2bf4bed7", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -300,7 +300,7 @@ sm_state_map::to_json () const\n       entry_t e = (*iter).second;\n \n       label_text sval_desc = sval->get_desc ();\n-      map_obj->set (sval_desc.m_buffer, e.m_state->to_json ());\n+      map_obj->set (sval_desc.get (), e.m_state->to_json ());\n \n       /* This doesn't yet JSONify e.m_origin.  */\n     }"}, {"sha": "8c38e9206fa6e43be8925bedcec7cee434b4b533", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -255,7 +255,7 @@ region_model::impl_call_analyzer_describe (const gcall *call,\n   const svalue *sval = get_rvalue (t_val, ctxt);\n   bool simple = zerop (t_verbosity);\n   label_text desc = sval->get_desc (simple);\n-  warning_at (call->location, 0, \"svalue: %qs\", desc.m_buffer);\n+  warning_at (call->location, 0, \"svalue: %qs\", desc.get ());\n }\n \n /* Handle a call to \"__analyzer_dump_capacity\".\n@@ -274,7 +274,7 @@ region_model::impl_call_analyzer_dump_capacity (const gcall *call,\n   const region *base_reg = reg->get_base_region ();\n   const svalue *capacity = get_capacity (base_reg);\n   label_text desc = capacity->get_desc (true);\n-  warning_at (call->location, 0, \"capacity: %qs\", desc.m_buffer);\n+  warning_at (call->location, 0, \"capacity: %qs\", desc.get ());\n }\n \n /* Compare D1 and D2 using their names, and then IDs to order them.  */"}, {"sha": "a8d1ae92debf8df02003a7dcc89c37afadb3dc14", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -589,7 +589,7 @@ json::value *\n region::to_json () const\n {\n   label_text desc = get_desc (true);\n-  json::value *reg_js = new json::string (desc.m_buffer);\n+  json::value *reg_js = new json::string (desc.get ());\n   return reg_js;\n }\n "}, {"sha": "608aceb1abe7b7607c3af1fcc8aa947acbe852b5", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -1007,7 +1007,7 @@ inform_nonnull_attribute (tree fndecl, int arg_idx)\n   label_text arg_desc = describe_argument_index (fndecl, arg_idx);\n   inform (DECL_SOURCE_LOCATION (fndecl),\n \t  \"argument %s of %qD must be non-null\",\n-\t  arg_desc.m_buffer, fndecl);\n+\t  arg_desc.get (), fndecl);\n   /* Ideally we would use the location of the parm and underline the\n      attribute also - but we don't have the location_t values at this point\n      in the middle-end.\n@@ -1065,12 +1065,12 @@ class possible_null_arg : public possible_null\n     if (m_origin_of_unchecked_event.known_p ())\n       result = ev.formatted_print (\"argument %s (%qE) from %@ could be NULL\"\n \t\t\t\t   \" where non-null expected\",\n-\t\t\t\t   arg_desc.m_buffer, ev.m_expr,\n+\t\t\t\t   arg_desc.get (), ev.m_expr,\n \t\t\t\t   &m_origin_of_unchecked_event);\n     else\n       result = ev.formatted_print (\"argument %s (%qE) could be NULL\"\n \t\t\t\t   \" where non-null expected\",\n-\t\t\t\t   arg_desc.m_buffer, ev.m_expr);\n+\t\t\t\t   arg_desc.get (), ev.m_expr);\n     return result;\n   }\n \n@@ -1173,11 +1173,11 @@ class null_arg : public malloc_diagnostic\n     label_text result;\n     if (zerop (ev.m_expr))\n       result = ev.formatted_print (\"argument %s NULL where non-null expected\",\n-\t\t\t\t   arg_desc.m_buffer);\n+\t\t\t\t   arg_desc.get ());\n     else\n       result = ev.formatted_print (\"argument %s (%qE) NULL\"\n \t\t\t\t   \" where non-null expected\",\n-\t\t\t\t   arg_desc.m_buffer, ev.m_expr);\n+\t\t\t\t   arg_desc.get (), ev.m_expr);\n     return result;\n   }\n "}, {"sha": "06151d8c041ad4b42c51c037e1c8fffd0da87b6f", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -675,7 +675,7 @@ binding_map::to_json () const\n     {\n       const svalue *value = *const_cast <map_t &> (m_map).get (key);\n       label_text key_desc = key->get_desc ();\n-      map_obj->set (key_desc.m_buffer, value->to_json ());\n+      map_obj->set (key_desc.get (), value->to_json ());\n     }\n \n   return map_obj;\n@@ -2402,11 +2402,11 @@ store::to_json () const\n \t  binding_cluster *cluster\n \t    = *const_cast<cluster_map_t &> (m_cluster_map).get (base_reg);\n \t  label_text base_reg_desc = base_reg->get_desc ();\n-\t  clusters_in_parent_reg_obj->set (base_reg_desc.m_buffer,\n+\t  clusters_in_parent_reg_obj->set (base_reg_desc.get (),\n \t\t\t\t\t   cluster->to_json ());\n \t}\n       label_text parent_reg_desc = parent_reg->get_desc ();\n-      store_obj->set (parent_reg_desc.m_buffer, clusters_in_parent_reg_obj);\n+      store_obj->set (parent_reg_desc.get (), clusters_in_parent_reg_obj);\n     }\n \n   store_obj->set (\"called_unknown_fn\", new json::literal (m_called_unknown_fn));"}, {"sha": "01e30f7f6d0fc3a308c3d81cbab74421a38cd167", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -855,10 +855,10 @@ superedge::dump (pretty_printer *pp) const\n {\n   pp_printf (pp, \"edge: SN: %i -> SN: %i\", m_src->m_index, m_dest->m_index);\n   label_text desc (get_description (false));\n-  if (strlen (desc.m_buffer) > 0)\n+  if (strlen (desc.get ()) > 0)\n     {\n       pp_space (pp);\n-      pp_string (pp, desc.m_buffer);\n+      pp_string (pp, desc.get ());\n     }\n }\n "}, {"sha": "f5a5f1c96978c0f24412c8f8e2dec2053080c700", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -96,7 +96,7 @@ json::value *\n svalue::to_json () const\n {\n   label_text desc = get_desc (true);\n-  json::value *sval_js = new json::string (desc.m_buffer);\n+  json::value *sval_js = new json::string (desc.get ());\n   return sval_js;\n }\n "}, {"sha": "68b94da40cc2f664f31d56bae84b79055b5afa58", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -4617,14 +4617,14 @@ class range_label_for_format_type_mismatch\n   label_text get_text (unsigned range_idx) const final override\n   {\n     label_text text = range_label_for_type_mismatch::get_text (range_idx);\n-    if (text.m_buffer == NULL)\n+    if (text.get () == NULL)\n       return text;\n \n     indirection_suffix suffix (m_pointer_count);\n     char *p = (char *) alloca (suffix.get_buffer_size ());\n     suffix.fill_buffer (p);\n \n-    char *result = concat (text.m_buffer, p, NULL);\n+    char *result = concat (text.get (), p, NULL);\n     return label_text::take (result);\n   }\n "}, {"sha": "baadc4b27c9c1d8323a1fc002323ce2db06b4771", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -102,8 +102,8 @@ json_from_location_range (diagnostic_context *context,\n   if (loc_range->m_label)\n     {\n       label_text text (loc_range->m_label->get_text (range_idx));\n-      if (text.m_buffer)\n-\tresult->set (\"label\", new json::string (text.m_buffer));\n+      if (text.get ())\n+\tresult->set (\"label\", new json::string (text.get ()));\n     }\n \n   return result;"}, {"sha": "fc28d160c38682bc148adfae4f185316f40f8f65", "filename": "gcc/diagnostic-format-sarif.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fdiagnostic-format-sarif.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fdiagnostic-format-sarif.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-sarif.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -582,7 +582,7 @@ sarif_builder::make_location_object (const diagnostic_event &event)\n \n   /* \"message\" property (SARIF v2.1.0 section 3.28.5).  */\n   label_text ev_desc = event.get_desc (false);\n-  json::object *message_obj = make_message_object (ev_desc.m_buffer);\n+  json::object *message_obj = make_message_object (ev_desc.get ());\n   location_obj->set (\"message\", message_obj);\n \n   return location_obj;"}, {"sha": "9d430b5189cd3c53962a436a3a9514b2764eb57e", "filename": "gcc/diagnostic-show-locus.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fdiagnostic-show-locus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Fdiagnostic-show-locus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -1877,9 +1877,10 @@ struct pod_label_text\n   {}\n \n   pod_label_text (label_text &&other)\n-  : m_buffer (other.m_buffer), m_caller_owned (other.m_owned)\n+  : m_buffer (const_cast<char*> (other.get ())),\n+    m_caller_owned (other.is_owner ())\n   {\n-    other.moved_from ();\n+    other.release ();\n   }\n \n   void maybe_free ()\n@@ -1963,7 +1964,7 @@ layout::print_any_labels (linenum_type row)\n \t/* Allow for labels that return NULL from their get_text\n \t   implementation (so e.g. such labels can control their own\n \t   visibility).  */\n-\tif (text.m_buffer == NULL)\n+\tif (text.get () == NULL)\n \t  continue;\n \n \tlabels.safe_push (line_label (m_policy, i, disp_col, std::move (text)));"}, {"sha": "6612b617471794bcf33551d26c17791924a32c88", "filename": "gcc/tree-diagnostic-path.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Ftree-diagnostic-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/gcc%2Ftree-diagnostic-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic-path.cc?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -61,11 +61,11 @@ class path_label : public range_label\n        is special-cased for diagnostic paths.  */\n     bool colorize = pp_show_color (global_dc->printer);\n     label_text event_text (event.get_desc (colorize));\n-    gcc_assert (event_text.m_buffer);\n+    gcc_assert (event_text.get ());\n     pretty_printer pp;\n     pp_show_color (&pp) = pp_show_color (global_dc->printer);\n     diagnostic_event_id_t event_id (event_idx);\n-    pp_printf (&pp, \"%@ %s\", &event_id, event_text.m_buffer);\n+    pp_printf (&pp, \"%@ %s\", &event_id, event_text.get ());\n     label_text result = label_text::take (xstrdup (pp_formatted_text (&pp)));\n     return result;\n   }\n@@ -173,7 +173,7 @@ struct event_range\n \t    diagnostic_event_id_t event_id (i);\n \t    label_text event_text (iter_event.get_desc (true));\n \t    pretty_printer *pp = dc->printer;\n-\t    pp_printf (pp, \" %@: %s\", &event_id, event_text.m_buffer);\n+\t    pp_printf (pp, \" %@: %s\", &event_id, event_text.get ());\n \t    pp_newline (pp);\n \t  }\n \treturn;\n@@ -459,7 +459,7 @@ default_tree_diagnostic_path_printer (diagnostic_context *context,\n \t  {\n \t    const diagnostic_event &event = path->get_event (i);\n \t    label_text event_text (event.get_desc (false));\n-\t    gcc_assert (event_text.m_buffer);\n+\t    gcc_assert (event_text.get ());\n \t    diagnostic_event_id_t event_id (i);\n \t    if (context->show_path_depths)\n \t      {\n@@ -471,17 +471,17 @@ default_tree_diagnostic_path_printer (diagnostic_context *context,\n \t\tif (fndecl)\n \t\t  inform (event.get_location (),\n \t\t\t  \"%@ %s (fndecl %qD, depth %i)\",\n-\t\t\t  &event_id, event_text.m_buffer,\n+\t\t\t  &event_id, event_text.get (),\n \t\t\t  fndecl, stack_depth);\n \t\telse\n \t\t  inform (event.get_location (),\n \t\t\t  \"%@ %s (depth %i)\",\n-\t\t\t  &event_id, event_text.m_buffer,\n+\t\t\t  &event_id, event_text.get (),\n \t\t\t  stack_depth);\n \t      }\n \t    else\n \t      inform (event.get_location (),\n-\t\t      \"%@ %s\", &event_id, event_text.m_buffer);\n+\t\t      \"%@ %s\", &event_id, event_text.get ());\n \t  }\n       }\n       break;\n@@ -519,7 +519,7 @@ default_tree_make_json_for_path (diagnostic_context *context,\n \t\t\tjson_from_expanded_location (context,\n \t\t\t\t\t\t     event.get_location ()));\n       label_text event_text (event.get_desc (false));\n-      event_obj->set (\"description\", new json::string (event_text.m_buffer));\n+      event_obj->set (\"description\", new json::string (event_text.get ()));\n       if (tree fndecl = event.get_fndecl ())\n \t{\n \t  const char *function"}, {"sha": "9bdd5b9d30cfdf1108dee134bbbec7a6969a4e3e", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f858fe7a8b250995bc5b0d18720a2ceb6815622d/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f858fe7a8b250995bc5b0d18720a2ceb6815622d/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=f858fe7a8b250995bc5b0d18720a2ceb6815622d", "patch": "@@ -1851,7 +1851,7 @@ class label_text\n   label_text (label_text &&other)\n   : m_buffer (other.m_buffer), m_owned (other.m_owned)\n   {\n-    other.moved_from ();\n+    other.release ();\n   }\n \n   /* Move assignment.  */\n@@ -1861,7 +1861,7 @@ class label_text\n       free (m_buffer);\n     m_buffer = other.m_buffer;\n     m_owned = other.m_owned;\n-    other.moved_from ();\n+    other.release ();\n     return *this;\n   }\n \n@@ -1882,25 +1882,26 @@ class label_text\n     return label_text (buffer, true);\n   }\n \n-  /* Take ownership of the buffer, copying if necessary.  */\n-  char *take_or_copy ()\n+  void release ()\n   {\n-    if (m_owned)\n-      return m_buffer;\n-    else\n-      return xstrdup (m_buffer);\n+    m_buffer = NULL;\n+    m_owned = false;\n   }\n \n-  void moved_from ()\n+  const char *get () const\n   {\n-    m_buffer = NULL;\n-    m_owned = false;\n+    return m_buffer;\n   }\n \n+  bool is_owner () const\n+  {\n+    return m_owned;\n+  }\n+\n+private:\n   char *m_buffer;\n   bool m_owned;\n \n-private:\n   label_text (char *buffer, bool owned)\n   : m_buffer (buffer), m_owned (owned)\n   {}"}]}