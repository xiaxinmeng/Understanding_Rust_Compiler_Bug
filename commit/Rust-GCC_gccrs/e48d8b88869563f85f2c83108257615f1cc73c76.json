{"sha": "e48d8b88869563f85f2c83108257615f1cc73c76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ4ZDhiODg4Njk1NjNmODVmMmM4MzEwODI1NzYxNWYxY2M3M2M3Ng==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-13T09:13:31Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-13T09:13:31Z"}, "message": "2003-05-13  Michael Koch  <konqueror@gmx.de>\n\n       * java/io/FileDescriptor.java\n       (SYNC): New constant.\n       (DSYNC): Likewise.\n       (getLength): Renamed from lenght() to match classpath's\n       FileDescriptor.java.\n       * java/io/RandomAccessFile.java\n       (RandomAccessFile): Removed unneeded mode check, implemented mode\n       \"rws\" and \"rwd\", merged documentation from classpath.\n       (setLength): Reformatted.\n       (length): Use new getLength() of FileDescriptor.\n       * java/io/natFileDescriptorEcos.cc\n       (getLength): Renamed from length().\n       * java/io/natFileDescriptorPosix.cc\n       (open): Implemented support for SYNC and DSYNC.\n       (seek): Use getLength() instead of length().\n       (getLength): Renamed from length().\n       * java/io/natFileDescriptorWin32.cc\n       (getLength): Renamed from length().\n       (seek): Use getLength() instead of length().\n       (available): Likewise.\n       * gnu/java/nio/natFileChannelImpl.cc\n       (size): Use getLength() instead of length().\n\nFrom-SVN: r66755", "tree": {"sha": "4f31beddee142afb687e3a3b376d800f72755434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f31beddee142afb687e3a3b376d800f72755434"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e48d8b88869563f85f2c83108257615f1cc73c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48d8b88869563f85f2c83108257615f1cc73c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e48d8b88869563f85f2c83108257615f1cc73c76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48d8b88869563f85f2c83108257615f1cc73c76/comments", "author": null, "committer": null, "parents": [{"sha": "aa8f1f579392001a71f98b59e7ead1ed3842f3f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8f1f579392001a71f98b59e7ead1ed3842f3f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8f1f579392001a71f98b59e7ead1ed3842f3f6"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "363681efcea1a779858711920120851d51e4016f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e48d8b88869563f85f2c83108257615f1cc73c76", "patch": "@@ -1,3 +1,28 @@\n+2003-05-13  Michael Koch  <konqueror@gmx.de>\n+\n+       * java/io/FileDescriptor.java\n+       (SYNC): New constant.\n+       (DSYNC): Likewise.\n+       (getLength): Renamed from lenght() to match classpath's\n+       FileDescriptor.java.\n+       * java/io/RandomAccessFile.java\n+       (RandomAccessFile): Removed unneeded mode check, implemented mode\n+       \"rws\" and \"rwd\", merged documentation from classpath.\n+       (setLength): Reformatted.\n+       (length): Use new getLength() of FileDescriptor.\n+       * java/io/natFileDescriptorEcos.cc\n+       (getLength): Renamed from length().\n+       * java/io/natFileDescriptorPosix.cc\n+       (open): Implemented support for SYNC and DSYNC.\n+       (seek): Use getLength() instead of length().\n+       (getLength): Renamed from length().\n+       * java/io/natFileDescriptorWin32.cc\n+       (getLength): Renamed from length().\n+       (seek): Use getLength() instead of length().\n+       (available): Likewise.\n+       * gnu/java/nio/natFileChannelImpl.cc\n+       (size): Use getLength() instead of length().\n+\n 2003-05-13  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/ByteBufferImpl.java"}, {"sha": "6275b6994d90ad469e9a3348bc83c6b3e28f91b4", "filename": "libjava/gnu/java/nio/natFileChannelImpl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatFileChannelImpl.cc?ref=e48d8b88869563f85f2c83108257615f1cc73c76", "patch": "@@ -34,7 +34,7 @@ details.  */\n jlong\n gnu::java::nio::FileChannelImpl::size ()\n {\n-  return fd->length ();\n+  return fd->getLength ();\n }\n \n jlong"}, {"sha": "5c5168c272ce88e26846915d3bcefce0438da656", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=e48d8b88869563f85f2c83108257615f1cc73c76", "patch": "@@ -44,6 +44,8 @@\n   static final int APPEND = 4;\n   // EXCL is used only when making a temp file.\n   static final int EXCL   = 8;\n+  static final int SYNC   = 16;\n+  static final int DSYNC  = 32;\n \n   // These are WHENCE values for seek.\n   static final int SET = 0;\n@@ -71,7 +73,7 @@ native void write (byte[] b, int offset, int len)\n   // past the end is ok (and if a subsequent write occurs the file\n   // will grow).\n   native int seek (long pos, int whence, boolean eof_trunc) throws IOException;\n-  native long length () throws IOException;\n+  native long getLength () throws IOException;\n   native long getFilePointer () throws IOException;\n   native int read () throws IOException;\n   native int read (byte[] bytes, int offset, int len) throws IOException;"}, {"sha": "0ff2ff65ce972cd4db16ad3cc9c31b04e9b03846", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=e48d8b88869563f85f2c83108257615f1cc73c76", "patch": "@@ -96,15 +96,17 @@ public RandomAccessFile (File file, String mode)\n   /**\n    * This method initializes a new instance of <code>RandomAccessFile</code>\n    * to read from the specified file name with the specified access mode.\n-   * The access mode is either \"r\" for read only access or \"rw\" for read\n-   * write access.\n+   * The access mode is either \"r\" for read only access, \"rw\" for read\n+   * write access, \"rws\" for synchronized read/write access of both\n+   * content and metadata, or \"rwd\" for read/write access\n+   * where only content is required to be synchronous.\n    * <p>\n    * Note that a <code>SecurityManager</code> check is made prior to\n    * opening the file to determine whether or not this file is allowed to\n    * be read or written.\n    *\n    * @param fileName The name of the file to read and/or write\n-   * @param mode \"r\" for read only or \"rw\" for read-write access to the file\n+   * @param mode \"r\", \"rw\", \"rws\", or \"rwd\"\n    *\n    * @exception IllegalArgumentException If <code>mode</code> has an \n    * illegal value\n@@ -115,16 +117,21 @@ public RandomAccessFile (File file, String mode)\n   public RandomAccessFile (String fileName, String mode)\n     throws FileNotFoundException\n   {\n-    // Check the mode\n-    if (!mode.equals(\"r\") && !mode.equals(\"rw\") && !mode.equals(\"rws\") &&\n-        !mode.equals(\"rwd\"))\n-      throw new IllegalArgumentException(\"Bad mode value: \" + mode);\n-  \n     int fdmode;\n-    if (mode.compareTo (\"r\") == 0)\n+    if (mode.equals(\"r\"))\n       fdmode = FileDescriptor.READ;\n-    else if (mode.compareTo (\"rw\") == 0)\n+    else if (mode.equals(\"rw\"))\n       fdmode = FileDescriptor.READ | FileDescriptor.WRITE;\n+    else if (mode.equals(\"rws\"))\n+      {\n+\tfdmode = (FileDescriptor.READ | FileDescriptor.WRITE\n+\t\t  | FileDescriptor.SYNC);\n+      }\n+    else if (mode.equals(\"rwd\"))\n+      {\n+\tfdmode = (FileDescriptor.READ | FileDescriptor.WRITE\n+\t\t  | FileDescriptor.DSYNC);\n+      }\n     else\n       throw new IllegalArgumentException (\"invalid mode: \" + mode);\n \n@@ -197,9 +204,9 @@ public long getFilePointer () throws IOException\n    *\n    * @exception IOException If an error occurs\n    */\n-  public void setLength (long pos) throws IOException\n+  public void setLength (long newLen) throws IOException\n   {\n-    fd.setLength(pos);\n+    fd.setLength (newLen);\n   }\n \n   /**\n@@ -211,7 +218,7 @@ public void setLength (long pos) throws IOException\n    */\n   public long length () throws IOException\n   {\n-    return fd.length();\n+    return fd.getLength ();\n   }\n \n   /**"}, {"sha": "2f879128fff9cb5db8ed7d34b8240f96693ff49e", "filename": "libjava/java/io/natFileDescriptorEcos.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorEcos.cc?ref=e48d8b88869563f85f2c83108257615f1cc73c76", "patch": "@@ -108,7 +108,7 @@ java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean)\n }\n \n jlong\n-java::io::FileDescriptor::length (void)\n+java::io::FileDescriptor::getLength (void)\n {\n   return 0;\n }"}, {"sha": "2ad2d9dce77b57318a6a57947b9f132c52c7e496", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=e48d8b88869563f85f2c83108257615f1cc73c76", "patch": "@@ -105,6 +105,12 @@ java::io::FileDescriptor::open (jstring path, jint jflags)\n \t}\n     }\n \n+  if ((jflags & SYNC))\n+    flags |= O_SYNC;\n+\n+  if ((jflags & DSYNC))\n+    flags |= O_DSYNC;\n+\n   int fd = ::open (buf, flags, mode);\n   if (fd == -1 && errno == EMFILE)\n     {\n@@ -233,7 +239,7 @@ java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n \n   if (eof_trunc)\n     {\n-      jlong len = length ();\n+      jlong len = getLength ();\n       if (whence == SET)\n \t{\n \t  if (pos > len)\n@@ -258,7 +264,7 @@ java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n }\n \n jlong\n-java::io::FileDescriptor::length (void)\n+java::io::FileDescriptor::getLength (void)\n {\n   struct stat sb;\n   if (::fstat (fd, &sb))"}, {"sha": "210eb73cbbbcc92523cd21a3d099cfbbc949ef30", "filename": "libjava/java/io/natFileDescriptorWin32.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48d8b88869563f85f2c83108257615f1cc73c76/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorWin32.cc?ref=e48d8b88869563f85f2c83108257615f1cc73c76", "patch": "@@ -244,7 +244,7 @@ java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean eof_trunc)\n {\n   JvAssert (whence == SET || whence == CUR);\n \n-  jlong len = length();\n+  jlong len = getLength();\n   jlong here = getFilePointer();\n \n   if (eof_trunc\n@@ -272,7 +272,7 @@ java::io::FileDescriptor::getFilePointer(void)\n }\n \n jlong\n-java::io::FileDescriptor::length(void)\n+java::io::FileDescriptor::getLength(void)\n {\n   DWORD high;\n   DWORD low;\n@@ -336,5 +336,5 @@ jint\n java::io::FileDescriptor::available(void)\n {\n   // FIXME:\n-  return length() - getFilePointer();\n+  return getLength() - getFilePointer();\n }"}]}