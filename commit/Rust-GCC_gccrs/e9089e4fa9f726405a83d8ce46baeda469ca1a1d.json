{"sha": "e9089e4fa9f726405a83d8ce46baeda469ca1a1d", "node_id": "C_kwDOANBUbNoAKGU5MDg5ZTRmYTlmNzI2NDA1YTgzZDhjZTQ2YmFlZGE0NjljYTFhMWQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-30T16:18:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-01T15:00:32Z"}, "message": "libstdc++: Avoid unwanted allocations in filesystem::path\n\nWhen using COW strings, accessing _M_pathname[0] and similar non-const\naccessors can cause the string to \"leak\", meaning it reallocates itself\nif it shares ownership with another string object.\n\nThis causes test failures for --enable-fully-dynamic-string builds:\n/home/jwakely/src/gcc/libstdc++-v3/testsuite/experimental/filesystem/path/construct/90634.cc:62: void test01(): Assertion 'bytes_allocated == 0' failed.\nFAIL: experimental/filesystem/path/construct/90634.cc execution test\n\nThis FAIL happens because the fully-dynamic move constructor results in\nshared ownership, so for path(std::move(std::string(\"foo\"))) the\n_M_pathname member shares ownership with the temporary, and the\nnon-const accesses in _M_split_cmpts() cause a new copy of the string to\nbe allocated. This un-sharing is wasteful, and entirely unnecessary when\nsharing ownership with an rvalue that is about to release its ownership\nanyway. Even for lvalues, sharing ownership is not a problem and\nreallocating a unique copy of the string is wasteful.\n\nThis removes non-const accesses of _M_pathname in the\npath::_M_split_cmpts() members.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/fs_path.cc (path::_M_split_cmpts()): Remove\n\tmicro-optimization for \"/\" path.\n\t* src/filesystem/path.cc (path::_M_split_cmpts()): Only access\n\tthe contents of _M_pathname using const member functions.", "tree": {"sha": "94f9d8c8e541db58a27bbbce6bbebb53e6e632f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94f9d8c8e541db58a27bbbce6bbebb53e6e632f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9089e4fa9f726405a83d8ce46baeda469ca1a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9089e4fa9f726405a83d8ce46baeda469ca1a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9089e4fa9f726405a83d8ce46baeda469ca1a1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9089e4fa9f726405a83d8ce46baeda469ca1a1d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e625a44f6f3001cea31e0f7c563943ecba92b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e625a44f6f3001cea31e0f7c563943ecba92b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e625a44f6f3001cea31e0f7c563943ecba92b68"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "967d9471134569f38b9406c7f9f69cbd48014c33", "filename": "libstdc++-v3/src/c++17/fs_path.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9089e4fa9f726405a83d8ce46baeda469ca1a1d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9089e4fa9f726405a83d8ce46baeda469ca1a1d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc?ref=e9089e4fa9f726405a83d8ce46baeda469ca1a1d", "patch": "@@ -1872,11 +1872,6 @@ path::_M_split_cmpts()\n       _M_cmpts.type(_Type::_Filename);\n       return;\n     }\n-  if (_M_pathname.length() == 1 && _M_pathname[0] == preferred_separator)\n-    {\n-      _M_cmpts.type(_Type::_Root_dir);\n-      return;\n-    }\n \n   _Parser parser(_M_pathname);\n "}, {"sha": "8e8806a953f2c5ec857aa7c786830d5661a74b72", "filename": "libstdc++-v3/src/filesystem/path.cc", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9089e4fa9f726405a83d8ce46baeda469ca1a1d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9089e4fa9f726405a83d8ce46baeda469ca1a1d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fpath.cc?ref=e9089e4fa9f726405a83d8ce46baeda469ca1a1d", "patch": "@@ -337,15 +337,18 @@ path::_M_split_cmpts()\n   _M_type = _Type::_Multi;\n   _M_cmpts.clear();\n \n-  if (_M_pathname.empty())\n+  // Use const-reference to access _M_pathname, to avoid \"leaking\" COW string.\n+  const auto& pathname = _M_pathname;\n+\n+  if (pathname.empty())\n     return;\n \n   {\n     // Approximate count of components, to reserve space in _M_cmpts vector:\n     int count = 1;\n-    bool saw_sep_last = _S_is_dir_sep(_M_pathname[0]);\n+    bool saw_sep_last = _S_is_dir_sep(pathname[0]);\n     bool saw_non_sep = !saw_sep_last;\n-    for (value_type c : _M_pathname)\n+    for (value_type c : pathname)\n       {\n        if (_S_is_dir_sep(c))\n          saw_sep_last = true;\n@@ -363,13 +366,13 @@ path::_M_split_cmpts()\n   }\n \n   size_t pos = 0;\n-  const size_t len = _M_pathname.size();\n+  const size_t len = pathname.size();\n \n   // look for root name or root directory\n-  if (_S_is_dir_sep(_M_pathname[0]))\n+  if (_S_is_dir_sep(pathname[0]))\n     {\n       // look for root name, such as \"//\" or \"//foo\"\n-      if (len > 1 && _M_pathname[1] == _M_pathname[0])\n+      if (len > 1 && pathname[1] == pathname[0])\n \t{\n \t  if (len == 2)\n \t    {\n@@ -378,11 +381,11 @@ path::_M_split_cmpts()\n \t      return;\n \t    }\n \n-\t  if (!_S_is_dir_sep(_M_pathname[2]))\n+\t  if (!_S_is_dir_sep(pathname[2]))\n \t    {\n \t      // got root name, find its end\n \t      pos = 3;\n-\t      while (pos < len && !_S_is_dir_sep(_M_pathname[pos]))\n+\t      while (pos < len && !_S_is_dir_sep(pathname[pos]))\n \t\t++pos;\n \t      if (pos == len)\n \t\t{\n@@ -409,7 +412,7 @@ path::_M_split_cmpts()\n       ++pos;\n     }\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  else if (len > 1 && _M_pathname[1] == L':')\n+  else if (len > 1 && pathname[1] == L':')\n     {\n       // got disk designator\n       if (len == 2)\n@@ -418,17 +421,17 @@ path::_M_split_cmpts()\n \t  return;\n \t}\n       _M_add_root_name(2);\n-      if (len > 2 && _S_is_dir_sep(_M_pathname[2]))\n+      if (len > 2 && _S_is_dir_sep(pathname[2]))\n \t_M_add_root_dir(2);\n       pos = 2;\n     }\n #endif\n   else\n     {\n       size_t n = 1;\n-      for (; n < _M_pathname.size() && !_S_is_dir_sep(_M_pathname[n]); ++n)\n+      for (; n < pathname.size() && !_S_is_dir_sep(pathname[n]); ++n)\n \t{ }\n-      if (n == _M_pathname.size())\n+      if (n == pathname.size())\n \t{\n \t  _M_type = _Type::_Filename;\n \t  return;\n@@ -438,7 +441,7 @@ path::_M_split_cmpts()\n   size_t back = pos;\n   while (pos < len)\n     {\n-      if (_S_is_dir_sep(_M_pathname[pos]))\n+      if (_S_is_dir_sep(pathname[pos]))\n \t{\n \t  if (back != pos)\n \t    _M_add_filename(back, pos - back);\n@@ -450,7 +453,7 @@ path::_M_split_cmpts()\n \n   if (back != pos)\n     _M_add_filename(back, pos - back);\n-  else if (_S_is_dir_sep(_M_pathname.back()))\n+  else if (_S_is_dir_sep(pathname.back()))\n     {\n       // [path.itr]/8\n       // \"Dot, if one or more trailing non-root slash characters are present.\""}]}