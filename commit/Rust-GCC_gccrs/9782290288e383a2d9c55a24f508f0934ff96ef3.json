{"sha": "9782290288e383a2d9c55a24f508f0934ff96ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc4MjI5MDI4OGUzODNhMmQ5YzU1YTI0ZjUwOGYwOTM0ZmY5NmVmMw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-05-22T18:59:15Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-05-22T18:59:15Z"}, "message": "avr.c (get_sequence_length): Add new function.\n\n\t* config/avr/avr.c (get_sequence_length): Add new function.\n\t(expand_prologue, expand_epilogue): Remove duplicate code.\n\nFrom-SVN: r135775", "tree": {"sha": "ac2ff1bd4030cb4628a4cb3a1339518c2b32072a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac2ff1bd4030cb4628a4cb3a1339518c2b32072a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9782290288e383a2d9c55a24f508f0934ff96ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9782290288e383a2d9c55a24f508f0934ff96ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9782290288e383a2d9c55a24f508f0934ff96ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9782290288e383a2d9c55a24f508f0934ff96ef3/comments", "author": null, "committer": null, "parents": [{"sha": "9f8e4e845ba0240f599fd541c5cee10cf8654cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8e4e845ba0240f599fd541c5cee10cf8654cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8e4e845ba0240f599fd541c5cee10cf8654cc5"}], "stats": {"total": 179, "additions": 107, "deletions": 72}, "files": [{"sha": "968d0eac5a0223648ce541fe3145d61829cb1d52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9782290288e383a2d9c55a24f508f0934ff96ef3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9782290288e383a2d9c55a24f508f0934ff96ef3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9782290288e383a2d9c55a24f508f0934ff96ef3", "patch": "@@ -1,3 +1,8 @@\n+2008-05-22  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.c (get_sequence_length): Add new function.\n+\t(expand_prologue, expand_epilogue): Remove duplicate code.\n+\n 2008-05-22  Rafael Espindola  <espindola@google.com>\n \n \t* see.c (see_pre_insert_extensions): Use copy_rtx to avoid invalid rtx"}, {"sha": "012a7e4fd1b5c5f5e89d8ae9d73d1b0f5ce7a8e9", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 102, "deletions": 72, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9782290288e383a2d9c55a24f508f0934ff96ef3/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9782290288e383a2d9c55a24f508f0934ff96ef3/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9782290288e383a2d9c55a24f508f0934ff96ef3", "patch": "@@ -54,6 +54,7 @@ static int signal_function_p (tree);\n static int avr_OS_task_function_p (tree);\n static int avr_OS_main_function_p (tree);\n static int avr_regs_to_save (HARD_REG_SET *);\n+static int get_sequence_length (rtx insns);\n static int sequent_regs_live (void);\n static const char *ptrreg_to_str (int);\n static const char *cond_string (enum rtx_code);\n@@ -585,6 +586,20 @@ sequent_regs_live (void)\n   return (cur_seq == live_seq) ? live_seq : 0;\n }\n \n+/* Obtain the length sequence of insns.  */\n+\n+int\n+get_sequence_length (rtx insns)\n+{\n+  rtx insn;\n+  int length;\n+  \n+  for (insn = insns, length = 0; insn; insn = NEXT_INSN (insn))\n+    length += get_attr_length (insn);\n+\t\t\n+  return length;\n+}\n+\n /*  Output function prologue.  */\n \n void\n@@ -718,12 +733,11 @@ expand_prologue (void)\n               To avoid a complex logic, both methods are tested and shortest\n               is selected.  */\n               rtx myfp;\n-              /*  First method.  */\n+\t      rtx fp_plus_insns; \n+\t      rtx sp_plus_insns = NULL_RTX;\n+\n               if (TARGET_TINY_STACK)\n                 {\n-                  if (size < -63 || size > 63)\n-                    warning (0, \"large frame pointer change (%d) with -mtiny-stack\", size);\n-                    \n                   /* The high byte (r29) doesn't change - prefer 'subi' (1 cycle)\n                      over 'sbiw' (2 cycles, same size).  */\n                   myfp = gen_rtx_REG (QImode, REGNO (frame_pointer_rtx));\n@@ -733,51 +747,53 @@ expand_prologue (void)\n                   /*  Normal sized addition.  */\n                   myfp = frame_pointer_rtx;\n                 }\n-              /* Calculate length.  */ \n-              int method1_length;\n-              method1_length =\n-\t        get_attr_length (gen_move_insn (frame_pointer_rtx, stack_pointer_rtx));\n-              method1_length +=\n-\t        get_attr_length (gen_move_insn (myfp, \n-                                                gen_rtx_PLUS (GET_MODE(myfp), myfp,\n-                                                              gen_int_mode (-size, \n-\t\t\t\t\t\t\t                    GET_MODE(myfp)))));\n-              method1_length += \n-\t        get_attr_length (gen_move_insn (stack_pointer_rtx, frame_pointer_rtx));\n-              \n+\n+\t      /* Method 1-Adjust frame pointer.  */\n+\t      start_sequence ();\n+\n+              insn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n+              RTX_FRAME_RELATED_P (insn) = 1;\n+\n+              insn = \n+\t        emit_move_insn (myfp,\n+\t\t\t\tgen_rtx_PLUS (GET_MODE(myfp), myfp, \n+\t\t\t\t\t      gen_int_mode (-size, \n+\t\t\t\t\t\t\t    GET_MODE(myfp))));\n+              RTX_FRAME_RELATED_P (insn) = 1;\n+\n+              insn = emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n+              RTX_FRAME_RELATED_P (insn) = 1;\n+\n+\t      fp_plus_insns = get_insns ();\n+\t      end_sequence ();\n+\n \t      /* Method 2-Adjust Stack pointer.  */\n-              int sp_plus_length = 0;\n               if (size <= 6)\n                 {\n-                  sp_plus_length = \n-\t\t    get_attr_length (gen_move_insn (stack_pointer_rtx,\n-                                                    gen_rtx_PLUS (HImode, stack_pointer_rtx,\n-                                                                  gen_int_mode (-size, \n-\t\t\t\t\t\t\t\t                HImode))));\n-\t\t  sp_plus_length += \n-\t\t    get_attr_length (gen_move_insn (frame_pointer_rtx, stack_pointer_rtx));\n+\t\t  start_sequence ();\n+\n+\t\t  insn = \n+\t\t    emit_move_insn (stack_pointer_rtx,\n+\t\t\t\t    gen_rtx_PLUS (HImode, \n+\t\t\t\t\t\t  stack_pointer_rtx, \n+\t\t\t\t\t\t  gen_int_mode (-size, \n+\t\t\t\t\t\t\t\tHImode)));\n+\t\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t  \n+\t\t  insn = \n+\t\t    emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n+\t\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\n+\t\t  sp_plus_insns = get_insns ();\n+\t\t  end_sequence ();\n                 }\n+\n               /* Use shortest method.  */\n-              if (size <= 6 && (sp_plus_length < method1_length))\n-                {\n-                  insn = emit_move_insn (stack_pointer_rtx,\n-                                         gen_rtx_PLUS (HImode, stack_pointer_rtx, \n-                                                       gen_int_mode (-size, HImode)));\n-                  RTX_FRAME_RELATED_P (insn) = 1;\n-\t\t  insn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n-                  RTX_FRAME_RELATED_P (insn) = 1;\n-                }\n+              if (size <= 6 && (get_sequence_length (sp_plus_insns) \n+\t\t\t\t < get_sequence_length (fp_plus_insns)))\n+\t\temit_insn (sp_plus_insns);\n               else\n-                {\t\t\n-                  insn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n-                  RTX_FRAME_RELATED_P (insn) = 1;\n-                  insn = emit_move_insn (myfp,\n-                                         gen_rtx_PLUS (GET_MODE(myfp), myfp, \n-                                                       gen_int_mode (-size, GET_MODE(myfp))));\n-                  RTX_FRAME_RELATED_P (insn) = 1;\n-                  insn = emit_move_insn ( stack_pointer_rtx, frame_pointer_rtx);\n-                  RTX_FRAME_RELATED_P (insn) = 1;\n-                }\n+\t\temit_insn (fp_plus_insns);\n             }\n         }\n     }\n@@ -872,42 +888,56 @@ expand_epilogue (void)\n \t  if (size)\n \t    {\n               /* Try two methods to adjust stack and select shortest.  */\n-              int fp_plus_length;\n+\t      rtx myfp;\n+\t      rtx fp_plus_insns;\n+\t      rtx sp_plus_insns = NULL_RTX;\n+\t      \n+\t      if (TARGET_TINY_STACK)\n+                {\n+                  /* The high byte (r29) doesn't change - prefer 'subi' \n+                     (1 cycle) over 'sbiw' (2 cycles, same size).  */\n+                  myfp = gen_rtx_REG (QImode, REGNO (frame_pointer_rtx));\n+                }\n+              else \n+                {\n+                  /* Normal sized addition.  */\n+                  myfp = frame_pointer_rtx;\n+                }\n+\t      \n               /* Method 1-Adjust frame pointer.  */\n-              fp_plus_length = \n-\t        get_attr_length (gen_move_insn (frame_pointer_rtx,\n-                                                gen_rtx_PLUS (HImode, frame_pointer_rtx,\n-                                                              gen_int_mode (size,\n-\t\t\t\t\t\t\t\t\t    HImode))));\n-              /* Copy to stack pointer.  */\n-              fp_plus_length += \n-\t        get_attr_length (gen_move_insn (stack_pointer_rtx, frame_pointer_rtx));    \n-          \n+\t      start_sequence ();\n+\n+\t      emit_move_insn (myfp,\n+\t\t\t      gen_rtx_PLUS (HImode, myfp,\n+\t\t\t\t\t    gen_int_mode (size, \n+\t\t\t\t\t\t\t  GET_MODE(myfp))));\n+\n+\t      /* Copy to stack pointer.  */\n+\t      emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n+\n+\t      fp_plus_insns = get_insns ();\n+\t      end_sequence ();\t      \n+\n               /* Method 2-Adjust Stack pointer.  */\n-              int sp_plus_length = 0;\n               if (size <= 5)\n                 {\n-                  sp_plus_length = \n-\t\t    get_attr_length (gen_move_insn (stack_pointer_rtx,\n-                                                    gen_rtx_PLUS (HImode, stack_pointer_rtx,\n-                                                                  gen_int_mode (size,\n-\t\t\t\t\t\t\t\t\t\tHImode))));\n+\t\t  start_sequence ();\n+\n+\t\t  emit_move_insn (stack_pointer_rtx,\n+\t\t\t\t  gen_rtx_PLUS (HImode, stack_pointer_rtx,\n+\t\t\t\t\t\tgen_int_mode (size, \n+\t\t\t\t\t\t\t      HImode)));\n+\n+\t\t  sp_plus_insns = get_insns ();\n+\t\t  end_sequence ();\n                 }\n+\n               /* Use shortest method.  */\n-              if (size <= 5 && (sp_plus_length < fp_plus_length))\n-                {\n-                  emit_move_insn (stack_pointer_rtx,\n-                                  gen_rtx_PLUS (HImode, stack_pointer_rtx,\n-                                                gen_int_mode (size, HImode)));\n-                }\n+              if (size <= 5 && (get_sequence_length (sp_plus_insns) \n+\t\t\t\t < get_sequence_length (fp_plus_insns)))\n+\t      \temit_insn (sp_plus_insns);\n               else\n-                {\n-                  emit_move_insn (frame_pointer_rtx,\n-                                  gen_rtx_PLUS (HImode, frame_pointer_rtx,\n-                                                gen_int_mode (size, HImode)));\n-                  /* Copy to stack pointer.  */\n-                  emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n-                }\n+\t\temit_insn (fp_plus_insns);\n             }\n \t  if (!(cfun->machine->is_OS_task || cfun->machine->is_OS_main))\n \t    {"}]}