{"sha": "21d05694881f63707e13cd268a9616f39624245d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkMDU2OTQ4ODFmNjM3MDdlMTNjZDI2OGE5NjE2ZjM5NjI0MjQ1ZA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2009-09-16T01:12:16Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-09-16T01:12:16Z"}, "message": "sh.c (output_stack_adjust): Add new argument frame_p.\n\n\t* config/sh/sh.c (output_stack_adjust): Add new argument frame_p.\n\t(sh_expand_prologue): Update calls to output_stack_adjust.\n\t(sh_expand_epilogue): Likewise.\t\n\n\t* gcc.target/sh/struct-arg-dw2.c: New test.\n\n\nCo-Authored-By: Kaz Kojima <kkojima@gcc.gnu.org>\n\nFrom-SVN: r151735", "tree": {"sha": "e4240ec4189d64b7d70e77ce4191b43a11f0e2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4240ec4189d64b7d70e77ce4191b43a11f0e2c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d05694881f63707e13cd268a9616f39624245d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d05694881f63707e13cd268a9616f39624245d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d05694881f63707e13cd268a9616f39624245d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d05694881f63707e13cd268a9616f39624245d/comments", "author": null, "committer": null, "parents": [{"sha": "41b7d41764eb8cf5720bcdb3ac0ff5f3b52d56de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b7d41764eb8cf5720bcdb3ac0ff5f3b52d56de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b7d41764eb8cf5720bcdb3ac0ff5f3b52d56de"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "8eca8bad3bc58860df86a7f969daeb2c65df7747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d05694881f63707e13cd268a9616f39624245d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d05694881f63707e13cd268a9616f39624245d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21d05694881f63707e13cd268a9616f39624245d", "patch": "@@ -1,3 +1,10 @@\n+2009-09-16  DJ Delorie  <dj@redhat.com>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (output_stack_adjust): Add new argument frame_p.\n+\t(sh_expand_prologue): Update calls to output_stack_adjust.\n+\t(sh_expand_epilogue): Likewise.\t\n+\n 2009-09-15  Adam Nemet  <anemet@caviumnetworks.com>\n \n \tPR bootstrap/41349"}, {"sha": "d0f9932288a46018739c107ea38bc53c11808530", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d05694881f63707e13cd268a9616f39624245d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d05694881f63707e13cd268a9616f39624245d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=21d05694881f63707e13cd268a9616f39624245d", "patch": "@@ -177,7 +177,7 @@ static rtx find_barrier (int, rtx, rtx);\n static int noncall_uses_reg (rtx, rtx, rtx *);\n static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n-static void output_stack_adjust (int, rtx, int, HARD_REG_SET *);\n+static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx frame_insn (rtx);\n static rtx push (int);\n static void pop (int);\n@@ -6037,9 +6037,9 @@ output_jump_label_table (void)\n \n static void\n output_stack_adjust (int size, rtx reg, int epilogue_p,\n-\t\t     HARD_REG_SET *live_regs_mask)\n+\t\t     HARD_REG_SET *live_regs_mask, bool frame_p)\n {\n-  rtx (*emit_fn) (rtx) = epilogue_p ? &emit_insn : &frame_insn;\n+  rtx (*emit_fn) (rtx) = frame_p ? &frame_insn : &emit_insn;\n   if (size)\n     {\n       HOST_WIDE_INT align = STACK_BOUNDARY / BITS_PER_UNIT;\n@@ -6701,9 +6701,10 @@ sh_expand_prologue (void)\n       && (NPARM_REGS(SImode)\n \t  > crtl->args.info.arg_count[(int) SH_ARG_INT]))\n     pretend_args = 0;\n+  /* Dwarf2 module doesn't expect frame related insns here.  */\n   output_stack_adjust (-pretend_args\n \t\t       - crtl->args.info.stack_regs * 8,\n-\t\t       stack_pointer_rtx, 0, NULL);\n+\t\t       stack_pointer_rtx, 0, NULL, false);\n \n   if (TARGET_SHCOMPACT && flag_pic && crtl->args.info.call_cookie)\n     /* We're going to use the PIC register to load the address of the\n@@ -6834,7 +6835,7 @@ sh_expand_prologue (void)\n       offset_base = d + d_rounding;\n \n       output_stack_adjust (-(save_size + d_rounding), stack_pointer_rtx,\n-\t\t\t   0, NULL);\n+\t\t\t   0, NULL, true);\n \n       sh5_schedule_saves (&live_regs_mask, &schedule, offset_base);\n       tmp_pnt = schedule.temps;\n@@ -7009,7 +7010,7 @@ sh_expand_prologue (void)\n   target_flags = save_flags;\n \n   output_stack_adjust (-rounded_frame_size (d) + d_rounding,\n-\t\t       stack_pointer_rtx, 0, NULL);\n+\t\t       stack_pointer_rtx, 0, NULL, true);\n \n   if (frame_pointer_needed)\n     frame_insn (GEN_MOV (hard_frame_pointer_rtx, stack_pointer_rtx));\n@@ -7074,7 +7075,7 @@ sh_expand_epilogue (bool sibcall_p)\n \t See PR/18032 and PR/40313.  */\n       emit_insn (gen_blockage ());\n       output_stack_adjust (frame_size, hard_frame_pointer_rtx, e,\n-\t\t\t   &live_regs_mask);\n+\t\t\t   &live_regs_mask, false);\n \n       /* We must avoid moving the stack pointer adjustment past code\n \t which reads from the local frame, else an interrupt could\n@@ -7090,7 +7091,8 @@ sh_expand_epilogue (bool sibcall_p)\n \t occur after the SP adjustment and clobber data in the local\n \t frame.  */\n       emit_insn (gen_blockage ());\n-      output_stack_adjust (frame_size, stack_pointer_rtx, e, &live_regs_mask);\n+      output_stack_adjust (frame_size, stack_pointer_rtx, e,\n+\t\t\t   &live_regs_mask, false);\n     }\n \n   if (SHMEDIA_REGS_STACK_ADJUST ())\n@@ -7277,7 +7279,7 @@ sh_expand_epilogue (bool sibcall_p)\n   output_stack_adjust (crtl->args.pretend_args_size\n \t\t       + save_size + d_rounding\n \t\t       + crtl->args.info.stack_regs * 8,\n-\t\t       stack_pointer_rtx, e, NULL);\n+\t\t       stack_pointer_rtx, e, NULL, false);\n \n   if (crtl->calls_eh_return)\n     emit_insn (GEN_ADD3 (stack_pointer_rtx, stack_pointer_rtx,"}, {"sha": "1f8eb2e855e5f2a894b56e63357532fbc2dcc621", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d05694881f63707e13cd268a9616f39624245d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d05694881f63707e13cd268a9616f39624245d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21d05694881f63707e13cd268a9616f39624245d", "patch": "@@ -1,3 +1,8 @@\n+2009-09-16  DJ Delorie  <dj@redhat.com>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* gcc.target/sh/struct-arg-dw2.c: New test.\n+\n 2009-09-15  Nathan Froyd  <froydnj@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "effd13d19a449f66853ef00954a74ac83f770cd4", "filename": "gcc/testsuite/gcc.target/sh/struct-arg-dw2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d05694881f63707e13cd268a9616f39624245d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d05694881f63707e13cd268a9616f39624245d/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fstruct-arg-dw2.c?ref=21d05694881f63707e13cd268a9616f39624245d", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that we don't generate fame related insn against stack adjustment\n+   for the object sent partially in registers. */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-g\" } */\n+/* { dg-final { scan-assembler-not \"\\t.cfi_def_cfa_offset 16\" } } */\n+\n+typedef struct\n+{\n+  unsigned short A1;\n+  unsigned short A2;\n+} A_t;\n+\n+typedef struct\n+{\n+  A_t C13[10];\n+} C_t;\n+\n+void\n+Store (C_t Par)\n+{\n+  unsigned char *ptr;\n+  unsigned int test;\n+\n+  ptr = (unsigned char*) 0x12345678;\n+  ptr++;\n+}"}]}