{"sha": "988337ca704454a79edec069264f11205f7ff2fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4MzM3Y2E3MDQ0NTRhNzllZGVjMDY5MjY0ZjExMjA1ZjdmZjJmZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-10-02T15:11:02Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-10-02T15:11:02Z"}, "message": "(zero_extendhisi2, extendhisi2): Expand to suitable byte sequence when TARGET_SHORT_BYTES and loading a mem.\n\n(zero_extendhisi2, extendhisi2): Expand to suitable byte sequence when\nTARGET_SHORT_BYTES and loading a mem.\n(movhi_bytes, extendhisi2_mem): New expands.\n(movhi): Call movhi_bytes to load a short from memory if\nTARGET_SHORT_BY_BYTES.\n(all matchers loading a short from memory): Don't match if\nTARGET_SHORT_BY_BYTES.\n(matcher for movhi when TARGET_SHORT_BY_BYTES): New pattern to cover\nremaining legal cases.\n\nFrom-SVN: r8202", "tree": {"sha": "799c772a7749623ee3c14d617719d17e75b7bd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/799c772a7749623ee3c14d617719d17e75b7bd24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/988337ca704454a79edec069264f11205f7ff2fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988337ca704454a79edec069264f11205f7ff2fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988337ca704454a79edec069264f11205f7ff2fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988337ca704454a79edec069264f11205f7ff2fd/comments", "author": null, "committer": null, "parents": [{"sha": "0a81f500044e97d296deb70b3ee657a0eeabe9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a81f500044e97d296deb70b3ee657a0eeabe9f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a81f500044e97d296deb70b3ee657a0eeabe9f0"}], "stats": {"total": 116, "additions": 109, "deletions": 7}, "files": [{"sha": "e72acd31c858a25486723360c602e296f7d01cc3", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 109, "deletions": 7, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/988337ca704454a79edec069264f11205f7ff2fd/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/988337ca704454a79edec069264f11205f7ff2fd/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=988337ca704454a79edec069264f11205f7ff2fd", "patch": "@@ -1769,13 +1769,21 @@\n [(set_attr \"length\" \"8\")])\n \n (define_expand \"zero_extendhisi2\"\n-  [(set (match_dup 2) (ashift:SI (match_operand:HI 1 \"s_register_operand\" \"\")\n+  [(set (match_dup 2) (ashift:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t\t\t (const_int 16)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n \t(lshiftrt:SI (match_dup 2) (const_int 16)))]\n   \"\"\n   \"\n-{ operands[1] = gen_lowpart (SImode, operands[1]);\n+{\n+  if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n+    {\n+      emit_insn (gen_movhi_bytes (operands[0], operands[1]));\n+      DONE;\n+    }\n+  if (! s_register_operand (operands[1], HImode))\n+    operands[1] = copy_to_mode_reg (HImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n   operands[2] = gen_reg_rtx (SImode); \n }\")\n \n@@ -1819,15 +1827,51 @@\n \n (define_expand \"extendhisi2\"\n   [(set (match_dup 2)\n-\t(ashift:SI (match_operand:HI 1 \"s_register_operand\" \"\")\n+\t(ashift:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t   (const_int 16)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n \t(ashiftrt:SI (match_dup 2)\n \t\t     (const_int 16)))]\n   \"\"\n   \"\n-{ operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n+{ \n+  if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n+    {\n+      emit_insn (gen_extendhisi2_mem (operands[0], operands[1]));\n+      DONE;\n+    }\n+  if (! s_register_operand (operands[1], HImode))\n+    operands[1] = copy_to_mode_reg (HImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_reg_rtx (SImode);\n+}\")\n+\n+(define_expand \"extendhisi2_mem\"\n+  [(set (match_dup 2) (zero_extend:SI (mem:QI (match_operand:HI 1 \"\" \"\"))))\n+   (set (match_dup 3)\n+\t(zero_extend:SI (mem:QI (plus:SI (match_dup 1) (const_int 1)))))\n+   (set (match_dup 6) (ashift:SI (match_dup 4) (const_int 24)))\n+   (set (match_operand:SI 0 \"\" \"\")\n+\t(ior:SI (ashiftrt:SI (match_dup 6) (const_int 16)) (match_dup 5)))]\n+  \"\"\n+  \"\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+  operands[2] = gen_reg_rtx (SImode);\n+  operands[3] = gen_reg_rtx (SImode);\n+  operands[6] = gen_reg_rtx (SImode);\n+\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      operands[4] = operands[2];\n+      operands[5] = operands[3];\n+    }\n+  else\n+    {\n+      operands[4] = operands[3];\n+      operands[5] = operands[2];\n+    }\n+\")\n \n (define_expand \"extendqihi2\"\n   [(set (match_dup 2)\n@@ -2202,6 +2246,12 @@\n \t  emit_insn (gen_movsi (reg, GEN_INT (val)));\n \t  operands[1] = gen_rtx (SUBREG, HImode, reg, 0);\n \t}\n+      else if (TARGET_SHORT_BY_BYTES && GET_CODE (operands[1]) == MEM)\n+        {\n+\t  rtx reg = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_movhi_bytes (reg, operands[1]));\n+\t  operands[1] = gen_lowpart (HImode, reg);\n+\t}\n       else if (BYTES_BIG_ENDIAN && GET_CODE (operands[1]) == MEM)\n \t{\n \t  emit_insn (gen_movhi_bigend (operands[0], operands[1]));\n@@ -2211,6 +2261,31 @@\n }\n \")\n \n+(define_expand \"movhi_bytes\"\n+  [(set (match_dup 2) (zero_extend:SI (mem:QI (match_operand:HI 1 \"\" \"\"))))\n+   (set (match_dup 3)\n+\t(zero_extend:SI (mem:QI (plus:SI (match_dup 1) (const_int 1)))))\n+   (set (match_operand:SI 0 \"\" \"\")\n+\t (ior:SI (ashift:SI (match_dup 4) (const_int 8)) (match_dup 5)))]\n+  \"\"\n+  \"\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n+  operands[2] = gen_reg_rtx (SImode);\n+  operands[3] = gen_reg_rtx (SImode);\n+\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      operands[4] = operands[2];\n+      operands[5] = operands[3];\n+    }\n+  else\n+    {\n+      operands[4] = operands[3];\n+      operands[5] = operands[2];\n+    }\n+\")\n+\n (define_expand \"movhi_bigend\"\n   [(set (match_dup 2)\n \t(rotate:SI (subreg:SI (match_operand:HI 1 \"memory_operand\" \"\") 0)\n@@ -2230,7 +2305,8 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r\")\n \t(match_operand:HI 1 \"general_operand\"  \"rI,K,m\"))]\n-  \"(! BYTES_BIG_ENDIAN)\n+  \"! BYTES_BIG_ENDIAN\n+   && ! TARGET_SHORT_BY_BYTES\n    && (GET_CODE (operands[1]) != CONST_INT\n        || const_ok_for_arm (INTVAL (operands[1]))\n        || const_ok_for_arm (~INTVAL (operands[1])))\"\n@@ -2244,6 +2320,7 @@\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r,r,r\")\n \t(match_operand:HI 1 \"general_operand\"  \"rI,K,m\"))]\n   \"BYTES_BIG_ENDIAN\n+   && ! TARGET_SHORT_BY_BYTES\n    && (GET_CODE (operands[1]) != CONST_INT\n        || const_ok_for_arm (INTVAL (operands[1]))\n        || const_ok_for_arm (~INTVAL (operands[1])))\"\n@@ -2258,10 +2335,20 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(rotate:SI (subreg:SI (match_operand:HI 1 \"memory_operand\" \"m\") 0)\n \t\t   (const_int 16)))]\n-  \"BYTES_BIG_ENDIAN\"\n+  \"BYTES_BIG_ENDIAN\n+   && ! TARGET_SHORT_BY_BYTES\"\n   \"ldr%?\\\\t%0, %1\\\\t%@ movhi_bigend\"\n [(set_attr \"type\" \"load\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"s_register_operand\" \"=r,r\")\n+\t(match_operand:HI 1 \"arm_rhs_operand\"  \"rI,K\"))]\n+  \"TARGET_SHORT_BY_BYTES\"\n+  \"@\n+   mov%?\\\\t%0, %1\\\\t%@ movhi\n+   mvn%?\\\\t%0, #%B1\\\\t%@ movhi\")\n+\n+\n (define_expand \"reload_outhi\"\n   [(parallel [(match_operand:HI 0 \"reload_memory_operand\" \"=o\")\n \t      (match_operand:HI 1 \"s_register_operand\" \"r\")\n@@ -2272,6 +2359,16 @@\n   DONE;\n \")\n \n+(define_expand \"reload_inhi\"\n+  [(parallel [(match_operand:HI 0 \"s_register_operand\" \"=r\")\n+\t      (match_operand:HI 1 \"reload_memory_operand\" \"o\")\n+\t      (match_operand:SI 2 \"s_register_operand\" \"=&r\")])]\n+  \"TARGET_SHORT_BY_BYTES\"\n+  \"\n+  arm_reload_in_hi (operands);\n+  DONE;\n+\")\n+\n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"\")\n         (match_operand:QI 1 \"general_operand\" \"\"))]\n@@ -4706,6 +4803,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"(! BYTES_BIG_ENDIAN)\n+   && ! TARGET_SHORT_BY_BYTES\n    && REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n@@ -4720,6 +4818,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"(!BYTES_BIG_ENDIAN)\n+   && ! TARGET_SHORT_BY_BYTES\n    && REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n@@ -4857,6 +4956,7 @@\n \t(plus:SI (match_op_dup 2 [(match_dup 3)\t(match_dup 4)])\n \t\t (match_dup 1)))]\n   \"(! BYTES_BIG_ENDIAN)\n+   && ! TARGET_SHORT_BY_BYTES\n    && REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n@@ -4873,6 +4973,7 @@\n \t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n \t\t\t\t\t\t (match_dup 4)])))]\n   \"(! BYTES_BIG_ENDIAN)\n+   && ! TARGET_SHORT_BY_BYTES\n    && REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n@@ -4919,6 +5020,7 @@\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_operand:SI 2 \"index_operand\" \"rJ\")))]\n   \"(! BYTES_BIG_ENDIAN)\n+   && ! TARGET_SHORT_BY_BYTES\n    && REGNO(operands[0]) != REGNO(operands[1])\n    && (GET_CODE (operands[2]) != REG\n        || REGNO(operands[0]) != REGNO (operands[2]))\""}]}