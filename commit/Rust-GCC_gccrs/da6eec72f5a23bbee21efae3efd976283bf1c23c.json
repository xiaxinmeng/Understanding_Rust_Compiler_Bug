{"sha": "da6eec72f5a23bbee21efae3efd976283bf1c23c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2ZWVjNzJmNWEyM2JiZWUyMWVmYWUzZWZkOTc2MjgzYmYxYzIzYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-10-16T00:40:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-16T00:40:39Z"}, "message": "real.c (real_to_decimal): Accept BUF_SIZE and CROP_TRAILING_ZEROS as arguments.\n\ngcc/\n        * real.c (real_to_decimal): Accept BUF_SIZE and CROP_TRAILING_ZEROS\n        as arguments.  Bound DIGITS by the available buffer size.\n        (real_to_hexadecimal): Likewise.\n        * real.h (real_to_decimal, real_to_hexadecimal): Update prototypes.\n        (REAL_VALUE_TO_DECIMAL): Remove.\n        * c-common.c, c-pretty-print.c, print-rtl.c, print-tree.c,\n        sched-vis.c, config/arc/arc.c, config/c4x/c4x.c, config/fr30/fr30.c,\n        config/i370/i370.h, config/i386/i386.c, config/i960/i960.c,\n        config/ip2k/ip2k.c, config/m32r/m32r.c, config/m68hc11/m68hc11.c,\n        config/m68k/hp320.h, config/m68k/m68k.h, config/m68k/sun2o4.h,\n        config/m68k/sun3.h, config/mips/mips.c, config/ns32k/ns32k.c,\n        config/pdp11/pdp11.h, config/vax/vax.h: Update all callers to\n        use real_to_decimal directly, and with the proper arguments.\n        * doc/tm.texi (REAL_VALUE_TO_DECIMAL): Remove.\n\ngcc/cp/\n        * error.c (dump_expr): Use real_to_decimal directly, and with\n        the new arguments.\n\ngcc/f/\n        * target.h (ffetarget_print_real1, ffetarget_print_real2): Use\n        real_to_decimal directly, and with the new arguments.\n\nFrom-SVN: r58187", "tree": {"sha": "5b673d80faa93e51f114a60dc517ca1f9603bf06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b673d80faa93e51f114a60dc517ca1f9603bf06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da6eec72f5a23bbee21efae3efd976283bf1c23c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6eec72f5a23bbee21efae3efd976283bf1c23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6eec72f5a23bbee21efae3efd976283bf1c23c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6eec72f5a23bbee21efae3efd976283bf1c23c/comments", "author": null, "committer": null, "parents": [{"sha": "ba0bb02d1d616cf5618877878a02442b71a97dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0bb02d1d616cf5618877878a02442b71a97dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0bb02d1d616cf5618877878a02442b71a97dec"}], "stats": {"total": 278, "additions": 149, "deletions": 129}, "files": [{"sha": "9b033e48fa38490aeebd33614fb0cc29a52e3faa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1,3 +1,20 @@\n+2002-10-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* real.c (real_to_decimal): Accept BUF_SIZE and CROP_TRAILING_ZEROS\n+\tas arguments.  Bound DIGITS by the available buffer size.\n+\t(real_to_hexadecimal): Likewise.\n+\t* real.h (real_to_decimal, real_to_hexadecimal): Update prototypes.\n+\t(REAL_VALUE_TO_DECIMAL): Remove.\n+\t* c-common.c, c-pretty-print.c, print-rtl.c, print-tree.c,\n+\tsched-vis.c, config/arc/arc.c, config/c4x/c4x.c, config/fr30/fr30.c,\n+\tconfig/i370/i370.h, config/i386/i386.c, config/i960/i960.c, \n+\tconfig/ip2k/ip2k.c, config/m32r/m32r.c, config/m68hc11/m68hc11.c,\n+\tconfig/m68k/hp320.h, config/m68k/m68k.h, config/m68k/sun2o4.h,\n+\tconfig/m68k/sun3.h, config/mips/mips.c, config/ns32k/ns32k.c, \n+\tconfig/pdp11/pdp11.h, config/vax/vax.h: Update all callers to\n+\tuse real_to_decimal directly, and with the proper arguments.\n+\t* doc/tm.texi (REAL_VALUE_TO_DECIMAL): Remove.\n+\n 2002-10-15  Jim Wilson  <wilson@redhat.com>\n \n \t* reload1.c (merge_assigned_reloads): After converting overlapping"}, {"sha": "75c29118851daef26a52ee62d4f22d7def5f9edc", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -5100,7 +5100,7 @@ builtin_define_with_hex_fp_value (macro, type, digits, hex_str, fp_suffix)\n      then print it back out as decimal.  */\n \n   real_from_string (&real, hex_str);\n-  real_to_decimal (dec_str, &real, digits);\n+  real_to_decimal (dec_str, &real, sizeof (dec_str), digits, 0);\n \n   sprintf (buf, \"%s=%s%s\", macro, dec_str, fp_suffix);\n   cpp_define (parse_in, buf);"}, {"sha": "377018ed21ee48199c1e9d9f900e12a9a19073ca", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -469,7 +469,8 @@ pp_c_real_literal (ppi, r)\n      c_pretty_printer ppi;\n      tree r;\n {\n-  REAL_VALUE_TO_DECIMAL (TREE_REAL_CST (r), pp_buffer (ppi)->digit_buffer, -1);\n+  real_to_decimal (pp_buffer (ppi)->digit_buffer, &TREE_REAL_CST (r),\n+\t\t   sizeof (pp_buffer (ppi)->digit_buffer), 0, 1);\n   pp_identifier (ppi, pp_buffer(ppi)->digit_buffer);\n }\n "}, {"sha": "ab7fe4280d2f6a79e006b0c68d05345745d823fd", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1741,14 +1741,13 @@ arc_print_operand (file, x, code)\n       return;\n     case 'A' :\n       {\n-\tREAL_VALUE_TYPE d;\n \tchar str[30];\n \n \tif (GET_CODE (x) != CONST_DOUBLE\n \t    || GET_MODE_CLASS (GET_MODE (x)) != MODE_FLOAT)\n \t  abort ();\n-\tREAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\tREAL_VALUE_TO_DECIMAL (d, str, -1);\n+\n+\treal_to_decimal (str, CONST_DOUBLE_REAL_VALUE (x), sizeof (str), 0, 1);\n \tfprintf (file, \"%s\", str);\n \treturn;\n       }"}, {"sha": "354ac76d1fad0e73c4c31a097c50b979e3137c83", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1960,10 +1960,9 @@ c4x_print_operand (file, op, letter)\n     case CONST_DOUBLE:\n       {\n \tchar str[64];\n-\tREAL_VALUE_TYPE r;\n \t\n-\tREAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-\tREAL_VALUE_TO_DECIMAL (r, str, -1);\n+\treal_to_decimal (str, CONST_DOUBLE_REAL_VALUE (op),\n+\t\t\t sizeof (str), 0, 1);\n \tfprintf (file, \"%s\", str);\n       }\n       break;"}, {"sha": "e163f92661435f83e3975c939e799562cd71cc89", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -553,11 +553,10 @@ fr30_print_operand (file, x, code)\n \toutput_operand_lossage (\"fr30_print_operand: invalid %%F code\");\n       else\n \t{\n-\t  REAL_VALUE_TYPE d;\n \t  char str[30];\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  REAL_VALUE_TO_DECIMAL (d, str, 8);\n+\t  real_to_decimal (str, CONST_DOUBLE_REAL_VALUE (x),\n+\t\t\t   sizeof (str), 0, 1);\n \t  fputs (str, file);\n \t}\n       return;"}, {"sha": "23cf036b0df017e74fa70cf604dd9a47a59734ac", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1371,21 +1371,21 @@ enum reg_class\n \telse\t\t\t\t\t\t\t\t\\\n \t  { \t\t\t\t\t\t\t\t\\\n             char buf[50];\t\t\t\t\t\t\\\n-            REAL_VALUE_TYPE rval;\t\t\t\t\t\\\n-            REAL_VALUE_FROM_CONST_DOUBLE(rval, XV);\t\t\t\\\n-            REAL_VALUE_TO_DECIMAL (rval, buf, -1);\t\t\t\\\n \t    if (GET_MODE (XV) == SFmode)\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tmvs_page_lit += 4;\t\t\t\t\t\\\n+\t\treal_to_decimal (buf, CONST_DOUBLE_REAL_VALUE (XV),\t\\\n+\t\t\t\t sizeof (buf), 0, 1);\t\t\t\\\n \t\tfprintf (FILE, \"=E'%s'\", buf);\t\t\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n-\t    else\t\t\t\t\t\t\t\\\n-\t    if (GET_MODE (XV) == DFmode)\t\t\t\t\\\n+\t    else if (GET_MODE (XV) == DFmode)\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tmvs_page_lit += 8;\t\t\t\t\t\\\n+\t\treal_to_decimal (buf, CONST_DOUBLE_REAL_VALUE (XV),\t\\\n+\t\t\t\t sizeof (buf), 0, 1);\t\t\t\\\n \t\tfprintf (FILE, \"=D'%s'\", buf);\t\t\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n-\t    else /* VOIDmode !?!? strange but true ...  */\t\t\\\n+\t    else /* VOIDmode */\t\t\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tmvs_page_lit += 8;\t\t\t\t\t\\\n \t\tfprintf (FILE, \"=XL8'%08X%08X'\", \t\t\t\\\n@@ -1665,21 +1665,21 @@ enum reg_class\n \telse\t\t\t\t\t\t\t\t\\\n \t  { \t\t\t\t\t\t\t\t\\\n             char buf[50];\t\t\t\t\t\t\\\n-            REAL_VALUE_TYPE rval;\t\t\t\t\t\\\n-            REAL_VALUE_FROM_CONST_DOUBLE(rval, XV);\t\t\t\\\n-            REAL_VALUE_TO_DECIMAL (rval, buf, -1);\t\t\t\\\n \t    if (GET_MODE (XV) == SFmode)\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tmvs_page_lit += 4;\t\t\t\t\t\\\n+\t\treal_to_decimal (buf, CONST_DOUBLE_REAL_VALUE (XV),\t\\\n+\t\t\t\t sizeof (buf), 0, 1);\t\t\t\\\n \t\tfprintf (FILE, \"=E'%s'\", buf);\t\t\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n-\t    else\t\t\t\t\t\t\t\\\n-\t    if (GET_MODE (XV) == DFmode)\t\t\t\t\\\n+\t    else if (GET_MODE (XV) == DFmode)\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tmvs_page_lit += 8;\t\t\t\t\t\\\n+\t\treal_to_decimal (buf, CONST_DOUBLE_REAL_VALUE (XV),\t\\\n+\t\t\t\t sizeof (buf), 0, 1);\t\t\t\\\n \t\tfprintf (FILE, \"=D'%s'\", buf);\t\t\t\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n-\t    else /* VOIDmode !?!? strange but true ...  */\t\t\\\n+\t    else /* VOIDmode */\t\t\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tmvs_page_lit += 8;\t\t\t\t\t\\\n \t\tfprintf (FILE, \"=XL8'%08X%08X'\", \t\t\t\\"}, {"sha": "2f06f0777d9bd994129f796c2587da642776fc52", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -6742,22 +6742,18 @@ print_operand (file, x, code)\n  /* These float cases don't actually occur as immediate operands.  */\n  else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == DFmode)\n     {\n-      REAL_VALUE_TYPE r;\n       char dstr[30];\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-      REAL_VALUE_TO_DECIMAL (r, dstr, -1);\n+      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (x), sizeof (dstr), 0, 1);\n       fprintf (file, \"%s\", dstr);\n     }\n \n   else if (GET_CODE (x) == CONST_DOUBLE\n \t   && (GET_MODE (x) == XFmode || GET_MODE (x) == TFmode))\n     {\n-      REAL_VALUE_TYPE r;\n       char dstr[30];\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-      REAL_VALUE_TO_DECIMAL (r, dstr, -1);\n+      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (x), sizeof (dstr), 0, 1);\n       fprintf (file, \"%s\", dstr);\n     }\n "}, {"sha": "4917ae229815f085fc8b1cda7e0d6a70515c5ea9", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1785,7 +1785,6 @@ i960_print_operand (file, x, code)\n     }\n   else if (rtxcode == CONST_DOUBLE)\n     {\n-      REAL_VALUE_TYPE d;\n       char dstr[30];\n \n       if (x == CONST0_RTX (GET_MODE (x)))\n@@ -1799,8 +1798,7 @@ i960_print_operand (file, x, code)\n \t  return;\n \t}\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-      REAL_VALUE_TO_DECIMAL (d, dstr, -1);\n+      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (x), sizeof (dstr), 0, 1);\n       fprintf (file, \"0f%s\", dstr);\n       return;\n     }"}, {"sha": "c0a643ae1d189ac1a68daa6d924ce3d337d2a7fd", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -3072,8 +3072,9 @@ asm_output_float (file, n)\n   char dstr[100];\n   \n   REAL_VALUE_TO_TARGET_SINGLE (n, val);\n-  REAL_VALUE_TO_DECIMAL (n, dstr, -1);\n-  fprintf (file, \"\\t.long 0x%08lx\\t/* %s */\\n\",val, dstr);\n+  real_to_decimal (dstr, &n, sizeof (dstr), 0, 1);\n+\n+  fprintf (file, \"\\t.long 0x%08lx\\t/* %s */\\n\", val, dstr);\n }\n \n /* Sets section name for declaration DECL.  */"}, {"sha": "5903277c8c2b529eeb2ec380de3c13f0050bbe5e", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -2311,14 +2311,13 @@ m32r_print_operand (file, x, code)\n \n     case 'A' :\n       {\n-\tREAL_VALUE_TYPE d;\n \tchar str[30];\n \n \tif (GET_CODE (x) != CONST_DOUBLE\n \t    || GET_MODE_CLASS (GET_MODE (x)) != MODE_FLOAT)\n \t  fatal_insn (\"bad insn for 'A'\", x);\n-\tREAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\tREAL_VALUE_TO_DECIMAL (d, str, -1);\n+\n+\treal_to_decimal (str, CONST_DOUBLE_REAL_VALUE (x), sizeof (str), 0, 1);\n \tfprintf (file, \"%s\", str);\n \treturn;\n       }"}, {"sha": "ac16b527a974783282f72d1843203126ba4ed82d", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -2260,11 +2260,10 @@ print_operand (file, op, letter)\n   else if (GET_CODE (op) == CONST_DOUBLE\n \t   && (GET_MODE (op) == DFmode || GET_MODE (op) == XFmode))\n     {\n-      REAL_VALUE_TYPE r;\n       char dstr[30];\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_DECIMAL (r, dstr, -1);\n+      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (op),\n+\t\t       sizeof (dstr), 0, 1);\n       asm_fprintf (file, \"%I0r%s\", dstr);\n     }\n   else"}, {"sha": "680aab4c2f686d84897eeb72a4be16c2037af0d3", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -300,7 +300,7 @@ do {\t\t\t\t\t\\\n       if (CODE == 'f')\t\t\t\t\t\t\\\n         {\t\t\t\t\t\t\t\\\n           char dstr[30];\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL (VALUE, dstr, 9);\t\t\\\n+      \t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 9, 0); \\\n           fprintf ((FILE), \"&0f%s\", dstr);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n@@ -317,7 +317,7 @@ do {\t\t\t\t\t\\\n #undef ASM_OUTPUT_DOUBLE_OPERAND\n #define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n  do { char dstr[30];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, dstr, -1);\t\t\t\t\\\n+      real_to_decimal (dstr, &(VALUE), sizeof (dstr), 0, 1);\t\t\\\n       fprintf (FILE, \"&0f%s\", dstr);\t\t\t\t\t\\\n     } while (0)\n \n@@ -326,7 +326,7 @@ do {\t\t\t\t\t\\\n #undef ASM_OUTPUT_LONG_DOUBLE_OPERAND\n #define ASM_OUTPUT_LONG_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\\\n  do { char dstr[30];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, dstr, -1);\t\t\t\t\\\n+      real_to_decimal (dstr, &(VALUE), sizeof (dstr), 0, 1);\t\t\\\n       fprintf (FILE, \"&0f%s\", dstr);\t\t\t\t\t\\\n     } while (0)\n \n@@ -351,15 +351,11 @@ do {\t\t\t\t\t\\\n     { REAL_VALUE_TYPE r;  long l;\t\t\t\t\t\\\n       REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n       PRINT_OPERAND_FLOAT (CODE, FILE, r, l); }\t\t\t\t\\\n-  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == DFmode)\t\\\n-    { REAL_VALUE_TYPE r;  char dstr[30];\t\t\t\t\\\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (r, dstr, -1);\t\t\t\t\\\n-      fprintf (FILE, \"&0f%s\", dstr); }\t\t\t\t\t\\\n-  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == XFmode)\t\\\n-    { REAL_VALUE_TYPE r;  char dstr[30];\t\t\t\t\\\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (r, dstr, -1);\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n+\t   && (GET_MODE (X) == DFmode || GET_MODE (X) == XFmode))\t\\\n+    { char dstr[30];\t\t\t\t\t\t\t\\\n+      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (X),\t\t\\\n+\t\t       sizeof (dstr), 0, 1);\t\t\t\t\\\n       fprintf (FILE, \"&0f%s\", dstr); }\t\t\t\t\t\\\n   else { putc ('&', FILE); output_addr_const (FILE, X); }}\n #endif"}, {"sha": "eff0ce2984ee729361663fee477ce8ae009a5876", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1823,7 +1823,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n       if (CODE == 'f')\t\t\t\t\t\t\\\n         {\t\t\t\t\t\t\t\\\n           char dstr[30];\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL (VALUE, dstr, 9);\t\t\\\n+      \t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 9, 0); \\\n           asm_fprintf ((FILE), \"%I0r%s\", dstr);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n@@ -1838,15 +1838,15 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    This macro is a 68k-specific macro.  */\n #define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n  do { char dstr[30];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, dstr, -1);\t\t\t\t\\\n+      real_to_decimal (dstr, &(VALUE), sizeof (dstr), 0, 1);\t\t\\\n       asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n     } while (0)\n \n /* Note, long double immediate operands are not actually\n    generated by m68k.md.  */\n #define ASM_OUTPUT_LONG_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\\\n  do { char dstr[30];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, dstr, -1);\t\t\t\t\\\n+      real_to_decimal (dstr, &(VALUE), sizeof (dstr), 0, 1);\t\t\\\n       asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n     } while (0)\n "}, {"sha": "0601bd07f84c949a4c9a3d9a959da6ecbe5b6520", "filename": "gcc/config/m68k/sun2o4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fsun2o4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fsun2o4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun2o4.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -121,7 +121,7 @@ Boston, MA 02111-1307, USA.  */\n         }\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n         { char dstr[30];\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), dstr, 9);\t\t\\\n+\t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 9, 0); \\\n           fprintf (FILE, \"#0r%s\", dstr);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n     } while (0)\n@@ -141,7 +141,7 @@ Boston, MA 02111-1307, USA.  */\n         }\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n         { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), dstr, -1);\t\t\t\\\n+\t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 0, 1);\t\\\n           fprintf (FILE, \"#0r%s\", dstr);\t\t\t\t\\\n         }\t\t\t\t\t\t\t\t\\\n     } while (0)"}, {"sha": "1d64599f332c5839c2448738e30a78451c12539e", "filename": "gcc/config/m68k/sun3.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fsun3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fm68k%2Fsun3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun3.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -208,7 +208,7 @@ Boston, MA 02111-1307, USA.  */\n         }\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n         { char dstr[30];\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), dstr, 9);\t\t\\\n+\t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 9, 0); \\\n           asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n     } while (0)\n@@ -228,7 +228,7 @@ Boston, MA 02111-1307, USA.  */\n         }\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n         { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), dstr, -1);\t\t\t\\\n+\t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 0, 1);\t\\\n           asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n         }\t\t\t\t\t\t\t\t\\\n     } while (0)"}, {"sha": "07cc657d9c04923e10c607fda4a652873bab3494", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -5910,12 +5910,10 @@ print_operand (file, op, letter)\n   else if (code == CONST_DOUBLE\n \t   && GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT)\n     {\n-      REAL_VALUE_TYPE d;\n       char s[60];\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n-      REAL_VALUE_TO_DECIMAL (d, s, -1);\n-      fprintf (file, s);\n+      real_to_decimal (s, CONST_DOUBLE_REAL_VALUE (op), sizeof (s), 0, 1);\n+      fputs (s, file);\n     }\n \n   else if (letter == 'x' && GET_CODE (op) == CONST_INT)"}, {"sha": "b94765bfb3a3e0a31fb917400bc5af0dc706be38", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1130,11 +1130,13 @@ print_operand (file, x, code)\n \t{ \n #ifdef SEQUENT_ASM\n \t  /* Sequent likes its floating point constants as integers */\n+\t  long l[2];\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n \t  fprintf (file, \"0Dx%08x%08x\",\n-\t\t   CONST_DOUBLE_HIGH (x), CONST_DOUBLE_LOW (x));\n+\t\t   l[!WORDS_BIG_ENDIAN], l[WORDS_BIG_ENDIAN]);\n #else\n \t  char s[30];\n-\t  REAL_VALUE_TO_DECIMAL (r, s, -1);\n+\t  real_to_decimal (s, &r, sizeof (s), 0, 1);\n #ifdef ENCORE_ASM\n \t  fprintf (file, \"0f%s\", s);\n #else\n@@ -1150,7 +1152,7 @@ print_operand (file, x, code)\n \t  fprintf (file, \"0Fx%08lx\", l);\n #else\n \t  char s[30];\n-\t  REAL_VALUE_TO_DECIMAL (r, s, -1);\n+\t  real_to_decimal (s, &r, sizeof (s), 0, 1);\n \t  fprintf (file, \"0f%s\", s);\n #endif\n \t}"}, {"sha": "f246aa47e5c1b196bd5f9ef423a9305570095985", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1149,10 +1149,8 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != SImode)\t\\\n-    { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n-      char buf[30];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (r, buf, -1);\t\t\t\t\\\n+    { char buf[30];\t\t\t\t\t\t\t\\\n+      real_to_decimal (buf, CONST_DOUBLE_REAL_VALUE (X), sizeof (buf), 0, 1); \\\n       fprintf (FILE, \"$0F%s\", buf); }\t\t\t\t\t\\\n   else { putc ('$', FILE); output_addr_const_pdp11 (FILE, X); }}\n \f"}, {"sha": "68d5fa395268ee4da2228a2333f69fe53786a922", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1227,14 +1227,14 @@ VAX operand formatting codes:\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == SFmode)\t\\\n-    { REAL_VALUE_TYPE r; char dstr[30];\t\t\t\t\t\\\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (r, dstr, -1);\t\t\t\t\\\n+    { char dstr[30];\t\t\t\t\t\t\t\\\n+      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (X),\t\t\\\n+\t\t       sizeof (dstr), 0, 1);\t\t\t\t\\\n       fprintf (FILE, \"$0f%s\", dstr); }\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == DFmode)\t\\\n-    { REAL_VALUE_TYPE r; char dstr[30];\t\t\t\t\t\\\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (r, dstr, -1);\t\t\t\t\\\n+    { char dstr[30];\t\t\t\t\t\t\t\\\n+      real_to_decimal (dstr, CONST_DOUBLE_REAL_VALUE (X),\t\t\\\n+\t\t       sizeof (dstr), 0, 1);\t\t\t\t\\\n       fprintf (FILE, \"$0%c%s\", ASM_DOUBLE_CHAR, dstr); }\t\t\\\n   else { putc ('$', FILE); output_addr_const (FILE, X); }}\n "}, {"sha": "a3ef2da426bd43496630723c99bad5e26abc2f64", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1,3 +1,8 @@\n+2002-10-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* error.c (dump_expr): Use real_to_decimal directly, and with\n+\tthe new arguments.\n+\n 2002-10-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (reshape_init): Fix typo."}, {"sha": "872a55677a212df0baf2841a20493a9ba4fdbffd", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1508,7 +1508,8 @@ dump_expr (t, flags)\n       break;\n \n     case REAL_CST:\n-      REAL_VALUE_TO_DECIMAL (TREE_REAL_CST (t), digit_buffer, -1);\n+      real_to_decimal (digit_buffer, &TREE_REAL_CST (t),\n+\t\t       sizeof (digit_buffer), 0, 1);\n       output_add_string (scratch_buffer, digit_buffer);\n       break;\n "}, {"sha": "c2dfd399c273ae29996686d37cbad3ad219b0945", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -6326,17 +6326,6 @@ host machine.\n The array element values are designed so that you can print them out\n using @code{fprintf} in the order they should appear in the target\n machine's memory.\n-\n-@item REAL_VALUE_TO_DECIMAL (@var{x}, @var{string}, @var{digits})\n-@findex REAL_VALUE_TO_DECIMAL\n-This macro converts @var{x}, of type @code{REAL_VALUE_TYPE}, to a\n-decimal number and stores it as a string into @var{string}.\n-You must pass, as @var{string}, the address of a long enough block\n-of space to hold the result.\n-\n-The argument @var{digits} is the number of decimal digits to print,\n-or @minus{}1 to indicate ``enough'', i.e. @code{DECIMAL_DIG} for\n-for the target.\n @end table\n \n @node Uninitialized Data"}, {"sha": "23f119dc34c146100f91eb3f0cfa9eb18a0ce5a8", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1,3 +1,8 @@\n+2002-10-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.h (ffetarget_print_real1, ffetarget_print_real2): Use \n+\treal_to_decimal directly, and with the new arguments.\n+\n 2002-09-23  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Make-lang.in (g77spec.o): Don't depend on f/version.h."}, {"sha": "b96504f46280600203c28bbaccbc6610753e05ce", "filename": "gcc/f/target.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Ff%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Ff%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1469,13 +1469,15 @@ void *ffetarget_memcpy_ (void *dst, void *src, size_t len);\n #define ffetarget_print_real1(f,l) \\\n   ({ REAL_VALUE_TYPE lr; \\\n      lr = ffetarget_cvt_r1_to_rv_ ((l)); \\\n-     REAL_VALUE_TO_DECIMAL (lr, ffetarget_string_, -1); \\\n+     real_to_decimal (ffetarget_string_, &lr \\\n+\t\t\t sizeof(ffetarget_string_), 0, 1); \\\n      fputs (ffetarget_string_, (f)); \\\n    })\n #define ffetarget_print_real2(f,l) \\\n   ({ REAL_VALUE_TYPE lr; \\\n      lr = ffetarget_cvt_r2_to_rv_ (&((l).v[0])); \\\n-     REAL_VALUE_TO_DECIMAL (lr, ffetarget_string_, -1); \\\n+     real_to_decimal (ffetarget_string_, &lr, \\\n+\t\t\t sizeof(ffetarget_string_), 0, 1); \\\n      fputs (ffetarget_string_, (f)); \\\n    })\n #define ffetarget_real1_one(res) ffetarget_cvt_rv_to_r1_ (dconst1, *(res))"}, {"sha": "c01f9185addb090ad1dd8235235f45ffbae6b41f", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -524,10 +524,12 @@ print_rtx (in_rtx)\n \t{\n \t  char s[60];\n \n-\t  real_to_decimal (s, CONST_DOUBLE_REAL_VALUE (in_rtx), -1);\n+\t  real_to_decimal (s, CONST_DOUBLE_REAL_VALUE (in_rtx),\n+\t\t\t   sizeof (s), 0, 1);\n \t  fprintf (outfile, \" %s\", s);\n \n-\t  real_to_hexadecimal (s, CONST_DOUBLE_REAL_VALUE (in_rtx), -1);\n+\t  real_to_hexadecimal (s, CONST_DOUBLE_REAL_VALUE (in_rtx),\n+\t\t\t       sizeof (s), 0, 1);\n \t  fprintf (outfile, \" [%s]\", s);\n \t}\n       break;"}, {"sha": "e7c16559e560c6801d5e6ffa86edb489e46cdbd8", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -131,9 +131,8 @@ print_node_brief (file, prefix, node, indent)\n \tfprintf (file, \" Nan\");\n       else\n \t{\n-\t  char string[100];\n-\n-\t  REAL_VALUE_TO_DECIMAL (d, string, -1);\n+\t  char string[60];\n+\t  real_to_decimal (string, &d, sizeof (string), 0, 1);\n \t  fprintf (file, \" %s\", string);\n \t}\n     }\n@@ -684,9 +683,8 @@ print_node (file, prefix, node, indent)\n \t      fprintf (file, \" Nan\");\n \t    else\n \t      {\n-\t\tchar string[100];\n-\n-\t\tREAL_VALUE_TO_DECIMAL (d, string, -1);\n+\t\tchar string[64];\n+\t\treal_to_decimal (string, &d, sizeof (string), 0, 1);\n \t\tfprintf (file, \" %s\", string);\n \t      }\n \t  }"}, {"sha": "0e776c752c1fd862876a4d585e206255ccd6a0ab", "filename": "gcc/real.c", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -1397,23 +1397,26 @@ real_to_integer2 (plow, phigh, r)\n }\n \n /* Render R as a decimal floating point constant.  Emit DIGITS significant\n-   digits in the result.  If DIGITS <= 0, choose the maximum for the\n-   representation.  If DIGITS < 0, strip trailing zeros.  */\n+   digits in the result, bounded by BUF_SIZE.  If DIGITS is 0, choose the\n+   maximum for the representation.  If CROP_TRAILING_ZEROS, strip trailing\n+   zeros.  */\n \n #define M_LOG10_2\t0.30102999566398119521\n \n void\n-real_to_decimal (str, r_orig, digits)\n+real_to_decimal (str, r_orig, buf_size, digits, crop_trailing_zeros)\n      char *str;\n      const REAL_VALUE_TYPE *r_orig;\n-     int digits;\n+     size_t buf_size, digits;\n+     int crop_trailing_zeros;\n {\n   REAL_VALUE_TYPE r;\n   const REAL_VALUE_TYPE *one, *ten;\n-  int dec_exp, max_digits, d, cmp_half;\n+  int dec_exp, d, cmp_half;\n+  size_t max_digits;\n   char *p, *first, *last;\n+  char exp_buf[16];\n   bool sign;\n-  bool crop_trailing_zeros;\n \n   r = *r_orig;\n   switch (r.class)\n@@ -1434,11 +1437,6 @@ real_to_decimal (str, r_orig, digits)\n       abort ();\n     }\n \n-  max_digits = SIGNIFICAND_BITS * M_LOG10_2;\n-  crop_trailing_zeros = digits < 0;\n-  if (digits <= 0 || digits > max_digits)\n-    digits = max_digits;\n-\n   one = real_digit (1);\n   ten = ten_to_ptwo (0);\n \n@@ -1468,6 +1466,21 @@ real_to_decimal (str, r_orig, digits)\n   if (sign)\n     *p++ = '-';\n   first = p++;\n+\n+  sprintf (exp_buf, \"e%+d\", dec_exp);\n+\n+  /* Bound the number of digits printed by the size of the representation.  */\n+  max_digits = SIGNIFICAND_BITS * M_LOG10_2;\n+  if (digits == 0 || digits > max_digits)\n+    digits = max_digits;\n+\n+  /* Bound the number of digits printed by the size of the output buffer.  */\n+  max_digits = buf_size - strlen (exp_buf) - sign - 1;\n+  if (max_digits > buf_size)\n+    abort ();\n+  if (digits > max_digits)\n+    digits = max_digits;\n+\n   while (1)\n     {\n       d = real_to_integer ((const REAL_VALUE_TYPE *) &r);\n@@ -1514,22 +1527,25 @@ real_to_decimal (str, r_orig, digits)\n     while (last > first + 3 && last[-1] == '0')\n       last--;\n \n-  sprintf (last, \"e%+d\", dec_exp);\n+  strcpy (last, exp_buf);\n }\n \n /* Render R as a hexadecimal floating point constant.  Emit DIGITS\n-   significant digits in the result.  If DIGITS <= 0, choose the maximum\n-   for the representation.  If DIGITS < 0, strip trailing zeros.  */\n+   significant digits in the result, bounded by BUF_SIZE.  If DIGITS is 0,\n+   choose the maximum for the representation.  If CROP_TRAILING_ZEROS,\n+   strip trailing zeros.  */\n \n void\n-real_to_hexadecimal (str, r, digits)\n+real_to_hexadecimal (str, r, buf_size, digits, crop_trailing_zeros)\n      char *str;\n      const REAL_VALUE_TYPE *r;\n-     int digits;\n+     size_t buf_size, digits;\n+     int crop_trailing_zeros;\n {\n   int i, j, exp = r->exp;\n   char *p, *first;\n-  bool crop_trailing_zeros;\n+  char exp_buf[16];\n+  size_t max_digits;\n \n   switch (r->class)\n     {\n@@ -1549,10 +1565,18 @@ real_to_hexadecimal (str, r, digits)\n       abort ();\n     }\n \n-  crop_trailing_zeros = digits < 0;\n-  if (digits <= 0)\n+  if (digits == 0)\n     digits = SIGNIFICAND_BITS / 4;\n \n+  /* Bound the number of digits printed by the size of the output buffer.  */\n+\n+  sprintf (exp_buf, \"p%+d\", exp);\n+  max_digits = buf_size - strlen (exp_buf) - r->sign - 4 - 1;\n+  if (max_digits > buf_size)\n+    abort ();\n+  if (digits > max_digits)\n+    digits = max_digits;\n+\n   p = str;\n   if (r->sign)\n     *p++ = '-';\n@@ -1572,7 +1596,7 @@ real_to_hexadecimal (str, r, digits)\n \n  out:\n   if (crop_trailing_zeros)\n-    while (p > first + 2 && p[-1] == '0')\n+    while (p > first + 1 && p[-1] == '0')\n       p--;\n \n   sprintf (p, \"p%+d\", exp);"}, {"sha": "2bdca76081fc1f8ff512f8ba5997758fbac8c684", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -176,11 +176,11 @@ extern bool exact_real_truncate PARAMS ((enum machine_mode,\n \n /* Render R as a decimal floating point constant.  */\n extern void real_to_decimal\tPARAMS ((char *, const REAL_VALUE_TYPE *,\n-\t\t\t\t\t int));\n+\t\t\t\t\t size_t, size_t, int));\n \n /* Render R as a hexadecimal floating point constant.  */\n extern void real_to_hexadecimal\tPARAMS ((char *, const REAL_VALUE_TYPE *,\n-\t\t\t\t\t int));\n+\t\t\t\t\t size_t, size_t, int));\n \n /* Render R as an integer.  */\n extern HOST_WIDE_INT real_to_integer PARAMS ((const REAL_VALUE_TYPE *));\n@@ -267,9 +267,6 @@ extern const struct real_format c4x_extended_format;\n #define REAL_VALUE_TO_TARGET_SINGLE(IN, OUT) \\\n   ((OUT) = real_to_target (NULL, &(IN), mode_for_size (32, MODE_FLOAT, 0)))\n \n-#define REAL_VALUE_TO_DECIMAL(r, s, dig) \\\n-  real_to_decimal (s, &(r), dig)\n-\n #define REAL_VALUE_FROM_INT(r, lo, hi, mode) \\\n   real_from_integer (&(r), mode, lo, hi, 0)\n "}, {"sha": "237d4460d51a43a3d0080a2f64d168c23425cda1", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da6eec72f5a23bbee21efae3efd976283bf1c23c/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=da6eec72f5a23bbee21efae3efd976283bf1c23c", "patch": "@@ -562,12 +562,7 @@ print_value (buf, x, verbose)\n       break;\n     case CONST_DOUBLE:\n       if (FLOAT_MODE_P (GET_MODE (x)))\n-\t{\n-\t  REAL_VALUE_TYPE r;\n-\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\t  REAL_VALUE_TO_DECIMAL(r, t, 6);\n-\t}\n+\treal_to_decimal (t, CONST_DOUBLE_REAL_VALUE (x), sizeof (t), 0, 1);\n       else\n \tsprintf (t, \"<0x%lx,0x%lx>\", (long) XWINT (x, 2), (long) XWINT (x, 3));\n       cur = safe_concat (buf, cur, t);"}]}