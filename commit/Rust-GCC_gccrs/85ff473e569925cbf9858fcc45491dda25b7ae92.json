{"sha": "85ff473e569925cbf9858fcc45491dda25b7ae92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmZjQ3M2U1Njk5MjVjYmY5ODU4ZmNjNDU0OTFkZGEyNWI3YWU5Mg==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-20T06:45:28Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-01-20T06:45:28Z"}, "message": "(PREFERRED_RELOAD_CLASS): Narrow ALL_REGS to GENERAL_REGS.\n\n(PREFERRED_OUTPUT_RELOAD_CLASS): New macro.  Narrow ALL_REGS to GENERAL_REGS.\n(SECONDARY_MEMORY_NEEDED): New macro.\n\nFrom-SVN: r3295", "tree": {"sha": "00f32b9c341067c41c7a3f71b3a10c794acf726b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00f32b9c341067c41c7a3f71b3a10c794acf726b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85ff473e569925cbf9858fcc45491dda25b7ae92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ff473e569925cbf9858fcc45491dda25b7ae92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ff473e569925cbf9858fcc45491dda25b7ae92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ff473e569925cbf9858fcc45491dda25b7ae92/comments", "author": null, "committer": null, "parents": [{"sha": "eca315011760544a68bf639fed765e8ecb81f604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca315011760544a68bf639fed765e8ecb81f604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca315011760544a68bf639fed765e8ecb81f604"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "c5383accdc3a350491e42d339de16ba557b67a78", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ff473e569925cbf9858fcc45491dda25b7ae92/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ff473e569925cbf9858fcc45491dda25b7ae92/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=85ff473e569925cbf9858fcc45491dda25b7ae92", "patch": "@@ -524,19 +524,29 @@ extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n    reloaded into floating registers (since no move-insn can do that)\n    and we ensure that QImodes aren't reloaded into the esi or edi reg.  */\n \n-/* Don't put float CONST_DOUBLE into any regs.\n+/* Don't put float CONST_DOUBLE into fp regs.\n    QImode must go into class Q_REGS.\n    MODE_INT must not go into FLOAT_REGS. */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\\\n-  (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode\t\t\\\n-   ? NO_REGS\t\t\t\t\t\t\t\t\\\n-   : GET_MODE (X) == QImode\t\t\t\t\t\t\\\n-   ? (! reg_class_subset_p ((CLASS), Q_REGS) ? Q_REGS : (CLASS))\t\\\n+  (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode ? NO_REGS\t\\\n+   : GET_MODE (X) == QImode && ! reg_class_subset_p (CLASS, Q_REGS) ? Q_REGS \\\n    : ((CLASS) == FLOAT_REGS\t\t\t\t\t\t\\\n       && (GET_MODE (X) == VOIDmode\t\t\t\t\t\\\n-\t  || GET_MODE_CLASS (GET_MODE (X)) == MODE_INT) ?\t\t\\\n-      GENERAL_REGS : (CLASS)))\n+\t  || GET_MODE_CLASS (GET_MODE (X)) == MODE_INT)) ? GENERAL_REGS\t\\\n+   : (CLASS) == ALL_REGS ? GENERAL_REGS\t\t\t\t\t\\\n+   : (CLASS))\n+\n+#define PREFERRED_OUTPUT_RELOAD_CLASS(X,CLASS)\t\\\n+  ((CLASS) == ALL_REGS ? GENERAL_REGS\t\t\\\n+   : (CLASS))\n+\n+/* If we are copying between general and FP registers, we need a memory\n+   location.  */\n+\n+#define SECONDARY_MEMORY_NEEDED(CLASS1,CLASS2,MODE) \\\n+  (((CLASS1) == FLOAT_REGS && (CLASS2) != FLOAT_REGS)\t\\\n+   || ((CLASS2) == FLOAT_REGS && (CLASS1) != FLOAT_REGS))\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */"}]}