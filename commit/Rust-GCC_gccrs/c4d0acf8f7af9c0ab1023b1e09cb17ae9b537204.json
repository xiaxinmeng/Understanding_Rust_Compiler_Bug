{"sha": "c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkMGFjZjhmN2FmOWMwYWIxMDIzYjFlMDljYjE3YWU5YjUzNzIwNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-07-16T13:33:23Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-07-16T13:33:23Z"}, "message": "Revert one more symbol_summary::get to ::get_create (PR ipa/86529).\n\n2018-07-16  Martin Liska  <mliska@suse.cz>\n\n        PR ipa/86529\n\t* ipa-pure-const.c (malloc_candidate_p): Revert ::get\n        to ::get_create.\n2018-07-16  Martin Liska  <mliska@suse.cz>\n\n        PR ipa/86529\n\t* g++.dg/ipa/pr86529.C: New test.\n\nFrom-SVN: r262695", "tree": {"sha": "6bafd6ebfd99c088158e6e7277473321f1f32f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bafd6ebfd99c088158e6e7277473321f1f32f5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "325a4c6e1100ef4cf88dc007c64d20fe9b9a6c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325a4c6e1100ef4cf88dc007c64d20fe9b9a6c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325a4c6e1100ef4cf88dc007c64d20fe9b9a6c2c"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "41ea59b7aef9bca6426223cf9693c437bfde8eb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "patch": "@@ -1,3 +1,9 @@\n+2018-07-16  Martin Liska  <mliska@suse.cz>\n+\n+        PR ipa/86529\n+\t* ipa-pure-const.c (malloc_candidate_p): Revert ::get\n+        to ::get_create.\n+\n 2017-07-16  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arcHS.md: Update ARCHS scheduling rules."}, {"sha": "a9a8863d907627908f37b5c5de3961fc14e3f10f", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "patch": "@@ -958,8 +958,7 @@ malloc_candidate_p (function *fun, bool ipa)\n \t      cgraph_edge *cs = node->get_edge (call_stmt);\n \t      if (cs)\n \t\t{\n-\t\t  ipa_call_summary *es = ipa_call_summaries->get (cs);\n-\t\t  gcc_assert (es);\n+\t\t  ipa_call_summary *es = ipa_call_summaries->get_create (cs);\n \t\t  es->is_return_callee_uncaptured = true;\n \t\t}\n \t    }"}, {"sha": "a4053c9b12720d8d722d1eabf109cb9a11f5a421", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "patch": "@@ -1,3 +1,8 @@\n+2018-07-16  Martin Liska  <mliska@suse.cz>\n+\n+        PR ipa/86529\n+\t* g++.dg/ipa/pr86529.C: New test.\n+\n 2018-07-16  Tom de Vries  <tdevries@suse.de>\n \n \tPR debug/86455"}, {"sha": "d753295b0a442d2e8703ef75e562ce76fc71af4a", "filename": "gcc/testsuite/g++.dg/ipa/pr86529.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr86529.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr86529.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr86529.C?ref=c4d0acf8f7af9c0ab1023b1e09cb17ae9b537204", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-fipa-pure-const -std=c++11\" }\n+\n+namespace std {\n+class type_info {\n+public:\n+  bool operator==(type_info);\n+};\n+class c {\n+public:\n+  c(int) {}\n+  type_info b;\n+  virtual void *d() {\n+    if (b == typeid(int))\n+      return e();\n+    return nullptr;\n+  }\n+  int *e() noexcept;\n+};\n+class h {\n+public:\n+  template <typename g, typename f> h(g, f j) { new c(j); }\n+};\n+class k {\n+protected:\n+  int n;\n+  k() : i(0, n) {}\n+  h i;\n+};\n+class F : k {\n+  public:\n+  F(int, int) {}\n+  template <typename, typename f, typename...> friend F l(const f &);\n+};\n+template <typename, typename f, typename...> F l(const f &p1) { F x(int(), p1); return x; }\n+template <typename> F m() { l<int>(int()); return F(0, 0); }\n+class D {\n+  F p;\n+\n+public:\n+  D() : p(m<int>()) {}\n+};\n+} // namespace std\n+std::D a;"}]}