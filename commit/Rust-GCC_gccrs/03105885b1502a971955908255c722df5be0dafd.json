{"sha": "03105885b1502a971955908255c722df5be0dafd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxMDU4ODViMTUwMmE5NzE5NTU5MDgyNTVjNzIyZGY1YmUwZGFmZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-20T07:53:42Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-20T07:53:42Z"}, "message": "Add vertical spacing in order to separate functions.\n\n2019-05-20  Martin Liska  <mliska@suse.cz>\n\n\t* profile-count.c: Add vertical spacing in order\n\tto separate functions.\n\t* profile-count.h: Likewise.\n\nFrom-SVN: r271399", "tree": {"sha": "2e0eebdc31b65c1ebd3a2d0d90f42974fda5f8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e0eebdc31b65c1ebd3a2d0d90f42974fda5f8bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03105885b1502a971955908255c722df5be0dafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03105885b1502a971955908255c722df5be0dafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03105885b1502a971955908255c722df5be0dafd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03105885b1502a971955908255c722df5be0dafd/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4c3f08dadad805010c2411e79d80d023693a1b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c3f08dadad805010c2411e79d80d023693a1b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c3f08dadad805010c2411e79d80d023693a1b0"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "a4f0e2d0ffaf45cd23a7b7a2903bca930d120c88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03105885b1502a971955908255c722df5be0dafd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03105885b1502a971955908255c722df5be0dafd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03105885b1502a971955908255c722df5be0dafd", "patch": "@@ -1,3 +1,9 @@\n+2019-05-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile-count.c: Add vertical spacing in order\n+\tto separate functions.\n+\t* profile-count.h: Likewise.\n+\n 2019-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* profile-count.h: Do not use full qualified"}, {"sha": "2b774a77802507d153b1b26fea00bdc34ac4e556", "filename": "gcc/profile-count.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03105885b1502a971955908255c722df5be0dafd/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03105885b1502a971955908255c722df5be0dafd/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=03105885b1502a971955908255c722df5be0dafd", "patch": "@@ -353,6 +353,7 @@ profile_count::adjust_for_ipa_scaling (profile_count *num,\n    if it is nonzero, not changing anything if IPA is uninitialized\n    and if IPA is zero, turning THIS into corresponding local profile with\n    global0.  */\n+\n profile_count\n profile_count::combine_with_ipa_count (profile_count ipa)\n {\n@@ -369,6 +370,7 @@ profile_count::combine_with_ipa_count (profile_count ipa)\n /* The profiling runtime uses gcov_type, which is usually 64bit integer.\n    Conversions back and forth are used to read the coverage and get it\n    into internal representation.  */\n+\n profile_count\n profile_count::from_gcov_type (gcov_type v, profile_quality quality)\n   {\n@@ -383,7 +385,6 @@ profile_count::from_gcov_type (gcov_type v, profile_quality quality)\n     return ret;\n   }\n \n-\n /* COUNT1 times event happens with *THIS probability, COUNT2 times OTHER\n    happens with COUNT2 probablity. Return probablity that either *THIS or\n    OTHER happens.  */"}, {"sha": "cbab5965ed635604a425edffe6a3adf663a81b74", "filename": "gcc/profile-count.h", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03105885b1502a971955908255c722df5be0dafd/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03105885b1502a971955908255c722df5be0dafd/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=03105885b1502a971955908255c722df5be0dafd", "patch": "@@ -29,11 +29,13 @@ class profile_count;\n enum profile_quality {\n   /* Uninitialized value.  */\n   UNINITIALIZED_PROFILE,\n+\n   /* Profile is based on static branch prediction heuristics and may\n      or may not match reality.  It is local to function and cannot be compared\n      inter-procedurally.  Never used by probabilities (they are always local).\n    */\n   GUESSED_LOCAL,\n+\n   /* Profile was read by feedback and was 0, we used local heuristics to guess\n      better.  This is the case of functions not run in profile fedback.\n      Never used by probabilities.  */\n@@ -48,12 +50,15 @@ enum profile_quality {\n       with feedback and propagated from that).\n      Never used by probablities.  */\n   GUESSED,\n+\n   /* Profile was determined by autofdo.  */\n   AFDO,\n+\n   /* Profile was originally based on feedback but it was adjusted\n      by code duplicating optimization.  It may not precisely reflect the\n      particular code path.  */\n   ADJUSTED,\n+\n   /* Profile was read from profile feedback or determined by accurate static\n      method.  */\n   PRECISE\n@@ -167,53 +172,62 @@ class GTY((user)) profile_probability\n       ret.m_quality = PRECISE;\n       return ret;\n     }\n+\n   static profile_probability guessed_never ()\n     {\n       profile_probability ret;\n       ret.m_val = 0;\n       ret.m_quality = GUESSED;\n       return ret;\n     }\n+\n   static profile_probability very_unlikely ()\n     {\n       /* Be consistent with PROB_VERY_UNLIKELY in predict.h.  */\n       profile_probability r = guessed_always ().apply_scale (1, 2000);\n       r.m_val--;\n       return r;\n     }\n+\n   static profile_probability unlikely ()\n     {\n       /* Be consistent with PROB_VERY_LIKELY in predict.h.  */\n       profile_probability r = guessed_always ().apply_scale (1, 5);\n       r.m_val--;\n       return r;\n     }\n+\n   static profile_probability even ()\n     {\n       return guessed_always ().apply_scale (1, 2);\n     }\n+\n   static profile_probability very_likely ()\n     {\n       return always () - very_unlikely ();\n     }\n+\n   static profile_probability likely ()\n     {\n       return always () - unlikely ();\n     }\n+\n   static profile_probability guessed_always ()\n     {\n       profile_probability ret;\n       ret.m_val = max_probability;\n       ret.m_quality = GUESSED;\n       return ret;\n     }\n+\n   static profile_probability always ()\n     {\n       profile_probability ret;\n       ret.m_val = max_probability;\n       ret.m_quality = PRECISE;\n       return ret;\n     }\n+\n   /* Probabilities which has not been initialized. Either because\n      initialization did not happen yet or because profile is unknown.  */\n   static profile_probability uninitialized ()\n@@ -224,12 +238,12 @@ class GTY((user)) profile_probability\n       return c;\n     }\n \n-\n   /* Return true if value has been initialized.  */\n   bool initialized_p () const\n     {\n       return m_val != uninitialized_probability;\n     }\n+\n   /* Return true if value can be trusted.  */\n   bool reliable_p () const\n     {\n@@ -246,6 +260,7 @@ class GTY((user)) profile_probability\n       ret.m_quality = GUESSED;\n       return ret;\n     }\n+\n   int to_reg_br_prob_base () const\n     {\n       gcc_checking_assert (initialized_p ());\n@@ -260,6 +275,7 @@ class GTY((user)) profile_probability\n       ret.m_quality = (enum profile_quality)(v & 7);\n       return ret;\n     }\n+\n   int to_reg_br_prob_note () const\n     {\n       gcc_checking_assert (initialized_p ());\n@@ -292,6 +308,7 @@ class GTY((user)) profile_probability\n     {\n       return m_val == other.m_val && m_quality == other.m_quality;\n     }\n+\n   profile_probability operator+ (const profile_probability &other) const\n     {\n       if (other == never ())\n@@ -306,6 +323,7 @@ class GTY((user)) profile_probability\n       ret.m_quality = MIN (m_quality, other.m_quality);\n       return ret;\n     }\n+\n   profile_probability &operator+= (const profile_probability &other)\n     {\n       if (other == never ())\n@@ -324,6 +342,7 @@ class GTY((user)) profile_probability\n \t}\n       return *this;\n     }\n+\n   profile_probability operator- (const profile_probability &other) const\n     {\n       if (*this == never ()\n@@ -336,6 +355,7 @@ class GTY((user)) profile_probability\n       ret.m_quality = MIN (m_quality, other.m_quality);\n       return ret;\n     }\n+\n   profile_probability &operator-= (const profile_probability &other)\n     {\n       if (*this == never ()\n@@ -350,6 +370,7 @@ class GTY((user)) profile_probability\n \t}\n       return *this;\n     }\n+\n   profile_probability operator* (const profile_probability &other) const\n     {\n       if (*this == never ()\n@@ -362,6 +383,7 @@ class GTY((user)) profile_probability\n       ret.m_quality = MIN (MIN (m_quality, other.m_quality), ADJUSTED);\n       return ret;\n     }\n+\n   profile_probability &operator*= (const profile_probability &other)\n     {\n       if (*this == never ()\n@@ -376,6 +398,7 @@ class GTY((user)) profile_probability\n \t}\n       return *this;\n     }\n+\n   profile_probability operator/ (const profile_probability &other) const\n     {\n       if (*this == never ())\n@@ -403,6 +426,7 @@ class GTY((user)) profile_probability\n       ret.m_quality = MIN (MIN (m_quality, other.m_quality), ADJUSTED);\n       return ret;\n     }\n+\n   profile_probability &operator/= (const profile_probability &other)\n     {\n       if (*this == never ())\n@@ -522,7 +546,6 @@ class GTY((user)) profile_probability\n      noreturn heuristic that is only one giving probability over 99% or bellow\n      1%.  In future we might want to propagate reliability information across the\n      CFG if we find this information useful on multiple places.   */\n-\n   bool probably_reliable_p () const\n     {\n       if (m_quality >= ADJUSTED)\n@@ -550,6 +573,7 @@ class GTY((user)) profile_probability\n     {\n       return initialized_p () && other.initialized_p () && m_val < other.m_val;\n     }\n+\n   bool operator> (const profile_probability &other) const\n     {\n       return initialized_p () && other.initialized_p () && m_val > other.m_val;\n@@ -559,6 +583,7 @@ class GTY((user)) profile_probability\n     {\n       return initialized_p () && other.initialized_p () && m_val <= other.m_val;\n     }\n+\n   bool operator>= (const profile_probability &other) const\n     {\n       return initialized_p () && other.initialized_p () && m_val >= other.m_val;\n@@ -578,8 +603,10 @@ class GTY((user)) profile_probability\n \n   /* Return true if THIS is known to differ significantly from OTHER.  */\n   bool differs_from_p (profile_probability other) const;\n+\n   /* Return if difference is greater than 50%.  */\n   bool differs_lot_from_p (profile_probability other) const;\n+\n   /* COUNT1 times event happens with *THIS probability, COUNT2 times OTHER\n      happens with COUNT2 probablity. Return probablity that either *THIS or\n      OTHER happens.  */\n@@ -692,24 +719,28 @@ class GTY(()) profile_count\n     {\n       return from_gcov_type (0);\n     }\n+\n   static profile_count adjusted_zero ()\n     {\n       profile_count c;\n       c.m_val = 0;\n       c.m_quality = ADJUSTED;\n       return c;\n     }\n+\n   static profile_count guessed_zero ()\n     {\n       profile_count c;\n       c.m_val = 0;\n       c.m_quality = GUESSED;\n       return c;\n     }\n+\n   static profile_count one ()\n     {\n       return from_gcov_type (1);\n     }\n+\n   /* Value of counters which has not been initialized. Either because\n      initialization did not happen yet or because profile is unknown.  */\n   static profile_count uninitialized ()\n@@ -732,16 +763,19 @@ class GTY(()) profile_count\n     {\n       return m_val != uninitialized_count;\n     }\n+\n   /* Return true if value can be trusted.  */\n   bool reliable_p () const\n     {\n       return m_quality >= ADJUSTED;\n     }\n+\n   /* Return true if vlaue can be operated inter-procedurally.  */\n   bool ipa_p () const\n     {\n       return !initialized_p () || m_quality >= GUESSED_GLOBAL0;\n     }\n+\n   /* Return true if quality of profile is precise.  */\n   bool precise_p () const\n     {\n@@ -784,6 +818,7 @@ class GTY(()) profile_count\n     {\n       return m_val == other.m_val && m_quality == other.m_quality;\n     }\n+\n   profile_count operator+ (const profile_count &other) const\n     {\n       if (other == zero ())\n@@ -799,6 +834,7 @@ class GTY(()) profile_count\n       ret.m_quality = MIN (m_quality, other.m_quality);\n       return ret;\n     }\n+\n   profile_count &operator+= (const profile_count &other)\n     {\n       if (other == zero ())\n@@ -818,6 +854,7 @@ class GTY(()) profile_count\n \t}\n       return *this;\n     }\n+\n   profile_count operator- (const profile_count &other) const\n     {\n       if (*this == zero () || other == zero ())\n@@ -830,6 +867,7 @@ class GTY(()) profile_count\n       ret.m_quality = MIN (m_quality, other.m_quality);\n       return ret;\n     }\n+\n   profile_count &operator-= (const profile_count &other)\n     {\n       if (*this == zero () || other == zero ())\n@@ -865,6 +903,7 @@ class GTY(()) profile_count\n       gcc_checking_assert (compatible_p (other));\n       return m_val < other.m_val;\n     }\n+\n   bool operator> (const profile_count &other) const\n     {\n       if (!initialized_p () || !other.initialized_p ())\n@@ -876,12 +915,14 @@ class GTY(()) profile_count\n       gcc_checking_assert (compatible_p (other));\n       return initialized_p () && other.initialized_p () && m_val > other.m_val;\n     }\n+\n   bool operator< (const gcov_type other) const\n     {\n       gcc_checking_assert (ipa_p ());\n       gcc_checking_assert (other >= 0);\n       return initialized_p () && m_val < (uint64_t) other;\n     }\n+\n   bool operator> (const gcov_type other) const\n     {\n       gcc_checking_assert (ipa_p ());\n@@ -900,6 +941,7 @@ class GTY(()) profile_count\n       gcc_checking_assert (compatible_p (other));\n       return m_val <= other.m_val;\n     }\n+\n   bool operator>= (const profile_count &other) const\n     {\n       if (!initialized_p () || !other.initialized_p ())\n@@ -911,18 +953,21 @@ class GTY(()) profile_count\n       gcc_checking_assert (compatible_p (other));\n       return m_val >= other.m_val;\n     }\n+\n   bool operator<= (const gcov_type other) const\n     {\n       gcc_checking_assert (ipa_p ());\n       gcc_checking_assert (other >= 0);\n       return initialized_p () && m_val <= (uint64_t) other;\n     }\n+\n   bool operator>= (const gcov_type other) const\n     {\n       gcc_checking_assert (ipa_p ());\n       gcc_checking_assert (other >= 0);\n       return initialized_p () && m_val >= (uint64_t) other;\n     }\n+\n   /* Return true when value is not zero and can be used for scaling. \n      This is different from *this > 0 because that requires counter to\n      be IPA.  */\n@@ -994,6 +1039,7 @@ class GTY(()) profile_count\n       ret.m_quality = MIN (m_quality, prob.m_quality);\n       return ret;\n     }\n+\n   /* Return *THIS * NUM / DEN.  */\n   profile_count apply_scale (int64_t num, int64_t den) const\n     {\n@@ -1010,6 +1056,7 @@ class GTY(()) profile_count\n       ret.m_quality = MIN (m_quality, ADJUSTED);\n       return ret;\n     }\n+\n   profile_count apply_scale (profile_count num, profile_count den) const\n     {\n       if (*this == zero ())"}]}