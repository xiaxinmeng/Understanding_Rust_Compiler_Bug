{"sha": "93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjOGE2ZTZlNWY1ZDhmZTlkMzM1ZTk3Y2NkNWM1MzVlODZjNDNhZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-31T19:06:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-31T19:06:49Z"}, "message": "Add -mabi=n32 support.\n\n(ABI_64BIT): Delete.\n(TARGET_LONG64, CPP_SPEC, STACK_BOUNDARY, MIPS_STACK_ALIGN,\nGP_ARG_LAST, FP_ARG_LAST, SUBTARGET_CONDITIONAL_REGISTER_USAGE,\nMAX_ARGS_IN_REGISTER, FUNCTION_ARG_PADDING, RETURN_IN_MEMORY,\nSETUP_INCOMING_VARARGS): Modify.\n(REG_PARM_STACK_SPACE): Ifdef out.\n(TARGET_DEFAULT, SUBTARGET_TARGET_OPTIONS): Define.\n\nFrom-SVN: r12135", "tree": {"sha": "77869aa47001ab126a0b2304036b15ed13741f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77869aa47001ab126a0b2304036b15ed13741f6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae/comments", "author": null, "committer": null, "parents": [{"sha": "bfd472b2d13bf75b164e6bb63ca0f4e63abacede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd472b2d13bf75b164e6bb63ca0f4e63abacede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd472b2d13bf75b164e6bb63ca0f4e63abacede"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "5a26c571337802be16cbfbaffe1e12166f5cd89d", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 59, "deletions": 32, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=93c8a6e6e5f5d8fe9d335e97ccd5c535e86c43ae", "patch": "@@ -21,12 +21,16 @@ Boston, MA 02111-1307, USA.  */\n /* Macros to implement the 64 bit ABI.  This file is meant to be included\n    after mips.h.  */\n \n-#undef ABI_64BIT\n-#define ABI_64BIT 1\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT MASK_ABICALLS|MASK_FLOAT64|MASK_64BIT\n \n /* For Irix 6, -mips3 implies TARGET_LONG64.  */\n #undef TARGET_LONG64\n-#define TARGET_LONG64\t\t(target_flags & MASK_64BIT)\n+#define TARGET_LONG64\t\t(mips_abi == ABI_64)\n+\n+#undef SUBTARGET_TARGET_OPTIONS\n+#define SUBTARGET_TARGET_OPTIONS\\\n+  { \"abi=\", &mips_abi_string\t},\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n@@ -35,6 +39,13 @@ Boston, MA 02111-1307, USA.  */\n   -Asystem(unix) -Asystem(svr4) -Acpu(mips) -Amachine(sgi)\"\n \n /* We must make -mips3 do what -mlong64 used to do.  */\n+/* ??? If no mipsX option given, but a mabi=X option is, then should set\n+   _MIPS_ISA based on the mabi=X option.  */\n+/* ??? If no mabi=X option give, but a mipsX option is, then should set\n+   _MIPS_SIM based on the mipsX option.  */\n+/* ??? Same for _MIPS_SZINT.  */\n+/* ??? Same for _MIPS_SZPTR.  */\n+/* ??? Same for __SIZE_TYPE and __PTRDIFF_TYPE.  */\n #undef CPP_SPEC\n #define CPP_SPEC \"\\\n %{!ansi:-D__EXTENSIONS__ -D_SGI_SOURCE -D_LONGLONG} \\\n@@ -51,24 +62,24 @@ Boston, MA 02111-1307, USA.  */\n %{mips3: -D_MIPS_ISA=_MIPS_ISA_MIPS3} \\\n %{mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4} \\\n %{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4}}}} \\\n-%{mips1: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n-%{mips2: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n-%{mips3: -D_ABI64=3 -D_MIPS_SIM=_ABI64}\t\\\n-%{mips4: -D_ABI64=3 -D_MIPS_SIM=_ABI64}\t\\\n-%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_ABI64=3 -D_MIPS_SIM=_ABI64}}}}\t\\\n+%{mabi=32: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n+%{mabi=n32: -D_ABIN32=2 -D_MIPS_SIM=_ABIN32} \\\n+%{mabi=64: -D_ABI64=3 -D_MIPS_SIM=_ABI64} \\\n+%{!mabi=32: %{!mabi=n32: %{!mabi=64: -D_ABI64=3 -D_MIPS_SIM=_ABI64}}}\t\\\n %{!mint64: -D_MIPS_SZINT=32}%{mint64: -D_MIPS_SZINT=64} \\\n-%{mips1: -D_MIPS_SZLONG=32}%{mips2: -D_MIPS_SZLONG=32}  \\\n-%{!mips1:%{!mips2: -D_MIPS_SZLONG=64}}\t\t\t\\\n-%{mips1: -D_MIPS_SZPTR=32}%{mips2: -D_MIPS_SZPTR=32}\t\\\n-%{mips3: -D_MIPS_SZPTR=64}%{mips4: -D_MIPS_SZPTR=64}\t\\\n-%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_SZPTR=64}}}}\t\\\n+%{mabi=32: -D_MIPS_SZLONG=32}%{mabi=n32: -D_MIPS_SZLONG=32} \\\n+%{!mabi=32: %{!mabi=n32: -D_MIPS_SZLONG=64}} \\\n+%{mabi=32: -D_MIPS_SZPTR=32}%{mabi=n32: -D_MIPS_SZPTR=32} \\\n+%{!mabi=32: %{!mabi=n32: -D_MIPS_SZPTR=64}} \\\n %{!mips1:%{!mips2: -D_COMPILER_VERSION=601}}\t\t\\\n-%{mips1: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mips2: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{!mips1:%{!mips2: -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}} \\\n-%{mips3:-U__mips -D__mips=3 -D__mips64} \\\n-%{!mips1:%{!mips2:-U__mips -D__mips=4 -D__mips64}} \\\n-%{mgp32:-U__mips64} %{mgp64:-D__mips64} \\\n+%{mabi=32: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n+%{mabi=n32: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n+%{!mabi=32:%{!mabi=n32: -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}} \\\n+%{mips3: -U__mips -D__mips=3} \\\n+%{!mips1:%{!mips2: -U__mips -D__mips=4}} \\\n+%{mgp32: -U__mips64}%{mgp64: -D__mips64} \\\n+%{mabi=32: -U__mips64}%{mabi=n32: -D__mips64} \\\n+%{!mabi=32: %{!mabi=n32: -D__mips64}} \\\n %{msingle-float:%{!msoft-float:-D__mips_single_float}} \\\n %{m4650:%{!msoft-float:-D__mips_single_float}} \\\n %{EB:-UMIPSEL -U_MIPSEL -U__MIPSEL -U__MIPSEL__ -D_MIPSEB -D__MIPSEB -D__MIPSEB__ %{!ansi:-DMIPSEB}} \\\n@@ -78,36 +89,50 @@ Boston, MA 02111-1307, USA.  */\n #define EMPTY_FIELD_BOUNDARY\t32\n \n #undef STACK_BOUNDARY\n-#define STACK_BOUNDARY 128\n+#define STACK_BOUNDARY (mips_abi == ABI_32 ? 64 : 128)\n \n #undef MIPS_STACK_ALIGN\n-#define MIPS_STACK_ALIGN(LOC) (((LOC)+15) & ~15)\n+#define MIPS_STACK_ALIGN(LOC) \\\n+  (mips_abi == ABI_32 ? ((LOC)+7) & ~7 : ((LOC)+15) & ~15)\n \n #undef GP_ARG_LAST\n-#define GP_ARG_LAST  (mips_isa < 3 ? GP_REG_FIRST + 7 : GP_REG_FIRST + 11)\n+#define GP_ARG_LAST  (mips_abi == ABI_32 ? GP_REG_FIRST + 7 : GP_REG_FIRST + 11)\n #undef FP_ARG_LAST\n-#define FP_ARG_LAST  (mips_isa < 3 ? FP_REG_FIRST + 15 : FP_REG_FIRST + 19)\n+#define FP_ARG_LAST  (mips_abi == ABI_32 ? FP_REG_FIRST + 15 : FP_REG_FIRST + 19)\n \n-/* fp20-23 are now caller saved.  */\n #undef SUBTARGET_CONDITIONAL_REGISTER_USAGE\n #define SUBTARGET_CONDITIONAL_REGISTER_USAGE \\\n {\t\t\t\t\t\t\t\t\t\\\n-  if (mips_isa >= 3)\t\t\t\t\t\t\t\\\n+  /* fp20-23 are now caller saved.  */\t\t\t\t\t\\\n+  if (mips_abi == ABI_64)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       int regno;\t\t\t\t\t\t\t\\\n       for (regno = FP_REG_FIRST + 20; regno < FP_REG_FIRST + 24; regno++) \\\n \tcall_used_regs[regno] = 1;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n+  /* odd registers from fp21 to fp31 are now caller saved.  */\t\t\\\n+  if (mips_abi == ABI_N32)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      int regno;\t\t\t\t\t\t\t\\\n+      for (regno = FP_REG_FIRST + 21; regno <= FP_REG_FIRST + 31; regno+=2) \\\n+\tcall_used_regs[regno] = 1;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n }\n \n #undef MAX_ARGS_IN_REGISTERS\n-#define MAX_ARGS_IN_REGISTERS\t(mips_isa < 3 ? 4 : 8)\n+#define MAX_ARGS_IN_REGISTERS\t(mips_abi == ABI_32 ? 4 : 8)\n \n #undef REG_PARM_STACK_SPACE\n-#define REG_PARM_STACK_SPARC(FNDECL) \t\t\t\t\t \\\n-  (mips_abi < 3\t\t\t\t\t\t\t\t \\\n+#if 0\n+/* ??? This is necessary in order for the ABI_32 support to work.  However,\n+   expr.c (emit_push_insn) has no support for a REG_PARM_STACK_SPACE\n+   definition that returns zero.  That would have to be fixed before this\n+   can be enabled.  */\n+#define REG_PARM_STACK_SPACE(FNDECL) \t\t\t\t\t \\\n+  (mips_abi == ABI_32\t\t\t\t\t\t\t \\\n    ? (MAX_ARGS_IN_REGISTERS*UNITS_PER_WORD) - FIRST_PARM_OFFSET (FNDECL) \\\n    : 0)\n+#endif\n \n #define FUNCTION_ARG_PADDING(MODE, TYPE)\t\t\t\t\\\n   (! BYTES_BIG_ENDIAN\t\t\t\t\t\t\t\\\n@@ -116,7 +141,7 @@ Boston, MA 02111-1307, USA.  */\n        ? ((TYPE) && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST\t\t\\\n \t  && int_size_in_bytes (TYPE) < (PARM_BOUNDARY / BITS_PER_UNIT))\\\n        : (GET_MODE_BITSIZE (MODE) < PARM_BOUNDARY\t\t\t\\\n-\t  && (mips_isa < 3 || GET_MODE_CLASS (MODE) == MODE_INT)))\t\\\n+\t  && (mips_abi == ABI_32 || GET_MODE_CLASS (MODE) == MODE_INT)))\\\n       ? downward : upward))\n \n extern struct rtx_def *type_dependent_reg ();\n@@ -125,7 +150,8 @@ extern struct rtx_def *type_dependent_reg ();\n \n #undef RETURN_IN_MEMORY\n #define RETURN_IN_MEMORY(TYPE)\t\\\n-  (mips_isa < 3 ? TYPE_MODE (TYPE) == BLKmode : int_size_in_bytes (TYPE) > 16)\n+  (mips_abi == ABI_32\t\t\t\t\t\t\t\\\n+   ? TYPE_MODE (TYPE) == BLKmode : int_size_in_bytes (TYPE) > 16)\n \n extern struct rtx_def *mips_function_value ();\n #undef FUNCTION_VALUE\n@@ -136,7 +162,7 @@ extern struct rtx_def *mips_function_value ();\n    For stdarg, we do not need to save the current argument, because it\n    is a real argument.  */\n #define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-{ if (mips_isa >= 3\t\t\t\t\t\t\t\\\n+{ if (mips_abi != ABI_32\t\t\t\t\t\t\\\n       && ((CUM).arg_words\t\t\t\t\t\t\\\n \t  < (MAX_ARGS_IN_REGISTERS - ! current_function_varargs)))\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -163,12 +189,13 @@ extern struct rtx_def *mips_function_value ();\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n+/* ??? Should disable for mips_abi == ABI32.  */\n #define STRICT_ARGUMENT_NAMING\n \n /* ??? Unimplemented stuff follows.  */\n \n /* ??? Add support for 16 byte/128 bit long doubles here when\n-   mips_isa >= 3.  */\n+   mips_abi != ABI32.  */\n \n /* ??? Make main return zero if user did not specify return value.  */\n "}]}