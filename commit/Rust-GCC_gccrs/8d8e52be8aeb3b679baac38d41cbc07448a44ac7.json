{"sha": "8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ4ZTUyYmU4YWViM2I2NzliYWFjMzhkNDFjYmMwNzQ0OGE0NGFjNw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-29T17:21:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-29T17:21:16Z"}, "message": "target.h (struct gcc_target): Add comp_type_attributes and set_default_type_attributes.\n\n\t* target.h (struct gcc_target): Add comp_type_attributes and\n\tset_default_type_attributes.\n\t* target-def.h (TARGET_COMP_TYPE_ATTRIBUTES,\n\tTARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Define.\n\t(TARGET_INITIALIZER): Update.\n\t* doc/tm.texi (COMP_TYPE_ATTRIBUTES, TARGET_COMP_TYPE_ATTRIBUTES,\n\tSET_DEFAULT_TYPE_ATTRIBUTES, TARGET_SET_DEFAULT_TYPE_ATTRIBUTES):\n\tUpdate documentation of old target macros to describe new target\n\thooks.\n\t* tree.c (make_node): Use target.set_default_type_attributes.\n\t(default_comp_type_attributes,\n\tdefault_set_default_type_attributes): New functions.\n\t* tree.h (default_comp_type_attributes,\n\tdefault_set_default_type_attributes): Declare.\n\t* c-typeck.c (COMP_TYPE_ATTRIBUTES): Don't define.\n\t(comptypes): Use target.comp_type_attributes.\n\t* config/arc/arc-protos.h, config/arc/arc.c, config/arc/arc.h\n\t(arc_comp_type_attributes, arc_set_default_type_attributes,\n\tCOMP_TYPE_ATTRIBUTES, SET_DEFAULT_TYPE_ATTRIBUTES): Remove\n\tfunctions and macros with default behaviour.\n\t* config/m32r/m32r-protos.h, config/m32r/m32r.c,\n\tconfig/m32r/m32r.h (m32r_comp_type_attributes,\n\tm32r_set_default_type_attributes, COMP_TYPE_ATTRIBUTES,\n\tSET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n\t* config/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c,\n\tconfig/m68hc11/m68hc11.h (m68hc11_comp_type_attributes,\n\tm68hc11_set_default_type_attributes, COMP_TYPE_ATTRIBUTES,\n\tSET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n\t* config/ns32k/ns32k-protos.h, config/ns32k/ns32k.c,\n\tconfig/ns32k/ns32k.h (ns32k_comp_type_attributes,\n\tCOMP_TYPE_ATTRIBUTES): Likewise.\n\t* config/rs6000/rs6000-protos.h, config/rs6000/rs6000.c,\n\tconfig/rs6000/rs6000.h (rs6000_comp_type_attributes,\n\trs6000_set_default_type_attributes, COMP_TYPE_ATTRIBUTES,\n\tSET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n\t* config/d30v/d30v.h (COMP_TYPE_ATTRIBUTES,\n\tSET_DEFAULT_TYPE_ATTRIBUTES): Remove commented out macro\n\tdefinitions.\n\t* config/i386/i386.h (SET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n\t* config/ns32k/ns32k.h (SET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n\t* config/arm/arm.c (arm_comp_type_attributes,\n\tarm_set_default_type_attributes): Make static.\n\t(TARGET_COMP_TYPE_ATTRIBUTES, TARGET_SET_DEFAULT_TYPE_ATTRIBUTES):\n\tDefine.\n\t* config/arm/arm.h (COMP_TYPE_ATTRIBUTES,\n\tSET_DEFAULT_TYPE_ATTRIBUTES): Don't define.\n\t* config/arm/arm-protos.h (arm_comp_type_attributes,\n\tarm_set_default_type_attributes): Don't declare.\n\t* config/i386/i386.c (ix86_comp_type_attributes): Make static.\n\t(TARGET_COMP_TYPE_ATTRIBUTES): Define.\n\t* config/i386/i386.h (COMP_TYPE_ATTRIBUTES): Don't define.\n\t* config/i386/i386-protos.h (ix86_comp_type_attributes): Don't\n\tdeclare.\n\ncp:\n\t* typeck.c (COMP_TYPE_ATTRIBUTES): Don't define.\n\t(comptypes): Use target.comp_type_attributes.\n\nFrom-SVN: r43655", "tree": {"sha": "bd38f64051daf12fcb923a601e97e3cdc91a4c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd38f64051daf12fcb923a601e97e3cdc91a4c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8440bf436737856525743cd6ce979e5d0ce487be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8440bf436737856525743cd6ce979e5d0ce487be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8440bf436737856525743cd6ce979e5d0ce487be"}], "stats": {"total": 352, "additions": 121, "deletions": 231}, "files": [{"sha": "ce064e9907231e201150ce6b3b190e96bb6a2c28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -1,3 +1,59 @@\n+2001-06-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* target.h (struct gcc_target): Add comp_type_attributes and\n+\tset_default_type_attributes.\n+\t* target-def.h (TARGET_COMP_TYPE_ATTRIBUTES,\n+\tTARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Define.\n+\t(TARGET_INITIALIZER): Update.\n+\t* doc/tm.texi (COMP_TYPE_ATTRIBUTES, TARGET_COMP_TYPE_ATTRIBUTES,\n+\tSET_DEFAULT_TYPE_ATTRIBUTES, TARGET_SET_DEFAULT_TYPE_ATTRIBUTES):\n+\tUpdate documentation of old target macros to describe new target\n+\thooks.\n+\t* tree.c (make_node): Use target.set_default_type_attributes.\n+\t(default_comp_type_attributes,\n+\tdefault_set_default_type_attributes): New functions.\n+\t* tree.h (default_comp_type_attributes,\n+\tdefault_set_default_type_attributes): Declare.\n+\t* c-typeck.c (COMP_TYPE_ATTRIBUTES): Don't define.\n+\t(comptypes): Use target.comp_type_attributes.\n+\t* config/arc/arc-protos.h, config/arc/arc.c, config/arc/arc.h\n+\t(arc_comp_type_attributes, arc_set_default_type_attributes,\n+\tCOMP_TYPE_ATTRIBUTES, SET_DEFAULT_TYPE_ATTRIBUTES): Remove\n+\tfunctions and macros with default behaviour.\n+\t* config/m32r/m32r-protos.h, config/m32r/m32r.c,\n+\tconfig/m32r/m32r.h (m32r_comp_type_attributes,\n+\tm32r_set_default_type_attributes, COMP_TYPE_ATTRIBUTES,\n+\tSET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n+\t* config/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c,\n+\tconfig/m68hc11/m68hc11.h (m68hc11_comp_type_attributes,\n+\tm68hc11_set_default_type_attributes, COMP_TYPE_ATTRIBUTES,\n+\tSET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n+\t* config/ns32k/ns32k-protos.h, config/ns32k/ns32k.c,\n+\tconfig/ns32k/ns32k.h (ns32k_comp_type_attributes,\n+\tCOMP_TYPE_ATTRIBUTES): Likewise.\n+\t* config/rs6000/rs6000-protos.h, config/rs6000/rs6000.c,\n+\tconfig/rs6000/rs6000.h (rs6000_comp_type_attributes,\n+\trs6000_set_default_type_attributes, COMP_TYPE_ATTRIBUTES,\n+\tSET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n+\t* config/d30v/d30v.h (COMP_TYPE_ATTRIBUTES,\n+\tSET_DEFAULT_TYPE_ATTRIBUTES): Remove commented out macro\n+\tdefinitions.\n+\t* config/i386/i386.h (SET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n+\t* config/ns32k/ns32k.h (SET_DEFAULT_TYPE_ATTRIBUTES): Likewise.\n+\t* config/arm/arm.c (arm_comp_type_attributes,\n+\tarm_set_default_type_attributes): Make static.\n+\t(TARGET_COMP_TYPE_ATTRIBUTES, TARGET_SET_DEFAULT_TYPE_ATTRIBUTES):\n+\tDefine.\n+\t* config/arm/arm.h (COMP_TYPE_ATTRIBUTES,\n+\tSET_DEFAULT_TYPE_ATTRIBUTES): Don't define.\n+\t* config/arm/arm-protos.h (arm_comp_type_attributes,\n+\tarm_set_default_type_attributes): Don't declare.\n+\t* config/i386/i386.c (ix86_comp_type_attributes): Make static.\n+\t(TARGET_COMP_TYPE_ATTRIBUTES): Define.\n+\t* config/i386/i386.h (COMP_TYPE_ATTRIBUTES): Don't define.\n+\t* config/i386/i386-protos.h (ix86_comp_type_attributes): Don't\n+\tdeclare.\n+\n 2001-06-28  Jan van Male  <jan.vanmale@fenk.wau.nl>\n \n \t* predict.c (dump_prediction): Eliminate fprintf warning."}, {"sha": "bc9de485a3f9151bdbec4a2b9561c3773b5c49c1", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -483,12 +483,8 @@ comptypes (type1, type2)\n   if (TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return 1;\n \n-#ifndef COMP_TYPE_ATTRIBUTES\n-#define COMP_TYPE_ATTRIBUTES(t1,t2)\t1\n-#endif\n-\n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n-  if (! (attrval = COMP_TYPE_ATTRIBUTES (t1, t2)))\n+  if (! (attrval = (*target.comp_type_attributes) (t1, t2)))\n      return 0;\n \n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */"}, {"sha": "b264d632364e0ed01d77605f8664b744a5244a9c", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -60,8 +60,6 @@ extern int shift_operator PARAMS ((rtx, enum machine_mode));\n \n #ifdef TREE_CODE\n extern enum arc_function_type arc_compute_function_type PARAMS ((tree));\n-extern int arc_comp_type_attributes PARAMS ((tree, tree));\n-extern void arc_set_default_type_attributes PARAMS ((tree));\n extern void arc_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\tenum machine_mode, tree,\n \t\t\t\t\t\tint *, int));"}, {"sha": "c579cd5f9b7811d699bb2dad87e4926124e56296", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -342,24 +342,6 @@ arc_valid_decl_attribute (type, attributes, identifier, args)\n   return 0;\n }\n \n-/* Return zero if TYPE1 and TYPE are incompatible, one if they are compatible,\n-   and two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-int\n-arc_comp_type_attributes (type1, type2)\n-     tree type1 ATTRIBUTE_UNUSED, type2 ATTRIBUTE_UNUSED;\n-{\n-  return 1;\n-}\n-\n-/* Set the default attributes for TYPE.  */\n-\n-void\n-arc_set_default_type_attributes (type)\n-     tree type ATTRIBUTE_UNUSED;\n-{\n-}\n \f\n /* Acceptable arguments to the call insn.  */\n "}, {"sha": "80ad885d8062cd865eb3dc1667a009ac803a4ca9", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -1575,16 +1575,6 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n /* A function address in a call instruction.  */\n #define FUNCTION_MODE SImode\n \n-/* A C expression that returns zero if the attributes on TYPE1 and TYPE2 are\n-   incompatible, one if they are compatible, and two if they are\n-   nearly compatible (which causes a warning to be generated).  */\n-#define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n-arc_comp_type_attributes (TYPE1, TYPE2)\n-\n-/* Give newly defined TYPE some default attributes.  */\n-#define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) \\\n-arc_set_default_type_attributes (TYPE)\n-\n /* alloca should avoid clobbering the old register save area.  */\n /* ??? Not defined in tm.texi.  */\n #define SETJMP_VIA_SAVE_AREA"}, {"sha": "653d788ded3e52b9ffe21ba7e7a69e59f2f72a52", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -38,8 +38,6 @@ extern unsigned long arm_current_func_type\tPARAMS ((void));\n \n #ifdef TREE_CODE\n extern int    arm_return_in_memory\tPARAMS ((tree));\n-extern int    arm_comp_type_attributes\tPARAMS ((tree, tree));\n-extern void   arm_set_default_type_attributes\tPARAMS ((tree));\n extern void   arm_encode_call_attribute\tPARAMS ((tree, int));\n extern int    arm_function_ok_for_sibcall PARAMS ((tree));\n #endif"}, {"sha": "97ca596b3f88fd4ecdaca819f628e94ca32a4fd6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -106,6 +106,8 @@ static int\t arm_valid_type_attribute_p\tPARAMS ((tree, tree,\n \t\t\t\t\t\t\t tree, tree));\n static int\t arm_valid_decl_attribute_p\tPARAMS ((tree, tree,\n \t\t\t\t\t\t\t tree, tree));\n+static int\t arm_comp_type_attributes\tPARAMS ((tree, tree));\n+static void\t arm_set_default_type_attributes\tPARAMS ((tree));\n #undef Hint\n #undef Mmode\n #undef Ulong\n@@ -128,6 +130,12 @@ static int\t arm_valid_decl_attribute_p\tPARAMS ((tree, tree,\n #  define TARGET_VALID_DECL_ATTRIBUTE arm_valid_decl_attribute_p\n #endif\n \n+#undef TARGET_COMP_TYPE_ATTRIBUTES\n+#define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n+\n+#undef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n+#define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES arm_set_default_type_attributes\n+\n struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -1913,7 +1921,7 @@ arm_valid_type_attribute_p (type, attributes, identifier, args)\n /* Return 0 if the attributes for two types are incompatible, 1 if they\n    are compatible, and 2 if they are nearly compatible (which causes a\n    warning to be generated).  */\n-int\n+static int\n arm_comp_type_attributes (type1, type2)\n      tree type1;\n      tree type2;\n@@ -1984,7 +1992,7 @@ arm_encode_call_attribute (decl, flag)\n /*  Assigns default attributes to newly defined type.  This is used to\n     set short_call/long_call attributes for function types of\n     functions defined inside corresponding #pragma scopes.  */\n-void\n+static void\n arm_set_default_type_attributes (type)\n   tree type;\n {"}, {"sha": "a4dff6dc6cc1a5d971974967cd2ac503d051ebf6", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -2542,18 +2542,6 @@ extern const char * arm_pic_register_string;\n    offset.  */\n extern int making_const_table;\n \f\n-/* If defined, a C expression whose value is zero if the attributes on\n-   TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n-   two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-#define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n-  (arm_comp_type_attributes (TYPE1, TYPE2))\n-\n-/* If defined, a C statement that assigns default attributes to newly\n-   defined TYPE.  */\n-#define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) \\\n-  arm_set_default_type_attributes (TYPE)\n-\n /* Handle pragmas for compatibility with Intel's compilers.  */\n #define REGISTER_TARGET_PRAGMAS(PFILE) do { \\\n   cpp_register_pragma (PFILE, 0, \"long_calls\", arm_pr_long_calls); \\"}, {"sha": "2b08b117c89dff70b9b3b0d2b7ddbe2ba0a61386", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -5889,15 +5889,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    must also be defined).  */\n /* #define HANDLE_WEAK_PRAGMA */\n \n-/* If defined, a C expression whose value is zero if the attributes on TYPE1\n-   and TYPE2 are incompatible, one if they are compatible, and two if they are\n-   nearly compatible (which causes a warning to be generated).  */\n-/* #define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) */\n-\n-/* If defined, a C statement that assigns default attributes to newly defined\n-   TYPE.  */\n-/* #define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) */\n-\n /* Define this macro to control use of the character `$' in identifier names.\n    The value should be 0, 1, or 2.  0 means `$' is not allowed by default; 1\n    means it is allowed by default if `-traditional' is used; 2 means it is"}, {"sha": "dfb2bccfa2c31348be16977adbbd12c097f60f47", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -169,7 +169,6 @@ extern rtx ix86_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int))\n #endif\n \n #ifdef TREE_CODE\n-extern int ix86_comp_type_attributes PARAMS ((tree, tree));\n extern int ix86_return_pops_args PARAMS ((tree, tree, int));\n \n extern int ix86_data_alignment PARAMS ((tree, int));"}, {"sha": "b4aab6beac2dd4f2e817ea657f20aa838329bc26", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -607,6 +607,7 @@ static int ix86_fp_comparison_sahf_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_cost PARAMS ((enum rtx_code code));\n static int ix86_save_reg PARAMS ((int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n+static int ix86_comp_type_attributes PARAMS ((tree, tree));\n \f\n /* Initialize the GCC target structure.  */\n #ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n@@ -617,6 +618,9 @@ static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n #define TARGET_VALID_TYPE_ATTRIBUTE ix86_valid_type_attribute_p\n \n+#undef TARGET_COMP_TYPE_ATTRIBUTES\n+#define TARGET_COMP_TYPE_ATTRIBUTES ix86_comp_type_attributes\n+\n struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -928,7 +932,7 @@ ix86_valid_type_attribute_p (type, attributes, identifier, args)\n    are compatible, and 2 if they are nearly compatible (which causes a\n    warning to be generated).  */\n \n-int\n+static int\n ix86_comp_type_attributes (type1, type2)\n      tree type1;\n      tree type2;"}, {"sha": "bb77de3fdb5f5e040bbb083bdc2e7137aea7b0ff", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -2240,19 +2240,6 @@ do\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n \f\n-/* If defined, a C expression whose value is zero if the attributes on\n-   TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n-   two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-#define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n-  (ix86_comp_type_attributes (TYPE1, TYPE2))\n-\n-/* If defined, a C statement that assigns default attributes to newly\n-   defined TYPE.  */\n-\n-/* #define SET_DEFAULT_TYPE_ATTRIBUTES (TYPE) */\n-\n /* Max number of args passed in registers.  If this is more than 3, we will\n    have problems with ebx (register #4), since it is a caller save register and\n    is also used as the pic register in ELF.  So for now, don't allow more than"}, {"sha": "a73b312158d8b41b6ff3eede507b4550bebe390b", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -36,12 +36,10 @@ extern void   m32r_asm_file_start\t\tPARAMS ((FILE *));\n extern void   m32r_sched_init \t\t\tPARAMS ((FILE *, int));\n extern int    direct_return \t\t\tPARAMS ((void));\n #ifdef TREE_CODE\n-extern int    m32r_comp_type_attributes\t\tPARAMS ((tree, tree));\n extern void   m32r_select_section\t\tPARAMS ((tree, int));\n extern void   m32r_encode_section_info\t\tPARAMS ((tree));\n extern enum m32r_function_type m32r_compute_function_type PARAMS ((tree));\n extern void   m32r_select_section \t\tPARAMS ((tree, int));\n-extern void   m32r_set_default_type_attributes  PARAMS ((tree));\n \n #ifdef HAVE_MACHINE_MODES\n extern void   m32r_setup_incoming_varargs\tPARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int *, int));"}, {"sha": "6530435c8c88c316a7e231fef258b3dd9c8e2317", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -279,26 +279,6 @@ m32r_valid_decl_attribute (type, attributes, identifier, args)\n \n   return 0;\n }\n-\n-/* Return zero if TYPE1 and TYPE are incompatible, one if they are compatible,\n-   and two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-int\n-m32r_comp_type_attributes (type1, type2)\n-     tree type1 ATTRIBUTE_UNUSED;\n-     tree type2 ATTRIBUTE_UNUSED;\n-{\n-  return 1;\n-}\n-\n-/* Set the default attributes for TYPE.  */\n-\n-void\n-m32r_set_default_type_attributes (type)\n-     tree type ATTRIBUTE_UNUSED;\n-{\n-}\n \f\n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node"}, {"sha": "dfe4f289da76425375063d6c07f47357d5eb1b4b", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -2111,16 +2111,6 @@ extern char m32r_punct_chars[];\n \n /* A function address in a call instruction.  */\n #define FUNCTION_MODE SImode\n-\n-/* A C expression that returns zero if the attributes on TYPE1 and TYPE2 are\n-   incompatible, one if they are compatible, and two if they are\n-   nearly compatible (which causes a warning to be generated).  */\n-#define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n-  m32r_comp_type_attributes (TYPE1, TYPE2)\n-\n-/* Give newly defined TYPE some default attributes.  */\n-#define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) \\\n-  m32r_set_default_type_attributes (TYPE)\n \f\n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  Note that we can't use \"rtx\" here"}, {"sha": "b31770b9c7773d596a940adcd392e2f6009da7b6", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -43,8 +43,6 @@ extern void m68hc11_function_arg_advance PARAMS((CUMULATIVE_ARGS*,\n                                                  enum machine_mode,\n                                                  tree,\n                                                  int));\n-extern int m68hc11_comp_type_attributes PARAMS((tree, tree));\n-extern void m68hc11_set_default_type_attributes PARAMS((tree));\n extern void m68hc11_encode_section_info PARAMS((tree));\n #endif\n "}, {"sha": "1d7669736e84018ffaeff2d6e5e8f74140a6a890", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -1151,28 +1151,6 @@ m68hc11_valid_type_attribute_p (type, attributes, identifier, args)\n   return 0;\n }\n \n-/* If defined, a C expression whose value is zero if the attributes on\n-   TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n-   two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-int\n-m68hc11_comp_type_attributes (type1, type2)\n-     tree type1 ATTRIBUTE_UNUSED;\n-     tree type2 ATTRIBUTE_UNUSED;\n-{\n-  return 1;\n-}\n-\n-/* If defined, a C statement that assigns default attributes to newly\n-   defined TYPE.  */\n-\n-void\n-m68hc11_set_default_type_attributes (type)\n-     tree type ATTRIBUTE_UNUSED;\n-{\n-}\n-\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or function\n    named by the symbol (such as what section it is in)."}, {"sha": "5af1db2112a47b95058627d57742d140097b7b21", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -1194,20 +1194,6 @@ typedef struct m68hc11_args\n   m68hc11_initialize_trampoline ((TRAMP), (FNADDR), (CXT))\n \n \f\n-/* If defined, a C expression whose value is zero if the attributes on\n-   TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n-   two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-#define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n-  (m68hc11_comp_type_attributes (TYPE1, TYPE2))\n-\n-/* If defined, a C statement that assigns default attributes to newly\n-   defined TYPE.  */\n-\n-#define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) \\\n-  (m68hc11_set_default_type_attributes (TYPE))\n-\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or function\n    named by the symbol (such as what section it is in)."}, {"sha": "64b484b5f5a0abffb2acdced682cc60ce78cb2f5", "filename": "gcc/config/ns32k/ns32k-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -38,7 +38,6 @@ extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern int ns32k_comp_type_attributes PARAMS ((tree, tree));\n extern int ns32k_return_pops_args PARAMS ((tree, tree, int));\n #endif /* TREE_CODE */\n "}, {"sha": "22a4b49b88ec1dbf119f5c1fbb7084c43e68ea8e", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -670,18 +670,6 @@ ns32k_valid_type_attribute_p (type, attributes, identifier, args)\n   return 0;\n }\n \n-/* Return 0 if the attributes for two types are incompatible, 1 if they\n-   are compatible, and 2 if they are nearly compatible (which causes a\n-   warning to be generated).  */\n-\n-int\n-ns32k_comp_type_attributes (type1, type2)\n-     tree type1 ATTRIBUTE_UNUSED;\n-     tree type2 ATTRIBUTE_UNUSED;\n-{\n-  return 1;\n-}\n-\n \f\n /* Value is the number of bytes of arguments automatically\n    popped when returning from a subroutine call."}, {"sha": "3adc9bbd1b7c66fded35360614ca6f7c3dc67008", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -1294,19 +1294,6 @@ while (0)\n  { if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC)\t\\\n      goto LABEL;}\n \f\n-/* If defined, a C expression whose value is zero if the attributes on\n-   TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n-   two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-#define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n-  (ns32k_comp_type_attributes (TYPE1, TYPE2))\n-\n-/* If defined, a C statement that assigns default attributes to newly\n-   defined TYPE.  */\n-\n-/* #define SET_DEFAULT_TYPE_ATTRIBUTES (TYPE) */\n-\f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.\n    HI mode is more efficient but the range is not wide enough for"}, {"sha": "411244371219c4d925350f6b50c3b5fce899f8bc", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -137,8 +137,6 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    int *, int));\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern void output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n-extern int rs6000_comp_type_attributes PARAMS ((tree, tree));\n-extern void rs6000_set_default_type_attributes PARAMS ((tree));\n extern void rs6000_encode_section_info PARAMS ((tree));\n extern void rs6000_select_section PARAMS ((tree, int));\n extern void rs6000_unique_section PARAMS ((tree, int));"}, {"sha": "2ef989ed44bc748baaf4a8d585bd5e9654ffd11d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -7853,29 +7853,6 @@ rs6000_valid_type_attribute_p (type, attributes, identifier, args)\n   return 0;\n }\n \n-/* If defined, a C expression whose value is zero if the attributes on\n-   TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n-   two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-int\n-rs6000_comp_type_attributes (type1, type2)\n-     tree type1 ATTRIBUTE_UNUSED;\n-     tree type2 ATTRIBUTE_UNUSED;\n-{\n-  return 1;\n-}\n-\n-/* If defined, a C statement that assigns default attributes to newly\n-   defined TYPE.  */\n-\n-void\n-rs6000_set_default_type_attributes (type)\n-     tree type ATTRIBUTE_UNUSED;\n-{\n-  return;\n-}\n-\n /* Return a reference suitable for calling a function with the\n    longcall attribute.  */\n struct rtx_def *"}, {"sha": "1a5690452555526582b2e6fdead0b8ece7df3efb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -1611,21 +1611,6 @@ typedef struct rs6000_args\n #define INITIALIZE_TRAMPOLINE(ADDR, FNADDR, CXT)\t\t\\\n   rs6000_initialize_trampoline (ADDR, FNADDR, CXT)\n \f\n-/* If defined, a C expression whose value is zero if the attributes on\n-   TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n-   two if they are nearly compatible (which causes a warning to be\n-   generated).  */\n-\n-#define COMP_TYPE_ATTRIBUTES(TYPE1, TYPE2) \\\n-  (rs6000_comp_type_attributes (TYPE1, TYPE2))\n-\n-/* If defined, a C statement that assigns default attributes to newly\n-   defined TYPE.  */\n-\n-#define SET_DEFAULT_TYPE_ATTRIBUTES(TYPE) \\\n-  (rs6000_set_default_type_attributes (TYPE))\n-\n-\f\n /* Definitions for __builtin_return_address and __builtin_frame_address.\n    __builtin_return_address (0) should give link register (65), enable\n    this. */"}, {"sha": "2b55f03b64e281d4cbae57d43054c7af6091ff74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -1,3 +1,8 @@\n+2001-06-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* typeck.c (COMP_TYPE_ATTRIBUTES): Don't define.\n+\t(comptypes): Use target.comp_type_attributes.\n+\n 2001-06-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (flag_dump_class_layout): Remove unneeded declaration."}, {"sha": "cb1146ef7d3c961eba27cad8ec3304cb2b8db71b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -996,16 +996,10 @@ comptypes (t1, t2, strict)\n   if (TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return 1;\n \n-  /* ??? COMP_TYPE_ATTRIBUTES is currently useless for variables as each\n-     attribute is its own main variant (`val' will remain 0).  */\n-#ifndef COMP_TYPE_ATTRIBUTES\n-#define COMP_TYPE_ATTRIBUTES(t1,t2)\t1\n-#endif\n-\n   if (strict & COMPARE_NO_ATTRIBUTES)\n     attrval = 1;\n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n-  else if (! (attrval = COMP_TYPE_ATTRIBUTES (t1, t2)))\n+  else if (! (attrval = (*target.comp_type_attributes) (t1, t2)))\n      return 0;\n \n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */"}, {"sha": "236b98dcf3c05a920d91bf26b5716da9d22827b1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -8299,19 +8299,18 @@ arguments @var{args} is a valid machine specific attribute for @var{type}.\n The attributes in @var{attributes} have previously been assigned to @var{type}.\n @end deftypefn\n \n-@table @code\n-@findex COMP_TYPE_ATTRIBUTES\n-@item COMP_TYPE_ATTRIBUTES (@var{type1}, @var{type2})\n-If defined, a C expression whose value is zero if the attributes on\n+@deftypefn {Target Hook} int TARGET_COMP_TYPE_ATTRIBUTES (tree @var{type1}, tree @var{type2})\n+If defined, this target hook is a function which returns zero if the attributes on\n @var{type1} and @var{type2} are incompatible, one if they are compatible,\n and two if they are nearly compatible (which causes a warning to be\n-generated).\n+generated).  If this is not defined, machine-specific attributes are\n+supposed always to be compatible.\n+@end deftypefn\n \n-@findex SET_DEFAULT_TYPE_ATTRIBUTES\n-@item SET_DEFAULT_TYPE_ATTRIBUTES (@var{type})\n-If defined, a C statement that assigns default attributes to\n+@deftypefn {Target Hook} void TARGET_SET_DEFAULT_TYPE_ATTRIBUTES (tree @var{type})\n+If defined, this target hook is a function which assigns default attributes to\n newly defined @var{type}.\n-@end table\n+@end deftypefn\n \n @deftypefn {Target Hook} tree TARGET_MERGE_TYPE_ATTRIBUTES (tree @var{type1}, tree @var{type2})\n Define this target hook if the merging of type attributes needs special"}, {"sha": "35c2ce8f5bb2c52d0baf8573a87ff0b67276de95", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -30,12 +30,16 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_MERGE_TYPE_ATTRIBUTES merge_type_attributes\n #define TARGET_VALID_DECL_ATTRIBUTE default_valid_attribute_p\n #define TARGET_VALID_TYPE_ATTRIBUTE default_valid_attribute_p\n+#define TARGET_COMP_TYPE_ATTRIBUTES default_comp_type_attributes\n+#define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES default_set_default_type_attributes\n \n /* The whole shebang.  */\n #define TARGET_INITIALIZER\t\t\t\\\n {\t\t\t\t\t\t\\\n   TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n   TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\\n   TARGET_VALID_DECL_ATTRIBUTE,\t\t\t\\\n-  TARGET_VALID_TYPE_ATTRIBUTE\t\t\t\\\n+  TARGET_VALID_TYPE_ATTRIBUTE,\t\t\t\\\n+  TARGET_COMP_TYPE_ATTRIBUTES,\t\t\t\\\n+  TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\t\t\\\n }"}, {"sha": "efdb5846ac16a5f40e78131629e8b1e7d71d9c28", "filename": "gcc/target.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -63,6 +63,14 @@ struct gcc_target\n      previously been assigned to TYPE.  */\n   int (* valid_type_attribute) PARAMS ((tree type, tree attributes,\n \t\t\t\t\ttree identifier, tree args));\n+\n+  /* Return zero if the attributes on TYPE1 and TYPE2 are incompatible,\n+     one if they are compatible and two if they are nearly compatible\n+     (which causes a warning to be generated).  */\n+  int (* comp_type_attributes) PARAMS ((tree type1, tree type2));\n+\n+  /* Assign default attributes to the newly defined TYPE.  */\n+  void (* set_default_type_attributes) PARAMS ((tree type));\n };\n \n extern struct gcc_target target;"}, {"sha": "04d46477bffd842978ca9e5d5bf7888c93f6c971", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -433,9 +433,7 @@ make_node (code)\n       TYPE_USER_ALIGN (t) = 0;\n       TYPE_MAIN_VARIANT (t) = t;\n       TYPE_ATTRIBUTES (t) = NULL_TREE;\n-#ifdef SET_DEFAULT_TYPE_ATTRIBUTES\n-      SET_DEFAULT_TYPE_ATTRIBUTES (t);\n-#endif\n+      (* target.set_default_type_attributes) (t);\n       /* Note that we have not yet computed the alias set for this\n \t type.  */\n       TYPE_ALIAS_SET (t) = -1;\n@@ -2720,6 +2718,25 @@ default_valid_attribute_p PARAMS ((attr_name, attr_args, decl, type))\n   return 0;\n }\n \n+/* Default value of target.comp_type_attributes that always returns 1.  */\n+\n+int\n+default_comp_type_attributes (type1, type2)\n+     tree type1 ATTRIBUTE_UNUSED;\n+     tree type2 ATTRIBUTE_UNUSED;\n+{\n+  return 1;\n+}\n+\n+/* Default version of target.set_default_type_attributes that always does\n+   nothing.  */\n+\n+void\n+default_set_default_type_attributes (type)\n+     tree type ATTRIBUTE_UNUSED;\n+{\n+}\n+\n /* Return 1 if ATTR_NAME and ATTR_ARGS is valid for either declaration\n    DECL or type TYPE and 0 otherwise.  Validity is determined the\n    target functions valid_decl_attribute and valid_machine_attribute.  */"}, {"sha": "9a5fb6a5137ba569c88ab024855616f3be732862", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e52be8aeb3b679baac38d41cbc07448a44ac7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8d8e52be8aeb3b679baac38d41cbc07448a44ac7", "patch": "@@ -2044,6 +2044,8 @@ extern tree build_decl_attribute_variant PARAMS ((tree, tree));\n extern tree merge_decl_attributes PARAMS ((tree, tree));\n extern tree merge_type_attributes PARAMS ((tree, tree));\n extern int default_valid_attribute_p PARAMS ((tree, tree, tree, tree));\n+extern int default_comp_type_attributes PARAMS ((tree, tree));\n+extern void default_set_default_type_attributes PARAMS ((tree));\n \n /* Split a list of declspecs and attributes into two.  */\n "}]}