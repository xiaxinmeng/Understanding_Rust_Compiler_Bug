{"sha": "ae575662833d70cb7d74b9538096c7becc79af14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1NzU2NjI4MzNkNzBjYjdkNzRiOTUzODA5NmM3YmVjYzc5YWYxNA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-07-22T16:44:35Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-07-22T18:36:28Z"}, "message": "rs6000: __builtin_mma_disassemble_acc() doesn't store elements correctly in LE mode\n\nPR96236 shows a problem where we don't correctly store our 512-bit accumulators\ncorrectly in little-endian mode.  The patch below detects when we're doing a\nlittle-endian memory access and stores to the correct memory locations.\n\n2020-07-22  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/96236\n\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_mma_builtin): Handle\n\tlittle-endian memory ordering.\n\ngcc/testsuite/\n\tPR target/96236\n\t* gcc.target/powerpc/mma-double-test.c: Update storing results for\n\tcorrect little-endian ordering.\n\t* gcc.target/powerpc/mma-single-test.c: Likewise.", "tree": {"sha": "54c823e58d7e47cc8d6752ac099a147bddabf64e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c823e58d7e47cc8d6752ac099a147bddabf64e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae575662833d70cb7d74b9538096c7becc79af14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae575662833d70cb7d74b9538096c7becc79af14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae575662833d70cb7d74b9538096c7becc79af14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae575662833d70cb7d74b9538096c7becc79af14/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1e0decc9e17a4283d1b5508e892be5215b8ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1e0decc9e17a4283d1b5508e892be5215b8ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1e0decc9e17a4283d1b5508e892be5215b8ab9"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "bb0fdf2968811adecd2895feadd2fb04a6e99f02", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae575662833d70cb7d74b9538096c7becc79af14/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae575662833d70cb7d74b9538096c7becc79af14/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=ae575662833d70cb7d74b9538096c7becc79af14", "patch": "@@ -11154,11 +11154,12 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       tree src_array = build1 (VIEW_CONVERT_EXPR, array_type, src);\n       for (unsigned i = 0; i < 4; i++)\n \t{\n+\t  unsigned index = WORDS_BIG_ENDIAN ? i : 3 - i;\n \t  tree ref = build4 (ARRAY_REF, unsigned_V16QI_type_node, src_array,\n \t\t\t     build_int_cst (size_type_node, i),\n \t\t\t     NULL_TREE, NULL_TREE);\n \t  tree dst = build2 (MEM_REF, unsigned_V16QI_type_node, dst_base,\n-\t\t\t     build_int_cst (dst_type, i * 16));\n+\t\t\t     build_int_cst (dst_type, index * 16));\n \t  gimplify_assign (dst, ref, &new_seq);\n \t}\n       pop_gimplify_context (NULL);"}, {"sha": "044a288ebccf2ec0aa142833c23c1bea9cdbe0d4", "filename": "gcc/testsuite/gcc.target/powerpc/mma-double-test.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae575662833d70cb7d74b9538096c7becc79af14/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-double-test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae575662833d70cb7d74b9538096c7becc79af14/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-double-test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-double-test.c?ref=ae575662833d70cb7d74b9538096c7becc79af14", "patch": "@@ -12,13 +12,13 @@ typedef double v4sf_t __attribute__ ((vector_size (16)));\n #define SAVE_ACC(ACC, ldc, J)  \\\n \t  __builtin_mma_disassemble_acc (result, ACC); \\\n \t  rowC = (v4sf_t *) &CO[0*ldc+J]; \\\n-          rowC[0] += result[3] ; \\\n+          rowC[0] += result[0]; \\\n           rowC = (v4sf_t *) &CO[1*ldc+J]; \\\n-          rowC[0] += result[2] ; \\\n+          rowC[0] += result[1]; \\\n           rowC = (v4sf_t *) &CO[2*ldc+J]; \\\n-          rowC[0] += result[1] ; \\\n+          rowC[0] += result[2]; \\\n           rowC = (v4sf_t *) &CO[3*ldc+J]; \\\n-\t  rowC[0] += result[0] ;\n+\t  rowC[0] += result[3];\n \n void\n MMA (int m, int n, int k, double *A, double *B, double *C)"}, {"sha": "7e628df45b7b811e929f7ceeefada63224ea9d3e", "filename": "gcc/testsuite/gcc.target/powerpc/mma-single-test.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae575662833d70cb7d74b9538096c7becc79af14/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-single-test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae575662833d70cb7d74b9538096c7becc79af14/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-single-test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-single-test.c?ref=ae575662833d70cb7d74b9538096c7becc79af14", "patch": "@@ -12,24 +12,24 @@ typedef float v4sf_t __attribute__ ((vector_size (16)));\n #define SAVE_ACC(ACC, ldc,J)  \\\n \t  __builtin_mma_disassemble_acc (result, ACC); \\\n \t  rowC = (v4sf_t *) &CO[0*ldc+J]; \\\n-          rowC[0] += result[3] ; \\\n+          rowC[0] += result[0]; \\\n           rowC = (v4sf_t *) &CO[1*ldc+J]; \\\n-          rowC[0] += result[2] ; \\\n+          rowC[0] += result[1]; \\\n           rowC = (v4sf_t *) &CO[2*ldc+J]; \\\n-          rowC[0] += result[1] ; \\\n+          rowC[0] += result[2]; \\\n           rowC = (v4sf_t *) &CO[3*ldc+J]; \\\n-\t  rowC[0] += result[0] ;\n+\t  rowC[0] += result[3];\n \n #define SAVE_ACC1(ACC,ldc, J)  \\\n \t  __builtin_mma_disassemble_acc (result, ACC); \\\n \t  rowC = (v4sf_t *) &CO[4* ldc+J]; \\\n-          rowC[0] += result[3] ; \\\n+          rowC[0] += result[0]; \\\n           rowC = (v4sf_t *) &CO[5*ldc+J]; \\\n-          rowC[0] += result[2] ; \\\n+          rowC[0] += result[1]; \\\n           rowC = (v4sf_t *) &CO[6*ldc+J]; \\\n-          rowC[0] += result[1] ; \\\n+          rowC[0] += result[2]; \\\n           rowC = (v4sf_t *) &CO[7*ldc+J]; \\\n-\t  rowC[0] += result[0] ;\n+\t  rowC[0] += result[3];\n void\n MMA (int m, int n, int k, float *A, float *B, float *C)\n {"}]}