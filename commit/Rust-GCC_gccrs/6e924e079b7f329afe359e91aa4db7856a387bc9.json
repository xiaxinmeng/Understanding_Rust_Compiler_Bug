{"sha": "6e924e079b7f329afe359e91aa4db7856a387bc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5MjRlMDc5YjdmMzI5YWZlMzU5ZTkxYWE0ZGI3ODU2YTM4N2JjOQ==", "commit": {"author": {"name": "David Krauss", "email": "potswa@mac.com", "date": "2009-11-03T18:16:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-03T18:16:34Z"}, "message": "re PR libstdc++/41351 (std::rotate on RAI does not conform to ISO complexity requirement)\n\n2009-11-03  David Krauss  <potswa@mac.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41351\n\t* include/bits/stl_algo.h (__rotate(_RandomAccessIterator,\n\t_RandomAccessIterator, _RandomAccessIterator,\n\trandom_access_iterator_tag)): Rewrite to use only std::swap in\n\tgeneral and std::copy/std::copy_backward when safe.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r153860", "tree": {"sha": "9822080e8f3630b0d1fe1d0283391c82cd2ce99b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9822080e8f3630b0d1fe1d0283391c82cd2ce99b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e924e079b7f329afe359e91aa4db7856a387bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e924e079b7f329afe359e91aa4db7856a387bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e924e079b7f329afe359e91aa4db7856a387bc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e924e079b7f329afe359e91aa4db7856a387bc9/comments", "author": null, "committer": null, "parents": [{"sha": "156e423608fd6c71fde8910c664a066aa23dd2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156e423608fd6c71fde8910c664a066aa23dd2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/156e423608fd6c71fde8910c664a066aa23dd2c9"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "494e24e79abecde43c3501240d966746fe76ab73", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e924e079b7f329afe359e91aa4db7856a387bc9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e924e079b7f329afe359e91aa4db7856a387bc9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e924e079b7f329afe359e91aa4db7856a387bc9", "patch": "@@ -1,3 +1,12 @@\n+2009-11-03  David Krauss  <potswa@mac.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41351\n+\t* include/bits/stl_algo.h (__rotate(_RandomAccessIterator,\n+\t_RandomAccessIterator, _RandomAccessIterator,\n+\trandom_access_iterator_tag)): Rewrite to use only std::swap in\n+\tgeneral and std::copy/std::copy_backward when safe.\n+\n 2009-11-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/future: Use base class with nested types."}, {"sha": "9b6f2afb9ec333f83fe2b1877757b55583996bb8", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e924e079b7f329afe359e91aa4db7856a387bc9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e924e079b7f329afe359e91aa4db7856a387bc9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=6e924e079b7f329afe359e91aa4db7856a387bc9", "patch": "@@ -1647,53 +1647,64 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t_ValueType;\n \n-      const _Distance __n = __last   - __first;\n-      const _Distance __k = __middle - __first;\n-      const _Distance __l = __n - __k;\n+      _Distance __n = __last   - __first;\n+      _Distance __k = __middle - __first;\n \n-      if (__k == __l)\n+      if (__k == __n - __k)\n \t{\n \t  std::swap_ranges(__first, __middle, __middle);\n \t  return;\n \t}\n \n-      const _Distance __d = std::__gcd(__n, __k);\n+      _RandomAccessIterator __p = __first;\n \n-      for (_Distance __i = 0; __i < __d; __i++)\n+      for (;;)\n \t{\n-\t  _ValueType __tmp = _GLIBCXX_MOVE(*__first);\n-\t  _RandomAccessIterator __p = __first;\n-\n-\t  if (__k < __l)\n+\t  if (__k < __n - __k)\n \t    {\n-\t      for (_Distance __j = 0; __j < __l / __d; __j++)\n+\t      if (__is_pod(_ValueType) && __k == 1)\n+\t\t{\n+\t\t  _ValueType __t = _GLIBCXX_MOVE(*__p);\n+\t\t  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);\n+\t\t  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);\n+\t\t  return;\n+\t\t}\n+\t      _RandomAccessIterator __q = __p + __k;\n+\t      for (_Distance __i = 0; __i < __n - __k; ++ __i)\n \t\t{\n-\t\t  if (__p > __first + __l)\n-\t\t    {\n-\t\t      *__p = _GLIBCXX_MOVE(*(__p - __l));\n-\t\t      __p -= __l;\n-\t\t    }\n-\n-\t\t  *__p = _GLIBCXX_MOVE(*(__p + __k));\n-\t\t  __p += __k;\n+\t\t  std::iter_swap(__p, __q);\n+\t\t  ++__p;\n+\t\t  ++__q;\n \t\t}\n+\t      __n %= __k;\n+\t      if (__n == 0)\n+\t\treturn;\n+\t      std::swap(__n, __k);\n+\t      __k = __n - __k;\n \t    }\n \t  else\n \t    {\n-\t      for (_Distance __j = 0; __j < __k / __d - 1; __j ++)\n+\t      __k = __n - __k;\n+\t      if (__is_pod(_ValueType) && __k == 1)\n \t\t{\n-\t\t  if (__p < __last - __k)\n-\t\t    {\n-\t\t      *__p = _GLIBCXX_MOVE(*(__p + __k));\n-\t\t      __p += __k;\n-\t\t    }\n-\t\t  *__p = _GLIBCXX_MOVE(*(__p - __l));\n-\t\t  __p -= __l;\n+\t\t  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));\n+\t\t  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);\n+\t\t  *__p = _GLIBCXX_MOVE(__t);\n+\t\t  return;\n \t\t}\n+\t      _RandomAccessIterator __q = __p + __n;\n+\t      __p = __q - __k;\n+\t      for (_Distance __i = 0; __i < __n - __k; ++ __i)\n+\t\t{\n+\t\t  --__p;\n+\t\t  --__q;\n+\t\t  std::iter_swap(__p, __q);\n+\t\t}\n+\t      __n %= __k;\n+\t      if (__n == 0)\n+\t\treturn;\n+\t      std::swap(__n, __k);\n \t    }\n-\n-\t  *__p = _GLIBCXX_MOVE(__tmp);\n-\t  ++__first;\n \t}\n     }\n "}]}