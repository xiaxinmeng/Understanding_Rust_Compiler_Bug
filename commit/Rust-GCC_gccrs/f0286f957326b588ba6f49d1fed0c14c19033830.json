{"sha": "f0286f957326b588ba6f49d1fed0c14c19033830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAyODZmOTU3MzI2YjU4OGJhNmY0OWQxZmVkMGMxNGMxOTAzMzgzMA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2011-10-11T18:39:51Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2011-10-11T18:39:51Z"}, "message": "tree.h (copy_ref_info): Expose existing function.\n\n2011-10-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* tree.h (copy_ref_info): Expose existing function.\n\t* tree-ssa-loop-ivopts.c (copy_ref_info): Move function to...\n\t* tree-ssa-address.c (copy_ref_info): ...here, and remove static token.\n\nFrom-SVN: r179818", "tree": {"sha": "803e8c8cc1dd3344c6f689cf8f616f8cd19d145f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/803e8c8cc1dd3344c6f689cf8f616f8cd19d145f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0286f957326b588ba6f49d1fed0c14c19033830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0286f957326b588ba6f49d1fed0c14c19033830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0286f957326b588ba6f49d1fed0c14c19033830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0286f957326b588ba6f49d1fed0c14c19033830/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efab2c5eafbe0e3d43dccd13cbc57f62a4e672f"}], "stats": {"total": 128, "additions": 70, "deletions": 58}, "files": [{"sha": "61ca1e779c3c8738ab5ac42874746b223ecbe6f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0286f957326b588ba6f49d1fed0c14c19033830", "patch": "@@ -1,3 +1,9 @@\n+2011-10-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* tree.h (copy_ref_info): Expose existing function.\n+\t* tree-ssa-loop-ivopts.c (copy_ref_info): Move function to...\n+\t* tree-ssa-address.c (copy_ref_info): ...here, and remove static token.\n+\n 2011-10-11  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-protos.h (avr_mode_code_base_reg_class): New prototype."}, {"sha": "2727ea42aadd88a784a04341f921d2f0e502fb28", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=f0286f957326b588ba6f49d1fed0c14c19033830", "patch": "@@ -832,6 +832,69 @@ copy_mem_ref_info (tree to, tree from)\n   TREE_THIS_VOLATILE (to) = TREE_THIS_VOLATILE (from);\n }\n \n+/* Copies the reference information from OLD_REF to NEW_REF, where\n+   NEW_REF should be either a MEM_REF or a TARGET_MEM_REF.  */\n+\n+void\n+copy_ref_info (tree new_ref, tree old_ref)\n+{\n+  tree new_ptr_base = NULL_TREE;\n+\n+  gcc_assert (TREE_CODE (new_ref) == MEM_REF\n+\t      || TREE_CODE (new_ref) == TARGET_MEM_REF);\n+\n+  TREE_SIDE_EFFECTS (new_ref) = TREE_SIDE_EFFECTS (old_ref);\n+  TREE_THIS_VOLATILE (new_ref) = TREE_THIS_VOLATILE (old_ref);\n+\n+  new_ptr_base = TREE_OPERAND (new_ref, 0);\n+\n+  /* We can transfer points-to information from an old pointer\n+     or decl base to the new one.  */\n+  if (new_ptr_base\n+      && TREE_CODE (new_ptr_base) == SSA_NAME\n+      && !SSA_NAME_PTR_INFO (new_ptr_base))\n+    {\n+      tree base = get_base_address (old_ref);\n+      if (!base)\n+\t;\n+      else if ((TREE_CODE (base) == MEM_REF\n+\t\t|| TREE_CODE (base) == TARGET_MEM_REF)\n+\t       && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n+\t       && SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)))\n+\t{\n+\t  struct ptr_info_def *new_pi;\n+\t  duplicate_ssa_name_ptr_info\n+\t    (new_ptr_base, SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)));\n+\t  new_pi = SSA_NAME_PTR_INFO (new_ptr_base);\n+\t  /* We have to be careful about transfering alignment information.  */\n+\t  if (TREE_CODE (old_ref) == MEM_REF\n+\t      && !(TREE_CODE (new_ref) == TARGET_MEM_REF\n+\t\t   && (TMR_INDEX2 (new_ref)\n+\t\t       || (TMR_STEP (new_ref)\n+\t\t\t   && (TREE_INT_CST_LOW (TMR_STEP (new_ref))\n+\t\t\t       < new_pi->align)))))\n+\t    {\n+\t      new_pi->misalign += double_int_sub (mem_ref_offset (old_ref),\n+\t\t\t\t\t\t  mem_ref_offset (new_ref)).low;\n+\t      new_pi->misalign &= (new_pi->align - 1);\n+\t    }\n+\t  else\n+\t    {\n+\t      new_pi->align = 1;\n+\t      new_pi->misalign = 0;\n+\t    }\n+\t  TREE_THIS_NOTRAP (new_ref) = TREE_THIS_NOTRAP (base);\n+\t}\n+      else if (TREE_CODE (base) == VAR_DECL\n+\t       || TREE_CODE (base) == PARM_DECL\n+\t       || TREE_CODE (base) == RESULT_DECL)\n+\t{\n+\t  struct ptr_info_def *pi = get_ptr_info (new_ptr_base);\n+\t  pt_solution_set_var (&pi->pt, base);\n+\t}\n+    }\n+}\n+\n /* Move constants in target_mem_ref REF to offset.  Returns the new target\n    mem ref if anything changes, NULL_TREE otherwise.  */\n "}, {"sha": "15a2dd7bc58238f12a495f63f90293f8f404a6f4", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=f0286f957326b588ba6f49d1fed0c14c19033830", "patch": "@@ -6278,64 +6278,6 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n     }\n }\n \n-/* Copies the reference information from OLD_REF to NEW_REF.  */\n-\n-static void\n-copy_ref_info (tree new_ref, tree old_ref)\n-{\n-  tree new_ptr_base = NULL_TREE;\n-\n-  TREE_SIDE_EFFECTS (new_ref) = TREE_SIDE_EFFECTS (old_ref);\n-  TREE_THIS_VOLATILE (new_ref) = TREE_THIS_VOLATILE (old_ref);\n-\n-  new_ptr_base = TREE_OPERAND (new_ref, 0);\n-\n-  /* We can transfer points-to information from an old pointer\n-     or decl base to the new one.  */\n-  if (new_ptr_base\n-      && TREE_CODE (new_ptr_base) == SSA_NAME\n-      && !SSA_NAME_PTR_INFO (new_ptr_base))\n-    {\n-      tree base = get_base_address (old_ref);\n-      if (!base)\n-\t;\n-      else if ((TREE_CODE (base) == MEM_REF\n-\t\t|| TREE_CODE (base) == TARGET_MEM_REF)\n-\t       && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n-\t       && SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)))\n-\t{\n-\t  struct ptr_info_def *new_pi;\n-\t  duplicate_ssa_name_ptr_info\n-\t    (new_ptr_base, SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0)));\n-\t  new_pi = SSA_NAME_PTR_INFO (new_ptr_base);\n-\t  /* We have to be careful about transfering alignment information.  */\n-\t  if (TREE_CODE (old_ref) == MEM_REF\n-\t      && !(TREE_CODE (new_ref) == TARGET_MEM_REF\n-\t\t   && (TMR_INDEX2 (new_ref)\n-\t\t       || (TMR_STEP (new_ref)\n-\t\t\t   && (TREE_INT_CST_LOW (TMR_STEP (new_ref))\n-\t\t\t       < new_pi->align)))))\n-\t    {\n-\t      new_pi->misalign += double_int_sub (mem_ref_offset (old_ref),\n-\t\t\t\t\t\t  mem_ref_offset (new_ref)).low;\n-\t      new_pi->misalign &= (new_pi->align - 1);\n-\t    }\n-\t  else\n-\t    {\n-\t      new_pi->align = 1;\n-\t      new_pi->misalign = 0;\n-\t    }\n-\t}\n-      else if (TREE_CODE (base) == VAR_DECL\n-\t       || TREE_CODE (base) == PARM_DECL\n-\t       || TREE_CODE (base) == RESULT_DECL)\n-\t{\n-\t  struct ptr_info_def *pi = get_ptr_info (new_ptr_base);\n-\t  pt_solution_set_var (&pi->pt, base);\n-\t}\n-    }\n-}\n-\n /* Performs a peephole optimization to reorder the iv update statement with\n    a mem ref to enable instruction combining in later phases. The mem ref uses\n    the iv value before the update, so the reordering transformation requires"}, {"sha": "534fcd6a219e992b69d5c36320207334e17c1e58", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0286f957326b588ba6f49d1fed0c14c19033830/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f0286f957326b588ba6f49d1fed0c14c19033830", "patch": "@@ -5777,6 +5777,7 @@ tree target_for_debug_bind (tree);\n /* In tree-ssa-address.c.  */\n extern tree tree_mem_ref_addr (tree, tree);\n extern void copy_mem_ref_info (tree, tree);\n+extern void copy_ref_info (tree, tree);\n \n /* In tree-vrp.c */\n extern bool ssa_name_nonnegative_p (const_tree);"}]}