{"sha": "6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5N2ZkMGJjNjNjYjQ2ODYwMzVkNGE1ZGNlODViY2Y2ZDMyZDU5OA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-05-25T09:19:37Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-05-25T09:19:37Z"}, "message": "re PR target/43610 (ICE: in prepare_float_lib_cmp, at optabs.c:4392 with -fno-trapping-math and _Decimal64 comparison)\n\n2010-05-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR target/43610\n\t* optabs.c (prepare_float_lib_cmp): Allow reversing the comparison\n\teven if !FLOAT_LIB_COMPARE_RETURNS_BOOL.  Always compute true_rtx and\n\tfalse_rtx.  Use false_rtx to compute the correct *ptest for reversed\n\tcomparisons for which !FLOAT_LIB_COMPARE_RETURNS_BOOL.\n\nFrom-SVN: r159813", "tree": {"sha": "1555c3fb36b43e61a6112500d7ef7303708c9cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1555c3fb36b43e61a6112500d7ef7303708c9cd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6597fd0bc63cb4686035d4a5dce85bcf6d32d598/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8524ba70c36f0f18208947651092dc880cf7816f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8524ba70c36f0f18208947651092dc880cf7816f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8524ba70c36f0f18208947651092dc880cf7816f"}], "stats": {"total": 108, "additions": 62, "deletions": 46}, "files": [{"sha": "28c74e278b04e8f086d7cea34d014f36d2ccb330", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6597fd0bc63cb4686035d4a5dce85bcf6d32d598/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6597fd0bc63cb4686035d4a5dce85bcf6d32d598/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "patch": "@@ -1,3 +1,11 @@\n+2010-05-09  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR target/43610\n+\t* optabs.c (prepare_float_lib_cmp): Allow reversing the comparison\n+\teven if !FLOAT_LIB_COMPARE_RETURNS_BOOL.  Always compute true_rtx and\n+\tfalse_rtx.  Use false_rtx to compute the correct *ptest for reversed\n+\tcomparisons for which !FLOAT_LIB_COMPARE_RETURNS_BOOL.\n+\n 2010-05-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (loc_descr_plus_const): When offset is negative, use"}, {"sha": "3c5424d2b59e4cbdc3e298dd77ba0d56fbeccd29", "filename": "gcc/optabs.c", "status": "modified", "additions": 54, "deletions": 46, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6597fd0bc63cb4686035d4a5dce85bcf6d32d598/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6597fd0bc63cb4686035d4a5dce85bcf6d32d598/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=6597fd0bc63cb4686035d4a5dce85bcf6d32d598", "patch": "@@ -4331,6 +4331,7 @@ prepare_float_lib_cmp (rtx x, rtx y, enum rtx_code comparison,\n   enum rtx_code reversed = reverse_condition_maybe_unordered (comparison);\n   enum machine_mode orig_mode = GET_MODE (x);\n   enum machine_mode mode, cmp_mode;\n+  rtx true_rtx, false_rtx;\n   rtx value, target, insns, equiv;\n   rtx libfunc = 0;\n   bool reversed_p = false;\n@@ -4354,8 +4355,7 @@ prepare_float_lib_cmp (rtx x, rtx y, enum rtx_code comparison,\n \t}\n \n       if (code_to_optab[reversed]\n-\t  && (libfunc = optab_libfunc (code_to_optab[reversed], mode))\n-\t  && FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, reversed))\n+\t  && (libfunc = optab_libfunc (code_to_optab[reversed], mode)))\n \t{\n \t  comparison = reversed;\n \t  reversed_p = true;\n@@ -4374,6 +4374,51 @@ prepare_float_lib_cmp (rtx x, rtx y, enum rtx_code comparison,\n   /* Attach a REG_EQUAL note describing the semantics of the libcall to\n      the RTL.  The allows the RTL optimizers to delete the libcall if the\n      condition can be determined at compile-time.  */\n+  if (comparison == UNORDERED\n+      || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n+    {\n+      true_rtx = const_true_rtx;\n+      false_rtx = const0_rtx;\n+    }\n+  else\n+    {\n+      switch (comparison)\n+        {\n+        case EQ:\n+          true_rtx = const0_rtx;\n+          false_rtx = const_true_rtx;\n+          break;\n+\n+        case NE:\n+          true_rtx = const_true_rtx;\n+          false_rtx = const0_rtx;\n+          break;\n+\n+        case GT:\n+          true_rtx = const1_rtx;\n+          false_rtx = const0_rtx;\n+          break;\n+\n+        case GE:\n+          true_rtx = const0_rtx;\n+          false_rtx = constm1_rtx;\n+          break;\n+\n+        case LT:\n+          true_rtx = constm1_rtx;\n+          false_rtx = const0_rtx;\n+          break;\n+\n+        case LE:\n+          true_rtx = const0_rtx;\n+          false_rtx = const1_rtx;\n+          break;\n+\n+        default:\n+          gcc_unreachable ();\n+        }\n+    }\n+\n   if (comparison == UNORDERED)\n     {\n       rtx temp = simplify_gen_relational (NE, cmp_mode, mode, x, x);\n@@ -4385,47 +4430,8 @@ prepare_float_lib_cmp (rtx x, rtx y, enum rtx_code comparison,\n     {\n       equiv = simplify_gen_relational (comparison, cmp_mode, mode, x, y);\n       if (! FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n-\t{\n-\t  rtx true_rtx, false_rtx;\n-\n-\t  switch (comparison)\n-\t    {\n-\t    case EQ:\n-\t      true_rtx = const0_rtx;\n-\t      false_rtx = const_true_rtx;\n-\t      break;\n-\n-\t    case NE:\n-\t      true_rtx = const_true_rtx;\n-\t      false_rtx = const0_rtx;\n-\t      break;\n-\n-\t    case GT:\n-\t      true_rtx = const1_rtx;\n-\t      false_rtx = const0_rtx;\n-\t      break;\n-\n-\t    case GE:\n-\t      true_rtx = const0_rtx;\n-\t      false_rtx = constm1_rtx;\n-\t      break;\n-\n-\t    case LT:\n-\t      true_rtx = constm1_rtx;\n-\t      false_rtx = const0_rtx;\n-\t      break;\n-\n-\t    case LE:\n-\t      true_rtx = const0_rtx;\n-\t      false_rtx = const1_rtx;\n-\t      break;\n-\n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n-\t  equiv = simplify_gen_ternary (IF_THEN_ELSE, cmp_mode, cmp_mode,\n-\t\t\t\t\tequiv, true_rtx, false_rtx);\n-\t}\n+        equiv = simplify_gen_ternary (IF_THEN_ELSE, cmp_mode, cmp_mode,\n+                                      equiv, true_rtx, false_rtx);\n     }\n \n   start_sequence ();\n@@ -4438,10 +4444,12 @@ prepare_float_lib_cmp (rtx x, rtx y, enum rtx_code comparison,\n   emit_libcall_block (insns, target, value, equiv);\n \n   if (comparison == UNORDERED\n-      || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n-    comparison = reversed_p ? EQ : NE;\n+      || FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison)\n+      || reversed_p)\n+    *ptest = gen_rtx_fmt_ee (reversed_p ? EQ : NE, VOIDmode, target, false_rtx);\n+  else\n+    *ptest = gen_rtx_fmt_ee (comparison, VOIDmode, target, const0_rtx);\n \n-  *ptest = gen_rtx_fmt_ee (comparison, VOIDmode, target, const0_rtx);\n   *pmode = cmp_mode;\n }\n \f"}]}