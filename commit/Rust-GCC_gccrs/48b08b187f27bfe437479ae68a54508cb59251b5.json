{"sha": "48b08b187f27bfe437479ae68a54508cb59251b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiMDhiMTg3ZjI3YmZlNDM3NDc5YWU2OGE1NDUwOGNiNTkyNTFiNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-27T16:31:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-27T16:31:19Z"}, "message": "[multiple changes]\n\n2014-01-27  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_rm.texi: Minor clarifications.\n\n2014-01-27  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb (Check_Internal_Call_Continue): Avoid complaining\n\tabout call that is generated as part of an Initial_Condition\n\tcheck.\n\t* sem_prag.adb: Minor spelling correction.\n\nFrom-SVN: r207136", "tree": {"sha": "593eddfe872b4cac5219f08e708af01090fab1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/593eddfe872b4cac5219f08e708af01090fab1d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b08b187f27bfe437479ae68a54508cb59251b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b08b187f27bfe437479ae68a54508cb59251b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b08b187f27bfe437479ae68a54508cb59251b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b08b187f27bfe437479ae68a54508cb59251b5/comments", "author": null, "committer": null, "parents": [{"sha": "1b8b4638bb5be8aa25032836a9ef9b1e79dc2d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b8b4638bb5be8aa25032836a9ef9b1e79dc2d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b8b4638bb5be8aa25032836a9ef9b1e79dc2d3a"}], "stats": {"total": 79, "additions": 61, "deletions": 18}, "files": [{"sha": "af3418fcaa9ae936f431e44c6422a789a50f6801", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=48b08b187f27bfe437479ae68a54508cb59251b5", "patch": "@@ -1,3 +1,14 @@\n+2014-01-27  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_rm.texi: Minor clarifications.\n+\n+2014-01-27  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elab.adb (Check_Internal_Call_Continue): Avoid complaining\n+\tabout call that is generated as part of an Initial_Condition\n+\tcheck.\n+\t* sem_prag.adb: Minor spelling correction.\n+\n 2014-01-27  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (Set_Convention_From_Pragma): Check that"}, {"sha": "54edf0491085af566de4d6e5632e979c1919064c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=48b08b187f27bfe437479ae68a54508cb59251b5", "patch": "@@ -26,8 +26,6 @@ included in the section entitled ``GNU Free Documentation License''.\n @end copying\n \n @set EDITION GNAT\n-@set DEFAULTLANGUAGEVERSION Ada 2005\n-@set NONDEFAULTLANGUAGEVERSION Ada 95\n \n @settitle GNAT Reference Manual\n \n@@ -697,15 +695,15 @@ This manual contains useful information in writing programs using the\n characteristics of @value{EDITION}, including all the information required by\n Annex M of the Ada language standard.\n \n-@value{EDITION} implements Ada 95 and Ada 2005, and it may also be invoked in\n-Ada 83 compatibility mode.\n-By default, @value{EDITION} assumes @value{DEFAULTLANGUAGEVERSION},\n+@value{EDITION} implements Ada 95, Ada 2005 and Ada 2012, and it may also be\n+invoked in Ada 83 compatibility mode.\n+By default, @value{EDITION} assumes Ada 2012,\n but you can override with a compiler switch\n to explicitly specify the language version.\n (Please refer to @ref{Compiling Different Versions of Ada,,, gnat_ugn,\n @value{EDITION} User's Guide}, for details on these switches.)\n Throughout this manual, references to ``Ada'' without a year suffix\n-apply to both the Ada 95 and Ada 2005 versions of the language.\n+apply to all the Ada versions of the language.\n \n Ada is designed to be highly portable.\n In general, a program will have the same effect even when compiled by\n@@ -2972,11 +2970,11 @@ You can use this pragma either to access a predefined @code{System}\n extension supplied with the compiler, for example @code{Aux_DEC} or\n you can construct your own extension unit following the above\n definition.  Note that such a package is a child of @code{System}\n-and thus is considered part of the implementation.  To compile\n-it you will have to use the appropriate switch for compiling\n-system units.\n-@xref{Top, @value{EDITION} User's Guide, About This Guide, gnat_ugn, @value{EDITION} User's Guide},\n-for details.\n+and thus is considered part of the implementation.\n+To compile it you will have to use the @option{-gnatg} switch,\n+or the @option{/GNAT_INTERNAL} qualifier on OpenVMS,\n+for compiling System units, as explained in the\n+@value{EDITION} User's Guide.\n \n @node Pragma Extensions_Allowed\n @unnumberedsec Pragma Extensions_Allowed"}, {"sha": "8447be198ff4f64bcb1590ffe604cae7db4786c8", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=48b08b187f27bfe437479ae68a54508cb59251b5", "patch": "@@ -2155,18 +2155,52 @@ package body Sem_Elab is\n \n       declare\n          P : Node_Id;\n+         O : Node_Id;\n+\n       begin\n          P := Parent (N);\n          loop\n+            --  Keep looking at parents if we are still in the subexpression\n+\n             if Nkind (P) in N_Subexpr then\n                P := Parent (P);\n-            elsif Nkind (P) = N_If_Statement\n-              and then Nkind (Original_Node (P)) = N_Pragma\n-              and then Present (Corresponding_Aspect (Original_Node (P)))\n-            then\n-               return;\n+\n+            --  Here P is the parent of the expression, check for special case\n+\n             else\n-               exit;\n+               O := Original_Node (P);\n+\n+               --  Definitely not the special case if orig node is not a pragma\n+\n+               exit when Nkind (O) /= N_Pragma;\n+\n+               --  Check we have an If statement or a null statement (happens\n+               --  when the If has been expanded to be True).\n+\n+               exit when not Nkind_In (P, N_If_Statement, N_Null_Statement);\n+\n+               --  Our special case will be indicated either by the pragma\n+               --  coming from an aspect ...\n+\n+               if Present (Corresponding_Aspect (O)) then\n+                  return;\n+\n+               --  Or, in the case of an initial condition, specifically by a\n+               --  Check pragma specifying an Initial_Condition check.\n+\n+               elsif Pragma_Name (O) = Name_Check\n+                 and then\n+                   Chars\n+                     (Expression (First (Pragma_Argument_Associations (O)))) =\n+                                                       Name_Initial_Condition\n+               then\n+                  return;\n+\n+               --  For anything else, we have an error\n+\n+               else\n+                  exit;\n+               end if;\n             end if;\n          end loop;\n       end;"}, {"sha": "42f3c3f91ae209e87d86dd9dd78e3ee0798d3726", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b08b187f27bfe437479ae68a54508cb59251b5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=48b08b187f27bfe437479ae68a54508cb59251b5", "patch": "@@ -2358,7 +2358,7 @@ package body Sem_Prag is\n       end if;\n \n       --  The expression is preanalyzed because it has not been moved to its\n-      --  final place yet. A direct analysis may generate sife effects and this\n+      --  final place yet. A direct analysis may generate side effects and this\n       --  is not desired at this point.\n \n       Preanalyze_And_Resolve (Expr, Standard_Boolean);"}]}