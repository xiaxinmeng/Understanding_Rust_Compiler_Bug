{"sha": "b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "node_id": "C_kwDOANBUbNoAKGIyZTFjNDliNGE0NTkyZjllOTZhZTllY2U4YWY3ZDBlNjUyN2IxOTQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-12-09T20:45:37Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-12-09T20:45:37Z"}, "message": "Fortran/OpenMP: align/allocator modifiers to the allocate clause\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.cc (show_omp_namelist): Improve OMP_LIST_ALLOCATE\n\toutput.\n\t* gfortran.h (struct gfc_omp_namelist): Add 'align' to 'u'.\n\t(gfc_free_omp_namelist): Add bool arg.\n\t* match.cc (gfc_free_omp_namelist): Likewise; free 'u.align'.\n\t* openmp.cc (gfc_free_omp_clauses, gfc_match_omp_clause_reduction,\n\tgfc_match_omp_flush): Update call.\n\t(gfc_match_omp_clauses): Match 'align/allocate modifers in\n\t'allocate' clause.\n\t(resolve_omp_clauses): Resolve align.\n\t* st.cc (gfc_free_statement): Update call\n\t* trans-openmp.cc (gfc_trans_omp_clauses): Handle 'align'.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.texi (5.1 Impl. Status): Split allocate clause/directive\n\titem about 'align'; mark clause as 'Y' and directive as 'N'.\n\t* testsuite/libgomp.fortran/allocate-2.f90: New test.\n\t* testsuite/libgomp.fortran/allocate-3.f90: New test.", "tree": {"sha": "2ff8c340654035539084af7e525b77be0a350023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ff8c340654035539084af7e525b77be0a350023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b31d13757ae0f544651c29b113ccf120573760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b31d13757ae0f544651c29b113ccf120573760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b31d13757ae0f544651c29b113ccf120573760"}], "stats": {"total": 203, "additions": 163, "deletions": 40}, "files": [{"sha": "5ae72dc1caca5e99d2b136f68713fc7e7b969a9b", "filename": "gcc/fortran/dump-parse-tree.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fdump-parse-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fdump-parse-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.cc?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -1357,6 +1357,29 @@ show_omp_namelist (int list_type, gfc_omp_namelist *n)\n \t    }\n \t  ns_iter = n->u2.ns;\n \t}\n+      if (list_type == OMP_LIST_ALLOCATE)\n+\t{\n+\t  if (n->expr)\n+\t    {\n+\t      fputs (\"allocator(\", dumpfile);\n+\t      show_expr (n->expr);\n+\t      fputc (')', dumpfile);\n+\t    }\n+\t  if (n->expr && n->u.align)\n+\t    fputc (',', dumpfile);\n+\t  if (n->u.align)\n+\t    {\n+\t      fputs (\"allocator(\", dumpfile);\n+\t      show_expr (n->u.align);\n+\t      fputc (')', dumpfile);\n+\t    }\n+\t  if (n->expr || n->u.align)\n+\t    fputc (':', dumpfile);\n+\t  fputs (n->sym->name, dumpfile);\n+\t  if (n->next)\n+\t    fputs (\") ALLOCATE(\", dumpfile);\n+\t  continue;\n+\t}\n       if (list_type == OMP_LIST_REDUCTION)\n \tswitch (n->u.reduction_op)\n \t  {"}, {"sha": "5f8a81ae4a18a70dc74d4fa49fae3ea700607a44", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -1349,6 +1349,7 @@ typedef struct gfc_omp_namelist\n       gfc_omp_reduction_op reduction_op;\n       gfc_omp_depend_doacross_op depend_doacross_op;\n       gfc_omp_map_op map_op;\n+      gfc_expr *align;\n       struct\n \t{\n \t  ENUM_BITFIELD (gfc_omp_linear_op) op:4;\n@@ -3572,7 +3573,7 @@ void gfc_free_iterator (gfc_iterator *, int);\n void gfc_free_forall_iterator (gfc_forall_iterator *);\n void gfc_free_alloc_list (gfc_alloc *);\n void gfc_free_namelist (gfc_namelist *);\n-void gfc_free_omp_namelist (gfc_omp_namelist *, bool);\n+void gfc_free_omp_namelist (gfc_omp_namelist *, bool, bool);\n void gfc_free_equiv (gfc_equiv *);\n void gfc_free_equiv_until (gfc_equiv *, gfc_equiv *);\n void gfc_free_data (gfc_data *);"}, {"sha": "7ba0f34999337724c508a182da2c23515211f37c", "filename": "gcc/fortran/match.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.cc?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -5524,13 +5524,15 @@ gfc_free_namelist (gfc_namelist *name)\n /* Free an OpenMP namelist structure.  */\n \n void\n-gfc_free_omp_namelist (gfc_omp_namelist *name, bool free_ns)\n+gfc_free_omp_namelist (gfc_omp_namelist *name, bool free_ns, bool free_align)\n {\n   gfc_omp_namelist *n;\n \n   for (; name; name = n)\n     {\n       gfc_free_expr (name->expr);\n+      if (free_align)\n+\tgfc_free_expr (name->u.align);\n       if (free_ns)\n \tgfc_free_namespace (name->u2.ns);\n       else if (name->u2.udr)"}, {"sha": "4b4e6ac6947dc51b1326828b767ab086f2e9319d", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 71, "deletions": 35, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -187,7 +187,8 @@ gfc_free_omp_clauses (gfc_omp_clauses *c)\n   gfc_free_expr (c->vector_length_expr);\n   for (i = 0; i < OMP_LIST_NUM; i++)\n     gfc_free_omp_namelist (c->lists[i],\n-\t\t\t   i == OMP_LIST_AFFINITY || i == OMP_LIST_DEPEND);\n+\t\t\t   i == OMP_LIST_AFFINITY || i == OMP_LIST_DEPEND,\n+\t\t\t   i == OMP_LIST_ALLOCATE);\n   gfc_free_expr_list (c->wait_list);\n   gfc_free_expr_list (c->tile_list);\n   free (CONST_CAST (char *, c->critical_name));\n@@ -542,7 +543,7 @@ gfc_match_omp_variable_list (const char *str, gfc_omp_namelist **list,\n   gfc_error (\"Syntax error in OpenMP variable list at %C\");\n \n cleanup:\n-  gfc_free_omp_namelist (head, false);\n+  gfc_free_omp_namelist (head, false, false);\n   gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n@@ -632,7 +633,7 @@ gfc_match_omp_to_link (const char *str, gfc_omp_namelist **list)\n   gfc_error (\"Syntax error in OpenMP variable list at %C\");\n \n cleanup:\n-  gfc_free_omp_namelist (head, false);\n+  gfc_free_omp_namelist (head, false, false);\n   gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n@@ -741,7 +742,7 @@ gfc_match_omp_doacross_sink (gfc_omp_namelist **list, bool depend)\n   gfc_error (\"Syntax error in OpenMP SINK dependence-type list at %C\");\n \n cleanup:\n-  gfc_free_omp_namelist (head, false);\n+  gfc_free_omp_namelist (head, false, false);\n   gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n@@ -1467,7 +1468,7 @@ gfc_match_omp_clause_reduction (char pc, gfc_omp_clauses *c, bool openacc,\n       *head = NULL;\n       gfc_error_now (\"!$OMP DECLARE REDUCTION %s not found at %L\",\n \t\t     buffer, &old_loc);\n-      gfc_free_omp_namelist (n, false);\n+      gfc_free_omp_namelist (n, false, false);\n     }\n   else\n     for (n = *head; n; n = n->next)\n@@ -1785,7 +1786,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \n \t      if (end_colon && gfc_match (\" %e )\", &alignment) != MATCH_YES)\n \t\t{\n-\t\t  gfc_free_omp_namelist (*head, false);\n+\t\t  gfc_free_omp_namelist (*head, false, false);\n \t\t  gfc_current_locus = old_loc;\n \t\t  *head = NULL;\n \t\t  break;\n@@ -1853,34 +1854,52 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      && gfc_match (\"allocate ( \") == MATCH_YES)\n \t    {\n \t      gfc_expr *allocator = NULL;\n+\t      gfc_expr *align = NULL;\n \t      old_loc = gfc_current_locus;\n-\t      m = gfc_match_expr (&allocator);\n-\t      if (m == MATCH_YES && gfc_match (\" : \") != MATCH_YES)\n+\t      if ((m = gfc_match (\"allocator ( %e )\", &allocator)) == MATCH_YES)\n+\t\tgfc_match (\" , align ( %e )\", &align);\n+\t      else if ((m = gfc_match (\"align ( %e )\", &align)) == MATCH_YES)\n+\t\tgfc_match (\" , allocator ( %e )\", &allocator);\n+\n+\t      if (m == MATCH_YES)\n \t\t{\n-\t\t  /* If no \":\" then there is no allocator, we backtrack\n-\t\t     and read the variable list.  */\n-\t\t  gfc_free_expr (allocator);\n-\t\t  allocator = NULL;\n-\t\t  gfc_current_locus = old_loc;\n+\t\t  if (gfc_match (\" : \") != MATCH_YES)\n+\t\t    {\n+\t\t      gfc_error (\"Expected %<:%> at %C\");\n+\t\t      goto error;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  m = gfc_match_expr (&allocator);\n+\t\t  if (m == MATCH_YES && gfc_match (\" : \") != MATCH_YES)\n+\t\t    {\n+\t\t       /* If no \":\" then there is no allocator, we backtrack\n+\t\t\t  and read the variable list.  */\n+\t\t      gfc_free_expr (allocator);\n+\t\t      allocator = NULL;\n+\t\t      gfc_current_locus = old_loc;\n+\t\t    }\n \t\t}\n-\n \t      gfc_omp_namelist **head = NULL;\n \t      m = gfc_match_omp_variable_list (\"\", &c->lists[OMP_LIST_ALLOCATE],\n \t\t\t\t\t       true, NULL, &head);\n \n \t      if (m != MATCH_YES)\n \t\t{\n \t\t  gfc_free_expr (allocator);\n+\t\t  gfc_free_expr (align);\n \t\t  gfc_error (\"Expected variable list at %C\");\n \t\t  goto error;\n \t\t}\n \n \t      for (gfc_omp_namelist *n = *head; n; n = n->next)\n-\t\tif (allocator)\n-\t\t  n->expr = gfc_copy_expr (allocator);\n-\t\telse\n-\t\t  n->expr = NULL;\n+\t\t{\n+\t\t  n->expr = (allocator) ? gfc_copy_expr (allocator) : NULL;\n+\t\t  n->u.align = (align) ? gfc_copy_expr (align) : NULL;\n+\t\t}\n \t      gfc_free_expr (allocator);\n+\t      gfc_free_expr (align);\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_AT)\n@@ -2709,7 +2728,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t    end_colon = true;\n \t\t  else if (gfc_match (\" )\") != MATCH_YES)\n \t\t    {\n-\t\t      gfc_free_omp_namelist (*head, false);\n+\t\t      gfc_free_omp_namelist (*head, false, false);\n \t\t      gfc_current_locus = old_loc;\n \t\t      *head = NULL;\n \t\t      break;\n@@ -2720,7 +2739,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t{\n \t\t  if (gfc_match (\" %e )\", &step) != MATCH_YES)\n \t\t    {\n-\t\t      gfc_free_omp_namelist (*head, false);\n+\t\t      gfc_free_omp_namelist (*head, false, false);\n \t\t      gfc_current_locus = old_loc;\n \t\t      *head = NULL;\n \t\t      goto error;\n@@ -2817,7 +2836,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t    }\n \t\t  if (has_error)\n \t\t    {\n-\t\t      gfc_free_omp_namelist (*head, false);\n+\t\t      gfc_free_omp_namelist (*head, false, false);\n \t\t      *head = NULL;\n \t\t      goto error;\n \t\t    }\n@@ -4627,14 +4646,14 @@ gfc_match_omp_flush (void)\n     {\n       gfc_error (\"List specified together with memory order clause in FLUSH \"\n \t\t \"directive at %C\");\n-      gfc_free_omp_namelist (list, false);\n+      gfc_free_omp_namelist (list, false, false);\n       gfc_free_omp_clauses (c);\n       return MATCH_ERROR;\n     }\n   if (gfc_match_omp_eos () != MATCH_YES)\n     {\n       gfc_error (\"Unexpected junk after $OMP FLUSH statement at %C\");\n-      gfc_free_omp_namelist (list, false);\n+      gfc_free_omp_namelist (list, false, false);\n       gfc_free_omp_clauses (c);\n       return MATCH_ERROR;\n     }\n@@ -7279,19 +7298,36 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   if (omp_clauses->lists[OMP_LIST_ALLOCATE])\n     {\n       for (n = omp_clauses->lists[OMP_LIST_ALLOCATE]; n; n = n->next)\n-\tif (n->expr && (n->expr->ts.type != BT_INTEGER\n-\t    || n->expr->ts.kind != gfc_c_intptr_kind))\n-\t  {\n-\t    gfc_error (\"Expected integer expression of the \"\n-\t\t       \"'omp_allocator_handle_kind' kind at %L\",\n-\t\t       &n->expr->where);\n-\t    break;\n-\t  }\n+\t{\n+\t  if (n->expr && (!gfc_resolve_expr (n->expr)\n+\t\t\t  || n->expr->ts.type != BT_INTEGER\n+\t\t\t  || n->expr->ts.kind != gfc_c_intptr_kind))\n+\t    {\n+\t      gfc_error (\"Expected integer expression of the \"\n+\t\t\t \"%<omp_allocator_handle_kind%> kind at %L\",\n+\t\t\t &n->expr->where);\n+\t      break;\n+\t    }\n+\t  if (!n->u.align)\n+\t    continue;\n+\t  int alignment = 0;\n+\t  if (!gfc_resolve_expr (n->u.align)\n+\t      || n->u.align->ts.type != BT_INTEGER\n+\t      || n->u.align->rank != 0\n+\t      || gfc_extract_int (n->u.align, &alignment)\n+\t      || alignment <= 0)\n+\t    {\n+\t      gfc_error (\"ALIGN modifier requires a scalar positive \"\n+\t\t\t \"constant integer alignment expression at %L\",\n+\t\t\t &n->u.align->where);\n+\t      break;\n+\t    }\n+\t}\n \n       /* Check for 2 things here.\n-     1.  There is no duplication of variable in allocate clause.\n-     2.  Variable in allocate clause are also present in some\n-\t privatization clase (non-composite case).  */\n+\t 1.  There is no duplication of variable in allocate clause.\n+\t 2.  Variable in allocate clause are also present in some\n+\t     privatization clase (non-composite case).  */\n       for (n = omp_clauses->lists[OMP_LIST_ALLOCATE]; n; n = n->next)\n \tn->sym->mark = 0;\n \n@@ -7308,7 +7344,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t{\n \t\t  prev->next = n->next;\n \t\t  n->next = NULL;\n-\t\t  gfc_free_omp_namelist (n, 0);\n+\t\t  gfc_free_omp_namelist (n, false, true);\n \t\t  n = prev->next;\n \t\t}\n \t      continue;"}, {"sha": "8b4ca5ec2ea033f88e8ce029e2aae4b047d45935", "filename": "gcc/fortran/st.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Fst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.cc?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -286,7 +286,7 @@ gfc_free_statement (gfc_code *p)\n       break;\n \n     case EXEC_OMP_FLUSH:\n-      gfc_free_omp_namelist (p->ext.omp_namelist, false);\n+      gfc_free_omp_namelist (p->ext.omp_namelist, false, false);\n       break;\n \n     case EXEC_OMP_BARRIER:"}, {"sha": "7a4a3390b6d712b00cd15208192473d489a524ac", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -2724,6 +2724,14 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\tallocator_ = gfc_evaluate_now (se.expr, block);\n \t\t\tOMP_CLAUSE_ALLOCATE_ALLOCATOR (node) = allocator_;\n \t\t      }\n+\t\t    if (n->u.align)\n+\t\t      {\n+\t\t\ttree align_;\n+\t\t\tgfc_init_se (&se, NULL);\n+\t\t\tgfc_conv_expr (&se, n->u.align);\n+\t\t\talign_ = gfc_evaluate_now (se.expr, block);\n+\t\t\tOMP_CLAUSE_ALLOCATE_ALIGN (node) = align_;\n+\t\t      }\n \t\t    omp_clauses = gfc_trans_add_clause (node, omp_clauses);\n \t\t  }\n \t      }"}, {"sha": "b6c1ed714cefa3d31bdcc7fbf8ea169e72427d06", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -296,8 +296,8 @@ The OpenMP 4.5 specification is fully supported.\n @item Loop transformation constructs @tab N @tab\n @item @code{strict} modifier in the @code{grainsize} and @code{num_tasks}\n       clauses of the @code{taskloop} construct @tab Y @tab\n-@item @code{align} clause/modifier in @code{allocate} directive/clause\n-      and @code{allocator} directive @tab P @tab C/C++ on clause only\n+@item @code{align} clause in @code{allocate} directive @tab N @tab\n+@item @code{align} modifier in @code{allocate} clause @tab Y @tab\n @item @code{thread_limit} clause to @code{target} construct @tab Y @tab\n @item @code{has_device_addr} clause to @code{target} construct @tab Y @tab\n @item Iterators in @code{target update} motion clauses and @code{map}"}, {"sha": "347656a8645fe052c470be19fc139950b70a3d7b", "filename": "libgomp/testsuite/libgomp.fortran/allocate-2.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-2.f90?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+use omp_lib\n+implicit none\n+integer :: q, x,y,z\n+\n+!$omp parallel  &\n+!$omp&   allocate(omp_low_lat_mem_alloc : x) &\n+!$omp&   allocate(omp_cgroup_mem_alloc : y) &\n+!$omp&   allocate(omp_pteam_mem_alloc : z) &\n+!$omp&   firstprivate(q, x,y,z)\n+!$omp end parallel\n+\n+!$omp parallel &\n+!$omp&   allocate(align ( 64 ), allocator(omp_default_mem_alloc) : x) &\n+!$omp&   allocate(allocator(omp_large_cap_mem_alloc) : y) &\n+!$omp&   allocate(allocator ( omp_high_bw_mem_alloc ) , align ( 32 ) : z) &\n+!$omp&   allocate(align (16 ): q) &\n+!$omp&   firstprivate(q, x,y,z)\n+!$omp end parallel\n+end\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel firstprivate\\\\(q\\\\) firstprivate\\\\(x\\\\) firstprivate\\\\(y\\\\) firstprivate\\\\(z\\\\) allocate\\\\(allocator\\\\(5\\\\):x\\\\) allocate\\\\(allocator\\\\(6\\\\):y\\\\) allocate\\\\(allocator\\\\(7\\\\):z\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel firstprivate\\\\(q\\\\) firstprivate\\\\(x\\\\) firstprivate\\\\(y\\\\) firstprivate\\\\(z\\\\) allocate\\\\(allocator\\\\(1\\\\),align\\\\(64\\\\):x\\\\) allocate\\\\(allocator\\\\(2\\\\):y\\\\) allocate\\\\(allocator\\\\(4\\\\),align\\\\(32\\\\):z\\\\) allocate\\\\(align\\\\(16\\\\):q\\\\)\" 1 \"original\" } }"}, {"sha": "a39819164d6ac286791e9c3a945d304868d71bff", "filename": "libgomp/testsuite/libgomp.fortran/allocate-3.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fallocate-3.f90?ref=b2e1c49b4a4592f9e96ae9ece8af7d0e6527b194", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+use omp_lib\n+implicit none\n+integer :: q, x,y,z\n+\n+!$omp parallel allocate(align ( 64 ) x)  ! { dg-error \"37:Expected ':' at\" }\n+!$omp parallel allocate(align ( 64 ), x)  ! { dg-error \"37:Expected ':' at\" }\n+!$omp parallel allocate(allocator ( omp_high_bw_mem_alloc ) x)  ! { dg-error \"60:Expected ':' at\" }\n+!$omp parallel allocate(allocator ( omp_high_bw_mem_alloc ) , x)  ! { dg-error \"60:Expected ':' at\" }\n+\n+!$omp parallel allocate( omp_high_bw_mem_alloc, align(12) : x)  ! { dg-error \"26:Expected variable list at\" }\n+!$omp parallel allocate( align(12), omp_high_bw_mem_alloc : x)  ! { dg-error \"35:Expected ':' at\" }\n+\n+!$omp parallel allocate( omp_high_bw_mem_alloc x)  ! { dg-error \"26:Expected variable list at\" }\n+\n+!$omp parallel allocate( omp_high_bw_mem_alloc , x) firstprivate(x) ! { dg-error \"'omp_high_bw_mem_alloc' specified in 'allocate' clause at \\\\(1\\\\) but not in an explicit privatization clause\" }\n+! { dg-error \"Object 'omp_high_bw_mem_alloc' is not a variable\" \"\" { target *-*-* } .-1 }\n+!$omp end parallel\n+\n+!$omp parallel allocate( omp_high_bw_mem_alloc , x) firstprivate(x, omp_high_bw_mem_alloc)\n+! { dg-error \"Object 'omp_high_bw_mem_alloc' is not a variable\" \"\" { target *-*-* } .-1 }\n+!$omp end parallel\n+\n+!$omp parallel allocate( align(q) : x) firstprivate(x) ! { dg-error \"31:ALIGN modifier requires a scalar positive constant integer alignment expression at\" }\n+!$omp end parallel\n+end"}]}