{"sha": "a0643f028e43aa2a5b09907295ecaadedac2d295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA2NDNmMDI4ZTQzYWEyYTViMDk5MDcyOTVlY2FhZGVkYWMyZDI5NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-06T18:00:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-06T18:00:15Z"}, "message": "Require equal shift amounts for IFN_DIV_POW2\n\nIFN_DIV_POW2 currently requires all elements to be shifted by the\nsame amount, in a similar way as for WIDEN_LSHIFT_EXPR.  This patch\nenforces that when building the SLP tree.\n\nIf in future targets want to support IFN_DIV_POW2 without this\nrestriction, we'll probably need the kind of vector-vector/\nvector-scalar split that we already have for normal shifts.\n\n2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-slp.c (vect_build_slp_tree_1): Require all shifts\n\tin an IFN_DIV_POW2 node to be equal.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/asrdiv_1.c: Remove trailing %s.\n\t* gcc.target/aarch64/sve/asrdiv_2.c: New test.\n\t* gcc.target/aarch64/sve/asrdiv_3.c: Likewise.\n\nFrom-SVN: r279908", "tree": {"sha": "be2c3cd841d6c76521bace096462f0309b2d060f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be2c3cd841d6c76521bace096462f0309b2d060f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0643f028e43aa2a5b09907295ecaadedac2d295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0643f028e43aa2a5b09907295ecaadedac2d295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0643f028e43aa2a5b09907295ecaadedac2d295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0643f028e43aa2a5b09907295ecaadedac2d295/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0ae3c130cd1e6beb0087a6967d33d8203f0dce"}], "stats": {"total": 87, "additions": 74, "deletions": 13}, "files": [{"sha": "80ace59709d094ae62cba83fbf6cf0fa002f9fef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0643f028e43aa2a5b09907295ecaadedac2d295", "patch": "@@ -1,3 +1,8 @@\n+2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Require all shifts\n+\tin an IFN_DIV_POW2 node to be equal.\n+\n 2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vect_check_load_store_mask): Rename to..."}, {"sha": "3e778e9181e7280a82423d3d6455b68235cc14eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0643f028e43aa2a5b09907295ecaadedac2d295", "patch": "@@ -1,3 +1,9 @@\n+2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/asrdiv_1.c: Remove trailing %s.\n+\t* gcc.target/aarch64/sve/asrdiv_2.c: New test.\n+\t* gcc.target/aarch64/sve/asrdiv_3.c: Likewise.\n+\n 2020-01-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/vect-cond-arith-8.c: New test."}, {"sha": "16638afa609cd28fec06db2c5bf489aa1e1d1991", "filename": "gcc/testsuite/gcc.target/aarch64/sve/asrdiv_1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_1.c?ref=a0643f028e43aa2a5b09907295ecaadedac2d295", "patch": "@@ -45,7 +45,7 @@ DIVMOD (64);\n /* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #33\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n \n-/* { dg-final { scan-assembler-not {\\tasr\\t%} } } */\n-/* { dg-final { scan-assembler-not {\\tlsr\\t%} } } */\n-/* { dg-final { scan-assembler-not {\\tcmplt\\t%} } } */\n-/* { dg-final { scan-assembler-not {\\tand\\t%} } } */\n+/* { dg-final { scan-assembler-not {\\tasr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tlsr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tcmplt\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\t} } } */"}, {"sha": "73f51dfa54763c898b51ec1a9a54124b3c194ad9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/asrdiv_2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_2.c?ref=a0643f028e43aa2a5b09907295ecaadedac2d295", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256\" } */\n+/* Originally from gcc.dg/vect/pr51583-3.c.  */\n+\n+int a[8], b[8];\n+\n+void\n+f3 (void)\n+{\n+  a[0] = b[0] / 8;\n+  a[1] = b[1] / 4;\n+  a[2] = b[2] / 8;\n+  a[3] = b[3] / 4;\n+  a[4] = b[4] / 8;\n+  a[5] = b[5] / 4;\n+  a[6] = b[6] / 8;\n+  a[7] = b[7] / 4;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tasrd\\t} } } */"}, {"sha": "f340d51c2e3f884d22c1c84437a464f0bfb6c58f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/asrdiv_3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fasrdiv_3.c?ref=a0643f028e43aa2a5b09907295ecaadedac2d295", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256\" } */\n+/* Originally from gcc.dg/vect/pr51583-3.c.  */\n+\n+int a[8], b[8];\n+\n+void\n+f3 (void)\n+{\n+  a[0] = b[0] / 8;\n+  a[1] = b[1] / 8;\n+  a[2] = b[2] / 8;\n+  a[3] = b[3] / 8;\n+  a[4] = b[4] / 8;\n+  a[5] = b[5] / 8;\n+  a[6] = b[6] / 8;\n+  a[7] = b[7] / 8;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tasrd\\t} 1 } } */"}, {"sha": "9cb724b95ae6a60709b23ddab67e410e56fe5ff3", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0643f028e43aa2a5b09907295ecaadedac2d295/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a0643f028e43aa2a5b09907295ecaadedac2d295", "patch": "@@ -885,7 +885,8 @@ vect_build_slp_tree_1 (unsigned char *swap,\n \t  && !vect_update_shared_vectype (stmt_info, vectype))\n \tcontinue;\n \n-      if (gcall *call_stmt = dyn_cast <gcall *> (stmt))\n+      gcall *call_stmt = dyn_cast <gcall *> (stmt);\n+      if (call_stmt)\n \t{\n \t  rhs_code = CALL_EXPR;\n \n@@ -971,6 +972,12 @@ vect_build_slp_tree_1 (unsigned char *swap,\n               need_same_oprnds = true;\n               first_op1 = gimple_assign_rhs2 (stmt);\n             }\n+\t  else if (call_stmt\n+\t\t   && gimple_call_internal_p (call_stmt, IFN_DIV_POW2))\n+\t    {\n+\t      need_same_oprnds = true;\n+\t      first_op1 = gimple_call_arg (call_stmt, 1);\n+\t    }\n \t}\n       else\n \t{\n@@ -1008,15 +1015,20 @@ vect_build_slp_tree_1 (unsigned char *swap,\n \t      continue;\n \t    }\n \n-\t  if (need_same_oprnds\n-\t      && !operand_equal_p (first_op1, gimple_assign_rhs2 (stmt), 0))\n+\t  if (need_same_oprnds)\n \t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"Build SLP failed: different shift \"\n-\t\t\t\t \"arguments in %G\", stmt);\n-\t      /* Mismatch.  */\n-\t      continue;\n+\t      tree other_op1 = (call_stmt\n+\t\t\t\t? gimple_call_arg (call_stmt, 1)\n+\t\t\t\t: gimple_assign_rhs2 (stmt));\n+\t      if (!operand_equal_p (first_op1, other_op1, 0))\n+\t\t{\n+\t\t  if (dump_enabled_p ())\n+\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t     \"Build SLP failed: different shift \"\n+\t\t\t\t     \"arguments in %G\", stmt);\n+\t\t  /* Mismatch.  */\n+\t\t  continue;\n+\t\t}\n \t    }\n \n \t  if (!load_p && rhs_code == CALL_EXPR)"}]}