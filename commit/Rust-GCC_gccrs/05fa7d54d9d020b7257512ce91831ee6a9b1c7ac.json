{"sha": "05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmYTdkNTRkOWQwMjBiNzI1NzUxMmNlOTE4MzFlZTZhOWIxYzdhYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-03T03:41:47Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-03T03:41:47Z"}, "message": "tree.h (TYPE_STRING_FLAG): Document that this field may be used on INTEGER_TYPEs to indicate that it...\n\n\n\t* tree.h (TYPE_STRING_FLAG): Document that this field may be used\n\ton INTEGER_TYPEs to indicate that it denotes a character type.\n\t* tree.c (build_common_tree_nodes): Set TYPE_STRING_FLAG on\n\tsigned_char_type_node, unsigned_char_type_node and char_type_node.\n\t* dwarf2out.c (base_type_die): Treat CHAR_TYPE identically to\n\tINTEGER_TYPE.  Use TYPE_STRING_FLAG to decide whether to emit\n\ta DW_ATE_[un]signed_char instead of a DW_ATE_[un]signed.\n\nFrom-SVN: r110536", "tree": {"sha": "aa56cac1935a048daf6a597712da5bbee56347e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa56cac1935a048daf6a597712da5bbee56347e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/comments", "author": null, "committer": null, "parents": [{"sha": "016925bc68140a35fbc0dac86841d02704fc350c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016925bc68140a35fbc0dac86841d02704fc350c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/016925bc68140a35fbc0dac86841d02704fc350c"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "103892c02c523bdd29c233816a558b42a461c78c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "patch": "@@ -1,3 +1,13 @@\n+2006-02-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.h (TYPE_STRING_FLAG): Document that this field may be used\n+\ton INTEGER_TYPEs to indicate that it denotes a character type.\n+\t* tree.c (build_common_tree_nodes): Set TYPE_STRING_FLAG on\n+\tsigned_char_type_node, unsigned_char_type_node and char_type_node.\n+\t* dwarf2out.c (base_type_die): Treat CHAR_TYPE identically to\n+\tINTEGER_TYPE.  Use TYPE_STRING_FLAG to decide whether to emit\n+\ta DW_ATE_[un]signed_char instead of a DW_ATE_[un]signed.\n+\n 2006-02-02  Zdenek Dvorak <dvorakz@suse.cz>\n \t    Daniel Berlin  <dberlin@dberlin.org>\n "}, {"sha": "3cffc4e1b2af56619cba389521be70c46154d693", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "patch": "@@ -8097,30 +8097,19 @@ base_type_die (tree type)\n \n   switch (TREE_CODE (type))\n     {\n+    case CHAR_TYPE:\n     case INTEGER_TYPE:\n-      /* Carefully distinguish the C character types, without messing\n-\t up if the language is not C. Note that we check only for the names\n-\t that contain spaces; other names might occur by coincidence in other\n-\t languages.  */\n-      if (! (TYPE_PRECISION (type) == CHAR_TYPE_SIZE\n-\t     && (TYPE_MAIN_VARIANT (type) == char_type_node\n-\t\t || ! strcmp (type_name, \"signed char\")\n-\t\t || ! strcmp (type_name, \"unsigned char\"))))\n+      if (TYPE_STRING_FLAG (type))\n \t{\n \t  if (TYPE_UNSIGNED (type))\n-\t    encoding = DW_ATE_unsigned;\n+\t    encoding = DW_ATE_unsigned_char;\n \t  else\n-\t    encoding = DW_ATE_signed;\n-\t  break;\n+\t    encoding = DW_ATE_signed_char;\n \t}\n-      /* else fall through.  */\n-\n-    case CHAR_TYPE:\n-      /* GNU Pascal/Ada CHAR type.  Not used in C.  */\n-      if (TYPE_UNSIGNED (type))\n-\tencoding = DW_ATE_unsigned_char;\n+      else if (TYPE_UNSIGNED (type))\n+\tencoding = DW_ATE_unsigned;\n       else\n-\tencoding = DW_ATE_signed_char;\n+\tencoding = DW_ATE_signed;\n       break;\n \n     case REAL_TYPE:"}, {"sha": "9e912dfbf0eba3ae1640bd95f8759c8bdd45e60e", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "patch": "@@ -6342,14 +6342,17 @@ build_common_tree_nodes (bool signed_char, bool signed_sizetype)\n \n   /* Define both `signed char' and `unsigned char'.  */\n   signed_char_type_node = make_signed_type (CHAR_TYPE_SIZE);\n+  TYPE_STRING_FLAG (signed_char_type_node) = 1;\n   unsigned_char_type_node = make_unsigned_type (CHAR_TYPE_SIZE);\n+  TYPE_STRING_FLAG (unsigned_char_type_node) = 1;\n \n   /* Define `char', which is like either `signed char' or `unsigned char'\n      but not the same as either.  */\n   char_type_node\n     = (signed_char\n        ? make_signed_type (CHAR_TYPE_SIZE)\n        : make_unsigned_type (CHAR_TYPE_SIZE));\n+  TYPE_STRING_FLAG (char_type_node) = 1;\n \n   short_integer_type_node = make_signed_type (SHORT_TYPE_SIZE);\n   short_unsigned_type_node = make_unsigned_type (SHORT_TYPE_SIZE);"}, {"sha": "13505ac43772ed2406bfb91d6708f5f53929bcfa", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fa7d54d9d020b7257512ce91831ee6a9b1c7ac/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=05fa7d54d9d020b7257512ce91831ee6a9b1c7ac", "patch": "@@ -2013,7 +2013,7 @@ struct tree_block GTY(())\n \n /* If set in an ARRAY_TYPE, indicates a string type (for languages\n    that distinguish string from array of char).\n-   If set in a SET_TYPE, indicates a bitstring type.  */\n+   If set in a INTEGER_TYPE, indicates a character type.  */\n #define TYPE_STRING_FLAG(NODE) (TYPE_CHECK (NODE)->type.string_flag)\n \n /* If non-NULL, this is an upper bound of the size (in bytes) of an"}]}