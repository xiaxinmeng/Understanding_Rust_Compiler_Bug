{"sha": "6123f29a18a77eb1a0597f403c4424ae375351fd", "node_id": "C_kwDOANBUbNoAKDYxMjNmMjlhMThhNzdlYjFhMDU5N2Y0MDNjNDQyNGFlMzc1MzUxZmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-03T09:23:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-03T09:23:34Z"}, "message": "Rotate ChangeLog files - step 2 - remove 2021 entries from ChangeLog files.\n\nCan't be committed together with the previous one due to the ChangeLog vs.\nother files restrictions.", "tree": {"sha": "a6ccc508a0fa01f19e65a2e8fada38a7089d819d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6ccc508a0fa01f19e65a2e8fada38a7089d819d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6123f29a18a77eb1a0597f403c4424ae375351fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6123f29a18a77eb1a0597f403c4424ae375351fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6123f29a18a77eb1a0597f403c4424ae375351fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6123f29a18a77eb1a0597f403c4424ae375351fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04ae83244d346b95c36c2e3d39918548310f142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04ae83244d346b95c36c2e3d39918548310f142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04ae83244d346b95c36c2e3d39918548310f142"}], "stats": {"total": 86989, "additions": 8, "deletions": 86981}, "files": [{"sha": "d8b898ac7beade5a06544567165fc6cdff73a9ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 35688, "changes": 35689, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd"}, {"sha": "3a4f03c28af89fe2829945d0e9aaff09b4ddcbdf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1, "deletions": 12131, "changes": 12132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd"}, {"sha": "26a2c67b00cce619e0509eace3aa633f04d8cb7a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 1, "deletions": 5508, "changes": 5509, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd"}, {"sha": "3a4f03c28af89fe2829945d0e9aaff09b4ddcbdf", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 1, "deletions": 1064, "changes": 1065, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd", "patch": "@@ -1,1068 +1,5 @@\n-2021-12-28  Martin Liska  <mliska@suse.cz>\n-\n-\t* gdc.texi: Use one more https.\n-\n-2021-12-28  Martin Liska  <mliska@suse.cz>\n-\n-\t* gdc.texi: Replace http:// with https.\n-\n-2021-12-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd ad8412530.\n-\t* expr.cc (ExprVisitor::visit (DeleteExp *)): Remove code generation\n-\tof _d_delstruct.\n-\t* runtime.def (DELSTRUCT): Remove.\n-\n-2021-12-15  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_init_options): Set default -fextern-std= to C++17.\n-\t* dmd/MERGE: Merge upstream dmd 93108bb9e.\n-\t* gdc.texi (Runtime Options): Document the default for -fextern-std=.\n-\n-2021-12-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/103529\n-\t* dmd/MERGE: Merge upstream dmd 3982604c5.\n-\t* Make-lang.in (D_FRONTEND_OBJS): Add d/root-optional.o.\n-\t* d-attribs.cc (build_attributes): Update for new front-end interface.\n-\t* d-codegen.cc (d_build_call): Likewise.\n-\t* d-compiler.cc (Compiler::paintAsType): Likewise.\n-\t* d-lang.cc (d_handle_option): Remove OPT_fpreview_intpromote, add\n-\thandling of OPT_frevert_intpromote.\n-\t* d-port.cc (Port::valcpy): Assert buffer is aligned.\n-\t* d-target.cc (Target::isVectorOpSupported): Update for new front-end\n-\tinterface.\n-\t* decl.cc (layout_class_initializer): Likewise.\n-\t* expr.cc (lvalue_p): Likewise.\n-\t(binop_assignment): Likewise.\n-\t(ExprVisitor::visit): Likewise.\n-\t(ExprVisitor::visit (AssignExp *)): Remove generation of _d_arrayctor\n-\tand _d_arraysetctor library helpers.\n-\t(ExprVisitor::visit (VarExp *)): Support __traits(initSymbol).\n-\t* intrinsics.cc (expand_intrinsic_rotate): Update for new front-end\n-\tinterface.\n-\t* lang.opt (fpreview=intpromote): Remove.\n-\t(frevert=intpromote): New.\n-\t* runtime.def (ARRAYCTOR): Remove.\n-\t(ARRAYSETCTOR): Remove.\n-\t* toir.cc (IRVisitor::visit): Update for new front-end interface.\n-\t* types.cc (layout_aggregate_members): Likewise.\n-\t* dmd/root/optional.d: New file.\n-\t* dmd/root/optional.h: New file.\n-\n-2021-12-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (get_symbol_decl): Align methods to MINIMUM_METHOD_BOUNDARY.\n-\n-2021-12-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* expr.cc: Call memcpy only when length != 0.\n-\n-2021-12-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 568496d5b.\n-\t* Make-lang.in (D_FRONTEND_OBJS): Add d/common-file.o,\n-\td/common-outbuffer.o, d/common-string.o, d/file_manager.o,\n-\td/importc.o.  Remove d/root-outbuffer.o.\n-\t(d/common-%.o): New recipe.\n-\t* d-builtins.cc (build_frontend_type): Update for new front-end\n-\tinterface.\n-\t(d_build_d_type_nodes): Set noreturn_type_node.\n-\t* d-codegen.cc (d_build_call): Don't call function if one of the\n-\targuments is type 'noreturn'.\n-\t(build_vthis_function): Propagate TYPE_QUAL_VOLATILE from original\n-\tfunction type.\n-\t* d-frontend.cc (eval_builtin): Update signature.\n-\t(getTypeInfoType): Likewise.\n-\t(toObjFile): New function.\n-\t* d-gimplify.cc (d_gimplify_call_expr): Always evaluate arguments from\n-\tleft to right.\n-\t* d-lang.cc (d_handle_option): Handle OPT_ftransition_in.\n-\t(d_parse_file): Don't generate D main if it is declared in user code.\n-\t* d-tree.h (CALL_EXPR_ARGS_ORDERED): Remove.\n-\t(enum d_tree_index): Add DTI_BOTTOM_TYPE.\n-\t(noreturn_type_node): New.\n-\t* decl.cc (apply_pragma_crt): Remove.\n-\t(DeclVisitor::visit): Update for new front-end interface.\n-\t(DeclVisitor::visit (PragmaDeclaration *)): Don't handle\n-\tcrt_constructor and crt_destructor pragmas.\n-\t(DeclVisitor::visit (VarDeclaration *)): Don't generate declarations\n-\tof type 'noreturn'.\n-\t(DeclVisitor::visit (FuncDeclaration *)): Stop adding parameters when\n-\t'noreturn' type has been encountered.\n-\t(get_symbol_decl): Set DECL_STATIC_CONSTRUCTOR and\n-\tDECL_STATIC_DESTRUCTOR on decl node if requested.\n-\t(aggregate_initializer_decl): Update for new front-end interface.\n-\t* expr.cc (ExprVisitor::visit (CallExp *)): Always use the 'this'\n-\tobject as the result of calling any constructor function.\n-\t(ExprVisitor::visit): Update for new front-end interface.\n-\t* gdc.texi (Runtime Options): Document -fmain and -ftransition=in.\n-\t* lang.opt (ftransition=in): New option.\n-\t* modules.cc (get_internal_fn): Update for new front-end interface.\n-\t* types.cc (TypeVisitor::visit): Likewise.\n-\t(TypeVisitor::visit (TypeNoreturn *)): Return noreturn_type_node.\n-\t(TypeVisitor::visit (TypeFunction *)): Stop adding parameters when\n-\t'notreturn' type has been encountered.  Qualify function types that\n-\treturn 'noreturn' as TYPE_QUAL_VOLATILE.\n-\n-2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/103520\n-\t* d-frontend.h (gc_disable): Declare.\n-\t* d-lang.cc (d_init_options): Disable the D runtime garbage collector\n-\tafter initializing.\n-\n-2021-12-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (D_FRONTEND_OBJS): Prefix object files from the root\n-\tpackage with root-.\n-\t(d/root-%.o): New recipe.\n-\n-2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-spec.cc (lang_specific_driver): Set SKIPOPT on -static-libstdc++\n-\tand -static-libphobos only when target supports LD_STATIC_DYNAMIC.\n-\tRemove generate_option to re-add -static-libstdc++.\n-\n-2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* gdc.texi (Runtime Options): Document -fcheckaction=, -fextern-std=,\n-\t-fpreview=, -frevert=.\n-\t(Code Generation): Document -fdump-c++-spec=, -fdump-c++-spec-verbose,\n-\t-fsave-mixins=.\n-\t(Warnings): Update list of supported -ftransitions=.\n-\n-2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd b8384668f.\n-\t* Make-lang.in (d-warn): Use strict warnings.\n-\t(DMD_WARN_CXXFLAGS): Remove.\n-\t(DMD_COMPILE): Remove.\n-\t(CHECKING_DFLAGS): Define.\n-\t(WARN_DFLAGS): Define.\n-\t(ALL_DFLAGS): Define.\n-\t(DCOMPILE.base): Define.\n-\t(DCOMPILE): Define.\n-\t(DPOSTCOMPILE): Define.\n-\t(DLINKER): Define.\n-\t(DLLINKER): Define.\n-\t(D_FRONTEND_OBJS): Add new dmd front-end objects.\n-\t(D_GENERATED_SRCS): Remove.\n-\t(D_GENERATED_OBJS): Remove.\n-\t(D_ALL_OBJS): Remove D_GENERATED_OBJS.\n-\t(d21$(exeext)): Build using DLLINKER and -static-libphobos.\n-\t(d.tags): Remove dmd/*.c and dmd/root/*.c.\n-\t(d.mostlyclean): Remove D_GENERATED_SRCS, d/idgen$(build_exeext),\n-\td/impcnvgen$(build_exeext).\n-\t(D_INCLUDES): Include $(srcdir)/d/dmd/res.\n-\t(CFLAGS-d/id.o): Remove.\n-\t(CFLAGS-d/impcnvtab.o): Remove.\n-\t(d/%.o): Build using DCOMPILE and DPOSTCOMPILE.  Update dependencies\n-\tfrom d/dmd/%.c to d/dmd/%.d.\n-\t(d/idgen$(build_exeext)): Remove.\n-\t(d/impcnvgen$(build_exeext)): Remove.\n-\t(d/id.c): Remove.\n-\t(d/id.h): Remove.\n-\t(d/impcnvtab.c): Remove.\n-\t(d/%.dmdgen.o): Remove.\n-\t(D_SYSTEM_H): Remove.\n-\t(d/idgen.dmdgen.o): Remove.\n-\t(d/impcnvgen.dmdgen.o): Remove.\n-\t* config-lang.in (boot_language): New variable.\n-\t* d-attribs.cc: Include dmd/expression.h.\n-\t* d-builtins.cc: Include d-frontend.h.\n-\t(build_frontend_type): Update for new front-end interface.\n-\t(d_eval_constant_expression): Likewise.\n-\t(d_build_builtins_module): Likewise.\n-\t(maybe_set_builtin_1): Likewise.\n-\t(d_build_d_type_nodes): Likewise.\n-\t* d-codegen.cc (d_decl_context): Likewise.\n-\t(declaration_reference_p): Likewise.\n-\t(declaration_type): Likewise.\n-\t(parameter_reference_p): Likewise.\n-\t(parameter_type): Likewise.\n-\t(get_array_length): Likewise.\n-\t(build_delegate_cst): Likewise.\n-\t(build_typeof_null_value): Likewise.\n-\t(identity_compare_p): Likewise.\n-\t(lower_struct_comparison): Likewise.\n-\t(build_filename_from_loc): Likewise.\n-\t(build_assert_call): Remove LIBCALL_SWITCH_ERROR.\n-\t(build_bounds_index_condition): Call LIBCALL_ARRAYBOUNDS_INDEXP on\n-\tbounds error.\n-\t(build_bounds_slice_condition): Call LIBCALL_ARRAYBOUNDS_SLICEP on\n-\tbounds error.\n-\t(array_bounds_check): Update for new front-end interface.\n-\t(checkaction_trap_p): Handle CHECKACTION_context.\n-\t(get_function_type): Update for new front-end interface.\n-\t(d_build_call): Likewise.\n-\t* d-compiler.cc: Remove include of dmd/scope.h.\n-\t(Compiler::genCmain): Remove.\n-\t(Compiler::paintAsType): Update for new front-end interface.\n-\t(Compiler::onParseModule): Likewise.\n-\t* d-convert.cc (convert_expr): Remove call to LIBCALL_ARRAYCAST.\n-\t(convert_for_rvalue): Update for new front-end interface.\n-\t(convert_for_assignment): Likewise.\n-\t(convert_for_condition): Likewise.\n-\t(d_array_convert): Likewise.\n-\t* d-diagnostic.cc (error): Remove.\n-\t(errorSupplemental): Remove.\n-\t(warning): Remove.\n-\t(warningSupplemental): Remove.\n-\t(deprecation): Remove.\n-\t(deprecationSupplemental): Remove.\n-\t(message): Remove.\n-\t(vtip): New.\n-\t* d-frontend.cc (global): Remove.\n-\t(Global::_init): Remove.\n-\t(Global::startGagging): Remove.\n-\t(Global::endGagging): Remove.\n-\t(Global::increaseErrorCount): Remove.\n-\t(Loc::Loc): Remove.\n-\t(Loc::toChars): Remove.\n-\t(Loc::equals): Remove.\n-\t(isBuiltin): Update for new front-end interface.\n-\t(eval_builtin): Likewise.\n-\t(getTypeInfoType): Likewise.\n-\t(inlineCopy): Remove.\n-\t* d-incpath.cc: Include d-frontend.h.\n-\t(add_globalpaths): Call d_gc_malloc to allocate Strings.\n-\t(add_filepaths): Likewise.\n-\t* d-lang.cc: Include dmd/id.h, dmd/root/file.h, d-frontend.h.  Remove\n-\tinclude of dmd/mars.h, id.h.\n-\t(entrypoint_module): Remove.\n-\t(entrypoint_root_module): Remove.\n-\t(deps_write_string): Update for new front-end interface.\n-\t(deps_write): Likewise.\n-\t(d_init_options): Call rt_init.  Remove setting global params that are\n-\tdefault initialized by the front-end.\n-\t(d_handle_option): Handle OPT_fcheckaction_, OPT_fdump_c___spec_,\n-\tOPT_fdump_c___spec_verbose, OPT_fextern_std_, OPT_fpreview,\n-\tOPT_revert, OPT_fsave_mixins_, and OPT_ftransition.\n-\t(d_post_options): Propagate dip1021 and dip1000 preview flags to\n-\tdip25, and flag_diagnostics_show_caret to printErrorContext.\n-\t(d_add_entrypoint_module): Remove.\n-\t(d_parse_file): Update for new front-end interface.\n-\t(d_type_promotes_to): Likewise.\n-\t(d_types_compatible_p): Likewise.\n-\t* d-longdouble.cc (CTFloat::zero): Remove.\n-\t(CTFloat::one): Remove.\n-\t(CTFloat::minusone): Remove.\n-\t(CTFloat::half): Remove.\n-\t* d-system.h (POSIX): Remove.\n-\t(realpath): Remove.\n-\t(isalpha): Remove.\n-\t(isalnum): Remove.\n-\t(isdigit): Remove.\n-\t(islower): Remove.\n-\t(isprint): Remove.\n-\t(isspace): Remove.\n-\t(isupper): Remove.\n-\t(isxdigit): Remove.\n-\t(tolower): Remove.\n-\t(_mkdir): Remove.\n-\t(INT32_MAX): Remove.\n-\t(INT32_MIN): Remove.\n-\t(INT64_MIN): Remove.\n-\t(UINT32_MAX): Remove.\n-\t(UINT64_MAX): Remove.\n-\t* d-target.cc: Include calls.h.\n-\t(target): Remove.\n-\t(define_float_constants): Remove initialization of snan.\n-\t(Target::_init): Update for new front-end interface.\n-\t(Target::isVectorTypeSupported): Likewise.\n-\t(Target::isVectorOpSupported): Remove cases for unordered operators.\n-\t(TargetCPP::typeMangle): Update for new front-end interface.\n-\t(TargetCPP::parameterType): Likewise.\n-\t(Target::systemLinkage): Likewise.\n-\t(Target::isReturnOnStack): Likewise.\n-\t(Target::isCalleeDestroyingArgs): Define.\n-\t(Target::preferPassByRef): Define.\n-\t* d-tree.h (d_add_entrypoint_module): Remove.\n-\t* decl.cc (gcc_attribute_p): Update for new front-end interface.\n-\t(apply_pragma_crt): Define.\n-\t(DeclVisitor::visit(PragmaDeclaration *)): Handle pragmas\n-\tcrt_constructor and crt_destructor.\n-\t(DeclVisitor::visit(TemplateDeclaration *)): Update for new front-end\n-\tinterface.\n-\t(DeclVisitor::visit): Likewise.\n-\t(DeclVisitor::finish_vtable): Likewise.\n-\t(get_symbol_decl): Error if template has more than one nesting\n-\tcontext.  Update for new front-end interface.\n-\t(make_thunk): Update for new front-end interface.\n-\t(get_vtable_decl): Likewise.\n-\t* expr.cc (ExprVisitor::visit): Likewise.\n-\t(build_return_dtor): Likewise.\n-\t* imports.cc (ImportVisitor::visit): Likewise.\n-\t* intrinsics.cc: Include dmd/expression.h.  Remove include of\n-\tdmd/mangle.h.\n-\t(maybe_set_intrinsic): Update for new front-end interface.\n-\t* intrinsics.def (INTRINSIC_ROL): Update intrinsic signature.\n-\t(INTRINSIC_ROR): Likewise.\n-\t(INTRINSIC_ROR_TIARG): Likewise.\n-\t(INTRINSIC_TOPREC): Likewise.\n-\t(INTRINSIC_TOPRECL): Likewise.\n-\t(INTRINSIC_TAN): Update intrinsic module and signature.\n-\t(INTRINSIC_ISNAN): Likewise.\n-\t(INTRINSIC_ISFINITE): Likewise.\n-\t(INTRINSIC_COPYSIGN): Define intrinsic.\n-\t(INTRINSIC_COPYSIGNI): Define intrinsic.\n-\t(INTRINSIC_EXP): Update intrinsic module.\n-\t(INTRINSIC_EXPM1): Likewise.\n-\t(INTRINSIC_EXP2): Likewise.\n-\t(INTRINSIC_LOG): Likewise.\n-\t(INTRINSIC_LOG2): Likewise.\n-\t(INTRINSIC_LOG10): Likewise.\n-\t(INTRINSIC_POW): Likewise.\n-\t(INTRINSIC_ROUND): Likewise.\n-\t(INTRINSIC_FLOORF): Likewise.\n-\t(INTRINSIC_FLOOR): Likewise.\n-\t(INTRINSIC_FLOORL): Likewise.\n-\t(INTRINSIC_CEILF): Likewise.\n-\t(INTRINSIC_CEIL): Likewise.\n-\t(INTRINSIC_CEILL): Likewise.\n-\t(INTRINSIC_TRUNC): Likewise.\n-\t(INTRINSIC_FMIN): Likewise.\n-\t(INTRINSIC_FMAX): Likewise.\n-\t(INTRINSIC_FMA): Likewise.\n-\t(INTRINSIC_VA_ARG): Update intrinsic signature.\n-\t(INTRINSIC_VASTART): Likewise.\n-\t* lang.opt (fcheck=): Add alternate aliases for contract switches.\n-\t(fcheckaction=): New option.\n-\t(check_action): New Enum and EnumValue entries.\n-\t(fdump-c++-spec-verbose): New option.\n-\t(fdump-c++-spec=): New option.\n-\t(fextern-std=): New option.\n-\t(extern_stdcpp): New Enum and EnumValue entries\n-\t(fpreview=): New options.\n-\t(frevert=): New options.\n-\t(fsave-mixins): New option.\n-\t(ftransition=): Update options.\n-\t* modules.cc (get_internal_fn): Replace Prot with Visibility.\n-\t(build_internal_fn): Likewise.\n-\t(build_dso_cdtor_fn): Likewise.\n-\t(build_module_tree): Remove check for __entrypoint module.\n-\t* runtime.def (P5): Define.\n-\t(ARRAYBOUNDS_SLICEP): Define.\n-\t(ARRAYBOUNDS_INDEXP): Define.\n-\t(NEWTHROW): Define.\n-\t(ADCMP2): Remove.\n-\t(ARRAYCAST): Remove.\n-\t(SWITCH_STRING): Remove.\n-\t(SWITCH_USTRING): Remove.\n-\t(SWITCH_DSTRING): Remove.\n-\t(SWITCH_ERROR): Remove.\n-\t* toir.cc (IRVisitor::visit): Update for new front-end interface.\n-\t(IRVisitor::check_previous_goto): Remove checks for case and default\n-\tstatements.\n-\t(IRVisitor::visit(SwitchStatement *)): Remove handling of string\n-\tswitch conditions.\n-\t* typeinfo.cc: Include d-frontend.h.\n-\t(get_typeinfo_kind): Update for new front-end interface.\n-\t(make_frontend_typeinfo): Likewise.\n-\t(TypeInfoVisitor::visit): Likewise.\n-\t(builtin_typeinfo_p): Likewise.\n-\t(get_typeinfo_decl): Likewise.\n-\t(build_typeinfo): Likewise.\n-\t* types.cc (valist_array_p): Likewise.\n-\t(make_array_type): Likewise.\n-\t(merge_aggregate_types): Likewise.\n-\t(TypeVisitor::visit(TypeBasic *)): Likewise.\n-\t(TypeVisitor::visit(TypeFunction *)): Likewise.\n-\t(TypeVisitor::visit(TypeStruct *)): Update comment.\n-\t* verstr.h: Removed.\n-\t* d-frontend.h: New file.\n-\n-2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n-\n-\tPR other/103021\n-\t* Make-lang.in: Use ETAGS variable in TAGS target.\n-\n-2021-11-28  Martin Liska  <mliska@suse.cz>\n-\n-\t* d-attribs.cc (parse_optimize_options): Fix thinko.\n-\n-2021-11-26  Martin Liska  <mliska@suse.cz>\n-\n-\t* d-attribs.cc (parse_optimize_options): Check index before\n-\taccessing cl_options.\n-\n-2021-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (d_finish_decl): Use HOST_WIDE_INT for type size\n-\ttemporaries.\n-\n-2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n-\n-\tPR other/102663\n-\t* Make-lang.in: Allow dvi-formatted documentation\n-\tto be installed.\n-\n-2021-10-08  Martin Liska  <mliska@suse.cz>\n-\n-\t* d-lang.cc (d_post_options): Use new macro\n-\tOPTION_SET_P.\n-\n-2021-10-05  Iain Sandoe  <iain@sandoe.co.uk>\n-\n-\t* d-spec.cc (lang_specific_driver): Push the -static-libstdc++\n-\toption back onto the command line for targets without support\n-\tfor -Bstatic/dynamic.\n-\n-2021-10-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/102574\n-\t* d-spec.cc (lang_specific_driver): Link libstdc++ statically if\n-\t-static-libstdc++ was given on command-line.\n-\n-2021-10-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc (d_handle_optimize_attribute): Save target node before\n-\tcalling parse_optimize_options in case it changes.\n-\n-2021-09-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/102185\n-\t* d-builtins.cc (d_eval_constant_expression): Don't include\n-\tterminating null pointer in string expression conversion.\n-\n-2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc: Include dmd/module.h.\n-\t(build_filename_from_loc): New function.\n-\t(d_assert_call): Rename to...\n-\t(build_assert_call): ...this.\n-\t(build_array_bounds_call): Call arrayboundsp variant of the array\n-\tbounds failure callback.\n-\t(build_bounds_condition): Rename to...\n-\t(build_bounds_index_condition): ...this.  Update signature.\n-\t(build_bounds_slice_condition): New function.\n-\t(checkaction_trap_p): New function.\n-\t(d_assert_call): Call assertp variant of assert failure callback.\n-\t* d-tree.h (class IndexExp): Declare.\n-\t(class SliceExp): Declare.\n-\t(build_bounds_condition): Remove.\n-\t(build_assert_call): Declare.\n-\t(build_bounds_index_condition): Declare.\n-\t(build_bounds_slice_condition): Declare.\n-\t(checkaction_trap_p): Declare.\n-\t(d_assert_call): Remove.\n-\t* expr.cc (ExprVisitor::visit(IndexExp *)): Call\n-\tbuild_bounds_index_condition.\n-\t(ExprVisitor::visit(SliceExp *)): Call build_bounds_slice_condition.\n-\t(ExprVisitor::visit(AssertExp *)): Update setting of libcall.\n-\t* runtime.cc (enum d_libcall_type): Add LCT_IMMUTABLE_CHARPTR.\n-\t(get_libcall_type): Handle LCT_IMMUTABLE_CHARPTR.\n-\t* runtime.def (ASSERT): Rename to...\n-\t(ASSERTP): ...this.  Update signature.\n-\t(UNITTEST): Rename to...\n-\t(UNITTESTP): ...this.  Update signature.\n-\t(ARRAY_BOUNDS): Rename to...\n-\t(ARRAYBOUNDSP): ...this.  Updates signature.\n-\t* toir.cc (IRVisitor::visit(SwitchErrorStatement *)): Update call.\n-\n-2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* typeinfo.cc (class TypeInfoVisitor::layout_base): Update comment.\n-\n-2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* typeinfo.cc (TypeInfoVisitor::visit(TypeInfoClassDeclaration *)):\n-\tUse int to store type flags.\n-\t(TypeInfoVisitor::visit(TypeInfoStructDeclaration *)): Likewise.\n-\n-2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* types.cc (TypeVisitor::visit(TypeEnum*)): Get wchar_t type from\n-\tbuild_frontend_type.\n-\n-2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-convert.cc (convert_for_rvalue): Convert switch statement into if\n-\tcondition.\n-\n-2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (d_init_versions): Use POINTER_SIZE for testing\n-\twhether to predefine D_LP64.\n-\n-2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/102094\n-\t* d-codegen.cc (build_frame_type): Set TYPE_CXX_ODR_P.\n-\n-2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n-\n-\tPR other/93067\n-\t* d-lang.cc (d_input_charset_callback): New function.\n-\t(d_init): Call new function\n-\tdiagnostic_initialize_input_context().\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc (binary_op): Remove dead code.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoClassDeclaration *)):\n-\tAlways layout initializer for the m_RTInfo field.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc (ExprVisitor::visit (AssertExp *)): Don't generate\n-\tPREDICT_EXPR.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* expr.cc (ExprVisitor::visit (AssignExp *)): Clarify comment\n-\t  for generating static array assignment with literal.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (enum_initializer_decl): Only handle named enums.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (make_thunk): Set COMDAT and visibility of thunks only if\n-\tthey are public.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* decl.cc (DeclVisitor::visit (StructDeclaration *)): Don't use sinit\n-\tfor declaration directly.\n-\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n-\t(aggregate_initializer_decl): Likewise.  Set sinit after creating.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (build_frontend_type): Use Identifier::idPool to\n-\tgenerate anonymous field name.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* types.cc (layout_aggregate_type): Call hasMonitor.\n-\t* typeinfo.cc (TypeInfoVisitor::layout_base): Likewise.\n-\t(layout_cpp_typeinfo): Likewise.  Don't emit vtable unless\n-\thave_typeinfo_p.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (deps_add_target): Insert null terminator in buffer.\n-\t(deps_write): Likewise.\n-\t(d_parse_file): Likewise.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (build_frontend_type): Restore builtin_converted_decls\n-\tlength on conversion failure.\n-\n-2021-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc (d_nested_class): Rename to ...\n-\t(get_outer_function): ... this.  Handle all aggregate declarations.\n-\t(d_nested_struct): Remove.\n-\t(find_this_tree): Use get_outer_function.\n-\t(get_framedecl): Likewise.\n-\n-2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101672\n-\t* typeinfo.cc (make_frontend_typeinfo): Generate Object class if it\n-\tdoesn't exist.\n-\t(check_typeinfo_type): Don't warn if there's no location.\n-\n-2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101664\n-\t* expr.cc (ExprVisitor::visit (CallExp *)): Use object expression as\n-\tresult for C++ constructor calls.\n-\n-2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/96435\n-\t* d-convert.cc (convert_for_rvalue): New function.\n-\t* d-tree.h (convert_for_rvalue): Declare.\n-\t* expr.cc (ExprVisitor::visit (CastExp *)): Use convert_for_rvalue.\n-\t(build_return_dtor): Likewise.\n-\n-2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101657\n-\t* d-lang.cc (d_parse_file): Remove generated D header files on error.\n-\n-2021-07-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101656\n-\t* d-diagnostic.cc (escape_d_format): Don't escape quoted format\n-\tstrings.\n-\n-2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101640\n-\t* expr.cc (binary_op): Use build2 instead of fold_build2.\n-\n-2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101490\n-\t* dmd/MERGE: Merge upstream dmd 27e388b4c.\n-\t* d-codegen.cc (build_array_index): Handle void arrays same as byte.\n-\t* d-convert.cc (convert_expr): Handle converting to zero-sized arrays.\n-\n-2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101441\n-\t* dmd/MERGE: Merge upstream dmd f8c1ca928.\n-\n-2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101127\n-\t* d-builtins.cc (d_builtin_function_ext_scope): New function.\n-\t* d-lang.cc (LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE): Define.\n-\t* d-tree.h (d_builtin_function_ext_scope): Declare.\n-\n-2021-07-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101619\n-\t* dmd/MERGE: Merge upstream dmd 1d8386a63.\n-\n-2021-07-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101273\n-\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Detect returns that\n-\tuse a temporary, and replace with return value.\n-\n-2021-07-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/101282\n-\t* d-codegen.cc (build_assign): Force target_expr on RHS for non-POD\n-\tassignment expressions.\n-\n-2021-06-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/100999\n-\t* dmd/MERGE: Merge upstream dmd 7a3808254.\n-\n-2021-06-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/100967\n-\t* d-frontend.cc (getTypeInfoType): Move TypeInfo checks to\n-\tcheck_typeinfo_type and call new function.\n-\t* d-tree.h (check_typeinfo_type): Declare.\n-\t* typeinfo.cc: Include dmd/scope.h.\n-\t(create_frontend_tinfo_types): Generate front-end types even if Object\n-\tis missing.\n-\t(build_typeinfo): Move TypeInfo checks to check_typeinfo_type and call\n-\tnew function.\n-\t(check_typeinfo_type): New function.\n-\n-2021-06-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/100964\n-\t* dmd/MERGE: Merge upstream dmd 4a4e46a6f.\n-\n-2021-06-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/100935\n-\t* dmd/MERGE: Merge upstream dmd f3fdeb578.\n-\n-2021-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/100882\n-\t* d-codegen.cc (build_assign): Construct initializations inside\n-\tTARGET_EXPR_INITIAL.\n-\t(compound_expr): Remove intermediate expressions that have no\n-\tside-effects.\n-\t(return_expr): Construct returns inside TARGET_EXPR_INITIAL.\n-\t* expr.cc (ExprVisitor::visit (CallExp *)): Remove useless assignment\n-\tto TARGET_EXPR_SLOT.\n-\n-2021-05-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-incpath.cc (prefixed_path): Use filename_ncmp instead of strncmp.\n-\n-2021-05-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* types.cc (TypeVisitor::visit (TypeEnum *)): Use startswith function\n-\tinstead of strncmp.\n-\n-2021-05-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/dinterpret.c (evaluateIfBuiltin): Revert last change.\n-\t* dmd/dmangle.c: Likewise.\n-\t* dmd/hdrgen.c: Likewise.\n-\t* dmd/identifier.c (Identifier::toHChars2): Likewise.\n-\n-2021-05-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd b7d146c4c.\n-\n-2021-05-10  Martin Liska  <mliska@suse.cz>\n-\n-\t* d-builtins.cc (do_build_builtin_fn): Use startswith\n-\tfunction instead of strncmp.\n-\t* dmd/dinterpret.c (evaluateIfBuiltin): Likewise.\n-\t* dmd/dmangle.c: Likewise.\n-\t* dmd/hdrgen.c: Likewise.\n-\t* dmd/identifier.c (Identifier::toHChars2): Likewise.\n-\n-2021-04-19  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/98457\n-\t* d-diagnostic.cc (expand_d_format): Handle escaped backticks.\n-\t(escape_d_format): New funtion.\n-\t(verror): Call escape_d_format on prefixing strings.\n-\t(vdeprecation): Likewise.\n-\n-2021-04-17  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/99914\n-\t* d-target.def (d_templates_always_comdat): New hook.\n-\t* d-tree.h (mark_needed): Remove prototype.\n-\t* decl.cc: Include d-target.h.\n-\t(mark_needed): Rename to...\n-\t(d_mark_needed): ...this.  Make static.\n-\t(set_linkage_for_decl): Put variables in comdat if\n-\td_templates_always_comdat.\n-\n-2021-04-17  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.cc (d_handle_target_object_format): New function.\n-\t(d_language_target_info): Add d_handle_target_object_format as handler\n-\tfor objectFormat key.\n-\t(Target::getTargetInfo): Continue if handler returned NULL_TREE.\n-\n-2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.cc (Target::_init): Call new targetdm hook to register OS\n-\tspecific target info keys.\n-\t* d-target.def (d_register_os_target_info): New hook.\n-\n-2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (d_add_builtin_version): Remove all setting of\n-\ttarget-specific global.params.\n-\t* typeinfo.cc (create_typeinfo): Don't add argType fields to\n-\tTypeInfo_Struct.\n-\n-2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/99914\n-\t* decl.cc (DeclVisitor::visit (StructDeclaration *)): Don't set\n-\tDECL_INSTANTIATED on static initializer declarations.\n-\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (EnumDeclaration *)): Likewise.\n-\t(d_finish_decl): Move call to set_linkage_for_decl to...\n-\t(declare_extern_var): ...here.\n-\n-2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.cc (Target::_init): Call new targetdm hook to register CPU\n-\tspecific target info keys.\n-\t* d-target.def (d_register_cpu_target_info): New hook.\n-\n-2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-target.cc (Target::systemLinkage): Return LINKwindows if\n-\td_has_stdcall_convention applies to LINKsystem.\n-\t* d-target.def (d_has_stdcall_convention): New hook.\n-\t* types.cc (TypeVisitor::visit (TypeFunction *)): Insert \"stdcall\"\n-\tfunction attribute if d_has_stdcall_convention applies to LINKwindows.\n-\n-2021-04-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 0450061c8.\n-\n-2021-04-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-attribs.cc: Include fold-const.h and opts.h.\n-\t(attr_noreturn_exclusions): Add alloc_size.\n-\t(attr_const_pure_exclusions): Likewise.\n-\t(attr_inline_exclusions): Add target_clones.\n-\t(attr_noinline_exclusions): Rename forceinline to always_inline.\n-\t(attr_target_exclusions): New array.\n-\t(attr_target_clones_exclusions): New array.\n-\t(attr_alloc_exclusions): New array.\n-\t(attr_cold_hot_exclusions): New array.\n-\t(d_langhook_common_attribute_table): Add new D attribute handlers.\n-\t(build_attributes): Update to look for gcc.attributes.  Issue warning\n-\tif not given a struct literal.  Handle void initialized arguments.\n-\t(handle_always_inline_attribute): Remove function.\n-\t(d_handle_noinline_attribute): Don't extract TYPE_LANG_FRONTEND.\n-\t(d_handle_forceinline_attribute): Rename to...\n-\t(d_handle_always_inline_attribute): ...this.  Remove special handling.\n-\t(d_handle_flatten_attribute): Don't extract TYPE_LANG_FRONTEND.\n-\t(d_handle_target_attribute): Likewise.  Warn about empty arguments.\n-\t(d_handle_target_clones_attribute): New function.\n-\t(optimize_args): New static variable.\n-\t(parse_optimize_options): New function.\n-\t(d_handle_optimize_attribute): New function.\n-\t(d_handle_noclone_attribute): Don't extract TYPE_LANG_FRONTEND.\n-\t(d_handle_alias_attribute): Remove function.\n-\t(d_handle_noicf_attribute): New function.\n-\t(d_handle_noipa_attribute): New function.\n-\t(d_handle_section_attribute): Call the handle_generic_attribute target\n-\thook after performing target independent processing.\n-\t(d_handle_symver_attribute): New function.\n-\t(d_handle_noplt_attribute): New function.\n-\t(positional_argument): New function.\n-\t(d_handle_alloc_size_attribute): New function.\n-\t(d_handle_cold_attribute): New function.\n-\t(d_handle_restrict_attribute): New function.\n-\t(d_handle_used_attribute): New function.\n-\t* decl.cc (gcc_attribute_p): Update to look for gcc.attributes.\n-\t(get_symbol_decl): Update decl source location of old prototypes to\n-\tthe new declaration being merged.\n-\t* types.cc (layout_aggregate_members): Apply user defined attributes\n-\ton fields.\n-\n-2021-04-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/99917\n-\t* dmd/MERGE: Merge upstream dmd d16195406.\n-\n-2021-04-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-codegen.cc (build_frame_type): Use Array::find to get index of\n-\telement.\n-\n-2021-04-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-diagnostic.cc (vwarning): Increment gaggedWarnings if warning\n-\tmessage\twas suppressed.\n-\t(vdeprecation): Likewise for deprecation messages.\n-\n-2021-04-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 5cc71ff83.\n-\n-2021-04-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/99914\n-\t* d-lang.cc (d_init): Disable flag_weak_templates if no support for\n-\tweak or one-only symbols.\n-\t* d-tree.h (VAR_OR_FUNCTION_DECL_CHECK): New macro.\n-\t(DECL_INSTANTIATED): New macro.\n-\t(d_comdat_linkage): Remove declaration.\n-\t(d_linkonce_linkage): Remove declaration.\n-\t(set_linkage_for_decl): New declaration.\n-\t* decl.cc (DeclVisitor::visit (StructDeclaration *)): Replace call to\n-\td_linkonce_linkage with setting DECL_INSTANTIATED.\n-\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (EnumDeclaration *)): Likewise.\n-\t(DeclVisitor::visit (InterfaceDeclaration *)): Remove call to\n-\td_linkonce_linkage.\n-\t(get_symbol_decl): Call set_linkage_for_decl instead of\n-\td_linkonce_linkage.\n-\t(d_finish_decl): Call set_linkage_for_decl.\n-\t(d_comdat_linkage): Made function static.  Only set DECL_COMDAT for\n-\tDECL_INSTANTIATED decls.\n-\t(d_linkonce_linkage): Remove function.\n-\t(d_weak_linkage): New function.\n-\t(set_linkage_for_decl): New function.\n-\t* gdc.texi (Runtime Options): Rename -fno-weak to -fno-weak-templates,\n-\tupdate documentation of option.\n-\t* lang.opt (fweak): Rename option to ...\n-\t(fweak-templates): ... this.  Update help string.\n-\t* modules.cc (get_internal_fn): Add Prot parameter.  Set generated\n-\tfunction flag.\n-\t(build_internal_fn): Update call to get_internal_fn.\n-\t(build_dso_cdtor_fn): Likewise.\n-\t(register_moduleinfo): Call d_finish_decl on dso_slot_node and\n-\tdso_initialized_node.\n-\t* typeinfo.cc (TypeInfoVisitor::internal_reference): Call\n-\tset_linkage_for_decl instead of d_comdat_linkage.\n-\t(TypeInfoDeclVisitor::visit (TypeInfoDeclaration *)): Remove calls to\n-\td_linkonce_linkage and d_comdat_linkage.\n-\t(get_cpp_typeinfo_decl): Likewise.\n-\n-2021-04-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 3b808e838.\n-\t* Make-lang.in (D_FRONTEND_OBJS): Add d/chkformat.o.\n-\t* d-codegen.cc (build_struct_literal): Handle special enums.\n-\t* d-convert.cc (convert_expr): Handle noreturn type.\n-\t(convert_for_condition): Likewise.\n-\t* d-target.cc (Target::_init): Set type for wchar_t.\n-\t(TargetCPP::derivedClassOffset): New method.\n-\t(Target::libraryObjectMonitors): New method.\n-\t* decl.cc (get_symbol_decl): Set TREE_THIS_VOLATILE for functions of\n-\ttype noreturn.\n-\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Handle returning\n-\tnoreturn types.\n-\t* types.cc (TypeVisitor::visit (TypeNoreturn *)): New method.\n-\t(TypeVisitor::visit (TypeEnum *)): Handle special enums.\n-\n-2021-03-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-builtins.cc (d_init_versions): Predefine D_PIE if flag_pie is set.\n-\n-2021-03-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_enum_underlying_base_type): New function.\n-\t(LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE): Set as\n-\td_enum_underlying_base_type.\n-\n-2021-03-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* Make-lang.in (DMDGEN_COMPILE): Remove.\n-\t(d/%.dmdgen.o): Use COMPILER_FOR_BUILD and BUILD_COMPILERFLAGS to\n-\tbuild all D generator programs.\n-\t(D_SYSTEM_H): New macro.\n-\t(d/idgen.dmdgen.o): Add dependencies to build.\n-\t(d/impcnvgen.dmdgen.o): Likewise.\n-\t* d-system.h: Include bconfig.h if GENERATOR_FILE is defined.\n-\n-2021-03-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* config-lang.in (gtfiles): Remove modules.cc.\n-\t* modules.cc (struct module_info): Remove GTY marker.\n-\t(static_ctor_list): Remove variable.\n-\t(static_dtor_list): Remove variable.\n-\t(register_moduleinfo): Directly set DECL_STATIC_CONSTRUCTOR on\n-\tdso_ctor, and DECL_STATIC_DESTRUCTOR on dso_dtor.\n-\t(d_finish_compilation): Remove static ctor/dtor handling.\n-\n-2021-03-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-lang.cc (d_init_options_struct): Don't set default\n-\tflag_complex_method.\n-\n-2021-03-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/99337\n-\t* dmd/MERGE: Merge upstream dmd a3c9bf422.\n-\n-2021-02-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 7132b3537.\n-\t* Make-lang.in (D_FRONTEND_OBJS): Add d/dsymbolsem.o, d/semantic2.o,\n-\td/semantic3.o, and d/templateparamsem.o.\n-\t* d-compiler.cc (Compiler::genCmain): Update calls to semantic\n-\tentrypoint functions.\n-\t* d-lang.cc (d_parse_file): Likewise.\n-\t* typeinfo.cc (make_frontend_typeinfo): Likewise.\n-\n-2021-02-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* d-tree.h (DEF_D_INTRINSIC): Don't insert INTRINSIC_ into the\n-\tintrinsic code name.\n-\t* intrinsics.cc (DEF_D_INTRINSIC): Don't insert INTRISIC_ and\n-\tBUILT_IN_ into the intrinsic and built-in code names.\n-\t* intrinsics.def:  Explicitly use full intrinsic and built-in\n-\tcodes in all definitions.\n-\n-2021-02-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 46133f761.\n-\t* d-builtins.cc (d_build_builtins_module): Set builtins as BUILTINgcc.\n-\t(maybe_set_builtin_1): Likewise.\n-\t* d-frontend.cc (eval_builtin): Adjust condition for early return.\n-\t* intrinsics.cc (maybe_set_intrinsic): Set intrinsics as BUILTINgcc.\n-\t(maybe_expand_intrinsic): Add case for INTRINSIC_BSWAP16.\n-\t* intrinsics.def (INTRINSIC_BT): Update signature.\n-\t(INTRINSIC_BT64): Likewise.\n-\t(INTRINSIC_BSWAP16): New intrinsic.\n-\t(INTRINSIC_VLOAD8): Update module.\n-\t(INTRINSIC_VLOAD16): Likewise.\n-\t(INTRINSIC_VLOAD32): Likewise.\n-\t(INTRINSIC_VLOAD64): Likewise.\n-\t(INTRINSIC_VSTORE8): Likewise.\n-\t(INTRINSIC_VSTORE16): Likewise.\n-\t(INTRINSIC_VSTORE32): Likewise.\n-\t(INTRINSIC_VSTORE64): Likewise.\n-\t(INTRINSIC_ADDS): Update signature.\n-\t(INTRINSIC_ADDSL): Likewise.\n-\t(INTRINSIC_ADDU): Likewise.\n-\t(INTRINSIC_ADDUL): Likewise.\n-\t(INTRINSIC_SUBS): Likewise.\n-\t(INTRINSIC_SUBSL): Likewise.\n-\t(INTRINSIC_SUBU): Likewise.\n-\t(INTRINSIC_SUBUL): Likewise.\n-\t(INTRINSIC_MULS): Likewise.\n-\t(INTRINSIC_MULSL): Likewise.\n-\t(INTRINSIC_MULU): Likewise.\n-\t(INTRINSIC_MULUI): Likewise.\n-\t(INTRINSIC_MULUL): Likewise.\n-\t(INTRINSIC_NEGS): Likewise.\n-\t(INTRINSIC_NEGSL): Likewise.\n-\n-2021-02-02  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\tPR d/98921\n-\t* dmd/MERGE: Merge upstream dmd 5e2a81d9c.\n-\n-2021-01-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoDeclaration *)): Don't\n-\tlayout m_arg1 and m_arg2 fields.\n-\n-2021-01-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 609c3ce2d.\n-\t* d-compiler.cc (Compiler::loadModule): Rename to ...\n-\t(Compiler::onParseModule): ... this.\n-\t(Compiler::onImport): New function.\n-\t* d-lang.cc (d_parse_file): Remove call to Compiler::loadModule.\n-\n-2021-01-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 3a7ebef73.\n-\n-2021-01-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 2d3d13748.\n-\t* d-lang.cc (d_handle_option): Remove OPT_ftransition_checkimports and\n-\tOPT_ftransition_import.\n-\t* gdc.texi (Warnings): Remove documentation for -ftransition=import\n-\tand -ftransition=checkimports.\n-\t* lang.opt (ftransition=checkimports): Remove.\n-\t(ftransition=import): Remove.\n-\n-2021-01-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd cb1106ad5.\n-\n-2021-01-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 9bba772fa.\n-\n-2021-01-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd e598f69c0.\n-\n-2021-01-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd 9038e64c5.\n-\t* d-builtins.cc (build_frontend_type): Update call to\n-\tParameter::create.\n-\n-2021-01-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n-\n-\t* dmd/MERGE: Merge upstream dmd a5c86f5b9.\n-\t* d-builtins.cc (d_eval_constant_expression): Handle ADDR_EXPR trees\n-\tcreated by build_string_literal.\n-\t* d-frontend.cc (retStyle): Remove function.\n-\t* d-target.cc (d_language_target_info): New variable.\n-\t(d_target_info_table): Likewise.\n-\t(Target::_init): Initialize d_target_info_table.\n-\t(Target::isReturnOnStack): New function.\n-\t(d_add_target_info_handlers): Likewise.\n-\t(d_handle_target_cpp_std): Likewise.\n-\t(d_handle_target_cpp_runtime_library): Likewise.\n-\t(Target::getTargetInfo): Likewise.\n-\t* d-target.h (struct d_target_info_spec): New type.\n-\t(d_add_target_info_handlers): Declare.\n-\n-2021-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gdc.texi: Bump @copyrights-d year.\n-\n-2021-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* ChangeLog-2020: Rotate ChangeLog.  New file.\n-\n \f\n-Copyright (C) 2021 Free Software Foundation, Inc.\n+Copyright (C) 2022 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "3a4f03c28af89fe2829945d0e9aaff09b4ddcbdf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 2559, "changes": 2560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd", "patch": "@@ -1,2563 +1,5 @@\n-2021-12-29  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102332\n-\t* expr.c (gfc_get_variable_expr): Avoid NULL pointer dereferences\n-\tduring handling of errors with invalid uses of CLASS variables.\n-\t* match.c (select_type_set_tmp): Likewise.\n-\t* primary.c (gfc_match_varspec): Likewise.\n-\t* resolve.c (resolve_variable): Likewise.\n-\t(resolve_select_type): Likewise.\n-\n-2021-12-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\tPR fortran/103828\n-\t* trans-decl.c (generate_local_decl): Do not call\n-\tgfc_conv_scalar_char_value(), but check the type tree.\n-\t* trans-expr.c (gfc_conv_scalar_char_value): Rename to\n-\tconv_scalar_char_value, do not alter type tree.\n-\t(gfc_conv_procedure_call): Adjust call to renamed\n-\tconv_scalar_char_value() function.\n-\t* trans-types.c (gfc_sym_type): Take care of\n-\tCHARACTER(C_CHAR), VALUE arguments.\n-\t* trans.h (gfc_conv_scalar_char_value): Remove prototype.\n-\n-2021-12-28  Martin Liska  <mliska@suse.cz>\n-\n-\t* gfortran.texi: Replace http:// with https.\n-\t* intrinsic.texi: Likewise.\n-\n-2021-12-22  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103778\n-\t* check.c (is_c_interoperable): A BOZ literal constant is not\n-\tinteroperable.\n-\n-2021-12-22  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103776\n-\t* match.c (match_case_selector): Reject expressions in CASE\n-\tselector which are not scalar.\n-\n-2021-12-18  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103412\n-\t* check.c (gfc_check_sizeof): Reject BOZ type argument.\n-\n-2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103717\n-\t* frontend-passes.c (doloop_code): Prevent NULL pointer\n-\tdereference when checking for passing a do-loop variable to a\n-\tcontained procedure with an interface mismatch.\n-\n-2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103718\n-\tPR fortran/103719\n-\t* frontend-passes.c (doloop_contained_procedure_code): Add several\n-\tchecks to prevent NULL pointer dereferences on valid and invalid\n-\tcode called within do-loops.\n-\n-2021-12-14  Manfred Schwarb  <manfred99@gmx.ch>\n-\n-\tPR fortran/91497\n-\t* simplify.c (simplify_min_max): Disable conversion warnings for\n-\tMIN1 and MAX1.\n-\n-2021-12-13  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/103576\n-\t* openmp.c (is_scalar_intrinsic_expr): Fix condition.\n-\t(resolve_omp_atomic): Fix/update checks, accept compare.\n-\t* trans-openmp.c (gfc_trans_omp_atomic): Handle compare.\n-\n-2021-12-11  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103606\n-\t* resolve.c (resolve_fl_procedure): Do not access CLASS components\n-\tbefore class container has been built.\n-\n-2021-12-10  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103418\n-\t* check.c (variable_check): Replace previous check of procedure\n-\tdummy arguments with INTENT(IN) attribute when passed to intrinsic\n-\tprocedures by gfc_check_vardef_context.\n-\t* expr.c (gfc_check_vardef_context): Correct check of INTENT(IN)\n-\tdummy arguments for the case of sub-components of a CLASS pointer.\n-\n-2021-12-08  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103609\n-\t* symbol.c (gfc_sym_get_dummy_args): Catch NULL pointer\n-\tdereference.\n-\n-2021-12-08  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103610\n-\t* array.c (spec_dimen_size): Fix simplification of SHAPE:\n-\tdimensions must be non-negative.\n-\n-2021-12-08  Chung-Lin Tang  <cltang@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_array_section): Do not generate\n-\tGOMP_MAP_ALWAYS_POINTER map for main array maps of ARRAY_TYPE type.\n-\n-2021-12-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103607\n-\t* frontend-passes.c (do_subscript): Ensure that array bounds are\n-\tof type INTEGER before performing checks on array subscripts.\n-\n-2021-12-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103588\n-\t* array.c (gfc_ref_dimen_size): Do not generate internal error on\n-\tfailed simplification of stride expression; just return failure.\n-\n-2021-12-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103591\n-\t* match.c (match_case_selector): Check type of upper bound in case\n-\trange.\n-\n-2021-12-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle\n-\tweak/compare/fail clause.\n-\t* gfortran.h (gfc_omp_clauses): Add weak, compare, fail.\n-\t* openmp.c (enum omp_mask1, gfc_match_omp_clauses,\n-\tOMP_ATOMIC_CLAUSES): Update for new clauses.\n-\t(gfc_match_omp_atomic): Update for 5.1 atomic changes.\n-\t(is_conversion): Support widening in one go.\n-\t(is_scalar_intrinsic_expr): New.\n-\t(resolve_omp_atomic): Update for 5.1 atomic changes.\n-\t* parse.c (parse_omp_oacc_atomic): Update for compare.\n-\t* resolve.c (gfc_resolve_blocks): Update asserts.\n-\t* trans-openmp.c (gfc_trans_omp_atomic): Handle new clauses.\n-\n-2021-12-03  Harald Anlauf  <anlauf@gmx.de>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/103505\n-\t* array.c (match_array_element_spec): Try to simplify array\n-\telement specifications to improve early checking.\n-\t* expr.c (gfc_try_simplify_expr): New.  Try simplification of an\n-\texpression via gfc_simplify_expr.  When an error occurs, roll\n-\tback.\n-\t* gfortran.h (gfc_try_simplify_expr): Declare it.\n-\n-2021-12-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* trans-stmt.c (gfc_trans_allocate): Set e3_has_nodescriptor to true\n-\tonly for non-named arrays.\n-\n-2021-12-02  Chung-Lin Tang  <cltang@codesourcery.com>\n-\n-\tPR fortran/90030\n-\t* trans-openmp.c (gfc_omp_finish_clause): Remove fold_convert to pointer\n-\tto char_type_node, add gcc_assert of POINTER_TYPE_P.\n-\t(gfc_trans_omp_array_section): Likewise.\n-\t(gfc_trans_omp_clauses): Likewise.\n-\n-2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102787\n-\t* array.c (expand_constructor): When encountering a constant array\n-\texpression or array section within a constructor, simplify it to\n-\tenable better expansion.\n-\n-2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103473\n-\t* simplify.c (simplify_minmaxloc_nodim): Avoid NULL pointer\n-\tdereference when shape is not set.\n-\n-2021-11-30  Harald Anlauf  <anlauf@gmx.de>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/101565\n-\t* check.c (gfc_check_image_index): Verify that SUB argument to\n-\tIMAGE_INDEX is of type integer.\n-\n-2021-11-30  Richard Biener  <rguenther@suse.de>\n-\n-\t* frontend-passes.c (gfc_expr_walker): Add comment to\n-\tindicate tail recursion.\n-\n-2021-11-30  Richard Biener  <rguenther@suse.de>\n-\n-\t* target-memory.c (gfc_element_size): Remove unreachable return.\n-\n-2021-11-30  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* openmp.c (resolve_oacc_loop_blocks): Remove \"gang reduction on\n-\tan orphan loop\" checking.\n-\t(oacc_is_parallel, oacc_is_kernels, oacc_is_serial)\n-\t(oacc_is_compute_construct): Remove.\n-\n-2021-11-30  Frederik Harwath  <frederik@codesourcery.com>\n-\t    Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* openmp.c (oacc_is_parallel_or_serial): Evolve into...\n-\t(oacc_is_compute_construct): ... this function.\n-\t(resolve_oacc_loop_blocks): Use \"oacc_is_compute_construct\"\n-\tinstead of \"oacc_is_parallel_or_serial\" for checking that a\n-\tloop is not orphaned.\n-\n-2021-11-30  Kwok Cheung Yeung  <kcy@codesourcery.com>\n-\t    Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* openmp.c (oacc_is_serial, oacc_is_parallel_or_serial): New.\n-\t(resolve_oacc_loop_blocks): Use oacc_is_parallel_or_serial instead of\n-\toacc_is_parallel.\n-\n-2021-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n-\t    Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* openmp.c (oacc_is_parallel, oacc_is_kernels): New 'static'\n-\tfunctions.\n-\t(resolve_oacc_loop_blocks): Emit an error on orphan OpenACC gang\n-\treductions.\n-\n-2021-11-30  Richard Biener  <rguenther@suse.de>\n-\n-\t* decl.c (gfc_insert_parameter_exprs): Only return after\n-\tresetting type_param_spec_list.\n-\n-2021-11-30  Richard Biener  <rguenther@suse.de>\n-\n-\t* frontend-passes.c (gfc_expr_walker): Remove unreachable\n-\tbreak.\n-\t* scanner.c (skip_fixed_comments): Remove unreachable\n-\tgcc_unreachable.\n-\t* trans-expr.c (gfc_expr_is_variable): Refactor to make\n-\tcontrol flow more obvious.\n-\n-2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n-\n-\tPR other/103021\n-\t* Make-lang.in: Use ETAGS variable in TAGS target.\n-\n-2021-11-26  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103411\n-\t* check.c (gfc_check_reshape): Improve check of size of source\n-\tarray for the RESHAPE intrinsic against the given shape when pad\n-\tis not given, and shape is a parameter.  Try other simplifications\n-\tof shape.\n-\n-2021-11-23  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103392\n-\t* simplify.c (simplify_bound): Do not try to simplify\n-\tLBOUND/UBOUND for arrays with POINTER or ALLOCATABLE attribute.\n-\n-2021-11-23  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/87711\n-\tPR fortran/87851\n-\t* trans-array.c (arg_evaluated_for_scalarization): Add LEN_TRIM to\n-\tlist of intrinsics for which an optional KIND argument needs to be\n-\tremoved before scalarization.\n-\n-2021-11-21  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR debug/103315\n-\t* trans-types.c (gfc_get_array_descr_info): Use DW_OP_deref_size 1\n-\tinstead of DW_OP_deref for DW_AT_rank.\n-\n-2021-11-21  Harald Anlauf  <anlauf@gmx.de>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/99061\n-\t* trans-intrinsic.c (gfc_lookup_intrinsic): Helper function for\n-\tlooking up gfortran builtin intrinsics.\n-\t(gfc_conv_intrinsic_atrigd): Use it.\n-\t(gfc_conv_intrinsic_cotan): Likewise.\n-\t(gfc_conv_intrinsic_cotand): Likewise.\n-\t(gfc_conv_intrinsic_atan2d): Likewise.\n-\n-2021-11-18  Harald Anlauf  <anlauf@gmx.de>\n-\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/101329\n-\t* check.c (is_c_interoperable): Reject NULL() as it is not\n-\tinteroperable.\n-\n-2021-11-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103286\n-\t* resolve.c (resolve_select): Choose appropriate range limit to\n-\tavoid NULL pointer dereference when generating error message.\n-\n-2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* interface.c (gfc_dummy_arg_get_name): New function.\n-\t* gfortran.h (gfc_dummy_arg_get_name): Declare it.\n-\t* trans-array.c (arg_evaluated_for_scalarization): Pass a dummy\n-\targument wrapper as argument instead of an actual argument\n-\tand an index number.  Check it\u2019s non-NULL.  Use its name\n-\tto identify it.\n-\t(gfc_walk_elemental_function_args): Update call to\n-\targ_evaluated for scalarization.  Remove argument counting.\n-\n-2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* gfortran.h (gfc_actual_arglist::missing_arg_type): Remove.\n-\t* interface.c (gfc_compare_actual_formal): Remove\n-\tmissing_arg_type initialization.\n-\t* intrinsic.c (sort_actual): Ditto.\n-\t* trans-expr.c (gfc_conv_procedure_call): Use associated_dummy\n-\tand gfc_dummy_arg_get_typespec to get the dummy argument type.\n-\n-2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* interface.c (gfc_dummy_arg_get_typespec,\n-\tgfc_dummy_arg_is_optional): New functions.\n-\t* gfortran.h (gfc_dummy_arg_get_typespec,\n-\tgfc_dummy_arg_is_optional): Declare them.\n-\t* trans.h (gfc_ss_info::dummy_arg): Use the wrapper type\n-\tas declaration type.\n-\t* trans-array.c (gfc_scalar_elemental_arg_saved_as_reference):\n-\tuse gfc_dummy_arg_get_typespec function to get the type.\n-\t(gfc_walk_elemental_function_args): Remove proc_ifc argument.\n-\tGet info about the dummy arg using the associated_dummy field.\n-\t* trans-array.h (gfc_walk_elemental_function_args): Update declaration.\n-\t* trans-intrinsic.c (gfc_walk_intrinsic_function):\n-\tUpdate call to gfc_walk_elemental_function_args.\n-\t* trans-stmt.c (gfc_trans_call): Ditto.\n-\t(get_proc_ifc_for_call): Remove.\n-\n-2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* gfortran.h (gfc_dummy_arg_kind, gfc_dummy_arg): New.\n-\t(gfc_actual_arglist): New field associated_dummy.\n-\t(gfc_intrinsic_arg): Remove field actual.\n-\t* interface.c (get_nonintrinsic_dummy_arg): New.\n-\t(gfc_compare_actual): Initialize associated_dummy.\n-\t* intrinsic.c (get_intrinsic_dummy_arg): New.\n-\t(sort_actual):\u00a0 Add argument vectors.\n-\tUse loops with indices on argument vectors.\n-\tInitialize associated_dummy.\n-\n-2021-11-16  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\t* intrinsic.c (sort_actual): initialise variable and use it earlier.\n-\n-2021-11-15  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (OMP_TARGET_CLAUSES): Add thread_limit.\n-\t* trans-openmp.c (gfc_split_omp_clauses): Add thread_limit also to\n-\tteams.\n-\n-2021-11-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* parse.c (decode_omp_directive): Fix permitting 'nowait' for some\n-\tcombined directives, add missing 'omp end ... loop'.\n-\t(gfc_ascii_statement): Fix ST_OMP_END_TEAMS_LOOP result.\n-\t* openmp.c (resolve_omp_clauses): Add missing combined loop constructs\n-\tcase values to the 'if(directive-name: ...)' check.\n-\t* trans-openmp.c (gfc_split_omp_clauses): Put nowait on target if\n-\tfirst leaf construct accepting it.\n-\n-2021-11-12  Martin Jambor  <mjambor@suse.cz>\n-\n-\t* trans-types.c (gfc_get_array_descr_info): Use build_debug_expr_decl\n-\tinstead of building DEBUG_EXPR_DECL manually.\n-\n-2021-11-12  Mikael Morin  <mikael@gcc.gnu.org>\n-\n-\tPR fortran/97896\n-\t* intrinsic.c (add_sym_4ind): Remove.\n-\t(add_functions): Use add_sym4 instead of add_sym4ind.\n-\tDon\u2019t special case the index intrinsic.\n-\t* iresolve.c (gfc_resolve_index_func): Use the individual arguments\n-\tdirectly instead of the full argument list.\n-\t* intrinsic.h (gfc_resolve_index_func): Update the declaration\n-\taccordingly.\n-\t* trans-decl.c (gfc_get_extern_function_decl): Don\u2019t modify the\n-\tlist of arguments in the case of the index intrinsic.\n-\t* trans-array.h (gfc_get_intrinsic_for_expr,\n-\tgfc_get_proc_ifc_for_expr): New.\n-\t* trans-array.c (gfc_get_intrinsic_for_expr,\n-\targ_evaluated_for_scalarization): New.\n-\t(gfc_walk_elemental_function_args): Add intrinsic procedure\n-\tas argument.  Count arguments.  Check arg_evaluated_for_scalarization.\n-\t* trans-intrinsic.c (gfc_walk_intrinsic_function): Update call.\n-\t* trans-stmt.c (get_intrinsic_for_code): New.\n-\t(gfc_trans_call): Update call.\n-\n-2021-11-12  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* types.def (BT_FN_VOID_UINT_UINT): Remove.\n-\t(BT_FN_BOOL_UINT_UINT_UINT_BOOL): New.\n-\n-2021-11-11  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (struct gfc_omp_clauses): Rename num_teams to\n-\tnum_teams_upper, add num_teams_upper.\n-\t* dump-parse-tree.c (show_omp_clauses): Update to handle\n-\tlower-bound num_teams clause.\n-\t* frontend-passes.c (gfc_code_walker): Likewise\n-\t* openmp.c (gfc_free_omp_clauses, gfc_match_omp_clauses,\n-\tresolve_omp_clauses): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses,\n-\tgfc_trans_omp_target): Likewise.\n-\n-2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Use\n-\tOMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead of OMP_CLAUSE_NUM_TEAMS_EXPR.\n-\n-2021-11-10  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/103137\n-\tPR fortran/103138\n-\t* check.c (gfc_check_shape): Avoid NULL pointer dereference on\n-\tmissing ref.\n-\t* simplify.c (gfc_simplify_cshift): Avoid NULL pointer dereference\n-\twhen shape not set.\n-\t(gfc_simplify_transpose): Likewise.\n-\n-2021-11-09  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\tPR fortran/68800\n-\t* class.c (generate_finalization_wrapper): Do not leak\n-\tfinalization wrappers if they will not be used.\n-\t* expr.c (gfc_free_actual_arglist): Formatting fix.\n-\t* gfortran.h (gfc_free_symbol): Pass argument by reference.\n-\t(gfc_release_symbol): Likewise.\n-\t(gfc_free_namespace): Likewise.\n-\t* symbol.c (gfc_release_symbol): Adjust acordingly.\n-\t(free_components): Set procedure pointer components\n-\tof derived types to NULL after freeing.\n-\t(free_tb_tree): Likewise.\n-\t(gfc_free_symbol): Set sym to NULL after freeing.\n-\t(gfc_free_namespace): Set namespace to NULL after freeing.\n-\n-2021-11-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* symbol.c (gfc_get_ultimate_derived_super_type): Remove.\n-\n-2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n-\n-\t* misc.c (gfc_dummy_typename): Make sure ts->kind is\n-\tnon-negative.\n-\n-2021-11-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* intrinsic.c (add_subroutines): Change keyword \"operator\"\n-\tto the correct one, \"operation\".\n-\t* check.c (gfc_check_co_reduce): Change OPERATOR to\n-\tOPERATION in error messages.\n-\t* intrinsic.texi: Change OPERATOR to OPERATION in\n-\tdocumentation.\n-\n-2021-11-07  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* interface.c (gfc_compare_actual_formal): Continue checking\n-\tall arguments after encountering an error.\n-\t* intrinsic.c (do_ts29113_check): Likewise.\n-\t* resolve.c (resolve_operator): Continue resolving on op2 error.\n-\n-2021-11-06  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102715\n-\t* decl.c (add_init_expr_to_sym): Reject rank mismatch between\n-\tarray and its initializer.\n-\n-2021-11-05  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102817\n-\t* expr.c (simplify_parameter_variable): Copy shape of referenced\n-\tsubobject when simplifying.\n-\n-2021-11-05  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/69419\n-\t* match.c (gfc_match_common): Check array spec of a symbol in a\n-\tCOMMON object list and reject it if it is a coarray.\n-\n-2021-11-05  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\tPR fortran/100972\n-\t* decl.c (gfc_match_implicit_none): Fix typo in warning.\n-\t* resolve.c (resolve_unknown_f): Reject external procedures\n-\twithout explicit EXTERNAL attribute whe IMPLICIT none (external)\n-\tis in effect.\n-\n-2021-11-05  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* decl.c (gfc_insert_kind_parameter_exprs): Make static.\n-\t* expr.c (gfc_build_init_expr): Make static\n-\t(gfc_build_default_init_expr): Move below its static helper.\n-\t* gfortran.h (gfc_insert_kind_parameter_exprs, gfc_add_saved_common,\n-\tgfc_add_common, gfc_use_derived_tree, gfc_free_charlen,\n-\tgfc_get_ultimate_derived_super_type,\n-\tgfc_resolve_oacc_parallel_loop_blocks, gfc_build_init_expr,\n-\tgfc_iso_c_sub_interface): Delete.\n-\t* symbol.c (gfc_new_charlen, gfc_get_derived_super_type): Make\n-\tstatic.\n-\n-2021-11-05  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR fortran/35276\n-\t* gfortran.texi (Mixed-Language Programming): Talk about C++,\n-\tand how to link.\n-\n-2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* gfortran.texi (Projects): Add bullet for helping with\n-\tincomplete standards compliance.\n-\t(Proposed Extensions): Delete section.\n-\n-2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* intrinsic.texi (Introduction to Intrinsics): Genericize\n-\treferences to standard versions.\n-\t* invoke.texi (-fall-intrinsics): Likewise.\n-\t(-fmax-identifier-length=): Likewise.\n-\n-2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* gfortran.texi (Interoperability with C): Copy-editing.  Add\n-\tmore index entries.\n-\t(Intrinsic Types): Likewise.\n-\t(Derived Types and struct): Likewise.\n-\t(Interoperable Global Variables): Likewise.\n-\t(Interoperable Subroutines and Functions): Likewise.\n-\t(Working with C Pointers): Likewise.\n-\t(Further Interoperability of Fortran with C): Likewise.  Rewrite\n-\tto reflect that this is now fully supported by gfortran.\n-\n-2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* gfortran.texi (About GNU Fortran): Consolidate material\n-\tformerly in other sections.  Copy-editing.\n-\t(Preprocessing and conditional compilation): Delete, moving\n-\tmost material to invoke.texi.\n-\t(GNU Fortran and G77): Delete.\n-\t(Project Status): Delete.\n-\t(Standards): Update.\n-\t(Fortran 95 status): Mention conditional compilation here.\n-\t(Fortran 2003 status): Rewrite to mention the 1 missing feature\n-\tinstead of all the ones implemented.\n-\t(Fortran 2008 status): Similarly for the 2 missing features.\n-\t(Fortran 2018 status): Rewrite to reflect completion of TS29113\n-\tfeature support.\n-\t* invoke.texi (Preprocessing Options): Move material formerly\n-\tin introductory chapter here.\n-\n-2021-11-04  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* gfortran.texi (Standards): Move discussion of specific\n-\tstandard versions here....\n-\t(Fortran standards status): ...from here, and delete this node.\n-\n-2021-10-31  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* symbol.c (gfc_get_typebound_proc): Revert memcpy.\n-\n-2021-10-31  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* resolve.c (resolve_fl_procedure): Initialize\n-\tallocatable_or_pointer.\n-\n-2021-10-30  Manfred Schwarb  <manfred99@gmx.ch>\n-\n-\t* intrinsic.texi: Remove entries for SHORT and LONG intrinsics.\n-\n-2021-10-30  Manfred Schwarb  <manfred99@gmx.ch>\n-\n-\t* check.c (gfc_check_intconv): Change error message.\n-\n-2021-10-30  Manfred Schwarb  <manfred99@gmx.ch>\n-\n-\t* intrinsic.texi (REAL): Fix entries in Specific names table.\n-\n-2021-10-30  Manfred Schwarb  <manfred99@gmx.ch>\n-\n-\t* intrinsic.texi: Adjust @columnfractions commands to improve\n-\tappearance for narrow 80 character terminals.\n-\n-2021-10-30  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* parse.c (clean_up_modules): Free gsym.\n-\n-2021-10-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* gfortran.texi (bug reports): credit Gerhard Steinmetz for\n-\t  numerous bug reports.\n-\n-2021-10-30  Steve Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/99853\n-\t* resolve.c (resolve_select): Generate regular gfc_error on\n-\tinvalid conversions instead of an gfc_internal_error.\n-\n-2021-10-29  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* symbol.c (free_tb_tree): Free type-bound procedure struct.\n-\t(gfc_get_typebound_proc): Use explicit memcpy for clarity.\n-\n-2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* intrinsic.h (gfc_check_sum, gfc_resolve_atan2d, gfc_resolve_kill,\n-\tgfc_resolve_kill_sub): Delete declaration.\n-\n-2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* trans-types.h (gfc_convert_function_code): Delete.\n-\n-2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* trans-stmt.h (gfc_trans_deallocate_array): Delete.\n-\n-2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* trans-array.c (gfc_trans_scalarized_loop_end): Make static.\n-\t* trans-array.h (gfc_trans_scalarized_loop_end,\n-\tgfc_conv_tmp_ref, gfc_conv_array_transpose): Delete declaration.\n-\n-2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* constructor.c (gfc_constructor_get_base): Make static.\n-\t(gfc_constructor_expr_foreach, gfc_constructor_swap): Delete.\n-\t* constructor.h (gfc_constructor_get_base): Remove declaration.\n-\t(gfc_constructor_expr_foreach, gfc_constructor_swap): Delete.\n-\n-2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* decl.c (gfc_match_old_kind_spec, set_com_block_bind_c,\n-\tset_verify_bind_c_sym, set_verify_bind_c_com_block,\n-\tget_bind_c_idents, gfc_match_suffix, gfc_get_type_attr_spec,\n-\tcheck_extended_derived_type): Make static.\n-\t(gfc_match_gcc_unroll): Add comment.\n-\t* match.c (gfc_match_small_int_expr): Delete definition.\n-\t* match.h (gfc_match_small_int_expr): Delete declaration.\n-\t(gfc_match_name_C, gfc_match_old_kind_spec, set_com_block_bind_c,\n-\tset_verify_bind_c_sym, set_verify_bind_c_com_block,\n-\tget_bind_c_idents, gfc_match_suffix,\n-\tgfc_get_type_attr_spec): Delete declaration.\n-\n-2021-10-27  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n-\n-\t* expr.c (is_non_empty_structure_constructor): Make static.\n-\t* gfortran.h (gfc_check_any_c_kind): Delete.\n-\t* match.c (gfc_match_label): Make static.\n-\t* match.h (gfc_match_label): Delete declaration.\n-\t* scanner.c (file_changes_cur, file_changes_count,\n-\tfile_changes_allocated): Make static.\n-\t* trans-expr.c (gfc_get_character_len): Make static.\n-\t(gfc_class_len_or_zero_get): Make static.\n-\t(VTAB_GET_FIELD_GEN): Undefine.\n-\t(gfc_get_class_array_ref): Make static.\n-\t(gfc_finish_interface_mapping): Make static.\n-\t* trans-types.c (gfc_check_any_c_kind): Delete.\n-\t(pfunc_type_node, dtype_type_node, gfc_get_ppc_type): Make static.\n-\t* trans-types.h (gfc_get_ppc_type): Delete declaration.\n-\t* trans.c (gfc_msg_wrong_return): Delete.\n-\t* trans.h (gfc_class_len_or_zero_get, gfc_class_vtab_extends_get,\n-\tgfc_vptr_extends_get, gfc_get_class_array_ref, gfc_get_character_len,\n-\tgfc_finish_interface_mapping, gfc_msg_wrong_return,\n-\tgfc_get_function_decl): Delete declaration.\n-\n-2021-10-27  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* trans-stmt.c (gfc_trans_select_rank_cases): Fix condition\n-\tfor allocatables/pointers.\n-\n-2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102956\n-\t* symbol.c (gfc_check_conflict): Add conflict check for PDT KIND\n-\tand LEN type parameters.\n-\n-2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102917\n-\t* decl.c (match_attr_spec): Remove invalid integer kind checks on\n-\tKIND and LEN attributes of PDTs.\n-\n-2021-10-26  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102816\n-\t* resolve.c (resolve_structure_cons): Reject invalid array spec of\n-\ta DT component referenced in a structure constructor.\n-\n-2021-10-26  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/102885\n-\t* trans-decl.c (gfc_conv_cfi_to_gfc): Properly handle nonconstant\n-\tcharacter lenghts.\n-\n-2021-10-25  Andrew MacLeod  <amacleod@redhat.com>\n-\n-\t* trans-decl.c (gfc_conv_cfi_to_gfc): Initialize rank to NULL_TREE.\n-\n-2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n-\n-\tPR other/102663\n-\t* Make-lang.in: Allow dvi-formatted documentation\n-\tto be installed.\n-\n-2021-10-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/92621\n-\t* trans-expr.c (gfc_trans_assignment_1): Add STRIP_NOPS.\n-\n-2021-10-21  Chung-Lin Tang  <cltang@codesourcery.com>\n-\n-\t* decl.c (gfc_match_end): Add COMP_OMP_STRICTLY_STRUCTURED_BLOCK case\n-\ttogether with COMP_BLOCK.\n-\t* parse.c (parse_omp_structured_block): Change return type to\n-\t'gfc_statement', add handling for strictly-structured block case, adjust\n-\trecursive calls to parse_omp_structured_block.\n-\t(parse_executable): Adjust calls to parse_omp_structured_block.\n-\t* parse.h (enum gfc_compile_state): Add\n-\tCOMP_OMP_STRICTLY_STRUCTURED_BLOCK.\n-\t* trans-openmp.c (gfc_trans_omp_workshare): Add EXEC_BLOCK case\n-\thandling.\n-\n-2021-10-21  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR fortran/94070\n-\t* expr.c (gfc_simplify_expr): Handle GFC_ISYM_SHAPE along with\n-\tGFC_ISYM_LBOUND and GFC_ISYM_UBOUND.\n-\t* trans-array.c (gfc_conv_ss_startstride): Likewise.\n-\t(set_loop_bounds): Likewise.\n-\t* trans-intrinsic.c (gfc_trans_intrinsic_bound): Extend to\n-\thandle SHAPE.  Correct logic for zero-size special cases and\n-\tdetecting assumed-rank arrays associated with an assumed-size\n-\targument.\n-\t(gfc_conv_intrinsic_shape): Deleted.\n-\t(gfc_conv_intrinsic_function): Handle GFC_ISYM_SHAPE like\n-\tGFC_ISYM_LBOUND and GFC_ISYM_UBOUND.\n-\t(gfc_add_intrinsic_ss_code): Likewise.\n-\t(gfc_walk_intrinsic_bound): Likewise.\n-\n-2021-10-20  Chung-Lin Tang  <cltang@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_omp_clause_reduction): Add 'openmp_target' default\n-\tfalse parameter. Add 'always,tofrom' map for OMP_LIST_IN_REDUCTION case.\n-\t(gfc_match_omp_clauses): Add 'openmp_target' default false parameter,\n-\tadjust call to gfc_match_omp_clause_reduction.\n-\t(match_omp): Adjust call to gfc_match_omp_clauses\n-\t* trans-openmp.c (gfc_trans_omp_taskgroup): Add call to\n-\tgfc_match_omp_clause, create and return block.\n-\n-2021-10-19  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* trans-types.c (create_fn_spec): For allocatable/pointer\n-\tcharacter(len=:), use 'w' not 'R' as fn spec for the length dummy\n-\targument.\n-\n-2021-10-19  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/92482\n-\t* trans-expr.c (gfc_conv_procedure_call): Use TREE_OPERAND not\n-\tbuild_fold_indirect_ref_loc to undo an ADDR_EXPR.\n-\n-2021-10-18  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/102086\n-\tPR fortran/92189\n-\tPR fortran/92621\n-\tPR fortran/101308\n-\tPR fortran/101309\n-\tPR fortran/101635\n-\tPR fortran/92482\n-\t* decl.c (gfc_verify_c_interop_param): Remove 'sorry' for\n-\tscalar allocatable/pointer and len=*.\n-\t* expr.c (is_CFI_desc): Return true for for those.\n-\t* gfortran.h (CFI_type_kind_shift, CFI_type_mask,\n-\tCFI_type_from_type_kind, CFI_VERSION, CFI_MAX_RANK,\n-\tCFI_attribute_pointer, CFI_attribute_allocatable,\n-\tCFI_attribute_other, CFI_type_Integer, CFI_type_Logical,\n-\tCFI_type_Real, CFI_type_Complex, CFI_type_Character,\n-\tCFI_type_ucs4_char, CFI_type_struct, CFI_type_cptr,\n-\tCFI_type_cfunptr, CFI_type_other): New #define.\n-\t* trans-array.c (CFI_FIELD_BASE_ADDR, CFI_FIELD_ELEM_LEN,\n-\tCFI_FIELD_VERSION, CFI_FIELD_RANK, CFI_FIELD_ATTRIBUTE,\n-\tCFI_FIELD_TYPE, CFI_FIELD_DIM, CFI_DIM_FIELD_LOWER_BOUND,\n-\tCFI_DIM_FIELD_EXTENT, CFI_DIM_FIELD_SM,\n-\tgfc_get_cfi_descriptor_field, gfc_get_cfi_desc_base_addr,\n-\tgfc_get_cfi_desc_elem_len, gfc_get_cfi_desc_version,\n-\tgfc_get_cfi_desc_rank, gfc_get_cfi_desc_type,\n-\tgfc_get_cfi_desc_attribute, gfc_get_cfi_dim_item,\n-\tgfc_get_cfi_dim_lbound, gfc_get_cfi_dim_extent, gfc_get_cfi_dim_sm):\n-\tNew define/functions to access the CFI array descriptor.\n-\t(gfc_conv_descriptor_type): New function for the GFC descriptor.\n-\t(gfc_get_array_span): Handle expr of CFI descriptors and\n-\tassumed-type descriptors.\n-\t(gfc_trans_array_bounds): Remove 'static'.\n-\t(gfc_conv_expr_descriptor): For assumed type, use the dtype of\n-\tthe actual argument.\n-\t(structure_alloc_comps): Remove ' ' inside tabs.\n-\t* trans-array.h (gfc_trans_array_bounds, gfc_conv_descriptor_type,\n-\tgfc_get_cfi_desc_base_addr, gfc_get_cfi_desc_elem_len,\n-\tgfc_get_cfi_desc_version, gfc_get_cfi_desc_rank,\n-\tgfc_get_cfi_desc_type, gfc_get_cfi_desc_attribute,\n-\tgfc_get_cfi_dim_lbound, gfc_get_cfi_dim_extent, gfc_get_cfi_dim_sm):\n-\tNew prototypes.\n-\t* trans-decl.c (gfor_fndecl_cfi_to_gfc, gfor_fndecl_gfc_to_cfi):\n-\tRemove global vars.\n-\t(gfc_build_builtin_function_decls): Remove their initialization.\n-\t(gfc_get_symbol_decl, create_function_arglist,\n-\tgfc_trans_deferred_vars): Update for CFI.\n-\t(convert_CFI_desc): Remove and replace by ...\n-\t(gfc_conv_cfi_to_gfc): ... this function\n-\t(gfc_generate_function_code): Call it; create local GFC var for CFI.\n-\t* trans-expr.c (gfc_maybe_dereference_var): Handle CFI.\n-\t(gfc_conv_subref_array_arg): Handle the if-noncontigous-only copy in\n-\twhen the result should be a descriptor.\n-\t(gfc_conv_gfc_desc_to_cfi_desc): Completely rewritten.\n-\t(gfc_conv_procedure_call): CFI fixes.\n-\t* trans-openmp.c (gfc_omp_is_optional_argument,\n-\tgfc_omp_check_optional_argument): Handle optional\n-\tCFI.\n-\t* trans-stmt.c (gfc_trans_select_rank_cases): Cleanup, avoid invalid\n-\tcode for allocatable/pointer dummies, which cannot be assumed size.\n-\t* trans-types.c (gfc_cfi_descriptor_base): New global var.\n-\t(gfc_get_dtype_rank_type): Skip rank init for rank < 0.\n-\t(gfc_sym_type): Handle CFI dummies.\n-\t(gfc_get_function_type): Update call.\n-\t(gfc_get_cfi_dim_type, gfc_get_cfi_type): New.\n-\t* trans-types.h (gfc_sym_type): Update prototype.\n-\t(gfc_get_cfi_type): New prototype.\n-\t* trans.c (gfc_trans_runtime_check): Make conditions more consistent\n-\tto avoid '<logical> AND_THEN <long int>' in conditions.\n-\t* trans.h (gfor_fndecl_cfi_to_gfc, gfor_fndecl_gfc_to_cfi): Remove\n-\tglobal-var declaration.\n-\n-2021-10-18  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/102745\n-\t* intrinsic.c (gfc_convert_type_warn): Fix checks by checking CLASS\n-\tand do typcheck in correct order for type extension.\n-\t* misc.c (gfc_typename): Print proper not internal CLASS type name.\n-\n-2021-10-15  Harald Anlauf  <anlauf@gmx.de>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/102685\n-\t* decl.c (match_clist_expr): Set rank/shape of clist initializer\n-\tto match LHS.\n-\t* resolve.c (resolve_structure_cons): In a structure constructor,\n-\tcompare shapes of array components against declared shape.\n-\n-2021-10-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102717\n-\t* simplify.c (gfc_simplify_reshape): Replace assert by error\n-\tmessage for negative elements in SHAPE array.\n-\n-2021-10-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102716\n-\t* check.c (gfc_check_shape): Reorder checks so that invalid KIND\n-\targuments can be detected.\n-\n-2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n-\n-\t* gfortran.h (enum gfc_statement): Add ST_OMP_DECLARE_VARIANT.\n-\t(enum gfc_omp_trait_property_kind): New.\n-\t(struct gfc_omp_trait_property): New.\n-\t(gfc_get_omp_trait_property): New macro.\n-\t(struct gfc_omp_selector): New.\n-\t(gfc_get_omp_selector): New macro.\n-\t(struct gfc_omp_set_selector): New.\n-\t(gfc_get_omp_set_selector): New macro.\n-\t(struct gfc_omp_declare_variant): New.\n-\t(gfc_get_omp_declare_variant): New macro.\n-\t(struct gfc_namespace): Add omp_declare_variant field.\n-\t(gfc_free_omp_declare_variant_list): New prototype.\n-\t* match.h (gfc_match_omp_declare_variant): New prototype.\n-\t* openmp.c (gfc_free_omp_trait_property_list): New.\n-\t(gfc_free_omp_selector_list): New.\n-\t(gfc_free_omp_set_selector_list): New.\n-\t(gfc_free_omp_declare_variant_list): New.\n-\t(gfc_match_omp_clauses): Add extra optional argument.  Handle end of\n-\tclauses for context selectors.\n-\t(omp_construct_selectors, omp_device_selectors,\n-\tomp_implementation_selectors, omp_user_selectors): New.\n-\t(gfc_match_omp_context_selector): New.\n-\t(gfc_match_omp_context_selector_specification): New.\n-\t(gfc_match_omp_declare_variant): New.\n-\t* parse.c: Include tree-core.h and omp-general.h.\n-\t(decode_omp_directive): Handle 'declare variant'.\n-\t(case_omp_decl): Include ST_OMP_DECLARE_VARIANT.\n-\t(gfc_ascii_statement): Handle ST_OMP_DECLARE_VARIANT.\n-\t(gfc_parse_file): Initialize omp_requires_mask.\n-\t* symbol.c (gfc_free_namespace): Call\n-\tgfc_free_omp_declare_variant_list.\n-\t* trans-decl.c (gfc_get_extern_function_decl): Call\n-\tgfc_trans_omp_declare_variant.\n-\t(gfc_create_function_decl): Call gfc_trans_omp_declare_variant.\n-\t* trans-openmp.c (gfc_trans_omp_declare_variant): New.\n-\t* trans-stmt.h (gfc_trans_omp_declare_variant): New prototype.\n-\n-2021-10-13  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle ancestor modifier,\n-\tavoid ICE for GFC_OMP_ATOMIC_SWAP.\n-\t* gfortran.h (gfc_omp_clauses): Change 'anecestor' into a bitfield.\n-\n-2021-10-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/102541\n-\t* check.c (gfc_check_present): Handle optional CLASS.\n-\t* interface.c (gfc_compare_actual_formal): Likewise.\n-\t* trans-array.c (gfc_trans_g77_array): Likewise.\n-\t* trans-decl.c (gfc_build_dummy_array_decl): Likewise.\n-\t* trans-types.c (gfc_sym_type): Likewise.\n-\t* primary.c (gfc_variable_attr): Fixes for dummy and\n-\tpointer when 'class%_data' is passed.\n-\t* trans-expr.c (set_dtype_for_unallocated, gfc_conv_procedure_call):\n-\tFor assumed-rank dummy, fix setting rank for dealloc/notassoc actual\n-\tand setting ubound to -1 for assumed-size actuals.\n-\n-2021-10-10  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/99348\n-\tPR fortran/102521\n-\t* decl.c (add_init_expr_to_sym): Extend initialization of\n-\tparameter arrays from scalars to handle derived types.\n-\n-2021-10-09  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/65454\n-\t* module.c (read_module): Handle old and new-style relational\n-\toperators when used in USE module, ONLY: OPERATOR(op).\n-\n-2021-10-08  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR fortran/54753\n-\t* interface.c (gfc_compare_actual_formal): Add diagnostic\n-\tfor F2018:C839.  Refactor shared code and fix bugs with class\n-\tarray info lookup, and extend similar diagnostic from PR94110\n-\tto also cover class types.\n-\n-2021-10-08  Martin Liska  <mliska@suse.cz>\n-\n-\t* options.c (gfc_post_options): Use new macro\n-\tOPTION_SET_P.\n-\n-2021-10-06  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* resolve.c (resolve_values): Only show\n-\tdeprecated warning if attr.referenced.\n-\n-2021-10-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/54753\n-\t* resolve.c (can_generate_init, resolve_fl_variable_derived,\n-\tresolve_symbol): Only do initialization with intent(out) if not\n-\tinside of an interface block.\n-\n-2021-10-01  Martin Sebor  <msebor@redhat.com>\n-\n-\tPR c/102103\n-\t* array.c: Remove an unnecessary test.\n-\t* trans-array.c: Same.\n-\n-2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gfortran.h (gfc_omp_clauses): Add order_reproducible bitfield.\n-\t* dump-parse-tree.c (show_omp_clauses): Print REPRODUCIBLE: for it.\n-\t* openmp.c (gfc_match_omp_clauses): Set order_reproducible for\n-\texplicit reproducible: modifier.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Set\n-\tOMP_CLAUSE_ORDER_REPRODUCIBLE for order_reproducible.\n-\t(gfc_split_omp_clauses): Also copy order_reproducible.\n-\n-2021-09-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102458\n-\t* simplify.c (simplify_size): Resolve expressions used in array\n-\tspecifications so that SIZE can be simplified.\n-\n-2021-09-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* expr.c: The correct reference to Fortran standard is: F2018:10.1.12.\n-\n-2021-09-30  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/71703\n-\tPR fortran/84007\n-\t* trans-intrinsic.c (gfc_conv_same_type_as): Fix handling\n-\tof UNLIMITED_POLY.\n-\t* trans.h (gfc_vtpr_hash_get): Renamed prototype to ...\n-\t(gfc_vptr_hash_get): ... this to match function name.\n-\n-2021-09-29  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102520\n-\t* array.c (expand_constructor): Do not dereference NULL pointer.\n-\n-2021-09-27  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94070\n-\t* trans-array.c (gfc_tree_array_size): New function to\n-\tfind size inline (whole array or one dimension).\n-\t(array_parameter_size): Use it, take stmt_block as arg.\n-\t(gfc_conv_array_parameter): Update call.\n-\t* trans-array.h (gfc_tree_array_size): Add prototype.\n-\t* trans-decl.c (gfor_fndecl_size0, gfor_fndecl_size1): Remove\n-\tthese global vars.\n-\t(gfc_build_intrinsic_function_decls): Remove their initialization.\n-\t* trans-expr.c (gfc_conv_procedure_call): Update\n-\tbounds of pointer/allocatable actual args to nonallocatable/nonpointer\n-\tdummies to be one based.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_shape): Fix case for\n-\tassumed rank with allocatable/pointer dummy.\n-\t(gfc_conv_intrinsic_size): Update to use inline function.\n-\t* trans.h (gfor_fndecl_size0, gfor_fndecl_size1): Remove var decl.\n-\n-2021-09-26  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/101334\n-\t* trans-intrinsic.c (gfc_conv_associated): Support assumed-rank\n-\t'pointer' with scalar/array 'target' argument.\n-\n-2021-09-24  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102458\n-\t* expr.c (is_non_constant_intrinsic): Check for intrinsics\n-\texcluded in constant expressions (F2018:10.1.2).\n-\t(gfc_is_constant_expr): Use that check.\n-\n-2021-09-24  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR fortran/101333\n-\t* interface.c (compare_parameter): Enforce F2018 C711.\n-\n-2021-09-24  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/55534\n-\t* scanner.c (load_file): Return void, call (gfc_)fatal_error for\n-\tall errors.\n-\t(include_line, include_stmt, gfc_new_file): Remove exit call\n-\tfor failed load_file run.\n-\n-2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR fortran/101320\n-\t* decl.c (gfc_verify_c_interop_param): Handle F2018 C1557,\n-\taka TS29113 C516.\n-\n-2021-09-23  Harald Anlauf  <anlauf@gmx.de>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93834\n-\t* trans-intrinsic.c (gfc_conv_allocated): Cleanup. Handle\n-\tcoindexed scalar coarrays.\n-\n-2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR fortran/101319\n-\t* interface.c (gfc_compare_actual_formal): Extend existing\n-\tassumed-type diagnostic to also check for argument with type\n-\tparameters.\n-\n-2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR fortran/101334\n-\t* check.c (gfc_check_associated): Allow an assumed-rank\n-\tarray for the pointer argument.\n-\t* interface.c (compare_parameter): Also give rank mismatch\n-\terror on assumed-rank array.\n-\n-2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* trans-stmt.c (trans_associate_var): Check that result of\n-\tGFC_DECL_SAVED_DESCRIPTOR is not null before using it.\n-\n-2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/55534\n-\t* cpp.c (gfc_cpp_register_include_paths, gfc_cpp_post_options):\n-\tAdd new bool verbose_missing_dir_warn argument.\n-\t* cpp.h (gfc_cpp_post_options): Update prototype.\n-\t* f95-lang.c (gfc_init): Remove duplicated file-not found diag.\n-\t* gfortran.h (gfc_check_include_dirs): Takes bool\n-\tverbose_missing_dir_warn arg.\n-\t(gfc_new_file): Returns now void.\n-\t* options.c (gfc_post_options): Update to warn for -I and -J,\n-\tonly, by default but for all when user requested.\n-\t* scanner.c (gfc_do_check_include_dir):\n-\t(gfc_do_check_include_dirs, gfc_check_include_dirs): Take bool\n-\tverbose warn arg and update to avoid printing the same message\n-\ttwice or never.\n-\t(load_file): Fix indent.\n-\t(gfc_new_file): Return void and exit when load_file failed\n-\tas all other load_file users do.\n-\n-2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* trans-expr.c (gfc_simple_for_loop): New.\n-\t* trans.h (gfc_simple_for_loop): New prototype.\n-\n-2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/55534\n-\t* cpp.c: Define GCC_C_COMMON_C for #include \"options.h\" to make\n-\tcpp_reason_option_codes available.\n-\t(gfc_cpp_register_include_paths): Make static, set pfile's\n-\twarn_missing_include_dirs and move before caller.\n-\t(gfc_cpp_init_cb): New, cb code moved from ...\n-\t(gfc_cpp_init_0): ... here.\n-\t(gfc_cpp_post_options): Call gfc_cpp_init_cb.\n-\t(cb_cpp_diagnostic_cpp_option): New. As implemented in c-family\n-\tto match CppReason flags to -W... names.\n-\t(cb_cpp_diagnostic): Use it to replace single special case.\n-\t* cpp.h (gfc_cpp_register_include_paths): Remove as now static.\n-\t* gfortran.h (gfc_check_include_dirs): New prototype.\n-\t(gfc_add_include_path): Add new bool arg.\n-\t* options.c (gfc_init_options): Don't set -Wmissing-include-dirs.\n-\t(gfc_post_options): Set it here after commandline processing. Call\n-\tgfc_add_include_path with defer_warn=false.\n-\t(gfc_handle_option): Call it with defer_warn=true.\n-\t* scanner.c (gfc_do_check_include_dir, gfc_do_check_include_dirs,\n-\tgfc_check_include_dirs): New. Diagnostic moved from ...\n-\t(add_path_to_list): ... here, which came before cmdline processing.\n-\tTake additional bool defer_warn argument.\n-\t(gfc_add_include_path): Take additional defer_warn arg.\n-\t* scanner.h (struct gfc_directorylist): Reorder for alignment issues,\n-\tadd new 'bool warn'.\n-\n-2021-09-20  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (gfc_omp_clauses): Add order_unconstrained.\n-\t* dump-parse-tree.c (show_omp_clauses): Dump it.\n-\t* openmp.c (gfc_match_omp_clauses): Match unconstrained/reproducible\n-\tmodifiers to ordered(concurrent).\n-\t(OMP_DISTRIBUTE_CLAUSES): Accept ordered clause.\n-\t(resolve_omp_clauses): Reject ordered + order on same directive.\n-\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses): Pass\n-\ton unconstrained modifier of ordered(concurrent).\n-\n-2021-09-17  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102366\n-\t* trans-decl.c (gfc_finish_var_decl): Disable the warning message\n-\tfor variables moved from stack to static storange if they are\n-\tdeclared in the main, but allow the move to happen.\n-\n-2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* intrinsic.texi (ISO_C_BINDING): Change C_FLOAT128 to correspond\n-\tto _Float128 rather than __float128.\n-\t* iso-c-binding.def (c_float128): Update comments.\n-\t* trans-intrinsic.c (gfc_builtin_decl_for_float_kind): Likewise.\n-\t(build_round_expr): Likewise.\n-\t(gfc_build_intrinsic_lib_fndcecls): Likewise.\n-\t* trans-types.h (gfc_real16_is_float128): Likewise.\n-\n-2021-09-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102287\n-\t* trans-expr.c (gfc_conv_procedure_call): Wrap deallocation of\n-\tallocatable components of optional allocatable derived type\n-\tprocedure arguments with INTENT(OUT) into a presence check.\n-\n-2021-09-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102311\n-\t* resolve.c (resolve_entries): Attempt to recover cleanly after\n-\trejecting mismatched function entries.\n-\n-2021-09-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/102313\n-\t* parse.c (gfc_ascii_statement): Add missing ST_OMP_END_SCOPE.\n-\n-2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/82314\n-\t* decl.c (add_init_expr_to_sym): For proper initialization of\n-\tarray-valued named constants the array bounds need to be\n-\tsimplified before adding the initializer.\n-\n-2021-09-13  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/85130\n-\t* expr.c (find_substring_ref): Handle given substring start and\n-\tend indices as signed integers, not unsigned.\n-\n-2021-09-09  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98490\n-\t* trans-expr.c (gfc_conv_substring): Do not generate substring\n-\tbounds check for implied do loop index variable before it actually\n-\tbecomes defined.\n-\n-2021-09-08  liuhongt  <hongtao.liu@intel.com>\n-\n-\t* options.c (gfc_post_options): Issue an error for\n-\t-fexcess-precision=16.\n-\n-2021-09-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/101327\n-\t* expr.c (find_array_element): When bounds cannot be determined as\n-\tconstant, return error instead of aborting.\n-\n-2021-09-07  Marcel Vollweiler  <marcel@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_omp_flush): Parse 'seq_cst' clause on 'flush'\n-\tdirective.\n-\t* trans-openmp.c (gfc_trans_omp_flush): Handle OMP_MEMORDER_SEQ_CST.\n-\n-2021-09-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* decl.c (gfc_verify_c_interop_param): Reject pointer with\n-\tCONTIGUOUS attributes as dummy arg. Reject character len > 1\n-\twhen passed as byte stream.\n-\n-2021-09-01  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/56985\n-\t* resolve.c (resolve_common_vars): Fix grammar and improve wording\n-\tof error message rejecting an unlimited polymorphic in COMMON.\n-\n-2021-08-31  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100950\n-\t* simplify.c (substring_has_constant_len): Minimize checks for\n-\tsubstring expressions being allowed.\n-\n-2021-08-31  Marcel Vollweiler  <marcel@codesourcery.com>\n-\n-\t* gfortran.h: Add variable for 'ancestor' in struct gfc_omp_clauses.\n-\t* openmp.c (gfc_match_omp_clauses): Parse device-modifiers 'device_num'\n-\tand 'ancestor' in 'target device' clauses.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Set OMP_CLAUSE_DEVICE_ANCESTOR.\n-\n-2021-08-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/102113\n-\t* match.c (gfc_match_goto): Allow for whitespace in parsing list\n-\tof labels.\n-\n-2021-08-30  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/101349\n-\t* resolve.c (resolve_allocate_expr): An unlimited polymorphic\n-\targument to ALLOCATE must be ALLOCATABLE or a POINTER.  Fix the\n-\tcorresponding check.\n-\n-2021-08-28  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/87737\n-\t* resolve.c (resolve_entries): For functions of type CHARACTER\n-\ttighten the checks for matching characteristics.\n-\n-2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n-\n-\tPR other/93067\n-\t* cpp.c (gfc_cpp_post_options): Call new function\n-\tdiagnostic_initialize_input_context().\n-\n-2021-08-24  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98411\n-\t* trans-decl.c (gfc_finish_var_decl): Adjust check to handle\n-\timplicit SAVE as well as variables in the main program.  Improve\n-\twarning message text.\n-\n-2021-08-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_dupl_check, gfc_match_dupl_memorder,\n-\tgfc_match_dupl_atomic): New.\n-\t(gfc_match_omp_clauses): Use them; remove duplicate\n-\t'release'/'relaxed' clause matching; improve error dignostic\n-\tfor 'default'.\n-\n-2021-08-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle 'strict' modifier\n-\ton grainsize/num_tasks\n-\t* gfortran.h (gfc_omp_clauses): Add grainsize_strict\n-\tand num_tasks_strict.\n-\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses):\n-\tHandle 'strict' modifier on grainsize/num_tasks.\n-\t* openmp.c (gfc_match_omp_clauses): Likewise.\n-\n-2021-08-20  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* error.c\n-\t(error_uinteger): Take 'long long unsigned' instead\n-\tof 'long unsigned' as argumpent.\n-\t(error_integer): Take 'long long' instead of 'long'.\n-\t(error_hwuint, error_hwint): New.\n-\t(error_print): Update to handle 'll' and 'w'\n-\tlength modifiers.\n-\t* simplify.c (substring_has_constant_len): Use '%wd'\n-\tin gfc_error.\n-\n-2021-08-20  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100950\n-\t* simplify.c (substring_has_constant_len): Fix format string of\n-\tgfc_error, pass HOST_WIDE_INT bounds values via char buffer.\n-\n-2021-08-20  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle 'at', 'severity'\n-\tand 'message' clauses.\n-\t(show_omp_node, show_code_node): Handle EXEC_OMP_ERROR.\n-\t* gfortran.h (gfc_statement): Add ST_OMP_ERROR.\n-\t(gfc_omp_severity_type, gfc_omp_at_type): New.\n-\t(gfc_omp_clauses): Add 'at', 'severity' and 'message' clause;\n-\tuse more bitfields + ENUM_BITFIELD.\n-\t(gfc_exec_op): Add EXEC_OMP_ERROR.\n-\t* match.h (gfc_match_omp_error): New.\n-\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_(AT,SEVERITY,MESSAGE).\n-\t(gfc_match_omp_clauses): Handle new clauses.\n-\t(OMP_ERROR_CLAUSES, gfc_match_omp_error): New.\n-\t(resolve_omp_clauses): Resolve new clauses.\n-\t(omp_code_to_statement, gfc_resolve_omp_directive): Handle\n-\tEXEC_OMP_ERROR.\n-\t* parse.c (decode_omp_directive, next_statement,\n-\tgfc_ascii_statement): Handle 'omp error'.\n-\t* resolve.c (gfc_resolve_blocks): Likewise.\n-\t* st.c (gfc_free_statement): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_error): Likewise.\n-\t(gfc_trans_omp_directive): Likewise.\n-\t* trans.c (trans_code): Likewise.\n-\n-2021-08-20  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* types.def (BT_FN_VOID_CONST_PTR_SIZE): New DEF_FUNCTION_TYPE_2.\n-\t* f95-lang.c (ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST): Define.\n-\n-2021-08-19  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100950\n-\t* simplify.c (substring_has_constant_len): New.\n-\t(gfc_simplify_len): Handle case of substrings with constant\n-\tbounds.\n-\n-2021-08-18  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* match.h (gfc_match_omp_nothing): New.\n-\t* openmp.c (gfc_match_omp_nothing): New.\n-\t* parse.c (decode_omp_directive): Match 'nothing' directive.\n-\n-2021-08-17  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_node, show_code_node): Handle\n-\tEXEC_OMP_SCOPE.\n-\t* gfortran.h (enum gfc_statement): Add ST_OMP_(END_)SCOPE.\n-\t(enum gfc_exec_op): Add EXEC_OMP_SCOPE.\n-\t* match.h (gfc_match_omp_scope): New.\n-\t* openmp.c (OMP_SCOPE_CLAUSES): Define\n-\t(gfc_match_omp_scope): New.\n-\t(gfc_match_omp_cancellation_point, gfc_match_omp_end_nowait):\n-\tImprove error diagnostic.\n-\t(omp_code_to_statement): Handle ST_OMP_SCOPE.\n-\t(gfc_resolve_omp_directive): Handle EXEC_OMP_SCOPE.\n-\t* parse.c (decode_omp_directive, next_statement,\n-\tgfc_ascii_statement, parse_omp_structured_block,\n-\tparse_executable): Handle OpenMP's scope construct.\n-\t* resolve.c (gfc_resolve_blocks): Likewise\n-\t* st.c (gfc_free_statement): Likewise\n-\t* trans-openmp.c (gfc_trans_omp_scope): New.\n-\t(gfc_trans_omp_directive): Call it.\n-\t* trans.c (trans_code): handle EXEC_OMP_SCOPE.\n-\n-2021-08-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle 'filter' clause.\n-\t(show_omp_node, show_code_node): Handle (combined) omp masked construct.\n-\t* frontend-passes.c (gfc_code_walker): Likewise.\n-\t* gfortran.h (enum gfc_statement): Add ST_OMP_*_MASKED*.\n-\t(enum gfc_exec_op): Add EXEC_OMP_*_MASKED*.\n-\t* match.h (gfc_match_omp_masked, gfc_match_omp_masked_taskloop,\n-\tgfc_match_omp_masked_taskloop_simd, gfc_match_omp_parallel_masked,\n-\tgfc_match_omp_parallel_masked_taskloop,\n-\tgfc_match_omp_parallel_masked_taskloop_simd): New prototypes.\n-\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_FILTER.\n-\t(gfc_match_omp_clauses): Match it.\n-\t(OMP_MASKED_CLAUSES, gfc_match_omp_parallel_masked,\n-\tgfc_match_omp_parallel_masked_taskloop,\n-\tgfc_match_omp_parallel_masked_taskloop_simd,\n-\tgfc_match_omp_masked, gfc_match_omp_masked_taskloop,\n-\tgfc_match_omp_masked_taskloop_simd): New.\n-\t(resolve_omp_clauses): Resolve filter clause.\n-\t(gfc_resolve_omp_parallel_blocks, resolve_omp_do,\n-\tomp_code_to_statement, gfc_resolve_omp_directive): Handle\n-\tomp masked constructs.\n-\t* parse.c (decode_omp_directive, case_exec_markers,\n-\tgfc_ascii_statement, parse_omp_do, parse_omp_structured_block,\n-\tparse_executable): Likewise.\n-\t* resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n-\t* st.c (gfc_free_statement): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Handle filter clause.\n-\t(GFC_OMP_SPLIT_MASKED, GFC_OMP_MASK_MASKED): New enum values.\n-\t(gfc_trans_omp_masked): New.\n-\t(gfc_split_omp_clauses): Handle combined masked directives.\n-\t(gfc_trans_omp_master_taskloop): Rename to ...\n-\t(gfc_trans_omp_master_masked_taskloop): ... this; handle also\n-\tcombined masked directives.\n-\t(gfc_trans_omp_parallel_master): Rename to ...\n-\t(gfc_trans_omp_parallel_master_masked): ... this; handle\n-\tcombined masked directives.\n-\t(gfc_trans_omp_directive): Handle EXEC_OMP_*_MASKED*.\n-\t* trans.c (trans_code): Likewise.\n-\n-2021-08-15  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/99351\n-\t* match.c (sync_statement): Replace %v code by %e in gfc_match to\n-\tallow for function references as STAT and ERRMSG arguments.\n-\t* resolve.c (resolve_sync): Adjust checks of STAT= and ERRMSG= to\n-\tbeing definable arguments.  Function references with a data\n-\tpointer result are accepted.\n-\t* trans-stmt.c (gfc_trans_sync): Adjust assertion.\n-\n-2021-08-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* gfortran.h (gfc_omp_proc_bind_kind): Add OMP_PROC_BIND_PRIMARY.\n-\t* dump-parse-tree.c (show_omp_clauses): Add TODO comment to\n-\tchange 'master' to 'primary' in proc_bind for OpenMP 5.1.\n-\t* intrinsic.texi (OMP_LIB): Mention OpenMP 5.1; add\n-\tomp_proc_bind_primary.\n-\t* openmp.c (gfc_match_omp_clauses): Accept\n-\t'primary' as alias for 'master'.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Handle\n-\tOMP_PROC_BIND_PRIMARY.\n-\n-2021-08-11  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* iso-c-binding.def (c_float128, c_float128_complex): Check\n-\tfloat128_type_node instead of gfc_float128_type_node.\n-\t* trans-types.c (gfc_init_kinds, gfc_build_real_type):\n-\tUpdate comments re supported 128-bit floating-point types.\n-\n-2021-08-11  Richard Biener  <rguenther@suse.de>\n-\n-\t* trans-common.c (create_common): Set TREE_THIS_VOLATILE on the\n-\tCOMPONENT_REF if the field is volatile.\n-\n-2021-08-07  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/68568\n-\t* primary.c (gfc_expr_attr): Variable attribute can only be\n-\tinquired when symtree is non-NULL.\n-\n-2021-07-28  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/101564\n-\t* expr.c (gfc_check_vardef_context): Add check for KIND and LEN\n-\tparameter inquiries.\n-\t* match.c (gfc_match): Fix comment for %v code.\n-\t(gfc_match_allocate, gfc_match_deallocate): Replace use of %v code\n-\tby %e in gfc_match to allow for function references as STAT and\n-\tERRMSG arguments.\n-\t* resolve.c (resolve_allocate_deallocate): Avoid NULL pointer\n-\tdereferences and shortcut for bad STAT and ERRMSG argument to\n-\t(DE)ALLOCATE.  Remove bogus parts of checks for STAT and ERRMSG.\n-\n-2021-07-26  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93308\n-\tPR fortran/93963\n-\tPR fortran/94327\n-\tPR fortran/94331\n-\tPR fortran/97046\n-\t* trans-decl.c (convert_CFI_desc): Only copy out the descriptor\n-\tif necessary.\n-\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Updated attribute\n-\thandling which reflect a previous intermediate version of the\n-\tstandard. Only copy out the descriptor if necessary.\n-\n-2021-07-23  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/101536\n-\t* check.c (array_check): Adjust check for the case of CLASS\n-\tarrays.\n-\n-2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n-\t    Joseph Myers  <joseph@codesourcery.com>\n-\t    Cesar Philippidis  <cesar@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_attr): Update.\n-\t* gfortran.h (symbol_attribute): Add 'oacc_routine_nohost' member.\n-\t(gfc_omp_clauses): Add 'nohost' member.\n-\t* module.c (ab_attribute): Add 'AB_OACC_ROUTINE_NOHOST'.\n-\t(attr_bits, mio_symbol_attribute): Update.\n-\t* openmp.c (omp_mask2): Add 'OMP_CLAUSE_NOHOST'.\n-\t(gfc_match_omp_clauses): Handle 'OMP_CLAUSE_NOHOST'.\n-\t(OACC_ROUTINE_CLAUSES): Add 'OMP_CLAUSE_NOHOST'.\n-\t(gfc_match_oacc_routine): Update.\n-\t* trans-decl.c (add_attributes_to_decl): Update.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Likewise.\n-\n-2021-07-21  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/101514\n-\t* target-memory.c (gfc_interpret_derived): Size of array component\n-\tof derived type can only be computed here for explicit shape.\n-\t* trans-types.c (gfc_get_nodesc_array_type): Do not dereference\n-\tNULL pointers.\n-\n-2021-07-21  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* decl.c (gfc_verify_c_interop_param): Update for F2008 + F2018\n-\tchanges; reject unsupported bits with 'Error: Sorry,'.\n-\t* trans-expr.c (gfc_conv_procedure_call): Fix condition to\n-\tFor using CFI descriptor with characters.\n-\n-2021-07-18  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/101084\n-\t* io.c (resolve_tag_format): Extend FORMAT check to unknown type.\n-\n-2021-07-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100949\n-\t* trans-expr.c (gfc_trans_class_init_assign): Call\n-\tgfc_conv_expr_present only for dummy variables.\n-\n-2021-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/100227\n-\t* frontend-passes.c (traverse_io_block): Adjust test for\n-\twhen a variable is eligible for the transformation to\n-\tarray slice.\n-\n-2021-06-28  Martin Sebor  <msebor@redhat.com>\n-\n-\t* trans-array.c (trans_array_constructor): Replace direct uses\n-\tof TREE_NO_WARNING with warning_suppressed_p, and suppress_warning.\n-\t* trans-decl.c (gfc_build_qualified_array): Same.\n-\t(gfc_build_dummy_array_decl): Same.\n-\t(generate_local_decl): Same.\n-\t(gfc_generate_function_code): Same.\n-\t* trans-openmp.c (gfc_omp_clause_default_ctor): Same.\n-\t(gfc_omp_clause_copy_ctor): Same.\n-\t* trans-types.c (get_dtype_type_node): Same.\n-\t(gfc_get_desc_dim_type): Same.\n-\t(gfc_get_array_descriptor_base): Same.\n-\t(gfc_get_caf_vector_type): Same.\n-\t(gfc_get_caf_reference_type): Same.\n-\t* trans.c (gfc_create_var_np): Same.\n-\n-2021-06-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Fix enum type used\n-\tfor dumping gfc_omp_defaultmap_category.\n-\n-2021-06-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/100337\n-\t* trans-intrinsic.c (conv_co_collective): Check stat for null ptr\n-\tbefore dereferrencing.\n-\n-2021-06-18  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100283\n-\tPR fortran/101123\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Unconditionally\n-\tconvert result of min/max to result type.\n-\n-2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95501\n-\tPR fortran/95502\n-\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer\n-\tdereference.\n-\t* match.c (gfc_match_pointer_assignment): Likewise.\n-\t* parse.c (gfc_check_do_variable): Avoid comparison with NULL\n-\tsymtree.\n-\n-2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tRevert:\n-\t2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95501\n-\tPR fortran/95502\n-\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer\n-\tdereference.\n-\t* match.c (gfc_match_pointer_assignment): Likewise.\n-\t* parse.c (gfc_check_do_variable): Avoid comparison with NULL\n-\tsymtree.\n-\n-2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/95501\n-\tPR fortran/95502\n-\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer\n-\tdereference.\n-\t* match.c (gfc_match_pointer_assignment): Likewise.\n-\t* parse.c (gfc_check_do_variable): Avoid comparison with NULL\n-\tsymtree.\n-\n-2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/92568\n-\t* dump-parse-tree.c (show_omp_clauses): Update for defaultmap.\n-\t* f95-lang.c (LANG_HOOKS_OMP_ALLOCATABLE_P,\n-\tLANG_HOOKS_OMP_SCALAR_TARGET_P): New.\n-\t* gfortran.h (enum gfc_omp_defaultmap,\n-\tenum gfc_omp_defaultmap_category): New.\n-\t* openmp.c (gfc_match_omp_clauses): Update defaultmap matching.\n-\t* trans-decl.c (gfc_finish_decl_attrs): Set GFC_DECL_SCALAR_TARGET.\n-\t* trans-openmp.c (gfc_omp_allocatable_p, gfc_omp_scalar_target_p): New.\n-\t(gfc_omp_scalar_p): Take 'ptr_alloc_ok' argument.\n-\t(gfc_trans_omp_clauses, gfc_split_omp_clauses): Update for\n-\tdefaultmap changes.\n-\t* trans.h (gfc_omp_scalar_p): Update prototype.\n-\t(gfc_omp_allocatable_p, gfc_omp_scalar_target_p): New.\n-\t(struct lang_decl): Add scalar_target.\n-\t(GFC_DECL_SCALAR_TARGET, GFC_DECL_GET_SCALAR_TARGET): New.\n-\n-2021-06-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* resolve.c (resolve_variable): Remove *XCNEW used to\n-\tnullify nullified memory.\n-\n-2021-06-09  Martin Liska  <mliska@suse.cz>\n-\n-\t* intrinsic.texi: Add missing @headitem to tables with a header.\n-\n-2021-06-09  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/100965\n-\t* trans-openmp.c (gfc_omp_finish_clause): Gimplify OMP_CLAUSE_SIZE.\n-\n-2021-06-08  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR middle-end/99928\n-\t* trans-openmp.c (gfc_add_clause_implicitly): New.\n-\t(gfc_split_omp_clauses): Use it.\n-\t(gfc_free_split_omp_clauses): New.\n-\t(gfc_trans_omp_do_simd, gfc_trans_omp_parallel_do,\n-\tgfc_trans_omp_parallel_do_simd, gfc_trans_omp_distribute,\n-\tgfc_trans_omp_teams, gfc_trans_omp_target, gfc_trans_omp_taskloop,\n-\tgfc_trans_omp_master_taskloop, gfc_trans_omp_parallel_master): Use it.\n-\n-2021-06-08  Martin Liska  <mliska@suse.cz>\n-\n-\t* intrinsic.texi: Fix typo.\n-\t* trans-expr.c (gfc_trans_pointer_assignment): Likewise.\n-\n-2021-06-05  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/100120\n-\tPR fortran/100816\n-\tPR fortran/100818\n-\tPR fortran/100819\n-\tPR fortran/100821\n-\t* trans-array.c (gfc_get_array_span): rework the way character\n-\tarray \"span\" was calculated.\n-\t(gfc_conv_expr_descriptor): improve handling of character sections\n-\tand unlimited polymorphic objects.\n-\t* trans-expr.c (gfc_get_character_len): new function to calculate\n-\tcharacter string length.\n-\t(gfc_get_character_len_in_bytes): new function to calculate\n-\tcharacter string length in bytes.\n-\t(gfc_conv_scalar_to_descriptor): add call to set the \"span\".\n-\t(gfc_trans_pointer_assignment): set \"_len\" and antecipate the\n-\tinitialization of the deferred character length hidden argument.\n-\t* trans-intrinsic.c (gfc_conv_associated): set \"force_no_tmp\" to\n-\tavoid the creation of a temporary.\n-\t* trans-types.c (gfc_get_dtype_rank_type): rework type detection\n-\tso that unlimited polymorphic objects get proper type infomation,\n-\talso important for bind(c).\n-\t(gfc_get_dtype): add argument to pass the rank if necessary.\n-\t(gfc_get_array_type_bounds): cosmetic change to have character\n-\tarrays called character instead of unknown.\n-\t* trans-types.h (gfc_get_dtype): modify prototype.\n-\t* trans.c (get_array_span): rework the way character array \"span\"\n-\twas calculated.\n-\t* trans.h (gfc_get_character_len): new prototype.\n-\t(gfc_get_character_len_in_bytes): new prototype.\n-\tAdd \"unlimited_polymorphic\" flag to \"gfc_se\" type to signal when\n-\texpression carries an unlimited polymorphic object.\n-\n-2021-06-04  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/99839\n-\t* frontend-passes.c (inline_matmul_assign): Do not inline matmul\n-\tif the assignment to the resulting array if it is not of canonical\n-\ttype (real/integer/complex/logical).\n-\n-2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_code_node): Handle\n-\tEXEC_OMP_(TARGET_)(,PARALLEL_,TEAMS_)LOOP.\n-\n-2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* scanner.c (skip_fixed_omp_sentinel): Set openacc_flag if\n-\tthis is not an (OpenMP) continuation line.\n-\t(skip_fixed_oacc_sentinel): Likewise for openmp_flag and OpenACC.\n-\t(gfc_next_char_literal): gfc_error_now to force error for mixed OMP/ACC\n-\tcontinuation once per location and return '\\n'.\n-\n-2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR middle-end/99928\n-\t* openmp.c (gfc_match_omp_clauses): Fix typo in error message.\n-\n-2021-06-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR middle-end/99928\n-\t* dump-parse-tree.c (show_omp_clauses): Handle bind clause.\n-\t(show_omp_node): Handle loop directive.\n-\t* frontend-passes.c (gfc_code_walker): Likewise.\n-\t* gfortran.h (enum gfc_statement): Add\n-\tST_OMP_(END_)(TARGET_)(|PARALLEL_|TEAMS_)LOOP.\n-\t(enum gfc_omp_bind_type): New.\n-\t(gfc_omp_clauses): Use it.\n-\t(enum gfc_exec_op): Add EXEC_OMP_(TARGET_)(|PARALLEL_|TEAMS_)LOOP.\n-\t* match.h (gfc_match_omp_loop, gfc_match_omp_parallel_loop,\n-\tgfc_match_omp_target_parallel_loop, gfc_match_omp_target_teams_loop,\n-\tgfc_match_omp_teams_loop): New.\n-\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_BIND.\n-\t(gfc_match_omp_clauses): Handle it.\n-\t(OMP_LOOP_CLAUSES, gfc_match_omp_loop, gfc_match_omp_teams_loop,\n-\tgfc_match_omp_target_teams_loop, gfc_match_omp_parallel_loop,\n-\tgfc_match_omp_target_parallel_loop): New.\n-\t(resolve_omp_clauses, resolve_omp_do, omp_code_to_statement,\n-\tgfc_resolve_omp_directive): Handle omp loop.\n-\t* parse.c (decode_omp_directive case_exec_markers, gfc_ascii_statement,\n-\tparse_omp_do, parse_executable): Likewise.\n-\t(parse_omp_structured_block): Remove ST_ which use parse_omp_do.\n-\t* resolve.c (gfc_resolve_blocks): Add omp loop.\n-\t* st.c (gfc_free_statement): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Handle bind clause.\n-\t(gfc_trans_omp_do, gfc_trans_omp_parallel_do, gfc_trans_omp_distribute,\n-\tgfc_trans_omp_teams, gfc_trans_omp_target, gfc_trans_omp_directive):\n-\tHandle loop directive.\n-\t(gfc_split_omp_clauses): Likewise; fix firstprivate/lastprivate\n-\tand (in_)reduction for taskloop.\n-\t* trans.c (trans_code): Handle omp loop directive.\n-\n-2021-06-01  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR middle-end/99928\n-\t* dump-parse-tree.c (show_omp_node, show_code_node): Handle\n-\t(parallel) master taskloop (simd).\n-\t* frontend-passes.c (gfc_code_walker): Set in_omp_workshare\n-\tto false for parallel master taskloop (simd).\n-\t* gfortran.h (enum gfc_statement):\n-\tAdd ST_OMP_(END_)(PARALLEL_)MASTER_TASKLOOP(_SIMD).\n-\t(enum gfc_exec_op): EXEC_OMP_(PARALLEL_)MASTER_TASKLOOP(_SIMD).\n-\t* match.h (gfc_match_omp_master_taskloop,\n-\tgfc_match_omp_master_taskloop_simd,\n-\tgfc_match_omp_parallel_master_taskloop,\n-\tgfc_match_omp_parallel_master_taskloop_simd): New prototype.\n-\t* openmp.c (gfc_match_omp_parallel_master_taskloop,\n-\tgfc_match_omp_parallel_master_taskloop_simd,\n-\tgfc_match_omp_master_taskloop,\n-\tgfc_match_omp_master_taskloop_simd): New.\n-\t(gfc_match_omp_taskloop_simd): Permit 'reduction' clause.\n-\t(resolve_omp_clauses): Handle new combined directives; remove\n-\tinscan-reduction check to reduce multiple errors; add\n-\ttask-reduction error for 'taskloop simd'.\n-\t(gfc_resolve_omp_parallel_blocks,\n-\tresolve_omp_do, omp_code_to_statement,\n-\tgfc_resolve_omp_directive): Handle new combined constructs.\n-\t* parse.c (decode_omp_directive, next_statement,\n-\tgfc_ascii_statement, parse_omp_do, parse_omp_structured_block,\n-\tparse_executable): Likewise.\n-\t* resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n-\t* st.c (gfc_free_statement): Likewise.\n-\t* trans.c (trans_code): Likewise.\n-\t* trans-openmp.c (gfc_split_omp_clauses,\n-\tgfc_trans_omp_directive): Likewise.\n-\t(gfc_trans_omp_parallel_master): Move after gfc_trans_omp_master_taskloop;\n-\thandle parallel master taskloop (simd) as well.\n-\t(gfc_trans_omp_taskloop): Take gfc_exec_op as arg.\n-\t(gfc_trans_omp_master_taskloop): New.\n-\n-2021-05-30  Gerald Pfeifer  <gerald@pfeifer.com>\n-\n-\t* gfortran.texi (BOZ literal constants): Fix typo.\n-\n-2021-05-28  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_iterator): New.\n-\t(show_omp_namelist): Handle iterators.\n-\t(show_omp_clauses): Handle affinity.\n-\t* gfortran.h (gfc_free_omp_namelist): New union with 'udr' and new 'ns'.\n-\t* match.c (gfc_free_omp_namelist): Add are to choose union element.\n-\t* openmp.c (gfc_free_omp_clauses, gfc_match_omp_detach,\n-\tgfc_match_omp_clause_reduction, gfc_match_omp_flush): Update\n-\tcall to gfc_free_omp_namelist.\n-\t(gfc_match_omp_variable_list): Likewise; permit preceeding whitespace.\n-\t(enum omp_mask1): Add OMP_CLAUSE_AFFINITY.\n-\t(gfc_match_iterator): New.\n-\t(gfc_match_omp_clauses): Use it; update call to gfc_free_omp_namelist.\n-\t(OMP_TASK_CLAUSES): Add OMP_CLAUSE_AFFINITY.\n-\t(gfc_match_omp_taskwait): Match depend clause.\n-\t(resolve_omp_clauses): Handle affinity; update for udr/union change.\n-\t(gfc_resolve_omp_directive): Resolve clauses of taskwait.\n-\t* st.c (gfc_free_statement): Update gfc_free_omp_namelist call.\n-\t* trans-openmp.c (gfc_trans_omp_array_reduction_or_udr): Likewise\n-\t(handle_iterator): New.\n-\t(gfc_trans_omp_clauses): Handle iterators for depend/affinity clause.\n-\t(gfc_trans_omp_taskwait): Handle depend clause.\n-\t(gfc_trans_omp_directive): Update call.\n-\n-2021-05-27  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100602\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Use CLASS data\n-\tattributes for CLASS arrays for generation of runtime error.\n-\n-2021-05-27  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100656\n-\t* trans-array.c (gfc_conv_ss_startstride): Do not call check for\n-\tpresence of a dummy argument when a symbol actually refers to a\n-\tnon-dummy.\n-\n-2021-05-25  Tobias Burnus  <tobias@codesourcery.com>\n-\t    Johannes Nendwich  <a08727063@unet.univie.ac.at>\n-\n-\t* intrinsic.texi (GERROR, GETARGS, GETLOG, NORM2, PARITY, RANDOM_INIT,\n-\tRANDOM_NUMBER): Fix typos and copy'n'paste errors.\n-\n-2021-05-24  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/86470\n-\t* trans-expr.c (gfc_copy_class_to_class): Add unshare_expr.\n-\t* trans-openmp.c (gfc_is_polymorphic_nonptr,\n-\tgfc_is_unlimited_polymorphic_nonptr): New.\n-\t(gfc_omp_clause_copy_ctor, gfc_omp_clause_dtor): Handle\n-\tpolymorphic scalars.\n-\n-2021-05-23  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100551\n-\t* trans-expr.c (gfc_conv_procedure_call): Adjust check for\n-\timplicit conversion of actual argument to an unlimited polymorphic\n-\tprocedure argument.\n-\n-2021-05-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* intrinsic.texi (ATOMIC_ADD, ATOMIC_FETCH_ADD): Use the\n-\tproper variable name in the description.\n-\n-2021-05-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\t    Steve Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/98301\n-\t* trans-decl.c (gfc_build_builtin_function_decls): Move decl.\n-\t* trans-intrinsic.c (conv_intrinsic_random_init): Use bool for\n-\tlib-call of caf_random_init instead of logical (4-byte).\n-\t* trans.h: Add tree var for random_init.\n-\n-2021-05-20  Marcel Vollweiler  <marcel@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_omp_clauses): Support map-type-modifier 'close'.\n-\n-2021-05-18  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/100642\n-\t* openmp.c (omp_code_to_statement): Add missing EXEC_OMP_DEPOBJ.\n-\n-2021-05-17  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98411\n-\t* trans-decl.c (gfc_finish_var_decl): Add check for explicit SAVE\n-\tattribute.\n-\n-2021-05-17  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/100633\n-\t* resolve.c (gfc_resolve_code): Reject nonintrinsic assignments in\n-\tOMP WORKSHARE.\n-\n-2021-05-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_node, show_code_node): Handle\n-\tEXEC_OMP_PARALLEL_MASTER.\n-\t* frontend-passes.c (gfc_code_walker): Likewise.\n-\t* gfortran.h (enum gfc_statement): Add ST_OMP_PARALLEL_MASTER and\n-\tST_OMP_END_PARALLEL_MASTER.\n-\t(enum gfc_exec_op): Add EXEC_OMP_PARALLEL_MASTER..\n-\t* match.h (gfc_match_omp_parallel_master): Handle it.\n-\t* openmp.c (gfc_match_omp_parallel_master, resolve_omp_clauses,\n-\tomp_code_to_statement, gfc_resolve_omp_directive): Likewise.\n-\t* parse.c (decode_omp_directive, case_exec_markers,\n-\tgfc_ascii_statement, parse_omp_structured_block,\n-\tparse_executable): Likewise.\n-\t* resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n-\t* st.c (gfc_free_statement): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_parallel_master,\n-\tgfc_trans_omp_workshare, gfc_trans_omp_directive): Likewise.\n-\t* trans.c (trans_code): Likewise.\n-\n-2021-05-14  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* resolve.c (resolve_symbol): Handle implicit SAVE of main-program\n-\tfor vars in 'omp threadprivate' and 'omp declare target'.\n-\n-2021-05-10  Martin Liska  <mliska@suse.cz>\n-\n-\t* decl.c (variable_decl): Use startswith\n-\tfunction instead of strncmp.\n-\t(gfc_match_end): Likewise.\n-\t* gfortran.h (gfc_str_startswith): Likewise.\n-\t* module.c (load_omp_udrs): Likewise.\n-\t(read_module): Likewise.\n-\t* options.c (gfc_handle_runtime_check_option): Likewise.\n-\t* primary.c (match_arg_list_function): Likewise.\n-\t* trans-decl.c (gfc_get_symbol_decl): Likewise.\n-\t* trans-expr.c (gfc_conv_procedure_call): Likewise.\n-\t* trans-intrinsic.c (gfc_conv_ieee_arithmetic_function): Likewise.\n-\n-2021-05-06  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/46991\n-\tPR fortran/99819\n-\t* class.c (gfc_build_class_symbol): Remove the error that\n-\tdisables assumed size class arrays. Class array types that are\n-\tnot deferred shape or assumed rank are given a unique name and\n-\tplaced in the procedure namespace.\n-\t* trans-array.c (gfc_trans_g77_array): Obtain the data pointer\n-\tfor class arrays.\n-\t(gfc_trans_dummy_array_bias): Suppress the runtime error for\n-\textent violations in explicit shape class arrays because it\n-\talways fails.\n-\t* trans-expr.c (gfc_conv_procedure_call): Handle assumed size\n-\tclass actual arguments passed to non-descriptor formal args by\n-\tusing the data pointer, stored as the symbol's backend decl.\n-\n-2021-05-05  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100274\n-\t* interface.c (gfc_compare_actual_formal): Continue checks after\n-\temitting warning for argument length mismatch.\n-\t* trans-expr.c (gfc_conv_procedure_call): Check for NULL pointer\n-\tdereference.\n-\n-2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR testsuite/100397\n-\t* trans-openmp.c (gfc_trans_omp_depobj): Fix pasto in enum values.\n-\n-2021-04-28  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (gfc_match_omp_variable_list): Gobble whitespace before\n-\tchecking whether a '%' or parenthesis-open follows as next character.\n-\n-2021-04-28  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/82376\n-\t* trans-expr.c (gfc_conv_procedure_call): Evaluate function result\n-\tand then pass a pointer.\n-\n-2021-04-26  Thomas Schwinge  <thomas@codesourcery.com>\n-\t    Nathan Sidwell  <nathan@codesourcery.com>\n-\t    Tom de Vries  <vries@codesourcery.com>\n-\t    Julian Brown  <julian@codesourcery.com>\n-\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n-\n-\t* lang.opt (Wopenacc-parallelism): New.\n-\n-2021-04-24  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100154\n-\t* check.c (variable_check): Allow function reference having a data\n-\tpointer result.\n-\t(arg_strlen_is_zero): New function.\n-\t(gfc_check_fgetputc_sub): Add static check of character and status\n-\targuments.\n-\t(gfc_check_fgetput_sub): Likewise.\n-\t* intrinsic.c (add_subroutines): Fix argument name for the\n-\tcharacter argument to intrinsic subroutines fget[c], fput[c].\n-\n-2021-04-24  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/100218\n-\t* expr.c (gfc_check_vardef_context): Extend check to allow pointer\n-\tfrom a function reference.\n-\n-2021-04-22  Martin Liska  <mliska@suse.cz>\n-\n-\tPR testsuite/100159\n-\tPR testsuite/100192\n-\t* frontend-passes.c (optimize_expr): Fix typos and missing comments.\n-\n-2021-04-22  Michael Meissner  <meissner@linux.ibm.com>\n-\n-\tPR fortran/96983\n-\t* trans-intrinsic.c (build_round_expr): If int type is larger than\n-\tlong long, do the round and convert to the integer type.  Do not\n-\ttry to find a floating point type the exact size of the integer\n-\ttype.\n-\n-2021-04-21  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_namelist): Handle depobj + mutexinoutset\n-\tin the depend clause.\n-\t(show_omp_clauses, show_omp_node, show_code_node): Handle depobj.\n-\t* gfortran.h (enum gfc_statement): Add ST_OMP_DEPOBJ.\n-\t(enum gfc_omp_depend_op): Add OMP_DEPEND_UNSET,\n-\tOMP_DEPEND_MUTEXINOUTSET and OMP_DEPEND_DEPOBJ.\n-\t(gfc_omp_clauses): Add destroy, depobj_update and depobj.\n-\t(enum gfc_exec_op): Add EXEC_OMP_DEPOBJ\n-\t* match.h (gfc_match_omp_depobj): Match 'omp depobj'.\n-\t* openmp.c (gfc_match_omp_clauses): Add depobj + mutexinoutset\n-\tto depend clause.\n-\t(gfc_match_omp_depobj, resolve_omp_clauses, gfc_resolve_omp_directive):\n-\tHandle 'omp depobj'.\n-\t* parse.c (decode_omp_directive, next_statement, gfc_ascii_statement):\n-\tLikewise.\n-\t* resolve.c (gfc_resolve_code): Likewise.\n-\t* st.c (gfc_free_statement): Likewise.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Handle depobj + mutexinoutset\n-\tin the depend clause.\n-\t(gfc_trans_omp_depobj, gfc_trans_omp_directive): Handle EXEC_OMP_DEPOBJ.\n-\t* trans.c (trans_code): Likewise.\n-\n-2021-04-20  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/100110\n-\t* trans-decl.c (gfc_get_symbol_decl): Replace test for host\n-\tassociation with a check that the current and symbol namespaces\n-\tare the same.\n-\n-2021-04-19  Thomas Schwinge  <thomas@codesourcery.com>\n-\n-\t* lang.opt (fopenacc-kernels=): Remove.\n-\n-2021-04-16  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/100094\n-\t* trans-array.c (gfc_trans_deferred_array): Add code to initialize\n-\tpointers and allocatables with correct TKR parameters.\n-\n-2021-04-16  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/100018\n-\t* resolve.c: Add association check before de-referencing pointer.\n-\n-2021-04-16  Harald Anlauf  <anlauf@gmx.de>\n-\t    Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/63797\n-\t* module.c (write_symtree): Do not write interface of intrinsic\n-\tprocedure to module file for F2003 and newer.\n-\n-2021-04-15  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/99307\n-\t* symbol.c: Remove trailing white space.\n-\t* trans-array.c (gfc_trans_create_temp_array): Create a class\n-\ttemporary for class expressions and assign the new descriptor\n-\tto the data field.\n-\t(build_class_array_ref): If the class expr can be extracted,\n-\tthen use that for 'decl'. Class function results are reliably\n-\thandled this way. Call gfc_find_and_cut_at_last_class_ref to\n-\teliminate largely redundant code. Remove dead code and recast\n-\tthe rest of the code to extract 'decl' for remaining cases.\n-\tCall gfc_build_spanned_array_ref.\n-\t(gfc_alloc_allocatable_for_assignment): Use class descriptor\n-\telement length for 'elemsize1'. Eliminate repeat set of dtype\n-\tfor class expressions.\n-\t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Include\n-\tadditional code from build_class_array_ref, and use optional\n-\tgfc_typespec pointer argument.\n-\t(gfc_trans_scalar_assign): Make use of pre and post blocks for\n-\tall class expressions.\n-\t* trans.c (get_array_span): For unlimited polymorphic exprs\n-\tmultiply the span by the value of the _len field.\n-\t(gfc_build_spanned_array_ref): New function.\n-\t(gfc_build_array_ref): Call gfc_build_spanned_array_ref and\n-\teliminate repeated code.\n-\t* trans.h: Add arg to gfc_find_and_cut_at_last_class_ref and\n-\tadd prototype for gfc_build_spanned_array_ref.\n-\n-2021-04-14  Martin Liska  <mliska@suse.cz>\n-\n-\t* intrinsic.texi: The table has first column empty and it makes\n-\ttrouble when processing makeinfo --xml output.\n-\n-2021-04-09  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99817\n-\t* trans-types.c (gfc_get_function_type): Also generate hidden\n-\tcoarray argument for character arguments.\n-\n-2021-04-03  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/99818\n-\t* interface.c (compare_parameter): The codimension attribute is\n-\tapplied to the _data field of class formal arguments.\n-\n-2021-04-01  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/99840\n-\t* simplify.c (gfc_simplify_transpose): Properly initialize\n-\tresulting shape.\n-\n-2021-03-28  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/99602\n-\t* trans-expr.c (gfc_conv_procedure_call): Use the _data attrs\n-\tfor class expressions and detect proc pointer evaluations by\n-\tthe non-null actual argument list.\n-\n-2021-03-27  Steve Kargl  <kargl@gcc.gnu.org>\n-\n-\t* misc.c (gfc_typename): Fix off-by-one in buffer sizes.\n-\n-2021-03-26  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99651\n-\t* intrinsic.c (gfc_intrinsic_func_interface): Set\n-\tattr.proc = PROC_INTRINSIC if FL_PROCEDURE.\n-\n-2021-03-24  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99369\n-\t* resolve.c (resolve_operator): Make 'msg' buffer larger\n-\tand use snprintf.\n-\n-2021-03-23  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93660\n-\t* trans-decl.c (build_function_decl): Add comment;\n-\tincrement hidden_typelist for caf_token/caf_offset.\n-\t* trans-types.c (gfc_get_function_type): Add comment;\n-\tadd missing caf_token/caf_offset args.\n-\n-2021-03-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99688\n-\t* match.c (select_type_set_tmp, gfc_match_select_type,\n-\tgfc_match_select_rank): Fix 'name' buffersize to avoid out of bounds.\n-\t* resolve.c (resolve_select_type): Likewise.\n-\n-2021-03-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\t* frontend-passes.c (inline_limit_check): Add rank_a\n-\targument. If a is rank 1, set the second dimension to 1.\n-\t(inline_matmul_assign): Pass rank_a argument to inline_limit_check.\n-\t(call_external_blas): Likewise.\n-\n-2021-03-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\n-\tPR fortran/99345\n-\t* frontend-passes.c (doloop_contained_procedure_code):\n-\tProperly handle EXEC_IOLENGTH.\n-\n-2021-03-15  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/99545\n-\t* trans-stmt.c (gfc_trans_allocate): Mark the initialization\n-\tassignment by setting init_flag.\n-\n-2021-03-14  Harald Anlauf  <anlauf@gmx.de>\n-\t    Paul Thomas  <pault@gcc.gnu.org>\n-\n-\t* trans-expr.c (gfc_conv_procedure_call): Fix runtime checks for\n-\tCLASS arguments.\n-\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Likewise.\n-\n-2021-03-13  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/99125\n-\t* trans-array.c (gfc_conv_expr_descriptor): For deferred length\n-\tlength components use the ss_info string length instead of\n-\tgfc_get_expr_charlen. Make sure that the deferred string length\n-\tis a variable before assigning to it. Otherwise use the expr.\n-\t* trans-expr.c (gfc_conv_string_length): Make sure that the\n-\tdeferred string length is a variable before assigning to it.\n-\n-2021-03-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99514\n-\t* resolve.c (resolve_symbol): Accept vars which are in DATA\n-\tand hence (either) implicit SAVE (or in common).\n-\n-2021-03-10  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/99205\n-\t* data.c (gfc_assign_data_value): Reject non-constant character\n-\tlength for lvalue.\n-\t* trans-array.c (gfc_conv_array_initializer): Restrict loop to\n-\telements which are defined to avoid NULL pointer dereference.\n-\n-2021-03-10  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* intrinsic.texi (MIN): Correct 'maximum' to 'minimum'.\n-\n-2021-03-10  Eric Botcazou  <ebotcazou@adacore.com>\n-\n-\tPR fortran/96983\n-\t* trans-intrinsic.c (build_round_expr): Do not implicitly assume\n-\tthat __float128 is the 128-bit floating-point type.\n-\n-2021-03-08  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/49278\n-\t* data.c (gfc_assign_data_value): Reject variable with PARAMETER\n-\tattribute in DATA statement.\n-\n-2021-03-05  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99355\n-\tPR fortran/57871\n-\t* invoke.texi (-freal{4,8}-real-*): Extend description.\n-\t* primary.c (match_real_constant): Also promote real literals\n-\twith '_kind' number.\n-\n-2021-03-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99355\n-\t* decl.c (gfc_match_old_kind_spec, gfc_match_kind_spec): Avoid\n-\tredoing kind conversions.\n-\t* primary.c (match_real_constant): Likewise.\n-\n-2021-02-28  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/99303\n-\t* openmp.c (gfc_omp_requires_add_clause): Fix up diagnostic message\n-\twordings.\n-\t(resolve_omp_clauses): Likewise.\n-\n-2021-02-28  Jakub Jelinek  <jakub@redhat.com>\n-\n-\tPR fortran/99300\n-\t* frontend-passes.c (doloop_code): Replace double space in diagnostics\n-\twith a single space.\n-\n-2021-02-24  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98342\n-\t* trans-expr.c (gfc_conv_derived_to_class): Add optional arg.\n-\t'derived_array' to hold the fixed, parmse expr in the case of\n-\tassumed rank formal arguments. Deal with optional arguments.\n-\t(gfc_conv_procedure_call): Null 'derived' array for each actual\n-\targument. Add its address to the call to gfc_conv_derived_to_\n-\tclass. Access the 'data' field of scalar descriptors before\n-\tdeallocating allocatable components. Also strip NOPs before the\n-\tcalls to gfc_deallocate_alloc_comp. Use 'derived' array as the\n-\tinput to gfc_deallocate_alloc_comp if it is available.\n-\t* trans.h : Include the optional argument 'derived_array' to\n-\tthe prototype of gfc_conv_derived_to_class. The default value\n-\tis NULL_TREE.\n-\n-2021-02-23  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/99124\n-\t* resolve.c (resolve_fl_procedure): Include class results in\n-\tthe test for F2018, C15100.\n-\t* trans-array.c (get_class_info_from_ss): Do not use the saved\n-\tdescriptor to obtain the class expression for variables. Use\n-\tgfc_get_class_from_expr instead.\n-\n-2021-02-23  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/99206\n-\t* simplify.c (gfc_simplify_reshape): Set string length for\n-\tcharacter arguments.\n-\n-2021-02-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99171\n-\t* trans-openmp.c (gfc_omp_is_optional_argument): Regard optional\n-\tdummy procs as nonoptional as no special treatment is needed.\n-\n-2021-02-21  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* trans-expr.c (gfc_conv_procedure_call): Do not add clobber to\n-\tallocatable intent(out) argument.\n-\n-2021-02-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR fortran/98686\n-\t* match.c (gfc_match_namelist): If BT_UNKNOWN, check for\n-\tIMPLICIT NONE and and issue an error, otherwise set the type\n-\tto its IMPLICIT type so that any subsequent use of objects will\n-\twill confirm their types.\n-\n-2021-02-19  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* symbol.c (gfc_add_flavor): Reverse order of conditions.\n-\n-2021-02-19  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99010\n-\t* dependency.c (gfc_dep_resolver): Fix coarray handling.\n-\n-2021-02-19  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99146\n-\t* interface.c:\n-\n-2021-02-19  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99027\n-\t* simplify.c (simplify_bound_dim): Honor DIMEN_ELEMENT\n-\twhen using dim=.\n-\n-2021-02-17  Julian Brown  <julian@codesourcery.com>\n-\n-\t* openmp.c (resolve_omp_clauses): Disallow selecting components\n-\tof arrays of derived type.\n-\n-2021-02-17  Julian Brown  <julian@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Handle element selection\n-\tfor arrays of derived types.\n-\n-2021-02-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* expr.c (gfc_is_simplify_contiguous): Handle REF_INQUIRY, i.e.\n-\t%im and %re which are EXPR_VARIABLE.\n-\t* openmp.c (resolve_omp_clauses): Diagnose %re/%im explicitly.\n-\n-2021-02-16  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99111\n-\t* io.c (resolve_tag_format): Reject BT_DERIVED/CLASS/VOID\n-\tas (array-valued) FORMAT tag.\n-\n-2021-02-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/99043\n-\t* trans-expr.c (gfc_conv_procedure_call): Don't reset\n-\trank of assumed-rank array.\n-\n-2021-02-11  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98897\n-\t* match.c (gfc_match_call): Include associate names as possible\n-\tentities with typebound subroutines. The target needs to be\n-\tresolved for the type.\n-\n-2021-02-11  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/99060\n-\t* primary.c (gfc_match_varspec): Test for non-null 'previous'\n-\tbefore using its name in the error message.\n-\n-2021-02-11  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* intrinsic.texi (FINDLOC): Add 'MASK' to argument table.\n-\t(MAXLOC, MAXVAL, MINLOC, MINVAL): For 'MASK', remove 'an\n-\tarray' as scalars are also permitted.\n-\n-2021-02-10  Julian Brown  <julian@codesourcery.com>\n-\n-\tPR fortran/98979\n-\t* openmp.c (resolve_omp_clauses): Omit OpenACC update in\n-\tcontiguity check and stride-specified error.\n-\n-2021-02-04  Julian Brown  <julian@codesourcery.com>\n-\n-\t* openmp.c (resolve_omp_clauses): Omit OpenACC update in\n-\tcontiguity check and stride-specified error.\n-\n-2021-02-04  Julian Brown  <julian@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Use class_pointer attribute\n-\tfor BT_CLASS.\n-\n-2021-02-04  Julian Brown  <julian@codesourcery.com>\n-\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Fix dereferencing for\n-\tBT_DERIVED members.\n-\n-2021-02-04  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* openmp.c (resolve_omp_clauses): Explicitly diagnose\n-\tsubstrings as not permitted.\n-\n-2021-02-03  Jeff Law  <law@redhat.com>\n-\n-\t* intrinsic.texi (ANINT): Fix typo.\n-\n-2021-02-03  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/98913\n-\t* dependency.c (gfc_dep_resolver): Treat local access\n-\tto coarrays like any array access in dependency analysis.\n-\n-2021-01-28  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/86470\n-\t* trans.c (gfc_call_malloc): Allocate area of size 1 if passed\n-\tsize is NULL (as documented).\n-\n-2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/93924\n-\tPR fortran/93925\n-\t* trans-expr.c (gfc_conv_procedure_call): Suppress the call to\n-\tgfc_conv_intrinsic_to_class for unlimited polymorphic procedure\n-\tpointers.\n-\t(gfc_trans_assignment_1): Similarly suppress class assignment\n-\tfor class valued procedure pointers.\n-\n-2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98472\n-\t* trans-array.c (gfc_conv_expr_descriptor): Include elemental\n-\tprocedure pointers in the assert under the comment 'elemental\n-\tfunction' and eliminate the second, spurious assert.\n-\n-2021-01-25  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/70070\n-\t* data.c (create_character_initializer): Check substring indices\n-\tagainst bounds.\n-\t(gfc_assign_data_value): Catch error returned from\n-\tcreate_character_initializer.\n-\n-2021-01-25  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* intrinsic.texi (CO_BROADCAST, CO_MIN, CO_REDUCE, CO_SUM): Fix typos.\n-\n-2021-01-25  Steve Kargl  <kargl@gcc.gnu.org>\n-\n-\tPR fortran/98517\n-\t* resolve.c (resolve_charlen): Check that length expression is\n-\tpresent before testing for scalar/integer..\n-\n-2021-01-22  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98565\n-\t* trans-intrinsic.c (gfc_conv_associated): Do not add a _data\n-\tcomponent for scalar class function targets. Instead, fix the\n-\tfunction result and access the _data from that.\n-\n-2021-01-21  Jorge D'Elia  <jdelia@cimec.unl.edu.ar>\n-\n-\t* intrinsic.texi (CO_MAX): Fix typo.\n-\n-2021-01-21  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/96320\n-\t* decl.c (gfc_match_modproc): It is not an error to find a\n-\tmodule procedure declaration within a contains block.\n-\t* expr.c (gfc_check_vardef_context): Pure procedure result is\n-\tassignable. Change 'own_scope' accordingly.\n-\t* resolve.c (resolve_typebound_procedure): A procedure that\n-\thas the module procedure attribute is almost certainly a\n-\tmodule procedure, whatever its interface.\n-\n-2021-01-19  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/98476\n-\t* openmp.c (resolve_omp_clauses): Change use_device_ptr\n-\tto use_device_addr for unless type(c_ptr); check all\n-\tlist item for is_device_ptr.\n-\n-2021-01-16  Kwok Cheung Yeung  <kcy@codesourcery.com>\n-\n-\t* dump-parse-tree.c (show_omp_clauses): Handle detach clause.\n-\t* frontend-passes.c (gfc_code_walker): Walk detach expression.\n-\t* gfortran.h (struct gfc_omp_clauses): Add detach field.\n-\t(gfc_c_intptr_kind): New.\n-\t* openmp.c (gfc_free_omp_clauses): Free detach clause.\n-\t(gfc_match_omp_detach): New.\n-\t(enum omp_mask1): Add OMP_CLAUSE_DETACH.\n-\t(enum omp_mask2): Remove OMP_CLAUSE_DETACH.\n-\t(gfc_match_omp_clauses): Handle OMP_CLAUSE_DETACH for OpenMP.\n-\t(OMP_TASK_CLAUSES): Add OMP_CLAUSE_DETACH.\n-\t(resolve_omp_clauses): Prevent use of detach with mergeable and\n-\toverriding the data sharing mode of the event handle.\n-\t* trans-openmp.c (gfc_trans_omp_clauses): Handle detach clause.\n-\t* trans-types.c (gfc_c_intptr_kind): New.\n-\t(gfc_init_kinds): Initialize gfc_c_intptr_kind.\n-\t* types.def\n-\t(BT_FN_VOID_OMPFN_PTR_OMPCPYFN_LONG_LONG_BOOL_UINT_PTR_INT): Rename\n-\tto...\n-\t(BT_FN_VOID_OMPFN_PTR_OMPCPYFN_LONG_LONG_BOOL_UINT_PTR_INT_PTR):\n-\t...this.  Add extra argument.\n-\n-2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* gfortran.h (gfc_resolve_substring): Add prototype.\n-\t* primary.c (match_string_constant): Simplify substrings with\n-\tconstant starting and ending points.\n-\t* resolve.c: Rename resolve_substring to gfc_resolve_substring.\n-\t(gfc_resolve_ref): Use renamed function gfc_resolve_substring.\n-\n-2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98661\n-\t* resolve.c (resolve_component): Derived type components with\n-\tALLOCATABLE or POINTER attribute shall have a deferred shape.\n-\n-2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tRevert:\n-\t2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98661\n-\t* resolve.c (resolve_component): Derived type components with\n-\tALLOCATABLE or POINTER attribute shall have a deferred shape.\n-\n-2021-01-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR fortran/98661\n-\t* resolve.c (resolve_component): Derived type components with\n-\tALLOCATABLE or POINTER attribute shall have a deferred shape.\n-\n-2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/93794\n-\t* trans-expr.c (gfc_conv_component_ref): Remove the condition\n-\tthat deferred character length components only be allocatable.\n-\n-2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/98458\n-\t* simplify.c (is_constant_array_expr): If an array constructor\n-\texpression has elements other than constants or structures, try\n-\tfixing the expression with gfc_reduce_init_expr. Also, if shape\n-\tis NULL, obtain the array size and set it.\n-\n-2021-01-07  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/93701\n-\t* resolve.c (find_array_spec): Put static prototype for\n-\tresolve_assoc_var before this function and call for associate\n-\tvariables.\n-\n-2021-01-06  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* resolve.c (resolve_component): Add check for valid CLASS\n-\treference before trying to access CLASS data.\n-\n-2021-01-04  Martin Liska  <mliska@suse.cz>\n-\n-\t* ChangeLog-2018: Remove duplicate ChangeLog entries.\n-\n-2021-01-01  Harald Anlauf  <anlauf@gmx.de>\n-\n-\t* class.c (gfc_find_vtab): Add check on attribute is_class.\n-\n-2021-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* gfortranspec.c (lang_specific_driver): Update copyright notice\n-\tdates.\n-\t* gfc-internals.texi: Bump @copying's copyright year.\n-\t* gfortran.texi: Ditto.\n-\t* intrinsic.texi: Ditto.\n-\t* invoke.texi: Ditto.\n-\n-2021-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* ChangeLog-2020: Rotate ChangeLog.  New file.\n-\n \f\n-Copyright (C) 2021 Free Software Foundation, Inc.\n+Copyright (C) 2022 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "43795587228f452951c040816aaa1ced4f18c613", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 20642, "changes": 20643, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd"}, {"sha": "3a4f03c28af89fe2829945d0e9aaff09b4ddcbdf", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 380, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd", "patch": "@@ -1,384 +1,5 @@\n-2021-12-31  Iain Sandoe  <iain@sandoe.co.uk>\n-\n-\t* runtime/string.c (gfc_itoa): Use _Static_assert directly\n-\tinstead of via the static_assert macro.\n-\n-2021-12-29  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\t* ieee/ieee_helper.c: Fix enum values.\n-\n-2021-12-27  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\tPR libfortran/98076\n-\t* runtime/string.c (gfc_itoa): Use two args for static_assert().\n-\n-2021-12-26  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\tPR libfortran/98076\n-\t* runtime/string.c (itoa64, itoa64_pad19): New helper functions.\n-\t(gfc_itoa): On targets with 128-bit integers, call fast\n-\t64-bit functions to avoid many slow divisions.\n-\n-2021-12-25  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\tPR libfortran/81986\n-\tPR libfortran/99191\n-\t* libgfortran.h: Remove gfc_xtoa(), adjust gfc_itoa() and\n-\tGFC_ITOA_BUF_SIZE.\n-\t* io/write.c (write_decimal): conversion parameter is always\n-\tgfc_itoa(), so remove it. Protect from overflow.\n-\t(xtoa): Move gfc_xtoa and update its name.\n-\t(xtoa_big): Renamed from ztoa_big for consistency.\n-\t(write_z): Adjust to new function names.\n-\t(write_i, write_integer): Remove last arg of write_decimal.\n-\t* runtime/backtrace.c (error_callback): Comment on the use of\n-\tgfc_itoa().\n-\t* runtime/error.c (gfc_xtoa): Move to io/write.c.\n-\t* runtime/string.c (gfc_itoa): Take an unsigned argument,\n-\tremove the handling of negative values.\n-\n-2021-12-22  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\t* kinds-override.h: Move GFC_REAL_16_IS_* macros...\n-\t* mk-kinds-h.sh: ... here.\n-\n-2021-12-19  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n-\n-\t* configure.host: Add aarch64-apple-darwin support.\n-\t* config/fpu-aarch64.h: New file.\n-\n-2021-12-18  Fran\u00e7ois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* libgfortran.h: include ctype.h, provide safe macros.\n-\t* io/format.c: use safe macros.\n-\t* io/list_read.c: use safe macros.\n-\t* io/read.c: use safe macros.\n-\t* io/write.c: use safe macros.\n-\t* runtime/environ.c: use safe macros.\n-\n-2021-12-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* io/file_pos.c: Fix error code.\n-\n-2021-12-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n-\n-\t* intrinsics/time_1.h: Prefer clock_gettime() over\n-\t  gettimeofday().\n-\t* intrinsics/date_and_time.c: Fix timezone wrapping.\n-\n-2021-12-14  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR libfortran/103634\n-\t* intrinsics/pack_generic.c (pack_internal): Handle case when the\n-\tarray argument of PACK has one or more extents of size zero to\n-\tavoid invalid reads.\n-\n-2021-10-18  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/102086\n-\tPR fortran/92189\n-\tPR fortran/92621\n-\tPR fortran/101308\n-\tPR fortran/101309\n-\tPR fortran/101635\n-\tPR fortran/92482\n-\t* ISO_Fortran_binding.h (CFI_type_cfunptr): Make unique type again.\n-\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc,\n-\tgfc_desc_to_cfi_desc): Add comment that those are no longer called\n-\tby new code.\n-\n-2021-09-27  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/94070\n-\t* intrinsics/size.c (size0, size1): Comment that now not\n-\tused by newer compiler code.\n-\n-2021-09-26  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/101334\n-\t* intrinsics/associated.c (associated): Also check for same rank.\n-\n-2021-09-22  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/55534\n-\t* configure.ac (AM_FCFLAGS): Revert r12-3722 by removing\n-\t-Wno-missing-include-dirs.\n-\t* configure: Regenerate.\n-\n-2021-09-21  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/55534\n-\t* configure.ac (AM_FCFLAGS): Add -Wno-missing-include-dirs.\n-\t* configure: Regenerate.\n-\n-2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* ISO_Fortran_binding.h: Update comments.\n-\t* runtime/ISO_Fortran_binding.c: Likewise.\n-\n-2021-09-17  Sandra Loosemore  <sandra@codesourcery.com>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* ISO_Fortran_binding.h: Only include float.h if the C compiler\n-\tdoesn't have predefined __LDBL_* and __DBL_* macros. Handle\n-\tLDBL_MANT_DIG == 53 for FreeBSD.\n-\n-2021-09-13  Andreas Schwab  <schwab@linux-m68k.org>\n-\n-\t* ISO_Fortran_binding.h (CFI_type_long_double)\n-\t(CFI_type_long_double_Complex) [LDBL_MANT_DIG == 64 &&\n-\tLDBL_MIN_EXP == -16382 && LDBL_MAX_EXP == 16384]: Define.\n-\n-2021-09-07  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* Makefile.am (gfor_built_src): Depend on\n-\tinclude/ISO_Fortran_binding.h not on ISO_Fortran_binding.h.\n-\t(ISO_Fortran_binding.h): Rename make target to ...\n-\t(include/ISO_Fortran_binding.h): ... this.\n-\t* Makefile.in: Regenerate.\n-\n-2021-09-07  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* ISO_Fortran_binding-1-tmpl.h: Deleted.\n-\t* ISO_Fortran_binding-2-tmpl.h: Deleted.\n-\t* ISO_Fortran_binding-3-tmpl.h: Deleted.\n-\t* ISO_Fortran_binding.h: New file to replace the above.\n-\t* Makefile.am (gfor_cdir): Remove MULTISUBDIR.\n-\t(ISO_Fortran_binding.h): Simplify to just copy the file.\n-\t* Makefile.in: Regenerated.\n-\t* mk-kinds-h.sh: Revert pieces no longer needed for\n-\tISO_Fortran_binding.h.\n-\n-2021-09-02  Sandra Loosemore  <sandra@codesourcery.com>\n-\t    Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/100907\n-\tPR fortran/100911\n-\tPR fortran/100914\n-\tPR fortran/100915\n-\tPR fortran/100917\n-\t* ISO_Fortran_binding-1-tmpl.h (CFI_type_cfunptr): Make equivalent\n-\tto CFI_type_cptr.\n-\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc): Fix\n-\thandling of CFI_type_cptr and CFI_type_cfunptr.  Additional error\n-\tchecking and code cleanup.\n-\t(gfc_desc_to_cfi_desc): Likewise.  Also correct kind mapping\n-\tfor character, complex, and long double types.\n-\n-2021-08-27  Iain Sandoe  <iain@sandoe.co.uk>\n-\n-\t* Makefile.am: Use configured libm availability.\n-\t* Makefile.in: Regenerate.\n-\t* configure: Regenerate.\n-\t* configure.ac: Use libtool macro to find libm availability.\n-\t* libgfortran.spec.in: Use configured libm availability.\n-\n-2021-08-10  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR libfortran/101305\n-\tPR fortran/101660\n-\tPR testsuite/101847\n-\t* Makefile.am (ISO_Fortran_binding.h): Create include/ in the build dir\n-\tand copy the include file to it.\n-\t(clean-local): Add for removing the 'include' directory.\n-\t* Makefile.in: Regenerate.\n-\n-2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR libfortran/101317\n-\t* runtime/ISO_Fortran_binding.c: Include <inttypes.h>.\n-\t(CFI_address): Tidy error messages and comments.\n-\t(CFI_allocate): Likewise.\n-\t(CFI_deallocate): Likewise.\n-\t(CFI_establish): Likewise.  Add new checks for validity of\n-\telem_len when it's used, plus type argument and extents.\n-\t(CFI_is_contiguous): Tidy error messages and comments.\n-\t(CFI_section): Likewise.  Refactor some repetitive code to\n-\tmake it more understandable.\n-\t(CFI_select_part): Likewise.\n-\t(CFI_setpointer): Likewise.  Check that source is not an\n-\tunallocated allocatable array or an assumed-size array.\n-\n-2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR libfortran/101310\n-\t* runtime/ISO_Fortran_binding.c (CFI_section): Fix the base\n-\taddress computation and simplify the code.\n-\n-2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\tPR libfortran/101305\n-\t* runtime/ISO_Fortran_binding.c (CFI_establish): Special-case\n-\tCFI_type_cptr and CFI_type_cfunptr.  Correct size of long double\n-\ton targets where it has kind 10.\n-\n-2021-07-28  Sandra Loosemore  <sandra@codesourcery.com>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR libfortran/101305\n-\t* ISO_Fortran_binding.h: Fix hard-coded sizes and split into...\n-\t* ISO_Fortran_binding-1-tmpl.h: New file.\n-\t* ISO_Fortran_binding-2-tmpl.h: New file.\n-\t* ISO_Fortran_binding-3-tmpl.h: New file.\n-\t* Makefile.am: Add rule for generating ISO_Fortran_binding.h.\n-\tAdjust pathnames to that file.\n-\t* Makefile.in: Regenerated.\n-\t* mk-kinds-h.sh: New file.\n-\t* runtime/ISO_Fortran_binding.c: Fix include path.\n-\n-2021-07-26  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93308\n-\tPR fortran/93963\n-\tPR fortran/94327\n-\tPR fortran/94331\n-\tPR fortran/97046\n-\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc): Add code\n-\tto verify the descriptor. Correct bounds calculation.\n-\t(gfc_desc_to_cfi_desc): Add code to verify the descriptor.\n-\n-2021-07-22  Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* runtime/ISO_Fortran_binding.c (CFI_allocate): Don't use elem_len\n-\tfor CFI_type_signed_char.\n-\t(CFI_select_part): Likewise.\n-\n-2021-07-01  Tobias Burnus  <tobias@codesourcery.com>\n-\t    Sandra Loosemore  <sandra@codesourcery.com>\n-\n-\t* runtime/ISO_Fortran_binding.c (cfi_desc_to_gfc_desc):\n-\tInitialize version field to 0.\n-\t(gfc_desc_to_cfi_desc): Initialize version field to CFI_VERSION.\n-\n-2021-06-29  Julian Brown  <julian@codesourcery.com>\n-\n-\tPR target/96306\n-\t* configure.ac: Remove stanza that removes KIND=16 integers for AMD GCN.\n-\t* configure: Regenerate.\n-\n-2021-06-22  Sandra Loosemore  <sandra@codesourcery.com>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR fortran/93524\n-\t* runtime/ISO_Fortran_binding.c (CFI_allocate): Fix\n-\tsm computation.\n-\n-2021-06-08  Martin Liska  <mliska@suse.cz>\n-\n-\t* intrinsics/chmod.c (chmod_internal): Fix typo.\n-\t* io/transfer.c (read_sf): Likewise.\n-\n-2021-06-05  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n-\n-\tPR fortran/100120\n-\t* intrinsics/associated.c (associated): have associated verify if\n-\tthe \"span\" matches insted of the \"elem_len\".\n-\t* libgfortran.h (GFC_DESCRIPTOR_SPAN): add macro to retrive the\n-\tdescriptor \"span\".\n-\n-2021-05-22  Andre Vehreschild  <vehre@gcc.gnu.org>\n-\n-\tPR fortran/98301\n-\t* caf/libcaf.h (_gfortran_caf_random_init): New function.\n-\t* caf/single.c (_gfortran_caf_random_init): New function.\n-\t* gfortran.map: Added fndecl.\n-\t* intrinsics/random_init.f90: Implement random_init.\n-\n-2021-05-05  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* intrinsics/chmod.c (chmod_internal): Only declare mode_mask var\n-\tif HAVE_UMASK.\n-\n-2021-05-02  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR libgomp/100352\n-\t* io/transfer.c (st_read_done_worker, st_write_done_worker): Add new\n-\targ whether to unlock unit.\n-\t(st_read_done, st_write_done): Call it with true.\n-\t* io/async.c (async_io): Call it with false.\n-\t* io/io.h (st_write_done_worker, st_read_done_worker): Update prototype.\n-\n-2021-03-12  Tobias Burnus  <tobias@codesourcery.com>\n-\n-\t* io/transfer.c (st_read_done_worker, st_write_done_worker):\n-\tCall unlock_unit here, add unit_lock lock around newunit_free call.\n-\t(st_read_done, st_write_done): Only call unlock_unit when not\n-\tcalling the worker function.\n-\t* io/unit.c (set_internal_unit): Don't reset the unit_number\n-\tto the same number as this cause race warnings.\n-\n-2021-03-05  Harald Anlauf  <anlauf@gmx.de>\n-\n-\tPR libfortran/99218\n-\t* m4/matmul_internal.m4: Invoke tuned matmul only for rank(b)>1.\n-\t* generated/matmul_c10.c: Regenerated.\n-\t* generated/matmul_c16.c: Likewise.\n-\t* generated/matmul_c4.c: Likewise.\n-\t* generated/matmul_c8.c: Likewise.\n-\t* generated/matmul_i1.c: Likewise.\n-\t* generated/matmul_i16.c: Likewise.\n-\t* generated/matmul_i2.c: Likewise.\n-\t* generated/matmul_i4.c: Likewise.\n-\t* generated/matmul_i8.c: Likewise.\n-\t* generated/matmul_r10.c: Likewise.\n-\t* generated/matmul_r16.c: Likewise.\n-\t* generated/matmul_r4.c: Likewise.\n-\t* generated/matmul_r8.c: Likewise.\n-\t* generated/matmulavx128_c10.c: Likewise.\n-\t* generated/matmulavx128_c16.c: Likewise.\n-\t* generated/matmulavx128_c4.c: Likewise.\n-\t* generated/matmulavx128_c8.c: Likewise.\n-\t* generated/matmulavx128_i1.c: Likewise.\n-\t* generated/matmulavx128_i16.c: Likewise.\n-\t* generated/matmulavx128_i2.c: Likewise.\n-\t* generated/matmulavx128_i4.c: Likewise.\n-\t* generated/matmulavx128_i8.c: Likewise.\n-\t* generated/matmulavx128_r10.c: Likewise.\n-\t* generated/matmulavx128_r16.c: Likewise.\n-\t* generated/matmulavx128_r4.c: Likewise.\n-\t* generated/matmulavx128_r8.c: Likewise.\n-\n-2021-03-03  Vittorio Zecca  <zeccav@gmail.com>\n-\t    Tobias Burnus  <tobias@codesourcery.com>\n-\n-\tPR libfortran/81986\n-\t* runtime/string.c (gfc_itoa): Cast to unsigned before\n-\tnegating.\n-\n-2021-02-12  Steve Kargl  <sgk@troutmask.apl.washington.edu>\n-\n-\tPR libfortran/95647\n-\t* ieee/ieee_arithmetic.F90: Flip interfaces of operators .eq. to\n-\t== and .ne. to /= .\n-\n-2021-02-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-\n-\tPR libfortran/98825\n-\t* io/transfer.c (next_record_w): Insert check for seen_dollar and if\n-\tso, skip issueing next record.\n-\n-2021-01-27  Harris Snyder  <hsnyder@structura.bio>\n-\n-\t* runtime/ISO_Fortran_binding.c (CFI_establish): fixed\n-\tstrides for rank >2 arrays.\n-\n-2021-01-15  Harris Snyder  <hsnyder@structura.bio>\n-\n-\t* runtime/ISO_Fortran_binding.c (CFI_establish): Fixed signed\n-\t  char arrays. Signed char or uint8_t arrays would cause\n-\t  crashes unless an element size is specified.\n-\n-2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n-\n-\t* configure: Re-generate.\n-\n-2021-01-01  Jakub Jelinek  <jakub@redhat.com>\n-\n-\t* ChangeLog-2020: Rotate ChangeLog.  New file.\n-\n \f\n-Copyright (C) 2021 Free Software Foundation, Inc.\n+Copyright (C) 2022 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,\n are permitted in any medium without royalty provided the copyright"}, {"sha": "3a4f03c28af89fe2829945d0e9aaff09b4ddcbdf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 1, "deletions": 9009, "changes": 9010, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6123f29a18a77eb1a0597f403c4424ae375351fd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6123f29a18a77eb1a0597f403c4424ae375351fd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6123f29a18a77eb1a0597f403c4424ae375351fd"}]}