{"sha": "d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1MjViZWMwOWVkZTAwM2M3YmYyOWJjMGNlZWYyN2VjMDgzZTRhOQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1998-02-18T10:38:57Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1998-02-18T10:38:57Z"}, "message": "tree.h (merge_machine_{type,decl}_attributes): Declare.\n\n./ChangeLog:\t* tree.h (merge_machine_{type,decl}_attributes): Declare.\n\t(split_specs_attrs, strip_attrs): Add prototypes.\n\t* tree.c (merge_machine_{type,decl}_attributes): New functions.\n\t* c-decl.c (duplicate_decls): Call merge_machine_decl_attributes.\n\tUpdate olddecl's attributes too.\n\t* c-common.c (strip_attrs): New function.\n\t* c-typeck.c (common_type): Call merge_machine_type_attributes.\n\t* varasm.c (make_function_rtl): New target macro REDO_SECTION_INFO_P.\n\t(make_decl_rtl): Likewise.\n\t* c-decl.c (shadow_tag_warned): Call split_specs_attrs.\n./cp/ChangeLog:\t* decl.c (duplicate_decls): Call merge_machine_decl_attributes.\n\tUpdate olddecl's attributes too.\n\t(strip_attrs): Remove function.\n\t* typeck.c (common_type): Call merge_machine_type_attributes.\n\nFrom-SVN: r18065", "tree": {"sha": "0c6d9928460c8ea947b19cb363645ecf536b2a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6d9928460c8ea947b19cb363645ecf536b2a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/comments", "author": null, "committer": null, "parents": [{"sha": "f9a366acb519c4d2652cac65d3644030b2223e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a366acb519c4d2652cac65d3644030b2223e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a366acb519c4d2652cac65d3644030b2223e28"}], "stats": {"total": 198, "additions": 158, "deletions": 40}, "files": [{"sha": "8b7ca54fcd7a1d9eebfcd5e284edf1b2885b7509", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -1,3 +1,19 @@\n+1998-02-18  Doug Evans  <devans@cygnus.com>\n+\n+\t* tree.h (merge_machine_{type,decl}_attributes): Declare.\n+\t(split_specs_attrs, strip_attrs): Add prototypes.\n+\t* tree.c (merge_machine_{type,decl}_attributes): New functions.\n+\t* c-decl.c (duplicate_decls): Call merge_machine_decl_attributes.\n+\tUpdate olddecl's attributes too.\n+\t* c-common.c (strip_attrs): New function.\n+\t* c-typeck.c (common_type): Call merge_machine_type_attributes.\n+\t* varasm.c (make_function_rtl): New target macro REDO_SECTION_INFO_P.\n+\t(make_decl_rtl): Likewise.\n+\n+1998-02-18  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* c-decl.c (shadow_tag_warned): Call split_specs_attrs.\n+\n Wed Feb 18 09:09:50 1998  Jeffrey A Law  (law@cygnus.com)\n \n \tRemove this change until we can fix it correctly."}, {"sha": "ef5f6910bbfd045bcedfa637c776308c577a2838", "filename": "gcc/c-common.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -928,6 +928,30 @@ split_specs_attrs (specs_attrs, declspecs, prefix_attributes)\n   *declspecs = specs;\n   *prefix_attributes = attrs;\n }\n+\n+/* Strip attributes from SPECS_ATTRS, a list of declspecs and attributes.\n+   This function is used by the parser when a rule will accept attributes\n+   in a particular position, but we don't want to support that just yet.\n+\n+   A warning is issued for every ignored attribute.  */\n+\n+tree\n+strip_attrs (specs_attrs)\n+     tree specs_attrs;\n+{\n+  tree specs, attrs;\n+\n+  split_specs_attrs (specs_attrs, &specs, &attrs);\n+\n+  while (attrs)\n+    {\n+      warning (\"`%s' attribute ignored\",\n+\t       IDENTIFIER_POINTER (TREE_PURPOSE (attrs)));\n+      attrs = TREE_CHAIN (attrs);\n+    }\n+\n+  return specs;\n+}\n \f\n /* Check a printf/fprintf/sprintf/scanf/fscanf/sscanf format against\n    a parameter list.  */"}, {"sha": "c3cf4fca6ca52ada4ae474d742cc7f5602d09699", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -1422,7 +1422,8 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n   char *errmsg = 0;\n \n   if (TREE_CODE_CLASS (TREE_CODE (olddecl)) == 'd')\n-    DECL_MACHINE_ATTRIBUTES (newdecl) = DECL_MACHINE_ATTRIBUTES (olddecl);\n+    DECL_MACHINE_ATTRIBUTES (newdecl)\n+      =  merge_machine_decl_attributes (olddecl, newdecl);\n \n   if (TREE_CODE (newtype) == ERROR_MARK\n       || TREE_CODE (oldtype) == ERROR_MARK)\n@@ -2000,6 +2001,10 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n     DECL_UID (olddecl) = olddecl_uid;\n   }\n \n+  /* NEWDECL contains the merged attribute lists.\n+     Update OLDDECL to be the same.  */\n+  DECL_MACHINE_ATTRIBUTES (olddecl) = DECL_MACHINE_ATTRIBUTES (newdecl);\n+\n   return 1;\n }\n \n@@ -3530,9 +3535,14 @@ shadow_tag_warned (declspecs, warned)\n {\n   int found_tag = 0;\n   register tree link;\n+  tree specs, attrs;\n \n   pending_invalid_xref = 0;\n \n+  /* Remove the attributes from declspecs, since they will confuse the\n+     following code.  */\n+  split_specs_attrs (declspecs, &specs, &attrs);\n+\n   for (link = declspecs; link; link = TREE_CHAIN (link))\n     {\n       register tree value = TREE_VALUE (link);"}, {"sha": "791968b29e866541721dd6451633796ea936ed4c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -209,8 +209,8 @@ common_type (t1, t2)\n   if (t2 == error_mark_node)\n     return t1;\n \n-  /* Merge the attributes */\n-  attributes = merge_attributes (TYPE_ATTRIBUTES (t1), TYPE_ATTRIBUTES (t2));\n+  /* Merge the attributes.  */\n+  attributes = merge_machine_type_attributes (t1, t2);\n \n   /* Treat an enum type as the unsigned integer type of the same width.  */\n "}, {"sha": "bf78b632225807ee5bff855b1b323969b5c71058", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -1,3 +1,10 @@\n+1998-02-18  Doug Evans  <devans@cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Call merge_machine_decl_attributes.\n+\tUpdate olddecl's attributes too.\n+\t(strip_attrs): Remove function.\n+\t* typeck.c (common_type): Call merge_machine_type_attributes.\n+\n Tue Feb 17 14:07:52 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* parse.y (initdcl0_innards): New grammar symbol."}, {"sha": "ce35770dbc9f966479bcfa0ef0ec658f6918e420", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -2444,7 +2444,8 @@ duplicate_decls (newdecl, olddecl)\n     return 1;\n \n   if (TREE_CODE_CLASS (TREE_CODE (olddecl)) == 'd')\n-    DECL_MACHINE_ATTRIBUTES (newdecl) = DECL_MACHINE_ATTRIBUTES (olddecl);\n+    DECL_MACHINE_ATTRIBUTES (newdecl)\n+      = merge_machine_decl_attributes (olddecl, newdecl);\n \n   types_match = decls_match (newdecl, olddecl);\n \n@@ -3082,6 +3083,10 @@ duplicate_decls (newdecl, olddecl)\n   if (olddecl_friend)\n     DECL_FRIEND_P (olddecl) = 1;\n \n+  /* NEWDECL contains the merged attribute lists.\n+     Update OLDDECL to be the same.  */\n+  DECL_MACHINE_ATTRIBUTES (olddecl) = DECL_MACHINE_ATTRIBUTES (newdecl);\n+\n   return 1;\n }\n \n@@ -13160,30 +13165,3 @@ in_function_p ()\n {\n   return function_depth != 0;\n }\n-\n-/* FSF LOCAL dje prefix attributes */\n-/* Strip attributes from SPECS_ATTRS, a list of declspecs and attributes.\n-   This function is used by the parser when a rule will accept attributes\n-   in a particular position, but we don't want to support that just yet.\n-\n-   A warning is issued for every ignored attribute.  */\n-\n-tree\n-strip_attrs (specs_attrs)\n-     tree specs_attrs;\n-{\n-  tree specs, attrs;\n-\n-  split_specs_attrs (specs_attrs, &specs, &attrs);\n-\n-  while (attrs)\n-    {\n-      warning (\"`%s' attribute ignored\",\n-\t       IDENTIFIER_POINTER (TREE_PURPOSE (attrs)));\n-      attrs = TREE_CHAIN (attrs);\n-    }\n-\n-  return specs;\n-}\n-/* END FSF LOCAL */\n-"}, {"sha": "339e758a64ccb7b28d791af57d2970c40a7ff5d7", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -57,10 +57,6 @@ extern int errno;\n extern int end_of_file;\n extern int current_class_depth;\n \n-/* FSF LOCAL dje prefix attributes */\n-extern tree strip_attrs\t\tPROTO((tree));\n-/* END FSF LOCAL */\n-\n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n "}, {"sha": "f1689a8688beb9e722151820c9b06f7285467f4f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -320,7 +320,8 @@ common_type (t1, t2)\n   if (t2 == error_mark_node)\n     return t1;\n \n-  /* Merge the attributes */\n+  /* Merge the attributes.  */\n+  attributes = merge_machine_type_attributes (t1, t2);\n \n   { register tree a1, a2;\n     a1 = TYPE_ATTRIBUTES (t1);"}, {"sha": "d4e6d4eecb160bf042dda03827ac336e323b24fb", "filename": "gcc/tm.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -7150,6 +7150,22 @@ generated).\n If defined, a C statement that assigns default attributes to\n newly defined @var{type}.\n \n+@findex MERGE_MACHINE_TYPE_ATTRIBUTES\n+@item MERGE_MACHINE_TYPE_ATTRIBUTES (@var{type1}, @var{type2})\n+Define this macro if the merging of type attributes needs special handling.\n+If defined, the result is a list of the combined TYPE_ATTRIBUTES of\n+@var{type1} and @var{type2}.  It is assumed that comptypes has already been\n+called and returned 1.\n+\n+@findex MERGE_MACHINE_DECL_ATTRIBUTES\n+@item MERGE_MACHINE_DECL_ATTRIBUTES (@var{olddecl}, @var{newdecl})\n+Define this macro if the merging of decl attributes needs special handling.\n+If defined, the result is a list of the combined DECL_MACHINE_ATTRIBUTES of\n+@var{olddecl} and @var{newdecl}.  @var{newdecl} is a duplicate declaration\n+of @var{olddecl}.  Examples of when this is needed are when one attribute\n+overrides another, or when an attribute is nullified by a subsequent\n+definition.\n+\n @findex DOLLARS_IN_IDENTIFIERS\n @item DOLLARS_IN_IDENTIFIERS\n Define this macro to control use of the character @samp{$} in identifier"}, {"sha": "d33563bb31478b95a508c41e049908485040ba26", "filename": "gcc/tree.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -3501,6 +3501,36 @@ merge_attributes (a1, a2)\n       }\n   return attributes;\n }\n+\n+/* Given types T1 and T2, merge their attributes and return\n+   the result.  */\n+\n+tree\n+merge_machine_type_attributes (t1, t2)\n+     tree t1, t2;\n+{\n+#ifdef MERGE_MACHINE_TYPE_ATTRIBUTES\n+  return MERGE_MACHINE_TYPE_ATTRIBUTES (t1, t2);\n+#else\n+  return merge_attributes (TYPE_ATTRIBUTES (t1),\n+\t\t\t   TYPE_ATTRIBUTES (t2));\n+#endif\n+}\n+\n+/* Given decls OLDDECL and NEWDECL, merge their attributes and return\n+   the result.  */\n+\n+tree\n+merge_machine_decl_attributes (olddecl, newdecl)\n+     tree olddecl, newdecl;\n+{\n+#ifdef MERGE_MACHINE_DECL_ATTRIBUTES\n+  return MERGE_MACHINE_DECL_ATTRIBUTES (olddecl, newdecl);\n+#else\n+  return merge_attributes (DECL_MACHINE_ATTRIBUTES (olddecl),\n+\t\t\t   DECL_MACHINE_ATTRIBUTES (newdecl));\n+#endif\n+}\n \f\n /* Return a type like TYPE except that its TYPE_READONLY is CONSTP\n    and its TYPE_VOLATILE is VOLATILEP."}, {"sha": "523a750511dc126c9e1911c8798bcf2afca2d0e8", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -1335,6 +1335,17 @@ extern tree make_tree\t\t\tPROTO((tree, struct rtx_def *));\n extern tree build_type_attribute_variant PROTO((tree, tree));\n extern tree build_decl_attribute_variant PROTO((tree, tree));\n \n+extern tree merge_machine_decl_attributes PROTO((tree, tree));\n+extern tree merge_machine_type_attributes PROTO((tree, tree));\n+\n+/* Split a list of declspecs and attributes into two.  */\n+\n+extern void split_specs_attrs\t\tPROTO((tree, tree *, tree *));\n+\n+/* Strip attributes from a list of combined specs and attrs.  */\n+\n+extern tree strip_attrs\t\t\tPROTO((tree));\n+\n /* Return 1 if an attribute and its arguments are valid for a decl or type.  */\n \n extern int valid_machine_attribute\tPROTO((tree, tree, tree, tree));"}, {"sha": "1129007a0499852974c0d5daebf18a1153f6db76", "filename": "gcc/varasm.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9525bec09ede003c7bf29bc0ceef27ec083e4a9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d9525bec09ede003c7bf29bc0ceef27ec083e4a9", "patch": "@@ -521,6 +521,20 @@ make_function_rtl (decl)\n \t ASM_OUTPUT_LABELREF will have to know how to strip this information.  */\n #ifdef ENCODE_SECTION_INFO\n       ENCODE_SECTION_INFO (decl);\n+#endif\n+    }\n+  else\n+    {\n+      /* ??? Another way to do this would be to do what halfpic.c does\n+\t and maintain a hashed table of such critters.  */\n+      /* ??? Another way to do this would be to pass a flag bit to\n+\t ENCODE_SECTION_INFO saying whether this is a new decl or not.  */\n+      /* Let the target reassign the RTL if it wants.\n+\t This is necessary, for example, when one machine specific\n+\t decl attribute overrides another.  */\n+#ifdef REDO_SECTION_INFO_P\n+      if (REDO_SECTION_INFO_P (decl))\n+\tENCODE_SECTION_INFO (decl);\n #endif\n     }\n \n@@ -768,11 +782,26 @@ make_decl_rtl (decl, asmspec, top_level)\n #endif\n \t}\n     }\n-  /* If the old RTL had the wrong mode, fix the mode.  */\n-  else if (GET_MODE (DECL_RTL (decl)) != DECL_MODE (decl))\n+  else\n     {\n-      rtx rtl = DECL_RTL (decl);\n-      PUT_MODE (rtl, DECL_MODE (decl));\n+      /* If the old RTL had the wrong mode, fix the mode.  */\n+      if (GET_MODE (DECL_RTL (decl)) != DECL_MODE (decl))\n+\t{\n+\t  rtx rtl = DECL_RTL (decl);\n+\t  PUT_MODE (rtl, DECL_MODE (decl));\n+\t}\n+\n+      /* ??? Another way to do this would be to do what halfpic.c does\n+\t and maintain a hashed table of such critters.  */\n+      /* ??? Another way to do this would be to pass a flag bit to\n+\t ENCODE_SECTION_INFO saying whether this is a new decl or not.  */\n+      /* Let the target reassign the RTL if it wants.\n+\t This is necessary, for example, when one machine specific\n+\t decl attribute overrides another.  */\n+#ifdef REDO_SECTION_INFO_P\n+      if (REDO_SECTION_INFO_P (decl))\n+\tENCODE_SECTION_INFO (decl);\n+#endif\n     }\n }\n "}]}