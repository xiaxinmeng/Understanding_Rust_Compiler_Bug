{"sha": "93745862c47eb16f9935989a4299a080335d8309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM3NDU4NjJjNDdlYjE2Zjk5MzU5ODlhNDI5OWEwODAzMzVkODMwOQ==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2002-11-19T21:23:28Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-11-19T21:23:28Z"}, "message": "jni.h: Add missing JNICALL and JNIEXPORT attributes to function and function pointer...\n\n2002-11-19  Ranjit Mathew <rmathew@hotmail.com>\n\n\t* include/jni.h: Add missing JNICALL and JNIEXPORT attributes\n\tto function and function pointer declarations in accordance with\n\tSun's JDKs. Define JNIIMPEXP to either JNIEXPORT or JNIIMPORT\n\tbased on whether __GCJ_JNI_IMPL__ has been defined or not.\n\t* jni.cc: Add missing JNICALL and JNIEXPORT attributes to\n\tJNI function definitions.\n\nFrom-SVN: r59277", "tree": {"sha": "719e9cf757212f11ff214bf2180aa6d7b25ab849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/719e9cf757212f11ff214bf2180aa6d7b25ab849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93745862c47eb16f9935989a4299a080335d8309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93745862c47eb16f9935989a4299a080335d8309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93745862c47eb16f9935989a4299a080335d8309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93745862c47eb16f9935989a4299a080335d8309/comments", "author": null, "committer": null, "parents": [{"sha": "d5fc82c51a225e995495b499f49531c3f24a41cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fc82c51a225e995495b499f49531c3f24a41cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5fc82c51a225e995495b499f49531c3f24a41cc"}], "stats": {"total": 1071, "additions": 547, "deletions": 524}, "files": [{"sha": "53c7523594d6c2fcf76c0e5d9002fe15ade2023a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93745862c47eb16f9935989a4299a080335d8309/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93745862c47eb16f9935989a4299a080335d8309/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=93745862c47eb16f9935989a4299a080335d8309", "patch": "@@ -1,3 +1,12 @@\n+2002-11-19  Ranjit Mathew <rmathew@hotmail.com>\n+\n+\t* include/jni.h: Add missing JNICALL and JNIEXPORT attributes\n+\tto function and function pointer declarations in accordance with\n+\tSun's JDKs. Define JNIIMPEXP to either JNIEXPORT or JNIIMPORT\n+\tbased on whether __GCJ_JNI_IMPL__ has been defined or not.\n+\t* jni.cc: Add missing JNICALL and JNIEXPORT attributes to\n+\tJNI function definitions.\n+\n 2002-11-18  Jesse Rosenstock <jmr@ugcs.caltech.edu>\n \n         * java/nio/charset/CoderResult.java (Cache.get): Fix a bug"}, {"sha": "0b98ab2c5c44f513424ca98ed765f19a2c416541", "filename": "libjava/include/jni.h", "status": "modified", "additions": 405, "deletions": 400, "changes": 805, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93745862c47eb16f9935989a4299a080335d8309/libjava%2Finclude%2Fjni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93745862c47eb16f9935989a4299a080335d8309/libjava%2Finclude%2Fjni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjni.h?ref=93745862c47eb16f9935989a4299a080335d8309", "patch": "@@ -174,7 +174,7 @@ typedef void *jmethodID;\n #define JNI_EVERSION     -3\n \n /* Linkage and calling conventions. */\n-#if defined(_WIN32) || defined (__WIN32__) || defined (WIN32)\n+#if defined (_WIN32) || defined (__WIN32__) || defined (WIN32)\n \n #define JNIIMPORT        __declspec(dllimport)\n #define JNIEXPORT        __declspec(dllexport)\n@@ -188,21 +188,27 @@ typedef void *jmethodID;\n \n #endif /* !( _WIN32 || __WIN32__ || WIN32) */\n \n+#ifdef __GCJ_JNI_IMPL__\n+#define JNIIMPEXP JNIEXPORT\n+#else\n+#define JNIIMPEXP JNIIMPORT\n+#endif /* ! __GCJ_JNI_IMPL__ */\n+\n #ifdef __cplusplus\n extern \"C\"\n {\n #endif /* __cplusplus */\n \n /* These functions might be defined in libraries which we load; the\n    JNI implementation calls them at the appropriate times.  */\n-extern jint JNI_OnLoad (JavaVM *, void *);\n-extern void JNI_OnUnload (JavaVM *, void *);\n+extern JNIEXPORT jint JNICALL JNI_OnLoad (JavaVM *, void *);\n+extern JNIEXPORT void JNICALL JNI_OnUnload (JavaVM *, void *);\n \n /* These functions are called by user code to start using the\n    invocation API.  */\n-extern jint JNI_GetDefaultJavaVMInitArgs (void *);\n-extern jint JNI_CreateJavaVM (JavaVM **, void **, void *);\n-extern jint JNI_GetCreatedJavaVMs(JavaVM **, jsize, jsize *);\n+extern JNIIMPEXP jint JNICALL JNI_GetDefaultJavaVMInitArgs (void *);\n+extern JNIIMPEXP jint JNICALL JNI_CreateJavaVM (JavaVM **, void **, void *);\n+extern JNIIMPEXP jint JNICALL JNI_GetCreatedJavaVMs(JavaVM **, jsize, jsize *);\n \n #ifdef __cplusplus\n };\n@@ -242,419 +248,418 @@ struct JNINativeInterface\n   _Jv_func reserved2;\n   _Jv_func reserved3;\n \n-  jint     (*GetVersion)                   (JNIEnv *);\n-  jclass   (*DefineClass)                  (JNIEnv *, jobject,\n-\t\t\t\t\t    const jbyte *, jsize);\n-  jclass   (*FindClass)                    (JNIEnv *, const char *);\n-\n-  jmethodID (*FromReflectedMethod)\t   (JNIEnv *, jobject);\n-  jfieldID  (*FromReflectedField)\t   (JNIEnv *, jobject);\n-  jobject   (*ToReflectedMethod)\t   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jboolean);\n-\n-  jclass   (*GetSuperclass)                (JNIEnv *, jclass);\n-  jboolean (*IsAssignableFrom)             (JNIEnv *, jclass, jclass);\n-\n-  jobject  (*ToReflectedField)\t\t   (JNIEnv *, jclass, jfieldID,\n-\t\t\t\t\t    jboolean);\n-\n-  jint     (*Throw)                        (JNIEnv *, jthrowable);\n-  jint     (*ThrowNew)                     (JNIEnv *, jclass, const char *);\n-  jthrowable (*ExceptionOccurred)          (JNIEnv *);\n-  void     (*ExceptionDescribe)            (JNIEnv *);\n-  void     (*ExceptionClear)               (JNIEnv *);\n-  void     (*FatalError)                   (JNIEnv *, const char *);\n-\n-  jint     (*PushLocalFrame)\t\t   (JNIEnv *, jint);\n-  jobject  (*PopLocalFrame)\t\t   (JNIEnv *, jobject);\n-\n-  jobject  (*NewGlobalRef)                 (JNIEnv *, jobject);\n-  void     (*DeleteGlobalRef)              (JNIEnv *, jobject);\n-  void     (*DeleteLocalRef)               (JNIEnv *, jobject);\n-  jboolean (*IsSameObject)                 (JNIEnv *, jobject, jobject);\n-\n-  jobject  (*NewLocalRef)\t\t   (JNIEnv *, jobject);\n-  jint     (*EnsureLocalCapacity)\t   (JNIEnv *, jint);\n-\n-  jobject  (*AllocObject)                  (JNIEnv *, jclass);\n-  jobject (*NewObject)\t\t\t   (JNIEnv *, jclass, jmethodID, ...);\n-  jobject (*NewObjectV)\t\t\t   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jobject (*NewObjectA)\t\t\t   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-\n-  jclass   (*GetObjectClass)               (JNIEnv *, jobject);\n-  jboolean (*IsInstanceOf)                 (JNIEnv *, jobject, jclass);\n-  jmethodID (*GetMethodID)                 (JNIEnv *, jclass, const char *,\n+  jint     (JNICALL *GetVersion)                   (JNIEnv *);\n+  jclass   (JNICALL *DefineClass)                  (JNIEnv *, jobject,\n+                                                    const jbyte *, jsize);\n+  jclass   (JNICALL *FindClass)                    (JNIEnv *, const char *);\n+\n+  jmethodID (JNICALL *FromReflectedMethod)\t   (JNIEnv *, jobject);\n+  jfieldID  (JNICALL *FromReflectedField)\t   (JNIEnv *, jobject);\n+  jobject   (JNICALL *ToReflectedMethod)\t   (JNIEnv *, jclass, jmethodID,\n+                                                    jboolean);\n+\n+  jclass   (JNICALL *GetSuperclass)                (JNIEnv *, jclass);\n+  jboolean (JNICALL *IsAssignableFrom)             (JNIEnv *, jclass, jclass);\n+\n+  jobject  (JNICALL *ToReflectedField)\t\t   (JNIEnv *, jclass, jfieldID,\n+                                                    jboolean);\n+\n+  jint     (JNICALL *Throw)                        (JNIEnv *, jthrowable);\n+  jint     (JNICALL *ThrowNew)                     (JNIEnv *, jclass, \n+                                                    const char *);\n+  jthrowable (JNICALL *ExceptionOccurred)          (JNIEnv *);\n+  void     (JNICALL *ExceptionDescribe)            (JNIEnv *);\n+  void     (JNICALL *ExceptionClear)               (JNIEnv *);\n+  void     (JNICALL *FatalError)                   (JNIEnv *, const char *);\n+\n+  jint     (JNICALL *PushLocalFrame)\t\t   (JNIEnv *, jint);\n+  jobject  (JNICALL *PopLocalFrame)\t\t   (JNIEnv *, jobject);\n+\n+  jobject  (JNICALL *NewGlobalRef)                 (JNIEnv *, jobject);\n+  void     (JNICALL *DeleteGlobalRef)              (JNIEnv *, jobject);\n+  void     (JNICALL *DeleteLocalRef)               (JNIEnv *, jobject);\n+  jboolean (JNICALL *IsSameObject)                 (JNIEnv *, jobject, \n+                                                    jobject);\n+\n+  jobject  (JNICALL *NewLocalRef)\t\t   (JNIEnv *, jobject);\n+  jint     (JNICALL *EnsureLocalCapacity)\t   (JNIEnv *, jint);\n+\n+  jobject  (JNICALL *AllocObject)                  (JNIEnv *, jclass);\n+  jobject (JNICALL *NewObject)\t\t\t   (JNIEnv *, jclass, \n+                                                    jmethodID, ...);\n+  jobject (JNICALL *NewObjectV)\t\t\t   (JNIEnv *, jclass, \n+                                                    jmethodID, _Jv_va_list);\n+  jobject (JNICALL *NewObjectA)\t\t\t   (JNIEnv *, jclass, \n+                                                    jmethodID, jvalue *);\n+\n+  jclass   (JNICALL *GetObjectClass)               (JNIEnv *, jobject);\n+  jboolean (JNICALL *IsInstanceOf)                 (JNIEnv *, jobject, jclass);\n+  jmethodID (JNICALL *GetMethodID)                 (JNIEnv *, jclass, \n+                                                    const char *, const char *);\n+\n+  jobject (JNICALL *CallObjectMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  jobject (JNICALL *CallObjectMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jobject (JNICALL *CallObjectMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jboolean (JNICALL *CallBooleanMethod)\t   (JNIEnv *, jobject, jmethodID,\n+                                            ...);\n+  jboolean (JNICALL *CallBooleanMethodV)   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jboolean (JNICALL *CallBooleanMethodA)   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jbyte (JNICALL *CallByteMethod)   (JNIEnv *, jobject, jmethodID, ...);\n+  jbyte (JNICALL *CallByteMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jbyte (JNICALL *CallByteMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jchar (JNICALL *CallCharMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  jchar (JNICALL *CallCharMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jchar (JNICALL *CallCharMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jshort (JNICALL *CallShortMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  jshort (JNICALL *CallShortMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jshort (JNICALL *CallShortMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jint \t(JNICALL *CallIntMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  jint \t(JNICALL *CallIntMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jint \t(JNICALL *CallIntMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jlong (JNICALL *CallLongMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  jlong (JNICALL *CallLongMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jlong (JNICALL *CallLongMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jfloat (JNICALL *CallFloatMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  jfloat (JNICALL *CallFloatMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jfloat (JNICALL *CallFloatMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  jdouble (JNICALL *CallDoubleMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  jdouble (JNICALL *CallDoubleMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  jdouble (JNICALL *CallDoubleMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+  void  (JNICALL *CallVoidMethod)\t   (JNIEnv *, jobject, jmethodID, ...);\n+  void  (JNICALL *CallVoidMethodV)\t   (JNIEnv *, jobject, jmethodID,\n+                                            _Jv_va_list);\n+  void  (JNICALL *CallVoidMethodA)\t   (JNIEnv *, jobject, jmethodID,\n+                                            jvalue *);\n+\n+  jobject   (JNICALL *CallNonvirtualObjectMethod)  (JNIEnv *, jobject, jclass,\n+                                                    jmethodID, ...);\n+  jobject   (JNICALL *CallNonvirtualObjectMethodV) (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jobject   (JNICALL *CallNonvirtualObjectMethodA) (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  jboolean  (JNICALL *CallNonvirtualBooleanMethod) (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jboolean  (JNICALL *CallNonvirtualBooleanMethodV) (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t             jmethodID, _Jv_va_list);\n+  jboolean  (JNICALL *CallNonvirtualBooleanMethodA) (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t             jmethodID, jvalue *);\n+  jbyte     (JNICALL *CallNonvirtualByteMethod)\t   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jbyte     (JNICALL *CallNonvirtualByteMethodV)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jbyte     (JNICALL *CallNonvirtualByteMethodA)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  jchar     (JNICALL *CallNonvirtualCharMethod)\t   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jchar     (JNICALL *CallNonvirtualCharMethodV)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jchar     (JNICALL *CallNonvirtualCharMethodA)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  jshort    (JNICALL *CallNonvirtualShortMethod)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jshort    (JNICALL *CallNonvirtualShortMethodV)  (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jshort    (JNICALL *CallNonvirtualShortMethodA)  (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  jint \t    (JNICALL *CallNonvirtualIntMethod)\t   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jint \t    (JNICALL *CallNonvirtualIntMethodV)\t   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jint \t    (JNICALL *CallNonvirtualIntMethodA)\t   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  jlong     (JNICALL *CallNonvirtualLongMethod)\t   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jlong     (JNICALL *CallNonvirtualLongMethodV)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jlong     (JNICALL *CallNonvirtualLongMethodA)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  jfloat    (JNICALL *CallNonvirtualFloatMethod)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jfloat    (JNICALL *CallNonvirtualFloatMethodV)  (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jfloat    (JNICALL *CallNonvirtualFloatMethodA)  (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  jdouble   (JNICALL *CallNonvirtualDoubleMethod)  (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  jdouble   (JNICALL *CallNonvirtualDoubleMethodV) (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  jdouble   (JNICALL *CallNonvirtualDoubleMethodA) (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+  void      (JNICALL *CallNonvirtualVoidMethod)\t   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, ...);\n+  void      (JNICALL *CallNonvirtualVoidMethodV)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, _Jv_va_list);\n+  void      (JNICALL *CallNonvirtualVoidMethodA)   (JNIEnv *, jobject, jclass,\n+\t\t\t\t\t            jmethodID, jvalue *);\n+\n+  jfieldID  (JNICALL *GetFieldID)          (JNIEnv *, jclass, const char *,\n \t\t\t\t\t    const char *);\n \n-  jobject \t(*CallObjectMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jobject \t(*CallObjectMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jobject \t(*CallObjectMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jboolean \t(*CallBooleanMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jboolean \t(*CallBooleanMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jboolean \t(*CallBooleanMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jbyte \t(*CallByteMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jbyte \t(*CallByteMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jbyte \t(*CallByteMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jchar \t(*CallCharMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jchar \t(*CallCharMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jchar \t(*CallCharMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jshort \t(*CallShortMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jshort \t(*CallShortMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jshort \t(*CallShortMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jint \t\t(*CallIntMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jint \t\t(*CallIntMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jint \t\t(*CallIntMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jlong \t(*CallLongMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jlong \t(*CallLongMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jlong \t(*CallLongMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jfloat \t(*CallFloatMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jfloat \t(*CallFloatMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jfloat \t(*CallFloatMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jdouble \t(*CallDoubleMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  jdouble \t(*CallDoubleMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jdouble \t(*CallDoubleMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  void  \t(*CallVoidMethod)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    ...);\n-  void  \t(*CallVoidMethodV)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  void  \t(*CallVoidMethodA)\t   (JNIEnv *, jobject, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-\n-  jobject   (*CallNonvirtualObjectMethod)  (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jobject   (*CallNonvirtualObjectMethodV) (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jobject   (*CallNonvirtualObjectMethodA) (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  jboolean  (*CallNonvirtualBooleanMethod) (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jboolean  (*CallNonvirtualBooleanMethodV) (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t     jmethodID, _Jv_va_list);\n-  jboolean  (*CallNonvirtualBooleanMethodA) (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t     jmethodID, jvalue *);\n-  jbyte     (*CallNonvirtualByteMethod)\t   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jbyte     (*CallNonvirtualByteMethodV)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jbyte     (*CallNonvirtualByteMethodA)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  jchar     (*CallNonvirtualCharMethod)\t   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jchar     (*CallNonvirtualCharMethodV)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jchar     (*CallNonvirtualCharMethodA)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  jshort    (*CallNonvirtualShortMethod)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jshort    (*CallNonvirtualShortMethodV)  (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jshort    (*CallNonvirtualShortMethodA)  (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  jint \t    (*CallNonvirtualIntMethod)\t   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jint \t    (*CallNonvirtualIntMethodV)\t   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jint \t    (*CallNonvirtualIntMethodA)\t   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  jlong     (*CallNonvirtualLongMethod)\t   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jlong     (*CallNonvirtualLongMethodV)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jlong     (*CallNonvirtualLongMethodA)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  jfloat    (*CallNonvirtualFloatMethod)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jfloat    (*CallNonvirtualFloatMethodV)  (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jfloat    (*CallNonvirtualFloatMethodA)  (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  jdouble   (*CallNonvirtualDoubleMethod)  (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  jdouble   (*CallNonvirtualDoubleMethodV) (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  jdouble   (*CallNonvirtualDoubleMethodA) (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-  void      (*CallNonvirtualVoidMethod)\t   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, ...);\n-  void      (*CallNonvirtualVoidMethodV)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, _Jv_va_list);\n-  void      (*CallNonvirtualVoidMethodA)   (JNIEnv *, jobject, jclass,\n-\t\t\t\t\t    jmethodID, jvalue *);\n-\n-  jfieldID      (*GetFieldID)              (JNIEnv *, jclass, const char *,\n-\t\t\t\t\t    const char *);\n-\n-  jobject  (*GetObjectField)               (JNIEnv *, jobject, jfieldID);\n-  jboolean (*GetBooleanField)              (JNIEnv *, jobject, jfieldID);\n-  jbyte    (*GetByteField)                 (JNIEnv *, jobject, jfieldID);\n-  jchar    (*GetCharField)                 (JNIEnv *, jobject, jfieldID);\n-  jshort   (*GetShortField)                (JNIEnv *, jobject, jfieldID);\n-  jint     (*GetIntField)                  (JNIEnv *, jobject, jfieldID);\n-  jlong    (*GetLongField)                 (JNIEnv *, jobject, jfieldID);\n-  jfloat   (*GetFloatField)                (JNIEnv *, jobject, jfieldID);\n-  jdouble  (*GetDoubleField)               (JNIEnv *, jobject, jfieldID);\n-\n-  void\t\t(*SetObjectField)\t   (JNIEnv *, jobject,\n+  jobject  (JNICALL *GetObjectField)       (JNIEnv *, jobject, jfieldID);\n+  jboolean (JNICALL *GetBooleanField)      (JNIEnv *, jobject, jfieldID);\n+  jbyte    (JNICALL *GetByteField)         (JNIEnv *, jobject, jfieldID);\n+  jchar    (JNICALL *GetCharField)         (JNIEnv *, jobject, jfieldID);\n+  jshort   (JNICALL *GetShortField)        (JNIEnv *, jobject, jfieldID);\n+  jint     (JNICALL *GetIntField)          (JNIEnv *, jobject, jfieldID);\n+  jlong    (JNICALL *GetLongField)         (JNIEnv *, jobject, jfieldID);\n+  jfloat   (JNICALL *GetFloatField)        (JNIEnv *, jobject, jfieldID);\n+  jdouble  (JNICALL *GetDoubleField)       (JNIEnv *, jobject, jfieldID);\n+\n+  void\t(JNICALL *SetObjectField)\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jobject);\n-  void\t\t(*SetBooleanField)\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetBooleanField)\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jboolean);\n-  void\t\t(*SetByteField)\t\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetByteField)\t\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jbyte);\n-  void\t\t(*SetCharField)\t\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetCharField)\t\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jchar);\n-  void\t\t(*SetShortField)\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetShortField)\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jshort);\n-  void\t\t(*SetIntField)\t\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetIntField)\t\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jint);\n-  void\t\t(*SetLongField)\t\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetLongField)\t\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jlong);\n-  void\t\t(*SetFloatField)\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetFloatField)\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jfloat);\n-  void\t\t(*SetDoubleField)\t   (JNIEnv *, jobject,\n+  void\t(JNICALL *SetDoubleField)\t   (JNIEnv *, jobject,\n \t\t\t\t\t    jfieldID, jdouble);\n \n-  jmethodID (*GetStaticMethodID)           (JNIEnv *, jclass, const char *,\n-\t\t\t\t\t    const char *);\n-\n-  jobject \t(*CallStaticObjectMethod)  (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jobject \t(*CallStaticObjectMethodV) (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jobject \t(*CallStaticObjectMethodA) (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jboolean \t(*CallStaticBooleanMethod) (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jboolean \t(*CallStaticBooleanMethodV) (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t     _Jv_va_list);\n-  jboolean \t(*CallStaticBooleanMethodA) (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t     jvalue *);\n-  jbyte \t(*CallStaticByteMethod)    (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jbyte \t(*CallStaticByteMethodV)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jbyte \t(*CallStaticByteMethodA)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jchar \t(*CallStaticCharMethod)    (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jchar \t(*CallStaticCharMethodV)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jchar \t(*CallStaticCharMethodA)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jshort \t(*CallStaticShortMethod)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jshort \t(*CallStaticShortMethodV)  (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jshort \t(*CallStaticShortMethodA)  (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jint \t\t(*CallStaticIntMethod) \t   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jint \t\t(*CallStaticIntMethodV)    (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jint \t\t(*CallStaticIntMethodA)    (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jlong \t(*CallStaticLongMethod)    (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jlong \t(*CallStaticLongMethodV)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jlong \t(*CallStaticLongMethodA)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jfloat \t(*CallStaticFloatMethod)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jfloat \t(*CallStaticFloatMethodV)  (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jfloat \t(*CallStaticFloatMethodA)  (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  jdouble \t(*CallStaticDoubleMethod)  (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  jdouble \t(*CallStaticDoubleMethodV) (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  jdouble \t(*CallStaticDoubleMethodA) (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-  void  \t(*CallStaticVoidMethod)    (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    ...);\n-  void  \t(*CallStaticVoidMethodV)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    _Jv_va_list);\n-  void  \t(*CallStaticVoidMethodA)   (JNIEnv *, jclass, jmethodID,\n-\t\t\t\t\t    jvalue *);\n-\n-  jfieldID      (*GetStaticFieldID)        (JNIEnv *, jclass, const char *,\n+  jmethodID (JNICALL *GetStaticMethodID)   (JNIEnv *, jclass, const char *,\n \t\t\t\t\t    const char *);\n \n-  jobject\t(*GetStaticObjectField)\t   (JNIEnv *, jclass, jfieldID);\n-  jboolean\t(*GetStaticBooleanField)   (JNIEnv *, jclass, jfieldID);\n-  jbyte\t\t(*GetStaticByteField)\t   (JNIEnv *, jclass, jfieldID);\n-  jchar\t\t(*GetStaticCharField)\t   (JNIEnv *, jclass, jfieldID);\n-  jshort\t(*GetStaticShortField)\t   (JNIEnv *, jclass, jfieldID);\n-  jint\t\t(*GetStaticIntField)\t   (JNIEnv *, jclass, jfieldID);\n-  jlong\t\t(*GetStaticLongField)\t   (JNIEnv *, jclass, jfieldID);\n-  jfloat\t(*GetStaticFloatField)\t   (JNIEnv *, jclass, jfieldID);\n-  jdouble\t(*GetStaticDoubleField)\t   (JNIEnv *, jclass, jfieldID);\n-\n-  void \t\t(*SetStaticObjectField)\t   (JNIEnv *, jclass,\n+  jobject  (JNICALL *CallStaticObjectMethod)  (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jobject  (JNICALL *CallStaticObjectMethodV) (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jobject  (JNICALL *CallStaticObjectMethodA) (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  jboolean (JNICALL *CallStaticBooleanMethod) (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jboolean (JNICALL *CallStaticBooleanMethodV) (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t        _Jv_va_list);\n+  jboolean (JNICALL *CallStaticBooleanMethodA) (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t        jvalue *);\n+  jbyte\t   (JNICALL *CallStaticByteMethod)    (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jbyte    (JNICALL *CallStaticByteMethodV)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jbyte    (JNICALL *CallStaticByteMethodA)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  jchar    (JNICALL *CallStaticCharMethod)    (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jchar    (JNICALL *CallStaticCharMethodV)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jchar    (JNICALL *CallStaticCharMethodA)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  jshort   (JNICALL *CallStaticShortMethod)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jshort   (JNICALL *CallStaticShortMethodV)  (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jshort   (JNICALL *CallStaticShortMethodA)  (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  jint \t   (JNICALL *CallStaticIntMethod)     (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jint \t   (JNICALL *CallStaticIntMethodV)    (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jint \t   (JNICALL *CallStaticIntMethodA)    (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  jlong    (JNICALL *CallStaticLongMethod)    (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jlong    (JNICALL *CallStaticLongMethodV)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jlong    (JNICALL *CallStaticLongMethodA)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  jfloat   (JNICALL *CallStaticFloatMethod)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jfloat   (JNICALL *CallStaticFloatMethodV)  (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jfloat   (JNICALL *CallStaticFloatMethodA)  (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  jdouble  (JNICALL *CallStaticDoubleMethod)  (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  jdouble  (JNICALL *CallStaticDoubleMethodV) (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  jdouble  (JNICALL *CallStaticDoubleMethodA) (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+  void     (JNICALL *CallStaticVoidMethod)    (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       ...);\n+  void     (JNICALL *CallStaticVoidMethodV)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       _Jv_va_list);\n+  void     (JNICALL *CallStaticVoidMethodA)   (JNIEnv *, jclass, jmethodID,\n+\t\t\t\t\t       jvalue *);\n+\n+  jfieldID (JNICALL *GetStaticFieldID)        (JNIEnv *, jclass, const char *,\n+\t\t\t\t\t       const char *);\n+\n+  jobject  (JNICALL *GetStaticObjectField)    (JNIEnv *, jclass, jfieldID);\n+  jboolean (JNICALL *GetStaticBooleanField)   (JNIEnv *, jclass, jfieldID);\n+  jbyte\t   (JNICALL *GetStaticByteField)      (JNIEnv *, jclass, jfieldID);\n+  jchar\t   (JNICALL *GetStaticCharField)      (JNIEnv *, jclass, jfieldID);\n+  jshort   (JNICALL *GetStaticShortField)     (JNIEnv *, jclass, jfieldID);\n+  jint\t   (JNICALL *GetStaticIntField)\t      (JNIEnv *, jclass, jfieldID);\n+  jlong\t   (JNICALL *GetStaticLongField)      (JNIEnv *, jclass, jfieldID);\n+  jfloat   (JNICALL *GetStaticFloatField)     (JNIEnv *, jclass, jfieldID);\n+  jdouble  (JNICALL *GetStaticDoubleField)    (JNIEnv *, jclass, jfieldID);\n+\n+  void \t(JNICALL *SetStaticObjectField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jobject);\n-  void \t\t(*SetStaticBooleanField)   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticBooleanField)   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jboolean);\n-  void \t\t(*SetStaticByteField)\t   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticByteField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jbyte);\n-  void \t\t(*SetStaticCharField)\t   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticCharField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jchar);\n-  void \t\t(*SetStaticShortField)\t   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticShortField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jshort);\n-  void \t\t(*SetStaticIntField)\t   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticIntField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jint);\n-  void \t\t(*SetStaticLongField)\t   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticLongField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jlong);\n-  void \t\t(*SetStaticFloatField)\t   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticFloatField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jfloat);\n-  void \t\t(*SetStaticDoubleField)\t   (JNIEnv *, jclass,\n+  void \t(JNICALL *SetStaticDoubleField)\t   (JNIEnv *, jclass,\n \t\t\t\t\t    jfieldID, jdouble);\n \n-  jstring  (*NewString)                    (JNIEnv *, const jchar *, jsize);\n-  jsize    (*GetStringLength)              (JNIEnv *, jstring);\n-  const jchar * (*GetStringChars)          (JNIEnv *, jstring, jboolean *);\n-  void     (*ReleaseStringChars)           (JNIEnv *, jstring, const jchar *);\n-  jstring  (*NewStringUTF)                 (JNIEnv *, const char *);\n-  jsize    (*GetStringUTFLength)           (JNIEnv *, jstring);\n-  const char * (*GetStringUTFChars)        (JNIEnv *, jstring, jboolean *);\n-  void     (*ReleaseStringUTFChars)        (JNIEnv *, jstring, const char *);\n-  jsize    (*GetArrayLength)               (JNIEnv *, jarray);\n-  jarray   (*NewObjectArray)               (JNIEnv *, jsize, jclass, jobject);\n-  jobject  (*GetObjectArrayElement)        (JNIEnv *, jobjectArray, jsize);\n-  void     (*SetObjectArrayElement)        (JNIEnv *, jobjectArray, jsize,\n-\t\t\t\t\t    jobject);\n-\n-  jbooleanArray (*NewBooleanArray)\t   (JNIEnv *, jsize);\n-  jbyteArray    (*NewByteArray)\t\t   (JNIEnv *, jsize);\n-  jcharArray    (*NewCharArray)\t\t   (JNIEnv *, jsize);\n-  jshortArray   (*NewShortArray)\t   (JNIEnv *, jsize);\n-  jintArray     (*NewIntArray)\t\t   (JNIEnv *, jsize);\n-  jlongArray    (*NewLongArray)\t\t   (JNIEnv *, jsize);\n-  jfloatArray   (*NewFloatArray)\t   (JNIEnv *, jsize);\n-  jdoubleArray  (*NewDoubleArray)\t   (JNIEnv *, jsize);\n-\n-  jboolean *\t(*GetBooleanArrayElements) (JNIEnv *, jbooleanArray,\n-\t\t\t\t\t    jboolean *);\n-  jbyte *\t(*GetByteArrayElements)\t   (JNIEnv *, jbyteArray,\n-\t\t\t\t\t    jboolean *);\n-  jchar *\t(*GetCharArrayElements)\t   (JNIEnv *, jcharArray,\n-\t\t\t\t\t    jboolean *);\n-  jshort *\t(*GetShortArrayElements)   (JNIEnv *, jshortArray,\n-\t\t\t\t\t    jboolean *);\n-  jint *\t(*GetIntArrayElements)\t   (JNIEnv *, jintArray,\n-\t\t\t\t\t    jboolean *);\n-  jlong *\t(*GetLongArrayElements)\t   (JNIEnv *, jlongArray,\n-\t\t\t\t\t    jboolean *);\n-  jfloat *\t(*GetFloatArrayElements)   (JNIEnv *, jfloatArray,\n-\t\t\t\t\t    jboolean *);\n-  jdouble *\t(*GetDoubleArrayElements)  (JNIEnv *, jdoubleArray,\n-\t\t\t\t\t    jboolean *);\n-\n-  void\t\t(*ReleaseBooleanArrayElements) (JNIEnv *, jbooleanArray,\n-\t\t\t\t\t\tjboolean *, jint);\n-  void\t\t(*ReleaseByteArrayElements)    (JNIEnv *, jbyteArray,\n-\t\t\t\t\t        jbyte *, jint);\n-  void\t\t(*ReleaseCharArrayElements)    (JNIEnv *, jcharArray,\n-\t\t\t\t\t\tjchar *, jint);\n-  void\t\t(*ReleaseShortArrayElements)   (JNIEnv *, jshortArray,\n-\t\t\t\t\t\tjshort *, jint);\n-  void\t\t(*ReleaseIntArrayElements)     (JNIEnv *, jintArray,\n-\t\t\t\t\t\tjint *, jint);\n-  void\t\t(*ReleaseLongArrayElements)    (JNIEnv *, jlongArray,\n-\t\t\t\t\t\tjlong *, jint);\n-  void\t\t(*ReleaseFloatArrayElements)   (JNIEnv *, jfloatArray,\n-\t\t\t\t\t\tjfloat *, jint);\n-  void\t\t(*ReleaseDoubleArrayElements)  (JNIEnv *, jdoubleArray,\n-\t\t\t\t\t\tjdouble *, jint);\n-\n-  void \t\t(*GetBooleanArrayRegion)   (JNIEnv *, jbooleanArray,\n-\t\t\t\t\t    jsize, jsize, jboolean *);\n-  void \t\t(*GetByteArrayRegion)\t   (JNIEnv *, jbyteArray,\n-\t\t\t\t\t    jsize, jsize, jbyte *);\n-  void \t\t(*GetCharArrayRegion)\t   (JNIEnv *, jcharArray,\n-\t\t\t\t\t    jsize, jsize, jchar *);\n-  void \t\t(*GetShortArrayRegion)\t   (JNIEnv *, jshortArray,\n-\t\t\t\t\t    jsize, jsize, jshort *);\n-  void \t\t(*GetIntArrayRegion)\t   (JNIEnv *, jintArray,\n-\t\t\t\t\t    jsize, jsize, jint *);\n-  void \t\t(*GetLongArrayRegion)\t   (JNIEnv *, jlongArray,\n-\t\t\t\t\t    jsize, jsize, jlong *);\n-  void \t\t(*GetFloatArrayRegion)\t   (JNIEnv *, jfloatArray,\n-\t\t\t\t\t    jsize, jsize, jfloat *);\n-  void \t\t(*GetDoubleArrayRegion)\t   (JNIEnv *, jdoubleArray,\n-\t\t\t\t\t    jsize, jsize, jdouble *);\n-\n-  void \t\t(*SetBooleanArrayRegion)   (JNIEnv *, jbooleanArray,\n-\t\t\t\t\t    jsize, jsize, jboolean *);\n-  void \t\t(*SetByteArrayRegion)\t   (JNIEnv *, jbyteArray,\n-\t\t\t\t\t    jsize, jsize, jbyte *);\n-  void \t\t(*SetCharArrayRegion)\t   (JNIEnv *, jcharArray,\n-\t\t\t\t\t    jsize, jsize, jchar *);\n-  void \t\t(*SetShortArrayRegion)\t   (JNIEnv *, jshortArray,\n-\t\t\t\t\t    jsize, jsize, jshort *);\n-  void \t\t(*SetIntArrayRegion)\t   (JNIEnv *, jintArray,\n-\t\t\t\t\t    jsize, jsize, jint *);\n-  void \t\t(*SetLongArrayRegion)\t   (JNIEnv *, jlongArray,\n-\t\t\t\t\t    jsize, jsize, jlong *);\n-  void \t\t(*SetFloatArrayRegion)\t   (JNIEnv *, jfloatArray,\n-\t\t\t\t\t    jsize, jsize, jfloat *);\n-  void \t\t(*SetDoubleArrayRegion)\t   (JNIEnv *, jdoubleArray,\n-\t\t\t\t\t    jsize, jsize, jdouble *);\n-\n-  jint     (*RegisterNatives)              (JNIEnv *, jclass,\n-\t\t\t\t\t    const JNINativeMethod *, jint);\n-  jint     (*UnregisterNatives)            (JNIEnv *, jclass);\n-  jint     (*MonitorEnter)                 (JNIEnv *, jobject);\n-  jint     (*MonitorExit)                  (JNIEnv *, jobject);\n-  jint     (*GetJavaVM)                    (JNIEnv *, JavaVM **);\n-\n-  void\t   (*GetStringRegion)\t           (JNIEnv *, jstring, jsize,\n-\t\t\t\t\t    jsize, jchar *);\n-  void     (*GetStringUTFRegion)\t   (JNIEnv *, jstring, jsize,\n-\t\t\t\t\t    jsize, char *);\n-\n-  void * (*GetPrimitiveArrayCritical)      (JNIEnv *, jarray, jboolean *);\n-  void   (*ReleasePrimitiveArrayCritical)  (JNIEnv *, jarray, void *, jint);\n-\n-  const jchar * (*GetStringCritical)       (JNIEnv *, jstring, jboolean *);\n-  void          (*ReleaseStringCritical)   (JNIEnv *, jstring, const jchar *);\n-\n-  jweak  (*NewWeakGlobalRef)               (JNIEnv *, jobject);\n-  void   (*DeleteWeakGlobalRef)            (JNIEnv *, jweak);\n-\n-  jboolean\t(*ExceptionCheck)\t   (JNIEnv *);\n-\n-  jobject (*NewDirectByteBuffer)           (JNIEnv *, void *, jlong);\n-  void *  (*GetDirectBufferAddress)        (JNIEnv *, jobject);\n-  jlong   (*GetDirectBufferCapacity)       (JNIEnv *, jobject);\n+  jstring  (JNICALL *NewString)            (JNIEnv *, const jchar *, jsize);\n+  jsize    (JNICALL *GetStringLength)      (JNIEnv *, jstring);\n+  const jchar * (JNICALL *GetStringChars)  (JNIEnv *, jstring, jboolean *);\n+  void     (JNICALL *ReleaseStringChars)   (JNIEnv *, jstring, const jchar *);\n+  jstring  (JNICALL *NewStringUTF)         (JNIEnv *, const char *);\n+  jsize    (JNICALL *GetStringUTFLength)   (JNIEnv *, jstring);\n+  const char * (JNICALL *GetStringUTFChars) (JNIEnv *, jstring, jboolean *);\n+  void     (JNICALL *ReleaseStringUTFChars) (JNIEnv *, jstring, const char *);\n+  jsize    (JNICALL *GetArrayLength)       (JNIEnv *, jarray);\n+  jarray   (JNICALL *NewObjectArray)       (JNIEnv *, jsize, jclass, jobject);\n+  jobject  (JNICALL *GetObjectArrayElement) (JNIEnv *, jobjectArray, jsize);\n+  void     (JNICALL *SetObjectArrayElement) (JNIEnv *, jobjectArray, jsize,\n+\t\t\t\t\t     jobject);\n+\n+  jbooleanArray (JNICALL *NewBooleanArray)\t   (JNIEnv *, jsize);\n+  jbyteArray    (JNICALL *NewByteArray)\t\t   (JNIEnv *, jsize);\n+  jcharArray    (JNICALL *NewCharArray)\t\t   (JNIEnv *, jsize);\n+  jshortArray   (JNICALL *NewShortArray)\t   (JNIEnv *, jsize);\n+  jintArray     (JNICALL *NewIntArray)\t\t   (JNIEnv *, jsize);\n+  jlongArray    (JNICALL *NewLongArray)\t\t   (JNIEnv *, jsize);\n+  jfloatArray   (JNICALL *NewFloatArray)\t   (JNIEnv *, jsize);\n+  jdoubleArray  (JNICALL *NewDoubleArray)\t   (JNIEnv *, jsize);\n+\n+  jboolean *\t(JNICALL *GetBooleanArrayElements) (JNIEnv *, jbooleanArray,\n+\t\t\t\t\t            jboolean *);\n+  jbyte *\t(JNICALL *GetByteArrayElements)\t   (JNIEnv *, jbyteArray,\n+\t\t\t\t\t            jboolean *);\n+  jchar *\t(JNICALL *GetCharArrayElements)\t   (JNIEnv *, jcharArray,\n+\t\t\t\t\t            jboolean *);\n+  jshort *\t(JNICALL *GetShortArrayElements)   (JNIEnv *, jshortArray,\n+\t\t\t\t\t            jboolean *);\n+  jint *\t(JNICALL *GetIntArrayElements)\t   (JNIEnv *, jintArray,\n+\t\t\t\t\t            jboolean *);\n+  jlong *\t(JNICALL *GetLongArrayElements)\t   (JNIEnv *, jlongArray,\n+\t\t\t\t\t            jboolean *);\n+  jfloat *\t(JNICALL *GetFloatArrayElements)   (JNIEnv *, jfloatArray,\n+\t\t\t\t\t            jboolean *);\n+  jdouble *\t(JNICALL *GetDoubleArrayElements)  (JNIEnv *, jdoubleArray,\n+\t\t\t\t\t            jboolean *);\n+\n+  void\t\t(JNICALL *ReleaseBooleanArrayElements) (JNIEnv *, jbooleanArray,\n+\t\t\t\t\t\t        jboolean *, jint);\n+  void\t\t(JNICALL *ReleaseByteArrayElements)    (JNIEnv *, jbyteArray,\n+\t\t\t\t\t                jbyte *, jint);\n+  void\t\t(JNICALL *ReleaseCharArrayElements)    (JNIEnv *, jcharArray,\n+\t\t\t\t\t\t        jchar *, jint);\n+  void\t\t(JNICALL *ReleaseShortArrayElements)   (JNIEnv *, jshortArray,\n+\t\t\t\t\t\t        jshort *, jint);\n+  void\t\t(JNICALL *ReleaseIntArrayElements)     (JNIEnv *, jintArray,\n+\t\t\t\t\t\t        jint *, jint);\n+  void\t\t(JNICALL *ReleaseLongArrayElements)    (JNIEnv *, jlongArray,\n+\t\t\t\t\t\t        jlong *, jint);\n+  void\t\t(JNICALL *ReleaseFloatArrayElements)   (JNIEnv *, jfloatArray,\n+\t\t\t\t\t\t        jfloat *, jint);\n+  void\t\t(JNICALL *ReleaseDoubleArrayElements)  (JNIEnv *, jdoubleArray,\n+\t\t\t\t\t\t        jdouble *, jint);\n+\n+  void \t\t(JNICALL *GetBooleanArrayRegion)   (JNIEnv *, jbooleanArray,\n+\t\t\t\t\t            jsize, jsize, jboolean *);\n+  void \t\t(JNICALL *GetByteArrayRegion)\t   (JNIEnv *, jbyteArray,\n+\t\t\t\t\t            jsize, jsize, jbyte *);\n+  void \t\t(JNICALL *GetCharArrayRegion)\t   (JNIEnv *, jcharArray,\n+\t\t\t\t\t            jsize, jsize, jchar *);\n+  void \t\t(JNICALL *GetShortArrayRegion)\t   (JNIEnv *, jshortArray,\n+\t\t\t\t\t            jsize, jsize, jshort *);\n+  void \t\t(JNICALL *GetIntArrayRegion)\t   (JNIEnv *, jintArray,\n+\t\t\t\t\t            jsize, jsize, jint *);\n+  void \t\t(JNICALL *GetLongArrayRegion)\t   (JNIEnv *, jlongArray,\n+\t\t\t\t\t            jsize, jsize, jlong *);\n+  void \t\t(JNICALL *GetFloatArrayRegion)\t   (JNIEnv *, jfloatArray,\n+\t\t\t\t\t            jsize, jsize, jfloat *);\n+  void \t\t(JNICALL *GetDoubleArrayRegion)\t   (JNIEnv *, jdoubleArray,\n+\t\t\t\t\t            jsize, jsize, jdouble *);\n+\n+  void \t\t(JNICALL *SetBooleanArrayRegion)   (JNIEnv *, jbooleanArray,\n+\t\t\t\t\t            jsize, jsize, jboolean *);\n+  void \t\t(JNICALL *SetByteArrayRegion)\t   (JNIEnv *, jbyteArray,\n+\t\t\t\t\t            jsize, jsize, jbyte *);\n+  void \t\t(JNICALL *SetCharArrayRegion)\t   (JNIEnv *, jcharArray,\n+\t\t\t\t\t            jsize, jsize, jchar *);\n+  void \t\t(JNICALL *SetShortArrayRegion)\t   (JNIEnv *, jshortArray,\n+\t\t\t\t\t            jsize, jsize, jshort *);\n+  void \t\t(JNICALL *SetIntArrayRegion)\t   (JNIEnv *, jintArray,\n+\t\t\t\t\t            jsize, jsize, jint *);\n+  void \t\t(JNICALL *SetLongArrayRegion)\t   (JNIEnv *, jlongArray,\n+\t\t\t\t\t            jsize, jsize, jlong *);\n+  void \t\t(JNICALL *SetFloatArrayRegion)\t   (JNIEnv *, jfloatArray,\n+\t\t\t\t\t            jsize, jsize, jfloat *);\n+  void \t\t(JNICALL *SetDoubleArrayRegion)\t   (JNIEnv *, jdoubleArray,\n+\t\t\t\t\t            jsize, jsize, jdouble *);\n+\n+  jint     (JNICALL *RegisterNatives)              (JNIEnv *, jclass,\n+\t\t\t\t\t            const JNINativeMethod *, \n+\t\t\t\t\t\t    jint);\n+  jint     (JNICALL *UnregisterNatives)            (JNIEnv *, jclass);\n+  jint     (JNICALL *MonitorEnter)                 (JNIEnv *, jobject);\n+  jint     (JNICALL *MonitorExit)                  (JNIEnv *, jobject);\n+  jint     (JNICALL *GetJavaVM)                    (JNIEnv *, JavaVM **);\n+\n+  void\t   (JNICALL *GetStringRegion)\t           (JNIEnv *, jstring, jsize,\n+\t\t\t\t\t            jsize, jchar *);\n+  void     (JNICALL *GetStringUTFRegion)\t   (JNIEnv *, jstring, jsize,\n+\t\t\t\t\t            jsize, char *);\n+\n+  void * (JNICALL *GetPrimitiveArrayCritical)      (JNIEnv *, jarray, \n+                                                    jboolean *);\n+  void   (JNICALL *ReleasePrimitiveArrayCritical)  (JNIEnv *, jarray, void *, \n+                                                    jint);\n+\n+  const jchar * (JNICALL *GetStringCritical)       (JNIEnv *, jstring, \n+                                                    jboolean *);\n+  void          (JNICALL *ReleaseStringCritical)   (JNIEnv *, jstring, \n+                                                    const jchar *);\n+\n+  jweak  (JNICALL *NewWeakGlobalRef)               (JNIEnv *, jobject);\n+  void   (JNICALL *DeleteWeakGlobalRef)            (JNIEnv *, jweak);\n+\n+  jboolean\t(JNICALL *ExceptionCheck)\t   (JNIEnv *);\n+\n+  jobject (JNICALL *NewDirectByteBuffer)           (JNIEnv *, void *, jlong);\n+  void *  (JNICALL *GetDirectBufferAddress)        (JNIEnv *, jobject);\n+  jlong   (JNICALL *GetDirectBufferCapacity)       (JNIEnv *, jobject);\n };\n \n #ifdef __cplusplus\n@@ -1558,11 +1563,11 @@ struct JNIInvokeInterface\n   _Jv_func reserved1;\n   _Jv_func reserved2;\n \n-  jint (*DestroyJavaVM)         (JavaVM *);\n-  jint (*AttachCurrentThread)   (JavaVM *, void **, void *);\n-  jint (*DetachCurrentThread)   (JavaVM *);\n-  jint (*GetEnv)                (JavaVM *, void **, jint);\n-  jint (*AttachCurrentThreadAsDaemon) (JavaVM *, void **, void *);\n+  jint (JNICALL *DestroyJavaVM)         (JavaVM *);\n+  jint (JNICALL *AttachCurrentThread)   (JavaVM *, void **, void *);\n+  jint (JNICALL *DetachCurrentThread)   (JavaVM *);\n+  jint (JNICALL *GetEnv)                (JavaVM *, void **, jint);\n+  jint (JNICALL *AttachCurrentThreadAsDaemon) (JavaVM *, void **, void *);\n };\n \n #ifdef __cplusplus"}, {"sha": "44ea4118f894d37b70a16fb5907648d82d96c998", "filename": "libjava/jni.cc", "status": "modified", "additions": 133, "deletions": 124, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93745862c47eb16f9935989a4299a080335d8309/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93745862c47eb16f9935989a4299a080335d8309/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=93745862c47eb16f9935989a4299a080335d8309", "patch": "@@ -217,7 +217,7 @@ unwrap (T *obj)\n \f\n \n static jobject\n-_Jv_JNI_NewGlobalRef (JNIEnv *, jobject obj)\n+(JNICALL _Jv_JNI_NewGlobalRef) (JNIEnv *, jobject obj)\n {\n   // This seems weird but I think it is correct.\n   obj = unwrap (obj);\n@@ -226,15 +226,15 @@ _Jv_JNI_NewGlobalRef (JNIEnv *, jobject obj)\n }\n \n static void\n-_Jv_JNI_DeleteGlobalRef (JNIEnv *, jobject obj)\n+(JNICALL _Jv_JNI_DeleteGlobalRef) (JNIEnv *, jobject obj)\n {\n   // This seems weird but I think it is correct.\n   obj = unwrap (obj);\n   unmark_for_gc (obj, global_ref_table);\n }\n \n static void\n-_Jv_JNI_DeleteLocalRef (JNIEnv *env, jobject obj)\n+(JNICALL _Jv_JNI_DeleteLocalRef) (JNIEnv *env, jobject obj)\n {\n   _Jv_JNI_LocalFrame *frame;\n \n@@ -261,7 +261,7 @@ _Jv_JNI_DeleteLocalRef (JNIEnv *env, jobject obj)\n }\n \n static jint\n-_Jv_JNI_EnsureLocalCapacity (JNIEnv *env, jint size)\n+(JNICALL _Jv_JNI_EnsureLocalCapacity) (JNIEnv *env, jint size)\n {\n   // It is easier to just always allocate a new frame of the requested\n   // size.  This isn't the most efficient thing, but for now we don't\n@@ -289,7 +289,7 @@ _Jv_JNI_EnsureLocalCapacity (JNIEnv *env, jint size)\n }\n \n static jint\n-_Jv_JNI_PushLocalFrame (JNIEnv *env, jint size)\n+(JNICALL _Jv_JNI_PushLocalFrame) (JNIEnv *env, jint size)\n {\n   jint r = _Jv_JNI_EnsureLocalCapacity (env, size);\n   if (r < 0)\n@@ -302,7 +302,7 @@ _Jv_JNI_PushLocalFrame (JNIEnv *env, jint size)\n }\n \n static jobject\n-_Jv_JNI_NewLocalRef (JNIEnv *env, jobject obj)\n+(JNICALL _Jv_JNI_NewLocalRef) (JNIEnv *env, jobject obj)\n {\n   // This seems weird but I think it is correct.\n   obj = unwrap (obj);\n@@ -343,7 +343,7 @@ _Jv_JNI_NewLocalRef (JNIEnv *env, jobject obj)\n }\n \n static jobject\n-_Jv_JNI_PopLocalFrame (JNIEnv *env, jobject result, int stop)\n+(JNICALL _Jv_JNI_PopLocalFrame) (JNIEnv *env, jobject result, int stop)\n {\n   _Jv_JNI_LocalFrame *rf = env->locals;\n \n@@ -378,7 +378,7 @@ _Jv_JNI_PopLocalFrame (JNIEnv *env, jobject result, int stop)\n }\n \n static jobject\n-_Jv_JNI_PopLocalFrame (JNIEnv *env, jobject result)\n+(JNICALL _Jv_JNI_PopLocalFrame) (JNIEnv *env, jobject result)\n {\n   return _Jv_JNI_PopLocalFrame (env, result, MARK_USER);\n }\n@@ -422,14 +422,14 @@ wrap_value (JNIEnv *env, T *value)\n \f\n \n static jint\n-_Jv_JNI_GetVersion (JNIEnv *)\n+(JNICALL _Jv_JNI_GetVersion) (JNIEnv *)\n {\n   return JNI_VERSION_1_4;\n }\n \n static jclass\n-_Jv_JNI_DefineClass (JNIEnv *env, jobject loader,\n-\t\t     const jbyte *buf, jsize bufLen)\n+(JNICALL _Jv_JNI_DefineClass) (JNIEnv *env, jobject loader,\n+\t\t               const jbyte *buf, jsize bufLen)\n {\n   try\n     {\n@@ -454,7 +454,7 @@ _Jv_JNI_DefineClass (JNIEnv *env, jobject loader,\n }\n \n static jclass\n-_Jv_JNI_FindClass (JNIEnv *env, const char *name)\n+(JNICALL _Jv_JNI_FindClass) (JNIEnv *env, const char *name)\n {\n   // FIXME: assume that NAME isn't too long.\n   int len = strlen (name);\n@@ -490,19 +490,19 @@ _Jv_JNI_FindClass (JNIEnv *env, const char *name)\n }\n \n static jclass\n-_Jv_JNI_GetSuperclass (JNIEnv *env, jclass clazz)\n+(JNICALL _Jv_JNI_GetSuperclass) (JNIEnv *env, jclass clazz)\n {\n   return (jclass) wrap_value (env, unwrap (clazz)->getSuperclass ());\n }\n \n static jboolean\n-_Jv_JNI_IsAssignableFrom(JNIEnv *, jclass clazz1, jclass clazz2)\n+(JNICALL _Jv_JNI_IsAssignableFrom) (JNIEnv *, jclass clazz1, jclass clazz2)\n {\n   return unwrap (clazz1)->isAssignableFrom (unwrap (clazz2));\n }\n \n static jint\n-_Jv_JNI_Throw (JNIEnv *env, jthrowable obj)\n+(JNICALL _Jv_JNI_Throw) (JNIEnv *env, jthrowable obj)\n {\n   // We check in case the user did some funky cast.\n   obj = unwrap (obj);\n@@ -512,7 +512,7 @@ _Jv_JNI_Throw (JNIEnv *env, jthrowable obj)\n }\n \n static jint\n-_Jv_JNI_ThrowNew (JNIEnv *env, jclass clazz, const char *message)\n+(JNICALL _Jv_JNI_ThrowNew) (JNIEnv *env, jclass clazz, const char *message)\n {\n   using namespace java::lang::reflect;\n \n@@ -549,46 +549,46 @@ _Jv_JNI_ThrowNew (JNIEnv *env, jclass clazz, const char *message)\n }\n \n static jthrowable\n-_Jv_JNI_ExceptionOccurred (JNIEnv *env)\n+(JNICALL _Jv_JNI_ExceptionOccurred) (JNIEnv *env)\n {\n   return (jthrowable) wrap_value (env, env->ex);\n }\n \n static void\n-_Jv_JNI_ExceptionDescribe (JNIEnv *env)\n+(JNICALL _Jv_JNI_ExceptionDescribe) (JNIEnv *env)\n {\n   if (env->ex != NULL)\n     env->ex->printStackTrace();\n }\n \n static void\n-_Jv_JNI_ExceptionClear (JNIEnv *env)\n+(JNICALL _Jv_JNI_ExceptionClear) (JNIEnv *env)\n {\n   env->ex = NULL;\n }\n \n static jboolean\n-_Jv_JNI_ExceptionCheck (JNIEnv *env)\n+(JNICALL _Jv_JNI_ExceptionCheck) (JNIEnv *env)\n {\n   return env->ex != NULL;\n }\n \n static void\n-_Jv_JNI_FatalError (JNIEnv *, const char *message)\n+(JNICALL _Jv_JNI_FatalError) (JNIEnv *, const char *message)\n {\n   JvFail (message);\n }\n \n \f\n \n static jboolean\n-_Jv_JNI_IsSameObject (JNIEnv *, jobject obj1, jobject obj2)\n+(JNICALL _Jv_JNI_IsSameObject) (JNIEnv *, jobject obj1, jobject obj2)\n {\n   return unwrap (obj1) == unwrap (obj2);\n }\n \n static jobject\n-_Jv_JNI_AllocObject (JNIEnv *env, jclass clazz)\n+(JNICALL _Jv_JNI_AllocObject) (JNIEnv *env, jclass clazz)\n {\n   jobject obj = NULL;\n   using namespace java::lang::reflect;\n@@ -611,15 +611,15 @@ _Jv_JNI_AllocObject (JNIEnv *env, jclass clazz)\n }\n \n static jclass\n-_Jv_JNI_GetObjectClass (JNIEnv *env, jobject obj)\n+(JNICALL _Jv_JNI_GetObjectClass) (JNIEnv *env, jobject obj)\n {\n   obj = unwrap (obj);\n   JvAssert (obj);\n   return (jclass) wrap_value (env, obj->getClass());\n }\n \n static jboolean\n-_Jv_JNI_IsInstanceOf (JNIEnv *, jobject obj, jclass clazz)\n+(JNICALL _Jv_JNI_IsInstanceOf) (JNIEnv *, jobject obj, jclass clazz)\n {\n   return unwrap (clazz)->isInstance(unwrap (obj));\n }\n@@ -632,8 +632,8 @@ _Jv_JNI_IsInstanceOf (JNIEnv *, jobject obj, jclass clazz)\n \n template<jboolean is_static>\n static jmethodID\n-_Jv_JNI_GetAnyMethodID (JNIEnv *env, jclass clazz,\n-\t\t\tconst char *name, const char *sig)\n+(JNICALL _Jv_JNI_GetAnyMethodID) (JNIEnv *env, jclass clazz,\n+\t\t\t          const char *name, const char *sig)\n {\n   try\n     {\n@@ -728,8 +728,8 @@ array_from_valist (jvalue *values, JArray<jclass> *arg_types, va_list vargs)\n // constructor.\n template<typename T, invocation_type style>\n static T\n-_Jv_JNI_CallAnyMethodV (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\tjmethodID id, va_list vargs)\n+(JNICALL _Jv_JNI_CallAnyMethodV) (JNIEnv *env, jobject obj, jclass klass,\n+\t\t\t          jmethodID id, va_list vargs)\n {\n   obj = unwrap (obj);\n   klass = unwrap (klass);\n@@ -776,8 +776,8 @@ _Jv_JNI_CallAnyMethodV (JNIEnv *env, jobject obj, jclass klass,\n \n template<typename T, invocation_type style>\n static T\n-_Jv_JNI_CallAnyMethod (JNIEnv *env, jobject obj, jclass klass,\n-\t\t       jmethodID method, ...)\n+(JNICALL _Jv_JNI_CallAnyMethod) (JNIEnv *env, jobject obj, jclass klass,\n+\t\t                 jmethodID method, ...)\n {\n   va_list args;\n   T result;\n@@ -791,8 +791,8 @@ _Jv_JNI_CallAnyMethod (JNIEnv *env, jobject obj, jclass klass,\n \n template<typename T, invocation_type style>\n static T\n-_Jv_JNI_CallAnyMethodA (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\tjmethodID id, jvalue *args)\n+(JNICALL _Jv_JNI_CallAnyMethodA) (JNIEnv *env, jobject obj, jclass klass,\n+\t\t\t          jmethodID id, jvalue *args)\n {\n   obj = unwrap (obj);\n   klass = unwrap (klass);\n@@ -846,8 +846,8 @@ _Jv_JNI_CallAnyMethodA (JNIEnv *env, jobject obj, jclass klass,\n \n template<invocation_type style>\n static void\n-_Jv_JNI_CallAnyVoidMethodV (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t    jmethodID id, va_list vargs)\n+(JNICALL _Jv_JNI_CallAnyVoidMethodV) (JNIEnv *env, jobject obj, jclass klass,\n+\t\t\t              jmethodID id, va_list vargs)\n {\n   obj = unwrap (obj);\n   klass = unwrap (klass);\n@@ -887,8 +887,8 @@ _Jv_JNI_CallAnyVoidMethodV (JNIEnv *env, jobject obj, jclass klass,\n \n template<invocation_type style>\n static void\n-_Jv_JNI_CallAnyVoidMethod (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t   jmethodID method, ...)\n+(JNICALL _Jv_JNI_CallAnyVoidMethod) (JNIEnv *env, jobject obj, jclass klass,\n+\t\t\t             jmethodID method, ...)\n {\n   va_list args;\n \n@@ -899,8 +899,8 @@ _Jv_JNI_CallAnyVoidMethod (JNIEnv *env, jobject obj, jclass klass,\n \n template<invocation_type style>\n static void\n-_Jv_JNI_CallAnyVoidMethodA (JNIEnv *env, jobject obj, jclass klass,\n-\t\t\t    jmethodID id, jvalue *args)\n+(JNICALL _Jv_JNI_CallAnyVoidMethodA) (JNIEnv *env, jobject obj, jclass klass,\n+\t\t\t              jmethodID id, jvalue *args)\n {\n   if (style == normal)\n     id = _Jv_LookupDeclaredMethod (obj->getClass (), id->name, id->signature);\n@@ -943,7 +943,8 @@ _Jv_JNI_CallAnyVoidMethodA (JNIEnv *env, jobject obj, jclass klass,\n // the CallMethod family.\n template<typename T>\n static T\n-_Jv_JNI_CallMethodV (JNIEnv *env, jobject obj, jmethodID id, va_list args)\n+(JNICALL _Jv_JNI_CallMethodV) (JNIEnv *env, jobject obj, \n+                               jmethodID id, va_list args)\n {\n   return _Jv_JNI_CallAnyMethodV<T, normal> (env, obj, NULL, id, args);\n }\n@@ -952,7 +953,7 @@ _Jv_JNI_CallMethodV (JNIEnv *env, jobject obj, jmethodID id, va_list args)\n // the CallMethod family.\n template<typename T>\n static T\n-_Jv_JNI_CallMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n+(JNICALL _Jv_JNI_CallMethod) (JNIEnv *env, jobject obj, jmethodID id, ...)\n {\n   va_list args;\n   T result;\n@@ -968,19 +969,21 @@ _Jv_JNI_CallMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n // the CallMethod family.\n template<typename T>\n static T\n-_Jv_JNI_CallMethodA (JNIEnv *env, jobject obj, jmethodID id, jvalue *args)\n+(JNICALL _Jv_JNI_CallMethodA) (JNIEnv *env, jobject obj, \n+                               jmethodID id, jvalue *args)\n {\n   return _Jv_JNI_CallAnyMethodA<T, normal> (env, obj, NULL, id, args);\n }\n \n static void\n-_Jv_JNI_CallVoidMethodV (JNIEnv *env, jobject obj, jmethodID id, va_list args)\n+(JNICALL _Jv_JNI_CallVoidMethodV) (JNIEnv *env, jobject obj, \n+                                   jmethodID id, va_list args)\n {\n   _Jv_JNI_CallAnyVoidMethodV<normal> (env, obj, NULL, id, args);\n }\n \n static void\n-_Jv_JNI_CallVoidMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n+(JNICALL _Jv_JNI_CallVoidMethod) (JNIEnv *env, jobject obj, jmethodID id, ...)\n {\n   va_list args;\n \n@@ -990,7 +993,8 @@ _Jv_JNI_CallVoidMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n }\n \n static void\n-_Jv_JNI_CallVoidMethodA (JNIEnv *env, jobject obj, jmethodID id, jvalue *args)\n+(JNICALL _Jv_JNI_CallVoidMethodA) (JNIEnv *env, jobject obj, \n+                                   jmethodID id, jvalue *args)\n {\n   _Jv_JNI_CallAnyVoidMethodA<normal> (env, obj, NULL, id, args);\n }\n@@ -999,8 +1003,8 @@ _Jv_JNI_CallVoidMethodA (JNIEnv *env, jobject obj, jmethodID id, jvalue *args)\n // the CallStaticMethod family.\n template<typename T>\n static T\n-_Jv_JNI_CallStaticMethodV (JNIEnv *env, jclass klass,\n-\t\t\t   jmethodID id, va_list args)\n+(JNICALL _Jv_JNI_CallStaticMethodV) (JNIEnv *env, jclass klass,\n+\t\t\t             jmethodID id, va_list args)\n {\n   JvAssert (((id->accflags) & java::lang::reflect::Modifier::STATIC));\n   JvAssert (java::lang::Class::class$.isInstance (unwrap (klass)));\n@@ -1012,7 +1016,8 @@ _Jv_JNI_CallStaticMethodV (JNIEnv *env, jclass klass,\n // the CallStaticMethod family.\n template<typename T>\n static T\n-_Jv_JNI_CallStaticMethod (JNIEnv *env, jclass klass, jmethodID id, ...)\n+(JNICALL _Jv_JNI_CallStaticMethod) (JNIEnv *env, jclass klass, \n+                                    jmethodID id, ...)\n {\n   va_list args;\n   T result;\n@@ -1032,8 +1037,8 @@ _Jv_JNI_CallStaticMethod (JNIEnv *env, jclass klass, jmethodID id, ...)\n // the CallStaticMethod family.\n template<typename T>\n static T\n-_Jv_JNI_CallStaticMethodA (JNIEnv *env, jclass klass, jmethodID id,\n-\t\t\t   jvalue *args)\n+(JNICALL _Jv_JNI_CallStaticMethodA) (JNIEnv *env, jclass klass, jmethodID id,\n+\t\t\t             jvalue *args)\n {\n   JvAssert (((id->accflags) & java::lang::reflect::Modifier::STATIC));\n   JvAssert (java::lang::Class::class$.isInstance (unwrap (klass)));\n@@ -1042,14 +1047,15 @@ _Jv_JNI_CallStaticMethodA (JNIEnv *env, jclass klass, jmethodID id,\n }\n \n static void\n-_Jv_JNI_CallStaticVoidMethodV (JNIEnv *env, jclass klass, jmethodID id,\n-\t\t\t       va_list args)\n+(JNICALL _Jv_JNI_CallStaticVoidMethodV) (JNIEnv *env, jclass klass, \n+                                         jmethodID id, va_list args)\n {\n   _Jv_JNI_CallAnyVoidMethodV<static_type> (env, NULL, klass, id, args);\n }\n \n static void\n-_Jv_JNI_CallStaticVoidMethod (JNIEnv *env, jclass klass, jmethodID id, ...)\n+(JNICALL _Jv_JNI_CallStaticVoidMethod) (JNIEnv *env, jclass klass, \n+                                        jmethodID id, ...)\n {\n   va_list args;\n \n@@ -1059,15 +1065,15 @@ _Jv_JNI_CallStaticVoidMethod (JNIEnv *env, jclass klass, jmethodID id, ...)\n }\n \n static void\n-_Jv_JNI_CallStaticVoidMethodA (JNIEnv *env, jclass klass, jmethodID id,\n-\t\t\t       jvalue *args)\n+(JNICALL _Jv_JNI_CallStaticVoidMethodA) (JNIEnv *env, jclass klass, \n+                                         jmethodID id, jvalue *args)\n {\n   _Jv_JNI_CallAnyVoidMethodA<static_type> (env, NULL, klass, id, args);\n }\n \n static jobject\n-_Jv_JNI_NewObjectV (JNIEnv *env, jclass klass,\n-\t\t    jmethodID id, va_list args)\n+(JNICALL _Jv_JNI_NewObjectV) (JNIEnv *env, jclass klass,\n+\t\t              jmethodID id, va_list args)\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n@@ -1081,7 +1087,7 @@ _Jv_JNI_NewObjectV (JNIEnv *env, jclass klass,\n }\n \n static jobject\n-_Jv_JNI_NewObject (JNIEnv *env, jclass klass, jmethodID id, ...)\n+(JNICALL _Jv_JNI_NewObject) (JNIEnv *env, jclass klass, jmethodID id, ...)\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n@@ -1102,8 +1108,8 @@ _Jv_JNI_NewObject (JNIEnv *env, jclass klass, jmethodID id, ...)\n }\n \n static jobject\n-_Jv_JNI_NewObjectA (JNIEnv *env, jclass klass, jmethodID id,\n-\t\t    jvalue *args)\n+(JNICALL _Jv_JNI_NewObjectA) (JNIEnv *env, jclass klass, jmethodID id,\n+\t\t              jvalue *args)\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n@@ -1120,7 +1126,7 @@ _Jv_JNI_NewObjectA (JNIEnv *env, jclass klass, jmethodID id,\n \n template<typename T>\n static T\n-_Jv_JNI_GetField (JNIEnv *env, jobject obj, jfieldID field)\n+(JNICALL _Jv_JNI_GetField) (JNIEnv *env, jobject obj, jfieldID field)\n {\n   obj = unwrap (obj);\n   JvAssert (obj);\n@@ -1130,7 +1136,7 @@ _Jv_JNI_GetField (JNIEnv *env, jobject obj, jfieldID field)\n \n template<typename T>\n static void\n-_Jv_JNI_SetField (JNIEnv *, jobject obj, jfieldID field, T value)\n+(JNICALL _Jv_JNI_SetField) (JNIEnv *, jobject obj, jfieldID field, T value)\n {\n   obj = unwrap (obj);\n   value = unwrap (value);\n@@ -1142,8 +1148,8 @@ _Jv_JNI_SetField (JNIEnv *, jobject obj, jfieldID field, T value)\n \n template<jboolean is_static>\n static jfieldID\n-_Jv_JNI_GetAnyFieldID (JNIEnv *env, jclass clazz,\n-\t\t       const char *name, const char *sig)\n+(JNICALL _Jv_JNI_GetAnyFieldID) (JNIEnv *env, jclass clazz,\n+\t\t                 const char *name, const char *sig)\n {\n   try\n     {\n@@ -1203,23 +1209,23 @@ _Jv_JNI_GetAnyFieldID (JNIEnv *env, jclass clazz,\n \n template<typename T>\n static T\n-_Jv_JNI_GetStaticField (JNIEnv *env, jclass, jfieldID field)\n+(JNICALL _Jv_JNI_GetStaticField) (JNIEnv *env, jclass, jfieldID field)\n {\n   T *ptr = (T *) field->u.addr;\n   return wrap_value (env, *ptr);\n }\n \n template<typename T>\n static void\n-_Jv_JNI_SetStaticField (JNIEnv *, jclass, jfieldID field, T value)\n+(JNICALL _Jv_JNI_SetStaticField) (JNIEnv *, jclass, jfieldID field, T value)\n {\n   value = unwrap (value);\n   T *ptr = (T *) field->u.addr;\n   *ptr = value;\n }\n \n static jstring\n-_Jv_JNI_NewString (JNIEnv *env, const jchar *unichars, jsize len)\n+(JNICALL _Jv_JNI_NewString) (JNIEnv *env, const jchar *unichars, jsize len)\n {\n   try\n     {\n@@ -1234,13 +1240,13 @@ _Jv_JNI_NewString (JNIEnv *env, const jchar *unichars, jsize len)\n }\n \n static jsize\n-_Jv_JNI_GetStringLength (JNIEnv *, jstring string)\n+(JNICALL _Jv_JNI_GetStringLength) (JNIEnv *, jstring string)\n {\n   return unwrap (string)->length();\n }\n \n static const jchar *\n-_Jv_JNI_GetStringChars (JNIEnv *, jstring string, jboolean *isCopy)\n+(JNICALL _Jv_JNI_GetStringChars) (JNIEnv *, jstring string, jboolean *isCopy)\n {\n   string = unwrap (string);\n   jchar *result = _Jv_GetStringChars (string);\n@@ -1251,13 +1257,13 @@ _Jv_JNI_GetStringChars (JNIEnv *, jstring string, jboolean *isCopy)\n }\n \n static void\n-_Jv_JNI_ReleaseStringChars (JNIEnv *, jstring string, const jchar *)\n+(JNICALL _Jv_JNI_ReleaseStringChars) (JNIEnv *, jstring string, const jchar *)\n {\n   unmark_for_gc (unwrap (string), global_ref_table);\n }\n \n static jstring\n-_Jv_JNI_NewStringUTF (JNIEnv *env, const char *bytes)\n+(JNICALL _Jv_JNI_NewStringUTF) (JNIEnv *env, const char *bytes)\n {\n   try\n     {\n@@ -1272,13 +1278,14 @@ _Jv_JNI_NewStringUTF (JNIEnv *env, const char *bytes)\n }\n \n static jsize\n-_Jv_JNI_GetStringUTFLength (JNIEnv *, jstring string)\n+(JNICALL _Jv_JNI_GetStringUTFLength) (JNIEnv *, jstring string)\n {\n   return JvGetStringUTFLength (unwrap (string));\n }\n \n static const char *\n-_Jv_JNI_GetStringUTFChars (JNIEnv *env, jstring string, jboolean *isCopy)\n+(JNICALL _Jv_JNI_GetStringUTFChars) (JNIEnv *env, jstring string, \n+                                     jboolean *isCopy)\n {\n   string = unwrap (string);\n   jsize len = JvGetStringUTFLength (string);\n@@ -1301,14 +1308,14 @@ _Jv_JNI_GetStringUTFChars (JNIEnv *env, jstring string, jboolean *isCopy)\n }\n \n static void\n-_Jv_JNI_ReleaseStringUTFChars (JNIEnv *, jstring, const char *utf)\n+(JNICALL _Jv_JNI_ReleaseStringUTFChars) (JNIEnv *, jstring, const char *utf)\n {\n   _Jv_Free ((void *) utf);\n }\n \n static void\n-_Jv_JNI_GetStringRegion (JNIEnv *env, jstring string, jsize start, jsize len,\n-\t\t\t jchar *buf)\n+(JNICALL _Jv_JNI_GetStringRegion) (JNIEnv *env, jstring string, jsize start, \n+                                   jsize len, jchar *buf)\n {\n   string = unwrap (string);\n   jchar *result = _Jv_GetStringChars (string);\n@@ -1329,8 +1336,8 @@ _Jv_JNI_GetStringRegion (JNIEnv *env, jstring string, jsize start, jsize len,\n }\n \n static void\n-_Jv_JNI_GetStringUTFRegion (JNIEnv *env, jstring str, jsize start,\n-\t\t\t    jsize len, char *buf)\n+(JNICALL _Jv_JNI_GetStringUTFRegion) (JNIEnv *env, jstring str, jsize start,\n+\t\t\t              jsize len, char *buf)\n {\n   str = unwrap (str);\n     \n@@ -1351,7 +1358,7 @@ _Jv_JNI_GetStringUTFRegion (JNIEnv *env, jstring str, jsize start,\n }\n \n static const jchar *\n-_Jv_JNI_GetStringCritical (JNIEnv *, jstring str, jboolean *isCopy)\n+(JNICALL _Jv_JNI_GetStringCritical) (JNIEnv *, jstring str, jboolean *isCopy)\n {\n   jchar *result = _Jv_GetStringChars (unwrap (str));\n   if (isCopy)\n@@ -1360,20 +1367,20 @@ _Jv_JNI_GetStringCritical (JNIEnv *, jstring str, jboolean *isCopy)\n }\n \n static void\n-_Jv_JNI_ReleaseStringCritical (JNIEnv *, jstring, const jchar *)\n+(JNICALL _Jv_JNI_ReleaseStringCritical) (JNIEnv *, jstring, const jchar *)\n {\n   // Nothing.\n }\n \n static jsize\n-_Jv_JNI_GetArrayLength (JNIEnv *, jarray array)\n+(JNICALL _Jv_JNI_GetArrayLength) (JNIEnv *, jarray array)\n {\n   return unwrap (array)->length;\n }\n \n static jarray\n-_Jv_JNI_NewObjectArray (JNIEnv *env, jsize length, jclass elementClass,\n-\t\t\tjobject init)\n+(JNICALL _Jv_JNI_NewObjectArray) (JNIEnv *env, jsize length, \n+                                  jclass elementClass, jobject init)\n {\n   try\n     {\n@@ -1391,15 +1398,16 @@ _Jv_JNI_NewObjectArray (JNIEnv *env, jsize length, jclass elementClass,\n }\n \n static jobject\n-_Jv_JNI_GetObjectArrayElement (JNIEnv *env, jobjectArray array, jsize index)\n+(JNICALL _Jv_JNI_GetObjectArrayElement) (JNIEnv *env, jobjectArray array, \n+                                         jsize index)\n {\n   jobject *elts = elements (unwrap (array));\n   return wrap_value (env, elts[index]);\n }\n \n static void\n-_Jv_JNI_SetObjectArrayElement (JNIEnv *env, jobjectArray array, jsize index,\n-\t\t\t       jobject value)\n+(JNICALL _Jv_JNI_SetObjectArrayElement) (JNIEnv *env, jobjectArray array, \n+                                         jsize index, jobject value)\n {\n   try\n     {\n@@ -1418,7 +1426,7 @@ _Jv_JNI_SetObjectArrayElement (JNIEnv *env, jobjectArray array, jsize index,\n \n template<typename T, jclass K>\n static JArray<T> *\n-_Jv_JNI_NewPrimitiveArray (JNIEnv *env, jsize length)\n+(JNICALL _Jv_JNI_NewPrimitiveArray) (JNIEnv *env, jsize length)\n {\n   try\n     {\n@@ -1433,8 +1441,8 @@ _Jv_JNI_NewPrimitiveArray (JNIEnv *env, jsize length)\n \n template<typename T>\n static T *\n-_Jv_JNI_GetPrimitiveArrayElements (JNIEnv *, JArray<T> *array,\n-\t\t\t\t   jboolean *isCopy)\n+(JNICALL _Jv_JNI_GetPrimitiveArrayElements) (JNIEnv *, JArray<T> *array,\n+\t\t\t\t             jboolean *isCopy)\n {\n   array = unwrap (array);\n   T *elts = elements (array);\n@@ -1449,8 +1457,8 @@ _Jv_JNI_GetPrimitiveArrayElements (JNIEnv *, JArray<T> *array,\n \n template<typename T>\n static void\n-_Jv_JNI_ReleasePrimitiveArrayElements (JNIEnv *, JArray<T> *array,\n-\t\t\t\t       T *, jint /* mode */)\n+(JNICALL _Jv_JNI_ReleasePrimitiveArrayElements) (JNIEnv *, JArray<T> *array,\n+\t\t\t\t                 T *, jint /* mode */)\n {\n   array = unwrap (array);\n   // Note that we ignore MODE.  We can do this because we never copy\n@@ -1461,8 +1469,8 @@ _Jv_JNI_ReleasePrimitiveArrayElements (JNIEnv *, JArray<T> *array,\n \n template<typename T>\n static void\n-_Jv_JNI_GetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n-\t\t\t\t jsize start, jsize len,\n+(JNICALL _Jv_JNI_GetPrimitiveArrayRegion) (JNIEnv *env, JArray<T> *array,\n+\t\t\t\t           jsize start, jsize len,\n \t\t\t\t T *buf)\n {\n   array = unwrap (array);\n@@ -1491,8 +1499,8 @@ _Jv_JNI_GetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n \n template<typename T>\n static void\n-_Jv_JNI_SetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n-\t\t\t\t jsize start, jsize len, T *buf)\n+(JNICALL _Jv_JNI_SetPrimitiveArrayRegion) (JNIEnv *env, JArray<T> *array,\n+\t\t\t\t           jsize start, jsize len, T *buf)\n {\n   array = unwrap (array);\n \n@@ -1518,8 +1526,8 @@ _Jv_JNI_SetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n }\n \n static void *\n-_Jv_JNI_GetPrimitiveArrayCritical (JNIEnv *, jarray array,\n-\t\t\t\t   jboolean *isCopy)\n+(JNICALL _Jv_JNI_GetPrimitiveArrayCritical) (JNIEnv *, jarray array,\n+\t\t\t\t             jboolean *isCopy)\n {\n   array = unwrap (array);\n   // FIXME: does this work?\n@@ -1532,13 +1540,13 @@ _Jv_JNI_GetPrimitiveArrayCritical (JNIEnv *, jarray array,\n }\n \n static void\n-_Jv_JNI_ReleasePrimitiveArrayCritical (JNIEnv *, jarray, void *, jint)\n+(JNICALL _Jv_JNI_ReleasePrimitiveArrayCritical) (JNIEnv *, jarray, void *, jint)\n {\n   // Nothing.\n }\n \n static jint\n-_Jv_JNI_MonitorEnter (JNIEnv *env, jobject obj)\n+(JNICALL _Jv_JNI_MonitorEnter) (JNIEnv *env, jobject obj)\n {\n   try\n     {\n@@ -1553,7 +1561,7 @@ _Jv_JNI_MonitorEnter (JNIEnv *env, jobject obj)\n }\n \n static jint\n-_Jv_JNI_MonitorExit (JNIEnv *env, jobject obj)\n+(JNICALL _Jv_JNI_MonitorExit) (JNIEnv *env, jobject obj)\n {\n   try\n     {\n@@ -1569,8 +1577,8 @@ _Jv_JNI_MonitorExit (JNIEnv *env, jobject obj)\n \n // JDK 1.2\n jobject\n-_Jv_JNI_ToReflectedField (JNIEnv *env, jclass cls, jfieldID fieldID,\n-\t\t\t  jboolean)\n+(JNICALL _Jv_JNI_ToReflectedField) (JNIEnv *env, jclass cls, jfieldID fieldID,\n+\t\t\t            jboolean)\n {\n   try\n     {\n@@ -1590,7 +1598,7 @@ _Jv_JNI_ToReflectedField (JNIEnv *env, jclass cls, jfieldID fieldID,\n \n // JDK 1.2\n static jfieldID\n-_Jv_JNI_FromReflectedField (JNIEnv *, jobject f)\n+(JNICALL _Jv_JNI_FromReflectedField) (JNIEnv *, jobject f)\n {\n   using namespace java::lang::reflect;\n \n@@ -1600,8 +1608,8 @@ _Jv_JNI_FromReflectedField (JNIEnv *, jobject f)\n }\n \n jobject\n-_Jv_JNI_ToReflectedMethod (JNIEnv *env, jclass klass, jmethodID id,\n-\t\t\t   jboolean)\n+(JNICALL _Jv_JNI_ToReflectedMethod) (JNIEnv *env, jclass klass, jmethodID id,\n+        \t\t             jboolean)\n {\n   using namespace java::lang::reflect;\n \n@@ -1635,7 +1643,7 @@ _Jv_JNI_ToReflectedMethod (JNIEnv *env, jclass klass, jmethodID id,\n }\n \n static jmethodID\n-_Jv_JNI_FromReflectedMethod (JNIEnv *, jobject method)\n+(JNICALL _Jv_JNI_FromReflectedMethod) (JNIEnv *, jobject method)\n {\n   using namespace java::lang::reflect;\n   method = unwrap (method);\n@@ -1647,7 +1655,7 @@ _Jv_JNI_FromReflectedMethod (JNIEnv *, jobject method)\n \n // JDK 1.2.\n jweak\n-_Jv_JNI_NewWeakGlobalRef (JNIEnv *env, jobject obj)\n+(JNICALL _Jv_JNI_NewWeakGlobalRef) (JNIEnv *env, jobject obj)\n {\n   using namespace gnu::gcj::runtime;\n   JNIWeakRef *ref = NULL;\n@@ -1668,7 +1676,7 @@ _Jv_JNI_NewWeakGlobalRef (JNIEnv *env, jobject obj)\n }\n \n void\n-_Jv_JNI_DeleteWeakGlobalRef (JNIEnv *, jweak obj)\n+(JNICALL _Jv_JNI_DeleteWeakGlobalRef) (JNIEnv *, jweak obj)\n {\n   using namespace gnu::gcj::runtime;\n   JNIWeakRef *ref = reinterpret_cast<JNIWeakRef *> (obj);\n@@ -1681,21 +1689,21 @@ _Jv_JNI_DeleteWeakGlobalRef (JNIEnv *, jweak obj)\n // Direct byte buffers.\n \n static jobject\n-_Jv_JNI_NewDirectByteBuffer (JNIEnv *, void *, jlong)\n+(JNICALL _Jv_JNI_NewDirectByteBuffer) (JNIEnv *, void *, jlong)\n {\n   // For now we don't support this.\n   return NULL;\n }\n \n static void *\n-_Jv_JNI_GetDirectBufferAddress (JNIEnv *, jobject)\n+(JNICALL _Jv_JNI_GetDirectBufferAddress) (JNIEnv *, jobject)\n {\n   // For now we don't support this.\n   return NULL;\n }\n \n static jlong\n-_Jv_JNI_GetDirectBufferCapacity (JNIEnv *, jobject)\n+(JNICALL _Jv_JNI_GetDirectBufferCapacity) (JNIEnv *, jobject)\n {\n   // For now we don't support this.\n   return -1;\n@@ -1818,9 +1826,9 @@ nathash_add (const JNINativeMethod *method)\n }\n \n static jint\n-_Jv_JNI_RegisterNatives (JNIEnv *env, jclass klass,\n-\t\t\t const JNINativeMethod *methods,\n-\t\t\t jint nMethods)\n+(JNICALL _Jv_JNI_RegisterNatives) (JNIEnv *env, jclass klass,\n+\t\t\t           const JNINativeMethod *methods,\n+\t\t\t           jint nMethods)\n {\n   // Synchronize while we do the work.  This must match\n   // synchronization in some other functions that manipulate or use\n@@ -1872,7 +1880,7 @@ _Jv_JNI_RegisterNatives (JNIEnv *env, jclass klass,\n }\n \n static jint\n-_Jv_JNI_UnregisterNatives (JNIEnv *, jclass)\n+(JNICALL _Jv_JNI_UnregisterNatives) (JNIEnv *, jclass)\n {\n   // FIXME -- we could implement this.\n   return JNI_ERR;\n@@ -2199,19 +2207,20 @@ _Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv,\n \n // This is the one actually used by JNI.\n static jint\n-_Jv_JNI_AttachCurrentThread (JavaVM *vm, void **penv, void *args)\n+(JNICALL _Jv_JNI_AttachCurrentThread) (JavaVM *vm, void **penv, void *args)\n {\n   return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args, false);\n }\n \n static jint\n-_Jv_JNI_AttachCurrentThreadAsDaemon (JavaVM *vm, void **penv, void *args)\n+(JNICALL _Jv_JNI_AttachCurrentThreadAsDaemon) (JavaVM *vm, void **penv, \n+                                               void *args)\n {\n   return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args, true);\n }\n \n static jint\n-_Jv_JNI_DestroyJavaVM (JavaVM *vm)\n+(JNICALL _Jv_JNI_DestroyJavaVM) (JavaVM *vm)\n {\n   JvAssert (the_vm && vm == the_vm);\n \n@@ -2245,14 +2254,14 @@ _Jv_JNI_DestroyJavaVM (JavaVM *vm)\n }\n \n jint\n-_Jv_JNI_DetachCurrentThread (JavaVM *)\n+(JNICALL _Jv_JNI_DetachCurrentThread) (JavaVM *)\n {\n   jint code = _Jv_DetachCurrentThread ();\n   return code  ? JNI_EDETACHED : 0;\n }\n \n static jint\n-_Jv_JNI_GetEnv (JavaVM *, void **penv, jint version)\n+(JNICALL _Jv_JNI_GetEnv) (JavaVM *, void **penv, jint version)\n {\n   if (_Jv_ThreadCurrent () == NULL)\n     {\n@@ -2281,7 +2290,7 @@ _Jv_JNI_GetEnv (JavaVM *, void **penv, jint version)\n   return 0;\n }\n \n-jint\n+JNIEXPORT jint JNICALL\n JNI_GetDefaultJavaVMInitArgs (void *args)\n {\n   jint version = * (jint *) args;\n@@ -2298,7 +2307,7 @@ JNI_GetDefaultJavaVMInitArgs (void *args)\n   return 0;\n }\n \n-jint\n+JNIEXPORT jint JNICALL\n JNI_CreateJavaVM (JavaVM **vm, void **penv, void *args)\n {\n   JvAssert (! the_vm);\n@@ -2363,7 +2372,7 @@ JNI_CreateJavaVM (JavaVM **vm, void **penv, void *args)\n   return 0;\n }\n \n-jint\n+JNIEXPORT jint JNICALL\n JNI_GetCreatedJavaVMs (JavaVM **vm_buffer, jsize buf_len, jsize *n_vms)\n {\n   if (buf_len <= 0)\n@@ -2404,7 +2413,7 @@ _Jv_GetJavaVM ()\n }\n \n static jint\n-_Jv_JNI_GetJavaVM (JNIEnv *, JavaVM **vm)\n+(JNICALL _Jv_JNI_GetJavaVM) (JNIEnv *, JavaVM **vm)\n {\n   *vm = _Jv_GetJavaVM ();\n   return *vm == NULL ? JNI_ERR : JNI_OK;"}]}