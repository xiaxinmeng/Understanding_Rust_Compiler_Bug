{"sha": "f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4ZGY3N2NlMzFkOWI1OTg2YzAzNTBjOGM5ZDRlMDI4ZmMwYTQ5ZA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-07-09T03:06:09Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-07-09T03:06:09Z"}, "message": "convert some hash_table to hash_map\n\ngcc/\n\n\t* graphite-htab.h: Use hash_map instead of hash_table.\n\t* graphite-clast-to-gimple.c: Adjust.\n\t* passes.c: Use hash_map instead of hash_table.\n\t* sese.c: Likewise.\n\t* sese.h: Remove now unused code.\n\nFrom-SVN: r212382", "tree": {"sha": "fe302b0afef5f45efd91e938d8c2eb16e20e1d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe302b0afef5f45efd91e938d8c2eb16e20e1d0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/comments", "author": null, "committer": null, "parents": [{"sha": "677f36a639850b44bf9645f75aacc5990e9aa1cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677f36a639850b44bf9645f75aacc5990e9aa1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677f36a639850b44bf9645f75aacc5990e9aa1cb"}], "stats": {"total": 257, "additions": 65, "deletions": 192}, "files": [{"sha": "a49a5f0d16c808d2237f906680d600c7e8d90380", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "patch": "@@ -1,3 +1,11 @@\n+2014-07-08  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* graphite-htab.h: Use hash_map instead of hash_table.\n+\t* graphite-clast-to-gimple.c: Adjust.\n+\t* passes.c: Use hash_map instead of hash_table.\n+\t* sese.c: Likewise.\n+\t* sese.h: Remove now unused code.\n+\n 2014-07-08  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/61599"}, {"sha": "296b893809fb699ff15b49f3dfac724bbb2ae2a3", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "patch": "@@ -1012,49 +1012,26 @@ build_iv_mapping (vec<tree> iv_map, struct clast_user_stmt *user_stmt,\n   mpz_clear (bound_two);\n }\n \n-/* Construct bb_pbb_def with BB and PBB.  */\n-\n-static bb_pbb_def *\n-new_bb_pbb_def (basic_block bb, poly_bb_p pbb)\n-{\n-  bb_pbb_def *bb_pbb_p;\n-\n-  bb_pbb_p = XNEW (bb_pbb_def);\n-  bb_pbb_p->bb = bb;\n-  bb_pbb_p->pbb = pbb;\n-\n-  return bb_pbb_p;\n-}\n-\n /* Mark BB with it's relevant PBB via hashing table BB_PBB_MAPPING.  */\n \n static void\n mark_bb_with_pbb (poly_bb_p pbb, basic_block bb,\n \t\t  bb_pbb_htab_type *bb_pbb_mapping)\n {\n-  bb_pbb_def tmp;\n-  bb_pbb_def **x;\n-\n-  tmp.bb = bb;\n-  x = bb_pbb_mapping->find_slot (&tmp, INSERT);\n-\n-  if (x && !*x)\n-    *x = new_bb_pbb_def (bb, pbb);\n+  bool existed;\n+  poly_bb_p &e = bb_pbb_mapping->get_or_insert (bb, &existed);\n+  if (!existed)\n+    e = pbb;\n }\n \n /* Find BB's related poly_bb_p in hash table BB_PBB_MAPPING.  */\n \n poly_bb_p\n find_pbb_via_hash (bb_pbb_htab_type *bb_pbb_mapping, basic_block bb)\n {\n-  bb_pbb_def tmp;\n-  bb_pbb_def **slot;\n-\n-  tmp.bb = bb;\n-  slot = bb_pbb_mapping->find_slot (&tmp, NO_INSERT);\n-\n-  if (slot && *slot)\n-    return ((bb_pbb_def *) *slot)->pbb;\n+  poly_bb_p *pbb = bb_pbb_mapping->get (bb);\n+  if (pbb)\n+    return *pbb;\n \n   return NULL;\n }"}, {"sha": "b1fd81e301308641e718d82d75b5d60bc88a0a16", "filename": "gcc/graphite-htab.h", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fgraphite-htab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fgraphite-htab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-htab.h?ref=f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "patch": "@@ -21,43 +21,33 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_GRAPHITE_HTAB_H\n #define GCC_GRAPHITE_HTAB_H\n \n-#include \"hash-table.h\"\n-\n-/* Stores BB's related PBB.  */\n-\n-struct bb_pbb_def\n-{\n-  basic_block bb;\n-  poly_bb_p pbb;\n-};\n+#include \"hash-map.h\"\n \n /* Hashtable helpers.  */\n \n-struct bb_pbb_hasher : typed_free_remove <bb_pbb_def>\n+struct bb_pbb_hasher : default_hashmap_traits\n {\n-  typedef bb_pbb_def value_type;\n-  typedef bb_pbb_def compare_type;\n-  static inline hashval_t hash (const value_type *);\n-  static inline bool equal (const value_type *, const compare_type *);\n+  static inline hashval_t hash (const basic_block);\n+  static inline bool equal_keys (const basic_block, const basic_block);\n };\n \n-/* Hash function for data base element BB_PBB.  */\n+/* Hash function.  */\n \n inline hashval_t\n-bb_pbb_hasher::hash (const value_type *bb_pbb)\n+bb_pbb_hasher::hash (const basic_block bb)\n {\n-  return (hashval_t)(bb_pbb->bb->index);\n+  return (hashval_t)(bb->index);\n }\n \n /* Compare data base element PB1 and PB2.  */\n \n inline bool\n-bb_pbb_hasher::equal (const value_type *bp1, const compare_type *bp2)\n+bb_pbb_hasher::equal_keys (const basic_block a, const basic_block b)\n {\n-  return (bp1->bb->index == bp2->bb->index);\n+  return (a->index == b->index);\n }\n \n-typedef hash_table<bb_pbb_hasher> bb_pbb_htab_type;\n+typedef hash_map<basic_block, poly_bb_p, bb_pbb_hasher> bb_pbb_htab_type;\n \n poly_bb_p find_pbb_via_hash (bb_pbb_htab_type *, basic_block);\n bool loop_is_parallel_p (loop_p, bb_pbb_htab_type *, int);"}, {"sha": "0533687c6ee14f4d1092d86a0cc07bf437bbef9c", "filename": "gcc/passes.c", "status": "modified", "additions": 23, "deletions": 45, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "patch": "@@ -84,6 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n #include \"tree-ssa-live.h\"  /* For remove_unused_locals.  */\n #include \"tree-cfgcleanup.h\"\n+#include \"hash-map.h\"\n \n using namespace gcc;\n \n@@ -687,64 +688,47 @@ pass_manager::register_dump_files (opt_pass *pass)\n   while (pass);\n }\n \n-struct pass_registry\n-{\n-  const char* unique_name;\n-  opt_pass *pass;\n-};\n-\n /* Helper for pass_registry hash table.  */\n \n-struct pass_registry_hasher : typed_noop_remove <pass_registry>\n+struct pass_registry_hasher : default_hashmap_traits\n {\n-  typedef pass_registry value_type;\n-  typedef pass_registry compare_type;\n-  static inline hashval_t hash (const value_type *);\n-  static inline bool equal (const value_type *, const compare_type *);\n+  static inline hashval_t hash (const char *);\n+  static inline bool equal_keys (const char *, const char *);\n };\n \n /* Pass registry hash function.  */\n \n inline hashval_t\n-pass_registry_hasher::hash (const value_type *s)\n+pass_registry_hasher::hash (const char *name)\n {\n-  return htab_hash_string (s->unique_name);\n+  return htab_hash_string (name);\n }\n \n /* Hash equal function  */\n \n inline bool\n-pass_registry_hasher::equal (const value_type *s1, const compare_type *s2)\n+pass_registry_hasher::equal_keys (const char *s1, const char *s2)\n {\n-  return !strcmp (s1->unique_name, s2->unique_name);\n+  return !strcmp (s1, s2);\n }\n \n-static hash_table<pass_registry_hasher> *name_to_pass_map;\n+static hash_map<const char *, opt_pass *, pass_registry_hasher>\n+  *name_to_pass_map;\n \n /* Register PASS with NAME.  */\n \n static void\n register_pass_name (opt_pass *pass, const char *name)\n {\n-  struct pass_registry **slot;\n-  struct pass_registry pr;\n-\n   if (!name_to_pass_map)\n-    name_to_pass_map = new hash_table<pass_registry_hasher> (256);\n-\n-  pr.unique_name = name;\n-  slot = name_to_pass_map->find_slot (&pr, INSERT);\n-  if (!*slot)\n-    {\n-      struct pass_registry *new_pr;\n+    name_to_pass_map\n+      = new hash_map<const char *, opt_pass *, pass_registry_hasher> (256);\n \n-      new_pr = XCNEW (struct pass_registry);\n-      new_pr->unique_name = xstrdup (name);\n-      new_pr->pass = pass;\n-      *slot = new_pr;\n-    }\n-  else\n+  if (name_to_pass_map->get (name))\n     return; /* Ignore plugin passes.  */\n+\n+      const char *unique_name = xstrdup (name);\n+      name_to_pass_map->put (unique_name, pass);\n }\n \n /* Map from pass id to canonicalized pass name.  */\n@@ -754,15 +738,13 @@ static vec<char_ptr> pass_tab = vNULL;\n \n /* Callback function for traversing NAME_TO_PASS_MAP.  */\n \n-int\n-passes_pass_traverse (pass_registry **p, void *data ATTRIBUTE_UNUSED)\n+bool\n+passes_pass_traverse (const char *const &name, opt_pass *const &pass, void *)\n {\n-  opt_pass *pass = (*p)->pass;\n-\n   gcc_assert (pass->static_pass_number > 0);\n   gcc_assert (pass_tab.exists ());\n \n-  pass_tab[pass->static_pass_number] = (*p)->unique_name;\n+  pass_tab[pass->static_pass_number] = name;\n \n   return 1;\n }\n@@ -864,15 +846,11 @@ pass_manager::dump_passes () const\n static opt_pass *\n get_pass_by_name (const char *name)\n {\n-  struct pass_registry **slot, pr;\n-\n-  pr.unique_name = name;\n-  slot = name_to_pass_map->find_slot (&pr, NO_INSERT);\n-\n-  if (!slot || !*slot)\n-    return NULL;\n+  opt_pass **p = name_to_pass_map->get (name);\n+  if (p)\n+    return *p;\n \n-  return (*slot)->pass;\n+  return NULL;\n }\n \n "}, {"sha": "735248c186b159786230e6bebe5e76daf0a1cdd5", "filename": "gcc/sese.c", "status": "modified", "additions": 17, "deletions": 72, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"hash-table.h\"\n+#include \"hash-map.h\"\n #include \"tree.h\"\n #include \"tree-pretty-print.h\"\n #include \"basic-block.h\"\n@@ -53,56 +53,37 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sese.h\"\n #include \"tree-ssa-propagate.h\"\n \n-/* Print to stderr the element ELT.  */\n+/* Helper function for debug_rename_map.  */\n \n-static void\n-debug_rename_elt (rename_map_elt elt)\n+bool\n+debug_rename_map_1 (tree_node *const &old_name, tree_node *const &expr,\n+\t\t    void *)\n {\n   fprintf (stderr, \"(\");\n-  print_generic_expr (stderr, elt->old_name, 0);\n+  print_generic_expr (stderr, old_name, 0);\n   fprintf (stderr, \", \");\n-  print_generic_expr (stderr, elt->expr, 0);\n+  print_generic_expr (stderr, expr, 0);\n   fprintf (stderr, \")\\n\");\n-}\n-\n-/* Helper function for debug_rename_map.  */\n-\n-int\n-debug_rename_map_1 (rename_map_elt_s **slot, void *s ATTRIBUTE_UNUSED)\n-{\n-  struct rename_map_elt_s *entry = *slot;\n-  debug_rename_elt (entry);\n-  return 1;\n+  return true;\n }\n \f\n \n /* Hashtable helpers.  */\n \n-struct rename_map_hasher : typed_free_remove <rename_map_elt_s>\n+struct rename_map_hasher : default_hashmap_traits\n {\n-  typedef rename_map_elt_s value_type;\n-  typedef rename_map_elt_s compare_type;\n-  static inline hashval_t hash (const value_type *);\n-  static inline bool equal (const value_type *, const compare_type *);\n+  static inline hashval_t hash (tree);\n };\n \n /* Computes a hash function for database element ELT.  */\n \n inline hashval_t\n-rename_map_hasher::hash (const value_type *elt)\n+rename_map_hasher::hash (tree old_name)\n {\n-  return SSA_NAME_VERSION (elt->old_name);\n+  return SSA_NAME_VERSION (old_name);\n }\n \n-/* Compares database elements E1 and E2.  */\n-\n-inline bool\n-rename_map_hasher::equal (const value_type *elt1, const compare_type *elt2)\n-{\n-  return (elt1->old_name == elt2->old_name);\n-}\n-\n-typedef hash_table<rename_map_hasher> rename_map_type;\n+typedef hash_map<tree, tree, rename_map_hasher> rename_map_type;\n \f\n \n /* Print to stderr all the elements of RENAME_MAP.  */\n@@ -112,26 +93,6 @@ debug_rename_map (rename_map_type *rename_map)\n {\n   rename_map->traverse <void *, debug_rename_map_1> (NULL);\n }\n-\n-/* Computes a hash function for database element ELT.  */\n-\n-hashval_t\n-rename_map_elt_info (const void *elt)\n-{\n-  return SSA_NAME_VERSION (((const struct rename_map_elt_s *) elt)->old_name);\n-}\n-\n-/* Compares database elements E1 and E2.  */\n-\n-int\n-eq_rename_map_elts (const void *e1, const void *e2)\n-{\n-  const struct rename_map_elt_s *elt1 = (const struct rename_map_elt_s *) e1;\n-  const struct rename_map_elt_s *elt2 = (const struct rename_map_elt_s *) e2;\n-\n-  return (elt1->old_name == elt2->old_name);\n-}\n-\n \f\n \n /* Record LOOP as occurring in REGION.  */\n@@ -418,15 +379,10 @@ get_false_edge_from_guard_bb (basic_block bb)\n static tree\n get_rename (rename_map_type *rename_map, tree old_name)\n {\n-  struct rename_map_elt_s tmp;\n-  rename_map_elt_s **slot;\n-\n   gcc_assert (TREE_CODE (old_name) == SSA_NAME);\n-  tmp.old_name = old_name;\n-  slot = rename_map->find_slot (&tmp, NO_INSERT);\n-\n-  if (slot && *slot)\n-    return (*slot)->expr;\n+  tree *expr = rename_map->get (old_name);\n+  if (expr)\n+    return *expr;\n \n   return NULL_TREE;\n }\n@@ -436,21 +392,10 @@ get_rename (rename_map_type *rename_map, tree old_name)\n static void\n set_rename (rename_map_type *rename_map, tree old_name, tree expr)\n {\n-  struct rename_map_elt_s tmp;\n-  rename_map_elt_s **slot;\n-\n   if (old_name == expr)\n     return;\n \n-  tmp.old_name = old_name;\n-  slot = rename_map->find_slot (&tmp, INSERT);\n-\n-  if (!slot)\n-    return;\n-\n-  free (*slot);\n-\n-  *slot = new_rename_map_elt (old_name, expr);\n+  rename_map->put (old_name, expr);\n }\n \n /* Renames the scalar uses of the statement COPY, using the"}, {"sha": "e2a6d455c9f88ddfdd2f52854cfbc154e699dc13", "filename": "gcc/sese.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98df77ce31d9b5986c0350c8c9d4e028fc0a49d/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=f98df77ce31d9b5986c0350c8c9d4e028fc0a49d", "patch": "@@ -249,31 +249,6 @@ if_region_get_condition_block (ifsese if_region)\n   return if_region_entry (if_region)->dest;\n }\n \n-/* Structure containing the mapping between the old names and the new\n-   names used after block copy in the new loop context.  */\n-typedef struct rename_map_elt_s\n-{\n-  tree old_name, expr;\n-} *rename_map_elt;\n-\n-\n-extern hashval_t rename_map_elt_info (const void *);\n-extern int eq_rename_map_elts (const void *, const void *);\n-\n-/* Constructs a new SCEV_INFO_STR structure for VAR and INSTANTIATED_BELOW.  */\n-\n-static inline rename_map_elt\n-new_rename_map_elt (tree old_name, tree expr)\n-{\n-  rename_map_elt res;\n-\n-  res = XNEW (struct rename_map_elt_s);\n-  res->old_name = old_name;\n-  res->expr = expr;\n-\n-  return res;\n-}\n-\n /* Free and compute again all the dominators information.  */\n \n static inline void"}]}