{"sha": "5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjZmJmODJhNDlkNTUyMmY0YzU1YzNmZWRkNzA3NTk2ODdiYmVhZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-01T13:57:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-01T13:57:05Z"}, "message": "PR libstdc++/60555 std::system_category() should recognise POSIX errno values\n\n\tPR libstdc++/60555\n\t* src/c++11/system_error.cc\n\t(system_error_category::default_error_condition): New override to\n\tcheck for POSIX errno values.\n\t* testsuite/19_diagnostics/error_category/generic_category.cc: New\n\t* testsuite/19_diagnostics/error_category/system_category.cc: New\n\ttest.\n\nFrom-SVN: r263210", "tree": {"sha": "5bea65a26b95389b3fb26d8d65caee7fc61999fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bea65a26b95389b3fb26d8d65caee7fc61999fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e335138daee76c6c2cd434cf00fe5dbf886d1261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e335138daee76c6c2cd434cf00fe5dbf886d1261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e335138daee76c6c2cd434cf00fe5dbf886d1261"}], "stats": {"total": 411, "additions": 411, "deletions": 0}, "files": [{"sha": "283babfe25c07e21c7aa6983bc479c0efc9b9621", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "patch": "@@ -1,3 +1,13 @@\n+2018-08-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60555\n+\t* src/c++11/system_error.cc\n+\t(system_error_category::default_error_condition): New override to\n+\tcheck for POSIX errno values.\n+\t* testsuite/19_diagnostics/error_category/generic_category.cc: New\n+\t* testsuite/19_diagnostics/error_category/system_category.cc: New\n+\ttest.\n+\n 2018-07-31  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/86751"}, {"sha": "82b4cb5f98c6dcec4bde227db2748b54f7f54f64", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "patch": "@@ -29,6 +29,7 @@\n #include <system_error>\n #include <bits/functexcept.h>\n #include <limits>\n+#include <errno.h>\n #undef __sso_string\n \n namespace\n@@ -65,6 +66,260 @@ namespace\n       // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)\n       return string(strerror(i));\n     }\n+\n+    virtual std::error_condition\n+    default_error_condition(int ev) const noexcept\n+    {\n+      switch (ev)\n+      {\n+      // List of errno macros from [cerrno.syn].\n+      // C11 only defines EDOM, EILSEQ and ERANGE, the rest are from POSIX.\n+      // They expand to integer constant expressions with type int,\n+      // and distinct positive values, suitable for use in #if directives.\n+      // POSIX adds more macros (but they're not defined on all targets,\n+      // see config/os/*/error_constants.h), and POSIX allows\n+      // EAGAIN == EWOULDBLOCK and ENOTSUP == EOPNOTSUPP.\n+\n+#ifdef E2BIG\n+      case E2BIG:\n+#endif\n+#ifdef EACCES\n+      case EACCES:\n+#endif\n+#ifdef EADDRINUSE\n+      case EADDRINUSE:\n+#endif\n+#ifdef EADDRNOTAVAIL\n+      case EADDRNOTAVAIL:\n+#endif\n+#ifdef EAFNOSUPPORT\n+      case EAFNOSUPPORT:\n+#endif\n+#ifdef EAGAIN\n+      case EAGAIN:\n+#endif\n+#ifdef EALREADY\n+      case EALREADY:\n+#endif\n+#ifdef EBADF\n+      case EBADF:\n+#endif\n+#ifdef EBADMSG\n+      case EBADMSG:\n+#endif\n+#ifdef EBUSY\n+      case EBUSY:\n+#endif\n+#ifdef ECANCELED\n+      case ECANCELED:\n+#endif\n+#ifdef ECHILD\n+      case ECHILD:\n+#endif\n+#ifdef ECONNABORTED\n+      case ECONNABORTED:\n+#endif\n+#ifdef ECONNREFUSED\n+      case ECONNREFUSED:\n+#endif\n+#ifdef ECONNRESET\n+      case ECONNRESET:\n+#endif\n+#ifdef EDEADLK\n+      case EDEADLK:\n+#endif\n+#ifdef EDESTADDRREQ\n+      case EDESTADDRREQ:\n+#endif\n+      case EDOM:\n+#ifdef EEXIST\n+      case EEXIST:\n+#endif\n+#ifdef EFAULT\n+      case EFAULT:\n+#endif\n+#ifdef EFBIG\n+      case EFBIG:\n+#endif\n+#ifdef EHOSTUNREACH\n+      case EHOSTUNREACH:\n+#endif\n+#ifdef EIDRM\n+      case EIDRM:\n+#endif\n+      case EILSEQ:\n+#ifdef EINPROGRESS\n+      case EINPROGRESS:\n+#endif\n+#ifdef EINTR\n+      case EINTR:\n+#endif\n+#ifdef EINVAL\n+      case EINVAL:\n+#endif\n+#ifdef EIO\n+      case EIO:\n+#endif\n+#ifdef EISCONN\n+      case EISCONN:\n+#endif\n+#ifdef EISDIR\n+      case EISDIR:\n+#endif\n+#ifdef ELOOP\n+      case ELOOP:\n+#endif\n+#ifdef EMFILE\n+      case EMFILE:\n+#endif\n+#ifdef EMLINK\n+      case EMLINK:\n+#endif\n+#ifdef EMSGSIZE\n+      case EMSGSIZE:\n+#endif\n+#ifdef ENAMETOOLONG\n+      case ENAMETOOLONG:\n+#endif\n+#ifdef ENETDOWN\n+      case ENETDOWN:\n+#endif\n+#ifdef ENETRESET\n+      case ENETRESET:\n+#endif\n+#ifdef ENETUNREACH\n+      case ENETUNREACH:\n+#endif\n+#ifdef ENFILE\n+      case ENFILE:\n+#endif\n+#ifdef ENOBUFS\n+      case ENOBUFS:\n+#endif\n+#ifdef ENODATA\n+      case ENODATA:\n+#endif\n+#ifdef ENODEV\n+      case ENODEV:\n+#endif\n+#ifdef ENOENT\n+      case ENOENT:\n+#endif\n+#ifdef ENOEXEC\n+      case ENOEXEC:\n+#endif\n+#ifdef ENOLCK\n+      case ENOLCK:\n+#endif\n+#ifdef ENOLINK\n+      case ENOLINK:\n+#endif\n+#ifdef ENOMEM\n+      case ENOMEM:\n+#endif\n+#ifdef ENOMSG\n+      case ENOMSG:\n+#endif\n+#ifdef ENOPROTOOPT\n+      case ENOPROTOOPT:\n+#endif\n+#ifdef ENOSPC\n+      case ENOSPC:\n+#endif\n+#ifdef ENOSR\n+      case ENOSR:\n+#endif\n+#ifdef ENOSTR\n+      case ENOSTR:\n+#endif\n+#ifdef ENOSYS\n+      case ENOSYS:\n+#endif\n+#ifdef ENOTCONN\n+      case ENOTCONN:\n+#endif\n+#ifdef ENOTDIR\n+      case ENOTDIR:\n+#endif\n+#ifdef ENOTEMPTY\n+      case ENOTEMPTY:\n+#endif\n+#ifdef ENOTRECOVERABLE\n+      case ENOTRECOVERABLE:\n+#endif\n+#ifdef ENOTSOCK\n+      case ENOTSOCK:\n+#endif\n+#ifdef ENOTSUP\n+      case ENOTSUP:\n+#endif\n+#ifdef ENOTTY\n+      case ENOTTY:\n+#endif\n+#ifdef ENXIO\n+      case ENXIO:\n+#endif\n+#if defined EOPNOTSUPP && (!defined ENOTSUP || EOPNOTSUPP != ENOTSUP)\n+      case EOPNOTSUPP:\n+#endif\n+#ifdef EOVERFLOW\n+      case EOVERFLOW:\n+#endif\n+#ifdef EOWNERDEAD\n+      case EOWNERDEAD:\n+#endif\n+#ifdef EPERM\n+      case EPERM:\n+#endif\n+#ifdef EPIPE\n+      case EPIPE:\n+#endif\n+#ifdef EPROTO\n+      case EPROTO:\n+#endif\n+#ifdef EPROTONOSUPPORT\n+      case EPROTONOSUPPORT:\n+#endif\n+#ifdef EPROTOTYPE\n+      case EPROTOTYPE:\n+#endif\n+      case ERANGE:\n+#ifdef EROFS\n+      case EROFS:\n+#endif\n+#ifdef ESPIPE\n+      case ESPIPE:\n+#endif\n+#ifdef ESRCH\n+      case ESRCH:\n+#endif\n+#ifdef ETIME\n+      case ETIME:\n+#endif\n+#ifdef ETIMEDOUT\n+      case ETIMEDOUT:\n+#endif\n+#ifdef ETXTBSY\n+      case ETXTBSY:\n+#endif\n+#if defined EWOULDBLOCK && (!defined EAGAIN || EWOULDBLOCK != EAGAIN)\n+      case EWOULDBLOCK:\n+#endif\n+#ifdef EXDEV\n+      case EXDEV:\n+#endif\n+        return std::error_condition(ev, std::generic_category());\n+\n+      /* Additional system-dependent mappings from non-standard error codes\n+       * to one of the POSIX values above would go here, e.g.\n+      case EBLAH:\n+\treturn std::error_condition(EINVAL, std::generic_category());\n+       */\n+\n+      default:\n+\treturn std::error_condition(ev, std::system_category());\n+      }\n+    }\n   };\n \n   const generic_error_category generic_category_instance{};"}, {"sha": "64881f44ca0393a3f10cd7231e6c042288e37429", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/generic_category.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fgeneric_category.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fgeneric_category.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fgeneric_category.cc?ref=5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <system_error>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const char* name = std::generic_category().name();\n+  VERIFY( name == std::string(\"generic\") );\n+}\n+\n+void\n+test02()\n+{\n+  const std::error_category& cat = std::generic_category();\n+  std::error_condition cond;\n+\n+  cond = cat.default_error_condition(EBADF);\n+  VERIFY( cond.value() == EBADF );\n+  VERIFY( cond == std::errc::bad_file_descriptor );\n+  VERIFY( cond.category() == std::generic_category() );\n+  cond = cat.default_error_condition(EACCES);\n+  VERIFY( cond.value() == EACCES );\n+  VERIFY( cond == std::errc::permission_denied );\n+  VERIFY( cond.category() == std::generic_category() );\n+\n+  // PR libstdc++/60555\n+  VERIFY( std::error_code(EBADF, cat) == std::errc::bad_file_descriptor );\n+  VERIFY( std::error_code(EACCES, cat) == std::errc::permission_denied );\n+}\n+\n+void\n+test03()\n+{\n+  // set \"C\" locale to get expected message\n+  auto loc = std::locale::global(std::locale::classic());\n+\n+  std::string msg = std::generic_category().message(EBADF);\n+  VERIFY( msg.find(\"file\") != std::string::npos );\n+\n+  std::locale::global(loc);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "6076d73551304972bcb0089a9535c5d2b7647d32", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/system_category.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ecfbf82a49d5522f4c55c3fedd70759687bbeaf/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fsystem_category.cc?ref=5ecfbf82a49d5522f4c55c3fedd70759687bbeaf", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <system_error>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const char* name = std::system_category().name();\n+  VERIFY( name == std::string(\"system\") );\n+}\n+\n+void\n+test02()\n+{\n+  const std::error_category& cat = std::system_category();\n+  std::error_condition cond;\n+\n+  cond = cat.default_error_condition(EBADF);\n+  VERIFY( cond.value() == EBADF );\n+  VERIFY( cond == std::errc::bad_file_descriptor );\n+  VERIFY( cond.category() == std::generic_category() );\n+  cond = cat.default_error_condition(EACCES);\n+  VERIFY( cond.value() == EACCES );\n+  VERIFY( cond == std::errc::permission_denied );\n+  VERIFY( cond.category() == std::generic_category() );\n+\n+  // All POSIX errno values are positive:\n+  cond = cat.default_error_condition(-1);\n+  VERIFY( cond.value() == -1 );\n+  VERIFY( cond.category() == cat );\n+  cond = cat.default_error_condition(-99);\n+  VERIFY( cond.value() == -99 );\n+  VERIFY( cond.category() == cat );\n+\n+  // PR libstdc++/60555\n+  VERIFY( std::error_code(EBADF, cat) == std::errc::bad_file_descriptor );\n+  VERIFY( std::error_code(EACCES, cat) == std::errc::permission_denied );\n+}\n+\n+void\n+test03()\n+{\n+  // set \"C\" locale to get expected message\n+  auto loc = std::locale::global(std::locale::classic());\n+\n+  std::string msg = std::system_category().message(EBADF);\n+  VERIFY( msg.find(\"file\") != std::string::npos );\n+\n+  std::locale::global(loc);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}