{"sha": "3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiYmJkMWU4NzRkM2RkNzRiYTU1MWI4ZmY3ZjFlZDA0MzIxYTNlZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:37:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:37:41Z"}, "message": "[multiple changes]\n\n2014-11-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.adb (To_Host_Entry): Guard against case of a\n\tnon-AF_INET entry.\n\n2014-11-20  Vadim Godunko  <godunko@adacore.com>\n\n\t* a-strunb-shared.adb (To_Unbounded_String): Use shared empty\n\tobject to construct return value when source string is empty or\n\trequested length is zero.\n\t* a-stwiun-shared.adb (To_Unbounded_Wide_String): Likewise.\n\t* a-stzunb-shared.adb (To_Unbounded_Wide_Wide_String): Likewise.\n\n2014-11-20  Yannick Moy  <moy@adacore.com>\n\n\t* a-cfhase.adb, a-cfinve.adb, a-cforma.adb, a-cfhama.adb, a-cforse.adb,\n\ta-cofove.adb: Skip CodePeer analysis on body of all formal containers.\n\n2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* adaint.c: Fix typo.\n\t* exp_util.adb (Make_Subtype_From_Expr): Complete previous change,\n\tgenerate constant values.\n\t* sem_eval.adb (Decompose_Expr): Fix latent bug leading to a wrong\n\tevaluation to '0' of some unknown values.\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* repinfo.adb (List_Record_Info): Do not list discriminant in\n\tunchecked union.\n\t* sem_ch13.adb (Has_Good_Profile): Minor reformatting\n\t(Analyze_Stream_TSS_Definition): Minor reformatting\n\t(Analyze_Record_Representation_Clause): Do not issue warning\n\tfor missing rep clause for discriminant in unchecked union.\n\nFrom-SVN: r217861", "tree": {"sha": "e1940f1eb67889bd6cf3127794232c03cc222533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1940f1eb67889bd6cf3127794232c03cc222533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/comments", "author": null, "committer": null, "parents": [{"sha": "f92d99c60b5001d88f09742eec97b4ddbeefb978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92d99c60b5001d88f09742eec97b4ddbeefb978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92d99c60b5001d88f09742eec97b4ddbeefb978"}], "stats": {"total": 270, "additions": 210, "deletions": 60}, "files": [{"sha": "5c3df6f8e46aef8ee8bfbf09596c71948dc3b978", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -1,3 +1,38 @@\n+2014-11-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.adb (To_Host_Entry): Guard against case of a\n+\tnon-AF_INET entry.\n+\n+2014-11-20  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* a-strunb-shared.adb (To_Unbounded_String): Use shared empty\n+\tobject to construct return value when source string is empty or\n+\trequested length is zero.\n+\t* a-stwiun-shared.adb (To_Unbounded_Wide_String): Likewise.\n+\t* a-stzunb-shared.adb (To_Unbounded_Wide_Wide_String): Likewise.\n+\n+2014-11-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-cfhase.adb, a-cfinve.adb, a-cforma.adb, a-cfhama.adb, a-cforse.adb,\n+\ta-cofove.adb: Skip CodePeer analysis on body of all formal containers.\n+\n+2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* adaint.c: Fix typo.\n+\t* exp_util.adb (Make_Subtype_From_Expr): Complete previous change,\n+\tgenerate constant values.\n+\t* sem_eval.adb (Decompose_Expr): Fix latent bug leading to a wrong\n+\tevaluation to '0' of some unknown values.\n+\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* repinfo.adb (List_Record_Info): Do not list discriminant in\n+\tunchecked union.\n+\t* sem_ch13.adb (Has_Good_Profile): Minor reformatting\n+\t(Analyze_Stream_TSS_Definition): Minor reformatting\n+\t(Analyze_Record_Representation_Clause): Do not issue warning\n+\tfor missing rep clause for discriminant in unchecked union.\n+\n 2014-11-20  Vadim Godunko  <godunko@adacore.com>\n \n \t* a-strunb-shared.adb, a-stwiun-shared.adb, a-stzunb-shared.adb"}, {"sha": "11dbc6fe66de338b9c45e501a9a555a4fb48df68", "filename": "gcc/ada/a-cfhama.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cfhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cfhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -38,6 +38,7 @@ with System; use type System.Address;\n package body Ada.Containers.Formal_Hashed_Maps with\n   SPARK_Mode => Off\n is\n+   pragma Annotate (CodePeer, Skip_Analysis);\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "8d73a2c385ca06be99244fd05d453c8e12d77880", "filename": "gcc/ada/a-cfhase.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cfhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cfhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhase.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -38,6 +38,7 @@ with System; use type System.Address;\n package body Ada.Containers.Formal_Hashed_Sets with\n   SPARK_Mode => Off\n is\n+   pragma Annotate (CodePeer, Skip_Analysis);\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "6574fcb43649e2f6fe3614e3338272d3702178ba", "filename": "gcc/ada/a-cfinve.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cfinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cfinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfinve.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -29,6 +29,7 @@\n package body Ada.Containers.Formal_Indefinite_Vectors with\n   SPARK_Mode => Off\n is\n+   pragma Annotate (CodePeer, Skip_Analysis);\n \n    function H (New_Item : Element_Type) return Holder renames To_Holder;\n    function E (Container : Holder) return Element_Type renames Get;"}, {"sha": "bd088bd46df445017dac5312452ec569ebaac779", "filename": "gcc/ada/a-cforma.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cforma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cforma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforma.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -37,6 +37,7 @@ with System; use type System.Address;\n package body Ada.Containers.Formal_Ordered_Maps with\n   SPARK_Mode => Off\n is\n+   pragma Annotate (CodePeer, Skip_Analysis);\n \n    -----------------------------\n    -- Node Access Subprograms --"}, {"sha": "e1203215cc9cdf782e6652b31eb56d7f6b5765e7", "filename": "gcc/ada/a-cforse.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cforse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cforse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforse.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -41,6 +41,7 @@ with System; use type System.Address;\n package body Ada.Containers.Formal_Ordered_Sets with\n   SPARK_Mode => Off\n is\n+   pragma Annotate (CodePeer, Skip_Analysis);\n \n    ------------------------------\n    -- Access to Fields of Node --"}, {"sha": "d9eb35639d0f77a8c597b81223778cff55002bf1", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -33,6 +33,7 @@ with System; use type System.Address;\n package body Ada.Containers.Formal_Vectors with\n   SPARK_Mode => Off\n is\n+   pragma Annotate (CodePeer, Skip_Analysis);\n \n    Growth_Factor : constant := 2;\n    --  When growing a container, multiply current capacity by this. Doubling"}, {"sha": "5cbe3602a5b11e3d22d5b4dfb1d84c47b8396c44", "filename": "gcc/ada/a-strunb-shared.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-strunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-strunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -1609,17 +1609,35 @@ package body Ada.Strings.Unbounded is\n    -------------------------\n \n    function To_Unbounded_String (Source : String) return Unbounded_String is\n-      DR : constant Shared_String_Access := Allocate (Source'Length);\n+      DR : Shared_String_Access;\n+\n    begin\n-      DR.Data (1 .. Source'Length) := Source;\n-      DR.Last := Source'Length;\n+      if Source'Length = 0 then\n+         Reference (Empty_Shared_String'Access);\n+         DR := Empty_Shared_String'Access;\n+\n+      else\n+         DR := Allocate (Source'Length);\n+         DR.Data (1 .. Source'Length) := Source;\n+         DR.Last := Source'Length;\n+      end if;\n+\n       return (AF.Controlled with Reference => DR);\n    end To_Unbounded_String;\n \n    function To_Unbounded_String (Length : Natural) return Unbounded_String is\n-      DR : constant Shared_String_Access := Allocate (Length);\n+      DR : Shared_String_Access;\n+\n    begin\n-      DR.Last := Length;\n+      if Length = 0 then\n+         Reference (Empty_Shared_String'Access);\n+         DR := Empty_Shared_String'Access;\n+\n+      else\n+         DR := Allocate (Length);\n+         DR.Last := Length;\n+      end if;\n+\n       return (AF.Controlled with Reference => DR);\n    end To_Unbounded_String;\n "}, {"sha": "34811b7b90bae0dee648f79f071f12c3ca74258f", "filename": "gcc/ada/a-stwiun-shared.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-stwiun-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-stwiun-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun-shared.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -1624,19 +1624,37 @@ package body Ada.Strings.Wide_Unbounded is\n    function To_Unbounded_Wide_String\n      (Source : Wide_String) return Unbounded_Wide_String\n    is\n-      DR : constant Shared_Wide_String_Access := Allocate (Source'Length);\n+      DR : Shared_Wide_String_Access;\n+\n    begin\n-      DR.Data (1 .. Source'Length) := Source;\n-      DR.Last := Source'Length;\n+      if Source'Length = 0 then\n+         Reference (Empty_Shared_Wide_String'Access);\n+         DR := Empty_Shared_Wide_String'Access;\n+\n+      else\n+         DR := Allocate (Source'Length);\n+         DR.Data (1 .. Source'Length) := Source;\n+         DR.Last := Source'Length;\n+      end if;\n+\n       return (AF.Controlled with Reference => DR);\n    end To_Unbounded_Wide_String;\n \n    function To_Unbounded_Wide_String\n      (Length : Natural) return Unbounded_Wide_String\n    is\n-      DR : constant Shared_Wide_String_Access := Allocate (Length);\n+      DR : Shared_Wide_String_Access;\n+\n    begin\n-      DR.Last := Length;\n+      if Length = 0 then\n+         Reference (Empty_Shared_Wide_String'Access);\n+         DR := Empty_Shared_Wide_String'Access;\n+\n+      else\n+         DR := Allocate (Length);\n+         DR.Last := Length;\n+      end if;\n+\n       return (AF.Controlled with Reference => DR);\n    end To_Unbounded_Wide_String;\n "}, {"sha": "bf2ed256334b02e4688f3fc853fe5d97a5d0cab0", "filename": "gcc/ada/a-stzunb-shared.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-stzunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fa-stzunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb-shared.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -1631,19 +1631,37 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n    function To_Unbounded_Wide_Wide_String\n      (Source : Wide_Wide_String) return Unbounded_Wide_Wide_String\n    is\n-      DR : constant Shared_Wide_Wide_String_Access := Allocate (Source'Length);\n+      DR : Shared_Wide_Wide_String_Access;\n+\n    begin\n-      DR.Data (1 .. Source'Length) := Source;\n-      DR.Last := Source'Length;\n+      if Source'Length = 0 then\n+         Reference (Empty_Shared_Wide_Wide_String'Access);\n+         DR := Empty_Shared_Wide_Wide_String'Access;\n+\n+      else\n+         DR := Allocate (Source'Length);\n+         DR.Data (1 .. Source'Length) := Source;\n+         DR.Last := Source'Length;\n+      end if;\n+\n       return (AF.Controlled with Reference => DR);\n    end To_Unbounded_Wide_Wide_String;\n \n    function To_Unbounded_Wide_Wide_String\n      (Length : Natural) return Unbounded_Wide_Wide_String\n    is\n-      DR : constant Shared_Wide_Wide_String_Access := Allocate (Length);\n+      DR : Shared_Wide_Wide_String_Access;\n+\n    begin\n-      DR.Last := Length;\n+      if Length = 0 then\n+         Reference (Empty_Shared_Wide_Wide_String'Access);\n+         DR := Empty_Shared_Wide_Wide_String'Access;\n+\n+      else\n+         DR := Allocate (Length);\n+         DR.Last := Length;\n+      end if;\n+\n       return (AF.Controlled with Reference => DR);\n    end To_Unbounded_Wide_Wide_String;\n "}, {"sha": "5df6f3d440ab632c584818331a96d9a223bfe7fd", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -2501,7 +2501,7 @@ win32_wait (int *status)\n   pidl = (int *) xmalloc (sizeof (int) * hl_len);\n   memmove (pidl, PID_LIST, sizeof (int) * hl_len);\n #else\n-  /* Note that index 0 contains the event hanlde that is signaled when the\n+  /* Note that index 0 contains the event handle that is signaled when the\n      process list has changed */\n   hl = (HANDLE *) xmalloc (sizeof (HANDLE) * hl_len + 1);\n   hl[0] = ProcListEvt;"}, {"sha": "86b46c60e72d98bc934f10487962515575775f9a", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -6473,18 +6473,16 @@ package body Exp_Util is\n             --    SS_Release;  --  Temp is gone at this point, bounds of S are\n             --                 --  non existent.\n \n-            --  The bounds are kept as variables rather than constants because\n-            --  this prevents spurious optimizations down the line.\n-\n             --  Generate:\n-            --    Low_Bound : Base_Type (Index_Typ) := E'First (J);\n+            --    Low_Bound : constant Base_Type (Index_Typ) := E'First (J);\n \n             Low_Bound := Make_Temporary (Loc, 'B');\n             Insert_Action (E,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Low_Bound,\n                 Object_Definition   =>\n                   New_Occurrence_Of (Base_Type (Etype (Index_Typ)), Loc),\n+                Constant_Present    => True,\n                 Expression          =>\n                   Make_Attribute_Reference (Loc,\n                     Prefix         => Duplicate_Subexpr_No_Checks (E),\n@@ -6493,14 +6491,15 @@ package body Exp_Util is\n                       Make_Integer_Literal (Loc, J)))));\n \n             --  Generate:\n-            --    High_Bound : Base_Type (Index_Typ) := E'Last (J);\n+            --    High_Bound : constant Base_Type (Index_Typ) := E'Last (J);\n \n             High_Bound := Make_Temporary (Loc, 'B');\n             Insert_Action (E,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => High_Bound,\n                 Object_Definition   =>\n                   New_Occurrence_Of (Base_Type (Etype (Index_Typ)), Loc),\n+                Constant_Present    => True,\n                 Expression          =>\n                   Make_Attribute_Reference (Loc,\n                     Prefix         => Duplicate_Subexpr_No_Checks (E),"}, {"sha": "3a10c9cb9290cfa0cf413b9c14df8d8c31ba9f45", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -976,11 +976,17 @@ package body GNAT.Sockets is\n          Raise_Host_Error (Integer (Err));\n       end if;\n \n-      return H : constant Host_Entry_Type :=\n-                   To_Host_Entry (Res'Unchecked_Access)\n-      do\n-         Netdb_Unlock;\n-      end return;\n+      begin\n+         return H : constant Host_Entry_Type :=\n+                      To_Host_Entry (Res'Unchecked_Access)\n+         do\n+            Netdb_Unlock;\n+         end return;\n+      exception\n+         when others =>\n+            Netdb_Unlock;\n+            raise;\n+      end;\n    end Get_Host_By_Address;\n \n    ----------------------\n@@ -2420,9 +2426,13 @@ package body GNAT.Sockets is\n       Aliases_Count, Addresses_Count : Natural;\n \n       --  H_Length is not used because it is currently only ever set to 4, as\n-      --  H_Addrtype is always AF_INET.\n+      --  we only handle the case of H_Addrtype being AF_INET.\n \n    begin\n+      if Hostent_H_Addrtype (E) /= SOSC.AF_INET then\n+         Raise_Socket_Error (SOSC.EPFNOSUPPORT);\n+      end if;\n+\n       Aliases_Count := 0;\n       while Hostent_H_Alias (E, C.int (Aliases_Count)) /= Null_Address loop\n          Aliases_Count := Aliases_Count + 1;"}, {"sha": "3915c30e7ed81c957665d589cc49e4cb2c55de2b", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -847,36 +847,48 @@ package body Repinfo is\n \n       Comp := First_Component_Or_Discriminant (Ent);\n       while Present (Comp) loop\n-         Get_Decoded_Name_String (Chars (Comp));\n-         Max_Name_Length := Natural'Max (Max_Name_Length, Name_Len);\n \n-         Cfbit := Component_Bit_Offset (Comp);\n+         --  Skip discriminant in unchecked union (since it is not there!)\n \n-         if Rep_Not_Constant (Cfbit) then\n-            UI_Image_Length := 2;\n+         if Ekind (Comp) = E_Discriminant\n+           and then Is_Unchecked_Union (Ent)\n+         then\n+            null;\n+\n+         --  All other cases\n \n          else\n-            --  Complete annotation in case not done\n+            Get_Decoded_Name_String (Chars (Comp));\n+            Max_Name_Length := Natural'Max (Max_Name_Length, Name_Len);\n \n-            Set_Normalized_Position (Comp, Cfbit / SSU);\n-            Set_Normalized_First_Bit (Comp, Cfbit mod SSU);\n+            Cfbit := Component_Bit_Offset (Comp);\n \n-            Sunit := Cfbit / SSU;\n-            UI_Image (Sunit);\n-         end if;\n+            if Rep_Not_Constant (Cfbit) then\n+               UI_Image_Length := 2;\n+\n+            else\n+               --  Complete annotation in case not done\n \n-         --  If the record is not packed, then we know that all fields whose\n-         --  position is not specified have a starting normalized bit position\n-         --  of zero.\n+               Set_Normalized_Position (Comp, Cfbit / SSU);\n+               Set_Normalized_First_Bit (Comp, Cfbit mod SSU);\n \n-         if Unknown_Normalized_First_Bit (Comp)\n-           and then not Is_Packed (Ent)\n-         then\n-            Set_Normalized_First_Bit (Comp, Uint_0);\n-         end if;\n+               Sunit := Cfbit / SSU;\n+               UI_Image (Sunit);\n+            end if;\n+\n+            --  If the record is not packed, then we know that all fields\n+            --  whose position is not specified have a starting normalized\n+            --  bit position of zero.\n \n-         Max_Suni_Length :=\n-           Natural'Max (Max_Suni_Length, UI_Image_Length);\n+            if Unknown_Normalized_First_Bit (Comp)\n+              and then not Is_Packed (Ent)\n+            then\n+               Set_Normalized_First_Bit (Comp, Uint_0);\n+            end if;\n+\n+            Max_Suni_Length :=\n+              Natural'Max (Max_Suni_Length, UI_Image_Length);\n+         end if;\n \n          Next_Component_Or_Discriminant (Comp);\n       end loop;\n@@ -885,6 +897,17 @@ package body Repinfo is\n \n       Comp := First_Component_Or_Discriminant (Ent);\n       while Present (Comp) loop\n+\n+         --  Skip discriminant in unchecked union (since it is not there!)\n+\n+         if Ekind (Comp) = E_Discriminant\n+           and then Is_Unchecked_Union (Ent)\n+         then\n+            goto Continue;\n+         end if;\n+\n+         --  All other cases\n+\n          declare\n             Esiz : constant Uint := Esize (Comp);\n             Bofs : constant Uint := Component_Bit_Offset (Comp);"}, {"sha": "a0dd0be46d3e0a444e3917f631c468878fa0a77a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -3555,7 +3555,7 @@ package body Sem_Ch13 is\n \n             if  Base_Type (Typ) = Base_Type (Ent)\n               or else (Is_Class_Wide_Type (Typ)\n-                and then Typ = Class_Wide_Type (Base_Type (Ent)))\n+                        and then Typ = Class_Wide_Type (Base_Type (Ent)))\n             then\n                null;\n             else\n@@ -3650,8 +3650,8 @@ package body Sem_Ch13 is\n                 (Ekind (Subp) = E_Function\n                   or else\n                     not Null_Present\n-                      (Specification\n-                         (Unit_Declaration_Node (Ultimate_Alias (Subp)))))\n+                          (Specification\n+                             (Unit_Declaration_Node (Ultimate_Alias (Subp)))))\n             then\n                Error_Msg_N\n                  (\"stream subprogram for interface type \"\n@@ -6600,6 +6600,12 @@ package body Sem_Ch13 is\n                                or else Size_Known_At_Compile_Time\n                                          (Underlying_Type (Etype (Comp))))\n                     and then not Has_Warnings_Off (Rectype)\n+\n+                    --  Ignore discriminant in unchecked union, since it is\n+                    --  not there, and cannot have a component clause.\n+\n+                    and then (not Is_Unchecked_Union (Rectype)\n+                               or else Ekind (Comp) /= E_Discriminant)\n                   then\n                      Error_Msg_Sloc := Sloc (Comp);\n                      Error_Msg_NE"}, {"sha": "5d8aa4f53be323950d997e9fd3345b1bf05a4e7a", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=3fbbbd1e874d3dd74ba551b8ff7f1ed04321a3ed", "patch": "@@ -3163,12 +3163,17 @@ package body Sem_Eval is\n                     (Expr : Node_Id;\n                      Ent  : out Entity_Id;\n                      Kind : out Character;\n-                     Cons : out Uint);\n+                     Cons : out Uint;\n+                     Orig : Boolean := True);\n                   --  Given an expression see if it is of the form given above,\n                   --  X [+/- K]. If so Ent is set to the entity in X, Kind is\n                   --  'F','L','E' for 'First/'Last/simple entity, and Cons is\n                   --  the value of K. If the expression is not of the required\n                   --  form, Ent is set to Empty.\n+                  --\n+                  --  Orig indicates whether Expr is the original expression\n+                  --  to consider, or if we are handling a sub-expression\n+                  --  (e.g. recursive call to Decompose_Expr).\n \n                   --------------------\n                   -- Decompose_Expr --\n@@ -3178,11 +3183,14 @@ package body Sem_Eval is\n                     (Expr : Node_Id;\n                      Ent  : out Entity_Id;\n                      Kind : out Character;\n-                     Cons : out Uint)\n+                     Cons : out Uint;\n+                     Orig : Boolean := True)\n                   is\n                      Exp : Node_Id;\n \n                   begin\n+                     Ent := Empty;\n+\n                      if Nkind (Expr) = N_Op_Add\n                        and then Compile_Time_Known_Value (Right_Opnd (Expr))\n                      then\n@@ -3206,18 +3214,29 @@ package body Sem_Eval is\n                          Nkind (Parent (Entity (Expr))) = N_Object_Declaration\n                      then\n                         Exp := Expression (Parent (Entity (Expr)));\n-                        Decompose_Expr (Exp, Ent, Kind, Cons);\n+                        Decompose_Expr (Exp, Ent, Kind, Cons, Orig => False);\n \n                         --  If original expression includes an entity, create a\n                         --  reference to it for use below.\n \n                         if Present (Ent) then\n                            Exp := New_Occurrence_Of (Ent, Sloc (Ent));\n+                        else\n+                           return;\n                         end if;\n \n                      else\n-                        Exp  := Expr;\n-                        Cons := Uint_0;\n+                        --  Only consider the case of X + 0 for a full\n+                        --  expression, and not when recursing, otherwise we\n+                        --  may end up with evaluating expressions not known\n+                        --  at compile time to 0.\n+\n+                        if Orig then\n+                           Exp  := Expr;\n+                           Cons := Uint_0;\n+                        else\n+                           return;\n+                        end if;\n                      end if;\n \n                      --  At this stage Exp is set to the potential X\n@@ -3228,7 +3247,6 @@ package body Sem_Eval is\n                         elsif Attribute_Name (Exp) = Name_Last then\n                            Kind := 'L';\n                         else\n-                           Ent := Empty;\n                            return;\n                         end if;\n \n@@ -3238,11 +3256,10 @@ package body Sem_Eval is\n                         Kind := 'E';\n                      end if;\n \n-                     if Is_Entity_Name (Exp) and then Present (Entity (Exp))\n+                     if Is_Entity_Name (Exp)\n+                       and then Present (Entity (Exp))\n                      then\n                         Ent := Entity (Exp);\n-                     else\n-                        Ent := Empty;\n                      end if;\n                   end Decompose_Expr;\n "}]}