{"sha": "c9d691e97774e863ea1b345b346f5d39ca88b645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkNjkxZTk3Nzc0ZTg2M2VhMWIzNDViMzQ2ZjVkMzljYTg4YjY0NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-03-30T18:53:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-03-30T18:53:35Z"}, "message": "final.c (final): Remove prescan parameter.\n\n\t* final.c (final): Remove prescan parameter.  Change all callers.\n\t(final_scan_insn): Remove prescan parameter.  Change all callers.\n\nFrom-SVN: r97267", "tree": {"sha": "3b522691d940af91a0cf18e8d3ba9548a7a79e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b522691d940af91a0cf18e8d3ba9548a7a79e9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d691e97774e863ea1b345b346f5d39ca88b645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d691e97774e863ea1b345b346f5d39ca88b645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d691e97774e863ea1b345b346f5d39ca88b645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d691e97774e863ea1b345b346f5d39ca88b645/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15f188a462410bcdc0f173479ba80c2c9bb5f4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f188a462410bcdc0f173479ba80c2c9bb5f4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f188a462410bcdc0f173479ba80c2c9bb5f4eb"}], "stats": {"total": 98, "additions": 32, "deletions": 66}, "files": [{"sha": "0e5dea3c816e3450988650c4339f112bd2897ef5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -1,3 +1,8 @@\n+2005-03-30  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* final.c (final): Remove prescan parameter.  Change all callers.\n+\t(final_scan_insn): Remove prescan parameter.  Change all callers.\n+\n 2005-03-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-vectorizer.c: Fix comment typos."}, {"sha": "75e4513b7f380b9aa859a412a7edfae2be7b0e44", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -7911,7 +7911,7 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   insn_locators_initialize ();\n   shorten_branches (insn);\n   final_start_function (insn, file, 1);\n-  final (insn, file, 1, 0);\n+  final (insn, file, 1);\n   final_end_function ();\n }\n #endif /* TARGET_ABI_OSF */"}, {"sha": "e18b348659d1484ca756014d5df520efa8b41fbd", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -8818,7 +8818,7 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   insn = get_insns ();\n   shorten_branches (insn);\n   final_start_function (insn, file, 1);\n-  final (insn, file, 1, 0);\n+  final (insn, file, 1);\n   final_end_function ();\n \n   reload_completed = 0;"}, {"sha": "30b14c54ba63e6e856003a3daf4067cef816672f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -6719,7 +6719,7 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n     mips16_lay_out_constants ();\n   shorten_branches (insn);\n   final_start_function (insn, file, 1);\n-  final (insn, file, 1, 0);\n+  final (insn, file, 1);\n   final_end_function ();\n \n   /* Clean up the vars set above.  Note that final_end_function resets\n@@ -8983,7 +8983,7 @@ mips_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n             /* Output delay slot instruction.  */\n             rtx insn = final_sequence;\n             final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file,\n-                             optimize, 0, 1, NULL);\n+                             optimize, 1, NULL);\n             INSN_DELETED_P (XVECEXP (insn, 0, 1)) = 1;\n           }\n \telse\n@@ -9002,7 +9002,7 @@ mips_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n             /* Output delay slot instruction.  */\n             rtx insn = final_sequence;\n             final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file,\n-                             optimize, 0, 1, NULL);\n+                             optimize, 1, NULL);\n             INSN_DELETED_P (XVECEXP (insn, 0, 1)) = 1;\n           }\n \telse"}, {"sha": "ad6594fded6c99eb5b19e2c8a774d52a9e756f90", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -6044,7 +6044,7 @@ output_lbranch (rtx dest, rtx insn)\n \tabort ();\n \n       final_scan_insn (NEXT_INSN (insn), asm_out_file,\n-\t\t       optimize, 0, 0, NULL);\n+\t\t       optimize, 0, NULL);\n \n       /* Now delete the delay insn.  */\n       PUT_CODE (NEXT_INSN (insn), NOTE);\n@@ -7048,7 +7048,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t      && !sibcall)\n \t    {\n \t      final_scan_insn (NEXT_INSN (insn), asm_out_file,\n-\t\t\t       optimize, 0, 0, NULL);\n+\t\t\t       optimize, 0, NULL);\n \n \t      /* Now delete the delay insn.  */\n \t      PUT_CODE (NEXT_INSN (insn), NOTE);\n@@ -7096,7 +7096,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t      /* A non-jump insn in the delay slot.  By definition we can\n \t\t emit this insn before the call (and in fact before argument\n \t\t relocating.  */\n-\t      final_scan_insn (NEXT_INSN (insn), asm_out_file, optimize, 0, 0,\n+\t      final_scan_insn (NEXT_INSN (insn), asm_out_file, optimize, 0,\n \t\t\t       NULL);\n \n \t      /* Now delete the delay insn.  */"}, {"sha": "ffb2167c8e1002db4bb414978545f11b76485c25", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -13210,7 +13210,7 @@ rs6000_output_function_prologue (FILE *file,\n \n       if (TARGET_DEBUG_STACK)\n \tdebug_rtx_list (get_insns (), 100);\n-      final (get_insns (), file, FALSE, FALSE);\n+      final (get_insns (), file, FALSE);\n       end_sequence ();\n     }\n \n@@ -13740,7 +13740,7 @@ rs6000_output_function_epilogue (FILE *file,\n \n \t  if (TARGET_DEBUG_STACK)\n \t    debug_rtx_list (get_insns (), 100);\n-\t  final (get_insns (), file, FALSE, FALSE);\n+\t  final (get_insns (), file, FALSE);\n \t  end_sequence ();\n \t}\n     }\n@@ -14110,7 +14110,7 @@ rs6000_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   insn_locators_initialize ();\n   shorten_branches (insn);\n   final_start_function (insn, file, 1);\n-  final (insn, file, 1, 0);\n+  final (insn, file, 1);\n   final_end_function ();\n \n   reload_completed = 0;"}, {"sha": "8991c8e6561f9d9550689504e1ba9113f0e86a85", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -1278,7 +1278,7 @@ output_movedouble (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n static void\n print_slot (rtx insn)\n {\n-  final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file, optimize, 0, 1, NULL);\n+  final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file, optimize, 1, NULL);\n \n   INSN_DELETED_P (XVECEXP (insn, 0, 1)) = 1;\n }\n@@ -9869,7 +9869,7 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n     dbr_schedule (insns, dump_file);\n   shorten_branches (insns);\n   final_start_function (insns, file, 1);\n-  final (insns, file, 1, 0);\n+  final (insns, file, 1);\n   final_end_function ();\n \n   if (optimize > 0 && flag_schedule_insns_after_reload)"}, {"sha": "3827d7b1cf8762e5cfb3648eaca522ca73396111", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -9115,7 +9115,7 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   insn_locators_initialize ();\n   shorten_branches (insn);\n   final_start_function (insn, file, 1);\n-  final (insn, file, 1, 0);\n+  final (insn, file, 1);\n   final_end_function ();\n \n   reload_completed = 0;"}, {"sha": "7f5c664fd20f6808d85c181b1e979ca5675d2a5c", "filename": "gcc/final.c", "status": "modified", "additions": 10, "deletions": 49, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -1491,18 +1491,10 @@ final_end_function (void)\n }\n \f\n /* Output assembler code for some insns: all or part of a function.\n-   For description of args, see `final_start_function', above.\n-\n-   PRESCAN is 1 if we are not really outputting,\n-     just scanning as if we were outputting.\n-   Prescanning deletes and rearranges insns just like ordinary output.\n-   PRESCAN is -2 if we are outputting after having prescanned.\n-   In this case, don't try to delete or rearrange insns\n-   because that has already been done.\n-   Prescanning is done only on certain machines.  */\n+   For description of args, see `final_start_function', above.  */\n \n void\n-final (rtx first, FILE *file, int optimize, int prescan)\n+final (rtx first, FILE *file, int optimize)\n {\n   rtx insn;\n   int max_uid = 0;\n@@ -1574,7 +1566,7 @@ final (rtx first, FILE *file, int optimize, int prescan)\n \tinsn_current_address = INSN_ADDRESSES (INSN_UID (insn));\n #endif /* HAVE_ATTR_length */\n \n-      insn = final_scan_insn (insn, file, optimize, prescan, 0, &seen);\n+      insn = final_scan_insn (insn, file, optimize, 0, &seen);\n     }\n }\n \f\n@@ -1672,8 +1664,7 @@ scan_ahead_for_unlikely_executed_note (rtx insn)\n \n rtx\n final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n-\t\t int prescan, int nopeepholes ATTRIBUTE_UNUSED,\n-\t\t int *seen)\n+\t\t int nopeepholes ATTRIBUTE_UNUSED, int *seen)\n {\n #ifdef HAVE_cc0\n   rtx set;\n@@ -1690,9 +1681,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n   switch (GET_CODE (insn))\n     {\n     case NOTE:\n-      if (prescan > 0)\n-\tbreak;\n-\n       switch (NOTE_LINE_NUMBER (insn))\n \t{\n \tcase NOTE_INSN_DELETED:\n@@ -1904,8 +1892,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    }\n \t}\n #endif\n-      if (prescan > 0)\n-\tbreak;\n \n       if (LABEL_NAME (insn))\n \t(*debug_hooks->label) (insn);\n@@ -2022,9 +2008,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    int vlen, idx;\n #endif\n \n-\t    if (prescan > 0)\n-\t      break;\n-\n \t    if (! JUMP_TABLES_IN_TEXT_SECTION)\n \t      targetm.asm_out.function_rodata_section (current_function_decl);\n \t    else\n@@ -2103,8 +2086,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \t    /* There's no telling what that did to the condition codes.  */\n \t    CC_STATUS_INIT;\n-\t    if (prescan > 0)\n-\t      break;\n \n \t    if (string[0])\n \t      {\n@@ -2127,8 +2108,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \t    /* There's no telling what that did to the condition codes.  */\n \t    CC_STATUS_INIT;\n-\t    if (prescan > 0)\n-\t      break;\n \n \t    /* Get out the operand values.  */\n \t    string = decode_asm_operands (body, ops, NULL, NULL, NULL);\n@@ -2155,7 +2134,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    break;\n \t  }\n \n-\tif (prescan <= 0 && app_on)\n+\tif (app_on)\n \t  {\n \t    fputs (ASM_APP_OFF, file);\n \t    app_on = 0;\n@@ -2166,8 +2145,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    /* A delayed-branch sequence */\n \t    int i;\n \n-\t    if (prescan > 0)\n-\t      break;\n \t    final_sequence = body;\n \n \t    /* Record the delay slots' frame information before the branch.\n@@ -2183,7 +2160,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t       thought unnecessary.  If that happens, cancel this sequence\n \t       and cause that insn to be restored.  */\n \n-\t    next = final_scan_insn (XVECEXP (body, 0, 0), file, 0, prescan, 1, seen);\n+\t    next = final_scan_insn (XVECEXP (body, 0, 0), file, 0, 1, seen);\n \t    if (next != XVECEXP (body, 0, 1))\n \t      {\n \t\tfinal_sequence = 0;\n@@ -2197,7 +2174,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t/* We loop in case any instruction in a delay slot gets\n \t\t   split.  */\n \t\tdo\n-\t\t  insn = final_scan_insn (insn, file, 0, prescan, 1, seen);\n+\t\t  insn = final_scan_insn (insn, file, 0, 1, seen);\n \t\twhile (insn != next);\n \t      }\n #ifdef DBR_OUTPUT_SEQEND\n@@ -2280,10 +2257,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    && SET_DEST (body) == pc_rtx\n \t    && GET_CODE (SET_SRC (body)) == IF_THEN_ELSE\n \t    && COMPARISON_P (XEXP (SET_SRC (body), 0))\n-\t    && XEXP (XEXP (SET_SRC (body), 0), 0) == cc0_rtx\n-\t    /* This is done during prescan; it is not done again\n-\t       in final scan when prescan has been done.  */\n-\t    && prescan >= 0)\n+\t    && XEXP (XEXP (SET_SRC (body), 0), 0) == cc0_rtx)\n \t  {\n \t    /* This function may alter the contents of its argument\n \t       and clear some of the cc_status.flags bits.\n@@ -2383,21 +2357,11 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t       emit them before the peephole.  */\n \t    if (next != 0 && next != NEXT_INSN (insn))\n \t      {\n-\t\trtx note, prev = PREV_INSN (insn);\n+\t\trtx note;\n \n \t\tfor (note = NEXT_INSN (insn); note != next;\n \t\t     note = NEXT_INSN (note))\n-\t\t  final_scan_insn (note, file, optimize, prescan, nopeepholes, seen);\n-\n-\t\t/* In case this is prescan, put the notes\n-\t\t   in proper position for later rescan.  */\n-\t\tnote = NEXT_INSN (insn);\n-\t\tPREV_INSN (note) = prev;\n-\t\tNEXT_INSN (prev) = note;\n-\t\tNEXT_INSN (PREV_INSN (next)) = insn;\n-\t\tPREV_INSN (insn) = PREV_INSN (next);\n-\t\tNEXT_INSN (insn) = next;\n-\t\tPREV_INSN (next) = insn;\n+\t\t  final_scan_insn (note, file, optimize, nopeepholes, seen);\n \t      }\n \n \t    /* PEEPHOLE might have changed this.  */\n@@ -2503,9 +2467,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    return new;\n \t  }\n \n-\tif (prescan > 0)\n-\t  break;\n-\n #ifdef TARGET_UNWIND_INFO\n \t/* ??? This will put the directives in the wrong place if\n \t   get_insn_template outputs assembly directly.  However calling it"}, {"sha": "dbc2d4745ddfae5fe61f5c50a41f310d927edb4a", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -66,12 +66,12 @@ extern void final_start_function (rtx, FILE *, int);\n extern void final_end_function (void);\n \n /* Output assembler code for some insns: all or part of a function.  */\n-extern void final (rtx, FILE *, int, int);\n+extern void final (rtx, FILE *, int);\n \n /* The final scan for one insn, INSN.  Args are same as in `final', except\n    that INSN is the insn being scanned.  Value returned is the next insn to\n    be scanned.  */\n-extern rtx final_scan_insn (rtx, FILE *, int, int, int, int *);\n+extern rtx final_scan_insn (rtx, FILE *, int, int, int *);\n \n /* Replace a SUBREG with a REG or a MEM, based on the thing it is a\n    subreg of.  */"}, {"sha": "17e42c4e1d7156502fd55684e03092aacf4cf692", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d691e97774e863ea1b345b346f5d39ca88b645/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=c9d691e97774e863ea1b345b346f5d39ca88b645", "patch": "@@ -294,7 +294,7 @@ rest_of_handle_final (void)\n \n     assemble_start_function (current_function_decl, fnname);\n     final_start_function (get_insns (), asm_out_file, optimize);\n-    final (get_insns (), asm_out_file, optimize, 0);\n+    final (get_insns (), asm_out_file, optimize);\n     final_end_function ();\n \n #ifdef TARGET_UNWIND_INFO"}]}