{"sha": "867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY3YmE0YjlmZjNkZWM3NzVjODJiN2MzMmRlNWYzYmYyYjQ4OTU4Ng==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2017-07-26T12:39:43Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2017-07-26T12:39:43Z"}, "message": "[SPARC] Add -mfsmuld option\n\nAdd the -mfsmuld option to control the generation of the FsMULd\ninstruction.  In general, this instruction is available in architecture\nversion V8 and V9 CPUs with FPU.  Some CPUs of this category do not\nsupport this instruction properly, e.g. AT697E, AT697F and UT699.  Some\nCPUs of this category do not implement it in hardware, e.g. LEON3/4 with\nGRFPU-lite.\n\ngcc/\n\t* config/sparc/sparc.c (dump_target_flag_bits): Dump MASK_FSMULD.\n\t(sparc_option_override): Honour MASK_FSMULD.\n\t* config/sparc/sparc.h (MASK_FEATURES): Add MASK_FSMULD.\n\t* config/sparc/sparc.md (muldf3_extend): Use TARGET_FSMULD.\n\t* config/sparc/sparc.opt (mfsmuld): New option.\n\t* doc/invoke.texi (mfsmuld): Document option.\n\nFrom-SVN: r250570", "tree": {"sha": "ed2a39d2eb4282c114a5687534239915a0235db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed2a39d2eb4282c114a5687534239915a0235db8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "404f48ac88c024c661ed40dba8ab0c4555ead2e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404f48ac88c024c661ed40dba8ab0c4555ead2e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404f48ac88c024c661ed40dba8ab0c4555ead2e7"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "f2697b12b60d3abaca8e5fdef2aa177bc641e41b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "patch": "@@ -1,3 +1,12 @@\n+2017-07-26  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/sparc/sparc.c (dump_target_flag_bits): Dump MASK_FSMULD.\n+\t(sparc_option_override): Honour MASK_FSMULD.\n+\t* config/sparc/sparc.h (MASK_FEATURES): Add MASK_FSMULD.\n+\t* config/sparc/sparc.md (muldf3_extend): Use TARGET_FSMULD.\n+\t* config/sparc/sparc.opt (mfsmuld): New option.\n+\t* doc/invoke.texi (mfsmuld): Document option.\n+\n 2017-07-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/70992"}, {"sha": "4a783d5f111d004f27b4e054657735e8ac6da406", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "patch": "@@ -1304,6 +1304,8 @@ dump_target_flag_bits (const int flags)\n     fprintf (stderr, \"FLAT \");\n   if (flags & MASK_FMAF)\n     fprintf (stderr, \"FMAF \");\n+  if (flags & MASK_FSMULD)\n+    fprintf (stderr, \"FSMULD \");\n   if (flags & MASK_FPU)\n     fprintf (stderr, \"FPU \");\n   if (flags & MASK_HARD_QUAD)\n@@ -1403,24 +1405,24 @@ sparc_option_override (void)\n     const int disable;\n     const int enable;\n   } const cpu_table[] = {\n-    { \"v7\",\t\tMASK_ISA, 0 },\n-    { \"cypress\",\tMASK_ISA, 0 },\n+    { \"v7\",\t\tMASK_ISA|MASK_FSMULD, 0 },\n+    { \"cypress\",\tMASK_ISA|MASK_FSMULD, 0 },\n     { \"v8\",\t\tMASK_ISA, MASK_V8 },\n     /* TI TMS390Z55 supersparc */\n     { \"supersparc\",\tMASK_ISA, MASK_V8 },\n     { \"hypersparc\",\tMASK_ISA, MASK_V8 },\n-    { \"leon\",\t\tMASK_ISA, MASK_V8|MASK_LEON },\n+    { \"leon\",\t\tMASK_ISA|MASK_FSMULD, MASK_V8|MASK_LEON },\n     { \"leon3\",\t\tMASK_ISA, MASK_V8|MASK_LEON3 },\n-    { \"leon3v7\",\tMASK_ISA, MASK_LEON3 },\n-    { \"sparclite\",\tMASK_ISA, MASK_SPARCLITE },\n+    { \"leon3v7\",\tMASK_ISA|MASK_FSMULD, MASK_LEON3 },\n+    { \"sparclite\",\tMASK_ISA|MASK_FSMULD, MASK_SPARCLITE },\n     /* The Fujitsu MB86930 is the original sparclite chip, with no FPU.  */\n     { \"f930\",\t\tMASK_ISA|MASK_FPU, MASK_SPARCLITE },\n     /* The Fujitsu MB86934 is the recent sparclite chip, with an FPU.  */\n-    { \"f934\",\t\tMASK_ISA, MASK_SPARCLITE },\n+    { \"f934\",\t\tMASK_ISA|MASK_FSMULD, MASK_SPARCLITE },\n     { \"sparclite86x\",\tMASK_ISA|MASK_FPU, MASK_SPARCLITE },\n-    { \"sparclet\",\tMASK_ISA, MASK_SPARCLET },\n+    { \"sparclet\",\tMASK_ISA|MASK_FSMULD, MASK_SPARCLET },\n     /* TEMIC sparclet */\n-    { \"tsc701\",\t\tMASK_ISA, MASK_SPARCLET },\n+    { \"tsc701\",\t\tMASK_ISA|MASK_FSMULD, MASK_SPARCLET },\n     { \"v9\",\t\tMASK_ISA, MASK_V9 },\n     /* UltraSPARC I, II, IIi */\n     { \"ultrasparc\",\tMASK_ISA,\n@@ -1511,6 +1513,12 @@ sparc_option_override (void)\n       target_flags |= MASK_LONG_DOUBLE_128;\n     }\n \n+  /* Enable the FsMULd instruction by default if not explicitly configured by\n+     the user.  It may be later disabled by the CPU target flags or if\n+     !TARGET_FPU.  */\n+  if (!(target_flags_explicit & MASK_FSMULD))\n+    target_flags |= MASK_FSMULD;\n+\n   /* Code model selection.  */\n   sparc_cmodel = SPARC_DEFAULT_CMODEL;\n \n@@ -1603,11 +1611,11 @@ sparc_option_override (void)\n   if (TARGET_VIS4B)\n     target_flags |= MASK_VIS4 | MASK_VIS3 | MASK_VIS2 | MASK_VIS;\n \n-  /* Don't allow -mvis, -mvis2, -mvis3, -mvis4, -mvis4b and -mfmaf if\n+  /* Don't allow -mvis, -mvis2, -mvis3, -mvis4, -mvis4b, -mfmaf and -mfsmuld if\n      FPU is disabled.  */\n   if (! TARGET_FPU)\n     target_flags &= ~(MASK_VIS | MASK_VIS2 | MASK_VIS3 | MASK_VIS4\n-\t\t      | MASK_VIS4B | MASK_FMAF);\n+\t\t      | MASK_VIS4B | MASK_FMAF | MASK_FSMULD);\n \n   /* -mvis assumes UltraSPARC+, so we are sure v9 instructions\n      are available; -m64 also implies v9.  */\n@@ -1641,6 +1649,10 @@ sparc_option_override (void)\n   if (sparc_fix_ut699 || sparc_fix_ut700 || sparc_fix_gr712rc)\n     sparc_fix_b2bst = 1;\n \n+  /* Disable FsMULd for the UT699 since it doesn't work correctly.  */\n+  if (sparc_fix_ut699)\n+    target_flags &= ~MASK_FSMULD;\n+\n   /* Supply a default value for align_functions.  */\n   if (align_functions == 0)\n     {"}, {"sha": "15a62179af57591c7197c68822f9aa31ca38a3ea", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "patch": "@@ -438,7 +438,8 @@ extern enum cmodel sparc_cmodel;\n /* Mask of all CPU feature flags.  */\n #define MASK_FEATURES\t\t\t\t\t\t\\\n   (MASK_FPU + MASK_HARD_QUAD + MASK_VIS + MASK_VIS2 + MASK_VIS3\t\\\n-   + MASK_VIS4 + MASK_CBCOND + MASK_FMAF + MASK_POPC + MASK_SUBXC)\n+   + MASK_VIS4 + MASK_CBCOND + MASK_FMAF + MASK_FSMULD\t\t\\\n+   + MASK_POPC + MASK_SUBXC)\n  \n /* TARGET_HARD_MUL: Use 32-bit hardware multiply instructions but not %y.  */\n #define TARGET_HARD_MUL\t\t\t\t\\"}, {"sha": "751bacdbcac8fdb0425ed0a25e8277ac098eba82", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "patch": "@@ -6121,7 +6121,7 @@ visl\")\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(mult:DF (float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\"))\n \t\t (float_extend:DF (match_operand:SF 2 \"register_operand\" \"f\"))))]\n-  \"(TARGET_V8 || TARGET_V9) && TARGET_FPU && !sparc_fix_ut699\"\n+  \"TARGET_FSMULD\"\n   \"fsmuld\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])"}, {"sha": "22267f50e906aa0877f9a07bab62d2fdc9469aa3", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "patch": "@@ -93,6 +93,10 @@ mfmaf\n Target Report Mask(FMAF)\n Use UltraSPARC Fused Multiply-Add extensions.\n \n+mfsmuld\n+Target Report Mask(FSMULD)\n+Use Floating-point Multiply Single to Double (FsMULd) instruction.\n+\n mpopc\n Target Report Mask(POPC)\n Use UltraSPARC Population-Count instruction."}, {"sha": "6e174c5b3ffb3c144cd1c103467580e21a338e27", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867ba4b9ff3dec775c82b7c32de5f3bf2b489586/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=867ba4b9ff3dec775c82b7c32de5f3bf2b489586", "patch": "@@ -1124,7 +1124,7 @@ See RS/6000 and PowerPC Options.\n -mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n -mvis2  -mno-vis2  -mvis3  -mno-vis3 @gol\n -mvis4 -mno-vis4 -mvis4b -mno-vis4b @gol\n--mcbcond  -mno-cbcond  -mfmaf  -mno-fmaf  @gol\n+-mcbcond  -mno-cbcond  -mfmaf  -mno-fmaf  -mfsmuld  -mno-fsmuld  @gol\n -mpopc  -mno-popc  -msubxc  -mno-subxc @gol\n -mfix-at697f  -mfix-ut699  -mfix-ut700  -mfix-gr712rc @gol\n -mlra  -mno-lra}\n@@ -24069,6 +24069,15 @@ Fused Multiply-Add Floating-point instructions.  The default is @option{-mfmaf}\n when targeting a CPU that supports such instructions, such as Niagara-3 and\n later.\n \n+@item -mfsmuld\n+@itemx -mno-fsmuld\n+@opindex mfsmuld\n+@opindex mno-fsmuld\n+With @option{-mfsmuld}, GCC generates code that takes advantage of the\n+Floating-point Multiply Single to Double (FsMULd) instruction.  The default is\n+@option{-mfsmuld} when targeting a CPU supporting the architecture versions V8\n+or V9 with FPU except @option{-mcpu=leon}.\n+\n @item -mpopc\n @itemx -mno-popc\n @opindex mpopc"}]}