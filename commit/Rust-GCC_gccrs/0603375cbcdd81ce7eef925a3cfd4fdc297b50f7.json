{"sha": "0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYwMzM3NWNiY2RkODFjZTdlZWY5MjVhM2NmZDRmZGMyOTdiNTBmNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-04-24T16:58:49Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-04-24T16:58:49Z"}, "message": "[AArch64] PR target/85512: Tighten SIMD right shift immediate constraints\n\nIn this testcase it is possible to generate an invalid SISD shift of zero:\nError: immediate value out of range 1 to 64 at operand 3 -- `sshr v9.2s,v0.2s,0'\n\nThe SSHR and USHR instructions require a shift from 1 up to the element size.\nHowever our constraints on the scalar shifts that generate these patterns\nallow a shift amount of zero as well. The pure GP-reg ASR and LSR instructions allow a shift amount of zero.\n\nIt is unlikely that a shift of zero will survive till the end of compilation, but it's not impossible, as this PR shows.\n\nThe patch tightens up the constraints in the offending patterns by adding two new constraints\nthat allow shift amounts [1,32] and [1,64] and using them in *aarch64_ashr_sisd_or_int_<mode>3\nand *aarch64_lshr_sisd_or_int_<mode>3.\nThe left-shift SISD instructions SHL and USHL allow a shift amount of zero so don't need adjustment\nThe vector shift patterns that map down to SSHR and USHR already enforce the correct immediate range. \n\n        PR target/85512\n        * config/aarch64/constraints.md (Usg, Usj): New constraints.\n        * config/aarch64/iterators.md (cmode_simd): New mode attribute.\n        * config/aarch64/aarch64.md (*aarch64_ashr_sisd_or_int_<mode>3):\n        Use the above on operand 2.  Reindent.\n        (*aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n\n        * gcc.dg/pr85512.c: New test.\n\nFrom-SVN: r259614", "tree": {"sha": "6efdf7eb10c68bdb0b5edc6994afc1c791497a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6efdf7eb10c68bdb0b5edc6994afc1c791497a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "231baae28ef7ff784683fa5a80df119da2b9a99b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231baae28ef7ff784683fa5a80df119da2b9a99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231baae28ef7ff784683fa5a80df119da2b9a99b"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "1837b2621898056bb63642b896886fd33850455b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "patch": "@@ -1,3 +1,12 @@\n+2018-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/85512\n+\t* config/aarch64/constraints.md (Usg, Usj): New constraints.\n+\t* config/aarch64/iterators.md (cmode_simd): New mode attribute.\n+\t* config/aarch64/aarch64.md (*aarch64_ashr_sisd_or_int_<mode>3):\n+\tUse the above on operand 2.  Reindent.\n+\t(*aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n+\n 2018-04-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/85485"}, {"sha": "32a0e1f3685746b9a7d70239745586d0f0fa7ee1", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "patch": "@@ -4403,7 +4403,8 @@\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w,&w,&w\")\n \t(lshiftrt:GPI\n \t (match_operand:GPI 1 \"register_operand\" \"r,r,w,w,w\")\n-\t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,r,Us<cmode>,w,0\")))]\n+\t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\"\n+\t\t\t      \"Us<cmode>,r,Us<cmode_simd>,w,0\")))]\n   \"\"\n   \"@\n    lsr\\t%<w>0, %<w>1, %2\n@@ -4448,9 +4449,10 @@\n ;; Arithmetic right shift using SISD or Integer instruction\n (define_insn \"*aarch64_ashr_sisd_or_int_<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,w,&w,&w\")\n-        (ashiftrt:GPI\n-          (match_operand:GPI 1 \"register_operand\" \"r,r,w,w,w\")\n-          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"Us<cmode>,r,Us<cmode>,w,0\")))]\n+\t(ashiftrt:GPI\n+\t  (match_operand:GPI 1 \"register_operand\" \"r,r,w,w,w\")\n+\t  (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\"\n+\t\t\t       \"Us<cmode>,r,Us<cmode_simd>,w,0\")))]\n   \"\"\n   \"@\n    asr\\t%<w>0, %<w>1, %2"}, {"sha": "b5da997e7bab1541ed1401a94a3b94a0cde8017f", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "patch": "@@ -153,6 +153,20 @@\n        (match_test \"!(aarch64_is_noplt_call_p (op)\n \t\t      || aarch64_is_long_call_p (op))\")))\n \n+(define_constraint \"Usg\"\n+  \"@internal\n+  A constraint that matches an immediate right shift constant in SImode\n+  suitable for a SISD instruction.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 1, 32)\")))\n+\n+(define_constraint \"Usj\"\n+  \"@internal\n+  A constraint that matches an immediate right shift constant in DImode\n+  suitable for a SISD instruction.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 1, 64)\")))\n+\n (define_constraint \"UsM\"\n   \"@internal\n   A constraint that matches the immediate constant -1.\""}, {"sha": "25991d97836498f48ca30b8757ed7963217da417", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "patch": "@@ -589,6 +589,9 @@\n ;; Map a mode to a specific constraint character.\n (define_mode_attr cmode [(QI \"q\") (HI \"h\") (SI \"s\") (DI \"d\")])\n \n+;; Map modes to Usg and Usj constraints for SISD right shifts\n+(define_mode_attr cmode_simd [(SI \"g\") (DI \"j\")])\n+\n (define_mode_attr Vtype [(V8QI \"8b\") (V16QI \"16b\")\n \t\t\t (V4HI \"4h\") (V8HI  \"8h\")\n                          (V2SI \"2s\") (V4SI  \"4s\")"}, {"sha": "ff4b5fbe28384717d6b94e62e4fbffccb181325f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "patch": "@@ -1,3 +1,8 @@\n+2018-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/85512\n+\t* gcc.dg/pr85512.c: New test.\n+\n \n \tPR target/85485\n \t* g++.dg/cet-notrack-1.C (dg-options): Remove -mcet."}, {"sha": "b581f833938a0650625e9f09fe644cffdb0d224c", "filename": "gcc/testsuite/gcc.dg/pr85512.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0603375cbcdd81ce7eef925a3cfd4fdc297b50f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85512.c?ref=0603375cbcdd81ce7eef925a3cfd4fdc297b50f7", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O -fno-if-conversion\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned int u32;\n+typedef unsigned long long u64;\n+u64\n+bar0(u8 u8_0, u16 u16_0, u32 u32_0, u64 u64_0, u8 u8_1, u16 u16_1, u32 u32_1, u64 u64_1, u8 u8_2, u16 u16_2, u32 u32_2, u64 u64_2, u8 u8_3, u16 u16_3, u32 u32_3, u64 u64_3);\n+u64\n+bar1(u8 u8_0, u16 u16_0, u32 u32_0, u64 u64_0, u8 u8_1, u16 u16_1, u32 u32_1, u64 u64_1, u8 u8_2, u16 u16_2, u32 u32_2, u64 u64_2, u8 u8_3, u16 u16_3, u32 u32_3, u64 u64_3);\n+u64\n+bar2(u8 u8_0, u16 u16_0, u32 u32_0, u64 u64_0, u8 u8_1, u16 u16_1, u32 u32_1, u64 u64_1, u8 u8_2, u16 u16_2, u32 u32_2, u64 u64_2, u8 u8_3, u16 u16_3, u32 u32_3, u64 u64_3);\n+u64\n+bar0(u8 u8_0, u16 u16_0, u32 u32_0, u64 u64_0, u8 u8_1, u16 u16_1, u32 u32_1, u64 u64_1, u8 u8_2, u16 u16_2, u32 u32_2, u64 u64_2, u8 u8_3, u16 u16_3, u32 u32_3, u64 u64_3)\n+{\n+l0:     u32_2 += __builtin_add_overflow_p((u32)(u64)u32_0, (u16)-(u32)u64_2, (u64)-(u64)(unsigned)__builtin_parityll((u16)(u16)(((u64)0x1a6cb5b10 << 0))));\n+        u8_3 <<= __builtin_add_overflow((u16)~(u32)u64_2, (u16)(u8)(unsigned)__builtin_popcountll((u16)-(u8)(((u64)0x725582 << 0))), &u32_1);\n+        u64_1 -= (u8)~(u8)(0);\n+        u16_3 = (u16_3 >> ((u32)~(u8)(1) & 15)) | (u16_3 << ((16 - ((u32)~(u8)(1) & 15)) & 15));\n+        u8_2 = __builtin_mul_overflow((u64)(u8)__builtin_bswap32((u32)-(u32)u16_0), (u64)(u16)u16_2, &u8_3) ? (u64)~(u8)u8_3 : (u16)(u16)(((u64)0x7ffffff << 0));\n+        u32_0 *= (u8)(u8)(((u64)0x1ffffffffffffff << 0));\n+        u32_1 >>= (u64)~(u64)(((u64)0x61bf860d09fb3a << 0)) >= (u8)(u16)(unsigned)__builtin_parityll((u16)(u8)(((u64)0x6 << 0)));\n+        u16_0 >>= __builtin_add_overflow_p((u64)-(u8)(((u64)0x68b4dda55e3 << 0)), (u16)(u64)__builtin_bswap64((u16)~(u32)__builtin_bswap32((u32)(u32)u8_3)), (u64)(u16)u16_1);\n+        u64_0 += (u8)-(u64)(((u64)0xcc88a5c0292b6ba0 << 0));\n+        u32_0 += __builtin_mul_overflow((u8)-(u64)(((u64)0xc89172ea72a << 0)), (u64)(u64)u8_2, &u8_3);\n+        u64_0 >>= __builtin_add_overflow((u32)-(u64)(0), (u32)-(u16)u8_1, &u8_2);\n+        u16_1 >>= (u32)(u64)u16_1 & 15;\n+        u16_3 ^= (u16)~(u16)(1);\n+        u32_2 &= (u16)-(u32)(0);\n+l1:     u32_3 = (u32_3 >> ((u64)(u32)u32_1 & 31)) | (u32_3 << ((32 - ((u64)(u32)u32_1 & 31)) & 31));\n+        u64_1 |= (u64)~(u64)(unsigned)__builtin_parityll((u8)-(u32)u32_1);\n+        u8_3 *= __builtin_add_overflow((u64)-(u32)(((u64)0xffff << 0)), (u32)~(u64)(((u64)0x117e3e << 0)), &u32_2);\n+        u16_3 = (u16_3 << ((u64)~(u8)(((u64)0xf78e81 << 0)) & 15)) | (u16_3 >> ((16 - ((u64)~(u8)(((u64)0xf78e81 << 0)) & 15)) & 15));\n+        u64_1 = (u64)(u16)bar1((u8)((u32)(u64)(((u64)0x3ffffff << 0))), (u16)((u8)(u16)(((u64)0x5b << 0))), (u32)((u32)~(u8)(1)), (u64)((u8)(u16)(unsigned)__builtin_clrsb((u32)~(u32)(unsigned)__builtin_clrsbll((u8)(u16)(((u64)0xffffffff << 0))))), (u8)((u8)-(u64)(((u64)0x3e43180756484 << 0))), (u16)((u8)(u16)(((u64)0x7 << 0))), (u32)((u64)(u32)(((u64)0x285fa35c89 << 0))), (u64)((u32)(u8)(((u64)0x3ffff << 0))), (u8)((u16)-(u32)(((u64)0x73d01 << 0))), (u16)((u16)-(u16)(((u64)0x1fffffffffffff << 0))), (u32)((u16)(u64)(0)), (u64)((u16)(u32)(((u64)0x4c << 0))), (u8)((u64)-(u64)(((u64)0x3fffffffffffff << 0))), (u16)((u16)~(u16)(((u64)0xfffffffff << 0))), (u32)((u64)(u16)(((u64)0x7edb0cc1c << 0))), (u64)((u32)(u64)(((u64)0x1ffffffffff << 0)))) > (u16)-(u64)(((u64)0x7 << 0)) ? (u16)(u8)u64_2 : (u64)(u16)u32_2;\n+        u32_0 >>= (u8)(u16)(((u64)0x32 << 0)) != (u16)-(u64)u16_3;\n+        u16_1 *= __builtin_mul_overflow_p((u64)(u32)u32_1, (u16)(u8)(((u64)0x4ad149d89bf0be6 << 0)), (u64)(u32)(((u64)0x1bd7589 << 0)));\n+        u8_1 &= (u64)-(u64)u8_0;\n+        u16_3 %= (u16)(u16)(unsigned)__builtin_clrsbll((u32)~(u32)(((u64)0x3db8721fd79 << 0)));\n+        u8_3 >>= (u32)(u8)u8_1 & 7;\n+        u64_1 |= (u8)-(u64)(unsigned)__builtin_ffsll((u32)-(u64)bar2((u8)((u16)(u16)(((u64)0x3 << 0))), (u16)((u32)-(u8)(((u64)0x86af5 << 0))), (u32)((u16)-(u64)__builtin_bswap64((u64)-(u64)(0))), (u64)((u16)(u16)(((u64)0x75138426ec84c6 << 0))), (u8)((u64)(u32)(((u64)0x7fffffffff << 0))), (u16)((u32)~(u8)(((u64)0x71aa939dbdf3 << 0))), (u32)((u16)(u32)(((u64)0x8776ee7dbb651a2d << 0))), (u64)((u8)(u64)(0)), (u8)((u16)(u8)(unsigned)__builtin_clrsbll((u16)~(u32)(((u64)0x8df94655ec8430 << 0)))), (u16)((u16)-(u64)(unsigned)__builtin_clrsbll((u32)(u64)(((u64)0x3090a532 << 0)))), (u32)((u16)~(u16)(1)), (u64)((u8)(u32)(((u64)0x7fffffffffff << 0))), (u8)((u32)~(u64)(0)), (u16)((u8)~(u8)(unsigned)__builtin_ffs((u64)(u64)(0))), (u32)((u16)-(u8)(((u64)0x5dfe702 << 0))), (u64)((u8)(u64)(((u64)0x68f2a584e0 << 0)))));\n+        u32_3 >>= (u32)-(u32)u32_2 & 31;\n+        u8_3 = (u8_3 >> ((u32)-(u8)u8_1 & 7)) | (u8_3 << ((8 - ((u32)-(u8)u8_1 & 7)) & 7));\n+        u8_2 >>= (u16)-(u64)u64_3 & 7;\n+        u32_1 = (u32_1 >> ((u16)(u16)(1) & 31)) | (u32_1 << ((32 - ((u16)(u16)(1) & 31)) & 31));\n+        return u8_0 + u16_0 + u32_0 + u64_0 + u8_1 + u16_1 + u32_1 + u64_1 + u8_2 + u16_2 + u32_2 + u64_2 + u8_3 + u16_3 + u32_3 + u64_3;\n+}"}]}