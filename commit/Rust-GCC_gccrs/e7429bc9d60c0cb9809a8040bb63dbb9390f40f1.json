{"sha": "e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0MjliYzlkNjBjMGNiOTgwOWE4MDQwYmI2M2RiYjkzOTBmNDBmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-29T10:54:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-29T10:54:22Z"}, "message": "arm: Fix up -mcpu=iwmmxt ICEs [PR98849]\n\nThe\nhttps://gcc.gnu.org/r11-6707-g7432f255b70811dafaf325d94036ac580891de69\nhttps://gcc.gnu.org/r11-6708-gbfab355012ca0f5219da8beb04f2fdaf757d34b7\nchanges moved the vashl/vashr/vlshr expanders from neon.md to vec-common.md\nand changed their condition from TARGET_NEON to ARM_HAVE_<MODE>_ARITH,\nso that they apply also for TARGET_HAVE_MVE.  But, the ARM_HAVE_<MODE>_ARITH\nmacros are sometimes true also for TARGET_REALLY_IWMMXT, which at least\nfrom quick skimming of former iwmmxt*.md doesn't have such instructions,\nso it seems incorrect to enable them for iwmmxt.  Furthermore, even if it\nhad them, iwmmxt doesn't support any way to broadcast values in those\nmodes (vec_duplicate and vec_init optabs) and the middle end relies on\nif the vector x vector shift/rotate patterns are supported it can emit\nvector x scalar shift/rotate by broadcasting the shift amount to a vector.\n\nAs the TARGET_NEON vs. TARGET_REALLY_IWMMXT vs. TARGET_HAVE_MVE never seem\nto be enabled together, I think we can just write it the following way.\n\nNote, seems iwmmxt actually does support vector x scalar shifts, but doesn't\nreally enable the optabs that would tell the middle-end code that it does\n(and neon and mve don't seem to support those).  I'll defer that to anybody\nthat cares about iwmmxt (if any).\n\n2021-01-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/98849\n\t* config/arm/vec-common.md (mve_vshlq_<supf><mode>,\n\tvashl<mode>3, vashr<mode>3, vlshr<mode>3): Add\n\t&& !TARGET_REALLY_IWMMXT to conditions.\n\n\t* gcc.c-torture/compile/pr98849.c: New test.", "tree": {"sha": "34c9f05d217b3f4fc11016dc8607adacb7c0ec62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c9f05d217b3f4fc11016dc8607adacb7c0ec62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c445c07cda60488d7a5458b070356e05e7b2e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c445c07cda60488d7a5458b070356e05e7b2e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c445c07cda60488d7a5458b070356e05e7b2e09"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "345ada055235495a937bff73c84cf1fa73590905", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "patch": "@@ -301,7 +301,7 @@\n \t(unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w,w\")\n \t\t       (match_operand:VDQIW 2 \"imm_lshift_or_reg_neon\" \"w,Dm\")]\n \t VSHLQ))]\n-  \"ARM_HAVE_<MODE>_ARITH\"\n+  \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n   \"@\n    vshl.<supf>%#<V_sz_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\n    * return neon_output_shift_immediate (\\\"vshl\\\", 'i', &operands[2], <MODE>mode, VALID_NEON_QREG_MODE (<MODE>mode), true);\"\n@@ -312,7 +312,7 @@\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"\")\n \t(ashift:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"\")\n \t\t      (match_operand:VDQIW 2 \"imm_lshift_or_reg_neon\" \"\")))]\n-  \"ARM_HAVE_<MODE>_ARITH\"\n+  \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n {\n   emit_insn (gen_mve_vshlq_u<mode> (operands[0], operands[1], operands[2]));\n   DONE;\n@@ -325,7 +325,7 @@\n   [(set (match_operand:VDQIW 0 \"s_register_operand\")\n \t(ashiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\")\n \t\t\t(match_operand:VDQIW 2 \"imm_rshift_or_reg_neon\")))]\n-  \"ARM_HAVE_<MODE>_ARITH\"\n+  \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n {\n   if (s_register_operand (operands[2], <MODE>mode))\n     {\n@@ -343,7 +343,7 @@\n   [(set (match_operand:VDQIW 0 \"s_register_operand\")\n \t(lshiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\")\n \t\t\t(match_operand:VDQIW 2 \"imm_rshift_or_reg_neon\")))]\n-  \"ARM_HAVE_<MODE>_ARITH\"\n+  \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n {\n   if (s_register_operand (operands[2], <MODE>mode))\n     {"}, {"sha": "988b625cc79cad9f0fb25748425e3db7112900d8", "filename": "gcc/testsuite/gcc.c-torture/compile/pr98849.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98849.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7429bc9d60c0cb9809a8040bb63dbb9390f40f1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98849.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98849.c?ref=e7429bc9d60c0cb9809a8040bb63dbb9390f40f1", "patch": "@@ -0,0 +1,60 @@\n+/* PR target/98849 */\n+\n+unsigned int a[1024], b[1024];\n+int c[1024], d[1024];\n+\n+void\n+f1 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = b[i] << 3;\n+}\n+\n+void\n+f2 (int x)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = b[i] << x;\n+}\n+\n+void\n+f3 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    c[i] = d[i] << 3;\n+}\n+\n+void\n+f4 (int x)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    c[i] = d[i] << x;\n+}\n+\n+void\n+f5 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = b[i] >> 3;\n+}\n+\n+void\n+f6 (int x)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = b[i] >> x;\n+}\n+\n+void\n+f7 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    c[i] = d[i] >> 3;\n+}\n+\n+void\n+f8 (int x)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    c[i] = d[i] >> x;\n+}"}]}