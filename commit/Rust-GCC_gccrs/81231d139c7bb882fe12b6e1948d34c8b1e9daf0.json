{"sha": "81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyMzFkMTM5YzdiYjg4MmZlMTJiNmUxOTQ4ZDM0YzhiMWU5ZGFmMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-10T11:04:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-10T11:04:39Z"}, "message": "re PR tree-optimization/63476 (ICE: tree check: expected ssa_name, have var_decl in walk_aliased_vdefs_1, at tree-ssa-alias.c:2689)\n\n2014-10-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/63476\n\t* tree-ssa-pre.c (struct bb_bitmap_sets): Add vop_on_exit member.\n\t(BB_LIVE_VOP_ON_EXIT): New define.\n\t(create_expression_by_pieces): Assign VUSEs to stmts.\n\t(compute_avail): Track BB_LIVE_VOP_ON_EXIT.\n\t(pass_pre::execute): Assert virtual SSA form is up-to-date\n\tafter insertion.\n\n\t* g++.dg/torture/pr63476.C: New testcase.\n\nFrom-SVN: r216065", "tree": {"sha": "e638431b48966d3cc553743c8149eefa811f8246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e638431b48966d3cc553743c8149eefa811f8246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "327b20f5ab2b008af5dec106844b5fde87aeabf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327b20f5ab2b008af5dec106844b5fde87aeabf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327b20f5ab2b008af5dec106844b5fde87aeabf6"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "dbee77683b7eb8ae802d53183aed985fdd17257c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "patch": "@@ -1,3 +1,13 @@\n+2014-10-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/63476\n+\t* tree-ssa-pre.c (struct bb_bitmap_sets): Add vop_on_exit member.\n+\t(BB_LIVE_VOP_ON_EXIT): New define.\n+\t(create_expression_by_pieces): Assign VUSEs to stmts.\n+\t(compute_avail): Track BB_LIVE_VOP_ON_EXIT.\n+\t(pass_pre::execute): Assert virtual SSA form is up-to-date\n+\tafter insertion.\n+\n 2014-10-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lra-assigns.c (assign_by_spills): Error out on spill failure."}, {"sha": "2ed4d4a06124f53144440eef50867e9715730490", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "patch": "@@ -1,3 +1,8 @@\n+2014-10-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/63476\n+\t* g++.dg/torture/pr63476.C: New testcase.\n+\n 2014-10-10  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/implicit_16.f90: New."}, {"sha": "75ecc37406561588409b55a66c2011c2d34735f4", "filename": "gcc/testsuite/g++.dg/torture/pr63476.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr63476.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr63476.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr63476.C?ref=81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-std=gnu++11\" }\n+\n+enum class nsresult;\n+class A;\n+class B\n+{\n+public:\n+    B (int);\n+    A *operator->();\n+};\n+class C\n+{\n+};\n+class A\n+{\n+public:\n+    virtual nsresult AddObserver (const char *, C *, bool) = 0;\n+};\n+class D : A\n+{\n+  nsresult\n+      AddObserver (const char *p1, C *p2, bool p3)\n+\t{\n+\t  AddObserver (p1, p2, p3);\n+\t}\n+};\n+char *prefList[]{};\n+class F : C\n+{\n+  nsresult Install ();\n+};\n+nsresult\n+F::Install ()\n+{\n+  B branch = 0;\n+  for (int i;;)\n+    branch->AddObserver (prefList[i], this, false);\n+}"}, {"sha": "a447c1e4f06d974353f10538455f8bb0f640be08", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81231d139c7bb882fe12b6e1948d34c8b1e9daf0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=81231d139c7bb882fe12b6e1948d34c8b1e9daf0", "patch": "@@ -423,6 +423,9 @@ typedef struct bb_bitmap_sets\n   /* A cache for value_dies_in_block_x.  */\n   bitmap expr_dies;\n \n+  /* The live virtual operand on successor edges.  */\n+  tree vop_on_exit;\n+\n   /* True if we have visited this block during ANTIC calculation.  */\n   unsigned int visited : 1;\n \n@@ -440,6 +443,7 @@ typedef struct bb_bitmap_sets\n #define EXPR_DIES(BB)\t((bb_value_sets_t) ((BB)->aux))->expr_dies\n #define BB_VISITED(BB)\t((bb_value_sets_t) ((BB)->aux))->visited\n #define BB_MAY_NOTRETURN(BB) ((bb_value_sets_t) ((BB)->aux))->contains_may_not_return_call\n+#define BB_LIVE_VOP_ON_EXIT(BB) ((bb_value_sets_t) ((BB)->aux))->vop_on_exit\n \n \n /* Basic block list in postorder.  */\n@@ -2886,12 +2890,15 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t      bitmap_value_replace_in_set (NEW_SETS (block), nameexpr);\n \t      bitmap_value_replace_in_set (AVAIL_OUT (block), nameexpr);\n \t    }\n+\n+\t  gimple_set_vuse (stmt, BB_LIVE_VOP_ON_EXIT (block));\n \t}\n       gimple_seq_add_seq (stmts, forced_stmts);\n     }\n \n   name = make_temp_ssa_name (exprtype, NULL, \"pretmp\");\n   newstmt = gimple_build_assign (name, folded);\n+  gimple_set_vuse (newstmt, BB_LIVE_VOP_ON_EXIT (block));\n   gimple_set_plf (newstmt, NECESSARY, false);\n \n   gimple_seq_add_stmt (stmts, newstmt);\n@@ -3593,6 +3600,9 @@ compute_avail (void)\n        son = next_dom_son (CDI_DOMINATORS, son))\n     worklist[sp++] = son;\n \n+  BB_LIVE_VOP_ON_EXIT (ENTRY_BLOCK_PTR_FOR_FN (cfun))\n+    = ssa_default_def (cfun, gimple_vop (cfun));\n+\n   /* Loop until the worklist is empty.  */\n   while (sp)\n     {\n@@ -3607,7 +3617,10 @@ compute_avail (void)\n \t its immediate dominator.  */\n       dom = get_immediate_dominator (CDI_DOMINATORS, block);\n       if (dom)\n-\tbitmap_set_copy (AVAIL_OUT (block), AVAIL_OUT (dom));\n+\t{\n+\t  bitmap_set_copy (AVAIL_OUT (block), AVAIL_OUT (dom));\n+\t  BB_LIVE_VOP_ON_EXIT (block) = BB_LIVE_VOP_ON_EXIT (dom);\n+\t}\n \n       /* Generate values for PHI nodes.  */\n       for (gsi = gsi_start_phis (block); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -3617,7 +3630,10 @@ compute_avail (void)\n \t  /* We have no need for virtual phis, as they don't represent\n \t     actual computations.  */\n \t  if (virtual_operand_p (result))\n-\t    continue;\n+\t    {\n+\t      BB_LIVE_VOP_ON_EXIT (block) = result;\n+\t      continue;\n+\t    }\n \n \t  pre_expr e = get_or_alloc_expr_for_name (result);\n \t  add_to_value (get_expr_value_id (e), e);\n@@ -3661,6 +3677,9 @@ compute_avail (void)\n \t      bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n \t    }\n \n+\t  if (gimple_vdef (stmt))\n+\t    BB_LIVE_VOP_ON_EXIT (block) = gimple_vdef (stmt);\n+\n \t  if (gimple_has_side_effects (stmt)\n \t      || stmt_could_throw_p (stmt)\n \t      || is_gimple_debug (stmt))\n@@ -4758,6 +4777,10 @@ pass_pre::execute (function *fun)\n   remove_fake_exit_edges ();\n   gsi_commit_edge_inserts ();\n \n+  /* Eliminate folds statements which might (should not...) end up\n+     not keeping virtual operands up-to-date.  */\n+  gcc_assert (!need_ssa_update_p (fun));\n+\n   /* Remove all the redundant expressions.  */\n   todo |= eliminate (true);\n "}]}