{"sha": "2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMyNzg5ZDU4MmY4ZmNhZmQ5ZWY0NmEyMmRjYjVjYTA4YzVlZWNkOA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-07-27T16:29:31Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-07-27T16:29:31Z"}, "message": "[PATCH][AArch64] Fix missing optimization for CMP+AND\n\nDuring combine GCC tries to merge CMP (with zero) and AND into a TST. However,\nin cases where an ANDS operand is not compatible, this was being missed. Adding\na define_split where this operand was moved to a register seems to help out. \n\nCommitted on behalf of Sudi Das\n\n---\ngcc/\n\n2017-07-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\t    Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/aarch64/aarch64.md\n\t(define_split for and<mode>3nr_compare): Move\n\tnon aarch64_logical_operand to a register.\n\t(define_split for and_<SHIFT:optab><mode>3nr_compare0): Move non\n\tregister immediate operand to a register.\n\t* config/aarch64/predicates.md (aarch64_mov_imm_operand): New.\n\ngcc/testsuite\n    \n2017-07-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\t    Sudakshina Das  <sudi.das@arm.com>\n\n\t* gcc.target/aarch64/tst_imm_split_1.c: New Test.\n\n\nCo-Authored-By: Sudakshina Das <sudi.das@arm.com>\n\nFrom-SVN: r250631", "tree": {"sha": "2c0f09817f8455203b1c9380e0f904f72c8cfb9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c0f09817f8455203b1c9380e0f904f72c8cfb9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06bd22f6099abe4fec73c988daf4cacd68f34329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bd22f6099abe4fec73c988daf4cacd68f34329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bd22f6099abe4fec73c988daf4cacd68f34329"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "0b37bae243e14a4e6684cac4f7fd3128f9f98906", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "patch": "@@ -1,3 +1,13 @@\n+2017-07-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(define_split for and<mode>3nr_compare): Move\n+\tnon aarch64_logical_operand to a register.\n+\t(define_split for and_<SHIFT:optab><mode>3nr_compare0): Move non\n+\tregister immediate operand to a register.\n+\t* config/aarch64/predicates.md (aarch64_mov_imm_operand): New.\n+\n 2017-07-27  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR middle-end/81564"}, {"sha": "d3e66db1f712c6b51a4122629fba027077086e3f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "patch": "@@ -3835,6 +3835,22 @@\n   [(set_attr \"type\" \"logics_reg,logics_imm\")]\n )\n \n+(define_split\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (and:GPI (match_operand:GPI 0 \"register_operand\")\n+\t\t  (match_operand:GPI 1 \"aarch64_mov_imm_operand\"))\n+\t (const_int 0)))\n+   (clobber (match_operand:SI 2 \"register_operand\"))]\n+  \"\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (and:GPI (match_dup 0)\n+\t\t  (match_dup 2))\n+\t (const_int 0)))]\n+)\n+\n (define_insn \"*and<mode>3nr_compare0_zextract\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -3870,6 +3886,26 @@\n   [(set_attr \"type\" \"logics_shift_imm\")]\n )\n \n+(define_split\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (and:GPI (SHIFT:GPI\n+\t\t   (match_operand:GPI 0 \"register_operand\")\n+\t\t   (match_operand:QI 1 \"aarch64_shift_imm_<mode>\"))\n+\t\t  (match_operand:GPI 2 \"aarch64_mov_imm_operand\"))\n+\t(const_int 0)))\n+    (clobber (match_operand:SI 3 \"register_operand\"))]\n+  \"\"\n+  [(set (match_dup 3) (match_dup 2))\n+   (set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (and:GPI (SHIFT:GPI\n+\t\t   (match_dup 0)\n+\t\t   (match_dup 1))\n+\t\t  (match_dup 3))\n+\t (const_int 0)))]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Shifts\n ;; -------------------------------------------------------------------"}, {"sha": "11243c4ce00aa7d16a886bb24b01180801c68f4e", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "patch": "@@ -114,6 +114,10 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_logical_immediate\")))\n \n+(define_predicate \"aarch64_mov_imm_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"aarch64_move_imm (INTVAL (op), mode)\")))\n+\n (define_predicate \"aarch64_logical_and_immediate\"\n   (and (match_code \"const_int\")\n        (match_test \"aarch64_and_bitmask_imm (INTVAL (op), mode)\")))"}, {"sha": "87d3b6fce2f6ea47cfaf36f9daf435b1275b4018", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "patch": "@@ -1,3 +1,8 @@\n+2017-07-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* gcc.target/aarch64/tst_imm_split_1.c: New Test.\n+\n 2017-07-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81417"}, {"sha": "33a2c0f45afadb8fc9488f847f296ec0e690c049", "filename": "gcc/testsuite/gcc.target/aarch64/tst_imm_split_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_imm_split_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_imm_split_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst_imm_split_1.c?ref=2c2789d582f8fcafd9ef46a22dcb5ca08c5eecd8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+f (unsigned char *p)\n+{\n+  return p[0] == 50 || p[0] == 52;\n+}\n+\n+int\n+g (unsigned char *p)\n+{\n+  return (p[0] >> 4 & 0xfd) == 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\\\t\\[xw\\]\\[0-9\\]+, \\[xw\\]\\[0-9\\]+.*\" } } */\n+/* { dg-final { scan-assembler \"tst\\\\t\\[xw\\]\\[0-9\\]+, \\[xw\\]\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"tst\\\\t\\[xw\\]\\[0-9\\]+, \\[xw\\]\\[0-9\\]+, lsr 4\" } } */"}]}