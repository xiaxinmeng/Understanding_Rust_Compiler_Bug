{"sha": "764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY0ZWVjNmNmNTkxZmNmZTliZDBmZTc3NjBlY2I2NTdjZmE2YWJjMA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2017-07-17T08:56:06Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2017-07-17T08:56:06Z"}, "message": "re PR middle-end/80929 (Division with constant no more optimized to mult highpart)\n\n\tPR 80929\n\t* config/avr/avr.c (avr_mul_highpart_cost): New static function.\n\t(avr_rtx_costs_1) [TRUNCATE]: Use it to compute mul_highpart cost.\n\t[LSHIFTRT, outer_code = TRUNCATE]: Same.\n\nFrom-SVN: r250258", "tree": {"sha": "ff5c0a850f064f31b7ad4e2b8f385356406186cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff5c0a850f064f31b7ad4e2b8f385356406186cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f1e8aed3afc08e9d70bba9110e289f7fa329453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1e8aed3afc08e9d70bba9110e289f7fa329453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1e8aed3afc08e9d70bba9110e289f7fa329453"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "92f7c7f2e9b0db4974dfd64bc4210a71d901181e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "patch": "@@ -1,3 +1,10 @@\n+2017-07-17  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR 80929\n+\t* config/avr/avr.c (avr_mul_highpart_cost): New static function.\n+\t(avr_rtx_costs_1) [TRUNCATE]: Use it to compute mul_highpart cost.\n+\t[LSHIFTRT, outer_code = TRUNCATE]: Same.\n+\n 2017-07-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81396"}, {"sha": "0abfa13df94f095c8cf5958951e355c1b7481ae6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=764eec6cf591fcfe9bd0fe7760ecb657cfa6abc0", "patch": "@@ -10709,6 +10709,33 @@ avr_memory_move_cost (machine_mode mode,\n }\n \n \n+/* Cost for mul highpart.  X is a LSHIFTRT, i.e. the outer TRUNCATE is\n+   already stripped off.  */\n+\n+static int\n+avr_mul_highpart_cost (rtx x, int)\n+{\n+  if (AVR_HAVE_MUL\n+      && LSHIFTRT == GET_CODE (x)\n+      && MULT == GET_CODE (XEXP (x, 0))\n+      && CONST_INT_P (XEXP (x, 1)))\n+    {\n+      // This is the wider mode.\n+      machine_mode mode = GET_MODE (x);\n+  \n+      // The middle-end might still have PR81444, i.e. it is calling the cost\n+      // functions with strange modes.  Fix this now by also considering\n+      // PSImode (should actually be SImode instead).\n+      if (HImode == mode || PSImode == mode || SImode == mode)\n+        {\n+          return COSTS_N_INSNS (2);\n+        }\n+    }\n+\n+  return 10000;\n+}\n+\n+\n /* Mutually recursive subroutine of avr_rtx_cost for calculating the\n    cost of an RTX operand given its context.  X is the rtx of the\n    operand, MODE is its mode, and OUTER is the rtx_code of this\n@@ -10748,7 +10775,7 @@ avr_operand_rtx_cost (rtx x, machine_mode mode, enum rtx_code outer,\n    In either case, *TOTAL contains the cost result.  */\n \n static bool\n-avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n+avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code,\n                  int opno ATTRIBUTE_UNUSED, int *total, bool speed)\n {\n   enum rtx_code code = GET_CODE (x);\n@@ -11402,6 +11429,12 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n       return true;\n \n     case LSHIFTRT:\n+      if (outer_code == TRUNCATE)\n+        {\n+          *total = avr_mul_highpart_cost (x, speed);\n+          return true;\n+        }\n+\n       switch (mode)\n \t{\n \tcase QImode:\n@@ -11579,16 +11612,10 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n       return true;\n \n     case TRUNCATE:\n-      if (AVR_HAVE_MUL\n-          && LSHIFTRT == GET_CODE (XEXP (x, 0))\n-          && MULT == GET_CODE (XEXP (XEXP (x, 0), 0))\n-          && CONST_INT_P (XEXP (XEXP (x, 0), 1)))\n+      if (LSHIFTRT == GET_CODE (XEXP (x, 0)))\n         {\n-          if (QImode == mode || HImode == mode)\n-            {\n-              *total = COSTS_N_INSNS (2);\n-              return true;\n-            }\n+          *total = avr_mul_highpart_cost (XEXP (x, 0), speed);\n+          return true;\n         }\n       break;\n "}]}