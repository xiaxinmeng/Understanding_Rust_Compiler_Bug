{"sha": "8d488306cbde45ed18c6c98edd1107ca7ed23850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0ODgzMDZjYmRlNDVlZDE4YzZjOThlZGQxMTA3Y2E3ZWQyMzg1MA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-10-08T14:40:38Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-10-08T14:40:38Z"}, "message": "archive.c: Fix all the warnings about passing unsigned char* to char* and the other way too.\n\n2004-10-08  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * archive.c: Fix all the warnings about passing unsigned char*\n        to char* and the other way too.\n\nFrom-SVN: r88758", "tree": {"sha": "2b4814a6fef8f05a50646e6438a475fdfb5ced18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b4814a6fef8f05a50646e6438a475fdfb5ced18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d488306cbde45ed18c6c98edd1107ca7ed23850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d488306cbde45ed18c6c98edd1107ca7ed23850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d488306cbde45ed18c6c98edd1107ca7ed23850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d488306cbde45ed18c6c98edd1107ca7ed23850/comments", "author": null, "committer": null, "parents": [{"sha": "ea3c4ca872e8fe9e5efbc1b299ec4df34a8d4890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3c4ca872e8fe9e5efbc1b299ec4df34a8d4890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3c4ca872e8fe9e5efbc1b299ec4df34a8d4890"}], "stats": {"total": 109, "additions": 58, "deletions": 51}, "files": [{"sha": "8f06ee8a758275b2650c5a9df90447d0c0cabbdf", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d488306cbde45ed18c6c98edd1107ca7ed23850/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d488306cbde45ed18c6c98edd1107ca7ed23850/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=8d488306cbde45ed18c6c98edd1107ca7ed23850", "patch": "@@ -1,3 +1,8 @@\n+2004-10-08  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* archive.c: Fix all the warnings about passing unsigned char*\n+\tto char* and the other way too.\n+\n 2004-09-16  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR libobjc/16448"}, {"sha": "096ca6931dccec8632b96d8c321542453a758c73", "filename": "libobjc/archive.c", "status": "modified", "additions": 53, "deletions": 51, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d488306cbde45ed18c6c98edd1107ca7ed23850/libobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d488306cbde45ed18c6c98edd1107ca7ed23850/libobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Farchive.c?ref=8d488306cbde45ed18c6c98edd1107ca7ed23850", "patch": "@@ -84,7 +84,7 @@ objc_write_unsigned_char (struct objc_typed_stream *stream,\n {\n   unsigned char buf[sizeof (unsigned char) + 1];\n   int len = __objc_code_unsigned_char (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n \n static inline int\n@@ -105,7 +105,7 @@ objc_write_char (struct objc_typed_stream *stream, signed char value)\n {\n   unsigned char buf[sizeof (char) + 1];\n   int len = __objc_code_char (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n \n static inline int\n@@ -143,7 +143,7 @@ objc_write_unsigned_short (struct objc_typed_stream *stream,\n {\n   unsigned char buf[sizeof (unsigned short) + 1];\n   int len = __objc_code_unsigned_short (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n       \n static inline int\n@@ -161,7 +161,7 @@ objc_write_short (struct objc_typed_stream *stream, short value)\n {\n   unsigned char buf[sizeof (short) + 1];\n   int len = __objc_code_short (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n       \n \n@@ -199,7 +199,7 @@ objc_write_unsigned_int (struct objc_typed_stream *stream, unsigned int value)\n {\n   unsigned char buf[sizeof (unsigned int) + 1];\n   int len = __objc_code_unsigned_int (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n \n static inline int\n@@ -217,7 +217,7 @@ objc_write_int (struct objc_typed_stream *stream, int value)\n {\n   unsigned char buf[sizeof (int) + 1];\n   int len = __objc_code_int (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n \n static inline int\n@@ -255,7 +255,7 @@ objc_write_unsigned_long (struct objc_typed_stream *stream,\n {\n   unsigned char buf[sizeof (unsigned long) + 1];\n   int len = __objc_code_unsigned_long (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n \n static inline int\n@@ -273,7 +273,7 @@ objc_write_long (struct objc_typed_stream *stream, long value)\n {\n   unsigned char buf[sizeof (long) + 1];\n   int len = __objc_code_long (buf, value);\n-  return (*stream->write) (stream->physical, buf, len);\n+  return (*stream->write) (stream->physical, (char*)buf, len);\n }\n \n \n@@ -290,8 +290,8 @@ objc_write_string (struct objc_typed_stream *stream,\n   else /* _B_NINT */\n     buf[0] = (buf[0]&_B_VALUE)|_B_NSTR;\n \n-  if ((*stream->write) (stream->physical, buf, len) != 0)\n-    return (*stream->write) (stream->physical, string, nbytes);\n+  if ((*stream->write) (stream->physical, (char*)buf, len) != 0)\n+    return (*stream->write) (stream->physical, (char*)string, nbytes);\n   else\n     return 0;\n }\n@@ -323,12 +323,12 @@ objc_write_register_common (struct objc_typed_stream *stream,\n     {\n       buf[0] = _B_RCOMM|0x01;\n       buf[1] &= _B_VALUE;\n-      return (*stream->write) (stream->physical, buf, len + 1);\n+      return (*stream->write) (stream->physical, (char*)buf, len + 1);\n     }\n   else\n     {\n       buf[1] = (buf[1]&_B_VALUE)|_B_RCOMM;\n-      return (*stream->write) (stream->physical, buf + 1, len);\n+      return (*stream->write) (stream->physical, (char*)buf + 1, len);\n     }\n }\n \n@@ -341,12 +341,12 @@ objc_write_use_common (struct objc_typed_stream *stream, unsigned long key)\n     {\n       buf[0] = _B_UCOMM|0x01;\n       buf[1] &= _B_VALUE;\n-      return (*stream->write) (stream->physical, buf, 2);\n+      return (*stream->write) (stream->physical, (char*)buf, 2);\n     }\n   else\n     {\n       buf[1] = (buf[1]&_B_VALUE)|_B_UCOMM;\n-      return (*stream->write) (stream->physical, buf + 1, len);\n+      return (*stream->write) (stream->physical, (char*)buf + 1, len);\n     }\n }\n \n@@ -356,7 +356,7 @@ __objc_write_extension (struct objc_typed_stream *stream, unsigned char code)\n   if (code <= _B_VALUE)\n     {\n       unsigned char buf = code|_B_EXT;\n-      return (*stream->write) (stream->physical, &buf, 1);\n+      return (*stream->write) (stream->physical, (char*)&buf, 1);\n     }\n   else \n     {\n@@ -376,7 +376,7 @@ __objc_write_object (struct objc_typed_stream *stream, id object)\n       __objc_write_extension (stream, _BX_OBJECT);\n       objc_write_class (stream, object->class_pointer);\n       (*objc_msg_lookup (object, write_sel)) (object, write_sel, stream);\n-      return (*stream->write) (stream->physical, &buf, 1);\n+      return (*stream->write) (stream->physical, (char*)&buf, 1);\n     }\n   else\n     return objc_write_use_common (stream, 0);\n@@ -435,7 +435,7 @@ inline int\n __objc_write_class (struct objc_typed_stream *stream, struct objc_class *class)\n {\n   __objc_write_extension (stream, _BX_CLASS);\n-  objc_write_string_atomic (stream, (char *) class->name,\n+  objc_write_string_atomic (stream, (unsigned char *) class->name,\n \t\t\t   strlen ((char *) class->name));\n   return objc_write_unsigned_long (stream, class->version);\n }\n@@ -466,9 +466,9 @@ __objc_write_selector (struct objc_typed_stream *stream, SEL selector)\n   __objc_write_extension (stream, _BX_SEL);\n   /* to handle NULL selectors */\n   if ((SEL)0 == selector)\n-    return objc_write_string (stream, \"\", 0);\n+    return objc_write_string (stream, (unsigned char*)\"\", 0);\n   sel_name = sel_get_name (selector);\n-  return objc_write_string (stream, sel_name, strlen ((char*)sel_name));\n+  return objc_write_string (stream, (unsigned char*)sel_name, strlen ((char*)sel_name));\n }\n \n int \n@@ -506,7 +506,7 @@ objc_read_char (struct objc_typed_stream *stream, char *val)\n {\n   unsigned char buf;\n   int len;\n-  len = (*stream->read) (stream->physical, &buf, 1);\n+  len = (*stream->read) (stream->physical, (char*)&buf, 1);\n   if (len != 0)\n     {\n       if ((buf & _B_CODE) == _B_SINT)\n@@ -533,13 +533,13 @@ objc_read_unsigned_char (struct objc_typed_stream *stream, unsigned char *val)\n {\n   unsigned char buf;\n   int len;\n-  if ((len = (*stream->read) (stream->physical, &buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)&buf, 1)))\n     {\n       if ((buf & _B_CODE) == _B_SINT)\n \t(*val) = (buf & _B_VALUE);\n \n       else if ((buf & _B_NUMBER) == 1)\n-\tlen = (*stream->read) (stream->physical, val, 1);\n+\tlen = (*stream->read) (stream->physical, (char*)val, 1);\n \n       else\n \tobjc_error (nil, OBJC_ERR_BAD_DATA,\n@@ -554,7 +554,7 @@ objc_read_short (struct objc_typed_stream *stream, short *value)\n {\n   unsigned char buf[sizeof (short) + 1];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       if ((buf[0] & _B_CODE) == _B_SINT)\n \t(*value) = (buf[0] & _B_VALUE);\n@@ -566,7 +566,7 @@ objc_read_short (struct objc_typed_stream *stream, short *value)\n \t  if (nbytes > (int) sizeof (short))\n \t    objc_error (nil, OBJC_ERR_BAD_DATA,\n \t\t        \"expected short, got bigger (%dbits)\", nbytes*8);\n-\t  len = (*stream->read) (stream->physical, buf + 1, nbytes);\n+\t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n \t    (*value) = ((*value)*0x100) + buf[pos++];\n@@ -583,7 +583,7 @@ objc_read_unsigned_short (struct objc_typed_stream *stream,\n {\n   unsigned char buf[sizeof (unsigned short) + 1];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       if ((buf[0] & _B_CODE) == _B_SINT)\n \t(*value) = (buf[0] & _B_VALUE);\n@@ -595,7 +595,7 @@ objc_read_unsigned_short (struct objc_typed_stream *stream,\n \t  if (nbytes > (int) sizeof (short))\n \t    objc_error (nil, OBJC_ERR_BAD_DATA,\n \t\t        \"expected short, got int or bigger\");\n-\t  len = (*stream->read) (stream->physical, buf + 1, nbytes);\n+\t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n \t    (*value) = ((*value)*0x100) + buf[pos++];\n@@ -610,7 +610,7 @@ objc_read_int (struct objc_typed_stream *stream, int *value)\n {\n   unsigned char buf[sizeof (int) + 1];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       if ((buf[0] & _B_CODE) == _B_SINT)\n \t(*value) = (buf[0] & _B_VALUE);\n@@ -621,7 +621,7 @@ objc_read_int (struct objc_typed_stream *stream, int *value)\n \t  int nbytes = buf[0] & _B_NUMBER;\n \t  if (nbytes > (int) sizeof (int))\n \t    objc_error (nil, OBJC_ERR_BAD_DATA, \"expected int, got bigger\");\n-\t  len = (*stream->read) (stream->physical, buf + 1, nbytes);\n+\t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n \t    (*value) = ((*value)*0x100) + buf[pos++];\n@@ -637,7 +637,7 @@ objc_read_long (struct objc_typed_stream *stream, long *value)\n {\n   unsigned char buf[sizeof (long) + 1];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       if ((buf[0] & _B_CODE) == _B_SINT)\n \t(*value) = (buf[0] & _B_VALUE);\n@@ -648,7 +648,7 @@ objc_read_long (struct objc_typed_stream *stream, long *value)\n \t  int nbytes = buf[0] & _B_NUMBER;\n \t  if (nbytes > (int) sizeof (long))\n \t    objc_error (nil, OBJC_ERR_BAD_DATA, \"expected long, got bigger\");\n-\t  len = (*stream->read) (stream->physical, buf + 1, nbytes);\n+\t  len = (*stream->read) (stream->physical, (char*)buf + 1, nbytes);\n \t  (*value) = 0;\n \t  while (pos <= nbytes)\n \t    (*value) = ((*value)*0x100) + buf[pos++];\n@@ -670,7 +670,7 @@ __objc_read_nbyte_uint (struct objc_typed_stream *stream,\n   if (nbytes > sizeof (int))\n     objc_error (nil, OBJC_ERR_BAD_DATA, \"expected int, got bigger\");\n \n-  len = (*stream->read) (stream->physical, buf, nbytes);\n+  len = (*stream->read) (stream->physical, (char*)buf, nbytes);\n   (*val) = 0;\n   while (pos < nbytes)\n     (*val) = ((*val)*0x100) + buf[pos++];\n@@ -684,7 +684,7 @@ objc_read_unsigned_int (struct objc_typed_stream *stream,\n {\n   unsigned char buf[sizeof (unsigned int) + 1];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       if ((buf[0] & _B_CODE) == _B_SINT)\n \t(*value) = (buf[0] & _B_VALUE);\n@@ -707,7 +707,7 @@ __objc_read_nbyte_ulong (struct objc_typed_stream *stream,\n   if (nbytes > sizeof (long))\n     objc_error (nil, OBJC_ERR_BAD_DATA, \"expected long, got bigger\");\n \n-  len = (*stream->read) (stream->physical, buf, nbytes);\n+  len = (*stream->read) (stream->physical, (char*)buf, nbytes);\n   (*val) = 0;\n   while (pos < nbytes)\n     (*val) = ((*val)*0x100) + buf[pos++];\n@@ -721,7 +721,7 @@ objc_read_unsigned_long (struct objc_typed_stream *stream,\n {\n   unsigned char buf[sizeof (unsigned long) + 1];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       if ((buf[0] & _B_CODE) == _B_SINT)\n \t(*value) = (buf[0] & _B_VALUE);\n@@ -739,14 +739,14 @@ objc_read_string (struct objc_typed_stream *stream,\n {\n   unsigned char buf[sizeof (unsigned int) + 1];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       unsigned long key = 0;\n \n       if ((buf[0]&_B_CODE) == _B_RCOMM)\t/* register following */\n \t{\n \t  len = __objc_read_nbyte_ulong (stream, (buf[0] & _B_VALUE), &key);\n-\t  len = (*stream->read) (stream->physical, buf, 1);\n+\t  len = (*stream->read) (stream->physical, (char*)buf, 1);\n \t}\n \n       switch (buf[0]&_B_CODE) {\n@@ -800,15 +800,15 @@ objc_read_object (struct objc_typed_stream *stream, id *object)\n {\n   unsigned char buf[sizeof (unsigned int)];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       SEL read_sel = sel_get_any_uid (\"read:\");\n       unsigned long key = 0;\n \n       if ((buf[0]&_B_CODE) == _B_RCOMM)\t/* register common */\n \t{\n \t  len = __objc_read_nbyte_ulong (stream, (buf[0] & _B_VALUE), &key);\n-\t  len = (*stream->read) (stream->physical, buf, 1);\n+\t  len = (*stream->read) (stream->physical, (char*)buf, 1);\n \t}\n \n       if (buf[0] == (_B_EXT | _BX_OBJECT))\n@@ -830,7 +830,7 @@ objc_read_object (struct objc_typed_stream *stream, id *object)\n \t    (*get_imp (class, read_sel)) (*object, read_sel, stream);\n \n \t  /* check null-byte */\n-\t  len = (*stream->read) (stream->physical, buf, 1);\n+\t  len = (*stream->read) (stream->physical, (char*)buf, 1);\n \t  if (buf[0] != '\\0')\n \t    objc_error (nil, OBJC_ERR_BAD_DATA,\n \t\t        \"expected null-byte, got opcode %c\", buf[0]);\n@@ -875,19 +875,20 @@ objc_read_class (struct objc_typed_stream *stream, Class *class)\n {\n   unsigned char buf[sizeof (unsigned int)];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       unsigned long key = 0;\n \n       if ((buf[0]&_B_CODE) == _B_RCOMM)\t/* register following */\n \t{\n \t  len = __objc_read_nbyte_ulong (stream, (buf[0] & _B_VALUE), &key);\n-\t  len = (*stream->read) (stream->physical, buf, 1);\n+\t  len = (*stream->read) (stream->physical, (char*)buf, 1);\n \t}\n \n       if (buf[0] == (_B_EXT | _BX_CLASS))\n \t{\n-\t  char *class_name = \"\";\n+\t  char temp[1] = \"\";\n+\t  char *class_name = temp;\n \t  unsigned long version;\n \n \t  /* get class */\n@@ -926,19 +927,20 @@ objc_read_selector (struct objc_typed_stream *stream, SEL* selector)\n {\n   unsigned char buf[sizeof (unsigned int)];\n   int len;\n-  if ((len = (*stream->read) (stream->physical, buf, 1)))\n+  if ((len = (*stream->read) (stream->physical, (char*)buf, 1)))\n     {\n       unsigned long key = 0;\n \n       if ((buf[0]&_B_CODE) == _B_RCOMM)\t/* register following */\n \t{\n \t  len = __objc_read_nbyte_ulong (stream, (buf[0] & _B_VALUE), &key);\n-\t  len = (*stream->read) (stream->physical, buf, 1);\n+\t  len = (*stream->read) (stream->physical, (char*)buf, 1);\n \t}\n \n       if (buf[0] == (_B_EXT|_BX_SEL)) /* selector! */\n \t{\n-\t  char *selector_name = \"\";\n+\t  char temp[1] = \"\";\n+\t  char *selector_name = temp;\n \n \t  /* get selector */\n \t  len = objc_read_string (stream, &selector_name);\n@@ -1032,11 +1034,11 @@ objc_write_type (TypedStream *stream, const char *type, const void *data)\n \n   case _C_CHARPTR:\n     return objc_write_string (stream,\n-\t\t\t      *(char **) data, strlen (*(char **) data));\n+\t\t\t      *(unsigned char **) data, strlen (*(char **) data));\n     break;\n \n   case _C_ATOM:\n-    return objc_write_string_atomic (stream, *(char **) data, \n+    return objc_write_string_atomic (stream, *(unsigned char **) data, \n \t\t\t\t     strlen (*(char **) data));\n     break;\n \n@@ -1241,15 +1243,15 @@ objc_write_types (TypedStream *stream, const char *type, ...)\n \n       case _C_CHARPTR:\n \t{\n-\t  char **str = va_arg (args, char **);\n-\t  res = objc_write_string (stream, *str, strlen (*str));\n+\t  unsigned char **str = va_arg (args, unsigned char **);\n+\t  res = objc_write_string (stream, *str, strlen ((char*)*str));\n \t}\n \tbreak;\n \n       case _C_ATOM:\n \t{\n-\t  char **str = va_arg (args, char **);\n-\t  res = objc_write_string_atomic (stream, *str, strlen (*str));\n+\t  unsigned char **str = va_arg (args, unsigned char **);\n+\t  res = objc_write_string_atomic (stream, *str, strlen ((char*)*str));\n \t}\n \tbreak;\n "}]}