{"sha": "d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxMDUyZWJkN2FjOWQ1NDVhMjZkZGUzMjI5YzU3Zjg3MmMxZDVmMw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2018-05-21T10:33:30Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2018-05-21T10:33:30Z"}, "message": "Add missing AArch64 NEON instrinctics for Armv8.2-a to Armv8.4-a\n\nThis patch adds the missing neon intrinsics for all 128 bit vector Integer modes for the\nthree-way XOR and negate and xor instructions for Arm8.2-a to Armv8.4-a.\n\ngcc/\n2018-05-21  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_eor3qv8hi): Change to\n\teor3q<mode>4.\n\t(aarch64_bcaxqv8hi): Change to bcaxq<mode>4.\n\t* config/aarch64/aarch64-simd-builtins.def (veor3q_u8, veor3q_u32,\n\tveor3q_u64, veor3q_s8, veor3q_s16, veor3q_s32, veor3q_s64, vbcaxq_u8,\n\tvbcaxq_u32, vbcaxq_u64, vbcaxq_s8, vbcaxq_s16, vbcaxq_s32,\n\tvbcaxq_s64): New.\n\t* config/aarch64/arm_neon.h: Likewise.\n\t* config/aarch64/iterators.md (VQ_I): New.\n\ngcc/testsuite/\n2018-05-21  Tamar Christina  <tamar.christina@arm.com>\n\n\t* gcc.target/gcc.target/aarch64/sha3.h (veor3q_u8, veor3q_u32,\n\tveor3q_u64, veor3q_s8, veor3q_s16, veor3q_s32, veor3q_s64, vbcaxq_u8,\n\tvbcaxq_u32, vbcaxq_u64, vbcaxq_s8, vbcaxq_s16, vbcaxq_s32,\n\tvbcaxq_s64): New.\n\t* gcc.target/gcc.target/aarch64/sha3_1.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/sha3_1.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/sha3_1.c: Likewise.\n\nFrom-SVN: r260435", "tree": {"sha": "c815fa2f2bd1006a7b0094bc4bd245a21c1fcc8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c815fa2f2bd1006a7b0094bc4bd245a21c1fcc8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "825f9d0b756aa3103bb15ed4cab5f8691b79c419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825f9d0b756aa3103bb15ed4cab5f8691b79c419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825f9d0b756aa3103bb15ed4cab5f8691b79c419"}], "stats": {"total": 216, "additions": 182, "deletions": 34}, "files": [{"sha": "27b5c60af169531f4891f30c79570b1a2101422b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -1,3 +1,15 @@\n+2018-05-21  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_eor3qv8hi): Change to\n+\teor3q<mode>4.\n+\t(aarch64_bcaxqv8hi): Change to bcaxq<mode>4.\n+\t* config/aarch64/aarch64-simd-builtins.def (veor3q_u8, veor3q_u32,\n+\tveor3q_u64, veor3q_s8, veor3q_s16, veor3q_s32, veor3q_s64, vbcaxq_u8,\n+\tvbcaxq_u32, vbcaxq_u64, vbcaxq_s8, vbcaxq_s16, vbcaxq_s32,\n+\tvbcaxq_s64): New.\n+\t* config/aarch64/arm_neon.h: Likewise.\n+\t* config/aarch64/iterators.md (VQ_I): New.\n+\n 2018-05-21  Alexey Brodkin <abrodkin@synopsys.com>\n \n \t* config.gcc: Add arc/t-multilib-linux to tmake_file for"}, {"sha": "439d4837fe724b33d4c1bd834570fb464f47eb5b", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -599,14 +599,16 @@\n   VAR1 (BINOPU, crypto_sha512su0q, 0, v2di)\n   /* Implemented by aarch64_crypto_sha512su1qv2di.  */\n   VAR1 (TERNOPU, crypto_sha512su1q, 0, v2di)\n-  /* Implemented by aarch64_eor3qv8hi.  */\n-  VAR1 (TERNOPU, eor3q, 0, v8hi)\n+  /* Implemented by eor3q<mode>4.  */\n+  BUILTIN_VQ_I (TERNOPU, eor3q, 4)\n+  BUILTIN_VQ_I (TERNOP, eor3q, 4)\n   /* Implemented by aarch64_rax1qv2di.  */\n   VAR1 (BINOPU, rax1q, 0, v2di)\n   /* Implemented by aarch64_xarqv2di.  */\n   VAR1 (TERNOPUI, xarq, 0, v2di)\n-  /* Implemented by aarch64_bcaxqv8hi.  */\n-  VAR1 (TERNOPU, bcaxq, 0, v8hi)\n+  /* Implemented by bcaxq<mode>4.  */\n+  BUILTIN_VQ_I (TERNOPU, bcaxq, 4)\n+  BUILTIN_VQ_I (TERNOP, bcaxq, 4)\n \n   /* Implemented by aarch64_fml<f16mac1>l<f16quad>_low<mode>.  */\n   VAR1 (TERNOP, fmlal_low, 0, v2sf)"}, {"sha": "c53a774f00538ed9c118d0338da590ed6ba603d9", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -5926,13 +5926,13 @@\n \n ;; sha3\n \n-(define_insn \"aarch64_eor3qv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=w\")\n-\t(xor:V8HI\n-\t (xor:V8HI\n-\t  (match_operand:V8HI 2 \"register_operand\" \"%w\")\n-\t  (match_operand:V8HI 3 \"register_operand\" \"w\"))\n-\t (match_operand:V8HI 1 \"register_operand\" \"w\")))]\n+(define_insn \"eor3q<mode>4\"\n+  [(set (match_operand:VQ_I 0 \"register_operand\" \"=w\")\n+\t(xor:VQ_I\n+\t (xor:VQ_I\n+\t  (match_operand:VQ_I 2 \"register_operand\" \"w\")\n+\t  (match_operand:VQ_I 3 \"register_operand\" \"w\"))\n+\t (match_operand:VQ_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD && TARGET_SHA3\"\n   \"eor3\\\\t%0.16b, %1.16b, %2.16b, %3.16b\"\n   [(set_attr \"type\" \"crypto_sha3\")]\n@@ -5962,13 +5962,13 @@\n   [(set_attr \"type\" \"crypto_sha3\")]\n )\n \n-(define_insn \"aarch64_bcaxqv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=w\")\n-\t(xor:V8HI\n-\t (and:V8HI\n-\t  (not:V8HI (match_operand:V8HI 3 \"register_operand\" \"w\"))\n-\t  (match_operand:V8HI 2 \"register_operand\" \"w\"))\n-\t (match_operand:V8HI 1 \"register_operand\" \"w\")))]\n+(define_insn \"bcaxq<mode>4\"\n+  [(set (match_operand:VQ_I 0 \"register_operand\" \"=w\")\n+\t(xor:VQ_I\n+\t (and:VQ_I\n+\t  (not:VQ_I (match_operand:VQ_I 3 \"register_operand\" \"w\"))\n+\t  (match_operand:VQ_I 2 \"register_operand\" \"w\"))\n+\t (match_operand:VQ_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD && TARGET_SHA3\"\n   \"bcax\\\\t%0.16b, %1.16b, %2.16b, %3.16b\"\n   [(set_attr \"type\" \"crypto_sha3\")]"}, {"sha": "4ff76b4133959ae598468dff2554db37a0d07a62", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -32068,13 +32068,63 @@ vsha512su1q_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n   return __builtin_aarch64_crypto_sha512su1qv2di_uuuu (__a, __b, __c);\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_u8 (uint8x16_t __a, uint8x16_t __b, uint8x16_t __c)\n+{\n+  return __builtin_aarch64_eor3qv16qi_uuuu (__a, __b, __c);\n+}\n+\n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n veor3q_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n   return __builtin_aarch64_eor3qv8hi_uuuu (__a, __b, __c);\n }\n \n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n+{\n+  return __builtin_aarch64_eor3qv4si_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n+{\n+  return __builtin_aarch64_eor3qv2di_uuuu (__a, __b, __c);\n+}\n+\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_s8 (int8x16_t __a, int8x16_t __b, int8x16_t __c)\n+{\n+  return __builtin_aarch64_eor3qv16qi (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c)\n+{\n+  return __builtin_aarch64_eor3qv8hi (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return __builtin_aarch64_eor3qv4si (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+veor3q_s64 (int64x2_t __a, int64x2_t __b, int64x2_t __c)\n+{\n+  return __builtin_aarch64_eor3qv2di (__a, __b, __c);\n+}\n+\n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrax1q_u64 (uint64x2_t __a, uint64x2_t __b)\n@@ -32089,12 +32139,63 @@ vxarq_u64 (uint64x2_t __a, uint64x2_t __b, const int imm6)\n   return __builtin_aarch64_xarqv2di_uuus (__a, __b,imm6);\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_u8 (uint8x16_t __a, uint8x16_t __b, uint8x16_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv16qi_uuuu (__a, __b, __c);\n+}\n+\n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vbcaxq_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n   return __builtin_aarch64_bcaxqv8hi_uuuu (__a, __b, __c);\n }\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv4si_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_u64 (uint64x2_t __a, uint64x2_t __b, uint64x2_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv2di_uuuu (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_s8 (int8x16_t __a, int8x16_t __b, int8x16_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv16qi (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv8hi (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv4si (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbcaxq_s64 (int64x2_t __a, int64x2_t __b, int64x2_t __c)\n+{\n+  return __builtin_aarch64_bcaxqv2di (__a, __b, __c);\n+}\n+\n+\n #pragma GCC pop_options\n \n #pragma GCC push_options"}, {"sha": "ae4ec9d1565cb32d5d450969175183e6dd53190c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -78,6 +78,9 @@\n ;; Quad vector modes.\n (define_mode_iterator VQ [V16QI V8HI V4SI V2DI V8HF V4SF V2DF])\n \n+;; Quad integer vector modes.\n+(define_mode_iterator VQ_I [V16QI V8HI V4SI V2DI])\n+\n ;; VQ without 2 element modes.\n (define_mode_iterator VQ_NO2E [V16QI V8HI V4SI V8HF V4SF])\n "}, {"sha": "6f917cbe36e7735c6fc9b4a5fe1c075bff887c32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -1,3 +1,13 @@\n+2018-05-21  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/gcc.target/aarch64/sha3.h (veor3q_u8, veor3q_u32,\n+\tveor3q_u64, veor3q_s8, veor3q_s16, veor3q_s32, veor3q_s64, vbcaxq_u8,\n+\tvbcaxq_u32, vbcaxq_u64, vbcaxq_s8, vbcaxq_s16, vbcaxq_s32,\n+\tvbcaxq_s64): New.\n+\t* gcc.target/gcc.target/aarch64/sha3_1.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/sha3_1.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/sha3_1.c: Likewise.\n+\n 2018-05-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/85841"}, {"sha": "c8537c251963317258237f5346b9ff3a7282de5a", "filename": "gcc/testsuite/gcc.target/aarch64/sha3.h", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3.h?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -1,10 +1,26 @@\n #include \"arm_neon.h\"\n \n-uint16x8_t\n-test_veor3q_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)\n-{\n-  return veor3q_u16 (a, b, c);\n-}\n+#define TEST_VEOR3(T, S) T \\\n+test_veor3q_ ## S (T a, T b, T c) \\\n+{ \\\n+  return veor3q_ ## S (a, b, c); \\\n+} \\\n+\n+#define TEST_VBCAX(T, S) T \\\n+test_vbcaxq_ ## S (T a, T b, T c) \\\n+{ \\\n+  return vbcaxq_ ## S (a, b, c); \\\n+} \\\n+\n+\n+TEST_VEOR3 (uint8x16_t, u8)\n+TEST_VEOR3 (uint16x8_t, u16)\n+TEST_VEOR3 (uint32x4_t, u32)\n+TEST_VEOR3 (uint64x2_t, u64)\n+TEST_VEOR3 (int8x16_t, s8)\n+TEST_VEOR3 (int16x8_t, s16)\n+TEST_VEOR3 (int32x4_t, s32)\n+TEST_VEOR3 (int64x2_t, s64)\n \n uint64x2_t\n test_vrax1q_u64 (uint64x2_t a, uint64x2_t b)\n@@ -18,8 +34,12 @@ test_vxarq_u64 (uint64x2_t a, uint64x2_t b)\n   return vxarq_u64 (a, b, 15);\n }\n \n-uint16x8_t\n-test_vbcaxq_u16 (uint16x8_t a, uint16x8_t b, uint16x8_t c)\n-{\n-  return vbcaxq_u16 (a, b, c);\n-}\n+TEST_VBCAX (uint8x16_t, u8)\n+TEST_VBCAX (uint16x8_t, u16)\n+TEST_VBCAX (uint32x4_t, u32)\n+TEST_VBCAX (uint64x2_t, u64)\n+TEST_VBCAX (int8x16_t, s8)\n+TEST_VBCAX (int16x8_t, s16)\n+TEST_VBCAX (int32x4_t, s32)\n+TEST_VBCAX (int64x2_t, s64)\n+"}, {"sha": "0727ce770283844ea69fe4ccdd858e03f9396bc8", "filename": "gcc/testsuite/gcc.target/aarch64/sha3_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_1.c?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -4,7 +4,7 @@\n #include \"sha3.h\"\n \n \n-/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 8 } } */\n /* { dg-final { scan-assembler-times \"rax1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n /* { dg-final { scan-assembler-times \"xar\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 15\" 1 } } */\n-/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 8 } } */"}, {"sha": "2d05116113371b37f0788334cf94f6b35ed9d43f", "filename": "gcc/testsuite/gcc.target/aarch64/sha3_2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_2.c?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -3,7 +3,7 @@\n \n #include \"sha3.h\"\n \n-/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 8 } } */\n /* { dg-final { scan-assembler-times \"rax1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n /* { dg-final { scan-assembler-times \"xar\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 15\" 1 } } */\n-/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 8 } } */"}, {"sha": "8d8ee77c2934610212286859297708528ec85ad8", "filename": "gcc/testsuite/gcc.target/aarch64/sha3_3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21052ebd7ac9d545a26dde3229c57f872c1d5f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsha3_3.c?ref=d21052ebd7ac9d545a26dde3229c57f872c1d5f3", "patch": "@@ -3,7 +3,7 @@\n \n #include \"sha3.h\"\n \n-/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"eor3\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 8 } } */\n /* { dg-final { scan-assembler-times \"rax1\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n /* { dg-final { scan-assembler-times \"xar\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d, 15\" 1 } } */\n-/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bcax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 8 } } */"}]}