{"sha": "5a53588ff09224348d467976fb196225ecf9c8d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1MzU4OGZmMDkyMjQzNDhkNDY3OTc2ZmIxOTYyMjVlY2Y5YzhkOQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-23T21:50:56Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-23T21:50:56Z"}, "message": "Use a macro instead of a constant to test for sparc integer regnos.\n\n\t* config/sparc/sparc.h (SPARC_FIRST_INT_REG, SPARC_LAST_INT_REG,\n\tSPARC_INT_REG_P): Define.\n\t(HARD_REGNO_NREGS): Use SPARC_INT_REG_P.\n\t(REGNO_OK_FOR_INDEX_P): Likewise.\n\t* config/sparc/sparc.c (gen_df_reg): Likewise.\n\t(eligible_for_return_delay): Likewise.\n\t(eligible_for_sibcall_delay): Likewise.\n\t(sparc_legitimate_address_p): Likewise.\n\t(emit_save_or_restore_regs): Likewise.\n\t(registers_ok_for_ldd_peep): Likewise.\n\t* config/spac/sparc.md (DI mode splitters): Likewise.\n\t(SF mode const splitters): Likewise.\n\t(DF mode splitters): Likewise.\n\t(32-bit DI mode logical op splitters): Likewise.\n\nFrom-SVN: r180350", "tree": {"sha": "ec7972f920b9997fc298d272d22bae34b1efa531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec7972f920b9997fc298d272d22bae34b1efa531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a53588ff09224348d467976fb196225ecf9c8d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a53588ff09224348d467976fb196225ecf9c8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a53588ff09224348d467976fb196225ecf9c8d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a53588ff09224348d467976fb196225ecf9c8d9/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bcf216b2a353f0ec40c4def6a24b00f9586a922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcf216b2a353f0ec40c4def6a24b00f9586a922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcf216b2a353f0ec40c4def6a24b00f9586a922"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "e647a6037cc5c1c2dab69d5f6c449048c25bd4b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a53588ff09224348d467976fb196225ecf9c8d9", "patch": "@@ -1,3 +1,20 @@\n+2011-10-23  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.h (SPARC_FIRST_INT_REG, SPARC_LAST_INT_REG,\n+\tSPARC_INT_REG_P): Define.\n+\t(HARD_REGNO_NREGS): Use SPARC_INT_REG_P.\n+\t(REGNO_OK_FOR_INDEX_P): Likewise.\n+\t* config/sparc/sparc.c (gen_df_reg): Likewise.\n+\t(eligible_for_return_delay): Likewise.\n+\t(eligible_for_sibcall_delay): Likewise.\n+\t(sparc_legitimate_address_p): Likewise.\n+\t(emit_save_or_restore_regs): Likewise.\n+\t(registers_ok_for_ldd_peep): Likewise.\n+\t* config/spac/sparc.md (DI mode splitters): Likewise.\n+\t(SF mode const splitters): Likewise.\n+\t(DF mode splitters): Likewise.\n+\t(32-bit DI mode logical op splitters): Likewise.\n+\n 2011-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50841"}, {"sha": "415ece8c647ec06f705906b28fbc6872da54866f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5a53588ff09224348d467976fb196225ecf9c8d9", "patch": "@@ -2640,7 +2640,7 @@ gen_df_reg (rtx reg, int low)\n   int regno = REGNO (reg);\n \n   if ((WORDS_BIG_ENDIAN == 0) ^ (low != 0))\n-    regno += (TARGET_ARCH64 && regno < 32) ? 1 : 2;\n+    regno += (TARGET_ARCH64 && SPARC_INT_REG_P (regno)) ? 1 : 2;\n   return gen_rtx_REG (DFmode, regno);\n }\n \f\n@@ -3124,7 +3124,7 @@ eligible_for_return_delay (rtx trial)\n   /* If this instruction sets up floating point register and we have a return\n      instruction, it can probably go in.  But restore will not work\n      with FP_REGS.  */\n-  if (regno >= 32)\n+  if (! SPARC_INT_REG_P (regno))\n     return (TARGET_V9\n \t    && !epilogue_renumber (&pat, 1)\n \t    && get_attr_in_uncond_branch_delay (trial)\n@@ -3166,7 +3166,7 @@ eligible_for_sibcall_delay (rtx trial)\n      a `restore' insn can go into the delay slot.  */\n   if (GET_CODE (SET_DEST (pat)) != REG\n       || (REGNO (SET_DEST (pat)) >= 8 && REGNO (SET_DEST (pat)) < 24)\n-      || REGNO (SET_DEST (pat)) >= 32)\n+      || ! SPARC_INT_REG_P (REGNO (SET_DEST (pat))))\n     return 0;\n \n   /* If it mentions %o7, it can't go in, because sibcall will clobber it\n@@ -3486,11 +3486,11 @@ sparc_legitimate_address_p (enum machine_mode mode, rtx addr, bool strict)\n     }\n   else\n     {\n-      if ((REGNO (rs1) >= 32\n+      if ((! SPARC_INT_REG_P (REGNO (rs1))\n \t   && REGNO (rs1) != FRAME_POINTER_REGNUM\n \t   && REGNO (rs1) < FIRST_PSEUDO_REGISTER)\n \t  || (rs2\n-\t      && (REGNO (rs2) >= 32\n+\t      && (! SPARC_INT_REG_P (REGNO (rs2))\n \t\t  && REGNO (rs2) != FRAME_POINTER_REGNUM\n \t\t  && REGNO (rs2) < FIRST_PSEUDO_REGISTER)))\n \treturn 0;\n@@ -4729,17 +4729,17 @@ emit_save_or_restore_regs (unsigned int low, unsigned int high, rtx base,\n \n \t  if (reg0 && reg1)\n \t    {\n-\t      mode = i < 32 ? DImode : DFmode;\n+\t      mode = SPARC_INT_REG_P (i) ? DImode : DFmode;\n \t      regno = i;\n \t    }\n \t  else if (reg0)\n \t    {\n-\t      mode = i < 32 ? SImode : SFmode;\n+\t      mode = SPARC_INT_REG_P (i) ? SImode : SFmode;\n \t      regno = i;\n \t    }\n \t  else if (reg1)\n \t    {\n-\t      mode = i < 32 ? SImode : SFmode;\n+\t      mode = SPARC_INT_REG_P (i) ? SImode : SFmode;\n \t      regno = i + 1;\n \t      offset += 4;\n \t    }\n@@ -7794,7 +7794,7 @@ registers_ok_for_ldd_peep (rtx reg1, rtx reg2)\n     return 0;\n \n   /* Integer ldd is deprecated in SPARC V9 */\n-  if (TARGET_V9 && REGNO (reg1) < 32)\n+  if (TARGET_V9 && SPARC_INT_REG_P (REGNO (reg1)))\n     return 0;\n \n   return (REGNO (reg1) == REGNO (reg2) - 1);"}, {"sha": "76240f04eb14110c65e114c08b8ea78d775855be", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5a53588ff09224348d467976fb196225ecf9c8d9", "patch": "@@ -597,6 +597,8 @@ extern enum cmodel sparc_cmodel;\n \n #define FIRST_PSEUDO_REGISTER 103\n \n+#define SPARC_FIRST_INT_REG     0\n+#define SPARC_LAST_INT_REG     31\n #define SPARC_FIRST_FP_REG     32\n /* Additional V9 fp regs.  */\n #define SPARC_FIRST_V9_FP_REG  64\n@@ -614,6 +616,10 @@ extern enum cmodel sparc_cmodel;\n #define SPARC_FP_REG_P(REGNO) \\\n ((REGNO) >= SPARC_FIRST_FP_REG && (REGNO) <= SPARC_LAST_V9_FP_REG)\n \n+/* Nonzero if REGNO is an int reg.  */\n+#define SPARC_INT_REG_P(REGNO) \\\n+(((unsigned) (REGNO)) <= SPARC_LAST_INT_REG)\n+\n /* Argument passing regs.  */\n #define SPARC_OUTGOING_INT_ARG_FIRST 8\n #define SPARC_INCOMING_INT_ARG_FIRST (TARGET_FLAT ? 8 : 24)\n@@ -703,7 +709,7 @@ extern enum cmodel sparc_cmodel;\n #define HARD_REGNO_NREGS(REGNO, MODE) \\\n   ((REGNO) == SPARC_GSR_REG ? 1 :\t\t\t\t\t\\\n    (TARGET_ARCH64\t\t\t\t\t\t\t\\\n-    ? ((REGNO) < 32 || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\\\n+    ? (SPARC_INT_REG_P (REGNO) || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\\\n        ? (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD\t\\\n        : (GET_MODE_SIZE (MODE) + 3) / 4)\t\t\t\t\\\n     : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)))\n@@ -1382,8 +1388,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    has been allocated, which happens in local-alloc.c.  */\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n-((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < (unsigned)32\t\\\n- || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\t\\\n+(SPARC_INT_REG_P (REGNO) || SPARC_INT_REG_P (reg_renumber[REGNO]) \\\n+ || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\t  \\\n  || reg_renumber[REGNO] == FRAME_POINTER_REGNUM)\n \n #define REGNO_OK_FOR_BASE_P(REGNO)  REGNO_OK_FOR_INDEX_P (REGNO)"}, {"sha": "c6454f5d4ac6197269ba20aec612dfda945098bd", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a53588ff09224348d467976fb196225ecf9c8d9/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5a53588ff09224348d467976fb196225ecf9c8d9", "patch": "@@ -1794,10 +1794,10 @@\n    && (! TARGET_V9\n        || (! TARGET_ARCH64\n            && ((GET_CODE (operands[0]) == REG\n-                && REGNO (operands[0]) < 32)\n+                && SPARC_INT_REG_P (REGNO (operands[0])))\n                || (GET_CODE (operands[0]) == SUBREG\n                    && GET_CODE (SUBREG_REG (operands[0])) == REG\n-                   && REGNO (SUBREG_REG (operands[0])) < 32))))\"\n+                   && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))))\"\n   [(clobber (const_int 0))]\n {\n   emit_insn (gen_movsi (gen_highpart (SImode, operands[0]),\n@@ -1827,10 +1827,10 @@\n    && (! TARGET_V9\n        || (! TARGET_ARCH64\n            && ((GET_CODE (operands[0]) == REG\n-                && REGNO (operands[0]) < 32)\n+                && SPARC_INT_REG_P (REGNO (operands[0])))\n                || (GET_CODE (operands[0]) == SUBREG\n                    && GET_CODE (SUBREG_REG (operands[0])) == REG\n-                   && REGNO (SUBREG_REG (operands[0])) < 32))))\"\n+                   && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))))\"\n   [(clobber (const_int 0))]\n {\n   rtx set_dest = operands[0];\n@@ -2050,7 +2050,7 @@\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n         (match_operand:SF 1 \"fp_const_high_losum_operand\" \"\"))]\n-  \"REG_P (operands[0]) && REGNO (operands[0]) < 32\"\n+  \"REG_P (operands[0]) && SPARC_INT_REG_P (REGNO (operands[0]))\"\n   [(set (match_dup 0) (high:SF (match_dup 1)))\n    (set (match_dup 0) (lo_sum:SF (match_dup 0) (match_dup 1)))])\n \n@@ -2184,7 +2184,7 @@\n         (match_operand:DF 1 \"const_double_operand\" \"\"))]\n   \"TARGET_FPU\n    && (GET_CODE (operands[0]) == REG\n-       && REGNO (operands[0]) < 32)\n+       && SPARC_INT_REG_P (REGNO (operands[0])))\n    && ! const_zero_operand (operands[1], GET_MODE (operands[0]))\n    && reload_completed\"\n   [(clobber (const_int 0))]\n@@ -2240,10 +2240,10 @@\n   \"(! TARGET_V9\n     || (! TARGET_ARCH64\n         && ((GET_CODE (operands[0]) == REG\n-             && REGNO (operands[0]) < 32)\n+             && SPARC_INT_REG_P (REGNO (operands[0])))\n             || (GET_CODE (operands[0]) == SUBREG\n                 && GET_CODE (SUBREG_REG (operands[0])) == REG\n-                && REGNO (SUBREG_REG (operands[0])) < 32))))\n+                && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))))\n    && reload_completed\"\n   [(clobber (const_int 0))]\n {\n@@ -2346,10 +2346,10 @@\n   \"reload_completed\n    && ! TARGET_ARCH64\n    && ((GET_CODE (operands[0]) == REG\n-\t&& REGNO (operands[0]) < 32)\n+\t&& SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n \t   && GET_CODE (SUBREG_REG (operands[0])) == REG\n-\t   && REGNO (SUBREG_REG (operands[0])) < 32))\"\n+\t   && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))\"\n   [(clobber (const_int 0))]\n {\n   rtx set_dest = operands[0];\n@@ -4654,10 +4654,10 @@\n   \"#\"\n   \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n-        && REGNO (operands[0]) < 32)\n+        && SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n            && GET_CODE (SUBREG_REG (operands[0])) == REG\n-           && REGNO (SUBREG_REG (operands[0])) < 32))\"\n+           && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))\"\n   [(set (match_dup 3) (and:SI (not:SI (match_dup 4)) (match_dup 5)))\n    (set (match_dup 6) (and:SI (not:SI (match_dup 7)) (match_dup 8)))]\n   \"operands[3] = gen_highpart (SImode, operands[0]);\n@@ -4731,10 +4731,10 @@\n   \"#\"\n   \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n-        && REGNO (operands[0]) < 32)\n+        && SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n            && GET_CODE (SUBREG_REG (operands[0])) == REG\n-           && REGNO (SUBREG_REG (operands[0])) < 32))\"\n+           && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))\"\n   [(set (match_dup 3) (ior:SI (not:SI (match_dup 4)) (match_dup 5)))\n    (set (match_dup 6) (ior:SI (not:SI (match_dup 7)) (match_dup 8)))]\n   \"operands[3] = gen_highpart (SImode, operands[0]);\n@@ -4821,10 +4821,10 @@\n   \"! TARGET_ARCH64\n    && reload_completed\n    && ((GET_CODE (operands[0]) == REG\n-        && REGNO (operands[0]) < 32)\n+        && SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n            && GET_CODE (SUBREG_REG (operands[0])) == REG\n-           && REGNO (SUBREG_REG (operands[0])) < 32))\"\n+           && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))\"\n   [(set (match_dup 4) (match_op_dup:SI 1 [(match_dup 6) (match_dup 8)]))\n    (set (match_dup 5) (match_op_dup:SI 1 [(match_dup 7) (match_dup 9)]))]\n {\n@@ -4856,10 +4856,10 @@\n   \"#\"\n   \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n-        && REGNO (operands[0]) < 32)\n+        && SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n            && GET_CODE (SUBREG_REG (operands[0])) == REG\n-           && REGNO (SUBREG_REG (operands[0])) < 32))\"\n+           && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))\"\n   [(set (match_dup 3) (not:SI (xor:SI (match_dup 4) (match_dup 5))))\n    (set (match_dup 6) (not:SI (xor:SI (match_dup 7) (match_dup 8))))]\n   \"operands[3] = gen_highpart (SImode, operands[0]);\n@@ -5133,10 +5133,10 @@\n   \"#\"\n   \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n-        && REGNO (operands[0]) < 32)\n+        && SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n            && GET_CODE (SUBREG_REG (operands[0])) == REG\n-           && REGNO (SUBREG_REG (operands[0])) < 32))\"\n+           && SPARC_INT_REG_P (REGNO (SUBREG_REG (operands[0])))))\"\n   [(set (match_dup 2) (not:SI (xor:SI (match_dup 3) (const_int 0))))\n    (set (match_dup 4) (not:SI (xor:SI (match_dup 5) (const_int 0))))]\n   \"operands[2] = gen_highpart (SImode, operands[0]);"}]}