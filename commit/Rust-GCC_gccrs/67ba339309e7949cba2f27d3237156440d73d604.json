{"sha": "67ba339309e7949cba2f27d3237156440d73d604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiYTMzOTMwOWU3OTQ5Y2JhMmYyN2QzMjM3MTU2NDQwZDczZDYwNA==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.vnet.ibm.com", "date": "2017-10-18T09:10:09Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@gcc.gnu.org", "date": "2017-10-18T09:10:09Z"}, "message": "S/390: Handle long-running instructions.\n\ngcc/ChangeLog:\n\n2017-10-18  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (NUM_SIDES): New variable.\n\t(LONGRUNNING_THRESHOLD): New variable.\n\t(LATENCY_FACTOR): New variable.\n\t(s390_sched_score): Decrease score for long-running instructions on\n\twrong side.\n\t(s390_sched_variable_issue): Perform bookkeeping for long-running\n\tinstructions.\n\nFrom-SVN: r253849", "tree": {"sha": "525ddcf69aded4837b88648b144047e78df00821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/525ddcf69aded4837b88648b144047e78df00821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67ba339309e7949cba2f27d3237156440d73d604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ba339309e7949cba2f27d3237156440d73d604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ba339309e7949cba2f27d3237156440d73d604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ba339309e7949cba2f27d3237156440d73d604/comments", "author": {"login": "rdapp1", "id": 22046046, "node_id": "MDQ6VXNlcjIyMDQ2MDQ2", "avatar_url": "https://avatars.githubusercontent.com/u/22046046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp1", "html_url": "https://github.com/rdapp1", "followers_url": "https://api.github.com/users/rdapp1/followers", "following_url": "https://api.github.com/users/rdapp1/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp1/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp1/subscriptions", "organizations_url": "https://api.github.com/users/rdapp1/orgs", "repos_url": "https://api.github.com/users/rdapp1/repos", "events_url": "https://api.github.com/users/rdapp1/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee077fcb8cdb4b4b54e4e7363eec401607c08c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee077fcb8cdb4b4b54e4e7363eec401607c08c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee077fcb8cdb4b4b54e4e7363eec401607c08c2c"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "5850f0035dcb76ea8d75c9273d480447d57ce3fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ba339309e7949cba2f27d3237156440d73d604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ba339309e7949cba2f27d3237156440d73d604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67ba339309e7949cba2f27d3237156440d73d604", "patch": "@@ -1,3 +1,13 @@\n+2017-10-18  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (NUM_SIDES): New variable.\n+\t(LONGRUNNING_THRESHOLD): New variable.\n+\t(LATENCY_FACTOR): New variable.\n+\t(s390_sched_score): Decrease score for long-running instructions on\n+\twrong side.\n+\t(s390_sched_variable_issue): Perform bookkeeping for long-running\n+\tinstructions.\n+\n 2017-10-18  Richard Biener  <rguenther@suse.de>\n \n \t* graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):"}, {"sha": "021993f79421dad2f7c10fb20810c52f943599fc", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ba339309e7949cba2f27d3237156440d73d604/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ba339309e7949cba2f27d3237156440d73d604/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=67ba339309e7949cba2f27d3237156440d73d604", "patch": "@@ -355,6 +355,18 @@ static rtx_insn *last_scheduled_insn;\n #define MAX_SCHED_UNITS 3\n static int last_scheduled_unit_distance[MAX_SCHED_UNITS];\n \n+#define NUM_SIDES 2\n+static int current_side = 1;\n+#define LONGRUNNING_THRESHOLD 5\n+\n+/* Estimate of number of cycles a long-running insn occupies an\n+   execution unit.  */\n+static unsigned fxu_longrunning[NUM_SIDES];\n+static unsigned vfu_longrunning[NUM_SIDES];\n+\n+/* Factor to scale latencies by, determined by measurements.  */\n+#define LATENCY_FACTOR 4\n+\n /* The maximum score added for an instruction whose unit hasn't been\n    in use for MAX_SCHED_MIX_DISTANCE steps.  Increase this value to\n    give instruction mix scheduling more priority over instruction\n@@ -14755,7 +14767,24 @@ s390_sched_score (rtx_insn *insn)\n \tif (m & unit_mask)\n \t  score += (last_scheduled_unit_distance[i] * MAX_SCHED_MIX_SCORE /\n \t\t    MAX_SCHED_MIX_DISTANCE);\n+\n+      unsigned latency = insn_default_latency (insn);\n+\n+      int other_side = 1 - current_side;\n+\n+      /* Try to delay long-running insns when side is busy.  */\n+      if (latency > LONGRUNNING_THRESHOLD)\n+\t{\n+\t  if (get_attr_z13_unit_fxu (insn) && fxu_longrunning[current_side]\n+\t      && fxu_longrunning[other_side] <= fxu_longrunning[current_side])\n+\t    score = MAX (0, score - 10);\n+\n+\t  if (get_attr_z13_unit_vfu (insn) && vfu_longrunning[current_side]\n+\t      && vfu_longrunning[other_side] <= vfu_longrunning[current_side])\n+\t    score = MAX (0, score - 10);\n+\t}\n     }\n+\n   return score;\n }\n \n@@ -14874,12 +14903,19 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n {\n   last_scheduled_insn = insn;\n \n+  bool starts_group = false;\n+\n   if (s390_tune >= PROCESSOR_2827_ZEC12\n       && reload_completed\n       && recog_memoized (insn) >= 0)\n     {\n       unsigned int mask = s390_get_sched_attrmask (insn);\n \n+      if ((mask & S390_SCHED_ATTR_MASK_CRACKED) != 0\n+\t  || (mask & S390_SCHED_ATTR_MASK_EXPANDED) != 0\n+\t  || (mask & S390_SCHED_ATTR_MASK_GROUPALONE) != 0)\n+\tstarts_group = true;\n+\n       if ((mask & S390_SCHED_ATTR_MASK_CRACKED) != 0\n \t  || (mask & S390_SCHED_ATTR_MASK_EXPANDED) != 0)\n \ts390_sched_state = S390_SCHED_STATE_CRACKED;\n@@ -14892,14 +14928,15 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n \t  switch (s390_sched_state)\n \t    {\n \t    case 0:\n+\t      starts_group = true;\n+\t      /* fallthrough */\n \t    case 1:\n \t    case 2:\n+\t      s390_sched_state++;\n+\t      break;\n \t    case S390_SCHED_STATE_NORMAL:\n-\t      if (s390_sched_state == S390_SCHED_STATE_NORMAL)\n-\t\ts390_sched_state = 1;\n-\t      else\n-\t\ts390_sched_state++;\n-\n+\t      starts_group = true;\n+\t      s390_sched_state = 1;\n \t      break;\n \t    case S390_SCHED_STATE_CRACKED:\n \t      s390_sched_state = S390_SCHED_STATE_NORMAL;\n@@ -14922,6 +14959,27 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n \t      last_scheduled_unit_distance[i]++;\n \t}\n \n+      /* If this insn started a new group, the side flipped.  */\n+      if (starts_group)\n+\tcurrent_side = current_side ? 0 : 1;\n+\n+      for (int i = 0; i < 2; i++)\n+\t{\n+\t  if (fxu_longrunning[i] >= 1)\n+\t    fxu_longrunning[i] -= 1;\n+\t  if (vfu_longrunning[i] >= 1)\n+\t    vfu_longrunning[i] -= 1;\n+\t}\n+\n+      unsigned latency = insn_default_latency (insn);\n+      if (latency > LONGRUNNING_THRESHOLD)\n+\t{\n+\t  if (get_attr_z13_unit_fxu (insn))\n+\t    fxu_longrunning[current_side] = latency * LATENCY_FACTOR;\n+\t  else\n+\t    vfu_longrunning[current_side] = latency * LATENCY_FACTOR;\n+\t}\n+\n       if (verbose > 5)\n \t{\n \t  unsigned int sched_mask;"}]}