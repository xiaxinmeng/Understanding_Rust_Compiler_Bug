{"sha": "e564021e4c225420cd8986e9a7a42efe741f92d1", "node_id": "C_kwDOANBUbNoAKGU1NjQwMjFlNGMyMjU0MjBjZDg5ODZlOWE3YTQyZWZlNzQxZjkyZDE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-30T17:52:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-30T17:52:49Z"}, "message": "aarch64: Fix C++ ICEs with _Float16 and __fp16 [PR107080]\n\nOn Fri, Sep 30, 2022 at 09:54:49AM -0400, Jason Merrill wrote:\n> > Note, there is one further problem on aarch64/arm, types with HFmode\n> > (_Float16 and __fp16) are there mangled as Dh (which is standard\n> > Itanium mangling:\n> >                   ::= Dh # IEEE 754r half-precision floating point (16 bits)\n> >                   ::= DF <number> _ # ISO/IEC TS 18661 binary floating point type _FloatN (N bits)\n> > so in theory is also ok, but DF16_ is more specific.  Should we just\n> > change Dh to DF16_ in those backends, or should __fp16 there be distinct\n> > type from _Float16 where __fp16 would mangle Dh and _Float16 DF16_ ?\n>\n> You argued for keeping __float128 separate from _Float128, does the same\n> argument not apply to this case?\n\nActually, they already were distinct types that just mangled the same.\nSo the same issue that had to be solved on i?86, ia64 and rs6000 for\n_Float64x vs. long double is a problem on arm and aarch64 with _Float16\nvs. __fp16.\nThe following patch fixes it so far for aarch64.\n\n2022-09-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/107080\n\t* config/aarch64/aarch64.cc (aarch64_mangle_type): Mangle just __fp16\n\tas Dh and _Float16 as DF16_.\n\n\t* g++.target/aarch64/pr107080.C: New test.", "tree": {"sha": "e417ac6726a7443fc7930be69bed19ce3e9525c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e417ac6726a7443fc7930be69bed19ce3e9525c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e564021e4c225420cd8986e9a7a42efe741f92d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e564021e4c225420cd8986e9a7a42efe741f92d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e564021e4c225420cd8986e9a7a42efe741f92d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e564021e4c225420cd8986e9a7a42efe741f92d1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "a8845a55b9e73ae74e8980722f1307cca60b08fb", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e564021e4c225420cd8986e9a7a42efe741f92d1/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e564021e4c225420cd8986e9a7a42efe741f92d1/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=e564021e4c225420cd8986e9a7a42efe741f92d1", "patch": "@@ -20664,6 +20664,8 @@ aarch64_mangle_type (const_tree type)\n   /* Half-precision floating point types.  */\n   if (TREE_CODE (type) == REAL_TYPE && TYPE_PRECISION (type) == 16)\n     {\n+      if (TYPE_MAIN_VARIANT (type) == float16_type_node)\n+\treturn NULL;\n       if (TYPE_MODE (type) == BFmode)\n \treturn \"u6__bf16\";\n       else"}, {"sha": "28212c026ab428d5fb52e3f9050d3540f4c69f53", "filename": "gcc/testsuite/g++.target/aarch64/pr107080.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e564021e4c225420cd8986e9a7a42efe741f92d1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr107080.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e564021e4c225420cd8986e9a7a42efe741f92d1/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr107080.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fpr107080.C?ref=e564021e4c225420cd8986e9a7a42efe741f92d1", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/107080\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+template <typename T, typename T1> \n+int\n+foo (T x, T1 y)\n+{\n+  return 3;\n+}\n+\n+int\n+main ()\n+{\n+  return (foo (0.0f16, 0.0f16) + foo (0.0f16, (__fp16) 0.0)) != 6;\n+}\n+\n+// { dg-final { scan-assembler \"_Z3fooIDF16_DF16_EiT_T0_\" } }\n+// { dg-final { scan-assembler \"_Z3fooIDF16_DhEiT_T0_\" } }"}]}