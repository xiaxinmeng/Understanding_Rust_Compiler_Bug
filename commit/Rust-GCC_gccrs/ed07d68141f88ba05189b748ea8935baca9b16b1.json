{"sha": "ed07d68141f88ba05189b748ea8935baca9b16b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwN2Q2ODE0MWY4OGJhMDUxODliNzQ4ZWE4OTM1YmFjYTliMTZiMQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T16:41:23Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T16:41:23Z"}, "message": "rs6000: Add vcfuged instruction\n\nAdd the new vector centrifuge-doubleword instruction and built-in\nfunction access.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_cfuge): New #define.\n\t* config/rs6000/altivec.md (UNSPEC_VCFUGED): New constant.\n\t(vcfuged): New insn.\n\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vcfuged):\n\tNew built-in function.\n\t* config/rs6000/rs6000-call.c (builtin_function_type): Add\n\thandling for FUTURE_BUILTIN_VCFUGED case.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n\tfor a Future Architecture): Add description of vec_cfuge built-in\n\tfunction.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-cfuged-0.c: New test.\n\t* gcc.target/powerpc/vec-cfuged-1.c: New test.", "tree": {"sha": "61d4fa9ddd04d2a32a8379c46eeee7a7bac508a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d4fa9ddd04d2a32a8379c46eeee7a7bac508a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed07d68141f88ba05189b748ea8935baca9b16b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed07d68141f88ba05189b748ea8935baca9b16b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed07d68141f88ba05189b748ea8935baca9b16b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed07d68141f88ba05189b748ea8935baca9b16b1/comments", "author": null, "committer": null, "parents": [{"sha": "2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2403d3d7a5e4878f211d868fd4b76a4b70ce2a54"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "7933c2c3a6f8c5ad319189c60601c01cb0f19ecf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -1,3 +1,16 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_cfuge): New #define.\n+\t* config/rs6000/altivec.md (UNSPEC_VCFUGED): New constant.\n+\t(vcfuged): New insn.\n+\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vcfuged):\n+\tNew built-in function.\n+\t* config/rs6000/rs6000-call.c (builtin_function_type): Add\n+\thandling for FUTURE_BUILTIN_VCFUGED case.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n+\tfor a Future Architecture): Add description of vec_cfuge built-in\n+\tfunction.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000-builtin.def (BU_FUTURE_MISC_0): New"}, {"sha": "0ecd961485baa85577c1f55c886d5c5dcf75630a", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -693,6 +693,7 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_ctzm(a, b)\t__builtin_altivec_vctzdm (a, b)\n #define vec_pdep(a, b)\t__builtin_altivec_vpdepd (a, b)\n #define vec_pext(a, b)\t__builtin_altivec_vpextd (a, b)\n+#define vec_cfuge(a, b)\t__builtin_altivec_vcfuged (a, b)\n \n /* Overloaded built-in functions for future architecture.  */\n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)"}, {"sha": "1400724fb582929017ef99789700198bb8b9761d", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -160,6 +160,7 @@\n    UNSPEC_BCD_OVERFLOW\n    UNSPEC_VRLMI\n    UNSPEC_VRLNM\n+   UNSPEC_VCFUGED\n    UNSPEC_VCLZDM\n    UNSPEC_VCTZDM\n    UNSPEC_VGNB\n@@ -4101,6 +4102,15 @@\n   \"bcd<bcd_add_sub>. %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"vcfuged\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VCFUGED))]\n+   \"TARGET_FUTURE\"\n+   \"vcfuged %0,%1,%2\"\n+   [(set_attr \"type\" \"vecsimple\")])\n+\n (define_insn \"vclzdm\"\n   [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")"}, {"sha": "9d80d03fe5047ae5eb30b068a670afcb857fa28b", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -2577,6 +2577,7 @@ BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n BU_FUTURE_MISC_2 (CFUGED, \"cfuged\", CONST, cfuged)\n \n /* Future architecture vector built-ins.  */\n+BU_FUTURE_V_2 (VCFUGED, \"vcfuged\", CONST, vcfuged)\n BU_FUTURE_V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n BU_FUTURE_V_2 (VPDEPD, \"vpdepd\", CONST, vpdepd)"}, {"sha": "c3ba6b93c46af800fe27f45f38054681be46b898", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -12951,6 +12951,7 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P8V_BUILTIN_ORC_V4SI_UNS:\n     case P8V_BUILTIN_ORC_V2DI_UNS:\n     case P8V_BUILTIN_ORC_V1TI_UNS:\n+    case FUTURE_BUILTIN_VCFUGED:\n     case FUTURE_BUILTIN_VCLZDM:\n     case FUTURE_BUILTIN_VCTZDM:\n     case FUTURE_BUILTIN_VGNB:"}, {"sha": "f7b30c7ead744469b425f2e5960c46fdc2ecd782", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -20719,6 +20719,15 @@ PowerPC family of processors, starting with a hypothetical CPU\n which may or may not be available in the future\n (@option{-mcpu=future}) or later:\n \n+\n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_cfuge (vector unsigned long long int, vector unsigned long long int)\n+@end smallexample\n+Perform a vector centrifuge operation, as if implemented by the Future\n+@code{vcfuged} instruction.\n+@findex vec_cfuge\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_clzm (vector unsigned long long int, vector unsigned long long int)"}, {"sha": "8bd3ef092afc3da04aff3a5ae2cb03683511fc4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -1,3 +1,8 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-cfuged-0.c: New test.\n+\t* gcc.target/powerpc/vec-cfuged-1.c: New test.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target.powerpc/cfuged-0.c: New test."}, {"sha": "74528a4f76296dfe3cd017256b070901857cbcd0", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cfuged-0.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cfuged-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cfuged-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cfuged-0.c?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_cfuge (vector unsigned long long int source,\n+\t      vector unsigned long long int mask)\n+{\n+  return vec_cfuge (source, mask);\n+}\n+\n+int\n+vectors_equal (vector unsigned long long int a,\n+\t       vector unsigned long long int b)\n+{\n+  return (a[0] == b[0]) && (a[1] == b[1]);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See cfuged-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0x7e3ca5f0ull, 0x7e3ca5f0ull };\n+  vector unsigned long long int result_ab = { 0xaf7350ecull, 0xec5073afull };\n+  vector unsigned long long int result_ba = { 0xf07e3ca5ull, 0x5a0fe7c3ull };\n+  vector unsigned long long int result_bb = { 0x3af7c50eull, 0xaf7350ecull };\n+\n+  if (!vectors_equal (do_vec_cfuge (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vectors_equal (do_vec_cfuge (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vectors_equal (do_vec_cfuge (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vectors_equal (do_vec_cfuge (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvcfuged\\M} } } */"}, {"sha": "2c8013544e297e148436744d84d350b966406990", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cfuged-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cfuged-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed07d68141f88ba05189b748ea8935baca9b16b1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cfuged-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cfuged-1.c?ref=ed07d68141f88ba05189b748ea8935baca9b16b1", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_cfuge (vector unsigned long long int source,\n+\t      vector unsigned long long int mask)\n+{\n+  return vec_cfuge (source, mask);\n+}\n+\n+int\n+vectors_equal (vector unsigned long long int a,\n+\t       vector unsigned long long int b)\n+{\n+  return (a[0] == b[0]) && (a[1] == b[1]);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See cfuged-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0x7e3ca5f0ull, 0x7e3ca5f0ull };\n+  vector unsigned long long int result_ab = { 0xaf7350ecull, 0xec5073afull };\n+  vector unsigned long long int result_ba = { 0xf07e3ca5ull, 0x5a0fe7c3ull };\n+  vector unsigned long long int result_bb = { 0x3af7c50eull, 0xaf7350ecull };\n+\n+  if (!vectors_equal (do_vec_cfuge (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vectors_equal (do_vec_cfuge (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vectors_equal (do_vec_cfuge (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vectors_equal (do_vec_cfuge (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}"}]}