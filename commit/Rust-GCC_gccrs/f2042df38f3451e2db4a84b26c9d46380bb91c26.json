{"sha": "f2042df38f3451e2db4a84b26c9d46380bb91c26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwNDJkZjM4ZjM0NTFlMmRiNGE4NGIyNmM5ZDQ2MzgwYmI5MWMyNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-06-13T00:54:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-06-13T00:54:41Z"}, "message": "i386.c (ix86_expand_prologue): Always use gen_pro_epilogue_adjust_stack; update arguments.\n\n        * config/i386/i386.c (ix86_expand_prologue): Always use\n        gen_pro_epilogue_adjust_stack; update arguments.\n        (ix86_expand_epilogue): Likewise.\n        (ix86_emit_epilogue_esp_adjustment): Remove.\n        (ix86_adjust_cost): Remove pro_epilogue_adjust_stack hack.\n        * config/i386/i386.md (pro_epilogue_adjust_stack): Use a BLKmode\n        clobber of scratch memory instead of a modification of EBP as the\n        barrier.  Update all peepholes to match.\n\nFrom-SVN: r43284", "tree": {"sha": "0352a05b674d9b3b8f9eaa1fa77180c8ae2caba3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0352a05b674d9b3b8f9eaa1fa77180c8ae2caba3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2042df38f3451e2db4a84b26c9d46380bb91c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2042df38f3451e2db4a84b26c9d46380bb91c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2042df38f3451e2db4a84b26c9d46380bb91c26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2042df38f3451e2db4a84b26c9d46380bb91c26/comments", "author": null, "committer": null, "parents": [{"sha": "757e4f2317d6d24374757c975107c12ceb2d6b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757e4f2317d6d24374757c975107c12ceb2d6b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757e4f2317d6d24374757c975107c12ceb2d6b26"}], "stats": {"total": 186, "additions": 79, "deletions": 107}, "files": [{"sha": "ea30da29afb0d113da18e20a323502244925690e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2042df38f3451e2db4a84b26c9d46380bb91c26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2042df38f3451e2db4a84b26c9d46380bb91c26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2042df38f3451e2db4a84b26c9d46380bb91c26", "patch": "@@ -1,3 +1,14 @@\n+2001-06-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_prologue): Always use\n+\tgen_pro_epilogue_adjust_stack; update arguments.\n+\t(ix86_expand_epilogue): Likewise.\n+\t(ix86_emit_epilogue_esp_adjustment): Remove.\n+\t(ix86_adjust_cost): Remove pro_epilogue_adjust_stack hack.\n+\t* config/i386/i386.md (pro_epilogue_adjust_stack): Use a BLKmode\n+\tclobber of scratch memory instead of a modification of EBP as the\n+\tbarrier.  Update all peepholes to match.\n+\n 2001-06-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/gcc.texi: Change the font used for @def... commands to a\n@@ -132,18 +143,18 @@ Tue Jun 12 12:20:12 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* config/m32r/m32r.md (movstrsi_internal): Do not expect a\n \treturn string from m32r_output_block_move.\n-        * config/m32r/m32r-protos.h: Make m32r_output_block_move a\n+\t* config/m32r/m32r-protos.h: Make m32r_output_block_move a\n \tvoid function.\n-        * config/m32r/m32r.h (INT32_P): Rename to UNIT32_P and remove\n+\t* config/m32r/m32r.h (INT32_P): Rename to UNIT32_P and remove\n \tinteger overflow.\n-        (ROUND_ADVANCE): Remove signed/unsigned conflict.\n-        * config/m32r/m32r.c: Declare prototypes for static functions.\n-        (move_src_operand): Replace INT32_P with UINT32_P.\n-        (function_arg_partial_nregs): Fixed signed/unsigned conflict\n+\t(ROUND_ADVANCE): Remove signed/unsigned conflict.\n+\t* config/m32r/m32r.c: Declare prototypes for static functions.\n+\t(move_src_operand): Replace INT32_P with UINT32_P.\n+\t(function_arg_partial_nregs): Fixed signed/unsigned conflict\n \tin initialisation of 'size'.\n-        (m32r_sched_reord): Remove redundant declarations of 'code'.\n-        (m32r_output_block_move): Change to a void function.\n-        (m32r_encode_section_info): Cast return of\n+\t(m32r_sched_reord): Remove redundant declarations of 'code'.\n+\t(m32r_output_block_move): Change to a void function.\n+\t(m32r_encode_section_info): Cast return of\n \tTREE_STRING_POINTER to avoid compile time warning.\n \n 2001-06-11  Richard Henderson  <rth@redhat.com>"}, {"sha": "cf60049447c23449baffe57ebd12fa0037f95190", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 51, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2042df38f3451e2db4a84b26c9d46380bb91c26/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2042df38f3451e2db4a84b26c9d46380bb91c26/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f2042df38f3451e2db4a84b26c9d46380bb91c26", "patch": "@@ -561,7 +561,6 @@ static int ix86_safe_length_prefix PARAMS ((rtx));\n static int ix86_nsaved_regs PARAMS((void));\n static void ix86_emit_save_regs PARAMS((void));\n static void ix86_emit_restore_regs_using_mov PARAMS ((rtx, int, int));\n-static void ix86_emit_epilogue_esp_adjustment PARAMS((int));\n static void ix86_set_move_mem_attrs_1 PARAMS ((rtx, rtx, rtx, rtx, rtx));\n static void ix86_sched_reorder_pentium PARAMS((rtx *, rtx *));\n static void ix86_sched_reorder_ppro PARAMS((rtx *, rtx *));\n@@ -2497,17 +2496,9 @@ ix86_expand_prologue ()\n     ;\n   else if (! TARGET_STACK_PROBE || frame.to_allocate < CHECK_STACK_LIMIT)\n     {\n-      if (frame_pointer_needed)\n-\tinsn = emit_insn (gen_pro_epilogue_adjust_stack\n-\t\t\t  (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t           GEN_INT (-frame.to_allocate), hard_frame_pointer_rtx));\n-      else\n-\tif (TARGET_64BIT)\n-\t  insn = emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t\tGEN_INT (-frame.to_allocate)));\n-        else\n-\t  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t\tGEN_INT (-frame.to_allocate)));\n+      insn = emit_insn (gen_pro_epilogue_adjust_stack\n+\t\t\t(stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t GEN_INT (-frame.to_allocate)));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n   else\n@@ -2545,28 +2536,6 @@ ix86_expand_prologue ()\n     emit_insn (gen_blockage ());\n }\n \n-/* Emit code to add TSIZE to esp value.  Use POP instruction when\n-   profitable.  */\n-\n-static void\n-ix86_emit_epilogue_esp_adjustment (tsize)\n-     int tsize;\n-{\n-  /* If a frame pointer is present, we must be sure to tie the sp\n-     to the fp so that we don't mis-schedule.  */\n-  if (frame_pointer_needed)\n-    emit_insn (gen_pro_epilogue_adjust_stack (stack_pointer_rtx,\n-\t\t\t\t\t      stack_pointer_rtx,\n-\t\t\t\t\t      GEN_INT (tsize),\n-\t\t\t\t\t      hard_frame_pointer_rtx));\n-  else\n-    if (TARGET_64BIT)\n-      emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t     GEN_INT (tsize)));\n-    else\n-      emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t     GEN_INT (tsize)));\n-}\n \n /* Emit code to restore saved registers using MOV insns.  First register\n    is restored from POINTER + OFFSET.  */\n@@ -2662,8 +2631,7 @@ ix86_expand_epilogue (style)\n \t      emit_move_insn (hard_frame_pointer_rtx, tmp);\n \n \t      emit_insn (gen_pro_epilogue_adjust_stack\n-\t\t\t (stack_pointer_rtx, sa, const0_rtx,\n-\t\t\t  hard_frame_pointer_rtx));\n+\t\t\t (stack_pointer_rtx, sa, const0_rtx));\n \t    }\n \t  else\n \t    {\n@@ -2674,17 +2642,18 @@ ix86_expand_epilogue (style)\n \t    }\n \t}\n       else if (!frame_pointer_needed)\n-\tix86_emit_epilogue_esp_adjustment (frame.to_allocate\n-\t\t\t\t\t   + frame.nregs * UNITS_PER_WORD);\n+\temit_insn (gen_pro_epilogue_adjust_stack\n+\t\t   (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t    GEN_INT (frame.to_allocate\n+\t\t\t     + frame.nregs * UNITS_PER_WORD)));\n       /* If not an i386, mov & pop is faster than \"leave\".  */\n       else if (TARGET_USE_LEAVE || optimize_size)\n \temit_insn (TARGET_64BIT ? gen_leave_rex64 () : gen_leave ());\n       else\n \t{\n \t  emit_insn (gen_pro_epilogue_adjust_stack (stack_pointer_rtx,\n \t\t\t\t\t\t    hard_frame_pointer_rtx,\n-\t\t\t\t\t\t    const0_rtx,\n-\t\t\t\t\t\t    hard_frame_pointer_rtx));\n+\t\t\t\t\t\t    const0_rtx));\n \t  if (TARGET_64BIT)\n \t    emit_insn (gen_popdi1 (hard_frame_pointer_rtx));\n \t  else\n@@ -2701,11 +2670,12 @@ ix86_expand_epilogue (style)\n \t    abort ();\n           emit_insn (gen_pro_epilogue_adjust_stack (stack_pointer_rtx,\n \t\t\t\t\t\t    hard_frame_pointer_rtx,\n-\t\t\t\t\t\t    GEN_INT (offset),\n-\t\t\t\t\t\t    hard_frame_pointer_rtx));\n+\t\t\t\t\t\t    GEN_INT (offset)));\n \t}\n       else if (frame.to_allocate)\n-\tix86_emit_epilogue_esp_adjustment (frame.to_allocate);\n+\temit_insn (gen_pro_epilogue_adjust_stack\n+\t\t   (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t    GEN_INT (frame.to_allocate)));\n \n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \tif (ix86_save_reg (regno, false))\n@@ -8308,14 +8278,6 @@ ix86_adjust_cost (insn, link, dep_insn, cost)\n   insn_type = get_attr_type (insn);\n   dep_insn_type = get_attr_type (dep_insn);\n \n-  /* Prologue and epilogue allocators can have a false dependency on ebp.\n-     This results in one cycle extra stall on Pentium prologue scheduling,\n-     so handle this important case manually.  */\n-  if (dep_insn_code_number == CODE_FOR_pro_epilogue_adjust_stack\n-      && dep_insn_type == TYPE_ALU\n-      && !reg_mentioned_p (stack_pointer_rtx, insn))\n-    return 0;\n-\n   switch (ix86_cpu)\n     {\n     case PROCESSOR_PENTIUM:"}, {"sha": "f06c0b0478970329bafba9cf0f980573ba55fe94", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2042df38f3451e2db4a84b26c9d46380bb91c26/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2042df38f3451e2db4a84b26c9d46380bb91c26/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f2042df38f3451e2db4a84b26c9d46380bb91c26", "patch": "@@ -1679,7 +1679,7 @@\n (define_insn \"*pushsi2_prologue\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"general_no_elim_operand\" \"ri*m\"))\n-   (set (reg:SI 6) (reg:SI 6))]\n+   (clobber (mem:BLK (scratch)))]\n   \"!TARGET_64BIT\"\n   \"push{l}\\\\t%1\"\n   [(set_attr \"type\" \"push\")\n@@ -1690,7 +1690,7 @@\n \t(mem:SI (reg:SI 7)))\n    (set (reg:SI 7)\n \t(plus:SI (reg:SI 7) (const_int 4)))\n-   (set (reg:SI 6) (reg:SI 6))]\n+   (clobber (mem:BLK (scratch)))]\n   \"!TARGET_64BIT\"\n   \"pop{l}\\\\t%0\"\n   [(set_attr \"type\" \"pop\")\n@@ -2413,7 +2413,7 @@\n (define_insn \"*pushdi2_prologue_rex64\"\n   [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n \t(match_operand:DI 1 \"general_no_elim_operand\" \"re*m\"))\n-   (set (reg:DI 6) (reg:DI 6))]\n+   (clobber (mem:BLK (scratch)))]\n   \"TARGET_64BIT\"\n   \"push{q}\\\\t%1\"\n   [(set_attr \"type\" \"push\")\n@@ -2424,7 +2424,7 @@\n \t(mem:DI (reg:DI 7)))\n    (set (reg:DI 7)\n \t(plus:DI (reg:DI 7) (const_int 8)))\n-   (set (reg:DI 6) (reg:DI 6))]\n+   (clobber (mem:BLK (scratch)))]\n   \"TARGET_64BIT\"\n   \"pop{q}\\\\t%0\"\n   [(set_attr \"type\" \"pop\")\n@@ -13621,7 +13621,8 @@\n \n (define_insn \"leave\"\n   [(set (reg:SI 7) (reg:SI 6))\n-   (set (reg:SI 6) (mem:SI (pre_dec:SI (reg:SI 7))))]\n+   (set (reg:SI 6) (mem:SI (pre_dec:SI (reg:SI 7))))\n+   (clobber (mem:BLK (scratch)))]\n   \"!TARGET_64BIT\"\n   \"leave\"\n   [(set_attr \"length_immediate\" \"0\")\n@@ -13633,7 +13634,8 @@\n \n (define_insn \"leave_rex64\"\n   [(set (reg:DI 7) (reg:DI 6))\n-   (set (reg:DI 6) (mem:DI (pre_dec:DI (reg:DI 7))))]\n+   (set (reg:DI 6) (mem:DI (pre_dec:DI (reg:DI 7))))\n+   (clobber (mem:BLK (scratch)))]\n   \"TARGET_64BIT\"\n   \"leave\"\n   [(set_attr \"length_immediate\" \"0\")\n@@ -16141,16 +16143,15 @@\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t\t   (plus:SI (match_operand:SI 1 \"register_operand\" \"0,r\")\n \t\t\t    (match_operand:SI 2 \"immediate_operand\" \"i,i\")))\n-\t      (set (match_operand:SI 3 \"register_operand\" \"+r,r\")\n-\t\t   (match_dup 3))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n  \"\"\n  \"\n {\n   if (TARGET_64BIT)\n     {\n-      emit_insn (gen_pro_epilogue_adjust_stack_rex64 (operands[0], operands[1],\n-\t\t\t\t\t\t      operands[2], operands[3]));\n+      emit_insn (gen_pro_epilogue_adjust_stack_rex64\n+\t\t (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n }\")\n@@ -16159,9 +16160,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"0,r\")\n \t         (match_operand:SI 2 \"immediate_operand\" \"i,i\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"+r,r\")\n-\t(match_dup 3))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC 17))\n+   (clobber (mem:BLK (scratch)))]\n   \"!TARGET_64BIT\"\n   \"*\n {\n@@ -16202,9 +16202,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"0,r\")\n \t\t (match_operand:DI 2 \"x86_64_immediate_operand\" \"e,e\")))\n-   (set (match_operand:DI 3 \"register_operand\" \"+r,r\")\n-\t(match_dup 3))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC 17))\n+   (clobber (mem:BLK (scratch)))]\n   \"TARGET_64BIT\"\n   \"*\n {\n@@ -17108,23 +17107,23 @@\n (define_peephole2\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -4)))\n-\t      (set (reg:SI 6) (reg:SI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_SUB_ESP_4\"\n   [(clobber (match_dup 0))\n    (parallel [(set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 0))\n-\t      (set (reg:SI 6) (reg:SI 6))])])\n+\t      (clobber (mem:BLK (scratch)))])])\n \n (define_peephole2\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -8)))\n-\t      (set (reg:SI 6) (reg:SI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_SUB_ESP_8\"\n   [(clobber (match_dup 0))\n    (set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 0))\n    (parallel [(set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 0))\n-\t      (set (reg:SI 6) (reg:SI 6))])])\n+\t      (clobber (mem:BLK (scratch)))])])\n \n ;; Convert esp substractions to push.\n (define_peephole2\n@@ -17148,12 +17147,12 @@\n (define_peephole2\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))\n-\t      (set (reg:SI 6) (reg:SI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_ADD_ESP_4\"\n   [(parallel [(set (match_dup 0) (mem:SI (reg:SI 7)))\n \t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))\n-\t      (set (reg:SI 6) (reg:SI 6))])]\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"\")\n \n ;; Two pops case is tricky, since pop causes dependency on destination register.\n@@ -17162,25 +17161,25 @@\n   [(match_scratch:SI 0 \"r\")\n    (match_scratch:SI 1 \"r\")\n    (parallel [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 8)))\n-\t      (set (reg:SI 6) (reg:SI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_ADD_ESP_8\"\n   [(parallel [(set (match_dup 0) (mem:SI (reg:SI 7)))\n \t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))\n-\t      (set (reg:SI 6) (reg:SI 6))])\n+\t      (clobber (mem:BLK (scratch)))])\n    (parallel [(set (match_dup 1) (mem:SI (reg:SI 7)))\n \t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])]\n   \"\")\n \n (define_peephole2\n   [(match_scratch:SI 0 \"r\")\n    (parallel [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 8)))\n-\t      (set (reg:SI 6) (reg:SI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size\"\n   [(parallel [(set (match_dup 0) (mem:SI (reg:SI 7)))\n \t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))\n-\t      (set (reg:SI 6) (reg:SI 6))])\n+\t      (clobber (mem:BLK (scratch)))])\n    (parallel [(set (match_dup 0) (mem:SI (reg:SI 7)))\n \t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])]\n   \"\")\n@@ -17286,23 +17285,23 @@\n (define_peephole2\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -8)))\n-\t      (set (reg:DI 6) (reg:DI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_SUB_ESP_4\"\n   [(clobber (match_dup 0))\n    (parallel [(set (mem:DI (pre_dec:DI (reg:DI 7))) (match_dup 0))\n-\t      (set (reg:DI 6) (reg:DI 6))])])\n+\t      (clobber (mem:BLK (scratch)))])])\n \n (define_peephole2\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n-\t      (set (reg:DI 6) (reg:DI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_SUB_ESP_8\"\n   [(clobber (match_dup 0))\n    (set (mem:DI (pre_dec:DI (reg:DI 7))) (match_dup 0))\n    (parallel [(set (mem:DI (pre_dec:DI (reg:DI 7))) (match_dup 0))\n-\t      (set (reg:DI 6) (reg:DI 6))])])\n+\t      (clobber (mem:BLK (scratch)))])])\n \n ;; Convert esp substractions to push.\n (define_peephole2\n@@ -17326,12 +17325,12 @@\n (define_peephole2\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 8)))\n-\t      (set (reg:DI 6) (reg:DI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_ADD_ESP_4\"\n   [(parallel [(set (match_dup 0) (mem:DI (reg:DI 7)))\n \t      (set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 8)))\n-\t      (set (reg:DI 6) (reg:DI 6))])]\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"\")\n \n ;; Two pops case is tricky, since pop causes dependency on destination register.\n@@ -17340,25 +17339,25 @@\n   [(match_scratch:DI 0 \"r\")\n    (match_scratch:DI 1 \"r\")\n    (parallel [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 16)))\n-\t      (set (reg:DI 6) (reg:DI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size || !TARGET_ADD_ESP_8\"\n   [(parallel [(set (match_dup 0) (mem:DI (reg:DI 7)))\n \t      (set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 8)))\n-\t      (set (reg:DI 6) (reg:DI 6))])\n+\t      (clobber (mem:BLK (scratch)))])\n    (parallel [(set (match_dup 1) (mem:DI (reg:DI 7)))\n \t      (set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 8)))])]\n   \"\")\n \n (define_peephole2\n   [(match_scratch:DI 0 \"r\")\n    (parallel [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 16)))\n-\t      (set (reg:DI 6) (reg:DI 6))\n-\t      (clobber (reg:CC 17))])]\n+\t      (clobber (reg:CC 17))\n+\t      (clobber (mem:BLK (scratch)))])]\n   \"optimize_size\"\n   [(parallel [(set (match_dup 0) (mem:DI (reg:DI 7)))\n \t      (set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 8)))\n-\t      (set (reg:DI 6) (reg:DI 6))])\n+\t      (clobber (mem:BLK (scratch)))])\n    (parallel [(set (match_dup 0) (mem:DI (reg:DI 7)))\n \t      (set (reg:DI 7) (plus:DI (reg:DI 7) (const_int 8)))])]\n   \"\")"}]}