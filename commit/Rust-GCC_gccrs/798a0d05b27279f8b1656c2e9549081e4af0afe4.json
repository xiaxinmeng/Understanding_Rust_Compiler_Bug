{"sha": "798a0d05b27279f8b1656c2e9549081e4af0afe4", "node_id": "C_kwDOANBUbNoAKDc5OGEwZDA1YjI3Mjc5ZjhiMTY1NmMyZTk1NDkwODFlNGFmMGFmZTQ", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2023-01-13T15:36:49Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2023-01-13T15:38:27Z"}, "message": "arm: Add cde feature support for Cortex-M55 CPU.\n\nThis patch adds cde feature (optional) support for Cortex-M55 CPU, please refer\n[1] for more details. To use this feature we need to specify +cdecpN\n(e.g. -mcpu=cortex-m55+cdecp<N>), where N is the coprocessor number 0 to 7.\n\ngcc/ChangeLog:\n\n2023-01-13  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* common/config/arm/arm-common.cc (arm_canon_arch_option_1): Ignore cde\n\toptions for -mlibarch.\n\t* config/arm/arm-cpus.in (begin cpu cortex-m55): Add cde options.\n\t* doc/invoke.texi (CDE): Document options for Cortex-M55 CPU.\n\ngcc/testsuite/ChangeLog:\n\n2023-01-13  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/multilib.exp: Add multilib tests for Cortex-M55 CPU.", "tree": {"sha": "8462b57927ad31f61815b4eed0e508f0a0126064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8462b57927ad31f61815b4eed0e508f0a0126064"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798a0d05b27279f8b1656c2e9549081e4af0afe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798a0d05b27279f8b1656c2e9549081e4af0afe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798a0d05b27279f8b1656c2e9549081e4af0afe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798a0d05b27279f8b1656c2e9549081e4af0afe4/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3e8727b70f546dc82941391f3951188a0339e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e8727b70f546dc82941391f3951188a0339e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e8727b70f546dc82941391f3951188a0339e08"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "9ed6830417bbcc984f67237fe30beb5ebec76c00", "filename": "gcc/common/config/arm/arm-common.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.cc?ref=798a0d05b27279f8b1656c2e9549081e4af0afe4", "patch": "@@ -685,8 +685,10 @@ arm_canon_arch_option_1 (int argc, const char **argv, bool arch_for_multilib)\n   auto_sbitmap target_isa (isa_num_bits);\n   auto_sbitmap base_isa (isa_num_bits);\n   auto_sbitmap fpu_isa (isa_num_bits);\n+  auto_sbitmap ignore_multilib_isa (isa_num_bits);\n \n   bitmap_clear (fpu_isa);\n+  bitmap_clear (ignore_multilib_isa);\n \n   const arch_option *selected_arch = NULL;\n \n@@ -719,15 +721,6 @@ arm_canon_arch_option_1 (int argc, const char **argv, bool arch_for_multilib)\n       arm_initialize_isa (target_isa, selected_arch->common.isa_bits);\n       arm_parse_option_features (target_isa, &selected_arch->common,\n \t\t\t\t strchr (arch, '+'));\n-      if (arch_for_multilib)\n-\t{\n-\t  const enum isa_feature removable_bits[] = {ISA_IGNORE_FOR_MULTILIB,\n-\t\t\t\t\t\t     isa_nobit};\n-\t  sbitmap isa_bits = sbitmap_alloc (isa_num_bits);\n-\t  arm_initialize_isa (isa_bits, removable_bits);\n-\t  bitmap_and_compl (target_isa, target_isa, isa_bits);\n-\t}\n-\n       if (fpu && strcmp (fpu, \"auto\") != 0)\n \t{\n \t  /* We assume that architectures do not have any FPU bits\n@@ -806,6 +799,16 @@ arm_canon_arch_option_1 (int argc, const char **argv, bool arch_for_multilib)\n       bitmap_clear_bit (target_isa, isa_bit_vfpv2);\n     }\n \n+  /* Here we remove feature isa bits from -mlibarch string which are not\n+     necessary for multilib string comparsion.  */\n+  if ((arch || cpu) && arch_for_multilib)\n+    {\n+      const enum isa_feature removable_bits[] = {ISA_IGNORE_FOR_MULTILIB,\n+\t\t\t\t\t\t isa_nobit};\n+      arm_initialize_isa (ignore_multilib_isa, removable_bits);\n+      bitmap_and_compl (target_isa, target_isa, ignore_multilib_isa);\n+    }\n+\n   /* If we don't have a selected architecture by now, something's\n      badly wrong.  */\n   gcc_assert (selected_arch);"}, {"sha": "579cf35636632869947f37753bbf0ba79277808c", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=798a0d05b27279f8b1656c2e9549081e4af0afe4", "patch": "@@ -1644,6 +1644,14 @@ begin cpu cortex-m55\n  option nomve remove mve mve_float\n  option nofp remove ALL_FP mve_float\n  option nodsp remove MVE mve_float\n+ option cdecp0 add cdecp0\n+ option cdecp1 add cdecp1\n+ option cdecp2 add cdecp2\n+ option cdecp3 add cdecp3\n+ option cdecp4 add cdecp4\n+ option cdecp5 add cdecp5\n+ option cdecp6 add cdecp6\n+ option cdecp7 add cdecp7\n  isa quirk_no_asmcpu quirk_vlldm\n  costs v7m\n  vendor 41"}, {"sha": "0b0bdb63436e5a63b12a06c3c6cd5544cc54c808", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=798a0d05b27279f8b1656c2e9549081e4af0afe4", "patch": "@@ -22168,6 +22168,10 @@ floating-point instructions on @samp{cortex-m55}.\n Disable the M-Profile Vector Extension (MVE) single precision floating-point\n instructions on @samp{cortex-m55}.\n \n+@item +cdecp0, +cdecp1, ... , +cdecp7\n+Enable the Custom Datapath Extension (CDE) on selected coprocessors according\n+to the numbers given in the options in the range 0 to 7 on @samp{cortex-m55}.\n+\n @item  +nofp\n Disables the floating-point instructions on @samp{arm9e},\n @samp{arm946e-s}, @samp{arm966e-s}, @samp{arm968e-s}, @samp{arm10e},"}, {"sha": "e9c9b9cf885155d9a7e4106161c570df1b57ffab", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798a0d05b27279f8b1656c2e9549081e4af0afe4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=798a0d05b27279f8b1656c2e9549081e4af0afe4", "patch": "@@ -854,6 +854,18 @@ if {[multilib_config \"rmprofile\"] } {\n \t{-mcpu=cortex-m55+nomve+nofp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n \t{-mcpu=cortex-m55+nodsp+nofp -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n \t{-mcpu=cortex-m55+nodsp+nofp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55 -mfloat-abi=hard -mfpu=auto} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55+cdecp0 -mfloat-abi=hard -mfpu=auto} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55+nomve+cdecp0 -mfloat-abi=hard -mfpu=auto} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55+cdecp0+cdecp1+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7 -mfloat-abi=hard -mfpu=auto} \"thumb/v8-m.main+dp/hard\"\n+\t{-mcpu=cortex-m55 -mfloat-abi=softfp -mfpu=auto} \"thumb/v8-m.main+dp/softfp\"\n+\t{-mcpu=cortex-m55+cdecp0 -mfloat-abi=softfp -mfpu=auto} \"thumb/v8-m.main+dp/softfp\"\n+\t{-mcpu=cortex-m55+nomve+cdecp0 -mfloat-abi=softfp -mfpu=auto} \"thumb/v8-m.main+dp/softfp\"\n+\t{-mcpu=cortex-m55+cdecp0+cdecp1+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7 -mfloat-abi=softfp -mfpu=auto} \"thumb/v8-m.main+dp/softfp\"\n+\t{-mcpu=cortex-m55 -mfloat-abi=soft -mfpu=auto} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+cdecp0 -mfloat-abi=soft -mfpu=auto} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+nomve+cdecp0 -mfloat-abi=soft -mfpu=auto} \"thumb/v8-m.main/nofp\"\n+\t{-mcpu=cortex-m55+cdecp0+cdecp1+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7 -mfloat-abi=soft -mfpu=auto} \"thumb/v8-m.main/nofp\"\n \t{-march=armv8-m.main+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n \t{-march=armv8-m.main+fp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n \t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\""}]}