{"sha": "4e1a215870a4194c9ca884ef838103c094aa38c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxYTIxNTg3MGE0MTk0YzljYTg4NGVmODM4MTAzYzA5NGFhMzhjOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-11T14:08:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-11T14:08:16Z"}, "message": "Fix biased integer arithmetic\n\nThe Ada compiler uses a biased representation when a size clause reserves\nfewer bits than normal either for the lower or for the upper bound.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/trans.c (build_binary_op_trapv): Convert operands\n\tto the result type before doing generic overflow checking.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/bias2.adb: New test.", "tree": {"sha": "5d7691de83cb47420e00970c33c7748cf95a4b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7691de83cb47420e00970c33c7748cf95a4b70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1a215870a4194c9ca884ef838103c094aa38c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1a215870a4194c9ca884ef838103c094aa38c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1a215870a4194c9ca884ef838103c094aa38c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1a215870a4194c9ca884ef838103c094aa38c8/comments", "author": null, "committer": null, "parents": [{"sha": "ec1b8711945e99677fe5b135d343781bc2e106ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1b8711945e99677fe5b135d343781bc2e106ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1b8711945e99677fe5b135d343781bc2e106ad"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "7be8463d32b392aa76b5ccf0040c718210fb3a84", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1a215870a4194c9ca884ef838103c094aa38c8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1a215870a4194c9ca884ef838103c094aa38c8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=4e1a215870a4194c9ca884ef838103c094aa38c8", "patch": "@@ -9361,6 +9361,11 @@ build_binary_op_trapv (enum tree_code code, tree gnu_type, tree left,\n   /* If no operand is a constant, we use the generic implementation.  */\n   if (TREE_CODE (lhs) != INTEGER_CST && TREE_CODE (rhs) != INTEGER_CST)\n     {\n+      /* First convert the operands to the result type like build_binary_op.\n+\t This is where the bias is made explicit for biased types.  */\n+      lhs = convert (gnu_type, lhs);\n+      rhs = convert (gnu_type, rhs);\n+\n       /* Never inline a 64-bit mult for a 32-bit target, it's way too long.  */\n       if (code == MULT_EXPR && precision == 64 && BITS_PER_WORD < 64)\n \t{"}, {"sha": "a32e9a337ad7ea8a5fb236bdeeb0a0dd251a4ca5", "filename": "gcc/testsuite/gnat.dg/bias2.adb", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1a215870a4194c9ca884ef838103c094aa38c8/gcc%2Ftestsuite%2Fgnat.dg%2Fbias2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1a215870a4194c9ca884ef838103c094aa38c8/gcc%2Ftestsuite%2Fgnat.dg%2Fbias2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbias2.adb?ref=4e1a215870a4194c9ca884ef838103c094aa38c8", "patch": "@@ -0,0 +1,33 @@\n+-- { dg-do run }\n+\n+procedure Bias2 is\n+\n+  type Biased_T is range 1 .. 2 ** 6;\n+  for Biased_T'Size use 6;  --  { dg-warning \"biased representation\" }\n+  X, Y : Biased_T;\n+\n+begin\n+  X := 1;\n+  Y := 1;\n+  if X + Y /= 2 then\n+    raise Program_Error;\n+  end if;\n+\n+  X := 2;\n+  Y := 1;\n+  if X - Y /= 1 then\n+    raise Program_Error;\n+  end if;\n+\n+  X := 2;\n+  Y := 3;\n+  if X * Y /= 6 then\n+    raise Program_Error;\n+  end if;\n+\n+  X := 24;\n+  Y := 3;\n+  if X / Y /= 8 then\n+    raise Program_Error;\n+  end if;\n+end;"}]}