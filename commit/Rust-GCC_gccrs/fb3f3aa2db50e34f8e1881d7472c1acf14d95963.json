{"sha": "fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIzZjNhYTJkYjUwZTM0ZjhlMTg4MWQ3NDcyYzFhY2YxNGQ5NTk2Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-21T21:26:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-21T21:26:10Z"}, "message": "compiler: Change alias handling, change rune alias to int32.\n\nFrom-SVN: r183374", "tree": {"sha": "028f071b465ab278a66ee501a5ee1ae92b8b4234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/028f071b465ab278a66ee501a5ee1ae92b8b4234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/comments", "author": null, "committer": null, "parents": [{"sha": "4787ac51eb9b79b3cd27f0366a86df5440eaeee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4787ac51eb9b79b3cd27f0366a86df5440eaeee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4787ac51eb9b79b3cd27f0366a86df5440eaeee6"}], "stats": {"total": 307, "additions": 240, "deletions": 67}, "files": [{"sha": "b6c0740cade56411e969364b4edc353aba0178dd", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -338,6 +338,8 @@ Export::register_builtin_types(Gogo* gogo)\n   this->register_builtin_type(gogo, \"bool\", BUILTIN_BOOL);\n   this->register_builtin_type(gogo, \"string\", BUILTIN_STRING);\n   this->register_builtin_type(gogo, \"error\", BUILTIN_ERROR);\n+  this->register_builtin_type(gogo, \"byte\", BUILTIN_BYTE);\n+  this->register_builtin_type(gogo, \"rune\", BUILTIN_RUNE);\n }\n \n // Register one builtin type in the export table.\n@@ -352,10 +354,14 @@ Export::register_builtin_type(Gogo* gogo, const char* name, Builtin_code code)\n   go_assert(ins.second);\n \n   // We also insert the underlying type.  We can see the underlying\n-  // type at least for string and bool.\n-  Type* real_type = named_object->type_value()->real_type();\n-  ins = this->type_refs_.insert(std::make_pair(real_type, code));\n-  go_assert(ins.second);\n+  // type at least for string and bool.  We skip the type aliases byte\n+  // and rune here.\n+  if (code != BUILTIN_BYTE && code != BUILTIN_RUNE)\n+    {\n+      Type* real_type = named_object->type_value()->real_type();\n+      ins = this->type_refs_.insert(std::make_pair(real_type, code));\n+      go_assert(ins.second);\n+    }\n }\n \n // Class Export::Stream."}, {"sha": "087f477e482397095510a759f5afa3a0d59fbe98", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -40,8 +40,10 @@ enum Builtin_code\n   BUILTIN_COMPLEX64 = -17,\n   BUILTIN_COMPLEX128 = -18,\n   BUILTIN_ERROR = -19,\n+  BUILTIN_BYTE = -20,\n+  BUILTIN_RUNE = -21,\n \n-  SMALLEST_BUILTIN_CODE = -19\n+  SMALLEST_BUILTIN_CODE = -21\n };\n \n // This class manages exporting Go declarations.  It handles the main"}, {"sha": "fe361fbf7f63c671bbfaa05e11eaf9806a84aee2", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -1740,9 +1740,10 @@ Expression::make_string(const std::string& val, Location location)\n class Integer_expression : public Expression\n {\n  public:\n-  Integer_expression(const mpz_t* val, Type* type, Location location)\n+  Integer_expression(const mpz_t* val, Type* type, bool is_character_constant,\n+\t\t     Location location)\n     : Expression(EXPRESSION_INTEGER, location),\n-      type_(type)\n+      type_(type), is_character_constant_(is_character_constant)\n   { mpz_init_set(this->val_, *val); }\n \n   static Expression*\n@@ -1782,8 +1783,14 @@ class Integer_expression : public Expression\n \n   Expression*\n   do_copy()\n-  { return Expression::make_integer(&this->val_, this->type_,\n-\t\t\t\t    this->location()); }\n+  {\n+    if (this->is_character_constant_)\n+      return Expression::make_character(&this->val_, this->type_,\n+\t\t\t\t\tthis->location());\n+    else\n+      return Expression::make_integer(&this->val_, this->type_,\n+\t\t\t\t      this->location());\n+  }\n \n   void\n   do_export(Export*) const;\n@@ -1796,6 +1803,8 @@ class Integer_expression : public Expression\n   mpz_t val_;\n   // The type so far.\n   Type* type_;\n+  // Whether this is a character constant.\n+  bool is_character_constant_;\n };\n \n // Return an integer constant value.\n@@ -1817,7 +1826,12 @@ Type*\n Integer_expression::do_type()\n {\n   if (this->type_ == NULL)\n-    this->type_ = Type::make_abstract_integer_type();\n+    {\n+      if (this->is_character_constant_)\n+\tthis->type_ = Type::make_abstract_character_type();\n+      else\n+\tthis->type_ = Type::make_abstract_integer_type();\n+    }\n   return this->type_;\n }\n \n@@ -1835,7 +1849,12 @@ Integer_expression::do_determine_type(const Type_context* context)\n \t       || context->type->complex_type() != NULL))\n     this->type_ = context->type;\n   else if (!context->may_be_abstract)\n-    this->type_ = Type::lookup_integer_type(\"int\");\n+    {\n+      if (this->is_character_constant_)\n+\tthis->type_ = Type::lookup_integer_type(\"int32\");\n+      else\n+\tthis->type_ = Type::lookup_integer_type(\"int\");\n+    }\n }\n \n // Return true if the integer VAL fits in the range of the type TYPE.\n@@ -1950,6 +1969,8 @@ void\n Integer_expression::do_export(Export* exp) const\n {\n   Integer_expression::export_integer(exp, this->val_);\n+  if (this->is_character_constant_)\n+    exp->write_c_string(\"'\");\n   // A trailing space lets us reliably identify the end of the number.\n   exp->write_c_string(\" \");\n }\n@@ -2013,14 +2034,22 @@ Integer_expression::do_import(Import* imp)\n   else if (num.find('.') == std::string::npos\n \t   && num.find('E') == std::string::npos)\n     {\n+      bool is_character_constant = (!num.empty()\n+\t\t\t\t    && num[num.length() - 1] == '\\'');\n+      if (is_character_constant)\n+\tnum = num.substr(0, num.length() - 1);\n       mpz_t val;\n       if (mpz_init_set_str(val, num.c_str(), 10) != 0)\n \t{\n \t  error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t   num.c_str());\n \t  return Expression::make_error(imp->location());\n \t}\n-      Expression* ret = Expression::make_integer(&val, NULL, imp->location());\n+      Expression* ret;\n+      if (is_character_constant)\n+\tret = Expression::make_character(&val, NULL, imp->location());\n+      else\n+\tret = Expression::make_integer(&val, NULL, imp->location());\n       mpz_clear(val);\n       return ret;\n     }\n@@ -2043,16 +2072,27 @@ Integer_expression::do_import(Import* imp)\n void\n Integer_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n {\n+  if (this->is_character_constant_)\n+    ast_dump_context->ostream() << '\\'';\n   Integer_expression::export_integer(ast_dump_context, this->val_);\n+  if (this->is_character_constant_)\n+    ast_dump_context->ostream() << '\\'';\n }\n \n // Build a new integer value.\n \n Expression*\n-Expression::make_integer(const mpz_t* val, Type* type,\n-\t\t\t Location location)\n+Expression::make_integer(const mpz_t* val, Type* type, Location location)\n+{\n+  return new Integer_expression(val, type, false, location);\n+}\n+\n+// Build a new character constant value.\n+\n+Expression*\n+Expression::make_character(const mpz_t* val, Type* type, Location location)\n {\n-  return new Integer_expression(val, type, location);\n+  return new Integer_expression(val, type, true, location);\n }\n \n // Floats."}, {"sha": "efe54d1c49f1a614e5b24a13913d6d975361c286", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -164,6 +164,11 @@ class Expression\n   static Expression*\n   make_string(const std::string&, Location);\n \n+  // Make a character constant expression.  TYPE should be NULL for an\n+  // abstract type.\n+  static Expression*\n+  make_character(const mpz_t*, Type*, Location);\n+\n   // Make a constant integer expression.  TYPE should be NULL for an\n   // abstract type.\n   static Expression*"}, {"sha": "e995be4b3181520aa8c48fd853bec54ef53d132d", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -58,8 +58,9 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int int_type_size,\n \t\t\t\t\t       RUNTIME_TYPE_KIND_INT8));\n   this->add_named_type(Type::make_integer_type(\"int16\", false,  16,\n \t\t\t\t\t       RUNTIME_TYPE_KIND_INT16));\n-  this->add_named_type(Type::make_integer_type(\"int32\", false,  32,\n-\t\t\t\t\t       RUNTIME_TYPE_KIND_INT32));\n+  Named_type* int32_type = Type::make_integer_type(\"int32\", false,  32,\n+\t\t\t\t\t\t   RUNTIME_TYPE_KIND_INT32);\n+  this->add_named_type(int32_type);\n   this->add_named_type(Type::make_integer_type(\"int64\", false,  64,\n \t\t\t\t\t       RUNTIME_TYPE_KIND_INT64));\n \n@@ -82,23 +83,22 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int int_type_size,\n \t\t\t\t\t\t RUNTIME_TYPE_KIND_INT);\n   this->add_named_type(int_type);\n \n-  // \"byte\" is an alias for \"uint8\".  Construct a Named_object which\n-  // points to UINT8_TYPE.  Note that this breaks the normal pairing\n-  // in which a Named_object points to a Named_type which points back\n-  // to the same Named_object.\n-  Named_object* byte_type = this->declare_type(\"byte\", loc);\n-  byte_type->set_type_value(uint8_type);\n-  uint8_type->integer_type()->set_is_byte();\n-\n-  // \"rune\" is an alias for \"int\".\n-  Named_object* rune_type = this->declare_type(\"rune\", loc);\n-  rune_type->set_type_value(int_type);\n-  int_type->integer_type()->set_is_rune();\n-\n   this->add_named_type(Type::make_integer_type(\"uintptr\", true,\n \t\t\t\t\t       pointer_size,\n \t\t\t\t\t       RUNTIME_TYPE_KIND_UINTPTR));\n \n+  // \"byte\" is an alias for \"uint8\".\n+  uint8_type->integer_type()->set_is_byte();\n+  Named_object* byte_type = Named_object::make_type(\"byte\", NULL, uint8_type,\n+\t\t\t\t\t\t    loc);\n+  this->add_named_type(byte_type->type_value());\n+\n+  // \"rune\" is an alias for \"int32\".\n+  int32_type->integer_type()->set_is_rune();\n+  Named_object* rune_type = Named_object::make_type(\"rune\", NULL, int32_type,\n+\t\t\t\t\t\t    loc);\n+  this->add_named_type(rune_type->type_value());\n+\n   this->add_named_type(Type::make_named_bool_type());\n \n   this->add_named_type(Type::make_named_string_type());\n@@ -3830,7 +3830,12 @@ Variable::type_from_range(Expression* expr, bool get_index_type,\n \treturn t->deref()->array_type()->element_type();\n     }\n   else if (t->is_string_type())\n-    return Type::lookup_integer_type(\"int\");\n+    {\n+      if (get_index_type)\n+\treturn Type::lookup_integer_type(\"int\");\n+      else\n+\treturn Type::lookup_integer_type(\"int32\");\n+    }\n   else if (t->map_type() != NULL)\n     {\n       if (get_index_type)"}, {"sha": "de7edc91e2e233f31afde63a556974877bedfa3c", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -696,6 +696,8 @@ Import::register_builtin_types(Gogo* gogo)\n   this->register_builtin_type(gogo, \"bool\", BUILTIN_BOOL);\n   this->register_builtin_type(gogo, \"string\", BUILTIN_STRING);\n   this->register_builtin_type(gogo, \"error\", BUILTIN_ERROR);\n+  this->register_builtin_type(gogo, \"byte\", BUILTIN_BYTE);\n+  this->register_builtin_type(gogo, \"rune\", BUILTIN_RUNE);\n }\n \n // Register a single builtin type."}, {"sha": "af23e9be1625eed871e7c9d39e638b9abf2c54a8", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -163,7 +163,8 @@ Token::~Token()\n void\n Token::clear()\n {\n-  if (this->classification_ == TOKEN_INTEGER)\n+  if (this->classification_ == TOKEN_INTEGER\n+      || this->classification_ == TOKEN_CHARACTER)\n     mpz_clear(this->u_.integer_value);\n   else if (this->classification_ == TOKEN_FLOAT\n \t   || this->classification_ == TOKEN_IMAGINARY)\n@@ -190,6 +191,7 @@ Token::Token(const Token& tok)\n     case TOKEN_OPERATOR:\n       this->u_.op = tok.u_.op;\n       break;\n+    case TOKEN_CHARACTER:\n     case TOKEN_INTEGER:\n       mpz_init_set(this->u_.integer_value, tok.u_.integer_value);\n       break;\n@@ -229,6 +231,7 @@ Token::operator=(const Token& tok)\n     case TOKEN_OPERATOR:\n       this->u_.op = tok.u_.op;\n       break;\n+    case TOKEN_CHARACTER:\n     case TOKEN_INTEGER:\n       mpz_init_set(this->u_.integer_value, tok.u_.integer_value);\n       break;\n@@ -264,6 +267,10 @@ Token::print(FILE* file) const\n     case TOKEN_STRING:\n       fprintf(file, \"quoted string \\\"%s\\\"\", this->u_.string_value->c_str());\n       break;\n+    case TOKEN_CHARACTER:\n+      fprintf(file, \"character \");\n+      mpz_out_str(file, 10, this->u_.integer_value);\n+      break;\n     case TOKEN_INTEGER:\n       fprintf(file, \"integer \");\n       mpz_out_str(file, 10, this->u_.integer_value);\n@@ -1320,7 +1327,7 @@ Lex::gather_character()\n \n   Location location = this->location();\n   this->lineoff_ = p + 1 - this->linebuf_;\n-  Token ret = Token::make_integer_token(val, location);\n+  Token ret = Token::make_character_token(val, location);\n   mpz_clear(val);\n   return ret;\n }"}, {"sha": "b9b4b1f812b3652e8f9b8fd9a48b660bc57d3c7b", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -70,6 +70,8 @@ class Token\n     TOKEN_STRING,\n     // Token is an operator.\n     TOKEN_OPERATOR,\n+    // Token is a character constant.\n+    TOKEN_CHARACTER,\n     // Token is an integer.\n     TOKEN_INTEGER,\n     // Token is a floating point number.\n@@ -135,6 +137,16 @@ class Token\n     return tok;\n   }\n \n+  // Make a character constant token.\n+  static Token\n+  make_character_token(mpz_t val, Location location)\n+  {\n+    Token tok(TOKEN_CHARACTER, location);\n+    mpz_init(tok.u_.integer_value);\n+    mpz_swap(tok.u_.integer_value, val);\n+    return tok;\n+  }\n+\n   // Make an integer token.\n   static Token\n   make_integer_token(mpz_t val, Location location)\n@@ -225,6 +237,14 @@ class Token\n     return *this->u_.string_value;\n   }\n \n+  // Return the value of a character constant.\n+  const mpz_t*\n+  character_value() const\n+  {\n+    go_assert(this->classification_ == TOKEN_CHARACTER);\n+    return &this->u_.integer_value;\n+  }\n+\n   // Return the value of an integer.\n   const mpz_t*\n   integer_value() const\n@@ -300,7 +320,7 @@ class Token\n     } identifier_value;\n     // The string value for TOKEN_STRING.\n     std::string* string_value;\n-    // The token value for TOKEN_INTEGER.\n+    // The token value for TOKEN_CHARACTER or TOKEN_INTEGER.\n     mpz_t integer_value;\n     // The token value for TOKEN_FLOAT or TOKEN_IMAGINARY.\n     mpfr_t float_value;"}, {"sha": "21cd764afd1bdcfcfb08f580bba8d9238ab9245f", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -2391,6 +2391,12 @@ Parse::operand(bool may_be_sink)\n       this->advance_token();\n       return ret;\n \n+    case Token::TOKEN_CHARACTER:\n+      ret = Expression::make_character(token->character_value(), NULL,\n+\t\t\t\t       token->location());\n+      this->advance_token();\n+      return ret;\n+\n     case Token::TOKEN_INTEGER:\n       ret = Expression::make_integer(token->integer_value(), NULL,\n \t\t\t\t     token->location());\n@@ -3168,6 +3174,7 @@ Parse::expression_may_start_here()\n \tdefault:\n \t  return false;\n \t}\n+    case Token::TOKEN_CHARACTER:\n     case Token::TOKEN_INTEGER:\n     case Token::TOKEN_FLOAT:\n     case Token::TOKEN_IMAGINARY:\n@@ -3330,6 +3337,7 @@ Parse::statement(Label* label)\n       break;\n \n     case Token::TOKEN_STRING:\n+    case Token::TOKEN_CHARACTER:\n     case Token::TOKEN_INTEGER:\n     case Token::TOKEN_FLOAT:\n     case Token::TOKEN_IMAGINARY:\n@@ -3389,6 +3397,7 @@ Parse::statement_may_start_here()\n \treturn this->expression_may_start_here();\n \n     case Token::TOKEN_STRING:\n+    case Token::TOKEN_CHARACTER:\n     case Token::TOKEN_INTEGER:\n     case Token::TOKEN_FLOAT:\n     case Token::TOKEN_IMAGINARY:"}, {"sha": "9d19030205714fee18dd9e623a6a08d3aa0fe8c4", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -38,6 +38,8 @@ enum Runtime_function_type\n   RFT_UINT64,\n   // Go type uintptr, C type uintptr_t.\n   RFT_UINTPTR,\n+  // Go type rune, C type int32_t.\n+  RFT_RUNE,\n   // Go type float64, C type double.\n   RFT_FLOAT64,\n   // Go type complex128, C type __complex double.\n@@ -108,6 +110,10 @@ runtime_function_type(Runtime_function_type bft)\n \t  t = Type::lookup_integer_type(\"uint64\");\n \t  break;\n \n+\tcase RFT_RUNE:\n+\t  t = Type::lookup_integer_type(\"int32\");\n+\t  break;\n+\n \tcase RFT_UINTPTR:\n \t  t = Type::lookup_integer_type(\"uintptr\");\n \t  break;\n@@ -203,6 +209,7 @@ convert_to_runtime_function_type(Runtime_function_type bft, Expression* e,\n     case RFT_INT64:\n     case RFT_UINT64:\n     case RFT_UINTPTR:\n+    case RFT_RUNE:\n     case RFT_FLOAT64:\n     case RFT_COMPLEX128:\n     case RFT_STRING:"}, {"sha": "57d509006c32b5da20845118268c895a8b43e8a1", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -36,7 +36,7 @@ DEF_GO_RUNTIME(STRINGITER, \"runtime.stringiter\", P2(STRING, INT), R1(INT))\n \n // Range over a string, returning the next index and character.\n DEF_GO_RUNTIME(STRINGITER2, \"runtime.stringiter2\", P2(STRING, INT),\n-\t       R2(INT, INT))\n+\t       R2(INT, RUNE))\n \n // Concatenate two strings.\n DEF_GO_RUNTIME(STRING_PLUS, \"__go_string_plus\", P2(STRING, STRING), R1(STRING))"}, {"sha": "bb74db85d8041d2a0f6b69f6126fe049ac738c7a", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -5194,7 +5194,7 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n   else if (range_type->is_string_type())\n     {\n       index_type = Type::lookup_integer_type(\"int\");\n-      value_type = index_type;\n+      value_type = Type::lookup_integer_type(\"int32\");\n     }\n   else if (range_type->map_type() != NULL)\n     {"}, {"sha": "29c3cd7db8d1232b087012f2bae7a97a27561696", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -192,7 +192,10 @@ Type::make_non_abstract_type()\n   switch (this->classification())\n     {\n     case TYPE_INTEGER:\n-      return Type::lookup_integer_type(\"int\");\n+      if (this->integer_type()->is_rune())\n+\treturn Type::lookup_integer_type(\"int32\");\n+      else\n+\treturn Type::lookup_integer_type(\"int\");\n     case TYPE_FLOAT:\n       return Type::lookup_float_type(\"float64\");\n     case TYPE_COMPLEX:\n@@ -320,6 +323,12 @@ Type::are_identical(const Type* t1, const Type* t2, bool errors_are_identical,\n   t1 = t1->forwarded();\n   t2 = t2->forwarded();\n \n+  // Ignore aliases for purposes of type identity.\n+  if (t1->named_type() != NULL && t1->named_type()->is_alias())\n+    t1 = t1->named_type()->real_type();\n+  if (t2->named_type() != NULL && t2->named_type()->is_alias())\n+    t2 = t2->named_type()->real_type();\n+\n   if (t1 == t2)\n     return true;\n \n@@ -963,6 +972,8 @@ tree\n Type::type_descriptor_pointer(Gogo* gogo, Location location)\n {\n   Type* t = this->forwarded();\n+  if (t->named_type() != NULL && t->named_type()->is_alias())\n+    t = t->named_type()->real_type();\n   if (t->type_descriptor_var_ == NULL)\n     {\n       t->make_type_descriptor_var(gogo);\n@@ -2317,6 +2328,21 @@ Integer_type::create_abstract_integer_type()\n   return abstract_type;\n }\n \n+// Create a new abstract character type.\n+\n+Integer_type*\n+Integer_type::create_abstract_character_type()\n+{\n+  static Integer_type* abstract_type;\n+  if (abstract_type == NULL)\n+    {\n+      abstract_type = new Integer_type(true, false, 32,\n+\t\t\t\t       RUNTIME_TYPE_KIND_INT32);\n+      abstract_type->set_is_rune();\n+    }\n+  return abstract_type;\n+}\n+\n // Integer type compatibility.\n \n bool\n@@ -2399,6 +2425,14 @@ Type::make_abstract_integer_type()\n   return Integer_type::create_abstract_integer_type();\n }\n \n+// Make an abstract character type.\n+\n+Integer_type*\n+Type::make_abstract_character_type()\n+{\n+  return Integer_type::create_abstract_character_type();\n+}\n+\n // Look up an integer type.\n \n Named_type*\n@@ -7215,6 +7249,18 @@ Named_type::message_name() const\n   return this->named_object_->message_name();\n }\n \n+// Whether this is an alias.  There are currently only two aliases so\n+// we just recognize them by name.\n+\n+bool\n+Named_type::is_alias() const\n+{\n+  if (!this->is_builtin())\n+    return false;\n+  const std::string& name(this->name());\n+  return name == \"byte\" || name == \"rune\";\n+}\n+\n // Return the base type for this type.  We have to be careful about\n // circular type definitions, which are invalid but may be seen here.\n \n@@ -7615,6 +7661,9 @@ Named_type::do_compare_is_identity(Gogo* gogo) const\n unsigned int\n Named_type::do_hash_for_method(Gogo* gogo) const\n {\n+  if (this->is_alias())\n+    return this->type_->named_type()->do_hash_for_method(gogo);\n+\n   const std::string& name(this->named_object()->name());\n   unsigned int ret = Type::hash_string(name, 0);\n \n@@ -7959,6 +8008,9 @@ Named_type::do_get_backend(Gogo* gogo)\n Expression*\n Named_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n {\n+  if (name == NULL && this->is_alias())\n+    return this->type_->type_descriptor(gogo, this->type_);\n+\n   // If NAME is not NULL, then we don't really want the type\n   // descriptor for this type; we want the descriptor for the\n   // underlying type, giving it the name NAME.\n@@ -7973,7 +8025,12 @@ Named_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n void\n Named_type::do_reflection(Gogo* gogo, std::string* ret) const\n {\n-  if (!Linemap::is_predeclared_location(this->location()))\n+  if (this->is_alias())\n+    {\n+      this->append_reflection(this->type_, gogo, ret);\n+      return;\n+    }\n+  if (!this->is_builtin())\n     {\n       const Package* package = this->named_object_->package();\n       if (package != NULL)\n@@ -7995,9 +8052,14 @@ Named_type::do_reflection(Gogo* gogo, std::string* ret) const\n void\n Named_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n {\n+  if (this->is_alias())\n+    {\n+      this->append_mangled_name(this->type_, gogo, ret);\n+      return;\n+    }\n   Named_object* no = this->named_object_;\n   std::string name;\n-  if (Linemap::is_predeclared_location(this->location()))\n+  if (this->is_builtin())\n     go_assert(this->in_function_ == NULL);\n   else\n     {"}, {"sha": "4e45b991b57b284ed7711ccf20468c8c4f0d7ded", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -401,6 +401,10 @@ class Type\n   static Integer_type*\n   make_abstract_integer_type();\n \n+  // Make an abstract type for a character constant.\n+  static Integer_type*\n+  make_abstract_character_type();\n+\n   // Make a named integer type with a specified size.\n   // RUNTIME_TYPE_KIND is the code to use in reflection information,\n   // to distinguish int and int32.\n@@ -1374,6 +1378,10 @@ class Integer_type : public Type\n   static Integer_type*\n   create_abstract_integer_type();\n \n+  // Create an abstract character type.\n+  static Integer_type*\n+  create_abstract_character_type();\n+\n   // Whether this is an abstract integer type.\n   bool\n   is_abstract() const\n@@ -2674,6 +2682,11 @@ class Named_type : public Type\n   is_builtin() const\n   { return Linemap::is_predeclared_location(this->location_); }\n \n+  // Whether this is an alias.  There are currently two aliases: byte\n+  // and rune.\n+  bool\n+  is_alias() const;\n+\n   // Whether this is a circular type: a pointer or function type that\n   // refers to itself, which is not possible in C.\n   bool"}, {"sha": "adf0aafd6b2773874075ef75616e67e6e3b5dc2a", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug204.go", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug204.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug204.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug204.go?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -7,18 +7,18 @@\n package main\n \n func main() {\n-\tnchar := 0;\n-\ta := []int { '\u65e5', '\u672c', '\u8a9e', 0xFFFD };\n+\tnchar := 0\n+\ta := []rune{'\u65e5', '\u672c', '\u8a9e', 0xFFFD}\n \tfor _, char := range \"\u65e5\u672c\u8a9e\\xc0\" {\n \t\tif nchar >= len(a) {\n-\t\t\tprintln(\"BUG\");\n-\t\t\tbreak;\n+\t\t\tprintln(\"BUG\")\n+\t\t\tbreak\n \t\t}\n \t\tif char != a[nchar] {\n-\t\t\tprintln(\"expected\", a[nchar], \"got\", char);\n-\t\t\tprintln(\"BUG\");\n-\t\t\tbreak;\n+\t\t\tprintln(\"expected\", a[nchar], \"got\", char)\n+\t\t\tprintln(\"BUG\")\n+\t\t\tbreak\n \t\t}\n-\t\tnchar++;\n+\t\tnchar++\n \t}\n }"}, {"sha": "b74bd7d6f1c1dcefa607fdcfc985c8fd6d949068", "filename": "gcc/testsuite/go.test/test/ken/string.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.go?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -95,7 +95,7 @@ func main() {\n \t}\n \n \t/* create string with int array */\n-\tvar z2 [3]int\n+\tvar z2 [3]rune\n \tz2[0] = 'a'\n \tz2[1] = '\\u1234'\n \tz2[2] = 'c'"}, {"sha": "84119450b281fe589f1622172be90eced182a5a8", "filename": "gcc/testsuite/go.test/test/range.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frange.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frange.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frange.go?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -172,7 +172,7 @@ func makestring() string {\n }\n \n func teststring() {\n-\ts := 0\n+\tvar s rune\n \tnmake = 0\n \tfor _, v := range makestring() {\n \t\ts += v\n@@ -208,7 +208,7 @@ func teststring1() {\n \n func makemap() map[int]int {\n \tnmake++\n-\treturn map[int]int{0:'a', 1:'b', 2:'c', 3:'d', 4:'\u263a'}\n+\treturn map[int]int{0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: '\u263a'}\n }\n \n func testmap() {"}, {"sha": "473a1d12d7d7f25eff50f7e21b1de78a0c40af60", "filename": "gcc/testsuite/go.test/test/solitaire.go", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsolitaire.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsolitaire.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsolitaire.go?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -14,7 +14,7 @@ const N = 11 + 1 // length of a board row (+1 for newline)\n // The board must be surrounded by 2 illegal fields in each direction\n // so that move() doesn't need to check the board boundaries. Periods\n // represent illegal fields, \u25cf are pegs, and \u25cb are holes.\n-var board = []int(\n+var board = []rune(\n \t`...........\n ...........\n ....\u25cf\u25cf\u25cf....\n@@ -28,7 +28,6 @@ var board = []int(\n ...........\n `)\n \n-\n // center is the position of the center hole if there is a single one;\n // otherwise it is -1.\n var center int\n@@ -46,7 +45,6 @@ func init() {\n \t}\n }\n \n-\n var moves int // number of times move is called\n \n // move tests if there is a peg at position pos that can jump over another peg\n@@ -63,15 +61,13 @@ func move(pos, dir int) bool {\n \treturn false\n }\n \n-\n // unmove reverts a previously executed valid move.\n func unmove(pos, dir int) {\n \tboard[pos] = '\u25cf'\n \tboard[pos+dir] = '\u25cf'\n \tboard[pos+2*dir] = '\u25cb'\n }\n \n-\n // solve tries to find a sequence of moves such that there is only one peg left\n // at the end; if center is >= 0, that last peg must be in the center position.\n // If a solution is found, solve prints the board after each move in a backward\n@@ -110,7 +106,6 @@ func solve() bool {\n \treturn false\n }\n \n-\n func main() {\n \tif !solve() {\n \t\tprintln(\"no solution found\")"}, {"sha": "c702a05e91fa6a07fd9e65cad9a0c0cbe17b643a", "filename": "gcc/testsuite/go.test/test/string_lit.go", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstring_lit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb3f3aa2db50e34f8e1881d7472c1acf14d95963/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstring_lit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstring_lit.go?ref=fb3f3aa2db50e34f8e1881d7472c1acf14d95963", "patch": "@@ -35,14 +35,14 @@ func assert(a, b, c string) {\n }\n \n const (\n-\tgx1 = \"a\u00e4\u672c\u263a\"\n-\tgx2 = \"a\u00e4\\xFF\\xFF\u672c\u263a\"\n+\tgx1    = \"a\u00e4\u672c\u263a\"\n+\tgx2    = \"a\u00e4\\xFF\\xFF\u672c\u263a\"\n \tgx2fix = \"a\u00e4\\uFFFD\\uFFFD\u672c\u263a\"\n )\n \n var (\n-\tgr1 = []int(gx1)\n-\tgr2 = []int(gx2)\n+\tgr1 = []rune(gx1)\n+\tgr2 = []rune(gx2)\n \tgb1 = []byte(gx1)\n \tgb2 = []byte(gx2)\n )\n@@ -93,26 +93,26 @@ func main() {\n \n \t// test large runes. perhaps not the most logical place for this test.\n \tvar r int32\n-\tr = 0x10ffff;\t// largest rune value\n+\tr = 0x10ffff // largest rune value\n \ts = string(r)\n \tassert(s, \"\\xf4\\x8f\\xbf\\xbf\", \"largest rune\")\n \tr = 0x10ffff + 1\n \ts = string(r)\n \tassert(s, \"\\xef\\xbf\\xbd\", \"too-large rune\")\n \n-\tassert(string(gr1), gx1, \"global ->[]int\")\n-\tassert(string(gr2), gx2fix, \"global invalid ->[]int\")\n+\tassert(string(gr1), gx1, \"global ->[]rune\")\n+\tassert(string(gr2), gx2fix, \"global invalid ->[]rune\")\n \tassert(string(gb1), gx1, \"->[]byte\")\n \tassert(string(gb2), gx2, \"global invalid ->[]byte\")\n \n \tvar (\n-\t\tr1 = []int(gx1)\n-\t\tr2 = []int(gx2)\n+\t\tr1 = []rune(gx1)\n+\t\tr2 = []rune(gx2)\n \t\tb1 = []byte(gx1)\n \t\tb2 = []byte(gx2)\n \t)\n-\tassert(string(r1), gx1, \"->[]int\")\n-\tassert(string(r2), gx2fix, \"invalid ->[]int\")\n+\tassert(string(r1), gx1, \"->[]rune\")\n+\tassert(string(r2), gx2fix, \"invalid ->[]rune\")\n \tassert(string(b1), gx1, \"->[]byte\")\n \tassert(string(b2), gx2, \"invalid ->[]byte\")\n "}]}