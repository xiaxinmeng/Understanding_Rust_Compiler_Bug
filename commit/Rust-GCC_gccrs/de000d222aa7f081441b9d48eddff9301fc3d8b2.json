{"sha": "de000d222aa7f081441b9d48eddff9301fc3d8b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwMDBkMjIyYWE3ZjA4MTQ0MWI5ZDQ4ZWRkZmY5MzAxZmMzZDhiMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-10-12T09:25:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-10-12T09:25:59Z"}, "message": "re PR preprocessor/28709 (Bad diagnostic pasting tokens with ##)\n\n\tPR preprocessor/28709\n\t* macro.c (paste_tokens): Do error reporting here, use BUF with the\n\tspelled LHS token as opposed to spelling it again.\n\t(paste_all_tokens): Don't report errors here, just break on failure.\n\n\t* gcc.dg/cpp/paste14.c: New test.\n\nFrom-SVN: r117664", "tree": {"sha": "8c96d7cea97a044e3c22146d563038821cbac200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c96d7cea97a044e3c22146d563038821cbac200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de000d222aa7f081441b9d48eddff9301fc3d8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de000d222aa7f081441b9d48eddff9301fc3d8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de000d222aa7f081441b9d48eddff9301fc3d8b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de000d222aa7f081441b9d48eddff9301fc3d8b2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e96b1c34fc5653ab1cd75b8e19034f5f56a1f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e96b1c34fc5653ab1cd75b8e19034f5f56a1f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e96b1c34fc5653ab1cd75b8e19034f5f56a1f84"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "500edd2acf19544e86ffb710f479e9da48a2fce2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de000d222aa7f081441b9d48eddff9301fc3d8b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de000d222aa7f081441b9d48eddff9301fc3d8b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de000d222aa7f081441b9d48eddff9301fc3d8b2", "patch": "@@ -1,3 +1,8 @@\n+2006-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/28709\n+\t* gcc.dg/cpp/paste14.c: New test.\n+\n 2006-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29175"}, {"sha": "ec243c2326f8b9b5f06096d9e71dd013086d6392", "filename": "gcc/testsuite/gcc.dg/cpp/paste14.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de000d222aa7f081441b9d48eddff9301fc3d8b2/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de000d222aa7f081441b9d48eddff9301fc3d8b2/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste14.c?ref=de000d222aa7f081441b9d48eddff9301fc3d8b2", "patch": "@@ -0,0 +1,7 @@\n+/* PR preprocessor/28709 */\n+/* { dg-do preprocess } */\n+\n+#define foo - ## >>\n+foo\t\t/* { dg-error \"pasting \\\"-\\\" and \\\">>\\\"\" } */\n+#define bar = ## ==\n+bar\t\t/* { dg-error \"pasting \\\"=\\\" and \\\"==\\\"\" } */"}, {"sha": "ae87e0ea92a82ea9843d309420c02b98ca5aeb68", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de000d222aa7f081441b9d48eddff9301fc3d8b2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de000d222aa7f081441b9d48eddff9301fc3d8b2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=de000d222aa7f081441b9d48eddff9301fc3d8b2", "patch": "@@ -1,3 +1,10 @@\n+2006-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/28709\n+\t* macro.c (paste_tokens): Do error reporting here, use BUF with the\n+\tspelled LHS token as opposed to spelling it again.\n+\t(paste_all_tokens): Don't report errors here, just break on failure.\n+\n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n \t* Makefile.in: Added empty \"pdf\" target."}, {"sha": "be50c111e32ed70a0d8088c55efa9cf7eea71f1f", "filename": "libcpp/macro.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de000d222aa7f081441b9d48eddff9301fc3d8b2/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de000d222aa7f081441b9d48eddff9301fc3d8b2/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=de000d222aa7f081441b9d48eddff9301fc3d8b2", "patch": "@@ -430,15 +430,14 @@ stringify_arg (cpp_reader *pfile, macro_arg *arg)\n static bool\n paste_tokens (cpp_reader *pfile, const cpp_token **plhs, const cpp_token *rhs)\n {\n-  unsigned char *buf, *end;\n+  unsigned char *buf, *end, *lhsend;\n   const cpp_token *lhs;\n   unsigned int len;\n-  bool valid;\n \n   lhs = *plhs;\n   len = cpp_token_len (lhs) + cpp_token_len (rhs) + 1;\n   buf = (unsigned char *) alloca (len);\n-  end = cpp_spell_token (pfile, lhs, buf, false);\n+  end = lhsend = cpp_spell_token (pfile, lhs, buf, false);\n \n   /* Avoid comment headers, since they are still processed in stage 3.\n      It is simpler to insert a space here, rather than modifying the\n@@ -455,10 +454,22 @@ paste_tokens (cpp_reader *pfile, const cpp_token **plhs, const cpp_token *rhs)\n   /* Set pfile->cur_token as required by _cpp_lex_direct.  */\n   pfile->cur_token = _cpp_temp_token (pfile);\n   *plhs = _cpp_lex_direct (pfile);\n-  valid = pfile->buffer->cur == pfile->buffer->rlimit;\n-  _cpp_pop_buffer (pfile);\n+  if (pfile->buffer->cur != pfile->buffer->rlimit)\n+    {\n+      _cpp_pop_buffer (pfile);\n+      _cpp_backup_tokens (pfile, 1);\n+      *lhsend = '\\0';\n+\n+      /* Mandatory error for all apart from assembler.  */\n+      if (CPP_OPTION (pfile, lang) != CLK_ASM)\n+\tcpp_error (pfile, CPP_DL_ERROR,\n+\t \"pasting \\\"%s\\\" and \\\"%s\\\" does not give a valid preprocessing token\",\n+\t\t   buf, cpp_token_as_text (pfile, rhs));\n+      return false;\n+    }\n \n-  return valid;\n+  _cpp_pop_buffer (pfile);\n+  return true;\n }\n \n /* Handles an arbitrarily long sequence of ## operators, with initial\n@@ -490,17 +501,7 @@ paste_all_tokens (cpp_reader *pfile, const cpp_token *lhs)\n \tabort ();\n \n       if (!paste_tokens (pfile, &lhs, rhs))\n-\t{\n-\t  _cpp_backup_tokens (pfile, 1);\n-\n-\t  /* Mandatory error for all apart from assembler.  */\n-\t  if (CPP_OPTION (pfile, lang) != CLK_ASM)\n-\t    cpp_error (pfile, CPP_DL_ERROR,\n-\t \"pasting \\\"%s\\\" and \\\"%s\\\" does not give a valid preprocessing token\",\n-\t\t       cpp_token_as_text (pfile, lhs),\n-\t\t       cpp_token_as_text (pfile, rhs));\n-\t  break;\n-\t}\n+\tbreak;\n     }\n   while (rhs->flags & PASTE_LEFT);\n "}]}