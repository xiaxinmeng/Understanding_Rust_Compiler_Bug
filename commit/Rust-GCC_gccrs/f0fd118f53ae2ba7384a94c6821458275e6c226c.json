{"sha": "f0fd118f53ae2ba7384a94c6821458275e6c226c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBmZDExOGY1M2FlMmJhNzM4NGE5NGM2ODIxNDU4Mjc1ZTZjMjI2Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-05-08T17:17:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-05-08T17:17:06Z"}, "message": "re PR libstdc++/57394 ([C++11] basic_streambuf incorrect copy constructor / copy assignment access specifier)\n\n\tPR libstdc++/57394\n\t* include/bits/ios_base.h (ios_base(const ios_base&)): Define as\n\tdeleted for C++11.\n\t(operator=(const ios_base&)): Likewise.\n\t* include/std/streambuf: Remove trailing whitespace.\n\t(basic_streambuf(const basic_streambuf&)): Fix initializer for\n\t_M_out_end. Define as defaulted for C++11.\n\t(operator=(const basic_streambuf&)): Define as defaulted for C++11.\n\t(swap(basic_streambuf&)): Define for C++11.\n\t* testsuite/27_io/basic_streambuf/cons/57394.cc: New.\n\nFrom-SVN: r210228", "tree": {"sha": "c37969f89c99fee6caa08fdc711de6dc0853b5a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c37969f89c99fee6caa08fdc711de6dc0853b5a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0fd118f53ae2ba7384a94c6821458275e6c226c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fd118f53ae2ba7384a94c6821458275e6c226c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0fd118f53ae2ba7384a94c6821458275e6c226c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fd118f53ae2ba7384a94c6821458275e6c226c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a8d1a16c7a355304ad77a873eda56d5fca915e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8d1a16c7a355304ad77a873eda56d5fca915e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8d1a16c7a355304ad77a873eda56d5fca915e8"}], "stats": {"total": 310, "additions": 232, "deletions": 78}, "files": [{"sha": "20079f9b240b54c78064c9eecc5f752e7537553d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f0fd118f53ae2ba7384a94c6821458275e6c226c", "patch": "@@ -1,3 +1,16 @@\n+2014-05-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/57394\n+\t* include/bits/ios_base.h (ios_base(const ios_base&)): Define as\n+\tdeleted for C++11.\n+\t(operator=(const ios_base&)): Likewise.\n+\t* include/std/streambuf: Remove trailing whitespace.\n+\t(basic_streambuf(const basic_streambuf&)): Fix initializer for\n+\t_M_out_end. Define as defaulted for C++11.\n+\t(operator=(const basic_streambuf&)): Define as defaulted for C++11.\n+\t(swap(basic_streambuf&)): Define for C++11.\n+\t* testsuite/27_io/basic_streambuf/cons/57394.cc: New.\n+\n 2014-05-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* acinclude.m4 ([GLIBCXX_ENABLE_C99]): Avoid -Wwrite-strings warning."}, {"sha": "59c506696f51a76d54eb3ff69a60784366ec95f0", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=f0fd118f53ae2ba7384a94c6821458275e6c226c", "patch": "@@ -780,13 +780,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   protected:\n     ios_base() throw ();\n \n+#if __cplusplus < 201103L\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 50.  Copy constructor and assignment operator of ios_base\n   private:\n     ios_base(const ios_base&);\n \n     ios_base&\n     operator=(const ios_base&);\n+#else\n+  public:\n+    ios_base(const ios_base&) = delete;\n+\n+    ios_base&\n+    operator=(const ios_base&) = delete;\n+#endif\n   };\n \n   // [27.4.5.1] fmtflags manipulators"}, {"sha": "0cb609d8b44e5a68d7e6a0fe7bbd4d37be354b60", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 98, "deletions": 78, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=f0fd118f53ae2ba7384a94c6821458275e6c226c", "patch": "@@ -117,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *       from the sequence).\n   */\n   template<typename _CharT, typename _Traits>\n-    class basic_streambuf \n+    class basic_streambuf\n     {\n     public:\n       //@{\n@@ -137,7 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// This is a non-standard type.\n       typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n       //@}\n-      \n+\n       friend class basic_ios<char_type, traits_type>;\n       friend class basic_istream<char_type, traits_type>;\n       friend class basic_ostream<char_type, traits_type>;\n@@ -148,7 +148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);\n \n       template<bool _IsMove, typename _CharT2>\n-        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n+        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n \t\t\t\t\t       _CharT2*>::__type\n         __copy_move_a2(istreambuf_iterator<_CharT2>,\n \t\t       istreambuf_iterator<_CharT2>, _CharT2*);\n@@ -189,12 +189,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       char_type* \t\t_M_out_end;    ///< End of put area.\n \n       /// Current locale setting.\n-      locale \t\t\t_M_buf_locale;\t\n+      locale \t\t\t_M_buf_locale;\n \n   public:\n       /// Destructor deallocates no buffer space.\n-      virtual \n-      ~basic_streambuf() \n+      virtual\n+      ~basic_streambuf()\n       { }\n \n       // [27.5.2.2.1] locales\n@@ -205,7 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls the derived imbue(__loc).\n       */\n-      locale \n+      locale\n       pubimbue(const locale& __loc)\n       {\n \tlocale __tmp(this->getloc());\n@@ -222,9 +222,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  is returned.  Otherwise the global locale in effect at the time\n        *  of construction is returned.\n       */\n-      locale   \n+      locale\n       getloc() const\n-      { return _M_buf_locale; } \n+      { return _M_buf_locale; }\n \n       // [27.5.2.2.2] buffer management and positioning\n       //@{\n@@ -236,7 +236,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  and returning the result unchanged.\n       */\n       basic_streambuf*\n-      pubsetbuf(char_type* __s, streamsize __n) \n+      pubsetbuf(char_type* __s, streamsize __n)\n       { return this->setbuf(__s, __n); }\n \n       /**\n@@ -247,8 +247,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls virtual seekoff function.\n       */\n-      pos_type \n-      pubseekoff(off_type __off, ios_base::seekdir __way, \n+      pos_type\n+      pubseekoff(off_type __off, ios_base::seekdir __way,\n \t\t ios_base::openmode __mode = ios_base::in | ios_base::out)\n       { return this->seekoff(__off, __way, __mode); }\n \n@@ -259,15 +259,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls virtual seekpos function.\n       */\n-      pos_type \n+      pos_type\n       pubseekpos(pos_type __sp,\n \t\t ios_base::openmode __mode = ios_base::in | ios_base::out)\n       { return this->seekpos(__sp, __mode); }\n \n       /**\n        *  @brief  Calls virtual sync function.\n       */\n-      int \n+      int\n       pubsync() { return this->sync(); }\n       //@}\n \n@@ -280,9 +280,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  available for reading before the buffer must be refilled.\n        *  Otherwise returns the derived @c showmanyc().\n       */\n-      streamsize \n-      in_avail() \n-      { \n+      streamsize\n+      in_avail()\n+      {\n \tconst streamsize __ret = this->egptr() - this->gptr();\n \treturn __ret ? __ret : this->showmanyc();\n       }\n@@ -294,11 +294,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Calls @c sbumpc(), and if that function returns\n        *  @c traits::eof(), so does this function.  Otherwise, @c sgetc().\n       */\n-      int_type \n+      int_type\n       snextc()\n       {\n \tint_type __ret = traits_type::eof();\n-\tif (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(), \n+\tif (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),\n \t\t\t\t\t\t       __ret), true))\n \t  __ret = this->sgetc();\n \treturn __ret;\n@@ -312,7 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  and increments the read pointer, otherwise calls and returns\n        *  @c uflow().\n       */\n-      int_type \n+      int_type\n       sbumpc()\n       {\n \tint_type __ret;\n@@ -321,7 +321,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __ret = traits_type::to_int_type(*this->gptr());\n \t    this->gbump(1);\n \t  }\n-\telse \n+\telse\n \t  __ret = this->uflow();\n \treturn __ret;\n       }\n@@ -331,16 +331,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @return  The next character, or eof.\n        *\n        *  If the input read position is available, returns that character,\n-       *  otherwise calls and returns @c underflow().  Does not move the \n+       *  otherwise calls and returns @c underflow().  Does not move the\n        *  read position after fetching the character.\n       */\n-      int_type \n+      int_type\n       sgetc()\n       {\n \tint_type __ret;\n \tif (__builtin_expect(this->gptr() < this->egptr(), true))\n \t  __ret = traits_type::to_int_type(*this->gptr());\n-\telse \n+\telse\n \t  __ret = this->underflow();\n \treturn __ret;\n       }\n@@ -353,7 +353,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns xsgetn(__s,__n).  The effect is to fill @a __s[0] through\n        *  @a __s[__n-1] with characters from the input sequence, if possible.\n       */\n-      streamsize \n+      streamsize\n       sgetn(char_type* __s, streamsize __n)\n       { return this->xsgetn(__s, __n); }\n \n@@ -368,15 +368,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the next character fetched from the input stream will be @a\n        *  __c.\n       */\n-      int_type \n+      int_type\n       sputbackc(char_type __c)\n       {\n \tint_type __ret;\n \tconst bool __testpos = this->eback() < this->gptr();\n-\tif (__builtin_expect(!__testpos || \n+\tif (__builtin_expect(!__testpos ||\n \t\t\t     !traits_type::eq(__c, this->gptr()[-1]), false))\n \t  __ret = this->pbackfail(traits_type::to_int_type(__c));\n-\telse \n+\telse\n \t  {\n \t    this->gbump(-1);\n \t    __ret = traits_type::to_int_type(*this->gptr());\n@@ -393,7 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  calls and returns pbackfail().  The effect is to @a unget\n        *  the last character @a gotten.\n       */\n-      int_type \n+      int_type\n       sungetc()\n       {\n \tint_type __ret;\n@@ -402,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    this->gbump(-1);\n \t    __ret = traits_type::to_int_type(*this->gptr());\n \t  }\n-\telse \n+\telse\n \t  __ret = this->pbackfail();\n \treturn __ret;\n       }\n@@ -420,7 +420,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the position, and returns @c traits::to_int_type(__c).  If a write\n        *  position is not available, returns @c overflow(__c).\n       */\n-      int_type \n+      int_type\n       sputc(char_type __c)\n       {\n \tint_type __ret;\n@@ -446,7 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns xsputn(__s,__n).  The effect is to write @a __s[0] through\n        *  @a __s[__n-1] to the output sequence, if possible.\n       */\n-      streamsize \n+      streamsize\n       sputn(const char_type* __s, streamsize __n)\n       { return this->xsputn(__s, __n); }\n \n@@ -461,9 +461,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  - this is not an error\n       */\n       basic_streambuf()\n-      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0), \n+      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),\n       _M_out_beg(0), _M_out_cur(0), _M_out_end(0),\n-      _M_buf_locale(locale()) \n+      _M_buf_locale(locale())\n       { }\n \n       // [27.5.2.3.1] get area access\n@@ -478,13 +478,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  - gptr() returns the next pointer for the input sequence\n        *  - egptr() returns the end pointer for the input sequence\n       */\n-      char_type* \n+      char_type*\n       eback() const { return _M_in_beg; }\n \n-      char_type* \n+      char_type*\n       gptr()  const { return _M_in_cur;  }\n \n-      char_type* \n+      char_type*\n       egptr() const { return _M_in_end; }\n       //@}\n \n@@ -494,7 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  This just advances the read position without returning any data.\n       */\n-      void \n+      void\n       gbump(int __n) { _M_in_cur += __n; }\n \n       /**\n@@ -505,7 +505,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @post  @a __gbeg == @c eback(), @a __gnext == @c gptr(), and\n        *         @a __gend == @c egptr()\n       */\n-      void \n+      void\n       setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)\n       {\n \t_M_in_beg = __gbeg;\n@@ -525,13 +525,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  - pptr() returns the next pointer for the output sequence\n        *  - epptr() returns the end pointer for the output sequence\n       */\n-      char_type* \n+      char_type*\n       pbase() const { return _M_out_beg; }\n \n-      char_type* \n+      char_type*\n       pptr() const { return _M_out_cur; }\n \n-      char_type* \n+      char_type*\n       epptr() const { return _M_out_end; }\n       //@}\n \n@@ -541,7 +541,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  This just advances the write position without returning any data.\n       */\n-      void \n+      void\n       pbump(int __n) { _M_out_cur += __n; }\n \n       /**\n@@ -551,10 +551,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @post  @a __pbeg == @c pbase(), @a __pbeg == @c pptr(), and\n        *         @a __pend == @c epptr()\n       */\n-      void \n+      void\n       setp(char_type* __pbeg, char_type* __pend)\n-      { \n-\t_M_out_beg = _M_out_cur = __pbeg; \n+      {\n+\t_M_out_beg = _M_out_cur = __pbeg;\n \t_M_out_end = __pend;\n       }\n \n@@ -572,36 +572,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  @note  Base class version does nothing.\n       */\n-      virtual void \n-      imbue(const locale& __loc) \n+      virtual void\n+      imbue(const locale& __loc)\n       { }\n \n       // [27.5.2.4.2] buffer management and positioning\n       /**\n        *  @brief  Manipulates the buffer.\n        *\n        *  Each derived class provides its own appropriate behavior.  See\n-       *  the next-to-last paragraph of \n+       *  the next-to-last paragraph of\n        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html\n        *  for more on this function.\n        *\n        *  @note  Base class version does nothing, returns @c this.\n       */\n-      virtual basic_streambuf<char_type,_Traits>* \n+      virtual basic_streambuf<char_type,_Traits>*\n       setbuf(char_type*, streamsize)\n       {\treturn this; }\n-      \n+\n       /**\n        *  @brief  Alters the stream positions.\n        *\n        *  Each derived class provides its own appropriate behavior.\n        *  @note  Base class version does nothing, returns a @c pos_type\n        *         that represents an invalid stream position.\n       */\n-      virtual pos_type \n+      virtual pos_type\n       seekoff(off_type, ios_base::seekdir,\n \t      ios_base::openmode /*__mode*/ = ios_base::in | ios_base::out)\n-      { return pos_type(off_type(-1)); } \n+      { return pos_type(off_type(-1)); }\n \n       /**\n        *  @brief  Alters the stream positions.\n@@ -610,10 +610,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @note  Base class version does nothing, returns a @c pos_type\n        *         that represents an invalid stream position.\n       */\n-      virtual pos_type \n-      seekpos(pos_type, \n+      virtual pos_type\n+      seekpos(pos_type,\n \t      ios_base::openmode /*__mode*/ = ios_base::in | ios_base::out)\n-      { return pos_type(off_type(-1)); } \n+      { return pos_type(off_type(-1)); }\n \n       /**\n        *  @brief  Synchronizes the buffer arrays with the controlled sequences.\n@@ -623,7 +623,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  including the definition of @a failure.\n        *  @note  Base class version does nothing, returns zero.\n       */\n-      virtual int \n+      virtual int\n       sync() { return 0; }\n \n       // [27.5.2.4.3] get area\n@@ -645,7 +645,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @note  The standard adds that <em>the morphemes of @c showmanyc are\n        *         @b es-how-many-see, not @b show-manic.</em>\n       */\n-      virtual streamsize \n+      virtual streamsize\n       showmanyc() { return 0; }\n \n       /**\n@@ -661,7 +661,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  It is expected that derived classes provide a more efficient\n        *  implementation by overriding this definition.\n       */\n-      virtual streamsize \n+      virtual streamsize\n       xsgetn(char_type* __s, streamsize __n);\n \n       /**\n@@ -683,7 +683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  @note  Base class version does nothing, returns eof().\n       */\n-      virtual int_type \n+      virtual int_type\n       underflow()\n       { return traits_type::eof(); }\n \n@@ -696,18 +696,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the new character, like @c underflow() does.  However, this\n        *  function also moves the read position forward by one.\n       */\n-      virtual int_type \n-      uflow() \n+      virtual int_type\n+      uflow()\n       {\n \tint_type __ret = traits_type::eof();\n-\tconst bool __testeof = traits_type::eq_int_type(this->underflow(), \n+\tconst bool __testeof = traits_type::eq_int_type(this->underflow(),\n \t\t\t\t\t\t\t__ret);\n \tif (!__testeof)\n \t  {\n \t    __ret = traits_type::to_int_type(*this->gptr());\n \t    this->gbump(1);\n \t  }\n-\treturn __ret;    \n+\treturn __ret;\n       }\n \n       // [27.5.2.4.4] putback\n@@ -720,7 +720,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  @note  Base class version does nothing, returns eof().\n       */\n-      virtual int_type \n+      virtual int_type\n       pbackfail(int_type __c  = traits_type::eof())\n       { return traits_type::eof(); }\n \n@@ -738,7 +738,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  It is expected that derived classes provide a more efficient\n        *  implementation by overriding this definition.\n       */\n-      virtual streamsize \n+      virtual streamsize\n       xsputn(const char_type* __s, streamsize __n);\n \n       /**\n@@ -764,7 +764,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  @note  Base class version does nothing, returns eof().\n       */\n-      virtual int_type \n+      virtual int_type\n       overflow(int_type __c  = traits_type::eof())\n       { return traits_type::eof(); }\n \n@@ -779,35 +779,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  See http://gcc.gnu.org/ml/libstdc++/2002-05/msg00168.html\n        */\n-      void \n-      stossc() \n+      void\n+      stossc()\n       {\n-\tif (this->gptr() < this->egptr()) \n+\tif (this->gptr() < this->egptr())\n \t  this->gbump(1);\n-\telse \n+\telse\n \t  this->uflow();\n       }\n #endif\n \n       // Also used by specializations for char and wchar_t in src.\n-      void \n+      void\n       __safe_gbump(streamsize __n) { _M_in_cur += __n; }\n \n       void\n       __safe_pbump(streamsize __n) { _M_out_cur += __n; }\n \n+#if __cplusplus < 201103L\n     private:\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // Side effect of DR 50. \n+      // Side effect of DR 50.\n       basic_streambuf(const basic_streambuf& __sb)\n-      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur), \n-      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg), \n-      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),\n-      _M_buf_locale(__sb._M_buf_locale) \n+      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),\n+      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),\n+      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_end),\n+      _M_buf_locale(__sb._M_buf_locale)\n       { }\n \n       basic_streambuf&\n-      operator=(const basic_streambuf&) { return *this; };\n+      operator=(const basic_streambuf&) { return *this; }\n+#else\n+    protected:\n+      basic_streambuf(const basic_streambuf&) = default;\n+\n+      basic_streambuf&\n+      operator=(const basic_streambuf&) = default;\n+\n+      void\n+      swap(basic_streambuf& __sb)\n+      {\n+\tstd::swap(_M_in_beg, __sb._M_in_beg);\n+\tstd::swap(_M_in_cur, __sb._M_in_cur);\n+\tstd::swap(_M_in_end, __sb._M_in_end);\n+\tstd::swap(_M_out_beg, __sb._M_out_beg);\n+\tstd::swap(_M_out_cur, __sb._M_out_cur);\n+\tstd::swap(_M_out_end, __sb._M_out_end);\n+\tstd::swap(_M_buf_locale, __sb._M_buf_locale);\n+      }\n+#endif\n     };\n \n   // Explicit specialization declarations, defined in src/streambuf.cc."}, {"sha": "f58c545a6f23c9cae03418bb2961d59887996b40", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/cons/57394.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2F57394.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fd118f53ae2ba7384a94c6821458275e6c226c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2F57394.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2F57394.cc?ref=f0fd118f53ae2ba7384a94c6821458275e6c226c", "patch": "@@ -0,0 +1,113 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-namedlocale \"de_DE\" }\n+\n+// 27.6.3 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct streambuf : std::streambuf\n+{\n+  streambuf()\n+  {\n+    setp(pbuf, std::end(pbuf));\n+    setg(gbuf, gbuf, gbuf);\n+  }\n+\n+  streambuf(const std::locale& loc) : streambuf()\n+  {\n+    imbue(loc);\n+  }\n+\n+  // implement tests as member functions to be able to call protected members\n+  void test_copy() const;\n+  void test_assign() const;\n+  void test_swap() const;\n+\n+  char gbuf[32];\n+  char pbuf[32];\n+};\n+\n+void streambuf::test_copy() const\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  streambuf a(*this);\n+\n+  VERIFY( eback()  == a.eback() );\n+  VERIFY( gptr()   == a.gptr() );\n+  VERIFY( egptr()  == a.egptr() );\n+  VERIFY( pbase()  == a.pbase() );\n+  VERIFY( pptr()   == a.pptr() );\n+  VERIFY( epptr()  == a.epptr() );\n+  VERIFY( getloc() == a.getloc() );\n+}\n+\n+void streambuf::test_assign() const\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  streambuf a;\n+  a = *this;\n+\n+  VERIFY( eback()  == a.eback() );\n+  VERIFY( gptr()   == a.gptr() );\n+  VERIFY( egptr()  == a.egptr() );\n+  VERIFY( pbase()  == a.pbase() );\n+  VERIFY( pptr()   == a.pptr() );\n+  VERIFY( epptr()  == a.epptr() );\n+  VERIFY( getloc() == a.getloc() );\n+}\n+\n+void streambuf::test_swap() const\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  streambuf a(*this);\n+  streambuf b;\n+  const streambuf c(b);\n+\n+  a.swap(b);\n+\n+  VERIFY( eback()  == b.eback() );\n+  VERIFY( gptr()   == b.gptr() );\n+  VERIFY( egptr()  == b.egptr() );\n+  VERIFY( pbase()  == b.pbase() );\n+  VERIFY( pptr()   == b.pptr() );\n+  VERIFY( epptr()  == b.epptr() );\n+  VERIFY( getloc() == b.getloc() );\n+\n+  VERIFY( c.eback()  == a.eback() );\n+  VERIFY( c.gptr()   == a.gptr() );\n+  VERIFY( c.egptr()  == a.egptr() );\n+  VERIFY( c.pbase()  == a.pbase() );\n+  VERIFY( c.pptr()   == a.pptr() );\n+  VERIFY( c.epptr()  == a.epptr() );\n+  VERIFY( c.getloc() == a.getloc() );\n+}\n+\n+int main()\n+{\n+  std::locale loc(\"de_DE\");\n+  streambuf s(loc);\n+  s.test_copy();\n+  s.test_assign();\n+  s.test_swap();\n+}"}]}