{"sha": "fb155425c4cd07dcc0326aae14d094c1078ce62e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxNTU0MjVjNGNkMDdkY2MwMzI2YWFlMTRkMDk0YzEwNzhjZTYyZQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2015-09-10T09:46:03Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2015-09-10T09:46:03Z"}, "message": "arc-common.c: Remove references to A5.\n\n2015-09-10  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * common/config/arc/arc-common.c: Remove references to A5.\n        * config/arc/arc-opts.h: Likewise.\n        * config/arc/arc.c, config/arc/arc.h, config/arc/arc.md: Likewise.\n        * config/arc/arc.opt, config/arc/constraints.md: Likewise.\n        * config/arc/t-arc-newlib: Likewise.\n\nFrom-SVN: r227627", "tree": {"sha": "c29e3f54b02b243f93b96061e2919de077563a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c29e3f54b02b243f93b96061e2919de077563a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb155425c4cd07dcc0326aae14d094c1078ce62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb155425c4cd07dcc0326aae14d094c1078ce62e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb155425c4cd07dcc0326aae14d094c1078ce62e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb155425c4cd07dcc0326aae14d094c1078ce62e/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efdbb285f5154d274861751a222da25a8bbed3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdbb285f5154d274861751a222da25a8bbed3ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efdbb285f5154d274861751a222da25a8bbed3ce"}], "stats": {"total": 53, "additions": 19, "deletions": 34}, "files": [{"sha": "92665934d8188e1f0a743fede3ddcaeb74d830d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -1,3 +1,11 @@\n+2015-09-10  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* common/config/arc/arc-common.c: Remove references to A5.\n+\t* config/arc/arc-opts.h: Likewise.\n+\t* config/arc/arc.c, config/arc/arc.h, config/arc/arc.md: Likewise.\n+\t* config/arc/arc.opt, config/arc/constraints.md: Likewise.\n+\t* config/arc/t-arc-newlib: Likewise.\n+\n 2015-09-10  Claudiu Zissulescu <claziss@synopsys.com>\n \n \t* config/arc/arc.md (length): Fix attribute length for conditional"}, {"sha": "489bdb22533fc1cbc33943d3e1f479db11d5271f", "filename": "gcc/common/config/arc/arc-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farc%2Farc-common.c?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -33,7 +33,7 @@ arc_option_init_struct (struct gcc_options *opts)\n {\n   opts->x_flag_no_common = 255; /* Mark as not user-initialized.  */\n \n-  /* Which cpu we're compiling for (A5, ARC600, ARC601, ARC700).  */\n+  /* Which cpu we're compiling for (ARC600, ARC601, ARC700).  */\n   arc_cpu = PROCESSOR_NONE;\n }\n \n@@ -82,7 +82,6 @@ arc_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n       switch (value)\n \t{\n-\tcase PROCESSOR_A5:\n \tcase PROCESSOR_ARC600:\n \tcase PROCESSOR_ARC700:\n \t  if (! (opts_set->x_target_flags & MASK_BARREL_SHIFTER) )"}, {"sha": "cca1f035636a3c1f22d27de4cffc7b7095184bf9", "filename": "gcc/config/arc/arc-opts.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-opts.h?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -21,7 +21,6 @@\n enum processor_type\n {\n   PROCESSOR_NONE,\n-  PROCESSOR_A5,\n   PROCESSOR_ARC600,\n   PROCESSOR_ARC601,\n   PROCESSOR_ARC700"}, {"sha": "e9ecc908cb8134e13731c9bf459925840a5c0c94", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -77,7 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n \n-/* Which cpu we're compiling for (A5, ARC600, ARC601, ARC700).  */\n+/* Which cpu we're compiling for (ARC600, ARC601, ARC700).  */\n static const char *arc_cpu_string = \"\";\n \n /* ??? Loads can handle any constant, stores can only handle small ones.  */\n@@ -702,11 +702,7 @@ arc_init (void)\n {\n   enum attr_tune tune_dflt = TUNE_NONE;\n \n-  if (TARGET_A5)\n-    {\n-      arc_cpu_string = \"A5\";\n-    }\n-  else if (TARGET_ARC600)\n+  if (TARGET_ARC600)\n     {\n       arc_cpu_string = \"ARC600\";\n       tune_dflt = TUNE_ARC600;\n@@ -755,7 +751,7 @@ arc_init (void)\n \tbreak;\n       }\n \n-  /* Support mul64 generation only for A5 and ARC600.  */\n+  /* Support mul64 generation only for ARC600.  */\n   if (TARGET_MUL64_SET && TARGET_ARC700)\n       error (\"-mmul64 not supported for ARC700\");\n \n@@ -1280,7 +1276,7 @@ arc_conditional_register_usage (void)\n \t   i <= ARC_LAST_SIMD_DMA_CONFIG_REG; i++)\n \treg_alloc_order [i] = i;\n     }\n-  /* For Arctangent-A5 / ARC600, lp_count may not be read in an instruction\n+  /* For ARC600, lp_count may not be read in an instruction\n      following immediately after another one setting it to a new value.\n      There was some discussion on how to enforce scheduling constraints for\n      processors with missing interlocks on the gcc mailing list:\n@@ -2093,7 +2089,7 @@ arc_compute_frame_size (int size)\t/* size = # of var. bytes allocated.  */\n   total_size = ARC_STACK_ALIGN (total_size);\n \n   /* Compute offset of register save area from stack pointer:\n-     A5 Frame: pretend_size <blink> reg_size <fp> var_size args_size <--sp\n+     Frame: pretend_size <blink> reg_size <fp> var_size args_size <--sp\n   */\n   reg_offset = (total_size - (pretend_size + reg_size + extra_size)\n \t\t+ (frame_pointer_needed ? 4 : 0));"}, {"sha": "874b118421dfb21a39bb9a36e03ea5c0837cdf0b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -66,9 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_CPU_CPP_BUILTINS()\t\\\n  do {\t\t\t\t\t\\\n     builtin_define (\"__arc__\");\t\t\\\n-    if (TARGET_A5)\t\t\t\\\n-      builtin_define (\"__A5__\");\t\\\n-    else if (TARGET_ARC600)\t\t\t\\\n+    if (TARGET_ARC600)\t\t\t\\\n       {\t\t\t\t\t\\\n \tbuiltin_define (\"__A6__\");\t\\\n \tbuiltin_define (\"__ARC600__\");\t\\\n@@ -133,7 +131,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define ASM_SPEC  \"\\\n %{mbig-endian|EB:-EB} %{EL} \\\n-%{mcpu=A5|mcpu=a5|mA5:-mA5} \\\n %{mcpu=ARC600:-mARC600} \\\n %{mcpu=ARC601:-mARC601} \\\n %{mcpu=ARC700:-mARC700} \\\n@@ -224,7 +221,6 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #define DRIVER_SELF_SPECS DRIVER_ENDIAN_SELF_SPECS \\\n-  \"%{mARC5|mA5: -mcpu=A5 %<mARC5 %<mA5}\" \\\n   \"%{mARC600|mA6: -mcpu=ARC600 %<mARC600 %<mA6}\" \\\n   \"%{mARC601: -mcpu=ARC601 %<mARC601}\" \\\n   \"%{mARC700|mA7: -mcpu=ARC700 %<mARC700 %<mA7}\" \\\n@@ -277,7 +273,6 @@ along with GCC; see the file COPYING3.  If not see\n    use conditional execution?  */\n #define TARGET_AT_DBR_CONDEXEC  (!TARGET_ARC700)\n \n-#define TARGET_A5 (arc_cpu == PROCESSOR_A5)\n #define TARGET_ARC600 (arc_cpu == PROCESSOR_ARC600)\n #define TARGET_ARC601 (arc_cpu == PROCESSOR_ARC601)\n #define TARGET_ARC700 (arc_cpu == PROCESSOR_ARC700)"}, {"sha": "e1da4d70085997597a747ceddc737fc2dbced019", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -188,7 +188,7 @@\n \n \n ;; Attribute describing the processor\n-(define_attr \"cpu\" \"none,A5,ARC600,ARC700\"\n+(define_attr \"cpu\" \"none,ARC600,ARC700\"\n   (const (symbol_ref \"arc_cpu_attr\")))\n \n ;; true for compact instructions (those with _s suffix)\n@@ -4903,9 +4903,7 @@\n \n ; operand 0 is the loop count pseudo register\n ; operand 1 is the label to jump to at the top of the loop\n-; Use this for the ARC600 and ARC700.  For ARCtangent-A5, this is unsafe\n-; without further checking for nearby branches etc., and without proper\n-; annotation of shift patterns that clobber lp_count\n+; Use this for the ARC600 and ARC700.\n ; ??? ARC600 might want to check if the loop has few iteration and only a\n ; single insn - loop setup is expensive then.\n (define_expand \"doloop_end\""}, {"sha": "7c859e4bfcdd4ff25cb2238697e8d5a67a252995", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -33,10 +33,6 @@ mno-cond-exec\n Target Report RejectNegative Mask(NO_COND_EXEC)\n Disable ARCompact specific pass to generate conditional execution instructions\n \n-mA5\n-Target Report\n-Generate ARCompact 32-bit code for ARCtangent-A5 processor\n-\n mA6\n Target Report\n Generate ARCompact 32-bit code for ARC600 processor\n@@ -61,7 +57,7 @@ mmixed-code\n Target Report Mask(MIXED_CODE_SET)\n Tweak register allocation to help 16-bit instruction generation\n ; originally this was:\n-;Generate ARCompact 16-bit instructions intermixed with 32-bit instructions for ARCtangent-A5 and higher processors\n+;Generate ARCompact 16-bit instructions intermixed with 32-bit instructions\n ; but we do that without -mmixed-code, too, it's just a different instruction\n ; count / size tradeoff.\n \n@@ -162,9 +158,6 @@ Target RejectNegative Joined Var(arc_cpu) Enum(processor_type) Init(PROCESSOR_NO\n Enum\n Name(processor_type) Type(enum processor_type)\n \n-EnumValue\n-Enum(processor_type) String(A5) Value(PROCESSOR_A5)\n-\n EnumValue\n Enum(processor_type) String(ARC600) Value(PROCESSOR_ARC600)\n "}, {"sha": "8902246ff21d3c88c01bce175e901d6ca97d18eb", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -21,7 +21,7 @@\n \n ; Most instructions accept arbitrary core registers for their inputs, even\n ; if the core register in question cannot be written to, like the multiply\n-; result registers of the ARCtangent-A5 and ARC600 .\n+; result registers of ARC600.\n ; First, define a class for core registers that can be read cheaply.  This\n ; is most or all core registers for ARC600, but only r0-r31 for ARC700\n (define_register_constraint \"c\" \"CHEAP_CORE_REGS\""}, {"sha": "8823805b8aaf47031a733146df74f8c1474adb64", "filename": "gcc/config/arc/t-arc-newlib", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Ft-arc-newlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb155425c4cd07dcc0326aae14d094c1078ce62e/gcc%2Fconfig%2Farc%2Ft-arc-newlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc-newlib?ref=fb155425c4cd07dcc0326aae14d094c1078ce62e", "patch": "@@ -17,16 +17,13 @@\n # with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Selecting -mA5 uses the same functional multilib files/libraries\n-# as get used for -mARC600 aka -mA6.\n MULTILIB_OPTIONS=mcpu=ARC600/mcpu=ARC601 mmul64/mmul32x16 mnorm\n MULTILIB_DIRNAMES=arc600 arc601 mul64 mul32x16 norm\n #\n # Aliases:\n MULTILIB_MATCHES  = mcpu?ARC600=mcpu?arc600\n MULTILIB_MATCHES += mcpu?ARC600=mARC600\n MULTILIB_MATCHES += mcpu?ARC600=mA6\n-MULTILIB_MATCHES += mcpu?ARC600=mA5\n MULTILIB_MATCHES += mcpu?ARC600=mno-mpy\n MULTILIB_MATCHES += mcpu?ARC601=mcpu?arc601\n MULTILIB_MATCHES += EL=mlittle-endian"}]}