{"sha": "77804c9a62fa40d132b7b3a22320a75b06a63ca5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4MDRjOWE2MmZhNDBkMTMyYjdiM2EyMjMyMGE3NWIwNmE2M2NhNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-10T21:33:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-10T21:33:18Z"}, "message": "Add missing pragma Inline for classification attributes\n\nThis also moves other pragmas to their corresponding section.\n\ngcc/ada/\n\t* einfo-utils.ads (Classification Attributes): Add pragma Inline.\n\t(Synthesized Attribute Functions): Move pragma Inline around.\n\t(Type Representation Attribute Predicates): Likewise.\n\t(Field Initialization Routines): Likewise.\n\t(Miscellaneous Subprogram): Likewise.", "tree": {"sha": "04044f001f7533274e4d95c85575806e4f5f5547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04044f001f7533274e4d95c85575806e4f5f5547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77804c9a62fa40d132b7b3a22320a75b06a63ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77804c9a62fa40d132b7b3a22320a75b06a63ca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77804c9a62fa40d132b7b3a22320a75b06a63ca5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77804c9a62fa40d132b7b3a22320a75b06a63ca5/comments", "author": null, "committer": null, "parents": [{"sha": "b1241d573822afcc591ba7a84b8866a440f24073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1241d573822afcc591ba7a84b8866a440f24073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1241d573822afcc591ba7a84b8866a440f24073"}], "stats": {"total": 188, "additions": 113, "deletions": 75}, "files": [{"sha": "1b32a4577a4ca4aacc9d8935d6d301fda81cc858", "filename": "gcc/ada/einfo-utils.ads", "status": "modified", "additions": 113, "deletions": 75, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77804c9a62fa40d132b7b3a22320a75b06a63ca5/gcc%2Fada%2Feinfo-utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77804c9a62fa40d132b7b3a22320a75b06a63ca5/gcc%2Fada%2Feinfo-utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.ads?ref=77804c9a62fa40d132b7b3a22320a75b06a63ca5", "patch": "@@ -141,6 +141,53 @@ package Einfo.Utils is\n    function Is_Task_Type                        (Id : E) return B;\n    function Is_Type                             (Id : E) return B;\n \n+   pragma Inline (Is_Access_Object_Type);\n+   pragma Inline (Is_Access_Type);\n+   pragma Inline (Is_Access_Protected_Subprogram_Type);\n+   pragma Inline (Is_Access_Subprogram_Type);\n+   pragma Inline (Is_Aggregate_Type);\n+   pragma Inline (Is_Anonymous_Access_Type);\n+   pragma Inline (Is_Array_Type);\n+   pragma Inline (Is_Assignable);\n+   pragma Inline (Is_Class_Wide_Type);\n+   pragma Inline (Is_Composite_Type);\n+   pragma Inline (Is_Concurrent_Body);\n+   pragma Inline (Is_Concurrent_Type);\n+   pragma Inline (Is_Decimal_Fixed_Point_Type);\n+   pragma Inline (Is_Digits_Type);\n+   pragma Inline (Is_Discrete_Type);\n+   pragma Inline (Is_Elementary_Type);\n+   pragma Inline (Is_Entry);\n+   pragma Inline (Is_Enumeration_Type);\n+   pragma Inline (Is_Fixed_Point_Type);\n+   pragma Inline (Is_Floating_Point_Type);\n+   pragma Inline (Is_Formal);\n+   pragma Inline (Is_Formal_Object);\n+   pragma Inline (Is_Generic_Subprogram);\n+   pragma Inline (Is_Generic_Unit);\n+   pragma Inline (Is_Ghost_Entity);\n+   pragma Inline (Is_Incomplete_Or_Private_Type);\n+   pragma Inline (Is_Incomplete_Type);\n+   pragma Inline (Is_Integer_Type);\n+   pragma Inline (Is_Modular_Integer_Type);\n+   pragma Inline (Is_Named_Access_Type);\n+   pragma Inline (Is_Named_Number);\n+   pragma Inline (Is_Numeric_Type);\n+   pragma Inline (Is_Object);\n+   pragma Inline (Is_Ordinary_Fixed_Point_Type);\n+   pragma Inline (Is_Overloadable);\n+   pragma Inline (Is_Private_Type);\n+   pragma Inline (Is_Protected_Type);\n+   pragma Inline (Is_Real_Type);\n+   pragma Inline (Is_Record_Type);\n+   pragma Inline (Is_Scalar_Type);\n+   pragma Inline (Is_Signed_Integer_Type);\n+   pragma Inline (Is_Subprogram);\n+   pragma Inline (Is_Subprogram_Or_Entry);\n+   pragma Inline (Is_Subprogram_Or_Generic_Subprogram);\n+   pragma Inline (Is_Task_Type);\n+   pragma Inline (Is_Type);\n+\n    -------------------------------------\n    -- Synthesized Attribute Functions --\n    -------------------------------------\n@@ -234,6 +281,34 @@ package Einfo.Utils is\n    function Type_Low_Bound                      (Id : E) return N;\n    function Underlying_Type                     (Id : E) return E;\n \n+   pragma Inline (Address_Clause);\n+   pragma Inline (Alignment_Clause);\n+   pragma Inline (Base_Type);\n+   pragma Inline (Has_Foreign_Convention);\n+   pragma Inline (Has_Non_Limited_View);\n+   pragma Inline (Is_Base_Type);\n+   pragma Inline (Is_Boolean_Type);\n+   pragma Inline (Is_Constant_Object);\n+   pragma Inline (Is_Controlled);\n+   pragma Inline (Is_Discriminal);\n+   pragma Inline (Is_Finalizer);\n+   pragma Inline (Is_Full_Access);\n+   pragma Inline (Is_Null_State);\n+   pragma Inline (Is_Package_Or_Generic_Package);\n+   pragma Inline (Is_Packed_Array);\n+   pragma Inline (Is_Prival);\n+   pragma Inline (Is_Protected_Component);\n+   pragma Inline (Is_Protected_Record_Type);\n+   pragma Inline (Is_String_Type);\n+   pragma Inline (Is_Task_Record_Type);\n+   pragma Inline (Is_Wrapper_Package);\n+   pragma Inline (Scope_Depth);\n+   pragma Inline (Scope_Depth_Set);\n+   pragma Inline (Size_Clause);\n+   pragma Inline (Stream_Size_Clause);\n+   pragma Inline (Type_High_Bound);\n+   pragma Inline (Type_Low_Bound);\n+\n    ----------------------------------------------\n    -- Type Representation Attribute Predicates --\n    ----------------------------------------------\n@@ -297,6 +372,32 @@ package Einfo.Utils is\n    function Unknown_Normalized_Position_Max       (E : Entity_Id) return B;\n    function Unknown_RM_Size                       (E : Entity_Id) return B;\n \n+   pragma Inline (Known_Alignment);\n+   pragma Inline (Known_Component_Bit_Offset);\n+   pragma Inline (Known_Component_Size);\n+   pragma Inline (Known_Esize);\n+   pragma Inline (Known_Normalized_First_Bit);\n+   pragma Inline (Known_Normalized_Position);\n+   pragma Inline (Known_Normalized_Position_Max);\n+   pragma Inline (Known_RM_Size);\n+\n+   pragma Inline (Known_Static_Component_Bit_Offset);\n+   pragma Inline (Known_Static_Component_Size);\n+   pragma Inline (Known_Static_Esize);\n+   pragma Inline (Known_Static_Normalized_First_Bit);\n+   pragma Inline (Known_Static_Normalized_Position);\n+   pragma Inline (Known_Static_Normalized_Position_Max);\n+   pragma Inline (Known_Static_RM_Size);\n+\n+   pragma Inline (Unknown_Alignment);\n+   pragma Inline (Unknown_Component_Bit_Offset);\n+   pragma Inline (Unknown_Component_Size);\n+   pragma Inline (Unknown_Esize);\n+   pragma Inline (Unknown_Normalized_First_Bit);\n+   pragma Inline (Unknown_Normalized_Position);\n+   pragma Inline (Unknown_Normalized_Position_Max);\n+   pragma Inline (Unknown_RM_Size);\n+\n    ---------------------------------------------------\n    -- Access to Subprograms in Subprograms_For_Type --\n    ---------------------------------------------------\n@@ -367,6 +468,16 @@ package Einfo.Utils is\n    procedure Init_Normalized_Position_Max  (Id : E);\n    procedure Init_RM_Size                  (Id : E);\n \n+   pragma Inline (Init_Alignment);\n+   pragma Inline (Init_Component_Bit_Offset);\n+   pragma Inline (Init_Component_Size);\n+   pragma Inline (Init_Digits_Value);\n+   pragma Inline (Init_Esize);\n+   pragma Inline (Init_Normalized_First_Bit);\n+   pragma Inline (Init_Normalized_Position);\n+   pragma Inline (Init_Normalized_Position_Max);\n+   pragma Inline (Init_RM_Size);\n+\n    procedure Init_Component_Location (Id : E);\n    --  Initializes all fields describing the location of a component\n    --  (Normalized_Position, Component_Bit_Offset, Normalized_First_Bit,\n@@ -597,86 +708,13 @@ package Einfo.Utils is\n    --  Also, if the Etype of E is set and is an anonymous access type with\n    --  no convention set, this anonymous type inherits the convention of E.\n \n+   pragma Inline (Is_Entity_Name);\n+\n    ----------------------------------\n    -- Debugging Output Subprograms --\n    ----------------------------------\n \n    procedure Write_Entity_Info (Id : Entity_Id; Prefix : String);\n    --  A debugging procedure to write out information about an entity\n \n-   --  ????Make sure the Inlines from Einfo were fully copied here.\n-   --  ????\n-   --  The following Inline pragmas are *not* read by XEINFO when building the\n-   --  C version of this interface automatically (so the C version will end up\n-   --  making out of line calls). The pragma scan in XEINFO will be terminated\n-   --  on encountering the END XEINFO INLINES line. We inline things here which\n-   --  are small, but not of the canonical attribute access/set format that can\n-   --  be handled by XEINFO.\n-\n-   pragma Inline (Address_Clause);\n-   pragma Inline (Alignment_Clause);\n-   pragma Inline (Base_Type);\n-\n-   pragma Inline (Has_Foreign_Convention);\n-   pragma Inline (Has_Non_Limited_View);\n-   pragma Inline (Is_Base_Type);\n-   pragma Inline (Is_Boolean_Type);\n-   pragma Inline (Is_Constant_Object);\n-   pragma Inline (Is_Controlled);\n-   pragma Inline (Is_Discriminal);\n-   pragma Inline (Is_Entity_Name);\n-   pragma Inline (Is_Finalizer);\n-   pragma Inline (Is_Full_Access);\n-   pragma Inline (Is_Null_State);\n-   pragma Inline (Is_Package_Or_Generic_Package);\n-   pragma Inline (Is_Packed_Array);\n-   pragma Inline (Is_Prival);\n-   pragma Inline (Is_Protected_Component);\n-   pragma Inline (Is_Protected_Record_Type);\n-   pragma Inline (Is_String_Type);\n-   pragma Inline (Is_Task_Record_Type);\n-   pragma Inline (Is_Wrapper_Package);\n-   pragma Inline (Scope_Depth);\n-   pragma Inline (Scope_Depth_Set);\n-   pragma Inline (Size_Clause);\n-   pragma Inline (Stream_Size_Clause);\n-   pragma Inline (Type_High_Bound);\n-   pragma Inline (Type_Low_Bound);\n-\n-   pragma Inline (Known_Alignment);\n-   pragma Inline (Known_Component_Bit_Offset);\n-   pragma Inline (Known_Component_Size);\n-   pragma Inline (Known_Esize);\n-   pragma Inline (Known_Normalized_First_Bit);\n-   pragma Inline (Known_Normalized_Position);\n-   pragma Inline (Known_Normalized_Position_Max);\n-   pragma Inline (Known_RM_Size);\n-\n-   pragma Inline (Known_Static_Component_Bit_Offset);\n-   pragma Inline (Known_Static_Component_Size);\n-   pragma Inline (Known_Static_Esize);\n-   pragma Inline (Known_Static_Normalized_First_Bit);\n-   pragma Inline (Known_Static_Normalized_Position);\n-   pragma Inline (Known_Static_Normalized_Position_Max);\n-   pragma Inline (Known_Static_RM_Size);\n-\n-   pragma Inline (Unknown_Alignment);\n-   pragma Inline (Unknown_Component_Bit_Offset);\n-   pragma Inline (Unknown_Component_Size);\n-   pragma Inline (Unknown_Esize);\n-   pragma Inline (Unknown_Normalized_First_Bit);\n-   pragma Inline (Unknown_Normalized_Position);\n-   pragma Inline (Unknown_Normalized_Position_Max);\n-   pragma Inline (Unknown_RM_Size);\n-\n-   pragma Inline (Init_Alignment);\n-   pragma Inline (Init_Component_Bit_Offset);\n-   pragma Inline (Init_Component_Size);\n-   pragma Inline (Init_Digits_Value);\n-   pragma Inline (Init_Esize);\n-   pragma Inline (Init_Normalized_First_Bit);\n-   pragma Inline (Init_Normalized_Position);\n-   pragma Inline (Init_Normalized_Position_Max);\n-   pragma Inline (Init_RM_Size);\n-\n end Einfo.Utils;"}]}