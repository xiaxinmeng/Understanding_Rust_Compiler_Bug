{"sha": "ed722edd2f4accad60744b95426dba3fc9ca084c", "node_id": "C_kwDOANBUbNoAKGVkNzIyZWRkMmY0YWNjYWQ2MDc0NGI5NTQyNmRiYTNmYzljYTA4NGM", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-12-02T09:55:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:30Z"}, "message": "[Ada] Proof of runtime units for binary modular exponentiation\n\ngcc/ada/\n\n\t* libgnat/s-explllu.ads: Mark in SPARK.\n\t* libgnat/s-expllu.ads: Mark in SPARK.\n\t* libgnat/s-exponu.adb: Add loop invariants and needed\n\tassertions.\n\t* libgnat/s-exponu.ads: Add functional contract.\n\t* libgnat/s-expuns.ads: Mark in SPARK.", "tree": {"sha": "733e41b40bb62b6d799d646a4d73cd001e4e144f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733e41b40bb62b6d799d646a4d73cd001e4e144f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed722edd2f4accad60744b95426dba3fc9ca084c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed722edd2f4accad60744b95426dba3fc9ca084c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed722edd2f4accad60744b95426dba3fc9ca084c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed722edd2f4accad60744b95426dba3fc9ca084c/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7da31ba2030b85ff0d15a0c4aac3318cb66b64a"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "eb883a43f579541d0a1eee39542d79229cb108c1", "filename": "gcc/ada/libgnat/s-explllu.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-explllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-explllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-explllu.ads?ref=ed722edd2f4accad60744b95426dba3fc9ca084c", "patch": "@@ -34,10 +34,23 @@\n --  The result is always full width, the caller must do a masking operation if\n --  the modulus is less than 2 ** Long_Long_Long_Unsigned'Size.\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced\n+--  by setting the corresponding assertion policy to Ignore. Postconditions\n+--  and contract cases should not be executed at runtime as well, in order\n+--  not to slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Exponu;\n with System.Unsigned_Types;\n \n-package System.Exp_LLLU is\n+package System.Exp_LLLU\n+  with SPARK_Mode\n+is\n \n    subtype Long_Long_Long_Unsigned is Unsigned_Types.Long_Long_Long_Unsigned;\n "}, {"sha": "e028f670f947d0f12ce7cd68477f718693dba688", "filename": "gcc/ada/libgnat/s-expllu.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-expllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-expllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-expllu.ads?ref=ed722edd2f4accad60744b95426dba3fc9ca084c", "patch": "@@ -34,10 +34,23 @@\n --  The result is always full width, the caller must do a masking operation if\n --  the modulus is less than 2 ** Long_Long_Unsigned'Size.\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced\n+--  by setting the corresponding assertion policy to Ignore. Postconditions\n+--  and contract cases should not be executed at runtime as well, in order\n+--  not to slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Exponu;\n with System.Unsigned_Types;\n \n-package System.Exp_LLU is\n+package System.Exp_LLU\n+  with SPARK_Mode\n+is\n \n    subtype Long_Long_Unsigned is Unsigned_Types.Long_Long_Unsigned;\n "}, {"sha": "06ed5099c2505dff4eb68bbb23f938f636b52753", "filename": "gcc/ada/libgnat/s-exponu.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-exponu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-exponu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exponu.adb?ref=ed722edd2f4accad60744b95426dba3fc9ca084c", "patch": "@@ -29,7 +29,19 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-function System.Exponu (Left : Int; Right : Natural) return Int is\n+function System.Exponu (Left : Int; Right : Natural) return Int\n+  with SPARK_Mode\n+is\n+   --  Preconditions, postconditions, ghost code, loop invariants and\n+   --  assertions in this unit are meant for analysis only, not for run-time\n+   --  checking, as it would be too costly otherwise. This is enforced by\n+   --  setting the assertion policy to Ignore.\n+\n+   pragma Assertion_Policy (Pre            => Ignore,\n+                            Post           => Ignore,\n+                            Ghost          => Ignore,\n+                            Loop_Invariant => Ignore,\n+                            Assert         => Ignore);\n \n    --  Note that negative exponents get a constraint error because the\n    --  subtype of the Right argument (the exponent) is Natural.\n@@ -49,7 +61,16 @@ begin\n \n    if Exp /= 0 then\n       loop\n+         pragma Loop_Invariant (Exp > 0);\n+         pragma Loop_Invariant (Result * Factor ** Exp = Left ** Right);\n+         pragma Loop_Variant (Decreases => Exp);\n+\n          if Exp rem 2 /= 0 then\n+            pragma Assert\n+              (Result * (Factor * Factor ** (Exp - 1)) = Left ** Right);\n+            pragma Assert\n+              ((Result * Factor) * Factor ** (Exp - 1) = Left ** Right);\n+\n             Result := Result * Factor;\n          end if;\n "}, {"sha": "b18a3a4119c9da1ce0659dc3490508ec2334c679", "filename": "gcc/ada/libgnat/s-exponu.ads", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-exponu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-exponu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exponu.ads?ref=ed722edd2f4accad60744b95426dba3fc9ca084c", "patch": "@@ -31,8 +31,22 @@\n \n --  Modular integer exponentiation\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced\n+--  by setting the corresponding assertion policy to Ignore. Postconditions\n+--  and contract cases should not be executed at runtime as well, in order\n+--  not to slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n generic\n \n    type Int is mod <>;\n \n-function System.Exponu (Left : Int; Right : Natural) return Int;\n+function System.Exponu (Left : Int; Right : Natural) return Int\n+with\n+  SPARK_Mode,\n+  Post => System.Exponu'Result = Left ** Right;"}, {"sha": "751f3fa275a2858fdd4adce7fc36b22776e669ff", "filename": "gcc/ada/libgnat/s-expuns.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-expuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed722edd2f4accad60744b95426dba3fc9ca084c/gcc%2Fada%2Flibgnat%2Fs-expuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-expuns.ads?ref=ed722edd2f4accad60744b95426dba3fc9ca084c", "patch": "@@ -34,10 +34,23 @@\n --  The result is always full width, the caller must do a masking operation if\n --  the modulus is less than 2 ** Unsigned'Size.\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced\n+--  by setting the corresponding assertion policy to Ignore. Postconditions\n+--  and contract cases should not be executed at runtime as well, in order\n+--  not to slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Exponu;\n with System.Unsigned_Types;\n \n-package System.Exp_Uns is\n+package System.Exp_Uns\n+  with SPARK_Mode\n+is\n \n    subtype Unsigned is Unsigned_Types.Unsigned;\n "}]}