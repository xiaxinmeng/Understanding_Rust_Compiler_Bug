{"sha": "059a704a4195f49c299ab0e92f772df39a27971a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5YTcwNGE0MTk1ZjQ5YzI5OWFiMGU5MmY3NzJkZjM5YTI3OTcxYQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-02-28T14:46:07Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:02Z"}, "message": "[Ada] gnatbind: Correct assertions in Add_Edge_Kind_Check\n\n2020-06-09  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* bindo-graphs.ads (Library_Graph_Edge_Kind): Reorder enumerals\n\tto reflect the order of adding edges. Clarify comments.\n\t* bindo-graphs.adb (Add_Edge_Kind_Check): Correct the\n\tassertions.  Reorder the \"when\"s to match the order of adding\n\tedges, and therefore the order of enumerals in type\n\tLibrary_Graph_Edge_Kind.  Change names to \"Old_\" and \"New_\" to\n\tclarify what's what.  Combine Invocation_Edge into the \"<=\"\n\ttest.  Fix the \"raise Program_Error\" message, which was\n\tbackwards.", "tree": {"sha": "169f1653795111651eacebf1a27bcc80f1213c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/169f1653795111651eacebf1a27bcc80f1213c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/059a704a4195f49c299ab0e92f772df39a27971a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059a704a4195f49c299ab0e92f772df39a27971a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059a704a4195f49c299ab0e92f772df39a27971a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059a704a4195f49c299ab0e92f772df39a27971a/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338c32f1375440aaeb66c65d5d40906a388d20c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338c32f1375440aaeb66c65d5d40906a388d20c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338c32f1375440aaeb66c65d5d40906a388d20c8"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "c6a091fb24aa8a984f67a8ebe34413563bfcbca0", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059a704a4195f49c299ab0e92f772df39a27971a/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059a704a4195f49c299ab0e92f772df39a27971a/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=059a704a4195f49c299ab0e92f772df39a27971a", "patch": "@@ -1064,9 +1064,9 @@ package body Bindo.Graphs is\n         (G              : Library_Graph;\n          Pred           : Library_Graph_Vertex_Id;\n          Succ           : Library_Graph_Vertex_Id;\n-         Kind           : Library_Graph_Edge_Kind);\n+         New_Kind       : Library_Graph_Edge_Kind);\n       --  This is called by Add_Edge in the case where there is already a\n-      --  Pred-->Succ edge, to assert that the new Kind is appropriate. Raises\n+      --  Pred-->Succ edge, to assert that the New_Kind is appropriate. Raises\n       --  Program_Error if a bug is detected. The purpose is to prevent bugs\n       --  where calling Add_Edge in different orders produces different output.\n \n@@ -1781,50 +1781,45 @@ package body Bindo.Graphs is\n         (G              : Library_Graph;\n          Pred           : Library_Graph_Vertex_Id;\n          Succ           : Library_Graph_Vertex_Id;\n-         Kind           : Library_Graph_Edge_Kind)\n+         New_Kind       : Library_Graph_Edge_Kind)\n       is\n          Old_Edge : constant Library_Graph_Edge_Id :=\n            Find_Edge (G, Pred, Succ);\n-         Attributes : constant Library_Graph_Edge_Attributes :=\n-           Get_LGE_Attributes (G, Old_Edge);\n+         Old_Kind : constant Library_Graph_Edge_Kind :=\n+           Get_LGE_Attributes (G, Old_Edge).Kind;\n          OK : Boolean;\n       begin\n-         case Kind is\n-            --  We call Add_Edge with Body_Before_Spec_Edge twice -- once\n-            --  for  the spec and once for the body, but no other Kind can\n-            --  be spec-->body.\n-\n-            when Body_Before_Spec_Edge =>\n-               if True then\n-                  --  ????Disable this part of the assertion for now\n-                  OK := True;\n-               else\n-                  OK := Attributes.Kind = Body_Before_Spec_Edge;\n-               end if;\n-\n-            --  Spec_Before_Body_Edge comes first\n-\n+         case New_Kind is\n             when Spec_Before_Body_Edge =>\n                OK := False;\n-\n-            --  With clauses and forced edges come after Spec_Before_Body_Edge\n+               --  Spec_Before_Body_Edge comes first, and there is never more\n+               --  than one Spec_Before_Body_Edge for a given unit, so we can't\n+               --  have a preexisting edge in the Spec_Before_Body_Edge case.\n \n             when With_Edge | Elaborate_Edge | Elaborate_All_Edge\n-              | Forced_Edge =>\n-               OK := Attributes.Kind <= Kind;\n+              | Forced_Edge | Invocation_Edge =>\n+               OK := Old_Kind <= New_Kind;\n+               --  These edges are created in the order of the enumeration\n+               --  type, and there can be duplicates; hence \"<=\".\n \n-            --  Invocation_Edge can come after anything, including another\n-            --  Invocation_Edge.\n+            when Body_Before_Spec_Edge =>\n+               OK := Old_Kind = Body_Before_Spec_Edge\n+               --  We call Add_Edge with Body_Before_Spec_Edge twice -- once\n+               --  for the spec and once for the body.\n \n-            when Invocation_Edge =>\n-               OK := True;\n+                 or else Old_Kind = Forced_Edge\n+                 or else Old_Kind = Invocation_Edge;\n+               --  The old one can be Forced_Edge or Invocation_Edge, which\n+               --  necessarily results in an elaboration cycle (in the static\n+               --  model), but this assertion happens before cycle detection,\n+               --  so we need to allow these cases.\n \n             when No_Edge =>\n                OK := False;\n          end case;\n \n          if not OK then\n-            raise Program_Error with Kind'Img & \"-->\" & Attributes.Kind'Img;\n+            raise Program_Error with Old_Kind'Img & \"-->\" & New_Kind'Img;\n          end if;\n       end Add_Edge_Kind_Check;\n "}, {"sha": "73846bd5ffba5200f86efff24f6d6ff3058c999e", "filename": "gcc/ada/bindo-graphs.ads", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059a704a4195f49c299ab0e92f772df39a27971a/gcc%2Fada%2Fbindo-graphs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059a704a4195f49c299ab0e92f772df39a27971a/gcc%2Fada%2Fbindo-graphs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.ads?ref=059a704a4195f49c299ab0e92f772df39a27971a", "patch": "@@ -702,29 +702,28 @@ package Bindo.Graphs is\n \n          No_Cycle_Kind);\n \n-      --  The following type represents the various kinds of library edges.\n-      --  The order is important here, and roughly corresponds to the order\n-      --  in which edges are added to the graph. See Add_Edge_Kind_Check for\n-      --  details.\n+      --  The following type represents the various kinds of library edges. The\n+      --  order is important here, and corresponds to the order in which edges\n+      --  are added to the graph. See Add_Edge_Kind_Check for details. If\n+      --  changes are made such that new edge kinds are added or similar, we\n+      --  need to make sure this type matches the code in Add_Edge_Kind_Check,\n+      --  and Add_Edge_Kind_Check matches the order of edge adding. Likewise,\n+      --  if the edge-adding order changes, we need consistency between this\n+      --  enumeration type, the edge-adding order, and Add_Edge_Kind_Check.\n \n       type Library_Graph_Edge_Kind is\n-        (Body_Before_Spec_Edge,\n-         --  Successor denotes spec, Predecessor denotes a body. This is a\n-         --  special edge kind used only during the discovery of components.\n-         --  Note that a body can never be elaborated before its spec.\n-\n-         Spec_Before_Body_Edge,\n+        (Spec_Before_Body_Edge,\n          --  Successor denotes a body, Predecessor denotes a spec\n \n-         With_Edge,\n-         --  Successor withs Predecessor\n-\n          Elaborate_Edge,\n          --  Successor withs Predecessor, and has pragma Elaborate for it\n \n          Elaborate_All_Edge,\n          --  Successor withs Predecessor, and has pragma Elaborate_All for it\n \n+         With_Edge,\n+         --  Successor withs Predecessor\n+\n          Forced_Edge,\n          --  Successor is forced to with Predecessor by virtue of an existing\n          --  elaboration order provided in a file.\n@@ -733,6 +732,11 @@ package Bindo.Graphs is\n          --  An invocation construct in unit Successor invokes a target in unit\n          --  Predecessor.\n \n+         Body_Before_Spec_Edge,\n+         --  Successor denotes spec, Predecessor denotes a body. This is a\n+         --  special edge kind used only during the discovery of components.\n+         --  Note that a body can never be elaborated before its spec.\n+\n          No_Edge);\n \n       -----------"}]}