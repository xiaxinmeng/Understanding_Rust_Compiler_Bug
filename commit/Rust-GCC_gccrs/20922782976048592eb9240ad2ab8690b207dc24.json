{"sha": "20922782976048592eb9240ad2ab8690b207dc24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5MjI3ODI5NzYwNDg1OTJlYjkyNDBhZDJhYjg2OTBiMjA3ZGMyNA==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-03-30T00:09:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-21T10:45:17Z"}, "message": "[Ada] Add Ada.Strings.Text_Buffers and replace uses of Ada.Strings.Text_Output\n\ngcc/ada/\n\n\t* Make-generated.in (GEN_IL_FLAGS): Keep only GNAT flags.\n\t(ada/stamp-gen_il): Remove dependencies on libgnat/ sources.  Do not\n\tcopy libgnat/ sources locally and tidy up.\n\t* Makefile.rtl: Include object files for new Text_Buffer units\n\tin the GNATRTL_NONTASKING_OBJS list.\n\t* exp_put_image.ads, exp_put_image.adb: Update Rtsfind calls to\n\tmatch new specs. For example, calls to RE_Sink are replaced with\n\tcalls to RE_Root_Buffer_Type. Update comments and change\n\tsubprogram names accordingly (e.g., Preload_Sink is changed to\n\tPreload_Root_Buffer_Type).\n\t* impunit.adb: Add 6 new predefined units (Text_Buffers and 5\n\tchild units thereof).\n\t* rtsfind.ads, rtsfind.adb: Add interfaces for accessing the\n\tAda.Strings.Text_Buffers package and declarations\n\ttherein (including the Unbounded child unit). Do not (yet)\n\tdelete interfaces for accessing the old Text_Output package.\n\t* sem_attr.adb (Check_Put_Image_Attribute): Replace RE_Sink uses\n\twith RE_Root_Buffer_Type and update comments accordingly.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Update call to\n\treflect name change of callee (that is, the former Preload_Sink\n\tis now Preload_Root_Buffer_Type).\n\t* sem_ch13.adb (Has_Good_Profile): Replace RE_Sink use with\n\tRE_Root_Buffer_Type.\n\t(Build_Spec): Update comment describing a parameter type.\n\t* gen_il.ads: Remove clauses for the old Text_Output package and\n\tadd them for Ada.Streams.Stream_IO.\n\t(Sink): Declare.\n\t(Create_File): Likewise.\n\t(Increase_Indent): Likewise.\n\t(Decrease_Indent): Likewise.\n\t(Put): Likewise.\n\t(LF): Likewise.\n\t* gen_il.adb: Add clauses for Ada.Streams.Stream_IO.\n\t(Create_File): New procedure.\n\t(Increase_Indent): Likewise.\n\t(Decrease_Indent): Likewise.\n\t(Put): New procedures.\n\t* gen_il-gen.adb: Add clauses for Ada.Text_IO.  Replace\n\tSink'Class with Sink throughout.  Use string concatenation and\n\tLF marker instead of formatted strings and \"\\n\" marker.  Update\n\tIndent/Outdent calls to use new Increase_Indent/Decrease_Indent\n\tnames.\n\t(Put_Membership_Query_Decl): Remove.\n\t* gen_il-internals.ads: Replace Sink'Class with Sink throughout.\n\t(Ptypes): Remove.\n\t(Pfields): Likewise.\n\t* gen_il-internals.adb: Remove clauses for GNAT.OS_Lib and\n\tAda.Strings.Text_Buffers.Files.  Replace Sink'Class with Sink\n\tthroughout.  Use string concatenation and LF marker instead of\n\tformatted strings and \"\\n\" marker.\n\t(Stdout): Remove.\n\t(Ptypes): Likewise.\n\t(Pfields): Likewise.\n\t* libgnarl/s-putaim.ads: Modify context clause, update\n\tdeclaration of subtype Sink to refer to\n\tText_Buffers.Root_Buffer_Type instead of the old\n\tText_Output.Sink type.\n\t* libgnarl/s-putaim.adb: Modify context clause and add use\n\tclause to refer to Text_Buffers package.\n\t* libgnat/a-cbdlli.ads, libgnat/a-cbdlli.adb,\n\tlibgnat/a-cbhama.ads, libgnat/a-cbhama.adb,\n\tlibgnat/a-cbhase.ads, libgnat/a-cbhase.adb,\n\tlibgnat/a-cbmutr.ads, libgnat/a-cbmutr.adb,\n\tlibgnat/a-cborma.ads, libgnat/a-cborma.adb,\n\tlibgnat/a-cborse.ads, libgnat/a-cborse.adb,\n\tlibgnat/a-cdlili.ads, libgnat/a-cdlili.adb,\n\tlibgnat/a-cidlli.ads, libgnat/a-cidlli.adb,\n\tlibgnat/a-cihama.ads, libgnat/a-cihama.adb,\n\tlibgnat/a-cihase.ads, libgnat/a-cihase.adb,\n\tlibgnat/a-cimutr.ads, libgnat/a-cimutr.adb,\n\tlibgnat/a-ciorma.ads, libgnat/a-ciorma.adb,\n\tlibgnat/a-ciormu.ads, libgnat/a-ciormu.adb,\n\tlibgnat/a-ciorse.ads, libgnat/a-ciorse.adb,\n\tlibgnat/a-coboho.ads, libgnat/a-coboho.adb,\n\tlibgnat/a-cobove.ads, libgnat/a-cobove.adb,\n\tlibgnat/a-cohama.ads, libgnat/a-cohama.adb,\n\tlibgnat/a-cohase.ads, libgnat/a-cohase.adb,\n\tlibgnat/a-coinho.ads, libgnat/a-coinho.adb,\n\tlibgnat/a-coinho__shared.ads, libgnat/a-coinho__shared.adb,\n\tlibgnat/a-coinve.ads, libgnat/a-coinve.adb,\n\tlibgnat/a-comutr.ads, libgnat/a-comutr.adb,\n\tlibgnat/a-convec.ads, libgnat/a-convec.adb,\n\tlibgnat/a-coorma.ads, libgnat/a-coorma.adb,\n\tlibgnat/a-coormu.ads, libgnat/a-coormu.adb,\n\tlibgnat/a-coorse.ads, libgnat/a-coorse.adb,\n\tlibgnat/a-nbnbin.ads, libgnat/a-nbnbin.adb,\n\tlibgnat/a-nbnbin__gmp.adb, libgnat/a-nbnbre.ads,\n\tlibgnat/a-nbnbre.adb, libgnat/a-strunb.ads,\n\tlibgnat/a-strunb.adb, libgnat/a-strunb__shared.ads,\n\tlibgnat/a-strunb__shared.adb, libgnat/s-rannum.ads,\n\tlibgnat/s-rannum.adb: Modify Put_Image procedure used in\n\tPut_Image aspect specification to conform to Ada profile\n\trules (in particular, the first parameter shall be of type\n\tAda.Strings.Text_Buffers.Root_Buffer_Type'Class).\n\t* libgnat/a-sttebu.ads, libgnat/a-sttebu.adb,\n\tlibgnat/a-stbubo.ads, libgnat/a-stbubo.adb,\n\tlibgnat/a-stbufi.ads, libgnat/a-stbufi.adb,\n\tlibgnat/a-stbufo.ads, libgnat/a-stbufo.adb,\n\tlibgnat/a-stbuun.ads, libgnat/a-stbuun.adb,\n\tlibgnat/a-stbuut.ads, libgnat/a-stbuut.adb: A new predefined\n\tunit, Ada.Strings.Text_Buffers, and five child units.  Two of\n\tthe five are RM-defined: Bounded and Unbounded. The remaining\n\tthree are GNAT-defined: Files, Utils, and Formatting. The buffer\n\ttype corresponding to an output file, type Files.File_Buffer, is\n\tsimpler (and perhaps therefore slower) than its predecessor.\n\tCaching similar to what was being done before could be added\n\tlater if that seems appropriate.\n\t* libgnat/s-putima.ads: Modify context clause, update\n\tdeclaration of subtype Sink to refer to\n\tText_Buffers.Root_Buffer_Type instead of the old\n\tText_Output.Sink type.\n\t* libgnat/s-putima.adb: Modify context clause.  Update\n\tIndent/Outdent calls to use new Increase_Indent/Decrease_Indent\n\tnames; ditto for \"Put_String => Put\" name change.\n\t* libgnat/a-stteou__bootstrap.ads: Delete.", "tree": {"sha": "748250705a37e2de4446058ca5a8e2bf0cf2c5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/748250705a37e2de4446058ca5a8e2bf0cf2c5d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20922782976048592eb9240ad2ab8690b207dc24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20922782976048592eb9240ad2ab8690b207dc24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20922782976048592eb9240ad2ab8690b207dc24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20922782976048592eb9240ad2ab8690b207dc24/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88bed4e088a197e89051b520da8bb3631a10f9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bed4e088a197e89051b520da8bb3631a10f9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88bed4e088a197e89051b520da8bb3631a10f9c0"}], "stats": {"total": 3191, "additions": 2180, "deletions": 1011}, "files": [{"sha": "129909b40200143bd6806c676842725abacbf6e1", "filename": "gcc/ada/Make-generated.in", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2FMake-generated.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2FMake-generated.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-generated.in?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -13,19 +13,12 @@ endif\n fsrcdir := $(shell cd $(srcdir);${PWD_COMMAND})\n \n GEN_IL_INCLUDES = -I$(fsrcdir)/ada\n-GEN_IL_FLAGS = -a -q -g -gnata -j0 -gnat2012 -gnatw.g -gnatyg -gnatU $(GEN_IL_INCLUDES)\n+GEN_IL_FLAGS = -gnata -gnat2012 -gnatw.g -gnatyg -gnatU $(GEN_IL_INCLUDES)\n \n ada/seinfo_tables.ads ada/seinfo_tables.adb ada/sinfo.h ada/einfo.h ada/nmake.ads ada/nmake.adb ada/seinfo.ads ada/sinfo-nodes.ads ada/sinfo-nodes.adb ada/einfo-entities.ads ada/einfo-entities.adb: ada/stamp-gen_il ; @true\n-ada/stamp-gen_il: $(fsrcdir)/ada/gen_il* $(fsrcdir)/ada/libgnat/a-sto*.ad? $(fsrcdir)/ada/libgnat/a-stteou__bootstrap.ads\n+ada/stamp-gen_il: $(fsrcdir)/ada/gen_il*\n \t$(MKDIR) ada/gen_il\n-\t# Copy recent runtime files needed by gen_il that may not be available\n-\t# in the base compiler.\n-\t$(CP) -f $(fsrcdir)/ada/libgnat/a-sto*.ad? ada/gen_il\n-\t$(CP) -f $(fsrcdir)/ada/libgnat/a-stteou__bootstrap.ads ada/gen_il/a-stteou.ads\n-\tcd ada/gen_il ; gnatmake $(GEN_IL_FLAGS) gen_il-main.adb\n-\t# ignore errors when running gen_il-main due to bootstrap\n-\t# considerations\n-\t-cd ada/gen_il ; ./gen_il-main\n+\tcd ada/gen_il ; gnatmake -q -g $(GEN_IL_FLAGS) gen_il-main ; ./gen_il-main\n \t$(fsrcdir)/../move-if-change ada/gen_il/seinfo_tables.ads ada/seinfo_tables.ads\n \t$(fsrcdir)/../move-if-change ada/gen_il/seinfo_tables.adb ada/seinfo_tables.adb\n \t$(fsrcdir)/../move-if-change ada/gen_il/sinfo.h ada/sinfo.h"}, {"sha": "f626c5d26a15dd393a268817e1d041dd5a4af3f7", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -296,6 +296,12 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-strunb$(objext) \\\n   a-ststio$(objext) \\\n   a-stteou$(objext) \\\n+  a-sttebu$(objext) \\\n+  a-stbuun$(objext) \\\n+  a-stbubo$(objext) \\\n+  a-stbuut$(objext) \\\n+  a-stbufi$(objext) \\\n+  a-stbufo$(objext) \\\n   a-stunau$(objext) \\\n   a-stunha$(objext) \\\n   a-stuten$(objext) \\"}, {"sha": "33c72c3fad057b195b1ce619b543cc983d4e6a81", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -339,7 +339,7 @@ package body Exp_Put_Image is\n \n          --  For other elementary types, generate:\n          --\n-         --     Put_Wide_Wide_String (Sink, U_Type'Wide_Wide_Image (Item));\n+         --     Wide_Wide_Put (Sink, U_Type'Wide_Wide_Image (Item));\n          --\n          --  It would be more elegant to do it the other way around (define\n          --  '[[Wide_]Wide_]Image in terms of 'Put_Image). But this is easier\n@@ -366,7 +366,7 @@ package body Exp_Put_Image is\n             Put_Call : constant Node_Id :=\n               Make_Procedure_Call_Statement (Loc,\n                 Name =>\n-                  New_Occurrence_Of (RTE (RE_Put_Wide_Wide_String), Loc),\n+                  New_Occurrence_Of (RTE (RE_Wide_Wide_Put), Loc),\n                 Parameter_Associations => New_List\n                   (Relocate_Node (Sink), Image));\n          begin\n@@ -758,7 +758,8 @@ package body Exp_Put_Image is\n           In_Present          => True,\n           Out_Present         => True,\n           Parameter_Type      =>\n-            New_Occurrence_Of (Class_Wide_Type (RTE (RE_Sink)), Loc)),\n+            New_Occurrence_Of\n+              (Class_Wide_Type (RTE (RE_Root_Buffer_Type)), Loc)),\n \n         Make_Parameter_Specification (Loc,\n           Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n@@ -816,13 +817,16 @@ package body Exp_Put_Image is\n \n    function Enable_Put_Image (Typ : Entity_Id) return Boolean is\n    begin\n+      --  The name \"Sink\" here is a short nickname for\n+      --  \"Ada.Strings.Text_Buffers.Root_Buffer_Type\".\n+\n       --  There's a bit of a chicken&egg problem. The compiler is likely to\n       --  have trouble if we refer to the Put_Image of Sink itself, because\n       --  Sink is part of the parameter profile:\n       --\n       --     function Sink'Put_Image (S : in out Sink'Class; V : T);\n       --\n-      --  Likewise, the Ada.Strings.Text_Output package, where Sink is\n+      --  Likewise, the Ada.Strings.Buffer package, where Sink is\n       --  declared, depends on various other packages, so if we refer to\n       --  Put_Image of types declared in those other packages, we could create\n       --  cyclic dependencies. Therefore, we disable Put_Image for some\n@@ -858,13 +862,13 @@ package body Exp_Put_Image is\n       --  If type Sink is unavailable in this runtime, disable Put_Image\n       --  altogether.\n \n-      if No_Run_Time_Mode or else not RTE_Available (RE_Sink) then\n+      if No_Run_Time_Mode or else not RTE_Available (RE_Root_Buffer_Type) then\n          return False;\n       end if;\n \n-      --  ???Disable Put_Image on type Sink declared in\n-      --  Ada.Strings.Text_Output. Note that we can't call Is_RTU on\n-      --  Ada_Strings_Text_Output, because it's not known yet (we might be\n+      --  ???Disable Put_Image on type Root_Buffer_Type declared in\n+      --  Ada.Strings.Text_Buffers. Note that we can't call Is_RTU on\n+      --  Ada_Strings_Text_Buffers, because it's not known yet (we might be\n       --  compiling it). But this is insufficient to allow support for tagged\n       --  predefined types.\n \n@@ -873,7 +877,7 @@ package body Exp_Put_Image is\n       begin\n          if Present (Parent_Scope)\n            and then Is_RTU (Parent_Scope, Ada_Strings)\n-           and then Chars (Scope (Typ)) = Name_Find (\"text_output\")\n+           and then Chars (Scope (Typ)) = Name_Find (\"text_buffers\")\n          then\n             return False;\n          end if;\n@@ -964,11 +968,8 @@ package body Exp_Put_Image is\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Sink_Entity,\n           Object_Definition =>\n-            New_Occurrence_Of (RTE (RE_Buffer), Loc),\n-          Expression =>\n-            Make_Function_Call (Loc,\n-              Name => New_Occurrence_Of (RTE (RE_New_Buffer), Loc),\n-              Parameter_Associations => Empty_List));\n+            New_Occurrence_Of (RTE (RE_Buffer_Type), Loc));\n+\n       Put_Im : constant Node_Id :=\n         Make_Attribute_Reference (Loc,\n           Prefix         => New_Occurrence_Of (U_Type, Loc),\n@@ -996,15 +997,16 @@ package body Exp_Put_Image is\n       return Image;\n    end Build_Image_Call;\n \n-   ------------------\n-   -- Preload_Sink --\n-   ------------------\n+   ------------------------------\n+   -- Preload_Root_Buffer_Type --\n+   ------------------------------\n \n-   procedure Preload_Sink (Compilation_Unit : Node_Id) is\n+   procedure Preload_Root_Buffer_Type (Compilation_Unit : Node_Id) is\n    begin\n-      --  We can't call RTE (RE_Sink) for at least some predefined units,\n-      --  because it would introduce cyclic dependences. The package where Sink\n-      --  is declared, for example, and things it depends on.\n+      --  We can't call RTE (RE_Root_Buffer_Type) for at least some\n+      --  predefined units, because it would introduce cyclic dependences.\n+      --  The package where Root_Buffer_Type is declared, for example, and\n+      --  things it depends on.\n       --\n       --  It's only needed for tagged types, so don't do it unless Put_Image is\n       --  enabled for tagged types, and we've seen a tagged type. Note that\n@@ -1013,25 +1015,26 @@ package body Exp_Put_Image is\n       --  It's unfortunate to have this Tagged_Seen processing so scattered\n       --  about, but we need to know if there are tagged types where this is\n       --  called in Analyze_Compilation_Unit, before we have analyzed any type\n-      --  declarations. This mechanism also prevents doing RTE (RE_Sink) when\n-      --  compiling the compiler itself. Packages Ada.Strings.Text_Output and\n-      --  friends are not included in the compiler.\n+      --  declarations. This mechanism also prevents doing\n+      --  RTE (RE_Root_Buffer_Type) when compiling the compiler itself.\n+      --  Packages Ada.Strings.Buffer_Types and friends are not included\n+      --  in the compiler.\n       --\n-      --  Don't do it if type Sink is unavailable in the runtime.\n+      --  Don't do it if type Root_Buffer_Type is unavailable in the runtime.\n \n       if not In_Predefined_Unit (Compilation_Unit)\n         and then Tagged_Put_Image_Enabled\n         and then Tagged_Seen\n         and then not No_Run_Time_Mode\n-        and then RTE_Available (RE_Sink)\n+        and then RTE_Available (RE_Root_Buffer_Type)\n       then\n          declare\n-            Ignore : constant Entity_Id := RTE (RE_Sink);\n+            Ignore : constant Entity_Id := RTE (RE_Root_Buffer_Type);\n          begin\n             null;\n          end;\n       end if;\n-   end Preload_Sink;\n+   end Preload_Root_Buffer_Type;\n \n    -------------------------\n    -- Put_Image_Base_Type --"}, {"sha": "4f049f131f391e95de08143fb72301eefa8ac934", "filename": "gcc/ada/exp_put_image.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fexp_put_image.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fexp_put_image.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -27,8 +27,9 @@ with Types; use Types;\n \n package Exp_Put_Image is\n \n-   --  Routines to build Put_Image calls. See Ada.Strings.Text_Output.Utils and\n-   --  System.Put_Images for the run-time routines we are generating calls to.\n+   --  Routines to build Put_Image calls. See Ada.Strings.Text_Buffers.Utils\n+   --  and System.Put_Images for the run-time routines we are generating calls\n+   --  to.\n \n    --  For a call to T'Put_Image, if T is elementary, we expand the code\n    --  inline. If T is a tagged type, then Put_Image is a primitive procedure\n@@ -94,10 +95,10 @@ package Exp_Put_Image is\n    --  to call T'Put_Image into a buffer and then extract the string from the\n    --  buffer.\n \n-   procedure Preload_Sink (Compilation_Unit : Node_Id);\n-   --  Call RTE (RE_Sink) if necessary, to load the packages involved in\n-   --  Put_Image. We need to do this explicitly, fairly early during\n-   --  compilation, because otherwise it happens during freezing, which\n+   procedure Preload_Root_Buffer_Type (Compilation_Unit : Node_Id);\n+   --  Call RTE (RE_Root_Buffer_Type) if necessary, to load the packages\n+   --  involved in Put_Image. We need to do this explicitly, fairly early\n+   --  during compilation, because otherwise it happens during freezing, which\n    --  triggers visibility bugs in generic instantiations.\n \n end Exp_Put_Image;"}, {"sha": "6b48e8e8ca97bfa539c5879df23d3e0b41542b80", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 549, "deletions": 574, "changes": 1123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Containers; use type Ada.Containers.Count_Type;\n+with Ada.Text_IO;\n \n package body Gen_IL.Gen is\n \n@@ -536,15 +537,15 @@ package body Gen_IL.Gen is\n       --  Print out the Einfo.Entities package spec and body\n \n       procedure Put_Type_And_Subtypes\n-        (S : in out Sink'Class; Root : Root_Type);\n+        (S : in out Sink; Root : Root_Type);\n       --  Called by Put_Nodes and Put_Entities to print out the main type\n       --  and subtype declarations in Sinfo.Nodes and Einfo.Entities.\n \n-      procedure Put_Subp_Decls (S : in out Sink'Class; Root : Root_Type);\n+      procedure Put_Subp_Decls (S : in out Sink; Root : Root_Type);\n       --  Called by Put_Nodes and Put_Entities to print out the subprogram\n       --  declarations in Sinfo.Nodes and Einfo.Entities.\n \n-      procedure Put_Subp_Bodies (S : in out Sink'Class; Root : Root_Type);\n+      procedure Put_Subp_Bodies (S : in out Sink; Root : Root_Type);\n       --  Called by Put_Nodes and Put_Entities to print out the subprogram\n       --  bodies in Sinfo.Nodes and Einfo.Entities.\n \n@@ -554,44 +555,44 @@ package body Gen_IL.Gen is\n       --  parameter N). But if Type_Only was specified, we need to fetch the\n       --  corresponding base (etc) type.\n \n-      procedure Put_Getter_Spec (S : in out Sink'Class; F : Field_Enum);\n-      procedure Put_Setter_Spec (S : in out Sink'Class; F : Field_Enum);\n-      procedure Put_Getter_Decl (S : in out Sink'Class; F : Field_Enum);\n-      procedure Put_Setter_Decl (S : in out Sink'Class; F : Field_Enum);\n-      procedure Put_Getter_Body (S : in out Sink'Class; F : Field_Enum);\n-      procedure Put_Setter_Body (S : in out Sink'Class; F : Field_Enum);\n+      procedure Put_Getter_Spec (S : in out Sink; F : Field_Enum);\n+      procedure Put_Setter_Spec (S : in out Sink; F : Field_Enum);\n+      procedure Put_Getter_Decl (S : in out Sink; F : Field_Enum);\n+      procedure Put_Setter_Decl (S : in out Sink; F : Field_Enum);\n+      procedure Put_Getter_Body (S : in out Sink; F : Field_Enum);\n+      procedure Put_Setter_Body (S : in out Sink; F : Field_Enum);\n       --  Print out the specification, declaration, or body of a getter or\n       --  setter for the given field.\n \n       procedure Put_Precondition\n-        (S : in out Sink'Class; F : Field_Enum);\n+        (S : in out Sink; F : Field_Enum);\n       --  Print out the precondition, if any, for a getter or setter for the\n       --  given field.\n \n       procedure Put_Low_Level_Accessor_Instantiations\n-        (S : in out Sink'Class; T : Type_Enum);\n+        (S : in out Sink; T : Type_Enum);\n       --  Print out the low-level getter and setter for a given type\n \n-      procedure Put_Traversed_Fields (S : in out Sink'Class);\n+      procedure Put_Traversed_Fields (S : in out Sink);\n       --  Called by Put_Nodes to print out the Traversed_Fields table in\n       --  Sinfo.Nodes.\n \n-      procedure Put_Tables (S : in out Sink'Class; Root : Root_Type);\n+      procedure Put_Tables (S : in out Sink; Root : Root_Type);\n       --  Called by Put_Nodes and Put_Entities to print out the various tables\n       --  in Sinfo.Nodes and Einfo.Entities.\n \n       procedure Put_Nmake;\n       --  Print out the Nmake package spec and body, containing\n       --  Make_... functions for each concrete node type.\n \n-      procedure Put_Make_Decls (S : in out Sink'Class; Root : Root_Type);\n+      procedure Put_Make_Decls (S : in out Sink; Root : Root_Type);\n       --  Called by Put_Nmake to print out the Make_... function declarations\n \n-      procedure Put_Make_Bodies (S : in out Sink'Class; Root : Root_Type);\n+      procedure Put_Make_Bodies (S : in out Sink; Root : Root_Type);\n       --  Called by Put_Nmake to print out the Make_... function bodies\n \n       procedure Put_Make_Spec\n-        (S : in out Sink'Class; Root : Root_Type; T : Concrete_Type);\n+        (S : in out Sink; Root : Root_Type; T : Concrete_Type);\n       --  Called by Put_Make_Decls and Put_Make_Bodies to print out the spec of\n       --  a single Make_... function.\n \n@@ -606,27 +607,27 @@ package body Gen_IL.Gen is\n       --  Print out the einfo.h file\n \n       procedure Put_C_Type_And_Subtypes\n-        (S : in out Sink'Class; Root : Root_Type);\n+        (S : in out Sink; Root : Root_Type);\n       --  Used by Put_Sinfo_Dot_H and Put_Einfo_Dot_H to print out the C code\n       --  corresponding to the Ada Node_Kind, Entity_Kind, and subtypes\n       --  thereof.\n \n       procedure Put_Low_Level_C_Getter\n-        (S : in out Sink'Class; T : Type_Enum);\n+        (S : in out Sink; T : Type_Enum);\n       --  Used by Put_Sinfo_Dot_H and Put_Einfo_Dot_H to print out low-level\n       --  getters.\n \n       procedure Put_High_Level_C_Getters\n-        (S : in out Sink'Class; Root : Root_Type);\n+        (S : in out Sink; Root : Root_Type);\n       --  Used by Put_Sinfo_Dot_H and Put_Einfo_Dot_H to print out high-level\n       --  getters.\n \n       procedure Put_High_Level_C_Getter\n-        (S : in out Sink'Class; F : Field_Enum);\n+        (S : in out Sink; F : Field_Enum);\n       --  Used by Put_High_Level_C_Getters to print out one high-level getter.\n \n       procedure Put_Union_Membership\n-        (S : in out Sink'Class; Root : Root_Type);\n+        (S : in out Sink; Root : Root_Type);\n       --  Used by Put_Sinfo_Dot_H and Put_Einfo_Dot_H to print out functions to\n       --  test membership in a union type.\n \n@@ -764,7 +765,8 @@ package body Gen_IL.Gen is\n \n             for F of Type_Table (CT).Fields loop\n                if Fields_Per_Node (CT) (F) then\n-                  Put (\"duplicate field \\1.\\2\\n\", Image (CT), Image (F));\n+                  Ada.Text_IO.Put_Line\n+                    (\"duplicate field\" & Image (CT) & Image (F));\n                   Duplicate_Fields_Found := True;\n                end if;\n \n@@ -1383,7 +1385,7 @@ package body Gen_IL.Gen is\n       ---------------------------\n \n       procedure Put_Type_And_Subtypes\n-        (S : in out Sink'Class; Root : Root_Type)\n+        (S : in out Sink; Root : Root_Type)\n       is\n \n          procedure Put_Enum_Type;\n@@ -1411,10 +1413,10 @@ package body Gen_IL.Gen is\n                   if First_Time then\n                      First_Time := False;\n                   else\n-                     Put (S, \",\\n\");\n+                     Put (S, \",\" & LF);\n                   end if;\n \n-                  Put (S, \"\\1\", Image (T));\n+                  Put (S, Image (T));\n                end if;\n             end Put_Enum_Lit;\n \n@@ -1423,14 +1425,15 @@ package body Gen_IL.Gen is\n             Num_Types : constant Root_Int := Dummy'Length;\n \n          begin\n-            Put (S, \"type \\1 is -- \\2 \\1s\\n\", Image (Root), Image (Num_Types));\n-            Indent (S, 2);\n+            Put (S, \"type \" & Image (Root) & \" is -- \" &\n+                    Image (Num_Types) & \" \" & Image (Root) & \"s\" & LF);\n+            Increase_Indent (S, 2);\n             Put (S, \"(\");\n-            Indent (S, 1);\n+            Increase_Indent (S, 1);\n             Iterate_Types (Root, Pre => Put_Enum_Lit'Access);\n-            Outdent (S, 1);\n-            Put (S, \"\\n) with Size => 8; -- \\1\\n\\n\", Image (Root));\n-            Outdent (S, 2);\n+            Decrease_Indent (S, 1);\n+            Put (S, LF & \") with Size => 8; -- \" & Image (Root) & LF & LF);\n+            Decrease_Indent (S, 2);\n          end Put_Enum_Type;\n \n          procedure Put_Kind_Subtype (T : Node_Or_Entity_Type) is\n@@ -1439,55 +1442,52 @@ package body Gen_IL.Gen is\n                if Type_Table (T).Is_Union then\n                   pragma Assert (Type_Table (T).Parent = Root);\n \n-                  Put (S, \"subtype \\1 is\\n\", Image (T));\n-                  Indent (S, 2);\n-                  Put (S, \"\\1 with Predicate =>\\n\",\n-                       Image (Root));\n-                  Indent (S, 2);\n-                  Put (S, \"\\1 in\\n\", Image (T));\n+                  Put (S, \"subtype \" & Image (T) & \" is\" & LF);\n+                  Increase_Indent (S, 2);\n+                  Put (S, Image (Root) & \" with Predicate =>\" & LF);\n+                  Increase_Indent (S, 2);\n+                  Put (S, Image (T) & \" in\" & LF);\n                   Put_Types_With_Bars (S, Type_Table (T).Children);\n-                  Outdent (S, 2);\n-                  Put (S, \";\\n\");\n-                  Outdent (S, 2);\n+                  Decrease_Indent (S, 2);\n+                  Put (S, \";\" & LF);\n+                  Decrease_Indent (S, 2);\n \n                elsif Type_Table (T).Parent /= No_Type then\n-                  Put (S, \"subtype \\1 is \\2 range\\n\",\n-                       Image (T),\n-                       Image (Type_Table (T).Parent));\n-                  Indent (S, 2);\n-                  Put (S, \"\\1 .. \\2;\\n\",\n-                       Image (Type_Table (T).First),\n-                       Image (Type_Table (T).Last));\n-                  Outdent (S, 2);\n+                  Put (S, \"subtype \" & Image (T) & \" is \" &\n+                       Image (Type_Table (T).Parent) & \" range\" & LF);\n+                  Increase_Indent (S, 2);\n+                  Put (S, Image (Type_Table (T).First) & \" .. \" &\n+                          Image (Type_Table (T).Last) & \";\" & LF);\n+                  Decrease_Indent (S, 2);\n \n-                  Indent (S, 3);\n+                  Increase_Indent (S, 3);\n \n                   for J in 1 .. Type_Table (T).Concrete_Descendants.Last_Index loop\n-                     Put (S, \"--  \\1\\n\",\n-                          Image (Type_Table (T).Concrete_Descendants (J)));\n+                     Put (S, \"--  \" &\n+                          Image (Type_Table (T).Concrete_Descendants (J)) & LF);\n                   end loop;\n \n-                  Outdent (S, 3);\n+                  Decrease_Indent (S, 3);\n                end if;\n             end if;\n          end Put_Kind_Subtype;\n \n          procedure Put_Id_Subtype (T : Node_Or_Entity_Type) is\n          begin\n             if Type_Table (T).Parent /= No_Type then\n-               Put (S, \"subtype \\1 is\\n\", Id_Image (T));\n-               Indent (S, 2);\n-               Put (S, \"\\1\", Id_Image (Type_Table (T).Parent));\n+               Put (S, \"subtype \" & Id_Image (T) & \" is\" & LF);\n+               Increase_Indent (S, 2);\n+               Put (S, Id_Image (Type_Table (T).Parent));\n \n                if Enable_Assertions then\n-                  Put (S, \" with Predicate =>\\n\");\n-                  Indent (S, 2);\n-                  Put (S, \"K (\\1) in \\2\", Id_Image (T), Image (T));\n-                  Outdent (S, 2);\n+                  Put (S, \" with Predicate =>\" & LF);\n+                  Increase_Indent (S, 2);\n+                  Put (S, \"K (\" & Id_Image (T) & \") in \" & Image (T));\n+                  Decrease_Indent (S, 2);\n                end if;\n \n-               Put (S, \";\\n\");\n-               Outdent (S, 2);\n+               Put (S, \";\" & LF);\n+               Decrease_Indent (S, 2);\n             end if;\n          end Put_Id_Subtype;\n \n@@ -1501,48 +1501,45 @@ package body Gen_IL.Gen is\n          case Root is\n             when Node_Kind =>\n                Put_Getter_Decl (S, Nkind);\n-               Put (S, \"function K (N : Node_Id) return Node_Kind renames Nkind;\\n\");\n-               Put (S, \"--  Shorthand for use in predicates and preconditions below\\n\");\n-               Put (S, \"--  There is no procedure Set_Nkind.\\n\");\n-               Put (S, \"--  See Init_Nkind and Mutate_Nkind in Atree.\\n\\n\");\n+               Put (S, \"function K (N : Node_Id) return Node_Kind renames Nkind;\" & LF);\n+               Put (S, \"--  Shorthand for use in predicates and preconditions below\" & LF);\n+               Put (S, \"--  There is no procedure Set_Nkind.\" & LF);\n+               Put (S, \"--  See Init_Nkind and Mutate_Nkind in Atree.\" & LF & LF);\n \n             when Entity_Kind =>\n                Put_Getter_Decl (S, Ekind);\n-               Put (S, \"function K (N : Entity_Id) return Entity_Kind renames Ekind;\\n\");\n-               Put (S, \"--  Shorthand for use in predicates and preconditions below\\n\");\n-               Put (S, \"--  There is no procedure Set_Ekind here.\\n\");\n-               Put (S, \"--  See Mutate_Ekind in Atree.\\n\\n\");\n+               Put (S, \"function K (N : Entity_Id) return Entity_Kind renames Ekind;\" & LF);\n+               Put (S, \"--  Shorthand for use in predicates and preconditions below\" & LF);\n+               Put (S, \"--  There is no procedure Set_Ekind here.\" & LF);\n+               Put (S, \"--  See Mutate_Ekind in Atree.\" & LF & LF);\n \n             when others => raise Program_Error;\n          end case;\n \n-         Put (S, \"--  Subtypes of \\1 for each abstract type:\\n\\n\",\n-              Image (Root));\n+         Put (S, \"--  Subtypes of \" & Image (Root) & \" for each abstract type:\" & LF & LF);\n \n-         Put (S, \"pragma Style_Checks (\"\"M200\"\");\\n\");\n+         Put (S, \"pragma Style_Checks (\"\"M200\"\");\" & LF);\n          Iterate_Types (Root, Pre => Put_Kind_Subtype'Access);\n \n-         Put (S, \"\\n--  Subtypes of \\1 with specified \\2.\\n\",\n-              Id_Image (Root), Image (Root));\n-         Put (S, \"--  These may be used in place of \\1 for better documentation,\\n\",\n-              Id_Image (Root));\n-         Put (S, \"--  and if assertions are enabled, for run-time checking.\\n\\n\");\n+         Put (S, LF & \"--  Subtypes of \" & Id_Image (Root) &\n+              \" with specified \" & Image (Root) & \".\" & LF);\n+         Put (S, \"--  These may be used in place of \" & Id_Image (Root) &\n+              \" for better documentation,\" & LF);\n+         Put (S, \"--  and if assertions are enabled, for run-time checking.\" & LF & LF);\n \n          Iterate_Types (Root, Pre => Put_Id_Subtype'Access);\n-         Put (S, \"\\n\");\n \n-         Put (S, \"--  Union types (nonhierarchical subtypes of \\1)\\n\\n\",\n-              Id_Image (Root));\n+         Put (S, LF & \"--  Union types (nonhierarchical subtypes of \" &\n+              Id_Image (Root) & \")\" & LF & LF);\n \n          for T in First_Abstract (Root) .. Last_Abstract (Root) loop\n             if Type_Table (T) /= null and then Type_Table (T).Is_Union then\n                Put_Kind_Subtype (T);\n                Put_Id_Subtype (T);\n-               Put (S, \"\\n\");\n             end if;\n          end loop;\n \n-         Put (S, \"subtype Flag is Boolean;\\n\\n\");\n+         Put (S, \"subtype Flag is Boolean;\" & LF & LF);\n       end Put_Type_And_Subtypes;\n \n       function Low_Level_Getter_Name (T : Type_Enum) return String is\n@@ -1558,7 +1555,7 @@ package body Gen_IL.Gen is\n       -------------------------------------------\n \n       procedure Put_Low_Level_Accessor_Instantiations\n-        (S : in out Sink'Class; T : Type_Enum)\n+        (S : in out Sink; T : Type_Enum)\n       is\n       begin\n          --  Special case for types that have defaults; instantiate\n@@ -1572,39 +1569,34 @@ package body Gen_IL.Gen is\n                  (if T = Elist_Id then \"No_Elist\" else \"Uint_0\");\n \n             begin\n-               Put (S, \"\\nfunction \\1 is new Get_32_Bit_Field_With_Default (\\2, \\3) with \\4;\\n\",\n-                    Low_Level_Getter_Name (T),\n-                    Get_Set_Id_Image (T),\n-                    Default_Val,\n-                    Inline);\n+               Put (S, LF & \"function \" & Low_Level_Getter_Name (T) &\n+                    \" is new Get_32_Bit_Field_With_Default (\" &\n+                    Get_Set_Id_Image (T) & \", \" & Default_Val &\n+                    \") with \" & Inline & \";\" & LF);\n             end;\n \n          --  Otherwise, instantiate the normal getter for the right size in\n          --  bits.\n \n          else\n-            Put (S, \"\\nfunction \\1 is new Get_\\2_Bit_Field (\\3) with \\4;\\n\",\n-                 Low_Level_Getter_Name (T),\n-                 Image (Field_Size (T)),\n-                 Get_Set_Id_Image (T),\n-                 Inline);\n+            Put (S, LF & \"function \" & Low_Level_Getter_Name (T) &\n+                 \" is new Get_\" & Image (Field_Size (T)) & \"_Bit_Field (\" &\n+                 Get_Set_Id_Image (T) & \") with \" & Inline & \";\" & LF);\n          end if;\n \n          --  No special case for the setter\n \n          if T in Node_Kind_Type | Entity_Kind_Type then\n-            Put (S, \"pragma Warnings (Off);\\n\");\n+            Put (S, \"pragma Warnings (Off);\" & LF);\n             --  Set_Node_Kind_Type and Set_Entity_Kind_Type might not be called\n          end if;\n \n-         Put (S, \"procedure \\1 is new Set_\\2_Bit_Field (\\3) with \\4;\\n\",\n-              Low_Level_Setter_Name (T),\n-              Image (Field_Size (T)),\n-              Get_Set_Id_Image (T),\n-              Inline);\n+         Put (S, \"procedure \" & Low_Level_Setter_Name (T) & \" is new Set_\" &\n+              Image (Field_Size (T)) & \"_Bit_Field (\" & Get_Set_Id_Image (T) &\n+              \") with \" & Inline & \";\" & LF);\n \n          if T in Node_Kind_Type | Entity_Kind_Type then\n-            Put (S, \"pragma Warnings (On);\\n\");\n+            Put (S, \"pragma Warnings (On);\" & LF);\n          end if;\n       end Put_Low_Level_Accessor_Instantiations;\n \n@@ -1613,7 +1605,7 @@ package body Gen_IL.Gen is\n       ----------------------\n \n       procedure Put_Precondition\n-        (S : in out Sink'Class; F : Field_Enum)\n+        (S : in out Sink; F : Field_Enum)\n       is\n          --  If the field is present in all entities, we want to assert that\n          --  N in N_Entity_Id. If the field is present in only some entities,\n@@ -1638,21 +1630,21 @@ package body Gen_IL.Gen is\n               or else Field_Table (F).Have_This_Field = Nodes_And_Entities\n             then\n                if Is_Entity /= \"\" then\n-                  Indent (S, 1);\n-                  Put (S, \", Pre =>\\n\");\n-                  Put (S, \"\\1\", Is_Entity);\n-                  Outdent (S, 1);\n+                  Increase_Indent (S, 1);\n+                  Put (S, \", Pre =>\" & LF);\n+                  Put (S, Is_Entity);\n+                  Decrease_Indent (S, 1);\n                end if;\n \n             else\n-               Put (S, \", Pre =>\\n\");\n-               Indent (S, 1);\n+               Put (S, \", Pre =>\" & LF);\n+               Increase_Indent (S, 1);\n                Put (S, \"N in \");\n                Put_Type_Ids_With_Bars (S, Field_Table (F).Have_This_Field);\n \n                pragma Assert (Is_Entity = \"\");\n \n-               Outdent (S, 1);\n+               Decrease_Indent (S, 1);\n             end if;\n          end if;\n       end Put_Precondition;\n@@ -1691,35 +1683,35 @@ package body Gen_IL.Gen is\n       -- Put_Getter_Spec --\n       ---------------------\n \n-      procedure Put_Getter_Spec (S : in out Sink'Class; F : Field_Enum) is\n+      procedure Put_Getter_Spec (S : in out Sink; F : Field_Enum) is\n       begin\n-         Put (S, \"function \\1\\n\", Image (F));\n-         Indent (S, 2);\n-         Put (S, \"(N : \\1) return \\2\",\n-              N_Type (F), Get_Set_Id_Image (Field_Table (F).Field_Type));\n-         Outdent (S, 2);\n+         Put (S, \"function \" & Image (F) & LF);\n+         Increase_Indent (S, 2);\n+         Put (S, \"(N : \" & N_Type (F) & \") return \" &\n+              Get_Set_Id_Image (Field_Table (F).Field_Type));\n+         Decrease_Indent (S, 2);\n       end Put_Getter_Spec;\n \n       ---------------------\n       -- Put_Getter_Decl --\n       ---------------------\n \n-      procedure Put_Getter_Decl (S : in out Sink'Class; F : Field_Enum) is\n+      procedure Put_Getter_Decl (S : in out Sink; F : Field_Enum) is\n       begin\n          Put_Getter_Spec (S, F);\n-         Put (S, \" with \\1\", Inline);\n-         Indent (S, 2);\n+         Put (S, \" with \" & Inline);\n+         Increase_Indent (S, 2);\n          Put_Precondition (S, F);\n \n-         Outdent (S, 2);\n-         Put (S, \";\\n\");\n+         Decrease_Indent (S, 2);\n+         Put (S, \";\" & LF);\n       end Put_Getter_Decl;\n \n       ---------------------\n       -- Put_Getter_Body --\n       ---------------------\n \n-      procedure Put_Getter_Body (S : in out Sink'Class; F : Field_Enum) is\n+      procedure Put_Getter_Body (S : in out Sink; F : Field_Enum) is\n          Rec : Field_Info renames Field_Table (F).all;\n       begin\n          --  Note that we store the result in a local constant below, so that\n@@ -1729,66 +1721,64 @@ package body Gen_IL.Gen is\n          --  and setter.\n \n          Put_Getter_Spec (S, F);\n-         Put (S, \" is\\n\");\n-         Indent (S, 3);\n-         Put (S, \"Val : constant \\1 := \\2 (\\3, \\4);\\n\",\n-              Get_Set_Id_Image (Rec.Field_Type),\n-              Low_Level_Getter_Name (Rec.Field_Type),\n-              Node_To_Fetch_From (F),\n-              Image (Rec.Offset));\n-         Outdent (S, 3);\n-         Put (S, \"begin\\n\");\n-         Indent (S, 3);\n+         Put (S, \" is\" & LF);\n+         Increase_Indent (S, 3);\n+         Put (S, \"Val : constant \" & Get_Set_Id_Image (Rec.Field_Type) &\n+              \" := \" & Low_Level_Getter_Name (Rec.Field_Type) &\n+              \" (\" & Node_To_Fetch_From (F) & \", \" &\n+              Image (Rec.Offset) & \");\" & LF);\n+         Decrease_Indent (S, 3);\n+         Put (S, \"begin\" & LF);\n+         Increase_Indent (S, 3);\n \n          if Rec.Pre.all /= \"\" then\n-            Put (S, \"pragma Assert (\\1);\\n\", Rec.Pre.all);\n+            Put (S, \"pragma Assert (\" & Rec.Pre.all & \");\" & LF);\n          end if;\n \n          if Rec.Pre_Get.all /= \"\" then\n-            Put (S, \"pragma Assert (\\1);\\n\", Rec.Pre_Get.all);\n+            Put (S, \"pragma Assert (\" & Rec.Pre_Get.all & \");\" & LF);\n          end if;\n \n-         Put (S, \"return Val;\\n\");\n-         Outdent (S, 3);\n-         Put (S, \"end \\1;\\n\\n\", Image (F));\n+         Put (S, \"return Val;\" & LF);\n+         Decrease_Indent (S, 3);\n+         Put (S, \"end \" & Image (F) & \";\" & LF & LF);\n       end Put_Getter_Body;\n \n       ---------------------\n       -- Put_Setter_Spec --\n       ---------------------\n \n-      procedure Put_Setter_Spec (S : in out Sink'Class; F : Field_Enum) is\n+      procedure Put_Setter_Spec (S : in out Sink; F : Field_Enum) is\n          Rec    : Field_Info renames Field_Table (F).all;\n          Default : constant String :=\n            (if Rec.Field_Type = Flag then \" := True\" else \"\");\n       begin\n-         Put (S, \"procedure Set_\\1\\n\", Image (F));\n-         Indent (S, 2);\n-         Put (S, \"(N : \\1; Val : \\2\\3)\",\n-              N_Type (F), Get_Set_Id_Image (Rec.Field_Type),\n-              Default);\n-         Outdent (S, 2);\n+         Put (S, \"procedure Set_\" & Image (F) & LF);\n+         Increase_Indent (S, 2);\n+         Put (S, \"(N : \" & N_Type (F) & \"; Val : \" &\n+              Get_Set_Id_Image (Rec.Field_Type) & Default & \")\");\n+         Decrease_Indent (S, 2);\n       end Put_Setter_Spec;\n \n       ---------------------\n       -- Put_Setter_Decl --\n       ---------------------\n \n-      procedure Put_Setter_Decl (S : in out Sink'Class; F : Field_Enum) is\n+      procedure Put_Setter_Decl (S : in out Sink; F : Field_Enum) is\n       begin\n          Put_Setter_Spec (S, F);\n-         Put (S, \" with \\1\", Inline);\n-         Indent (S, 2);\n+         Put (S, \" with \" & Inline);\n+         Increase_Indent (S, 2);\n          Put_Precondition (S, F);\n-         Outdent (S, 2);\n-         Put (S, \";\\n\");\n+         Decrease_Indent (S, 2);\n+         Put (S, \";\" & LF);\n       end Put_Setter_Decl;\n \n       ---------------------\n       -- Put_Setter_Body --\n       ---------------------\n \n-      procedure Put_Setter_Body (S : in out Sink'Class; F : Field_Enum) is\n+      procedure Put_Setter_Body (S : in out Sink; F : Field_Enum) is\n          Rec : Field_Info renames Field_Table (F).all;\n \n          --  If Type_Only was specified in the call to Create_Semantic_Field,\n@@ -1802,68 +1792,67 @@ package body Gen_IL.Gen is\n                 \"Is_Base_Type (N)\");\n       begin\n          Put_Setter_Spec (S, F);\n-         Put (S, \" is\\n\");\n-         Put (S, \"begin\\n\");\n-         Indent (S, 3);\n+         Put (S, \" is\" & LF);\n+         Put (S, \"begin\" & LF);\n+         Increase_Indent (S, 3);\n \n          if Rec.Pre.all /= \"\" then\n-            Put (S, \"pragma Assert (\\1);\\n\", Rec.Pre.all);\n+            Put (S, \"pragma Assert (\" & Rec.Pre.all & \");\" & LF);\n          end if;\n \n          if Rec.Pre_Set.all /= \"\" then\n-            Put (S, \"pragma Assert (\\1);\\n\", Rec.Pre_Set.all);\n+            Put (S, \"pragma Assert (\" & Rec.Pre_Set.all & \");\" & LF);\n          end if;\n \n          if Type_Only_Assertion /= \"\" then\n-            Put (S, \"pragma Assert (\\1);\\n\", Type_Only_Assertion);\n+            Put (S, \"pragma Assert (\" & Type_Only_Assertion & \");\" & LF);\n          end if;\n \n-         Put (S, \"\\1 (N, \\2, Val);\\n\",\n-              Low_Level_Setter_Name (F),\n-              Image (Rec.Offset));\n-         Outdent (S, 3);\n-         Put (S, \"end Set_\\1;\\n\\n\", Image (F));\n+         Put (S, Low_Level_Setter_Name (F) & \" (N, \" & Image (Rec.Offset)\n+              & \", Val);\" & LF);\n+         Decrease_Indent (S, 3);\n+         Put (S, \"end Set_\" & Image (F) & \";\" & LF & LF);\n       end Put_Setter_Body;\n \n       --------------------\n       -- Put_Subp_Decls --\n       --------------------\n \n-      procedure Put_Subp_Decls (S : in out Sink'Class; Root : Root_Type) is\n+      procedure Put_Subp_Decls (S : in out Sink; Root : Root_Type) is\n          --  Note that there are several fields that are defined for both nodes\n          --  and entities, such as Nkind. These are allocated slots in both,\n          --  but here we only put out getters and setters in Sinfo.Nodes, not\n          --  Einfo.Entities.\n \n       begin\n-         Put (S, \"--  Getters and setters for fields\\n\");\n+         Put (S, \"--  Getters and setters for fields\" & LF);\n \n          for F in First_Field (Root) .. Last_Field (Root) loop\n             --  Nkind/Ekind getter is already done (see Put_Type_And_Subtypes),\n             --  and there is no setter for these.\n \n             if F = Nkind then\n-               Put (S, \"\\n--  Nkind getter is above\\n\");\n+               Put (S, LF & \"--  Nkind getter is above\" & LF);\n \n             elsif F = Ekind then\n-               Put (S, \"\\n--  Ekind getter is above\\n\");\n+               Put (S, LF & \"--  Ekind getter is above\" & LF);\n \n             else\n                Put_Getter_Decl (S, F);\n                Put_Setter_Decl (S, F);\n             end if;\n \n-            Put (S, \"\\n\");\n+            Put (S, LF);\n          end loop;\n       end Put_Subp_Decls;\n \n       ---------------------\n       -- Put_Subp_Bodies --\n       ---------------------\n \n-      procedure Put_Subp_Bodies (S : in out Sink'Class; Root : Root_Type) is\n+      procedure Put_Subp_Bodies (S : in out Sink; Root : Root_Type) is\n       begin\n-         Put (S, \"\\n--  Getters and setters for fields\\n\\n\");\n+         Put (S, LF & \"--  Getters and setters for fields\" & LF & LF);\n \n          for F in First_Field (Root) .. Last_Field (Root) loop\n             Put_Getter_Body (S, F);\n@@ -1878,7 +1867,7 @@ package body Gen_IL.Gen is\n       -- Put_Traversed_Fields --\n       --------------------------\n \n-      procedure Put_Traversed_Fields (S : in out Sink'Class) is\n+      procedure Put_Traversed_Fields (S : in out Sink) is\n \n          function Is_Traversed_Field\n            (T : Concrete_Node; F : Field_Enum) return Boolean;\n@@ -1909,11 +1898,11 @@ package body Gen_IL.Gen is\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (S, \",\\n\");\n+                  Put (S, \",\" & LF);\n                end if;\n \n-               Put (S, \"\\1 => (\", Image (T));\n-               Indent (S, 2);\n+               Put (S, Image (T) & \" => (\");\n+               Increase_Indent (S, 2);\n \n                for FI in 1 .. Last_Index (Type_Table (T).Fields) loop\n                   declare\n@@ -1925,7 +1914,7 @@ package body Gen_IL.Gen is\n                            Left_Opnd_Skipped := True; -- see comment below\n \n                         else\n-                           Put (S, \"\\1, \", Image (Field_Table (F).Offset));\n+                           Put (S, Image (Field_Table (F).Offset) & \", \");\n                         end if;\n                      end if;\n                   end;\n@@ -1937,12 +1926,12 @@ package body Gen_IL.Gen is\n                --  that.\n \n                if Left_Opnd_Skipped then\n-                  Put (S, \"\\1, \", Image (Field_Table (Left_Opnd).Offset));\n+                  Put (S, Image (Field_Table (Left_Opnd).Offset) & \", \");\n                end if;\n \n                Put (S, \"others => No_Field_Offset\");\n \n-               Outdent (S, 2);\n+               Decrease_Indent (S, 2);\n                Put (S, \")\");\n             end if;\n          end Put_Aggregate;\n@@ -1979,29 +1968,29 @@ package body Gen_IL.Gen is\n            Init_Max_Traversed_Fields;\n \n       begin\n-         Put (S, \"--  Table of fields that should be traversed by Traverse subprograms.\\n\");\n-         Put (S, \"--  Each entry is an array of offsets in slots of fields to be\\n\");\n-         Put (S, \"--  traversed, terminated by a sentinel equal to No_Field_Offset.\\n\\n\");\n+         Put (S, \"--  Table of fields that should be traversed by Traverse subprograms.\" & LF);\n+         Put (S, \"--  Each entry is an array of offsets in slots of fields to be\" & LF);\n+         Put (S, \"--  traversed, terminated by a sentinel equal to No_Field_Offset.\" & LF & LF);\n \n-         Put (S, \"subtype Traversed_Offset_Array is Offset_Array (0 .. \\1 + 1);\\n\",\n-              Image (Max_Traversed_Fields - 1));\n-         Put (S, \"Traversed_Fields : constant array (Node_Kind) of Traversed_Offset_Array :=\\n\");\n+         Put (S, \"subtype Traversed_Offset_Array is Offset_Array (0 .. \" &\n+              Image (Max_Traversed_Fields - 1) & \" + 1);\" & LF);\n+         Put (S, \"Traversed_Fields : constant array (Node_Kind) of Traversed_Offset_Array :=\" & LF);\n          --  One extra for the sentinel\n \n-         Indent (S, 2);\n+         Increase_Indent (S, 2);\n          Put (S, \"(\");\n-         Indent (S, 1);\n+         Increase_Indent (S, 1);\n          Iterate_Types (Node_Kind, Pre => Put_Aggregate'Access);\n-         Outdent (S, 1);\n-         Put (S, \");\\n\\n\");\n-         Outdent (S, 2);\n+         Decrease_Indent (S, 1);\n+         Put (S, \");\" & LF & LF);\n+         Decrease_Indent (S, 2);\n       end Put_Traversed_Fields;\n \n       ----------------\n       -- Put_Tables --\n       ----------------\n \n-      procedure Put_Tables (S : in out Sink'Class; Root : Root_Type) is\n+      procedure Put_Tables (S : in out Sink; Root : Root_Type) is\n \n          First_Time : Boolean := True;\n \n@@ -2012,10 +2001,10 @@ package body Gen_IL.Gen is\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (S, \",\\n\");\n+                  Put (S, \",\" & LF);\n                end if;\n \n-               Put (S, \"\\1 => \\2\", Image (T), Image (Type_Size_In_Slots (T)));\n+               Put (S, Image (T) & \" => \" & Image (Type_Size_In_Slots (T)));\n             end if;\n          end Put_Size;\n \n@@ -2029,10 +2018,10 @@ package body Gen_IL.Gen is\n                   if First_Time then\n                      First_Time := False;\n                   else\n-                     Put (S, \",\\n\");\n+                     Put (S, \",\" & LF);\n                   end if;\n \n-                  Put (S, \"\\1\", F_Image (F));\n+                  Put (S, F_Image (F));\n                end if;\n             end loop;\n          end Put_Field_Array;\n@@ -2043,71 +2032,74 @@ package body Gen_IL.Gen is\n               when others => \"Entity_Field\");  -- Entity_Kind\n \n       begin\n-         Put (S, \"--  Table of sizes in 32-bit slots for given \\1, for use by Atree:\\n\",\n-              Image (Root));\n+         Put (S, \"--  Table of sizes in 32-bit slots for given \" &\n+              Image (Root) & \", for use by Atree:\" & LF);\n \n          case Root is\n             when Node_Kind =>\n-               Put (S, \"\\nMin_Node_Size : constant Field_Offset := \\1;\\n\",\n-                    Image (Min_Node_Size));\n-               Put (S, \"Max_Node_Size : constant Field_Offset := \\1;\\n\\n\",\n-                    Image (Max_Node_Size));\n-               Put (S, \"Average_Node_Size_In_Slots : constant := \\1;\\n\\n\",\n-                    Average_Node_Size_In_Slots'Img);\n+               Put (S, LF & \"Min_Node_Size : constant Field_Offset := \" &\n+                    Image (Min_Node_Size) & \";\" & LF);\n+               Put (S, \"Max_Node_Size : constant Field_Offset := \" &\n+                    Image (Max_Node_Size) & \";\" & LF & LF);\n+               Put (S, \"Average_Node_Size_In_Slots : constant := \" &\n+                    Average_Node_Size_In_Slots'Img & \";\" & LF & LF);\n             when Entity_Kind =>\n-               Put (S, \"\\nMin_Entity_Size : constant Field_Offset := \\1;\\n\",\n-                    Image (Min_Entity_Size));\n-               Put (S, \"Max_Entity_Size : constant Field_Offset := \\1;\\n\\n\",\n-                    Image (Max_Entity_Size));\n+               Put (S, LF & \"Min_Entity_Size : constant Field_Offset := \" &\n+                    Image (Min_Entity_Size) & \";\" & LF);\n+               Put (S, \"Max_Entity_Size : constant Field_Offset := \" &\n+                    Image (Max_Entity_Size) & \";\" & LF & LF);\n             when others => raise Program_Error;\n          end case;\n \n-         Put (S, \"Size : constant array (\\1) of Field_Offset :=\\n\", Image (Root));\n-         Indent (S, 2);\n+         Put (S, \"Size : constant array (\" & Image (Root) &\n+              \") of Field_Offset :=\" & LF);\n+         Increase_Indent (S, 2);\n          Put (S, \"(\");\n-         Indent (S, 1);\n+         Increase_Indent (S, 1);\n \n          Iterate_Types (Root, Pre => Put_Size'Access);\n \n-         Outdent (S, 1);\n-         Put (S, \"); -- Size\\n\");\n-         Outdent (S, 2);\n+         Decrease_Indent (S, 1);\n+         Put (S, \"); -- Size\" & LF);\n+         Decrease_Indent (S, 2);\n \n          declare\n             type Dummy is array\n               (First_Field (Root) .. Last_Field (Root)) of Boolean;\n             Num_Fields : constant Root_Int := Dummy'Length;\n             First_Time : Boolean := True;\n          begin\n-            Put (S, \"\\n--  Enumeration of all \\1 fields:\\n\\n\",\n-                 Image (Num_Fields));\n+            Put (S, LF & \"--  Enumeration of all \" & Image (Num_Fields)\n+                 & \" fields:\" & LF & LF);\n \n-            Put (S, \"type \\1 is\\n\", Field_Enum_Type_Name);\n-            Indent (S, 2);\n+            Put (S, \"type \" & Field_Enum_Type_Name & \" is\" & LF);\n+            Increase_Indent (S, 2);\n             Put (S, \"(\");\n-            Indent (S, 1);\n+            Increase_Indent (S, 1);\n \n             for F in First_Field (Root) .. Last_Field (Root) loop\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (S, \",\\n\");\n+                  Put (S, \",\" & LF);\n                end if;\n \n-               Put (S, \"\\1\", F_Image (F));\n+               Put (S, F_Image (F));\n             end loop;\n \n-            Outdent (S, 1);\n-            Put (S, \"); -- \\1\\n\", Field_Enum_Type_Name);\n-            Outdent (S, 2);\n+            Decrease_Indent (S, 1);\n+            Put (S, \"); -- \" & Field_Enum_Type_Name & LF);\n+            Decrease_Indent (S, 2);\n          end;\n \n-         Put (S, \"\\ntype \\1_Index is new Pos;\\n\", Field_Enum_Type_Name);\n-         Put (S, \"type \\1_Array is array (\\1_Index range <>) of \\1;\\n\",\n-              Field_Enum_Type_Name);\n-         Put (S, \"type \\1_Array_Ref is access constant \\1_Array;\\n\",\n-              Field_Enum_Type_Name);\n-         Put (S, \"subtype A is \\1_Array;\\n\", Field_Enum_Type_Name);\n+         Put (S, LF & \"type \" & Field_Enum_Type_Name & \"_Index is new Pos;\" & LF);\n+         Put (S, \"type \" & Field_Enum_Type_Name & \"_Array is array (\" &\n+              Field_Enum_Type_Name & \"_Index range <>) of \" &\n+              Field_Enum_Type_Name & \";\" & LF);\n+         Put (S, \"type \" & Field_Enum_Type_Name &\n+              \"_Array_Ref is access constant \" & Field_Enum_Type_Name &\n+              \"_Array;\" & LF);\n+         Put (S, \"subtype A is \" & Field_Enum_Type_Name & \"_Array;\" & LF);\n          --  Short name to make allocators below more readable\n \n          declare\n@@ -2120,67 +2112,70 @@ package body Gen_IL.Gen is\n                   if First_Time then\n                      First_Time := False;\n                   else\n-                     Put (S, \",\\n\");\n+                     Put (S, \",\" & LF);\n                   end if;\n \n-                  Put (S, \"\\1 =>\\n\", Image (T));\n-                  Indent (S, 2);\n+                  Put (S, Image (T) & \" =>\" & LF);\n+                  Increase_Indent (S, 2);\n                   Put (S, \"new A'(\");\n-                  Indent (S, 6);\n-                  Indent (S, 1);\n+                  Increase_Indent (S, 6);\n+                  Increase_Indent (S, 1);\n \n                   Put_Field_Array (T);\n \n-                  Outdent (S, 1);\n+                  Decrease_Indent (S, 1);\n                   Put (S, \")\");\n-                  Outdent (S, 6);\n-                  Outdent (S, 2);\n+                  Decrease_Indent (S, 6);\n+                  Decrease_Indent (S, 2);\n                end if;\n             end Do_One_Type;\n          begin\n-            Put (S, \"\\n--  Table mapping \\1s to the sequence of fields that exist in that \\1:\\n\\n\",\n-                 Image (Root));\n+            Put (S, LF & \"--  Table mapping \" & Image (Root) &\n+                 \"s to the sequence of fields that exist in that \" &\n+                 Image (Root) & \":\" & LF & LF);\n \n-            Put (S, \"\\1_Table : constant array (\\2) of \\1_Array_Ref :=\\n\",\n-                 Field_Enum_Type_Name, Image (Root));\n+            Put (S, Field_Enum_Type_Name & \"_Table : constant array (\" &\n+                 Image (Root) & \") of \" & Field_Enum_Type_Name &\n+                 \"_Array_Ref :=\" & LF);\n \n-            Indent (S, 2);\n+            Increase_Indent (S, 2);\n             Put (S, \"(\");\n-            Indent (S, 1);\n+            Increase_Indent (S, 1);\n \n             Iterate_Types (Root, Pre => Do_One_Type'Access);\n \n-            Outdent (S, 1);\n-            Put (S, \"); -- \\1_Table\\n\", Field_Enum_Type_Name);\n-            Outdent (S, 2);\n+            Decrease_Indent (S, 1);\n+            Put (S, \"); -- \" & Field_Enum_Type_Name & \"_Table\" & LF);\n+            Decrease_Indent (S, 2);\n          end;\n \n          declare\n             First_Time : Boolean := True;\n          begin\n-            Put (S, \"\\n--  Table mapping fields to kind and offset:\\n\\n\");\n+            Put (S, LF & \"--  Table mapping fields to kind and offset:\" & LF & LF);\n \n-            Put (S, \"\\1_Descriptors : constant array (\\1) of Field_Descriptor :=\\n\",\n-                 Field_Enum_Type_Name);\n+            Put (S, Field_Enum_Type_Name & \"_Descriptors : constant array (\" &\n+                 Field_Enum_Type_Name & \") of Field_Descriptor :=\" & LF);\n \n-            Indent (S, 2);\n+            Increase_Indent (S, 2);\n             Put (S, \"(\");\n-            Indent (S, 1);\n+            Increase_Indent (S, 1);\n \n             for F in First_Field (Root) .. Last_Field (Root) loop\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (S, \",\\n\");\n+                  Put (S, \",\" & LF);\n                end if;\n \n-               Put (S, \"\\1 => (\\2_Field, \\3)\", F_Image (F),\n-                    Image (Field_Table (F).Field_Type), Image (Field_Table (F).Offset));\n+               Put (S, F_Image (F) & \" => (\" &\n+                    Image (Field_Table (F).Field_Type) & \"_Field, \" &\n+                    Image (Field_Table (F).Offset) & \")\");\n             end loop;\n \n-            Outdent (S, 1);\n-            Put (S, \"); -- Field_Descriptors\\n\");\n-            Outdent (S, 2);\n+            Decrease_Indent (S, 1);\n+            Put (S, \"); -- Field_Descriptors\" & LF);\n+            Decrease_Indent (S, 2);\n          end;\n \n       end Put_Tables;\n@@ -2190,20 +2185,21 @@ package body Gen_IL.Gen is\n       ----------------\n \n       procedure Put_Seinfo is\n-         S : Sink'Class := Create_File (\"seinfo.ads\");\n+         S : Sink;\n       begin\n-         Put (S, \"with Types; use Types;\\n\");\n-         Put (S, \"\\npackage Seinfo is\\n\\n\");\n-         Indent (S, 3);\n+         Create_File (S, \"seinfo.ads\");\n+         Put (S, \"with Types; use Types;\" & LF);\n+         Put (S, LF & \"package Seinfo is\" & LF & LF);\n+         Increase_Indent (S, 3);\n \n-         Put (S, \"--  This package is automatically generated.\\n\\n\");\n+         Put (S, \"--  This package is automatically generated.\" & LF & LF);\n \n-         Put (S, \"--  Common declarations visible in both Sinfo.Nodes and Einfo.Entities.\\n\");\n+         Put (S, \"--  Common declarations visible in both Sinfo.Nodes and Einfo.Entities.\" & LF);\n \n-         Put (S, \"\\ntype Field_Kind is\\n\");\n-         Indent (S, 2);\n+         Put (S, LF & \"type Field_Kind is\" & LF);\n+         Increase_Indent (S, 2);\n          Put (S, \"(\");\n-         Indent (S, 1);\n+         Increase_Indent (S, 1);\n \n          declare\n             First_Time : Boolean := True;\n@@ -2212,21 +2208,21 @@ package body Gen_IL.Gen is\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (S, \",\\n\");\n+                  Put (S, \",\" & LF);\n                end if;\n \n-               Put (S, \"\\1_Field\", Image (T));\n+               Put (S, Image (T) & \"_Field\");\n             end loop;\n          end;\n \n-         Outdent (S, 1);\n-         Outdent (S, 2);\n-         Put (S, \");\\n\");\n+         Decrease_Indent (S, 1);\n+         Decrease_Indent (S, 2);\n+         Put (S, \");\" & LF);\n \n-         Put (S, \"\\nField_Size : constant array (Field_Kind) of Field_Size_In_Bits :=\\n\");\n-         Indent (S, 2);\n+         Put (S, LF & \"Field_Size : constant array (Field_Kind) of Field_Size_In_Bits :=\" & LF);\n+         Increase_Indent (S, 2);\n          Put (S, \"(\");\n-         Indent (S, 1);\n+         Increase_Indent (S, 1);\n \n          declare\n             First_Time : Boolean := True;\n@@ -2235,35 +2231,35 @@ package body Gen_IL.Gen is\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (S, \",\\n\");\n+                  Put (S, \",\" & LF);\n                end if;\n \n-               Put (S, \"\\1_Field => \\2\", Image (T), Image (Field_Size (T)));\n+               Put (S, Image (T) & \"_Field => \" & Image (Field_Size (T)));\n             end loop;\n          end;\n \n-         Outdent (S, 1);\n-         Outdent (S, 2);\n-         Put (S, \");\\n\\n\");\n+         Decrease_Indent (S, 1);\n+         Decrease_Indent (S, 2);\n+         Put (S, \");\" & LF & LF);\n \n-         Put (S, \"type Field_Descriptor is record\\n\");\n-         Indent (S, 3);\n-         Put (S, \"Kind : Field_Kind;\\n\");\n-         Put (S, \"Offset : Field_Offset;\\n\");\n-         Outdent (S, 3);\n-         Put (S, \"end record;\\n\");\n+         Put (S, \"type Field_Descriptor is record\" & LF);\n+         Increase_Indent (S, 3);\n+         Put (S, \"Kind : Field_Kind;\" & LF);\n+         Put (S, \"Offset : Field_Offset;\" & LF);\n+         Decrease_Indent (S, 3);\n+         Put (S, \"end record;\" & LF);\n \n-         Outdent (S, 3);\n-         Put (S, \"\\nend Seinfo;\\n\");\n+         Decrease_Indent (S, 3);\n+         Put (S, LF & \"end Seinfo;\" & LF);\n       end Put_Seinfo;\n \n       ---------------\n       -- Put_Nodes --\n       ---------------\n \n       procedure Put_Nodes is\n-         S : Sink'Class := Create_File (\"sinfo-nodes.ads\");\n-         B : Sink'Class := Create_File (\"sinfo-nodes.adb\");\n+         S : Sink;\n+         B : Sink;\n \n          procedure Put_Setter_With_Parent (Kind : String);\n          --  Put the low-level ..._With_Parent setter. Kind is either \"Node\" or\n@@ -2272,76 +2268,78 @@ package body Gen_IL.Gen is\n          procedure Put_Setter_With_Parent (Kind : String) is\n             Error : constant String := (if Kind = \"Node\" then \"\" else \"_\" & Kind);\n          begin\n-            Put (B, \"\\nprocedure Set_\\1_Id_With_Parent\\n\", Kind);\n-            Indent (B, 2);\n-            Put (B, \"(N : Node_Id; Offset : Field_Offset; Val : \\1_Id);\\n\\n\", Kind);\n-            Outdent (B, 2);\n-\n-            Put (B, \"procedure Set_\\1_Id_With_Parent\\n\", Kind);\n-            Indent (B, 2);\n-            Put (B, \"(N : Node_Id; Offset : Field_Offset; Val : \\1_Id) is\\n\", Kind);\n-            Outdent (B, 2);\n-            Put (B, \"begin\\n\");\n-            Indent (B, 3);\n-            Put (B, \"if Present (Val) and then Val /= Error\\1 then\\n\", Error);\n-            Indent (B, 3);\n-            Put (B, \"pragma Warnings (Off, \"\"actuals for this call may be in wrong order\"\");\\n\");\n-            Put (B, \"Set_Parent (Val, N);\\n\");\n-            Put (B, \"pragma Warnings (On, \"\"actuals for this call may be in wrong order\"\");\\n\");\n-            Outdent (B, 3);\n-            Put (B, \"end if;\\n\\n\");\n-\n-            Put (B, \"Set_\\1_Id (N, Offset, Val);\\n\", Kind);\n-            Outdent (B, 3);\n-            Put (B, \"end Set_\\1_Id_With_Parent;\\n\", Kind);\n+            Put (B, LF & \"procedure Set_\" & Kind & \"_Id_With_Parent\" & LF);\n+            Increase_Indent (B, 2);\n+            Put (B, \"(N : Node_Id; Offset : Field_Offset; Val : \" & Kind & \"_Id);\" & LF & LF);\n+            Decrease_Indent (B, 2);\n+\n+            Put (B, \"procedure Set_\" & Kind & \"_Id_With_Parent\" & LF);\n+            Increase_Indent (B, 2);\n+            Put (B, \"(N : Node_Id; Offset : Field_Offset; Val : \" & Kind & \"_Id) is\" & LF);\n+            Decrease_Indent (B, 2);\n+            Put (B, \"begin\" & LF);\n+            Increase_Indent (B, 3);\n+            Put (B, \"if Present (Val) and then Val /= Error\" & Error & \" then\" & LF);\n+            Increase_Indent (B, 3);\n+            Put (B, \"pragma Warnings (Off, \"\"actuals for this call may be in wrong order\"\");\" & LF);\n+            Put (B, \"Set_Parent (Val, N);\" & LF);\n+            Put (B, \"pragma Warnings (On, \"\"actuals for this call may be in wrong order\"\");\" & LF);\n+            Decrease_Indent (B, 3);\n+            Put (B, \"end if;\" & LF & LF);\n+\n+            Put (B, \"Set_\" & Kind & \"_Id (N, Offset, Val);\" & LF);\n+            Decrease_Indent (B, 3);\n+            Put (B, \"end Set_\" & Kind & \"_Id_With_Parent;\" & LF);\n          end Put_Setter_With_Parent;\n \n       --  Start of processing for Put_Nodes\n \n       begin\n-         Put (S, \"with Seinfo; use Seinfo;\\n\");\n-         Put (S, \"pragma Warnings (Off);\\n\");\n+         Create_File (S, \"sinfo-nodes.ads\");\n+         Create_File (B, \"sinfo-nodes.adb\");\n+         Put (S, \"with Seinfo; use Seinfo;\" & LF);\n+         Put (S, \"pragma Warnings (Off);\" & LF);\n          --  With's included in case they are needed; so we don't have to keep\n          --  switching back and forth.\n-         Put (S, \"with Output; use Output;\\n\");\n-         Put (S, \"pragma Warnings (On);\\n\");\n+         Put (S, \"with Output; use Output;\" & LF);\n+         Put (S, \"pragma Warnings (On);\" & LF);\n \n-         Put (S, \"\\npackage Sinfo.Nodes is\\n\\n\");\n-         Indent (S, 3);\n+         Put (S, LF & \"package Sinfo.Nodes is\" & LF & LF);\n+         Increase_Indent (S, 3);\n \n-         Put (S, \"--  This package is automatically generated.\\n\\n\");\n+         Put (S, \"--  This package is automatically generated.\" & LF & LF);\n \n          Put_Type_Hierarchy (S, Node_Kind);\n \n          Put_Type_And_Subtypes (S, Node_Kind);\n \n-         Put (S, \"pragma Assert (Node_Kind'Pos (N_Unused_At_Start) = 0);\\n\\n\");\n-         Put (S, \"pragma Assert (Node_Kind'Last = N_Unused_At_End);\\n\\n\");\n+         Put (S, \"pragma Assert (Node_Kind'Pos (N_Unused_At_Start) = 0);\" & LF & LF);\n+         Put (S, \"pragma Assert (Node_Kind'Last = N_Unused_At_End);\" & LF & LF);\n \n          Put_Subp_Decls (S, Node_Kind);\n \n          Put_Traversed_Fields (S);\n \n          Put_Tables (S, Node_Kind);\n \n-         Outdent (S, 3);\n-         Put (S, \"\\nend Sinfo.Nodes;\\n\");\n+         Decrease_Indent (S, 3);\n+         Put (S, LF & \"end Sinfo.Nodes;\" & LF);\n \n-         Put (B, \"with Atree; use Atree; use Atree.Atree_Private_Part;\\n\");\n-         Put (B, \"with Nlists; use Nlists;\\n\");\n-         Put (B, \"pragma Warnings (Off);\\n\");\n-         Put (B, \"with Einfo.Utils; use Einfo.Utils;\\n\");\n-         Put (B, \"pragma Warnings (On);\\n\");\n+         Put (B, \"with Atree; use Atree; use Atree.Atree_Private_Part;\" & LF);\n+         Put (B, \"with Nlists; use Nlists;\" & LF);\n+         Put (B, \"pragma Warnings (Off);\" & LF);\n+         Put (B, \"with Einfo.Utils; use Einfo.Utils;\" & LF);\n+         Put (B, \"pragma Warnings (On);\" & LF);\n \n-         Put (B, \"\\npackage body Sinfo.Nodes is\\n\\n\");\n-         Indent (B, 3);\n+         Put (B, LF & \"package body Sinfo.Nodes is\" & LF & LF);\n+         Increase_Indent (B, 3);\n \n-         Put (B, \"--  This package is automatically generated.\\n\\n\");\n+         Put (B, \"--  This package is automatically generated.\" & LF & LF);\n \n-         Put (B, \"--  Instantiations of low-level getters and setters that take offsets\\n\");\n-         Put (B, \"--  in units of the size of the field.\\n\");\n+         Put (B, \"--  Instantiations of low-level getters and setters that take offsets\" & LF);\n+         Put (B, \"--  in units of the size of the field.\" & LF);\n \n-         Put (B, \"pragma Style_Checks (\"\"M200\"\");\\n\");\n+         Put (B, \"pragma Style_Checks (\"\"M200\"\");\" & LF);\n          for T in Special_Type loop\n             if Node_Field_Types_Used (T) then\n                Put_Low_Level_Accessor_Instantiations (B, T);\n@@ -2353,8 +2351,8 @@ package body Gen_IL.Gen is\n \n          Put_Subp_Bodies (B, Node_Kind);\n \n-         Outdent (B, 3);\n-         Put (B, \"end Sinfo.Nodes;\\n\");\n+         Decrease_Indent (B, 3);\n+         Put (B, \"end Sinfo.Nodes;\" & LF);\n \n       end Put_Nodes;\n \n@@ -2363,16 +2361,18 @@ package body Gen_IL.Gen is\n       ------------------\n \n       procedure Put_Entities is\n-         S : Sink'Class := Create_File (\"einfo-entities.ads\");\n-         B : Sink'Class := Create_File (\"einfo-entities.adb\");\n+         S : Sink;\n+         B : Sink;\n       begin\n-         Put (S, \"with Seinfo; use Seinfo;\\n\");\n-         Put (S, \"with Sinfo.Nodes; use Sinfo.Nodes;\\n\");\n+         Create_File (S, \"einfo-entities.ads\");\n+         Create_File (B, \"einfo-entities.adb\");\n+         Put (S, \"with Seinfo; use Seinfo;\" & LF);\n+         Put (S, \"with Sinfo.Nodes; use Sinfo.Nodes;\" & LF);\n \n-         Put (S, \"\\npackage Einfo.Entities is\\n\\n\");\n-         Indent (S, 3);\n+         Put (S, LF & \"package Einfo.Entities is\" & LF & LF);\n+         Increase_Indent (S, 3);\n \n-         Put (S, \"--  This package is automatically generated.\\n\\n\");\n+         Put (S, \"--  This package is automatically generated.\" & LF & LF);\n \n          Put_Type_Hierarchy (S, Entity_Kind);\n \n@@ -2382,22 +2382,22 @@ package body Gen_IL.Gen is\n \n          Put_Tables (S, Entity_Kind);\n \n-         Outdent (S, 3);\n-         Put (S, \"\\nend Einfo.Entities;\\n\");\n+         Decrease_Indent (S, 3);\n+         Put (S, LF & \"end Einfo.Entities;\" & LF);\n \n-         Put (B, \"with Atree; use Atree; use Atree.Atree_Private_Part;\\n\");\n-         Put (B, \"with Einfo.Utils; use Einfo.Utils;\\n\");\n+         Put (B, \"with Atree; use Atree; use Atree.Atree_Private_Part;\" & LF);\n+         Put (B, \"with Einfo.Utils; use Einfo.Utils;\" & LF);\n          --  This forms a cycle between packages (via bodies, which is OK)\n \n-         Put (B, \"\\npackage body Einfo.Entities is\\n\\n\");\n-         Indent (B, 3);\n+         Put (B, LF & \"package body Einfo.Entities is\" & LF & LF);\n+         Increase_Indent (B, 3);\n \n-         Put (B, \"--  This package is automatically generated.\\n\\n\");\n+         Put (B, \"--  This package is automatically generated.\" & LF & LF);\n \n-         Put (B, \"--  Instantiations of low-level getters and setters that take offsets\\n\");\n-         Put (B, \"--  in units of the size of the field.\\n\");\n+         Put (B, \"--  Instantiations of low-level getters and setters that take offsets\" & LF);\n+         Put (B, \"--  in units of the size of the field.\" & LF);\n \n-         Put (B, \"pragma Style_Checks (\"\"M200\"\");\\n\");\n+         Put (B, \"pragma Style_Checks (\"\"M200\"\");\" & LF);\n          for T in Special_Type loop\n             if Entity_Field_Types_Used (T) then\n                Put_Low_Level_Accessor_Instantiations (B, T);\n@@ -2406,8 +2406,8 @@ package body Gen_IL.Gen is\n \n          Put_Subp_Bodies (B, Entity_Kind);\n \n-         Outdent (B, 3);\n-         Put (B, \"end Einfo.Entities;\\n\");\n+         Decrease_Indent (B, 3);\n+         Put (B, \"end Einfo.Entities;\" & LF);\n \n       end Put_Entities;\n \n@@ -2416,13 +2416,13 @@ package body Gen_IL.Gen is\n       -------------------\n \n       procedure Put_Make_Spec\n-        (S : in out Sink'Class; Root : Root_Type; T : Concrete_Type)\n+        (S : in out Sink; Root : Root_Type; T : Concrete_Type)\n       is\n       begin\n-         Put (S, \"function Make_\\1\\n\", Image_Sans_N (T));\n-         Indent (S, 2);\n+         Put (S, \"function Make_\" & Image_Sans_N (T) & \"\" & LF);\n+         Increase_Indent (S, 2);\n          Put (S, \"(Sloc : Source_Ptr\");\n-         Indent (S, 1);\n+         Increase_Indent (S, 1);\n \n          for F of Type_Table (T).Fields loop\n             pragma Assert (Fields_Per_Node (T) (F));\n@@ -2442,28 +2442,29 @@ package body Gen_IL.Gen is\n                      else \" := \" & Value_Image (Field_Table (F).Default_Value));\n \n                begin\n-                  Put (S, \";\\n\");\n-                  Put (S, \"\\1\", Image (F));\n-                  Put (S, \" : \\1\\2\", Typ, Default);\n+                  Put (S, \";\" & LF);\n+                  Put (S, Image (F));\n+                  Put (S, \" : \" & Typ & Default);\n                end;\n             end if;\n          end loop;\n \n-         Put (S, \")\\nreturn \\1_Id\", Node_Or_Entity (Root));\n-         Outdent (S, 2);\n-         Outdent (S, 1);\n+         Put (S, \")\" & LF & \"return \" & Node_Or_Entity (Root) & \"_Id\");\n+         Decrease_Indent (S, 2);\n+         Decrease_Indent (S, 1);\n       end Put_Make_Spec;\n \n       --------------------\n       -- Put_Make_Decls --\n       --------------------\n \n-      procedure Put_Make_Decls (S : in out Sink'Class; Root : Root_Type) is\n+      procedure Put_Make_Decls (S : in out Sink; Root : Root_Type) is\n       begin\n          for T in First_Concrete (Root) .. Last_Concrete (Root) loop\n             if T not in N_Unused_At_Start | N_Unused_At_End then\n                Put_Make_Spec (S, Root, T);\n-               Put (S, \";\\npragma \\1 (Make_\\2);\\n\\n\", Inline, Image_Sans_N (T));\n+               Put (S, \";\" & LF & \"pragma \" & Inline & \" (Make_\" &\n+                    Image_Sans_N (T) & \");\" & LF & LF);\n             end if;\n          end loop;\n       end Put_Make_Decls;\n@@ -2472,28 +2473,28 @@ package body Gen_IL.Gen is\n       -- Put_Make_Bodies --\n       ---------------------\n \n-      procedure Put_Make_Bodies (S : in out Sink'Class; Root : Root_Type) is\n+      procedure Put_Make_Bodies (S : in out Sink; Root : Root_Type) is\n       begin\n          for T in First_Concrete (Root) .. Last_Concrete (Root) loop\n             if T not in N_Unused_At_Start | N_Unused_At_End then\n                Put_Make_Spec (S, Root, T);\n-               Put (S, \"\\nis\\n\");\n+               Put (S, LF & \"is\" & LF);\n \n-               Indent (S, 3);\n-               Put (S, \"N : constant Node_Id :=\\n\");\n+               Increase_Indent (S, 3);\n+               Put (S, \"N : constant Node_Id :=\" & LF);\n \n                if T in Entity_Node then\n-                  Put (S, \"      New_Entity (\\1, Sloc);\\n\", Image (T));\n+                  Put (S, \"      New_Entity (\" & Image (T) & \", Sloc);\" & LF);\n \n                else\n-                  Put (S, \"      New_Node (\\1, Sloc);\\n\", Image (T));\n+                  Put (S, \"      New_Node (\" & Image (T) & \", Sloc);\" & LF);\n                end if;\n \n-               Outdent (S, 3);\n+               Decrease_Indent (S, 3);\n \n-               Put (S, \"begin\\n\");\n+               Put (S, \"begin\" & LF);\n \n-               Indent (S, 3);\n+               Increase_Indent (S, 3);\n                for F of Type_Table (T).Fields loop\n                   pragma Assert (Fields_Per_Node (T) (F));\n \n@@ -2508,15 +2509,15 @@ package body Gen_IL.Gen is\n \n                      begin\n                         if F_Name'Length < NWidth then\n-                           Put (S, \"Set_\\1 (N, \\1);\\n\", F_Name);\n+                           Put (S, \"Set_\" & F_Name & \" (N, \" & F_Name & \");\" & LF);\n \n                         --  Wrap the line\n \n                         else\n-                           Put (S, \"Set_\\1\\n\", F_Name);\n-                           Indent (S, 2);\n-                           Put (S, \"(N, \\1);\\n\", F_Name);\n-                           Outdent (S, 2);\n+                           Put (S, \"Set_\" & F_Name & \"\" & LF);\n+                           Increase_Indent (S, 2);\n+                           Put (S, \"(N, \" & F_Name & \");\" & LF);\n+                           Decrease_Indent (S, 2);\n                         end if;\n                      end;\n                   end if;\n@@ -2554,15 +2555,15 @@ package body Gen_IL.Gen is\n                      --  \"Op_\", but the Name_Id constant does not.\n \n                   begin\n-                     Put (S, \"Set_Chars (N, Name_\\1);\\n\", Op_Name);\n-                     Put (S, \"Set_Entity (N, Standard_\\1);\\n\", Op);\n+                     Put (S, \"Set_Chars (N, Name_\" & Op_Name & \");\" & LF);\n+                     Put (S, \"Set_Entity (N, Standard_\" & Op & \");\" & LF);\n                   end;\n                end if;\n \n-               Put (S, \"return N;\\n\");\n-               Outdent (S, 3);\n+               Put (S, \"return N;\" & LF);\n+               Decrease_Indent (S, 3);\n \n-               Put (S, \"end Make_\\1;\\n\\n\", Image_Sans_N (T));\n+               Put (S, \"end Make_\" & Image_Sans_N (T) & \";\" & LF & LF);\n             end if;\n          end loop;\n       end Put_Make_Bodies;\n@@ -2593,51 +2594,53 @@ package body Gen_IL.Gen is\n       --  argument can have side effects (e.g. be a call to a parse routine).\n \n       procedure Put_Nmake is\n-         S : Sink'Class := Create_File (\"nmake.ads\");\n-         B : Sink'Class := Create_File (\"nmake.adb\");\n+         S : Sink;\n+         B : Sink;\n \n       begin\n-         Put (S, \"with Namet;  use Namet;\\n\");\n-         Put (S, \"with Nlists; use Nlists;\\n\");\n-         Put (S, \"with Types;  use Types;\\n\");\n-         Put (S, \"with Uintp;  use Uintp;\\n\");\n-         Put (S, \"with Urealp; use Urealp;\\n\");\n+         Create_File (S, \"nmake.ads\");\n+         Create_File (B, \"nmake.adb\");\n+         Put (S, \"with Namet;  use Namet;\" & LF);\n+         Put (S, \"with Nlists; use Nlists;\" & LF);\n+         Put (S, \"with Types;  use Types;\" & LF);\n+         Put (S, \"with Uintp;  use Uintp;\" & LF);\n+         Put (S, \"with Urealp; use Urealp;\" & LF);\n \n-         Put (S, \"\\npackage Nmake is\\n\\n\");\n-         Indent (S, 3);\n+         Put (S, LF & \"package Nmake is\" & LF & LF);\n+         Increase_Indent (S, 3);\n \n-         Put (S, \"--  This package is automatically generated.\\n\\n\");\n-         Put (S, \"--  See Put_Nmake in gen_il-gen.adb for documentation.\\n\\n\");\n+         Put (S, \"--  This package is automatically generated.\" & LF & LF);\n+         Put (S, \"--  See Put_Nmake in gen_il-gen.adb for documentation.\" & LF & LF);\n \n          Put_Make_Decls (S, Node_Kind);\n \n-         Outdent (S, 3);\n-         Put (S, \"end Nmake;\\n\");\n+         Decrease_Indent (S, 3);\n+         Put (S, \"end Nmake;\" & LF);\n \n-         Put (B, \"with Atree;  use Atree;\\n\");\n-         Put (B, \"with Sinfo.Nodes; use Sinfo.Nodes;\\n\");\n-         Put (B, \"with Sinfo.Utils; use Sinfo.Utils;\\n\");\n-         Put (B, \"with Snames; use Snames;\\n\");\n-         Put (B, \"with Stand;  use Stand;\\n\");\n+         Put (B, \"with Atree;  use Atree;\" & LF);\n+         Put (B, \"with Sinfo.Nodes; use Sinfo.Nodes;\" & LF);\n+         Put (B, \"with Sinfo.Utils; use Sinfo.Utils;\" & LF);\n+         Put (B, \"with Snames; use Snames;\" & LF);\n+         Put (B, \"with Stand;  use Stand;\" & LF);\n \n-         Put (B, \"\\npackage body Nmake is\\n\\n\");\n-         Indent (B, 3);\n+         Put (B, LF & \"package body Nmake is\" & LF & LF);\n+         Increase_Indent (B, 3);\n \n-         Put (B, \"--  This package is automatically generated.\\n\\n\");\n+         Put (B, \"--  This package is automatically generated.\" & LF & LF);\n \n          Put_Make_Bodies (B, Node_Kind);\n \n-         Outdent (B, 3);\n-         Put (B, \"end Nmake;\\n\");\n+         Decrease_Indent (B, 3);\n+         Put (B, \"end Nmake;\" & LF);\n       end Put_Nmake;\n \n       -----------------------\n       -- Put_Seinfo_Tables --\n       -----------------------\n \n       procedure Put_Seinfo_Tables is\n-         S : Sink'Class := Create_File (\"seinfo_tables.ads\");\n-         B : Sink'Class := Create_File (\"seinfo_tables.adb\");\n+         S : Sink;\n+         B : Sink;\n \n          Type_Layout : Concrete_Type_Layout_Array;\n \n@@ -2715,15 +2718,17 @@ package body Gen_IL.Gen is\n                   if First_Time then\n                      First_Time := False;\n                   else\n-                     Put (B, \",\\n\");\n+                     Put (B, \",\" & LF);\n                   end if;\n \n-                  Put (B, \"\\1\", Image (F));\n+                  Put (B, Image (F));\n                end if;\n             end loop;\n          end Put_Field_List;\n \n       begin -- Put_Seinfo_Tables\n+         Create_File (S, \"seinfo_tables.ads\");\n+         Create_File (B, \"seinfo_tables.adb\");\n \n          for T in Concrete_Type loop\n             Type_Layout (T) := new Field_Array'\n@@ -2753,50 +2758,50 @@ package body Gen_IL.Gen is\n             end loop;\n          end loop;\n \n-         Put (S, \"\\npackage Seinfo_Tables is\\n\\n\");\n-         Indent (S, 3);\n+         Put (S, LF & \"package Seinfo_Tables is\" & LF & LF);\n+         Increase_Indent (S, 3);\n \n-         Put (S, \"--  This package is automatically generated.\\n\\n\");\n+         Put (S, \"--  This package is automatically generated.\" & LF & LF);\n \n-         Put (S, \"--  This package is not used by the compiler.\\n\");\n-         Put (S, \"--  The body contains tables that are intended to be used by humans to\\n\");\n-         Put (S, \"--  help understand the layout of various data structures.\\n\\n\");\n+         Put (S, \"--  This package is not used by the compiler.\" & LF);\n+         Put (S, \"--  The body contains tables that are intended to be used by humans to\" & LF);\n+         Put (S, \"--  help understand the layout of various data structures.\" & LF & LF);\n \n-         Put (S, \"pragma Elaborate_Body;\\n\");\n+         Put (S, \"pragma Elaborate_Body;\" & LF);\n \n-         Outdent (S, 3);\n-         Put (S, \"\\nend Seinfo_Tables;\\n\");\n+         Decrease_Indent (S, 3);\n+         Put (S, LF & \"end Seinfo_Tables;\" & LF);\n \n-         Put (B, \"with Gen_IL.Types;  use Gen_IL.Types;\\n\");\n-         Put (B, \"with Gen_IL.Fields; use Gen_IL.Fields;\\n\");\n-         Put (B, \"with Gen_IL.Internals;  use Gen_IL.Internals;\\n\");\n+         Put (B, \"with Gen_IL.Types;  use Gen_IL.Types;\" & LF);\n+         Put (B, \"with Gen_IL.Fields; use Gen_IL.Fields;\" & LF);\n+         Put (B, \"with Gen_IL.Internals;  use Gen_IL.Internals;\" & LF);\n \n-         Put (B, \"\\npackage body Seinfo_Tables is\\n\\n\");\n-         Indent (B, 3);\n+         Put (B, LF & \"package body Seinfo_Tables is\" & LF & LF);\n+         Increase_Indent (B, 3);\n \n-         Put (B, \"--  This package is automatically generated.\\n\\n\");\n+         Put (B, \"--  This package is automatically generated.\" & LF & LF);\n \n-         Put (B, \"Num_Wasted_Bits : Bit_Offset'Base := \\1 with Unreferenced;\\n\",\n-              Image (Num_Wasted_Bits));\n+         Put (B, \"Num_Wasted_Bits : Bit_Offset'Base := \" & Image (Num_Wasted_Bits) &\n+              \" with Unreferenced;\" & LF);\n \n-         Put (B, \"\\nWasted_Bits : constant Opt_Field_Enum := No_Field;\\n\");\n+         Put (B, LF & \"Wasted_Bits : constant Opt_Field_Enum := No_Field;\" & LF);\n \n-         Put (B, \"\\n--  Table showing the layout of each Node_Or_Entity_Type. For each\\n\");\n-         Put (B, \"--  concrete type, we show the bits used by each field. Each field\\n\");\n-         Put (B, \"--  uses the same bit range in all types. This table is not used by\\n\");\n-         Put (B, \"--  the compiler; it is for information only.\\n\\n\");\n+         Put (B, LF & \"--  Table showing the layout of each Node_Or_Entity_Type. For each\" & LF);\n+         Put (B, \"--  concrete type, we show the bits used by each field. Each field\" & LF);\n+         Put (B, \"--  uses the same bit range in all types. This table is not used by\" & LF);\n+         Put (B, \"--  the compiler; it is for information only.\" & LF & LF);\n \n-         Put (B, \"--  Wasted_Bits are unused bits between fields, and padding at the end\\n\");\n-         Put (B, \"--  to round up to a multiple of the slot size.\\n\");\n+         Put (B, \"--  Wasted_Bits are unused bits between fields, and padding at the end\" & LF);\n+         Put (B, \"--  to round up to a multiple of the slot size.\" & LF);\n \n-         Put (B, \"\\n--  Type_Layout is \\1 bytes.\\n\", Image (Type_Layout_Size / 8));\n+         Put (B, LF & \"--  Type_Layout is \" & Image (Type_Layout_Size / 8) & \" bytes.\" & LF);\n \n-         Put (B, \"\\npragma Style_Checks (Off);\\n\");\n-         Put (B, \"Type_Layout : constant Concrete_Type_Layout_Array := \\n\");\n-         Indent (B, 2);\n-         Put (B, \"--  Concrete node types:\\n\");\n+         Put (B, LF & \"pragma Style_Checks (Off);\" & LF);\n+         Put (B, \"Type_Layout : constant Concrete_Type_Layout_Array := \" & LF);\n+         Increase_Indent (B, 2);\n+         Put (B, \"--  Concrete node types:\" & LF);\n          Put (B, \"(\");\n-         Indent (B, 1);\n+         Increase_Indent (B, 1);\n \n          declare\n             First_Time : Boolean := True;\n@@ -2805,18 +2810,18 @@ package body Gen_IL.Gen is\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (B, \",\\n\\n\");\n+                  Put (B, \",\" & LF & LF);\n                end if;\n \n                if T = Concrete_Entity'First then\n-                  Put (B, \"--  Concrete entity types:\\n\\n\");\n+                  Put (B, \"--  Concrete entity types:\" & LF & LF);\n                end if;\n \n-               Put (B, \"\\1 => new Field_Array'\\n\", Image (T));\n+               Put (B, Image (T) & \" => new Field_Array'\" & LF);\n \n-               Indent (B, 2);\n+               Increase_Indent (B, 2);\n                Put (B, \"(\");\n-               Indent (B, 1);\n+               Increase_Indent (B, 1);\n \n                declare\n                   First_Time : Boolean := True;\n@@ -2826,7 +2831,7 @@ package body Gen_IL.Gen is\n                      if First_Time then\n                         First_Time := False;\n                      else\n-                        Put (B, \",\\n\");\n+                        Put (B, \",\" & LF);\n                      end if;\n \n                      declare\n@@ -2842,16 +2847,14 @@ package body Gen_IL.Gen is\n                                               (First_Bit .. Last_Bit => F));\n \n                            if Last_Bit = First_Bit then\n-                              Put (B, \"\\1 => \\2\",\n-                                   First_Bit_Image (First_Bit),\n+                              Put (B, First_Bit_Image (First_Bit) & \" => \" &\n                                    Image_Or_Waste (F));\n                            else\n                               pragma Assert\n                                 (if F /= No_Field then\n                                   First_Bit mod Field_Size (F) = 0);\n-                              Put (B, \"\\1 .. \\2 => \\3\",\n-                                   First_Bit_Image (First_Bit),\n-                                   Last_Bit_Image (Last_Bit),\n+                              Put (B, First_Bit_Image (First_Bit) & \" .. \" &\n+                                   Last_Bit_Image (Last_Bit) & \" => \" &\n                                    Image_Or_Waste (F));\n                            end if;\n \n@@ -2861,25 +2864,25 @@ package body Gen_IL.Gen is\n                   end loop;\n                end;\n \n-               Outdent (B, 1);\n+               Decrease_Indent (B, 1);\n                Put (B, \")\");\n-               Outdent (B, 2);\n+               Decrease_Indent (B, 2);\n             end loop;\n          end;\n \n-         Outdent (B, 1);\n-         Put (B, \") -- Type_Layout\\n\");\n-         Indent (B, 6);\n-         Put (B, \"with Export, Convention => Ada;\\n\");\n-         Outdent (B, 6);\n-         Outdent (B, 2);\n+         Decrease_Indent (B, 1);\n+         Put (B, \") -- Type_Layout\" & LF);\n+         Increase_Indent (B, 6);\n+         Put (B, \"with Export, Convention => Ada;\" & LF);\n+         Decrease_Indent (B, 6);\n+         Decrease_Indent (B, 2);\n \n-         Put (B, \"\\n--  Table mapping bit offsets to the set of fields at that offset\\n\\n\");\n-         Put (B, \"Bit_Used : constant Offset_To_Fields_Mapping :=\\n\");\n+         Put (B, LF & \"--  Table mapping bit offsets to the set of fields at that offset\" & LF & LF);\n+         Put (B, \"Bit_Used : constant Offset_To_Fields_Mapping :=\" & LF);\n \n-         Indent (B, 2);\n+         Increase_Indent (B, 2);\n          Put (B, \"(\");\n-         Indent (B, 1);\n+         Increase_Indent (B, 1);\n \n          declare\n             First_Time : Boolean := True;\n@@ -2890,33 +2893,33 @@ package body Gen_IL.Gen is\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (B, \",\\n\\n\");\n+                  Put (B, \",\" & LF & LF);\n                end if;\n \n-               Put (B, \"\\1 => new Field_Array'\\n\", First_Bit_Image (Bit));\n+               Put (B, First_Bit_Image (Bit) & \" => new Field_Array'\" & LF);\n \n                --  Use [...] notation here, to get around annoying Ada\n                --  limitations on empty and singleton aggregates. This code is\n                --  not used in the compiler, so there are no bootstrap issues.\n \n-               Indent (B, 2);\n+               Increase_Indent (B, 2);\n                Put (B, \"[\");\n-               Indent (B, 1);\n+               Increase_Indent (B, 1);\n \n                Put_Field_List (Bit);\n \n-               Outdent (B, 1);\n+               Decrease_Indent (B, 1);\n                Put (B, \"]\");\n-               Outdent (B, 2);\n+               Decrease_Indent (B, 2);\n             end loop;\n          end;\n \n-         Outdent (B, 1);\n-         Put (B, \"); -- Bit_Used\\n\");\n-         Outdent (B, 2);\n+         Decrease_Indent (B, 1);\n+         Put (B, \"); -- Bit_Used\" & LF);\n+         Decrease_Indent (B, 2);\n \n-         Outdent (B, 3);\n-         Put (B, \"\\nend Seinfo_Tables;\\n\");\n+         Decrease_Indent (B, 3);\n+         Put (B, LF & \"end Seinfo_Tables;\" & LF);\n \n       end Put_Seinfo_Tables;\n \n@@ -2925,7 +2928,7 @@ package body Gen_IL.Gen is\n       -----------------------------\n \n       procedure Put_C_Type_And_Subtypes\n-        (S : in out Sink'Class; Root : Root_Type) is\n+        (S : in out Sink; Root : Root_Type) is\n \n          procedure Put_Enum_Lit (T : Node_Or_Entity_Type);\n          --  Print out the #define corresponding to the Ada enumeration literal\n@@ -2938,37 +2941,29 @@ package body Gen_IL.Gen is\n          procedure Put_Enum_Lit (T : Node_Or_Entity_Type) is\n          begin\n             if T in Concrete_Type then\n-               Put (S, \"#define \\1 \\2\\n\", Image (T), Image (Pos (T)));\n+               Put (S, \"#define \" & Image (T) & \" \" & Image (Pos (T)) & \"\" & LF);\n             end if;\n          end Put_Enum_Lit;\n \n          procedure Put_Kind_Subtype (T : Node_Or_Entity_Type) is\n          begin\n             if T in Abstract_Type and then Type_Table (T).Parent /= No_Type then\n-               Put (S, \"SUBTYPE (\\1, \\2,\\n\",\n-                    Image (T),\n-                    Image (Type_Table (T).Parent));\n-               Indent (S, 3);\n-               Put (S, \"\\1,\\n\\2)\\n\",\n-                    Image (Type_Table (T).First),\n-                    Image (Type_Table (T).Last));\n-               Outdent (S, 3);\n+               Put (S, \"SUBTYPE (\" & Image (T) & \", \" &\n+                    Image (Type_Table (T).Parent) & \",\" & LF);\n+               Increase_Indent (S, 3);\n+               Put (S, Image (Type_Table (T).First) & \",\" & LF);\n+               Put (S, Image (Type_Table (T).Last) & \")\" & LF);\n+               Decrease_Indent (S, 3);\n             end if;\n          end Put_Kind_Subtype;\n \n       begin\n-         Indent (S, 6);\n          Iterate_Types (Root, Pre => Put_Enum_Lit'Access);\n \n-         Put (S, \"\\n#define Number_\\1_Kinds \\2\\n\",\n-              Node_Or_Entity (Root),\n-              Image (Pos (Last_Concrete (Root)) + 1));\n+         Put (S, \"#define Number_\" & Node_Or_Entity (Root) & \"_Kinds \" &\n+              Image (Pos (Last_Concrete (Root)) + 1) & \"\" & LF & LF);\n \n-         Outdent (S, 6);\n-\n-         Indent (S, 3);\n          Iterate_Types (Root, Pre => Put_Kind_Subtype'Access);\n-         Outdent (S, 3);\n \n          Put_Union_Membership (S, Root);\n       end Put_C_Type_And_Subtypes;\n@@ -2978,17 +2973,15 @@ package body Gen_IL.Gen is\n       ----------------------------\n \n       procedure Put_Low_Level_C_Getter\n-        (S : in out Sink'Class; T : Type_Enum)\n+        (S : in out Sink; T : Type_Enum)\n       is\n          T_Image : constant String := Get_Set_Id_Image (T);\n \n       begin\n-         Put (S, \"static \\1 Get_\\2(Node_Id N, Field_Offset Offset);\\n\\n\",\n-              T_Image, Image (T));\n-         Put (S, \"INLINE \\1\\n\", T_Image);\n-         Put (S, \"Get_\\1(Node_Id N, Field_Offset Offset)\\n\", Image (T));\n+         Put (S, \"INLINE \" & T_Image & \"\" & LF);\n+         Put (S, \"Get_\" & Image (T) & \" (Node_Id N, Field_Offset Offset)\" & LF);\n \n-         Indent (S, 3);\n+         Increase_Indent (S, 3);\n \n          --  Same special case as in Put_Low_Level_Accessor_Instantiations\n \n@@ -3000,47 +2993,47 @@ package body Gen_IL.Gen is\n                  (if T = Elist_Id then \"No_Elist\" else \"Uint_0\");\n \n             begin\n-               Put (S, \"{ return (\\1) Get_32_Bit_Field_With_Default(N, Offset, \\2); }\\n\\n\",\n-                    T_Image, Default_Val);\n+               Put (S, \"{ return (\" & T_Image &\n+                    \") Get_32_Bit_Field_With_Default(N, Offset, \" &\n+                    Default_Val & \"); }\" & LF & LF);\n             end;\n \n          else\n-            Put (S, \"{ return (\\1) Get_\\2_Bit_Field(N, Offset); }\\n\\n\",\n-                 T_Image, Image (Field_Size (T)));\n+            Put (S, \"{ return (\" & T_Image & \") Get_\" &\n+                 Image (Field_Size (T)) & \"_Bit_Field(N, Offset); }\" & LF & LF);\n          end if;\n \n-         Outdent (S, 3);\n+         Decrease_Indent (S, 3);\n       end Put_Low_Level_C_Getter;\n \n       -----------------------------\n       -- Put_High_Level_C_Getter --\n       -----------------------------\n \n       procedure Put_High_Level_C_Getter\n-        (S : in out Sink'Class; F : Field_Enum)\n+        (S : in out Sink; F : Field_Enum)\n       is\n       begin\n-         Put (S, \"INLINE \\1 \\2\\n\",\n-              Get_Set_Id_Image (Field_Table (F).Field_Type), Image (F));\n-         Put (S, \"(Node_Id N)\\n\");\n-\n-         Indent (S, 3);\n-         Put (S, \"{ return \\1(\\2, \\3); }\\n\\n\",\n-              Low_Level_Getter_Name (Field_Table (F).Field_Type),\n-              Node_To_Fetch_From (F),\n-              Image (Field_Table (F).Offset));\n-         Outdent (S, 3);\n+         Put (S, \"INLINE \" & Get_Set_Id_Image (Field_Table (F).Field_Type) &\n+              \" \" & Image (F) & \" (Node_Id N)\" & LF);\n+\n+         Increase_Indent (S, 3);\n+         Put (S, \"{ return \" &\n+              Low_Level_Getter_Name (Field_Table (F).Field_Type) &\n+              \"(\" & Node_To_Fetch_From (F) & \", \" &\n+              Image (Field_Table (F).Offset) & \"); }\" & LF & LF);\n+         Decrease_Indent (S, 3);\n       end Put_High_Level_C_Getter;\n \n       ------------------------------\n       -- Put_High_Level_C_Getters --\n       ------------------------------\n \n       procedure Put_High_Level_C_Getters\n-        (S : in out Sink'Class; Root : Root_Type)\n+        (S : in out Sink; Root : Root_Type)\n       is\n       begin\n-         Put (S, \"// Getters for fields\\n\\n\");\n+         Put (S, \"// Getters for fields\" & LF & LF);\n \n          for F in First_Field (Root) .. Last_Field (Root) loop\n             Put_High_Level_C_Getter (S, F);\n@@ -3052,7 +3045,7 @@ package body Gen_IL.Gen is\n       --------------------------\n \n       procedure Put_Union_Membership\n-        (S : in out Sink'Class; Root : Root_Type) is\n+        (S : in out Sink; Root : Root_Type) is\n \n          procedure Put_Ors (T : Abstract_Type);\n          --  Print the \"or\" (i.e. \"||\") of tests whether kind is in each child\n@@ -3065,47 +3058,45 @@ package body Gen_IL.Gen is\n                if First_Time then\n                   First_Time := False;\n                else\n-                  Put (S, \" ||\\n\");\n+                  Put (S, \" ||\" & LF);\n                end if;\n \n                --  Unions, other abstract types, and concrete types each have\n                --  their own way of testing membership in the C++ code.\n \n                if Child in Abstract_Type then\n                   if Type_Table (Child).Is_Union then\n-                     Put (S, \"Is_In_\\1 (kind)\", Image (Child));\n+                     Put (S, \"Is_In_\" & Image (Child) & \" (kind)\");\n \n                   else\n-                     Put (S, \"IN (kind, \\1)\", Image (Child));\n+                     Put (S, \"IN (kind, \" & Image (Child) & \")\");\n                   end if;\n \n                else\n-                  Put (S, \"kind == \\1\", Image (Child));\n+                  Put (S, \"kind == \" & Image (Child));\n                end if;\n             end loop;\n          end Put_Ors;\n \n       begin\n-         Put (S, \"\\n// Membership tests for union types\\n\\n\");\n+         Put (S, LF & \"// Membership tests for union types\" & LF & LF);\n \n          for T in First_Abstract (Root) .. Last_Abstract (Root) loop\n             if Type_Table (T) /= null and then Type_Table (T).Is_Union then\n-               Put (S, \"static Boolean Is_In_\\1(\\2_Kind kind);\\n\",\n-                    Image (T), Node_Or_Entity (Root));\n-               Put (S, \"INLINE Boolean\\n\");\n-               Put (S, \"Is_In_\\1(\\2_Kind kind)\\n\",\n-                    Image (T), Node_Or_Entity (Root));\n-\n-               Put (S, \"{\\n\");\n-               Indent (S, 3);\n-               Put (S, \"return\\n\");\n-               Indent (S, 3);\n+               Put (S, \"INLINE Boolean\" & LF);\n+               Put (S, \"Is_In_\" & Image (T) & \" (\" &\n+                    Node_Or_Entity (Root) & \"_Kind kind)\" & LF);\n+\n+               Put (S, \"{\" & LF);\n+               Increase_Indent (S, 3);\n+               Put (S, \"return\" & LF);\n+               Increase_Indent (S, 3);\n                Put_Ors (T);\n-               Outdent (S, 3);\n-               Outdent (S, 3);\n-               Put (S, \";\\n}\\n\");\n+               Decrease_Indent (S, 3);\n+               Decrease_Indent (S, 3);\n+               Put (S, \";\" & LF & \"}\" & LF);\n \n-               Put (S, \"\\n\");\n+               Put (S, \"\" & LF);\n             end if;\n          end loop;\n       end Put_Union_Membership;\n@@ -3115,40 +3106,40 @@ package body Gen_IL.Gen is\n       ---------------------\n \n       procedure Put_Sinfo_Dot_H is\n-         S : Sink'Class := Create_File (\"sinfo.h\");\n+         S : Sink;\n \n       begin\n-         Put (S, \"#ifdef __cplusplus\\n\");\n-         Put (S, \"extern \"\"C\"\" {\\n\");\n-         Put (S, \"#endif\\n\\n\");\n+         Create_File (S, \"sinfo.h\");\n+         Put (S, \"#ifdef __cplusplus\" & LF);\n+         Put (S, \"extern \"\"C\"\" {\" & LF);\n+         Put (S, \"#endif\" & LF & LF);\n \n-         Put (S, \"typedef Boolean Flag;\\n\\n\");\n+         Put (S, \"typedef Boolean Flag;\" & LF & LF);\n \n          Put_C_Type_And_Subtypes (S, Node_Kind);\n \n-         Put (S, \"\\n// Getters corresponding to instantiations of Atree.Get_n_Bit_Field\\n\");\n-         Put (S, \"// generic functions.\\n\\n\");\n+         Put (S, \"// Getters corresponding to instantiations of Atree.Get_n_Bit_Field\"\n+                 & LF & LF);\n \n          for T in Special_Type loop\n             Put_Low_Level_C_Getter (S, T);\n          end loop;\n \n          Put_High_Level_C_Getters (S, Node_Kind);\n \n-         Put (S, \"#ifdef __cplusplus\\n\");\n-         Put (S, \"}\\n\");\n-         Put (S, \"#endif\\n\");\n+         Put (S, \"#ifdef __cplusplus\" & LF);\n+         Put (S, \"}\" & LF);\n+         Put (S, \"#endif\" & LF);\n       end Put_Sinfo_Dot_H;\n \n       ---------------------\n       -- Put_Einfo_Dot_H --\n       ---------------------\n \n       procedure Put_Einfo_Dot_H is\n-         S : Sink'Class := Create_File (\"einfo.h\");\n+         S : Sink;\n \n          procedure Put_Membership_Query_Spec (T : Node_Or_Entity_Type);\n-         procedure Put_Membership_Query_Decl (T : Node_Or_Entity_Type);\n          procedure Put_Membership_Query_Defn (T : Node_Or_Entity_Type);\n          --  Print out the Is_... function for T that calls the IN macro on the\n          --  SUBTYPE.\n@@ -3165,59 +3156,43 @@ package body Gen_IL.Gen is\n          begin\n             pragma Assert (not Type_Table (T).Is_Union);\n \n-            Put (S, \"INLINE B Is_\\1\\2 \", Im2, Typ);\n-            Tab_To_Column (S, 49);\n-            Put (S, \"(E Id)\");\n+            Put (S, \"INLINE B Is_\" & Im2 & Typ & \" (E Id)\");\n          end Put_Membership_Query_Spec;\n \n-         procedure Put_Membership_Query_Decl (T : Node_Or_Entity_Type) is\n-         begin\n-            if T in Abstract_Type and T not in Root_Type then\n-               Put_Membership_Query_Spec (T);\n-               Put (S, \";\\n\");\n-            end if;\n-         end Put_Membership_Query_Decl;\n-\n          procedure Put_Membership_Query_Defn (T : Node_Or_Entity_Type) is\n          begin\n             if T in Abstract_Type and T not in Root_Type then\n                Put_Membership_Query_Spec (T);\n-               Put (S, \"\\n\");\n-               Indent (S, 3);\n-               Put (S, \"{ return IN (Ekind (Id), \\1); }\\n\", Image (T));\n-               Outdent (S, 3);\n+               Put (S, \"\" & LF);\n+               Increase_Indent (S, 3);\n+               Put (S, \"{ return IN (Ekind (Id), \" & Image (T) & \"); }\" & LF);\n+               Decrease_Indent (S, 3);\n             end if;\n          end Put_Membership_Query_Defn;\n \n       begin\n-         Put (S, \"#ifdef __cplusplus\\n\");\n-         Put (S, \"extern \"\"C\"\" {\\n\");\n-         Put (S, \"#endif\\n\\n\");\n+         Create_File (S, \"einfo.h\");\n+         Put (S, \"#ifdef __cplusplus\" & LF);\n+         Put (S, \"extern \"\"C\"\" {\" & LF);\n+         Put (S, \"#endif\" & LF & LF);\n \n-         Put (S, \"typedef Boolean Flag;\\n\\n\");\n+         Put (S, \"typedef Boolean Flag;\" & LF & LF);\n \n          Put_C_Type_And_Subtypes (S, Entity_Kind);\n \n-         Put (S, \"\\n// Getters corresponding to instantiations of Atree.Get_n_Bit_Field\\n\");\n-         Put (S, \"// generic functions.\\n\\n\");\n-\n          --  Note that we do not call Put_Low_Level_C_Getter here. Those are in\n          --  sinfo.h, so every file that #includes einfo.h must #include\n          --  sinfo.h first.\n \n          Put_High_Level_C_Getters (S, Entity_Kind);\n \n-         Put (S, \"\\n// Abstract type queries\\n\\n\");\n+         Put (S, \"// Abstract type queries\" & LF & LF);\n \n-         Indent (S, 3);\n-         Iterate_Types (Entity_Kind, Pre => Put_Membership_Query_Decl'Access);\n-         Put (S, \"\\n\");\n          Iterate_Types (Entity_Kind, Pre => Put_Membership_Query_Defn'Access);\n-         Outdent (S, 3);\n \n-         Put (S, \"#ifdef __cplusplus\\n\");\n-         Put (S, \"}\\n\");\n-         Put (S, \"#endif\\n\");\n+         Put (S, LF & \"#ifdef __cplusplus\" & LF);\n+         Put (S, \"}\" & LF);\n+         Put (S, \"#endif\" & LF);\n       end Put_Einfo_Dot_H;\n \n    begin -- Compile"}, {"sha": "59a142d47a6925cf5adcab995b92bb259b901b2f", "filename": "gcc/ada/gen_il-internals.adb", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il-internals.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il-internals.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-internals.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -207,44 +207,44 @@ package body Gen_IL.Internals is\n    -- Put_Types_With_Bars --\n    -------------------------\n \n-   procedure Put_Types_With_Bars (S : in out Sink'Class; U : Type_Vector) is\n+   procedure Put_Types_With_Bars (S : in out Sink; U : Type_Vector) is\n       First_Time : Boolean := True;\n    begin\n-      Indent (S, 3);\n+      Increase_Indent (S, 3);\n \n       for T of U loop\n          if First_Time then\n             First_Time := False;\n          else\n-            Put (S, \"\\n| \");\n+            Put (S, LF & \"| \");\n          end if;\n \n-         Put (S, \"\\1\", Image (T));\n+         Put (S, Image (T));\n       end loop;\n \n-      Outdent (S, 3);\n+      Decrease_Indent (S, 3);\n    end Put_Types_With_Bars;\n \n    ----------------------------\n    -- Put_Type_Ids_With_Bars --\n    ----------------------------\n \n-   procedure Put_Type_Ids_With_Bars (S : in out Sink'Class; U : Type_Vector) is\n+   procedure Put_Type_Ids_With_Bars (S : in out Sink; U : Type_Vector) is\n       First_Time : Boolean := True;\n    begin\n-      Indent (S, 3);\n+      Increase_Indent (S, 3);\n \n       for T of U loop\n          if First_Time then\n             First_Time := False;\n          else\n-            Put (S, \"\\n| \");\n+            Put (S, LF & \"| \");\n          end if;\n \n-         Put (S, \"\\1\", Id_Image (T));\n+         Put (S, Id_Image (T));\n       end loop;\n \n-      Outdent (S, 3);\n+      Decrease_Indent (S, 3);\n    end Put_Type_Ids_With_Bars;\n \n    -----------\n@@ -431,7 +431,7 @@ package body Gen_IL.Internals is\n    -- Put_Type_Hierarchy --\n    ------------------------\n \n-   procedure Put_Type_Hierarchy (S : in out Sink'Class; Root : Root_Type) is\n+   procedure Put_Type_Hierarchy (S : in out Sink; Root : Root_Type) is\n       Level : Natural := 0;\n \n       function Indentation return String is ((1 .. 3 * Level => ' '));\n@@ -444,7 +444,7 @@ package body Gen_IL.Internals is\n \n       procedure Pre (T : Node_Or_Entity_Type) is\n       begin\n-         Put (S, \"--  \\1\\2\\n\", Indentation, Image (T));\n+         Put (S, \"--  \" & Indentation & Image (T) & LF);\n          Level := Level + 1;\n       end Pre;\n \n@@ -456,7 +456,7 @@ package body Gen_IL.Internals is\n          --  an arbitrary definition of \"many\".\n \n          if Num_Concrete_Descendants (T) > 10 then\n-            Put (S, \"--  \\1end \\2\\n\", Indentation, Image (T));\n+            Put (S, \"--  \" & Indentation & \"end \" & Image (T) & LF);\n          end if;\n       end Post;\n \n@@ -468,13 +468,13 @@ package body Gen_IL.Internals is\n    --  Start of processing for Put_Type_Hierarchy\n \n    begin\n-      Put (S, \"--  Type hierarchy for \\1\\n\", N_Or_E);\n-      Put (S, \"--\\n\");\n+      Put (S, \"--  Type hierarchy for \" & N_Or_E & LF);\n+      Put (S, \"--\" & LF);\n \n       Iterate_Types (Root, Pre'Access, Post'Access);\n \n-      Put (S, \"--\\n\");\n-      Put (S, \"--  End type hierarchy for \\1\\n\\n\", N_Or_E);\n+      Put (S, \"--\" & LF);\n+      Put (S, \"--  End type hierarchy for \" & N_Or_E & LF & LF);\n    end Put_Type_Hierarchy;\n \n    ---------\n@@ -489,27 +489,4 @@ package body Gen_IL.Internals is\n       return Type_Enum'Pos (T) - Type_Enum'Pos (First);\n    end Pos;\n \n-   Stdout : Sink'Class renames Files.Standard_Output.all;\n-\n-   --  The following procedures are for use in gdb. They use the 'Put_Image\n-   --  attribute. That is commented out, because we don't want this new feature\n-   --  used in the compiler. If you need this for debugging, just uncomment\n-   --  those lines back in, and rebuild.\n-\n-   pragma Warnings (Off);\n-   procedure Ptypes (V : Type_Vector) is\n-   begin\n---      Type_Vector'Put_Image (Stdout, V);\n-      New_Line (Stdout);\n-      Flush (Stdout);\n-   end Ptypes;\n-\n-   procedure Pfields (V : Field_Vector) is\n-   begin\n---      Field_Vector'Put_Image (Stdout, V);\n-      New_Line (Stdout);\n-      Flush (Stdout);\n-   end Pfields;\n-   pragma Warnings (On);\n-\n end Gen_IL.Internals;"}, {"sha": "8d13e806bda7f63a003199dbcffd49db63a3d6dd", "filename": "gcc/ada/gen_il-internals.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il-internals.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il-internals.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-internals.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -47,14 +47,12 @@ package Gen_IL.Internals is\n    use Type_Vectors;\n    subtype Type_Vector is Type_Vectors.Vector;\n \n-   procedure Ptypes (V : Type_Vector); -- for debugging\n-\n    type Type_Array is array (Type_Index range <>) of Type_Enum;\n \n    ----------------\n \n-   procedure Put_Types_With_Bars (S : in out Sink'Class; U : Type_Vector);\n-   procedure Put_Type_Ids_With_Bars (S : in out Sink'Class; U : Type_Vector);\n+   procedure Put_Types_With_Bars (S : in out Sink; U : Type_Vector);\n+   procedure Put_Type_Ids_With_Bars (S : in out Sink; U : Type_Vector);\n    --  Put the types with vertical bars in between, as in\n    --     N_This | N_That | N_Other\n    --  or\n@@ -76,7 +74,6 @@ package Gen_IL.Internals is\n    type Field_Index is new Positive;\n    package Field_Vectors is new Vectors (Field_Index, Field_Enum);\n    subtype Field_Vector is Field_Vectors.Vector;\n-   procedure Pfields (V : Field_Vector); -- for debugging\n \n    type Bit_Offset is new Root_Nat range 0 .. 32_000 - 1;\n    --  Offset in bits. The number 32_000 is chosen because there are fewer than\n@@ -213,7 +210,7 @@ package Gen_IL.Internals is\n    --  True if Ancestor is an ancestor of Descendant. True for\n    --  a type itself.\n \n-   procedure Put_Type_Hierarchy (S : in out Sink'Class; Root : Root_Type);\n+   procedure Put_Type_Hierarchy (S : in out Sink; Root : Root_Type);\n \n    function Pos (T : Concrete_Type) return Root_Nat;\n    --  Return Node_Kind'Pos (T) or Entity_Kind'Pos (T)"}, {"sha": "23619b63ebbd89d4a82343500667e17d9c75dc01", "filename": "gcc/ada/gen_il.adb", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -23,8 +23,13 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;\n+\n package body Gen_IL is\n \n+   procedure Put (F : File_Type; S : String);\n+   --  The output primitive\n+\n    -----------\n    -- Image --\n    -----------\n@@ -72,4 +77,72 @@ package body Gen_IL is\n       end return;\n    end Capitalize;\n \n+   -----------------\n+   -- Create_File --\n+   -----------------\n+\n+   procedure Create_File (Buffer : in out Sink; Name : String) is\n+   begin\n+      Create (Buffer.File, Out_File, Name);\n+      Buffer.Indent := 0;\n+      Buffer.New_Line := True;\n+   end Create_File;\n+\n+   ---------------------\n+   -- Increase_Indent --\n+   ---------------------\n+\n+   procedure Increase_Indent (Buffer : in out Sink; Amount : Natural) is\n+   begin\n+      Buffer.Indent := Buffer.Indent + Amount;\n+   end Increase_Indent;\n+\n+   ---------------------\n+   -- Decrease_Indent --\n+   ---------------------\n+\n+   procedure Decrease_Indent (Buffer : in out Sink; Amount : Natural) is\n+   begin\n+      Buffer.Indent := Buffer.Indent - Amount;\n+   end Decrease_Indent;\n+\n+   ---------\n+   -- Put --\n+   ---------\n+\n+   procedure Put (F : File_Type; S : String) is\n+   begin\n+      String'Write (Stream (F), S);\n+   end Put;\n+\n+   procedure Put (Buffer : in out Sink; Item : String) is\n+   begin\n+      --  If the first character is LF, indent after it only\n+\n+      if Item (Item'First) = ASCII.LF then\n+         Put (Buffer.File, LF);\n+         Buffer.New_Line := True;\n+\n+         if Item'Length > 1 then\n+            Put (Buffer, Item (Item'First + 1 .. Item'Last));\n+         end if;\n+\n+         return;\n+      end if;\n+\n+      --  If this is a new line, indent\n+\n+      if Buffer.New_Line and then Buffer.Indent > 0 then\n+         declare\n+            S : constant String (1 .. Buffer.Indent) := (others => ' ');\n+         begin\n+            Put (Buffer.File, S);\n+         end;\n+      end if;\n+\n+      Put (Buffer.File, Item);\n+\n+      Buffer.New_Line := Item (Item'Last) = ASCII.LF;\n+   end Put;\n+\n end Gen_IL;"}, {"sha": "5f307fe7c5019d58bc410b2049603857f1e2d80b", "filename": "gcc/ada/gen_il.ads", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fgen_il.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -24,11 +24,8 @@\n ------------------------------------------------------------------------------\n \n pragma Warnings (Off); -- with clauses for children\n-with Ada.Strings.Text_Output.Formatting;\n-use Ada.Strings.Text_Output, Ada.Strings.Text_Output.Formatting;\n-with Ada.Strings.Text_Output.Files; use Ada.Strings.Text_Output.Files;\n-with Ada.Strings.Text_Output.Utils; use Ada.Strings.Text_Output.Utils;\n-with Ada.Characters.Handling;       use Ada.Characters.Handling;\n+with Ada.Characters.Handling; use Ada.Characters.Handling;\n+with Ada.Streams.Stream_IO;\n pragma Warnings (On);\n \n package Gen_IL is -- generate intermediate language\n@@ -76,4 +73,24 @@ package Gen_IL is -- generate intermediate language\n    procedure Capitalize (S : in out String);\n    --  Turns an identifier into Mixed_Case\n \n+   --  The following declares a minimal implementation of formatted output\n+   --  that is piggybacked on Ada.Streams.Stream_IO for bootstrap reasons.\n+   --  It uses LF as universal line terminator to make it host independent.\n+\n+   type Sink is record\n+      File     : Ada.Streams.Stream_IO.File_Type;\n+      Indent   : Natural;\n+      New_Line : Boolean;\n+   end record;\n+\n+   procedure Create_File (Buffer : in out Sink; Name : String);\n+\n+   procedure Increase_Indent (Buffer : in out Sink; Amount : Natural);\n+\n+   procedure Decrease_Indent (Buffer : in out Sink; Amount : Natural);\n+\n+   procedure Put (Buffer : in out Sink; Item : String);\n+\n+   LF : constant String := \"\" & ASCII.LF;\n+\n end Gen_IL;"}, {"sha": "7e4a4d9cd7680d96900f8ee02e1d9cc6dffc6e16", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -632,16 +632,26 @@ package body Impunit is\n     (\"s-aotase\", T),  -- System.Atomic_Operations.Test_And_Set\n     (\"s-atoope\", T),  -- System.Atomic_Operations\n     (\"s-atopex\", T),  -- System.Atomic_Operations.Exchange\n+    (\"a-sttebu\", T),  -- Ada.Strings.Text_Buffers\n+    (\"a-stbuun\", T),  -- Ada.Strings.Text_Buffers.Unbounded\n+    (\"a-stbubo\", T),  -- Ada.Strings.Text_Buffers.Bounded\n     (\"a-stteou\", T),  -- Ada.Strings.Text_Output\n     (\"a-stouut\", T),  -- Ada.Strings.Text_Output.Utils\n-    (\"a-stoubu\", T),  -- Ada.Strings.Text_Output.Buffers\n     (\"a-stoufi\", T),  -- Ada.Strings.Text_Output.Files\n     (\"a-stobfi\", T),  -- Ada.Strings.Text_Output.Basic_Files\n     (\"a-stobbu\", T),  -- Ada.Strings.Text_Output.Bit_Buckets\n     (\"a-stoufo\", T),  -- Ada.Strings.Text_Output.Formatting\n     (\"a-strsto\", T),  -- Ada.Streams.Storage\n     (\"a-ststbo\", T),  -- Ada.Streams.Storage.Bounded\n-    (\"a-ststun\", T)   -- Ada.Streams.Storage.Unbounded\n+    (\"a-ststun\", T),  -- Ada.Streams.Storage.Unbounded\n+\n+   ----------------------------------------\n+   -- GNAT Defined Additions to Ada 2022 --\n+   ----------------------------------------\n+\n+   (\"a-stbufi\", T),   -- Ada.Strings.Text_Buffers.Files\n+   (\"a-stbufo\", T),   -- Ada.Strings.Text_Buffers.Formatting\n+   (\"a-stbuut\", T)    -- Ada.Strings.Text_Buffers.Utils\n    );\n \n    -----------------------"}, {"sha": "687ac0e7815418b7ef9029da8d66a345a9f22336", "filename": "gcc/ada/libgnarl/s-putaim.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnarl%2Fs-putaim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnarl%2Fs-putaim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-putaim.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -29,13 +29,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Unchecked_Conversion;\n-with Ada.Strings.Text_Output.Utils;\n-use Ada.Strings.Text_Output;\n-use Ada.Strings.Text_Output.Utils;\n-\n package body System.Put_Task_Images is\n \n+   use Ada.Strings.Text_Buffers;\n+\n    procedure Put_Image_Protected (S : in out Sink'Class) is\n    begin\n       Put_UTF_8 (S, \"(protected object)\");"}, {"sha": "ff0c34468dfc4cb185a856434b3c81f3d9f69b24", "filename": "gcc/ada/libgnarl/s-putaim.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnarl%2Fs-putaim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnarl%2Fs-putaim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-putaim.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Strings.Text_Output;\n+with Ada.Strings.Text_Buffers;\n with Ada.Task_Identification;\n \n package System.Put_Task_Images is\n@@ -39,7 +39,7 @@ package System.Put_Task_Images is\n    --  separate from System.Put_Images to avoid dragging the tasking runtimes\n    --  into nontasking programs.\n \n-   subtype Sink is Ada.Strings.Text_Output.Sink;\n+   subtype Sink is Ada.Strings.Text_Buffers.Root_Buffer_Type;\n \n    procedure Put_Image_Protected (S : in out Sink'Class);\n    procedure Put_Image_Task"}, {"sha": "bb92bda9ebbf3e008f28ef6d8ccf1ebab65e28d2", "filename": "gcc/ada/libgnat/a-cbdlli.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1504,7 +1504,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : List)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "ab55086e6875717da659fa31075c78036e198661", "filename": "gcc/ada/libgnat/a-cbdlli.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -285,7 +285,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : List);\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "78a590f7586aa79f9b04e2db24fe5a3afd962855", "filename": "gcc/ada/libgnat/a-cbhama.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -902,7 +902,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "8be64c82fa4c531c96e789214c5792ef1d4e4818", "filename": "gcc/ada/libgnat/a-cbhama.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n private with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Key_Type is private;\n@@ -349,7 +349,7 @@ private\n       with null record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map);\n \n    use HT_Types, HT_Types.Implementation;\n    use Ada.Streams;"}, {"sha": "f8ca4d2720bc1bc35aa01098e17b836ff1a00a92", "filename": "gcc/ada/libgnat/a-cbhase.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1125,7 +1125,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "92926c13014b1026309c50e581f9158cca21a382", "filename": "gcc/ada/libgnat/a-cbhase.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -37,7 +37,7 @@ private with Ada.Containers.Hash_Tables;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -507,7 +507,7 @@ private\n       with null record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    use HT_Types, HT_Types.Implementation;\n    use Ada.Streams;"}, {"sha": "714dea1a3ee9c7a41574c17d0feedfb63a51c88c", "filename": "gcc/ada/libgnat/a-cbmutr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -2328,7 +2328,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Tree)\n    is\n       use System.Put_Images;\n "}, {"sha": "c7e221af2628c3ef1c07d98c696a9907a65c3595", "filename": "gcc/ada/libgnat/a-cbmutr.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -35,7 +35,7 @@ with Ada.Iterator_Interfaces;\n \n with Ada.Containers.Helpers;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -311,7 +311,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Tree);\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;"}, {"sha": "67e610847b2c10c514d901f3d4198a5104a60d64", "filename": "gcc/ada/libgnat/a-cborma.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborma.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1306,7 +1306,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "f87522a3c67084d29b520dceac802ee5cfcf391a", "filename": "gcc/ada/libgnat/a-cborma.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborma.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Streams;\n private with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Key_Type is private;\n@@ -257,7 +257,7 @@ private\n       with null record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map);\n \n    use Red_Black_Trees;\n    use Tree_Types, Tree_Types.Implementation;"}, {"sha": "0b9e0cc6b9a80bcc836a4158f4f9059503369a79", "filename": "gcc/ada/libgnat/a-cborse.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1645,7 +1645,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "06bd20f7b9dfcd7bda07582f08280b919f707134", "filename": "gcc/ada/libgnat/a-cborse.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -37,7 +37,7 @@ with Ada.Containers.Helpers;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Streams;\n private with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -345,7 +345,7 @@ private\n       with null record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    use Tree_Types, Tree_Types.Implementation;\n    use Ada.Finalization;"}, {"sha": "73c1e6d78277b91c0b57af36d103f407e0c4aa45", "filename": "gcc/ada/libgnat/a-cdlili.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1269,7 +1269,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : List)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "66368b544c98abf02305ecb1d41c853c3d6b0cc2", "filename": "gcc/ada/libgnat/a-cdlili.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -288,7 +288,7 @@ private\n      end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : List);\n \n    overriding procedure Adjust (Container : in out List);\n "}, {"sha": "3fc57da552e6269673f1d140dbba98add349e32e", "filename": "gcc/ada/libgnat/a-cidlli.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1311,7 +1311,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : List)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "c8794a3d8c50feb55e8cda1687059acfd4566ceb", "filename": "gcc/ada/libgnat/a-cidlli.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type (<>) is private;\n@@ -282,7 +282,7 @@ private\n      end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : List);\n \n    overriding procedure Adjust (Container : in out List);\n "}, {"sha": "2fbf65e4e29d7a904ca4d9ddec07386afb5ae601", "filename": "gcc/ada/libgnat/a-cihama.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihama.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -973,7 +973,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "056f338b8a83f6cc929354c417fe4e1115d6eb3e", "filename": "gcc/ada/libgnat/a-cihama.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihama.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Key_Type (<>) is private;\n@@ -336,7 +336,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map);\n \n    overriding procedure Adjust   (Container : in out Map);\n "}, {"sha": "9fd4d985c7922b4324528a608fea202a5c2c1349", "filename": "gcc/ada/libgnat/a-cihase.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihase.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1281,7 +1281,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "a73e8982590a499f322ecceeca78ac1495b27b85", "filename": "gcc/ada/libgnat/a-cihase.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihase.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -37,7 +37,7 @@ private with Ada.Containers.Hash_Tables;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type (<>) is private;\n@@ -500,7 +500,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "aa7efac0d4f1743931624f5314931d7d094edc35", "filename": "gcc/ada/libgnat/a-cimutr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cimutr.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1881,7 +1881,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Tree)\n    is\n       use System.Put_Images;\n "}, {"sha": "014d1fe5b07f087f86a58ade89fe95274125f02b", "filename": "gcc/ada/libgnat/a-cimutr.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type (<>) is private;\n@@ -352,7 +352,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Tree);\n \n    overriding procedure Adjust (Container : in out Tree);\n "}, {"sha": "a5691563802d5de8eff7d55e2b2d4ad547a1fe5f", "filename": "gcc/ada/libgnat/a-ciorma.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1297,7 +1297,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "157714def83103e3bbc0d1449157d008e89f8e00", "filename": "gcc/ada/libgnat/a-ciorma.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Key_Type (<>) is private;\n@@ -265,7 +265,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map);\n \n    overriding procedure Adjust (Container : in out Map);\n "}, {"sha": "f1b9021809e90f53ef6157a83b0a08e50789540b", "filename": "gcc/ada/libgnat/a-ciormu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1663,7 +1663,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "cf8ea0df49b2b4c35cda68b2111d6f295ae2a4d9", "filename": "gcc/ada/libgnat/a-ciormu.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciormu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciormu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciormu.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -35,7 +35,7 @@\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n with Ada.Iterator_Interfaces;\n \n generic\n@@ -472,7 +472,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "7e63f15c3ff65bf92cb2299bbbb84c4ac8fd22a3", "filename": "gcc/ada/libgnat/a-ciorse.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1728,7 +1728,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "1a9d82caa3f7d4aba25e0380d98792f97019131c", "filename": "gcc/ada/libgnat/a-ciorse.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -37,7 +37,7 @@ with Ada.Containers.Helpers;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type (<>) is private;\n@@ -364,7 +364,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "32346d045664b06751bdf5b0c1df49a6ec60d6bd", "filename": "gcc/ada/libgnat/a-coboho.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coboho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coboho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coboho.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -70,7 +70,7 @@ package body Ada.Containers.Bounded_Holders is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Holder)\n    is\n       use System.Put_Images;\n    begin"}, {"sha": "9dd73baed92b2341ad9e1d739fc4182b2935c6c7", "filename": "gcc/ada/libgnat/a-coboho.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coboho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coboho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coboho.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -30,7 +30,7 @@\n ------------------------------------------------------------------------------\n \n private with System;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type (<>) is private;\n@@ -100,7 +100,7 @@ private\n    --  (default) alignment instead.\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Holder);\n \n    type Element_Access is access all Element_Type;\n    pragma Assert (Element_Access'Size = Standard'Address_Size,"}, {"sha": "f32afa1a54bf5b3bb1a3dc2f724a4cfbf89000ae", "filename": "gcc/ada/libgnat/a-cobove.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -2140,7 +2140,7 @@ package body Ada.Containers.Bounded_Vectors is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Vector)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "67c441920a33f2ccdd744d4bd45a3a8ad995abd7", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Index_Type is range <>;\n@@ -433,7 +433,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Vector);\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;"}, {"sha": "26bdd5522657f56258b45c243f3b24b413749946", "filename": "gcc/ada/libgnat/a-cohama.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -892,7 +892,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "a04cb3a34c6ad04c1104d601fc99627b0a5fb616", "filename": "gcc/ada/libgnat/a-cohama.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n --  The language-defined generic package Containers.Hashed_Maps provides\n --  private types Map and Cursor, and a set of operations for each type. A map\n@@ -431,7 +431,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map);\n \n    overriding procedure Adjust (Container : in out Map);\n "}, {"sha": "31374f6b9d6eb4322ee21a2aa8d9f44b590ed2fb", "filename": "gcc/ada/libgnat/a-cohase.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1170,7 +1170,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "f0763afbcfc72489379794eacc852a761f6e3e68", "filename": "gcc/ada/libgnat/a-cohase.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -37,7 +37,7 @@ private with Ada.Containers.Hash_Tables;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -510,7 +510,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "ca6882a52045b1f1260281083090fcdd142273a0", "filename": "gcc/ada/libgnat/a-coinho.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -235,7 +235,7 @@ package body Ada.Containers.Indefinite_Holders is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Holder)\n    is\n       use System.Put_Images;\n    begin"}, {"sha": "b64883681486489b54876cecffb3b38da267396f", "filename": "gcc/ada/libgnat/a-coinho.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -31,7 +31,7 @@\n \n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type (<>) is private;\n@@ -119,7 +119,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Holder);\n \n    for Holder'Read use Read;\n    for Holder'Write use Write;"}, {"sha": "0340af0488af06b87ddb7eb05972550e48ed79a2", "filename": "gcc/ada/libgnat/a-coinho__shared.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -325,7 +325,7 @@ package body Ada.Containers.Indefinite_Holders is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Holder)\n    is\n       use System.Put_Images;\n    begin"}, {"sha": "97f796dcfd5c435951b40d167c5da151561534d4", "filename": "gcc/ada/libgnat/a-coinho__shared.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ private with Ada.Finalization;\n private with Ada.Streams;\n \n private with System.Atomic_Counters;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type (<>) is private;\n@@ -134,7 +134,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Holder);\n \n    for Holder'Read use Read;\n    for Holder'Write use Write;"}, {"sha": "9df6e3d48815d121197585dd08d3756c21dfb76f", "filename": "gcc/ada/libgnat/a-coinve.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -2670,7 +2670,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Vector)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "828ed29268973f3d82812c52e761f27f805ed784", "filename": "gcc/ada/libgnat/a-coinve.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Index_Type is range <>;\n@@ -428,7 +428,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Vector);\n \n    overriding procedure Adjust (Container : in out Vector);\n    overriding procedure Finalize (Container : in out Vector);"}, {"sha": "617d248822a15c56ed533306a5086e506fa2fa57", "filename": "gcc/ada/libgnat/a-comutr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-comutr.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1864,7 +1864,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Tree)\n    is\n       use System.Put_Images;\n "}, {"sha": "8e88b14898c79ccf2132dde4ecab9b0b27c93485", "filename": "gcc/ada/libgnat/a-comutr.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-comutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-comutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-comutr.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -404,7 +404,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Tree);\n \n    overriding procedure Adjust (Container : in out Tree);\n "}, {"sha": "5cede720ffd874d31a3d943fde62ae6f80ff163a", "filename": "gcc/ada/libgnat/a-convec.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-convec.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -2345,7 +2345,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Vector)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "41eafbcaf5d725e0109148faaae5855d42e0eefa", "filename": "gcc/ada/libgnat/a-convec.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-convec.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n --  The language-defined generic package Containers.Vectors provides private\n --  types Vector and Cursor, and a set of operations for each type. A vector\n@@ -745,7 +745,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Vector);\n \n    overriding procedure Adjust (Container : in out Vector);\n    overriding procedure Finalize (Container : in out Vector);"}, {"sha": "65adf4c595f3a8645c1a77aea051b0c7a0b32352", "filename": "gcc/ada/libgnat/a-coorma.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorma.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1220,7 +1220,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "5de65c18d6bc3358c363fa9307b5ab6865f93425", "filename": "gcc/ada/libgnat/a-coorma.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorma.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -36,7 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Key_Type is private;\n@@ -267,7 +267,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Map);\n \n    overriding procedure Adjust (Container : in out Map);\n "}, {"sha": "9b11d29314018224136a6a25d248cb6c1e452aaf", "filename": "gcc/ada/libgnat/a-coormu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coormu.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1571,7 +1571,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "51b94eb5e64b89b7cb63dbfd509cba048aa73574", "filename": "gcc/ada/libgnat/a-coormu.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coormu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coormu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coormu.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -34,7 +34,7 @@\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n with Ada.Iterator_Interfaces;\n \n generic\n@@ -476,7 +476,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "ca8f238be86dcb85a65fdc75205d99b80ad0d0db", "filename": "gcc/ada/libgnat/a-coorse.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1586,7 +1586,7 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set)\n    is\n       First_Time : Boolean := True;\n       use System.Put_Images;"}, {"sha": "6d24e038747abfe7b22729d2092f83cf373c434d", "filename": "gcc/ada/libgnat/a-coorse.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -37,7 +37,7 @@ with Ada.Containers.Helpers;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n generic\n    type Element_Type is private;\n@@ -347,7 +347,7 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "fe41cf1da0e20649db6c4338e9e231113c95594b", "filename": "gcc/ada/libgnat/a-nbnbin.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Unchecked_Deallocation;\n-with Ada.Strings.Text_Output.Utils;\n \n with Interfaces; use Interfaces;\n \n@@ -432,12 +431,12 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Put_Image --\n    ---------------\n \n-   procedure Put_Image (S : in out Sink'Class; V : Big_Integer) is\n+   procedure Put_Image (S : in out Root_Buffer_Type'Class; V : Big_Integer) is\n       --  This is implemented in terms of To_String. It might be more elegant\n       --  and more efficient to do it the other way around, but this is the\n       --  most expedient implementation for now.\n    begin\n-      Strings.Text_Output.Utils.Put_UTF_8 (S, To_String (V));\n+      Strings.Text_Buffers.Put_UTF_8 (S, To_String (V));\n    end Put_Image;\n \n    ---------"}, {"sha": "1ba10da6a0d221bd4a61f62503bca4cc2701636a", "filename": "gcc/ada/libgnat/a-nbnbin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -13,7 +13,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Strings.Text_Output; use Ada.Strings.Text_Output;\n+with Ada.Strings.Text_Buffers; use Ada.Strings.Text_Buffers;\n \n private with Ada.Finalization;\n private with System;\n@@ -119,7 +119,7 @@ is\n    function From_Universal_Image (Arg : String) return Valid_Big_Integer\n      renames From_String;\n \n-   procedure Put_Image (S : in out Sink'Class; V : Big_Integer);\n+   procedure Put_Image (S : in out Root_Buffer_Type'Class; V : Big_Integer);\n \n    function \"+\" (L : Valid_Big_Integer) return Valid_Big_Integer\n       with Global => null;"}, {"sha": "880e9a3c53d3ebb73643e444e0875038f9f7fe0c", "filename": "gcc/ada/libgnat/a-nbnbin__gmp.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -35,7 +35,6 @@ with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n with Interfaces.C;               use Interfaces.C;\n with Interfaces.C.Strings;       use Interfaces.C.Strings;\n-with Ada.Strings.Text_Output.Utils;\n with Ada.Characters.Handling;    use Ada.Characters.Handling;\n \n package body Ada.Numerics.Big_Numbers.Big_Integers is\n@@ -403,12 +402,12 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Put_Image --\n    ---------------\n \n-   procedure Put_Image (S : in out Sink'Class; V : Big_Integer) is\n+   procedure Put_Image (S : in out Root_Buffer_Type'Class; V : Big_Integer) is\n       --  This is implemented in terms of To_String. It might be more elegant\n       --  and more efficient to do it the other way around, but this is the\n       --  most expedient implementation for now.\n    begin\n-      Strings.Text_Output.Utils.Put_UTF_8 (S, To_String (V));\n+      Strings.Text_Buffers.Put_UTF_8 (S, To_String (V));\n    end Put_Image;\n \n    ---------"}, {"sha": "e45bc6dd02895b49a17bcf29efa7dd93bb731afd", "filename": "gcc/ada/libgnat/a-nbnbre.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -29,7 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Strings.Text_Output.Utils;\n with System.Unsigned_Types; use System.Unsigned_Types;\n \n package body Ada.Numerics.Big_Numbers.Big_Reals is\n@@ -619,12 +618,12 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- Put_Image --\n    ---------------\n \n-   procedure Put_Image (S : in out Sink'Class; V : Big_Real) is\n+   procedure Put_Image (S : in out Root_Buffer_Type'Class; V : Big_Real) is\n       --  This is implemented in terms of To_String. It might be more elegant\n       --  and more efficient to do it the other way around, but this is the\n       --  most expedient implementation for now.\n    begin\n-      Strings.Text_Output.Utils.Put_UTF_8 (S, To_String (V));\n+      Strings.Text_Buffers.Put_UTF_8 (S, To_String (V));\n    end Put_Image;\n \n    ---------"}, {"sha": "4118d2bb99c72d31b51f9bddfeb9f7fa3c7f3316", "filename": "gcc/ada/libgnat/a-nbnbre.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -15,7 +15,7 @@\n \n with Ada.Numerics.Big_Numbers.Big_Integers;\n \n-with Ada.Strings.Text_Output; use Ada.Strings.Text_Output;\n+with Ada.Strings.Text_Buffers; use Ada.Strings.Text_Buffers;\n \n package Ada.Numerics.Big_Numbers.Big_Reals\n   with Preelaborate\n@@ -138,7 +138,7 @@ is\n    function From_Quotient_String (Arg : String) return Valid_Big_Real\n      with Global => null;\n \n-   procedure Put_Image (S : in out Sink'Class; V : Big_Real);\n+   procedure Put_Image (S : in out Root_Buffer_Type'Class; V : Big_Real);\n \n    function \"+\" (L : Valid_Big_Real) return Valid_Big_Real\n      with Global => null;"}, {"sha": "a3e0e32caab7210354ad87ef429583729eaa04b9", "filename": "gcc/ada/libgnat/a-stbubo.adb", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbubo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbubo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbubo.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,147 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                     ADA.STRINGS.TEXT_BUFFERS.BOUNDED                     --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Strings.UTF_Encoding.Conversions;\n+with Ada.Strings.UTF_Encoding.Strings;\n+with Ada.Strings.UTF_Encoding.Wide_Strings;\n+with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n+package body Ada.Strings.Text_Buffers.Bounded is\n+\n+   --  Pretty much the same as the Unbounded version, except where different.\n+   --\n+   --  One could imagine inventing an Input_Mapping generic analogous to\n+   --  the existing Output_Mapping generic to address the Get-related\n+   --  Bounded/Unbounded code duplication issues, but let's not. In the\n+   --  Output case, there was more substantial duplication and there were\n+   --  3 clients (Bounded, Unbounded, and Files) instead of 2.\n+\n+   function Text_Truncated (Buffer : Buffer_Type) return Boolean is\n+     (Buffer.Truncated);\n+\n+   function Get (Buffer : in out Buffer_Type) return String is\n+   --  If all characters are 7 bits, we don't need to decode;\n+   --  this is an optimization.\n+   --  Otherwise, if all are 8 bits, we need to decode to get Latin-1.\n+   --  Otherwise, the result is implementation defined, so we return a\n+   --  String encoded as UTF-8. Note that the RM says \"if any character\n+   --  in the sequence is not defined in Character, the result is\n+   --  implementation-defined\", so we are not obliged to decode ANY\n+   --  Latin-1 characters if ANY character is bigger than 8 bits.\n+   begin\n+      if Buffer.All_8_Bits and not Buffer.All_7_Bits then\n+         return UTF_Encoding.Strings.Decode (Get_UTF_8 (Buffer));\n+      else\n+         return Get_UTF_8 (Buffer);\n+      end if;\n+   end Get;\n+\n+   function Wide_Get (Buffer : in out Buffer_Type) return Wide_String is\n+   begin\n+      return UTF_Encoding.Wide_Strings.Decode (Get_UTF_8 (Buffer));\n+   end Wide_Get;\n+\n+   function Wide_Wide_Get (Buffer : in out Buffer_Type) return Wide_Wide_String\n+   is\n+   begin\n+      return UTF_Encoding.Wide_Wide_Strings.Decode (Get_UTF_8 (Buffer));\n+   end Wide_Wide_Get;\n+\n+   function Get_UTF_8\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_8_String\n+   is\n+   begin\n+      return\n+        Result : constant UTF_Encoding.UTF_8_String :=\n+          UTF_Encoding.UTF_8_String\n+            (Buffer.Chars (1 .. Text_Buffer_Count (Buffer.UTF_8_Length)))\n+      do\n+         --  Reset buffer to default initial value.\n+         declare\n+            Defaulted : Buffer_Type (0);\n+\n+            --  If this aggregate becomes illegal due to new field, don't\n+            --  forget to add corresponding assignment statement below.\n+            Dummy : array (1 .. 0) of Buffer_Type (0) :=\n+              (others =>\n+                 (Max_Characters => 0, Chars => <>, Indentation => <>,\n+                  Indent_Pending => <>, UTF_8_Length => <>, UTF_8_Column => <>,\n+                  All_7_Bits     => <>, All_8_Bits => <>, Truncated => <>));\n+         begin\n+            Buffer.Indentation    := Defaulted.Indentation;\n+            Buffer.Indent_Pending := Defaulted.Indent_Pending;\n+            Buffer.UTF_8_Length   := Defaulted.UTF_8_Length;\n+            Buffer.UTF_8_Column   := Defaulted.UTF_8_Column;\n+            Buffer.All_7_Bits     := Defaulted.All_7_Bits;\n+            Buffer.All_8_Bits     := Defaulted.All_8_Bits;\n+            Buffer.Truncated      := Defaulted.Truncated;\n+         end;\n+      end return;\n+   end Get_UTF_8;\n+\n+   function Wide_Get_UTF_16\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_16_Wide_String\n+   is\n+   begin\n+      return\n+        UTF_Encoding.Conversions.Convert\n+          (Get_UTF_8 (Buffer), Input_Scheme => UTF_Encoding.UTF_8);\n+   end Wide_Get_UTF_16;\n+\n+   procedure Put_UTF_8_Implementation\n+     (Buffer : in out Root_Buffer_Type'Class;\n+      Item   : UTF_Encoding.UTF_8_String)\n+   is\n+      procedure Buffer_Type_Implementation (Buffer : in out Buffer_Type);\n+      --  View the passed-in Buffer parameter as being of type Buffer_Type,\n+      --  not of Root_Buffer_Type'Class.\n+\n+      procedure Buffer_Type_Implementation (Buffer : in out Buffer_Type) is\n+      begin\n+         for Char of Item loop\n+            if Buffer.UTF_8_Length = Integer (Buffer.Max_Characters) then\n+               Buffer.Truncated := True;\n+               return;\n+            end if;\n+\n+            Buffer.All_7_Bits := @ and then Character'Pos (Char) < 128;\n+\n+            Buffer.UTF_8_Length                                    := @ + 1;\n+            Buffer.UTF_8_Column                                    := @ + 1;\n+            Buffer.Chars (Text_Buffer_Count (Buffer.UTF_8_Length)) := Char;\n+         end loop;\n+      end Buffer_Type_Implementation;\n+   begin\n+      if Item'Length > 0 then\n+         Buffer_Type_Implementation (Buffer_Type (Buffer));\n+      end if;\n+   end Put_UTF_8_Implementation;\n+\n+end Ada.Strings.Text_Buffers.Bounded;"}, {"sha": "aef7ccf4567544e41e00de0fb3f8229dfa07256e", "filename": "gcc/ada/libgnat/a-stbubo.ads", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbubo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbubo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbubo.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,73 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                     ADA.STRINGS.TEXT_BUFFERS.BOUNDED                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package Ada.Strings.Text_Buffers.Bounded with\n+   Pure\n+is\n+\n+   type Buffer_Type (Max_Characters : Text_Buffer_Count) is\n+     new Root_Buffer_Type with private with\n+      Default_Initial_Condition => not Text_Truncated (Buffer_Type);\n+\n+   function Text_Truncated (Buffer : Buffer_Type) return Boolean;\n+\n+   function Get (Buffer : in out Buffer_Type) return String with\n+      Post'Class => Get'Result'First = 1 and then Current_Indent (Buffer) = 0;\n+\n+   function Wide_Get (Buffer : in out Buffer_Type) return Wide_String with\n+      Post'Class => Wide_Get'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+   function Wide_Wide_Get\n+     (Buffer : in out Buffer_Type) return Wide_Wide_String with\n+      Post'Class => Wide_Wide_Get'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+   function Get_UTF_8\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_8_String with\n+      Post'Class => Get_UTF_8'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+   function Wide_Get_UTF_16\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_16_Wide_String with\n+      Post'Class => Wide_Get_UTF_16'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+private\n+\n+   procedure Put_UTF_8_Implementation\n+     (Buffer : in out Root_Buffer_Type'Class;\n+      Item   : UTF_Encoding.UTF_8_String)\n+     with Pre => Buffer in Buffer_Type'Class;\n+\n+   package Mapping is new Output_Mapping (Put_UTF_8_Implementation);\n+\n+   subtype Positive_Text_Buffer_Count is\n+     Text_Buffer_Count range 1 .. Text_Buffer_Count'Last;\n+\n+   type Convertible_To_UTF_8_String is\n+     array (Positive_Text_Buffer_Count range <>) of Character;\n+\n+   type Buffer_Type (Max_Characters : Text_Buffer_Count)\n+   is new Mapping.Buffer_Type with record\n+      Truncated : Boolean := False;\n+      --  True if we ran out of space on a Put\n+\n+      Chars : Convertible_To_UTF_8_String (1 .. Max_Characters);\n+   end record;\n+\n+end Ada.Strings.Text_Buffers.Bounded;"}, {"sha": "0a8feab59890f8791723b597bd76b2cd24ccc604", "filename": "gcc/ada/libgnat/a-stbufi.adb", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbufi.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,82 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                      ADA.STRINGS.TEXT_BUFFERS.FILES                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body Ada.Strings.Text_Buffers.Files is\n+\n+   procedure Put_UTF_8_Implementation\n+     (Buffer : in out Root_Buffer_Type'Class;\n+      Item : UTF_Encoding.UTF_8_String) is\n+      Result : Integer;\n+   begin\n+      Result := OS.Write (File_Buffer (Buffer).FD,\n+                          Item (Item'First)'Address,\n+                          Item'Length);\n+      if Result /= Item'Length then\n+         raise Program_Error with OS.Errno_Message;\n+      end if;\n+   end Put_UTF_8_Implementation;\n+\n+   function Create_From_FD\n+     (FD                      : GNAT.OS_Lib.File_Descriptor;\n+      Close_Upon_Finalization : Boolean := True) return File_Buffer\n+   is\n+      use OS;\n+   begin\n+      if FD = Invalid_FD then\n+         raise Program_Error with OS.Errno_Message;\n+      end if;\n+      return Result : File_Buffer do\n+         Result.FD := FD;\n+         Result.Close_Upon_Finalization := Close_Upon_Finalization;\n+      end return;\n+   end Create_From_FD;\n+\n+   function Create_File (Name : String) return File_Buffer is\n+   begin\n+      return Create_From_FD (OS.Create_File (Name, Fmode => OS.Binary));\n+   end Create_File;\n+\n+   procedure Finalize (Ref : in out Self_Ref) is\n+      Success : Boolean;\n+      use OS;\n+   begin\n+      if Ref.Self.FD /= OS.Invalid_FD\n+        and then Ref.Self.Close_Upon_Finalization\n+      then\n+         Close (Ref.Self.FD, Success);\n+         if not Success then\n+            raise Program_Error with OS.Errno_Message;\n+         end if;\n+      end if;\n+      Ref.Self.FD := OS.Invalid_FD;\n+   end Finalize;\n+\n+end Ada.Strings.Text_Buffers.Files;"}, {"sha": "2a2db9002cc3e66c634876ede07c56cfd6215403", "filename": "gcc/ada/libgnat/a-stbufi.ads", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbufi.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,75 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                      ADA.STRINGS.TEXT_BUFFERS.FILES                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Finalization;\n+with GNAT.OS_Lib;\n+\n+package Ada.Strings.Text_Buffers.Files is\n+\n+   type File_Buffer is new Root_Buffer_Type with private;\n+   --  Output written to a File_Buffer is written to the associated file.\n+\n+   function Create_From_FD\n+     (FD                      : GNAT.OS_Lib.File_Descriptor;\n+      Close_Upon_Finalization : Boolean := True)\n+     return File_Buffer;\n+   --  file closed upon finalization if specified\n+\n+   function Create_File (Name : String) return File_Buffer;\n+   --  file closed upon finalization\n+\n+   function Create_Standard_Output_Buffer return File_Buffer is\n+     (Create_From_FD (GNAT.OS_Lib.Standout, Close_Upon_Finalization => False));\n+   function Create_Standard_Error_Buffer return File_Buffer is\n+     (Create_From_FD (GNAT.OS_Lib.Standerr, Close_Upon_Finalization => False));\n+\n+private\n+\n+   procedure Put_UTF_8_Implementation\n+     (Buffer : in out Root_Buffer_Type'Class;\n+      Item : UTF_Encoding.UTF_8_String)\n+     with Pre => Buffer in File_Buffer'Class;\n+\n+   package Mapping is new Output_Mapping (Put_UTF_8_Implementation);\n+\n+   package OS renames GNAT.OS_Lib;\n+\n+   type Self_Ref (Self : not null access File_Buffer)\n+     is new Finalization.Limited_Controlled with null record;\n+   overriding procedure Finalize (Ref : in out Self_Ref);\n+\n+   type File_Buffer is new Mapping.Buffer_Type with record\n+      FD  : OS.File_Descriptor := OS.Invalid_FD;\n+      Ref : Self_Ref (File_Buffer'Access);\n+      Close_Upon_Finalization : Boolean := False;\n+   end record;\n+\n+end Ada.Strings.Text_Buffers.Files;"}, {"sha": "8ac55128e35bddb3cbc1013bb726e97a06f48dc4", "filename": "gcc/ada/libgnat/a-stbufo.adb", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbufo.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,158 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                    ADA.STRINGS.TEXT_BUFFERS.FORMATTING                   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Strings.Text_Buffers.Unbounded;\n+with Ada.Strings.Text_Buffers.Files;\n+\n+package body Ada.Strings.Text_Buffers.Formatting is\n+\n+   use Ada.Strings.Text_Buffers.Files;\n+   use Ada.Strings.Text_Buffers.Utils;\n+\n+   procedure Put\n+     (S : in out Root_Buffer_Type'Class; T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\")\n+   is\n+      J : Positive := T'First;\n+      Used : array (1 .. 9) of Boolean := (others => False);\n+   begin\n+      while J <= T'Last loop\n+         if T (J) = '\\' then\n+            J := J + 1;\n+            case T (J) is\n+               when 'n' =>\n+                  New_Line (S);\n+               when '\\' =>\n+                  Put_7bit (S, '\\');\n+               when 'i' =>\n+                  Increase_Indent (S);\n+               when 'o' =>\n+                  Decrease_Indent (S);\n+               when 'I' =>\n+                  Increase_Indent (S, 1);\n+               when 'O' =>\n+                  Decrease_Indent (S, 1);\n+\n+               when '1' =>\n+                  Used (1) := True;\n+                  Put_UTF_8_Lines (S, X1);\n+               when '2' =>\n+                  Used (2) := True;\n+                  Put_UTF_8_Lines (S, X2);\n+               when '3' =>\n+                  Used (3) := True;\n+                  Put_UTF_8_Lines (S, X3);\n+               when '4' =>\n+                  Used (4) := True;\n+                  Put_UTF_8_Lines (S, X4);\n+               when '5' =>\n+                  Used (5) := True;\n+                  Put_UTF_8_Lines (S, X5);\n+               when '6' =>\n+                  Used (6) := True;\n+                  Put_UTF_8_Lines (S, X6);\n+               when '7' =>\n+                  Used (7) := True;\n+                  Put_UTF_8_Lines (S, X7);\n+               when '8' =>\n+                  Used (8) := True;\n+                  Put_UTF_8_Lines (S, X8);\n+               when '9' =>\n+                  Used (9) := True;\n+                  Put_UTF_8_Lines (S, X9);\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n+         else\n+            Put_7bit (S, T (J));\n+         end if;\n+\n+         J := J + 1;\n+      end loop;\n+\n+      if not Used (1) then\n+         pragma Assert (X1 = \"\");\n+      end if;\n+      if not Used (2) then\n+         pragma Assert (X2 = \"\");\n+      end if;\n+      if not Used (3) then\n+         pragma Assert (X3 = \"\");\n+      end if;\n+      if not Used (4) then\n+         pragma Assert (X4 = \"\");\n+      end if;\n+      if not Used (5) then\n+         pragma Assert (X5 = \"\");\n+      end if;\n+      if not Used (6) then\n+         pragma Assert (X6 = \"\");\n+      end if;\n+      if not Used (7) then\n+         pragma Assert (X7 = \"\");\n+      end if;\n+      if not Used (8) then\n+         pragma Assert (X8 = \"\");\n+      end if;\n+      if not Used (9) then\n+         pragma Assert (X9 = \"\");\n+      end if;\n+   end Put;\n+\n+   function Format\n+     (T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\")\n+     return Utils.UTF_8_Lines\n+   is\n+      Buffer : Unbounded.Buffer_Type;\n+   begin\n+      Put (Buffer, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n+      return Buffer.Get_UTF_8;\n+   end Format;\n+\n+   procedure Put\n+     (T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\") is\n+      Buffer : File_Buffer := Create_Standard_Output_Buffer;\n+   begin\n+      Put (Buffer, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n+   end Put;\n+\n+   procedure Err\n+     (T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\") is\n+      Buffer : File_Buffer := Create_Standard_Error_Buffer;\n+   begin\n+      Put (Buffer, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n+   end Err;\n+\n+end Ada.Strings.Text_Buffers.Formatting;"}, {"sha": "8c0d47612046af903978c78b2eae5c549e73884a", "filename": "gcc/ada/libgnat/a-stbufo.ads", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbufo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbufo.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,73 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                    ADA.STRINGS.TEXT_BUFFERS.FORMATTING                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Strings.Text_Buffers.Utils;\n+\n+package Ada.Strings.Text_Buffers.Formatting is\n+\n+   --  Template-based output, based loosely on C's printf family. Unlike\n+   --  printf, it is type safe. We don't support myriad formatting options; the\n+   --  caller is expected to call 'Image, or other functions that might have\n+   --  various formatting capabilities.\n+\n+   type Template is new Utils.UTF_8;\n+\n+   procedure Put\n+     (S : in out Root_Buffer_Type'Class; T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\");\n+   --  Prints the template as is, except for the following escape sequences:\n+   --    \"\\n\" is end of line.\n+   --    \"\\i\" indents by the default amount, and \"\\o\" outdents.\n+   --    \"\\I\" indents by one space, and \"\\O\" outdents.\n+   --    \"\\1\" is replaced with X1, and similarly for 2, 3, ....\n+   --    \"\\\\\" is \"\\\".\n+\n+   --  Note that the template is not type String, to avoid this sort of thing:\n+   --\n+   --      https://xkcd.com/327/\n+\n+   procedure Put\n+     (T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\");\n+   --  Sends to standard output\n+\n+   procedure Err\n+     (T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\");\n+   --  Sends to standard error\n+\n+   function Format\n+     (T : Template;\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : Utils.UTF_8_Lines := \"\")\n+     return Utils.UTF_8_Lines;\n+   --  Returns a UTF-8-encoded String\n+\n+end Ada.Strings.Text_Buffers.Formatting;"}, {"sha": "9ae3d28c6cb1591a5bf1184713c96e1762e63497", "filename": "gcc/ada/libgnat/a-stbuun.adb", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuun.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuun.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbuun.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,193 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                    ADA.STRINGS.TEXT_BUFFERS.UNBOUNDED                    --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Unchecked_Deallocation;\n+with Ada.Strings.UTF_Encoding.Conversions;\n+with Ada.Strings.UTF_Encoding.Strings;\n+with Ada.Strings.UTF_Encoding.Wide_Strings;\n+with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n+package body Ada.Strings.Text_Buffers.Unbounded is\n+\n+   function Get (Buffer : in out Buffer_Type) return String is\n+   --  If all characters are 7 bits, we don't need to decode;\n+   --  this is an optimization.\n+   --  Otherwise, if all are 8 bits, we need to decode to get Latin-1.\n+   --  Otherwise, the result is implementation defined, so we return a\n+   --  String encoded as UTF-8. Note that the RM says \"if any character\n+   --  in the sequence is not defined in Character, the result is\n+   --  implementation-defined\", so we are not obliged to decode ANY\n+   --  Latin-1 characters if ANY character is bigger than 8 bits.\n+   begin\n+      if Buffer.All_8_Bits and not Buffer.All_7_Bits then\n+         return UTF_Encoding.Strings.Decode (Get_UTF_8 (Buffer));\n+      else\n+         return Get_UTF_8 (Buffer);\n+      end if;\n+   end Get;\n+\n+   function Wide_Get (Buffer : in out Buffer_Type) return Wide_String is\n+   begin\n+      return UTF_Encoding.Wide_Strings.Decode (Get_UTF_8 (Buffer));\n+   end Wide_Get;\n+\n+   function Wide_Wide_Get (Buffer : in out Buffer_Type) return Wide_Wide_String\n+   is\n+   begin\n+      return UTF_Encoding.Wide_Wide_Strings.Decode (Get_UTF_8 (Buffer));\n+   end Wide_Wide_Get;\n+\n+   function Get_UTF_8\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_8_String\n+   is\n+   begin\n+      return Result : UTF_Encoding.UTF_8_String (1 .. Buffer.UTF_8_Length) do\n+         declare\n+            Target_First : Positive := 1;\n+            Ptr : Chunk_Access := Buffer.List.First_Chunk'Unchecked_Access;\n+            Target_Last  : Positive;\n+         begin\n+            while Ptr /= null loop\n+               Target_Last := Target_First + Ptr.Chars'Length - 1;\n+               if Target_Last <= Result'Last then\n+                  --  all of chunk is assigned to Result\n+                  Result (Target_First .. Target_Last) := Ptr.Chars;\n+                  Target_First := Target_First + Ptr.Chars'Length;\n+               else\n+                  --  only part of (last) chunk is assigned to Result\n+                  declare\n+                     Final_Target : UTF_Encoding.UTF_8_String renames\n+                       Result (Target_First .. Result'Last);\n+                  begin\n+                     Final_Target := Ptr.Chars (1 .. Final_Target'Length);\n+                  end;\n+                  pragma Assert (Ptr.Next = null);\n+                  Target_First := Integer'Last;\n+               end if;\n+\n+               Ptr := Ptr.Next;\n+            end loop;\n+         end;\n+\n+         --  Reset buffer to default initial value.\n+         declare\n+            Defaulted : Buffer_Type;\n+\n+            --  If this aggregate becomes illegal due to new field, don't\n+            --  forget to add corresponding assignment statement below.\n+            Dummy : array (1 .. 0) of Buffer_Type :=\n+              (others =>\n+                 (Indentation  => <>, Indent_Pending => <>, UTF_8_Length => <>,\n+                  UTF_8_Column => <>, All_7_Bits => <>, All_8_Bits => <>,\n+                  List         => <>, Last_Used => <>));\n+         begin\n+            Buffer.Indentation    := Defaulted.Indentation;\n+            Buffer.Indent_Pending := Defaulted.Indent_Pending;\n+            Buffer.UTF_8_Length   := Defaulted.UTF_8_Length;\n+            Buffer.UTF_8_Column   := Defaulted.UTF_8_Column;\n+            Buffer.All_7_Bits     := Defaulted.All_7_Bits;\n+            Buffer.All_8_Bits     := Defaulted.All_8_Bits;\n+            Buffer.Last_Used      := Defaulted.Last_Used;\n+            Finalize (Buffer.List); -- free any allocated chunks\n+         end;\n+      end return;\n+   end Get_UTF_8;\n+\n+   function Wide_Get_UTF_16\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_16_Wide_String\n+   is\n+   begin\n+      return\n+        UTF_Encoding.Conversions.Convert\n+          (Get_UTF_8 (Buffer), Input_Scheme => UTF_Encoding.UTF_8);\n+   end Wide_Get_UTF_16;\n+\n+   procedure Put_UTF_8_Implementation\n+     (Buffer : in out Root_Buffer_Type'Class;\n+      Item   : UTF_Encoding.UTF_8_String)\n+   is\n+      procedure Buffer_Type_Implementation (Buffer : in out Buffer_Type);\n+      --  View the passed-in Buffer parameter as being of type Buffer_Type,\n+      --  not of type Root_Buffer_Type'Class.\n+\n+      procedure Buffer_Type_Implementation (Buffer : in out Buffer_Type) is\n+      begin\n+         for Char of Item loop\n+            Buffer.All_7_Bits := @ and then Character'Pos (Char) < 128;\n+\n+            if Buffer.Last_Used = Buffer.List.Current_Chunk.Length then\n+               --  Current chunk is full; allocate a new one with doubled size\n+\n+               declare\n+                  Cc     : Chunk renames Buffer.List.Current_Chunk.all;\n+                  Max    : constant Positive := Integer'Last / 2;\n+                  Length : constant Natural  :=\n+                    Integer'Min (Max, 2 * Cc.Length);\n+               begin\n+                  pragma Assert (Cc.Next = null);\n+                  Cc.Next                   := new Chunk (Length => Length);\n+                  Buffer.List.Current_Chunk := Cc.Next;\n+                  Buffer.Last_Used          := 0;\n+               end;\n+            end if;\n+\n+            Buffer.UTF_8_Length                                := @ + 1;\n+            Buffer.UTF_8_Column                                := @ + 1;\n+            Buffer.Last_Used                                   := @ + 1;\n+            Buffer.List.Current_Chunk.Chars (Buffer.Last_Used) := Char;\n+         end loop;\n+      end Buffer_Type_Implementation;\n+   begin\n+      Buffer_Type_Implementation (Buffer_Type (Buffer));\n+   end Put_UTF_8_Implementation;\n+\n+   procedure Initialize (List : in out Managed_Chunk_List) is\n+   begin\n+      List.Current_Chunk := List.First_Chunk'Unchecked_Access;\n+   end Initialize;\n+\n+   procedure Finalize (List : in out Managed_Chunk_List) is\n+      procedure Free is new Ada.Unchecked_Deallocation (Chunk, Chunk_Access);\n+      Ptr : Chunk_Access := List.First_Chunk.Next;\n+   begin\n+      while Ptr /= null loop\n+         declare\n+            Old_Ptr : Chunk_Access := Ptr;\n+         begin\n+            Ptr := Ptr.Next;\n+            Free (Old_Ptr);\n+         end;\n+      end loop;\n+\n+      List.First_Chunk.Next := null;\n+      Initialize (List);\n+   end Finalize;\n+\n+end Ada.Strings.Text_Buffers.Unbounded;"}, {"sha": "3c6ad3a015e10fb14286d1f0a7a4f1177aa493aa", "filename": "gcc/ada/libgnat/a-stbuun.ads", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuun.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuun.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbuun.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,87 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                    ADA.STRINGS.TEXT_BUFFERS.UNBOUNDED                    --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Finalization;\n+package Ada.Strings.Text_Buffers.Unbounded with\n+   Preelaborate\n+   --  , Nonblocking\n+   --  , Global => null\n+is\n+\n+   type Buffer_Type is new Root_Buffer_Type with private;\n+\n+   function Get (Buffer : in out Buffer_Type) return String with\n+      Post'Class => Get'Result'First = 1 and then Current_Indent (Buffer) = 0;\n+\n+   function Wide_Get (Buffer : in out Buffer_Type) return Wide_String with\n+      Post'Class => Wide_Get'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+   function Wide_Wide_Get\n+     (Buffer : in out Buffer_Type) return Wide_Wide_String with\n+      Post'Class => Wide_Wide_Get'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+   function Get_UTF_8\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_8_String with\n+      Post'Class => Get_UTF_8'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+   function Wide_Get_UTF_16\n+     (Buffer : in out Buffer_Type) return UTF_Encoding.UTF_16_Wide_String with\n+      Post'Class => Wide_Get_UTF_16'Result'First = 1\n+      and then Current_Indent (Buffer) = 0;\n+\n+private\n+\n+   procedure Put_UTF_8_Implementation\n+     (Buffer : in out Root_Buffer_Type'Class;\n+      Item : UTF_Encoding.UTF_8_String)\n+     with Pre => Buffer in Buffer_Type'Class;\n+\n+   package Mapping is new Output_Mapping (Put_UTF_8_Implementation);\n+\n+   type Chunk;\n+   type Chunk_Access is access all Chunk;\n+   type Chunk (Length : Positive) is record\n+      Next  : Chunk_Access := null;\n+      Chars : UTF_Encoding.UTF_8_String (1 .. Length);\n+   end record;\n+\n+   type Managed_Chunk_List is new Ada.Finalization.Limited_Controlled with\n+   record\n+      First_Chunk : aliased Chunk (64);\n+      --  First chunk in list is not created by an allocator; it is\n+      --  large enough to suffice for many common images.\n+\n+      Current_Chunk : Chunk_Access;\n+      --  Chunk we are currrently writing to.\n+      --  Initialized to Managed_Chunk_List.First'Access.\n+   end record;\n+\n+   overriding procedure Initialize (List : in out Managed_Chunk_List);\n+   --  List.Current_Chunk := List.First_Chunk'Unchecked_Access;\n+\n+   overriding procedure Finalize (List : in out Managed_Chunk_List);\n+   --  Free any allocated chunks.\n+\n+   type Buffer_Type is new Mapping.Buffer_Type with record\n+      List : Managed_Chunk_List;\n+\n+      Last_Used : Natural := 0;\n+      --  Index of last used char in List.Current_Chunk.all; 0 if none used.\n+   end record;\n+\n+end Ada.Strings.Text_Buffers.Unbounded;"}, {"sha": "b32b2d38d7511093408bbce3dd48847c3a341bb3", "filename": "gcc/ada/libgnat/a-stbuut.adb", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuut.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuut.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbuut.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,81 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                      ADA.STRINGS.TEXT_BUFFERS.UTILS                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body Ada.Strings.Text_Buffers.Utils is\n+\n+   procedure Put_7bit\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Character_7)\n+   is\n+   begin\n+      Put (Buffer, (1 => Item));\n+   end Put_7bit;\n+\n+   procedure Put_Character\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Character)\n+   is\n+   begin\n+      Put (Buffer, (1 => Item));\n+   end Put_Character;\n+\n+   procedure Put_Wide_Character\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Wide_Character)\n+   is\n+   begin\n+      Wide_Put (Buffer, (1 => Item));\n+   end Put_Wide_Character;\n+\n+   procedure Put_Wide_Wide_Character\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Wide_Wide_Character)\n+   is\n+   begin\n+      Wide_Wide_Put (Buffer, (1 => Item));\n+   end Put_Wide_Wide_Character;\n+\n+   procedure Put_UTF_8_Lines\n+     (Buffer : in out Root_Buffer_Type'Class; Item : UTF_8_Lines)\n+   is\n+   begin\n+      Put (Buffer, Item);\n+   end Put_UTF_8_Lines;\n+\n+   function Column (Buffer : Root_Buffer_Type'Class) return Positive is\n+   begin\n+      return Buffer.UTF_8_Column;\n+   end Column;\n+\n+   procedure Tab_To_Column\n+     (Buffer : in out Root_Buffer_Type'Class; Column : Positive)\n+   is\n+   begin\n+      Put (Buffer, String'(1 .. Column - Utils.Column (Buffer) => ' '));\n+   end Tab_To_Column;\n+\n+end Ada.Strings.Text_Buffers.Utils;"}, {"sha": "d76b8cfd87a0eb1343342ba36a1d482606dd7aeb", "filename": "gcc/ada/libgnat/a-stbuut.ads", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuut.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-stbuut.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stbuut.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,82 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                      ADA.STRINGS.TEXT_BUFFERS.UTILS                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n+\n+package Ada.Strings.Text_Buffers.Utils with Pure is\n+\n+   --  Ada.Strings.Text_Buffers is a predefined unit (see Ada RM A.4.12).\n+   --  This is a GNAT-defined child unit of that parent.\n+\n+   subtype Character_7 is\n+     Character range Character'Val (0) .. Character'Val (2**7 - 1);\n+\n+   procedure Put_7bit\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Character_7);\n+   procedure Put_Character\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Character);\n+   procedure Put_Wide_Character\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Wide_Character);\n+   procedure Put_Wide_Wide_Character\n+     (Buffer : in out Root_Buffer_Type'Class; Item : Wide_Wide_Character);\n+   --  Single character output procedures.\n+\n+   function Column (Buffer : Root_Buffer_Type'Class) return Positive with\n+      Inline;\n+   --  Current output column. The Column is initially 1, and is incremented for\n+   --  each 8-bit character output. A call to New_Line sets Column back to 1.\n+   --  The next character to be output will go in this column.\n+\n+   procedure Tab_To_Column\n+     (Buffer : in out Root_Buffer_Type'Class; Column : Positive);\n+   --  Put spaces until we're at or past Column.\n+\n+   subtype Sink is Root_Buffer_Type;\n+\n+   function NL return Character is (ASCII.LF) with Inline;\n+\n+   function UTF_8_Length (Buffer : Root_Buffer_Type'Class) return Natural;\n+\n+   subtype UTF_8_Lines is UTF_Encoding.UTF_8_String with\n+     Predicate =>\n+       UTF_Encoding.Wide_Wide_Strings.Encode\n+         (UTF_Encoding.Wide_Wide_Strings.Decode (UTF_8_Lines)) = UTF_8_Lines;\n+\n+   subtype UTF_8 is UTF_8_Lines with\n+     Predicate => (for all UTF_8_Char of UTF_8 => UTF_8_Char /= NL);\n+\n+   procedure Put_UTF_8_Lines\n+     (Buffer : in out Root_Buffer_Type'Class; Item : UTF_8_Lines);\n+\n+private\n+   function UTF_8_Length (Buffer : Root_Buffer_Type'Class) return Natural\n+     is (Buffer.UTF_8_Length);\n+end Ada.Strings.Text_Buffers.Utils;"}, {"sha": "4727f965486195356d9297eaf0bc13230b10366c", "filename": "gcc/ada/libgnat/a-strunb.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -783,7 +783,8 @@ package body Ada.Strings.Unbounded is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String) is\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class;\n+      V : Unbounded_String) is\n    begin\n       String'Put_Image (S, To_String (V));\n    end Put_Image;"}, {"sha": "89c8339d7539810962046d6984fb4d78d5c72211", "filename": "gcc/ada/libgnat/a-strunb.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -41,7 +41,7 @@ pragma Assertion_Policy (Pre => Ignore);\n \n with Ada.Strings.Maps;\n with Ada.Finalization;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n --  The language-defined package Strings.Unbounded provides a private type\n --  Unbounded_String and a set of operations. An object of type\n@@ -748,7 +748,8 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class;\n+      V : Unbounded_String);\n \n    --  The Unbounded_String is using a buffered implementation to increase\n    --  speed of the Append/Delete/Insert procedures. The Reference string"}, {"sha": "506b614f7bf651000673a2f649040ac4fbfaee00", "filename": "gcc/ada/libgnat/a-strunb__shared.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -1291,7 +1291,8 @@ package body Ada.Strings.Unbounded is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String) is\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class;\n+      V : Unbounded_String) is\n    begin\n       String'Put_Image (S, To_String (V));\n    end Put_Image;"}, {"sha": "6382252b9082f4db835daaa5fa35b75d392c5220", "filename": "gcc/ada/libgnat/a-strunb__shared.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -78,7 +78,7 @@ pragma Assertion_Policy (Pre => Ignore);\n with Ada.Strings.Maps;\n private with Ada.Finalization;\n private with System.Atomic_Counters;\n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n package Ada.Strings.Unbounded with\n   Initial_Condition => Length (Null_Unbounded_String) = 0\n@@ -744,7 +744,8 @@ private\n    end record with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class;\n+      V : Unbounded_String);\n \n    pragma Stream_Convert (Unbounded_String, To_Unbounded, To_String);\n    --  Provide stream routines without dragging in Ada.Streams"}, {"sha": "bc0c6ce4355a6b640a0302f14e8b06bdd0fbfc52", "filename": "gcc/ada/libgnat/a-sttebu.adb", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-sttebu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-sttebu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-sttebu.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,121 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                         ADA.STRINGS.TEXT_BUFFERS                         --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Strings.UTF_Encoding.Wide_Strings;\n+with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n+\n+package body Ada.Strings.Text_Buffers is\n+   function Current_Indent\n+     (Buffer : Root_Buffer_Type) return Text_Buffer_Count is\n+     (Text_Buffer_Count (Buffer.Indentation));\n+\n+   procedure Increase_Indent\n+     (Buffer : in out Root_Buffer_Type;\n+      Amount :        Text_Buffer_Count := Standard_Indent)\n+   is\n+   begin\n+      Buffer.Indentation := @ + Natural (Amount);\n+   end Increase_Indent;\n+\n+   procedure Decrease_Indent\n+     (Buffer : in out Root_Buffer_Type;\n+      Amount :        Text_Buffer_Count := Standard_Indent)\n+   is\n+   begin\n+      Buffer.Indentation := @ - Natural (Amount);\n+   end Decrease_Indent;\n+\n+   package body Output_Mapping is\n+      --  Implement indentation in Put_UTF_8 and New_Line.\n+      --  Implement other output procedures using Put_UTF_8.\n+\n+      procedure Put (Buffer : in out Buffer_Type; Item : String) is\n+      begin\n+         Put_UTF_8 (Buffer, Item);\n+      end Put;\n+\n+      procedure Wide_Put (Buffer : in out Buffer_Type; Item : Wide_String) is\n+      begin\n+         Buffer.All_8_Bits :=\n+           @ and then\n+           (for all WChar of Item => Wide_Character'Pos (WChar) < 256);\n+\n+         Put_UTF_8 (Buffer, UTF_Encoding.Wide_Strings.Encode (Item));\n+      end Wide_Put;\n+\n+      procedure Wide_Wide_Put\n+        (Buffer : in out Buffer_Type; Item : Wide_Wide_String)\n+      is\n+      begin\n+         Buffer.All_8_Bits :=\n+           @ and then\n+           (for all WWChar of Item => Wide_Wide_Character'Pos (WWChar) < 256);\n+\n+         Put_UTF_8 (Buffer, UTF_Encoding.Wide_Wide_Strings.Encode (Item));\n+      end Wide_Wide_Put;\n+\n+      procedure Put_UTF_8\n+        (Buffer : in out Buffer_Type;\n+         Item   :        UTF_Encoding.UTF_8_String) is\n+      begin\n+         if Item'Length = 0 then\n+            return;\n+         end if;\n+\n+         if Buffer.Indent_Pending then\n+            Buffer.Indent_Pending := False;\n+            if Buffer.Indentation > 0 then\n+               Put_UTF_8_Implementation\n+                 (Buffer, (1 .. Buffer.Indentation => ' '));\n+            end if;\n+         end if;\n+\n+         Put_UTF_8_Implementation (Buffer, Item);\n+      end Put_UTF_8;\n+\n+      procedure Wide_Put_UTF_16\n+        (Buffer : in out Buffer_Type; Item : UTF_Encoding.UTF_16_Wide_String)\n+      is\n+      begin\n+         Wide_Wide_Put (Buffer, UTF_Encoding.Wide_Wide_Strings.Decode (Item));\n+      end Wide_Put_UTF_16;\n+\n+      procedure New_Line (Buffer : in out Buffer_Type) is\n+      begin\n+         Buffer.Indent_Pending := False; --  just for a moment\n+         Put (Buffer, (1 => ASCII.LF));\n+         Buffer.Indent_Pending := True;\n+         Buffer.UTF_8_Column   := 1;\n+      end New_Line;\n+\n+   end Output_Mapping;\n+\n+end Ada.Strings.Text_Buffers;"}, {"sha": "4f6fafc09b33725951b23e726ff06819954816b0", "filename": "gcc/ada/libgnat/a-sttebu.ads", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-sttebu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fa-sttebu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-sttebu.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -0,0 +1,135 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                         ADA.STRINGS.TEXT_BUFFERS                         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Strings.UTF_Encoding;\n+package Ada.Strings.Text_Buffers with\n+   Pure\n+is\n+\n+   type Text_Buffer_Count is range 0 .. Integer'Last;\n+\n+   New_Line_Count : constant Text_Buffer_Count := 1;\n+   --  There is no support for two-character CR/LF line endings.\n+\n+   type Root_Buffer_Type is abstract tagged limited private with\n+      Default_Initial_Condition => Current_Indent (Root_Buffer_Type) = 0;\n+\n+   procedure Put (Buffer : in out Root_Buffer_Type; Item : String) is abstract;\n+\n+   procedure Wide_Put\n+     (Buffer : in out Root_Buffer_Type; Item : Wide_String) is abstract;\n+\n+   procedure Wide_Wide_Put\n+     (Buffer : in out Root_Buffer_Type; Item : Wide_Wide_String) is abstract;\n+\n+   procedure Put_UTF_8\n+     (Buffer : in out Root_Buffer_Type;\n+      Item   :        UTF_Encoding.UTF_8_String) is abstract;\n+\n+   procedure Wide_Put_UTF_16\n+     (Buffer : in out Root_Buffer_Type;\n+      Item   :        UTF_Encoding.UTF_16_Wide_String) is abstract;\n+\n+   procedure New_Line (Buffer : in out Root_Buffer_Type) is abstract;\n+\n+   Standard_Indent : constant Text_Buffer_Count := 3;\n+\n+   function Current_Indent\n+     (Buffer : Root_Buffer_Type) return Text_Buffer_Count;\n+\n+   procedure Increase_Indent\n+     (Buffer : in out Root_Buffer_Type;\n+      Amount :        Text_Buffer_Count := Standard_Indent) with\n+      Post'Class => Current_Indent (Buffer) =\n+      Current_Indent (Buffer)'Old + Amount;\n+\n+   procedure Decrease_Indent\n+     (Buffer : in out Root_Buffer_Type;\n+      Amount :        Text_Buffer_Count := Standard_Indent) with\n+      Pre'Class => Current_Indent (Buffer) >= Amount\n+      or else raise Constraint_Error,\n+      Post'Class => Current_Indent (Buffer) =\n+      Current_Indent (Buffer)'Old - Amount;\n+\n+private\n+\n+   type Root_Buffer_Type is abstract tagged limited record\n+      Indentation : Natural := 0;\n+      --  Current indentation\n+\n+      Indent_Pending : Boolean := True;\n+      --  Set by calls to New_Line, cleared when indentation emitted.\n+\n+      UTF_8_Length : Natural := 0;\n+      --  Count of UTF_8 characters in the buffer\n+\n+      UTF_8_Column : Positive := 1;\n+      --  Column in which next character will be written.\n+      --  Calling New_Line resets to 1.\n+\n+      All_7_Bits : Boolean := True;\n+      --  True if all characters seen so far fit in 7 bits\n+      All_8_Bits : Boolean := True;\n+      --  True if all characters seen so far fit in 8 bits\n+\n+   end record;\n+\n+   generic\n+      --  This generic allows a client to extend Root_Buffer_Type without\n+      --  having to implement any of the abstract subprograms other than\n+      --  Put_UTF_8 (i.e., Put, Wide_Put, Wide_Wide_Put, Wide_Put_UTF_16,\n+      --  and New_Line). Without this generic, each client would have to\n+      --  duplicate the implementations of those 5 subprograms.\n+      --  This generic also takes care of handling indentation, thereby\n+      --  avoiding further code duplication. The name \"Output_Mapping\" isn't\n+      --  wonderful, but it refers to the idea that this package knows how\n+      --  to implement all the other output operations in terms of\n+      --  just Put_UTF_8.\n+      --\n+      --  The classwide parameter type here is somewhat tricky;\n+      --  there are no dispatching calls associated with this parameter.\n+      --  It would be more accurate to say that the parameter is of type\n+      --  Output_Mapping.Buffer_Type'Class, but that type hasn't been declared\n+      --  yet. Instantiators will typically declare a non-abstract extension,\n+      --  B2, of the buffer type, B1, declared in their instantiation. The\n+      --  actual Put_UTF_8_Implementation parameter may then have a\n+      --  precondition \"Buffer in B2'Class\" and that subprogram can safely\n+      --  access components declared as part of the declaration of B2.\n+\n+      with procedure Put_UTF_8_Implementation\n+        (Buffer : in out Root_Buffer_Type'Class;\n+         Item   :        UTF_Encoding.UTF_8_String);\n+   package Output_Mapping is\n+      type Buffer_Type is abstract new Root_Buffer_Type with null record;\n+\n+      overriding procedure Put (Buffer : in out Buffer_Type; Item : String);\n+\n+      overriding procedure Wide_Put\n+        (Buffer : in out Buffer_Type; Item : Wide_String);\n+\n+      overriding procedure Wide_Wide_Put\n+        (Buffer : in out Buffer_Type; Item : Wide_Wide_String);\n+\n+      overriding procedure Put_UTF_8\n+        (Buffer : in out Buffer_Type;\n+         Item   :        UTF_Encoding.UTF_8_String);\n+\n+      overriding procedure Wide_Put_UTF_16\n+        (Buffer : in out Buffer_Type; Item : UTF_Encoding.UTF_16_Wide_String);\n+\n+      overriding procedure New_Line (Buffer : in out Buffer_Type);\n+   end Output_Mapping;\n+\n+end Ada.Strings.Text_Buffers;"}, {"sha": "0112491d0fac1fdd0878c8844307b9bbbfccf74b", "filename": "gcc/ada/libgnat/a-stteou__bootstrap.ads", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bed4e088a197e89051b520da8bb3631a10f9c0/gcc%2Fada%2Flibgnat%2Fa-stteou__bootstrap.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bed4e088a197e89051b520da8bb3631a10f9c0/gcc%2Fada%2Flibgnat%2Fa-stteou__bootstrap.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stteou__bootstrap.ads?ref=88bed4e088a197e89051b520da8bb3631a10f9c0", "patch": "@@ -1,190 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                          ADA.STRINGS.TEXT_OUTPUT                         --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---            Copyright (C) 2020-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Simplified version used during bootstrap only\n-\n-with Ada.Strings.UTF_Encoding;\n-\n-package Ada.Strings.Text_Output with Pure is\n-\n-   --  This package provides a \"Sink\" abstraction, to which characters of type\n-   --  Character, Wide_Character, and Wide_Wide_Character can be sent. This\n-   --  type is used by the Put_Image attribute. In particular, T'Put_Image has\n-   --  the following parameter types:\n-   --\n-   --     procedure T'Put_Image (S : in out Sink'Class; V : T);\n-   --\n-   --  The default generated code for Put_Image of a composite type will\n-   --  typically call Put_Image on the components.\n-   --\n-   --  This is not a fully general abstraction that can be arbitrarily\n-   --  extended. It is designed with particular extensions in mind, and these\n-   --  extensions are declared in child packages of this package, because they\n-   --  depend on implementation details in the private part of this\n-   --  package.\n-   --\n-   --  Users are not expected to extend type Sink.\n-   --\n-   --  The primary extensions of Sink are:\n-   --\n-   --     Buffer. The characters sent to a Buffer are stored in memory, and can\n-   --     be retrieved via Get functions. This is intended for the\n-   --     implementation of the 'Image attribute. The compiler will generate a\n-   --     T'Image function that declares a local Buffer, sends characters to\n-   --     it, and then returns a call to Get, Destroying the Buffer on return.\n-   --\n-   --       function T'Image (V : T) return String is\n-   --          Buf : Buffer := New_Buffer (...);\n-   --       begin\n-   --          T'Put_Image (Buf, V);\n-   --          return Result : constant String := Get (Buf) do\n-   --             Destroy (Buf);\n-   --          end return;\n-   --       end T'Image;\n-   --       ????Perhaps Buffer should be controlled; if you don't like\n-   --       controlled types, call Put_Image directly.\n-   --\n-   --     File. The characters are sent to a file, possibly opened by file\n-   --     name, or possibly standard output or standard error. 'Put_Image\n-   --     can be called directly on a File, thus avoiding any heap allocation.\n-\n-   type Sink (<>) is abstract tagged limited private;\n-   type Sink_Access is access all Sink'Class with Storage_Size => 0;\n-   --  Sink is a character sink; you can send characters to a Sink.\n-   --  UTF-8 encoding is used.\n-\n-   procedure Full_Method (S : in out Sink) is abstract;\n-   procedure Flush_Method (S : in out Sink) is abstract;\n-   --  There is an internal buffer to store the characters. Full_Method is\n-   --  called when the buffer is full, and Flush_Method may be called to flush\n-   --  the buffer. For Buffer, Full_Method allocates more space for more\n-   --  characters, and Flush_Method does nothing. For File, Full_Method and\n-   --  Flush_Method do the same thing: write the characters to the file, and\n-   --  empty the internal buffer.\n-   --\n-   --  These are the only dispatching subprograms on Sink. This is for\n-   --  efficiency; we don't dispatch on every write to the Sink, but only when\n-   --  the internal buffer is full (or upon client request).\n-   --\n-   --  Full_Method and Flush_Method must make the current chunk empty.\n-   --\n-   --  Additional operations operating on Sink'Class are declared in the Utils\n-   --  child, including Full and Flush, which call the above.\n-\n-   function To_Wide (C : Character) return Wide_Character is\n-     (Wide_Character'Val (Character'Pos (C)));\n-   function To_Wide_Wide (C : Character) return Wide_Wide_Character is\n-     (Wide_Wide_Character'Val (Character'Pos (C)));\n-   function To_Wide_Wide (C : Wide_Character) return Wide_Wide_Character is\n-     (Wide_Wide_Character'Val (Wide_Character'Pos (C)));\n-   --  Conversions [Wide_]Character --> [Wide_]Wide_Character.\n-   --  These cannot fail.\n-\n-   function From_Wide (C : Wide_Character) return Character is\n-     (Character'Val (Wide_Character'Pos (C)));\n-   function From_Wide_Wide (C : Wide_Wide_Character) return Character is\n-     (Character'Val (Wide_Wide_Character'Pos (C)));\n-   function From_Wide_Wide (C : Wide_Wide_Character) return Wide_Character is\n-     (Wide_Character'Val (Wide_Wide_Character'Pos (C)));\n-   --  Conversions [Wide_]Wide_Character --> [Wide_]Character.\n-   --  These fail if the character is out of range.\n-\n-   function NL return Character is (ASCII.LF) with Inline;\n-   function Wide_NL return Wide_Character is (To_Wide (Character'(NL)))\n-     with Inline;\n-   function Wide_Wide_NL return Wide_Wide_Character is\n-     (To_Wide_Wide (Character'(NL))) with Inline;\n-   --  Character representing new line. There is no support for CR/LF line\n-   --  endings.\n-\n-   --  We have two subtypes of String that are encoded in UTF-8. UTF_8 cannot\n-   --  contain newline characters; UTF_8_Lines can. Sending UTF_8 data to a\n-   --  Sink is more efficient, because end-of-line processing is not needed.\n-   --  Both of these are more efficient than [[Wide_]Wide_]String, because no\n-   --  encoding is needed.\n-\n-   subtype UTF_8_Lines is UTF_Encoding.UTF_8_String;\n-\n-   subtype UTF_8 is UTF_8_Lines;\n-\n-   Default_Indent_Amount : constant Natural := 4;\n-\n-   Default_Chunk_Length : constant Positive := 500;\n-   --  Experiment shows this value to be reasonably efficient; decreasing it\n-   --  slows things down, but increasing it doesn't gain much.\n-\n-private\n-   --  For Buffer, the \"internal buffer\" mentioned above is implemented as a\n-   --  linked list of chunks. When the current chunk is full, we allocate a new\n-   --  one. For File, there is only one chunk. When it is full, we send the\n-   --  data to the file, and empty it.\n-\n-   type Chunk;\n-   type Chunk_Access is access all Chunk with Storage_Size => 0;\n-   type Chunk (Length : Positive) is limited record\n-      Next : Chunk_Access := null;\n-      Chars : UTF_8_Lines (1 .. Length);\n-   end record;\n-\n-   type Sink (Chunk_Length : Positive) is abstract tagged limited record\n-      Indent_Amount : Natural;\n-      Column : Positive := 1;\n-      Indentation : Natural := 0;\n-\n-      All_7_Bits : Boolean := True;\n-      --  For optimization of Text_Output.Buffers.Get (cf).\n-      --  True if all characters seen so far fit in 7 bits.\n-      --  7-bit characters are represented the same in Character\n-      --  and in UTF-8, so they don't need translation.\n-\n-      All_8_Bits : Boolean := True;\n-      --  True if all characters seen so far fit in 8 bits.\n-      --  This is needed in Text_Output.Buffers.Get to distinguish\n-      --  the case where all characters are Latin-1 (so it should\n-      --  decode) from the case where some characters are bigger than\n-      --  8 bits (so the result is implementation defined).\n-\n-      Cur_Chunk : Chunk_Access;\n-      --  Points to the chunk we are currently sending characters to.\n-      --  We want to say:\n-      --     Cur_Chunk : Chunk_Access := Initial_Chunk'Access;\n-      --  but that's illegal, so we have some horsing around to do.\n-\n-      Last : Natural := 0;\n-      --  Last-used character in Cur_Chunk.all.\n-\n-      Initial_Chunk : aliased Chunk (Length => Chunk_Length);\n-      --  For Buffer, this is the first chunk. Subsequent chunks are allocated\n-      --  on the heap. For File, this is the only chunk, and there is no heap\n-      --  allocation.\n-   end record;\n-\n-end Ada.Strings.Text_Output;"}, {"sha": "33960a4591bdc78ddc0a930183ba9df32158cfbe", "filename": "gcc/ada/libgnat/s-putima.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-putima.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -29,10 +29,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Strings.Text_Buffers.Utils;\n+use Ada.Strings.Text_Buffers;\n+use Ada.Strings.Text_Buffers.Utils;\n with Unchecked_Conversion;\n-with Ada.Strings.Text_Output.Utils;\n-use Ada.Strings.Text_Output;\n-use Ada.Strings.Text_Output.Utils;\n \n package body System.Put_Images is\n \n@@ -215,7 +215,7 @@ package body System.Put_Images is\n    begin\n       New_Line (S);\n       Put_7bit (S, '[');\n-      Indent (S, 1);\n+      Increase_Indent (S, 1);\n    end Array_Before;\n \n    procedure Array_Between (S : in out Sink'Class) is\n@@ -226,7 +226,7 @@ package body System.Put_Images is\n \n    procedure Array_After (S : in out Sink'Class) is\n    begin\n-      Outdent (S, 1);\n+      Decrease_Indent (S, 1);\n       Put_7bit (S, ']');\n    end Array_After;\n \n@@ -244,7 +244,7 @@ package body System.Put_Images is\n    begin\n       New_Line (S);\n       Put_7bit (S, '(');\n-      Indent (S, 1);\n+      Increase_Indent (S, 1);\n    end Record_Before;\n \n    procedure Record_Between (S : in out Sink'Class) is\n@@ -255,7 +255,7 @@ package body System.Put_Images is\n \n    procedure Record_After (S : in out Sink'Class) is\n    begin\n-      Outdent (S, 1);\n+      Decrease_Indent (S, 1);\n       Put_7bit (S, ')');\n    end Record_After;\n \n@@ -267,7 +267,7 @@ package body System.Put_Images is\n    procedure Put_Image_Unknown (S : in out Sink'Class; Type_Name : String) is\n    begin\n       Put_UTF_8 (S, \"{\");\n-      Put_String (S, Type_Name);\n+      Put (S, Type_Name);\n       Put_UTF_8 (S, \" object}\");\n    end Put_Image_Unknown;\n "}, {"sha": "4a33e79919c69f827ecb1a91f699bcccb7faa03b", "filename": "gcc/ada/libgnat/s-putima.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-putima.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-putima.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-putima.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Strings.Text_Output;\n+with Ada.Strings.Text_Buffers;\n with System.Unsigned_Types;\n \n package System.Put_Images with Pure is\n@@ -50,7 +50,7 @@ package System.Put_Images with Pure is\n \n    pragma Preelaborate;\n \n-   subtype Sink is Ada.Strings.Text_Output.Sink;\n+   subtype Sink is Ada.Strings.Text_Buffers.Root_Buffer_Type;\n \n    procedure Put_Image_Integer (S : in out Sink'Class; X : Integer);\n    procedure Put_Image_Long_Long_Integer"}, {"sha": "92a91a602e2e08bfb05d68cd482d4ee0c26b797e", "filename": "gcc/ada/libgnat/s-rannum.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rannum.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -86,7 +86,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Strings.Text_Output.Utils;\n with Ada.Unchecked_Conversion;\n \n with System.Random_Seed;\n@@ -689,9 +688,9 @@ is\n    ---------------\n \n    procedure Put_Image\n-     (S : in out Strings.Text_Output.Sink'Class; V : State) is\n+     (S : in out Strings.Text_Buffers.Root_Buffer_Type'Class; V : State) is\n    begin\n-      Strings.Text_Output.Utils.Put_String (S, Image (V));\n+      Strings.Text_Buffers.Put (S, Image (V));\n    end Put_Image;\n \n    -----------"}, {"sha": "99ed57daadd4f68cd70959f3c5f849d034a10803", "filename": "gcc/ada/libgnat/s-rannum.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-rannum.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Flibgnat%2Fs-rannum.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rannum.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -57,7 +57,7 @@\n \n with Interfaces;\n \n-private with Ada.Strings.Text_Output;\n+private with Ada.Strings.Text_Buffers;\n \n package System.Random_Numbers with\n   SPARK_Mode => Off\n@@ -148,7 +148,7 @@ private\n    type State is array (0 .. N - 1) of State_Val with Put_Image => Put_Image;\n \n    procedure Put_Image\n-     (S : in out Ada.Strings.Text_Output.Sink'Class; V : State);\n+     (S : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; V : State);\n \n    type Writable_Access (Self : access Generator) is limited null record;\n    --  Auxiliary type to make Generator a self-referential type"}, {"sha": "6fe6f8567ac2c432af520716a0efc360c88da0c3", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -574,10 +574,11 @@ package body Rtsfind is\n      range Ada_Streams_Stream_IO .. Ada_Streams_Stream_IO;\n \n    subtype Ada_Strings_Descendant is Ada_Descendant\n-     range Ada_Strings_Superbounded .. Ada_Strings_Text_Output_Buffers;\n+     range Ada_Strings_Superbounded .. Ada_Strings_Text_Buffers_Unbounded;\n \n-   subtype Ada_Strings_Text_Output_Descendant is Ada_Strings_Descendant\n-     range Ada_Strings_Text_Output_Utils .. Ada_Strings_Text_Output_Buffers;\n+   subtype Ada_Strings_Text_Buffers_Descendant is Ada_Strings_Descendant\n+     range Ada_Strings_Text_Buffers_Unbounded ..\n+           Ada_Strings_Text_Buffers_Unbounded;\n \n    subtype Ada_Text_IO_Descendant is Ada_Descendant\n      range Ada_Text_IO_Decimal_IO .. Ada_Text_IO_Modular_IO;\n@@ -661,8 +662,8 @@ package body Rtsfind is\n          elsif U_Id in Ada_Strings_Descendant then\n             Name_Buffer (12) := '.';\n \n-            if U_Id in Ada_Strings_Text_Output_Descendant then\n-               Name_Buffer (24) := '.';\n+            if U_Id in Ada_Strings_Text_Buffers_Descendant then\n+               Name_Buffer (25) := '.';\n             end if;\n \n          elsif U_Id in Ada_Text_IO_Descendant then"}, {"sha": "df51477c1399acdce4504c3386466beca02cafde", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -126,12 +126,11 @@ package Rtsfind is\n       Ada_Strings_Wide_Superbounded,\n       Ada_Strings_Wide_Wide_Superbounded,\n       Ada_Strings_Unbounded,\n-      Ada_Strings_Text_Output,\n+      Ada_Strings_Text_Buffers,\n \n-      --  Children of Ada.Strings.Text_Output\n+      --  Children of Ada.Strings.Text_Buffers\n \n-      Ada_Strings_Text_Output_Utils,\n-      Ada_Strings_Text_Output_Buffers,\n+      Ada_Strings_Text_Buffers_Unbounded,\n \n       --  Children of Ada.Text_IO (for Check_Text_IO_Special_Unit)\n \n@@ -604,15 +603,14 @@ package Rtsfind is\n \n      RE_Unbounded_String,                -- Ada.Strings.Unbounded\n \n-     RE_Sink,                            -- Ada.Strings.Text_Output\n+     RE_Root_Buffer_Type,                -- Ada.Strings.Text_Buffers\n+     RE_Put_UTF_8,                       -- Ada.Strings.Text_Buffers\n+     RE_Wide_Wide_Put,                   -- Ada.Strings.Text_Buffers\n \n-     RE_Put_UTF_8,                       -- Ada.Strings.Text_Output.Utils\n-     RE_Put_Wide_Wide_String,            -- Ada.Strings.Text_Output.Utils\n-\n-     RE_Buffer,                          -- Ada.Strings.Text_Output.Buffers\n-     RE_New_Buffer,                      -- Ada.Strings.Text_Output.Buffers\n-     RE_Destroy,                         -- Ada.Strings.Text_Output.Buffers\n-     RE_Get,                             -- Ada.Strings.Text_Output.Buffers\n+     RE_Buffer_Type,                     -- Ada.Strings.Text_Buffers.Unbounded\n+     RE_Get,                             -- Ada.Strings.Text_Buffers.Unbounded\n+     RE_Wide_Get,                        -- Ada.Strings.Text_Buffers.Unbounded\n+     RE_Wide_Wide_Get,                   -- Ada.Strings.Text_Buffers.Unbounded\n \n      RE_Wait_For_Release,                -- Ada.Synchronous_Barriers\n \n@@ -2286,15 +2284,14 @@ package Rtsfind is\n \n      RE_Unbounded_String                 => Ada_Strings_Unbounded,\n \n-     RE_Sink                             => Ada_Strings_Text_Output,\n-\n-     RE_Put_UTF_8                        => Ada_Strings_Text_Output_Utils,\n-     RE_Put_Wide_Wide_String             => Ada_Strings_Text_Output_Utils,\n+     RE_Root_Buffer_Type                 => Ada_Strings_Text_Buffers,\n+     RE_Put_UTF_8                        => Ada_Strings_Text_Buffers,\n+     RE_Wide_Wide_Put                    => Ada_Strings_Text_Buffers,\n \n-     RE_Buffer                           => Ada_Strings_Text_Output_Buffers,\n-     RE_New_Buffer                       => Ada_Strings_Text_Output_Buffers,\n-     RE_Destroy                          => Ada_Strings_Text_Output_Buffers,\n-     RE_Get                              => Ada_Strings_Text_Output_Buffers,\n+     RE_Buffer_Type                      => Ada_Strings_Text_Buffers_Unbounded,\n+     RE_Get                              => Ada_Strings_Text_Buffers_Unbounded,\n+     RE_Wide_Get                         => Ada_Strings_Text_Buffers_Unbounded,\n+     RE_Wide_Wide_Get                    => Ada_Strings_Text_Buffers_Unbounded,\n \n      RE_Wait_For_Release                 => Ada_Synchronous_Barriers,\n "}, {"sha": "b7297e5edfd1d665cc5f92184b25119939c13ed2", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -2432,15 +2432,18 @@ package body Sem_Attr is\n          Analyze_And_Resolve (E1);\n \n          --  Check that the first argument is\n-         --  Ada.Strings.Text_Output.Sink'Class.\n+         --  Ada.Strings.Text_Buffers.Root_Buffer_Type'Class.\n \n          --  Note: the double call to Root_Type here is needed because the\n          --  root type of a class-wide type is the corresponding type (e.g.\n          --  X for X'Class, and we really want to go to the root.)\n \n-         if not Is_RTE (Root_Type (Root_Type (Etype (E1))), RE_Sink) then\n+         if not Is_RTE (Root_Type (Root_Type (Etype (E1))),\n+                        RE_Root_Buffer_Type)\n+         then\n             Error_Attr\n-              (\"expected Ada.Strings.Text_Output.Sink''Class\", E1);\n+              (\"expected Ada.Strings.Text_Buffers.Root_Buffer_Type''Class\",\n+               E1);\n          end if;\n \n          --  Check that the second argument is of the right type"}, {"sha": "1e7b93cc5b56e655e869a5498fd4675bdbb0a5b1", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -626,7 +626,7 @@ package body Sem_Ch10 is\n    --  Start of processing for Analyze_Compilation_Unit\n \n    begin\n-      Exp_Put_Image.Preload_Sink (N);\n+      Exp_Put_Image.Preload_Root_Buffer_Type (N);\n \n       Process_Compilation_Unit_Pragmas (N);\n "}, {"sha": "cfcbe14849882aebb4582d1798b60ddc75ee93f5", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20922782976048592eb9240ad2ab8690b207dc24/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=20922782976048592eb9240ad2ab8690b207dc24", "patch": "@@ -5230,7 +5230,9 @@ package body Sem_Ch13 is\n \n             F := First_Formal (Subp);\n \n-            if No (F) or else Etype (F) /= Class_Wide_Type (RTE (RE_Sink)) then\n+            if No (F)\n+              or else Etype (F) /= Class_Wide_Type (RTE (RE_Root_Buffer_Type))\n+            then\n                return False;\n             end if;\n \n@@ -14171,7 +14173,7 @@ package body Sem_Ch13 is\n       begin\n          Subp_Id := Make_Defining_Identifier (Loc, Sname);\n \n-         --  S : Sink'Class\n+         --  S : Root_Buffer_Type'Class\n \n          Formals := New_List (\n                       Make_Parameter_Specification (Loc,"}]}