{"sha": "31521cd4e243e9108e23a6a0f668a7e958d0d05b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1MjFjZDRlMjQzZTkxMDhlMjNhNmEwZjY2OGE3ZTk1OGQwZDA1Yg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-07-26T19:53:54Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-07-26T19:53:54Z"}, "message": "re PR tree-optimization/22591 (wrong alias information causes an incorrect redundant load elimination)\n\n\n\tPR 22591\n\t* tree-ssa-alias.c (may_alias_p): Remove shortcut that tests\n\twhether a pointer of type T * may point to objects of type T *.\n\ntestsuite/ChangeLog\n\n\tPR 22591\n\t* gcc.dg/tree-ssa/pr22591.c: New test.\n\t* gcc.dg/tree-ssa/20030807-7.c: XFAIL everywhere.\n\nFrom-SVN: r102393", "tree": {"sha": "46ff1d955572ed4e58783492981e66c15ed5997c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46ff1d955572ed4e58783492981e66c15ed5997c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31521cd4e243e9108e23a6a0f668a7e958d0d05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31521cd4e243e9108e23a6a0f668a7e958d0d05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31521cd4e243e9108e23a6a0f668a7e958d0d05b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31521cd4e243e9108e23a6a0f668a7e958d0d05b/comments", "author": null, "committer": null, "parents": [{"sha": "4549941152a49defee9ee0208e646573299ce0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4549941152a49defee9ee0208e646573299ce0e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4549941152a49defee9ee0208e646573299ce0e2"}], "stats": {"total": 87, "additions": 69, "deletions": 18}, "files": [{"sha": "614b253760fa4bf8f4372c94cef87da99e35d286", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31521cd4e243e9108e23a6a0f668a7e958d0d05b", "patch": "@@ -1,3 +1,9 @@\n+2005-07-26  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 22591\n+\t* tree-ssa-alias.c (may_alias_p): Remove shortcut that tests\n+\twhether a pointer of type T * may point to objects of type T *.\n+\n 2005-07-26  DJ Delorie  <dj@redhat.com>\n \n \t* configure: Regenerate."}, {"sha": "1025b6b9e4719420771212862831b71fe1b502f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31521cd4e243e9108e23a6a0f668a7e958d0d05b", "patch": "@@ -1,3 +1,9 @@\n+2005-07-26  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 22591\n+\t* gcc.dg/tree-ssa/pr22591.c: New test.\n+\t* gcc.dg/tree-ssa/20030807-7.c: XFAIL everywhere.\n+\n 2005-07-26  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR libobjc/22606"}, {"sha": "253c27ac4f739d2f6fdcabe38f40756207f2c547", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030807-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030807-7.c?ref=31521cd4e243e9108e23a6a0f668a7e958d0d05b", "patch": "@@ -34,5 +34,5 @@ simplify_condition (cond_p)\n \n /* There should be exactly one IF conditional.  TBAA is not able to \n    determine that 'decl' and 'cond' can't alias.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom3\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"dom3\" } } */"}, {"sha": "f1f5ec84932cf5c5bd96c51c27229fbe44aa136f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr22591.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22591.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22591.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr22591.c?ref=31521cd4e243e9108e23a6a0f668a7e958d0d05b", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort (); \n+ \n+typedef struct _Node \n+{ \n+  struct _Node *next, *prev; \n+} Node; \n+ \n+void __attribute__ ((noinline)) append (Node * q, Node * p) \n+{ \n+  p->next = q; \n+  p->prev = q; \n+  q->next = p; \n+  q->prev = p; \n+} \n+ \n+inline void \n+swap (Node ** a, Node ** b) \n+{ \n+  Node *tmp = *a; \n+  *a = *b; \n+  *b = tmp; \n+} \n+ \n+/* Miscompilation seems to happen here. If one removes the if condition \n+   (which should be true) the program works fine.  */ \n+void \n+ListSwap (Node * x, Node * y) \n+{ \n+  Node *tmp; \n+  if (x->next) \n+    { \n+      swap (&x->next, &y->next); \n+      swap (&x->prev, &y->prev); \n+      x->next->prev = x->prev->next = x; \n+      y->next->prev = y->prev->next = y; \n+    } \n+} \n+ \n+int \n+main () \n+{ \n+  Node A, A1, B, B1; \n+ \n+  append (&A, &A1); \n+  append (&B, &B1); \n+ \n+  ListSwap (&A, &B); \n+ \n+  if (&A != A.next->prev) \n+    abort (); \n+\n+  return 0;\n+}"}, {"sha": "d2079030cde5c65f364a39c08af8ac84f5021f4a", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31521cd4e243e9108e23a6a0f668a7e958d0d05b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=31521cd4e243e9108e23a6a0f668a7e958d0d05b", "patch": "@@ -1511,23 +1511,6 @@ may_alias_p (tree ptr, HOST_WIDE_INT mem_alias_set,\n \n   alias_stats.tbaa_queries++;\n \n-  /* If VAR is a pointer with the same alias set as PTR, then dereferencing\n-     PTR can't possibly affect VAR.  Note, that we are specifically testing\n-     for PTR's alias set here, not its pointed-to type.  We also can't\n-     do this check with relaxed aliasing enabled.  */\n-  if (POINTER_TYPE_P (TREE_TYPE (var))\n-      && var_alias_set != 0\n-      && mem_alias_set != 0)\n-    {\n-      HOST_WIDE_INT ptr_alias_set = get_alias_set (ptr);\n-      if (ptr_alias_set == var_alias_set)\n-\t{\n-\t  alias_stats.alias_noalias++;\n-\t  alias_stats.tbaa_resolved++;\n-\t  return false;\n-\t}\n-    }\n-\n   /* If the alias sets don't conflict then MEM cannot alias VAR.  */\n   if (!alias_sets_conflict_p (mem_alias_set, var_alias_set))\n     {"}]}