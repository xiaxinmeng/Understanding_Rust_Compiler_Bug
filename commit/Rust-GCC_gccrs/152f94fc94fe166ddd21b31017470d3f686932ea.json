{"sha": "152f94fc94fe166ddd21b31017470d3f686932ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyZjk0ZmM5NGZlMTY2ZGRkMjFiMzEwMTc0NzBkM2Y2ODY5MzJlYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-28T19:22:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-28T19:22:10Z"}, "message": "Warning fixes:\n\n        * class.c (maybe_add_interface): Remove unused variable\n        `interface_binfo'.\n        (make_class_data): Use = for assignment, not ==.  Likewise.\n        (emit_register_classes): Remove unused variable `decl'.\n        * lex.c: Fix comment so as not to contain an embedded `/*'.\n        * verify.c (verify_jvm_instructions): Remove unused variable\n        `self_type'.\n\nFrom-SVN: r26046", "tree": {"sha": "bc9d1db851875472c8c6aa617724097266558a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc9d1db851875472c8c6aa617724097266558a6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152f94fc94fe166ddd21b31017470d3f686932ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f94fc94fe166ddd21b31017470d3f686932ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152f94fc94fe166ddd21b31017470d3f686932ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f94fc94fe166ddd21b31017470d3f686932ea/comments", "author": null, "committer": null, "parents": [{"sha": "3228bc05fc4414db84bd0a81099d22ff1bd4a4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3228bc05fc4414db84bd0a81099d22ff1bd4a4e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3228bc05fc4414db84bd0a81099d22ff1bd4a4e9"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "977c6a82e360f621e7634d3a36a2aa906d8ee92b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=152f94fc94fe166ddd21b31017470d3f686932ea", "patch": "@@ -1,3 +1,15 @@\n+Sun Mar 28 22:12:10 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (maybe_add_interface): Remove unused variable\n+\t`interface_binfo'.\n+\t(make_class_data): Use = for assignment, not ==.  Likewise.\n+\t(emit_register_classes): Remove unused variable `decl'.\n+\n+\t* lex.c: Fix comment so as not to contain an embedded `/*'.\n+\n+\t* verify.c (verify_jvm_instructions): Remove unused variable\n+\t`self_type'.\t\n+\n Sat Mar 27 15:49:18 1999  Per Bothner  <bothner@cygnus.com>\n \n \t* parse.y (complete_loop_body):  Rename to finish_loop_body."}, {"sha": "4c924d063ab92ce1d4eade54b9412e9c820eb5e6", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=152f94fc94fe166ddd21b31017470d3f686932ea", "patch": "@@ -333,7 +333,6 @@ maybe_add_interface (this_class, interface_class)\n      tree this_class, interface_class;\n {\n   tree basetype_vec = TYPE_BINFO_BASETYPES (this_class);\n-  tree interface_binfo = make_tree_vec (6);\n   int i;\n   int n = TREE_VEC_LENGTH (basetype_vec);\n   for (i = 0; ; i++)\n@@ -1100,7 +1099,7 @@ make_class_data (type)\n     {\n       int super_index = alloc_class_constant (super);\n       super = build_int_2 (super_index, 0);\n-      TREE_TYPE (super) == ptr_type_node;\n+      TREE_TYPE (super) = ptr_type_node;\n     }\n \n   /* Build and emit the array of implemented interfaces. */\n@@ -1126,7 +1125,7 @@ make_class_data (type)\n \t    {\n \t\tint int_index = alloc_class_constant (iclass);\n \t\tindex = build_int_2 (int_index, 0);\n-\t\tTREE_TYPE (index) == ptr_type_node;\n+\t\tTREE_TYPE (index) = ptr_type_node;\n \t    }\n \t  init = tree_cons (NULL_TREE, index, init); \n \t}\n@@ -1703,8 +1702,6 @@ register_class ()\n void\n emit_register_classes ()\n {\n-  tree decl = getdecls ();\n-\n   extern tree get_file_function_name PROTO((int));\n   tree init_name = get_file_function_name ('I');\n   tree init_type = build_function_type (void_type_node, end_params_node);"}, {"sha": "dae7ce7ead54f6680252134bf3d5d55ff7496fbe", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=152f94fc94fe166ddd21b31017470d3f686932ea", "patch": "@@ -379,7 +379,7 @@ java_lineterminator (c)\n }\n \n /* Parse the end of a C style comment.\n- * C is the first character after the '/*'. */\n+ * C is the first character following the '/' and '*'. */\n static void\n java_parse_end_comment (c)\n      unicode_t c;"}, {"sha": "1a233a23030b13b07fd4ad18e45f792da9ec89d9", "filename": "gcc/java/verify.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f94fc94fe166ddd21b31017470d3f686932ea/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=152f94fc94fe166ddd21b31017470d3f686932ea", "patch": "@@ -725,8 +725,6 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \tfield:\n \t  {\n \t    int index = IMMEDIATE_u2;\n-\t    tree self_type = get_class_constant\n-\t      (jcf, COMPONENT_REF_CLASS_INDEX (&current_jcf->cpool, index));\n \t    tree field_signature = COMPONENT_REF_SIGNATURE (&current_jcf->cpool, index);\n \t    tree field_type = get_type_from_signature (field_signature);\n \t    if (is_putting)"}]}