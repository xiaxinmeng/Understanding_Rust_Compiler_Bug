{"sha": "fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0YmE0YWZmZTk0ZDZiODgyNDJmMzhhYWJlN2ZlNDgwZmM2ZmY0ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-01T13:48:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-01T13:48:16Z"}, "message": "re PR c++/50500 ([C++0x] [DR 1082] move constructor should cause copy constructor to be deleted, but still declared)\n\n\tPR c++/50500\n\tDR 1082\n\t* search.c (lookup_fnfields_idx_nolazy): Split out from...\n\t(lookup_fnfields_1): ...here.\n\t(lookup_fnfields_slot_nolazy): Use it.\n\t* cp-tree.h: Declare it.\n\t* class.c (type_has_move_assign): Use it.\n\t(type_has_user_declared_move_assign): Likewise.\n\nFrom-SVN: r180738", "tree": {"sha": "0ead65768f287c4f0f92824714d28687a0d9a62e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ead65768f287c4f0f92824714d28687a0d9a62e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a31895d78b4e9873da76cb58b278e3216ca6fcc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31895d78b4e9873da76cb58b278e3216ca6fcc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31895d78b4e9873da76cb58b278e3216ca6fcc7"}], "stats": {"total": 102, "additions": 69, "deletions": 33}, "files": [{"sha": "1b40250b4219943ed0de9a59c9504046fc08c754", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "patch": "@@ -1,3 +1,14 @@\n+2011-11-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50500\n+\tDR 1082\n+\t* search.c (lookup_fnfields_idx_nolazy): Split out from...\n+\t(lookup_fnfields_1): ...here.\n+\t(lookup_fnfields_slot_nolazy): Use it.\n+\t* cp-tree.h: Declare it.\n+\t* class.c (type_has_move_assign): Use it.\n+\t(type_has_user_declared_move_assign): Likewise.\n+\n 2011-10-31  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50920"}, {"sha": "41d182a4ca88c2d486d3eeec2549cdae62234c9f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "patch": "@@ -4485,7 +4485,7 @@ type_has_move_assign (tree t)\n       lazily_declare_fn (sfk_move_assignment, t);\n     }\n \n-  for (fns = lookup_fnfields_slot (t, ansi_assopname (NOP_EXPR));\n+  for (fns = lookup_fnfields_slot_nolazy (t, ansi_assopname (NOP_EXPR));\n        fns; fns = OVL_NEXT (fns))\n     if (move_fn_p (OVL_CURRENT (fns)))\n       return true;\n@@ -4530,7 +4530,7 @@ type_has_user_declared_move_assign (tree t)\n   if (CLASSTYPE_LAZY_MOVE_ASSIGN (t))\n     return false;\n \n-  for (fns = lookup_fnfields_slot (t, ansi_assopname (NOP_EXPR));\n+  for (fns = lookup_fnfields_slot_nolazy (t, ansi_assopname (NOP_EXPR));\n        fns; fns = OVL_NEXT (fns))\n     {\n       tree fn = OVL_CURRENT (fns);"}, {"sha": "ac42e0e1572abb129d8fecba9d2187f13bf3a7e9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "patch": "@@ -5328,6 +5328,7 @@ extern tree lookup_field_1\t\t\t(tree, tree, bool);\n extern tree lookup_field\t\t\t(tree, tree, int, bool);\n extern int lookup_fnfields_1\t\t\t(tree, tree);\n extern tree lookup_fnfields_slot\t\t(tree, tree);\n+extern tree lookup_fnfields_slot_nolazy\t\t(tree, tree);\n extern int class_method_index_for_fn\t\t(tree, tree);\n extern tree lookup_fnfields\t\t\t(tree, tree, int);\n extern tree lookup_member\t\t\t(tree, tree, int, bool);"}, {"sha": "5f60eeedf4e1f31fa24cb28cac690d93395186b9", "filename": "gcc/cp/search.c", "status": "modified", "additions": 55, "deletions": 31, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "patch": "@@ -1335,10 +1335,11 @@ lookup_conversion_operator (tree class_type, tree type)\n }\n \n /* TYPE is a class type. Return the index of the fields within\n-   the method vector with name NAME, or -1 if no such field exists.  */\n+   the method vector with name NAME, or -1 if no such field exists.\n+   Does not lazily declare implicitly-declared member functions.  */\n \n-int\n-lookup_fnfields_1 (tree type, tree name)\n+static int\n+lookup_fnfields_idx_nolazy (tree type, tree name)\n {\n   VEC(tree,gc) *method_vec;\n   tree fn;\n@@ -1348,34 +1349,6 @@ lookup_fnfields_1 (tree type, tree name)\n   if (!CLASS_TYPE_P (type))\n     return -1;\n \n-  if (COMPLETE_TYPE_P (type))\n-    {\n-      if ((name == ctor_identifier\n-\t   || name == base_ctor_identifier\n-\t   || name == complete_ctor_identifier))\n-\t{\n-\t  if (CLASSTYPE_LAZY_DEFAULT_CTOR (type))\n-\t    lazily_declare_fn (sfk_constructor, type);\n-\t  if (CLASSTYPE_LAZY_COPY_CTOR (type))\n-\t    lazily_declare_fn (sfk_copy_constructor, type);\n-\t  if (CLASSTYPE_LAZY_MOVE_CTOR (type))\n-\t    lazily_declare_fn (sfk_move_constructor, type);\n-\t}\n-      else if (name == ansi_assopname (NOP_EXPR))\n-\t{\n-\t  if (CLASSTYPE_LAZY_COPY_ASSIGN (type))\n-\t    lazily_declare_fn (sfk_copy_assignment, type);\n-\t  if (CLASSTYPE_LAZY_MOVE_ASSIGN (type))\n-\t    lazily_declare_fn (sfk_move_assignment, type);\n-\t}\n-      else if ((name == dtor_identifier\n-\t\t|| name == base_dtor_identifier\n-\t\t|| name == complete_dtor_identifier\n-\t\t|| name == deleting_dtor_identifier)\n-\t       && CLASSTYPE_LAZY_DESTRUCTOR (type))\n-\tlazily_declare_fn (sfk_destructor, type);\n-    }\n-\n   method_vec = CLASSTYPE_METHOD_VEC (type);\n   if (!method_vec)\n     return -1;\n@@ -1445,6 +1418,46 @@ lookup_fnfields_1 (tree type, tree name)\n   return -1;\n }\n \n+/* TYPE is a class type. Return the index of the fields within\n+   the method vector with name NAME, or -1 if no such field exists.  */\n+\n+int\n+lookup_fnfields_1 (tree type, tree name)\n+{\n+  if (!CLASS_TYPE_P (type))\n+    return -1;\n+\n+  if (COMPLETE_TYPE_P (type))\n+    {\n+      if ((name == ctor_identifier\n+\t   || name == base_ctor_identifier\n+\t   || name == complete_ctor_identifier))\n+\t{\n+\t  if (CLASSTYPE_LAZY_DEFAULT_CTOR (type))\n+\t    lazily_declare_fn (sfk_constructor, type);\n+\t  if (CLASSTYPE_LAZY_COPY_CTOR (type))\n+\t    lazily_declare_fn (sfk_copy_constructor, type);\n+\t  if (CLASSTYPE_LAZY_MOVE_CTOR (type))\n+\t    lazily_declare_fn (sfk_move_constructor, type);\n+\t}\n+      else if (name == ansi_assopname (NOP_EXPR))\n+\t{\n+\t  if (CLASSTYPE_LAZY_COPY_ASSIGN (type))\n+\t    lazily_declare_fn (sfk_copy_assignment, type);\n+\t  if (CLASSTYPE_LAZY_MOVE_ASSIGN (type))\n+\t    lazily_declare_fn (sfk_move_assignment, type);\n+\t}\n+      else if ((name == dtor_identifier\n+\t\t|| name == base_dtor_identifier\n+\t\t|| name == complete_dtor_identifier\n+\t\t|| name == deleting_dtor_identifier)\n+\t       && CLASSTYPE_LAZY_DESTRUCTOR (type))\n+\tlazily_declare_fn (sfk_destructor, type);\n+    }\n+\n+  return lookup_fnfields_idx_nolazy (type, name);\n+}\n+\n /* TYPE is a class type. Return the field within the method vector with\n    name NAME, or NULL_TREE if no such field exists.  */\n \n@@ -1457,6 +1470,17 @@ lookup_fnfields_slot (tree type, tree name)\n   return VEC_index (tree, CLASSTYPE_METHOD_VEC (type), ix);\n }\n \n+/* As above, but avoid lazily declaring functions.  */\n+\n+tree\n+lookup_fnfields_slot_nolazy (tree type, tree name)\n+{\n+  int ix = lookup_fnfields_idx_nolazy (complete_type (type), name);\n+  if (ix < 0)\n+    return NULL_TREE;\n+  return VEC_index (tree, CLASSTYPE_METHOD_VEC (type), ix);\n+}\n+\n /* Like lookup_fnfields_1, except that the name is extracted from\n    FUNCTION, which is a FUNCTION_DECL or a TEMPLATE_DECL.  */\n "}]}