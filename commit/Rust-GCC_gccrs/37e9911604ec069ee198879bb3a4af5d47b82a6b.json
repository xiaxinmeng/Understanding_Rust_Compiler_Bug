{"sha": "37e9911604ec069ee198879bb3a4af5d47b82a6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdlOTkxMTYwNGVjMDY5ZWUxOTg4NzliYjNhNGFmNWQ0N2I4MmE2Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-03-21T17:36:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-03-21T17:36:47Z"}, "message": "re PR middle-end/48087 (-Wall -Werror adds warnings over and above those generated by -Wall)\n\n\tPR middle-end/48087\n\t* diagnostic.def (DK_WERROR): New kind.\n\t* diagnostic.h (werrorcount): Define.\n\t* diagnostic.c (diagnostic_report_diagnostic): For DK_WARNING\n\tpromoted to DK_ERROR, increment DK_WERROR counter instead of\n\tDK_ERROR counter.\n\t* toplev.c (toplev_main): Call print_ignored_options even if\n\tjust werrorcount is non-zero.  Exit with FATAL_EXIT_CODE\n\teven if just werrorcount is non-zero.\n\n\t* pt.c (convert_nontype_argument): Count werrorcount as warnings.\n\t* call.c (build_temp): Likewise.\n\t* method.c (synthesize_method): Likewise.\n\t* typeck.c (convert_for_initialization): Likewise.\n\nFrom-SVN: r196887", "tree": {"sha": "e5e6b0ddf9668c7b20ff0d85dbd749ba6244b7e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5e6b0ddf9668c7b20ff0d85dbd749ba6244b7e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37e9911604ec069ee198879bb3a4af5d47b82a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e9911604ec069ee198879bb3a4af5d47b82a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e9911604ec069ee198879bb3a4af5d47b82a6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e9911604ec069ee198879bb3a4af5d47b82a6b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c845cfe1af6a72609e04a68b967f2b919599b32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c845cfe1af6a72609e04a68b967f2b919599b32b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c845cfe1af6a72609e04a68b967f2b919599b32b"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "8877f658ee7c1ecaae208ae043c186abec0899c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -1,5 +1,15 @@\n 2013-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/48087\n+\t* diagnostic.def (DK_WERROR): New kind.\n+\t* diagnostic.h (werrorcount): Define.\n+\t* diagnostic.c (diagnostic_report_diagnostic): For DK_WARNING\n+\tpromoted to DK_ERROR, increment DK_WERROR counter instead of\n+\tDK_ERROR counter.\n+\t* toplev.c (toplev_main): Call print_ignored_options even if\n+\tjust werrorcount is non-zero.  Exit with FATAL_EXIT_CODE\n+\teven if just werrorcount is non-zero.\n+\n \tPR debug/55608\n \t* dwarf2out.c (tree_add_const_value_attribute): Call ggc_free (array)\n \ton failure."}, {"sha": "377528d62a522adc4a2fc1a8f0cb08d49a10aa41", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -1,3 +1,11 @@\n+2013-03-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/48087\n+\t* pt.c (convert_nontype_argument): Count werrorcount as warnings.\n+\t* call.c (build_temp): Likewise.\n+\t* method.c (synthesize_method): Likewise.\n+\t* typeck.c (convert_for_initialization): Likewise.\n+\n 2013-03-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* call.c (build_conditional_expr_1): Fold VEC_COND_EXPR."}, {"sha": "87fbb2ef02028ed37dc06f6ed4c3db065acf4fac", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -5709,12 +5709,12 @@ build_temp (tree expr, tree type, int flags,\n   int savew, savee;\n   vec<tree, va_gc> *args;\n \n-  savew = warningcount, savee = errorcount;\n+  savew = warningcount + werrorcount, savee = errorcount;\n   args = make_tree_vector_single (expr);\n   expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    &args, type, flags, complain);\n   release_tree_vector (args);\n-  if (warningcount > savew)\n+  if (warningcount + werrorcount > savew)\n     *diagnostic_kind = DK_WARNING;\n   else if (errorcount > savee)\n     *diagnostic_kind = DK_ERROR;"}, {"sha": "316c5d3b8ebd9efec15df1ee9487c20009e41837", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -755,7 +755,7 @@ synthesize_method (tree fndecl)\n   tree stmt;\n   location_t save_input_location = input_location;\n   int error_count = errorcount;\n-  int warning_count = warningcount;\n+  int warning_count = warningcount + werrorcount;\n \n   /* Reset the source location, we might have been previously\n      deferred, and thus have saved where we were first needed.  */\n@@ -817,7 +817,7 @@ synthesize_method (tree fndecl)\n \n   pop_deferring_access_checks ();\n \n-  if (error_count != errorcount || warning_count != warningcount)\n+  if (error_count != errorcount || warning_count != warningcount + werrorcount)\n     inform (input_location, \"synthesized method %qD first required here \",\n \t    fndecl);\n }"}, {"sha": "f8153059f7d9f9a59628ece83cf4cf188ec78670", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -5601,12 +5601,12 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t{\n \t  if (complain & tf_error)\n \t    {\n-\t      int errs = errorcount, warns = warningcount;\n+\t      int errs = errorcount, warns = warningcount + werrorcount;\n \t      if (processing_template_decl\n \t\t  && !require_potential_constant_expression (expr))\n \t\treturn NULL_TREE;\n \t      expr = cxx_constant_value (expr);\n-\t      if (errorcount > errs || warningcount > warns)\n+\t      if (errorcount > errs || warningcount + werrorcount > warns)\n \t\tinform (EXPR_LOC_OR_HERE (expr),\n \t\t\t\"in template argument for type %qT \", type);\n \t      if (expr == error_mark_node)"}, {"sha": "c58b7b375f2de211327c3fa20e40eefaf335c299", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -7977,11 +7977,11 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n       int savew = 0, savee = 0;\n \n       if (fndecl)\n-\tsavew = warningcount, savee = errorcount;\n+\tsavew = warningcount + werrorcount, savee = errorcount;\n       rhs = initialize_reference (type, rhs, flags, complain);\n       if (fndecl)\n \t{\n-\t  if (warningcount > savew)\n+\t  if (warningcount + werrorcount > savew)\n \t    warning (0, \"in passing argument %P of %q+D\", parmnum, fndecl);\n \t  else if (errorcount > savee)\n \t    error (\"in passing argument %P of %q+D\", parmnum, fndecl);"}, {"sha": "87eb8dc40abad342f9e18ca9b1413cb2bd2ee5aa", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -729,7 +729,10 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t\t    diagnostic->message.format_spec,\n \t\t\t\t    diagnostic->message.args_ptr);\n     }\n-  ++diagnostic_kind_count (context, diagnostic->kind);\n+  if (diagnostic->kind == DK_ERROR && orig_diag_kind == DK_WARNING)\n+    ++diagnostic_kind_count (context, DK_WERROR);\n+  else\n+    ++diagnostic_kind_count (context, diagnostic->kind);\n \n   saved_format_spec = diagnostic->message.format_spec;\n   if (context->show_option_requested)"}, {"sha": "9566491ca2a78520a6be2c15751a065da9d4741a", "filename": "gcc/diagnostic.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fdiagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fdiagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.def?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -42,4 +42,6 @@ DEFINE_DIAGNOSTIC_KIND (DK_DEBUG, \"debug: \")\n prefix does not matter.  */\n DEFINE_DIAGNOSTIC_KIND (DK_PEDWARN, \"pedwarn: \")\n DEFINE_DIAGNOSTIC_KIND (DK_PERMERROR, \"permerror: \")\n-\n+/* This one is just for counting DK_WARNING promoted to DK_ERROR\n+   due to -Werror and -Werror=warning.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_WERROR, \"error: \")"}, {"sha": "3b500964c7de68101b2fafbc1845ab69837d6ee4", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -240,6 +240,8 @@ extern diagnostic_context *global_dc;\n #define errorcount diagnostic_kind_count (global_dc, DK_ERROR)\n /* Similarly, but for warnings.  */\n #define warningcount diagnostic_kind_count (global_dc, DK_WARNING)\n+/* Similarly, but for warnings promoted to errors.  */\n+#define werrorcount diagnostic_kind_count (global_dc, DK_WERROR)\n /* Similarly, but for sorrys.  */\n #define sorrycount diagnostic_kind_count (global_dc, DK_SORRY)\n "}, {"sha": "ad42391764925d350fc86eb5cbecf321bf22d75d", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e9911604ec069ee198879bb3a4af5d47b82a6b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=37e9911604ec069ee198879bb3a4af5d47b82a6b", "patch": "@@ -1951,7 +1951,7 @@ toplev_main (int argc, char **argv)\n   if (!exit_after_options)\n     do_compile ();\n \n-  if (warningcount || errorcount)\n+  if (warningcount || errorcount || werrorcount)\n     print_ignored_options ();\n   diagnostic_finish (global_dc);\n \n@@ -1960,7 +1960,7 @@ toplev_main (int argc, char **argv)\n \n   finalize_plugins ();\n   location_adhoc_data_fini (line_table);\n-  if (seen_error ())\n+  if (seen_error () || werrorcount)\n     return (FATAL_EXIT_CODE);\n \n   return (SUCCESS_EXIT_CODE);"}]}