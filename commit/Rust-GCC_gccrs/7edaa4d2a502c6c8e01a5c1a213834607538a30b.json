{"sha": "7edaa4d2a502c6c8e01a5c1a213834607538a30b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkYWE0ZDJhNTAyYzZjOGUwMWE1YzFhMjEzODM0NjA3NTM4YTMwYg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-04-30T17:23:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-04-30T17:23:28Z"}, "message": "re PR c++/51033 (generic vector subscript and shuffle support was not added to C++)\n\n\tPR c++/51033\ngcc/\n\t* c-typeck.c (build_array_ref): Call\n\tconvert_vector_to_pointer_for_subscript.\ngcc/c-family\n\t* c-common.c (convert_vector_to_pointer_for_subscript): New function.\n\t* c-common.h (convert_vector_to_pointer_for_subscript): Declare it.\ngcc/cp/\n\t* typeck.c (cp_build_array_ref): Handle VECTOR_TYPE.\n\t* decl2.c (grok_array_decl): Likewise.\n\nFrom-SVN: r186994", "tree": {"sha": "49be9ae42e4ea26362131f6e948e29978abe950f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49be9ae42e4ea26362131f6e948e29978abe950f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7edaa4d2a502c6c8e01a5c1a213834607538a30b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edaa4d2a502c6c8e01a5c1a213834607538a30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7edaa4d2a502c6c8e01a5c1a213834607538a30b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7edaa4d2a502c6c8e01a5c1a213834607538a30b/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f45d8c45899a033685b12cf621b339e0be4cd77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45d8c45899a033685b12cf621b339e0be4cd77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45d8c45899a033685b12cf621b339e0be4cd77a"}], "stats": {"total": 115, "additions": 88, "deletions": 27}, "files": [{"sha": "461f16208e67d03da99e612361ac07d50319ad74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -1,3 +1,10 @@\n+2012-04-30  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/51033\n+\t* c-typeck.c (build_array_ref): Call\n+\tconvert_vector_to_pointer_for_subscript.\n+\t* doc/extend.texi (Vector Extensions): Subscripting not just for C.\n+\n 2012-04-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (and<mode>3): Change runtime operand mode checks"}, {"sha": "7bd6ad7afa649219eed024d64328302d09fb69e5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -1,3 +1,9 @@\n+2012-04-30  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/51033\n+\t* c-common.c (convert_vector_to_pointer_for_subscript): New function.\n+\t* c-common.h (convert_vector_to_pointer_for_subscript): Declare it.\n+\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tAdd -Wvarargs option"}, {"sha": "dce390260cda7085673f878ea4a9d0f32f35bfc4", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -10833,4 +10833,30 @@ build_userdef_literal (tree suffix_id, tree value, tree num_string)\n   return literal;\n }\n \n+/* For vector[index], convert the vector to a\n+   pointer of the underlying type.  */\n+void\n+convert_vector_to_pointer_for_subscript (location_t loc,\n+\t\t\t\t\t tree* vecp, tree index)\n+{\n+  if (TREE_CODE (TREE_TYPE (*vecp)) == VECTOR_TYPE)\n+    {\n+      tree type = TREE_TYPE (*vecp);\n+      tree type1;\n+\n+      if (TREE_CODE (index) == INTEGER_CST)\n+        if (!host_integerp (index, 1)\n+            || ((unsigned HOST_WIDE_INT) tree_low_cst (index, 1)\n+               >= TYPE_VECTOR_SUBPARTS (type)))\n+          warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n+\n+      c_common_mark_addressable_vec (*vecp);\n+      type = build_qualified_type (TREE_TYPE (type), TYPE_QUALS (type));\n+      type = build_pointer_type (type);\n+      type1 = build_pointer_type (TREE_TYPE (*vecp));\n+      *vecp = build1 (ADDR_EXPR, type1, *vecp);\n+      *vecp = convert (type, *vecp);\n+    }\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "c3d679adcbcffede62c80fb38981f243e788384e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -1119,4 +1119,6 @@ struct GTY(()) tree_userdef_literal {\n \n extern tree build_userdef_literal (tree suffix_id, tree value, tree num_string);\n \n+extern void convert_vector_to_pointer_for_subscript (location_t, tree*, tree);\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "f45d1dcc342996fbf55f7bc35fc60a679b53609d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -2340,26 +2340,7 @@ build_array_ref (location_t loc, tree array, tree index)\n \n   gcc_assert (TREE_CODE (TREE_TYPE (index)) == INTEGER_TYPE);\n \n-  /* For vector[index], convert the vector to a\n-     pointer of the underlying type.  */\n-  if (TREE_CODE (TREE_TYPE (array)) == VECTOR_TYPE)\n-    {\n-      tree type = TREE_TYPE (array);\n-      tree type1;\n-\n-      if (TREE_CODE (index) == INTEGER_CST)\n-        if (!host_integerp (index, 1)\n-            || ((unsigned HOST_WIDE_INT) tree_low_cst (index, 1)\n-               >= TYPE_VECTOR_SUBPARTS (TREE_TYPE (array))))\n-          warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n-\n-      c_common_mark_addressable_vec (array);\n-      type = build_qualified_type (TREE_TYPE (type), TYPE_QUALS (type));\n-      type = build_pointer_type (type);\n-      type1 = build_pointer_type (TREE_TYPE (array));\n-      array = build1 (ADDR_EXPR, type1, array);\n-      array = convert (type, array);\n-    }\n+  convert_vector_to_pointer_for_subscript (loc, &array, index);\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {"}, {"sha": "e52149f023d45df9e3df55122aeadfceaae885ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -1,5 +1,9 @@\n 2012-04-30  Marc Glisse  <marc.glisse@inria.fr>\n \n+\tPR c++/51033\n+\t* typeck.c (cp_build_array_ref): Handle VECTOR_TYPE.\n+\t* decl2.c (grok_array_decl): Likewise.\n+\n \tPR c++/51314\n \t* parser.c (cp_parser_sizeof_operand): Require parentheses for\n \tsizeof..."}, {"sha": "7088c675914f11b44f46ccdade1be821befd7ebc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -373,7 +373,7 @@ grok_array_decl (tree array_expr, tree index_exp)\n \t It is a little-known fact that, if `a' is an array and `i' is\n \t an int, you can write `i[a]', which means the same thing as\n \t `a[i]'.  */\n-      if (TREE_CODE (type) == ARRAY_TYPE)\n+      if (TREE_CODE (type) == ARRAY_TYPE || TREE_CODE (type) == VECTOR_TYPE)\n \tp1 = array_expr;\n       else\n \tp1 = build_expr_type_conversion (WANT_POINTER, array_expr, false);"}, {"sha": "b59741c6471023a4b31b7aa7980a245e0fd02bb6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -2915,6 +2915,8 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n       break;\n     }\n \n+  convert_vector_to_pointer_for_subscript (loc, &array, idx);\n+\n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n       tree rval, type;"}, {"sha": "95cea834407d7d2f61986c91f66727e2786fe6e7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -6823,7 +6823,7 @@ a = 2 * b;    /* a = @{2,2,2,2@} * b; */\n a = l + a;    /* Error, cannot convert long to int. */\n @end smallexample\n \n-In C vectors can be subscripted as if the vector were an array with\n+Vectors can be subscripted as if the vector were an array with\n the same number of elements and base type.  Out of bound accesses\n invoke undefined behavior at runtime.  Warnings for out of bound\n accesses for vector subscription can be enabled with"}, {"sha": "0a22ae4f05f9754e3d41d39bc9b281b6da11fa05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -1,5 +1,25 @@\n 2012-04-30  Marc Glisse  <marc.glisse@inria.fr>\n \n+\tPR c++/51033\n+\t* gcc.dg/vector-1.c: Move to ...\n+\t* c-c++-common/vector-1.c: ... here.\n+\t* gcc.dg/vector-2.c: Move to ...\n+\t* c-c++-common/vector-2.c: ... here.\n+\t* gcc.dg/vector-3.c: Move to ...\n+\t* c-c++-common/vector-3.c: ... here. Adapt to C++.\n+\t* gcc.dg/vector-4.c: Move to ...\n+\t* c-c++-common/vector-4.c: ... here.\n+\t* gcc.dg/vector-init-1.c: Move to ...\n+\t* c-c++-common/vector-init-1.c: ... here.\n+\t* gcc.dg/vector-init-2.c: Move to ...\n+\t* c-c++-common/vector-init-2.c: ... here.\n+\t* gcc.dg/vector-subscript-1.c: Move to ... Adapt to C++.\n+\t* c-c++-common/vector-subscript-1.c: ... here.\n+\t* gcc.dg/vector-subscript-2.c: Move to ...\n+\t* c-c++-common/vector-subscript-2.c: ... here.\n+\t* gcc.dg/vector-subscript-3.c: Move to ...\n+\t* c-c++-common/vector-subscript-3.c: ... here.\n+\n \tPR c++/51314\n \t* g++.dg/cpp0x/vt-51314.C: New test.\n \t* g++.dg/cpp0x/variadic76.C: Fix."}, {"sha": "288dd1e924c1e9c49e6e982ab94bcb9203c7b92b", "filename": "gcc/testsuite/c-c++-common/vector-1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-1.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "previous_filename": "gcc/testsuite/gcc.dg/vector-1.c"}, {"sha": "e9f40a35892502215d35a7e453a9acc05af5de32", "filename": "gcc/testsuite/c-c++-common/vector-2.c", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-2.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -18,4 +18,3 @@ int f(void)\n  a1 =  a1 & b1;\n  a1 =  a1 ^ b1;\n }\n-", "previous_filename": "gcc/testsuite/gcc.dg/vector-2.c"}, {"sha": "0f5d3c41157c229323208a476aab74ecac5e71dc", "filename": "gcc/testsuite/c-c++-common/vector-3.c", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-3.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -2,4 +2,7 @@\n \n /* Check that we error out when using vector_size on the bool type. */\n \n+#ifdef __cplusplus\n+#define _Bool bool\n+#endif\n __attribute__((vector_size(16) )) _Bool a; /* { dg-error \"\" } */", "previous_filename": "gcc/testsuite/gcc.dg/vector-3.c"}, {"sha": "cc4d5041f63620a3c655d385a2abbc7d1a0d27dc", "filename": "gcc/testsuite/c-c++-common/vector-4.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-4.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "previous_filename": "gcc/testsuite/gcc.dg/vector-4.c"}, {"sha": "5baf95688407a15e23816c7cd09a24fb93765ece", "filename": "gcc/testsuite/c-c++-common/vector-init-1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-init-1.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "previous_filename": "gcc/testsuite/gcc.dg/vector-init-1.c"}, {"sha": "6527f495d81628431eac4de264d01b1867b4ee78", "filename": "gcc/testsuite/c-c++-common/vector-init-2.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-init-2.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "previous_filename": "gcc/testsuite/gcc.dg/vector-init-2.c"}, {"sha": "c18b7b674abaa106ef74478fe0f63273d8ba7db9", "filename": "gcc/testsuite/c-c++-common/vector-subscript-1.c", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-1.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -6,12 +6,11 @@\n \n float vf(vector float a)\n {\n-  return 0[a]; /* { dg-error \"subscripted value is neither array nor pointer nor vector\" } */\n+  return 0[a]; /* { dg-error \"subscripted value is neither array nor pointer nor vector|invalid types .* for array subscript\" } */\n }\n \n \n float fv(vector float a)\n {\n   return a[0];\n }\n-", "previous_filename": "gcc/testsuite/gcc.dg/vector-subscript-1.c"}, {"sha": "84d55b91d20036521eb44d9d02750379a13cc9ff", "filename": "gcc/testsuite/c-c++-common/vector-subscript-2.c", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -10,4 +10,3 @@ float vf(int i)\n   register vector float a;\n   return a[0];\n }\n-", "previous_filename": "gcc/testsuite/gcc.dg/vector-subscript-2.c"}, {"sha": "22cd089adee47736824abfda7c1d05205a236d15", "filename": "gcc/testsuite/c-c++-common/vector-subscript-3.c", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-3.c?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -16,4 +16,3 @@ int test1(void)\n   vector int a;\n   return a[-1]; /* { dg-warning \"index value is out of bound\" } */\n }\n-", "previous_filename": "gcc/testsuite/gcc.dg/vector-subscript-3.c"}, {"sha": "9f8c646336e3b535d23d2de1fd331f9100ac5705", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-51314.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-51314.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7edaa4d2a502c6c8e01a5c1a213834607538a30b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-51314.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-51314.C?ref=7edaa4d2a502c6c8e01a5c1a213834607538a30b", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-std=c++11 -pedantic-errors\" }\n+// { dg-prune-output \"invalid\" }\n+\n+template<int>struct A{};\n+template<class...U>void f(U...){\n+    A<sizeof...U> x; // { dg-error \"surrounded by parentheses\" }\n+}\n+\n+\n+template<int...> struct Indices;\n+template<class> struct Next_increasing_indices;\n+template<int...I> struct Next_increasing_indices<Indices<I...> > {\n+    typedef Indices<I...,sizeof...I> type; // { dg-error \"surrounded by parentheses\" }\n+};"}]}