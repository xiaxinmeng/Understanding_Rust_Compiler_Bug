{"sha": "a18ebd6c439227b048a91fbfa66f5983f884c157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE4ZWJkNmM0MzkyMjdiMDQ4YTkxZmJmYTY2ZjU5ODNmODg0YzE1Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-07T09:27:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-07T09:27:28Z"}, "message": "i386: Fix some -mavx512vl -mno-avx512bw bugs [PR99321]\n\nAs I wrote in the mail with the previous PR99321 fix, we have various\nbugs where we emit instructions that need avx512bw and avx512vl\nISAs when compiling with -mavx512vl -mno-avx512bw.\n\nWithout the following patch, the attached testcase fails with:\n/tmp/ccW4PsfG.s: Assembler messages:\n/tmp/ccW4PsfG.s:9: Error: unsupported instruction `vpaddb'\n/tmp/ccW4PsfG.s:20: Error: unsupported instruction `vpaddb'\n/tmp/ccW4PsfG.s:31: Error: unsupported instruction `vpaddw'\n/tmp/ccW4PsfG.s:42: Error: unsupported instruction `vpaddw'\n/tmp/ccW4PsfG.s:53: Error: unsupported instruction `vpsubb'\n/tmp/ccW4PsfG.s:64: Error: unsupported instruction `vpsubb'\n/tmp/ccW4PsfG.s:75: Error: unsupported instruction `vpsubw'\n/tmp/ccW4PsfG.s:86: Error: unsupported instruction `vpsubw'\n/tmp/ccW4PsfG.s:97: Error: unsupported instruction `vpmullw'\n/tmp/ccW4PsfG.s:108: Error: unsupported instruction `vpmullw'\n/tmp/ccW4PsfG.s:133: Error: unsupported instruction `vpminub'\n/tmp/ccW4PsfG.s:144: Error: unsupported instruction `vpminuw'\n/tmp/ccW4PsfG.s:155: Error: unsupported instruction `vpminuw'\n/tmp/ccW4PsfG.s:166: Error: unsupported instruction `vpminsb'\n/tmp/ccW4PsfG.s:177: Error: unsupported instruction `vpminsb'\n/tmp/ccW4PsfG.s:202: Error: unsupported instruction `vpminsw'\n/tmp/ccW4PsfG.s:227: Error: unsupported instruction `vpmaxub'\n/tmp/ccW4PsfG.s:238: Error: unsupported instruction `vpmaxuw'\n/tmp/ccW4PsfG.s:249: Error: unsupported instruction `vpmaxuw'\n/tmp/ccW4PsfG.s:260: Error: unsupported instruction `vpmaxsb'\n/tmp/ccW4PsfG.s:271: Error: unsupported instruction `vpmaxsb'\n/tmp/ccW4PsfG.s:296: Error: unsupported instruction `vpmaxsw'\n\nWe already have Yw constraint which is equivalent to v for\n-mavx512bw -mavx512vl and to nothing otherwise, per discussions\nthis patch changes it to stand for x otherwise.  As it is an\nundocumented internal constraint, hopefully it won't affect\nany inline asm in the wild.\nFor the instructions that need both we need to use Yw and\nv for modes that don't need that.\n\n2021-03-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99321\n\t* config/i386/constraints.md (Yw): Use SSE_REGS if TARGET_SSE\n\tbut TARGET_AVX512BW or TARGET_AVX512VL is not set.  Adjust description\n\tand comment.\n\t* config/i386/sse.md (v_Yw): New define_mode_attr.\n\t(*<insn><mode>3, *mul<mode>3<mask_name>, *avx2_<code><mode>3,\n\t*sse4_1_<code><mode>3<mask_name>): Use <v_Yw> instead of v\n\tin constraints.\n\t* config/i386/mmx.md (mmx_pshufw_1, *vec_dupv4hi): Use Yw instead of\n\txYw in constraints.\n\n\t* lib/target-supports.exp\n\t(check_effective_target_assembler_march_noavx512bw): New effective\n\ttarget.\n\t* gcc.target/i386/avx512vl-pr99321-1.c: New test.", "tree": {"sha": "f260f09a34587bf159636ca6b0b7fafcbba5f6f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f260f09a34587bf159636ca6b0b7fafcbba5f6f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a18ebd6c439227b048a91fbfa66f5983f884c157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18ebd6c439227b048a91fbfa66f5983f884c157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a18ebd6c439227b048a91fbfa66f5983f884c157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18ebd6c439227b048a91fbfa66f5983f884c157/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad6a2e2f0c667f9916cfcdb81f41f6055f1d0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad6a2e2f0c667f9916cfcdb81f41f6055f1d0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad6a2e2f0c667f9916cfcdb81f41f6055f1d0b3"}], "stats": {"total": 101, "additions": 79, "deletions": 22}, "files": [{"sha": "a8db33ed29eaed50debdbba3ca51e4b56bd33a75", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=a18ebd6c439227b048a91fbfa66f5983f884c157", "patch": "@@ -110,7 +110,7 @@\n ;;  v\tany EVEX encodable SSE register for AVX512VL target,\n ;;\totherwise any SSE register\n ;;  w\tany EVEX encodable SSE register for AVX512BW with TARGET_AVX512VL\n-;;\ttarget.\n+;;\ttarget, otherwise any SSE register.\n \n (define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n  \"First SSE register (@code{%xmm0}).\")\n@@ -148,8 +148,8 @@\n  \"@internal For AVX512VL, any EVEX encodable SSE register (@code{%xmm0-%xmm31}), otherwise any SSE register.\")\n \n (define_register_constraint \"Yw\"\n- \"TARGET_AVX512BW && TARGET_AVX512VL ? ALL_SSE_REGS : NO_REGS\"\n- \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512BW with TARGET_AVX512VL target.\")\n+ \"TARGET_AVX512BW && TARGET_AVX512VL ? ALL_SSE_REGS : TARGET_SSE ? SSE_REGS : NO_REGS\"\n+ \"@internal Any EVEX encodable SSE register (@code{%xmm0-%xmm31}) for AVX512BW with TARGET_AVX512VL target, otherwise any SSE register.\")\n \n ;; We use the B prefix to denote any number of internal operands:\n ;;  f  FLAGS_REG"}, {"sha": "c6a288209f8b1f593d679903c1ce2be558736578", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=a18ebd6c439227b048a91fbfa66f5983f884c157", "patch": "@@ -2021,9 +2021,9 @@\n })\n \n (define_insn \"mmx_pshufw_1\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,xYw\")\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,Yw\")\n         (vec_select:V4HI\n-          (match_operand:V4HI 1 \"register_mmxmem_operand\" \"ym,xYw\")\n+\t  (match_operand:V4HI 1 \"register_mmxmem_operand\" \"ym,Yw\")\n           (parallel [(match_operand 2 \"const_0_to_3_operand\")\n                      (match_operand 3 \"const_0_to_3_operand\")\n                      (match_operand 4 \"const_0_to_3_operand\")\n@@ -2105,10 +2105,10 @@\n    (set_attr \"mode\" \"DI,TI\")])\n \n (define_insn \"*vec_dupv4hi\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,xYw\")\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,Yw\")\n \t(vec_duplicate:V4HI\n \t  (truncate:HI\n-\t    (match_operand:SI 1 \"register_operand\" \"0,xYw\"))))]\n+\t    (match_operand:SI 1 \"register_operand\" \"0,Yw\"))))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && (TARGET_SSE || TARGET_3DNOW_A)\"\n   \"@"}, {"sha": "ca4372d41640585b4bae90ffd3f3d7c102bedfad", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a18ebd6c439227b048a91fbfa66f5983f884c157", "patch": "@@ -560,6 +560,14 @@\n    (V4SF \"avx512vl\") (V8SF \"avx512vl\") (V16SF \"avx512f\")\n    (V2DF \"avx512vl\") (V4DF \"avx512vl\") (V8DF \"avx512f\")])\n \n+(define_mode_attr v_Yw\n+  [(V16QI \"Yw\") (V32QI \"Yw\") (V64QI \"v\")\n+   (V8HI \"Yw\") (V16HI \"Yw\") (V32HI \"v\")\n+   (V4SI \"v\") (V8SI \"v\") (V16SI \"v\")\n+   (V2DI \"v\") (V4DI \"v\") (V8DI \"v\")\n+   (V4SF \"v\") (V8SF \"v\") (V16SF \"v\")\n+   (V2DF \"v\") (V4DF \"v\") (V8DF \"v\")])\n+\n (define_mode_attr sse2_avx_avx512f\n   [(V16QI \"sse2\") (V32QI \"avx\") (V64QI \"avx512f\")\n    (V8HI  \"avx512vl\") (V16HI  \"avx512vl\") (V32HI \"avx512bw\")\n@@ -11677,10 +11685,10 @@\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<insn><mode>3\"\n-  [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=x,<v_Yw>\")\n \t(plusminus:VI_AVX2\n-\t  (match_operand:VI_AVX2 1 \"bcst_vector_operand\" \"<comm>0,v\")\n-\t  (match_operand:VI_AVX2 2 \"bcst_vector_operand\" \"xBm,vmBr\")))]\n+\t  (match_operand:VI_AVX2 1 \"bcst_vector_operand\" \"<comm>0,<v_Yw>\")\n+\t  (match_operand:VI_AVX2 2 \"bcst_vector_operand\" \"xBm,<v_Yw>mBr\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -11790,9 +11798,9 @@\n   \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n (define_insn \"*mul<mode>3<mask_name>\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n-\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"vector_operand\" \"%0,v\")\n-\t\t       (match_operand:VI2_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,<v_Yw>\")\n+\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"vector_operand\" \"%0,<v_Yw>\")\n+\t\t       (match_operand:VI2_AVX2 2 \"vector_operand\" \"xBm,<v_Yw>m\")))]\n   \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n    && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n@@ -12618,10 +12626,10 @@\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*avx2_<code><mode>3\"\n-  [(set (match_operand:VI124_256 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:VI124_256 0 \"register_operand\" \"=<v_Yw>\")\n \t(maxmin:VI124_256\n-\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%v\")\n-\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%<v_Yw>\")\n+\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"<v_Yw>m\")))]\n   \"TARGET_AVX2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n@@ -12745,10 +12753,10 @@\n })\n \n (define_insn \"*sse4_1_<code><mode>3<mask_name>\"\n-  [(set (match_operand:VI14_128 0 \"register_operand\" \"=Yr,*x,v\")\n+  [(set (match_operand:VI14_128 0 \"register_operand\" \"=Yr,*x,<v_Yw>\")\n \t(smaxmin:VI14_128\n-\t  (match_operand:VI14_128 1 \"vector_operand\" \"%0,0,v\")\n-\t  (match_operand:VI14_128 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n+\t  (match_operand:VI14_128 1 \"vector_operand\" \"%0,0,<v_Yw>\")\n+\t  (match_operand:VI14_128 2 \"vector_operand\" \"YrBm,*xBm,<v_Yw>m\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n@@ -12830,10 +12838,10 @@\n })\n \n (define_insn \"*sse4_1_<code><mode>3<mask_name>\"\n-  [(set (match_operand:VI24_128 0 \"register_operand\" \"=Yr,*x,v\")\n+  [(set (match_operand:VI24_128 0 \"register_operand\" \"=Yr,*x,<v_Yw>\")\n \t(umaxmin:VI24_128\n-\t  (match_operand:VI24_128 1 \"vector_operand\" \"%0,0,v\")\n-\t  (match_operand:VI24_128 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n+\t  (match_operand:VI24_128 1 \"vector_operand\" \"%0,0,<v_Yw>\")\n+\t  (match_operand:VI24_128 2 \"vector_operand\" \"YrBm,*xBm,<v_Yw>m\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\""}, {"sha": "9da5eee0987aab58d480d5b4ef974e5452e40905", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr99321-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr99321-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr99321-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr99321-1.c?ref=a18ebd6c439227b048a91fbfa66f5983f884c157", "patch": "@@ -0,0 +1,39 @@\n+/* PR target/99321 */\n+/* { dg-do assemble { target lp64 } } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target assembler_march_noavx512bw } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512bw -Wa,-march=+noavx512bw\" } */\n+\n+#include <x86intrin.h>\n+\n+typedef unsigned char V1 __attribute__((vector_size (16)));\n+typedef unsigned char V2 __attribute__((vector_size (32)));\n+typedef unsigned short V3 __attribute__((vector_size (16)));\n+typedef unsigned short V4 __attribute__((vector_size (32)));\n+\n+void f1 (void) { register V1 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a += b; __asm (\"\" : : \"v\" (a)); }\n+void f2 (void) { register V2 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a += b; __asm (\"\" : : \"v\" (a)); }\n+void f3 (void) { register V3 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a += b; __asm (\"\" : : \"v\" (a)); }\n+void f4 (void) { register V4 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a += b; __asm (\"\" : : \"v\" (a)); }\n+void f5 (void) { register V1 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a -= b; __asm (\"\" : : \"v\" (a)); }\n+void f6 (void) { register V2 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a -= b; __asm (\"\" : : \"v\" (a)); }\n+void f7 (void) { register V3 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a -= b; __asm (\"\" : : \"v\" (a)); }\n+void f8 (void) { register V4 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a -= b; __asm (\"\" : : \"v\" (a)); }\n+void f9 (void) { register V3 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a *= b; __asm (\"\" : : \"v\" (a)); }\n+void f10 (void) { register V4 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a *= b; __asm (\"\" : : \"v\" (a)); }\n+void f11 (void) { register V1 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V1) _mm_min_epu8 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f12 (void) { register V2 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V2) _mm256_min_epu8 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }\n+void f13 (void) { register V3 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V3) _mm_min_epu16 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f14 (void) { register V4 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V4) _mm256_min_epu16 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }\n+void f15 (void) { register V1 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V1) _mm_min_epi8 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f16 (void) { register V2 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V2) _mm256_min_epi8 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }\n+void f17 (void) { register V3 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V3) _mm_min_epi16 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f18 (void) { register V4 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V4) _mm256_min_epi16 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }\n+void f19 (void) { register V1 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V1) _mm_max_epu8 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f20 (void) { register V2 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V2) _mm256_max_epu8 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }\n+void f21 (void) { register V3 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V3) _mm_max_epu16 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f22 (void) { register V4 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V4) _mm256_max_epu16 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }\n+void f23 (void) { register V1 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V1) _mm_max_epi8 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f24 (void) { register V2 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V2) _mm256_max_epi8 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }\n+void f25 (void) { register V3 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V3) _mm_max_epi16 ((__m128i) a, (__m128i) b); __asm (\"\" : : \"v\" (a)); }\n+void f26 (void) { register V4 a __asm (\"%xmm16\"), b __asm (\"%xmm17\"); __asm (\"\" : \"=v\" (a), \"=v\" (b)); a = (V4) _mm256_max_epi16 ((__m256i) a, (__m256i) b); __asm (\"\" : : \"v\" (a)); }"}, {"sha": "570d5d3de00c16e5d86d4fdeaa0901477d4f3b01", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a18ebd6c439227b048a91fbfa66f5983f884c157/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a18ebd6c439227b048a91fbfa66f5983f884c157", "patch": "@@ -8945,6 +8945,16 @@ proc check_effective_target_avx512bw { } {\n     } \"-mavx512bw\" ]\n }\n \n+# Return 1 if -Wa,-march=+noavx512bw is supported.\n+proc check_effective_target_assembler_march_noavx512bw {} {\n+    if { [istarget i?86*-*-*] || [istarget x86_64*-*-*] } {\n+\treturn [check_no_compiler_messages assembler_march_noavx512bw object {\n+\t    void foo (void) {}\n+\t} \"-mno-avx512bw -Wa,-march=+noavx512bw\"]\n+    }\n+    return 0\n+}\n+\n # Return 1 if avx512vp2intersect instructions can be compiled.\n proc check_effective_target_avx512vp2intersect { } {\n     return [check_no_compiler_messages avx512vp2intersect object {"}]}