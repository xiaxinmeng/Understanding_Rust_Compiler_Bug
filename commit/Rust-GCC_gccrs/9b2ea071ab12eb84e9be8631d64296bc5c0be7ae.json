{"sha": "9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyZWEwNzFhYjEyZWI4NGU5YmU4NjMxZDY0Mjk2YmM1YzBiZTdhZQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-11-02T03:44:50Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-11-02T03:44:50Z"}, "message": "use rtx_insn * in various places where it is obvious\n\ngcc/ChangeLog:\n\n2016-11-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/arc/arc.c (arc_emit_call_tls_get_addr): Make the type\n\tof variables rtx_insn *.\n\t* config/arm/arm.c (arm_call_tls_get_addr): Likewise.\n\t(legitimize_tls_address): Likewise.\n\t* config/bfin/bfin.c (hwloop_optimize): Likewise.\n\t(bfin_gen_bundles): Likewise.\n\t* config/c6x/c6x.c (reorg_split_calls): Likewise.\n\t(c6x_reorg): Likewise.\n\t* config/frv/frv.c (frv_reorder_packet): Likewise.\n\t* config/i386/i386.c (ix86_split_idivmod): Likewise.\n\t* config/ia64/ia64.c (ia64_expand_compare): Likewise.\n\t* config/m32c/m32c.c (m32c_prepare_shift): Likewise.\n\t* config/mn10300/mn10300.c: Likewise.\n\t* config/rl78/rl78.c: Likewise.\n\t* config/s390/s390.c (s390_fix_long_loop_prediction): Likewise.\n\t* config/sh/sh-mem.cc (sh_expand_cmpstr): Likewise.\n\t(sh_expand_cmpnstr): Likewise.\n\t(sh_expand_strlen): Likewise.\n\t(sh_expand_setmem): Likewise.\n\t* config/sh/sh.md: Likewise.\n\t* emit-rtl.c (emit_pattern_before): Likewise.\n\t* except.c: Likewise.\n\t* final.c: Likewise.\n\t* jump.c: Likewise.\n\nFrom-SVN: r241768", "tree": {"sha": "986b342a8cf066b1df1ec57dc9b81dbebf1a3cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/986b342a8cf066b1df1ec57dc9b81dbebf1a3cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/comments", "author": null, "committer": null, "parents": [{"sha": "3f95ca6c0f89f31d0caf0aeb056e53c7bbcd7af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f95ca6c0f89f31d0caf0aeb056e53c7bbcd7af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f95ca6c0f89f31d0caf0aeb056e53c7bbcd7af3"}], "stats": {"total": 119, "additions": 74, "deletions": 45}, "files": [{"sha": "02d929f1185db7d51f0e7416509d202894292992", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -1,3 +1,30 @@\n+2016-11-01  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/arc/arc.c (arc_emit_call_tls_get_addr): Make the type\n+\tof variables rtx_insn *.\n+\t* config/arm/arm.c (arm_call_tls_get_addr): Likewise.\n+\t(legitimize_tls_address): Likewise.\n+\t* config/bfin/bfin.c (hwloop_optimize): Likewise.\n+\t(bfin_gen_bundles): Likewise.\n+\t* config/c6x/c6x.c (reorg_split_calls): Likewise.\n+\t(c6x_reorg): Likewise.\n+\t* config/frv/frv.c (frv_reorder_packet): Likewise.\n+\t* config/i386/i386.c (ix86_split_idivmod): Likewise.\n+\t* config/ia64/ia64.c (ia64_expand_compare): Likewise.\n+\t* config/m32c/m32c.c (m32c_prepare_shift): Likewise.\n+\t* config/mn10300/mn10300.c: Likewise.\n+\t* config/rl78/rl78.c: Likewise.\n+\t* config/s390/s390.c (s390_fix_long_loop_prediction): Likewise.\n+\t* config/sh/sh-mem.cc (sh_expand_cmpstr): Likewise.\n+\t(sh_expand_cmpnstr): Likewise.\n+\t(sh_expand_strlen): Likewise.\n+\t(sh_expand_setmem): Likewise.\n+\t* config/sh/sh.md: Likewise.\n+\t* emit-rtl.c (emit_pattern_before): Likewise.\n+\t* except.c: Likewise.\n+\t* final.c: Likewise.\n+\t* jump.c: Likewise.\n+\n 2016-11-01  Jason Merrill  <jason@redhat.com>\n \n \t* tree-inline.c (copy_tree_body_r): Only copy the taken branch of"}, {"sha": "c66f13152ceeb79010c8deb7d99b4aa9797e8308", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -627,7 +627,7 @@ try_eliminate_compare (struct comparison *cmp)\n   /* We've reached PREV_CLOBBER without finding a modification of IN_A.\n      Validate that PREV_CLOBBER itself does in fact refer to IN_A.  Do\n      recall that we've already validated the shape of PREV_CLOBBER.  */\n-  rtx insn = cmp->prev_clobber;\n+  rtx_insn *insn = cmp->prev_clobber;\n   x = XVECEXP (PATTERN (insn), 0, 0);\n   if (rtx_equal_p (SET_DEST (x), in_a))\n     cmp_src = SET_SRC (x);"}, {"sha": "b5f306cb055e1d60d8e4fd8adcf283f79cab335c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -4830,7 +4830,6 @@ static rtx\n arc_emit_call_tls_get_addr (rtx sym, int reloc, rtx eqv)\n {\n   rtx r0 = gen_rtx_REG (Pmode, R0_REG);\n-  rtx insns;\n   rtx call_fusage = NULL_RTX;\n \n   start_sequence ();\n@@ -4847,7 +4846,7 @@ arc_emit_call_tls_get_addr (rtx sym, int reloc, rtx eqv)\n   RTL_PURE_CALL_P (call_insn) = 1;\n   add_function_usage_to (call_insn, call_fusage);\n \n-  insns = get_insns ();\n+  rtx_insn *insns = get_insns ();\n   end_sequence ();\n \n   rtx dest = gen_reg_rtx (Pmode);"}, {"sha": "5add0d6443b1e36ea04a76eaddf86aaf6d016820", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -7905,10 +7905,10 @@ load_tls_operand (rtx x, rtx reg)\n   return reg;\n }\n \n-static rtx\n+static rtx_insn *\n arm_call_tls_get_addr (rtx x, rtx reg, rtx *valuep, int reloc)\n {\n-  rtx insns, label, labelno, sum;\n+  rtx label, labelno, sum;\n \n   gcc_assert (reloc != TLS_DESCSEQ);\n   start_sequence ();\n@@ -7932,7 +7932,7 @@ arm_call_tls_get_addr (rtx x, rtx reg, rtx *valuep, int reloc)\n \t\t\t\t     LCT_PURE, /* LCT_CONST?  */\n \t\t\t\t     Pmode, 1, reg, Pmode);\n \n-  insns = get_insns ();\n+  rtx_insn *insns = get_insns ();\n   end_sequence ();\n \n   return insns;\n@@ -7964,7 +7964,8 @@ arm_tls_descseq_addr (rtx x, rtx reg)\n rtx\n legitimize_tls_address (rtx x, rtx reg)\n {\n-  rtx dest, tp, label, labelno, sum, insns, ret, eqv, addend;\n+  rtx dest, tp, label, labelno, sum, ret, eqv, addend;\n+  rtx_insn *insns;\n   unsigned int model = SYMBOL_REF_TLS_MODEL (x);\n \n   switch (model)"}, {"sha": "5f0efd9b5442605857210dc88abfb0fe495f6642", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -3432,7 +3432,8 @@ hwloop_optimize (hwloop_info loop)\n   basic_block bb;\n   rtx_insn *insn, *last_insn;\n   rtx loop_init, start_label, end_label;\n-  rtx iter_reg, scratchreg, scratch_init, scratch_init_insn;\n+  rtx iter_reg, scratchreg, scratch_init;\n+  rtx_insn *scratch_init_insn;\n   rtx lc_reg, lt_reg, lb_reg;\n   rtx seq_end;\n   rtx_insn *seq;\n@@ -3453,7 +3454,7 @@ hwloop_optimize (hwloop_info loop)\n \n   scratchreg = NULL_RTX;\n   scratch_init = iter_reg;\n-  scratch_init_insn = NULL_RTX;\n+  scratch_init_insn = NULL;\n   if (!PREG_P (iter_reg) && loop->incoming_src)\n     {\n       basic_block bb_in = loop->incoming_src;\n@@ -3977,7 +3978,7 @@ bfin_gen_bundles (void)\n       for (insn = BB_HEAD (bb);; insn = next)\n \t{\n \t  int at_end;\n-\t  rtx delete_this = NULL_RTX;\n+\t  rtx_insn *delete_this = NULL;\n \n \t  if (NONDEBUG_INSN_P (insn))\n \t    {"}, {"sha": "6cb9185ca02417bb35c3acfc07a32ce21cdee815", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -4856,7 +4856,7 @@ find_last_same_clock (rtx_insn *insn)\n    the SEQUENCEs that represent execute packets.  */\n \n static void\n-reorg_split_calls (rtx *call_labels)\n+reorg_split_calls (rtx_insn **call_labels)\n {\n   unsigned int reservation_mask = 0;\n   rtx_insn *insn = get_insns ();\n@@ -4878,7 +4878,7 @@ reorg_split_calls (rtx *call_labels)\n \n       if (returning_call_p (insn))\n \t{\n-\t  rtx label = gen_label_rtx ();\n+\t  rtx_code_label *label = gen_label_rtx ();\n \t  rtx labelref = gen_rtx_LABEL_REF (Pmode, label);\n \t  rtx reg = gen_rtx_REG (SImode, RETURN_ADDR_REGNO);\n \n@@ -5029,7 +5029,7 @@ reorg_split_calls (rtx *call_labels)\n    scheduling was run earlier.  */\n \n static void\n-reorg_emit_nops (rtx *call_labels)\n+reorg_emit_nops (rtx_insn **call_labels)\n {\n   bool first;\n   rtx last_call;\n@@ -5921,7 +5921,6 @@ static void\n c6x_reorg (void)\n {\n   basic_block bb;\n-  rtx *call_labels;\n   bool do_selsched = (c6x_flag_schedule_insns2 && flag_selective_scheduling2\n \t\t      && !maybe_skip_selective_scheduling ());\n \n@@ -5967,7 +5966,7 @@ c6x_reorg (void)\n     }\n   sched_no_dce = false;\n \n-  call_labels = XCNEWVEC (rtx, get_max_uid () + 1);\n+  rtx_insn **call_labels = XCNEWVEC (rtx_insn *, get_max_uid () + 1);\n \n   reorg_split_calls (call_labels);\n "}, {"sha": "fb01685fb893198072618f2a17e0f6be62a41586", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -7594,7 +7594,7 @@ static void\n frv_reorder_packet (void)\n {\n   unsigned int cursor[NUM_GROUPS];\n-  rtx insns[ARRAY_SIZE (frv_unit_groups)];\n+  rtx_insn *insns[ARRAY_SIZE (frv_unit_groups)];\n   unsigned int unit, to, from;\n   enum frv_insn_group group;\n   struct frv_packet_group *packet_group;"}, {"sha": "5bb6efa7388a76468862684fce937435142bc4df", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -20376,7 +20376,8 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n \t\t    bool signed_p)\n {\n   rtx_code_label *end_label, *qimode_label;\n-  rtx insn, div, mod;\n+  rtx div, mod;\n+  rtx_insn *insn;\n   rtx scratch, tmp0, tmp1, tmp2;\n   rtx (*gen_divmod4_1) (rtx, rtx, rtx, rtx);\n   rtx (*gen_zero_extend) (rtx, rtx);"}, {"sha": "855715715995caa48763cd14a5c8f137d512956f", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -1803,7 +1803,7 @@ ia64_expand_compare (rtx *expr, rtx *op0, rtx *op1)\n       };\n       int magic;\n       enum rtx_code ncode;\n-      rtx ret, insns;\n+      rtx ret;\n       \n       gcc_assert (cmptf_libfunc && GET_MODE (*op1) == TFmode);\n       switch (code)\n@@ -1842,7 +1842,7 @@ ia64_expand_compare (rtx *expr, rtx *op0, rtx *op1)\n       emit_insn (gen_rtx_SET (cmp, gen_rtx_fmt_ee (ncode, BImode,\n \t\t\t\t\t\t   ret, const0_rtx)));\n \n-      insns = get_insns ();\n+      rtx_insn *insns = get_insns ();\n       end_sequence ();\n \n       emit_libcall_block (insns, cmp, cmp,"}, {"sha": "6077201a3b028e1612122de490ecce790634f303", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -3781,13 +3781,13 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n \t undefined to skip one of the comparisons.  */\n \n       rtx count;\n-      rtx label, tempvar;\n+      rtx tempvar;\n       rtx_insn *insn;\n \n       emit_move_insn (operands[0], operands[1]);\n \n       count = temp;\n-      label = gen_label_rtx ();\n+      rtx_code_label *label = gen_label_rtx ();\n       LABEL_NUSES (label) ++;\n \n       tempvar = gen_reg_rtx (mode);"}, {"sha": "e61bf408d5ab1349a3648dfdb208cbdfc67337eb", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -3163,7 +3163,7 @@ mn10300_bundle_liw (void)\n    Insert a SETLB insn just before LABEL.  */\n \n static void\n-mn10300_insert_setlb_lcc (rtx label, rtx branch)\n+mn10300_insert_setlb_lcc (rtx_insn *label, rtx branch)\n {\n   rtx lcc, comparison, cmp_reg;\n "}, {"sha": "30ce349ff570057d34bcadaaf50b8f81d6a794fe", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -2949,7 +2949,7 @@ move_to_acc (int opno, rtx before)\n }\n \n static void\n-force_into_acc (rtx src, rtx before)\n+force_into_acc (rtx src, rtx_insn *before)\n {\n   machine_mode mode = GET_MODE (src);\n   rtx move;"}, {"sha": "3f98cd820d51e47c2a6651d86bcf6f0a751dcb62", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -4840,7 +4840,8 @@ s390_emit_tls_call_insn (rtx result_reg, rtx tls_call)\n static rtx\n legitimize_tls_address (rtx addr, rtx reg)\n {\n-  rtx new_rtx, tls_call, temp, base, r2, insn;\n+  rtx new_rtx, tls_call, temp, base, r2;\n+  rtx_insn *insn;\n \n   if (GET_CODE (addr) == SYMBOL_REF)\n     switch (tls_symbolic_operand (addr))\n@@ -13280,7 +13281,7 @@ static bool\n s390_fix_long_loop_prediction (rtx_insn *insn)\n {\n   rtx set = single_set (insn);\n-  rtx code_label, label_ref, new_label;\n+  rtx code_label, label_ref;\n   rtx_insn *uncond_jump;\n   rtx_insn *cur_insn;\n   rtx tmp;\n@@ -13317,7 +13318,7 @@ s390_fix_long_loop_prediction (rtx_insn *insn)\n     if (!cur_insn || JUMP_P (cur_insn) || LABEL_P (cur_insn))\n       return false;\n \n-  new_label = gen_label_rtx ();\n+  rtx_code_label *new_label = gen_label_rtx ();\n   uncond_jump = emit_jump_insn_after (\n \t\t  gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_LABEL_REF (VOIDmode, code_label)),"}, {"sha": "b965aed1684a810735e87cc4f08895eafc4c8a79", "filename": "gcc/config/sh/sh-mem.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-mem.cc?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -204,7 +204,7 @@ sh_expand_cmpstr (rtx *operands)\n   rtx tmp2 = gen_reg_rtx (SImode);\n   rtx tmp3 = gen_reg_rtx (SImode);\n \n-  rtx jump;\n+  rtx_insn *jump;\n   rtx_code_label *L_return = gen_label_rtx ();\n   rtx_code_label *L_loop_byte = gen_label_rtx ();\n   rtx_code_label *L_end_loop_byte = gen_label_rtx ();\n@@ -342,7 +342,7 @@ sh_expand_cmpnstr (rtx *operands)\n   rtx tmp1 = gen_reg_rtx (SImode);\n   rtx tmp2 = gen_reg_rtx (SImode);\n \n-  rtx jump;\n+  rtx_insn *jump;\n   rtx_code_label *L_return = gen_label_rtx ();\n   rtx_code_label *L_loop_byte = gen_label_rtx ();\n   rtx_code_label *L_end_loop_byte = gen_label_rtx ();\n@@ -583,7 +583,7 @@ sh_expand_strlen (rtx *operands)\n   rtx_code_label *L_return = gen_label_rtx ();\n   rtx_code_label *L_loop_byte = gen_label_rtx ();\n \n-  rtx jump;\n+  rtx_insn *jump;\n   rtx_code_label *L_loop_long = gen_label_rtx ();\n   rtx_code_label *L_end_loop_long = gen_label_rtx ();\n \n@@ -669,7 +669,7 @@ sh_expand_setmem (rtx *operands)\n   rtx_code_label *L_loop_byte = gen_label_rtx ();\n   rtx_code_label *L_loop_word = gen_label_rtx ();\n   rtx_code_label *L_return = gen_label_rtx ();\n-  rtx jump;\n+  rtx_insn *jump;\n   rtx dest = copy_rtx (operands[0]);\n   rtx dest_addr = copy_addr_to_reg (XEXP (dest, 0));\n   rtx val = force_reg (SImode, operands[2]);"}, {"sha": "c6956a056b4324f19bd80724fdbbda981cd66251", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -3044,7 +3044,7 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  rtx prev_set_t_insn = NULL_RTX;\n+  rtx_insn *prev_set_t_insn = NULL;\n \n   if (!arith_reg_operand (operands[3], SImode))\n     {\n@@ -3105,7 +3105,7 @@\n \t\t && ! reg_referenced_p (get_t_reg_rtx (),\n \t\t\t\t\tPATTERN (prev_set_t_insn))))\n \t    {\n-\t      prev_set_t_insn = NULL_RTX;\n+\t      prev_set_t_insn = NULL;\n \t      tmp_t_reg = gen_reg_rtx (SImode);\n \t      emit_insn (gen_move_insn (tmp_t_reg, get_t_reg_rtx ()));\n \t    } \n@@ -3174,7 +3174,7 @@\n   if (INTVAL (operands[2]) > 1)\n     {\n       const rtx shift_count = GEN_INT (INTVAL (operands[2]) - 1);\n-      rtx prev_set_t_insn = NULL_RTX;\n+      rtx_insn *prev_set_t_insn = NULL;\n       rtx tmp_t_reg = NULL_RTX;\n \n       /* If we're going to emit a shift sequence that clobbers the T_REG,\n@@ -3205,7 +3205,7 @@\n \t\t && ! reg_referenced_p (get_t_reg_rtx (),\n \t\t\t\t\tPATTERN (prev_set_t_insn))))\n \t    {\n-\t      prev_set_t_insn = NULL_RTX;\n+\t      prev_set_t_insn = NULL;\n \t      tmp_t_reg = gen_reg_rtx (SImode);\n \t      emit_insn (gen_move_insn (tmp_t_reg, get_t_reg_rtx ()));\n \t    } \n@@ -4518,7 +4518,7 @@\n   \"TARGET_SH1 && ! TARGET_ZDCBRANCH\"\n   [(const_int 0)]\n {\n-  rtx skip_neg_label = gen_label_rtx ();\n+  rtx_code_label *skip_neg_label = gen_label_rtx ();\n \n   emit_move_insn (operands[0], operands[1]);\n \n@@ -4545,7 +4545,7 @@\n   \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n-  rtx skip_neg_label = gen_label_rtx ();\n+  rtx_code_label *skip_neg_label = gen_label_rtx ();\n \n   emit_move_insn (operands[0], operands[1]);\n \n@@ -7456,7 +7456,7 @@\n   [(match_operand 0 \"\" \"\") (match_operand 1 \"\" \"\")]\n   \"\"\n {\n-  rtx gotoffsym, insn;\n+  rtx gotoffsym;\n   rtx t = (!can_create_pseudo_p ()\n \t   ? operands[0]\n \t   : gen_reg_rtx (GET_MODE (operands[0])));\n@@ -7467,7 +7467,7 @@\n   gotoffsym = gen_sym2GOTOFF (operands[1]);\n   PUT_MODE (gotoffsym, Pmode);\n   emit_move_insn (t, gotoffsym);\n-  insn = emit_move_insn (operands[0], gen_rtx_PLUS (Pmode, t, picreg));\n+  rtx_insn *insn = emit_move_insn (operands[0], gen_rtx_PLUS (Pmode, t, picreg));\n \n   set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n \n@@ -8825,7 +8825,7 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  rtx skip_label = gen_label_rtx ();\n+  rtx_code_label *skip_label = gen_label_rtx ();\n   emit_move_insn (operands[0], operands[1]);\n \n   rtx cmp_val = operands[2];"}, {"sha": "a8516ebe84b04746b7e8e3e7e9b6ee88e56d7ab3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -4813,7 +4813,7 @@ emit_pattern_before (rtx pattern, rtx uncast_before, bool skip_debug_insns,\n \t\t\t\t       insnp, make_raw);\n   else\n     return emit_pattern_before_noloc (pattern, before,\n-                                      insnp ? before : NULL_RTX,\n+\t\t\t\t      insnp ? before : NULL_RTX,\n                                       NULL, make_raw);\n }\n "}, {"sha": "e811b56074d69e31a81c67d1c3a2f304af98a16d", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -909,7 +909,7 @@ assign_filter_values (void)\n    first instruction of some existing BB and return the newly\n    produced block.  */\n static basic_block\n-emit_to_new_bb_before (rtx_insn *seq, rtx insn)\n+emit_to_new_bb_before (rtx_insn *seq, rtx_insn *insn)\n {\n   rtx_insn *last;\n   basic_block bb;"}, {"sha": "5709d0e2406bb9aa025ffe9aa6ece2cd0da7176f", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -214,7 +214,7 @@ static void leaf_renumber_regs (rtx_insn *);\n static int alter_cond (rtx);\n #endif\n #ifndef ADDR_VEC_ALIGN\n-static int final_addr_vec_align (rtx);\n+static int final_addr_vec_align (rtx_insn *);\n #endif\n static int align_fuzz (rtx, rtx, int, unsigned);\n static void collect_fn_hard_reg_usage (void);\n@@ -513,7 +513,7 @@ default_jump_align_max_skip (rtx_insn *insn ATTRIBUTE_UNUSED)\n \n #ifndef ADDR_VEC_ALIGN\n static int\n-final_addr_vec_align (rtx addr_vec)\n+final_addr_vec_align (rtx_insn *addr_vec)\n {\n   int align = GET_MODE_SIZE (GET_MODE (PATTERN (addr_vec)));\n "}, {"sha": "b6828133cb3829c8ea9e0d6f6db1ce2141e3d866", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2ea071ab12eb84e9be8631d64296bc5c0be7ae/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=9b2ea071ab12eb84e9be8631d64296bc5c0be7ae", "patch": "@@ -62,7 +62,7 @@ static void init_label_info (rtx_insn *);\n static void mark_all_labels (rtx_insn *);\n static void mark_jump_label_1 (rtx, rtx_insn *, bool, bool);\n static void mark_jump_label_asm (rtx, rtx_insn *);\n-static void redirect_exp_1 (rtx *, rtx, rtx, rtx);\n+static void redirect_exp_1 (rtx *, rtx, rtx, rtx_insn *);\n static int invert_exp_1 (rtx, rtx_insn *);\n \f\n /* Worker for rebuild_jump_labels and rebuild_jump_labels_chain.  */\n@@ -1457,7 +1457,7 @@ redirect_target (rtx x)\n    NLABEL as a return.  Accrue modifications into the change group.  */\n \n static void\n-redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n+redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx_insn *insn)\n {\n   rtx x = *loc;\n   RTX_CODE code = GET_CODE (x);"}]}