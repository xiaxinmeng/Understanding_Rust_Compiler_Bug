{"sha": "a026b9d64dfbcdd8efd4ffde6f435274f529765c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyNmI5ZDY0ZGZiY2RkOGVmZDRmZmRlNmY0MzUyNzRmNTI5NzY1Yw==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2004-01-26T00:31:50Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2004-01-26T00:31:50Z"}, "message": "* config/c4x/c4x.c (legitimize_operands): Truncate invalid shift counts.\n\nFrom-SVN: r76610", "tree": {"sha": "8befc5c1576f5b27d786d74f3d06ad0efb0c7fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8befc5c1576f5b27d786d74f3d06ad0efb0c7fac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a026b9d64dfbcdd8efd4ffde6f435274f529765c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a026b9d64dfbcdd8efd4ffde6f435274f529765c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a026b9d64dfbcdd8efd4ffde6f435274f529765c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a026b9d64dfbcdd8efd4ffde6f435274f529765c/comments", "author": null, "committer": null, "parents": [{"sha": "b6ab76d653319cd1136a4a619d714d45c9ce12f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ab76d653319cd1136a4a619d714d45c9ce12f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ab76d653319cd1136a4a619d714d45c9ce12f0"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "6a4dac9dc21227056232a95ba36a607b004b48a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a026b9d64dfbcdd8efd4ffde6f435274f529765c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a026b9d64dfbcdd8efd4ffde6f435274f529765c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a026b9d64dfbcdd8efd4ffde6f435274f529765c", "patch": "@@ -1,3 +1,7 @@\n+2004-01-26  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (legitimize_operands): Truncate invalid shift counts.\n+\t\n 2004-01-26  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_valid_operands): More aggressively reject"}, {"sha": "db350cee08091081ecfd58050154618e0b4f5a35", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a026b9d64dfbcdd8efd4ffde6f435274f529765c/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a026b9d64dfbcdd8efd4ffde6f435274f529765c/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=a026b9d64dfbcdd8efd4ffde6f435274f529765c", "patch": "@@ -3944,7 +3944,7 @@ legitimize_operands (enum rtx_code code, rtx *operands, enum machine_mode mode)\n \n   /* We can get better code on a C30 if we force constant shift counts\n      into a register.  This way they can get hoisted out of loops,\n-     tying up a register, but saving an instruction.  The downside is\n+     tying up a register but saving an instruction.  The downside is\n      that they may get allocated to an address or index register, and\n      thus we will get a pipeline conflict if there is a nearby\n      indirect address using an address register. \n@@ -3978,6 +3978,17 @@ legitimize_operands (enum rtx_code code, rtx *operands, enum machine_mode mode)\n       && (GET_CODE (operands[2]) != CONST_INT))\n     operands[2] = gen_rtx_NEG (mode, negate_rtx (mode, operands[2]));\n   \n+\n+  /* When the shift count is greater than 32 then the result \n+     can be implementation dependent.  We truncate the result to\n+     fit in 5 bits so that we do not emit invalid code when\n+     optimising---such as trying to generate lhu2 with 20021124-1.c.  */\n+  if (((code == ASHIFTRT || code == LSHIFTRT || code == ASHIFT)\n+      && (GET_CODE (operands[2]) == CONST_INT))\n+      && INTVAL (operands[2]) > (GET_MODE_BITSIZE (mode) - 1))\n+      operands[2]\n+\t  = GEN_INT (INTVAL (operands[2]) & (GET_MODE_BITSIZE (mode) - 1));\n+\n   return 1;\n }\n "}]}