{"sha": "944f59ffe2ea4cfc7391741ddab281d7d9cf5b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0ZjU5ZmZlMmVhNGNmYzczOTE3NDFkZGFiMjgxZDdkOWNmNWI5NA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-17T00:07:53Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-17T00:07:53Z"}, "message": "[libbacktrace] Handle alt FORMS without .gnu_debugaltlink\n\nHandle DW_FORM_GNU_strp_alt and DW_FORM_GNU_ref_alt references robustly in\npresence of missing .gnu_debugaltlink file.\n\n2019-01-17  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf.c (enum attr_val_encoding): Add ATTR_VAL_NONE.\n\t(read_attribute): Add altlink parameter.  Handle missing altlink for\n\tDW_FORM_GNU_strp_alt and DW_FORM_GNU_ref_alt.\n\t(find_address_ranges, build_address_map, build_dwarf_data): Add and\n\thandle altlink parameter.\n\t(read_referenced_name, read_function_entry): Add argument to\n\tread_attribute call.\n\nFrom-SVN: r267995", "tree": {"sha": "b6cdf66bd75583e54f061be2cd2f157e7989ddf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6cdf66bd75583e54f061be2cd2f157e7989ddf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ad458d5397ffccd419cdd4a00dd816a500ab018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad458d5397ffccd419cdd4a00dd816a500ab018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad458d5397ffccd419cdd4a00dd816a500ab018"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "fb8aebe95c1ae08d579a4476717a0ac62b04b826", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=944f59ffe2ea4cfc7391741ddab281d7d9cf5b94", "patch": "@@ -1,3 +1,13 @@\n+2019-01-17  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf.c (enum attr_val_encoding): Add ATTR_VAL_NONE.\n+\t(read_attribute): Add altlink parameter.  Handle missing altlink for\n+\tDW_FORM_GNU_strp_alt and DW_FORM_GNU_ref_alt.\n+\t(find_address_ranges, build_address_map, build_dwarf_data): Add and\n+\thandle altlink parameter.\n+\t(read_referenced_name, read_function_entry): Add argument to\n+\tread_attribute call.\n+\n 2019-01-17  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf.c (struct dwarf_data): Add altlink field."}, {"sha": "4cae5b4f4a3e166e0bbb0a641fb47ed6d1156f0d", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944f59ffe2ea4cfc7391741ddab281d7d9cf5b94/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=944f59ffe2ea4cfc7391741ddab281d7d9cf5b94", "patch": "@@ -129,6 +129,8 @@ struct abbrevs\n \n enum attr_val_encoding\n {\n+  /* No attribute value.  */\n+  ATTR_VAL_NONE,\n   /* An address.  */\n   ATTR_VAL_ADDRESS,\n   /* A unsigned integer.  */\n@@ -700,7 +702,7 @@ static int\n read_attribute (enum dwarf_form form, struct dwarf_buf *buf,\n \t\tint is_dwarf64, int version, int addrsize,\n \t\tconst unsigned char *dwarf_str, size_t dwarf_str_size,\n-\t\tstruct attr_val *val)\n+\t\tstruct dwarf_data *altlink, struct attr_val *val)\n {\n   /* Avoid warnings about val.u.FIELD may be used uninitialized if\n      this function is inlined.  The warnings aren't valid but can\n@@ -806,7 +808,7 @@ read_attribute (enum dwarf_form form, struct dwarf_buf *buf,\n \tform = read_uleb128 (buf);\n \treturn read_attribute ((enum dwarf_form) form, buf, is_dwarf64,\n \t\t\t       version, addrsize, dwarf_str, dwarf_str_size,\n-\t\t\t       val);\n+\t\t\t       altlink, val);\n       }\n     case DW_FORM_sec_offset:\n       val->encoding = ATTR_VAL_REF_SECTION;\n@@ -832,12 +834,22 @@ read_attribute (enum dwarf_form form, struct dwarf_buf *buf,\n       val->u.uint = read_uleb128 (buf);\n       return 1;\n     case DW_FORM_GNU_ref_alt:\n-      val->encoding = ATTR_VAL_REF_SECTION;\n       val->u.uint = read_offset (buf, is_dwarf64);\n+      if (altlink == NULL)\n+\t{\n+\t  val->encoding = ATTR_VAL_NONE;\n+\t  return 1;\n+\t}\n+      val->encoding = ATTR_VAL_REF_SECTION;\n       return 1;\n     case DW_FORM_GNU_strp_alt:\n-      val->encoding = ATTR_VAL_REF_SECTION;\n       val->u.uint = read_offset (buf, is_dwarf64);\n+      if (altlink == NULL)\n+\t{\n+\t  val->encoding = ATTR_VAL_NONE;\n+\t  return 1;\n+\t}\n+      val->encoding = ATTR_VAL_REF_SECTION;\n       return 1;\n     default:\n       dwarf_buf_error (buf, \"unrecognized DWARF form\");\n@@ -1275,9 +1287,9 @@ find_address_ranges (struct backtrace_state *state, uintptr_t base_address,\n \t\t     const unsigned char *dwarf_str, size_t dwarf_str_size,\n \t\t     const unsigned char *dwarf_ranges,\n \t\t     size_t dwarf_ranges_size,\n-\t\t     int is_bigendian, backtrace_error_callback error_callback,\n-\t\t     void *data, struct unit *u,\n-\t\t     struct unit_addrs_vector *addrs)\n+\t\t     int is_bigendian, struct dwarf_data *altlink,\n+\t\t     backtrace_error_callback error_callback, void *data,\n+\t\t     struct unit *u, struct unit_addrs_vector *addrs)\n {\n   while (unit_buf->left > 0)\n     {\n@@ -1313,7 +1325,7 @@ find_address_ranges (struct backtrace_state *state, uintptr_t base_address,\n \n \t  if (!read_attribute (abbrev->attrs[i].form, unit_buf,\n \t\t\t       u->is_dwarf64, u->version, u->addrsize,\n-\t\t\t       dwarf_str, dwarf_str_size, &val))\n+\t\t\t       dwarf_str, dwarf_str_size, altlink, &val))\n \t    return 0;\n \n \t  switch (abbrev->attrs[i].name)\n@@ -1411,7 +1423,7 @@ find_address_ranges (struct backtrace_state *state, uintptr_t base_address,\n \t  if (!find_address_ranges (state, base_address, unit_buf,\n \t\t\t\t    dwarf_str, dwarf_str_size,\n \t\t\t\t    dwarf_ranges, dwarf_ranges_size,\n-\t\t\t\t    is_bigendian, error_callback, data,\n+\t\t\t\t    is_bigendian, altlink, error_callback, data,\n \t\t\t\t    u, addrs))\n \t    return 0;\n \t}\n@@ -1430,8 +1442,9 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n \t\t   const unsigned char *dwarf_abbrev, size_t dwarf_abbrev_size,\n \t\t   const unsigned char *dwarf_ranges, size_t dwarf_ranges_size,\n \t\t   const unsigned char *dwarf_str, size_t dwarf_str_size,\n-\t\t   int is_bigendian, backtrace_error_callback error_callback,\n-\t\t   void *data, struct unit_addrs_vector *addrs)\n+\t\t   int is_bigendian, struct dwarf_data *altlink,\n+\t\t   backtrace_error_callback error_callback, void *data,\n+\t\t   struct unit_addrs_vector *addrs)\n {\n   struct dwarf_buf info;\n   struct backtrace_vector units;\n@@ -1532,7 +1545,7 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n       if (!find_address_ranges (state, base_address, &unit_buf,\n \t\t\t\tdwarf_str, dwarf_str_size,\n \t\t\t\tdwarf_ranges, dwarf_ranges_size,\n-\t\t\t\tis_bigendian, error_callback, data,\n+\t\t\t\tis_bigendian, altlink, error_callback, data,\n \t\t\t\tu, addrs))\n \tgoto fail;\n \n@@ -2184,7 +2197,7 @@ read_referenced_name (struct dwarf_data *ddata, struct unit *u,\n       if (!read_attribute (abbrev->attrs[i].form, &unit_buf,\n \t\t\t   u->is_dwarf64, u->version, u->addrsize,\n \t\t\t   ddata->dwarf_str, ddata->dwarf_str_size,\n-\t\t\t   &val))\n+\t\t\t   ddata->altlink, &val))\n \treturn NULL;\n \n       switch (abbrev->attrs[i].name)\n@@ -2396,7 +2409,7 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t  if (!read_attribute (abbrev->attrs[i].form, unit_buf,\n \t\t\t       u->is_dwarf64, u->version, u->addrsize,\n \t\t\t       ddata->dwarf_str, ddata->dwarf_str_size,\n-\t\t\t       &val))\n+\t\t\t       ddata->altlink, &val))\n \t    return 0;\n \n \t  /* The compile unit sets the base address for any address\n@@ -3014,7 +3027,8 @@ build_dwarf_data (struct backtrace_state *state,\n   if (!build_address_map (state, base_address, dwarf_info, dwarf_info_size,\n \t\t\t  dwarf_abbrev, dwarf_abbrev_size, dwarf_ranges,\n \t\t\t  dwarf_ranges_size, dwarf_str, dwarf_str_size,\n-\t\t\t  is_bigendian, error_callback, data, &addrs_vec))\n+\t\t\t  is_bigendian, altlink, error_callback, data,\n+\t\t\t  &addrs_vec))\n     return NULL;\n \n   if (!backtrace_vector_release (state, &addrs_vec.vec, error_callback, data))"}]}