{"sha": "50b29dbb90217345d2253a9a5397a513cdf317a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiMjlkYmI5MDIxNzM0NWQyMjUzYTlhNTM5N2E1MTNjZGYzMTdhNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2003-09-11T04:44:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2003-09-11T04:44:23Z"}, "message": "combine.c (force_to_mode): Set fuller_mask based only on mask, not op_mode.\n\n\t* combine.c (force_to_mode): Set fuller_mask based only on mask,\n\tnot op_mode.\n\nFrom-SVN: r71292", "tree": {"sha": "efe8e130ede7b975e690dbbcac8e7c7d5170cb05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efe8e130ede7b975e690dbbcac8e7c7d5170cb05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b29dbb90217345d2253a9a5397a513cdf317a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b29dbb90217345d2253a9a5397a513cdf317a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b29dbb90217345d2253a9a5397a513cdf317a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b29dbb90217345d2253a9a5397a513cdf317a5/comments", "author": null, "committer": null, "parents": [{"sha": "dbc66058f0bc72234e3926846dc19211ac93a952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc66058f0bc72234e3926846dc19211ac93a952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc66058f0bc72234e3926846dc19211ac93a952"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "f6e1b35f3ca1c9cd397c25ef0e22cf61bee88fe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b29dbb90217345d2253a9a5397a513cdf317a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b29dbb90217345d2253a9a5397a513cdf317a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50b29dbb90217345d2253a9a5397a513cdf317a5", "patch": "@@ -1,3 +1,8 @@\n+2003-09-10  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* combine.c (force_to_mode): Set fuller_mask based only on mask,\n+\tnot op_mode.\n+\n Thu Sep 11 01:21:05 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* c-objc-common.c (c_cannot_inline_tree_fn): Warn"}, {"sha": "5f005e438a27ef94cf7f64d9ad5e069a2e1cea3e", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b29dbb90217345d2253a9a5397a513cdf317a5/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b29dbb90217345d2253a9a5397a513cdf317a5/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=50b29dbb90217345d2253a9a5397a513cdf317a5", "patch": "@@ -6833,15 +6833,13 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n     mask &= GET_MODE_MASK (op_mode);\n \n   /* When we have an arithmetic operation, or a shift whose count we\n-     do not know, we need to assume that all bit the up to the highest-order\n+     do not know, we need to assume that all bits up to the highest-order\n      bit in MASK will be needed.  This is how we form such a mask.  */\n-  if (op_mode)\n-    fuller_mask = (GET_MODE_BITSIZE (op_mode) >= HOST_BITS_PER_WIDE_INT\n-\t\t   ? GET_MODE_MASK (op_mode)\n-\t\t   : (((unsigned HOST_WIDE_INT) 1 << (floor_log2 (mask) + 1))\n-\t\t      - 1));\n+  if (mask & ((unsigned HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT - 1)))\n+    fuller_mask = ~(unsigned HOST_WIDE_INT) 0;\n   else\n-    fuller_mask = ~(HOST_WIDE_INT) 0;\n+    fuller_mask = (((unsigned HOST_WIDE_INT) 1 << (floor_log2 (mask) + 1))\n+\t\t   - 1);\n \n   /* Determine what bits of X are guaranteed to be (non)zero.  */\n   nonzero = nonzero_bits (x, mode);"}]}