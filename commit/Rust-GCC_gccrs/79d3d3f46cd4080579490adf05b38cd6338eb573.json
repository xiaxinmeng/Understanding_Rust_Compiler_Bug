{"sha": "79d3d3f46cd4080579490adf05b38cd6338eb573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlkM2QzZjQ2Y2Q0MDgwNTc5NDkwYWRmMDViMzhjZDYzMzhlYjU3Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-03T02:49:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-03T02:49:28Z"}, "message": "re PR c++/47950 ([C++0x] Internal compiler error: non-dependent declaration as condition causes tsubst_copy_and_build assertion failure.)\n\n\tPR c++/47950\n\t* parser.c (cp_parser_condition): Don't fold_non_dependent_expr here.\n\nFrom-SVN: r170639", "tree": {"sha": "87fbfd58163991bd059edb6bb38afc64260b378a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87fbfd58163991bd059edb6bb38afc64260b378a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79d3d3f46cd4080579490adf05b38cd6338eb573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d3d3f46cd4080579490adf05b38cd6338eb573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d3d3f46cd4080579490adf05b38cd6338eb573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d3d3f46cd4080579490adf05b38cd6338eb573/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f"}], "stats": {"total": 88, "additions": 85, "deletions": 3}, "files": [{"sha": "264bc7c7ed9ff0c0b2bf62e04cf97888f9e52b15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79d3d3f46cd4080579490adf05b38cd6338eb573", "patch": "@@ -1,5 +1,8 @@\n 2011-03-02  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47950\n+\t* parser.c (cp_parser_condition): Don't fold_non_dependent_expr here.\n+\n \tPR c++/47774\n \t* tree.c (build_vec_init_elt): Split out from...\n \t(build_vec_init_expr): ...here."}, {"sha": "510fcb1117995776d5101a59be37faa6a9e4072c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=79d3d3f46cd4080579490adf05b38cd6338eb573", "patch": "@@ -8687,9 +8687,6 @@ cp_parser_condition (cp_parser* parser)\n \t  if (BRACE_ENCLOSED_INITIALIZER_P (initializer))\n \t    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \n-\t  if (!non_constant_p)\n-\t    initializer = fold_non_dependent_expr (initializer);\n-\n \t  /* Process the initializer.  */\n \t  cp_finish_decl (decl,\n \t\t\t  initializer, !non_constant_p,"}, {"sha": "7b139222f3a0558f38572c3c414b703cd59d7e6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79d3d3f46cd4080579490adf05b38cd6338eb573", "patch": "@@ -1,5 +1,7 @@\n 2011-03-02  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/regress/condition1.C: New.\n+\n \t* g++.dg/cpp0x/constexpr-ctor9.C: New.\n \n 2011-03-01  Jason Merrill  <jason@redhat.com>"}, {"sha": "0346764f79b846f42a0deb80777449e0a3aaba94", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/condition1.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fcondition1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d3d3f46cd4080579490adf05b38cd6338eb573/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fcondition1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fcondition1.C?ref=79d3d3f46cd4080579490adf05b38cd6338eb573", "patch": "@@ -0,0 +1,80 @@\n+// PR c++/47950\n+// { dg-options -std=c++0x }\n+\n+template <typename T> struct empty\n+{\n+   // allow success case to build (not relevant to bug)\n+   operator bool() { return true; }\n+};\n+\n+template <typename T> struct from_int\n+{\n+   from_int(int) {}\n+\n+   // allow success case to build (not relevant to bug)\n+   operator bool() { return true; }\n+};\n+\n+template <typename T>\n+from_int<T> via_function(T v)\n+{\n+   return from_int<T>(v);\n+}\n+\n+template <typename T>\n+void f()\n+{\n+   // ********* this section compiles ***********\n+\n+   // these plain initializers work fine\n+   from_int<int> a = 7;\n+   from_int<int> b = from_int<int>(7);\n+   empty<int>    c = empty<int>();\n+   from_int<T> ta = 7;\n+   from_int<T> tb = from_int<T>(7);\n+   empty<T>    tc = empty<T>();\n+\n+   // these dependent condition decls work fine\n+   if (empty<T> x = empty<T>())\n+      ;\n+   if (from_int<T> x = 7)\n+      ;\n+   if (from_int<T> x = from_int<T>(7))\n+      ;\n+   if (from_int<T> x = via_function(T()))\n+      ;\n+\n+   // this non-dependent condition decl using conversion works fine\n+   if (from_int<int> x = 7)\n+      ;\n+\n+   // these non-dependent condition decls using conversion or braced-\n+   // initialization work fine (in c++0x mode only course)\n+   #if __GXX_EXPERIMENTAL_CXX0X__\n+   if (empty<int> x {})\n+      ;\n+   if (from_int<int> x {7})\n+      ;\n+   #endif\n+\n+   // ********** this section fails in C++0x ***********\n+\n+   // the following non-dependent condition decls cause an assertion\n+   // failure in\n+   //\n+   //   tsubst_copy_and_build, at cp/pt.c:13370\n+   //\n+   // in C++0x mode\n+   //\n+   if (empty<int> x = empty<int>())\n+      ;\n+   if (from_int<int> x = from_int<int>(7))\n+      ;\n+   if (from_int<int> x = via_function(7))\n+      ;\n+}\n+\n+int main()\n+{\n+   f<int>();\n+}"}]}