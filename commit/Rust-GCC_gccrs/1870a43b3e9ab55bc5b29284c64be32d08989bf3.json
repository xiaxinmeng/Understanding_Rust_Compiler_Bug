{"sha": "1870a43b3e9ab55bc5b29284c64be32d08989bf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3MGE0M2IzZTlhYjU1YmM1YjI5Mjg0YzY0YmUzMmQwODk4OWJmMw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-02-19T01:14:17Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-02-19T01:14:17Z"}, "message": "re PR java/20056 ('verification failed: incompatible type on stack' with --indirect-dispatch)\n\n\tPR java/20056:\n\t* verify-glue.c (vfy_class_has_field): New function.\n\t* verify.h (vfy_class_has_field): Declare.\n\t* verify-impl.c (check_field_constant): Added 'putfield'\n\targument.\n\t(verify_instructions_0): Updated.\n\t(types_equal): New function.\n\nFrom-SVN: r95258", "tree": {"sha": "70744c5a070902162b614e77d6868d603b6be97f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70744c5a070902162b614e77d6868d603b6be97f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1870a43b3e9ab55bc5b29284c64be32d08989bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1870a43b3e9ab55bc5b29284c64be32d08989bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1870a43b3e9ab55bc5b29284c64be32d08989bf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1870a43b3e9ab55bc5b29284c64be32d08989bf3/comments", "author": null, "committer": null, "parents": [{"sha": "4c334b377cb494b44fabd5f5263d53863f051748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c334b377cb494b44fabd5f5263d53863f051748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c334b377cb494b44fabd5f5263d53863f051748"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "84a0e78af1cd55f270b166c40247eefa4efbbfc8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1870a43b3e9ab55bc5b29284c64be32d08989bf3", "patch": "@@ -1,3 +1,13 @@\n+2005-02-18  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/20056:\n+\t* verify-glue.c (vfy_class_has_field): New function.\n+\t* verify.h (vfy_class_has_field): Declare.\n+\t* verify-impl.c (check_field_constant): Added 'putfield'\n+\targument.\n+\t(verify_instructions_0): Updated.\n+\t(types_equal): New function.\n+\n 2005-02-14  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/19921:"}, {"sha": "5d480e88d6820fdbd45a252461713ee840ad930b", "filename": "gcc/java/verify-glue.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2Fverify-glue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2Fverify-glue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify-glue.c?ref=1870a43b3e9ab55bc5b29284c64be32d08989bf3", "patch": "@@ -1,5 +1,5 @@\n /* Glue to interface gcj with bytecode verifier.\n-   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -385,6 +385,21 @@ vfy_null_type (void)\n   return TYPE_NULL;\n }\n \n+bool\n+vfy_class_has_field (vfy_jclass klass, vfy_string name,\n+\t\t     vfy_string signature)\n+{\n+  tree field = TYPE_FIELDS (klass);\n+  while (field != NULL_TREE)\n+    {\n+      if (DECL_NAME (field) == name\n+\t  && build_java_signature (TREE_TYPE (field)) == signature)\n+\treturn true;\n+      field = TREE_CHAIN (field);\n+    }\n+  return false;\n+}\n+\n int\n vfy_fail (const char *message, int pc, vfy_jclass ignore1 ATTRIBUTE_UNUSED,\n \t  vfy_method *ignore2 ATTRIBUTE_UNUSED)"}, {"sha": "376f74948603af282817333fbc44633188ba3608", "filename": "gcc/java/verify-impl.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2Fverify-impl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2Fverify-impl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify-impl.c?ref=1870a43b3e9ab55bc5b29284c64be32d08989bf3", "patch": "@@ -738,6 +738,20 @@ types_compatible (type *t, type *k)\n   return ref_compatible (t->klass, k->klass);\n }\n \n+/* Return true if two types are equal.  Only valid for reference\n+   types.  */\n+static bool\n+types_equal (type *t1, type *t2)\n+{\n+  if (t1->key != reference_type || t1->key != uninitialized_reference_type\n+      || t2->key != reference_type || t2->key != uninitialized_reference_type)\n+    return false;\n+  /* Only single-ref types are allowed.  */\n+  if (t1->klass->ref_next || t2->klass->ref_next)\n+    return false;\n+  return refs_equal (t1->klass, t2->klass);\n+}\n+\n static bool\n type_isvoid (type *t)\n {\n@@ -2117,9 +2131,10 @@ handle_field_or_method (int index, int expected,\n   return check_class_constant (class_index);\n }\n \n-/* Return field's type, compute class' type if requested.  */\n+/* Return field's type, compute class' type if requested.  If\n+   PUTFIELD is true, use the special 'putfield' semantics.  */\n static type\n-check_field_constant (int index, type *class_type)\n+check_field_constant (int index, type *class_type, bool putfield)\n {\n   vfy_string name, field_type;\n   const char *typec;\n@@ -2137,6 +2152,17 @@ check_field_constant (int index, type *class_type)\n     init_type_from_string (&t, field_type);\n   else\n     init_type_from_tag (&t, get_type_val_for_signature (typec[0]));\n+\n+  /* We have an obscure special case here: we can use `putfield' on a\n+     field declared in this class, even if `this' has not yet been\n+     initialized.  */\n+  if (putfield\n+      && ! type_initialized (&vfr->current_state->this_type)\n+      && vfr->current_state->this_type.pc == SELF\n+      && types_equal (&vfr->current_state->this_type, &ct)\n+      && vfy_class_has_field (vfr->current_class, name, field_type))\n+    type_set_uninitialized (class_type, SELF);\n+\n   return t;\n }\n \n@@ -2971,31 +2997,24 @@ verify_instructions_0 (void)\n \t  invalidate_pc ();\n \t  break;\n \tcase op_getstatic:\n-\t  push_type_t (check_field_constant (get_ushort (), NULL));\n+\t  push_type_t (check_field_constant (get_ushort (), NULL, false));\n \t  break;\n \tcase op_putstatic:\n-\t  pop_type_t (check_field_constant (get_ushort (), NULL));\n+\t  pop_type_t (check_field_constant (get_ushort (), NULL, false));\n \t  break;\n \tcase op_getfield:\n \t  {\n \t    type klass;\n-\t    type field = check_field_constant (get_ushort (), &klass);\n+\t    type field = check_field_constant (get_ushort (), &klass, false);\n \t    pop_type_t (klass);\n \t    push_type_t (field);\n \t  }\n \t  break;\n \tcase op_putfield:\n \t  {\n \t    type klass;\n-\t    type field = check_field_constant (get_ushort (), &klass);\n+\t    type field = check_field_constant (get_ushort (), &klass, true);\n \t    pop_type_t (field);\n-\n-\t    /* We have an obscure special case here: we can use\n-\t       `putfield' on a field declared in this class, even if\n-\t       `this' has not yet been initialized.  */\n-\t    if (! type_initialized (&vfr->current_state->this_type)\n-\t\t&& vfr->current_state->this_type.pc == SELF)\n-\t      type_set_uninitialized (&klass, SELF);\n \t    pop_type_t (klass);\n \t  }\n \t  break;"}, {"sha": "b23a08a988849baddac661ec3a7cd594c61351f2", "filename": "gcc/java/verify.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2Fverify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1870a43b3e9ab55bc5b29284c64be32d08989bf3/gcc%2Fjava%2Fverify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.h?ref=1870a43b3e9ab55bc5b29284c64be32d08989bf3", "patch": "@@ -1,5 +1,5 @@\n /* Declarations to interface gcj with bytecode verifier.\n-   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -126,6 +126,8 @@ void vfy_note_stack_type (vfy_method *method, int pc, int slot,\n void vfy_note_local_type (vfy_method *method, int pc, int slot,\n \t\t\t  vfy_jclass type);\n void vfy_note_instruction_seen (int pc);\n+bool vfy_class_has_field (vfy_jclass klass, vfy_string name,\n+\t\t\t  vfy_string signature);\n \n #define GLOM(name, stuff) name ## stuff\n #define VFY_PRIMITIVE_CLASS(name) \\"}]}