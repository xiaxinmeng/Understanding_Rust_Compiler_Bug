{"sha": "7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M3Y2U3M2FhN2I2ZmVjZTYwOWQwODVlN2FkMjY1YWJmMzRlMDhmMQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2006-05-26T20:21:53Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2006-05-26T20:21:53Z"}, "message": "re PR rtl-optimization/27661 (ICE in subst_reloads)\n\n\tPR rtl-optimization/27661\n\t* reload.c (find_reloads): When reloading a VOIDmode constant\n\tas address due to an EXTRA_MEMORY_CONSTRAINT or 'o' constraint,\n\tuse Pmode as mode of the reload register.\n\n\tPR rtl-optimization/27661\n\t* gcc.dg/pr27661.c: New test case.\n\nFrom-SVN: r114141", "tree": {"sha": "4aeaea82a057fcb7aa1fa27177beff021d57bea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aeaea82a057fcb7aa1fa27177beff021d57bea8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/comments", "author": null, "committer": null, "parents": [{"sha": "c539d4635bb0434bf7df202d2d403f5795e96865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c539d4635bb0434bf7df202d2d403f5795e96865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c539d4635bb0434bf7df202d2d403f5795e96865"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "35c5e7a473a01f9ad4350e18531d79e0c8ddf5d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "patch": "@@ -1,3 +1,10 @@\n+2006-05-26  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR rtl-optimization/27661\n+\t* reload.c (find_reloads): When reloading a VOIDmode constant\n+\tas address due to an EXTRA_MEMORY_CONSTRAINT or 'o' constraint,\n+\tuse Pmode as mode of the reload register.\n+\n 2006-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/invoke.texi (Optimize Options): Document that -funit-at-a-time"}, {"sha": "feaec60433cb0bb7574c00a1fd5ba9073db9bb54", "filename": "gcc/reload.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "patch": "@@ -3854,11 +3854,19 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t && goal_alternative_offmemok[i]\n \t\t && MEM_P (recog_data.operand[i]))\n \t  {\n+\t    /* If the address to be reloaded is a VOIDmode constant,\n+\t       use Pmode as mode of the reload register, as would have\n+\t       been done by find_reloads_address.  */\n+\t    enum machine_mode address_mode;\n+\t    address_mode = GET_MODE (XEXP (recog_data.operand[i], 0));\n+\t    if (address_mode == VOIDmode)\n+\t      address_mode = Pmode;\n+\n \t    operand_reloadnum[i]\n \t      = push_reload (XEXP (recog_data.operand[i], 0), NULL_RTX,\n \t\t\t     &XEXP (recog_data.operand[i], 0), (rtx*) 0,\n \t\t\t     base_reg_class (VOIDmode, MEM, SCRATCH),\n-\t\t\t     GET_MODE (XEXP (recog_data.operand[i], 0)),\n+\t\t\t     address_mode,\n \t\t\t     VOIDmode, 0, 0, i, RELOAD_FOR_INPUT);\n \t    rld[operand_reloadnum[i]].inc\n \t      = GET_MODE_SIZE (GET_MODE (recog_data.operand[i]));"}, {"sha": "e45fa3bc5b0df442e33b17938596e6a283a39635", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "patch": "@@ -1,3 +1,8 @@\n+2006-05-26  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR rtl-optimization/27661\n+\t* gcc.dg/pr27661.c: New test case.\n+\n 2006-05-26  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR fortran/23151"}, {"sha": "7660c822fb910351f870393e06264543d20d4edf", "filename": "gcc/testsuite/gcc.dg/pr27661.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27661.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7ce73aa7b6fece609d085e7ad265abf34e08f1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27661.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27661.c?ref=7c7ce73aa7b6fece609d085e7ad265abf34e08f1", "patch": "@@ -0,0 +1,25 @@\n+/* This used to ICE on s390 due to a reload bug.  */\n+\n+/* { dg-do compile { target s390*-*-* } } */\n+/* { dg-options \"-O2 -march=z990 -ftracer\" } */\n+\n+extern int memcmp (const void *s1, const void *s2, unsigned long n);\n+extern int printf (__const char *__restrict __format, ...);\n+\n+struct test\n+{\n+  char tmp[4096];\n+  char msgtype[2];\n+};\n+\n+void test (struct test *testtb)\n+{\n+  if (testtb)\n+    printf (\"a\");\n+\n+  if (memcmp(testtb->msgtype, \"a\", 2))\n+    printf (\"a\");\n+\n+  printf (\"b\");\n+}\n+"}]}