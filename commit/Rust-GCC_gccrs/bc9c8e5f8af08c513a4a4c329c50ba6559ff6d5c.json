{"sha": "bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c", "node_id": "C_kwDOANBUbNoAKGJjOWM4ZTVmOGFmMDhjNTEzYTRhNGMzMjljNTBiYTY1NTlmZjZkNWM", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-03T08:32:22Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-04T08:09:52Z"}, "message": "Extend vternlog define_insn_and_split to memory_operand to enable more optimziation.\n\ngcc/ChangeLog:\n\n\tPR target/101989\n\t* config/i386/predicates.md (reg_or_notreg_operand): Rename to ..\n\t(regmem_or_bitnot_regmem_operand): .. and extend to handle\n\tmemory_operand.\n\t* config/i386/sse.md (*<avx512>_vpternlog<mode>_1): Force_reg\n\tthe operands which are required to be register_operand.\n\t(*<avx512>_vpternlog<mode>_2): Ditto.\n\t(*<avx512>_vpternlog<mode>_3): Ditto.\n\t(*<avx512>_vternlog<mode>_all): Disallow embeded broadcast for\n\tvector HFmodes since it's not a real AVX512FP16 instruction.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr101989-3.c: New test.", "tree": {"sha": "a68a67fec78c9ef4eb3ada91bd6641bed844ed55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68a67fec78c9ef4eb3ada91bd6641bed844ed55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ce7382fccc15ce2355306b3f5be7afc00f81f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ce7382fccc15ce2355306b3f5be7afc00f81f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ce7382fccc15ce2355306b3f5be7afc00f81f4"}], "stats": {"total": 87, "additions": 72, "deletions": 15}, "files": [{"sha": "114d8d448f11cdd448fa55269ea83986a0d574f6", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c", "patch": "@@ -1046,10 +1046,10 @@\n \n ;; True for registers, or (not: registers).  Used to optimize 3-operand\n ;; bitwise operation.\n-(define_predicate \"reg_or_notreg_operand\"\n-  (ior (match_operand 0 \"register_operand\")\n+(define_predicate \"regmem_or_bitnot_regmem_operand\"\n+  (ior (match_operand 0 \"nonimmediate_operand\")\n        (and (match_code \"not\")\n-\t    (match_test \"register_operand (XEXP (op, 0), mode)\"))))\n+\t    (match_test \"nonimmediate_operand (XEXP (op, 0), mode)\"))))\n \n ;; True if OP is acceptable as operand of DImode shift expander.\n (define_predicate \"shiftdi_operand\""}, {"sha": "09f00dc7ae955472f938a92f3599a81596fedd74", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c", "patch": "@@ -11662,7 +11662,11 @@\n \t   (match_operand:V 3 \"bcst_vector_operand\" \"vmBr\")\n \t   (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t  UNSPEC_VTERNLOG))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F\n+/* Disallow embeded broadcast for vector HFmode since\n+   it's not real AVX512FP16 instruction.  */\n+  && (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) >= 4\n+     || GET_CODE (operands[3]) != VEC_DUPLICATE)\"\n   \"vpternlog<ternlogsuffix>\\t{%4, %3, %2, %0|%0, %2, %3, %4}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n@@ -11690,11 +11694,11 @@\n   [(set (match_operand:V 0 \"register_operand\")\n \t(any_logic:V\n \t  (any_logic1:V\n-\t    (match_operand:V 1 \"reg_or_notreg_operand\")\n-\t    (match_operand:V 2 \"reg_or_notreg_operand\"))\n+\t    (match_operand:V 1 \"regmem_or_bitnot_regmem_operand\")\n+\t    (match_operand:V 2 \"regmem_or_bitnot_regmem_operand\"))\n \t  (any_logic2:V\n-\t    (match_operand:V 3 \"reg_or_notreg_operand\")\n-\t    (match_operand:V 4 \"reg_or_notreg_operand\"))))]\n+\t    (match_operand:V 3 \"regmem_or_bitnot_regmem_operand\")\n+\t    (match_operand:V 4 \"regmem_or_bitnot_regmem_operand\"))))]\n   \"(<MODE_SIZE> == 64 || TARGET_AVX512VL)\n    && ix86_pre_reload_split ()\n    && (rtx_equal_p (STRIP_UNARY (operands[1]),\n@@ -11763,6 +11767,10 @@\n   operands[1] = STRIP_UNARY (operands[1]);\n   operands[2] = STRIP_UNARY (operands[2]);\n   operands[6] = STRIP_UNARY (operands[6]);\n+  if (!register_operand (operands[2], <MODE>mode))\n+     operands[2] = force_reg (<MODE>mode, operands[2]);\n+  if (!register_operand (operands[6], <MODE>mode))\n+     operands[6] = force_reg (<MODE>mode, operands[6]);\n   operands[5] = GEN_INT (reg_mask);\n })\n \n@@ -11771,10 +11779,10 @@\n \t(any_logic:V\n \t  (any_logic1:V\n \t    (any_logic2:V\n-\t      (match_operand:V 1 \"reg_or_notreg_operand\")\n-\t      (match_operand:V 2 \"reg_or_notreg_operand\"))\n-\t    (match_operand:V 3 \"reg_or_notreg_operand\"))\n-\t  (match_operand:V 4 \"reg_or_notreg_operand\")))]\n+\t      (match_operand:V 1 \"regmem_or_bitnot_regmem_operand\")\n+\t      (match_operand:V 2 \"regmem_or_bitnot_regmem_operand\"))\n+\t    (match_operand:V 3 \"regmem_or_bitnot_regmem_operand\"))\n+\t  (match_operand:V 4 \"regmem_or_bitnot_regmem_operand\")))]\n   \"(<MODE_SIZE> == 64 || TARGET_AVX512VL)\n    && ix86_pre_reload_split ()\n    && (rtx_equal_p (STRIP_UNARY (operands[1]),\n@@ -11844,15 +11852,20 @@\n   operands[2] = STRIP_UNARY (operands[2]);\n   operands[6] = STRIP_UNARY (operands[6]);\n   operands[5] = GEN_INT (reg_mask);\n+  if (!register_operand (operands[2], <MODE>mode))\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n+  if (!register_operand (operands[6], <MODE>mode))\n+    operands[6] = force_reg (<MODE>mode, operands[6]);\n+\n })\n \n (define_insn_and_split \"*<avx512>_vpternlog<mode>_3\"\n   [(set (match_operand:V 0 \"register_operand\")\n \t(any_logic:V\n \t  (any_logic1:V\n-\t    (match_operand:V 1 \"reg_or_notreg_operand\")\n-\t    (match_operand:V 2 \"reg_or_notreg_operand\"))\n-\t  (match_operand:V 3 \"reg_or_notreg_operand\")))]\n+\t    (match_operand:V 1 \"regmem_or_bitnot_regmem_operand\")\n+\t    (match_operand:V 2 \"regmem_or_bitnot_regmem_operand\"))\n+\t  (match_operand:V 3 \"regmem_or_bitnot_regmem_operand\")))]\n   \"(<MODE_SIZE> == 64 || TARGET_AVX512VL)\n    && ix86_pre_reload_split ()\"\n   \"#\"\n@@ -11883,6 +11896,10 @@\n   operands[2] = STRIP_UNARY (operands[2]);\n   operands[3] = STRIP_UNARY (operands[3]);\n   operands[4] = GEN_INT (reg_mask);\n+  if (!register_operand (operands[2], <MODE>mode))\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n+  if (!register_operand (operands[3], <MODE>mode))\n+    operands[3] = force_reg (<MODE>mode, operands[3]);\n })\n \n "}, {"sha": "dfd89918c171db5a67e2209f12204d5ea4e546e4", "filename": "gcc/testsuite/gcc.target/i386/pr101989-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101989-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101989-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101989-3.c?ref=bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpternlog\" 5 } } */\n+/* { dg-final { scan-assembler-not \"vpxor\" } } */\n+/* { dg-final { scan-assembler-not \"vpor\" } } */\n+/* { dg-final { scan-assembler-not \"vpand\" } } */\n+\n+#include<immintrin.h>\n+\n+extern __m256i src1, src2, src3;\n+\n+__m256i\n+foo (void)\n+{\n+  return (src2 & ~src1) | (src3 & src1);\n+}\n+\n+__m256i\n+foo1 (void)\n+{\n+  return (src2 & src1) | (src3 & ~src1);\n+}\n+\n+__m256i\n+foo2 (void)\n+{\n+  return (src2 & src1) | (~src3 & src1);\n+}\n+\n+__m256i\n+foo3 (void)\n+{\n+  return (~src2 & src1) | (src3 & src1);\n+}\n+\n+__m256i\n+foo4 (void)\n+{\n+  return src3 & src2 ^ src1;\n+}"}]}