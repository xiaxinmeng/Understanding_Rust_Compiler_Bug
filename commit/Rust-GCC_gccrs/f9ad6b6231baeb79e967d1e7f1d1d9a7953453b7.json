{"sha": "f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhZDZiNjIzMWJhZWI3OWU5NjdkMWU3ZjFkMWQ5YTc5NTM0NTNiNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T15:08:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T15:08:04Z"}, "message": "[multiple changes]\n\n2011-08-03  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_prag.adb (Process_Interface_Name): Allow duplicated export names\n\tin Java since they are always enclosed in a namespace that\n\tdifferentiates them, and overloaded entities are supported by the VM.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Determine_Range): If a computed bound of an operation is\n\toutside the range of the base type of the expression, and overflow\n\tchecks are enabled, the result is unknown and cannot be used for any\n\tsubsequent constant folding.\n\t* sem_eval.adb (Compile_Time_Compare): if the bounds of one operand are\n\tunknown, so is the result of the comparison.\n\n2011-08-03  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-except-2005.adb (Raise_From_Controlled_Operation): Add new formal\n\tFrom_Abort. When finalization was triggered by an abort, propagate\n\tStandard'Abort_Signal rather than Program_Error.\n\t* a-except-2005.ads (Raise_From_Controlled_Operation): Add new formal\n\tFrom_Abort.\n\t* a-except.adb (Raise_From_Controlled_Operation): Add new formal\n\tFrom_Abort. When finalization was triggered by an abort, propagate\n\tStandard'Abort_Signal rather than Program_Error.\n\t* a-except.ads:(Raise_From_Controlled_Operation): Add new formal\n\tFrom_Abort.\n\t* exp_ch7.adb:(Build_Adjust_Or_Finalize_Statements): New local variable\n\tAbort_Id. Update the calls to Build_Object_Declarations and\n\tBuild_Raise_Statement to include Abort_Id.\n\t(Build_Adjust_Statements): New local variable Abort_Id. Update the\n\tcalls to Build_Object_Declarations and Build_Raise_Statement to include\n\tAbort_Id.\n\t(Build_Finalize_Statements): New local variable Abort_Id. Update the\n\tcalls to Build_Object_Declarations and Build_Raise_Statement to include\n\tAbort_Id.\n\t(Build_Components): Create an entity for Abort_Id when exceptions are\n\tallowed on the target.\n\t(Build_Finalizer): New local variable Abort_Id.\n\t(Build_Initialize_Statements): New local variable Abort_Id. Update the\n\tcalls to Build_Object_Declarations and Build_Raise_Statement to include\n\tAbort_Id.\n\t(Build_Object_Declarations): Add new formal Abort_Id. Create the\n\tdeclaration of flag Abort_Id to preserve the original abort status\n\tbefore finalization code is executed.\n\t(Build_Raise_Statement): Add new formal Abort_Id. Pass Abort_Id to\n\truntime routine Raise_From_Controlled_Operation.\n\t(Create_Finalizer): Update the call to Build_Raise_Statement to include\n\tAbort_Id. Update the call to Build_Object_Declarations to include\n\tAbort_Id. Update the layout of the finalizer body.\n\t(Make_Handler_For_Ctrl_Operation): Add an actual for From_Abort.\n\t(Process_Transient_Objects): New local variable Abort_Id. Remove the\n\tclunky code to create all flags and objects related to\n\texception propagation and replace it with a call to\n\tBuild_Object_Declarations. Update the call to Build_Raise_Statement to\n\tinclude Abort_Id.\n\t* exp_ch7.ads (Build_Object_Declarations): Moved from body to spec.\n\tAdd new formal Abort_Id and associated comment on its use.\n\t(Build_Raise_Statement): Add new formal Abort_Id and associated comment\n\ton its use.\n\t* exp_intr.adb (Expand_Unc_Deallocation): New local variable Abort_Id.\n\tRemove the clunky code to create all flags and objects related to\n\texception propagation and replace it with a call to\n\tBuild_Object_Declarations. Update the call to Build_Raise_Statement.\n\n2011-08-03  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* s-tassta.adb: Fix minor typos.\n\n2011-08-03  Robert Dewar  <dewar@adacore.com>\n\n\t* rtsfind.ads, makeutl.ads, prj.ads, prj.adb, make.adb,\n\tlib-writ.adb, makeutl.adb, s-soflin.ads, clean.adb: Minor reformatting.\n\nFrom-SVN: r177283", "tree": {"sha": "87091994956cdeda34009c2edcbcb3ab478bbce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87091994956cdeda34009c2edcbcb3ab478bbce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/comments", "author": null, "committer": null, "parents": [{"sha": "1cdfa9be54975f0566d6f261a706dcb8d767601d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdfa9be54975f0566d6f261a706dcb8d767601d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cdfa9be54975f0566d6f261a706dcb8d767601d"}], "stats": {"total": 677, "additions": 426, "deletions": 251}, "files": [{"sha": "e025e2bbd5ce7efbae1b9075615d69d59d213614", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -1,3 +1,77 @@\n+2011-08-03  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.adb (Process_Interface_Name): Allow duplicated export names\n+\tin Java since they are always enclosed in a namespace that\n+\tdifferentiates them, and overloaded entities are supported by the VM.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Determine_Range): If a computed bound of an operation is\n+\toutside the range of the base type of the expression, and overflow\n+\tchecks are enabled, the result is unknown and cannot be used for any\n+\tsubsequent constant folding.\n+\t* sem_eval.adb (Compile_Time_Compare): if the bounds of one operand are\n+\tunknown, so is the result of the comparison.\n+\n+2011-08-03  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-except-2005.adb (Raise_From_Controlled_Operation): Add new formal\n+\tFrom_Abort. When finalization was triggered by an abort, propagate\n+\tStandard'Abort_Signal rather than Program_Error.\n+\t* a-except-2005.ads (Raise_From_Controlled_Operation): Add new formal\n+\tFrom_Abort.\n+\t* a-except.adb (Raise_From_Controlled_Operation): Add new formal\n+\tFrom_Abort. When finalization was triggered by an abort, propagate\n+\tStandard'Abort_Signal rather than Program_Error.\n+\t* a-except.ads:(Raise_From_Controlled_Operation): Add new formal\n+\tFrom_Abort.\n+\t* exp_ch7.adb:(Build_Adjust_Or_Finalize_Statements): New local variable\n+\tAbort_Id. Update the calls to Build_Object_Declarations and\n+\tBuild_Raise_Statement to include Abort_Id.\n+\t(Build_Adjust_Statements): New local variable Abort_Id. Update the\n+\tcalls to Build_Object_Declarations and Build_Raise_Statement to include\n+\tAbort_Id.\n+\t(Build_Finalize_Statements): New local variable Abort_Id. Update the\n+\tcalls to Build_Object_Declarations and Build_Raise_Statement to include\n+\tAbort_Id.\n+\t(Build_Components): Create an entity for Abort_Id when exceptions are\n+\tallowed on the target.\n+\t(Build_Finalizer): New local variable Abort_Id.\n+\t(Build_Initialize_Statements): New local variable Abort_Id. Update the\n+\tcalls to Build_Object_Declarations and Build_Raise_Statement to include\n+\tAbort_Id.\n+\t(Build_Object_Declarations): Add new formal Abort_Id. Create the\n+\tdeclaration of flag Abort_Id to preserve the original abort status\n+\tbefore finalization code is executed.\n+\t(Build_Raise_Statement): Add new formal Abort_Id. Pass Abort_Id to\n+\truntime routine Raise_From_Controlled_Operation.\n+\t(Create_Finalizer): Update the call to Build_Raise_Statement to include\n+\tAbort_Id. Update the call to Build_Object_Declarations to include\n+\tAbort_Id. Update the layout of the finalizer body.\n+\t(Make_Handler_For_Ctrl_Operation): Add an actual for From_Abort.\n+\t(Process_Transient_Objects): New local variable Abort_Id. Remove the\n+\tclunky code to create all flags and objects related to\n+\texception propagation and replace it with a call to\n+\tBuild_Object_Declarations. Update the call to Build_Raise_Statement to\n+\tinclude Abort_Id.\n+\t* exp_ch7.ads (Build_Object_Declarations): Moved from body to spec.\n+\tAdd new formal Abort_Id and associated comment on its use.\n+\t(Build_Raise_Statement): Add new formal Abort_Id and associated comment\n+\ton its use.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): New local variable Abort_Id.\n+\tRemove the clunky code to create all flags and objects related to\n+\texception propagation and replace it with a call to\n+\tBuild_Object_Declarations. Update the call to Build_Raise_Statement.\n+\n+2011-08-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* s-tassta.adb: Fix minor typos.\n+\n+2011-08-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* rtsfind.ads, makeutl.ads, prj.ads, prj.adb, make.adb,\n+\tlib-writ.adb, makeutl.adb, s-soflin.ads, clean.adb: Minor reformatting.\n+\n 2011-08-03  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Create_Finalizer): Treat freeze nodes in similar fashion"}, {"sha": "3ee4098678803bbcb4440dce3942ec4671a97e0e", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -878,21 +878,15 @@ package body Ada.Exceptions is\n    -------------------------------------\n \n    procedure Raise_From_Controlled_Operation\n-     (X : Ada.Exceptions.Exception_Occurrence)\n+     (X          : Ada.Exceptions.Exception_Occurrence;\n+      From_Abort : Boolean)\n    is\n-      Prev_Exc : constant EOA := Get_Current_Excep.all;\n-\n    begin\n-      --  We're raising an exception during finalization. If the finalization\n-      --  was triggered by an abort, as indicated by Not_Handled_By_Others,\n-      --  then we don't want to raise Program_Error; we want to continue with\n-      --  the Abort_Signal exception. Note that the original exception\n-      --  occurrence that triggered the finalization is saved before calling\n-      --  the Finalize procedures, and then restored afterward, so in the case\n-      --  of abort, the original Abort_Signal will be the current one.\n+      --  When finalization was triggered by an abort, keep propagating the\n+      --  abort signal rather than raising Program_Error.\n \n-      if Prev_Exc.Id /= null and then Prev_Exc.Id.Not_Handled_By_Others then\n-         Raise_Current_Excep (Prev_Exc.Id);\n+      if From_Abort then\n+         raise Standard'Abort_Signal;\n \n       --  Otherwise, raise Program_Error\n "}, {"sha": "d631684a4064bfc7ca4fce1b3b32808fe3e9af21", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -230,7 +230,8 @@ private\n    --  system to return here rather than to the original location.\n \n    procedure Raise_From_Controlled_Operation\n-     (X : Ada.Exceptions.Exception_Occurrence);\n+     (X          : Ada.Exceptions.Exception_Occurrence;\n+      From_Abort : Boolean);\n    pragma No_Return (Raise_From_Controlled_Operation);\n    pragma Export\n      (Ada, Raise_From_Controlled_Operation,"}, {"sha": "2633cf4a2418aa4beaa91c535fa862c8f8ee6679", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -850,21 +850,15 @@ package body Ada.Exceptions is\n    -------------------------------------\n \n    procedure Raise_From_Controlled_Operation\n-     (X : Ada.Exceptions.Exception_Occurrence)\n+     (X          : Ada.Exceptions.Exception_Occurrence;\n+      From_Abort : Boolean)\n    is\n-      Prev_Exc  : constant EOA := Get_Current_Excep.all;\n-\n    begin\n-      --  We're raising an exception during finalization. If the finalization\n-      --  was triggered by an abort, as indicated by Not_Handled_By_Others,\n-      --  then we don't want to raise Program_Error; we want to continue with\n-      --  the Abort_Signal exception. Note that the original exception\n-      --  occurrence that triggered the finalization is saved before calling\n-      --  the Finalize procedures, and then restored afterward, so in the case\n-      --  of abort, the original Abort_Signal will be the current one.\n+      --  When finalization was triggered by an abort, keep propagating the\n+      --  abort signal rather than raising Program_Error.\n \n-      if Prev_Exc.Id /= null and then Prev_Exc.Id.Not_Handled_By_Others then\n-         Raise_Current_Excep (Prev_Exc.Id);\n+      if From_Abort then\n+         raise Standard'Abort_Signal;\n \n       --  Otherwise, raise Program_Error\n \n@@ -873,9 +867,11 @@ package body Ada.Exceptions is\n             Prefix             : constant String := \"adjust/finalize raised \";\n             Orig_Msg           : constant String := Exception_Message (X);\n             Orig_Prefix_Length : constant Natural :=\n-              Integer'Min (Prefix'Length, Orig_Msg'Length);\n+                                   Integer'Min\n+                                     (Prefix'Length, Orig_Msg'Length);\n             Orig_Prefix        : String renames Orig_Msg\n-              (Orig_Msg'First .. Orig_Msg'First + Orig_Prefix_Length - 1);\n+                                   (Orig_Msg'First ..\n+                                    Orig_Msg'First + Orig_Prefix_Length - 1);\n \n          begin\n             --  Message already has proper prefix, just re-reraise"}, {"sha": "a6f571313b1169eeca1557ef320ee82f1df717aa", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -199,7 +199,8 @@ private\n    --  system to return here rather than to the original location.\n \n    procedure Raise_From_Controlled_Operation\n-     (X : Ada.Exceptions.Exception_Occurrence);\n+     (X          : Ada.Exceptions.Exception_Occurrence;\n+      From_Abort : Boolean);\n    pragma No_Return (Raise_From_Controlled_Operation);\n    pragma Export\n      (Ada, Raise_From_Controlled_Operation,"}, {"sha": "b915668c186265101965e50a26a08a0b2295db09", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3457,6 +3457,18 @@ package body Checks is\n       --  the computed expression is in the range Lor .. Hir. We can use this\n       --  to restrict the possible range of results.\n \n+      --  If one of the computed bounds is outside the range of the base type,\n+      --  the expression may raise an exception and we better indicate that\n+      --  the evaluation has failed, at least if checks are enabled.\n+\n+      if Enable_Overflow_Checks\n+        and then not Is_Entity_Name (N)\n+        and then  (Lor < Lo or else Hir > Hi)\n+      then\n+         OK := False;\n+         return;\n+      end if;\n+\n       if OK1 then\n \n          --  If the refined value of the low bound is greater than the type"}, {"sha": "adf8b0171e0f514d05075578f9ee3b64abb0de11", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -370,9 +370,8 @@ package body Clean is\n \n       Text    : Text_Buffer_Ptr;\n       The_ALI : ALI_Id;\n-\n-      Found : Boolean;\n-      Source : Queue.Source_Info;\n+      Found   : Boolean;\n+      Source  : Queue.Source_Info;\n \n    begin\n       Queue.Initialize (Queue_Per_Obj_Dir => False);\n@@ -388,8 +387,8 @@ package body Clean is\n \n       for N_File in 1 .. Osint.Number_Of_Files loop\n          Main_Source_File := Next_Main_Source;\n-         Main_Lib_File := Osint.Lib_File_Name\n-           (Main_Source_File, Current_File_Index);\n+         Main_Lib_File :=\n+           Osint.Lib_File_Name (Main_Source_File, Current_File_Index);\n \n          if Main_Lib_File /= No_File then\n             Queue.Insert"}, {"sha": "cfc58e2294a34d56933f8f1a9ccc1cbce065ef4d", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 184, "deletions": 107, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -359,17 +359,6 @@ package body Exp_Ch7 is\n    --  an exception handler, the statements will be wrapped in a block to avoid\n    --  unwanted interaction with the new At_End handler.\n \n-   function Build_Object_Declarations\n-     (Loc       : Source_Ptr;\n-      E_Id      : Entity_Id;\n-      Raised_Id : Entity_Id) return List_Id;\n-   --  Subsidiary to Make_Deep_Array_Body and Make_Deep_Record_Body. Return a\n-   --  list containing the object declarations of the exception occurrence E_Id\n-   --  and boolean flag Raised_Id.\n-   --\n-   --    E_Id      : Exception_Occurrence;\n-   --    Raised_Id : Boolean := False;\n-\n    procedure Build_Record_Deep_Procs (Typ : Entity_Id);\n    --  Build the deep Initialize/Adjust/Finalize for a record Typ with\n    --  Has_Component_Component set and store them using the TSS mechanism.\n@@ -1088,10 +1077,15 @@ package body Exp_Ch7 is\n       --  structures right from the start. Entities and lists are created once\n       --  it has been established that N has at least one controlled object.\n \n+      Abort_Id : Entity_Id := Empty;\n+      --  Entity of local flag. The flag is set when finalization is triggered\n+      --  by an abort.\n+\n       Components_Built : Boolean := False;\n       --  A flag used to avoid double initialization of entities and lists. If\n       --  the flag is set then the following variables have been initialized:\n       --\n+      --    Abort_Id\n       --    Counter_Id\n       --    E_Id\n       --    Finalizer_Decls\n@@ -1237,6 +1231,7 @@ package body Exp_Ch7 is\n             Counter_Typ := Make_Temporary (Loc, 'T');\n \n             if Exceptions_OK then\n+               Abort_Id  := Make_Temporary (Loc, 'A');\n                E_Id      := Make_Temporary (Loc, 'E');\n                Raised_Id := Make_Temporary (Loc, 'R');\n             end if;\n@@ -1322,7 +1317,6 @@ package body Exp_Ch7 is\n \n       procedure Create_Finalizer is\n          Conv_Name  : Name_Id;\n-         E_Decl     : Node_Id;\n          Fin_Body   : Node_Id;\n          Fin_Spec   : Node_Id;\n          Jump_Block : Node_Id;\n@@ -1514,14 +1508,14 @@ package body Exp_Ch7 is\n             --  level finalizers. Generate:\n             --\n             --    if Raised then\n-            --       Raise_From_Controlled_Operation (E);\n+            --       Raise_From_Controlled_Operation (E, Abort);\n             --    end if;\n \n             if not For_Package\n               and then Exceptions_OK\n             then\n                Append_To (Finalizer_Stmts,\n-                 Build_Raise_Statement (Loc, E_Id, Raised_Id));\n+                 Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n             end if;\n \n             --  Create the jump block which controls the finalization flow\n@@ -1587,11 +1581,18 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --    procedure Fin_Id is\n+         --       Abort  : constant Boolean :=\n+         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n+         --                    Standard'Abort_Signal'Identity;\n+         --         <or>\n+         --       Abort  : constant Boolean := False;  --  no abort\n+\n          --       E      : Exception_Occurrence;  --  All added if flag\n          --       Raised : Boolean := False;      --  Has_Ctrl_Objs is set\n          --       L0     : label;\n          --       ...\n          --       Lnn    : label;\n+\n          --    begin\n          --       Abort_Defer;               --  Added if abort is allowed\n          --       <call to Prev_At_End>      --  Added if exists\n@@ -1605,28 +1606,8 @@ package body Exp_Ch7 is\n          if Has_Ctrl_Objs\n            and then Exceptions_OK\n          then\n-            --  Generate:\n-            --    Raised : Boolean := False;\n-\n-            Prepend_To (Finalizer_Decls,\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => Raised_Id,\n-                Object_Definition =>\n-                  New_Reference_To (Standard_Boolean, Loc),\n-                Expression =>\n-                  New_Reference_To (Standard_False, Loc)));\n-\n-            --  Generate:\n-            --    E : Exception_Occurrence;\n-\n-            E_Decl :=\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => E_Id,\n-                Object_Definition =>\n-                  New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n-            Set_No_Initialization (E_Decl);\n-\n-            Prepend_To (Finalizer_Decls, E_Decl);\n+            Prepend_List_To (Finalizer_Decls,\n+              Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id));\n          end if;\n \n          --  Create the body of the finalizer\n@@ -2910,78 +2891,140 @@ package body Exp_Ch7 is\n \n    function Build_Object_Declarations\n      (Loc       : Source_Ptr;\n+      Abort_Id  : Entity_Id;\n       E_Id      : Entity_Id;\n       Raised_Id : Entity_Id) return List_Id\n    is\n+      A_Expr : Node_Id;\n       E_Decl : Node_Id;\n \n    begin\n       if Restriction_Active (No_Exception_Propagation) then\n          return Empty_List;\n       end if;\n \n+      pragma Assert (Present (Abort_Id));\n       pragma Assert (Present (E_Id));\n       pragma Assert (Present (Raised_Id));\n \n+      --  Generate:\n+      --    Exception_Identity (Get_Current_Excep.all.all) =\n+      --      Standard'Abort_Signal'Identity;\n+\n+      if Abort_Allowed then\n+         A_Expr :=\n+           Make_Op_Eq (Loc,\n+             Left_Opnd =>\n+               Make_Function_Call (Loc,\n+                 Name =>\n+                   New_Reference_To (RTE (RE_Exception_Identity), Loc),\n+               Parameter_Associations => New_List (\n+                 Make_Explicit_Dereference (Loc,\n+                   Prefix =>\n+                     Make_Function_Call (Loc,\n+                       Name =>\n+                         Make_Explicit_Dereference (Loc,\n+                           Prefix =>\n+                             New_Reference_To\n+                               (RTE (RE_Get_Current_Excep), Loc)))))),\n+\n+             Right_Opnd =>\n+               Make_Attribute_Reference (Loc,\n+                 Prefix =>\n+                   New_Reference_To (Stand.Abort_Signal, Loc),\n+                 Attribute_Name => Name_Identity));\n+      else\n+         A_Expr := New_Reference_To (Standard_False, Loc);\n+      end if;\n+\n+      --  Generate:\n+      --    E_Id : Exception_Occurrence;\n+\n       E_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => E_Id,\n           Object_Definition =>\n             New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n       Set_No_Initialization (E_Decl);\n \n-      return New_List (E_Decl,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Raised_Id,\n-          Object_Definition =>\n-            New_Reference_To (Standard_Boolean, Loc),\n-          Expression =>\n-            New_Reference_To (Standard_False, Loc)));\n+      return\n+        New_List (\n+\n+         --  Abort_Id\n+\n+          Make_Object_Declaration (Loc,\n+            Defining_Identifier => Abort_Id,\n+            Constant_Present => True,\n+            Object_Definition =>\n+              New_Reference_To (Standard_Boolean, Loc),\n+            Expression => A_Expr),\n+\n+         --  E_Id\n+\n+          E_Decl,\n+\n+         --  Raised_Id\n+\n+          Make_Object_Declaration (Loc,\n+            Defining_Identifier => Raised_Id,\n+            Object_Definition =>\n+              New_Reference_To (Standard_Boolean, Loc),\n+            Expression =>\n+              New_Reference_To (Standard_False, Loc)));\n    end Build_Object_Declarations;\n \n    ---------------------------\n    -- Build_Raise_Statement --\n    ---------------------------\n \n    function Build_Raise_Statement\n-     (Loc  : Source_Ptr;\n-      E_Id : Entity_Id;\n-      R_Id : Entity_Id) return Node_Id\n+     (Loc       : Source_Ptr;\n+      Abort_Id  : Entity_Id;\n+      E_Id      : Entity_Id;\n+      Raised_Id : Entity_Id) return Node_Id\n    is\n-      Raise_Id : Entity_Id;\n+      Params  : List_Id;\n+      Proc_Id : Entity_Id;\n \n    begin\n+      --  The default parameter is the local exception occurrence\n+\n+      Params := New_List (New_Reference_To (E_Id, Loc));\n+\n+      --  .NET/JVM\n+\n       if VM_Target /= No_VM then\n-         Raise_Id := RTE (RE_Reraise_Occurrence);\n+         Proc_Id := RTE (RE_Reraise_Occurrence);\n \n-      --  Standard run-time library\n+      --  Standard run-time library, this case handles finalization exceptions\n+      --  raised during an abort.\n \n       elsif RTE_Available (RE_Raise_From_Controlled_Operation) then\n-         Raise_Id := RTE (RE_Raise_From_Controlled_Operation);\n+         Proc_Id := RTE (RE_Raise_From_Controlled_Operation);\n+         Append_To (Params, New_Reference_To (Abort_Id, Loc));\n \n       --  Restricted runtime: exception messages are not supported and hence\n       --  Raise_From_Controlled_Operation is not supported.\n \n       else\n-         Raise_Id := RTE (RE_Reraise_Occurrence);\n+         Proc_Id := RTE (RE_Reraise_Occurrence);\n       end if;\n \n       --  Generate:\n-      --    if R_Id then\n-      --       <Raise_Id> (E_Id);\n+      --    if Raised_Id then\n+      --       <Proc_Id> (<Params>);\n       --    end if;\n \n       return\n         Make_If_Statement (Loc,\n           Condition =>\n-            New_Reference_To (R_Id, Loc),\n+            New_Reference_To (Raised_Id, Loc),\n \n           Then_Statements => New_List (\n             Make_Procedure_Call_Statement (Loc,\n               Name =>\n-                New_Reference_To (Raise_Id, Loc),\n-              Parameter_Associations => New_List (\n-                New_Reference_To (E_Id, Loc)))));\n+                New_Reference_To (Proc_Id, Loc),\n+              Parameter_Associations => Params)));\n    end Build_Raise_Statement;\n \n    -----------------------------\n@@ -4158,9 +4201,9 @@ package body Exp_Ch7 is\n          Last_Object   : Node_Id;\n          Related_Node  : Node_Id)\n       is\n+         Abort_Id  : Entity_Id;\n          Built     : Boolean := False;\n          Desig     : Entity_Id;\n-         E_Decl    : Node_Id;\n          E_Id      : Entity_Id;\n          Fin_Block : Node_Id;\n          Last_Fin  : Node_Id := Empty;\n@@ -4202,32 +4245,13 @@ package body Exp_Ch7 is\n                --  time around.\n \n                if not Built then\n-\n-                  --  Generate:\n-                  --    Enn : Exception_Occurrence;\n-\n-                  E_Id := Make_Temporary (Loc, 'E');\n-\n-                  E_Decl :=\n-                    Make_Object_Declaration (Loc,\n-                      Defining_Identifier => E_Id,\n-                      Object_Definition =>\n-                        New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n-                  Set_No_Initialization (E_Decl);\n-                  Insert_Before_And_Analyze (First_Object, E_Decl);\n-\n-                  --  Generate:\n-                  --    Rnn : Boolean := False;\n-\n+                  Abort_Id  := Make_Temporary (Loc, 'A');\n+                  E_Id      := Make_Temporary (Loc, 'E');\n                   Raised_Id := Make_Temporary (Loc, 'R');\n \n-                  Insert_Before_And_Analyze (First_Object,\n-                    Make_Object_Declaration (Loc,\n-                      Defining_Identifier => Raised_Id,\n-                      Object_Definition =>\n-                        New_Reference_To (Standard_Boolean, Loc),\n-                      Expression =>\n-                        New_Reference_To (Standard_False, Loc)));\n+                  Insert_List_Before_And_Analyze (First_Object,\n+                    Build_Object_Declarations\n+                      (Loc, Abort_Id, E_Id, Raised_Id));\n \n                   Built := True;\n                end if;\n@@ -4292,14 +4316,14 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --    if Rnn then\n-         --       Raise_From_Controlled_Operation (Enn);\n+         --       Raise_From_Controlled_Operation (E, Abort);\n          --    end if;\n \n          if Built\n            and then Present (Last_Fin)\n          then\n             Insert_After_And_Analyze (Last_Fin,\n-              Build_Raise_Statement (Loc, E_Id, Raised_Id));\n+              Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n          end if;\n       end Process_Transient_Objects;\n \n@@ -4576,6 +4600,12 @@ package body Exp_Ch7 is\n       --  controlled elements. Generate:\n \n       --    declare\n+      --       Abort  : constant Boolean :=\n+      --                  Exception_Identity (Get_Current_Excep.all) =\n+      --                    Standard'Abort_Signal'Identity;\n+      --         <or>\n+      --       Abort  : constant Boolean := False;  --  no abort\n+\n       --       E      : Exception_Occurrence;\n       --       Raised : Boolean := False;\n \n@@ -4599,7 +4629,7 @@ package body Exp_Ch7 is\n       --       end loop;\n \n       --       if Raised then\n-      --          Raise_From_Controlled_Operation (E);\n+      --          Raise_From_Controlled_Operation (E, Abort);\n       --       end if;\n       --    end;\n \n@@ -4623,6 +4653,11 @@ package body Exp_Ch7 is\n       --             exception\n       --                when others =>\n       --                   declare\n+      --                      Abort  : constant Boolean :=\n+      --                        Exception_Identity (Get_Current_Excep.all) =\n+      --                          Standard'Abort_Signal'Identity;\n+      --                        <or>\n+      --                      Abort  : constant Boolean := False; --  no abort\n       --                      E      : Exception_Occurence;\n       --                      Raised : Boolean := False;\n \n@@ -4657,7 +4692,7 @@ package body Exp_Ch7 is\n       --                   end;\n \n       --                   if Raised then\n-      --                      Raise_From_Controlled_Operation (E);\n+      --                      Raise_From_Controlled_Operation (E, Abort);\n       --                   end if;\n \n       --                   raise;\n@@ -4683,6 +4718,7 @@ package body Exp_Ch7 is\n          Index_List : constant List_Id    := New_List;\n          Loc        : constant Source_Ptr := Sloc (Typ);\n          Num_Dims   : constant Int        := Number_Dimensions (Typ);\n+         Abort_Id   : Entity_Id := Empty;\n          Call       : Node_Id;\n          Comp_Ref   : Node_Id;\n          Core_Loop  : Node_Id;\n@@ -4720,6 +4756,7 @@ package body Exp_Ch7 is\n          Build_Indices;\n \n          if Exceptions_OK then\n+            Abort_Id  := Make_Temporary (Loc, 'A');\n             E_Id      := Make_Temporary (Loc, 'E');\n             Raised_Id := Make_Temporary (Loc, 'R');\n          end if;\n@@ -4819,31 +4856,39 @@ package body Exp_Ch7 is\n          end loop;\n \n          --  Generate the block which contains the core loop, the declarations\n-         --  of the flag and exception occurrence and the conditional raise:\n+         --  of the abort flag, the exception occurrence, the raised flag and\n+         --  the conditional raise:\n \n          --    declare\n+         --       Abort  : constant Boolean :=\n+         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n+         --                    Standard'Abort_Signal'Identity;\n+         --         <or>\n+         --       Abort  : constant Boolean := False;  --  no abort\n+\n          --       E      : Exception_Occurrence;\n          --       Raised : Boolean := False;\n \n          --    begin\n          --       <core loop>\n \n          --       if Raised then  --  Expection handlers allowed\n-         --          Raise_From_Controlled_Operation (E);\n+         --          Raise_From_Controlled_Operation (E, Abort);\n          --       end if;\n          --    end;\n \n          Stmts := New_List (Core_Loop);\n \n          if Exceptions_OK then\n-            Append_To (Stmts, Build_Raise_Statement (Loc, E_Id, Raised_Id));\n+            Append_To (Stmts,\n+              Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n          end if;\n \n          return\n            New_List (\n              Make_Block_Statement (Loc,\n                Declarations =>\n-                 Build_Object_Declarations (Loc, E_Id, Raised_Id),\n+                 Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n                Handled_Statement_Sequence =>\n                  Make_Handled_Sequence_Of_Statements (Loc,\n                    Statements => Stmts)));\n@@ -4859,6 +4904,7 @@ package body Exp_Ch7 is\n          Index_List  : constant List_Id    := New_List;\n          Loc         : constant Source_Ptr := Sloc (Typ);\n          Num_Dims    : constant Int        := Number_Dimensions (Typ);\n+         Abort_Id    : Entity_Id;\n          Counter_Id  : Entity_Id;\n          Dim         : Int;\n          E_Id        : Entity_Id := Empty;\n@@ -5024,6 +5070,7 @@ package body Exp_Ch7 is\n          Counter_Id := Make_Temporary (Loc, 'C');\n \n          if Exceptions_OK then\n+            Abort_Id  := Make_Temporary (Loc, 'A');\n             E_Id      := Make_Temporary (Loc, 'E');\n             Raised_Id := Make_Temporary (Loc, 'R');\n          end if;\n@@ -5125,10 +5172,17 @@ package body Exp_Ch7 is\n             Dim := Dim - 1;\n          end loop;\n \n-         --  Generate the block which houses the finalization failure flag,\n-         --  all the finalization loops and the exception raise.\n+         --  Generate the block which contains the finalization loops, the\n+         --  declarations of the abort flag, the exception occurrence, the\n+         --  raised flag and the conditional raise.\n \n          --    declare\n+         --       Abort  : constant Boolean :=\n+         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n+         --                    Standard'Abort_Signal'Identity;\n+         --         <or>\n+         --       Abort  : constant Boolean := False;  --  no abort\n+\n          --       E      : Exception_Occurrence;\n          --       Raised : Boolean := False;\n \n@@ -5141,7 +5195,7 @@ package body Exp_Ch7 is\n          --       <final loop>\n \n          --       if Raised then  --  Exception handlers allowed\n-         --          Raise_From_Controlled_Operation (E);\n+         --          Raise_From_Controlled_Operation (E, Abort);\n          --       end if;\n \n          --       raise;          --  Exception handlers allowed\n@@ -5150,14 +5204,15 @@ package body Exp_Ch7 is\n          Stmts := New_List (Build_Counter_Assignment, Final_Loop);\n \n          if Exceptions_OK then\n-            Append_To (Stmts, Build_Raise_Statement (Loc, E_Id, Raised_Id));\n+            Append_To (Stmts,\n+              Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n             Append_To (Stmts, Make_Raise_Statement (Loc));\n          end if;\n \n          Final_Block :=\n            Make_Block_Statement (Loc,\n              Declarations =>\n-               Build_Object_Declarations (Loc, E_Id, Raised_Id),\n+               Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n \n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n@@ -5449,7 +5504,7 @@ package body Exp_Ch7 is\n       --       end if;\n \n       --       if Raised then\n-      --          Raise_From_Controlled_Object (E);\n+      --          Raise_From_Controlled_Object (E, Abort);\n       --       end if;\n       --    end;\n \n@@ -5458,6 +5513,11 @@ package body Exp_Ch7 is\n       --  may have discriminants and contain variant parts. Generate:\n \n       --    declare\n+      --       Abort  : constant Boolean :=\n+      --                  Exception_Identity (Get_Current_Excep.all) =\n+      --                    Standard'Abort_Signal'Identity;\n+      --         <or>\n+      --       Abort  : constant Boolean := False;  --  no abort\n       --       E      : Exception_Occurence;\n       --       Raised : Boolean := False;\n \n@@ -5532,7 +5592,7 @@ package body Exp_Ch7 is\n       --       Root_Controlled (V).Finalized := True;\n \n       --       if Raised then\n-      --          Raise_From_Controlled_Object (E);\n+      --          Raise_From_Controlled_Object (E, Abort);\n       --       end if;\n       --    end;\n \n@@ -5555,6 +5615,7 @@ package body Exp_Ch7 is\n       function Build_Adjust_Statements (Typ : Entity_Id) return List_Id is\n          Loc       : constant Source_Ptr := Sloc (Typ);\n          Typ_Def   : constant Node_Id := Type_Definition (Parent (Typ));\n+         Abort_Id  : Entity_Id := Empty;\n          Bod_Stmts : List_Id;\n          E_Id      : Entity_Id := Empty;\n          Raised_Id : Entity_Id := Empty;\n@@ -5765,6 +5826,7 @@ package body Exp_Ch7 is\n \n       begin\n          if Exceptions_OK then\n+            Abort_Id  := Make_Temporary (Loc, 'A');\n             E_Id      := Make_Temporary (Loc, 'E');\n             Raised_Id := Make_Temporary (Loc, 'R');\n          end if;\n@@ -5942,6 +6004,12 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --    declare\n+         --       Abort  : constant Boolean :=\n+         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n+         --                    Standard'Abort_Signal'Identity;\n+         --         <or>\n+         --       Abort  : constant Boolean := False;  --  no abort\n+\n          --       E      : Exception_Occurence;\n          --       Raised : Boolean := False;\n \n@@ -5951,21 +6019,21 @@ package body Exp_Ch7 is\n          --       <adjust statements>\n \n          --       if Raised then\n-         --          Raise_From_Controlled_Operation (E);\n+         --          Raise_From_Controlled_Operation (E, Abort);\n          --       end if;\n          --    end;\n \n          else\n             if Exceptions_OK then\n                Append_To (Bod_Stmts,\n-                 Build_Raise_Statement (Loc, E_Id, Raised_Id));\n+                 Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n             end if;\n \n             return\n               New_List (\n                 Make_Block_Statement (Loc,\n                   Declarations =>\n-                    Build_Object_Declarations (Loc, E_Id, Raised_Id),\n+                    Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n \n                   Handled_Statement_Sequence =>\n                     Make_Handled_Sequence_Of_Statements (Loc,\n@@ -5980,6 +6048,7 @@ package body Exp_Ch7 is\n       function Build_Finalize_Statements (Typ : Entity_Id) return List_Id is\n          Loc       : constant Source_Ptr := Sloc (Typ);\n          Typ_Def   : constant Node_Id := Type_Definition (Parent (Typ));\n+         Abort_Id  : Entity_Id := Empty;\n          Bod_Stmts : List_Id;\n          Counter   : Int := 0;\n          E_Id      : Entity_Id := Empty;\n@@ -6358,6 +6427,7 @@ package body Exp_Ch7 is\n \n       begin\n          if Exceptions_OK then\n+            Abort_Id  := Make_Temporary (Loc, 'A');\n             E_Id      := Make_Temporary (Loc, 'E');\n             Raised_Id := Make_Temporary (Loc, 'R');\n          end if;\n@@ -6535,6 +6605,12 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --    declare\n+         --       Abort  : constant Boolean :=\n+         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n+         --                    Standard'Abort_Signal'Identity;\n+         --         <or>\n+         --       Abort  : constant Boolean := False;  --  no abort\n+\n          --       E      : Exception_Occurence;\n          --       Raised : Boolean := False;\n \n@@ -6547,21 +6623,21 @@ package body Exp_Ch7 is\n          --       V.Finalized := True;\n \n          --       if Raised then\n-         --          Raise_From_Controlled_Operation (E);\n+         --          Raise_From_Controlled_Operation (E, Abort);\n          --       end if;\n          --    end;\n \n          else\n             if Exceptions_OK then\n                Append_To (Bod_Stmts,\n-                 Build_Raise_Statement (Loc, E_Id, Raised_Id));\n+                 Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n             end if;\n \n             return\n               New_List (\n                 Make_Block_Statement (Loc,\n                   Declarations =>\n-                    Build_Object_Declarations (Loc, E_Id, Raised_Id),\n+                    Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n \n                   Handled_Statement_Sequence =>\n                     Make_Handled_Sequence_Of_Statements (Loc,\n@@ -7110,7 +7186,7 @@ package body Exp_Ch7 is\n    --  Generate:\n \n    --    when E : others =>\n-   --      Raise_From_Controlled_Operation (X => E);\n+   --      Raise_From_Controlled_Operation (E, False);\n \n    --  or:\n \n@@ -7150,10 +7226,11 @@ package body Exp_Ch7 is\n          Raise_Node :=\n            Make_Procedure_Call_Statement (Loc,\n              Name =>\n-               New_Reference_To (\n-                 RTE (RE_Raise_From_Controlled_Operation), Loc),\n+               New_Reference_To\n+                 (RTE (RE_Raise_From_Controlled_Operation), Loc),\n              Parameter_Associations => New_List (\n-               New_Reference_To (E_Occ, Loc)));\n+               New_Reference_To (E_Occ, Loc),\n+               New_Reference_To (Standard_False, Loc)));\n \n       --  Restricted runtime: exception messages are not supported\n "}, {"sha": "dd1b8f88fc8e6e3bf616259a0702cbe5e77a1c36", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -57,19 +57,39 @@ package Exp_Ch7 is\n    --  Build one controlling procedure when a late body overrides one of\n    --  the controlling operations.\n \n+   function Build_Object_Declarations\n+     (Loc       : Source_Ptr;\n+      Abort_Id  : Entity_Id;\n+      E_Id      : Entity_Id;\n+      Raised_Id : Entity_Id) return List_Id;\n+   --  Subsidiary to Make_Deep_Array_Body and Make_Deep_Record_Body. Return a\n+   --  list containing the object declarations of boolean flag Abort_Id, the\n+   --  exception occurrence E_Id and boolean flag Raised_Id.\n+   --\n+   --    Abort_Id  : constant Boolean :=\n+   --                  Exception_Identity (Get_Current_Excep.all) =\n+   --                    Standard'Abort_Signal'Identity;\n+   --      <or>\n+   --    Abort_Id  : constant Boolean := False;  --  no abort\n+   --\n+   --    E_Id      : Exception_Occurrence;\n+   --    Raised_Id : Boolean := False;\n+\n    function Build_Raise_Statement\n-     (Loc  : Source_Ptr;\n-      E_Id : Entity_Id;\n-      R_Id : Entity_Id) return Node_Id;\n+     (Loc       : Source_Ptr;\n+      Abort_Id  : Entity_Id;\n+      E_Id      : Entity_Id;\n+      Raised_Id : Entity_Id) return Node_Id;\n    --  Subsidiary to routines Build_Finalizer, Make_Deep_Array_Body and Make_\n    --  Deep_Record_Body. Generate the following conditional raise statement:\n    --\n-   --    if R_Id then\n-   --       Raise_From_Controlled_Operation (E_Id);\n+   --    if Raised_Id then\n+   --       Raise_From_Controlled_Operation (E_Id, Abort_Id);\n    --    end if;\n    --\n-   --  E_Id denotes the defining identifier of a local exception occurrence,\n-   --  R_Id is the entity of a local boolean flag.\n+   --  Abort_Id is a local boolean flag which is set when the finalization was\n+   --  triggered by an abort, E_Id denotes the defining identifier of a local\n+   --  exception occurrence, Raised_Id is the entity of a local boolean flag.\n \n    function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean;\n    --  True if T is a class-wide type, or if it has controlled parts (\"part\""}, {"sha": "4edb9a6d68a108aceaddbfcbdd90e1f06eac1d6e", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -884,16 +884,15 @@ package body Exp_Intr is\n       Pool    : constant Entity_Id  := Associated_Storage_Pool (Rtyp);\n       Stmts   : constant List_Id    := New_List;\n \n-      Blk          : Node_Id := Empty;\n-      Deref        : Node_Id;\n-      Exc_Occ_Decl : Node_Id;\n-      Exc_Occ_Id   : Entity_Id := Empty;\n-      Final_Code   : List_Id;\n-      Free_Arg     : Node_Id;\n-      Free_Node    : Node_Id;\n-      Gen_Code     : Node_Id;\n-      Raised_Decl  : Node_Id;\n-      Raised_Id    : Entity_Id := Empty;\n+      Abort_Id   : Entity_Id := Empty;\n+      Blk        : Node_Id := Empty;\n+      Deref      : Node_Id;\n+      E_Id       : Entity_Id := Empty;\n+      Final_Code : List_Id;\n+      Free_Arg   : Node_Id;\n+      Free_Node  : Node_Id;\n+      Gen_Code   : Node_Id;\n+      Raised_Id  : Entity_Id := Empty;\n \n       Arg_Known_Non_Null : constant Boolean := Known_Non_Null (N);\n       --  This captures whether we know the argument to be non-null so that\n@@ -942,38 +941,29 @@ package body Exp_Intr is\n          --  the later raise.\n          --\n          --  Generate:\n-         --    Raised  : Boolean := False;\n-         --    Exc_Occ : Exception_Occurrence;\n+         --    Abort  : constant Boolean :=\n+         --               Exception_Occurrence (Get_Current_Excep.all.all) =\n+         --                 Standard'Abort_Signal'Identity;\n+         --      <or>\n+         --    Abort  : constant Boolean := False;  --  no abort\n+\n+         --    E      : Exception_Occurrence;\n+         --    Raised : Boolean := False;\n          --\n          --    begin\n          --       [Deep_]Finalize (Obj);\n          --    exception\n          --       when others =>\n          --          Raised := True;\n-         --          Save_Occurrence (Exc_Occ, Get_Current_Excep.all.all);\n+         --          Save_Occurrence (E, Get_Current_Excep.all.all);\n          --    end;\n \n-         Exc_Occ_Id := Make_Temporary (Loc, 'E');\n-         Raised_Id  := Make_Temporary (Loc, 'R');\n+         Abort_Id  := Make_Temporary (Loc, 'A');\n+         E_Id      := Make_Temporary (Loc, 'E');\n+         Raised_Id := Make_Temporary (Loc, 'R');\n \n-         Raised_Decl :=\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Raised_Id,\n-             Object_Definition =>\n-               New_Reference_To (Standard_Boolean, Loc),\n-             Expression =>\n-               New_Reference_To (Standard_False, Loc));\n-\n-         Append_To (Stmts, Raised_Decl);\n-\n-         Exc_Occ_Decl :=\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Exc_Occ_Id,\n-           Object_Definition =>\n-             New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n-         Set_No_Initialization (Exc_Occ_Decl);\n-\n-         Append_To (Stmts, Exc_Occ_Decl);\n+         Append_List_To (Stmts,\n+            Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id));\n \n          Final_Code := New_List (\n            Make_Block_Statement (Loc,\n@@ -997,7 +987,7 @@ package body Exp_Intr is\n                          Name =>\n                            New_Reference_To (RTE (RE_Save_Occurrence), Loc),\n                          Parameter_Associations => New_List (\n-                           New_Reference_To (Exc_Occ_Id, Loc),\n+                           New_Reference_To (E_Id, Loc),\n                            Make_Explicit_Dereference (Loc,\n                              Prefix =>\n                                Make_Function_Call (Loc,\n@@ -1243,14 +1233,15 @@ package body Exp_Intr is\n       --\n       --  Generate:\n       --    if Raised then\n-      --       Reraise_Occurrence (Exc_Occ);               --  for .NET and\n-      --                                                   --  restricted RTS\n+      --       Reraise_Occurrence (E);                      --  for .NET and\n+      --                                                    --  restricted RTS\n       --         <or>\n-      --       Raise_From_Controlled_Operation (Exc_Occ);  --  all other cases\n+      --       Raise_From_Controlled_Operation (E, Abort);  --  all other cases\n       --    end if;\n \n       if Present (Raised_Id) then\n-         Append_To (Stmts, Build_Raise_Statement (Loc, Exc_Occ_Id, Raised_Id));\n+         Append_To (Stmts,\n+           Build_Raise_Statement (Loc, Abort_Id, E_Id, Raised_Id));\n       end if;\n \n       --  If we know the argument is non-null, then make a block statement"}, {"sha": "cf24265a2b97d22421da36027ca15e5babe43e54", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -461,8 +461,7 @@ package body Lib.Writ is\n          Write_Info_Str (\" O\");\n          Write_Info_Char (OA_Setting (Unit_Num));\n \n-         if (Ekind (Uent) = E_Package\n-               or else Ekind (Uent) = E_Package_Body)\n+         if Ekind_In (Uent, E_Package, E_Package_Body)\n            and then Present (Finalizer (Uent))\n          then\n             Write_Info_Str (\" PF\");"}, {"sha": "c8eabf1f9324729691e10d7cdd1786dfd9132668", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -2313,19 +2313,18 @@ package body Make is\n                                    new String'(Name_Buffer (1 .. Name_Len));\n                                  Test_If_Relative_Path\n                                    (New_Args (Last_New),\n-                                    Do_Fail => Make_Failed'Access,\n-                                    Parent => Dir_Path,\n+                                    Do_Fail              => Make_Failed'Access,\n+                                    Parent               => Dir_Path,\n                                     Including_Non_Switch => False);\n                               end if;\n \n                               Current := Element.Next;\n                            end loop;\n \n                            Add_Arguments\n-                             (Configuration_Pragmas_Switch\n-                                (Arguments_Project) &\n-                              New_Args (1 .. Last_New) &\n-                              The_Saved_Gcc_Switches.all);\n+                             (Configuration_Pragmas_Switch (Arguments_Project)\n+                              & New_Args (1 .. Last_New)\n+                              & The_Saved_Gcc_Switches.all);\n                         end;\n                      end;\n \n@@ -2341,8 +2340,8 @@ package body Make is\n                                             (Name_Buffer (1 .. Name_Len)));\n                         Dir_Path : constant String :=\n                                      Get_Name_String\n-                                      (Arguments_Project.\n-                                       Directory.Display_Name);\n+                                       (Arguments_Project.\n+                                        Directory.Display_Name);\n \n                      begin\n                         Test_If_Relative_Path\n@@ -2687,11 +2686,11 @@ package body Make is\n \n                if Add_It then\n                   if not Queue.Insert\n-                       ((Format  => Format_Gnatmake,\n-                         File    => Sfile,\n-                         Unit    => No_Unit_Name,\n-                         Project => No_Project,\n-                         Index   => 0))\n+                           ((Format  => Format_Gnatmake,\n+                             File    => Sfile,\n+                             Unit    => No_Unit_Name,\n+                             Project => No_Project,\n+                             Index   => 0))\n                   then\n                      if Is_In_Obsoleted (Sfile) then\n                         Executable_Obsolete := True;\n@@ -5901,10 +5900,10 @@ package body Make is\n                   --  except those of library projects.\n \n                   Prj.Env.Set_Ada_Paths\n-                    (Project => Main_Project,\n-                     In_Tree => Project_Tree,\n+                    (Project             => Main_Project,\n+                     In_Tree             => Project_Tree,\n                      Including_Libraries => False,\n-                     Include_Path => Use_Include_Path_File);\n+                     Include_Path        => Use_Include_Path_File);\n \n                   --  If switch -C was specified, create a binder mapping file\n \n@@ -6051,9 +6050,9 @@ package body Make is\n                               Linker_Switches.Increment_Last;\n                               Linker_Switches.Table (Linker_Switches.Last) :=\n                                 new String'(\"-l\" &\n-                                  Get_Name_String\n-                                    (Library_Projs.Table (Index).\n-                                       Library_Name));\n+                                            Get_Name_String\n+                                              (Library_Projs.Table (Index).\n+                                                Library_Name));\n                            end if;\n                         end if;\n                      end loop;\n@@ -6421,22 +6420,23 @@ package body Make is\n                         Test_If_Relative_Path\n                           (Binder_Switches.Table (J),\n                            Do_Fail => Make_Failed'Access,\n-                           Parent => Dir_Path, Including_L_Switch => False);\n+                           Parent  => Dir_Path, Including_L_Switch => False);\n                      end loop;\n \n                      for\n                        J in Last_Linker_Switch + 1 .. Linker_Switches.Last\n                      loop\n                         Test_If_Relative_Path\n-                          (Linker_Switches.Table (J), Parent => Dir_Path,\n+                          (Linker_Switches.Table (J),\n+                           Parent  => Dir_Path,\n                            Do_Fail => Make_Failed'Access);\n                      end loop;\n                   end;\n \n                   --  We now put in the Binder_Switches and Linker_Switches\n                   --  tables, the binder and linker switches of the command\n-                  --  line that have been put in the Saved_ tables.\n-                  --  These switches will follow the project file switches.\n+                  --  line that have been put in the Saved_ tables. These\n+                  --  switches will follow the project file switches.\n \n                   for J in 1 .. Saved_Binder_Switches.Last loop\n                      Add_Switch\n@@ -6461,6 +6461,7 @@ package body Make is\n       if Do_Codepeer_Globalize_Step then\n          declare\n             Success : Boolean := False;\n+\n          begin\n             Globalize (Success);\n \n@@ -6732,7 +6733,8 @@ package body Make is\n       --  Test for trailing -D switch\n \n       elsif Object_Directory_Present\n-        and then not Object_Directory_Seen then\n+        and then not Object_Directory_Seen\n+      then\n          Make_Failed (\"object directory missing after -D\");\n       end if;\n \n@@ -7382,6 +7384,7 @@ package body Make is\n       for Next_Arg in 1 .. Argument_Count loop\n          declare\n             Argv : constant String := Argument (Next_Arg);\n+\n          begin\n             if Argv'Length > 2\n               and then Argv (1) = '-'\n@@ -7678,8 +7681,8 @@ package body Make is\n \n       elsif Program_Args /= None then\n \n-         --  Check to see if we are reading -I switches in order\n-         --  to take into account in the src & lib search directories.\n+         --  Check to see if we are reading -I switches in order to take into\n+         --  account in the src & lib search directories.\n \n          if Argv'Length > 2 and then Argv (1 .. 2) = \"-I\" then\n             if Argv (3 .. Argv'Last) = \"-\" then"}, {"sha": "d63a5452dab5c9be676a30eecb6b2dc5fdeffce1", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -180,8 +180,8 @@ package body Makeutl is\n    ------------------------------\n \n    function Check_Source_Info_In_ALI\n-     (The_ALI      : ALI_Id;\n-      Tree         : Project_Tree_Ref) return Boolean\n+     (The_ALI : ALI_Id;\n+      Tree    : Project_Tree_Ref) return Boolean\n    is\n       Unit_Name : Name_Id;\n \n@@ -943,8 +943,8 @@ package body Makeutl is\n                   --  paths must be converted to absolute paths.\n \n                   Test_If_Relative_Path\n-                    (Switch => Linker_Options_Buffer (Last_Linker_Option),\n-                     Parent => Dir_Path,\n+                    (Switch  => Linker_Options_Buffer (Last_Linker_Option),\n+                     Parent  => Dir_Path,\n                      Do_Fail => Do_Fail,\n                      Including_L_Switch => True);\n                end if;\n@@ -1498,7 +1498,8 @@ package body Makeutl is\n \n       procedure Extract\n         (Found  : out Boolean;\n-         Source : out Source_Info) is\n+         Source : out Source_Info)\n+      is\n       begin\n          Found := False;\n \n@@ -1565,7 +1566,8 @@ package body Makeutl is\n \n       procedure Initialize\n         (Queue_Per_Obj_Dir : Boolean;\n-         Force : Boolean := False) is\n+         Force             : Boolean := False)\n+      is\n       begin\n          if Force or else not Q_Initialized then\n             Q_Initialized := True;\n@@ -1630,10 +1632,10 @@ package body Makeutl is\n       ------------\n \n       procedure Insert (Source : Source_Info) is\n-         Tmp : Boolean;\n-         pragma Unreferenced (Tmp);\n+         Discard : Boolean;\n+         pragma Unreferenced (Discard);\n       begin\n-         Tmp := Insert (Source);\n+         Discard := Insert (Source);\n       end Insert;\n \n       --------------"}, {"sha": "4ae63cabb336b5b1a03440cc2de37edec2b9c4f3", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -28,12 +28,13 @@\n --  queue management.\n \n with ALI;\n-with GNAT.OS_Lib; use GNAT.OS_Lib;\n-with Namet;       use Namet;\n+with Namet;    use Namet;\n with Opt;\n-with Prj;         use Prj;\n+with Prj;      use Prj;\n with Prj.Tree;\n-with Types;       use Types;\n+with Types;    use Types;\n+\n+with GNAT.OS_Lib; use GNAT.OS_Lib;\n \n package Makeutl is\n \n@@ -192,13 +193,12 @@ package Makeutl is\n       Including_L_Switch   : Boolean := True;\n       Including_Non_Switch : Boolean := True;\n       Including_RTS        : Boolean := False);\n-   --  Test if Switch is a relative search path switch. If it is, fail if\n-   --  Parent is the empty string, otherwise prepend the path with Parent.\n-   --  This subprogram is only called when using project files. For gnatbind\n-   --  switches, Including_L_Switch is False, because the argument of the -L\n-   --  switch is not a path. If Including_RTS is True, process also switches\n-   --  --RTS=.\n-   --  Do_Fail is called in case of error. Using Osing.Fail might be\n+   --  Test if Switch is a relative search path switch. If so, fail if Parent\n+   --  is the empty string, otherwise prepend the path with Parent. This\n+   --  subprogram is only used when using project files. For gnatbind switches,\n+   --  Including_L_Switch is False, because the argument of the -L switch is\n+   --  not a path. If Including_RTS is True, process also switches --RTS=.\n+   --  Do_Fail is called in case of error. Using Osint.Fail might be\n    --  appropriate.\n \n    function Path_Or_File_Name (Path : Path_Name_Type) return String;"}, {"sha": "b98bb1309596d8047f7b133303ea862ad7503d72", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -911,15 +911,14 @@ package body Prj is\n    begin\n       if Tree /= null then\n          if Tree.Is_Root_Tree then\n-            Name_List_Table.Free (Tree.Shared.Name_Lists);\n-            Number_List_Table.Free (Tree.Shared.Number_Lists);\n-            String_Element_Table.Free (Tree.Shared.String_Elements);\n+            Name_List_Table.Free        (Tree.Shared.Name_Lists);\n+            Number_List_Table.Free      (Tree.Shared.Number_Lists);\n+            String_Element_Table.Free   (Tree.Shared.String_Elements);\n             Variable_Element_Table.Free (Tree.Shared.Variable_Elements);\n-            Array_Element_Table.Free (Tree.Shared.Array_Elements);\n-            Array_Table.Free (Tree.Shared.Arrays);\n-            Package_Table.Free (Tree.Shared.Packages);\n-\n-            Temp_Files_Table.Free (Tree.Shared.Private_Part.Temp_Files);\n+            Array_Element_Table.Free    (Tree.Shared.Array_Elements);\n+            Array_Table.Free            (Tree.Shared.Arrays);\n+            Package_Table.Free          (Tree.Shared.Packages);\n+            Temp_Files_Table.Free       (Tree.Shared.Private_Part.Temp_Files);\n          end if;\n \n          Source_Paths_Htable.Reset (Tree.Source_Paths_HT);"}, {"sha": "f9360902edebc6c316097502f384f26a395afc5b", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -1409,7 +1409,6 @@ package Prj is\n       Array_Elements    : Array_Element_Table.Instance;\n       Arrays            : Array_Table.Instance;\n       Packages          : Package_Table.Instance;\n-\n       Private_Part      : Private_Project_Tree_Data;\n    end record;\n    type Shared_Project_Tree_Data_Access is access all Shared_Project_Tree_Data;"}, {"sha": "df71ba5155e98a6e94382eed6195769e13771fa9", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -112,7 +112,7 @@ package Rtsfind is\n       --  package see declarations in the runtime entity table below.\n \n       RTU_Null,\n-      --  Used as a null entry. Will cause an error if referenced.\n+      --  Used as a null entry (will cause an error if referenced)\n \n       --  Children of Ada\n "}, {"sha": "b15f021dbcaf1fa4fb919f4de9cfd744f02db59e", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -62,7 +62,7 @@ package System.Soft_Links is\n    pragma Suppress_Initialization (No_Param_Proc);\n    --  Some uninitialized objects of that type are initialized by the Binder\n    --  so it is important that such objects are not reset to null during\n-   --  elaboration\n+   --  elaboration.\n \n    type Addr_Param_Proc   is access procedure (Addr : Address);\n    pragma Favor_Top_Level (Addr_Param_Proc);\n@@ -226,7 +226,7 @@ package System.Soft_Links is\n    Finalize_Library_Objects : No_Param_Proc;\n    pragma Export (C, Finalize_Library_Objects,\n                   \"__gnat_finalize_library_objects\");\n-   --  will be initialized by the binder\n+   --  Will be initialized by the binder\n \n    Adafinal : No_Param_Proc := Adafinal_NT'Access;\n    --  Performs the finalization of the Ada Runtime"}, {"sha": "d1a5815a835c0e4a3b2c5c20bd1566e84a1afb14", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -2011,10 +2011,10 @@ package body System.Tasking.Stages is\n --  Package elaboration code\n \n begin\n-   --  Establish the Adafinal oftlink\n+   --  Establish the Adafinal softlink\n \n    --  This is not done inside the central RTS initialization routine\n-   --  to avoid with-ing this package from System.Tasking.Initialization.\n+   --  to avoid with'ing this package from System.Tasking.Initialization.\n \n    SSL.Adafinal := Finalize_Global_Tasks'Access;\n "}, {"sha": "0f1468d1faa363f5641c635f19936454b07d1f8d", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -964,6 +964,12 @@ package body Sem_Eval is\n                      return Unknown;\n                   end if;\n                end if;\n+            else\n+\n+               --  If the range of either operand cannot be determined,\n+               --  nothing further can be inferred.\n+\n+               return Unknown;\n             end if;\n          end;\n "}, {"sha": "ccc6aa3c8d86ffa550051dfa8e9869329ceaa337", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f9ad6b6231baeb79e967d1e7f1d1d9a7953453b7", "patch": "@@ -4760,11 +4760,13 @@ package body Sem_Prag is\n               (Get_Base_Subprogram (Subprogram_Def), Link_Nam);\n          end if;\n \n-         --  We allow duplicated export names in CIL, as they are always\n+         --  We allow duplicated export names in CIL/Java, as they are always\n          --  enclosed in a namespace that differentiates them, and overloaded\n          --  entities are supported by the VM.\n \n-         if Convention (Subprogram_Def) /= Convention_CIL then\n+         if Convention (Subprogram_Def) /= Convention_CIL\n+           and then Convention (Subprogram_Def) /= Convention_Java\n+         then\n             Check_Duplicated_Export_Name (Link_Nam);\n          end if;\n       end Process_Interface_Name;"}]}