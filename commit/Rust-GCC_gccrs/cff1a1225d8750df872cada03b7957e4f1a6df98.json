{"sha": "cff1a1225d8750df872cada03b7957e4f1a6df98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZmMWExMjI1ZDg3NTBkZjg3MmNhZGEwM2I3OTU3ZTRmMWE2ZGY5OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-05T15:05:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-05T15:05:07Z"}, "message": "re PR tree-optimization/89570 (ICE in prepare_cmp_insn, at optabs.c:4001)\n\n\tPR tree-optimization/89570\n\t* match.pd (vec_cond into cond_op simplification): Don't use\n\tget_conditional_internal_fn, use as_internal_fn (cond_op).\n\nCo-Authored-By: Richard Sandiford <richard.sandiford@arm.com>\n\nFrom-SVN: r269391", "tree": {"sha": "06691e29031c96b84fa08f1e8e39b986e0c7179a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06691e29031c96b84fa08f1e8e39b986e0c7179a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff1a1225d8750df872cada03b7957e4f1a6df98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff1a1225d8750df872cada03b7957e4f1a6df98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff1a1225d8750df872cada03b7957e4f1a6df98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff1a1225d8750df872cada03b7957e4f1a6df98/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c50d679ffafaf5e7ba105cea765a307f60e2f3"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "b85b54cb096b8178580198658e22f4162e8628b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff1a1225d8750df872cada03b7957e4f1a6df98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff1a1225d8750df872cada03b7957e4f1a6df98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cff1a1225d8750df872cada03b7957e4f1a6df98", "patch": "@@ -1,3 +1,10 @@\n+2019-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/89570\n+\t* match.pd (vec_cond into cond_op simplification): Don't use\n+\tget_conditional_internal_fn, use as_internal_fn (cond_op).\n+\n 2019-03-05  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/89222"}, {"sha": "0d82beab45b13cfbab4d3f24720dae3018f82c6c", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff1a1225d8750df872cada03b7957e4f1a6df98/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff1a1225d8750df872cada03b7957e4f1a6df98/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=cff1a1225d8750df872cada03b7957e4f1a6df98", "patch": "@@ -5176,24 +5176,26 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n    if the target can do it in one go.  This makes the operation conditional\n    on c, so could drop potentially-trapping arithmetic, but that's a valid\n-   simplification if the result of the operation isn't needed.  */\n+   simplification if the result of the operation isn't needed.\n+\n+   Avoid speculatively generating a stand-alone vector comparison                                                                                \n+   on targets that might not support them.  Any target implementing                                                                              \n+   conditional internal functions must support the same comparisons                                                                              \n+   inside and outside a VEC_COND_EXPR.  */                                                                                                       \n+\n #if GIMPLE\n (for uncond_op (UNCOND_BINARY)\n      cond_op (COND_BINARY)\n  (simplify\n   (vec_cond @0 (view_convert? (uncond_op@4 @1 @2)) @3)\n-  (with { tree op_type = TREE_TYPE (@4); \n-\t  internal_fn cond_fn = get_conditional_internal_fn (uncond_op); }\n-   (if (cond_fn != IFN_LAST\n-\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+  (with { tree op_type = TREE_TYPE (@4); }\n+   (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n \t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op @0 @1 @2 (view_convert:op_type @3))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@4 @2 @3)))\n-  (with { tree op_type = TREE_TYPE (@4);\n-\t  internal_fn cond_fn = get_conditional_internal_fn (uncond_op); }\n-   (if (cond_fn != IFN_LAST\n-\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+  (with { tree op_type = TREE_TYPE (@4); }\n+   (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n \t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op (bit_not @0) @2 @3 (view_convert:op_type @1)))))))\n \n@@ -5202,20 +5204,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      cond_op (COND_TERNARY)\n  (simplify\n   (vec_cond @0 (view_convert? (uncond_op@5 @1 @2 @3)) @4)\n-  (with { tree op_type = TREE_TYPE (@5);\n-\t  internal_fn cond_fn\n-\t    = get_conditional_internal_fn (as_internal_fn (uncond_op)); }\n-   (if (cond_fn != IFN_LAST\n-\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+  (with { tree op_type = TREE_TYPE (@5); }\n+   (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n \t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op @0 @1 @2 @3 (view_convert:op_type @4))))))\n  (simplify\n   (vec_cond @0 @1 (view_convert? (uncond_op@5 @2 @3 @4)))\n-  (with { tree op_type = TREE_TYPE (@5);\n-\t  internal_fn cond_fn\n-\t    = get_conditional_internal_fn (as_internal_fn (uncond_op)); }\n-   (if (cond_fn != IFN_LAST\n-\t&& vectorized_internal_fn_supported_p (cond_fn, op_type)\n+  (with { tree op_type = TREE_TYPE (@5); }\n+   (if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)\n \t&& element_precision (type) == element_precision (op_type))\n     (view_convert (cond_op (bit_not @0) @2 @3 @4\n \t\t  (view_convert:op_type @1)))))))"}]}