{"sha": "9f32d037484306f1045b661d9bf29e893d846ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzMmQwMzc0ODQzMDZmMTA0NWI2NjFkOWJmMjllODkzZDg0NmVkZQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-04-11T21:48:27Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-04-11T21:48:27Z"}, "message": "simplify.c (gfc_simplify_nearest): Overhaul.\n\nfortran/\n* simplify.c (gfc_simplify_nearest): Overhaul.\n\ntestsuite/\n* gfortran.dg/fold_nearest.f90: New test.\n\nFrom-SVN: r97987", "tree": {"sha": "1efc3a40c21b6fbc4929353b55c2315dd726d1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1efc3a40c21b6fbc4929353b55c2315dd726d1b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f32d037484306f1045b661d9bf29e893d846ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f32d037484306f1045b661d9bf29e893d846ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f32d037484306f1045b661d9bf29e893d846ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f32d037484306f1045b661d9bf29e893d846ede/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d667716cb63716aefc44dce80607afad25ad28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d667716cb63716aefc44dce80607afad25ad28c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d667716cb63716aefc44dce80607afad25ad28c"}], "stats": {"total": 135, "additions": 94, "deletions": 41}, "files": [{"sha": "5df549eadd13cc6654cc4b0cd9023d45ca9e3d09", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9f32d037484306f1045b661d9bf29e893d846ede", "patch": "@@ -1,3 +1,7 @@\n+2005-04-11  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* simplify.c (gfc_simplify_nearest): Overhaul.\n+\n 2005-04-10  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* interface.c: Fix a comment typo."}, {"sha": "1ca5b52bdfb2f9ee28e7b6e235011a6014d74042", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 59, "deletions": 41, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=9f32d037484306f1045b661d9bf29e893d846ede", "patch": "@@ -2263,64 +2263,82 @@ gfc_expr *\n gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n {\n   gfc_expr *result;\n-  float rval;\n-  double val, eps;\n-  int p, i, k, match_float;\n-\n-  /* FIXME: This implementation is dopey and probably not quite right,\n-     but it's a start.  */\n+  mpfr_t tmp;\n+  int direction, sgn;\n \n-  if (x->expr_type != EXPR_CONSTANT)\n+  if (x->expr_type != EXPR_CONSTANT || s->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  k = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n-\n-  result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n+  gfc_set_model_kind (x->ts.kind);\n+  result = gfc_copy_expr (x);\n \n-  val = mpfr_get_d (x->value.real, GFC_RND_MODE);\n-  p = gfc_real_kinds[k].digits;\n+  direction = mpfr_sgn (s->value.real);\n \n-  eps = 1.;\n-  for (i = 1; i < p; ++i)\n+  if (direction == 0)\n     {\n-      eps = eps / 2.;\n+      gfc_error (\"Second argument of NEAREST at %L may not be zero\",\n+\t\t &s->where);\n+      gfc_free (result);\n+      return &gfc_bad_expr;\n     }\n \n-  /* TODO we should make sure that 'float' matches kind 4 */\n-  match_float = gfc_real_kinds[k].kind == 4;\n-  if (mpfr_cmp_ui (s->value.real, 0) > 0)\n+  /* TODO: Use mpfr_nextabove and mpfr_nextbelow once we move to a\n+     newer version of mpfr.  */\n+\n+  sgn = mpfr_sgn (x->value.real);\n+\n+  if (sgn == 0)\n     {\n-      if (match_float)\n-\t{\n-\t  rval = (float) val;\n-\t  rval = rval + eps;\n-\t  mpfr_set_d (result->value.real, rval, GFC_RND_MODE);\n-\t}\n+      int k = gfc_validate_kind (BT_REAL, x->ts.kind, 0);\n+\n+      if (direction > 0)\n+\tmpfr_add (result->value.real,\n+\t\t  x->value.real, gfc_real_kinds[k].tiny, GFC_RND_MODE);\n       else\n-\t{\n-\t  val = val + eps;\n-\t  mpfr_set_d (result->value.real, val, GFC_RND_MODE);\n-\t}\n+\tmpfr_sub (result->value.real,\n+\t\t  x->value.real, gfc_real_kinds[k].tiny, GFC_RND_MODE);\n+\n+#if 0\n+      /* FIXME: This gives an arithmetic error because we compare\n+\t against tiny when range-checking.  Also, it doesn't give the\n+\t right value.  */\n+      /* TINY is the smallest model number, we want the smallest\n+\t machine representable number.  Therefore we have to shift the\n+\t value to the right by the number of digits - 1.  */\n+      mpfr_div_2ui (result->value.real, result->value.real,\n+\t\t    gfc_real_kinds[k].precision - 1, GFC_RND_MODE);\n+#endif\n     }\n-  else if (mpfr_cmp_ui (s->value.real, 0) < 0)\n+  else\n     {\n-      if (match_float)\n+      if (sgn < 0)\n \t{\n-\t  rval = (float) val;\n-\t  rval = rval - eps;\n-\t  mpfr_set_d (result->value.real, rval, GFC_RND_MODE);\n+\t  direction = -direction;\n+\t  mpfr_neg (result->value.real, result->value.real, GFC_RND_MODE);\n \t}\n+\n+      if (direction > 0)\n+\tmpfr_add_one_ulp (result->value.real, GFC_RND_MODE);\n       else\n \t{\n-\t  val = val - eps;\n-\t  mpfr_set_d (result->value.real, val, GFC_RND_MODE);\n+\t  /* In this case the exponent can shrink, which makes us skip\n+\t     over one number because we substract one ulp with the\n+\t     larger exponent.  Thus we need to compensate for this.  */\n+\t  mpfr_init_set (tmp, result->value.real, GFC_RND_MODE);\n+\n+\t  mpfr_sub_one_ulp (result->value.real, GFC_RND_MODE);\n+\t  mpfr_add_one_ulp (result->value.real, GFC_RND_MODE);\n+\n+\t  /* If we're back to where we started, the spacing is one\n+\t     ulp, and we get the correct result by subtracting.  */\n+\t  if (mpfr_cmp (tmp, result->value.real) == 0)\n+\t    mpfr_sub_one_ulp (result->value.real, GFC_RND_MODE);\n+\n+\t  mpfr_clear (tmp);\n \t}\n-    }\n-  else\n-    {\n-      gfc_error (\"Invalid second argument of NEAREST at %L\", &s->where);\n-      gfc_free (result);\n-      return &gfc_bad_expr;\n+\n+      if (sgn < 0)\n+\tmpfr_neg (result->value.real, result->value.real, GFC_RND_MODE);\n     }\n \n   return range_check (result, \"NEAREST\");"}, {"sha": "2b10695cfe612fe578f1de3a5bad0c4801da6d90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f32d037484306f1045b661d9bf29e893d846ede", "patch": "@@ -1,3 +1,7 @@\n+2005-04-11  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.dg/fold_nearest.f90: New test.\n+\n 2005-04-11  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/tree-ssa/alias-1.c: New test."}, {"sha": "743e2023ab6f09ea4984bb507da904ff40835df8", "filename": "gcc/testsuite/gfortran.dg/fold_nearest.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ftestsuite%2Fgfortran.dg%2Ffold_nearest.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f32d037484306f1045b661d9bf29e893d846ede/gcc%2Ftestsuite%2Fgfortran.dg%2Ffold_nearest.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffold_nearest.f90?ref=9f32d037484306f1045b661d9bf29e893d846ede", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! Tests for the constant folding of the NEAREST intrinsic\n+! We compare against the results of the runtime implementation,\n+! thereby making sure that they remain consistent\n+REAL, PARAMETER :: x(10) = (/ 1., 0.49999997, 0.5, 8388609.0, -1., &\n+                                      -0.49999997, -0.5, -8388609.0, &\n+                                      0., 0. /), &\n+                 dir(10) = (/ -1.,       +1., -1.,       -1., +1., &\n+                                             -1.,  +1.,        +1., &\n+                                     +1.,-1./)\n+REAL :: a(10)\n+\n+a = x\n+if (nearest (x(1), dir(1)) /= nearest (a(1), dir(1))) call abort ()\n+if (nearest (x(2), dir(2)) /= nearest (a(2), dir(2))) call abort ()\n+if (nearest (x(3), dir(3)) /= nearest (a(3), dir(3))) call abort ()\n+if (nearest (x(4), dir(4)) /= nearest (a(4), dir(4))) call abort ()\n+if (nearest (x(5), dir(5)) /= nearest (a(5), dir(5))) call abort ()\n+if (nearest (x(6), dir(6)) /= nearest (a(6), dir(6))) call abort ()\n+if (nearest (x(7), dir(7)) /= nearest (a(7), dir(7))) call abort ()\n+if (nearest (x(8), dir(8)) /= nearest (a(8), dir(8))) call abort ()\n+! These last two tests are commented out because mpfr provides no support\n+! for denormals, and therefore we get TINY instead of the correct result.\n+!if (nearest (x(9), dir(9)) /= nearest (a(9), dir(9))) call abort ()\n+!if (nearest (x(10), dir(10)) /= nearest (a(10), dir(10))) call abort ()\n+\n+end"}]}