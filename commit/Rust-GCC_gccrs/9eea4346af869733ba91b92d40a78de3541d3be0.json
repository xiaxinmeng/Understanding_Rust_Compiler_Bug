{"sha": "9eea4346af869733ba91b92d40a78de3541d3be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlYTQzNDZhZjg2OTczM2JhOTFiOTJkNDBhNzhkZTM1NDFkM2JlMA==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@adacore.com", "date": "2011-08-01T12:41:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T12:41:48Z"}, "message": "sem_prag.adb (Check_No_Link_Name): New procedure.\n\n2011-08-01  Geert Bosch  <bosch@adacore.com>\n\n\t* sem_prag.adb (Check_No_Link_Name): New procedure.\n\t(Process_Import_Or_Interface): Use Check_No_Link_Name.\n\t* cstand.adb (Create_Standard): Use Esize (Standard_Long_Long_Float)\n\tinstead of Standard_Long_Long_Float_Size global. Preparation for\n\teventual removal of per type constants.\n\t* exp_util.ads (Get_Stream_Size): New function returning the stream\n\tsize value of subtype E.\n\t* exp_util.adb (Get_Stream_Size): Implement new function.\n\t* exp_strm.adb (Build_Elementary_Input_Call): Use Get_Stream_Size\n\tfunction.\n\t* exp_attr.adb (Attribute_Stream_Size): Use Get_Stream_Size\n\t* einfo.adb:\n\t(Machine_Mantissa_Value): Handle 128-bit quad precision IEEE floats\n\nFrom-SVN: r177026", "tree": {"sha": "f17ae2c4493e2fcccba6ae4458951af5c7773594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f17ae2c4493e2fcccba6ae4458951af5c7773594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eea4346af869733ba91b92d40a78de3541d3be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eea4346af869733ba91b92d40a78de3541d3be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eea4346af869733ba91b92d40a78de3541d3be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eea4346af869733ba91b92d40a78de3541d3be0/comments", "author": null, "committer": null, "parents": [{"sha": "655b30bfde9172bd40189a787b85b16e461ef1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655b30bfde9172bd40189a787b85b16e461ef1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655b30bfde9172bd40189a787b85b16e461ef1ef"}], "stats": {"total": 118, "additions": 72, "deletions": 46}, "files": [{"sha": "463108ab8314f0c01e1794482578c44415201d47", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -1,3 +1,19 @@\n+2011-08-01  Geert Bosch  <bosch@adacore.com>\n+\n+\t* sem_prag.adb (Check_No_Link_Name): New procedure.\n+\t(Process_Import_Or_Interface): Use Check_No_Link_Name.\n+\t* cstand.adb (Create_Standard): Use Esize (Standard_Long_Long_Float)\n+\tinstead of Standard_Long_Long_Float_Size global. Preparation for\n+\teventual removal of per type constants.\n+\t* exp_util.ads (Get_Stream_Size): New function returning the stream\n+\tsize value of subtype E.\n+\t* exp_util.adb (Get_Stream_Size): Implement new function.\n+\t* exp_strm.adb (Build_Elementary_Input_Call): Use Get_Stream_Size\n+\tfunction.\n+\t* exp_attr.adb (Attribute_Stream_Size): Use Get_Stream_Size\n+\t* einfo.adb:\n+\t(Machine_Mantissa_Value): Handle 128-bit quad precision IEEE floats\n+\n 2011-08-01  Geert Bosch  <bosch@adacore.com>\n \n \t* cstand.adb: Fix comments."}, {"sha": "8d9d798e9ae1475710ea3302e7e0db32adf732fe", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -1105,7 +1105,8 @@ package body CStand is\n       Set_Ekind             (Any_Real, E_Floating_Point_Type);\n       Set_Scope             (Any_Real, Standard_Standard);\n       Set_Etype             (Any_Real, Standard_Long_Long_Float);\n-      Init_Size             (Any_Real, Standard_Long_Long_Float_Size);\n+      Init_Size             (Any_Real,\n+        UI_To_Int (Esize (Standard_Long_Long_Float)));\n       Set_Elem_Alignment    (Any_Real);\n       Make_Name             (Any_Real, \"a real type\");\n "}, {"sha": "5e9731cc96c09875db48afac29945030f839930b", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -6561,6 +6561,7 @@ package body Einfo is\n                when  1 ..  6 => return Uint_24;\n                when  7 .. 15 => return UI_From_Int (53);\n                when 16 .. 18 => return Uint_64;\n+               when 19 .. 33 => return UI_From_Int (113);\n                when others => return No_Uint;\n             end case;\n "}, {"sha": "56ca1ae00caebff854a172eb87b772f900771beb", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -13,11 +13,10 @@\n -- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License along  --\n--- with this program; see file COPYING3.  If not see                        --\n--- <http://www.gnu.org/licenses/>.                                          --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n@@ -4282,24 +4281,10 @@ package body Exp_Attr is\n       -- Stream_Size --\n       -----------------\n \n-      when Attribute_Stream_Size => Stream_Size : declare\n-         Size : Int;\n-\n-      begin\n-         --  If we have a Stream_Size clause for this type use it, otherwise\n-         --  the Stream_Size if the size of the type.\n-\n-         if Has_Stream_Size_Clause (Ptyp) then\n-            Size :=\n-              UI_To_Int\n-                (Static_Integer (Expression (Stream_Size_Clause (Ptyp))));\n-         else\n-            Size := UI_To_Int (Esize (Ptyp));\n-         end if;\n-\n-         Rewrite (N, Make_Integer_Literal (Loc, Intval => Size));\n+      when Attribute_Stream_Size =>\n+         Rewrite (N,\n+           Make_Integer_Literal (Loc, Intval => Get_Stream_Size (Ptyp)));\n          Analyze_And_Resolve (N, Typ);\n-      end Stream_Size;\n \n       ----------\n       -- Succ --"}, {"sha": "f9b6294175796044b3106511ba230abfe4dcd781", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -25,6 +25,7 @@\n \n with Atree;    use Atree;\n with Einfo;    use Einfo;\n+with Exp_Util; use Exp_Util;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -452,22 +453,13 @@ package body Exp_Strm is\n       FST     : constant Entity_Id  := First_Subtype (U_Type);\n       Strm    : constant Node_Id    := First (Expressions (N));\n       Targ    : constant Node_Id    := Next (Strm);\n-      P_Size  : Uint;\n+      P_Size  : constant Uint       := Get_Stream_Size (FST);\n       Res     : Node_Id;\n       Lib_RE  : RE_Id;\n \n    begin\n       Check_Restriction (No_Default_Stream_Attributes, N);\n \n-      --  Compute the size of the stream element. This is either the size of\n-      --  the first subtype or if given the size of the Stream_Size attribute.\n-\n-      if Has_Stream_Size_Clause (FST) then\n-         P_Size := Static_Integer (Expression (Stream_Size_Clause (FST)));\n-      else\n-         P_Size := Esize (FST);\n-      end if;\n-\n       --  Check first for Boolean and Character. These are enumeration types,\n       --  but we treat them specially, since they may require special handling\n       --  in the transfer protocol. However, this special handling only applies"}, {"sha": "57f67e4c7054234566e0653081b9363c77ed00fe", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -55,7 +55,6 @@ with Stringt;  use Stringt;\n with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n-with Uintp;    use Uintp;\n with Urealp;   use Urealp;\n with Validsw;  use Validsw;\n \n@@ -2165,6 +2164,24 @@ package body Exp_Util is\n       end;\n    end Get_Current_Value_Condition;\n \n+   ---------------------\n+   -- Get_Stream_Size --\n+   ---------------------\n+\n+   function Get_Stream_Size (E : Entity_Id) return Uint is\n+   begin\n+      --  If we have a Stream_Size clause for this type use it\n+\n+      if Has_Stream_Size_Clause (E) then\n+         return Static_Integer (Expression (Stream_Size_Clause (E)));\n+\n+      --  Otherwise the Stream_Size if the size of the type\n+\n+      else\n+         return Esize (E);\n+      end if;\n+   end Get_Stream_Size;\n+\n    ---------------------------------\n    -- Has_Controlled_Coextensions --\n    ---------------------------------"}, {"sha": "5ef792b85aa48a6398087284d6531f6c2aa6cee8", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -30,6 +30,7 @@ with Namet;   use Namet;\n with Rtsfind; use Rtsfind;\n with Sinfo;   use Sinfo;\n with Types;   use Types;\n+with Uintp;   use Uintp;\n \n package Exp_Util is\n \n@@ -444,6 +445,9 @@ package Exp_Util is\n    --  N_Op_Eq), or to determine the result of some other test in other cases\n    --  (e.g. no access check required if N_Op_Ne Null).\n \n+   function Get_Stream_Size (E : Entity_Id) return Uint;\n+   --  Return the stream size value of the subtype E\n+\n    function Has_Controlled_Coextensions (Typ : Entity_Id) return Boolean;\n    --  Determine whether a record type has anonymous access discriminants with\n    --  a controlled designated type."}, {"sha": "585981a87b5af7fa1f6786e96a29ac960579b874", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea4346af869733ba91b92d40a78de3541d3be0/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9eea4346af869733ba91b92d40a78de3541d3be0", "patch": "@@ -436,6 +436,9 @@ package body Sem_Prag is\n       --  If any argument has an identifier, then an error message is issued,\n       --  and Pragma_Exit is raised.\n \n+      procedure Check_No_Link_Name;\n+      --  Checks that no link name is specified\n+\n       procedure Check_Optional_Identifier (Arg : Node_Id; Id : Name_Id);\n       --  Checks if the given argument has an identifier, and if so, requires\n       --  it to match the given identifier name. If there is a non-matching\n@@ -1513,6 +1516,24 @@ package body Sem_Prag is\n          end if;\n       end Check_No_Identifiers;\n \n+      ------------------------\n+      -- Check_No_Link_Name --\n+      ------------------------\n+\n+      procedure Check_No_Link_Name is\n+      begin\n+         if Present (Arg3)\n+           and then Chars (Arg3) = Name_Link_Name\n+         then\n+            Arg4 := Arg3;\n+         end if;\n+\n+         if Present (Arg4) then\n+            Error_Pragma_Arg\n+              (\"Link_Name argument not allowed for Import Intrinsic\", Arg4);\n+         end if;\n+      end Check_No_Link_Name;\n+\n       -------------------------------\n       -- Check_Optional_Identifier --\n       -------------------------------\n@@ -3964,18 +3985,7 @@ package body Sem_Prag is\n \n                      --  Link_Name argument not allowed for intrinsic\n \n-                     if Present (Arg3)\n-                       and then Chars (Arg3) = Name_Link_Name\n-                     then\n-                        Arg4 := Arg3;\n-                     end if;\n-\n-                     if Present (Arg4) then\n-                        Error_Pragma_Arg\n-                          (\"Link_Name argument not allowed for \" &\n-                           \"Import Intrinsic\",\n-                           Arg4);\n-                     end if;\n+                     Check_No_Link_Name;\n \n                      Set_Is_Intrinsic_Subprogram (Def_Id);\n "}]}