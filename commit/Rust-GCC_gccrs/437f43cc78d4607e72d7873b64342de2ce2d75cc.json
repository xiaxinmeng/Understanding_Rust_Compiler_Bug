{"sha": "437f43cc78d4607e72d7873b64342de2ce2d75cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3ZjQzY2M3OGQ0NjA3ZTcyZDc4NzNiNjQzNDJkZTJjZTJkNzVjYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-19T23:07:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-19T23:07:52Z"}, "message": "PR67085 pass comparison functions by reference in heap algorithms\n\n\tPR libstdc++/67085\n\t* include/bits/predefined_ops.h (_Iter_less_val, _Val_less_iter): Add\n\tconverting constructors from _Iter_less_iter.\n\t(_Iter_comp_val, _Val_comp_iter): Add converting constructors from\n\t_Iter_comp_iter.\n\t(__iter_comp_val(_Iter_comp_iter<C>): Use converting constructor.\n\t(__val_comp_iter(_Iter_comp_iter<C>): Likewise.\n\t* include/bits/stl_heap.h (__is_heap_until, __push_heap, __pop_heap)\n\t(__make_heap, __sort_heap): Change _Compare parameters to references.\n\t(__is_heap, push_heap, __adjust_heap, __pop_heap, pop_heap)\n\t(__make_heap, make_heap, sort_heap, is_heap_until): Pass comparison\n\tfunctions as lvalues.\n\t(is_heap): Call __is_heap_until directly to avoid copying __comp.\n\t* testsuite/23_containers/priority_queue/67085.cc: Adjust test to\n\tcount copies during construction with empty sequence.\n\nFrom-SVN: r244656", "tree": {"sha": "e2fdd14f91b9a394be11153c1426b2348fc1f013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2fdd14f91b9a394be11153c1426b2348fc1f013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/437f43cc78d4607e72d7873b64342de2ce2d75cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437f43cc78d4607e72d7873b64342de2ce2d75cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437f43cc78d4607e72d7873b64342de2ce2d75cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437f43cc78d4607e72d7873b64342de2ce2d75cc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d445d739b91c2e68c2b13c265910ecf24511f3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d445d739b91c2e68c2b13c265910ecf24511f3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d445d739b91c2e68c2b13c265910ecf24511f3a3"}], "stats": {"total": 156, "additions": 109, "deletions": 47}, "files": [{"sha": "fde7f341444e0ebfbe21e9dd0d0781ef2a23cfe6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=437f43cc78d4607e72d7873b64342de2ce2d75cc", "patch": "@@ -1,5 +1,21 @@\n 2017-01-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/67085\n+\t* include/bits/predefined_ops.h (_Iter_less_val, _Val_less_iter): Add\n+\tconverting constructors from _Iter_less_iter.\n+\t(_Iter_comp_val, _Val_comp_iter): Add converting constructors from\n+\t_Iter_comp_iter.\n+\t(__iter_comp_val(_Iter_comp_iter<C>): Use converting constructor.\n+\t(__val_comp_iter(_Iter_comp_iter<C>): Likewise.\n+\t* include/bits/stl_heap.h (__is_heap_until, __push_heap, __pop_heap)\n+\t(__make_heap, __sort_heap): Change _Compare parameters to references.\n+\t(__is_heap, push_heap, __adjust_heap, __pop_heap, pop_heap)\n+\t(__make_heap, make_heap, sort_heap, is_heap_until): Pass comparison\n+\tfunctions as lvalues.\n+\t(is_heap): Call __is_heap_until directly to avoid copying __comp.\n+\t* testsuite/23_containers/priority_queue/67085.cc: Adjust test to\n+\tcount copies during construction with empty sequence.\n+\n \tPR libstdc++/67085\n \t* include/bits/stl_heap.h (__is_heap): Use _GLIBCXX_MOVE.\n \t(__make_heap, __sort_heap): Don't use _GLIBCXX_MOVE inside loops."}, {"sha": "a5a7694501af79c191ca43c29edffceb220e6157", "filename": "libstdc++-v3/include/bits/predefined_ops.h", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h?ref=437f43cc78d4607e72d7873b64342de2ce2d75cc", "patch": "@@ -50,6 +50,15 @@ namespace __ops\n \n   struct _Iter_less_val\n   {\n+#if __cplusplus >= 201103L\n+    constexpr _Iter_less_val() = default;\n+#else\n+    _Iter_less_val() { }\n+#endif\n+\n+    explicit\n+    _Iter_less_val(_Iter_less_iter) { }\n+\n     template<typename _Iterator, typename _Value>\n       bool\n       operator()(_Iterator __it, _Value& __val) const\n@@ -66,6 +75,15 @@ namespace __ops\n \n   struct _Val_less_iter\n   {\n+#if __cplusplus >= 201103L\n+    constexpr _Val_less_iter() = default;\n+#else\n+    _Val_less_iter() { }\n+#endif\n+\n+    explicit\n+    _Val_less_iter(_Iter_less_iter) { }\n+\n     template<typename _Value, typename _Iterator>\n       bool\n       operator()(_Value& __val, _Iterator __it) const\n@@ -141,6 +159,18 @@ namespace __ops\n \t: _M_comp(_GLIBCXX_MOVE(__comp))\n       { }\n \n+      explicit\n+      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)\n+\t: _M_comp(__comp._M_comp)\n+      { }\n+\n+#if __cplusplus >= 201103L\n+      explicit\n+      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)\n+\t: _M_comp(std::move(__comp._M_comp))\n+      { }\n+#endif\n+\n       template<typename _Iterator, typename _Value>\n \tbool\n \toperator()(_Iterator __it, _Value& __val)\n@@ -155,7 +185,7 @@ namespace __ops\n   template<typename _Compare>\n     inline _Iter_comp_val<_Compare>\n     __iter_comp_val(_Iter_comp_iter<_Compare> __comp)\n-    { return _Iter_comp_val<_Compare>(_GLIBCXX_MOVE(__comp._M_comp)); }\n+    { return _Iter_comp_val<_Compare>(_GLIBCXX_MOVE(__comp)); }\n \n   template<typename _Compare>\n     struct _Val_comp_iter\n@@ -167,6 +197,18 @@ namespace __ops\n \t: _M_comp(_GLIBCXX_MOVE(__comp))\n       { }\n \n+      explicit\n+      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)\n+\t: _M_comp(__comp._M_comp)\n+      { }\n+\n+#if __cplusplus >= 201103L\n+      explicit\n+      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)\n+\t: _M_comp(std::move(__comp._M_comp))\n+      { }\n+#endif\n+\n       template<typename _Value, typename _Iterator>\n \tbool\n \toperator()(_Value& __val, _Iterator __it)\n@@ -181,7 +223,7 @@ namespace __ops\n   template<typename _Compare>\n     inline _Val_comp_iter<_Compare>\n     __val_comp_iter(_Iter_comp_iter<_Compare> __comp)\n-    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp._M_comp)); }\n+    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }\n \n   template<typename _Value>\n     struct _Iter_equals_val"}, {"sha": "3c102f136e66ab2036539878167af85c4fcabe47", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=437f43cc78d4607e72d7873b64342de2ce2d75cc", "patch": "@@ -72,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Compare>\n     _Distance\n     __is_heap_until(_RandomAccessIterator __first, _Distance __n,\n-\t\t    _Compare __comp)\n+\t\t    _Compare& __comp)\n     {\n       _Distance __parent = 0;\n       for (_Distance __child = 1; __child < __n; ++__child)\n@@ -91,17 +91,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _Distance __n)\n     {\n-      return std::__is_heap_until(__first, __n,\n-\t\t\t__gnu_cxx::__ops::__iter_less_iter()) == __n;\n+      __gnu_cxx::__ops::_Iter_less_iter __comp;\n+      return std::__is_heap_until(__first, __n, __comp) == __n;\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare,\n \t   typename _Distance>\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)\n     {\n-      return std::__is_heap_until(__first, __n,\n-\t__gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n;\n+      __gnu_cxx::__ops::_Iter_comp_iter<_Compare> __cmp(_GLIBCXX_MOVE(__comp));\n+      return std::__is_heap_until(__first, __n, __cmp) == __n;\n     }\n \n   template<typename _RandomAccessIterator>\n@@ -126,7 +126,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     __push_heap(_RandomAccessIterator __first,\n \t\t_Distance __holeIndex, _Distance __topIndex, _Tp __value,\n-\t\t_Compare __comp)\n+\t\t_Compare& __comp)\n     {\n       _Distance __parent = (__holeIndex - 1) / 2;\n       while (__holeIndex > __topIndex && __comp(__first + __parent, __value))\n@@ -165,10 +165,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last - 1);\n \n+      __gnu_cxx::__ops::_Iter_less_val __comp;\n       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n       std::__push_heap(__first, _DistanceType((__last - __first) - 1),\n-\t\t       _DistanceType(0), _GLIBCXX_MOVE(__value),\n-\t\t       __gnu_cxx::__ops::__iter_less_val());\n+\t\t       _DistanceType(0), _GLIBCXX_MOVE(__value), __comp);\n     }\n \n   /**\n@@ -200,11 +200,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_heap_pred(__first, __last - 1, __comp);\n \n+      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))\n+\t__cmp(_GLIBCXX_MOVE(__comp));\n       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n       std::__push_heap(__first, _DistanceType((__last - __first) - 1),\n-\t\t       _DistanceType(0), _GLIBCXX_MOVE(__value),\n-\t\t       __gnu_cxx::__ops::\n-\t\t       __iter_comp_val(_GLIBCXX_MOVE(__comp)));\n+\t\t       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance,\n@@ -231,16 +231,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t     + (__secondChild - 1)));\n \t  __holeIndex = __secondChild - 1;\n \t}\n-      std::__push_heap(__first, __holeIndex, __topIndex, \n-\t\t       _GLIBCXX_MOVE(__value),\n-\t\t       __gnu_cxx::__ops::\n-\t\t       __iter_comp_val(_GLIBCXX_MOVE(__comp)));\n+      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))\n+\t__cmp(_GLIBCXX_MOVE(__comp));\n+      std::__push_heap(__first, __holeIndex, __topIndex,\n+\t\t       _GLIBCXX_MOVE(__value), __cmp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n     inline void\n     __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t       _RandomAccessIterator __result, _Compare __comp)\n+\t       _RandomAccessIterator __result, _Compare& __comp)\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t_ValueType;\n@@ -251,7 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       *__result = _GLIBCXX_MOVE(*__first);\n       std::__adjust_heap(__first, _DistanceType(0),\n \t\t\t _DistanceType(__last - __first),\n-\t\t\t _GLIBCXX_MOVE(__value), _GLIBCXX_MOVE(__comp));\n+\t\t\t _GLIBCXX_MOVE(__value), __comp);\n     }\n \n   /**\n@@ -282,8 +282,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__last - __first > 1)\n \t{\n \t  --__last;\n-\t  std::__pop_heap(__first, __last, __last,\n-\t\t\t  __gnu_cxx::__ops::__iter_less_iter());\n+\t  __gnu_cxx::__ops::_Iter_less_iter __comp;\n+\t  std::__pop_heap(__first, __last, __last, __comp);\n \t}\n     }\n \n@@ -313,17 +313,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       if (__last - __first > 1)\n \t{\n+\t  using __gnu_cxx::__ops::_Iter_comp_iter;\n+\t  _Iter_comp_iter<_Compare> __cmp(_GLIBCXX_MOVE(__comp));\n \t  --__last;\n-\t  std::__pop_heap(__first, __last, __last,\n-\t\t\t  __gnu_cxx::__ops::\n-\t\t\t  __iter_comp_iter(_GLIBCXX_MOVE(__comp)));\n+\t  std::__pop_heap(__first, __last, __last, __cmp);\n \t}\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n     void\n     __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t\t_Compare __comp)\n+\t\t_Compare& __comp)\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t  _ValueType;\n@@ -366,8 +366,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_irreflexive(__first, __last);\n \n-      std::__make_heap(__first, __last,\n-\t\t       __gnu_cxx::__ops::__iter_less_iter());\n+      __gnu_cxx::__ops::_Iter_less_iter __comp;\n+      std::__make_heap(__first, __last, __comp);\n     }\n \n   /**\n@@ -391,15 +391,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n-      std::__make_heap(__first, __last,\n-\t\t       __gnu_cxx::__ops::\n-\t\t       __iter_comp_iter(_GLIBCXX_MOVE(__comp)));\n+      __gnu_cxx::__ops::_Iter_comp_iter<_Compare> __cmp(_GLIBCXX_MOVE(__comp));\n+      std::__make_heap(__first, __last, __cmp);\n     }\n \n   template<typename _RandomAccessIterator, typename _Compare>\n     void\n     __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t\t_Compare __comp)\n+\t\t_Compare& __comp)\n     {\n       while (__last - __first > 1)\n \t{\n@@ -429,8 +428,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last);\n \n-      std::__sort_heap(__first, __last,\n-\t\t       __gnu_cxx::__ops::__iter_less_iter());\n+      __gnu_cxx::__ops::_Iter_less_iter __comp;\n+      std::__sort_heap(__first, __last, __comp);\n     }\n \n   /**\n@@ -455,9 +454,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n-      std::__sort_heap(__first, __last,\n-\t\t       __gnu_cxx::__ops::\n-\t\t       __iter_comp_iter(_GLIBCXX_MOVE(__comp)));\n+      __gnu_cxx::__ops::_Iter_comp_iter<_Compare> __cmp(_GLIBCXX_MOVE(__comp));\n+      std::__sort_heap(__first, __last, __cmp);\n     }\n \n #if __cplusplus >= 201103L\n@@ -483,9 +481,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_irreflexive(__first, __last);\n \n+      __gnu_cxx::__ops::_Iter_less_iter __comp;\n       return __first + \n-\tstd::__is_heap_until(__first, std::distance(__first, __last),\n-\t\t\t     __gnu_cxx::__ops::__iter_less_iter());\n+\tstd::__is_heap_until(__first, std::distance(__first, __last), __comp);\n     }\n \n   /**\n@@ -510,10 +508,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __last);\n       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n+      __gnu_cxx::__ops::_Iter_comp_iter<_Compare> __cmp(_GLIBCXX_MOVE(__comp));\n       return __first\n-\t+ std::__is_heap_until(__first, std::distance(__first, __last),\n-\t\t\t       __gnu_cxx::__ops::\n-\t\t\t       __iter_comp_iter(std::move(__comp)));\n+\t+ std::__is_heap_until(__first, std::distance(__first, __last), __cmp);\n     }\n \n   /**\n@@ -541,8 +538,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n \t    _Compare __comp)\n     {\n-      return std::is_heap_until(__first, __last, std::move(__comp))\n-\t== __last;\n+      // concept requirements\n+      __glibcxx_function_requires(_RandomAccessIteratorConcept<\n+\t    _RandomAccessIterator>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n+\n+      const auto __dist = std::distance(__first, __last);\n+      __gnu_cxx::__ops::_Iter_comp_iter<_Compare> __cmp(_GLIBCXX_MOVE(__comp));\n+      return std::__is_heap_until(__first, __dist, __cmp) == __dist;\n     }\n #endif\n "}, {"sha": "9f4da585dd809553cb952dbf917263c69053d527", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/67085.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F67085.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437f43cc78d4607e72d7873b64342de2ce2d75cc/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F67085.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F67085.cc?ref=437f43cc78d4607e72d7873b64342de2ce2d75cc", "patch": "@@ -32,11 +32,11 @@ struct CopyCounter : std::less<int>\n void\n test01()\n {\n-  int v[] = {1, 2, 3, 4};\n-  std::priority_queue<int, std::vector<int>, CopyCounter> q{v, v+4};\n-  VERIFY(count == 4);\n+  int i;\n+  std::priority_queue<int, std::vector<int>, CopyCounter> q{&i, &i};\n+  VERIFY(count == 2);\n   q.push(1);\n-  VERIFY(count == 5);\n+  VERIFY(count == 3);\n }\n \n int"}]}