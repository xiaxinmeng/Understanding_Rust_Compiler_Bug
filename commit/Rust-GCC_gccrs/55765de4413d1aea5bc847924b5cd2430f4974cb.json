{"sha": "55765de4413d1aea5bc847924b5cd2430f4974cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU3NjVkZTQ0MTNkMWFlYTViYzg0NzkyNGI1Y2QyNDMwZjQ5NzRjYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-08-02T22:42:03Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-08-02T22:42:03Z"}, "message": "init.c (build_member_call): Use build_new_method_call, not build_method_call.\n\n\t* init.c (build_member_call): Use build_new_method_call, not\n\tbuild_method_call.\n\t* g++.dg/inherit/access3.C: New test.\n\nFrom-SVN: r56000", "tree": {"sha": "168eb96b45996d9782b715eabfdb7fbe787d12b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/168eb96b45996d9782b715eabfdb7fbe787d12b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55765de4413d1aea5bc847924b5cd2430f4974cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55765de4413d1aea5bc847924b5cd2430f4974cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55765de4413d1aea5bc847924b5cd2430f4974cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55765de4413d1aea5bc847924b5cd2430f4974cb/comments", "author": null, "committer": null, "parents": [{"sha": "ba462c8e9d2fbe607e1b9c3f9bf05dee1148fe37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba462c8e9d2fbe607e1b9c3f9bf05dee1148fe37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba462c8e9d2fbe607e1b9c3f9bf05dee1148fe37"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "34315e4a89c2ef37c7584eb095aa1e1bd2883b75", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55765de4413d1aea5bc847924b5cd2430f4974cb", "patch": "@@ -1,3 +1,8 @@\n+2002-08-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* init.c (build_member_call): Use build_new_method_call, not\n+\tbuild_method_call.\n+\n 2002-08-02  Krister Walfridsson  <cato@df.lth.se>\n \n \t* Make-lang.in (spew.o, lex.o, pt.o): Add path to parse.h dependencies."}, {"sha": "6286a22775378e9f9c371a36ba69c7db1492d664", "filename": "gcc/cp/init.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=55765de4413d1aea5bc847924b5cd2430f4974cb", "patch": "@@ -1434,6 +1434,7 @@ build_member_call (type, name, parmlist)\n {\n   tree t;\n   tree method_name;\n+  tree fns;\n   int dtor = 0;\n   tree basetype_path, decl;\n \n@@ -1511,6 +1512,18 @@ build_member_call (type, name, parmlist)\n \n   decl = maybe_dummy_object (type, &basetype_path);\n \n+  fns = lookup_fnfields (basetype_path, method_name, 0);\n+  if (fns)\n+    {\n+      if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n+\tBASELINK_FUNCTIONS (fns) = build_nt (TEMPLATE_ID_EXPR,\n+\t\t\t\t\t     BASELINK_FUNCTIONS (fns),\n+\t\t\t\t\t     TREE_OPERAND (name, 1));\n+      return build_new_method_call (decl, fns, parmlist,\n+\t\t\t\t    /*conversion_path=*/NULL_TREE,\n+\t\t\t\t    LOOKUP_NORMAL|LOOKUP_NONVIRTUAL);\n+    }\n+\n   /* Convert 'this' to the specified type to disambiguate conversion\n      to the function's context.  */\n   if (decl == current_class_ref\n@@ -1527,12 +1540,6 @@ build_member_call (type, name, parmlist)\n \n   if (constructor_name_p (method_name, type))\n     return build_functional_cast (type, parmlist);\n-  if (lookup_fnfields (basetype_path, method_name, 0))\n-    return build_method_call (decl, \n-\t\t\t      TREE_CODE (name) == TEMPLATE_ID_EXPR\n-\t\t\t      ? name : method_name,\n-\t\t\t      parmlist, basetype_path,\n-\t\t\t      LOOKUP_NORMAL|LOOKUP_NONVIRTUAL);\n   if (TREE_CODE (name) == IDENTIFIER_NODE\n       && ((t = lookup_field (TYPE_BINFO (type), name, 1, 0))))\n     {"}, {"sha": "84a018fd32f23b8dffd51b5bd31cfd6099678aa8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55765de4413d1aea5bc847924b5cd2430f4974cb", "patch": "@@ -1,3 +1,7 @@\n+2002-08-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/inherit/access3.C: New test.\n+\n 2002-08-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/ia64-visibility-2.c: New test."}, {"sha": "1862bfc347176bb4cac90e2190714089f2ba8a92", "filename": "gcc/testsuite/g++.dg/inherit/access3.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55765de4413d1aea5bc847924b5cd2430f4974cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess3.C?ref=55765de4413d1aea5bc847924b5cd2430f4974cb", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+\n+class __new_alloc {\n+public:\n+  static void allocate() {}\n+};\n+\n+template <class _Alloc>\n+class __debug_alloc : public _Alloc {\n+public:\n+  static void allocate();\n+};\n+\n+template <class _Alloc>\n+void __debug_alloc<_Alloc>::allocate() {\n+  _Alloc::allocate();\n+}\n+\n+template class __debug_alloc<__new_alloc>;"}]}