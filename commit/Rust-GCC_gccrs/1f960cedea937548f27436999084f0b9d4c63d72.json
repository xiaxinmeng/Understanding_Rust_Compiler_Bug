{"sha": "1f960cedea937548f27436999084f0b9d4c63d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5NjBjZWRlYTkzNzU0OGYyNzQzNjk5OTA4NGYwYjlkNGM2M2Q3Mg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-07-17T10:56:53Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-07-17T10:56:53Z"}, "message": "[AArch64] Implement vfma_f64, vmla_f64, vfms_f64, vmls_f64 intrinsics.\n\n[gcc/]\n\t* config/aarch64/arm_neon.h (vfma_f64): New intrinsic.\n\t(vmla_f64): Likewise.\n\t(vfms_f64): Likewise.\n\t(vmls_f64): Likewise.\n\n[testsuite/]\n\t* gcc.target/aarch64/simd/vfma_f64.c: New test.\n\t* gcc.target/aarch64/simd/vmla_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vfms_f64.c: Likewise.\n\t* gcc.target/aarch64/simd/vmls_f64.c: Likewise.\n\nFrom-SVN: r212756", "tree": {"sha": "bbad34c58384fa2f67e160d8fdb1287cd96558ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbad34c58384fa2f67e160d8fdb1287cd96558ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f960cedea937548f27436999084f0b9d4c63d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f960cedea937548f27436999084f0b9d4c63d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f960cedea937548f27436999084f0b9d4c63d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f960cedea937548f27436999084f0b9d4c63d72/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d894170968d22d4c9387d18205bf57ff8b380a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d894170968d22d4c9387d18205bf57ff8b380a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d894170968d22d4c9387d18205bf57ff8b380a1"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "2d882c8002bd73c5cdeb3b34547082ce6d897c0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f960cedea937548f27436999084f0b9d4c63d72", "patch": "@@ -1,3 +1,10 @@\n+2014-07-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vfma_f64): New intrinsic.\n+\t(vmla_f64): Likewise.\n+\t(vfms_f64): Likewise.\n+\t(vmls_f64): Likewise.\n+\n 2014-07-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_frint_unspec_p): New function."}, {"sha": "80d1ca6b5763ec6826842e9c47458fd6be78a971", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1f960cedea937548f27436999084f0b9d4c63d72", "patch": "@@ -16764,6 +16764,14 @@ vextq_u64 (uint64x2_t __a, uint64x2_t __b, __const int __c)\n #endif\n }\n \n+/* vfma  */\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vfma_f64 (float64x1_t __a, float64x1_t __b, float64x1_t __c)\n+{\n+  return (float64x1_t) {__builtin_fma (__b[0], __c[0], __a[0])};\n+}\n+\n /* vfma_lane  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n@@ -16867,6 +16875,14 @@ vfmaq_laneq_f64 (float64x2_t __a, float64x2_t __b,\n \t\t\t\t    __a);\n }\n \n+/* vfms  */\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vfms_f64 (float64x1_t __a, float64x1_t __b, float64x1_t __c)\n+{\n+  return (float64x1_t) {__builtin_fma (-__b[0], __c[0], __a[0])};\n+}\n+\n /* vfms_lane  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n@@ -18495,6 +18511,12 @@ vmla_f32 (float32x2_t a, float32x2_t b, float32x2_t c)\n   return a + b * c;\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmla_f64 (float64x1_t __a, float64x1_t __b, float64x1_t __c)\n+{\n+  return __a + __b * __c;\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vmlaq_f32 (float32x4_t a, float32x4_t b, float32x4_t c)\n {\n@@ -18663,6 +18685,12 @@ vmls_f32 (float32x2_t a, float32x2_t b, float32x2_t c)\n   return a - b * c;\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vmls_f64 (float64x1_t __a, float64x1_t __b, float64x1_t __c)\n+{\n+  return __a - __b * __c;\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vmlsq_f32 (float32x4_t a, float32x4_t b, float32x4_t c)\n {"}, {"sha": "2e93ada4419c4f0a3f44e173c85758d82d6fbb53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f960cedea937548f27436999084f0b9d4c63d72", "patch": "@@ -1,3 +1,10 @@\n+2014-07-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vfma_f64.c: New test.\n+\t* gcc.target/aarch64/simd/vmla_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vfms_f64.c: Likewise.\n+\t* gcc.target/aarch64/simd/vmls_f64.c: Likewise.\n+\n 2014-07-17  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* c-c++-common/ubsan/bounds-2.c: Change output pattern."}, {"sha": "272b79ceb395a8f44d76ea1ac833a9cd64210711", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vfma_f64.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfma_f64.c?ref=1f960cedea937548f27436999084f0b9d4c63d72", "patch": "@@ -0,0 +1,37 @@\n+/* Test the vfma_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define EPS 1.0e-15\n+\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  float64x1_t arg1;\n+  float64x1_t arg2;\n+  float64x1_t arg3;\n+\n+  float64_t expected;\n+  float64_t actual;\n+\n+  arg1 = vcreate_f64 (0x3fe3955382d35b0eULL);\n+  arg2 = vcreate_f64 (0x3fa88480812d6670ULL);\n+  arg3 = vcreate_f64 (0x3fd5791ae2a92572ULL);\n+\n+  expected = 0.6280448184360076;\n+  actual = vget_lane_f64 (vfma_f64 (arg1, arg2, arg3), 0);\n+\n+  if (__builtin_fabs (expected - actual) > EPS)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmadd\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f6e1f77886dd3af7374305a45b0055e9b2e3997d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vfms_f64.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvfms_f64.c?ref=1f960cedea937548f27436999084f0b9d4c63d72", "patch": "@@ -0,0 +1,37 @@\n+/* Test the vfms_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define EPS 1.0e-15\n+\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  float64x1_t arg1;\n+  float64x1_t arg2;\n+  float64x1_t arg3;\n+\n+  float64_t expected;\n+  float64_t actual;\n+\n+  arg1 = vcreate_f64 (0x3fe730af8db9e6f7ULL);\n+  arg2 = vcreate_f64 (0x3fe6b78680fa29ceULL);\n+  arg3 = vcreate_f64 (0x3feea3cbf921fbe0ULL);\n+\n+  expected = 4.4964705746355915e-2;\n+  actual = vget_lane_f64 (vfms_f64 (arg1, arg2, arg3), 0);\n+\n+  if (__builtin_fabs (expected - actual) > EPS)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmsub\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+, ?\\[dD\\]\\[0-9\\]+\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6807a2e744787c614acc4668a705809627408c95", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmla_f64.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmla_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmla_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmla_f64.c?ref=1f960cedea937548f27436999084f0b9d4c63d72", "patch": "@@ -0,0 +1,33 @@\n+/* Test the vmla_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define EPS 1.0e-15\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  float64x1_t arg1;\n+  float64x1_t arg2;\n+  float64x1_t arg3;\n+\n+  float64_t expected;\n+  float64_t actual;\n+\n+  arg1 = vcreate_f64 (0x3fc4de626b6bbe9cULL);\n+  arg2 = vcreate_f64 (0x3fb7e454dbe84408ULL);\n+  arg3 = vcreate_f64 (0x3fdd359b94201a3aULL);\n+\n+  expected = 0.20563116414665633;\n+  actual = vget_lane_f64 (vmla_f64 (arg1, arg2, arg3), 0);\n+\n+  if (__builtin_fabs (expected - actual) > EPS)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "d5aa49391645e771b2e4e355aefdef06c068342b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmls_f64.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmls_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f960cedea937548f27436999084f0b9d4c63d72/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmls_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmls_f64.c?ref=1f960cedea937548f27436999084f0b9d4c63d72", "patch": "@@ -0,0 +1,33 @@\n+/* Test the vmls_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define EPS 1.0e-15\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  float64x1_t arg1;\n+  float64x1_t arg2;\n+  float64x1_t arg3;\n+\n+  float64_t expected;\n+  float64_t actual;\n+\n+  arg1 = vcreate_f64 (0x3fea7ec860271ad9ULL);\n+  arg2 = vcreate_f64 (0x3fca04faa09302e8ULL);\n+  arg3 = vcreate_f64 (0x3fecfec8c67415a0ULL);\n+\n+  expected = 0.6437868393361155;\n+  actual = vget_lane_f64 (vmls_f64 (arg1, arg2, arg3), 0);\n+\n+  if (__builtin_fabs (expected - actual) > EPS)\n+    abort ();\n+\n+  return 0;\n+}"}]}