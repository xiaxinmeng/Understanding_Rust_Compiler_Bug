{"sha": "9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjZDg0ZWM3YTc1NzliYjA2MmVmNDc2ODgxMGE5ZDRkYzljM2NhMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2016-08-05T20:11:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-05T20:11:30Z"}, "message": "re PR go/72812 (reflect FAILs with Solaris as)\n\n\tPR go/72812\n\t* go-gcc.cc (char_needs_encoding): New static function.\n\t(needs_encoding, fetch_utf8_char): New static functions.\n\t(encode_id): New static function.\n\t(Gcc_backend::global_variable): Set asm name if the name is not\n\tsimple ASCII.\n\t(Gcc_backend::implicit_variable): Likewise.\n\t(Gcc_backend::implicit_variable_reference): Likewise.\n\t(Gcc_backend::immutable_struct): Likewise.\n\t(Gcc_backend::immutable_struct_reference): Likewise.\n\t(Gcc_backend::function): Likewise.\n\nFrom-SVN: r239179", "tree": {"sha": "6e9e99eb92425975799f09503561a0f18d50e477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e9e99eb92425975799f09503561a0f18d50e477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2/comments", "author": null, "committer": null, "parents": [{"sha": "64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64d6d39969e4621e0b88f695e9b2fc6486d13e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64d6d39969e4621e0b88f695e9b2fc6486d13e8f"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "20d5e9d2200fb6c62e1fde3333f14e673f726ad0", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2", "patch": "@@ -1,3 +1,17 @@\n+2016-08-05  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR go/72812\n+\t* go-gcc.cc (char_needs_encoding): New static function.\n+\t(needs_encoding, fetch_utf8_char): New static functions.\n+\t(encode_id): New static function.\n+\t(Gcc_backend::global_variable): Set asm name if the name is not\n+\tsimple ASCII.\n+\t(Gcc_backend::implicit_variable): Likewise.\n+\t(Gcc_backend::implicit_variable_reference): Likewise.\n+\t(Gcc_backend::immutable_struct): Likewise.\n+\t(Gcc_backend::immutable_struct_reference): Likewise.\n+\t(Gcc_backend::function): Likewise.\n+\n 2016-08-02  Chris Manghane  <cmang@google.com>\n \n \t* lang.opt: Add -fgo-debug-escape option."}, {"sha": "07d9b69906f871b40ddaf25465216d532d81fe5c", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 113, "deletions": 1, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=9dcd84ec7a7579bb062ef4768810a9d4dc9c3ca2", "patch": "@@ -541,14 +541,110 @@ class Gcc_backend : public Backend\n   std::map<std::string, Bfunction*> builtin_functions_;\n };\n \n-// A helper function.\n+// A helper function to create a GCC identifier from a C++ string.\n \n static inline tree\n get_identifier_from_string(const std::string& str)\n {\n   return get_identifier_with_length(str.data(), str.length());\n }\n \n+// Return whether the character c is OK to use in the assembler.\n+\n+static bool\n+char_needs_encoding(char c)\n+{\n+  switch (c)\n+    {\n+    case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n+    case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':\n+    case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':\n+    case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':\n+    case 'Y': case 'Z':\n+    case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n+    case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':\n+    case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':\n+    case 's': case 't': case 'u': case 'v': case 'w': case 'x':\n+    case 'y': case 'z':\n+    case '0': case '1': case '2': case '3': case '4':\n+    case '5': case '6': case '7': case '8': case '9':\n+    case '_': case '.': case '$': case '/':\n+      return false;\n+    default:\n+      return true;\n+    }\n+}\n+\n+// Return whether the identifier needs to be translated because it\n+// contains non-ASCII characters.\n+\n+static bool\n+needs_encoding(const std::string& str)\n+{\n+  for (std::string::const_iterator p = str.begin();\n+       p != str.end();\n+       ++p)\n+    if (char_needs_encoding(*p))\n+      return true;\n+  return false;\n+}\n+\n+// Pull the next UTF-8 character out of P and store it in *PC.  Return\n+// the number of bytes read.\n+\n+static size_t\n+fetch_utf8_char(const char* p, unsigned int* pc)\n+{\n+  unsigned char c = *p;\n+  if ((c & 0x80) == 0)\n+    {\n+      *pc = c;\n+      return 1;\n+    }\n+  size_t len = 0;\n+  while ((c & 0x80) != 0)\n+    {\n+      ++len;\n+      c <<= 1;\n+    }\n+  unsigned int rc = *p & ((1 << (7 - len)) - 1);\n+  for (size_t i = 1; i < len; i++)\n+    {\n+      unsigned int u = p[i];\n+      rc <<= 6;\n+      rc |= u & 0x3f;\n+    }\n+  *pc = rc;\n+  return len;\n+}\n+\n+// Encode an identifier using ASCII characters.\n+\n+static std::string\n+encode_id(const std::string id)\n+{\n+  std::string ret;\n+  const char* p = id.c_str();\n+  const char* pend = p + id.length();\n+  while (p < pend)\n+    {\n+      unsigned int c;\n+      size_t len = fetch_utf8_char(p, &c);\n+      if (len == 1 && !char_needs_encoding(c))\n+\tret += c;\n+      else\n+\t{\n+\t  ret += \"$U\";\n+\t  char buf[30];\n+\t  snprintf(buf, sizeof buf, \"%x\", c);\n+\t  ret += buf;\n+\t  ret += \"$\";\n+\t}\n+      p += len;\n+    }\n+  return ret;\n+}\n+\n // Define the built-in functions that are exposed to GCCGo.\n \n Gcc_backend::Gcc_backend()\n@@ -2454,8 +2550,14 @@ Gcc_backend::global_variable(const std::string& package_name,\n       std::string asm_name(pkgpath);\n       asm_name.push_back('.');\n       asm_name.append(name);\n+      if (needs_encoding(asm_name))\n+\tasm_name = encode_id(asm_name);\n       SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(asm_name));\n     }\n+  else if (needs_encoding(var_name))\n+    SET_DECL_ASSEMBLER_NAME(decl,\n+\t\t\t    get_identifier_from_string(encode_id(var_name)));\n+\n   TREE_USED(decl) = 1;\n \n   if (in_unique_section)\n@@ -2690,6 +2792,8 @@ Gcc_backend::implicit_variable(const std::string& name, Btype* type,\n       SET_DECL_ALIGN(decl, alignment * BITS_PER_UNIT);\n       DECL_USER_ALIGN(decl) = 1;\n     }\n+  if (needs_encoding(name))\n+    SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(encode_id(name)));\n \n   go_preserve_from_gc(decl);\n   return new Bvariable(decl);\n@@ -2742,6 +2846,8 @@ Gcc_backend::implicit_variable_reference(const std::string& name, Btype* btype)\n   TREE_PUBLIC(decl) = 1;\n   TREE_STATIC(decl) = 1;\n   DECL_ARTIFICIAL(decl) = 1;\n+  if (needs_encoding(name))\n+    SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(encode_id(name)));\n   go_preserve_from_gc(decl);\n   return new Bvariable(decl);\n }\n@@ -2766,6 +2872,8 @@ Gcc_backend::immutable_struct(const std::string& name, bool is_hidden,\n   DECL_ARTIFICIAL(decl) = 1;\n   if (!is_hidden)\n     TREE_PUBLIC(decl) = 1;\n+  if (needs_encoding(name))\n+    SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(encode_id(name)));\n \n   // When the initializer for one immutable_struct refers to another,\n   // it needs to know the visibility of the referenced struct so that\n@@ -2840,6 +2948,8 @@ Gcc_backend::immutable_struct_reference(const std::string& name, Btype* btype,\n   DECL_ARTIFICIAL(decl) = 1;\n   TREE_PUBLIC(decl) = 1;\n   DECL_EXTERNAL(decl) = 1;\n+  if (needs_encoding(name))\n+    SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(encode_id(name)));\n   go_preserve_from_gc(decl);\n   return new Bvariable(decl);\n }\n@@ -2931,6 +3041,8 @@ Gcc_backend::function(Btype* fntype, const std::string& name,\n   tree decl = build_decl(location.gcc_location(), FUNCTION_DECL, id, functype);\n   if (!asm_name.empty())\n     SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(asm_name));\n+  else if (needs_encoding(name))\n+    SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(encode_id(name)));\n   if (is_visible)\n     TREE_PUBLIC(decl) = 1;\n   if (is_declaration)"}]}