{"sha": "1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2NWRjNTBlODQ5NzJlYTg4NGUwZWYwOWQxOTEwYmM3ZTY3ZTdiNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-09-28T08:58:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-09-28T08:58:35Z"}, "message": "[multiple changes]\n\n2004-09-28  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/16612\n\t* include/bits/basic_string.h (_M_dispose, _M_refcopy,\n\tbasic_string()): When _GLIBCXX_FULLY_DYNAMIC_STRING is defined,\n\tdon't deal with _S_empty_rep.\n\t* include/bits/basic_string.tcc (_S_construct, _M_destroy,\n\t_M_leak_hard, _M_mutate): Likewise.\n\t* acinclude.m4 (GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING): New.\n\t* acconfig.h: Add corresponding undef.\n\t* configure.ac: Use GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING.\n\t* docs/html/configopts.html: Document --enable-fully-dynamic-string.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\n2004-09-28  Benjamin Kosnik  <bkoz@redhat.com>\n            Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/21_strings/basic_string/operations/char/1.cc: New.\n\t* testsuite/21_strings/basic_string/operations/wchar_t/1.cc: New.\n\t* testsuite/21_strings/basic_string/element_access/char/empty.cc: New.\n\t* testsuite/21_strings/basic_string/element_access/wchar_t/empty.cc:\n\tNew.\n\n2004-09-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* README: Remove obsolete entry about include/c_shadow.\n\nFrom-SVN: r88225", "tree": {"sha": "fe9f9478f385cf8aab10cefbd3f478cef7e1fa0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe9f9478f385cf8aab10cefbd3f478cef7e1fa0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/comments", "author": null, "committer": null, "parents": [{"sha": "a3a0fc7f894bd9b82c23c78f5a1fbdae8bc3c04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a0fc7f894bd9b82c23c78f5a1fbdae8bc3c04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a0fc7f894bd9b82c23c78f5a1fbdae8bc3c04f"}], "stats": {"total": 315, "additions": 297, "deletions": 18}, "files": [{"sha": "e5dee830e8f33476b7da71cc5cb1ebe7cb7dde1a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -1,3 +1,31 @@\n+2004-09-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/16612\n+\t* include/bits/basic_string.h (_M_dispose, _M_refcopy,\n+\tbasic_string()): When _GLIBCXX_FULLY_DYNAMIC_STRING is defined,\n+\tdon't deal with _S_empty_rep.\n+\t* include/bits/basic_string.tcc (_S_construct, _M_destroy,\n+\t_M_leak_hard, _M_mutate): Likewise.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING): New.\n+\t* acconfig.h: Add corresponding undef. \t\n+\t* configure.ac: Use GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING.\n+\t* docs/html/configopts.html: Document --enable-fully-dynamic-string.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\n+2004-09-28  Benjamin Kosnik  <bkoz@redhat.com>\n+            Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/21_strings/basic_string/operations/char/1.cc: New.\n+\t* testsuite/21_strings/basic_string/operations/wchar_t/1.cc: New.\n+\t* testsuite/21_strings/basic_string/element_access/char/empty.cc: New.\n+\t* testsuite/21_strings/basic_string/element_access/wchar_t/empty.cc: \n+\tNew.\n+\n+2004-09-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* README: Remove obsolete entry about include/c_shadow.\n+\n 2004-09-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR libstdc++/17469"}, {"sha": "1064095fba74476de91a8625a45e9d0bd0e7854e", "filename": "libstdc++-v3/README", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FREADME?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -35,13 +35,6 @@ It has subdirectories:\n       names into the std:: namespace.\n       [NB: this is the default, and is the same as --enable-cheaders=c_std]\n \n-    include/c_shadow\n-      Headers intended to shadow standard C headers provided by an\n-      underlying OS or C library, and other headers depended on directly\n-      by C++ headers (e.g. unistd.h).  These are meant to wrap the names\n-      defined there into the _C_legacy namespace.\n-      [NB: this can be enabled via --enable-cheaders=c_shadow]\n-\n     include/bits\n       Files included by standard headers and by other files in\n       the bits directory. "}, {"sha": "cffecbd172fd21cf89f1fe0aaea4f32d9c9757db", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -45,6 +45,9 @@\n // Define if LFS support is available.\n #undef _GLIBCXX_USE_LFS\n \n+// Define if a fully dynamic basic_string is wanted.\n+#undef _GLIBCXX_FULLY_DYNAMIC_STRING\n+\n // Define if NLS translations are to be used.\n #undef _GLIBCXX_USE_NLS\n "}, {"sha": "6c9f13aa185208519bd439bc31b6815402bc3b0f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -593,6 +593,25 @@ AC_DEFUN([GLIBCXX_CHECK_LFS], [\n ])\n \n \n+dnl\n+dnl Check for whether a fully dynamic basic_string implementation should\n+dnl be turned on, that does not put empty objects in per-process static\n+dnl memory (mostly useful together with shared memory allocators, see PR\n+dnl libstdc++/16612 for details).\n+dnl\n+dnl --enable-fully-dynamic-string defines _GLIBCXX_FULLY_DYNAMIC_STRING\n+dnl --disable-fully-dynamic-string leaves _GLIBCXX_FULLY_DYNAMIC_STRING undefined\n+dnl  +  Usage:  GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING], [\n+  GLIBCXX_ENABLE(fully-dynamic-string,$1,,[do not put empty strings in per-process static memory])\n+  if test $enable_fully_dynamic_string = yes; then\n+    AC_DEFINE(_GLIBCXX_FULLY_DYNAMIC_STRING)\n+  fi\n+])\n+\n+\n dnl\n dnl Does any necessary configuration of the testsuite directory.  Generates\n dnl the testsuite_hooks.h header."}, {"sha": "acb7d732abc2951f7b318f3dea12f54e4d24a685", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -46,6 +46,9 @@\n // Define if LFS support is available.\n #undef _GLIBCXX_USE_LFS\n \n+// Define if a fully dynamic basic_string is wanted.\n+#undef _GLIBCXX_FULLY_DYNAMIC_STRING\n+\n // Define if NLS translations are to be used.\n #undef _GLIBCXX_USE_NLS\n "}, {"sha": "f19e56b5dd2ba392e5eeb383d69ad8a3a2f99648", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -884,6 +884,9 @@ Optional Features:\n   --enable-cxx-flags=FLAGS\n                           pass compiler FLAGS when building library\n                           [default=]\n+  --enable-fully-dynamic-string\n+                          do not put empty strings in per-process static\n+                          memory [default=no]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n   --enable-version-specific-runtime-libs\n@@ -4394,7 +4397,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4397 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4400 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -5015,7 +5018,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 5018 \"configure\"\n+#line 5021 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -7841,6 +7844,29 @@ echo \"${ECHO_T}$EXTRA_CXX_FLAGS\" >&6\n \n \n \n+   # Check whether --enable-fully-dynamic-string or --disable-fully-dynamic-string was given.\n+if test \"${enable_fully_dynamic_string+set}\" = set; then\n+  enableval=\"$enable_fully_dynamic_string\"\n+\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Argument to enable/disable fully-dynamic-string must be yes or no\" >&5\n+echo \"$as_me: error: Argument to enable/disable fully-dynamic-string must be yes or no\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+      esac\n+\n+else\n+  enable_fully_dynamic_string=no\n+fi;\n+\n+  if test $enable_fully_dynamic_string = yes; then\n+    cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_FULLY_DYNAMIC_STRING 1\n+_ACEOF\n+\n+  fi\n+\n+\n # No surprises, no surprises...\n if test $atomicity_dir = cpu/generic ; then\n   { echo \"$as_me:$LINENO: WARNING: No native atomic operations are provided for this platform.\" >&5"}, {"sha": "7c1d19361040b457a8ccc35d102e6ed4e1b776cf", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -94,6 +94,7 @@ GLIBCXX_ENABLE_CONCEPT_CHECKS([no])\n GLIBCXX_ENABLE_DEBUG_FLAGS([\"-g3 -O0\"])\n GLIBCXX_ENABLE_DEBUG([no])\n GLIBCXX_ENABLE_CXX_FLAGS\n+GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n \n # No surprises, no surprises...\n if test $atomicity_dir = cpu/generic ; then"}, {"sha": "2c84e969a05eb498836fa4e039d1dd7a8ca0a33c", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -144,9 +144,8 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n \n  <dt><code>--enable-cheaders=OPTION  </code></dt>\n  <dd><p>This allows the user to define what kind of C headers are\n-        used.  Options are: c, c_std, and c_shadow. These correspond\n-        to the source directory's include/c, include/c_std, and\n-        include/c_shadow directories.  The default is c_std.\n+        used.  Options are c and c_std.  These correspond to the source\n+\tdirectory's include/c and include/c_std.  The default is c_std.\n      </p>\n  </dd>\n \n@@ -261,6 +260,14 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n+ <dt><code>--enable-fully-dynamic-string  </code></dt>\n+ <dd><p>This option enables a special version of basic_string avoiding\n+        the optimization that allocates empty objects in static memory.\n+\tMostly useful together with shared memory allocators, see PR\n+\tlibstdc++/16612 for details.\n+     </p>\n+ </dd>\n+\n  <dt><code>--enable-concept-checks  </code></dt>\n  <dd><p>This turns on additional compile-time checks for instantiated\n         library templates, in the form of specialized templates,"}, {"sha": "1e79da4b4bde9ae2427e62ccef6cf63893933ada", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -211,7 +211,9 @@ namespace std\n \tvoid\n \t_M_dispose(const _Alloc& __a)\n \t{\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n+#endif\n \t    if (__gnu_cxx::__exchange_and_add(&this->_M_refcount, -1) <= 0)\n \t      _M_destroy(__a);\n \t}  // XXX MT\n@@ -222,7 +224,9 @@ namespace std\n \t_CharT*\n \t_M_refcopy() throw()\n \t{\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n+#endif\n             __gnu_cxx::__atomic_add(&this->_M_refcount, 1);\n \t  return _M_refdata();\n \t}  // XXX MT\n@@ -1957,11 +1961,14 @@ namespace std\n \t      size_type __n2) const;\n   };\n \n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     inline basic_string<_CharT, _Traits, _Alloc>::\n     basic_string()\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n     : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n+#else\n+    : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()) { }\n+#endif\n \n   // operator+\n   /**"}, {"sha": "49b6362e7904089df69c9988ce7c98528595ff5d", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -88,8 +88,10 @@ namespace std\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   input_iterator_tag)\n       {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \tif (__beg == __end && __a == _Alloc())\n \t  return _S_empty_rep()._M_refdata();\n+#endif\n \t// Avoid reallocation for common case.\n \t_CharT __buf[128];\n \tsize_type __len = 0;\n@@ -134,11 +136,12 @@ namespace std\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   forward_iterator_tag)\n       {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \tif (__beg == __end && __a == _Alloc())\n \t  return _S_empty_rep()._M_refdata();\n-\n+#endif\n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(__is_null_pointer(__beg), 0))\n+\tif (__builtin_expect(__is_null_pointer(__beg) && __beg != __end, 0))\n \t  __throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n \n \tconst size_type __dnew = static_cast<size_type>(std::distance(__beg,\n@@ -162,9 +165,10 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     _S_construct(size_type __n, _CharT __c, const _Alloc& __a)\n     {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n       if (__n == 0 && __a == _Alloc())\n \treturn _S_empty_rep()._M_refdata();\n-\n+#endif\n       // Check for out_of_range and length_error exceptions.\n       _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);\n       if (__n)\n@@ -358,8 +362,10 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::_Rep::\n     _M_destroy(const _Alloc& __a) throw ()\n     {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n       if (this == &_S_empty_rep())\n-        return;\n+\treturn;\n+#endif\n       const size_type __size = sizeof(_Rep_base) +\n \t                       (this->_M_capacity + 1) * sizeof(_CharT);\n       _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);\n@@ -369,8 +375,10 @@ namespace std\n     void\n     basic_string<_CharT, _Traits, _Alloc>::_M_leak_hard()\n     {\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n       if (_M_rep() == &_S_empty_rep())\n-        return;\n+\treturn;\n+#endif\n       if (_M_rep()->_M_is_shared())\n \t_M_mutate(0, 0, 0);\n       _M_rep()->_M_set_leaked();\n@@ -385,8 +393,12 @@ namespace std\n       const size_type __new_size = __old_size + __len2 - __len1;\n       const size_type __how_much = __old_size - __pos - __len1;\n \n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n       if (_M_rep() == &_S_empty_rep()\n \t  || _M_rep()->_M_is_shared() || __new_size > capacity())\n+#else\n+      if (_M_rep()->_M_is_shared() || __new_size > capacity())\n+#endif\n \t{\n \t  // Must reallocate.\n \t  const allocator_type __a = get_allocator();"}, {"sha": "37c9420bc1371201edc6149b559e9f1271e81c7b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/char/empty.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fchar%2Fempty.cc?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// as per 21.3.4\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  {\n+    std::string empty;\n+    char c = empty[0];\n+    VERIFY( c == char() );\n+  }\n+\n+  {\n+    const std::string empty;\n+    char c = empty[0];\n+    VERIFY( c == char() );\n+  }\n+  return 0;\n+}"}, {"sha": "b0391691dac748699439c47f23d5ffe5133607c4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/element_access/wchar_t/empty.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Felement_access%2Fwchar_t%2Fempty.cc?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// as per 21.3.4\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  {\n+    std::wstring empty;\n+    wchar_t c = empty[0];\n+    VERIFY( c == wchar_t() );\n+  }\n+\n+  {\n+    const std::wstring empty;\n+    wchar_t c = empty[0];\n+    VERIFY( c == wchar_t() );\n+  }\n+  return 0;\n+}"}, {"sha": "5194be7f5e2bc0a56418c899efa747dd6e004ee9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/char/1.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fchar%2F1.cc?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6 string operations\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::string empty;\n+\n+  // data() for size == 0 is non-NULL.\n+  VERIFY( empty.size() == 0 );\n+  const std::string::value_type* p = empty.data();\n+  VERIFY( p != NULL );\n+\n+  return 0;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "86374ccdf6adad5eff17ff0de26687b5e3197c0e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/operations/wchar_t/1.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1165dc50e84972ea884e0ef09d1910bc7e67e7b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Foperations%2Fwchar_t%2F1.cc?ref=1165dc50e84972ea884e0ef09d1910bc7e67e7b6", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.6 string operations\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int test01(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::wstring empty;\n+\n+  // data() for size == 0 is non-NULL.\n+  VERIFY( empty.size() == 0 );\n+  const std::wstring::value_type* p = empty.data();\n+  VERIFY( p != NULL );\n+\n+  return 0;\n+}\n+\n+int main()\n+{ \n+  test01();\n+  return 0;\n+}"}]}