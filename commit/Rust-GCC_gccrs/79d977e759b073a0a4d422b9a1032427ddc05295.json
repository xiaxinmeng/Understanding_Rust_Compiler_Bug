{"sha": "79d977e759b073a0a4d422b9a1032427ddc05295", "node_id": "C_kwDOANBUbNoAKDc5ZDk3N2U3NTliMDczYTBhNGQ0MjJiOWExMDMyNDI3ZGRjMDUyOTU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-25T11:21:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T11:21:26Z"}, "message": "Merge #1279\n\n1279: Implement type checking for the `IfLet` expression. r=philberty a=antego\n\nAddresses #1177.\r\n\r\nThis change implements the type check for the `IfLet` expression. This is the adapted type checking code from the `MatchExpr`.\r\n\r\nTested on this code\r\n```\r\nenum E {\r\n    X(u8),\r\n}\r\n\r\nfn main() -> i32 {\r\n    let mut res = 0;\r\n    let v = E::X(4);\r\n    if let E::X(n) = v {\r\n        res = n;\r\n    }\r\n\r\n    0\r\n}\r\n```\r\nCompilation finishes without errors.\r\n\r\nNext is the implementation of the code generation but I'll need help to find where it's located.\n\nCo-authored-by: antego <antego@users.noreply.github.com>", "tree": {"sha": "5241cceab618ab0bb6bfc00d344980f1aa87cf57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5241cceab618ab0bb6bfc00d344980f1aa87cf57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79d977e759b073a0a4d422b9a1032427ddc05295", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijhE2CRBK7hj4Ov3rIwAAb2IIAFPUaKRKvMy+UxrU2hdHUzDS\n3ZtxO7RfXk92LWzyDrmxf68C/71roc+h0RwSnvknE3q7sBu20Cy9KVxsvlCMfBmW\ni2R0/3e9nh+Qn893wcyMqnsWPwjpdhP0XM6kc7P9iS7AGB1c98xwtagPvfGitOtv\n/9K0xGBepr6GZDosMaHjhJzg8UVDmMejU96muxTYofzHenFHwCqGmKhF1jOusErd\nkCD81cELwx8htMznJxi4SN/vPSjBbbD6Bh0+5G596LxLEY9zKaG9w2Xm0busofyC\nSDtbjc7M69GSAz2JKWxFu5CIvGZrkZX9Y/nLB5FK9mv0DWqfZL+YLVg7tFv8VKw=\n=N6mu\n-----END PGP SIGNATURE-----\n", "payload": "tree 5241cceab618ab0bb6bfc00d344980f1aa87cf57\nparent d09b135116f2bd56fbab054a9a0122cc6b59e06e\nparent ec9a03a03b512e268dd31571df18e2c37e1ee372\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1653477686 +0000\ncommitter GitHub <noreply@github.com> 1653477686 +0000\n\nMerge #1279\n\n1279: Implement type checking for the `IfLet` expression. r=philberty a=antego\n\nAddresses #1177.\r\n\r\nThis change implements the type check for the `IfLet` expression. This is the adapted type checking code from the `MatchExpr`.\r\n\r\nTested on this code\r\n```\r\nenum E {\r\n    X(u8),\r\n}\r\n\r\nfn main() -> i32 {\r\n    let mut res = 0;\r\n    let v = E::X(4);\r\n    if let E::X(n) = v {\r\n        res = n;\r\n    }\r\n\r\n    0\r\n}\r\n```\r\nCompilation finishes without errors.\r\n\r\nNext is the implementation of the code generation but I'll need help to find where it's located.\n\nCo-authored-by: antego <antego@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d977e759b073a0a4d422b9a1032427ddc05295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d977e759b073a0a4d422b9a1032427ddc05295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d977e759b073a0a4d422b9a1032427ddc05295/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d09b135116f2bd56fbab054a9a0122cc6b59e06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09b135116f2bd56fbab054a9a0122cc6b59e06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09b135116f2bd56fbab054a9a0122cc6b59e06e"}, {"sha": "ec9a03a03b512e268dd31571df18e2c37e1ee372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9a03a03b512e268dd31571df18e2c37e1ee372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9a03a03b512e268dd31571df18e2c37e1ee372"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "789ad78ffa248e589279cd5473abe06b6cf8994f", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d977e759b073a0a4d422b9a1032427ddc05295/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d977e759b073a0a4d422b9a1032427ddc05295/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=79d977e759b073a0a4d422b9a1032427ddc05295", "patch": "@@ -3477,6 +3477,19 @@ class IfLetExpr : public ExprWithBlock\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRExpressionVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_scrutinee_expr ()\n+  {\n+    rust_assert (value != nullptr);\n+    return value;\n+  }\n+\n+  std::vector<std::unique_ptr<Pattern> > &get_patterns ()\n+  {\n+    return match_arm_patterns;\n+  }\n+\n+  BlockExpr *get_if_block () { return if_block.get (); }\n+\n   ExprType get_expression_type () const final override\n   {\n     return ExprType::IfLet;"}, {"sha": "411d45de41feb0f2e22a250f9e3210d053b0b787", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d977e759b073a0a4d422b9a1032427ddc05295/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d977e759b073a0a4d422b9a1032427ddc05295/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=79d977e759b073a0a4d422b9a1032427ddc05295", "patch": "@@ -703,6 +703,29 @@ class TypeCheckExpr : public TypeCheckBase\n       infered = if_blk_resolved->unify (else_blk_resolved);\n   }\n \n+  void visit (HIR::IfLetExpr &expr) override\n+  {\n+    // this needs to perform a least upper bound coercion on the blocks and then\n+    // unify the scruintee and arms\n+    TyTy::BaseType *scrutinee_tyty\n+      = TypeCheckExpr::Resolve (expr.get_scrutinee_expr ().get (), false);\n+\n+    for (auto &pattern : expr.get_patterns ())\n+      {\n+\tTyTy::BaseType *kase_arm_ty\n+\t  = TypeCheckPattern::Resolve (pattern.get (), scrutinee_tyty);\n+\n+\tTyTy::BaseType *checked_kase = scrutinee_tyty->unify (kase_arm_ty);\n+\tif (checked_kase->get_kind () == TyTy::TypeKind::ERROR)\n+\t  return;\n+      }\n+\n+    TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n+\n+    infered\n+      = TyTy::TupleType::get_unit_type (expr.get_mappings ().get_hirid ());\n+  }\n+\n   void visit (HIR::BlockExpr &expr) override;\n \n   void visit (HIR::UnsafeBlockExpr &expr) override"}]}