{"sha": "9dadeeb83c129bc14c56b09bb385f73b36119881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRhZGVlYjgzYzEyOWJjMTRjNTZiMDliYjM4NWY3M2IzNjExOTg4MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-02-26T18:48:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-02-26T18:48:34Z"}, "message": "alpha.h (alpha_expand_mov): Return false if force_const_mem returns NULL_RTX.\n\n\t* config/alpha/alpha.h (alpha_expand_mov): Return false if\n\tforce_const_mem returns NULL_RTX.\n\nFrom-SVN: r144450", "tree": {"sha": "d3db04a04ef8f2f601ab4012f0f8f02ffcfcfd54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3db04a04ef8f2f601ab4012f0f8f02ffcfcfd54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dadeeb83c129bc14c56b09bb385f73b36119881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dadeeb83c129bc14c56b09bb385f73b36119881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dadeeb83c129bc14c56b09bb385f73b36119881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dadeeb83c129bc14c56b09bb385f73b36119881/comments", "author": null, "committer": null, "parents": [{"sha": "489ec4e3bd232d184845a5b71322dfe18e65529f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489ec4e3bd232d184845a5b71322dfe18e65529f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489ec4e3bd232d184845a5b71322dfe18e65529f"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "9aef9cb0b8912989f08ed6dd44be31dfea48c078", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dadeeb83c129bc14c56b09bb385f73b36119881/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dadeeb83c129bc14c56b09bb385f73b36119881/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dadeeb83c129bc14c56b09bb385f73b36119881", "patch": "@@ -1,3 +1,8 @@\n+2009-02-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.h (alpha_expand_mov): Return false if\n+\tforce_const_mem returns NULL_RTX.\n+\n 2009-02-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/39241\n@@ -36,8 +41,7 @@\n 2009-02-24  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (Link Options): Document an easier way to pass\n-\toptions that take arguments to the GNU linker using -Xlinker and\n-\t-Wl.\n+\toptions that take arguments to the GNU linker using -Xlinker and -Wl.\n \n 2009-02-24  Steve Ellcey  <sje@cup.hp.com>\n \n@@ -74,20 +78,21 @@\n 2009-02-23  Jan Hubicka  <jh@suse.cz>\n \n \tPR c/12245\n-\t* ggc.h (htab_create_ggc): Use ggc_free to free hashtable when resizing.\n+\t* ggc.h (htab_create_ggc): Use ggc_free to free hashtable when\n+\tresizing.\n \n 2009-02-23  Jan Hubicka  <jh@suse.cz>\n \n-\tPR tree-optimization/37709                                              \n-\t* tree.c (block_ultimate_origin): Move here from dwarf2out.             \n-\t* tree.h (block_ultimate_origin): Declare.                              \n-\t* dwarf2out.c (block_ultimate_origin): Move to tree.c                   \n+\tPR tree-optimization/37709\n+\t* tree.c (block_ultimate_origin): Move here from dwarf2out.\n+\t* tree.h (block_ultimate_origin): Declare.\n+\t* dwarf2out.c (block_ultimate_origin): Move to tree.c\n \t* tree-ssa-live.c (remove_unused_scope_block_p):\n \tEliminate blocks containig no instructions nor live variables nor\n \tnested blocks.\n \t(dump_scope_block): New function.\n \t(remove_unused_locals): Enable removal of dead blocks by default;\n-\tenable dumping at TDF_DETAILS.                                          \n+\tenable dumping at TDF_DETAILS.\n \n 2009-02-21  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "0675916a230f4e74f501add86a0ec7a43ac2f068", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dadeeb83c129bc14c56b09bb385f73b36119881/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dadeeb83c129bc14c56b09bb385f73b36119881/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9dadeeb83c129bc14c56b09bb385f73b36119881", "patch": "@@ -2124,6 +2124,8 @@ alpha_split_const_mov (enum machine_mode mode, rtx *operands)\n bool\n alpha_expand_mov (enum machine_mode mode, rtx *operands)\n {\n+  rtx tmp;\n+\n   /* If the output is not a register, the input must be.  */\n   if (GET_CODE (operands[0]) == MEM\n       && ! reg_or_0_operand (operands[1], mode))\n@@ -2132,8 +2134,6 @@ alpha_expand_mov (enum machine_mode mode, rtx *operands)\n   /* Allow legitimize_address to perform some simplifications.  */\n   if (mode == Pmode && symbolic_operand (operands[1], mode))\n     {\n-      rtx tmp;\n-\n       tmp = alpha_legitimize_address (operands[1], operands[0], mode);\n       if (tmp)\n \t{\n@@ -2158,14 +2158,18 @@ alpha_expand_mov (enum machine_mode mode, rtx *operands)\n     }\n \n   /* Otherwise we've nothing left but to drop the thing to memory.  */\n-  operands[1] = force_const_mem (mode, operands[1]);\n+  tmp = force_const_mem (mode, operands[1]);\n+\n+  if (tmp == NULL_RTX)\n+    return false;\n+\n   if (reload_in_progress)\n     {\n-      emit_move_insn (operands[0], XEXP (operands[1], 0));\n-      operands[1] = replace_equiv_address (operands[1], operands[0]);\n+      emit_move_insn (operands[0], XEXP (tmp, 0));\n+      operands[1] = replace_equiv_address (tmp, operands[0]);\n     }\n   else\n-    operands[1] = validize_mem (operands[1]);\n+    operands[1] = validize_mem (tmp);\n   return false;\n }\n "}]}