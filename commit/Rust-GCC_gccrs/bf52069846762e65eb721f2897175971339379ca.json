{"sha": "bf52069846762e65eb721f2897175971339379ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1MjA2OTg0Njc2MmU2NWViNzIxZjI4OTcxNzU5NzEzMzkzNzljYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-10-15T18:33:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-10-15T18:33:23Z"}, "message": "rtl.texi (const_double): Remove the \"addr\" operand.\n\ngcc/\n\t* doc/rtl.texi (const_double): Remove the \"addr\" operand.\n\tDescribe CONST_DOUBLE_* macros under const_double rather\n\tthan const_vector.\n\t(const_fixed): Fix the operand description.\n\t(const): Add an @findex directive.\n\t(CONST0_RTX, CONST1_RTX, CONST2_RTX): Move description\n\tafter the constant rtl table.\n\t(fix): Combine floating-point and fixed-point descriptions.\n\tFix hyphenation.\n\t* sched-deps.c (sched_analyze_2): Remove reference to\n\tCONST_DOUBLE_CHAIN.\n\nFrom-SVN: r141149", "tree": {"sha": "ece0c0568358f34f2a2098461ab207b12d48c7f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece0c0568358f34f2a2098461ab207b12d48c7f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf52069846762e65eb721f2897175971339379ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf52069846762e65eb721f2897175971339379ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf52069846762e65eb721f2897175971339379ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf52069846762e65eb721f2897175971339379ca/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4e2d7d2d6149a1e4d3af82026c60eed95f17002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e2d7d2d6149a1e4d3af82026c60eed95f17002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e2d7d2d6149a1e4d3af82026c60eed95f17002"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "a899cd934e249fa8b9493557c7e4fc45508c349a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf52069846762e65eb721f2897175971339379ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf52069846762e65eb721f2897175971339379ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf52069846762e65eb721f2897175971339379ca", "patch": "@@ -1,3 +1,17 @@\n+2008-10-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/rtl.texi (const_double): Remove the \"addr\" operand.\n+\tDescribe CONST_DOUBLE_* macros under const_double rather\n+\tthan const_vector.\n+\t(const_fixed): Fix the operand description.\n+\t(const): Add an @findex directive.\n+\t(CONST0_RTX, CONST1_RTX, CONST2_RTX): Move description\n+\tafter the constant rtl table.\n+\t(fix): Combine floating-point and fixed-point descriptions.\n+\tFix hyphenation.\n+\t* sched-deps.c (sched_analyze_2): Remove reference to\n+\tCONST_DOUBLE_CHAIN.\n+\n 2008-10-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mn10300/mn10300.h (OUTPUT_ADDR_CONST_EXTRA): Handle"}, {"sha": "701e490ccef4ea7b1c56ba12fd28a26a7f9b242e", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 40, "deletions": 53, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf52069846762e65eb721f2897175971339379ca/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf52069846762e65eb721f2897175971339379ca/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=bf52069846762e65eb721f2897175971339379ca", "patch": "@@ -1507,21 +1507,33 @@ Similarly, there is only one object for the integer whose value is\n @code{constm1_rtx} will point to the same object.\n \n @findex const_double\n-@item (const_double:@var{m} @var{addr} @var{i0} @var{i1} @dots{})\n+@item (const_double:@var{m} @var{i0} @var{i1} @dots{})\n Represents either a floating-point constant of mode @var{m} or an\n integer constant too large to fit into @code{HOST_BITS_PER_WIDE_INT}\n bits but small enough to fit within twice that number of bits (GCC\n does not provide a mechanism to represent even larger constants).  In\n the latter case, @var{m} will be @code{VOIDmode}.\n \n+@findex CONST_DOUBLE_LOW\n+If @var{m} is @code{VOIDmode}, the bits of the value are stored in\n+@var{i0} and @var{i1}.  @var{i0} is customarily accessed with the macro\n+@code{CONST_DOUBLE_LOW} and @var{i1} with @code{CONST_DOUBLE_HIGH}.\n+\n+If the constant is floating point (regardless of its precision), then\n+the number of integers used to store the value depends on the size of\n+@code{REAL_VALUE_TYPE} (@pxref{Floating Point}).  The integers\n+represent a floating point number, but not precisely in the target\n+machine's or host machine's floating point format.  To convert them to\n+the precise bit pattern used by the target machine, use the macro\n+@code{REAL_VALUE_TO_TARGET_DOUBLE} and friends (@pxref{Data Output}).\n+\n @findex const_fixed\n-@item (const_fixed:@var{m} @var{addr})\n+@item (const_fixed:@var{m} @dots{})\n Represents a fixed-point constant of mode @var{m}.\n-The data structure, which contains data with the size of two\n-@code{HOST_BITS_PER_WIDE_INT} and the associated fixed-point mode,\n-is access with the macro @code{CONST_FIXED_VALUE}.  The high part of data\n-is accessed with @code{CONST_FIXED_VALUE_HIGH}; the low part is accessed\n-with @code{CONST_FIXED_VALUE_LOW}.\n+The operand is a data structure of type @code{struct fixed_value} and\n+is accessed with the macro @code{CONST_FIXED_VALUE}.  The high part of\n+data is accessed with @code{CONST_FIXED_VALUE_HIGH}; the low part is\n+accessed with @code{CONST_FIXED_VALUE_LOW}.\n \n @findex const_vector\n @item (const_vector:@var{m} [@var{x0} @var{x1} @dots{}])\n@@ -1537,44 +1549,6 @@ Individual elements in a vector constant are accessed with the macro\n where @var{v} is the vector constant and @var{n} is the element\n desired.\n \n-@findex CONST_DOUBLE_MEM\n-@findex CONST_DOUBLE_CHAIN\n-@var{addr} is used to contain the @code{mem} expression that corresponds\n-to the location in memory that at which the constant can be found.  If\n-it has not been allocated a memory location, but is on the chain of all\n-@code{const_double} expressions in this compilation (maintained using an\n-undisplayed field), @var{addr} contains @code{const0_rtx}.  If it is not\n-on the chain, @var{addr} contains @code{cc0_rtx}.  @var{addr} is\n-customarily accessed with the macro @code{CONST_DOUBLE_MEM} and the\n-chain field via @code{CONST_DOUBLE_CHAIN}.\n-\n-@findex CONST_DOUBLE_LOW\n-If @var{m} is @code{VOIDmode}, the bits of the value are stored in\n-@var{i0} and @var{i1}.  @var{i0} is customarily accessed with the macro\n-@code{CONST_DOUBLE_LOW} and @var{i1} with @code{CONST_DOUBLE_HIGH}.\n-\n-If the constant is floating point (regardless of its precision), then\n-the number of integers used to store the value depends on the size of\n-@code{REAL_VALUE_TYPE} (@pxref{Floating Point}).  The integers\n-represent a floating point number, but not precisely in the target\n-machine's or host machine's floating point format.  To convert them to\n-the precise bit pattern used by the target machine, use the macro\n-@code{REAL_VALUE_TO_TARGET_DOUBLE} and friends (@pxref{Data Output}).\n-\n-@findex CONST0_RTX\n-@findex CONST1_RTX\n-@findex CONST2_RTX\n-The macro @code{CONST0_RTX (@var{mode})} refers to an expression with\n-value 0 in mode @var{mode}.  If mode @var{mode} is of mode class\n-@code{MODE_INT}, it returns @code{const0_rtx}.  If mode @var{mode} is of\n-mode class @code{MODE_FLOAT}, it returns a @code{CONST_DOUBLE}\n-expression in mode @var{mode}.  Otherwise, it returns a\n-@code{CONST_VECTOR} expression in mode @var{mode}.  Similarly, the macro\n-@code{CONST1_RTX (@var{mode})} refers to an expression with value 1 in\n-mode @var{mode} and similarly for @code{CONST2_RTX}.  The\n-@code{CONST1_RTX} and @code{CONST2_RTX} macros are undefined\n-for vector modes.\n-\n @findex const_string\n @item (const_string @var{str})\n Represents a constant string with value @var{str}.  Currently this is\n@@ -1605,6 +1579,7 @@ references is so that jump optimization can distinguish them.\n The @code{label_ref} contains a mode, which is usually @code{Pmode}.\n Usually that is the only mode for which a label is directly valid.\n \n+@findex const\n @item (const:@var{m} @var{exp})\n Represents a constant that is the result of an assembly-time\n arithmetic computation.  The operand, @var{exp}, is an expression that\n@@ -1627,6 +1602,20 @@ reference a global memory location.\n @var{m} should be @code{Pmode}.\n @end table\n \n+@findex CONST0_RTX\n+@findex CONST1_RTX\n+@findex CONST2_RTX\n+The macro @code{CONST0_RTX (@var{mode})} refers to an expression with\n+value 0 in mode @var{mode}.  If mode @var{mode} is of mode class\n+@code{MODE_INT}, it returns @code{const0_rtx}.  If mode @var{mode} is of\n+mode class @code{MODE_FLOAT}, it returns a @code{CONST_DOUBLE}\n+expression in mode @var{mode}.  Otherwise, it returns a\n+@code{CONST_VECTOR} expression in mode @var{mode}.  Similarly, the macro\n+@code{CONST1_RTX (@var{mode})} refers to an expression with value 1 in\n+mode @var{mode} and similarly for @code{CONST2_RTX}.  The\n+@code{CONST1_RTX} and @code{CONST2_RTX} macros are undefined\n+for vector modes.\n+\n @node Regs and Memory\n @section Registers and Memory\n @cindex RTL register expressions\n@@ -2707,7 +2696,12 @@ regarded as unsigned, to floating point mode @var{m}.\n \n @findex fix\n @item (fix:@var{m} @var{x})\n-When @var{m} is a fixed point mode, represents the result of\n+When @var{m} is a floating-point mode, represents the result of\n+converting floating point value @var{x} (valid for mode @var{m}) to an\n+integer, still represented in floating point mode @var{m}, by rounding\n+towards zero.\n+\n+When @var{m} is a fixed-point mode, represents the result of\n converting floating point value @var{x} to mode @var{m}, regarded as\n signed.  How rounding is done is not specified, so this operation may\n be used validly in compiling C code only for integer-valued operands.\n@@ -2718,13 +2712,6 @@ Represents the result of converting floating point value @var{x} to\n fixed point mode @var{m}, regarded as unsigned.  How rounding is done\n is not specified.\n \n-@findex fix\n-@item (fix:@var{m} @var{x})\n-When @var{m} is a floating point mode, represents the result of\n-converting floating point value @var{x} (valid for mode @var{m}) to an\n-integer, still represented in floating point mode @var{m}, by rounding\n-towards zero.\n-\n @findex fract_convert\n @item (fract_convert:@var{m} @var{x})\n Represents the result of converting fixed-point value @var{x} to"}, {"sha": "81fcb80622807938592cab03be62f8de28433773", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf52069846762e65eb721f2897175971339379ca/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf52069846762e65eb721f2897175971339379ca/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=bf52069846762e65eb721f2897175971339379ca", "patch": "@@ -2008,10 +2008,7 @@ sched_analyze_2 (struct deps *deps, rtx x, rtx insn)\n     case SYMBOL_REF:\n     case CONST:\n     case LABEL_REF:\n-      /* Ignore constants.  Note that we must handle CONST_DOUBLE here\n-         because it may have a cc0_rtx in its CONST_DOUBLE_CHAIN field, but\n-         this does not mean that this insn is using cc0.  */\n-\n+      /* Ignore constants.  */\n       if (cslr_p && sched_deps_info->finish_rhs)\n \tsched_deps_info->finish_rhs ();\n "}]}