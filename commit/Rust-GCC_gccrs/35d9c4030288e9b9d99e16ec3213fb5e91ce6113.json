{"sha": "35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkOWM0MDMwMjg4ZTliOWQ5OWUxNmVjMzIxM2ZiNWU5MWNlNjExMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-03-14T17:58:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-03-14T17:58:48Z"}, "message": "re PR target/9700 ([alpha linux] va_start gets __offset wrong in some situations)\n\n        PR target/9700\n        * config/alpha/alpha.c (alpha_va_start): Account for\n        current_function_pretend_args_size in the AP offset.\n\n        * config/alpha/alpha.h (SETUP_INCOMING_VARARGS): Move out of line.\n        (INITIAL_ELIMINATION_OFFSET): Move out of line.\n        * config/alpha/alpha.c (alpha_setup_incoming_varargs): New.\n        (alpha_initial_elimination_offset) New.\n        * config/alpha/alpha-protos.h: Update.\n\n\t* gcc.c-torture/execute/va-arg-23.c: New.\n\nFrom-SVN: r64367", "tree": {"sha": "2749ae712f40efb3ba5f78e6b368d1778a0c0c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2749ae712f40efb3ba5f78e6b368d1778a0c0c4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/comments", "author": null, "committer": null, "parents": [{"sha": "f43f4314a1be5a27f1c7319fcefc48dfaf4dd99f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43f4314a1be5a27f1c7319fcefc48dfaf4dd99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43f4314a1be5a27f1c7319fcefc48dfaf4dd99f"}], "stats": {"total": 193, "additions": 125, "deletions": 68}, "files": [{"sha": "c3c9ada738178a974e9a594cc82bf0525f93b81f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "patch": "@@ -1,8 +1,21 @@\n+2003-03-14  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/9700\n+\t* config/alpha/alpha.c (alpha_va_start): Account for \n+\tcurrent_function_pretend_args_size in the AP offset.\n+\n+\t* config/alpha/alpha.h (SETUP_INCOMING_VARARGS): Move out of line.\n+\t(INITIAL_ELIMINATION_OFFSET): Move out of line.\n+\t* config/alpha/alpha.c (alpha_setup_incoming_varargs): New.\n+\t(alpha_initial_elimination_offset) New.\n+\t* config/alpha/alpha-protos.h: Update.\n+\n 2003-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* stmt.c (expand_start_case): Call emit_queue ().\n \n-2003-03-14  Chris Demetriou  <cgd@broadcom.com>, Alexandre Oliva  <aoliva@redhat.com>\n+2003-03-14  Chris Demetriou  <cgd@broadcom.com>\n+\t    Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/mips/mips.h (FUNCTION_PROFILER): _mcount() doesn't pop 2\n \twords in new abis."}, {"sha": "da3294dc2b4584ce8aad56d01f2fa40e1e75faa7", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "patch": "@@ -26,6 +26,8 @@ extern int zap_mask PARAMS ((HOST_WIDE_INT));\n extern int direct_return PARAMS ((void));\n \n extern int alpha_sa_size PARAMS ((void));\n+extern HOST_WIDE_INT alpha_initial_elimination_offset PARAMS ((unsigned int,\n+\t\t\t\t\t\t\t       unsigned int));\n extern int alpha_pv_save_size PARAMS ((void));\n extern int alpha_using_fp PARAMS ((void));\n extern void alpha_write_verstamp PARAMS ((FILE *));\n@@ -135,6 +137,8 @@ extern void alpha_initialize_trampoline PARAMS ((rtx, rtx, rtx, int, int, int));\n extern void alpha_reorg PARAMS ((rtx));\n \n extern tree alpha_build_va_list PARAMS ((void));\n+extern void alpha_setup_incoming_varargs\n+  PARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int *, int));\n extern void alpha_va_start PARAMS ((tree, rtx));\n extern rtx alpha_va_arg PARAMS ((tree, tree));\n extern rtx function_arg PARAMS ((CUMULATIVE_ARGS, enum machine_mode,"}, {"sha": "4feb2186bab3add9a5127263d15dc211941560f1", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 76, "deletions": 2, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "patch": "@@ -6558,6 +6558,53 @@ alpha_build_va_list ()\n   return record;\n }\n \n+/* Perform any needed actions needed for a function that is receiving a\n+   variable number of arguments. \n+\n+   On the Alpha, we allocate space for all 12 arg registers, but only\n+   push those that are remaining.  However, if NO registers need to be\n+   saved, don't allocate any space.  This is not only because we won't\n+   need the space, but because AP includes the current_pretend_args_size\n+   and we don't want to mess up any ap-relative addresses already made.\n+\n+   If we are not to use the floating-point registers, save the integer\n+   registers where we would put the floating-point registers.  This is\n+   not the most efficient way to implement varargs with just one register\n+   class, but it isn't worth doing anything more efficient in this rare\n+   case.  */\n+\n+void   \n+alpha_setup_incoming_varargs(cum, mode, type, pretend_size, no_rtl)\n+     CUMULATIVE_ARGS cum;\n+     enum machine_mode mode;\n+     tree type;\n+     int *pretend_size;\n+     int no_rtl;\n+{\n+  if (cum >= 6)\n+    return;\n+\n+  if (!no_rtl)\n+    {\n+      int set = get_varargs_alias_set ();\n+      rtx tmp;\n+\n+      tmp = gen_rtx_MEM (BLKmode,\n+\t\t         plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t        (cum + 6) * UNITS_PER_WORD));\n+      set_mem_alias_set (tmp, set);\n+      move_block_from_reg (16 + cum, tmp, 6 - cum, (6 - cum) * UNITS_PER_WORD);\n+\n+      tmp = gen_rtx_MEM (BLKmode,\n+\t\t         plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t        cum * UNITS_PER_WORD));\n+      set_mem_alias_set (tmp, set);\n+      move_block_from_reg (16 + (TARGET_FPREGS ? 32 : 0) + cum, tmp,\n+\t\t\t   6 - cum, (6 - cum) * UNITS_PER_WORD);\n+     }\n+  *pretend_size = 12 * UNITS_PER_WORD;\n+}\n+\n void\n alpha_va_start (valist, nextarg)\n      tree valist;\n@@ -6579,12 +6626,15 @@ alpha_va_start (valist, nextarg)\n \n      If no integer registers need be stored, then we must subtract 48\n      in order to account for the integer arg registers which are counted\n-     in argsize above, but which are not actually stored on the stack.  */\n+     in argsize above, but which are not actually stored on the stack.\n+     Must further be careful here about structures straddling the last\n+     integer argument register; that futzes with pretend_args_size, \n+     which changes the meaning of AP.  */\n \n   if (NUM_ARGS <= 6)\n     offset = TARGET_ABI_OPEN_VMS ? UNITS_PER_WORD : 6 * UNITS_PER_WORD;\n   else\n-    offset = -6 * UNITS_PER_WORD;\n+    offset = -6 * UNITS_PER_WORD + current_function_pretend_args_size;\n \n   if (TARGET_ABI_OPEN_VMS)\n     {\n@@ -7200,6 +7250,30 @@ alpha_sa_size ()\n   return sa_size * 8;\n }\n \n+/* Define the offset between two registers, one to be eliminated,\n+   and the other its replacement, at the start of a routine.  */\n+\n+HOST_WIDE_INT\n+alpha_initial_elimination_offset(from, to)\n+     unsigned int from, to;\n+{\n+  HOST_WIDE_INT ret;\n+\n+  ret = alpha_sa_size ();\n+  ret += ALPHA_ROUND (current_function_outgoing_args_size);\n+\n+  if (from == FRAME_POINTER_REGNUM)\n+    ;\n+  else if (from == ARG_POINTER_REGNUM)\n+    ret += (ALPHA_ROUND (get_frame_size ()\n+\t\t\t + current_function_pretend_args_size)\n+\t    - current_function_pretend_args_size);\n+  else\n+    abort ();\n+\n+  return ret;\n+}\n+\n int\n alpha_pv_save_size ()\n {"}, {"sha": "e20d3c8073608f6ac36511d78e967bdb7964363b", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 5, "deletions": 65, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "patch": "@@ -963,19 +963,8 @@ extern int alpha_memory_latency;\n \n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n-#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n-{ if ((FROM) == FRAME_POINTER_REGNUM)\t\t\t\t\t\\\n-    (OFFSET) = (ALPHA_ROUND (current_function_outgoing_args_size)\t\\\n-\t\t+ alpha_sa_size ());\t\t\t\t\t\\\n-  else if ((FROM) == ARG_POINTER_REGNUM)\t\t\t\t\\\n-    (OFFSET) = (ALPHA_ROUND (current_function_outgoing_args_size)\t\\\n-\t\t+ alpha_sa_size ()\t\t\t\t\t\\\n-\t\t+ (ALPHA_ROUND (get_frame_size ()\t\t\t\\\n-\t\t\t       + current_function_pretend_args_size)\t\\\n-\t\t   - current_function_pretend_args_size));\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    abort ();\t\t\t\t\t\t\t\t\\\n-}\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n+  ((OFFSET) = alpha_initial_elimination_offset(FROM, TO))\n \n /* Define this if stack space is still allocated for a parameter passed\n    in a register.  */\n@@ -1122,58 +1111,9 @@ extern int alpha_memory_latency;\n  ? 6 - (CUM) : 0)\n \n /* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments. \n-\n-   CUM is as above.\n-\n-   MODE and TYPE are the mode and type of the current parameter.\n-\n-   PRETEND_SIZE is a variable that should be set to the amount of stack\n-   that must be pushed by the prolog to pretend that our caller pushed\n-   it.\n-\n-   Normally, this macro will push all remaining incoming registers on the\n-   stack and set PRETEND_SIZE to the length of the registers pushed. \n-\n-   On the Alpha, we allocate space for all 12 arg registers, but only\n-   push those that are remaining.\n-\n-   However, if NO registers need to be saved, don't allocate any space.\n-   This is not only because we won't need the space, but because AP includes\n-   the current_pretend_args_size and we don't want to mess up any\n-   ap-relative addresses already made.\n-\n-   If we are not to use the floating-point registers, save the integer\n-   registers where we would put the floating-point registers.  This is\n-   not the most efficient way to implement varargs with just one register\n-   class, but it isn't worth doing anything more efficient in this rare\n-   case.  */\n-   \n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-{ if ((CUM) < 6)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (! (NO_RTL))\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  rtx tmp; int set = get_varargs_alias_set ();\t\t\t\\\n-\t  tmp = gen_rtx_MEM (BLKmode,\t\t\t\t\t\\\n-\t\t             plus_constant (virtual_incoming_args_rtx,\t\\\n-\t\t\t\t            ((CUM) + 6)* UNITS_PER_WORD)); \\\n-\t  set_mem_alias_set (tmp, set);\t\t\t\t\t\\\n-\t  move_block_from_reg\t\t\t\t\t\t\\\n-\t    (16 + CUM, tmp,\t\t\t\t\t\t\\\n-\t     6 - (CUM), (6 - (CUM)) * UNITS_PER_WORD);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  tmp = gen_rtx_MEM (BLKmode,\t\t\t\t\t\\\n-\t\t             plus_constant (virtual_incoming_args_rtx,\t\\\n-\t\t\t\t            (CUM) * UNITS_PER_WORD));\t\\\n-\t  set_mem_alias_set (tmp, set);\t\t\t\t\t\\\n-\t  move_block_from_reg\t\t\t\t\t\t\\\n-\t    (16 + (TARGET_FPREGS ? 32 : 0) + CUM, tmp,\t\t\t\\\n-\t     6 - (CUM), (6 - (CUM)) * UNITS_PER_WORD);\t\t\t\\\n-\t }\t\t\t\t\t\t\t\t\\\n-      PRETEND_SIZE = 12 * UNITS_PER_WORD;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n+   variable number of arguments.  */\n+#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL) \\\n+  alpha_setup_incoming_varargs(CUM,MODE,TYPE,&(PRETEND_SIZE),NO_RTL)\n \n /* Try to output insns to set TARGET equal to the constant C if it can be\n    done in less than N insns.  Do all computations in MODE.  Returns the place"}, {"sha": "89a11cf9f7357f470f0426f6ae5580fbec6f656f", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-23.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d9c4030288e9b9d99e16ec3213fb5e91ce6113/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-23.c?ref=35d9c4030288e9b9d99e16ec3213fb5e91ce6113", "patch": "@@ -0,0 +1,26 @@\n+/* PR 9700 */\n+/* Alpha got the base address for the va_list incorrect when there was\n+   a structure that was passed partially in registers and partially on\n+   the stack.  */\n+\n+#include <stdarg.h>\n+\n+struct two { long x, y; };\n+\n+void foo(int a, int b, int c, int d, int e, struct two f, int g, ...)\n+{\n+  va_list args;\n+  int h;\n+\n+  va_start(args, g);\n+  h = va_arg(args, int);\n+  if (g != 1 || h != 2)\n+    abort ();\n+}\n+\n+int main()\n+{\n+  struct two t = { 0, 0 };\n+  foo(0, 0, 0, 0, 0, t, 1, 2);\n+  return 0;\n+}"}]}