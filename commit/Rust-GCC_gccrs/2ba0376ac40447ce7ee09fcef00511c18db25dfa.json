{"sha": "2ba0376ac40447ce7ee09fcef00511c18db25dfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhMDM3NmFjNDA0NDdjZTdlZTA5ZmNlZjAwNTExYzE4ZGIyNWRmYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-10T15:26:32Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-10T15:26:32Z"}, "message": "gfortran: Fix in-build-tree testing [PR101305, PR101660]\n\nISO_Fortran_binding.h is written in the build dir - hence, a previous commit\nadded it as include directory for in-build-tree testing.  However,\nit turned out that -I$specdir/libgfortran interferes with reading .mod files\nas they are then no longer regareded as intrinsic modules.  Solution: Create\nan extra include/ directory in the libgfortran build dir and copy\nISO_Fortran_binding.h to that directory.  As -B$specdir/libgfortran already\ncauses gfortran to read that include subdirectory, the -I flag is no longer\nneeded.\n\n\tPR libfortran/101305\n\tPR fortran/101660\n\tPR testsuite/101847\n\nlibgfortran/ChangeLog:\n\n\t* Makefile.am (ISO_Fortran_binding.h): Create include/ in the build dir\n\tand copy the include file to it.\n\t(clean-local): Add for removing the 'include' directory.\n\t* Makefile.in: Regenerate.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/gfortran.exp (gfortran_init): Remove -I$specpath/libgfortran\n\tfrom the string used to set GFORTRAN_UNDER_TEST.", "tree": {"sha": "d225598b1425327a5f743877f00433ae6c3315f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d225598b1425327a5f743877f00433ae6c3315f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba0376ac40447ce7ee09fcef00511c18db25dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba0376ac40447ce7ee09fcef00511c18db25dfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba0376ac40447ce7ee09fcef00511c18db25dfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba0376ac40447ce7ee09fcef00511c18db25dfa/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557d06f8b3ddb54bca134695e117c40c6e2267ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557d06f8b3ddb54bca134695e117c40c6e2267ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557d06f8b3ddb54bca134695e117c40c6e2267ab"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "43f4d4eda17be757897969fc31c4854a5cad1311", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba0376ac40447ce7ee09fcef00511c18db25dfa/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba0376ac40447ce7ee09fcef00511c18db25dfa/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=2ba0376ac40447ce7ee09fcef00511c18db25dfa", "patch": "@@ -184,7 +184,7 @@ proc gfortran_init { args } {\n \t\t    set specpath [get_multilibs]\n \t\t}\n \t\tset gfortran_init_set_GFORTRAN_UNDER_TEST 1\n-\t\tset GFORTRAN_UNDER_TEST [findfile $base_dir/../../gfortran \"$base_dir/../../gfortran -B$base_dir/../../ -B$specpath/libgfortran/ -I$specpath/libgfortran\" [findfile $base_dir/gfortran \"$base_dir/gfortran -B$base_dir/\" [transform gfortran]]]\n+\t\tset GFORTRAN_UNDER_TEST [findfile $base_dir/../../gfortran \"$base_dir/../../gfortran -B$base_dir/../../ -B$specpath/libgfortran/\" [findfile $base_dir/gfortran \"$base_dir/gfortran -B$base_dir/\" [transform gfortran]]]\n \t    }\n \t}\n     }"}, {"sha": "8d104321567d4b151362a18e563a9c7a5a7cd5d4", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba0376ac40447ce7ee09fcef00511c18db25dfa/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba0376ac40447ce7ee09fcef00511c18db25dfa/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=2ba0376ac40447ce7ee09fcef00511c18db25dfa", "patch": "@@ -1076,6 +1076,9 @@ fpu-target.inc: fpu-target.h $(srcdir)/libgfortran.h\n \tgrep '^#define GFC_FPE_' < $(top_srcdir)/../gcc/fortran/libgfortran.h > $@ || true\n \tgrep '^#define GFC_FPE_' < $(srcdir)/libgfortran.h >> $@ || true\n \n+# Place ISO_Fortran_binding.h also under include/ in the build directory such\n+# that it can be used for in-built-tree testsuite runs without interference of\n+# other files in the build dir - like intrinsic .mod files or other .h files.\n ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n \t\t       $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n \t\t       $(srcdir)/ISO_Fortran_binding-3-tmpl.h \\\n@@ -1085,6 +1088,9 @@ ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n \t$(COMPILE) -E -dD $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n \t| grep '^#define CFI_type' >> $@\n \tcat $(srcdir)/ISO_Fortran_binding-3-tmpl.h >> $@\n+\t$(MKDIR_P) include\n+\t-rm -f include/ISO_Fortran_binding.h\n+\tcp $@ include/ISO_Fortran_binding.h\n \n ## A 'normal' build shouldn't need to regenerate these\n ## so we only include them in maintainer mode\n@@ -1245,6 +1251,9 @@ $(gfor_misc_specifics): m4/misc_specifics.m4 m4/head.m4\n ## end of maintainer mode only rules\n endif\n \n+clean-local:\n+\t-rm -rf include\n+\n EXTRA_DIST = $(m4_files)\n \n # target overrides"}, {"sha": "afe1ed17cb4dc9171091649263f8e8811a92d36e", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba0376ac40447ce7ee09fcef00511c18db25dfa/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba0376ac40447ce7ee09fcef00511c18db25dfa/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=2ba0376ac40447ce7ee09fcef00511c18db25dfa", "patch": "@@ -698,7 +698,6 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n-runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -7042,6 +7041,9 @@ fpu-target.inc: fpu-target.h $(srcdir)/libgfortran.h\n \tgrep '^#define GFC_FPE_' < $(top_srcdir)/../gcc/fortran/libgfortran.h > $@ || true\n \tgrep '^#define GFC_FPE_' < $(srcdir)/libgfortran.h >> $@ || true\n \n+# Place ISO_Fortran_binding.h also under include/ in the build directory such\n+# that it can be used for in-built-tree testsuite runs without interference of\n+# other files in the build dir - like intrinsic .mod files or other .h files.\n ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n \t\t       $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n \t\t       $(srcdir)/ISO_Fortran_binding-3-tmpl.h \\\n@@ -7051,6 +7053,9 @@ ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n \t$(COMPILE) -E -dD $(srcdir)/ISO_Fortran_binding-2-tmpl.h \\\n \t| grep '^#define CFI_type' >> $@\n \tcat $(srcdir)/ISO_Fortran_binding-3-tmpl.h >> $@\n+\t$(MKDIR_P) include\n+\t-rm -f include/ISO_Fortran_binding.h\n+\tcp $@ include/ISO_Fortran_binding.h\n \n @MAINTAINER_MODE_TRUE@$(i_all_c): m4/all.m4 $(I_M4_DEPS2)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 all.m4 > $@\n@@ -7205,6 +7210,9 @@ ISO_Fortran_binding.h: $(srcdir)/ISO_Fortran_binding-1-tmpl.h \\\n @MAINTAINER_MODE_TRUE@$(gfor_misc_specifics): m4/misc_specifics.m4 m4/head.m4\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 misc_specifics.m4 > $@\n \n+clean-local:\n+\t-rm -rf include\n+\n # target overrides\n -include $(tmake_file)\n "}]}