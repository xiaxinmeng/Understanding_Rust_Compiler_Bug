{"sha": "4e892de6774f86540d36385701aa7b0a2bba5155", "node_id": "C_kwDOANBUbNoAKDRlODkyZGU2Nzc0Zjg2NTQwZDM2Mzg1NzAxYWE3YjBhMmJiYTUxNTU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-13T06:52:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-13T07:55:56Z"}, "message": "tree-optimization/105250 - adjust fold_convertible_p PR105140 fix\n\nThe following reverts the original PR105140 fix and goes for instead\napplying the additional fold_convert constraint for VECTOR_TYPE\nconversions also to fold_convertible_p.  I did not try sanitizing\nall of this at this point.\n\n2022-04-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105250\n\t* fold-const.cc (fold_convertible_p): Revert\n\tr12-7979-geaaf77dd85c333, instead check for size equality\n\tof the vector types involved.\n\n\t* gcc.dg/pr105250.c: New testcase.", "tree": {"sha": "c8e6b7fbf70609f17d6b62b3053a3fa30fe41873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8e6b7fbf70609f17d6b62b3053a3fa30fe41873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e892de6774f86540d36385701aa7b0a2bba5155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e892de6774f86540d36385701aa7b0a2bba5155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e892de6774f86540d36385701aa7b0a2bba5155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e892de6774f86540d36385701aa7b0a2bba5155/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e609e0010c76d708097cbcf1c67fded6010a0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e609e0010c76d708097cbcf1c67fded6010a0e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e609e0010c76d708097cbcf1c67fded6010a0e0"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "a57ad0739fb02d63e65ff9fedf65fa9c4004f4fe", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e892de6774f86540d36385701aa7b0a2bba5155/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e892de6774f86540d36385701aa7b0a2bba5155/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=4e892de6774f86540d36385701aa7b0a2bba5155", "patch": "@@ -2379,13 +2379,12 @@ build_zero_vector (tree type)\n   return build_vector_from_val (type, t);\n }\n \n-/* Returns true, if ARG, an operand or a type, is convertible to TYPE\n-   using a NOP_EXPR.  */\n+/* Returns true, if ARG is convertible to TYPE using a NOP_EXPR.  */\n \n bool\n fold_convertible_p (const_tree type, const_tree arg)\n {\n-  const_tree orig = TYPE_P (arg) ? arg : TREE_TYPE (arg);\n+  const_tree orig = TREE_TYPE (arg);\n \n   if (type == orig)\n     return true;\n@@ -2417,7 +2416,7 @@ fold_convertible_p (const_tree type, const_tree arg)\n       return (VECTOR_TYPE_P (orig)\n \t      && known_eq (TYPE_VECTOR_SUBPARTS (type),\n \t\t\t   TYPE_VECTOR_SUBPARTS (orig))\n-\t      && fold_convertible_p (TREE_TYPE (type), TREE_TYPE (orig)));\n+\t      && tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (orig)));\n \n     default:\n       return false;"}, {"sha": "665dd95d8cbc085bcbc8ff64a4fad19165fa3dcc", "filename": "gcc/testsuite/gcc.dg/pr105250.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e892de6774f86540d36385701aa7b0a2bba5155/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105250.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e892de6774f86540d36385701aa7b0a2bba5155/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105250.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105250.c?ref=4e892de6774f86540d36385701aa7b0a2bba5155", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -Wno-psabi -O2\" } */\n+\n+typedef int __attribute__((__vector_size__(4))) T;\n+typedef int __attribute__((__vector_size__(8))) U;\n+typedef int __attribute__((__vector_size__(16))) V;\n+typedef int __attribute__((__vector_size__(32))) W;\n+typedef _Float32 __attribute__((__vector_size__(16))) F;\n+typedef _Float64 __attribute__((__vector_size__(32))) G;\n+void foo();\n+\n+foo(int, int, int, int, U, U, V, V, W, W, int,\n+     T, int, U, U, V, V, W, W, T,\n+     T, int, U, U, V, V, W, W, T,\n+     T, int, W, W, T, T, int, int, int,\n+     int, int, int, W, int, int, int, int, int, int,\n+     V, W, T, int, int, U, F, int, int, int,\n+     int, int, int, G)\n+{\n+  foo(0, 0, 0, 0, (U){}, (U){}, (V){}, (V){}, (W){},\n+       (W){}, 2, (T){}, 0, 0, 0, 0, (U){}, (U){},\n+       (V){}, (V){}, (W){}, (W){}, (T){},\n+       (T){}, 0, 0, 0, 0, (U){}, (U){}, (V){},\n+       (V){}, (W){}, (W){}, (T){}, (T){}, 0, 0, 0,\n+       0, 0, 0, (T){},\n+       (T){}, (W){},\n+       (W){}, (T){}, (T){}, 0, 0, 0, 0, 0, 0, (W){},\n+       (V){}, (W){}, (T){}, 0, 0, (U){}, (F){});\n+}"}]}