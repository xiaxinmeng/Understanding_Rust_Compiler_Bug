{"sha": "7222dcb2bb831b92c71e2a4db3d490525e78a4dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIyMmRjYjJiYjgzMWI5MmM3MWUyYTRkYjNkNDkwNTI1ZTc4YTRkZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:52:44Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:52:44Z"}, "message": "All toplevel items must respect the prefix for their path\n\nName resolution is split into two parts, one for the toplevel canonical\npaths and then a second to actually drill down into new scopes for blocks\nfor example.\n\nConsider a rust program:\n\n  ```rust\n  fn foo() -> bar { ... }\n  struct bar(..);\n  ```\n\nIn that example the function foo references bar which is declared later on.\nThe compiler is partly query based in that we use ids to get away from\nlooking up things via strings as quickly as possible.\n\nThe toplevel scan follows the rust documentation over on:\n\nThis assigns canonical names for all toplevel items but ignore the details\nlike return types, or body.\n\nSo the name resolver ends up with:\n\n::foo\n::bar\n\nThen we can drill down into foo and check the return type and see that\n::bar is already defined.\n\nThe prefix is important for the case of modules for example. This should\nbe a toplevel scan within the same scope.\n\nAddresses: #432", "tree": {"sha": "e887c933abe0d2793b501c4e5ab61811b7a0398b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e887c933abe0d2793b501c4e5ab61811b7a0398b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7222dcb2bb831b92c71e2a4db3d490525e78a4dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7222dcb2bb831b92c71e2a4db3d490525e78a4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7222dcb2bb831b92c71e2a4db3d490525e78a4dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7222dcb2bb831b92c71e2a4db3d490525e78a4dd/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f1d9ed87d3e870f8e64ea28ba3e6bc898502255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d9ed87d3e870f8e64ea28ba3e6bc898502255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1d9ed87d3e870f8e64ea28ba3e6bc898502255"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "6dbc8c93eb6c7f10782c39aef3e3b8970195144d", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7222dcb2bb831b92c71e2a4db3d490525e78a4dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7222dcb2bb831b92c71e2a4db3d490525e78a4dd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=7222dcb2bb831b92c71e2a4db3d490525e78a4dd", "patch": "@@ -41,9 +41,9 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::TypeAlias &alias) override\n   {\n+    auto path = prefix.append (CanonicalPath (alias.get_new_type_name ()));\n     resolver->get_type_scope ().insert (\n-      CanonicalPath (alias.get_new_type_name ()), alias.get_node_id (),\n-      alias.get_locus (), false,\n+      path, alias.get_node_id (), alias.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (alias.get_locus ());\n \tr.add_range (locus);\n@@ -53,9 +53,9 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::TupleStruct &struct_decl) override\n   {\n+    auto path = prefix.append (CanonicalPath (struct_decl.get_identifier ()));\n     resolver->get_type_scope ().insert (\n-      CanonicalPath (struct_decl.get_identifier ()), struct_decl.get_node_id (),\n-      struct_decl.get_locus (), false,\n+      path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (struct_decl.get_locus ());\n \tr.add_range (locus);\n@@ -65,9 +65,9 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::StructStruct &struct_decl) override\n   {\n+    auto path = prefix.append (CanonicalPath (struct_decl.get_identifier ()));\n     resolver->get_type_scope ().insert (\n-      CanonicalPath (struct_decl.get_identifier ()), struct_decl.get_node_id (),\n-      struct_decl.get_locus (), false,\n+      path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (struct_decl.get_locus ());\n \tr.add_range (locus);\n@@ -77,9 +77,9 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::StaticItem &var) override\n   {\n+    auto path = prefix.append (CanonicalPath (var.get_identifier ()));\n     resolver->get_name_scope ().insert (\n-      CanonicalPath (var.get_identifier ()), var.get_node_id (),\n-      var.get_locus (), false,\n+      path, var.get_node_id (), var.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (var.get_locus ());\n \tr.add_range (locus);"}]}