{"sha": "332d782c3d9ed810c76f2e3088545d61e0f3c37c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyZDc4MmMzZDllZDgxMGM3NmYyZTMwODg1NDVkNjFlMGYzYzM3Yw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-04-29T00:36:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-04-29T00:36:20Z"}, "message": "convert.c (convert_to_integer): Convert (long)round -> lround, etc.\n\n\t* convert.c (convert_to_integer): Convert (long)round -> lround,\n\tetc.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-convert-2.c: New test.\n\nFrom-SVN: r81269", "tree": {"sha": "7a4324b7bab245653a24dcc00c9d851e6f024d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a4324b7bab245653a24dcc00c9d851e6f024d22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/332d782c3d9ed810c76f2e3088545d61e0f3c37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332d782c3d9ed810c76f2e3088545d61e0f3c37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332d782c3d9ed810c76f2e3088545d61e0f3c37c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332d782c3d9ed810c76f2e3088545d61e0f3c37c/comments", "author": null, "committer": null, "parents": [{"sha": "b5bfe584032474c30356b7f570f14f25c299788b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bfe584032474c30356b7f570f14f25c299788b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bfe584032474c30356b7f570f14f25c299788b"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "e67e0f8477514b8bdbd51cf0dda8b1c3680010cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=332d782c3d9ed810c76f2e3088545d61e0f3c37c", "patch": "@@ -1,3 +1,8 @@\n+2004-04-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* convert.c (convert_to_integer): Convert (long)round -> lround,\n+\tetc.\n+\n 2004-04-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/rs6000/rs6000.c (registers_ok_for_quad_peep):"}, {"sha": "c7d12b502004adf61a22e38faab0663051175ccb", "filename": "gcc/convert.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=332d782c3d9ed810c76f2e3088545d61e0f3c37c", "patch": "@@ -332,6 +332,52 @@ convert_to_integer (tree type, tree expr)\n       return error_mark_node;\n     }\n \n+  /* Convert e.g. (long)round(d) -> lround(d).  */\n+  /* If we're converting to char, we may encounter differing behavior\n+     between converting from double->char vs double->long->char.\n+     We're in \"undefined\" territory but we prefer to be conservative,\n+     so only proceed in \"unsafe\" math mode.  */\n+  if (optimize\n+      && (flag_unsafe_math_optimizations\n+\t  || outprec >= TYPE_PRECISION (long_integer_type_node)))\n+    {\n+      tree s_expr = strip_float_extensions (expr);\n+      tree s_intype = TREE_TYPE (s_expr);\n+      const enum built_in_function fcode = builtin_mathfn_code (s_expr);\n+      tree fn = 0;\n+      \n+      switch (fcode)\n+        {\n+\tcase BUILT_IN_ROUND: case BUILT_IN_ROUNDF: case BUILT_IN_ROUNDL:\n+\t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LLROUND);\n+\t  else\n+\t    fn = mathfn_built_in (s_intype, BUILT_IN_LROUND);\n+\t  break;\n+\n+\tcase BUILT_IN_RINT: case BUILT_IN_RINTF: case BUILT_IN_RINTL:\n+\t  /* Only convert rint* if we can ignore math exceptions.  */\n+\t  if (flag_trapping_math)\n+\t    break;\n+\t  /* ... Fall through ...  */\n+\tcase BUILT_IN_NEARBYINT: case BUILT_IN_NEARBYINTF: case BUILT_IN_NEARBYINTL:\n+\t  if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (long_long_integer_type_node))\n+            fn = mathfn_built_in (s_intype, BUILT_IN_LLRINT);\n+\t  else\n+            fn = mathfn_built_in (s_intype, BUILT_IN_LRINT);\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      \n+      if (fn)\n+        {\n+\t  tree arglist = TREE_OPERAND (s_expr, 1);\n+\t  tree newexpr = build_function_call_expr (fn, arglist);\n+\t  return convert_to_integer (type, newexpr);\n+\t}\n+    }\n+\n   switch (TREE_CODE (intype))\n     {\n     case POINTER_TYPE:"}, {"sha": "718a92eb2dc6d8f0a9f35d2327e26876c0f067af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=332d782c3d9ed810c76f2e3088545d61e0f3c37c", "patch": "@@ -1,3 +1,7 @@\n+2004-04-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-convert-2.c: New test.\n+\n 2004-04-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/rs6000-power2-1.c: New test."}, {"sha": "62e5f0764fe1a5c0527d3598f1ee23e5772f2d62", "filename": "gcc/testsuite/gcc.dg/torture/builtin-convert-2.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332d782c3d9ed810c76f2e3088545d61e0f3c37c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c?ref=332d782c3d9ed810c76f2e3088545d61e0f3c37c", "patch": "@@ -0,0 +1,79 @@\n+/* Copyright (C) 2004  Free Software Foundation.\n+\n+   Verify that built-in math function conversion into integer rounding\n+   functions is correctly performed by the compiler.\n+\n+   Written by Kaveh ghazi, 2004-04-26.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-ffast-math\" } */\n+\n+#include \"./builtins-config.h\"\n+\n+#define PROTOTYPE(FN) extern double FN(double); \\\n+  extern float FN##f(float); \\\n+  extern long double FN##l(long double);\n+#define PROTOTYPE_RET(FN, RET) extern RET FN(double); \\\n+  extern RET FN##f(float); \\\n+  extern RET FN##l(long double);\n+\n+/* Macro to do all FP type combinations.  The second half tests\n+   narrowing the FP type.  */\n+#define TEST_FP2FIXED(FN1, FN2) \\\n+  PROTOTYPE(FN1) \\\n+  PROTOTYPE_RET(FN2, long) \\\n+  PROTOTYPE_RET(l##FN2, long long) \\\n+  extern void link_error_##FN1##_##FN2(void); \\\n+  extern void link_error_##FN1##f_##FN2##f(void); \\\n+  extern void link_error_##FN1##l_##FN2##l(void); \\\n+  extern void link_error_##FN1##_l##FN2(void); \\\n+  extern void link_error_##FN1##f_l##FN2##f(void); \\\n+  extern void link_error_##FN1##l_l##FN2##l(void); \\\n+  if ((long)FN1(d) != FN2(d)) \\\n+    link_error_##FN1##_##FN2(); \\\n+  if ((long)FN1##f(f) != FN2##f(f)) \\\n+    link_error_##FN1##f_##FN2##f(); \\\n+  if ((long)FN1##l(ld) != FN2##l(ld)) \\\n+    link_error_##FN1##l_##FN2##l(); \\\n+  if ((long long)FN1(d) != l##FN2(d)) \\\n+    link_error_##FN1##_l##FN2(); \\\n+  if ((long long)FN1##f(f) != l##FN2##f(f)) \\\n+    link_error_##FN1##f_l##FN2##f(); \\\n+  if ((long long)FN1##l(ld) != l##FN2##l(ld)) \\\n+    link_error_##FN1##l_l##FN2##l(); \\\n+  extern void link_error_##FN1##_##FN2##f(void); \\\n+  extern void link_error_##FN1##l_##FN2(void); \\\n+  extern void link_error_##FN1##l_##FN2##f(void); \\\n+  extern void link_error_##FN1##_l##FN2##f(void); \\\n+  extern void link_error_##FN1##l_l##FN2(void); \\\n+  extern void link_error_##FN1##l_l##FN2##f(void); \\\n+  if (sizeof(double) > sizeof(float) && (long)FN1(f) != FN2##f(f)) \\\n+    link_error_##FN1##_##FN2##f(); \\\n+  if (sizeof(long double) > sizeof(double) && (long)FN1##l(d) != FN2(d)) \\\n+    link_error_##FN1##l_##FN2(); \\\n+  if (sizeof(long double) > sizeof(float) && (long)FN1##l(f) != FN2##f(f)) \\\n+    link_error_##FN1##l_##FN2##f(); \\\n+  if (sizeof(double) > sizeof(float) && (long long)FN1(f) != l##FN2##f(f)) \\\n+    link_error_##FN1##_l##FN2##f(); \\\n+  if (sizeof(long double) > sizeof(double) && (long long)FN1##l(d) != l##FN2(d)) \\\n+    link_error_##FN1##l_l##FN2(); \\\n+  if (sizeof(long double) > sizeof(float) && (long long)FN1##l(f) != l##FN2##f(f)) \\\n+    link_error_##FN1##l_l##FN2##f()\n+\n+void __attribute__ ((__noinline__)) foo (double d, float f, long double ld)\n+{\n+#ifdef __OPTIMIZE__\n+# ifdef HAVE_C99_RUNTIME\n+  /* The resulting transformation functions are all C99.  */\n+  TEST_FP2FIXED (round, lround);\n+  TEST_FP2FIXED (nearbyint, lrint);\n+  TEST_FP2FIXED (rint, lrint);\n+# endif\n+#endif\n+}\n+\n+int main()\n+{\n+  foo (1.0, 2.0, 3.0);\n+  return 0;\n+}"}]}