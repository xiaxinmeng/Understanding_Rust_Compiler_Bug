{"sha": "d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkMDU4YzU4YTAyMjQxYzYzZTZjM2NjMDA5OWJjNWQ3ZjY4YTE1Mw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-06T01:39:32Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-06T01:39:32Z"}, "message": "don't use TYPE_ARG_TYPES in the Ada frontend\n\ndon't use TYPE_ARG_TYPES in the Ada frontend\n\t* gcc-interface/decl.c (intrin_arglists_compatible_p): Use iterators\n\tinstead of accessing TYPE_ARG_TYPES directly.\n\t* gcc-interface/utils.c (handle_nonnull_attribute): Likewise.\n\nFrom-SVN: r173466", "tree": {"sha": "d0e3b28d94d444177d67f138a799899a7a7ffe5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0e3b28d94d444177d67f138a799899a7a7ffe5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d058c58a02241c63e6c3cc0099bc5d7f68a153/comments", "author": null, "committer": null, "parents": [{"sha": "6174da1b28176c4879ec55581325b4648fc72096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6174da1b28176c4879ec55581325b4648fc72096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6174da1b28176c4879ec55581325b4648fc72096"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "922460c27c3b23e89d57eb8ae74a413db57a356e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d058c58a02241c63e6c3cc0099bc5d7f68a153/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d058c58a02241c63e6c3cc0099bc5d7f68a153/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "patch": "@@ -1,3 +1,9 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc-interface/decl.c (intrin_arglists_compatible_p): Use iterators\n+\tinstead of accessing TYPE_ARG_TYPES directly.\n+\t* gcc-interface/utils.c (handle_nonnull_attribute): Likewise.\n+\n 2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/48844"}, {"sha": "e014d04352624bc4ac881afbcc6a1d05b7520db0", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d058c58a02241c63e6c3cc0099bc5d7f68a153/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d058c58a02241c63e6c3cc0099bc5d7f68a153/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "patch": "@@ -8330,23 +8330,27 @@ intrin_types_incompatible_p (tree t1, tree t2)\n static bool\n intrin_arglists_compatible_p (intrin_binding_t * inb)\n {\n-  tree ada_args = TYPE_ARG_TYPES (inb->ada_fntype);\n-  tree btin_args = TYPE_ARG_TYPES (inb->btin_fntype);\n+  function_args_iterator ada_iter, btin_iter;\n+\n+  function_args_iter_init (&ada_iter, inb->ada_fntype);\n+  function_args_iter_init (&btin_iter, inb->btin_fntype);\n \n   /* Sequence position of the last argument we checked.  */\n   int argpos = 0;\n \n-  while (ada_args != 0 || btin_args != 0)\n+  while (1)\n     {\n-      tree ada_type, btin_type;\n+      tree ada_type = function_args_iter_cond (&ada_iter);\n+      tree btin_type = function_args_iter_cond (&btin_iter);\n+\n+      /* If we've exhausted both lists simultaneously, we're done.  */\n+      if (ada_type == NULL_TREE && btin_type == NULL_TREE)\n+\tbreak;\n \n       /* If one list is shorter than the other, they fail to match.  */\n-      if (ada_args == 0 || btin_args == 0)\n+      if (ada_type == NULL_TREE || btin_type == NULL_TREE)\n \treturn false;\n \n-      ada_type = TREE_VALUE (ada_args);\n-      btin_type = TREE_VALUE (btin_args);\n-\n       /* If we're done with the Ada args and not with the internal builtin\n \t args, or the other way around, complain.  */\n       if (ada_type == void_type_node\n@@ -8373,8 +8377,9 @@ intrin_arglists_compatible_p (intrin_binding_t * inb)\n \t  return false;\n \t}\n \n-      ada_args = TREE_CHAIN (ada_args);\n-      btin_args = TREE_CHAIN (btin_args);\n+      \n+      function_args_iter_next (&ada_iter);\n+      function_args_iter_next (&btin_iter);\n     }\n \n   return true;"}, {"sha": "1703a8b89a8b877563c63340d104b31fbd2884d8", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d058c58a02241c63e6c3cc0099bc5d7f68a153/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d058c58a02241c63e6c3cc0099bc5d7f68a153/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "patch": "@@ -5210,7 +5210,6 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n      a pointer argument.  */\n   for (attr_arg_num = 1; args; args = TREE_CHAIN (args))\n     {\n-      tree argument;\n       unsigned HOST_WIDE_INT arg_num = 0, ck_num;\n \n       if (!get_nonnull_operand (TREE_VALUE (args), &arg_num))\n@@ -5221,18 +5220,21 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \t  return NULL_TREE;\n \t}\n \n-      argument = TYPE_ARG_TYPES (type);\n-      if (argument)\n+      if (prototype_p (type))\n \t{\n-\t  for (ck_num = 1; ; ck_num++)\n+\t  function_args_iterator iter;\n+\t  tree argument;\n+\n+\t  function_args_iter_init (&iter, type);\n+\t  for (ck_num = 1; ; ck_num++, function_args_iter_next (&iter))\n \t    {\n+\t      argument = function_args_iter_cond (&iter);\n \t      if (!argument || ck_num == arg_num)\n \t\tbreak;\n-\t      argument = TREE_CHAIN (argument);\n \t    }\n \n \t  if (!argument\n-\t      || TREE_CODE (TREE_VALUE (argument)) == VOID_TYPE)\n+\t      || TREE_CODE (argument) == VOID_TYPE)\n \t    {\n \t      error (\"nonnull argument with out-of-range operand number \"\n \t\t     \"(argument %lu, operand %lu)\",\n@@ -5241,7 +5243,7 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \t      return NULL_TREE;\n \t    }\n \n-\t  if (TREE_CODE (TREE_VALUE (argument)) != POINTER_TYPE)\n+\t  if (TREE_CODE (argument) != POINTER_TYPE)\n \t    {\n \t      error (\"nonnull argument references non-pointer operand \"\n \t\t     \"(argument %lu, operand %lu)\","}]}