{"sha": "e1bb1accc1c3aeb59741c837b27b3712f56c164d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiYjFhY2NjMWMzYWViNTk3NDFjODM3YjI3YjM3MTJmNTZjMTY0ZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-11-02T16:29:50Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-11-02T16:29:50Z"}, "message": "re PR tree-optimization/50672 (ice: verify_ssa failed: no immediate_use list)\n\n2011-11-02  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/50672\n\t* g++.dg/pr50672.C: New test.\n\nFrom-SVN: r180779", "tree": {"sha": "fa1946f9ae5d477bb65f79e48bcd5e96e96b5a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa1946f9ae5d477bb65f79e48bcd5e96e96b5a2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1bb1accc1c3aeb59741c837b27b3712f56c164d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bb1accc1c3aeb59741c837b27b3712f56c164d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1bb1accc1c3aeb59741c837b27b3712f56c164d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bb1accc1c3aeb59741c837b27b3712f56c164d/comments", "author": null, "committer": null, "parents": [{"sha": "2009150b2a8c607d69b4d534d97a7f7734dd88f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2009150b2a8c607d69b4d534d97a7f7734dd88f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2009150b2a8c607d69b4d534d97a7f7734dd88f3"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "cbb10dab60468e394719c75a743cc743424e9364", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bb1accc1c3aeb59741c837b27b3712f56c164d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bb1accc1c3aeb59741c837b27b3712f56c164d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1bb1accc1c3aeb59741c837b27b3712f56c164d", "patch": "@@ -1,3 +1,8 @@\n+2011-11-02  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/50672\n+\t* g++.dg/pr50672.C: New test.\n+\n 2011-11-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/avx-cvt-2.c (dg-options): Add -mtune=generic."}, {"sha": "fb310082edc92eb8c5a9f36024672d5ba370c92a", "filename": "gcc/testsuite/g++.dg/pr50672.C", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1bb1accc1c3aeb59741c837b27b3712f56c164d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr50672.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1bb1accc1c3aeb59741c837b27b3712f56c164d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr50672.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr50672.C?ref=e1bb1accc1c3aeb59741c837b27b3712f56c164d", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-tail-merge\" } */\n+typedef int BoxCoordinate;\n+typedef int BoxDimension;\n+const BoxDimension X = 0;\n+const BoxDimension Y = 1;\n+const BoxDimension NDimensions = 2;\n+class BoxPoint {\n+    BoxCoordinate point[NDimensions];\n+public:\n+    bool isValid() const;\n+    void operator += (const BoxPoint& p)     {\n+        if (isValid() && p.isValid())  {\n+            point[X] += p.point[X];\n+        }\n+    }\n+    const BoxCoordinate& operator [] (const BoxDimension& dimension) const {\n+        return point[dimension];\n+    }\n+};\n+class BoxRegion {\n+public:\n+    BoxCoordinate& origin(BoxDimension d) const;\n+    BoxCoordinate& space(BoxDimension d) const;\n+};\n+inline bool operator <= (const BoxPoint& p, const BoxRegion& r) {\n+    for (BoxDimension d = X;\n+         d <= Y;\n+         d++)  if (p[d] < r.origin(d) || p[d] >= r.origin(d) + r.space(d))     \n+return false;\n+    return true;\n+}\n+typedef struct _WidgetRec *Widget;\n+struct GraphGC {\n+    BoxPoint offsetIfSelected;\n+};\n+class GraphNode;\n+class GraphEdge {\n+public:\n+    GraphNode *from() const;\n+    GraphNode *to() const;\n+};\n+class LineGraphEdge: public GraphEdge {\n+protected:\n+    virtual void drawLine(Widget w,      const GraphGC& gc) const;\n+    void _print(const GraphGC &gc) const;\n+};\n+class ArcGraphEdge: public LineGraphEdge {\n+    static bool center(const BoxPoint& p1, const BoxPoint& p2,\n+                       const BoxPoint& p3, double& x, double& y);\n+    void makeLine(Widget w,     const GraphGC& gc) const;\n+};\n+class GraphNode {\n+public:\n+    bool& selected();\n+    GraphEdge *firstTo() const;\n+    GraphEdge *nextTo(GraphEdge *ref) const;\n+    virtual const BoxPoint& pos() const = 0;\n+    virtual const BoxRegion& region(const GraphGC& gc) const = 0;\n+    virtual bool isHint() const;\n+};\n+class PosGraphNode: public GraphNode { };\n+class RegionGraphNode: public PosGraphNode { };\n+class HintGraphNode: public RegionGraphNode { };\n+void ArcGraphEdge::makeLine(Widget w, const GraphGC& gc) const {\n+    HintGraphNode *arc_hint = 0;\n+    RegionGraphNode *arc_from = 0;\n+    RegionGraphNode *arc_to = 0;\n+    bool make_arc = true;\n+    if (from()->isHint() && to()->isHint())     {\n+        make_arc = false;\n+    }\n+    else if (from()->isHint() && from()->firstTo() != 0)     {\n+        if (arc_hint == 0 || arc_from == 0 || arc_to == 0\n+            || arc_hint->nextTo(arc_hint->firstTo()) != 0)  {\n+            make_arc = false;\n+        }\n+    }\n+    if (!make_arc)     {\n+        if (w != 0)      LineGraphEdge::drawLine(w, gc);\n+        else      LineGraphEdge::_print(gc);\n+        return;\n+    }\n+    BoxPoint pos_from = arc_from->pos();\n+    BoxRegion region_from = arc_from->region(gc);\n+    BoxPoint pos_to = arc_to->pos();\n+    BoxRegion region_to = arc_to->region(gc);\n+    BoxPoint pos_hint = arc_hint->pos();\n+    if (arc_hint->selected())     {\n+        pos_hint += gc.offsetIfSelected;\n+    }\n+    if (pos_hint <= region_from || pos_hint <= region_to)     {\n+        return;\n+    }\n+    double cx, cy;\n+    bool ok = center(pos_from, pos_hint, pos_to, cx, cy);\n+    if (!ok)     {\n+        if (w != 0)      LineGraphEdge::drawLine(w, gc);\n+        else      LineGraphEdge::_print(gc);\n+    }\n+}"}]}