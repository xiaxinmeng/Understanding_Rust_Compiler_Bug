{"sha": "14f1ec15bd8860dee913a2207f598baddf13ae94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmMWVjMTViZDg4NjBkZWU5MTNhMjIwN2Y1OThiYWRkZjEzYWU5NA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-03-26T07:37:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:37:35Z"}, "message": "errout.ads: Document new !! insertion sequence\n\n2008-03-26  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads: Document new !! insertion sequence\n\n\t* errout.adb (N_Pragma): Chars field removed, use Chars\n\t(Pragma_Identifier (..  instead.\n\tReplace use of Warnings_Off by Has_Warnings_Off\n\t(Error_Msg_Internal): Don't delete warning ending in !!\n\nFrom-SVN: r133556", "tree": {"sha": "d6dba0885307ffe483d5ac8545955b2b1195bd79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6dba0885307ffe483d5ac8545955b2b1195bd79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f1ec15bd8860dee913a2207f598baddf13ae94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f1ec15bd8860dee913a2207f598baddf13ae94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f1ec15bd8860dee913a2207f598baddf13ae94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f1ec15bd8860dee913a2207f598baddf13ae94/comments", "author": null, "committer": null, "parents": [{"sha": "0f282086c18a3eabf433ca741cc351999ea26b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f282086c18a3eabf433ca741cc351999ea26b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f282086c18a3eabf433ca741cc351999ea26b78"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "106af0aa5ca337cdbe9b8fc5531a3ad814112a63", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f1ec15bd8860dee913a2207f598baddf13ae94/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f1ec15bd8860dee913a2207f598baddf13ae94/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=14f1ec15bd8860dee913a2207f598baddf13ae94", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -766,6 +766,11 @@ package body Errout is\n          elsif Debug_Flag_GG then\n             null;\n \n+         --  Keep warning if message text ends in !!\n+\n+         elsif Msg (Msg'Last) = '!' and then Msg (Msg'Last - 1) = '!' then\n+            null;\n+\n          --  Here is where we delete a warning from a with'ed unit\n \n          else\n@@ -1364,12 +1369,12 @@ package body Errout is\n       if Error_Posted (N) then\n          return True;\n \n-      elsif Nkind (N) in N_Entity and then Warnings_Off (N) then\n+      elsif Nkind (N) in N_Entity and then Has_Warnings_Off (N) then\n          return True;\n \n       elsif Is_Entity_Name (N)\n         and then Present (Entity (N))\n-        and then Warnings_Off (Entity (N))\n+        and then Has_Warnings_Off (Entity (N))\n       then\n          return True;\n \n@@ -2392,14 +2397,17 @@ package body Errout is\n       end if;\n \n       --  The only remaining possibilities are identifiers, defining\n-      --  identifiers, pragmas, and pragma argument associations, i.e.\n-      --  nodes that have a Chars field.\n+      --  identifiers, pragmas, and pragma argument associations.\n \n-      --  Internal names generally represent something gone wrong. An exception\n-      --  is the case of internal type names, where we try to find a reasonable\n-      --  external representation for the external name\n+      if Nkind (Node) = N_Pragma then\n+         Nam := Pragma_Name (Node);\n \n-      if Is_Internal_Name (Chars (Node))\n+      --  The other cases have Chars fields, and we want to test for possible\n+      --  internal names, which generally represent something gone wrong. An\n+      --  exception is the case of internal type names, where we try to find a\n+      --  reasonable external representation for the external name\n+\n+      elsif Is_Internal_Name (Chars (Node))\n         and then\n           ((Is_Entity_Name (Node)\n                           and then Present (Entity (Node))\n@@ -2423,6 +2431,8 @@ package body Errout is\n             Nam := Chars (Ent);\n          end if;\n \n+      --  If not internal name, just use name in Chars field\n+\n       else\n          Nam := Chars (Node);\n       end if;"}, {"sha": "b9b0616fe1c47286ebff45dad141fa0e9c85517f", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f1ec15bd8860dee913a2207f598baddf13ae94/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f1ec15bd8860dee913a2207f598baddf13ae94/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=14f1ec15bd8860dee913a2207f598baddf13ae94", "patch": "@@ -120,7 +120,8 @@ package Errout is\n    --        reference to the Any_Type node, then the message is suppressed.\n \n    --    6.  Note that cases 2-5 only apply to error messages, not warning\n-   --        messages. Warning messages are only suppressed for case 1.\n+   --        messages. Warning messages are only suppressed for case 1, and\n+   --        when they come from other than the main extended unit.\n \n    --  This normal suppression action may be overridden in cases 2-5 (but not\n    --  in case 1) by setting All_Errors mode, or by setting the special\n@@ -264,6 +265,13 @@ package Errout is\n    --      it, since it makes it clear that the continuation is part of an\n    --      unconditional message.\n \n+   --    Insertion character !! (unconditional warning)\n+\n+   --      Normally warning messages issued in other than the main unit are\n+   --      suppressed. If the message ends with !! then this suppression is\n+   --      avoided. This is currently only used by the Compile_Time_Warning\n+   --      pragma to ensure the message for a with'ed unit is output.\n+\n    --    Insertion character ? (Question: warning message)\n    --      The character ? appearing anywhere in a message makes the message\n    --      warning instead of a normal error message, and the text of the"}]}