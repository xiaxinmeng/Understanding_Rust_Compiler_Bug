{"sha": "faabc751d0bb7e7fe86abfe8991b0307d585874a", "node_id": "C_kwDOANBUbNoAKGZhYWJjNzUxZDBiYjdlN2ZlODZhYmZlODk5MWIwMzA3ZDU4NTg3NGE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-09T09:33:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-09T11:42:36Z"}, "message": "tree-optimization/105517 - avoid offset truncation during VN\n\nWhen value-numbering an address expression like\n&p_74(D)->a1x[4294967295].a1; we are accumulating the byte offset\nin an 64bit integer.  When later exploiting the duality between\nthat and a POINTER_PLUS_EXPR we should avoid truncating that\noffset to fit in the target specific sizetype.  While such\noverflows are generally undefined behavior, exploiting this\nmay leads to spurious missing diagnostics.\n\n2022-05-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105517\n\t* tree-ssa-sccvn.cc (vn_reference_lookup): Make sure the accumulated\n\toffset can be represented in the POINTER_PLUS_EXPR IL.\n\t(vn_reference_insert): Likewise.\n\t* poly-int.h (sext_hwi): Add poly version of sext_hwi.", "tree": {"sha": "cc97e4343aa2d8b777866139a6854a2f0ab9d306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc97e4343aa2d8b777866139a6854a2f0ab9d306"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faabc751d0bb7e7fe86abfe8991b0307d585874a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faabc751d0bb7e7fe86abfe8991b0307d585874a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faabc751d0bb7e7fe86abfe8991b0307d585874a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faabc751d0bb7e7fe86abfe8991b0307d585874a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93416de0cb72358b95a96fa4341b7b93a6805842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93416de0cb72358b95a96fa4341b7b93a6805842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93416de0cb72358b95a96fa4341b7b93a6805842"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "d085544a57e94ddb1d96e2140e9ddf9d47711424", "filename": "gcc/poly-int.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faabc751d0bb7e7fe86abfe8991b0307d585874a/gcc%2Fpoly-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faabc751d0bb7e7fe86abfe8991b0307d585874a/gcc%2Fpoly-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpoly-int.h?ref=faabc751d0bb7e7fe86abfe8991b0307d585874a", "patch": "@@ -1178,6 +1178,19 @@ lshift (const poly_int_pod<N, Ca> &a, const Cb &b)\n }\n }\n \n+/* Poly version of sext_hwi, with the same interface.  */\n+\n+template<unsigned int N, typename C>\n+inline poly_int<N, HOST_WIDE_INT>\n+sext_hwi (const poly_int<N, C> &a, unsigned int precision)\n+{\n+  poly_int_pod<N, HOST_WIDE_INT> r;\n+  for (unsigned int i = 0; i < N; i++)\n+    r.coeffs[i] = sext_hwi (a.coeffs[i], precision);\n+  return r;\n+}\n+\n+\n /* Return true if a0 + a1 * x might equal b0 + b1 * x for some nonnegative\n    integer x.  */\n "}, {"sha": "3732d06b0bb0421fe2bafa862af37fcb50269386", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faabc751d0bb7e7fe86abfe8991b0307d585874a/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faabc751d0bb7e7fe86abfe8991b0307d585874a/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=faabc751d0bb7e7fe86abfe8991b0307d585874a", "patch": "@@ -3684,7 +3684,12 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n \t    break;\n \t  off += vro->off;\n \t}\n-      if (i == operands.length () - 1)\n+      if (i == operands.length () - 1\n+\t  /* Make sure we the offset we accumulated in a 64bit int\n+\t     fits the address computation carried out in target\n+\t     offset precision.  */\n+\t  && (off.coeffs[0]\n+\t      == sext_hwi (off.coeffs[0], TYPE_PRECISION (sizetype))))\n \t{\n \t  gcc_assert (operands[i-1].opcode == MEM_REF);\n \t  tree ops[2];\n@@ -3808,7 +3813,12 @@ vn_reference_insert (tree op, tree result, tree vuse, tree vdef)\n \t    break;\n \t  off += vro->off;\n \t}\n-      if (i == operands.length () - 1)\n+      if (i == operands.length () - 1\n+\t  /* Make sure we the offset we accumulated in a 64bit int\n+\t     fits the address computation carried out in target\n+\t     offset precision.  */\n+\t  && (off.coeffs[0]\n+\t      == sext_hwi (off.coeffs[0], TYPE_PRECISION (sizetype))))\n \t{\n \t  gcc_assert (operands[i-1].opcode == MEM_REF);\n \t  tree ops[2];"}]}