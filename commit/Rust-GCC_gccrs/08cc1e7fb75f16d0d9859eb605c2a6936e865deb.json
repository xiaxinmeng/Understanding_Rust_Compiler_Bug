{"sha": "08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjYzFlN2ZiNzVmMTZkMGQ5ODU5ZWI2MDVjMmE2OTM2ZTg2NWRlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-09-29T17:33:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-09-29T17:33:58Z"}, "message": "re PR debug/41438 (VTA: libgomp build fails due to inconsistent debug info)\n\n\tPR debug/41438\n\t* dwarf2out.c (const_ok_for_output_1, const_ok_for_output): New\n\tfunctions.\n\t(mem_loc_descriptor, loc_descriptor, add_const_value_attribute): Bail\n\tout if !const_ok_for_output.\n\n\tPR debug/41474\n\t* dwarf2out.c (mem_loc_descriptor) <case CONCAT, case CONCATN,\n\tcase VAR_LOCATION>: Remove gcc_unreachable ().\n\n\t* gcc.dg/debug/dwarf2/const-1.c: Add dg-require-visibility, make x\n\thidden.\n\t* g++.dg/debug/dwarf2/const-1.C: Likewise.\n\nFrom-SVN: r152282", "tree": {"sha": "8f9b17e7938b778865a2d5f188aa3f8aad3851ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9b17e7938b778865a2d5f188aa3f8aad3851ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a795ca6e596208db4968b33f2bdc1d0dd284028d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a795ca6e596208db4968b33f2bdc1d0dd284028d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a795ca6e596208db4968b33f2bdc1d0dd284028d"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "b0fdb7d0911568dec4697f592fd7566b94724f22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "patch": "@@ -1,3 +1,15 @@\n+2009-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/41438\n+\t* dwarf2out.c (const_ok_for_output_1, const_ok_for_output): New\n+\tfunctions.\n+\t(mem_loc_descriptor, loc_descriptor, add_const_value_attribute): Bail\n+\tout if !const_ok_for_output.\n+\n+\tPR debug/41474\n+\t* dwarf2out.c (mem_loc_descriptor) <case CONCAT, case CONCATN,\n+\tcase VAR_LOCATION>: Remove gcc_unreachable ().\n+\n 2009-09-29  Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \t* config.gcc (i[34567]86-*-*): Remove mmintrin-common.h."}, {"sha": "43e1a7b88dea971503e9ae22eb82bb2945b2d424", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 75, "deletions": 8, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "patch": "@@ -11104,6 +11104,70 @@ expansion_failed (tree expr, rtx rtl, char const *reason)\n     }\n }\n \n+/* Helper function for const_ok_for_output, called either directly\n+   or via for_each_rtx.  */\n+\n+static int\n+const_ok_for_output_1 (rtx *rtlp, void *data ATTRIBUTE_UNUSED)\n+{\n+  rtx rtl = *rtlp;\n+\n+  if (GET_CODE (rtl) != SYMBOL_REF)\n+    return 0;\n+\n+  if (CONSTANT_POOL_ADDRESS_P (rtl))\n+    {\n+      bool marked;\n+      get_pool_constant_mark (rtl, &marked);\n+      /* If all references to this pool constant were optimized away,\n+\t it was not output and thus we can't represent it.  */\n+      if (!marked)\n+\t{\n+\t  expansion_failed (NULL_TREE, rtl,\n+\t\t\t    \"Constant was removed from constant pool.\\n\");\n+\t  return 1;\n+\t}\n+    }\n+\n+  if (SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)\n+    return 1;\n+\n+  /* Avoid references to external symbols in debug info, on several targets\n+     the linker might even refuse to link when linking a shared library,\n+     and in many other cases the relocations for .debug_info/.debug_loc are\n+     dropped, so the address becomes zero anyway.  Hidden symbols, guaranteed\n+     to be defined within the same shared library or executable are fine.  */\n+  if (SYMBOL_REF_EXTERNAL_P (rtl))\n+    {\n+      tree decl = SYMBOL_REF_DECL (rtl);\n+\n+      if (decl == NULL || !targetm.binds_local_p (decl))\n+\t{\n+\t  expansion_failed (NULL_TREE, rtl,\n+\t\t\t    \"Symbol not defined in current TU.\\n\");\n+\t  return 1;\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* Return true if constant RTL can be emitted in DW_OP_addr or\n+   DW_AT_const_value.  TLS SYMBOL_REFs, external SYMBOL_REFs or\n+   non-marked constant pool SYMBOL_REFs can't be referenced in it.  */\n+\n+static bool\n+const_ok_for_output (rtx rtl)\n+{\n+  if (GET_CODE (rtl) == SYMBOL_REF)\n+    return const_ok_for_output_1 (&rtl, NULL) == 0;\n+\n+  if (GET_CODE (rtl) == CONST)\n+    return for_each_rtx (&XEXP (rtl, 0), const_ok_for_output_1, NULL) == 0;\n+\n+  return true;\n+}\n+\n /* The following routine converts the RTL for a variable or parameter\n    (resident in memory) into an equivalent Dwarf representation of a\n    mechanism for getting the address of that same variable onto the top of a\n@@ -11278,6 +11342,9 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n \t  break;\n \t}\n \n+      if (!const_ok_for_output (rtl))\n+\tbreak;\n+\n       mem_loc_result = new_loc_descr (DW_OP_addr, 0, 0);\n       mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_addr;\n       mem_loc_result->dw_loc_oprnd1.v.val_addr = rtl;\n@@ -11289,7 +11356,6 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n     case VAR_LOCATION:\n       expansion_failed (NULL_TREE, rtl,\n \t\t\t\"CONCAT/CONCATN/VAR_LOCATION is handled only by loc_descriptor\");\n-      gcc_unreachable ();\n       return 0;\n \n     case PRE_MODIFY:\n@@ -11987,8 +12053,7 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t}\n       /* FALLTHROUGH */\n     case SYMBOL_REF:\n-      if (GET_CODE (rtl) == SYMBOL_REF\n-\t  && SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)\n+      if (!const_ok_for_output (rtl))\n \tbreak;\n     case LABEL_REF:\n       if (mode != VOIDmode && GET_MODE_SIZE (mode) == DWARF2_ADDR_SIZE\n@@ -12569,7 +12634,7 @@ loc_list_from_tree (tree loc, int want_address)\n \t    expansion_failed (loc, NULL_RTX, \"CONST_STRING\");\n \t    return 0;\n \t  }\n-\telse if (CONSTANT_P (rtl))\n+\telse if (CONSTANT_P (rtl) && const_ok_for_output (rtl))\n \t  {\n \t    ret = new_loc_descr (DW_OP_addr, 0, 0);\n \t    ret->dw_loc_oprnd1.val_class = dw_val_class_addr;\n@@ -12919,8 +12984,11 @@ loc_list_from_tree (tree loc, int want_address)\n \t\t\t    \"DWARF address size mismatch\");\n \t  return 0;\n \t}\n-      add_loc_descr_to_each (list_ret,\n-\t\t\t     new_loc_descr (DW_OP_stack_value, 0, 0));\n+      if (ret)\n+\tadd_loc_descr (&ret, new_loc_descr (DW_OP_stack_value, 0, 0));\n+      else\n+\tadd_loc_descr_to_each (list_ret,\n+\t\t\t       new_loc_descr (DW_OP_stack_value, 0, 0));\n       have_address = 1;\n     }\n   /* Show if we can't fill the request for an address.  */\n@@ -13465,8 +13533,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \treturn add_const_value_attribute (die, XEXP (rtl, 0));\n       /* FALLTHROUGH */\n     case SYMBOL_REF:\n-      if (GET_CODE (rtl) == SYMBOL_REF\n-\t  && SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)\n+      if (!const_ok_for_output (rtl))\n \treturn false;\n     case LABEL_REF:\n       add_AT_addr (die, DW_AT_const_value, rtl);"}, {"sha": "fd019e20794b4192be47f064bbf321bfb954182f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "patch": "@@ -1,3 +1,10 @@\n+2009-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/41438\n+\t* gcc.dg/debug/dwarf2/const-1.c: Add dg-require-visibility, make x\n+\thidden.\n+\t* g++.dg/debug/dwarf2/const-1.C: Likewise.\n+\n 2009-09-29  Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \t* gcc.target/i386/i386.exp: Remove check_effective_target_sse5."}, {"sha": "eaed5bd603e2bc0c9e64121a37e3d894f8e52475", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/const1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fconst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fconst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fconst1.C?ref=08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -gdwarf-2 -dA\" } */\n+/* { dg-require-visibility \"\" } */\n /* { dg-final { scan-assembler \"DW_AT_const_value\" } } */\n \n-extern void x ();\n+extern void x () __attribute__((visibility (\"hidden\")));\n void (* const f) () = x;"}, {"sha": "26aa9bd8c503e994fc56debef3eae0b0693d3ac3", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/const-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cc1e7fb75f16d0d9859eb605c2a6936e865deb/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fconst-1.c?ref=08cc1e7fb75f16d0d9859eb605c2a6936e865deb", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -gdwarf-2 -dA\" } */\n+/* { dg-require-visibility \"\" } */\n /* { dg-final { scan-assembler \"DW_AT_const_value\" } } */\n \n-extern void x();\n+extern void x() __attribute__((visibility(\"hidden\")));\n static void (*f)() = x;"}]}