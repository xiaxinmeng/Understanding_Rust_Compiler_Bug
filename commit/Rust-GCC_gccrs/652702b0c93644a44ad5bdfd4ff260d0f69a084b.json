{"sha": "652702b0c93644a44ad5bdfd4ff260d0f69a084b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUyNzAyYjBjOTM2NDRhNDRhZDViZGZkNGZmMjYwZDBmNjlhMDg0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-16T17:21:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-16T17:21:32Z"}, "message": "libcody: fix --enable-checking=... follow-up [PR98311]\n\n> The -enable-checking configure code in libcody didn't play well with\n> us.  This just uses libcpp's configurey for that piece.\n\nThis doesn't set is_release anywhere, which means when --enable-checking*\nor --disable-checking isn't specified, it always treats it as\n--enable-checking=yes, while the normal gcc behavior is treat only trunk\nas --enable-checking=yes and treat release branches as\n--enable-checking=release by default.\n\nOn the other side, nothing uses those ac_assert_checking and\nac_valgrind_checking variables, so it is a waste to compute those.\n\n2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n\n\t* configure.ac: Compute is_release.\n\t(NMS_ENABLE_CHECKING): Simplify but not computing ac_assert_checking\n\tand ac_valgrind_checking the code doesn't use.\n\t* configure: Regenerated.", "tree": {"sha": "6a766b7a48797950e8b09b0e68089015714311ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a766b7a48797950e8b09b0e68089015714311ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/652702b0c93644a44ad5bdfd4ff260d0f69a084b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652702b0c93644a44ad5bdfd4ff260d0f69a084b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652702b0c93644a44ad5bdfd4ff260d0f69a084b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652702b0c93644a44ad5bdfd4ff260d0f69a084b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5098d35fb1997aa6fd6d7e37d0fd4501a5fe2f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5098d35fb1997aa6fd6d7e37d0fd4501a5fe2f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5098d35fb1997aa6fd6d7e37d0fd4501a5fe2f9d"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "7699e7a1b2fb9e8c4d6b0cbce3503dcd35399972", "filename": "libcody/configure", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652702b0c93644a44ad5bdfd4ff260d0f69a084b/libcody%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652702b0c93644a44ad5bdfd4ff260d0f69a084b/libcody%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Fconfigure?ref=652702b0c93644a44ad5bdfd4ff260d0f69a084b", "patch": "@@ -2686,6 +2686,14 @@ configure_args=$ac_configure_args\n \n \n \n+# Enable expensive internal checks\n+is_release=\n+if test -d $srcdir/../gcc \\\n+   && test -f $srcdir/../gcc/DEV-PHASE \\\n+   && test x\"`cat $srcdir/../gcc/DEV-PHASE`\" != xexperimental; then\n+  is_release=yes\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking bugurl\" >&5\n $as_echo_n \"checking bugurl... \" >&6; }\n \n@@ -2727,14 +2735,8 @@ IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n for check in release $ac_checking_flags\n do\n \tcase $check in\n-\t# these set all the flags to specific states\n-\tyes|all) ac_checking=1 ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n-\tno|none) ac_checking= ; ac_assert_checking= ; ac_valgrind_checking= ;;\n-\trelease) ac_checking= ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n-\t# these enable particular checks\n-\tassert) ac_assert_checking=1 ;;\n-\tmisc) ac_checking=1 ;;\n-\tvalgrind) ac_valgrind_checking=1 ;;\n+\tyes|all|misc) ac_checking=1 ;;\n+\tno|none|release) ac_checking= ;;\n \t# accept\n \t*) ;;\n \tesac"}, {"sha": "7461dcf4b9ce6b49ec1a2e50ed605fe2eb409bb7", "filename": "libcody/configure.ac", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652702b0c93644a44ad5bdfd4ff260d0f69a084b/libcody%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652702b0c93644a44ad5bdfd4ff260d0f69a084b/libcody%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Fconfigure.ac?ref=652702b0c93644a44ad5bdfd4ff260d0f69a084b", "patch": "@@ -23,6 +23,14 @@ NMS_TOOL_DIRS\n NMS_LINK_OPT([-Wl,--no-undefined])\n NMS_CONFIG_FILES([gdbinit dox.cfg])\n \n+# Enable expensive internal checks\n+is_release=\n+if test -d $srcdir/../gcc \\\n+   && test -f $srcdir/../gcc/DEV-PHASE \\\n+   && test x\"`cat $srcdir/../gcc/DEV-PHASE`\" != xexperimental; then\n+  is_release=yes\n+fi\n+\n NMS_BUGURL\n dnl NMS_ENABLE_CHECKING\n dnl cloned from ../libcpp/configure.ac\n@@ -43,14 +51,8 @@ IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n for check in release $ac_checking_flags\n do\n \tcase $check in\n-\t# these set all the flags to specific states\n-\tyes|all) ac_checking=1 ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n-\tno|none) ac_checking= ; ac_assert_checking= ; ac_valgrind_checking= ;;\n-\trelease) ac_checking= ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n-\t# these enable particular checks\n-\tassert) ac_assert_checking=1 ;;\n-\tmisc) ac_checking=1 ;;\n-\tvalgrind) ac_valgrind_checking=1 ;;\n+\tyes|all|misc) ac_checking=1 ;;\n+\tno|none|release) ac_checking= ;;\n \t# accept\n \t*) ;;\n \tesac"}]}