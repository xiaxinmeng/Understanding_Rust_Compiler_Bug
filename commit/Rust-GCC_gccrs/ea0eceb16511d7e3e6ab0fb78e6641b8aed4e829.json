{"sha": "ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwZWNlYjE2NTExZDdlM2U2YWIwZmI3OGU2NjQxYjhhZWQ0ZTgyOQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-07-25T14:41:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-07-25T14:41:35Z"}, "message": "ssa.c (rename_insn_1): Do not wrap an assignment to a paradoxical SUBREG inside a SEQUENCE.\n\n        * ssa.c (rename_insn_1): Do not wrap an assignment to a\n        paradoxical SUBREG inside a SEQUENCE.  Fix minor formatting\n        glitch.\n\nFrom-SVN: r44357", "tree": {"sha": "a8ecb42eaa1d2f0ee7770c5362b559a82f891d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8ecb42eaa1d2f0ee7770c5362b559a82f891d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829/comments", "author": null, "committer": null, "parents": [{"sha": "3237ac18759be515c2836996e6b376d5c457761b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3237ac18759be515c2836996e6b376d5c457761b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3237ac18759be515c2836996e6b376d5c457761b"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "a867ed71d888118b6f522f2625b2b5cb06ab046b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829", "patch": "@@ -5,6 +5,10 @@\n \n Wed Jul 25 08:25:01 2001  Jeffrey A Law  (law@cygnus.com)\n \n+\t* ssa.c (rename_insn_1): Do not wrap an assignment to a \n+\tparadoxical SUBREG inside a SEQUENCE.  Fix minor formatting\n+\tglitch.\n+\n \t* ssa-ccp.c (visit_expression): Handle CALL_INSNs that can\n \tthrow an exception.\n \t(visit_expression): When attempting to simplify an expression,"}, {"sha": "770ea46902c9f3d0a9f8ea1b555c079de7dda590", "filename": "gcc/ssa.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=ea0eceb16511d7e3e6ab0fb78e6641b8aed4e829", "patch": "@@ -833,6 +833,21 @@ rename_insn_1 (ptr, data)\n \trtx *destp = &SET_DEST (x);\n \trtx dest = SET_DEST (x);\n \n+\t/* An assignment to a paradoxical SUBREG does not read from\n+\t   the destination operand, and thus does not need to be\n+\t   wrapped into a SEQUENCE when translating into SSA form.\n+\t   We merely strip off the SUBREG and proceed normally for\n+\t   this case.  */\n+\tif (GET_CODE (dest) == SUBREG\n+\t    && (GET_MODE_SIZE (GET_MODE (dest))\n+\t\t> GET_MODE_SIZE (GET_MODE (SUBREG_REG (dest))))\n+\t    && GET_CODE (SUBREG_REG (dest)) == REG\n+\t    && CONVERT_REGISTER_TO_SSA_P (REGNO (SUBREG_REG (dest))))\n+\t  {\n+\t    destp = &XEXP (dest, 0);\n+\t    dest = XEXP (dest, 0);\n+\t  }\n+\n \t/* Some SETs also use the REG specified in their LHS.\n \t   These can be detected by the presence of\n \t   STRICT_LOW_PART, SUBREG, SIGN_EXTRACT, and ZERO_EXTRACT\n@@ -842,11 +857,12 @@ rename_insn_1 (ptr, data)\n \t   (sequence [(set (reg foo_1) (reg foo))\n \t              (set (subreg (reg foo_1)) ...)])  \n \n-\t   FIXME: Much of the time this is too much.  For many libcalls,\n-\t   paradoxical SUBREGs, etc., the input register is dead.  We should\n-\t   recognise this in rename_block or here and not make a false\n+\t   FIXME: Much of the time this is too much.  For some constructs\n+\t   we know that the output register is strictly an output\n+\t   (paradoxical SUBREGs and some libcalls for example).\n+\n+\t   For those cases we are better off not making the false\n \t   dependency.  */\n-\t   \n \tif (GET_CODE (dest) == STRICT_LOW_PART\n \t    || GET_CODE (dest) == SUBREG\n \t    || GET_CODE (dest) == SIGN_EXTRACT\n@@ -877,8 +893,8 @@ rename_insn_1 (ptr, data)\n \t\tcontext->new_renames = saved_new_renames;\n \t      }\n \t  }\n-\telse if (GET_CODE (dest) == REG &&\n-\t\t CONVERT_REGISTER_TO_SSA_P (REGNO (dest)))\n+\telse if (GET_CODE (dest) == REG\n+\t\t && CONVERT_REGISTER_TO_SSA_P (REGNO (dest)))\n \t  {\n \t    /* We found a genuine set of an interesting register.  Tag\n \t       it so that we can create a new name for it after we finish"}]}