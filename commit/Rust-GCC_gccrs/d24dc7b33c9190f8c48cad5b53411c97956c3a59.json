{"sha": "d24dc7b33c9190f8c48cad5b53411c97956c3a59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0ZGM3YjMzYzkxOTBmOGM0OGNhZDViNTM0MTFjOTc5NTZjM2E1OQ==", "commit": {"author": {"name": "Revital Eres", "email": "revital.eres@linaro.org", "date": "2011-06-16T04:03:06Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2011-06-16T04:03:06Z"}, "message": "SMS: Fix violation of memory dependence\n\nFrom-SVN: r175090", "tree": {"sha": "b98657e95e8fda46eb6fead6e44a426e08423e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b98657e95e8fda46eb6fead6e44a426e08423e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24dc7b33c9190f8c48cad5b53411c97956c3a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24dc7b33c9190f8c48cad5b53411c97956c3a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24dc7b33c9190f8c48cad5b53411c97956c3a59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24dc7b33c9190f8c48cad5b53411c97956c3a59/comments", "author": null, "committer": null, "parents": [{"sha": "c5b7af242c0d4bcb7dd0b207202a3a2622321ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b7af242c0d4bcb7dd0b207202a3a2622321ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b7af242c0d4bcb7dd0b207202a3a2622321ffb"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "3bf4c72b03db15cfcb7e0303a912810c09201908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d24dc7b33c9190f8c48cad5b53411c97956c3a59", "patch": "@@ -1,3 +1,8 @@\n+2011-06-16  Revital Eres  <revital.eres@linaro.org>\n+\n+\t* ddg.c (add_intra_loop_mem_dep): New function.\n+\t(build_intra_loop_deps): Call it.\n+\n 2011-05-06  Jeff Law  <law@redhat.com>\n \n \t* df-problems.c (df_lr_local_compute): Manually CSE"}, {"sha": "d06bdbb5448a36d4ecad229e8313723e01dc5f9e", "filename": "gcc/ddg.c", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=d24dc7b33c9190f8c48cad5b53411c97956c3a59", "patch": "@@ -390,6 +390,33 @@ insns_may_alias_p (rtx insn1, rtx insn2)\n \t\t\t &PATTERN (insn2));\n }\n \n+/* Given two nodes, analyze their RTL insns and add intra-loop mem deps\n+   to ddg G.  */\n+static void\n+add_intra_loop_mem_dep (ddg_ptr g, ddg_node_ptr from, ddg_node_ptr to)\n+{\n+\n+  if ((from->cuid == to->cuid)\n+      || !insns_may_alias_p (from->insn, to->insn))\n+    /* Do not create edge if memory references have disjoint alias sets\n+       or 'to' and 'from' are the same instruction.  */\n+    return;\n+\n+  if (mem_write_insn_p (from->insn))\n+    {\n+      if (mem_read_insn_p (to->insn))\n+\tcreate_ddg_dep_no_link (g, from, to,\n+\t\t\t\tDEBUG_INSN_P (to->insn)\n+\t\t\t\t? ANTI_DEP : TRUE_DEP, MEM_DEP, 0);\n+      else\n+\tcreate_ddg_dep_no_link (g, from, to,\n+\t\t\t\tDEBUG_INSN_P (to->insn)\n+\t\t\t\t? ANTI_DEP : OUTPUT_DEP, MEM_DEP, 0);\n+    }\n+  else if (!mem_read_insn_p (to->insn))\n+    create_ddg_dep_no_link (g, from, to, ANTI_DEP, MEM_DEP, 0);\n+}\n+\n /* Given two nodes, analyze their RTL insns and add inter-loop mem deps\n    to ddg G.  */\n static void\n@@ -477,10 +504,22 @@ build_intra_loop_deps (ddg_ptr g)\n \t      if (DEBUG_INSN_P (j_node->insn))\n \t\tcontinue;\n \t      if (mem_access_insn_p (j_node->insn))\n- \t\t/* Don't bother calculating inter-loop dep if an intra-loop dep\n-\t\t   already exists.  */\n+\t\t{\n+\t\t  /* Don't bother calculating inter-loop dep if an intra-loop dep\n+\t\t     already exists.  */\n \t      \t  if (! TEST_BIT (dest_node->successors, j))\n \t\t    add_inter_loop_mem_dep (g, dest_node, j_node);\n+\t\t  /* If -fmodulo-sched-allow-regmoves\n+\t\t     is set certain anti-dep edges are not created.\n+\t\t     It might be that these anti-dep edges are on the\n+\t\t     path from one memory instruction to another such that\n+\t\t     removing these edges could cause a violation of the\n+\t\t     memory dependencies.  Thus we add intra edges between\n+\t\t     every two memory instructions in this case.  */\n+\t\t  if (flag_modulo_sched_allow_regmoves\n+\t\t      && !TEST_BIT (dest_node->predecessors, j))\n+\t\t    add_intra_loop_mem_dep (g, j_node, dest_node);\n+\t\t}\n             }\n         }\n     }"}, {"sha": "f8bce2443d556faf80c205a6a53fb3fa93742cbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d24dc7b33c9190f8c48cad5b53411c97956c3a59", "patch": "@@ -1,3 +1,7 @@\n+2011-06-16  Revital Eres  <revital.eres@linaro.org>\n+\n+\t* gcc.dg/sms-9.c: New file.\n+\n 2011-06-15  Easwaran Raman  <eraman@google.com>\n \n \tPR rtl-optimization/49414"}, {"sha": "9d1f8814257aff3811daabae017f8726b8228bca", "filename": "gcc/testsuite/gcc.dg/sms-9.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24dc7b33c9190f8c48cad5b53411c97956c3a59/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-9.c?ref=d24dc7b33c9190f8c48cad5b53411c97956c3a59", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fmodulo-sched -fno-auto-inc-dec -O2 -fmodulo-sched-allow-regmoves\" } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+struct df_ref_info\n+{\n+  unsigned int *begin;\n+  unsigned int *count;\n+};\n+\n+extern void *memset (void *s, int c, __SIZE_TYPE__ n);\n+\n+\n+__attribute__ ((noinline))\n+int\n+df_reorganize_refs_by_reg_by_insn (struct df_ref_info *ref_info,\n+\t\t\t           int num, unsigned int start)\n+{\n+  unsigned int m = num;\n+  unsigned int offset = 77;\n+  unsigned int r;\n+\n+  for (r = start; r < m; r++)\n+    {\n+      ref_info->begin[r] = offset;\n+      offset += ref_info->count[r];\n+      ref_info->count[r] = 0;\n+    }\n+\n+  return offset;\n+}\n+\n+int\n+main ()\n+{\n+  struct df_ref_info temp;\n+  int num = 100;\n+  unsigned int start = 5;\n+  int i, offset;\n+\n+  temp.begin = malloc (100 * sizeof (unsigned int));\n+  temp.count = malloc (100 * sizeof (unsigned int));\n+\n+  memset (temp.begin, 0, sizeof (unsigned int) * num);\n+  memset (temp.count, 0, sizeof (unsigned int) * num);\n+\n+  for (i = 0; i < num; i++)\n+    temp.count[i] = i + 1;\n+\n+  offset = df_reorganize_refs_by_reg_by_insn (&temp, num, start);\n+\n+  if (offset != 5112)\n+    abort ();\n+\n+  free (temp.begin);\n+  free (temp.count);\n+  return 0;\n+}"}]}