{"sha": "379924dd5991228b5e65fac5815ecac0d389a786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5OTI0ZGQ1OTkxMjI4YjVlNjVmYWM1ODE1ZWNhYzBkMzg5YTc4Ng==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-09-29T02:47:54Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-09-29T02:47:54Z"}, "message": "re PR libfortran/35862 ([F2003] Implement new rounding modes for run time)\n\n2009-09-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/35862\n\t* io.h (gfc_unit): Add round_status.\n\t(format_token): Add enumerators for rounding format specifiers.\n\t* transfer.c (round_opt): New options table.\n\t(formatted_transfer_scalar_read): Add set round_status for each rounding\n\tformat token. (formatted_transfer_scalar_write): Likewise.\n\t* format.c (format_lex): Tokenize the rounding format specifiers.\n\t(parse_format_list): Parse the rounding format specifiers.\n\t* write_float.def (outout_float): Modify rounding code to use new\n\tvariable rchar to set the appropriate rounding. Fix some whitespace.\n\t* unit.c (get_internal_unit): Initialize rounding mode for internal\n\tunits. (init_units): Likewise.\n\nFrom-SVN: r152263", "tree": {"sha": "b230ba0e2e2c68e0265fe9335396a5deeeb603e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b230ba0e2e2c68e0265fe9335396a5deeeb603e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/379924dd5991228b5e65fac5815ecac0d389a786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379924dd5991228b5e65fac5815ecac0d389a786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/379924dd5991228b5e65fac5815ecac0d389a786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379924dd5991228b5e65fac5815ecac0d389a786/comments", "author": null, "committer": null, "parents": [{"sha": "f2a71504e00cb7785bdc78b12da8d1608762f6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a71504e00cb7785bdc78b12da8d1608762f6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a71504e00cb7785bdc78b12da8d1608762f6cc"}], "stats": {"total": 225, "additions": 210, "deletions": 15}, "files": [{"sha": "2530bf7d3ea6b269fa4f1666717a833151a8054c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=379924dd5991228b5e65fac5815ecac0d389a786", "patch": "@@ -1,3 +1,18 @@\n+2009-09-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/35862\n+\t* io.h (gfc_unit): Add round_status.\n+\t(format_token): Add enumerators for rounding format specifiers.\n+\t* transfer.c (round_opt): New options table.\n+\t(formatted_transfer_scalar_read): Add set round_status for each rounding\n+\tformat token. (formatted_transfer_scalar_write): Likewise.\n+\t* format.c (format_lex): Tokenize the rounding format specifiers.\n+\t(parse_format_list): Parse the rounding format specifiers.\n+\t* write_float.def (outout_float): Modify rounding code to use new\n+\tvariable rchar to set the appropriate rounding. Fix some whitespace.\n+\t* unit.c (get_internal_unit): Initialize rounding mode for internal\n+\tunits. (init_units): Likewise.\n+\n 2009-09-19  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n \n \t* configure.ac: Check for GFORTRAN_C99_1.1 funcs in OS libm."}, {"sha": "4ab70e8c3adc4662984a0f28afb057c9b09537d1", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=379924dd5991228b5e65fac5815ecac0d389a786", "patch": "@@ -564,6 +564,34 @@ format_lex (format_data *fmt)\n \t}\n       break;\n \n+    case 'R':\n+      switch (next_char (fmt, 0))\n+\t{\n+\tcase 'C':\n+\t  token = FMT_RC;\n+\t  break;\n+\tcase 'D':\n+\t  token = FMT_RD;\n+\t  break;\n+\tcase 'N':\n+\t  token = FMT_RN;\n+\t  break;\n+\tcase 'P':\n+\t  token = FMT_RP;\n+\t  break;\n+\tcase 'U':\n+\t  token = FMT_RU;\n+\t  break;\n+\tcase 'Z':\n+\t  token = FMT_RZ;\n+\t  break;\n+\tdefault:\n+\t  unget_char (fmt);\n+\t  token = FMT_UNKNOWN;\n+\t  break;\n+\t}\n+      break;\n+\n     case -1:\n       token = FMT_END;\n       break;\n@@ -713,6 +741,18 @@ parse_format_list (st_parameter_dt *dtp, bool *save_ok)\n       tail->u.string.length = fmt->value;\n       tail->repeat = 1;\n       goto optional_comma;\n+      \n+    case FMT_RC:\n+    case FMT_RD:\n+    case FMT_RN:\n+    case FMT_RP:\n+    case FMT_RU:\n+    case FMT_RZ:\n+      notify_std (&dtp->common, GFC_STD_F2003, \"Fortran 2003: Round \"\n+\t\t  \"descriptor not allowed\");\n+      get_fnode (fmt, &head, &tail, t);\n+      tail->repeat = 1;\n+      goto between_desc;\n \n     case FMT_DC:\n     case FMT_DP:"}, {"sha": "51143f548aae189c076a2ed2f21a074769e4a5b0", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=379924dd5991228b5e65fac5815ecac0d389a786", "patch": "@@ -602,6 +602,7 @@ typedef struct gfc_unit\n   unit_pad pad_status;\n   unit_decimal decimal_status;\n   unit_delim delim_status;\n+  unit_round round_status;\n \n   /* recl                 -- Record length of the file.\n      last_record          -- Last record number read or written\n@@ -654,7 +655,7 @@ typedef enum\n   FMT_LPAREN, FMT_RPAREN, FMT_X, FMT_S, FMT_SS, FMT_SP, FMT_STRING,\n   FMT_BADSTRING, FMT_P, FMT_I, FMT_B, FMT_BN, FMT_BZ, FMT_O, FMT_Z, FMT_F,\n   FMT_E, FMT_EN, FMT_ES, FMT_G, FMT_L, FMT_A, FMT_D, FMT_H, FMT_END, FMT_DC,\n-  FMT_DP, FMT_STAR\n+  FMT_DP, FMT_STAR, FMT_RC, FMT_RD, FMT_RN, FMT_RP, FMT_RU, FMT_RZ\n }\n format_token;\n "}, {"sha": "06a1d2eb9841283d48bc348f0f431d8fbb7bc45d", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=379924dd5991228b5e65fac5815ecac0d389a786", "patch": "@@ -101,6 +101,16 @@ static const st_option decimal_opt[] = {\n   {NULL, 0}\n };\n \n+static const st_option round_opt[] = {\n+  {\"up\", ROUND_UP},\n+  {\"down\", ROUND_DOWN},\n+  {\"zero\", ROUND_ZERO},\n+  {\"nearest\", ROUND_NEAREST},\n+  {\"compatible\", ROUND_COMPATIBLE},\n+  {\"processor_defined\", ROUND_PROCDEFINED},\n+  {NULL, 0}\n+};\n+\n \n static const st_option sign_opt[] = {\n   {\"plus\", SIGN_SP},\n@@ -1202,6 +1212,36 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  consume_data_flag = 0;\n \t  dtp->u.p.current_unit->decimal_status = DECIMAL_POINT;\n \t  break;\n+\t\n+\tcase FMT_RC:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_COMPATIBLE;\n+\t  break;\n+\n+\tcase FMT_RD:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_DOWN;\n+\t  break;\n+\n+\tcase FMT_RN:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_NEAREST;\n+\t  break;\n+\n+\tcase FMT_RP:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_PROCDEFINED;\n+\t  break;\n+\n+\tcase FMT_RU:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_UP;\n+\t  break;\n+\n+\tcase FMT_RZ:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_ZERO;\n+\t  break;\n \n \tcase FMT_P:\n \t  consume_data_flag = 0;\n@@ -1566,6 +1606,36 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  dtp->u.p.current_unit->decimal_status = DECIMAL_POINT;\n \t  break;\n \n+\tcase FMT_RC:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_COMPATIBLE;\n+\t  break;\n+\n+\tcase FMT_RD:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_DOWN;\n+\t  break;\n+\n+\tcase FMT_RN:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_NEAREST;\n+\t  break;\n+\n+\tcase FMT_RP:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_PROCDEFINED;\n+\t  break;\n+\n+\tcase FMT_RU:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_UP;\n+\t  break;\n+\n+\tcase FMT_RZ:\n+\t  consume_data_flag = 0;\n+\t  dtp->u.p.current_unit->round_status = ROUND_ZERO;\n+\t  break;\n+\n \tcase FMT_P:\n \t  consume_data_flag = 0;\n \t  dtp->u.p.scale_factor = f->u.k;\n@@ -2252,6 +2322,16 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n   if (dtp->u.p.current_unit->decimal_status == DECIMAL_UNSPECIFIED)\n \tdtp->u.p.current_unit->decimal_status = dtp->u.p.current_unit->flags.decimal;\n \n+  /* Check the round mode.  */\n+  dtp->u.p.current_unit->round_status\n+\t= !(cf & IOPARM_DT_HAS_ROUND) ? ROUND_UNSPECIFIED :\n+\t  find_option (&dtp->common, dtp->round, dtp->round_len,\n+\t\t\tround_opt, \"Bad ROUND parameter in data transfer \"\n+\t\t\t\"statement\");\n+\n+  if (dtp->u.p.current_unit->round_status == ROUND_UNSPECIFIED)\n+\tdtp->u.p.current_unit->round_status = dtp->u.p.current_unit->flags.round;\n+\n   /* Check the sign mode. */\n   dtp->u.p.sign_status\n \t= !(cf & IOPARM_DT_HAS_SIGN) ? SIGN_UNSPECIFIED :"}, {"sha": "5dc3538f2649cc5726d039b73eb3eaed43ee22a8", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=379924dd5991228b5e65fac5815ecac0d389a786", "patch": "@@ -441,6 +441,7 @@ get_internal_unit (st_parameter_dt *dtp)\n   iunit->flags.decimal = DECIMAL_POINT;\n   iunit->flags.encoding = ENCODING_DEFAULT;\n   iunit->flags.async = ASYNC_NO;\n+  iunit->flags.round = ROUND_COMPATIBLE;\n \n   /* Initialize the data transfer parameters.  */\n \n@@ -531,6 +532,7 @@ init_units (void)\n       u->flags.decimal = DECIMAL_POINT;\n       u->flags.encoding = ENCODING_DEFAULT;\n       u->flags.async = ASYNC_NO;\n+      u->flags.round = ROUND_COMPATIBLE;\n      \n       u->recl = options.default_recl;\n       u->endfile = NO_ENDFILE;\n@@ -560,6 +562,7 @@ init_units (void)\n       u->flags.decimal = DECIMAL_POINT;\n       u->flags.encoding = ENCODING_DEFAULT;\n       u->flags.async = ASYNC_NO;\n+      u->flags.round = ROUND_COMPATIBLE;\n \n       u->recl = options.default_recl;\n       u->endfile = AT_ENDFILE;\n@@ -589,6 +592,7 @@ init_units (void)\n       u->flags.decimal = DECIMAL_POINT;\n       u->flags.encoding = ENCODING_DEFAULT;\n       u->flags.async = ASYNC_NO;\n+      u->flags.round = ROUND_COMPATIBLE;\n \n       u->recl = options.default_recl;\n       u->endfile = AT_ENDFILE;"}, {"sha": "e6880027a8665b02449f0bb06ef46e632c898882", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 69, "deletions": 14, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/379924dd5991228b5e65fac5815ecac0d389a786/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=379924dd5991228b5e65fac5815ecac0d389a786", "patch": "@@ -68,7 +68,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   char *out;\n   char *digits;\n   int e;\n-  char expchar;\n+  char expchar, rchar;\n   format_token ft;\n   int w;\n   int d;\n@@ -89,6 +89,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   w = f->u.real.w;\n   d = f->u.real.d;\n \n+  rchar = '5';\n   nzero_real = -1;\n \n   /* We should always know the field width and precision.  */\n@@ -235,24 +236,75 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n       internal_error (&dtp->common, \"Unexpected format token\");\n     }\n \n-  /* Round the value.  */\n+  /* Round the value.  The value being rounded is an unsigned magnitude.\n+     The ROUND_COMPATIBLE is rounding away from zero when there is a tie.  */\n+  switch (dtp->u.p.current_unit->round_status)\n+    {\n+      case ROUND_ZERO: /* Do nothing and truncation occurs.  */\n+\tgoto skip;\n+      case ROUND_UP:\n+\tif (sign_bit)\n+\t  goto skip;\n+\trchar = '0';\n+\tbreak;\n+      case ROUND_DOWN:\n+\tif (!sign_bit)\n+\t  goto skip;\n+\trchar = '0';\n+\tbreak;\n+      case ROUND_NEAREST:\n+\t/* Round compatible unless there is a tie. A tie is a 5 with\n+\t   all trailing zero's.  */\n+\ti = nafter + 1;\n+\tif (digits[i] == '5')\n+\t  {\n+\t    for(i++ ; i < ndigits; i++)\n+\t      {\n+\t\tif (digits[i] != '0')\n+\t\t  goto do_rnd;\n+\t      }\n+\t    /* It is a  tie so round to even.  */\n+\t    switch (digits[nafter])\n+\t      {\n+\t\tcase '1':\n+\t\tcase '3':\n+\t\tcase '5':\n+\t\tcase '7':\n+\t\tcase '9':\n+\t\t  /* If odd, round away from zero to even.  */\n+\t\t  break;\n+\t\tdefault:\n+\t\t  /* If even, skip rounding, truncate to even.  */\n+\t\t  goto skip;\n+\t      }\n+\t  }\n+\t /* Fall through.  */ \n+      case ROUND_PROCDEFINED:\n+      case ROUND_UNSPECIFIED:\n+      case ROUND_COMPATIBLE:\n+\trchar = '5';\n+\t/* Just fall through and do the actual rounding.  */\n+    }\n+    \n+  do_rnd:\n+ \n   if (nbefore + nafter == 0)\n     {\n       ndigits = 0;\n-      if (nzero_real == d && digits[0] >= '5')\n-        {\n-          /* We rounded to zero but shouldn't have */\n-          nzero--;\n-          nafter = 1;\n-          digits[0] = '1';\n-          ndigits = 1;\n-        }\n+      if (nzero_real == d && digits[0] >= rchar)\n+\t{\n+\t  /* We rounded to zero but shouldn't have */\n+\t  nzero--;\n+\t  nafter = 1;\n+\t  digits[0] = '1';\n+\t  ndigits = 1;\n+\t}\n     }\n   else if (nbefore + nafter < ndigits)\n     {\n       ndigits = nbefore + nafter;\n       i = ndigits;\n-      if (digits[i] >= '5')\n+      if (digits[i] >= rchar)\n \t{\n \t  /* Propagate the carry.  */\n \t  for (i--; i >= 0; i--)\n@@ -267,9 +319,10 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \n \t  if (i < 0)\n \t    {\n-\t      /* The carry overflowed.  Fortunately we have some spare space\n-\t\t at the start of the buffer.  We may discard some digits, but\n-\t\t this is ok because we already know they are zero.  */\n+\t      /* The carry overflowed.  Fortunately we have some spare\n+\t         space at the start of the buffer.  We may discard some\n+\t         digits, but this is ok because we already know they are\n+\t         zero.  */\n \t      digits--;\n \t      digits[0] = '1';\n \t      if (ft == FMT_F)\n@@ -297,6 +350,8 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t}\n     }\n \n+  skip:\n+\n   /* Calculate the format of the exponent field.  */\n   if (expchar)\n     {"}]}