{"sha": "f7c258b291182308538ff18c3ace76b1c11e699a", "node_id": "C_kwDOANBUbNoAKGY3YzI1OGIyOTExODIzMDg1MzhmZjE4YzNhY2U3NmIxYzExZTY5OWE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-21T12:40:40Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:52Z"}, "message": "gccrs: Add closure binding's tracking to name resolution\n\nWhen we have a closure block referencing variables in a parent function,\nwe must track what these are. We do this by having a context of closures\nso if we have a variable reference and its declared in a rib whose node id\nis less than the node id of the closure's node id we know it must be a\ncaptured variable. We also need to iterate all possible closure contexts\nas we might be in the case of a nested closure.\n\nAddresses #195\n\ngcc/rust/ChangeLog:\n\n\t* resolve/rust-ast-resolve-expr.cc (ResolveExpr::visit): Use proper closure\n\tcontexts.\n\t* resolve/rust-name-resolver.cc (Scope::lookup_decl_type): New function.\n\t(Scope::lookup_rib_for_decl): Likewise.\n\t(Resolver::insert_resolved_name): Insert captured items.\n\t(Resolver::push_closure_context): New function.\n\t(Resolver::pop_closure_context): Likewise.\n\t(Resolver::insert_captured_item): Likewise.\n\t(Resolver::decl_needs_capture): Likewise.\n\t(Resolver::get_captures): Likewise.\n\t* resolve/rust-name-resolver.h: Declare new functions.", "tree": {"sha": "44ad68a4642decc066855aded1eb396185c8ba7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ad68a4642decc066855aded1eb396185c8ba7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7c258b291182308538ff18c3ace76b1c11e699a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c258b291182308538ff18c3ace76b1c11e699a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7c258b291182308538ff18c3ace76b1c11e699a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c258b291182308538ff18c3ace76b1c11e699a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a4659c5e405771dc8c83568b30efefc77a2031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a4659c5e405771dc8c83568b30efefc77a2031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a4659c5e405771dc8c83568b30efefc77a2031"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "536c828beb485206a25a21fd8bae56e303ee8dcf", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c258b291182308538ff18c3ace76b1c11e699a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c258b291182308538ff18c3ace76b1c11e699a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=f7c258b291182308538ff18c3ace76b1c11e699a", "patch": "@@ -581,9 +581,13 @@ ResolveExpr::visit (AST::ClosureExprInner &expr)\n       resolve_closure_param (p);\n     }\n \n+  resolver->push_closure_context (expr.get_node_id ());\n+\n   ResolveExpr::go (expr.get_definition_expr ().get (), prefix,\n \t\t   canonical_prefix);\n \n+  resolver->pop_closure_context ();\n+\n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n   resolver->get_label_scope ().pop ();\n@@ -606,9 +610,14 @@ ResolveExpr::visit (AST::ClosureExprInnerTyped &expr)\n     }\n \n   ResolveType::go (expr.get_return_type ().get ());\n+\n+  resolver->push_closure_context (expr.get_node_id ());\n+\n   ResolveExpr::go (expr.get_definition_block ().get (), prefix,\n \t\t   canonical_prefix);\n \n+  resolver->pop_closure_context ();\n+\n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n   resolver->get_label_scope ().pop ();"}, {"sha": "b8ed3538f7497a97e514905dff7a0a1df3175db2", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c258b291182308538ff18c3ace76b1c11e699a/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c258b291182308538ff18c3ace76b1c11e699a/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=f7c258b291182308538ff18c3ace76b1c11e699a", "patch": "@@ -169,6 +169,39 @@ Scope::lookup (const CanonicalPath &ident, NodeId *id)\n   return lookup != UNKNOWN_NODEID;\n }\n \n+bool\n+Scope::lookup_decl_type (NodeId id, Rib::ItemType *type)\n+{\n+  bool found = false;\n+  iterate ([&] (const Rib *r) -> bool {\n+    if (r->decl_was_declared_here (id))\n+      {\n+\tbool ok = r->lookup_decl_type (id, type);\n+\trust_assert (ok);\n+\tfound = true;\n+\treturn false;\n+      }\n+    return true;\n+  });\n+  return found;\n+}\n+\n+bool\n+Scope::lookup_rib_for_decl (NodeId id, const Rib **rib)\n+{\n+  bool found = false;\n+  iterate ([&] (const Rib *r) -> bool {\n+    if (r->decl_was_declared_here (id))\n+      {\n+\t*rib = r;\n+\tfound = true;\n+\treturn false;\n+      }\n+    return true;\n+  });\n+  return found;\n+}\n+\n void\n Scope::iterate (std::function<bool (Rib *)> cb)\n {\n@@ -435,6 +468,7 @@ Resolver::insert_resolved_name (NodeId refId, NodeId defId)\n {\n   resolved_names[refId] = defId;\n   get_name_scope ().append_reference_for_def (refId, defId);\n+  insert_captured_item (defId);\n }\n \n bool\n@@ -531,5 +565,104 @@ Resolver::lookup_resolved_misc (NodeId refId, NodeId *defId)\n   return true;\n }\n \n+void\n+Resolver::push_closure_context (NodeId closure_expr_id)\n+{\n+  auto it = closures_capture_mappings.find (closure_expr_id);\n+  rust_assert (it == closures_capture_mappings.end ());\n+\n+  closures_capture_mappings.insert ({closure_expr_id, {}});\n+  closure_context.push_back (closure_expr_id);\n+}\n+\n+void\n+Resolver::pop_closure_context ()\n+{\n+  rust_assert (!closure_context.empty ());\n+  closure_context.pop_back ();\n+}\n+\n+void\n+Resolver::insert_captured_item (NodeId id)\n+{\n+  // nothing to do unless we are in a closure context\n+  if (closure_context.empty ())\n+    return;\n+\n+  // check that this is a VAR_DECL?\n+  Scope &name_scope = get_name_scope ();\n+  Rib::ItemType type = Rib::ItemType::Unknown;\n+  bool found = name_scope.lookup_decl_type (id, &type);\n+  if (!found)\n+    return;\n+\n+  // RIB Function { let a, let b } id = 1;\n+  //   RIB Closure { let c } id = 2;\n+  //     RIB IfStmt { <bind a>} id = 3;\n+  //   RIB ... { ... } id = 4\n+  //\n+  // if we have a resolved_node_id of 'a' and the current rib is '3' we know\n+  // this is binding exists in a rib with id < the closure rib id, other wise\n+  // its just a normal binding and we don't care\n+  //\n+  // Problem the node id's dont work like this because the inner most items are\n+  // created first so this means the root will have a larger id and a simple\n+  // less than or greater than check wont work for more complex scoping cases\n+  // but we can use our current rib context to figure this out by checking if\n+  // the rib id the decl we care about exists prior to the rib for the closure\n+  // id\n+\n+  const Rib *r = nullptr;\n+  bool ok = name_scope.lookup_rib_for_decl (id, &r);\n+  rust_assert (ok);\n+  NodeId decl_rib_node_id = r->get_node_id ();\n+\n+  // iterate the closure context and add in the mapping for all to handle the\n+  // case of nested closures\n+  for (auto &closure_expr_id : closure_context)\n+    {\n+      if (!decl_needs_capture (decl_rib_node_id, closure_expr_id, name_scope))\n+\tcontinue;\n+\n+      // is this a valid binding to take\n+      bool is_var_decl_p = type == Rib::ItemType::Var;\n+      if (!is_var_decl_p)\n+\t{\n+\t  // FIXME is this an error case?\n+\t  return;\n+\t}\n+\n+      // append it to the context info\n+      auto it = closures_capture_mappings.find (closure_expr_id);\n+      rust_assert (it != closures_capture_mappings.end ());\n+\n+      it->second.insert (id);\n+    }\n+}\n+\n+bool\n+Resolver::decl_needs_capture (NodeId decl_rib_node_id,\n+\t\t\t      NodeId closure_rib_node_id, const Scope &scope)\n+{\n+  for (const auto &rib : scope.get_context ())\n+    {\n+      bool rib_is_closure = rib->get_node_id () == closure_rib_node_id;\n+      bool rib_is_decl = rib->get_node_id () == decl_rib_node_id;\n+      if (rib_is_closure)\n+\treturn false;\n+      else if (rib_is_decl)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+const std::set<NodeId> &\n+Resolver::get_captures (NodeId id) const\n+{\n+  auto it = closures_capture_mappings.find (id);\n+  rust_assert (it != closures_capture_mappings.end ());\n+  return it->second;\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "f38cbb941bf01fb6ea8dab0ea9ef87914c5961ff", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c258b291182308538ff18c3ace76b1c11e699a/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c258b291182308538ff18c3ace76b1c11e699a/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=f7c258b291182308538ff18c3ace76b1c11e699a", "patch": "@@ -96,6 +96,8 @@ class Scope\n   void insert (const CanonicalPath &ident, NodeId id, Location locus,\n \t       Rib::ItemType type = Rib::ItemType::Unknown);\n   bool lookup (const CanonicalPath &ident, NodeId *id);\n+  bool lookup_decl_type (NodeId id, Rib::ItemType *type);\n+  bool lookup_rib_for_decl (NodeId id, const Rib **rib);\n \n   void iterate (std::function<bool (Rib *)> cb);\n   void iterate (std::function<bool (const Rib *)> cb) const;\n@@ -109,6 +111,8 @@ class Scope\n \n   CrateNum get_crate_num () const { return crate_num; }\n \n+  const std::vector<Rib *> &get_context () const { return stack; };\n+\n private:\n   CrateNum crate_num;\n   std::vector<Rib *> stack;\n@@ -191,6 +195,15 @@ class Resolver\n     return current_module_stack.at (current_module_stack.size () - 2);\n   }\n \n+  void push_closure_context (NodeId closure_expr_id);\n+  void pop_closure_context ();\n+  void insert_captured_item (NodeId id);\n+  const std::set<NodeId> &get_captures (NodeId id) const;\n+\n+protected:\n+  bool decl_needs_capture (NodeId decl_rib_node_id, NodeId closure_rib_node_id,\n+\t\t\t   const Scope &scope);\n+\n private:\n   Resolver ();\n \n@@ -234,6 +247,10 @@ class Resolver\n \n   // keep track of the current module scope ids\n   std::vector<NodeId> current_module_stack;\n+\n+  // captured variables mappings\n+  std::vector<NodeId> closure_context;\n+  std::map<NodeId, std::set<NodeId>> closures_capture_mappings;\n };\n \n } // namespace Resolver"}]}