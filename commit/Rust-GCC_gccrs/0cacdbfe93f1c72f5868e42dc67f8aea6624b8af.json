{"sha": "0cacdbfe93f1c72f5868e42dc67f8aea6624b8af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhY2RiZmU5M2YxYzcyZjU4NjhlNDJkYzY3ZjhhZWE2NjI0YjhhZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-02-21T08:42:54Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-02-21T08:42:54Z"}, "message": "re PR ada/67205 (eliminate No_Implicit_Dynamic_Code restriction violations)\n\n\tPR ada/67205\n\t* config/arm/arm.c (TARGET_CUSTOM_FUNCTION_DESCRIPTORS): Define.\n\t(arm_function_ok_for_sibcall): Return false for an indirect call by\n\tdescriptor if all the argument registers are used.\n\t(arm_relayout_function): Use FUNCTION_ALIGNMENT macro to adjust the\n\talignment of the function.\n\nFrom-SVN: r245621", "tree": {"sha": "3a676c1f933a6c31fed21a5aa876e38b5f63efe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a676c1f933a6c31fed21a5aa876e38b5f63efe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af/comments", "author": null, "committer": null, "parents": [{"sha": "4cd2eefc85eb5c4aba46213126b794393cf5a909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd2eefc85eb5c4aba46213126b794393cf5a909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd2eefc85eb5c4aba46213126b794393cf5a909"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "d23fcbf925d975b21a1cbad199c5ef91a3d7cb8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cacdbfe93f1c72f5868e42dc67f8aea6624b8af", "patch": "@@ -1,3 +1,12 @@\n+2017-02-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/67205\n+\t* config/arm/arm.c (TARGET_CUSTOM_FUNCTION_DESCRIPTORS): Define.\n+\t(arm_function_ok_for_sibcall): Return false for an indirect call by\n+\tdescriptor if all the argument registers are used.\n+\t(arm_relayout_function): Use FUNCTION_ALIGNMENT macro to adjust the\n+\talignment of the function.\n+\n 2017-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/61441"}, {"sha": "b397a73052dcfb2e356884c929fdeee9356c5cc6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cacdbfe93f1c72f5868e42dc67f8aea6624b8af/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0cacdbfe93f1c72f5868e42dc67f8aea6624b8af", "patch": "@@ -760,6 +760,11 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_C_EXCESS_PRECISION\n #define TARGET_C_EXCESS_PRECISION arm_excess_precision\n \n+/* Although the architecture reserves bits 0 and 1, only the former is\n+   used for ARM/Thumb ISA selection in v7 and earlier versions.  */\n+#undef TARGET_CUSTOM_FUNCTION_DESCRIPTORS\n+#define TARGET_CUSTOM_FUNCTION_DESCRIPTORS 2\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -7173,6 +7178,29 @@ arm_function_ok_for_sibcall (tree decl, tree exp)\n       && DECL_WEAK (decl))\n     return false;\n \n+  /* We cannot do a tailcall for an indirect call by descriptor if all the\n+     argument registers are used because the only register left to load the\n+     address is IP and it will already contain the static chain.  */\n+  if (!decl && CALL_EXPR_BY_DESCRIPTOR (exp) && !flag_trampolines)\n+    {\n+      tree fntype = TREE_TYPE (TREE_TYPE (CALL_EXPR_FN (exp)));\n+      CUMULATIVE_ARGS cum;\n+      cumulative_args_t cum_v;\n+\n+      arm_init_cumulative_args (&cum, fntype, NULL_RTX, NULL_TREE);\n+      cum_v = pack_cumulative_args (&cum);\n+\n+      for (tree t = TYPE_ARG_TYPES (fntype); t; t = TREE_CHAIN (t))\n+\t{\n+\t  tree type = TREE_VALUE (t);\n+\t  if (!VOID_TYPE_P (type))\n+\t    arm_function_arg_advance (cum_v, TYPE_MODE (type), type, true);\n+\t}\n+\n+      if (!arm_function_arg (cum_v, SImode, integer_type_node, true))\n+\treturn false;\n+    }\n+\n   /* Everything else is ok.  */\n   return true;\n }\n@@ -30310,7 +30338,9 @@ arm_relayout_function (tree fndecl)\n     callee_tree = target_option_default_node;\n \n   struct cl_target_option *opts = TREE_TARGET_OPTION (callee_tree);\n-  SET_DECL_ALIGN (fndecl, FUNCTION_BOUNDARY_P (opts->x_target_flags));\n+  SET_DECL_ALIGN\n+    (fndecl,\n+     FUNCTION_ALIGNMENT (FUNCTION_BOUNDARY_P (opts->x_target_flags)));\n }\n \n /* Inner function to process the attribute((target(...))), take an argument and"}]}