{"sha": "dde19676a42bf503b1a3ab3c901fc9d39740e569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlMTk2NzZhNDJiZjUwM2IxYTNhYjNjOTAxZmM5ZDM5NzQwZTU2OQ==", "commit": {"author": {"name": "Wei Mi", "email": "wmi@google.com", "date": "2012-11-21T17:46:00Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2012-11-21T17:46:00Z"}, "message": "common.opt: Change faddress-sanitizer to fsanitize=address.\n\n\n\t* common.opt: Change faddress-sanitizer to fsanitize=address.\n\t* toplev.c (process_options): Likewise.\n\t* gcc.c (LINK_COMMAND_SPEC): Likewise.\n\t* testsuite/lib/asan-dg.exp\n\t(check_effective_target_faddress_sanitizer): Likewise.\n\t(asan_init): Likewise.\n\t* doc/invoke.texi (-fsanitize=address): Document.\n\nFrom-SVN: r193702", "tree": {"sha": "395e60bc75ff67ffb087dd4dbf356ef284d9d21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/395e60bc75ff67ffb087dd4dbf356ef284d9d21f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dde19676a42bf503b1a3ab3c901fc9d39740e569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde19676a42bf503b1a3ab3c901fc9d39740e569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde19676a42bf503b1a3ab3c901fc9d39740e569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde19676a42bf503b1a3ab3c901fc9d39740e569/comments", "author": {"login": "wmi-11", "id": 59629650, "node_id": "MDQ6VXNlcjU5NjI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/59629650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmi-11", "html_url": "https://github.com/wmi-11", "followers_url": "https://api.github.com/users/wmi-11/followers", "following_url": "https://api.github.com/users/wmi-11/following{/other_user}", "gists_url": "https://api.github.com/users/wmi-11/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmi-11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmi-11/subscriptions", "organizations_url": "https://api.github.com/users/wmi-11/orgs", "repos_url": "https://api.github.com/users/wmi-11/repos", "events_url": "https://api.github.com/users/wmi-11/events{/privacy}", "received_events_url": "https://api.github.com/users/wmi-11/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb20b7788fe0a9f43657668207677833e3881741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb20b7788fe0a9f43657668207677833e3881741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb20b7788fe0a9f43657668207677833e3881741"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "25dda30062c76f2d53e1aab577f311e835a128a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dde19676a42bf503b1a3ab3c901fc9d39740e569", "patch": "@@ -1,3 +1,13 @@\n+2012-11-21  Wei Mi  <wmi@google.com>\n+\n+\t* common.opt: Change faddress-sanitizer to fsanitize=address.\n+\t* toplev.c (process_options): Likewise.\n+\t* gcc.c (LINK_COMMAND_SPEC): Likewise.\n+\t* testsuite/lib/asan-dg.exp\n+\t(check_effective_target_faddress_sanitizer): Likewise.\n+\t(asan_init): Likewise.\n+\t* doc/invoke.texi (-fsanitize=address): Document.\n+\n 2012-11-21  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.h (struct ipa_node_params): Rename clone_for_all_contexts to"}, {"sha": "d3ad5ab588bc4d2165f0b9bb10d1ca034f1d8c05", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=dde19676a42bf503b1a3ab3c901fc9d39740e569", "patch": "@@ -840,7 +840,7 @@ fargument-noalias-anything\n Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n-faddress-sanitizer\n+fsanitize=address\n Common Report Var(flag_asan)\n Enable AddressSanitizer, a memory error detector\n "}, {"sha": "a1c59f005c89d5b9483065eca5a14b2cb9f64356", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dde19676a42bf503b1a3ab3c901fc9d39740e569", "patch": "@@ -289,7 +289,8 @@ Objective-C and Objective-C++ Dialects}.\n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n--faddress-sanitizer -fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n+-fsanitize=@var{style} @gol\n+-fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n -fdisable-ipa-@var{pass_name} @gol\n -fdisable-rtl-@var{pass_name} @gol\n -fdisable-rtl-@var{pass-name}=@var{range-list} @gol\n@@ -6855,7 +6856,7 @@ assumptions based on that.\n \n The default is @option{-fzero-initialized-in-bss}.\n \n-@item -faddress-sanitizer\n+@item -fsanitize=address\n Enable AddressSanitizer, a fast memory error detector.\n Memory access instructions will be instrumented to detect\n out-of-bounds and use-after-free bugs. So far only heap bugs will be detected.\n@@ -9938,7 +9939,7 @@ for the languages used in the program, or using the option\n @file{libgcc}.\n \n @item -static-libasan\n-When the @option{-faddress-sanitizer} option is used to link a program,\n+When the @option{-fsanitize=address} option is used to link a program,\n the GCC driver automatically links against @option{libasan}.  If\n @file{libasan} is available as a shared library, and the @option{-static}\n option is not used, then this links against the shared version of"}, {"sha": "0f8bcea81ded3be50c68985b249dc0e75a54a2ff", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=dde19676a42bf503b1a3ab3c901fc9d39740e569", "patch": "@@ -696,7 +696,7 @@ proper position among the other output files.  */\n     %{fgnu-tm:%:include(libitm.spec)%(link_itm)}\\\n     %(mflib) \" STACK_SPLIT_SPEC \"\\\n     %{fprofile-arcs|fprofile-generate*|coverage:-lgcov}\\\n-    %{faddress-sanitizer:\" LIBASAN_SPEC \"}\\\n+    %{fsanitize=address:\" LIBASAN_SPEC \"}\\\n     %{!nostdlib:%{!nodefaultlibs:%(link_ssp) %(link_gcc_c_sequence)}}\\\n     %{!nostdlib:%{!nostartfiles:%E}} %{T*} }}}}}}\"\n #endif"}, {"sha": "9a435d2dc0c162ede7aea35bd28e7ae5db2be867", "filename": "gcc/testsuite/lib/asan-dg.exp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp?ref=dde19676a42bf503b1a3ab3c901fc9d39740e569", "patch": "@@ -14,13 +14,13 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Return 1 if compilation with -faddress-sanitizer is error-free for trivial\n+# Return 1 if compilation with -fsanitize=address is error-free for trivial\n # code, 0 otherwise.\n \n proc check_effective_target_faddress_sanitizer {} {\n     return [check_no_compiler_messages faddress_sanitizer object {\n \tvoid foo (void) { }\n-    } \"-faddress-sanitizer\"]\n+    } \"-fsanitize=address\"]\n }\n \n #\n@@ -83,12 +83,12 @@ proc asan_init { args } {\n     }\n     if [info exists ALWAYS_CXXFLAGS] {\n \tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n-\tset ALWAYS_CXXFLAGS [concat \"{additional_flags=-faddress-sanitizer -g}\" $ALWAYS_CXXFLAGS]\n+\tset ALWAYS_CXXFLAGS [concat \"{additional_flags=-fsanitize=address -g}\" $ALWAYS_CXXFLAGS]\n     } else {\n \tif [info exists TEST_ALWAYS_FLAGS] {\n-\t    set TEST_ALWAYS_FLAGS \"$link_flags -faddress-sanitizer -g $TEST_ALWAYS_FLAGS\"\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags -fsanitize=address -g $TEST_ALWAYS_FLAGS\"\n \t} else {\n-\t    set TEST_ALWAYS_FLAGS \"$link_flags -faddress-sanitizer -g\"\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags -fsanitize=address -g\"\n \t}\n     }\n }"}, {"sha": "fcdbd1aea5462f368241c59a47d24e5f13cebba7", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dde19676a42bf503b1a3ab3c901fc9d39740e569/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dde19676a42bf503b1a3ab3c901fc9d39740e569", "patch": "@@ -1549,7 +1549,7 @@ process_options (void)\n       && (targetm.asan_shadow_offset == NULL\n \t  || !FRAME_GROWS_DOWNWARD))\n     {\n-      warning (0, \"-faddress-sanitizer not supported for this target\");\n+      warning (0, \"-fsanitize=address not supported for this target\");\n       flag_asan = 0;\n     }\n "}]}