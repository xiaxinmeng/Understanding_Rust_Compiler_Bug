{"sha": "8097c429f9d704e89573dacbf5a161fbd0ae43b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5N2M0MjlmOWQ3MDRlODk1NzNkYWNiZjVhMTYxZmJkMGFlNDNiMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-03-26T23:23:01Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-03-26T23:23:01Z"}, "message": "gcc.c (handle_braces): Recognize `%{<S}' construct.\n\n\t* gcc.c (handle_braces): Recognize `%{<S}' construct.\n\t(SWITCH_OK, SWITCH_FALSE, SWITCH_IGNORE, SWITCH_LIVE): New\n\tdefines.\n\t(process_command): Use them.\n\t(check_live_switch): Likewise.\n\t(give_switch): Skip ignored switches.\n\nFrom-SVN: r32756", "tree": {"sha": "2101d0cbace98a2583f9661420a58e4b58bf7261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2101d0cbace98a2583f9661420a58e4b58bf7261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8097c429f9d704e89573dacbf5a161fbd0ae43b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8097c429f9d704e89573dacbf5a161fbd0ae43b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8097c429f9d704e89573dacbf5a161fbd0ae43b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8097c429f9d704e89573dacbf5a161fbd0ae43b0/comments", "author": null, "committer": null, "parents": [{"sha": "751b8992ffc1ccd28c6343520005a4665da3c6e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751b8992ffc1ccd28c6343520005a4665da3c6e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/751b8992ffc1ccd28c6343520005a4665da3c6e6"}], "stats": {"total": 84, "additions": 67, "deletions": 17}, "files": [{"sha": "9525ba5bcc34f70f241e382fb695d6386942005a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8097c429f9d704e89573dacbf5a161fbd0ae43b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8097c429f9d704e89573dacbf5a161fbd0ae43b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8097c429f9d704e89573dacbf5a161fbd0ae43b0", "patch": "@@ -1,3 +1,12 @@\n+2000-03-26  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gcc.c (handle_braces): Recognize `%{<S}' construct.\n+\t(SWITCH_OK, SWITCH_FALSE, SWITCH_IGNORE, SWITCH_LIVE): New\n+\tdefines.\n+\t(process_command): Use them.\n+\t(check_live_switch): Likewise.\n+\t(give_switch): Skip ignored switches.\n+\n 2000-03-26  Jan Hubicka  <jh@suse.cz>\n \n \t* jump.c (jump_optimize_1): Fix typo in elide optimizations\n@@ -41,7 +50,6 @@ Sun Mar 26 11:37:55 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* jump.c (mark_all_labels): Handle CALL_PLACEHOLDERs.\n \n-\n Sat Mar 25 09:12:10 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* Rework fields used to describe positions of bitfields and"}, {"sha": "b7bc24271102ee5ffcc41ca1fdb066459299440a", "filename": "gcc/gcc.c", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8097c429f9d704e89573dacbf5a161fbd0ae43b0/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8097c429f9d704e89573dacbf5a161fbd0ae43b0/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=8097c429f9d704e89573dacbf5a161fbd0ae43b0", "patch": "@@ -366,6 +366,10 @@ or with constant text in a single argument.\n \tspecified to CC.  Note that the tail part of the -S option\n \t(i.e. the part matched by the `*') will be substituted for each\n \toccurrence of %* within X.\n+ %{<S}  remove all occurences of S from the command line.\n+        Note - this option is position dependent.  % commands in the\n+        spec string before this option will see S, % commands in the\n+        spec string after this option will not.\n  %{S:X} substitutes X, but only if the -S switch was given to CC.\n  %{!S:X} substitutes X, but only if the -S switch was NOT given to CC.\n  %{|S:X} like %{S:X}, but if no S switch, substitute `-'.\n@@ -2639,11 +2643,19 @@ execute ()\n    If a switch uses following arguments, then the `part1' field\n    is the switch itself and the `args' field\n    is a null-terminated vector containing the following arguments.\n-   The `live_cond' field is 1 if the switch is true in a conditional spec,\n-   -1 if false (overridden by a later switch), and is initialized to zero.\n+   The `live_cond' field is:\n+   0 when initialized\n+   1 if the switch is true in a conditional spec,\n+   -1 if false (overridden by a later switch)\n+   -2 if this switch should be ignored (used in %{<S})\n    The `validated' field is nonzero if any spec has looked at this switch;\n    if it remains zero at the end of the run, it must be meaningless.  */\n \n+#define SWITCH_OK       0\n+#define SWITCH_FALSE   -1\n+#define SWITCH_IGNORE  -2\n+#define SWITCH_LIVE     1\n+\n struct switchstr\n {\n   const char *part1;\n@@ -3465,7 +3477,7 @@ process_command (argc, argv)\n \t\t cc1 spec string.  */\n \t      switches[n_switches].part1     = \"--help\";\n \t      switches[n_switches].args      = 0;\n-\t      switches[n_switches].live_cond = 0;\n+\t      switches[n_switches].live_cond = SWITCH_OK;\n \t      switches[n_switches].validated     = 0;\n \t      \n \t      n_switches++;\n@@ -3480,7 +3492,7 @@ process_command (argc, argv)\n \t     -e0 or -e1 down into the linker.  */\n \t  switches[n_switches].part1 = &argv[i][0];\n \t  switches[n_switches].args = 0;\n-\t  switches[n_switches].live_cond = 0;\n+\t  switches[n_switches].live_cond = SWITCH_OK;\n \t  switches[n_switches].validated = 0;\n \t  n_switches++;\n \t}\n@@ -3589,7 +3601,7 @@ process_command (argc, argv)\n \t  else\n \t    switches[n_switches].args = 0;\n \n-\t  switches[n_switches].live_cond = 0;\n+\t  switches[n_switches].live_cond = SWITCH_OK;\n \t  switches[n_switches].validated = 0;\n \t  /* This is always valid, since gcc.c itself understands it.  */\n \t  if (!strcmp (p, \"save-temps\"))\n@@ -4601,16 +4613,31 @@ handle_braces (p)\n   int negate;\n   int suffix;\n   int include_blanks = 1;\n+  int elide_switch = 0;\n \n   if (*p == '^')\n-    /* A '^' after the open-brace means to not give blanks before args.  */\n-    include_blanks = 0, ++p;\n+    {\n+      /* A '^' after the open-brace means to not give blanks before args.  */\n+      include_blanks = 0;\n+      ++p;\n+    }\n \n   if (*p == '|')\n-    /* A `|' after the open-brace means,\n-       if the test fails, output a single minus sign rather than nothing.\n-       This is used in %{|!pipe:...}.  */\n-    pipe_p = 1, ++p;\n+    {\n+      /* A `|' after the open-brace means,\n+\t if the test fails, output a single minus sign rather than nothing.\n+\t This is used in %{|!pipe:...}.  */\n+      pipe_p = 1;\n+      ++p;\n+    }\n+\n+  if (*p == '<')\n+    {\n+      /* A `<' after the open-brace means that the switch should be\n+\t removed from the command-line.  */\n+      elide_switch = 1;\n+      ++p;\n+    }\n \n next_member:\n   negate = suffix = 0;\n@@ -4630,6 +4657,13 @@ handle_braces (p)\n       ++p;\n     }\n \n+  if (elide_switch && (negate || pipe_p || suffix))\n+    {\n+      /* It doesn't make sense to mix elision with other flags.  We\n+\t could fatal() here, but the standard seems to be to abort.  */\n+      abort ();\n+    }\n+\n   filter = p;\n   while (*p != ':' && *p != '}' && *p != '|') p++;\n \n@@ -4767,7 +4801,12 @@ handle_braces (p)\n \t conditional text.  */\n       if (present != negate)\n \t{\n-\t  if (*p == '}')\n+\t  if (elide_switch)\n+\t    {\n+\t      switches[i].live_cond = SWITCH_IGNORE;\n+\t      switches[i].validated = 1;\n+\t    }\n+\t  else if (*p == '}')\n \t    {\n \t      give_switch (i, 0, include_blanks);\n \t    }\n@@ -4829,7 +4868,7 @@ check_live_switch (switchnum, prefix_length)\n \t  if (switches[i].part1[0] == 'O')\n \t    {\n \t      switches[switchnum].validated = 1;\n-\t      switches[switchnum].live_cond = -1;\n+\t      switches[switchnum].live_cond = SWITCH_FALSE;\n \t      return 0;\n \t    }\n       break;\n@@ -4843,7 +4882,7 @@ check_live_switch (switchnum, prefix_length)\n \t\t&& ! strcmp (&switches[i].part1[1], &name[4]))\n \t    {\n \t      switches[switchnum].validated = 1;\n-\t      switches[switchnum].live_cond = -1;\n+\t      switches[switchnum].live_cond = SWITCH_FALSE;\n \t      return 0;\n \t    }\n \t}\n@@ -4858,15 +4897,15 @@ check_live_switch (switchnum, prefix_length)\n \t\t&& !strcmp (&switches[i].part1[4], &name[1]))\n \t    {\n \t      switches[switchnum].validated = 1;\n-\t      switches[switchnum].live_cond = -1;\n+\t      switches[switchnum].live_cond = SWITCH_FALSE;\n \t      return 0;\n \t    }\n \t}\n       break;\n     }\n \n   /* Otherwise the switch is live.  */\n-  switches[switchnum].live_cond = 1;\n+  switches[switchnum].live_cond = SWITCH_LIVE;\n   return 1;\n }\n \f\n@@ -4887,6 +4926,9 @@ give_switch (switchnum, omit_first_word, include_blanks)\n      int omit_first_word;\n      int include_blanks;\n {\n+  if (switches[switchnum].live_cond == SWITCH_IGNORE)\n+    return;\n+\n   if (!omit_first_word)\n     {\n       do_spec_1 (\"-\", 0, NULL_PTR);"}]}