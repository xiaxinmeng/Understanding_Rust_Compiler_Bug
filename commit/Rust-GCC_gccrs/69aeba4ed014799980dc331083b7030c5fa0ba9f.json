{"sha": "69aeba4ed014799980dc331083b7030c5fa0ba9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhZWJhNGVkMDE0Nzk5OTgwZGMzMzEwODNiNzAzMGM1ZmEwYmE5Zg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-09-13T11:39:47Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-09-13T11:39:47Z"}, "message": "DatagramPacket.java (DatagramPacket): Added linebreak for 80 chars per line.\n\n2002-09-13  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramPacket.java (DatagramPacket):\n\tAdded linebreak for 80 chars per line.\n\t* java/net/JarURLConection.java\n\t(getInputStream, getJarEntry): Likewise.\n\t* java/net/SocketPermission.java\n\t(SocketPermission class docu, implies): Likewise.\n\t* java/net/URLClassLoader.java (findResources): Likewise.\n\t* java/net/URLConnection.java: Reindendet remark for 80 chars per line\n\nFrom-SVN: r57105", "tree": {"sha": "41affa8438973e7e04452716f303f7abd89a4874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41affa8438973e7e04452716f303f7abd89a4874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69aeba4ed014799980dc331083b7030c5fa0ba9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69aeba4ed014799980dc331083b7030c5fa0ba9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69aeba4ed014799980dc331083b7030c5fa0ba9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69aeba4ed014799980dc331083b7030c5fa0ba9f/comments", "author": null, "committer": null, "parents": [{"sha": "a1c65f9f4f4673cab2f40a4b02bbb7445edc1b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c65f9f4f4673cab2f40a4b02bbb7445edc1b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c65f9f4f4673cab2f40a4b02bbb7445edc1b81"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "78f0f1611863d7f01f3eb15a4c7a260886fe75ca", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=69aeba4ed014799980dc331083b7030c5fa0ba9f", "patch": "@@ -1,3 +1,14 @@\n+2002-09-13  Michael Koch  <konqueror@gmx.de>\n+\t\n+\t* java/net/DatagramPacket.java (DatagramPacket):\n+\tAdded linebreak for 80 chars per line.\n+\t* java/net/JarURLConection.java\n+\t(getInputStream, getJarEntry): Likewise.\n+\t* java/net/SocketPermission.java\n+\t(SocketPermission class docu, implies): Likewise.\n+\t* java/net/URLClassLoader.java (findResources): Likewise.\n+\t* java/net/URLConnection.java: Reindendet remark for 80 chars per line\n+\n 2002-09-13  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/channels/DatagramChannel.java,"}, {"sha": "836f5dd66b8e88596558078ea972aa692a86d262", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=69aeba4ed014799980dc331083b7030c5fa0ba9f", "patch": "@@ -198,7 +198,8 @@ public DatagramPacket(byte[] buf, int length, InetAddress address, int port)\n    *\n    * @since 1.4\n    */\n-  public DatagramPacket(byte[] buf, int offset, int length, SocketAddress address)\n+  public DatagramPacket(byte[] buf, int offset, int length,\n+\t\t        SocketAddress address)\n      throws SocketException\n   {\n     this(buf, offset, length, ((InetSocketAddress)address).getAddress(),"}, {"sha": "c5597d636dfe935611f3a8383f8438affd5cd490", "filename": "libjava/java/net/JarURLConnection.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FJarURLConnection.java?ref=69aeba4ed014799980dc331083b7030c5fa0ba9f", "patch": "@@ -106,7 +106,8 @@ public InputStream getInputStream() throws IOException\n       {\n \t// This is a JarURLConnection for the entire jar file.  \n \n-\tInputStream jar_is = new BufferedInputStream(jarFileURLConnection.getInputStream ());\n+\tInputStream jar_is = new BufferedInputStream(\n+\t\t\tjarFileURLConnection.getInputStream ());\n \treturn new JarInputStream(jar_is);\n       }\n \n@@ -131,7 +132,8 @@ public InputStream getInputStream() throws IOException\n     else\n       {\n \t// If the jar file is not local, ...\n-\tJarInputStream zis = new JarInputStream(jarFileURLConnection.getInputStream ());\n+\tJarInputStream zis = new JarInputStream(\n+\t\t\tjarFileURLConnection.getInputStream ());\n \n \t// This is hideous, we're doing a linear search...\n \tfor (ZipEntry ent = zis.getNextEntry (); \n@@ -172,7 +174,8 @@ public JarEntry getJarEntry () throws java.io.IOException\n     \n     if (jarfile == null)\n       {\n-\tJarInputStream zis = new JarInputStream(jarFileURLConnection.getInputStream ());\n+\tJarInputStream zis = new JarInputStream(\n+\t\t\tjarFileURLConnection.getInputStream ());\n \n \t// This is hideous, we're doing a linear search for the thing...\n \tfor (ZipEntry ent = zis.getNextEntry (); "}, {"sha": "002a99c15cf77ca03002f1d50ab9613e442c9b8e", "filename": "libjava/java/net/SocketPermission.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FSocketPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FSocketPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketPermission.java?ref=69aeba4ed014799980dc331083b7030c5fa0ba9f", "patch": "@@ -87,7 +87,8 @@\n  * SocketPermission(\"www.urbanophile.com:80\", \"connect,accept\");\n  *   Can connect to or accept connections from www.urbanophile.com on port 80\n  * SocketPermission(\"localhost:1024-\", \"listen,accept,connect\");\n- *   Can connect to, accept from, an listen on any local port number 1024 and up.\n+ *   Can connect to, accept from, an listen on any local port number 1024\n+ *   and up.\n  * SocketPermission(\"*.edu\", \"connect\");\n  *   Can connect to any host in the edu domain\n  * SocketPermission(\"197.197.20.1\", \"accept\");\n@@ -241,7 +242,8 @@ public PermissionCollection newPermissionCollection()\n    * <p><ul>\n    * <li>The argument's hostname or IP address is equal to this object's.\n    * <li>The argument's canonical hostname is equal to this object's.\n-   * <li>The argument's canonical name matches this domains hostname with wildcards\n+   * <li>The argument's canonical name matches this domains hostname with\n+   * wildcards\n    * </ul>\n    *\n    * @param perm The Permission to check against"}, {"sha": "0b66af6c2ba0001aa7c419c48bcfabd632860b07", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=69aeba4ed014799980dc331083b7030c5fa0ba9f", "patch": "@@ -165,7 +165,8 @@ public Enumeration findResources (String name)\n \t  if (conn != null)\n \t    {\n \t      if (conn.getJarFile().getJarEntry (name) != null)\n-\t\tresults.addElement (new URL(u, name, getHandler0 (u.getProtocol())));\n+\t\tresults.addElement (new URL(u, name,\n+\t\t\t\t\tgetHandler0 (u.getProtocol())));\n \t    }\n \t  else\n \t    {"}, {"sha": "548479d635dfffee317dc912dd3f20d8e5949fe7", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69aeba4ed014799980dc331083b7030c5fa0ba9f/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=69aeba4ed014799980dc331083b7030c5fa0ba9f", "patch": "@@ -32,7 +32,7 @@\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  One guessContentTypeFrom... methods not implemented.\n- *\tgetContent method assumes content type from response; see comment there.\n+ *    getContent method assumes content type from response; see comment there.\n  */\n \n public abstract class URLConnection"}]}