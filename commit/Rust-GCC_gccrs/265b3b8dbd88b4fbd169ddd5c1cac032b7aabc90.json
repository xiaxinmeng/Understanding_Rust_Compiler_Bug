{"sha": "265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1YjNiOGRiZDg4YjRmYmQxNjlkZGQ1YzFjYWMwMzJiN2FhYmM5MA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2009-05-21T23:53:02Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2009-05-21T23:53:02Z"}, "message": "re PR target/37846 (Option -mno-fused-madd should be supported on IA-64)\n\n\tPR target/37846\n\t* gcc.target/ia64/mfused-madd-vect.c: New test.\n\t* gcc.target/ia64/mfused-madd.c: New test.\n\t* gcc.target/ia64/mno-fused-madd-vect.c: New test.\n\t* gcc.target/ia64/mno-fused-madd.c: New test.\n\nFrom-SVN: r147783", "tree": {"sha": "ab6565c7a4c07fed17855bb1bc150d33ab611656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab6565c7a4c07fed17855bb1bc150d33ab611656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/comments", "author": null, "committer": null, "parents": [{"sha": "583ca921109ebfe8e40a3b74412ec7fec4669783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583ca921109ebfe8e40a3b74412ec7fec4669783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583ca921109ebfe8e40a3b74412ec7fec4669783"}], "stats": {"total": 200, "additions": 200, "deletions": 0}, "files": [{"sha": "1005e18a1a51b8e9675f15e3a28bfd0ab678822c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "patch": "@@ -1,3 +1,11 @@\n+2009-05-21  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR target/37846\n+\t* gcc.target/ia64/mfused-madd-vect.c: New test.\n+\t* gcc.target/ia64/mfused-madd.c: New test.\n+\t* gcc.target/ia64/mno-fused-madd-vect.c: New test.\n+\t* gcc.target/ia64/mno-fused-madd.c: New test.\n+\n 2009-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/movbe-1.c: New."}, {"sha": "e166e85daeda23a65aaac7dff46b3307e8783861", "filename": "gcc/testsuite/gcc.target/ia64/mfused-madd-vect.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmfused-madd-vect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmfused-madd-vect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmfused-madd-vect.c?ref=265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-final { scan-assembler-not \"fpmpy\" } } */\n+\n+/* fpma and fpms will show in either way because there are no\n+   specific vector add/sub instructions.  So we just check for fpmpy.  */\n+\n+#define N 16\n+extern bar(float *, float *, float *, float *);\n+void foo()\n+{\n+\tint i;\n+\tfloat a[N], b[N], c[N], d[N];\n+\tbar(a,b,c,d);\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] + c[i] * d[i];\n+\t}\n+\tbar(a,b,c,d);\n+#if 0\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] - c[i] * d[i];\n+\t}\n+\tbar(a,b,c,d);\n+#endif\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] * c[i] + d[i];\n+\t}\n+\tbar(a,b,c,d);\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] * c[i] - d[i];\n+\t}\n+\tbar(a,b,c,d);\n+}"}, {"sha": "8ecb31f0dd3a1468ede7cfca44051c183198882e", "filename": "gcc/testsuite/gcc.target/ia64/mfused-madd.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmfused-madd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmfused-madd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmfused-madd.c?ref=265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"fmpy\" } } */\n+/* { dg-final { scan-assembler-not \"fadd\" } } */\n+/* { dg-final { scan-assembler-not \"fsub\" } } */\n+/* { dg-final { scan-assembler \"fma\" } } */\n+/* { dg-final { scan-assembler \"fms\" } } */\n+/* { dg-final { scan-assembler \"fnma\" } } */\n+\n+float foo01(float a, float b, float c) {return (a + b * c);}\n+float foo02(float a, float b, float c) {return (a - b * c);}\n+float foo03(float a, float b, float c) {return (a * b + c);}\n+float foo04(float a, float b, float c) {return (a * b - c);}\n+\n+double foo05(double a, double b, double c) {return (a + b * c);}\n+double foo06(double a, double b, double c) {return (a - b * c);}\n+double foo07(double a, double b, double c) {return (a * b + c);}\n+double foo08(double a, double b, double c) {return (a * b - c);}\n+\n+__float80 foo09(__float80 a, __float80 b, __float80 c) {return (a + b * c);}\n+__float80 foo10(__float80 a, __float80 b, __float80 c) {return (a - b * c);}\n+__float80 foo11(__float80 a, __float80 b, __float80 c) {return (a * b + c);}\n+__float80 foo12(__float80 a, __float80 b, __float80 c) {return (a * b - c);}\n+\n+\n+\n+float foo20(double a, double b, double c) {return (float) (a + b * c);}\n+float foo21(double a, double b, double c) {return (float) (a - b * c);}\n+float foo22(double a, double b, double c) {return (float) (a * b + c);}\n+float foo23(double a, double b, double c) {return (float) (a * b - c);}\n+\n+float foo24(__float80 a, __float80 b, __float80 c) {return (float) (a + b * c);}\n+float foo25(__float80 a, __float80 b, __float80 c) {return (float) (a - b * c);}\n+float foo26(__float80 a, __float80 b, __float80 c) {return (float) (a * b + c);}\n+float foo27(__float80 a, __float80 b, __float80 c) {return (float) (a * b - c);}\n+\n+double foo28(__float80 a, __float80 b, __float80 c) {return (double) (a + b * c);}\n+double foo29(__float80 a, __float80 b, __float80 c) {return (double) (a - b * c);}\n+double foo30(__float80 a, __float80 b, __float80 c) {return (double) (a * b + c);}\n+double foo31(__float80 a, __float80 b, __float80 c) {return (double) (a * b - c);}\n+\n+\n+float foo001(float a, float b, double c) { return (a + b * c); }\n+float foo002(float a, float b, double c) { return (a - b * c); }\n+\n+float foo005(float a, double b, double c) { return (a + b * c); }\n+float foo006(float a, double b, double c) { return (a - b * c); }\n+float foo007(float a, double b, double c) { return (a * b + c); }\n+float foo008(float a, double b, double c) { return (a * b - c); }\n+\n+double foo009(double a, float b, double c) { return (a + b * c); }\n+double foo010(double a, float b, double c) { return (a - b * c); }\n+double foo011(double a, float b, double c) { return (a * b + c); }\n+double foo012(double a, float b, double c) { return (a * b - c); }\n+\n+float foo013(float a, double b, __float80 c) { return (a + b * c); }\n+float foo014(float a, double b, __float80 c) { return (a - b * c); }\n+float foo017(double a, float b, __float80 c) { return (a + b * c); }\n+float foo018(double a, float b, __float80 c) { return (a - b * c); }\n+\n+float foo021(float a, __float80 b, double c) { return (a + b * c); }\n+float foo022(float a, __float80 b, double c) { return (a - b * c); }\n+float foo023(float a, __float80 b, double c) { return (a * b + c); }\n+float foo024(float a, __float80 b, double c) { return (a * b - c); }"}, {"sha": "0e24bf6cda87e93e7e9916987b0481606afffc56", "filename": "gcc/testsuite/gcc.target/ia64/mno-fused-madd-vect.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd-vect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd-vect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd-vect.c?ref=265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile */\n+/* { dg-options \"-O2 -mno-fused-madd -ftree-vectorize\" } */\n+/* { dg-final { scan-assembler \"fpmpy\" } } */\n+\n+/* fpma and fpms will show in either way because there are no\n+   specific vector add/sub instructions.  So we just check for fpmpy.  */\n+\n+#define N 16\n+extern bar(float *, float *, float *, float *);\n+void foo()\n+{\n+\tint i;\n+\tfloat a[N], b[N], c[N], d[N];\n+\tbar(a,b,c,d);\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] + c[i] * d[i];\n+\t}\n+\tbar(a,b,c,d);\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] - c[i] * d[i];\n+\t}\n+\tbar(a,b,c,d);\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] * c[i] + d[i];\n+\t}\n+\tbar(a,b,c,d);\n+\tfor (i = 0; i < N; i++) {\n+\t\ta[i] = b[i] * c[i] - d[i];\n+\t}\n+\tbar(a,b,c,d);\n+}"}, {"sha": "d8ccc9476813537e07a9d972e70433b42329dab7", "filename": "gcc/testsuite/gcc.target/ia64/mno-fused-madd.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fmno-fused-madd.c?ref=265b3b8dbd88b4fbd169ddd5c1cac032b7aabc90", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile */\n+/* { dg-options \"-O2 -mno-fused-madd\" } */\n+/* { dg-final { scan-assembler-not \"fma\" } } */\n+/* { dg-final { scan-assembler-not \"fms\" } } */\n+/* { dg-final { scan-assembler-not \"fnma\" } } */\n+/* { dg-final { scan-assembler \"fmpy\" } } */\n+/* { dg-final { scan-assembler \"fadd\" } } */\n+/* { dg-final { scan-assembler \"fsub\" } } */\n+\n+float foo01(float a, float b, float c) {return (a + b * c);}\n+float foo02(float a, float b, float c) {return (a - b * c);}\n+float foo03(float a, float b, float c) {return (a * b + c);}\n+float foo04(float a, float b, float c) {return (a * b - c);}\n+\n+double foo05(double a, double b, double c) {return (a + b * c);}\n+double foo06(double a, double b, double c) {return (a - b * c);}\n+double foo07(double a, double b, double c) {return (a * b + c);}\n+double foo08(double a, double b, double c) {return (a * b - c);}\n+\n+__float80 foo09(__float80 a, __float80 b, __float80 c) {return (a + b * c);}\n+__float80 foo10(__float80 a, __float80 b, __float80 c) {return (a - b * c);}\n+__float80 foo11(__float80 a, __float80 b, __float80 c) {return (a * b + c);}\n+__float80 foo12(__float80 a, __float80 b, __float80 c) {return (a * b - c);}\n+\n+\n+\n+float foo20(double a, double b, double c) {return (float) (a + b * c);}\n+float foo21(double a, double b, double c) {return (float) (a - b * c);}\n+float foo22(double a, double b, double c) {return (float) (a * b + c);}\n+float foo23(double a, double b, double c) {return (float) (a * b - c);}\n+\n+float foo24(__float80 a, __float80 b, __float80 c) {return (float) (a + b * c);}\n+float foo25(__float80 a, __float80 b, __float80 c) {return (float) (a - b * c);}\n+float foo26(__float80 a, __float80 b, __float80 c) {return (float) (a * b + c);}\n+float foo27(__float80 a, __float80 b, __float80 c) {return (float) (a * b - c);}\n+\n+double foo28(__float80 a, __float80 b, __float80 c) {return (double) (a + b * c);}\n+double foo29(__float80 a, __float80 b, __float80 c) {return (double) (a - b * c);}\n+double foo30(__float80 a, __float80 b, __float80 c) {return (double) (a * b + c);}\n+double foo31(__float80 a, __float80 b, __float80 c) {return (double) (a * b - c);}\n+\n+\n+float foo001(float a, float b, double c) { return (a + b * c); }\n+float foo002(float a, float b, double c) { return (a - b * c); }\n+\n+float foo005(float a, double b, double c) { return (a + b * c); }\n+float foo006(float a, double b, double c) { return (a - b * c); }\n+float foo007(float a, double b, double c) { return (a * b + c); }\n+float foo008(float a, double b, double c) { return (a * b - c); }\n+\n+double foo009(double a, float b, double c) { return (a + b * c); }\n+double foo010(double a, float b, double c) { return (a - b * c); }\n+double foo011(double a, float b, double c) { return (a * b + c); }\n+double foo012(double a, float b, double c) { return (a * b - c); }\n+\n+float foo013(float a, double b, __float80 c) { return (a + b * c); }\n+float foo014(float a, double b, __float80 c) { return (a - b * c); }\n+float foo017(double a, float b, __float80 c) { return (a + b * c); }\n+float foo018(double a, float b, __float80 c) { return (a - b * c); }\n+\n+float foo021(float a, __float80 b, double c) { return (a + b * c); }\n+float foo022(float a, __float80 b, double c) { return (a - b * c); }\n+float foo023(float a, __float80 b, double c) { return (a * b + c); }\n+float foo024(float a, __float80 b, double c) { return (a * b - c); }"}]}