{"sha": "500abaa85465e990ccd1b5654bfd3af06e440c29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwYWJhYTg1NDY1ZTk5MGNjZDFiNTY1NGJmZDNhZjA2ZTQ0MGMyOQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-05-20T14:28:01Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-05-20T14:28:01Z"}, "message": "* init.c (build_default_init): Remove unused variable.\n\nFrom-SVN: r53660", "tree": {"sha": "0d97e0f808d978523a517aeb368b5333688f4f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d97e0f808d978523a517aeb368b5333688f4f99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/500abaa85465e990ccd1b5654bfd3af06e440c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500abaa85465e990ccd1b5654bfd3af06e440c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500abaa85465e990ccd1b5654bfd3af06e440c29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500abaa85465e990ccd1b5654bfd3af06e440c29/comments", "author": null, "committer": null, "parents": [{"sha": "ffd56a64d763871d51adec3c27036ce89aa3e22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd56a64d763871d51adec3c27036ce89aa3e22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd56a64d763871d51adec3c27036ce89aa3e22a"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "09f038c0a081af0f76b1d9ccbb698cb0eeab8dee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500abaa85465e990ccd1b5654bfd3af06e440c29/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500abaa85465e990ccd1b5654bfd3af06e440c29/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=500abaa85465e990ccd1b5654bfd3af06e440c29", "patch": "@@ -1,3 +1,7 @@\n+2002-05-20  Andreas Jaeger  <aj@suse.de>\n+\n+\t* init.c (build_default_init): Remove unused variable.\n+\n 2002-05-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* call.c (any_strictly_viable): New.\n@@ -148,11 +152,11 @@\n \tPR c++/6486\n \t* method.c (do_build_copy_constructor): Avoid building\n \tcv-qualified reference types.\n-  \n+\n 2002-04-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5719\n-\t* decl.c (grok_op_properties): Assignment ops don't have to return \n+\t* decl.c (grok_op_properties): Assignment ops don't have to return\n \tby value. operator% should.\n \n 2002-04-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n@@ -304,7 +308,7 @@\n \t(finish_init_stmts): Set STMT_EXPR_NO_SCOPE.\n \t* semantics.c (begin_gobal_stmt_expr): Adjust call to\n \texpand_start_stmt_expr.\n-\t\n+\n 2002-04-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (register_dtor_fn): Pass the address of dso_handle, not\n@@ -355,11 +359,11 @@\n \n \t* typeck.c (type_after_usual_arithmetic_conversions):\n \tIf two types have the same variant, return immediately.\n-\tWhen two floating-point operands are the same precision: \n+\tWhen two floating-point operands are the same precision:\n \t  convert to float if one of the operands is float;\n \t  if neither operand is one of the standard types, return the type\n \t  of the first operand.\n- \n+\n 2002-04-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5507\n@@ -415,15 +419,15 @@\n \t* init.c (build_member_call): Use build_scoped_ref.\n \t(resolve_offset_ref): Likewise.\n \t* call.c (build_scoped_method_call): Likewise.\n-\t* tree.c (maybe_dummy_object): Kludge around current_class_type being \n+\t* tree.c (maybe_dummy_object): Kludge around current_class_type being\n \twrong.\n \t* typeck2.c (build_scoped_ref): Return the binfo via binfo_p parm.\n \t* cp-tree.h: Adjust.\n-\t\n+\n \t* init.c (push_base_cleanups): Just use build_scoped_method_call.\n \n \tPR c++/6179\n-\t* method.c (implicitly_declare_fn): Pass unqualified type to \n+\t* method.c (implicitly_declare_fn): Pass unqualified type to\n \tsynthesize_exception_spec.\n \n 2002-04-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n@@ -438,7 +442,7 @@\n \n \t* semantics.c (finish_eh_cleanup): New fn.\n \t* cp-tree.h: Add prototype.\n-\t* init.c (perform_member_init, expand_cleanup_for_base): Use \n+\t* init.c (perform_member_init, expand_cleanup_for_base): Use\n \tfinish_eh_cleanup.\n \t* cp-tree.def (SUBOBJECT, CTOR_STMT): Remove.\n \t* cp-tree.h: Remove references.\n@@ -581,7 +585,7 @@\n \tPR c++/4884\n \t* call.c (build_op_delete_call): Allow for the fact the placement\n \tmay be a COMPOUND_EXPR.\n-\t\n+\n 2002-03-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_EXPAND_EXPR): Redefine.\n@@ -643,7 +647,7 @@\n \n \tPR C++/3656\n \t* semantics.c (finish_base_specifier): Handle erronous base\n-\tclasses. \n+\tclasses.\n \n 2002-03-22  Zack Weinberg  <zack@codesourcery.com>\n \n@@ -908,7 +912,7 @@\n \t* except.c: Don't include decl.h or obstack.h.  Do include\n \ttree-inline.h.\n \t(build_throw): Destroy temporaries from the thrown\n-\texpression before calling __cxa_throw.  Construct a thrown \n+\texpression before calling __cxa_throw.  Construct a thrown\n \ttemporary directly into the exception object.\n \t(stabilize_throw_expr): New function.\n \t(wrap_cleanups_r): New function.\n@@ -939,7 +943,7 @@\n \tthe C front end but not used, or used only to permit the\n \tcompiler to link.\n \n-2002-02-24 Craig Rodrigues  <rodrigc@gcc.gnu.org> \n+2002-02-24 Craig Rodrigues  <rodrigc@gcc.gnu.org>\n \n \tPR c++/4093\n \t* cp-tree.h (SET_BINFO_MARKED): Cast false part of condition\n@@ -993,7 +997,7 @@\n \n 2002-02-19  Jason Merrill  <jason@redhat.com>\n \n-\tABI change: Mangle `void (A::*)() const' as \n+\tABI change: Mangle `void (A::*)() const' as\n \tM1AKFvvE, not MK1AFvvE.\n \t* mangle.c (write_function_type): Write cv-quals for member\n \tfunction type here.\n@@ -1068,14 +1072,14 @@\n \t(coerce_template_template_parms, convert_template_argument,\n \tcoerce_template_parms, maybe_get_template_decl_from_type_decl,\n \tlookup_template_class, tsubst_friend_function, tsubst_friend_class,\n-\tinstantiate_class_template, tsubst_template_arg_vector, \n-\ttsubst_template_parms, tsubst_aggr_type, tsubst_default_argument, \n+\tinstantiate_class_template, tsubst_template_arg_vector,\n+\ttsubst_template_parms, tsubst_aggr_type, tsubst_default_argument,\n \ttsubst_decl, tsubst_arg_types, tsubst_function_type,\n-\ttsubst_call_declarator_parms, tsubst, tsubst_copy, tsubst_expr, \n+\ttsubst_call_declarator_parms, tsubst, tsubst_copy, tsubst_expr,\n \tinstantiate_template, fn_type_unification,\n-\tresolve_overloaded_unification, verify_class_unification, \n-\tunify, get_bindings_real, do_type_instantiation, \n-\tregenerate_decl_from_template, instantiate_decl, \n+\tresolve_overloaded_unification, verify_class_unification,\n+\tunify, get_bindings_real, do_type_instantiation,\n+\tregenerate_decl_from_template, instantiate_decl,\n \ttsubst_initializer_list, tsubst_enum,\n \tget_mostly_instantiated_function_type,\n \tinvalid_nontype_parm_type_p): Likewise.\n@@ -1136,7 +1140,7 @@\n 2002-02-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/4872\n-\t* decl.c (finish_function): Warn about a non-void function with \n+\t* decl.c (finish_function): Warn about a non-void function with\n \tno return statement and no abnormal exit.\n \t* cp-tree.h (struct cp_language_function): Add returns_abnormally.\n \t(current_function_returns_abnormally): New macro."}, {"sha": "526d68f390b2b396276789ab45b84cd5a7e07f0a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500abaa85465e990ccd1b5654bfd3af06e440c29/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500abaa85465e990ccd1b5654bfd3af06e440c29/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=500abaa85465e990ccd1b5654bfd3af06e440c29", "patch": "@@ -213,8 +213,6 @@ static tree\n build_default_init (type)\n      tree type;\n {\n-  tree init = NULL_TREE;\n-\n   if (TYPE_NEEDS_CONSTRUCTING (type))\n     /* Other code will handle running the default constructor.  We can't do\n        anything with a CONSTRUCTOR for arrays here, as that would imply"}]}