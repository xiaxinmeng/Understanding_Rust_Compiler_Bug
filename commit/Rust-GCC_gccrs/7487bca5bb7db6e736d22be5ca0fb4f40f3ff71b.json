{"sha": "7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4N2JjYTViYjdkYjZlNzM2ZDIyYmU1Y2EwZmI0ZjQwZjNmZjcxYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-07-13T22:23:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-07-13T22:23:49Z"}, "message": "re PR c++/44909 ([C++0x] Copy constructors implicitly deleted)\n\n\tPR c++/44909\n\t* cp-tree.h (struct lang_type_class): Add has_user_opeq.\n\t(TYPE_HAS_USER_OPEQ): New.\n\t* decl.c (grok_special_member_properties): Set it.\n\t* class.c (add_implicitly_declared_members): Don't lazily declare\n\tconstructors/operator= if a base or member has a user-declared one.\n\t(check_bases_and_members, check_bases): Adjust.\n\t(check_field_decls, check_field_decl): Adjust.\n\t* method.c (synthesized_method_walk): Initialize check_vdtor.\n\nFrom-SVN: r162159", "tree": {"sha": "1a85f6b676136ee085095f0b0dfae644d6634b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a85f6b676136ee085095f0b0dfae644d6634b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8caa8b6590d1988ab1d13ff20d1317bbdd3748fb"}], "stats": {"total": 125, "additions": 110, "deletions": 15}, "files": [{"sha": "98c6220cd63e24519c8dff1958d609c185fa9faa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -1,5 +1,15 @@\n 2010-07-13  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/44909\n+\t* cp-tree.h (struct lang_type_class): Add has_user_opeq.\n+\t(TYPE_HAS_USER_OPEQ): New.\n+\t* decl.c (grok_special_member_properties): Set it.\n+\t* class.c (add_implicitly_declared_members): Don't lazily declare\n+\tconstructors/operator= if a base or member has a user-declared one.\n+\t(check_bases_and_members, check_bases): Adjust.\n+\t(check_field_decls, check_field_decl): Adjust.\n+\t* method.c (synthesized_method_walk): Initialize check_vdtor.\n+\n \tPR c++/44540\n \t* mangle.c (write_type): Canonicalize.\n \t(canonicalize_for_substitution): Retain cv-quals on FUNCTION_TYPE."}, {"sha": "ed7367c95c44454f745254cf3d688fca18b8240c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -130,7 +130,7 @@ static void finish_struct_methods (tree);\n static void maybe_warn_about_overly_private_class (tree);\n static int method_name_cmp (const void *, const void *);\n static int resort_method_name_cmp (const void *, const void *);\n-static void add_implicitly_declared_members (tree, int, int);\n+static void add_implicitly_declared_members (tree, int, int, int, int);\n static tree fixed_type_or_null (tree, int *, int *);\n static tree build_simple_base_path (tree expr, tree binfo);\n static tree build_vtbl_ref_1 (tree, tree);\n@@ -139,13 +139,13 @@ static void build_vtbl_initializer (tree, tree, tree, tree, int *,\n static int count_fields (tree);\n static int add_fields_to_record_type (tree, struct sorted_fields_type*, int);\n static bool check_bitfield_decl (tree);\n-static void check_field_decl (tree, tree, int *, int *, int *);\n-static void check_field_decls (tree, tree *, int *, int *);\n+static void check_field_decl (tree, tree, int *, int *, int *, int *, int *);\n+static void check_field_decls (tree, tree *, int *, int *, int *, int *);\n static tree *build_base_field (record_layout_info, tree, splay_tree, tree *);\n static void build_base_fields (record_layout_info, splay_tree, tree *);\n static void check_methods (tree);\n static void remove_zero_width_bit_fields (tree);\n-static void check_bases (tree, int *, int *);\n+static void check_bases (tree, int *, int *, int *, int *);\n static void check_bases_and_members (tree);\n static tree create_vtable_ptr (tree, tree *);\n static void include_empty_classes (record_layout_info);\n@@ -1249,7 +1249,9 @@ handle_using_decl (tree using_decl, tree t)\n static void\n check_bases (tree t,\n \t     int* cant_have_const_ctor_p,\n-\t     int* no_const_asn_ref_p)\n+\t     int* no_const_asn_ref_p,\n+\t     int* cant_have_lazy_ctor,\n+\t     int* cant_have_lazy_opeq)\n {\n   int i;\n   int seen_non_virtual_nearly_empty_base_p;\n@@ -1288,6 +1290,10 @@ check_bases (tree t,\n       if (TYPE_HAS_COPY_ASSIGN (basetype)\n \t  && !TYPE_HAS_CONST_COPY_ASSIGN (basetype))\n \t*no_const_asn_ref_p = 1;\n+      if (TYPE_HAS_USER_CONSTRUCTOR (basetype))\n+\t*cant_have_lazy_ctor = 1;\n+      if (TYPE_HAS_USER_OPEQ (basetype))\n+\t*cant_have_lazy_opeq = 1;\n \n       if (BINFO_VIRTUAL_P (base_binfo))\n \t/* A virtual base does not effect nearly emptiness.  */\n@@ -2628,7 +2634,9 @@ maybe_add_class_template_decl_list (tree type, tree t, int friend_p)\n static void\n add_implicitly_declared_members (tree t,\n \t\t\t\t int cant_have_const_cctor,\n-\t\t\t\t int cant_have_const_assignment)\n+\t\t\t\t int cant_have_const_assignment,\n+\t\t\t\t int cant_have_lazy_ctor,\n+\t\t\t\t int cant_have_lazy_opeq)\n {\n   /* Destructor.  */\n   if (!CLASSTYPE_DESTRUCTORS (t))\n@@ -2682,6 +2690,26 @@ add_implicitly_declared_members (tree t,\n \tCLASSTYPE_LAZY_MOVE_ASSIGN (t) = 1;\n     }\n \n+  /* If a base or member type has a user-declared constructor or operator=,\n+     we need to declare ours now to avoid issues with circular lazy\n+     declarations (cpp0x/implicit6.C).  */\n+  if (cant_have_lazy_ctor)\n+    {\n+      if (CLASSTYPE_LAZY_DEFAULT_CTOR (t))\n+\tlazily_declare_fn (sfk_constructor, t);\n+      if (CLASSTYPE_LAZY_COPY_CTOR (t))\n+\tlazily_declare_fn (sfk_copy_constructor, t);\n+      if (CLASSTYPE_LAZY_MOVE_CTOR (t))\n+\tlazily_declare_fn (sfk_move_constructor, t);\n+    }\n+  if (cant_have_lazy_opeq)\n+    {\n+      if (CLASSTYPE_LAZY_COPY_ASSIGN (t))\n+\tlazily_declare_fn (sfk_copy_assignment, t);\n+      if (CLASSTYPE_LAZY_MOVE_ASSIGN (t))\n+\tlazily_declare_fn (sfk_move_assignment, t);\n+    }\n+\n   /* We can't be lazy about declaring functions that might override\n      a virtual function from a base class.  */\n   if (TYPE_POLYMORPHIC_P (t)\n@@ -2830,7 +2858,9 @@ check_field_decl (tree field,\n \t\t  tree t,\n \t\t  int* cant_have_const_ctor,\n \t\t  int* no_const_asn_ref,\n-\t\t  int* any_default_members)\n+\t\t  int* any_default_members,\n+\t\t  int* cant_have_lazy_ctor,\n+\t\t  int* cant_have_lazy_opeq)\n {\n   tree type = strip_array_types (TREE_TYPE (field));\n \n@@ -2847,7 +2877,8 @@ check_field_decl (tree field,\n       for (fields = TYPE_FIELDS (type); fields; fields = TREE_CHAIN (fields))\n \tif (TREE_CODE (fields) == FIELD_DECL && !DECL_C_BIT_FIELD (field))\n \t  check_field_decl (fields, t, cant_have_const_ctor,\n-\t\t\t    no_const_asn_ref, any_default_members);\n+\t\t\t    no_const_asn_ref, any_default_members,\n+\t\t\t    cant_have_lazy_ctor, cant_have_lazy_opeq);\n     }\n   /* Check members with class type for constructors, destructors,\n      etc.  */\n@@ -2893,6 +2924,11 @@ check_field_decl (tree field,\n       if (TYPE_HAS_COPY_ASSIGN (type)\n \t  && !TYPE_HAS_CONST_COPY_ASSIGN (type))\n \t*no_const_asn_ref = 1;\n+\n+      if (TYPE_HAS_USER_CONSTRUCTOR (type))\n+\t*cant_have_lazy_ctor = 1;\n+      if (TYPE_HAS_USER_OPEQ (type))\n+\t*cant_have_lazy_opeq = 1;\n     }\n   if (DECL_INITIAL (field) != NULL_TREE)\n     {\n@@ -2932,7 +2968,9 @@ check_field_decl (tree field,\n static void\n check_field_decls (tree t, tree *access_decls,\n \t\t   int *cant_have_const_ctor_p,\n-\t\t   int *no_const_asn_ref_p)\n+\t\t   int *no_const_asn_ref_p,\n+\t\t   int *cant_have_lazy_ctor_p,\n+\t\t   int *cant_have_lazy_opeq_p)\n {\n   tree *field;\n   tree *next;\n@@ -3124,7 +3162,9 @@ check_field_decls (tree t, tree *access_decls,\n \tcheck_field_decl (x, t,\n \t\t\t  cant_have_const_ctor_p,\n \t\t\t  no_const_asn_ref_p,\n-\t\t\t  &any_default_members);\n+\t\t\t  &any_default_members,\n+\t\t\t  cant_have_lazy_ctor_p,\n+\t\t\t  cant_have_lazy_opeq_p);\n \n       /* If any field is const, the structure type is pseudo-const.  */\n       if (CP_TYPE_CONST_P (type))\n@@ -4447,6 +4487,8 @@ check_bases_and_members (tree t)\n   /* Nonzero if the implicitly generated assignment operator\n      should take a non-const reference argument.  */\n   int no_const_asn_ref;\n+  int cant_have_lazy_ctor = 0;\n+  int cant_have_lazy_opeq = 0;\n   tree access_decls;\n   bool saved_complex_asn_ref;\n   bool saved_nontrivial_dtor;\n@@ -4459,7 +4501,8 @@ check_bases_and_members (tree t)\n \n   /* Check all the base-classes.  */\n   check_bases (t, &cant_have_const_ctor,\n-\t       &no_const_asn_ref);\n+\t       &no_const_asn_ref, &cant_have_lazy_ctor,\n+\t       &cant_have_lazy_opeq);\n \n   /* Check all the method declarations.  */\n   check_methods (t);\n@@ -4476,7 +4519,9 @@ check_bases_and_members (tree t)\n      being set appropriately.  */\n   check_field_decls (t, &access_decls,\n \t\t     &cant_have_const_ctor,\n-\t\t     &no_const_asn_ref);\n+\t\t     &no_const_asn_ref,\n+\t\t     &cant_have_lazy_ctor,\n+\t\t     &cant_have_lazy_opeq);\n \n   /* A nearly-empty class has to be vptr-containing; a nearly empty\n      class contains just a vptr.  */\n@@ -4548,7 +4593,9 @@ check_bases_and_members (tree t)\n   /* Synthesize any needed methods.  */\n   add_implicitly_declared_members (t,\n \t\t\t\t   cant_have_const_ctor,\n-\t\t\t\t   no_const_asn_ref);\n+\t\t\t\t   no_const_asn_ref,\n+\t\t\t\t   cant_have_lazy_ctor,\n+\t\t\t\t   cant_have_lazy_opeq);\n \n   /* Check defaulted declarations here so we have cant_have_const_ctor\n      and don't need to worry about clones.  */"}, {"sha": "8b076d358c0757d0446049da68d18f222c1699e5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -1326,6 +1326,7 @@ struct GTY(()) lang_type_class {\n   unsigned lazy_move_assign : 1;\n   unsigned has_complex_move_ctor : 1;\n   unsigned has_complex_move_assign : 1;\n+  unsigned has_user_opeq : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1334,7 +1335,7 @@ struct GTY(()) lang_type_class {\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 4;\n+  unsigned dummy : 3;\n \n   tree primary_base;\n   VEC(tree_pair_s,gc) *vcall_indices;\n@@ -3142,6 +3143,10 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    user-declared constructor.  */\n #define TYPE_HAS_USER_CONSTRUCTOR(NODE) (TYPE_LANG_FLAG_1 (NODE))\n \n+/* ...or a user-declared operator=.  */\n+#define TYPE_HAS_USER_OPEQ(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->has_user_opeq)\n+\n /* When appearing in an INDIRECT_REF, it means that the tree structure\n    underneath is actually a call to a constructor.  This is needed\n    when the constructor must initialize local storage (which can"}, {"sha": "1491720a972ed2bfcfbea3317ea3e51d1ee14e29", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -10293,6 +10293,8 @@ grok_special_member_properties (tree decl)\n \n       int assop = copy_fn_p (decl);\n \n+      if (!DECL_ARTIFICIAL (decl))\n+\tTYPE_HAS_USER_OPEQ (class_type) = 1;\n       if (assop)\n \t{\n \t  TYPE_HAS_COPY_ASSIGN (class_type) = 1;"}, {"sha": "b09064b7cc05fcc40555c773f2dbeca063878523", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -1004,6 +1004,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n #endif\n \n   assign_p = false;\n+  check_vdtor = false;\n   switch (sfk)\n     {\n     case sfk_move_assignment:"}, {"sha": "aa86ae395b94a068fc896c980b877bac6a71a06b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -1,3 +1,8 @@\n+2010-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44909\n+\t* g++.dg/cpp0x/implicit6.C: New.\n+\n 2010-07-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44540"}, {"sha": "e517333773f3da90c0df6e8e858e40e7b373fb1f", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit6.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit6.C?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -0,0 +1,25 @@\n+// Circular implicit declarations were causing errors\n+// { dg-options -std=c++0x }\n+\n+struct Ray;\n+\n+struct Vector\n+{\n+  virtual void f();\t\t// make non-trivially-copyable\n+  Vector();\n+  Vector(const Ray &) ;\n+};\n+\n+struct array\n+{\n+  Vector v;\n+};\n+\n+struct Ray\n+{\n+  array a;\n+  operator Vector();\n+};\n+\n+extern Ray r1;\n+Ray r2=r1;"}, {"sha": "a0b1e7f690ff00fdc83aa1e22d5791340ab52fb3", "filename": "gcc/testsuite/g++.dg/parse/error28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror28.C?ref=7487bca5bb7db6e736d22be5ca0fb4f40f3ff71b", "patch": "@@ -3,7 +3,7 @@\n \n struct virt { virt () {} virt (int i) {} };\n struct der : public virtual virt { // { dg-message \"8:der::der\" }\n-  der (int i) : virt(i) {} // { dg-message \"3:candidates are: der\" }\n+  der (int i) : virt(i) {} // { dg-message \"3:der::der\" }\n };\n struct top : public der { \n   top () {} // { dg-bogus \"der\\\\(const\" }"}]}