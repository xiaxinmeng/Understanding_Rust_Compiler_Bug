{"sha": "ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwNGUzNGJmZjdhODA5MGZkZmU4NmU1MGViODhiYWU3ZDcxN2VkMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-03-11T20:51:00Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-03-11T20:51:00Z"}, "message": "Revert 2001-03-26 Nathan Sidwell <nathan@codesourcery.com>, DR209 is now not a defect.\n\ncp:\n\tRevert 2001-03-26  Nathan Sidwell  <nathan@codesourcery.com>,\n\tDR209 is now not a defect.\n\t* cp-tree.h (skip_type_access_control): Remove.\n\t* decl.c (grokdeclarator): Do type access control for friend\n\tdeclarations.\n\t* semantics.c (decl_type_access_control): Don't reset\n\tcurrent_type_lookups.\n\t(save_type_access_control): Always save the lookups.\n\t(skip_type_access_control): Remove.\n\t(finish_class_definition): Don't change type_lookups.\ntestsuite:\n\t* testsuite/g++.old-deja/g++.other/friend9.C: Revert DR 209 changes.\n\t* testsuite/g++.old-deja/g++.robertl/eb56.C: Likewise.\n\nFrom-SVN: r50595", "tree": {"sha": "d48b9d945e4bf5ac8d946eaa74ae410efc68f450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48b9d945e4bf5ac8d946eaa74ae410efc68f450"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/comments", "author": null, "committer": null, "parents": [{"sha": "049b03f488f1a232fe7851f319d12868ac52d869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049b03f488f1a232fe7851f319d12868ac52d869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049b03f488f1a232fe7851f319d12868ac52d869"}], "stats": {"total": 105, "additions": 48, "deletions": 57}, "files": [{"sha": "1ad21d39d113c7d0a87743f88c8503ce548899c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "patch": "@@ -1,3 +1,16 @@\n+2002-03-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tRevert 2001-03-26  Nathan Sidwell  <nathan@codesourcery.com>,\n+\tDR209 is now not a defect.\n+\t* cp-tree.h (skip_type_access_control): Remove.\n+\t* decl.c (grokdeclarator): Do type access control for friend\n+\tdeclarations.\n+\t* semantics.c (decl_type_access_control): Don't reset\n+\tcurrent_type_lookups.\n+\t(save_type_access_control): Always save the lookups.\n+\t(skip_type_access_control): Remove.\n+\t(finish_class_definition): Don't change type_lookups.\n+\n 2002-03-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tRevert 2000-12-01  Nathan Sidwell  <nathan@codesourcery.com>,"}, {"sha": "cae147550177fba369e8b698a1b984e6beb113a2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "patch": "@@ -4062,8 +4062,6 @@ extern int types_overlap_p\t\t\tPARAMS ((tree, tree));\n extern tree get_vbase\t\t\t\tPARAMS ((tree, tree));\n extern tree get_dynamic_cast_base_type          PARAMS ((tree, tree));\n extern void type_access_control\t\t\tPARAMS ((tree, tree));\n-extern void skip_type_access_control            PARAMS ((void));\n-extern void reset_type_access_control           PARAMS ((void));\n extern int accessible_p                         PARAMS ((tree, tree));\n extern tree lookup_field\t\t\tPARAMS ((tree, tree, int, int));\n extern int lookup_fnfields_1                    PARAMS ((tree, tree));\n@@ -4171,6 +4169,7 @@ extern tree finish_qualified_call_expr          PARAMS ((tree, tree));\n extern tree finish_unary_op_expr                PARAMS ((enum tree_code, tree));\n extern tree finish_id_expr                      PARAMS ((tree));\n extern void save_type_access_control\t\tPARAMS ((tree));\n+extern void reset_type_access_control           PARAMS ((void));\n extern void decl_type_access_control\t\tPARAMS ((tree));\n extern int begin_function_definition            PARAMS ((tree, tree));\n extern tree begin_constructor_declarator        PARAMS ((tree, tree));"}, {"sha": "d7047fcdbfebbb2b57f55114b1dfa706bac7c166", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "patch": "@@ -11293,9 +11293,7 @@ friend declaration requires class-key, i.e. `friend %#T'\",\n \t  /* Only try to do this stuff if we didn't already give up.  */\n \t  if (type != integer_type_node)\n \t    {\n-\t      /* DR 209. The friendly class does not need to be accessible\n-                 in the scope of the class granting friendship. */\n-\t      skip_type_access_control ();\n+\t      decl_type_access_control (TYPE_NAME (type));\n \n \t      /* A friendly class?  */\n \t      if (current_class_type)\n@@ -11557,33 +11555,32 @@ friend declaration requires class-key, i.e. `friend %#T'\",\n \tif (friendp)\n \t  {\n \t    /* Friends are treated specially.  */\n-            tree t = NULL_TREE;\n-\t    \n-\t    /* DR 209. The friend does not need to be accessible at this\n-               point. */\n-\t    skip_type_access_control ();\n-\t    \n \t    if (ctype == current_class_type)\n \t      warning (\"member functions are implicitly friends of their class\");\n-\n-            if (decl && DECL_NAME (decl))\n-              {\n-                if (template_class_depth (current_class_type) == 0)\n-                  {\n-              \t    decl = check_explicit_specialization\n-              \t            (declarator, decl,\n-              \t             template_count, 2 * (funcdef_flag != 0) + 4);\n-              \t    if (decl == error_mark_node)\n-              \t      return error_mark_node;\n-                  }\n-              \n-                t = do_friend (ctype, declarator, decl,\n-              \t\t       last_function_parms, *attrlist, flags, quals,\n-              \t\t       funcdef_flag);\n-              }\n-            if (t && funcdef_flag)\n-              return t;\n-\t    return void_type_node;\n+ \t    else\n+ \t      {\n+ \t\ttree t = NULL_TREE;\n+ \t\tif (decl && DECL_NAME (decl))\n+ \t\t  {\n+ \t\t    if (template_class_depth (current_class_type) == 0)\n+ \t\t      {\n+ \t\t\tdecl\n+ \t\t\t  = check_explicit_specialization\n+ \t\t\t  (declarator, decl,\n+ \t\t\t   template_count, 2 * (funcdef_flag != 0) + 4);\n+ \t\t\tif (decl == error_mark_node)\n+ \t\t\t  return error_mark_node;\n+ \t\t      }\n+\t\t    \n+ \t\t    t = do_friend (ctype, declarator, decl,\n+ \t\t\t\t   last_function_parms, *attrlist,\n+\t\t\t\t   flags, quals, funcdef_flag);\n+ \t\t  }\n+ \t\tif (t && funcdef_flag)\n+ \t\t  return t;\n+  \n+ \t\treturn void_type_node;\n+ \t      }\n \t  }\n \n \t/* Structure field.  It may not be a function, except for C++ */"}, {"sha": "3ec15a9bb910352ac04e209d385c0729e7614d75", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "patch": "@@ -1502,32 +1502,13 @@ decl_type_access_control (decl)\n      added to type_lookups after typed_declspecs saved the copy that\n      ended up in current_type_lookups.  */\n   type_lookups = current_type_lookups;\n-  \n-  current_type_lookups = NULL_TREE;\n }\n \n-/* Record the lookups, if we're doing deferred access control.  */\n-\n void\n save_type_access_control (lookups)\n      tree lookups;\n {\n-  if (type_lookups != error_mark_node)\n-    {\n-      my_friendly_assert (!current_type_lookups, 20010301);\n-      current_type_lookups = lookups;\n-    }\n-  else\n-    my_friendly_assert (!lookups || lookups == error_mark_node, 20010301);\n-}\n-\n-/* Set things up so that the next deferred access control will succeed.\n-   This is needed for friend declarations see grokdeclarator for details.  */\n-\n-void\n-skip_type_access_control ()\n-{\n-  type_lookups = NULL_TREE;\n+  current_type_lookups = lookups;\n }\n \n /* Reset the deferred access control.  */\n@@ -1911,8 +1892,6 @@ finish_class_definition (t, attributes, semi, pop_scope_p)\n     check_for_missing_semicolon (t); \n   if (pop_scope_p)\n     pop_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL (t)));\n-  if (current_function_decl)\n-    type_lookups = error_mark_node;\n   if (current_scope () == current_function_decl)\n     do_pending_defargs ();\n "}, {"sha": "87c3e74a21ccbff2d93de81a4533814b2bfa6cf2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "patch": "@@ -1,3 +1,8 @@\n+2002-03-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/g++.old-deja/g++.other/friend9.C: Revert DR 209 changes.\n+\t* testsuite/g++.old-deja/g++.robertl/eb56.C: Likewise.\n+\n 2002-03-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* testsuite/g++.dg/overload/pmf1.C: New test."}, {"sha": "442d9899e3a7d0d7de58636389a527b72ca80d2a", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend9.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend9.C?ref=ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "patch": "@@ -5,16 +5,14 @@\n \n // Bug 853: We reported the wrong line no for a friend access violation\n \n-// Since DR 209, friend declaration access is not checked.\n-\n class F\n {\n-  class Internal;\n+  class Internal;   // ERROR - is private\n };\n \n class C\n {\n-  friend class F::Internal;\n+  friend class F::Internal; // ERROR - in this context\n   public:\n   typedef enum { A, B } e;\n "}, {"sha": "0b4bb7dbe39932b9a6d88a68035f992577ad60b7", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb56.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab04e34bff7a8090fdfe86e50eb88bae7d717ed3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C?ref=ab04e34bff7a8090fdfe86e50eb88bae7d717ed3", "patch": "@@ -3,7 +3,7 @@\n \n class foo {\n   public:\n-        typedef int sometype;\n+  typedef int sometype;\n };\n \n struct die : public foo::sometype { // ERROR - invalid base type"}]}