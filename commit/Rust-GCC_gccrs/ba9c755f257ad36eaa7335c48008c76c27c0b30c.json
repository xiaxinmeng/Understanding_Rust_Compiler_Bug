{"sha": "ba9c755f257ad36eaa7335c48008c76c27c0b30c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5Yzc1NWYyNTdhZDM2ZWFhNzMzNWM0ODAwOGM3NmMyN2MwYjMwYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-03-30T14:30:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-03-30T14:30:57Z"}, "message": "tree-ssa-loop-niter.c (idx_infer_loop_bounds): We can't get realistic estimates here.\n\n\t* tree-ssa-loop-niter.c (idx_infer_loop_bounds): We can't get realistic\n\testimates here.\n\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop): Use also\n\tmax_loop_iterations_int.\n\t(tree_unswitch_outer_loop): Likewise.\n\t* tree-ssa-loop-ivopts.c (avg_loop_niter): Likewise.\n\t* tree-vect-loop.c (vect_analyze_loop_2): Likewise.\n\nFrom-SVN: r234572", "tree": {"sha": "2c2462790bd07263fc7a94de1236e8fb1f73b78d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c2462790bd07263fc7a94de1236e8fb1f73b78d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba9c755f257ad36eaa7335c48008c76c27c0b30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9c755f257ad36eaa7335c48008c76c27c0b30c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9c755f257ad36eaa7335c48008c76c27c0b30c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9c755f257ad36eaa7335c48008c76c27c0b30c/comments", "author": null, "committer": null, "parents": [{"sha": "f6d2d066c26ebf0def0bd6d4be32c1d4801039fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d2d066c26ebf0def0bd6d4be32c1d4801039fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d2d066c26ebf0def0bd6d4be32c1d4801039fa"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "9e4e0acfe2be97bf98a6066c435f3f01cd91795d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba9c755f257ad36eaa7335c48008c76c27c0b30c", "patch": "@@ -1,3 +1,13 @@\n+2016-03-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-loop-niter.c (idx_infer_loop_bounds): We can't get realistic\n+\testimates here.\n+\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop): Use also\n+\tmax_loop_iterations_int.\n+\t(tree_unswitch_outer_loop): Likewise.\n+\t* tree-ssa-loop-ivopts.c (avg_loop_niter): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Likewise.\n+\n 2016-03-30  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/70450"}, {"sha": "29c4ba4cf56b46c7dc5eb176b0ab99f880bba6bb", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ba9c755f257ad36eaa7335c48008c76c27c0b30c", "patch": "@@ -121,7 +121,11 @@ avg_loop_niter (struct loop *loop)\n {\n   HOST_WIDE_INT niter = estimated_stmt_executions_int (loop);\n   if (niter == -1)\n-    return AVG_LOOP_NITER (loop);\n+    {\n+      niter = max_stmt_executions_int (loop);\n+      if (niter == -1 || niter > AVG_LOOP_NITER (loop))\n+        return AVG_LOOP_NITER (loop);\n+    }\n \n   return niter;\n }"}, {"sha": "c93e563e51ce090460d6aa39c1bb92be2d879af6", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=ba9c755f257ad36eaa7335c48008c76c27c0b30c", "patch": "@@ -3115,7 +3115,6 @@ idx_infer_loop_bounds (tree base, tree *idx, void *dta)\n   tree low, high, type, next;\n   bool sign, upper = true, at_end = false;\n   struct loop *loop = data->loop;\n-  bool reliable = true;\n \n   if (TREE_CODE (base) != ARRAY_REF)\n     return true;\n@@ -3187,14 +3186,14 @@ idx_infer_loop_bounds (tree base, tree *idx, void *dta)\n       && tree_int_cst_compare (next, high) <= 0)\n     return true;\n \n-  /* If access is not executed on every iteration, we must ensure that overlow may\n-     not make the access valid later.  */\n+  /* If access is not executed on every iteration, we must ensure that overlow\n+     may not make the access valid later.  */\n   if (!dominated_by_p (CDI_DOMINATORS, loop->latch, gimple_bb (data->stmt))\n       && scev_probably_wraps_p (initial_condition_in_loop_num (ev, loop->num),\n \t\t\t\tstep, data->stmt, loop, true))\n-    reliable = false;\n+    upper = false;\n \n-  record_nonwrapping_iv (loop, init, step, data->stmt, low, high, reliable, upper);\n+  record_nonwrapping_iv (loop, init, step, data->stmt, low, high, false, upper);\n   return true;\n }\n "}, {"sha": "77acd66e997351a6fe4898e31960ef07aeedf1a8", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=ba9c755f257ad36eaa7335c48008c76c27c0b30c", "patch": "@@ -223,6 +223,8 @@ tree_unswitch_single_loop (struct loop *loop, int num)\n       /* If the loop is not expected to iterate, there is no need\n \t for unswitching.  */\n       iterations = estimated_loop_iterations_int (loop);\n+      if (iterations < 0)\n+        iterations = max_loop_iterations_int (loop);\n       if (iterations >= 0 && iterations <= 1)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -439,6 +441,8 @@ tree_unswitch_outer_loop (struct loop *loop)\n   /* If the loop is not expected to iterate, there is no need\n       for unswitching.  */\n   iterations = estimated_loop_iterations_int (loop);\n+  if (iterations < 0)\n+    iterations = max_loop_iterations_int (loop);\n   if (iterations >= 0 && iterations <= 1)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "f977ee9351b1b4339e5a19c3a5508f7de80cc40e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9c755f257ad36eaa7335c48008c76c27c0b30c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ba9c755f257ad36eaa7335c48008c76c27c0b30c", "patch": "@@ -2063,6 +2063,8 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n \n   estimated_niter\n     = estimated_stmt_executions_int (LOOP_VINFO_LOOP (loop_vinfo));\n+  if (estimated_niter != -1)\n+    estimated_niter = max_niter;\n   if (estimated_niter != -1\n       && ((unsigned HOST_WIDE_INT) estimated_niter\n           <= MAX (th, (unsigned)min_profitable_estimate)))"}]}