{"sha": "c2368db567a853b0765833b3bd4e7934f3c6be61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIzNjhkYjU2N2E4NTNiMDc2NTgzM2IzYmQ0ZTc5MzRmM2M2YmU2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-10T13:12:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-12T23:43:22Z"}, "message": "c++: Fix constexpr if and braced functional cast.\n\nWhile partially instantiating a generic lambda, we can encounter pack\nexpansions or constexpr if where we can't actually do the substitution\nimmediately, and instead remember a partial instantiation context\nin *_EXTRA_ARGS.  This includes any local_specializations used in the\npattern or condition.  In this testcase our tree walk wasn't finding the use\nof i because we weren't walking into the type of a CONSTRUCTOR.  Fixed by\nmoving the code for doing that from find_parameter_packs_r into\ncp_walk_subtrees.\n\n2020-02-11  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/92583\n\tPR c++/92654\n\t* tree.c (cp_walk_subtrees): Walk CONSTRUCTOR types here.\n\t* pt.c (find_parameter_packs_r): Not here.", "tree": {"sha": "cafcb81e34026f059e57589f94c12142ae353a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cafcb81e34026f059e57589f94c12142ae353a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2368db567a853b0765833b3bd4e7934f3c6be61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2368db567a853b0765833b3bd4e7934f3c6be61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2368db567a853b0765833b3bd4e7934f3c6be61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2368db567a853b0765833b3bd4e7934f3c6be61/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68bb7e3b9dc3be6c9ceecc2c87b9c678e1a045dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68bb7e3b9dc3be6c9ceecc2c87b9c678e1a045dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68bb7e3b9dc3be6c9ceecc2c87b9c678e1a045dc"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "e0dd0388e14e9ed93f76b8610367d483d8b787e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c2368db567a853b0765833b3bd4e7934f3c6be61", "patch": "@@ -1,3 +1,10 @@\n+2020-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92583\n+\tPR c++/92654\n+\t* tree.c (cp_walk_subtrees): Walk CONSTRUCTOR types here.\n+\t* pt.c (find_parameter_packs_r): Not here.\n+\n 2020-02-12 Iain Sandoe <iain@sandoe.co.uk>\n \n \t* coroutines.cc (build_actor_fn): Implement deallocation function"}, {"sha": "6e7f4555da87f364ae87c08bdf2a4e408fe199d2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c2368db567a853b0765833b3bd4e7934f3c6be61", "patch": "@@ -3924,9 +3924,6 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     case TEMPLATE_DECL:\n       if (!DECL_TEMPLATE_TEMPLATE_PARM_P (t))\n \treturn NULL_TREE;\n-      gcc_fallthrough();\n-\n-    case CONSTRUCTOR:\n       cp_walk_tree (&TREE_TYPE (t),\n \t\t    &find_parameter_packs_r, ppd, ppd->visited);\n       return NULL_TREE;"}, {"sha": "736ef6fe667202389e7d3861782286a331d10d63", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c2368db567a853b0765833b3bd4e7934f3c6be61", "patch": "@@ -5024,6 +5024,11 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n       *walk_subtrees_p = 0;\n       break;\n \n+    case CONSTRUCTOR:\n+      if (COMPOUND_LITERAL_P (*tp))\n+\tWALK_SUBTREE (TREE_TYPE (*tp));\n+      break;\n+\n     case TRAIT_EXPR:\n       WALK_SUBTREE (TRAIT_EXPR_TYPE1 (*tp));\n       WALK_SUBTREE (TRAIT_EXPR_TYPE2 (*tp));"}, {"sha": "eb5d5faf4936cc10154e4789124da199a644575c", "filename": "gcc/testsuite/g++.dg/cpp0x/nondeduced7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnondeduced7.C?ref=c2368db567a853b0765833b3bd4e7934f3c6be61", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n \n template<typename, int> struct A;\n-template<typename T> struct A<T, T{}> {}; // { dg-error \"partial specialization\" }\n+template<typename T> struct A<T, T{}> {}; // { dg-error \"partial specialization|involves template parameter\" }\n A<int, 0> a;"}, {"sha": "34615f71ee297ae850cfe1b56d2ed050db770aa2", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if-lambda3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2368db567a853b0765833b3bd4e7934f3c6be61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda3.C?ref=c2368db567a853b0765833b3bd4e7934f3c6be61", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/92583\n+// { dg-do compile { target c++17 } }\n+\n+template <int> struct a {\n+  constexpr operator int() { return 42; }\n+};\n+template <typename> using b = int;\n+template <typename d, d> struct e {};\n+template <typename d, d g> using h = e<d, __integer_pack(g)...>;\n+template <typename j, typename k, k... index> void apply(j f, e<k, index...>) {\n+  (f(a<index>{}), ...);\n+}\n+template <auto l, typename j> void m(j f) {\n+  using k = b<decltype(l)>;\n+  using n = h<k, l>;\n+  apply(f, n{});\n+}\n+template <int, int c> void o() {\n+  auto p = [](auto i) {\n+    if constexpr (a<i>{}) ;\n+  };\n+  m<c>(p);\n+}\n+auto q() { o<0, 1>; }"}]}