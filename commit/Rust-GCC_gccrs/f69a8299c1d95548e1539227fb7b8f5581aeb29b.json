{"sha": "f69a8299c1d95548e1539227fb7b8f5581aeb29b", "node_id": "C_kwDOANBUbNoAKGY2OWE4Mjk5YzFkOTU1NDhlMTUzOTIyN2ZiN2I4ZjU1ODFhZWIyOWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-16T20:47:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-17T00:34:42Z"}, "message": "libstdc++: Ensure std::to_chars overloads all declared in <format> [PR107720]\n\nFor powerpc64le we need to be able to format both of __ieee128 and\n__ibm128, so we need the std::to_chars overloads for both types to be\nvisible at once. The __ieee128 overloads are always visible in C++23\nmode, because they're used to implement the _Float128 overloads. The\n__ibm128 overloads are only visible when long double is __ibm128.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107720\n\t* include/std/format [_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT]:\n\tDeclare overloads of std::to_chars for the alternative long\n\tdouble type.", "tree": {"sha": "630b7bd6f9dae3836c246b3a63b0e5ece804ca49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/630b7bd6f9dae3836c246b3a63b0e5ece804ca49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f69a8299c1d95548e1539227fb7b8f5581aeb29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f69a8299c1d95548e1539227fb7b8f5581aeb29b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f69a8299c1d95548e1539227fb7b8f5581aeb29b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f69a8299c1d95548e1539227fb7b8f5581aeb29b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80909529c9a2fc0aa0ccc285da2c9cc233c04aa7"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "f4fc85a16d2ec06d4c64fa6d019b924cf8abe434", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f69a8299c1d95548e1539227fb7b8f5581aeb29b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f69a8299c1d95548e1539227fb7b8f5581aeb29b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=f69a8299c1d95548e1539227fb7b8f5581aeb29b", "patch": "@@ -1237,6 +1237,34 @@ namespace __format\n   using __float128_t = __ieee128;\n # define _GLIBCXX_FORMAT_F128 1\n \n+#ifdef __LONG_DOUBLE_IEEE128__\n+  // These overloads exist in the library, but are not declared.\n+  // Make them available as std::__format::to_chars.\n+  to_chars_result\n+  to_chars(char*, char*, __ibm128) noexcept\n+    __asm(\"_ZSt8to_charsPcS_e\");\n+\n+  to_chars_result\n+  to_chars(char*, char*, __ibm128, chars_format) noexcept\n+    __asm(\"_ZSt8to_charsPcS_eSt12chars_format\");\n+\n+  to_chars_result\n+  to_chars(char*, char*, __ibm128, chars_format, int) noexcept\n+    __asm(\"_ZSt8to_charsPcS_eSt12chars_formati\");\n+#elif __cplusplus == 202002L\n+  to_chars_result\n+  to_chars(char*, char*, __ieee128) noexcept\n+    __asm(\"_ZSt8to_charsPcS_u9__ieee128\");\n+\n+  to_chars_result\n+  to_chars(char*, char*, __ieee128, chars_format) noexcept\n+    __asm(\"_ZSt8to_charsPcS_u9__ieee128St12chars_format\");\n+\n+  to_chars_result\n+  to_chars(char*, char*, __ieee128, chars_format, int) noexcept\n+    __asm(\"_ZSt8to_charsPcS_u9__ieee128St12chars_formati\");\n+#endif\n+\n #elif defined _GLIBCXX_LDOUBLE_IS_IEEE_BINARY128\n \n   // Format 128-bit floating-point types using long double."}]}