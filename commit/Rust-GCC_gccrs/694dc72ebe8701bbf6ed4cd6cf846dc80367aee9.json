{"sha": "694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0ZGM3MmViZTg3MDFiYmY2ZWQ0Y2Q2Y2Y4NDZkYzgwMzY3YWVlOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-06-19T15:56:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-06-19T15:56:27Z"}, "message": "tree.c (find_decls_types_r): Remove all non-VAR_DECLs from blocks.\n\n\n\t* tree.c (find_decls_types_r): Remove all non-VAR_DECLs from\n\tblocks.\n\t* g++.dg/lto/pr84805_0.C: Update template.\n\t* g++.dg/lto/pr84805_1.C: Update template.\n\nFrom-SVN: r261748", "tree": {"sha": "f420db30ee3e8c8765599066414b33f045511ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f420db30ee3e8c8765599066414b33f045511ed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/comments", "author": null, "committer": null, "parents": [{"sha": "583d09f3653e12a895fbe6c86ce4bfbae0abc2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583d09f3653e12a895fbe6c86ce4bfbae0abc2cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583d09f3653e12a895fbe6c86ce4bfbae0abc2cc"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "4d59d2d1ee08b1f410c8f6fc8170379b3df5d22b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "patch": "@@ -1,3 +1,8 @@\n+2018-06-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (find_decls_types_r): Remove all non-VAR_DECLs from\n+\tblocks.\n+\n 2018-06-19  Martin Liska  <mliska@suse.cz>\n \n \t* config/i386/i386.c (ix86_can_inline_p): Do not use"}, {"sha": "8aa3c65e200c6a1a7f69706c84c7bac954ff721d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "patch": "@@ -1,3 +1,8 @@\n+2018-06-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/lto/pr84805_0.C: Update template.\n+\t* g++.dg/lto/pr84805_1.C: Update template.\n+\n 2018-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/aggr24.adb: New test."}, {"sha": "c9e00add79f43ab109caa76362061c0b772c42bc", "filename": "gcc/testsuite/g++.dg/lto/pr84805_0.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_0.C?ref=694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "patch": "@@ -23,7 +23,7 @@ template < typename _Tp, _Lock_policy, bool = is_array< _Tp >::value,\n            bool = is_void::value >\n class __shared_ptr_access {};\n template < typename _Tp, _Lock_policy _Lp >\n-class __shared_ptr : __shared_ptr_access< _Tp, _Lp > { // { dg-lto-warning \"7: type 'struct __shared_ptr' violates the C\\\\+\\\\+ One Definition Rule\" }\n+class __shared_ptr : __shared_ptr_access< _Tp, _Lp > {\n   using element_type = _Tp;\n   element_type *_M_ptr;\n   __shared_count< _Lp > _M_refcount;\n@@ -90,7 +90,7 @@ class ExtNameBuff;\n class ExtSheetBuffer;\n class ExcelToSc;\n class XclImpColRowSettings;\n-struct RootData { // { dg-lto-warning \"8: type 'struct RootData' violates the C\\\\+\\\\+ One Definition Rule\" }\n+struct RootData { \n   BiffTyp eDateiTyp;\n   ExtSheetBuffer *pExtSheetBuff;\n   SharedFormulaBuffer *pShrfmlaBuff;\n@@ -105,7 +105,7 @@ class ScExtDocOptions;\n class XclFontPropSetHelper;\n class XclChPropSetHelper;\n class XclTracer;\n-struct XclRootData { // { dg-lto-warning \"8: type 'struct XclRootData' violates the C\\\\+\\\\+ One Definition Rule\" }\n+struct XclRootData {\n   typedef std::shared_ptr< ScEditEngineDefaulter > ScEEDefaulterRef;\n   typedef std::shared_ptr< ScHeaderEditEngine > ScHeaderEERef;\n   typedef std::shared_ptr< EditEngine > EditEngineRef;\n@@ -141,12 +141,12 @@ struct XclRootData { // { dg-lto-warning \"8: type 'struct XclRootData' violates\n   RootDataRef mxRD;\n   virtual ~XclRootData();\n };\n-class XclRoot { // { dg-lto-warning \"7: type 'struct XclRoot' violates the C\\\\+\\\\+ One Definition Rule\" }\n+class XclRoot {\n public:\n   virtual ~XclRoot();\n   XclRootData &mrData;\n };\n-class XclImpRoot : XclRoot {}; // { dg-lto-warning \"7: type 'struct XclImpRoot' violates the C\\\\+\\\\+ One Definition Rule\" }\n+class XclImpRoot : XclRoot {}; \n class XclImpColRowSettings : XclImpRoot {};\n void lcl_ExportExcelBiff() {\n XclRootData aExpData();"}, {"sha": "b1310b7c77ccb0937affeba3317539cf41f7fddb", "filename": "gcc/testsuite/g++.dg/lto/pr84805_1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr84805_1.C?ref=694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "patch": "@@ -1,9 +1,9 @@\n-class XclRoot {\n+class XclRoot { // { dg-lto-warning \"7: type 'struct XclRoot' violates the C\\\\+\\\\+ One Definition Rule\" }\n public:\n   virtual ~XclRoot();\n };\n class XclImpRoot : XclRoot {};\n-struct RootData {\n+struct RootData { // { dg-lto-warning \"8: type 'struct RootData' violates the C\\\\+\\\\+ One Definition Rule\" }\n   XclImpRoot pIR;\n };\n class ExcRoot {"}, {"sha": "3f75f7f9bfba0827e1b21f267c33c5957cf3c69a", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694dc72ebe8701bbf6ed4cd6cf846dc80367aee9/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=694dc72ebe8701bbf6ed4cd6cf846dc80367aee9", "patch": "@@ -5173,7 +5173,10 @@ free_lang_data_in_type (tree type)\n   /* Drop TYPE_DECLs in TYPE_NAME in favor of the identifier in the\n      TYPE_DECL if the type doesn't have linkage.  */\n   if (! type_with_linkage_p (type))\n-    TYPE_NAME (type) = TYPE_IDENTIFIER (type);\n+    {\n+      TYPE_NAME (type) = TYPE_IDENTIFIER (type);\n+      TYPE_STUB_DECL (type) = NULL;\n+    }\n }\n \n \n@@ -5556,10 +5559,22 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n     }\n   else if (TREE_CODE (t) == BLOCK)\n     {\n-      tree tem;\n-      for (tem = BLOCK_VARS (t); tem; tem = TREE_CHAIN (tem))\n-\tfld_worklist_push (tem, fld);\n-      for (tem = BLOCK_SUBBLOCKS (t); tem; tem = BLOCK_CHAIN (tem))\n+      for (tree *tem = &BLOCK_VARS (t); *tem; )\n+\t{\n+\t  if (TREE_CODE (*tem) != VAR_DECL\n+\t      || !auto_var_in_fn_p (*tem, DECL_CONTEXT (*tem)))\n+\t    {\n+\t      gcc_assert (TREE_CODE (*tem) != RESULT_DECL\n+\t\t\t  && TREE_CODE (*tem) != PARM_DECL);\n+\t      *tem = TREE_CHAIN (*tem);\n+\t    }\n+\t  else \n+\t    {\n+\t      fld_worklist_push (*tem, fld);\n+\t      tem = &TREE_CHAIN (*tem);\n+\t    }\n+\t}\n+      for (tree tem = BLOCK_SUBBLOCKS (t); tem; tem = BLOCK_CHAIN (tem))\n \tfld_worklist_push (tem, fld);\n       fld_worklist_push (BLOCK_ABSTRACT_ORIGIN (t), fld);\n     }"}]}