{"sha": "4081596e852a3a1c2baaa5aa5bb539a8de1a78a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4MTU5NmU4NTJhM2ExYzJiYWFhNWFhNWJiNTM5YThkZTFhNzhhMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-06T20:11:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-09T13:09:50Z"}, "message": "c++: Consistently expose singleton overloads\n\nThis is a patch from my name-lookup overhaul.  I noticed the parser\nand one path in name-lookup looked through an overload of a single\nknown decl.  It seems more consistent to do that in both paths through\nname-lookup, and not in the parser itself.\n\n\tgcc/cp/\n\t* name-lookup.c (lookup_qualified_name): Expose an overload of a\n\tsingleton with known type.\n\t(lookup_name_1): Just check the overload's type to expose it.\n\t* parser.c (cp_parser_lookup_name): Do not do that check here.", "tree": {"sha": "039f56ab84191536cfbb0c27ded6f402062118c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039f56ab84191536cfbb0c27ded6f402062118c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede8cfb8a450ff95f5c510605de76958613dc4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede8cfb8a450ff95f5c510605de76958613dc4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede8cfb8a450ff95f5c510605de76958613dc4a5"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "16efd1613019cd4c40734dfaba35f1f507052e86", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=4081596e852a3a1c2baaa5aa5bb539a8de1a78a3", "patch": "@@ -5885,7 +5885,14 @@ lookup_qualified_name (tree scope, tree name, LOOK_want want, bool complain)\n       name_lookup lookup (name, want);\n \n       if (qualified_namespace_lookup (scope, &lookup))\n-\tt = lookup.value;\n+\t{\n+\t  t = lookup.value;\n+\n+\t  /* If we have a known type overload, pull it out.  This can happen\n+\t     for using decls.  */\n+\t  if (TREE_CODE (t) == OVERLOAD && TREE_TYPE (t) != unknown_type_node)\n+\t    t = OVL_FUNCTION (t);\n+\t}\n     }\n   else if (cxx_dialect != cxx98 && TREE_CODE (scope) == ENUMERAL_TYPE)\n     t = lookup_enumerator (scope, name);\n@@ -6515,8 +6522,9 @@ lookup_name_1 (tree name, LOOK_where where, LOOK_want want)\n \n  found:;\n \n-  /* If we have a single function from a using decl, pull it out.  */\n-  if (val && TREE_CODE (val) == OVERLOAD && !really_overloaded_fn (val))\n+  /* If we have a known type overload, pull it out.  This can happen\n+     for both using decls and unhidden functions.  */\n+  if (val && TREE_CODE (val) == OVERLOAD && TREE_TYPE (val) != unknown_type_node)\n     val = OVL_FUNCTION (val);\n \n   return val;"}, {"sha": "bbf157eb47f49b977860a651202b6910e96859f6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4081596e852a3a1c2baaa5aa5bb539a8de1a78a3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4081596e852a3a1c2baaa5aa5bb539a8de1a78a3", "patch": "@@ -28633,11 +28633,6 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n \t\t\t\t\t  prefer_type_arg (tag_type),\n \t\t\t\t\t  /*complain=*/true);\n \n-\t  /* If we have a single function from a using decl, pull it out.  */\n-\t  if (TREE_CODE (decl) == OVERLOAD\n-\t      && !really_overloaded_fn (decl))\n-\t    decl = OVL_FUNCTION (decl);\n-\n \t  if (pushed_scope)\n \t    pop_scope (pushed_scope);\n \t}"}]}