{"sha": "bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ2OGEzYTdlNzRjOGEwMzRkYWIzZWZkODRjMDljNGZlZDA2NmZjMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-11-09T09:18:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-11-09T09:18:35Z"}, "message": "Avoid CSE of MEMs in different address spaces\n\n        * cselib.c (add_mem_for_addr): Compare address spaces when\n        matching memories.\n        (cselib_lookup_mem): Likewise.\n        * fold-const.c (operand_equal_p): Check address spaces of\n        pointer types before checking integer constants.\n\nFrom-SVN: r229998", "tree": {"sha": "46bd72668958aed984a4145ddb893bf82b2a00da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46bd72668958aed984a4145ddb893bf82b2a00da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1/comments", "author": null, "committer": null, "parents": [{"sha": "f0ebde5acecc9fd69fd6dc1c8a9dd568edf96747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ebde5acecc9fd69fd6dc1c8a9dd568edf96747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ebde5acecc9fd69fd6dc1c8a9dd568edf96747"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "93fdcc95610f3ece660386d8ad98a374f3f63971", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "patch": "@@ -1,5 +1,11 @@\n 2015-11-09  Richard Henderson  <rth@redhat.com>\n \n+\t* cselib.c (add_mem_for_addr): Compare address spaces when\n+\tmatching memories.\n+\t(cselib_lookup_mem): Likewise.\n+\t* fold-const.c (operand_equal_p): Check address spaces of\n+\tpointer types before checking integer constants.\n+\n \tPR tree-opt/66768\n \t* tree-ssa-address.c (create_mem_ref_raw): Use a pointer of\n \tthe correct type for the base."}, {"sha": "8d73f15aa11a012956b3194423b615f1d2278004", "filename": "gcc/cselib.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "patch": "@@ -1329,15 +1329,15 @@ new_cselib_val (unsigned int hash, machine_mode mode, rtx x)\n static void\n add_mem_for_addr (cselib_val *addr_elt, cselib_val *mem_elt, rtx x)\n {\n-  struct elt_loc_list *l;\n-\n   addr_elt = canonical_cselib_val (addr_elt);\n   mem_elt = canonical_cselib_val (mem_elt);\n \n   /* Avoid duplicates.  */\n-  for (l = mem_elt->locs; l; l = l->next)\n+  addr_space_t as = MEM_ADDR_SPACE (x);\n+  for (elt_loc_list *l = mem_elt->locs; l; l = l->next)\n     if (MEM_P (l->loc)\n-\t&& CSELIB_VAL_PTR (XEXP (l->loc, 0)) == addr_elt)\n+\t&& CSELIB_VAL_PTR (XEXP (l->loc, 0)) == addr_elt\n+        && MEM_ADDR_SPACE (l->loc) == as)\n       {\n \tpromote_debug_loc (l);\n \treturn;\n@@ -1364,7 +1364,6 @@ cselib_lookup_mem (rtx x, int create)\n   cselib_val **slot;\n   cselib_val *addr;\n   cselib_val *mem_elt;\n-  struct elt_list *l;\n \n   if (MEM_VOLATILE_P (x) || mode == BLKmode\n       || !cselib_record_memory\n@@ -1379,14 +1378,19 @@ cselib_lookup_mem (rtx x, int create)\n   addr = cselib_lookup (XEXP (x, 0), addr_mode, create, mode);\n   if (! addr)\n     return 0;\n-\n   addr = canonical_cselib_val (addr);\n+\n   /* Find a value that describes a value of our mode at that address.  */\n-  for (l = addr->addr_list; l; l = l->next)\n+  addr_space_t as = MEM_ADDR_SPACE (x);\n+  for (elt_list *l = addr->addr_list; l; l = l->next)\n     if (GET_MODE (l->elt->val_rtx) == mode)\n       {\n-\tpromote_debug_loc (l->elt->locs);\n-\treturn l->elt;\n+\tfor (elt_loc_list *l2 = l->elt->locs; l2; l2 = l2->next)\n+\t  if (MEM_P (l2->loc) && MEM_ADDR_SPACE (l2->loc) == as)\n+\t    {\n+\t      promote_debug_loc (l->elt->locs);\n+\t      return l->elt;\n+\t    }\n       }\n \n   if (! create)"}, {"sha": "d8a45d998dc9318a5278be93d1eef453cc1be92c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd68a3a7e74c8a034dab3efd84c09c4fed066fc1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=bd68a3a7e74c8a034dab3efd84c09c4fed066fc1", "patch": "@@ -2697,6 +2697,13 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n   if (!TREE_TYPE (arg0) || !TREE_TYPE (arg1))\n     return 0;\n \n+  /* We cannot consider pointers to different address space equal.  */\n+  if (POINTER_TYPE_P (TREE_TYPE (arg0))\n+      && POINTER_TYPE_P (TREE_TYPE (arg1))\n+      && (TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (arg0)))\n+\t  != TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (arg1)))))\n+    return 0;\n+\n   /* Check equality of integer constants before bailing out due to\n      precision differences.  */\n   if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n@@ -2719,13 +2726,6 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t\t\t     != POINTER_TYPE_P (TREE_TYPE (arg1)))\n \treturn 0;\n \n-      /* We cannot consider pointers to different address space equal.  */\n-      if (POINTER_TYPE_P (TREE_TYPE (arg0))\n-\t\t\t  && POINTER_TYPE_P (TREE_TYPE (arg1))\n-\t  && (TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (arg0)))\n-\t      != TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (arg1)))))\n-\treturn 0;\n-\n       /* If both types don't have the same precision, then it is not safe\n \t to strip NOPs.  */\n       if (element_precision (TREE_TYPE (arg0))"}]}