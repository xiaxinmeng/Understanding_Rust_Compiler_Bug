{"sha": "965fa640e8492d152af80d5f5413563dee63df10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1ZmE2NDBlODQ5MmQxNTJhZjgwZDVmNTQxMzU2M2RlZTYzZGYxMA==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-06-12T15:57:48Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-06-12T15:57:48Z"}, "message": "fold-vec-load-vec_vsx_ld-char.c: New.\n\n\n[testsuite]\n\n2018-05-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-char.c: New.\n\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-double.c: New.\n\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-float.c: New.\n\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-int.c: New.\n\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-short.c: New.\n\nFrom-SVN: r261505", "tree": {"sha": "27ce6dfbc587dd5873e5fb7d7e1acddce680be16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ce6dfbc587dd5873e5fb7d7e1acddce680be16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/965fa640e8492d152af80d5f5413563dee63df10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965fa640e8492d152af80d5f5413563dee63df10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965fa640e8492d152af80d5f5413563dee63df10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965fa640e8492d152af80d5f5413563dee63df10/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0343162b10ebc907150d30adc076a36f96d9bcd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0343162b10ebc907150d30adc076a36f96d9bcd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0343162b10ebc907150d30adc076a36f96d9bcd4"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "0b0995308530c0506ec9cf9ee09136a7359cded1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=965fa640e8492d152af80d5f5413563dee63df10", "patch": "@@ -1,3 +1,12 @@\n+2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-double.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-load-vec_vsx_ld-short.c: New.\n+\n 2018-06-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-load-builtin_vec_xl-char.c: New."}, {"sha": "0b76341b1de3df5de40d1459242885d2128afff9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-vec_vsx_ld-char.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-char.c?ref=965fa640e8492d152af80d5f5413563dee63df10", "patch": "@@ -0,0 +1,39 @@\n+/* Verify that overloaded built-ins for vec_vsx_ld with char\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (offset, loadfrom);\t\t\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (CST_OFFSET, loadfrom);\t\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed char, signed long long, signed char);\n+BUILD_VAR_TEST( test2,  vector signed char, signed int, signed char);\n+BUILD_CST_TEST( test3,  vector signed char, 12, signed char);\n+\n+BUILD_VAR_TEST( test4,  vector unsigned char, signed long long, unsigned char);\n+BUILD_VAR_TEST( test5,  vector unsigned char, signed int, unsigned char);\n+BUILD_CST_TEST( test6,  vector unsigned char, 12, unsigned char);\n+\n+BUILD_VAR_TEST( test7,  vector signed char, signed long long, vector signed char);\n+BUILD_VAR_TEST( test8,  vector signed char, signed int, vector signed char);\n+BUILD_CST_TEST( test9,  vector signed char, 12, vector signed char);\n+\n+BUILD_VAR_TEST( test10,  vector unsigned char, signed long long, vector unsigned char);\n+BUILD_VAR_TEST( test11,  vector unsigned char, signed int, vector unsigned char);\n+BUILD_CST_TEST( test12,  vector unsigned char, 12, vector unsigned char);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */\n+"}, {"sha": "beb6d037a6bae52c05555831c8167f75f1f3c487", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-vec_vsx_ld-double.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-double.c?ref=965fa640e8492d152af80d5f5413563dee63df10", "patch": "@@ -0,0 +1,30 @@\n+/* Verify that overloaded built-ins for vec_vsx_ld with double\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (offset, loadfrom);\t\t\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (CST_OFFSET, loadfrom);\t\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1, vector  double, long long, double);\n+BUILD_VAR_TEST( test2, vector  double, int, double);\n+BUILD_CST_TEST( test3, vector  double, 12, double);\n+\n+BUILD_VAR_TEST( test4, vector  double, int, vector double);\n+BUILD_VAR_TEST( test5, vector  double, long long, vector double);\n+BUILD_CST_TEST( test6, vector  double, 12, vector double);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 6 } } */"}, {"sha": "5f9b6d3583061a7f684685c5965939239b8a95d2", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-vec_vsx_ld-float.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-float.c?ref=965fa640e8492d152af80d5f5413563dee63df10", "patch": "@@ -0,0 +1,30 @@\n+/* Verify that overloaded built-ins for vec_vsx_ld with float\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (offset, loadfrom);\t\t\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (CST_OFFSET, loadfrom);\t\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector float, signed long long, float);\n+BUILD_VAR_TEST( test3,  vector float, signed int, float);\n+BUILD_CST_TEST( test4,  vector float, 12, float);\n+\n+BUILD_VAR_TEST( test5,  vector float, signed long long, vector float);\n+BUILD_VAR_TEST( test7,  vector float, signed int, vector float);\n+BUILD_CST_TEST( test8,  vector float, 12, vector float);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 6 } } */"}, {"sha": "a59f52fbb1e17a7b93ef04855573c8cbc4969e19", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-vec_vsx_ld-int.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-int.c?ref=965fa640e8492d152af80d5f5413563dee63df10", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_vsx_ld with int\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (offset, loadfrom);\t\t\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (CST_OFFSET, loadfrom);\t\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed int, signed long long, signed int);\n+BUILD_VAR_TEST( test2,  vector signed int, signed int, signed int);\n+BUILD_CST_TEST( test3,  vector signed int, 12, signed int);\n+\n+BUILD_VAR_TEST( test4,  vector unsigned int, signed long long, unsigned int);\n+BUILD_VAR_TEST( test5,  vector unsigned int, signed int, unsigned int);\n+BUILD_CST_TEST( test6,  vector unsigned int, 12, unsigned int);\n+\n+BUILD_VAR_TEST( test7,  vector signed int, signed long long, vector signed int);\n+BUILD_VAR_TEST( test8,  vector signed int, signed int, vector signed int);\n+BUILD_CST_TEST( test9,  vector signed int, 12, vector signed int);\n+\n+BUILD_VAR_TEST( test10,  vector unsigned int, signed long long, vector unsigned int);\n+BUILD_VAR_TEST( test11,  vector unsigned int, signed int, vector unsigned int);\n+BUILD_CST_TEST( test12,  vector unsigned int, 12, vector unsigned int);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */"}, {"sha": "5c121fa26bd79520dd3de1d956f9235504e79246", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-vec_vsx_ld-longlong.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-longlong.c?ref=965fa640e8492d152af80d5f5413563dee63df10", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_vsx_ld with long long\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (offset, loadfrom);\t\t\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (CST_OFFSET, loadfrom);\t\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed long long, signed long long, signed long long);\n+BUILD_VAR_TEST( test2,  vector signed long long, signed int, signed long long);\n+BUILD_CST_TEST( test3,  vector signed long long, 12, signed long long);\n+\n+BUILD_VAR_TEST( test4,  vector unsigned long long, signed long long, unsigned long long);\n+BUILD_VAR_TEST( test5,  vector unsigned long long, signed int, unsigned long long);\n+BUILD_CST_TEST( test6,  vector unsigned long long, 12, unsigned long long);\n+\n+BUILD_VAR_TEST( test7,  vector signed long long, signed long long, vector signed long long);\n+BUILD_VAR_TEST( test8,  vector signed long long, signed int, vector signed long long);\n+BUILD_CST_TEST( test9,  vector signed long long, 12, vector signed long long);\n+\n+BUILD_VAR_TEST( test10,  vector unsigned long long, signed long long, vector unsigned long long);\n+BUILD_VAR_TEST( test11,  vector unsigned long long, signed int, vector unsigned long long);\n+BUILD_CST_TEST( test12,  vector unsigned long long, 12, vector unsigned long long);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */"}, {"sha": "07154d811a1059212da5cf8b615d678a80f7e7c8", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-load-vec_vsx_ld-short.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965fa640e8492d152af80d5f5413563dee63df10/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-load-vec_vsx_ld-short.c?ref=965fa640e8492d152af80d5f5413563dee63df10", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_vsx_ld with short\n+   inputs produce the right code.  */\n+\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+#define BUILD_VAR_TEST(TESTNAME1, RETTYPE, VAR_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _var (VAR_OFFSET offset, LOADFROM * loadfrom) \t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (offset, loadfrom);\t\t\t\t\\\n+}\n+\n+#define BUILD_CST_TEST(TESTNAME1, RETTYPE, CST_OFFSET, LOADFROM)\t\\\n+RETTYPE\t\t\t\t\t\t\t\t\t\\\n+TESTNAME1 ## _cst (LOADFROM * loadfrom) \t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+\treturn vec_vsx_ld (CST_OFFSET, loadfrom);\t\t\t\\\n+}\n+\n+BUILD_VAR_TEST( test1,  vector signed short, signed long long, signed short);\n+BUILD_VAR_TEST( test2,  vector signed short, signed int, signed short);\n+BUILD_CST_TEST( test3,  vector signed short, 12, signed short);\n+\n+BUILD_VAR_TEST( test4,  vector unsigned short, signed long long, unsigned short);\n+BUILD_VAR_TEST( test5,  vector unsigned short, signed int, unsigned short);\n+BUILD_CST_TEST( test6,  vector unsigned short, 12, unsigned short);\n+\n+BUILD_VAR_TEST( test7,  vector signed short, signed long long, vector signed short);\n+BUILD_VAR_TEST( test8,  vector signed short, signed int, vector signed short);\n+BUILD_CST_TEST( test9,  vector signed short, 12, vector signed short);\n+\n+BUILD_VAR_TEST( test10,  vector unsigned short, signed long long, vector unsigned short);\n+BUILD_VAR_TEST( test11,  vector unsigned short, signed int, vector unsigned short);\n+BUILD_CST_TEST( test12,  vector unsigned short, 12, vector unsigned short);\n+\n+/* { dg-final { scan-assembler-times {\\mlxvw4x\\M|\\mlxvd2x\\M|\\mlxvx\\M|\\mlvx\\M} 12 } } */"}]}