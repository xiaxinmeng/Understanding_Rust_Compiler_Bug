{"sha": "f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlMDRjNzlhYzJjNGZmZmY2YmM1MjdhZmRjMWIwMzExYjc5ZTM2YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-12-07T11:47:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-07T11:47:25Z"}, "message": "decl.c (gnat_to_gnu_entity): Translate System.Address into ptr_type_node for every foreign convention.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Translate\n\tSystem.Address into ptr_type_node for every foreign convention.\n\t(gnat_to_gnu_subprog_type): Likewise for result and parameter types.\n\t(gnat_to_gnu_param): Do not do it here for GCC builtins.\n\t(intrin_return_compatible_p): Likewise.\n\nFrom-SVN: r243340", "tree": {"sha": "8b209e7ef3aee08090d36a46b566d58761eb6b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b209e7ef3aee08090d36a46b566d58761eb6b32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a/comments", "author": null, "committer": null, "parents": [{"sha": "aa35e3ba8ef4cd36991a877063632edef552068b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa35e3ba8ef4cd36991a877063632edef552068b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa35e3ba8ef4cd36991a877063632edef552068b"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "2380adcaccac0cfb1607caabe53caef2f0ef8239", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a", "patch": "@@ -1,3 +1,11 @@\n+2016-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Translate\n+\tSystem.Address into ptr_type_node for every foreign convention.\n+\t(gnat_to_gnu_subprog_type): Likewise for result and parameter types.\n+\t(gnat_to_gnu_param): Do not do it here for GCC builtins.\n+\t(intrin_return_compatible_p): Likewise.\n+\n 2016-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Subtype>:"}, {"sha": "a6e8367d842ff2a67395ac51b31c9b47cb1ddeb0", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f2e04c79ac2c4ffff6bc527afdc1b0311b79e36a", "patch": "@@ -645,7 +645,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  }\n \n \t/* Get the type after elaborating the renamed object.  */\n-\tif (Convention (gnat_entity) == Convention_C\n+\tif (Has_Foreign_Convention (gnat_entity)\n \t    && Is_Descendant_Of_Address (gnat_type))\n \t  gnu_type = ptr_type_node;\n \telse\n@@ -5404,12 +5404,6 @@ gnat_to_gnu_param (Entity_Id gnat_param, tree gnu_param_type, bool first,\n     gnu_param_type\n       = TREE_TYPE (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (gnu_param_type))));\n \n-  /* For GCC builtins, pass Address integer types as (void *)  */\n-  if (Convention (gnat_subprog) == Convention_Intrinsic\n-      && Present (Interface_Name (gnat_subprog))\n-      && Is_Descendant_Of_Address (gnat_param_type))\n-    gnu_param_type = ptr_type_node;\n-\n   /* Arrays are passed as pointers to element type for foreign conventions.  */\n   if (foreign && mech != By_Copy && TREE_CODE (gnu_param_type) == ARRAY_TYPE)\n     {\n@@ -5784,7 +5778,9 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \n   else\n     {\n-      if (Convention (gnat_subprog) == Convention_C\n+      /* For foreign convention subprograms, return System.Address as void *\n+\t or equivalent.  Note that this comprises GCC builtins.  */\n+      if (Has_Foreign_Convention (gnat_subprog)\n \t  && Is_Descendant_Of_Address (gnat_return_type))\n \tgnu_return_type = ptr_type_node;\n       else\n@@ -5949,7 +5945,9 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \t{\n \t  Entity_Id gnat_param_type = Etype (gnat_param);\n \n-\t  if (Convention (gnat_subprog) == Convention_C\n+\t  /* For foreign convention subprograms, pass System.Address as void *\n+\t     or equivalent.  Note that this comprises GCC builtins.  */\n+\t  if (Has_Foreign_Convention (gnat_subprog)\n \t      && Is_Descendant_Of_Address (gnat_param_type))\n \t    gnu_param_type = ptr_type_node;\n \t  else\n@@ -8910,10 +8908,6 @@ intrin_return_compatible_p (intrin_binding_t * inb)\n       && !VOID_TYPE_P (btin_return_type))\n     return true;\n \n-  /* If return type is Address (integer type), map it to void *.  */\n-  if (Is_Descendant_Of_Address (Etype (inb->gnat_entity)))\n-    ada_return_type = ptr_type_node;\n-\n   /* Check return types compatibility otherwise.  Note that this\n      handles void/void as well.  */\n   if (intrin_types_incompatible_p (btin_return_type, ada_return_type))"}]}