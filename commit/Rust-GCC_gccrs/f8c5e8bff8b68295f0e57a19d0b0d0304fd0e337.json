{"sha": "f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjNWU4YmZmOGI2ODI5NWYwZTU3YTE5ZDBiMGQwMzA0ZmQwZTMzNw==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-04-25T16:27:50Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-04-25T16:27:50Z"}, "message": "(DBX_*): Use definitions from config/dbxcoff.h instead.\n\nFrom-SVN: r13981", "tree": {"sha": "80e95f266b2ab095743551cbf1747711c13dda42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80e95f266b2ab095743551cbf1747711c13dda42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337/comments", "author": null, "committer": null, "parents": [{"sha": "b64deb96ba30ac61563887cd76dc11b8904ccbc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64deb96ba30ac61563887cd76dc11b8904ccbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64deb96ba30ac61563887cd76dc11b8904ccbc5"}], "stats": {"total": 40, "additions": 4, "deletions": 36}, "files": [{"sha": "933f18409c62c653e3d96f8357ac672e32eb0fe3", "filename": "gcc/config/i386/go32.h", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337/gcc%2Fconfig%2Fi386%2Fgo32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337/gcc%2Fconfig%2Fi386%2Fgo32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgo32.h?ref=f8c5e8bff8b68295f0e57a19d0b0d0304fd0e337", "patch": "@@ -1,12 +1,8 @@\n /* Configuration for an i386 running MS-DOS with djgpp/go32.  */\n \n-#define DBX_DEBUGGING_INFO /* support for stabs debugging info */\n-#define PREFERRED_DEBUGGING_TYPE SDB_DEBUG /* leave sdb as default */\n+#include \"dbxcoff.h\"\n+\n #define NO_STAB_H /* DJGPP has no stab.h */\n-#if 0 /* enable this, if '-g' should select stabs debugging */\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-#endif\n \n /* Don't assume anything about the header files. */\n #define NO_IMPLICIT_EXTERN_C\n@@ -66,6 +62,8 @@ dtor_section ()\t\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.section %s\\n\", NAME);\t\\\n   } while (0)\n+\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n   do {\t\t\t\t\t\t\\\n     dtor_section ();                   \t\t\\\n     fprintf (FILE, \"%s\\t\", ASM_LONG);\t\t\\\n@@ -83,36 +81,6 @@ dtor_section ()\t\t\t\t\t\t\t\\\n \toutput_file_directive (FILE, main_input_filename);\t\t\\\n   } while (0)\n \n-/* Be function-relative for block and source line stab directives. */\n-\n-#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n-\n-/* but, to make this work, functions must appear prior to line info */\n-\n-#define DBX_FUNCTION_FIRST\n-/* Allow (eg) __attribute__((section \"locked\")) to work */\n-/* Generate a blank trailing N_SO to mark the end of the .o file, since\n-   we can't depend upon the linker to mark .o file boundaries with\n-   embedded stabs.  */\n-\n-#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n-  fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t   \"\\t.text\\n\\t.stabs \\\"\\\",%d,0,0,Letext\\nLetext:\\n\", N_SO)\n-\n-#undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n-  if ( write_symbols == DBX_DEBUG )                     \\\n-  { static int sym_lineno = 1;\t\t\t\t\\\n-    fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\\\n-\t     line, sym_lineno);\t\t\t\t\\\n-    assemble_name (file,\t\t\t\t\\\n-\t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n-    fprintf (file, \"\\n.LM%d:\\n\", sym_lineno);\t\t\\\n-    sym_lineno += 1; } \\\n-  else { \\\n-    fprintf (file, \"\\t.ln\\t%d\\n\", \\\n-  \t     ((sdb_begin_function_line > -1) \\\n-\t     ? line - sdb_begin_function_line : 1)); }\n #define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME)\\\n   do {\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.section %s\\n\", NAME);\t\\"}]}