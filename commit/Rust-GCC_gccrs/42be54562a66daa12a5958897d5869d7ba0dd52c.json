{"sha": "42be54562a66daa12a5958897d5869d7ba0dd52c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiZTU0NTYyYTY2ZGFhMTJhNTk1ODg5N2Q1ODY5ZDdiYTBkZDUyYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:22:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:22:56Z"}, "message": "df-problems.c: Include rtl-iter.h.\n\ngcc/\n\t* df-problems.c: Include rtl-iter.h.\n\t(find_memory): Turn from being a for_each_rtx callback to being\n\ta function that examines each subrtx itself.  Continue to look for\n\tvolatile references even after a nonvolatile one has been found.\n\t(can_move_insns_across): Update calls accordingly.\n\nFrom-SVN: r214634", "tree": {"sha": "ee35ae5e75f350892b2f85029b642bbde535357d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee35ae5e75f350892b2f85029b642bbde535357d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42be54562a66daa12a5958897d5869d7ba0dd52c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42be54562a66daa12a5958897d5869d7ba0dd52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42be54562a66daa12a5958897d5869d7ba0dd52c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42be54562a66daa12a5958897d5869d7ba0dd52c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3aa081329eaf8d7d87b02c3f3cd3c7e4f5678a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3aa081329eaf8d7d87b02c3f3cd3c7e4f5678a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3aa081329eaf8d7d87b02c3f3cd3c7e4f5678a9"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "320b9fcdf41ca738149a5d3690c11d745a298af9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42be54562a66daa12a5958897d5869d7ba0dd52c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42be54562a66daa12a5958897d5869d7ba0dd52c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42be54562a66daa12a5958897d5869d7ba0dd52c", "patch": "@@ -1,3 +1,11 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* df-problems.c: Include rtl-iter.h.\n+\t(find_memory): Turn from being a for_each_rtx callback to being\n+\ta function that examines each subrtx itself.  Continue to look for\n+\tvolatile references even after a nonvolatile one has been found.\n+\t(can_move_insns_across): Update calls accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* ddg.c (walk_mems_2, walk_mems_1): Delete."}, {"sha": "bf8800f9affcdaaa49da1dfbe97d5dddac0d0307", "filename": "gcc/df-problems.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42be54562a66daa12a5958897d5869d7ba0dd52c/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42be54562a66daa12a5958897d5869d7ba0dd52c/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=42be54562a66daa12a5958897d5869d7ba0dd52c", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dce.h\"\n #include \"valtrack.h\"\n #include \"dumpfile.h\"\n+#include \"rtl-iter.h\"\n \n /* Note that turning REG_DEAD_DEBUGGING on will cause\n    gcc.c-torture/unsorted/dump-noaddr.c to fail because it prints\n@@ -3584,25 +3585,27 @@ df_simulate_one_insn_forwards (basic_block bb, rtx_insn *insn, bitmap live)\n #define MEMREF_NORMAL 1\n #define MEMREF_VOLATILE 2\n \n-/* A subroutine of can_move_insns_across_p called through for_each_rtx.\n-   Return either MEMREF_NORMAL or MEMREF_VOLATILE if a memory is found.  */\n+/* Return an OR of MEMREF_NORMAL or MEMREF_VOLATILE for the MEMs in X.  */\n \n static int\n-find_memory (rtx *px, void *data ATTRIBUTE_UNUSED)\n+find_memory (rtx insn)\n {\n-  rtx x = *px;\n-\n-  if (GET_CODE (x) == ASM_OPERANDS && MEM_VOLATILE_P (x))\n-    return MEMREF_VOLATILE;\n-\n-  if (!MEM_P (x))\n-    return 0;\n-  if (MEM_VOLATILE_P (x))\n-    return MEMREF_VOLATILE;\n-  if (MEM_READONLY_P (x))\n-    return 0;\n-\n-  return MEMREF_NORMAL;\n+  int flags = 0;\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, PATTERN (insn), NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      if (GET_CODE (x) == ASM_OPERANDS && MEM_VOLATILE_P (x))\n+\tflags |= MEMREF_VOLATILE;\n+      else if (MEM_P (x))\n+\t{\n+\t  if (MEM_VOLATILE_P (x))\n+\t    flags |= MEMREF_VOLATILE;\n+\t  else if (!MEM_READONLY_P (x))\n+\t    flags |= MEMREF_NORMAL;\n+\t}\n+    }\n+  return flags;\n }\n \n /* A subroutine of can_move_insns_across_p called through note_stores.\n@@ -3706,8 +3709,7 @@ can_move_insns_across (rtx_insn *from, rtx_insn *to,\n \t{\n \t  if (volatile_insn_p (PATTERN (insn)))\n \t    return false;\n-\t  memrefs_in_across |= for_each_rtx (&PATTERN (insn), find_memory,\n-\t\t\t\t\t     NULL);\n+\t  memrefs_in_across |= find_memory (insn);\n \t  note_stores (PATTERN (insn), find_memory_stores,\n \t\t       &mem_sets_in_across);\n \t  /* This is used just to find sets of the stack pointer.  */\n@@ -3789,8 +3791,7 @@ can_move_insns_across (rtx_insn *from, rtx_insn *to,\n \t      int mem_ref_flags = 0;\n \t      int mem_set_flags = 0;\n \t      note_stores (PATTERN (insn), find_memory_stores, &mem_set_flags);\n-\t      mem_ref_flags = for_each_rtx (&PATTERN (insn), find_memory,\n-\t\t\t\t\t    NULL);\n+\t      mem_ref_flags = find_memory (insn);\n \t      /* Catch sets of the stack pointer.  */\n \t      mem_ref_flags |= mem_set_flags;\n "}]}