{"sha": "22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkMTJmYzJjYmU2MGFjODM1NjIxYjExY2RhYTUyZDhkYzZlMDhjZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-05T18:25:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-05T18:25:10Z"}, "message": "trans.c (lvalue_required_p): New case.\n\n\t* gcc-interface/trans.c (lvalue_required_p) <N_Unchecked_Conversion>:\n\tNew case.\n\nFrom-SVN: r153948", "tree": {"sha": "496f3c74617598568d33c870a791ba3897358751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/496f3c74617598568d33c870a791ba3897358751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce/comments", "author": null, "committer": null, "parents": [{"sha": "4b7dd692c22b6fcef9d5f4178d0e9668c03e2941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7dd692c22b6fcef9d5f4178d0e9668c03e2941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7dd692c22b6fcef9d5f4178d0e9668c03e2941"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "42ad20e15fde7275a4f5ab919ac012466f67262a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce", "patch": "@@ -1,3 +1,8 @@\n+2009-11-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (lvalue_required_p) <N_Unchecked_Conversion>:\n+\tNew case.\n+\n 2009-10-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (MAX_FIXED_MODE_SIZE): Delete."}, {"sha": "41be8bb77af4b0eb755ba2cfd238f35db779de32", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=22d12fc2cbe60ac835621b11cdaa52d8dc6e08ce", "patch": "@@ -657,17 +657,16 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   error_gnat_node = Empty;\n }\n \f\n-/* Return a positive value if an lvalue is required for GNAT_NODE.\n-   GNU_TYPE is the type that will be used for GNAT_NODE in the\n-   translated GNU tree.  CONSTANT indicates whether the underlying\n-   object represented by GNAT_NODE is constant in the Ada sense,\n-   ALIASED whether it is aliased (but the latter doesn't affect\n-   the outcome if CONSTANT is not true).\n-\n-   The function climbs up the GNAT tree starting from the node and\n-   returns 1 upon encountering a node that effectively requires an\n-   lvalue downstream.  It returns int instead of bool to facilitate\n-   usage in non purely binary logic contexts.  */\n+/* Return a positive value if an lvalue is required for GNAT_NODE.  GNU_TYPE\n+   is the type that will be used for GNAT_NODE in the translated GNU tree.\n+   CONSTANT indicates whether the underlying object represented by GNAT_NODE\n+   is constant in the Ada sense, ALIASED whether it is aliased (but the latter\n+   doesn't affect the outcome if CONSTANT is not true).\n+\n+   The function climbs up the GNAT tree starting from the node and returns 1\n+   upon encountering a node that effectively requires an lvalue downstream.\n+   It returns int instead of bool to facilitate usage in non-purely binary\n+   logic contexts.  */\n \n static int\n lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n@@ -754,6 +753,13 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n \t      || (Is_Composite_Type (Underlying_Type (Etype (gnat_node)))\n \t\t  && Is_Atomic (Entity (Name (gnat_parent)))));\n \n+    case N_Unchecked_Type_Conversion:\n+      /* Returning 0 is very likely correct but we get better code if we\n+\t go through the conversion.  */\n+      return lvalue_required_p (gnat_parent,\n+\t\t\t\tget_unpadded_type (Etype (gnat_parent)),\n+\t\t\t\tconstant, aliased);\n+\n     default:\n       return 0;\n     }"}]}