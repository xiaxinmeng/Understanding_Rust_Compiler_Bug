{"sha": "ed15c5984e10f6556dffdf397accff804bf60a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxNWM1OTg0ZTEwZjY1NTZkZmZkZjM5N2FjY2ZmODA0YmY2MGE3Yw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito@0xlab.org", "date": "2014-05-02T06:03:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-05-02T06:03:22Z"}, "message": "defaults.h (HONOR_REG_ALLOC_ORDER): Change HONOR_REG_ALLOC_ORDER to a C expression marco.\n\n2014-02-26  Kito Cheng  <kito@0xlab.org>\n\n\t* defaults.h (HONOR_REG_ALLOC_ORDER): Change HONOR_REG_ALLOC_ORDER\n\tto a C expression marco.\n\t* ira-color.c (HONOR_REG_ALLOC_ORDER) : Ditto.\n\t* config/arm/arm.h (HONOR_REG_ALLOC_ORDER): Ditto.\n\t* config/nds32/nds32.h (HONOR_REG_ALLOC_ORDER): Ditto.\n\t* doc/tm.texi (HONOR_REG_ALLOC_ORDER): Update document for\n\tHONOR_REG_ALLOC_ORDER.\n\t* doc/tm.texi.in (HONOR_REG_ALLOC_ORDER): Ditto.\n\nFrom-SVN: r210000", "tree": {"sha": "1c1189af105b1fefc74dac9b1e109c58d2d0656f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c1189af105b1fefc74dac9b1e109c58d2d0656f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed15c5984e10f6556dffdf397accff804bf60a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed15c5984e10f6556dffdf397accff804bf60a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed15c5984e10f6556dffdf397accff804bf60a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed15c5984e10f6556dffdf397accff804bf60a7c/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd2511b3c0f8bf4d447d5765c0b3a247c66ca89"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "6cc7dc488d657f40929bbfe30021719b6bd01ce0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed15c5984e10f6556dffdf397accff804bf60a7c", "patch": "@@ -1,3 +1,14 @@\n+2014-02-26  Kito Cheng  <kito@0xlab.org>\n+\n+\t* defaults.h (HONOR_REG_ALLOC_ORDER): Change HONOR_REG_ALLOC_ORDER\n+\tto a C expression marco.\n+\t* ira-color.c (HONOR_REG_ALLOC_ORDER) : Ditto.\n+\t* config/arm/arm.h (HONOR_REG_ALLOC_ORDER): Ditto.\n+\t* config/nds32/nds32.h (HONOR_REG_ALLOC_ORDER): Ditto.\n+\t* doc/tm.texi (HONOR_REG_ALLOC_ORDER): Update document for\n+\tHONOR_REG_ALLOC_ORDER.\n+\t* doc/tm.texi.in (HONOR_REG_ALLOC_ORDER): Ditto.\n+\n 2014-05-01  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/arc/arc.c (TARGET_LRA_P): Undef before redefine."}, {"sha": "96f3efeb2460c1e61cc70e8cb4850714943c33e0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ed15c5984e10f6556dffdf397accff804bf60a7c", "patch": "@@ -1152,7 +1152,7 @@ extern int arm_regs_in_sequence[];\n \n /* Tell IRA to use the order we define rather than messing it up with its\n    own cost calculations.  */\n-#define HONOR_REG_ALLOC_ORDER\n+#define HONOR_REG_ALLOC_ORDER 1\n \n /* Interrupt functions can only use registers that have already been\n    saved by the prologue, even if they would normally be"}, {"sha": "8f966ec1475ebb11c635cc989a7f16aaff3cbf9d", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=ed15c5984e10f6556dffdf397accff804bf60a7c", "patch": "@@ -553,7 +553,7 @@ enum nds32_builtins\n \n /* Tell IRA to use the order we define rather than messing it up with its\n    own cost calculations.  */\n-#define HONOR_REG_ALLOC_ORDER\n+#define HONOR_REG_ALLOC_ORDER 1\n \n /* The number of consecutive hard regs needed starting at\n    reg \"regno\" for holding a value of mode \"mode\".  */"}, {"sha": "1c48759fd805065117ac5e1eb1cc354a4446b73a", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=ed15c5984e10f6556dffdf397accff804bf60a7c", "patch": "@@ -1085,6 +1085,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define LOCAL_REGNO(REGNO)  0\n #endif\n \n+#ifndef HONOR_REG_ALLOC_ORDER\n+#define HONOR_REG_ALLOC_ORDER 0\n+#endif\n+\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers.  */"}, {"sha": "ed35bcb235194382858328acffc1ac66216f449f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ed15c5984e10f6556dffdf397accff804bf60a7c", "patch": "@@ -2044,8 +2044,8 @@ Normally, IRA tries to estimate the costs for saving a register in the\n prologue and restoring it in the epilogue.  This discourages it from\n using call-saved registers.  If a machine wants to ensure that IRA\n allocates registers in the order given by REG_ALLOC_ORDER even if some\n-call-saved registers appear earlier than call-used ones, this macro\n-should be defined.\n+call-saved registers appear earlier than call-used ones, then define this\n+macro as a C expression to nonzero. Default is 0.\n @end defmac\n \n @defmac IRA_HARD_REGNO_ADD_COST_MULTIPLIER (@var{regno})"}, {"sha": "a5c374179271c34aa06cc4a0513f3b27222c62aa", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=ed15c5984e10f6556dffdf397accff804bf60a7c", "patch": "@@ -1849,8 +1849,8 @@ Normally, IRA tries to estimate the costs for saving a register in the\n prologue and restoring it in the epilogue.  This discourages it from\n using call-saved registers.  If a machine wants to ensure that IRA\n allocates registers in the order given by REG_ALLOC_ORDER even if some\n-call-saved registers appear earlier than call-used ones, this macro\n-should be defined.\n+call-saved registers appear earlier than call-used ones, then define this\n+macro as a C expression to nonzero. Default is 0.\n @end defmac\n \n @defmac IRA_HARD_REGNO_ADD_COST_MULTIPLIER (@var{regno})"}, {"sha": "28a6d40eb1d658c30a95c2893ecc79b8980487fb", "filename": "gcc/ira-color.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed15c5984e10f6556dffdf397accff804bf60a7c/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=ed15c5984e10f6556dffdf397accff804bf60a7c", "patch": "@@ -1599,7 +1599,6 @@ check_hard_reg_p (ira_allocno_t a, int hard_regno,\n     }\n   return j == nregs;\n }\n-#ifndef HONOR_REG_ALLOC_ORDER\n \n /* Return number of registers needed to be saved and restored at\n    function prologue/epilogue if we allocate HARD_REGNO to hold value\n@@ -1618,7 +1617,6 @@ calculate_saved_nregs (int hard_regno, enum machine_mode mode)\n       nregs++;\n   return nregs;\n }\n-#endif\n \n /* Choose a hard register for allocno A.  If RETRY_P is TRUE, it means\n    that the function called from function\n@@ -1653,11 +1651,9 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n   enum reg_class aclass;\n   enum machine_mode mode;\n   static int costs[FIRST_PSEUDO_REGISTER], full_costs[FIRST_PSEUDO_REGISTER];\n-#ifndef HONOR_REG_ALLOC_ORDER\n   int saved_nregs;\n   enum reg_class rclass;\n   int add_cost;\n-#endif\n #ifdef STACK_REGS\n   bool no_stack_reg_p;\n #endif\n@@ -1823,19 +1819,20 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n \tcontinue;\n       cost = costs[i];\n       full_cost = full_costs[i];\n-#ifndef HONOR_REG_ALLOC_ORDER\n-      if ((saved_nregs = calculate_saved_nregs (hard_regno, mode)) != 0)\n-\t/* We need to save/restore the hard register in\n-\t   epilogue/prologue.  Therefore we increase the cost.  */\n+      if (!HONOR_REG_ALLOC_ORDER)\n \t{\n-\t  rclass = REGNO_REG_CLASS (hard_regno);\n-\t  add_cost = ((ira_memory_move_cost[mode][rclass][0]\n-\t\t       + ira_memory_move_cost[mode][rclass][1])\n-\t\t      * saved_nregs / hard_regno_nregs[hard_regno][mode] - 1);\n-\t  cost += add_cost;\n-\t  full_cost += add_cost;\n+\t  if ((saved_nregs = calculate_saved_nregs (hard_regno, mode)) != 0)\n+\t  /* We need to save/restore the hard register in\n+\t     epilogue/prologue.  Therefore we increase the cost.  */\n+\t  {\n+\t    rclass = REGNO_REG_CLASS (hard_regno);\n+\t    add_cost = ((ira_memory_move_cost[mode][rclass][0]\n+\t\t         + ira_memory_move_cost[mode][rclass][1])\n+\t\t        * saved_nregs / hard_regno_nregs[hard_regno][mode] - 1);\n+\t    cost += add_cost;\n+\t    full_cost += add_cost;\n+\t  }\n \t}\n-#endif\n       if (min_cost > cost)\n \tmin_cost = cost;\n       if (min_full_cost > full_cost)"}]}