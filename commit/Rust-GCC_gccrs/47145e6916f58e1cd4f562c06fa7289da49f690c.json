{"sha": "47145e6916f58e1cd4f562c06fa7289da49f690c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxNDVlNjkxNmY1OGUxY2Q0ZjU2MmMwNmZhNzI4OWRhNDlmNjkwYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-23T15:08:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-23T15:18:03Z"}, "message": "c++: typedef for linkage [PR 99208]\n\nUnnamed types with a typedef name for linkage were always troublesome\nin modules.  This is the underlying cause of that trouble -- we were\ncreating incorrect type structures.  Classes have an implicit\nself-reference, and we created that for unnamed classes too.  It turns\nout we make use of this member, so just not generating it turned into\na rathole.  This member is created using the anonymous name -- because\nwe've not yet met the typedef name.  When we retrofit the typedef name\nwe were checking identifier matching and changing all type variants\nwith that identifier.  Which meant we ended up with a strange typedef\nfor the self reference.  This fixes things to check for DECL identity\nof the variants, so we don't smash the self-reference -- that\ncontinues to have the anonymous name.\n\n\tPR c++/99208\n\tgcc/cp/\n\t* decl.c (name_unnamed_type): Check DECL identity, not IDENTIFIER\n\tidentity.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99208_a.C: New.\n\t* g++.dg/modules/pr99208_b.C: New.", "tree": {"sha": "d79a8b9622e100e16cace7a97ffe8c4e437fd695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d79a8b9622e100e16cace7a97ffe8c4e437fd695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47145e6916f58e1cd4f562c06fa7289da49f690c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47145e6916f58e1cd4f562c06fa7289da49f690c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47145e6916f58e1cd4f562c06fa7289da49f690c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47145e6916f58e1cd4f562c06fa7289da49f690c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8384545784696fbd66aaec24a998a819e912c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8384545784696fbd66aaec24a998a819e912c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8384545784696fbd66aaec24a998a819e912c5"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "1742e286d9f66b8e0111bcb79a31d5e2814c551a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47145e6916f58e1cd4f562c06fa7289da49f690c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47145e6916f58e1cd4f562c06fa7289da49f690c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=47145e6916f58e1cd4f562c06fa7289da49f690c", "patch": "@@ -11081,21 +11081,18 @@ name_unnamed_type (tree type, tree decl)\n {\n   gcc_assert (TYPE_UNNAMED_P (type));\n \n-  /* Replace the anonymous name with the real name everywhere.  */\n+  /* Replace the anonymous decl with the real decl.  Be careful not to\n+     rename other typedefs (such as the self-reference) of type.  */\n+  tree orig = TYPE_NAME (type);\n   for (tree t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-    if (IDENTIFIER_ANON_P (TYPE_IDENTIFIER (t)))\n-      /* We do not rename the debug info representing the unnamed\n-\t tagged type because the standard says in [dcl.typedef] that\n-\t the naming applies only for linkage purposes.  */\n-      /*debug_hooks->set_name (t, decl);*/\n+    if (TYPE_NAME (t) == orig)\n       TYPE_NAME (t) = decl;\n \n   /* If this is a typedef within a template class, the nested\n      type is a (non-primary) template.  The name for the\n      template needs updating as well.  */\n   if (TYPE_LANG_SPECIFIC (type) && CLASSTYPE_TEMPLATE_INFO (type))\n-    DECL_NAME (CLASSTYPE_TI_TEMPLATE (type))\n-      = TYPE_IDENTIFIER (type);\n+    DECL_NAME (CLASSTYPE_TI_TEMPLATE (type)) = DECL_NAME (decl);\n \n   /* Adjust linkage now that we aren't unnamed anymore.  */\n   reset_type_linkage (type);"}, {"sha": "427c7f1b04c4ca14994123073554edd929b20644", "filename": "gcc/testsuite/g++.dg/modules/pr99208_a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47145e6916f58e1cd4f562c06fa7289da49f690c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99208_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47145e6916f58e1cd4f562c06fa7289da49f690c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99208_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99208_a.C?ref=47145e6916f58e1cd4f562c06fa7289da49f690c", "patch": "@@ -0,0 +1,9 @@\n+// PR 99208 typedef anonymous class\n+// { dg-additional-options {-Wno-pedantic -fmodules-ts} }\n+module;\n+# 5 \"pr99208_a.C\" 1\n+typedef struct {} __mbstate_t;\n+# 7 \"\" 2\n+export module hello:format;\n+// { dg-module-cmi {hello:format} }\n+export __mbstate_t v;"}, {"sha": "0ed68d8069ac2da3b9c4b0cbd3abb543014b7f97", "filename": "gcc/testsuite/g++.dg/modules/pr99208_b.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47145e6916f58e1cd4f562c06fa7289da49f690c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99208_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47145e6916f58e1cd4f562c06fa7289da49f690c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99208_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99208_b.C?ref=47145e6916f58e1cd4f562c06fa7289da49f690c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options {-fmodules-ts} }\n+export module hello;\n+// { dg-module-cmi hello }\n+export import :format;"}]}