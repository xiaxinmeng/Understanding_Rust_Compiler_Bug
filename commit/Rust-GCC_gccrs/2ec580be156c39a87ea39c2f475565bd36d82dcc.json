{"sha": "2ec580be156c39a87ea39c2f475565bd36d82dcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjNTgwYmUxNTZjMzlhODdlYTM5YzJmNDc1NTY1YmQzNmQ4MmRjYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-07-31T10:22:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-07-31T10:22:41Z"}, "message": "re PR target/25967 (Add attribute naked for x86)\n\n\tPR target/25967\n\t* config/i386/i386.c (ix86_function_naked): New function.\n\t(ix86_can_use_return_insn_p): Return false for naked functions.\n\t(ix86_expand_prologue): Skip prologue for naked functions.\n\t(ix86_expand_epilogue): Skip epilogue for naked functions\n\tand emit trap instruction.\n\t(ix86_warn_func_return): New function.\n\t(ix86_attribute_table): Add \"naked\" attribute specification.\n\t(TARGET_WARN_FUNC_RETURN): Define.\n\t* doc/extend.texi (x86 Function Attributes) <naked>: Document it.\n\ntestsuite/ChangeLog:\n\n\tPR target/25967\n\t* gcc.target/i386/naked-1.c: New test.\n\t* gcc.target/i386/naked-2.c: Ditto.\n\t* gcc.target/i386/naked-3.c: Ditto.\n\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.c: Remove\n\tdo_test_body0 stub function, use attribute \"naked\" instead.\n\t* gcc.dg/pr44290-1.c: Use naked_functions effective target.\n\t* gcc.dg/pr44290-2.c: Ditto.\n\nFrom-SVN: r250736", "tree": {"sha": "3c8c015e05face5b65528fc39a51a140f7eeb648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8c015e05face5b65528fc39a51a140f7eeb648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec580be156c39a87ea39c2f475565bd36d82dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec580be156c39a87ea39c2f475565bd36d82dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec580be156c39a87ea39c2f475565bd36d82dcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec580be156c39a87ea39c2f475565bd36d82dcc/comments", "author": null, "committer": null, "parents": [{"sha": "cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5"}], "stats": {"total": 161, "additions": 145, "deletions": 16}, "files": [{"sha": "54e9a2e684168ae076d027ae0a9bd113750faa08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -1,7 +1,19 @@\n+2017-07-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/25967\n+\t* config/i386/i386.c (ix86_function_naked): New function.\n+\t(ix86_can_use_return_insn_p): Return false for naked functions.\n+\t(ix86_expand_prologue): Skip prologue for naked functions.\n+\t(ix86_expand_epilogue): Skip epilogue for naked functions\n+\tand emit trap instruction.\n+\t(ix86_warn_func_return): New function.\n+\t(ix86_attribute_table): Add \"naked\" attribute specification.\n+\t(TARGET_WARN_FUNC_RETURN): Define.\n+\t* doc/extend.texi (x86 Function Attributes) <naked>: Document it.\n+\n 2017-07-31  Martin Liska  <mliska@suse.cz>\n \n-\t* gimple-pretty-print.c (dump_gimple_label): Never dump\n-\tBB info.\n+\t* gimple-pretty-print.c (dump_gimple_label): Never dump BB info.\n \t(dump_gimple_bb_header): Always dump BB info.\n \t(pp_cfg_jump): Do not append info about BB when dumping a jump.\n "}, {"sha": "9a35c995f26ab590b27ea7acde738e5539b9315b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -8748,6 +8748,15 @@ ix86_function_ms_hook_prologue (const_tree fn)\n   return false;\n }\n \n+static bool\n+ix86_function_naked (const_tree fn)\n+{\n+  if (fn && lookup_attribute (\"naked\", DECL_ATTRIBUTES (fn)))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Write the extra assembler code needed to declare a function properly.  */\n \n void\n@@ -12249,6 +12258,9 @@ ix86_can_use_return_insn_p (void)\n {\n   struct ix86_frame frame;\n \n+  if (ix86_function_naked (current_function_decl))\n+    return false;\n+\n   /* Don't use `ret' instruction in interrupt handler.  */\n   if (! reload_completed\n       || frame_pointer_needed\n@@ -14327,6 +14339,9 @@ ix86_expand_prologue (void)\n   bool sse_registers_saved;\n   rtx static_chain = NULL_RTX;\n \n+  if (ix86_function_naked (current_function_decl))\n+    return;\n+\n   ix86_finalize_stack_realign_flags ();\n \n   /* DRAP should not coexist with stack_realign_fp */\n@@ -15184,6 +15199,13 @@ ix86_expand_epilogue (int style)\n   bool using_drap;\n   bool restore_stub_is_tail = false;\n \n+  if (ix86_function_naked (current_function_decl))\n+    {\n+      /* The program should not reach this point.  */\n+      emit_insn (gen_trap ());\n+      return;\n+    }\n+\n   ix86_finalize_stack_realign_flags ();\n   frame = m->frame;\n \n@@ -31652,6 +31674,14 @@ ix86_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t\t     LCT_NORMAL, VOIDmode, 1, XEXP (m_tramp, 0), Pmode);\n #endif\n }\n+\n+static bool\n+ix86_warn_func_return (tree decl)\n+{\n+  /* Naked functions are implemented entirely in assembly, including the\n+     return sequence, so suppress warnings about this.  */\n+  return !ix86_function_naked (decl);\n+}\n \f\n /* The following file contains several enumerations and data structures\n    built from the definitions in i386-builtin-types.def.  */\n@@ -46486,6 +46516,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_interrupt_attribute, false },\n   { \"no_caller_saved_registers\", 0, 0, false, true, true,\n     ix86_handle_no_caller_saved_registers_attribute, false },\n+  { \"naked\", 0, 0, true, false, false,\n+    ix86_handle_fndecl_attribute, false },\n \n   /* End element.  */\n   { NULL,        0, 0, false, false, false, NULL, false }\n@@ -52722,6 +52754,9 @@ ix86_run_selftests (void)\n #undef TARGET_RETURN_POPS_ARGS\n #define TARGET_RETURN_POPS_ARGS ix86_return_pops_args\n \n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN ix86_warn_func_return\n+\n #undef TARGET_LEGITIMATE_COMBINED_INSN\n #define TARGET_LEGITIMATE_COMBINED_INSN ix86_legitimate_combined_insn\n "}, {"sha": "34cb7d3dd22592b096a404ccf15b7f4bdbfa6f3b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -5370,6 +5370,17 @@ this function attribute to make GCC generate the ``hot-patching'' function\n prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n and newer.\n \n+@item naked\n+@cindex @code{naked} function attribute, x86\n+This attribute allows the compiler to construct the\n+requisite function declaration, while allowing the body of the\n+function to be assembly code. The specified function will not have\n+prologue/epilogue sequences generated by the compiler. Only basic\n+@code{asm} statements can safely be included in naked functions\n+(@pxref{Basic Asm}). While using extended @code{asm} or a mixture of\n+basic @code{asm} and C code may appear to work, they cannot be\n+depended upon to work reliably and are not supported.\n+\n @item regparm (@var{number})\n @cindex @code{regparm} function attribute, x86\n @cindex functions that are passed arguments in registers on x86-32"}, {"sha": "68ef6fc9365b8a93d403edc4f884413031f7d5cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -1,3 +1,14 @@\n+2017-07-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/25967\n+\t* gcc.target/i386/naked-1.c: New test.\n+\t* gcc.target/i386/naked-2.c: Ditto.\n+\t* gcc.target/i386/naked-3.c: Ditto.\n+\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.c: Remove\n+\tdo_test_body0 stub function, use attribute \"naked\" instead.\n+\t* gcc.dg/pr44290-1.c: Use naked_functions effective target.\n+\t* gcc.dg/pr44290-2.c: Ditto.\n+\n 2017-07-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/81581"}, {"sha": "05d2454fc31851e5b83217cc6f92e03728c49722", "filename": "gcc/testsuite/gcc.dg/pr44290-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-1.c?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do compile { target arm*-*-* avr-*-* mcore-*-* rx-*-* spu-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target naked_functions } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n static void __attribute__((naked))"}, {"sha": "073351091149a97f448c743cdf08c037f6cfdf65", "filename": "gcc/testsuite/gcc.dg/pr44290-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44290-2.c?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do compile { target arm*-*-* avr-*-* mcore-*-* rx-*-* spu-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target naked_functions } */\n /* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n static unsigned long __attribute__((naked))"}, {"sha": "440dbe9ee7aa0edfe38e5a7aa2bcd2310768625b", "filename": "gcc/testsuite/gcc.target/i386/naked-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-1.c?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+/* Verify that __attribute__((naked)) produces a naked function \n+   that does not use ret to return but traps at the end.  */\n+void\n+__attribute__((naked))\n+foo (void)\n+{\n+  __asm__ (\"# naked\");\n+}\n+/* { dg-final { scan-assembler \"# naked\" } } */\n+/* { dg-final { scan-assembler \"ud2\" } } */\n+/* { dg-final { scan-assembler-not \"ret\" } } */"}, {"sha": "adcd7121541642ba20458ef9ac4cfe58d2c77c01", "filename": "gcc/testsuite/gcc.target/i386/naked-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-2.c?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+/* Verify that __attribute__((naked)) produces a naked function \n+   that does not construct a frame.  */\n+void\n+__attribute__((naked))\n+foo (void)\n+{\n+  __asm__ (\"# naked\");\n+}\n+/* { dg-final { scan-assembler \"# naked\" } } */\n+/* { dg-final { scan-assembler-not \"push\" } } */\n+/* { dg-final { scan-assembler-not \"pop\" } } */"}, {"sha": "845300d6e4a61b8bdaf002af2ba205a6de511ba5", "filename": "gcc/testsuite/gcc.target/i386/naked-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-3.c?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target *-*-linux* *-*-gnu* } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <unistd.h>\n+#include <signal.h>\n+#include <stdlib.h>\n+\n+int data;\n+\n+/* Verify that naked function traps at the end.  */\n+\n+void\n+__attribute__((naked, noinline, noclone))\n+naked (void)\n+{\n+  if (data == 0x12345678)\n+    return;\n+  asm (\"ret\");\n+}\n+\n+void handler (int i)\n+{\n+  exit (0);\n+}\n+\n+int main ()\n+{\n+  struct sigaction s;\n+\n+  sigemptyset (&s.sa_mask);\n+  s.sa_handler = handler;\n+  s.sa_flags = 0;\n+  sigaction (SIGILL, &s, NULL);\n+\n+  data = 0x12345678;\n+  naked ();\n+\n+  abort ();\n+}"}, {"sha": "5fdd1e20674b0e5b847961f584969b9d4b2d5816", "filename": "gcc/testsuite/gcc.target/x86_64/abi/ms-sysv/ms-sysv.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec580be156c39a87ea39c2f475565bd36d82dcc/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c?ref=2ec580be156c39a87ea39c2f475565bd36d82dcc", "patch": "@@ -169,15 +169,9 @@ static const char *argv0;\n \n #define TEST_DATA_OFFSET(f)\t((int)__builtin_offsetof(struct test_data, f))\n \n-void __attribute__((used))\n-do_test_body0 (void)\n-{\n-  __asm__ (\"\\n\"\n-\t\"\t.globl \" ASMNAME(do_test_body) \"\\n\"\n-#ifdef __ELF__\n-\t\"\t.type \" ASMNAME(do_test_body) \",@function\\n\"\n-#endif\n-\tASMNAME(do_test_body) \":\\n\"\n+void __attribute__((naked))\n+do_test_body (void)\n+{__asm__ (\n \t\"\t# rax, r10 and r11 are usable here.\\n\"\n \t\"\\n\"\n \t\"\t# Save registers.\\n\"\n@@ -212,9 +206,6 @@ do_test_body0 (void)\n \t\"\tcall\t\" ASMNAME(mem_to_regs) \"\\n\"\n \t\"\\n\"\n \t\"\tretq\\n\"\n-#ifdef __ELF__\n-\t\"\t.size \" ASMNAME(do_test_body) \",.-\" ASMNAME(do_test_body) \"\\n\"\n-#endif\n \t::\n \t\"i\"(TEST_DATA_OFFSET(regdata[REG_SET_SAVE])),\n \t\"i\"(TEST_DATA_OFFSET(regdata[REG_SET_INPUT])),"}]}