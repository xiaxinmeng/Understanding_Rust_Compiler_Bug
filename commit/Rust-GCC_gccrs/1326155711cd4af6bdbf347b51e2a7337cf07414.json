{"sha": "1326155711cd4af6bdbf347b51e2a7337cf07414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMyNjE1NTcxMWNkNGFmNmJkYmYzNDdiNTFlMmE3MzM3Y2YwNzQxNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-09T19:29:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-09T19:29:38Z"}, "message": "re PR lto/61886 (LTO breaks fread with _FORTIFY_SOURCE=2)\n\n\n\tPR ipa/61886\n\tPR middle-end/25140\n\t* ipa-reference.c (ipa_reference_get_not_read_global,\n\tipa_reference_get_not_read_global): Fix WRT aliases.\n\t(is_improper): Break out from ...\n\t(is_proper_for_analysis): ... here; fix WRT aliases.\n\t(analyze_function, generate_summary,\n\tipa_reference_write_optimization_summary,\n\tipa_reference_read_optimization_summary): Use ipa_reference_var_uid.\n\t* ipa-refrence.h (ipa_reference_var_uid): New inline.\n\t* tree-ssa-alias.c: Revert my accidental previous commit.\n\t(ref_maybe_used_by_call_p_1,\n\tcall_may_clobber_ref_p_1): Use ipa_reference_var_uid.\n\nFrom-SVN: r231471", "tree": {"sha": "4d484ae9a9e235802ede77e2da1d0a8cf358608a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d484ae9a9e235802ede77e2da1d0a8cf358608a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1326155711cd4af6bdbf347b51e2a7337cf07414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1326155711cd4af6bdbf347b51e2a7337cf07414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1326155711cd4af6bdbf347b51e2a7337cf07414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1326155711cd4af6bdbf347b51e2a7337cf07414/comments", "author": null, "committer": null, "parents": [{"sha": "0a04f2dfc296b88d71a59399d3db62639580e844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a04f2dfc296b88d71a59399d3db62639580e844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a04f2dfc296b88d71a59399d3db62639580e844"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "22e87afdda57f01b6d93257e60511f0ec0f39f6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326155711cd4af6bdbf347b51e2a7337cf07414/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326155711cd4af6bdbf347b51e2a7337cf07414/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1326155711cd4af6bdbf347b51e2a7337cf07414", "patch": "@@ -1,3 +1,19 @@\n+2015-12-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/61886\n+\tPR middle-end/25140\n+\t* ipa-reference.c (ipa_reference_get_not_read_global,\n+\tipa_reference_get_not_read_global): Fix WRT aliases.\n+\t(is_improper): Break out from ...\n+\t(is_proper_for_analysis): ... here; fix WRT aliases.\n+\t(analyze_function, generate_summary,\n+\tipa_reference_write_optimization_summary,\n+\tipa_reference_read_optimization_summary): Use ipa_reference_var_uid.\n+\t* ipa-refrence.h (ipa_reference_var_uid): New inline.\n+\t* tree-ssa-alias.c: Revert my accidental previous commit.\n+\t(ref_maybe_used_by_call_p_1,\n+\tcall_may_clobber_ref_p_1): Use ipa_reference_var_uid.\n+\n 2015-12-09  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* config/rs6000/freebsd64.h: Remove the redefinition of WCHAR_TYPE.\n@@ -119,6 +135,7 @@\n \t* tree-vectorizer.h (set_vinfo_for_stmt): Assert we don't\n \toverwrite an existing entry.\n \n+>>>>>>> .r231469\n 2015-12-09  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* c-family/c-omp.c (c_finish_oacc_wait): Remove add_stmt() call."}, {"sha": "7d7f4ac23098abae6869e2796ea866a429eeb529", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326155711cd4af6bdbf347b51e2a7337cf07414/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326155711cd4af6bdbf347b51e2a7337cf07414/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=1326155711cd4af6bdbf347b51e2a7337cf07414", "patch": "@@ -174,14 +174,22 @@ set_reference_optimization_summary (struct cgraph_node *node,\n bitmap\n ipa_reference_get_not_read_global (struct cgraph_node *fn)\n {\n-  if (!opt_for_fn (fn->decl, flag_ipa_reference)\n-      || !opt_for_fn (current_function_decl, flag_ipa_reference))\n+  if (!opt_for_fn (current_function_decl, flag_ipa_reference))\n     return NULL;\n+\n+  enum availability avail;\n+  struct cgraph_node *fn2 = fn->function_symbol (&avail);\n   ipa_reference_optimization_summary_t info =\n-    get_reference_optimization_summary (fn->function_symbol (NULL));\n-  if (info)\n+    get_reference_optimization_summary (fn2);\n+\n+  if (info\n+      && (avail >= AVAIL_AVAILABLE\n+\t  || (avail == AVAIL_INTERPOSABLE\n+\t      && flags_from_decl_or_type (fn->decl) & ECF_LEAF))\n+      && opt_for_fn (fn2->decl, flag_ipa_reference))\n     return info->statics_not_read;\n-  else if (flags_from_decl_or_type (fn->decl) & ECF_LEAF)\n+  else if (avail == AVAIL_NOT_AVAILABLE\n+\t   && flags_from_decl_or_type (fn->decl) & ECF_LEAF)\n     return all_module_statics;\n   else\n     return NULL;\n@@ -195,14 +203,22 @@ ipa_reference_get_not_read_global (struct cgraph_node *fn)\n bitmap\n ipa_reference_get_not_written_global (struct cgraph_node *fn)\n {\n-  if (!opt_for_fn (fn->decl, flag_ipa_reference)\n-      || !opt_for_fn (current_function_decl, flag_ipa_reference))\n+  if (!opt_for_fn (current_function_decl, flag_ipa_reference))\n     return NULL;\n+\n+  enum availability avail;\n+  struct cgraph_node *fn2 = fn->function_symbol (&avail);\n   ipa_reference_optimization_summary_t info =\n-    get_reference_optimization_summary (fn);\n-  if (info)\n+    get_reference_optimization_summary (fn2);\n+\n+  if (info\n+      && (avail >= AVAIL_AVAILABLE\n+\t  || (avail == AVAIL_INTERPOSABLE\n+\t      && flags_from_decl_or_type (fn->decl) & ECF_LEAF))\n+      && opt_for_fn (fn2->decl, flag_ipa_reference))\n     return info->statics_not_written;\n-  else if (flags_from_decl_or_type (fn->decl) & ECF_LEAF)\n+  else if (avail == AVAIL_NOT_AVAILABLE\n+\t   && flags_from_decl_or_type (fn->decl) & ECF_LEAF)\n     return all_module_statics;\n   else\n     return NULL;"}, {"sha": "b0ab6fb46aa0e467ad56c83b9a4b2b610be1801e", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1326155711cd4af6bdbf347b51e2a7337cf07414/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1326155711cd4af6bdbf347b51e2a7337cf07414/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1326155711cd4af6bdbf347b51e2a7337cf07414", "patch": "@@ -1739,21 +1739,15 @@ ref_maybe_used_by_call_p_1 (gcall *call, ao_ref *ref)\n       && TREE_STATIC (base))\n     {\n       struct cgraph_node *node = cgraph_node::get (callee);\n+      bitmap not_read;\n \n       /* FIXME: Callee can be an OMP builtin that does not have a call graph\n \t node yet.  We should enforce that there are nodes for all decls in the\n \t IL and remove this check instead.  */\n-      if (node)\n-\t{\n-\t  enum availability avail;\n-\t  bitmap not_read;\n-\n-\t  node = node->ultimate_alias_target (&avail);\n-\t  if (avail >= AVAIL_AVAILABLE\n-\t      && (not_read = ipa_reference_get_not_read_global (node))\n-\t      && bitmap_bit_p (not_read, ipa_reference_var_uid (base)))\n-\t    goto process_args;\n-\t}\n+      if (node\n+\t  && (not_read = ipa_reference_get_not_read_global (node))\n+\t  && bitmap_bit_p (not_read, ipa_reference_var_uid (base)))\n+\tgoto process_args;\n     }\n \n   /* Check if the base variable is call-used.  */\n@@ -2134,18 +2128,12 @@ call_may_clobber_ref_p_1 (gcall *call, ao_ref *ref)\n       && TREE_STATIC (base))\n     {\n       struct cgraph_node *node = cgraph_node::get (callee);\n+      bitmap not_written;\n \n-      if (node)\n-\t{\n-\t  bitmap not_written;\n-\t  enum availability avail;\n-\n-\t  node = node->ultimate_alias_target (&avail);\n-\t  if (avail >= AVAIL_AVAILABLE\n-\t      && (not_written = ipa_reference_get_not_written_global (node))\n-\t      && bitmap_bit_p (not_written, ipa_reference_var_uid (base)))\n-\t    return false;\n-\t}\n+      if (node\n+\t  && (not_written = ipa_reference_get_not_written_global (node))\n+\t  && bitmap_bit_p (not_written, ipa_reference_var_uid (base)))\n+\treturn false;\n     }\n \n   /* Check if the base variable is call-clobbered.  */"}]}