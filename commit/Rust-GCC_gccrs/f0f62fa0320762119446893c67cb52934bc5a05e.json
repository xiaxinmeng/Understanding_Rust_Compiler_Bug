{"sha": "f0f62fa0320762119446893c67cb52934bc5a05e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBmNjJmYTAzMjA3NjIxMTk0NDY4OTNjNjdjYjUyOTM0YmM1YTA1ZQ==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-07-02T16:11:56Z"}, "committer": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2020-07-09T08:50:25Z"}, "message": "aarch64: Fix BTI support in libgcc [PR96001]\n\nlse.S did not have the GNU property note markup and the BTI c\ninstructions that are necessary when it is built with branch\nprotection.\n\nThe notes are only added when libgcc is built with branch\nprotection, because old linkers mishandle the note (merge\nthem incorrectly or emit warnings), the BTI instructions\nare added unconditionally.\n\nNote: BTI c is only necessary at function entry if the function\nmay be called indirectly, currently lse functions are not called\nindirectly, but BTI is added for ABI reasons e.g. to allow\nlinkers later to emit stub code with indirect jump.\n\n2020-07-09  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\nlibgcc/ChangeLog:\n\n\tPR target/96001\n\t* config/aarch64/lse.S: Add BTI marking and related definitions,\n\tand add BTI c to function entries.", "tree": {"sha": "1841e5c0ef8c00a05635c2eae2996b72fe3a8804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1841e5c0ef8c00a05635c2eae2996b72fe3a8804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0f62fa0320762119446893c67cb52934bc5a05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f62fa0320762119446893c67cb52934bc5a05e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0f62fa0320762119446893c67cb52934bc5a05e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f62fa0320762119446893c67cb52934bc5a05e/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73ec755489afc9fcc75dfac6f06ac73e243e72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73ec755489afc9fcc75dfac6f06ac73e243e72a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73ec755489afc9fcc75dfac6f06ac73e243e72a"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "64691c601c146209739a91a336f91663742ae9b6", "filename": "libgcc/config/aarch64/lse.S", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0f62fa0320762119446893c67cb52934bc5a05e/libgcc%2Fconfig%2Faarch64%2Flse.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0f62fa0320762119446893c67cb52934bc5a05e/libgcc%2Fconfig%2Faarch64%2Flse.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flse.S?ref=f0f62fa0320762119446893c67cb52934bc5a05e", "patch": "@@ -136,6 +136,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define tmp1\t17\n #define tmp2\t15\n \n+#define BTI_C\thint\t34\n+\n /* Start and end a function.  */\n .macro\tSTARTFN name\n \t.text\n@@ -145,6 +147,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \t.type\t\\name, %function\n \t.cfi_startproc\n \\name:\n+\tBTI_C\n .endm\n \n .macro\tENDFN name\n@@ -275,6 +278,29 @@ STARTFN\tNAME(LDNM)\n ENDFN\tNAME(LDNM)\n #endif\n \n+/* GNU_PROPERTY_AARCH64_* macros from elf.h for use in asm code.  */\n+#define FEATURE_1_AND 0xc0000000\n+#define FEATURE_1_BTI 1\n+#define FEATURE_1_PAC 2\n+\n+/* Add a NT_GNU_PROPERTY_TYPE_0 note.  */\n+#define GNU_PROPERTY(type, value)\t\\\n+  .section .note.gnu.property, \"a\";\t\\\n+  .p2align 3;\t\t\t\t\\\n+  .word 4;\t\t\t\t\\\n+  .word 16;\t\t\t\t\\\n+  .word 5;\t\t\t\t\\\n+  .asciz \"GNU\";\t\t\t\t\\\n+  .word type;\t\t\t\t\\\n+  .word 4;\t\t\t\t\\\n+  .word value;\t\t\t\t\\\n+  .word 0;\n+\n #if defined(__linux__) || defined(__FreeBSD__)\n .section .note.GNU-stack, \"\", %progbits\n+\n+/* Add GNU property note if built with branch protection.  */\n+# ifdef __ARM_FEATURE_BTI_DEFAULT\n+GNU_PROPERTY (FEATURE_1_AND, FEATURE_1_BTI)\n+# endif\n #endif"}]}