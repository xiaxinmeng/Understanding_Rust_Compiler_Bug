{"sha": "12f7c8764c9f91c3fe74bd4f5c4f644583fb913f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmN2M4NzY0YzlmOTFjM2ZlNzRiZDRmNWM0ZjY0NDU4M2ZiOTEzZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-03T20:39:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-03T20:39:24Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1149", "tree": {"sha": "b2c5f1ec323ba6dfed00ae527dec6a5d6461dea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c5f1ec323ba6dfed00ae527dec6a5d6461dea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12f7c8764c9f91c3fe74bd4f5c4f644583fb913f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f7c8764c9f91c3fe74bd4f5c4f644583fb913f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f7c8764c9f91c3fe74bd4f5c4f644583fb913f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f7c8764c9f91c3fe74bd4f5c4f644583fb913f/comments", "author": null, "committer": null, "parents": [{"sha": "885d8175ed128445b1dbed8b96f32a086e2359ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885d8175ed128445b1dbed8b96f32a086e2359ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885d8175ed128445b1dbed8b96f32a086e2359ac"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "b77b5480c6b313a0578a3e05092563a53c7381e7", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f7c8764c9f91c3fe74bd4f5c4f644583fb913f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f7c8764c9f91c3fe74bd4f5c4f644583fb913f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=12f7c8764c9f91c3fe74bd4f5c4f644583fb913f", "patch": "@@ -1028,10 +1028,17 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t    {\n \t      if (GET_CODE (note) != NOTE && GET_CODE (note) != CODE_LABEL)\n \t\tbreak;\n+\t      /* These types of notes can be significant\n+\t\t so make sure the preceeding line number stays.  */\n+\t      else if (GET_CODE (note) == NOTE\n+\t\t       && (NOTE_LINE_NUMBER (note) == NOTE_INSN_BLOCK_BEG\n+\t\t\t   || NOTE_LINE_NUMBER (note) == NOTE_INSN_BLOCK_END\n+\t\t\t   || NOTE_LINE_NUMBER (note) == NOTE_INSN_FUNCTION_BEG))\n+  \t\tbreak;\n \t      else if (GET_CODE (note) == NOTE && NOTE_LINE_NUMBER (note) > 0)\n \t\t{\n-\t\t  /* Another note follows; we can delete this note provided\n-\t\t     no intervening line numbers have notes elsewhere.  */\n+\t\t  /* Another line note follows; we can delete this note\n+\t\t     if no intervening line numbers have notes elsewhere.  */\n \t\t  int num;\n \t\t  for (num = NOTE_LINE_NUMBER (insn) + 1;\n \t\t       num < NOTE_LINE_NUMBER (note);"}]}