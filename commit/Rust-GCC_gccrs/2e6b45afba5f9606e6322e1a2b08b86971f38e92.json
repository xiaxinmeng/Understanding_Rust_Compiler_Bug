{"sha": "2e6b45afba5f9606e6322e1a2b08b86971f38e92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2YjQ1YWZiYTVmOTYwNmU2MzIyZTFhMmIwOGI4Njk3MWYzOGU5Mg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-07-22T18:32:08Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-07-22T18:32:08Z"}, "message": "PR c++/71675 - __atomic_compare_exchange_n returns wrong type for typed enum\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/71675\n\t* c-common.c (resolve_overloaded_builtin): Avoid converting\n\t__atomic_compare_exchange_n return type to that of what its\n\tfirst argument points to.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/71675\n\t* g++.dg/ext/atomic-3.C: New test.\n\t* gcc.dg/atomic/pr71675.c: New test.\n\nFrom-SVN: r238664", "tree": {"sha": "a853bd1f354648d922e4b463a253980804d5fdd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a853bd1f354648d922e4b463a253980804d5fdd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e6b45afba5f9606e6322e1a2b08b86971f38e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6b45afba5f9606e6322e1a2b08b86971f38e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6b45afba5f9606e6322e1a2b08b86971f38e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6b45afba5f9606e6322e1a2b08b86971f38e92/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22b955cca564a9a3a5b8c9d9dd1e295b7943c128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b955cca564a9a3a5b8c9d9dd1e295b7943c128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b955cca564a9a3a5b8c9d9dd1e295b7943c128"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "5c1930518247d61e40485289e0160700f0d7e38d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2e6b45afba5f9606e6322e1a2b08b86971f38e92", "patch": "@@ -1,3 +1,10 @@\n+2016-07-22 Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/71675\n+\t* c-common.c (resolve_overloaded_builtin): Avoid converting\n+\t__atomic_compare_exchange_n return type to that of what its\n+\tfirst argument points to.\n+\n 2016-07-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* c-common.c: Use HOST_WIDE_INT_M1U instead of"}, {"sha": "1c5974a8e9289c2d7c7736c0a7efdbbde82530f0", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2e6b45afba5f9606e6322e1a2b08b86971f38e92", "patch": "@@ -11514,7 +11514,8 @@ resolve_overloaded_builtin (location_t loc, tree function,\n \t  return result;\n \tif (orig_code != BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N\n \t    && orig_code != BUILT_IN_SYNC_LOCK_RELEASE_N\n-\t    && orig_code != BUILT_IN_ATOMIC_STORE_N)\n+\t    && orig_code != BUILT_IN_ATOMIC_STORE_N\n+\t    && orig_code != BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N)\n \t  result = sync_resolve_return (first_param, result, orig_format);\n \n \tif (fetch_op)"}, {"sha": "c38c41e492b7d2afe33b550935755823ff53fd3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e6b45afba5f9606e6322e1a2b08b86971f38e92", "patch": "@@ -1,3 +1,9 @@\n+2016-07-22 Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/71675\n+\t* g++.dg/ext/atomic-3.C: New test.\n+\t* gcc.dg/atomic/pr71675.c: New test.\n+\n 2016-07-22  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* gcc.target/i386/mvc8.c: New test."}, {"sha": "89ca7188aaad56f580e1f7c20098f095a8552b55", "filename": "gcc/testsuite/g++.dg/ext/atomic-3.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fatomic-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fatomic-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fatomic-3.C?ref=2e6b45afba5f9606e6322e1a2b08b86971f38e92", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/71675 - __atomic_compare_exchange_n returns wrong type for typed enum\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+void sink (T);\n+\n+bool sink (bool);\n+\n+template <class T>\n+bool test ()\n+{\n+  enum class E: T { };\n+  static E e;\n+\n+  return sink (__atomic_compare_exchange_n (&e, &e, e, false, 0, 0));\n+}\n+\n+void tests ()\n+{\n+  // __atomic_compare_exchange_n would fail to return bool when\n+  //   its arguments were one of the three character types.\n+  test<char>();\n+  test<signed char>();\n+  test<unsigned char>();\n+\n+  test<short>();\n+  test<unsigned short>();\n+\n+  test<int>();\n+  test<unsigned int>();\n+\n+  test<long>();\n+  test<unsigned long>();\n+\n+  test<long long>();\n+  test<unsigned long long>();\n+}"}, {"sha": "4a1675cf2f54bc4a6049f61adab60485af636eab", "filename": "gcc/testsuite/gcc.dg/atomic/pr71675.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr71675.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6b45afba5f9606e6322e1a2b08b86971f38e92/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr71675.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr71675.c?ref=2e6b45afba5f9606e6322e1a2b08b86971f38e92", "patch": "@@ -0,0 +1,32 @@\n+/* PR c++/71675 - __atomic_compare_exchange_n returns wrong type for typed enum\n+ */\n+/* { dg-do compile { target c11 } } */\n+\n+#define Test(T)\t\t\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    static T x;\t\t\t\t\t\t\t\t\\\n+    int r [_Generic (__atomic_compare_exchange_n (&x, &x, x, 0, 0, 0),\t\\\n+\t\t     _Bool: 1, default: -1)];\t\t\t\t\\\n+    (void)&r;\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+void f (void)\n+{\n+  /* __atomic_compare_exchange_n would fail to return _Bool when\n+     its arguments were one of the three character types.  */\n+  Test (char);\n+  Test (signed char);\n+  Test (unsigned char);\n+\n+  Test (int);\n+  Test (unsigned int);\n+\n+  Test (long);\n+  Test (unsigned long);\n+\n+  Test (long long);\n+  Test (unsigned long long);\n+\n+  typedef enum E { e } E;\n+  Test (E);\n+}"}]}